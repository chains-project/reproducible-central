public class org.apache.commons.lang3.time.DateUtils extends java.lang.Object
{
public static final long MILLIS_PER_SECOND;
public static final long MILLIS_PER_MINUTE;
public static final long MILLIS_PER_HOUR;
public static final long MILLIS_PER_DAY;
public static final int SEMI_MONTH;
private static final int[][] fields;
public static final int RANGE_WEEK_SUNDAY;
public static final int RANGE_WEEK_MONDAY;
public static final int RANGE_WEEK_RELATIVE;
public static final int RANGE_WEEK_CENTER;
public static final int RANGE_MONTH_SUNDAY;
public static final int RANGE_MONTH_MONDAY;
public void <init>()
{
org.apache.commons.lang3.time.DateUtils v0;
v0 := @this: org.apache.commons.lang3.time.DateUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static boolean isSameDay(java.util.Date, java.util.Date)
{
java.util.Calendar v3, v4;
java.util.Date v0, v1;
java.lang.IllegalArgumentException v2;
boolean v5;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: java.util.Date;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.lang.IllegalArgumentException nullDateIllegalArgumentException()>();
throw v2;
label2:
v3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();
virtualinvoke v3.<java.util.Calendar: void setTime(java.util.Date)>(v0);
v4 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();
virtualinvoke v4.<java.util.Calendar: void setTime(java.util.Date)>(v1);
v5 = staticinvoke <org.apache.commons.lang3.time.DateUtils: boolean isSameDay(java.util.Calendar,java.util.Calendar)>(v3, v4);
return v5;
}
public static boolean isSameDay(java.util.Calendar, java.util.Calendar)
{
java.lang.IllegalArgumentException v2;
java.util.Calendar v0, v1;
int v3, v4, v5, v6, v7, v8;
boolean v9;
v0 := @parameter0: java.util.Calendar;
v1 := @parameter1: java.util.Calendar;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.lang.IllegalArgumentException nullDateIllegalArgumentException()>();
throw v2;
label2:
v3 = virtualinvoke v0.<java.util.Calendar: int get(int)>(0);
v4 = virtualinvoke v1.<java.util.Calendar: int get(int)>(0);
if v3 != v4 goto label3;
v5 = virtualinvoke v0.<java.util.Calendar: int get(int)>(1);
v6 = virtualinvoke v1.<java.util.Calendar: int get(int)>(1);
if v5 != v6 goto label3;
v7 = virtualinvoke v0.<java.util.Calendar: int get(int)>(6);
v8 = virtualinvoke v1.<java.util.Calendar: int get(int)>(6);
if v7 != v8 goto label3;
v9 = 1;
goto label4;
label3:
v9 = 0;
label4:
return v9;
}
public static boolean isSameInstant(java.util.Date, java.util.Date)
{
byte v5;
java.util.Date v0, v1;
long v3, v4;
java.lang.IllegalArgumentException v2;
boolean v6;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: java.util.Date;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.lang.IllegalArgumentException nullDateIllegalArgumentException()>();
throw v2;
label2:
v3 = virtualinvoke v0.<java.util.Date: long getTime()>();
v4 = virtualinvoke v1.<java.util.Date: long getTime()>();
v5 = v3 cmp v4;
if v5 != 0 goto label3;
v6 = 1;
goto label4;
label3:
v6 = 0;
label4:
return v6;
}
public static boolean isSameInstant(java.util.Calendar, java.util.Calendar)
{
java.util.Date v3, v5;
long v4, v6;
java.lang.IllegalArgumentException v2;
java.util.Calendar v0, v1;
byte v7;
boolean v8;
v0 := @parameter0: java.util.Calendar;
v1 := @parameter1: java.util.Calendar;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.lang.IllegalArgumentException nullDateIllegalArgumentException()>();
throw v2;
label2:
v3 = virtualinvoke v0.<java.util.Calendar: java.util.Date getTime()>();
v4 = virtualinvoke v3.<java.util.Date: long getTime()>();
v5 = virtualinvoke v1.<java.util.Calendar: java.util.Date getTime()>();
v6 = virtualinvoke v5.<java.util.Date: long getTime()>();
v7 = v4 cmp v6;
if v7 != 0 goto label3;
v8 = 1;
goto label4;
label3:
v8 = 0;
label4:
return v8;
}
public static boolean isSameLocalTime(java.util.Calendar, java.util.Calendar)
{
java.util.Calendar v0, v1;
int v10, v11, v12, v13, v14, v15, v16, v3, v4, v5, v6, v7, v8, v9;
boolean v19;
java.lang.IllegalArgumentException v2;
java.lang.Class v17, v18;
v0 := @parameter0: java.util.Calendar;
v1 := @parameter1: java.util.Calendar;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.lang.IllegalArgumentException nullDateIllegalArgumentException()>();
throw v2;
label2:
v3 = virtualinvoke v0.<java.util.Calendar: int get(int)>(14);
v4 = virtualinvoke v1.<java.util.Calendar: int get(int)>(14);
if v3 != v4 goto label3;
v5 = virtualinvoke v0.<java.util.Calendar: int get(int)>(13);
v6 = virtualinvoke v1.<java.util.Calendar: int get(int)>(13);
if v5 != v6 goto label3;
v7 = virtualinvoke v0.<java.util.Calendar: int get(int)>(12);
v8 = virtualinvoke v1.<java.util.Calendar: int get(int)>(12);
if v7 != v8 goto label3;
v9 = virtualinvoke v0.<java.util.Calendar: int get(int)>(11);
v10 = virtualinvoke v1.<java.util.Calendar: int get(int)>(11);
if v9 != v10 goto label3;
v11 = virtualinvoke v0.<java.util.Calendar: int get(int)>(6);
v12 = virtualinvoke v1.<java.util.Calendar: int get(int)>(6);
if v11 != v12 goto label3;
v13 = virtualinvoke v0.<java.util.Calendar: int get(int)>(1);
v14 = virtualinvoke v1.<java.util.Calendar: int get(int)>(1);
if v13 != v14 goto label3;
v15 = virtualinvoke v0.<java.util.Calendar: int get(int)>(0);
v16 = virtualinvoke v1.<java.util.Calendar: int get(int)>(0);
if v15 != v16 goto label3;
v17 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v18 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v17 != v18 goto label3;
v19 = 1;
goto label4;
label3:
v19 = 0;
label4:
return v19;
}
public static transient java.util.Date parseDate(java.lang.String, java.lang.String[]) throws java.text.ParseException
{
java.lang.String[] v1;
java.lang.String v0;
java.util.Date v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String[];
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDate(java.lang.String,java.util.Locale,java.lang.String[])>(v0, null, v1);
return v2;
}
public static transient java.util.Date parseDate(java.lang.String, java.util.Locale, java.lang.String[]) throws java.text.ParseException
{
java.util.Date v3;
java.util.Locale v1;
java.lang.String[] v2;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.util.Locale;
v2 := @parameter2: java.lang.String[];
v3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDateWithLeniency(java.lang.String,java.util.Locale,java.lang.String[],boolean)>(v0, v1, v2, 1);
return v3;
}
public static transient java.util.Date parseDateStrictly(java.lang.String, java.lang.String[]) throws java.text.ParseException
{
java.lang.String[] v1;
java.lang.String v0;
java.util.Date v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String[];
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDateStrictly(java.lang.String,java.util.Locale,java.lang.String[])>(v0, null, v1);
return v2;
}
public static transient java.util.Date parseDateStrictly(java.lang.String, java.util.Locale, java.lang.String[]) throws java.text.ParseException
{
java.util.Date v3;
java.util.Locale v1;
java.lang.String[] v2;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.util.Locale;
v2 := @parameter2: java.lang.String[];
v3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date parseDateWithLeniency(java.lang.String,java.util.Locale,java.lang.String[],boolean)>(v0, v1, v2, 0);
return v3;
}
private static java.util.Date parseDateWithLeniency(java.lang.String, java.util.Locale, java.lang.String[], boolean) throws java.text.ParseException
{
java.util.Date v16;
java.text.ParsePosition v7;
java.lang.String[] v2;
java.util.Calendar v8;
java.util.Locale v1, v6;
int v10, v14, v15, v20, v9;
java.lang.String v0, v11, v19;
java.text.ParseException v18;
boolean v13, v3;
java.util.TimeZone v5;
java.lang.IllegalArgumentException v17, v4;
org.apache.commons.lang3.time.FastDateParser v12;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.util.Locale;
v2 := @parameter2: java.lang.String[];
v3 := @parameter3: boolean;
if v0 == null goto label1;
if v2 != null goto label2;
label1:
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Date and Patterns must not be null");
throw v4;
label2:
v5 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();
v6 = staticinvoke <org.apache.commons.lang3.LocaleUtils: java.util.Locale toLocale(java.util.Locale)>(v1);
v7 = new java.text.ParsePosition;
specialinvoke v7.<java.text.ParsePosition: void <init>(int)>(0);
v8 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>(v5, v6);
virtualinvoke v8.<java.util.Calendar: void setLenient(boolean)>(v3);
v9 = lengthof v2;
v10 = 0;
label3:
if v10 >= v9 goto label8;
v11 = v2[v10];
v12 = new org.apache.commons.lang3.time.FastDateParser;
specialinvoke v12.<org.apache.commons.lang3.time.FastDateParser: void <init>(java.lang.String,java.util.TimeZone,java.util.Locale)>(v11, v5, v6);
virtualinvoke v8.<java.util.Calendar: void clear()>();
label4:
v13 = virtualinvoke v12.<org.apache.commons.lang3.time.FastDateParser: boolean parse(java.lang.String,java.text.ParsePosition,java.util.Calendar)>(v0, v7, v8);
if v13 == 0 goto label7;
v14 = virtualinvoke v7.<java.text.ParsePosition: int getIndex()>();
v15 = virtualinvoke v0.<java.lang.String: int length()>();
if v14 != v15 goto label7;
v16 = virtualinvoke v8.<java.util.Calendar: java.util.Date getTime()>();
label5:
return v16;
label6:
v17 := @caughtexception;
label7:
virtualinvoke v7.<java.text.ParsePosition: void setIndex(int)>(0);
v10 = v10 + 1;
goto label3;
label8:
v18 = new java.text.ParseException;
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unable to parse the date: \u0001");
v20 = (int) -1;
specialinvoke v18.<java.text.ParseException: void <init>(java.lang.String,int)>(v19, v20);
throw v18;
catch java.lang.IllegalArgumentException from label4 to label5 with label6;
}
public static java.util.Date addYears(java.util.Date, int)
{
int v1;
java.util.Date v0, v2;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date add(java.util.Date,int,int)>(v0, 1, v1);
return v2;
}
public static java.util.Date addMonths(java.util.Date, int)
{
int v1;
java.util.Date v0, v2;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date add(java.util.Date,int,int)>(v0, 2, v1);
return v2;
}
public static java.util.Date addWeeks(java.util.Date, int)
{
int v1;
java.util.Date v0, v2;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date add(java.util.Date,int,int)>(v0, 3, v1);
return v2;
}
public static java.util.Date addDays(java.util.Date, int)
{
int v1;
java.util.Date v0, v2;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date add(java.util.Date,int,int)>(v0, 5, v1);
return v2;
}
public static java.util.Date addHours(java.util.Date, int)
{
int v1;
java.util.Date v0, v2;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date add(java.util.Date,int,int)>(v0, 11, v1);
return v2;
}
public static java.util.Date addMinutes(java.util.Date, int)
{
int v1;
java.util.Date v0, v2;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date add(java.util.Date,int,int)>(v0, 12, v1);
return v2;
}
public static java.util.Date addSeconds(java.util.Date, int)
{
int v1;
java.util.Date v0, v2;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date add(java.util.Date,int,int)>(v0, 13, v1);
return v2;
}
public static java.util.Date addMilliseconds(java.util.Date, int)
{
int v1;
java.util.Date v0, v2;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date add(java.util.Date,int,int)>(v0, 14, v1);
return v2;
}
private static java.util.Date add(java.util.Date, int, int)
{
java.util.Calendar v3;
java.util.Date v0, v4;
int v1, v2;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 := @parameter2: int;
staticinvoke <org.apache.commons.lang3.time.DateUtils: void validateDateNotNull(java.util.Date)>(v0);
v3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();
virtualinvoke v3.<java.util.Calendar: void setTime(java.util.Date)>(v0);
virtualinvoke v3.<java.util.Calendar: void add(int,int)>(v1, v2);
v4 = virtualinvoke v3.<java.util.Calendar: java.util.Date getTime()>();
return v4;
}
public static java.util.Date setYears(java.util.Date, int)
{
int v1;
java.util.Date v0, v2;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date set(java.util.Date,int,int)>(v0, 1, v1);
return v2;
}
public static java.util.Date setMonths(java.util.Date, int)
{
int v1;
java.util.Date v0, v2;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date set(java.util.Date,int,int)>(v0, 2, v1);
return v2;
}
public static java.util.Date setDays(java.util.Date, int)
{
int v1;
java.util.Date v0, v2;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date set(java.util.Date,int,int)>(v0, 5, v1);
return v2;
}
public static java.util.Date setHours(java.util.Date, int)
{
int v1;
java.util.Date v0, v2;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date set(java.util.Date,int,int)>(v0, 11, v1);
return v2;
}
public static java.util.Date setMinutes(java.util.Date, int)
{
int v1;
java.util.Date v0, v2;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date set(java.util.Date,int,int)>(v0, 12, v1);
return v2;
}
public static java.util.Date setSeconds(java.util.Date, int)
{
int v1;
java.util.Date v0, v2;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date set(java.util.Date,int,int)>(v0, 13, v1);
return v2;
}
public static java.util.Date setMilliseconds(java.util.Date, int)
{
int v1;
java.util.Date v0, v2;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date set(java.util.Date,int,int)>(v0, 14, v1);
return v2;
}
private static java.util.Date set(java.util.Date, int, int)
{
java.util.Calendar v3;
java.util.Date v0, v4;
int v1, v2;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 := @parameter2: int;
staticinvoke <org.apache.commons.lang3.time.DateUtils: void validateDateNotNull(java.util.Date)>(v0);
v3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();
virtualinvoke v3.<java.util.Calendar: void setLenient(boolean)>(0);
virtualinvoke v3.<java.util.Calendar: void setTime(java.util.Date)>(v0);
virtualinvoke v3.<java.util.Calendar: void set(int,int)>(v1, v2);
v4 = virtualinvoke v3.<java.util.Calendar: java.util.Date getTime()>();
return v4;
}
public static java.util.Calendar toCalendar(java.util.Date)
{
java.util.Calendar v1;
java.util.Date v0;
v0 := @parameter0: java.util.Date;
v1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();
virtualinvoke v1.<java.util.Calendar: void setTime(java.util.Date)>(v0);
return v1;
}
public static java.util.Calendar toCalendar(java.util.Date, java.util.TimeZone)
{
java.util.Calendar v2;
java.util.Date v0;
java.util.TimeZone v1;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: java.util.TimeZone;
v2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>(v1);
virtualinvoke v2.<java.util.Calendar: void setTime(java.util.Date)>(v0);
return v2;
}
public static java.util.Date round(java.util.Date, int)
{
java.util.Calendar v2;
org.apache.commons.lang3.time.DateUtils$ModifyType v3;
java.util.Date v0, v4;
int v1;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
staticinvoke <org.apache.commons.lang3.time.DateUtils: void validateDateNotNull(java.util.Date)>(v0);
v2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();
virtualinvoke v2.<java.util.Calendar: void setTime(java.util.Date)>(v0);
v3 = <org.apache.commons.lang3.time.DateUtils$ModifyType: org.apache.commons.lang3.time.DateUtils$ModifyType ROUND>;
staticinvoke <org.apache.commons.lang3.time.DateUtils: void modify(java.util.Calendar,int,org.apache.commons.lang3.time.DateUtils$ModifyType)>(v2, v1, v3);
v4 = virtualinvoke v2.<java.util.Calendar: java.util.Date getTime()>();
return v4;
}
public static java.util.Calendar round(java.util.Calendar, int)
{
java.util.Calendar v0;
org.apache.commons.lang3.time.DateUtils$ModifyType v4;
int v1;
java.lang.Object v3;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: java.util.Calendar;
v1 := @parameter1: int;
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.lang.IllegalArgumentException nullDateIllegalArgumentException()>();
throw v2;
label1:
v3 = virtualinvoke v0.<java.util.Calendar: java.lang.Object clone()>();
v4 = <org.apache.commons.lang3.time.DateUtils$ModifyType: org.apache.commons.lang3.time.DateUtils$ModifyType ROUND>;
staticinvoke <org.apache.commons.lang3.time.DateUtils: void modify(java.util.Calendar,int,org.apache.commons.lang3.time.DateUtils$ModifyType)>(v3, v1, v4);
return v3;
}
private static java.lang.IllegalArgumentException nullDateIllegalArgumentException()
{
java.lang.IllegalArgumentException v0;
v0 = new java.lang.IllegalArgumentException;
specialinvoke v0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");
return v0;
}
public static java.util.Date round(java.lang.Object, int)
{
java.util.Date v4, v7;
java.lang.IllegalArgumentException v2;
java.lang.ClassCastException v8;
java.util.Calendar v6;
int v1;
java.lang.Object v0;
java.lang.String v9;
boolean v3, v5;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: int;
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.lang.IllegalArgumentException nullDateIllegalArgumentException()>();
throw v2;
label1:
v3 = v0 instanceof java.util.Date;
if v3 == 0 goto label2;
v4 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date round(java.util.Date,int)>(v0, v1);
return v4;
label2:
v5 = v0 instanceof java.util.Calendar;
if v5 == 0 goto label3;
v6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar round(java.util.Calendar,int)>(v0, v1);
v7 = virtualinvoke v6.<java.util.Calendar: java.util.Date getTime()>();
return v7;
label3:
v8 = new java.lang.ClassCastException;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Could not round \u0001");
specialinvoke v8.<java.lang.ClassCastException: void <init>(java.lang.String)>(v9);
throw v8;
}
public static java.util.Date truncate(java.util.Date, int)
{
java.util.Calendar v2;
org.apache.commons.lang3.time.DateUtils$ModifyType v3;
java.util.Date v0, v4;
int v1;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
staticinvoke <org.apache.commons.lang3.time.DateUtils: void validateDateNotNull(java.util.Date)>(v0);
v2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();
virtualinvoke v2.<java.util.Calendar: void setTime(java.util.Date)>(v0);
v3 = <org.apache.commons.lang3.time.DateUtils$ModifyType: org.apache.commons.lang3.time.DateUtils$ModifyType TRUNCATE>;
staticinvoke <org.apache.commons.lang3.time.DateUtils: void modify(java.util.Calendar,int,org.apache.commons.lang3.time.DateUtils$ModifyType)>(v2, v1, v3);
v4 = virtualinvoke v2.<java.util.Calendar: java.util.Date getTime()>();
return v4;
}
public static java.util.Calendar truncate(java.util.Calendar, int)
{
java.util.Calendar v0;
org.apache.commons.lang3.time.DateUtils$ModifyType v4;
int v1;
java.lang.Object v3;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: java.util.Calendar;
v1 := @parameter1: int;
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.lang.IllegalArgumentException nullDateIllegalArgumentException()>();
throw v2;
label1:
v3 = virtualinvoke v0.<java.util.Calendar: java.lang.Object clone()>();
v4 = <org.apache.commons.lang3.time.DateUtils$ModifyType: org.apache.commons.lang3.time.DateUtils$ModifyType TRUNCATE>;
staticinvoke <org.apache.commons.lang3.time.DateUtils: void modify(java.util.Calendar,int,org.apache.commons.lang3.time.DateUtils$ModifyType)>(v3, v1, v4);
return v3;
}
public static java.util.Date truncate(java.lang.Object, int)
{
java.util.Date v4, v7;
java.lang.IllegalArgumentException v2;
java.lang.ClassCastException v8;
java.util.Calendar v6;
int v1;
java.lang.Object v0;
java.lang.String v9;
boolean v3, v5;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: int;
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.lang.IllegalArgumentException nullDateIllegalArgumentException()>();
throw v2;
label1:
v3 = v0 instanceof java.util.Date;
if v3 == 0 goto label2;
v4 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>(v0, v1);
return v4;
label2:
v5 = v0 instanceof java.util.Calendar;
if v5 == 0 goto label3;
v6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>(v0, v1);
v7 = virtualinvoke v6.<java.util.Calendar: java.util.Date getTime()>();
return v7;
label3:
v8 = new java.lang.ClassCastException;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Could not truncate \u0001");
specialinvoke v8.<java.lang.ClassCastException: void <init>(java.lang.String)>(v9);
throw v8;
}
public static java.util.Date ceiling(java.util.Date, int)
{
java.util.Calendar v2;
org.apache.commons.lang3.time.DateUtils$ModifyType v3;
java.util.Date v0, v4;
int v1;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
staticinvoke <org.apache.commons.lang3.time.DateUtils: void validateDateNotNull(java.util.Date)>(v0);
v2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();
virtualinvoke v2.<java.util.Calendar: void setTime(java.util.Date)>(v0);
v3 = <org.apache.commons.lang3.time.DateUtils$ModifyType: org.apache.commons.lang3.time.DateUtils$ModifyType CEILING>;
staticinvoke <org.apache.commons.lang3.time.DateUtils: void modify(java.util.Calendar,int,org.apache.commons.lang3.time.DateUtils$ModifyType)>(v2, v1, v3);
v4 = virtualinvoke v2.<java.util.Calendar: java.util.Date getTime()>();
return v4;
}
public static java.util.Calendar ceiling(java.util.Calendar, int)
{
java.util.Calendar v0;
org.apache.commons.lang3.time.DateUtils$ModifyType v4;
int v1;
java.lang.Object v3;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: java.util.Calendar;
v1 := @parameter1: int;
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.lang.IllegalArgumentException nullDateIllegalArgumentException()>();
throw v2;
label1:
v3 = virtualinvoke v0.<java.util.Calendar: java.lang.Object clone()>();
v4 = <org.apache.commons.lang3.time.DateUtils$ModifyType: org.apache.commons.lang3.time.DateUtils$ModifyType CEILING>;
staticinvoke <org.apache.commons.lang3.time.DateUtils: void modify(java.util.Calendar,int,org.apache.commons.lang3.time.DateUtils$ModifyType)>(v3, v1, v4);
return v3;
}
public static java.util.Date ceiling(java.lang.Object, int)
{
java.util.Date v4, v7;
java.lang.IllegalArgumentException v2;
java.lang.ClassCastException v8;
java.util.Calendar v6;
int v1;
java.lang.Class v9;
java.lang.Object v0;
java.lang.String v10;
boolean v3, v5;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: int;
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.lang.IllegalArgumentException nullDateIllegalArgumentException()>();
throw v2;
label1:
v3 = v0 instanceof java.util.Date;
if v3 == 0 goto label2;
v4 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date ceiling(java.util.Date,int)>(v0, v1);
return v4;
label2:
v5 = v0 instanceof java.util.Calendar;
if v5 == 0 goto label3;
v6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar ceiling(java.util.Calendar,int)>(v0, v1);
v7 = virtualinvoke v6.<java.util.Calendar: java.util.Date getTime()>();
return v7;
label3:
v8 = new java.lang.ClassCastException;
v9 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Could not find ceiling of for type: \u0001");
specialinvoke v8.<java.lang.ClassCastException: void <init>(java.lang.String)>(v10);
throw v8;
}
private static void modify(java.util.Calendar, int, org.apache.commons.lang3.time.DateUtils$ModifyType)
{
int[][] v19;
java.util.Date v5;
byte v17;
int[] v22;
java.lang.ArithmeticException v4;
boolean v18, v34, v37, v39, v48, v7;
org.apache.commons.lang3.time.DateUtils$ModifyType v11, v14, v2, v26, v27, v9;
long v12, v15, v16, v6;
java.util.Calendar v0;
int v1, v10, v13, v20, v21, v23, v24, v25, v28, v29, v3, v30, v31, v32, v33, v35, v36, v38, v40, v41, v42, v43, v44, v45, v46, v47, v49, v50, v51, v52, v8;
java.lang.String v54;
java.lang.IllegalArgumentException v53;
v0 := @parameter0: java.util.Calendar;
v1 := @parameter1: int;
v2 := @parameter2: org.apache.commons.lang3.time.DateUtils$ModifyType;
v3 = virtualinvoke v0.<java.util.Calendar: int get(int)>(1);
if v3 <= 280000000 goto label01;
v4 = new java.lang.ArithmeticException;
specialinvoke v4.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Calendar value too large for accurate calculations");
throw v4;
label01:
if v1 != 14 goto label02;
return;
label02:
v5 = virtualinvoke v0.<java.util.Calendar: java.util.Date getTime()>();
v6 = virtualinvoke v5.<java.util.Date: long getTime()>();
v7 = 0;
v8 = virtualinvoke v0.<java.util.Calendar: int get(int)>(14);
v9 = <org.apache.commons.lang3.time.DateUtils$ModifyType: org.apache.commons.lang3.time.DateUtils$ModifyType TRUNCATE>;
if v9 == v2 goto label03;
if v8 >= 500 goto label04;
label03:
v6 = v6 - v8;
label04:
if v1 != 13 goto label05;
v7 = 1;
label05:
v10 = virtualinvoke v0.<java.util.Calendar: int get(int)>(13);
if v7 != 0 goto label07;
v11 = <org.apache.commons.lang3.time.DateUtils$ModifyType: org.apache.commons.lang3.time.DateUtils$ModifyType TRUNCATE>;
if v11 == v2 goto label06;
if v10 >= 30 goto label07;
label06:
v12 = v10 * 1000L;
v6 = v6 - v12;
label07:
if v1 != 12 goto label08;
v7 = 1;
label08:
v13 = virtualinvoke v0.<java.util.Calendar: int get(int)>(12);
if v7 != 0 goto label10;
v14 = <org.apache.commons.lang3.time.DateUtils$ModifyType: org.apache.commons.lang3.time.DateUtils$ModifyType TRUNCATE>;
if v14 == v2 goto label09;
if v13 >= 30 goto label10;
label09:
v15 = v13 * 60000L;
v6 = v6 - v15;
label10:
v16 = virtualinvoke v5.<java.util.Date: long getTime()>();
v17 = v16 cmp v6;
if v17 == 0 goto label11;
virtualinvoke v5.<java.util.Date: void setTime(long)>(v6);
virtualinvoke v0.<java.util.Calendar: void setTime(java.util.Date)>(v5);
label11:
v18 = 0;
v19 = <org.apache.commons.lang3.time.DateUtils: int[][] fields>;
v20 = lengthof v19;
v21 = 0;
label12:
if v21 >= v20 goto label35;
v22 = v19[v21];
v23 = lengthof v22;
v24 = 0;
label13:
if v24 >= v23 goto label21;
v25 = v22[v24];
if v25 != v1 goto label20;
v26 = <org.apache.commons.lang3.time.DateUtils$ModifyType: org.apache.commons.lang3.time.DateUtils$ModifyType CEILING>;
if v2 == v26 goto label14;
v27 = <org.apache.commons.lang3.time.DateUtils$ModifyType: org.apache.commons.lang3.time.DateUtils$ModifyType ROUND>;
if v2 != v27 goto label19;
if v18 == 0 goto label19;
label14:
if v1 != 1001 goto label16;
v28 = virtualinvoke v0.<java.util.Calendar: int get(int)>(5);
if v28 != 1 goto label15;
virtualinvoke v0.<java.util.Calendar: void add(int,int)>(5, 15);
goto label19;
label15:
v29 = (int) -15;
virtualinvoke v0.<java.util.Calendar: void add(int,int)>(5, v29);
virtualinvoke v0.<java.util.Calendar: void add(int,int)>(2, 1);
goto label19;
label16:
if v1 != 9 goto label18;
v30 = virtualinvoke v0.<java.util.Calendar: int get(int)>(11);
if v30 != 0 goto label17;
virtualinvoke v0.<java.util.Calendar: void add(int,int)>(11, 12);
goto label19;
label17:
v31 = (int) -12;
virtualinvoke v0.<java.util.Calendar: void add(int,int)>(11, v31);
virtualinvoke v0.<java.util.Calendar: void add(int,int)>(5, 1);
goto label19;
label18:
v32 = v22[0];
virtualinvoke v0.<java.util.Calendar: void add(int,int)>(v32, 1);
label19:
return;
label20:
v24 = v24 + 1;
goto label13;
label21:
v33 = 0;
v34 = 0;
lookupswitch(v1)
{
case 9: goto label26;
case 1001: goto label22;
default: goto label30;
};
label22:
v35 = v22[0];
if v35 != 5 goto label30;
v36 = virtualinvoke v0.<java.util.Calendar: int get(int)>(5);
v33 = v36 - 1;
if v33 < 15 goto label23;
v33 = v33 - 15;
label23:
if v33 <= 7 goto label24;
v37 = 1;
goto label25;
label24:
v37 = 0;
label25:
v18 = v37;
v34 = 1;
goto label30;
label26:
v38 = v22[0];
if v38 != 11 goto label30;
v33 = virtualinvoke v0.<java.util.Calendar: int get(int)>(11);
if v33 < 12 goto label27;
v33 = v33 - 12;
label27:
if v33 < 6 goto label28;
v39 = 1;
goto label29;
label28:
v39 = 0;
label29:
v18 = v39;
v34 = 1;
label30:
if v34 != 0 goto label33;
v40 = v22[0];
v41 = virtualinvoke v0.<java.util.Calendar: int getActualMinimum(int)>(v40);
v42 = v22[0];
v43 = virtualinvoke v0.<java.util.Calendar: int getActualMaximum(int)>(v42);
v44 = v22[0];
v45 = virtualinvoke v0.<java.util.Calendar: int get(int)>(v44);
v33 = v45 - v41;
v46 = v43 - v41;
v47 = v46 / 2;
if v33 <= v47 goto label31;
v48 = 1;
goto label32;
label31:
v48 = 0;
label32:
v18 = v48;
label33:
if v33 == 0 goto label34;
v49 = v22[0];
v50 = v22[0];
v51 = virtualinvoke v0.<java.util.Calendar: int get(int)>(v50);
v52 = v51 - v33;
virtualinvoke v0.<java.util.Calendar: void set(int,int)>(v49, v52);
label34:
v21 = v21 + 1;
goto label12;
label35:
v53 = new java.lang.IllegalArgumentException;
v54 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The field \u0001 is not supported");
specialinvoke v53.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v54);
throw v53;
}
public static java.util.Iterator iterator(java.util.Date, int)
{
java.util.Calendar v2;
java.util.Iterator v3;
java.util.Date v0;
int v1;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
staticinvoke <org.apache.commons.lang3.time.DateUtils: void validateDateNotNull(java.util.Date)>(v0);
v2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();
virtualinvoke v2.<java.util.Calendar: void setTime(java.util.Date)>(v0);
v3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.util.Calendar,int)>(v2, v1);
return v3;
}
public static java.util.Iterator iterator(java.util.Calendar, int)
{
java.util.Calendar v0, v5;
int v1, v12, v13, v14, v3, v4, v7, v8, v9;
java.lang.String v11;
java.lang.IllegalArgumentException v10, v2;
org.apache.commons.lang3.time.DateUtils$DateIterator v15;
java.lang.Object v6;
v0 := @parameter0: java.util.Calendar;
v1 := @parameter1: int;
if v0 != null goto label01;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.lang.IllegalArgumentException nullDateIllegalArgumentException()>();
throw v2;
label01:
v3 = 1;
v4 = 7;
tableswitch(v1)
{
case 1: goto label03;
case 2: goto label03;
case 3: goto label03;
case 4: goto label03;
case 5: goto label02;
case 6: goto label02;
default: goto label07;
};
label02:
v5 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>(v0, 2);
v6 = virtualinvoke v5.<java.util.Calendar: java.lang.Object clone()>();
virtualinvoke v6.<java.util.Calendar: void add(int,int)>(2, 1);
v7 = (int) -1;
virtualinvoke v6.<java.util.Calendar: void add(int,int)>(5, v7);
if v1 != 6 goto label08;
v3 = 2;
v4 = 1;
goto label08;
label03:
v5 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>(v0, 5);
v6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>(v0, 5);
tableswitch(v1)
{
case 1: goto label08;
case 2: goto label04;
case 3: goto label05;
case 4: goto label06;
default: goto label08;
};
label04:
v3 = 2;
v4 = 1;
goto label08;
label05:
v3 = virtualinvoke v0.<java.util.Calendar: int get(int)>(7);
v4 = v3 - 1;
goto label08;
label06:
v8 = virtualinvoke v0.<java.util.Calendar: int get(int)>(7);
v3 = v8 - 3;
v9 = virtualinvoke v0.<java.util.Calendar: int get(int)>(7);
v4 = v9 + 3;
goto label08;
label07:
v10 = new java.lang.IllegalArgumentException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The range style \u0001 is not valid.");
specialinvoke v10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v11);
throw v10;
label08:
if v3 >= 1 goto label09;
v3 = v3 + 7;
label09:
if v3 <= 7 goto label10;
v3 = v3 - 7;
label10:
if v4 >= 1 goto label11;
v4 = v4 + 7;
label11:
if v4 <= 7 goto label12;
v4 = v4 - 7;
label12:
v12 = virtualinvoke v5.<java.util.Calendar: int get(int)>(7);
if v12 == v3 goto label13;
v13 = (int) -1;
virtualinvoke v5.<java.util.Calendar: void add(int,int)>(5, v13);
goto label12;
label13:
v14 = virtualinvoke v6.<java.util.Calendar: int get(int)>(7);
if v14 == v4 goto label14;
virtualinvoke v6.<java.util.Calendar: void add(int,int)>(5, 1);
goto label13;
label14:
v15 = new org.apache.commons.lang3.time.DateUtils$DateIterator;
specialinvoke v15.<org.apache.commons.lang3.time.DateUtils$DateIterator: void <init>(java.util.Calendar,java.util.Calendar)>(v5, v6);
return v15;
}
public static java.util.Iterator iterator(java.lang.Object, int)
{
java.util.Iterator v4, v6;
java.lang.IllegalArgumentException v2;
java.lang.ClassCastException v7;
int v1;
java.lang.Object v0;
java.lang.String v8;
boolean v3, v5;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: int;
if v0 != null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.lang.IllegalArgumentException nullDateIllegalArgumentException()>();
throw v2;
label1:
v3 = v0 instanceof java.util.Date;
if v3 == 0 goto label2;
v4 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.util.Date,int)>(v0, v1);
return v4;
label2:
v5 = v0 instanceof java.util.Calendar;
if v5 == 0 goto label3;
v6 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Iterator iterator(java.util.Calendar,int)>(v0, v1);
return v6;
label3:
v7 = new java.lang.ClassCastException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Could not iterate based on \u0001");
specialinvoke v7.<java.lang.ClassCastException: void <init>(java.lang.String)>(v8);
throw v7;
}
public static long getFragmentInMilliseconds(java.util.Date, int)
{
java.util.concurrent.TimeUnit v2;
java.util.Date v0;
int v1;
long v3;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: long getFragment(java.util.Date,int,java.util.concurrent.TimeUnit)>(v0, v1, v2);
return v3;
}
public static long getFragmentInSeconds(java.util.Date, int)
{
java.util.concurrent.TimeUnit v2;
java.util.Date v0;
int v1;
long v3;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: long getFragment(java.util.Date,int,java.util.concurrent.TimeUnit)>(v0, v1, v2);
return v3;
}
public static long getFragmentInMinutes(java.util.Date, int)
{
java.util.concurrent.TimeUnit v2;
java.util.Date v0;
int v1;
long v3;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;
v3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: long getFragment(java.util.Date,int,java.util.concurrent.TimeUnit)>(v0, v1, v2);
return v3;
}
public static long getFragmentInHours(java.util.Date, int)
{
java.util.concurrent.TimeUnit v2;
java.util.Date v0;
int v1;
long v3;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>;
v3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: long getFragment(java.util.Date,int,java.util.concurrent.TimeUnit)>(v0, v1, v2);
return v3;
}
public static long getFragmentInDays(java.util.Date, int)
{
java.util.concurrent.TimeUnit v2;
java.util.Date v0;
int v1;
long v3;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;
v3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: long getFragment(java.util.Date,int,java.util.concurrent.TimeUnit)>(v0, v1, v2);
return v3;
}
public static long getFragmentInMilliseconds(java.util.Calendar, int)
{
java.util.concurrent.TimeUnit v2;
java.util.Calendar v0;
int v1;
long v3;
v0 := @parameter0: java.util.Calendar;
v1 := @parameter1: int;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: long getFragment(java.util.Calendar,int,java.util.concurrent.TimeUnit)>(v0, v1, v2);
return v3;
}
public static long getFragmentInSeconds(java.util.Calendar, int)
{
java.util.concurrent.TimeUnit v2;
java.util.Calendar v0;
int v1;
long v3;
v0 := @parameter0: java.util.Calendar;
v1 := @parameter1: int;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: long getFragment(java.util.Calendar,int,java.util.concurrent.TimeUnit)>(v0, v1, v2);
return v3;
}
public static long getFragmentInMinutes(java.util.Calendar, int)
{
java.util.concurrent.TimeUnit v2;
java.util.Calendar v0;
int v1;
long v3;
v0 := @parameter0: java.util.Calendar;
v1 := @parameter1: int;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;
v3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: long getFragment(java.util.Calendar,int,java.util.concurrent.TimeUnit)>(v0, v1, v2);
return v3;
}
public static long getFragmentInHours(java.util.Calendar, int)
{
java.util.concurrent.TimeUnit v2;
java.util.Calendar v0;
int v1;
long v3;
v0 := @parameter0: java.util.Calendar;
v1 := @parameter1: int;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>;
v3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: long getFragment(java.util.Calendar,int,java.util.concurrent.TimeUnit)>(v0, v1, v2);
return v3;
}
public static long getFragmentInDays(java.util.Calendar, int)
{
java.util.concurrent.TimeUnit v2;
java.util.Calendar v0;
int v1;
long v3;
v0 := @parameter0: java.util.Calendar;
v1 := @parameter1: int;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;
v3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: long getFragment(java.util.Calendar,int,java.util.concurrent.TimeUnit)>(v0, v1, v2);
return v3;
}
private static long getFragment(java.util.Date, int, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v2;
java.util.Calendar v3;
java.util.Date v0;
int v1;
long v4;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: int;
v2 := @parameter2: java.util.concurrent.TimeUnit;
staticinvoke <org.apache.commons.lang3.time.DateUtils: void validateDateNotNull(java.util.Date)>(v0);
v3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();
virtualinvoke v3.<java.util.Calendar: void setTime(java.util.Date)>(v0);
v4 = staticinvoke <org.apache.commons.lang3.time.DateUtils: long getFragment(java.util.Calendar,int,java.util.concurrent.TimeUnit)>(v3, v1, v2);
return v4;
}
private static long getFragment(java.util.Calendar, int, java.util.concurrent.TimeUnit)
{
long v10, v14, v17, v20, v23, v26, v4;
java.util.Calendar v0;
int v1, v11, v12, v15, v18, v21, v24, v7, v8;
java.lang.String v28;
boolean v6;
java.lang.IllegalArgumentException v27, v3;
java.util.concurrent.TimeUnit v13, v16, v19, v2, v22, v25, v5, v9;
v0 := @parameter0: java.util.Calendar;
v1 := @parameter1: int;
v2 := @parameter2: java.util.concurrent.TimeUnit;
if v0 != null goto label01;
v3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.lang.IllegalArgumentException nullDateIllegalArgumentException()>();
throw v3;
label01:
v4 = 0L;
v5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;
if v2 != v5 goto label02;
v6 = 0;
goto label03;
label02:
v6 = 1;
label03:
lookupswitch(v1)
{
case 1: goto label04;
case 2: goto label05;
default: goto label06;
};
label04:
v7 = virtualinvoke v0.<java.util.Calendar: int get(int)>(6);
v8 = v7 - v6;
v9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;
v10 = virtualinvoke v2.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(v8, v9);
v4 = 0L + v10;
goto label06;
label05:
v11 = virtualinvoke v0.<java.util.Calendar: int get(int)>(5);
v12 = v11 - v6;
v13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;
v14 = virtualinvoke v2.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(v12, v13);
v4 = 0L + v14;
label06:
tableswitch(v1)
{
case 1: goto label07;
case 2: goto label07;
case 3: goto label11;
case 4: goto label11;
case 5: goto label07;
case 6: goto label07;
case 7: goto label11;
case 8: goto label11;
case 9: goto label11;
case 10: goto label11;
case 11: goto label08;
case 12: goto label09;
case 13: goto label10;
case 14: goto label12;
default: goto label11;
};
label07:
v15 = virtualinvoke v0.<java.util.Calendar: int get(int)>(11);
v16 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>;
v17 = virtualinvoke v2.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(v15, v16);
v4 = v4 + v17;
label08:
v18 = virtualinvoke v0.<java.util.Calendar: int get(int)>(12);
v19 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;
v20 = virtualinvoke v2.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(v18, v19);
v4 = v4 + v20;
label09:
v21 = virtualinvoke v0.<java.util.Calendar: int get(int)>(13);
v22 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v23 = virtualinvoke v2.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(v21, v22);
v4 = v4 + v23;
label10:
v24 = virtualinvoke v0.<java.util.Calendar: int get(int)>(14);
v25 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v26 = virtualinvoke v2.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(v24, v25);
v4 = v4 + v26;
goto label12;
label11:
v27 = new java.lang.IllegalArgumentException;
v28 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The fragment \u0001 is not supported");
specialinvoke v27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v28);
throw v27;
label12:
return v4;
}
public static boolean truncatedEquals(java.util.Calendar, java.util.Calendar, int)
{
java.util.Calendar v0, v1;
int v2, v3;
boolean v4;
v0 := @parameter0: java.util.Calendar;
v1 := @parameter1: java.util.Calendar;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: int truncatedCompareTo(java.util.Calendar,java.util.Calendar,int)>(v0, v1, v2);
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean truncatedEquals(java.util.Date, java.util.Date, int)
{
java.util.Date v0, v1;
int v2, v3;
boolean v4;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: java.util.Date;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: int truncatedCompareTo(java.util.Date,java.util.Date,int)>(v0, v1, v2);
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static int truncatedCompareTo(java.util.Calendar, java.util.Calendar, int)
{
java.util.Calendar v0, v1, v3, v4;
int v2, v5;
v0 := @parameter0: java.util.Calendar;
v1 := @parameter1: java.util.Calendar;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>(v0, v2);
v4 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Calendar truncate(java.util.Calendar,int)>(v1, v2);
v5 = virtualinvoke v3.<java.util.Calendar: int compareTo(java.util.Calendar)>(v4);
return v5;
}
public static int truncatedCompareTo(java.util.Date, java.util.Date, int)
{
java.util.Date v0, v1, v3, v4;
int v2, v5;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: java.util.Date;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>(v0, v2);
v4 = staticinvoke <org.apache.commons.lang3.time.DateUtils: java.util.Date truncate(java.util.Date,int)>(v1, v2);
v5 = virtualinvoke v3.<java.util.Date: int compareTo(java.util.Date)>(v4);
return v5;
}
private static void validateDateNotNull(java.util.Date)
{
java.lang.Object[] v1;
java.util.Date v0;
v0 := @parameter0: java.util.Date;
v1 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "date", v1);
return;
}
static void <clinit>()
{
int[][] v0;
int[] v1, v2, v3, v4, v5, v6, v7, v8;
v0 = newarray (int[])[8];
v1 = newarray (int)[1];
v1[0] = 14;
v0[0] = v1;
v2 = newarray (int)[1];
v2[0] = 13;
v0[1] = v2;
v3 = newarray (int)[1];
v3[0] = 12;
v0[2] = v3;
v4 = newarray (int)[2];
v4[0] = 11;
v4[1] = 10;
v0[3] = v4;
v5 = newarray (int)[3];
v5[0] = 5;
v5[1] = 5;
v5[2] = 9;
v0[4] = v5;
v6 = newarray (int)[2];
v6[0] = 2;
v6[1] = 1001;
v0[5] = v6;
v7 = newarray (int)[1];
v7[0] = 1;
v0[6] = v7;
v8 = newarray (int)[1];
v8[0] = 0;
v0[7] = v8;
<org.apache.commons.lang3.time.DateUtils: int[][] fields> = v0;
return;
}
}