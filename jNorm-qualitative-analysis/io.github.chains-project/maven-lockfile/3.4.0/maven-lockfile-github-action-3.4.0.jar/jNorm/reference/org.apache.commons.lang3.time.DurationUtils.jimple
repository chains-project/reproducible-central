public class org.apache.commons.lang3.time.DurationUtils extends java.lang.Object
{
static final org.apache.commons.lang3.Range LONG_TO_INT_RANGE;
public void <init>()
{
org.apache.commons.lang3.time.DurationUtils v0;
v0 := @this: org.apache.commons.lang3.time.DurationUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static void accept(org.apache.commons.lang3.function.FailableBiConsumer, java.time.Duration) throws java.lang.Throwable
{
java.lang.Long v3;
java.time.Duration v1;
int v4;
long v2;
org.apache.commons.lang3.function.FailableBiConsumer v0;
java.lang.Integer v5;
v0 := @parameter0: org.apache.commons.lang3.function.FailableBiConsumer;
v1 := @parameter1: java.time.Duration;
if v0 == null goto label1;
if v1 == null goto label1;
v2 = virtualinvoke v1.<java.time.Duration: long toMillis()>();
v3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
v4 = staticinvoke <org.apache.commons.lang3.time.DurationUtils: int getNanosOfMiili(java.time.Duration)>(v1);
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
interfaceinvoke v0.<org.apache.commons.lang3.function.FailableBiConsumer: void accept(java.lang.Object,java.lang.Object)>(v3, v5);
label1:
return;
}
public static int getNanosOfMiili(java.time.Duration)
{
int v1, v2;
java.time.Duration v0;
v0 := @parameter0: java.time.Duration;
v1 = virtualinvoke v0.<java.time.Duration: int getNano()>();
v2 = v1 % 1000000;
return v2;
}
public static boolean isPositive(java.time.Duration)
{
java.time.Duration v0;
boolean v1, v2, v3;
v0 := @parameter0: java.time.Duration;
v1 = virtualinvoke v0.<java.time.Duration: boolean isNegative()>();
if v1 != 0 goto label1;
v2 = virtualinvoke v0.<java.time.Duration: boolean isZero()>();
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
static java.time.temporal.ChronoUnit toChronoUnit(java.util.concurrent.TimeUnit)
{
java.lang.IllegalArgumentException v12;
java.util.concurrent.TimeUnit v0;
java.time.temporal.ChronoUnit v10, v11, v5, v6, v7, v8, v9;
int[] v1;
int v3, v4;
java.lang.Object v2;
java.lang.String v13;
v0 := @parameter0: java.util.concurrent.TimeUnit;
v1 = <org.apache.commons.lang3.time.DurationUtils$1: int[] $SwitchMap$java$util$concurrent$TimeUnit>;
v2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(v0);
v3 = virtualinvoke v2.<java.util.concurrent.TimeUnit: int ordinal()>();
v4 = v1[v3];
tableswitch(v4)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label3;
case 4: goto label4;
case 5: goto label5;
case 6: goto label6;
case 7: goto label7;
default: goto label8;
};
label1:
v5 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit NANOS>;
return v5;
label2:
v6 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit MICROS>;
return v6;
label3:
v7 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit MILLIS>;
return v7;
label4:
v8 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit SECONDS>;
return v8;
label5:
v9 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit MINUTES>;
return v9;
label6:
v10 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit HOURS>;
return v10;
label7:
v11 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit DAYS>;
return v11;
label8:
v12 = new java.lang.IllegalArgumentException;
v13 = virtualinvoke v0.<java.util.concurrent.TimeUnit: java.lang.String toString()>();
specialinvoke v12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v13);
throw v12;
}
public static java.time.Duration toDuration(long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
java.time.temporal.ChronoUnit v2;
java.time.Duration v3;
long v0;
v0 := @parameter0: long;
v1 := @parameter1: java.util.concurrent.TimeUnit;
v2 = staticinvoke <org.apache.commons.lang3.time.DurationUtils: java.time.temporal.ChronoUnit toChronoUnit(java.util.concurrent.TimeUnit)>(v1);
v3 = staticinvoke <java.time.Duration: java.time.Duration of(long,java.time.temporal.TemporalUnit)>(v0, v2);
return v3;
}
public static int toMillisInt(java.time.Duration)
{
java.lang.Long v3;
java.time.Duration v0;
int v5;
java.lang.Object v4;
long v2;
org.apache.commons.lang3.Range v1;
v0 := @parameter0: java.time.Duration;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v0, "duration");
v1 = <org.apache.commons.lang3.time.DurationUtils: org.apache.commons.lang3.Range LONG_TO_INT_RANGE>;
v2 = virtualinvoke v0.<java.time.Duration: long toMillis()>();
v3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
v4 = virtualinvoke v1.<org.apache.commons.lang3.Range: java.lang.Object fit(java.lang.Object)>(v3);
v5 = virtualinvoke v4.<java.lang.Long: int intValue()>();
return v5;
}
public static java.time.Duration zeroIfNull(java.time.Duration)
{
java.lang.Object v2;
java.time.Duration v0, v1;
v0 := @parameter0: java.time.Duration;
v1 = <java.time.Duration: java.time.Duration ZERO>;
v2 = staticinvoke <org.apache.commons.lang3.ObjectUtils: java.lang.Object defaultIfNull(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static void <clinit>()
{
java.lang.Long v0, v1;
org.apache.commons.lang3.Range v2;
v0 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Long LONG_INT_MIN_VALUE>;
v1 = <org.apache.commons.lang3.math.NumberUtils: java.lang.Long LONG_INT_MAX_VALUE>;
v2 = staticinvoke <org.apache.commons.lang3.Range: org.apache.commons.lang3.Range between(java.lang.Comparable,java.lang.Comparable)>(v0, v1);
<org.apache.commons.lang3.time.DurationUtils: org.apache.commons.lang3.Range LONG_TO_INT_RANGE> = v2;
return;
}
}