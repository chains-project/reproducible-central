class org.crac.Core$Compat extends java.lang.Object
{
protected java.lang.Class clsResource;
protected java.lang.Class clsContext;
protected java.lang.Class clsCore;
protected java.lang.Class clsCheckpointException;
protected java.lang.Class clsRestoreException;
protected final java.lang.reflect.Method checkpointRestore;
protected final java.lang.reflect.Method register;
protected final java.lang.Object globalContext;
protected java.util.List registerExceptions;
protected void <init>(java.lang.String) throws java.lang.ClassNotFoundException, java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
{
java.lang.Object[] v23;
java.util.ArrayList v2;
java.lang.String v1, v11, v3, v5, v7, v9;
java.lang.reflect.Method v15, v19, v22;
org.crac.Core$Compat v0;
java.lang.Class[] v14, v17, v21;
java.lang.Class v10, v12, v13, v16, v18, v20, v4, v6, v8;
java.lang.Object v24;
v0 := @this: org.crac.Core$Compat;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v0.<org.crac.Core$Compat: java.util.List registerExceptions> = v2;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.Resource");
v4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(v3);
v0.<org.crac.Core$Compat: java.lang.Class clsResource> = v4;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.Context");
v6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(v5);
v0.<org.crac.Core$Compat: java.lang.Class clsContext> = v6;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.Core");
v8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(v7);
v0.<org.crac.Core$Compat: java.lang.Class clsCore> = v8;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.CheckpointException");
v10 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(v9);
v0.<org.crac.Core$Compat: java.lang.Class clsCheckpointException> = v10;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.RestoreException");
v12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(v11);
v0.<org.crac.Core$Compat: java.lang.Class clsRestoreException> = v12;
v13 = v0.<org.crac.Core$Compat: java.lang.Class clsCore>;
v14 = newarray (java.lang.Class)[0];
v15 = virtualinvoke v13.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("checkpointRestore", v14);
v0.<org.crac.Core$Compat: java.lang.reflect.Method checkpointRestore> = v15;
v16 = v0.<org.crac.Core$Compat: java.lang.Class clsContext>;
v17 = newarray (java.lang.Class)[1];
v18 = v0.<org.crac.Core$Compat: java.lang.Class clsResource>;
v17[0] = v18;
v19 = virtualinvoke v16.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("register", v17);
v0.<org.crac.Core$Compat: java.lang.reflect.Method register> = v19;
v20 = v0.<org.crac.Core$Compat: java.lang.Class clsCore>;
v21 = newarray (java.lang.Class)[0];
v22 = virtualinvoke v20.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getGlobalContext", v21);
v23 = newarray (java.lang.Object)[0];
v24 = virtualinvoke v22.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, v23);
v0.<org.crac.Core$Compat: java.lang.Object globalContext> = v24;
return;
}
public void checkpointRestore() throws org.crac.CheckpointException, org.crac.RestoreException
{
java.lang.Throwable v11, v15, v17, v20, v24, v8;
java.lang.Object[] v5;
org.crac.CheckpointException v10, v25;
java.lang.ReflectiveOperationException v6;
org.crac.RestoreException v19;
int v13, v14, v2, v22, v23;
java.lang.reflect.Method v4;
org.crac.Core$Compat v0;
boolean v18, v9;
java.lang.UnsupportedOperationException v3;
java.util.List v1;
java.lang.Throwable[] v12, v21;
java.lang.Class v16, v7;
v0 := @this: org.crac.Core$Compat;
v1 = v0.<org.crac.Core$Compat: java.util.List registerExceptions>;
v2 = interfaceinvoke v1.<java.util.List: int size()>();
if v2 == 0 goto label01;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
label01:
v4 = v0.<org.crac.Core$Compat: java.lang.reflect.Method checkpointRestore>;
v5 = newarray (java.lang.Object)[0];
virtualinvoke v4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, v5);
label02:
goto label10;
label03:
v6 := @caughtexception;
v7 = v0.<org.crac.Core$Compat: java.lang.Class clsCheckpointException>;
v8 = virtualinvoke v6.<java.lang.ReflectiveOperationException: java.lang.Throwable getCause()>();
v9 = virtualinvoke v7.<java.lang.Class: boolean isInstance(java.lang.Object)>(v8);
if v9 == 0 goto label06;
v10 = new org.crac.CheckpointException;
specialinvoke v10.<org.crac.CheckpointException: void <init>()>();
v11 = virtualinvoke v6.<java.lang.ReflectiveOperationException: java.lang.Throwable getCause()>();
v12 = virtualinvoke v11.<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>();
v13 = lengthof v12;
v14 = 0;
label04:
if v14 >= v13 goto label05;
v15 = v12[v14];
virtualinvoke v10.<org.crac.CheckpointException: void addSuppressed(java.lang.Throwable)>(v15);
v14 = v14 + 1;
goto label04;
label05:
throw v10;
label06:
v16 = v0.<org.crac.Core$Compat: java.lang.Class clsRestoreException>;
v17 = virtualinvoke v6.<java.lang.ReflectiveOperationException: java.lang.Throwable getCause()>();
v18 = virtualinvoke v16.<java.lang.Class: boolean isInstance(java.lang.Object)>(v17);
if v18 == 0 goto label09;
v19 = new org.crac.RestoreException;
specialinvoke v19.<org.crac.RestoreException: void <init>()>();
v20 = virtualinvoke v6.<java.lang.ReflectiveOperationException: java.lang.Throwable getCause()>();
v21 = virtualinvoke v20.<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>();
v22 = lengthof v21;
v23 = 0;
label07:
if v23 >= v22 goto label08;
v24 = v21[v23];
virtualinvoke v19.<org.crac.RestoreException: void addSuppressed(java.lang.Throwable)>(v24);
v23 = v23 + 1;
goto label07;
label08:
throw v19;
label09:
v25 = new org.crac.CheckpointException;
specialinvoke v25.<org.crac.CheckpointException: void <init>()>();
virtualinvoke v25.<org.crac.CheckpointException: void addSuppressed(java.lang.Throwable)>(v6);
throw v25;
label10:
return;
catch java.lang.reflect.InvocationTargetException from label01 to label02 with label03;
catch java.lang.IllegalAccessException from label01 to label02 with label03;
}
public void register(org.crac.Resource)
{
java.lang.Object[] v10;
org.crac.Resource v1;
java.lang.Class[] v5;
java.lang.ReflectiveOperationException v11;
java.util.List v12;
org.crac.Core$ResourceWrapper v2;
java.lang.Class v3, v6;
java.lang.Object v7, v9;
java.lang.ClassLoader v4;
java.lang.reflect.Method v8;
org.crac.Core$Compat v0;
v0 := @this: org.crac.Core$Compat;
v1 := @parameter0: org.crac.Resource;
label1:
v2 = new org.crac.Core$ResourceWrapper;
specialinvoke v2.<org.crac.Core$ResourceWrapper: void <init>(org.crac.Resource)>(v1);
v3 = class "Lorg/crac/Core$Compat;";
v4 = virtualinvoke v3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v5 = newarray (java.lang.Class)[1];
v6 = v0.<org.crac.Core$Compat: java.lang.Class clsResource>;
v5[0] = v6;
v7 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>(v4, v5, v2);
virtualinvoke v2.<org.crac.Core$ResourceWrapper: void setProxy(java.lang.Object)>(v7);
v8 = v0.<org.crac.Core$Compat: java.lang.reflect.Method register>;
v9 = v0.<org.crac.Core$Compat: java.lang.Object globalContext>;
v10 = newarray (java.lang.Object)[1];
v10[0] = v7;
virtualinvoke v8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v9, v10);
label2:
goto label4;
label3:
v11 := @caughtexception;
v12 = v0.<org.crac.Core$Compat: java.util.List registerExceptions>;
interfaceinvoke v12.<java.util.List: boolean add(java.lang.Object)>(v11);
label4:
return;
catch java.lang.IllegalAccessException from label1 to label2 with label3;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
}
}