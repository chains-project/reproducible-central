public interface  org.eclipse.microprofile.context.spi.ContextManagerProvider extends java.lang.Object
{
public static final java.util.concurrent.atomic.AtomicReference INSTANCE;
public static org.eclipse.microprofile.context.spi.ContextManagerProvider instance()
{
java.lang.IllegalStateException v8, v9;
java.util.Iterator v3;
java.util.ServiceLoader v2;
java.util.concurrent.atomic.AtomicReference v0, v6;
java.lang.Object v1, v5;
boolean v4, v7;
v0 = <org.eclipse.microprofile.context.spi.ContextManagerProvider: java.util.concurrent.atomic.AtomicReference INSTANCE>;
v1 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v1 != null goto label4;
v2 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "Lorg/eclipse/microprofile/context/spi/ContextManagerProvider;");
v3 = virtualinvoke v2.<java.util.ServiceLoader: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label3;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = <org.eclipse.microprofile.context.spi.ContextManagerProvider: java.util.concurrent.atomic.AtomicReference INSTANCE>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v5);
if v7 == 0 goto label2;
v1 = v5;
goto label1;
label2:
v8 = new java.lang.IllegalStateException;
specialinvoke v8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ContextManagerProvider already set");
throw v8;
label3:
if v1 != null goto label4;
v9 = new java.lang.IllegalStateException;
specialinvoke v9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Container has not registered a ContextManagerProvider");
throw v9;
label4:
return v1;
}
public static org.eclipse.microprofile.context.spi.ContextManagerProviderRegistration register(org.eclipse.microprofile.context.spi.ContextManagerProvider) throws java.lang.IllegalStateException
{
java.lang.IllegalStateException v4;
org.eclipse.microprofile.context.spi.ContextManagerProviderRegistration v3;
org.eclipse.microprofile.context.spi.ContextManagerProvider v0;
java.util.concurrent.atomic.AtomicReference v1;
boolean v2;
v0 := @parameter0: org.eclipse.microprofile.context.spi.ContextManagerProvider;
v1 = <org.eclipse.microprofile.context.spi.ContextManagerProvider: java.util.concurrent.atomic.AtomicReference INSTANCE>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v0);
if v2 == 0 goto label1;
v3 = new org.eclipse.microprofile.context.spi.ContextManagerProviderRegistration;
specialinvoke v3.<org.eclipse.microprofile.context.spi.ContextManagerProviderRegistration: void <init>(org.eclipse.microprofile.context.spi.ContextManagerProvider)>(v0);
return v3;
label1:
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("A ContextManagerProvider implementation has already been registered.");
throw v4;
}
public org.eclipse.microprofile.context.spi.ContextManager getContextManager()
{
java.lang.Thread v2;
org.eclipse.microprofile.context.spi.ContextManagerProvider v0;
java.lang.Object v4;
java.security.PrivilegedAction v3;
java.lang.SecurityManager v1;
org.eclipse.microprofile.context.spi.ContextManager v5;
v0 := @this: org.eclipse.microprofile.context.spi.ContextManagerProvider;
v1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
if v1 != null goto label1;
v2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
goto label2;
label1:
v3 = staticinvoke <org.eclipse.microprofile.context.spi.ContextManagerProvider$lambda_getContextManager_0__3309: java.security.PrivilegedAction bootstrap$()>();
v4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(v3);
label2:
v5 = interfaceinvoke v0.<org.eclipse.microprofile.context.spi.ContextManagerProvider: org.eclipse.microprofile.context.spi.ContextManager getContextManager(java.lang.ClassLoader)>(v4);
return v5;
}
public abstract org.eclipse.microprofile.context.spi.ContextManager getContextManager(java.lang.ClassLoader);
public org.eclipse.microprofile.context.spi.ContextManager$Builder getContextManagerBuilder()
{
java.lang.UnsupportedOperationException v1;
org.eclipse.microprofile.context.spi.ContextManagerProvider v0;
v0 := @this: org.eclipse.microprofile.context.spi.ContextManagerProvider;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public void registerContextManager(org.eclipse.microprofile.context.spi.ContextManager, java.lang.ClassLoader)
{
java.lang.UnsupportedOperationException v3;
org.eclipse.microprofile.context.spi.ContextManagerProvider v0;
java.lang.ClassLoader v2;
org.eclipse.microprofile.context.spi.ContextManager v1;
v0 := @this: org.eclipse.microprofile.context.spi.ContextManagerProvider;
v1 := @parameter0: org.eclipse.microprofile.context.spi.ContextManager;
v2 := @parameter1: java.lang.ClassLoader;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
public void releaseContextManager(org.eclipse.microprofile.context.spi.ContextManager)
{
java.lang.UnsupportedOperationException v2;
org.eclipse.microprofile.context.spi.ContextManager v1;
org.eclipse.microprofile.context.spi.ContextManagerProvider v0;
v0 := @this: org.eclipse.microprofile.context.spi.ContextManagerProvider;
v1 := @parameter0: org.eclipse.microprofile.context.spi.ContextManager;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicReference v0;
v0 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v0.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
<org.eclipse.microprofile.context.spi.ContextManagerProvider: java.util.concurrent.atomic.AtomicReference INSTANCE> = v0;
return;
}
}