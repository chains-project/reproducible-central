class org.eclipse.parsson.JsonPatchImpl$DiffGenerator extends java.lang.Object
{
private jakarta.json.JsonPatchBuilder builder;
void <init>()
{
org.eclipse.parsson.JsonPatchImpl$DiffGenerator v0;
v0 := @this: org.eclipse.parsson.JsonPatchImpl$DiffGenerator;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
jakarta.json.JsonArray diff(jakarta.json.JsonStructure, jakarta.json.JsonStructure)
{
jakarta.json.JsonStructure v1, v2;
jakarta.json.JsonPatch v5;
jakarta.json.JsonPatchBuilder v4;
org.eclipse.parsson.JsonPatchImpl$DiffGenerator v0;
org.eclipse.parsson.JsonPatchBuilderImpl v3;
jakarta.json.JsonArray v6;
v0 := @this: org.eclipse.parsson.JsonPatchImpl$DiffGenerator;
v1 := @parameter0: jakarta.json.JsonStructure;
v2 := @parameter1: jakarta.json.JsonStructure;
v3 = new org.eclipse.parsson.JsonPatchBuilderImpl;
specialinvoke v3.<org.eclipse.parsson.JsonPatchBuilderImpl: void <init>()>();
v0.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: jakarta.json.JsonPatchBuilder builder> = v3;
specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: void diff(java.lang.String,jakarta.json.JsonValue,jakarta.json.JsonValue)>("", v1, v2);
v4 = v0.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: jakarta.json.JsonPatchBuilder builder>;
v5 = interfaceinvoke v4.<jakarta.json.JsonPatchBuilder: jakarta.json.JsonPatch build()>();
v6 = interfaceinvoke v5.<jakarta.json.JsonPatch: jakarta.json.JsonArray toJsonArray()>();
return v6;
}
private void diff(java.lang.String, jakarta.json.JsonValue, jakarta.json.JsonValue)
{
jakarta.json.JsonValue v2, v3;
org.eclipse.parsson.JsonPatchImpl$DiffGenerator v0;
jakarta.json.JsonPatchBuilder v11;
jakarta.json.JsonValue$ValueType v10, v5, v6, v7, v8, v9;
java.lang.String v1;
boolean v4;
v0 := @this: org.eclipse.parsson.JsonPatchImpl$DiffGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: jakarta.json.JsonValue;
v3 := @parameter2: jakarta.json.JsonValue;
v4 = virtualinvoke v2.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v4 == 0 goto label1;
return;
label1:
v5 = interfaceinvoke v2.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v6 = interfaceinvoke v3.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v7 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType OBJECT>;
if v5 != v7 goto label2;
v8 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType OBJECT>;
if v6 != v8 goto label2;
specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: void diffObject(java.lang.String,jakarta.json.JsonObject,jakarta.json.JsonObject)>(v1, v2, v3);
goto label4;
label2:
v9 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType ARRAY>;
if v5 != v9 goto label3;
v10 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType ARRAY>;
if v6 != v10 goto label3;
specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: void diffArray(java.lang.String,jakarta.json.JsonArray,jakarta.json.JsonArray)>(v1, v2, v3);
goto label4;
label3:
v11 = v0.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: jakarta.json.JsonPatchBuilder builder>;
interfaceinvoke v11.<jakarta.json.JsonPatchBuilder: jakarta.json.JsonPatchBuilder replace(java.lang.String,jakarta.json.JsonValue)>(v1, v3);
label4:
return;
}
private void diffObject(java.lang.String, jakarta.json.JsonObject, jakarta.json.JsonObject)
{
jakarta.json.JsonObject v2, v3;
java.util.function.BiConsumer v4, v5;
org.eclipse.parsson.JsonPatchImpl$DiffGenerator v0;
java.lang.String v1;
v0 := @this: org.eclipse.parsson.JsonPatchImpl$DiffGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: jakarta.json.JsonObject;
v3 := @parameter2: jakarta.json.JsonObject;
v4 = staticinvoke <org.eclipse.parsson.JsonPatchImpl$DiffGenerator$lambda_diffObject_0__590: java.util.function.BiConsumer bootstrap$(org.eclipse.parsson.JsonPatchImpl$DiffGenerator,jakarta.json.JsonObject,java.lang.String)>(v0, v3, v1);
interfaceinvoke v2.<jakarta.json.JsonObject: void forEach(java.util.function.BiConsumer)>(v4);
v5 = staticinvoke <org.eclipse.parsson.JsonPatchImpl$DiffGenerator$lambda_diffObject_1__591: java.util.function.BiConsumer bootstrap$(org.eclipse.parsson.JsonPatchImpl$DiffGenerator,jakarta.json.JsonObject,java.lang.String)>(v0, v2, v1);
interfaceinvoke v3.<jakarta.json.JsonObject: void forEach(java.util.function.BiConsumer)>(v5);
return;
}
private void diffArray(java.lang.String, jakarta.json.JsonArray, jakarta.json.JsonArray)
{
int[][] v8;
int[] v11, v14, v21, v23, v29, v32, v34;
boolean v19;
jakarta.json.JsonArray v2, v3;
int v10, v12, v13, v15, v16, v20, v22, v24, v25, v26, v27, v28, v30, v31, v33, v35, v36, v37, v38, v39, v4, v5, v6, v7, v9;
java.lang.String v1;
org.eclipse.parsson.JsonPatchImpl$DiffGenerator v0;
java.lang.Object v17, v18;
v0 := @this: org.eclipse.parsson.JsonPatchImpl$DiffGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: jakarta.json.JsonArray;
v3 := @parameter2: jakarta.json.JsonArray;
v4 = interfaceinvoke v2.<jakarta.json.JsonArray: int size()>();
v5 = interfaceinvoke v3.<jakarta.json.JsonArray: int size()>();
v6 = v4 + 1;
v7 = v5 + 1;
v8 = newmultiarray (int)[v6][v7];
v9 = 0;
label01:
v10 = v4 + 1;
if v9 >= v10 goto label02;
v11 = v8[v9];
v11[0] = 0;
v9 = v9 + 1;
goto label01;
label02:
v12 = 0;
label03:
v13 = v5 + 1;
if v12 >= v13 goto label04;
v14 = v8[0];
v14[v12] = 0;
v12 = v12 + 1;
goto label03;
label04:
v15 = 0;
label05:
if v15 >= v4 goto label10;
v16 = 0;
label06:
if v16 >= v5 goto label09;
v17 = interfaceinvoke v2.<jakarta.json.JsonArray: java.lang.Object get(int)>(v15);
v18 = interfaceinvoke v3.<jakarta.json.JsonArray: java.lang.Object get(int)>(v16);
v19 = virtualinvoke v17.<java.lang.Object: boolean equals(java.lang.Object)>(v18);
if v19 == 0 goto label07;
v20 = v15 + 1;
v21 = v8[v20];
v22 = v16 + 1;
v23 = v8[v15];
v24 = v23[v16];
v25 = (int) -2;
v26 = v24 & v25;
v27 = v26 + 3;
v21[v22] = v27;
goto label08;
label07:
v28 = v15 + 1;
v29 = v8[v28];
v30 = v16 + 1;
v31 = v15 + 1;
v32 = v8[v31];
v33 = v32[v16];
v34 = v8[v15];
v35 = v16 + 1;
v36 = v34[v35];
v37 = staticinvoke <java.lang.Math: int max(int,int)>(v33, v36);
v38 = (int) -2;
v39 = v37 & v38;
v29[v30] = v39;
label08:
v16 = v16 + 1;
goto label06;
label09:
v15 = v15 + 1;
goto label05;
label10:
specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: void emit(java.lang.String,jakarta.json.JsonArray,jakarta.json.JsonArray,int[][],int,int)>(v1, v2, v3, v8, v4, v5);
return;
}
private void emit(java.lang.String, jakarta.json.JsonArray, jakarta.json.JsonArray, int[][], int, int)
{
int[][] v4;
int[] v17, v22, v27;
jakarta.json.JsonPatchBuilder v13, v31, v36, v8;
jakarta.json.JsonArray v2, v3;
int v11, v14, v16, v18, v19, v20, v21, v23, v24, v25, v26, v28, v29, v30, v32, v34, v37, v39, v40, v42, v44, v46, v47, v5, v6, v7, v9;
java.lang.String v1, v10, v15, v33, v38, v41;
org.eclipse.parsson.JsonPatchImpl$DiffGenerator v0;
java.lang.Object v12, v35, v43, v45;
v0 := @this: org.eclipse.parsson.JsonPatchImpl$DiffGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: jakarta.json.JsonArray;
v3 := @parameter2: jakarta.json.JsonArray;
v4 := @parameter3: int[][];
v5 := @parameter4: int;
v6 := @parameter5: int;
if v5 != 0 goto label1;
if v6 <= 0 goto label6;
v7 = v6 - 1;
specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: void emit(java.lang.String,jakarta.json.JsonArray,jakarta.json.JsonArray,int[][],int,int)>(v1, v2, v3, v4, v5, v7);
v8 = v0.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: jakarta.json.JsonPatchBuilder builder>;
v9 = v6 - 1;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v1, v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/\u0001");
v11 = v6 - 1;
v12 = interfaceinvoke v3.<jakarta.json.JsonArray: java.lang.Object get(int)>(v11);
interfaceinvoke v8.<jakarta.json.JsonPatchBuilder: jakarta.json.JsonPatchBuilder add(java.lang.String,jakarta.json.JsonValue)>(v10, v12);
goto label6;
label1:
if v6 != 0 goto label2;
if v5 <= 0 goto label6;
v13 = v0.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: jakarta.json.JsonPatchBuilder builder>;
v14 = v5 - 1;
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v1, v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/\u0001");
interfaceinvoke v13.<jakarta.json.JsonPatchBuilder: jakarta.json.JsonPatchBuilder remove(java.lang.String)>(v15);
v16 = v5 - 1;
specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: void emit(java.lang.String,jakarta.json.JsonArray,jakarta.json.JsonArray,int[][],int,int)>(v1, v2, v3, v4, v16, v6);
goto label6;
label2:
v17 = v4[v5];
v18 = v17[v6];
v19 = v18 & 1;
if v19 != 1 goto label3;
v20 = v5 - 1;
v21 = v6 - 1;
specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: void emit(java.lang.String,jakarta.json.JsonArray,jakarta.json.JsonArray,int[][],int,int)>(v1, v2, v3, v4, v20, v21);
goto label6;
label3:
v22 = v4[v5];
v23 = v6 - 1;
v24 = v22[v23];
v25 = v24 >> 1;
v26 = v5 - 1;
v27 = v4[v26];
v28 = v27[v6];
v29 = v28 >> 1;
if v25 <= v29 goto label4;
v30 = v6 - 1;
specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: void emit(java.lang.String,jakarta.json.JsonArray,jakarta.json.JsonArray,int[][],int,int)>(v1, v2, v3, v4, v5, v30);
v31 = v0.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: jakarta.json.JsonPatchBuilder builder>;
v32 = v6 - 1;
v33 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v1, v32) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/\u0001");
v34 = v6 - 1;
v35 = interfaceinvoke v3.<jakarta.json.JsonArray: java.lang.Object get(int)>(v34);
interfaceinvoke v31.<jakarta.json.JsonPatchBuilder: jakarta.json.JsonPatchBuilder add(java.lang.String,jakarta.json.JsonValue)>(v33, v35);
goto label6;
label4:
if v25 >= v29 goto label5;
v36 = v0.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: jakarta.json.JsonPatchBuilder builder>;
v37 = v5 - 1;
v38 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v1, v37) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/\u0001");
interfaceinvoke v36.<jakarta.json.JsonPatchBuilder: jakarta.json.JsonPatchBuilder remove(java.lang.String)>(v38);
v39 = v5 - 1;
specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: void emit(java.lang.String,jakarta.json.JsonArray,jakarta.json.JsonArray,int[][],int,int)>(v1, v2, v3, v4, v39, v6);
goto label6;
label5:
v40 = v5 - 1;
v41 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v1, v40) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/\u0001");
v42 = v5 - 1;
v43 = interfaceinvoke v2.<jakarta.json.JsonArray: java.lang.Object get(int)>(v42);
v44 = v6 - 1;
v45 = interfaceinvoke v3.<jakarta.json.JsonArray: java.lang.Object get(int)>(v44);
specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: void diff(java.lang.String,jakarta.json.JsonValue,jakarta.json.JsonValue)>(v41, v43, v45);
v46 = v5 - 1;
v47 = v6 - 1;
specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: void emit(java.lang.String,jakarta.json.JsonArray,jakarta.json.JsonArray,int[][],int,int)>(v1, v2, v3, v4, v46, v47);
label6:
return;
}
}