public class org.eclipse.parsson.JsonPatchImpl extends java.lang.Object implements jakarta.json.JsonPatch
{
private final jakarta.json.JsonArray patch;
public void <init>(jakarta.json.JsonArray)
{
org.eclipse.parsson.JsonPatchImpl v0;
jakarta.json.JsonArray v1;
v0 := @this: org.eclipse.parsson.JsonPatchImpl;
v1 := @parameter0: jakarta.json.JsonArray;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.eclipse.parsson.JsonPatchImpl: jakarta.json.JsonArray patch> = v1;
return;
}
public boolean equals(java.lang.Object)
{
org.eclipse.parsson.JsonPatchImpl v0;
java.lang.Class v2;
java.lang.Object v1;
jakarta.json.JsonArray v3, v4;
boolean v5;
v0 := @this: org.eclipse.parsson.JsonPatchImpl;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == class "Lorg/eclipse/parsson/JsonPatchImpl;" goto label3;
label2:
return 0;
label3:
v3 = v0.<org.eclipse.parsson.JsonPatchImpl: jakarta.json.JsonArray patch>;
v4 = v1.<org.eclipse.parsson.JsonPatchImpl: jakarta.json.JsonArray patch>;
v5 = virtualinvoke v3.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
return v5;
}
public int hashCode()
{
int v2;
org.eclipse.parsson.JsonPatchImpl v0;
jakarta.json.JsonArray v1;
v0 := @this: org.eclipse.parsson.JsonPatchImpl;
v1 = v0.<org.eclipse.parsson.JsonPatchImpl: jakarta.json.JsonArray patch>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public java.lang.String toString()
{
org.eclipse.parsson.JsonPatchImpl v0;
java.lang.String v2;
jakarta.json.JsonArray v1;
v0 := @this: org.eclipse.parsson.JsonPatchImpl;
v1 = v0.<org.eclipse.parsson.JsonPatchImpl: jakarta.json.JsonArray patch>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public jakarta.json.JsonStructure apply(jakarta.json.JsonStructure)
{
org.eclipse.parsson.JsonPatchImpl v0;
java.util.Iterator v4;
jakarta.json.JsonValue v11;
jakarta.json.JsonStructure v1, v2;
jakarta.json.JsonValue$ValueType v7, v8;
java.lang.Object v6;
jakarta.json.JsonException v9;
java.lang.String v10;
jakarta.json.JsonArray v3;
boolean v5;
v0 := @this: org.eclipse.parsson.JsonPatchImpl;
v1 := @parameter0: jakarta.json.JsonStructure;
v2 = v1;
v3 = v0.<org.eclipse.parsson.JsonPatchImpl: jakarta.json.JsonArray patch>;
v4 = interfaceinvoke v3.<jakarta.json.JsonArray: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label3;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v8 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType OBJECT>;
if v7 == v8 goto label2;
v9 = new jakarta.json.JsonException;
v10 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PATCH_MUST_BE_ARRAY()>();
specialinvoke v9.<jakarta.json.JsonException: void <init>(java.lang.String)>(v10);
throw v9;
label2:
v2 = specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl: jakarta.json.JsonStructure apply(jakarta.json.JsonStructure,jakarta.json.JsonObject)>(v2, v11);
goto label1;
label3:
return v2;
}
public jakarta.json.JsonArray toJsonArray()
{
org.eclipse.parsson.JsonPatchImpl v0;
jakarta.json.JsonArray v1;
v0 := @this: org.eclipse.parsson.JsonPatchImpl;
v1 = v0.<org.eclipse.parsson.JsonPatchImpl: jakarta.json.JsonArray patch>;
return v1;
}
public static jakarta.json.JsonArray diff(jakarta.json.JsonStructure, jakarta.json.JsonStructure)
{
jakarta.json.JsonStructure v0, v1;
org.eclipse.parsson.JsonPatchImpl$DiffGenerator v2;
jakarta.json.JsonArray v3;
v0 := @parameter0: jakarta.json.JsonStructure;
v1 := @parameter1: jakarta.json.JsonStructure;
v2 = new org.eclipse.parsson.JsonPatchImpl$DiffGenerator;
specialinvoke v2.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: void <init>()>();
v3 = virtualinvoke v2.<org.eclipse.parsson.JsonPatchImpl$DiffGenerator: jakarta.json.JsonArray diff(jakarta.json.JsonStructure,jakarta.json.JsonStructure)>(v0, v1);
return v3;
}
private jakarta.json.JsonStructure apply(jakarta.json.JsonStructure, jakarta.json.JsonObject)
{
org.eclipse.parsson.JsonPatchImpl v0;
jakarta.json.JsonValue v12, v14, v18, v33, v35, v36, v40;
int[] v7;
jakarta.json.JsonObject v2;
boolean v22, v28, v31, v37;
jakarta.json.JsonPointer v17, v27, v3;
jakarta.json.JsonStructure v1, v13, v15, v16, v19, v32, v34;
int v10, v11, v23, v24;
jakarta.json.JsonException v25, v29, v38, v43, v5;
java.lang.String v20, v21, v26, v30, v39, v41, v42, v44, v45, v6, v8;
jakarta.json.JsonPatch$Operation v9;
jakarta.json.JsonString v4;
v0 := @this: org.eclipse.parsson.JsonPatchImpl;
v1 := @parameter0: jakarta.json.JsonStructure;
v2 := @parameter1: jakarta.json.JsonObject;
v3 = specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl: jakarta.json.JsonPointer getPointer(jakarta.json.JsonObject,java.lang.String)>(v2, "path");
v4 = interfaceinvoke v2.<jakarta.json.JsonObject: jakarta.json.JsonString getJsonString(java.lang.String)>("op");
if v4 != null goto label01;
v5 = new jakarta.json.JsonException;
v6 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PATCH_OPERATION_MISSING()>();
specialinvoke v5.<jakarta.json.JsonException: void <init>(java.lang.String)>(v6);
throw v5;
label01:
v7 = <org.eclipse.parsson.JsonPatchImpl$1: int[] $SwitchMap$jakarta$json$JsonPatch$Operation>;
v8 = interfaceinvoke v4.<jakarta.json.JsonString: java.lang.String getString()>();
v9 = staticinvoke <jakarta.json.JsonPatch$Operation: jakarta.json.JsonPatch$Operation fromOperationName(java.lang.String)>(v8);
v10 = virtualinvoke v9.<jakarta.json.JsonPatch$Operation: int ordinal()>();
v11 = v7[v10];
tableswitch(v11)
{
case 1: goto label02;
case 2: goto label03;
case 3: goto label04;
case 4: goto label05;
case 5: goto label06;
case 6: goto label10;
default: goto label12;
};
label02:
v12 = specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl: jakarta.json.JsonValue getValue(jakarta.json.JsonObject)>(v2);
v13 = interfaceinvoke v3.<jakarta.json.JsonPointer: jakarta.json.JsonStructure add(jakarta.json.JsonStructure,jakarta.json.JsonValue)>(v1, v12);
return v13;
label03:
v14 = specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl: jakarta.json.JsonValue getValue(jakarta.json.JsonObject)>(v2);
v15 = interfaceinvoke v3.<jakarta.json.JsonPointer: jakarta.json.JsonStructure replace(jakarta.json.JsonStructure,jakarta.json.JsonValue)>(v1, v14);
return v15;
label04:
v16 = interfaceinvoke v3.<jakarta.json.JsonPointer: jakarta.json.JsonStructure remove(jakarta.json.JsonStructure)>(v1);
return v16;
label05:
v17 = specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl: jakarta.json.JsonPointer getPointer(jakarta.json.JsonObject,java.lang.String)>(v2, "from");
v18 = interfaceinvoke v17.<jakarta.json.JsonPointer: jakarta.json.JsonValue getValue(jakarta.json.JsonStructure)>(v1);
v19 = interfaceinvoke v3.<jakarta.json.JsonPointer: jakarta.json.JsonStructure add(jakarta.json.JsonStructure,jakarta.json.JsonValue)>(v1, v18);
return v19;
label06:
v20 = interfaceinvoke v2.<jakarta.json.JsonObject: java.lang.String getString(java.lang.String)>("path");
v21 = interfaceinvoke v2.<jakarta.json.JsonObject: java.lang.String getString(java.lang.String)>("from");
v22 = virtualinvoke v20.<java.lang.String: boolean startsWith(java.lang.String)>(v21);
if v22 == 0 goto label07;
v23 = virtualinvoke v21.<java.lang.String: int length()>();
v24 = virtualinvoke v20.<java.lang.String: int length()>();
if v23 >= v24 goto label07;
v25 = new jakarta.json.JsonException;
v26 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PATCH_MOVE_PROPER_PREFIX(java.lang.String,java.lang.String)>(v21, v20);
specialinvoke v25.<jakarta.json.JsonException: void <init>(java.lang.String)>(v26);
throw v25;
label07:
v27 = specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl: jakarta.json.JsonPointer getPointer(jakarta.json.JsonObject,java.lang.String)>(v2, "from");
v28 = interfaceinvoke v27.<jakarta.json.JsonPointer: boolean containsValue(jakarta.json.JsonStructure)>(v1);
if v28 != 0 goto label08;
v29 = new jakarta.json.JsonException;
v30 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PATCH_MOVE_TARGET_NULL(java.lang.String)>(v21);
specialinvoke v29.<jakarta.json.JsonException: void <init>(java.lang.String)>(v30);
throw v29;
label08:
v31 = virtualinvoke v3.<java.lang.Object: boolean equals(java.lang.Object)>(v27);
if v31 == 0 goto label09;
return v1;
label09:
v32 = interfaceinvoke v27.<jakarta.json.JsonPointer: jakarta.json.JsonStructure remove(jakarta.json.JsonStructure)>(v1);
v33 = interfaceinvoke v27.<jakarta.json.JsonPointer: jakarta.json.JsonValue getValue(jakarta.json.JsonStructure)>(v1);
v34 = interfaceinvoke v3.<jakarta.json.JsonPointer: jakarta.json.JsonStructure add(jakarta.json.JsonStructure,jakarta.json.JsonValue)>(v32, v33);
return v34;
label10:
v35 = specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl: jakarta.json.JsonValue getValue(jakarta.json.JsonObject)>(v2);
v36 = interfaceinvoke v3.<jakarta.json.JsonPointer: jakarta.json.JsonValue getValue(jakarta.json.JsonStructure)>(v1);
v37 = virtualinvoke v35.<java.lang.Object: boolean equals(java.lang.Object)>(v36);
if v37 != 0 goto label11;
v38 = new jakarta.json.JsonException;
v39 = interfaceinvoke v2.<jakarta.json.JsonObject: java.lang.String getString(java.lang.String)>("path");
v40 = specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl: jakarta.json.JsonValue getValue(jakarta.json.JsonObject)>(v2);
v41 = interfaceinvoke v40.<jakarta.json.JsonValue: java.lang.String toString()>();
v42 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PATCH_TEST_FAILED(java.lang.String,java.lang.String)>(v39, v41);
specialinvoke v38.<jakarta.json.JsonException: void <init>(java.lang.String)>(v42);
throw v38;
label11:
return v1;
label12:
v43 = new jakarta.json.JsonException;
v44 = interfaceinvoke v2.<jakarta.json.JsonObject: java.lang.String getString(java.lang.String)>("op");
v45 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PATCH_ILLEGAL_OPERATION(java.lang.String)>(v44);
specialinvoke v43.<jakarta.json.JsonException: void <init>(java.lang.String)>(v45);
throw v43;
}
private jakarta.json.JsonPointer getPointer(jakarta.json.JsonObject, java.lang.String)
{
org.eclipse.parsson.JsonPatchImpl v0;
jakarta.json.JsonObject v1;
java.lang.String v2, v4, v6;
org.eclipse.parsson.JsonPointerImpl v5;
jakarta.json.JsonString v3;
v0 := @this: org.eclipse.parsson.JsonPatchImpl;
v1 := @parameter0: jakarta.json.JsonObject;
v2 := @parameter1: java.lang.String;
v3 = interfaceinvoke v1.<jakarta.json.JsonObject: jakarta.json.JsonString getJsonString(java.lang.String)>(v2);
if v3 != null goto label1;
v4 = interfaceinvoke v1.<jakarta.json.JsonObject: java.lang.String getString(java.lang.String)>("op");
specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl: void missingMember(java.lang.String,java.lang.String)>(v4, v2);
label1:
v5 = new org.eclipse.parsson.JsonPointerImpl;
v6 = interfaceinvoke v3.<jakarta.json.JsonString: java.lang.String getString()>();
specialinvoke v5.<org.eclipse.parsson.JsonPointerImpl: void <init>(java.lang.String)>(v6);
return v5;
}
private jakarta.json.JsonValue getValue(jakarta.json.JsonObject)
{
org.eclipse.parsson.JsonPatchImpl v0;
jakarta.json.JsonObject v1;
java.lang.Object v2;
java.lang.String v3;
v0 := @this: org.eclipse.parsson.JsonPatchImpl;
v1 := @parameter0: jakarta.json.JsonObject;
v2 = interfaceinvoke v1.<jakarta.json.JsonObject: java.lang.Object get(java.lang.Object)>("value");
if v2 != null goto label1;
v3 = interfaceinvoke v1.<jakarta.json.JsonObject: java.lang.String getString(java.lang.String)>("op");
specialinvoke v0.<org.eclipse.parsson.JsonPatchImpl: void missingMember(java.lang.String,java.lang.String)>(v3, "value");
label1:
return v2;
}
private void missingMember(java.lang.String, java.lang.String)
{
org.eclipse.parsson.JsonPatchImpl v0;
jakarta.json.JsonException v3;
java.lang.String v1, v2, v4;
v0 := @this: org.eclipse.parsson.JsonPatchImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = new jakarta.json.JsonException;
v4 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PATCH_MEMBER_MISSING(java.lang.String,java.lang.String)>(v1, v2);
specialinvoke v3.<jakarta.json.JsonException: void <init>(java.lang.String)>(v4);
throw v3;
}
}