public final class org.eclipse.parsson.JsonPointerImpl extends java.lang.Object implements jakarta.json.JsonPointer, java.io.Serializable
{
private static final long serialVersionUID;
private final java.lang.String[] tokens;
private final java.lang.String jsonPointer;
public void <init>(java.lang.String)
{
java.lang.String[] v11, v13, v23, v3, v5;
int v10, v12, v16, v17, v19, v2, v20, v21;
jakarta.json.JsonException v8;
java.lang.String v1, v14, v24, v4, v6, v9;
boolean v7;
char v18, v22;
java.lang.StringBuilder v15;
org.eclipse.parsson.JsonPointerImpl v0;
v0 := @this: org.eclipse.parsson.JsonPointerImpl;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.eclipse.parsson.JsonPointerImpl: java.lang.String jsonPointer> = v1;
v2 = (int) -1;
v3 = virtualinvoke v1.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("/", v2);
v0.<org.eclipse.parsson.JsonPointerImpl: java.lang.String[] tokens> = v3;
v4 = "";
v5 = v0.<org.eclipse.parsson.JsonPointerImpl: java.lang.String[] tokens>;
v6 = v5[0];
v7 = virtualinvoke v4.<java.lang.String: boolean equals(java.lang.Object)>(v6);
if v7 != 0 goto label1;
v8 = new jakarta.json.JsonException;
v9 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String POINTER_FORMAT_INVALID()>();
specialinvoke v8.<jakarta.json.JsonException: void <init>(java.lang.String)>(v9);
throw v8;
label1:
v10 = 1;
label2:
v11 = v0.<org.eclipse.parsson.JsonPointerImpl: java.lang.String[] tokens>;
v12 = lengthof v11;
if v10 >= v12 goto label7;
v13 = v0.<org.eclipse.parsson.JsonPointerImpl: java.lang.String[] tokens>;
v14 = v13[v10];
v15 = new java.lang.StringBuilder;
specialinvoke v15.<java.lang.StringBuilder: void <init>()>();
v16 = 0;
label3:
v17 = virtualinvoke v14.<java.lang.String: int length()>();
if v16 >= v17 goto label6;
v18 = virtualinvoke v14.<java.lang.String: char charAt(int)>(v16);
if v18 != 126 goto label5;
v19 = virtualinvoke v14.<java.lang.String: int length()>();
v20 = v19 - 1;
if v16 >= v20 goto label5;
v21 = v16 + 1;
v22 = virtualinvoke v14.<java.lang.String: char charAt(int)>(v21);
if v22 != 48 goto label4;
v18 = 126;
v16 = v16 + 1;
goto label5;
label4:
if v22 != 49 goto label5;
v18 = 47;
v16 = v16 + 1;
label5:
virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v18);
v16 = v16 + 1;
goto label3;
label6:
v23 = v0.<org.eclipse.parsson.JsonPointerImpl: java.lang.String[] tokens>;
v24 = virtualinvoke v15.<java.lang.StringBuilder: java.lang.String toString()>();
v23[v10] = v24;
v10 = v10 + 1;
goto label2;
label7:
return;
}
public boolean equals(java.lang.Object)
{
java.lang.Class v2;
java.lang.Object v1;
java.lang.String v3, v4;
org.eclipse.parsson.JsonPointerImpl v0;
boolean v5;
v0 := @this: org.eclipse.parsson.JsonPointerImpl;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == class "Lorg/eclipse/parsson/JsonPointerImpl;" goto label3;
label2:
return 0;
label3:
v3 = v0.<org.eclipse.parsson.JsonPointerImpl: java.lang.String jsonPointer>;
v4 = v1.<org.eclipse.parsson.JsonPointerImpl: java.lang.String jsonPointer>;
v5 = virtualinvoke v3.<java.lang.String: boolean equals(java.lang.Object)>(v4);
return v5;
}
public int hashCode()
{
int v2;
java.lang.String v1;
org.eclipse.parsson.JsonPointerImpl v0;
v0 := @this: org.eclipse.parsson.JsonPointerImpl;
v1 = v0.<org.eclipse.parsson.JsonPointerImpl: java.lang.String jsonPointer>;
v2 = virtualinvoke v1.<java.lang.String: int hashCode()>();
return v2;
}
public boolean containsValue(jakarta.json.JsonStructure)
{
org.eclipse.parsson.NodeReference v3;
jakarta.json.JsonStructure v1;
org.eclipse.parsson.NodeReference[] v2;
org.eclipse.parsson.JsonPointerImpl v0;
boolean v4;
v0 := @this: org.eclipse.parsson.JsonPointerImpl;
v1 := @parameter0: jakarta.json.JsonStructure;
v2 = specialinvoke v0.<org.eclipse.parsson.JsonPointerImpl: org.eclipse.parsson.NodeReference[] getReferences(jakarta.json.JsonStructure)>(v1);
v3 = v2[0];
v4 = virtualinvoke v3.<org.eclipse.parsson.NodeReference: boolean contains()>();
return v4;
}
public jakarta.json.JsonValue getValue(jakarta.json.JsonStructure)
{
org.eclipse.parsson.NodeReference v3;
jakarta.json.JsonStructure v1;
org.eclipse.parsson.NodeReference[] v2;
jakarta.json.JsonValue v4;
org.eclipse.parsson.JsonPointerImpl v0;
v0 := @this: org.eclipse.parsson.JsonPointerImpl;
v1 := @parameter0: jakarta.json.JsonStructure;
v2 = specialinvoke v0.<org.eclipse.parsson.JsonPointerImpl: org.eclipse.parsson.NodeReference[] getReferences(jakarta.json.JsonStructure)>(v1);
v3 = v2[0];
v4 = virtualinvoke v3.<org.eclipse.parsson.NodeReference: jakarta.json.JsonValue get()>();
return v4;
}
public jakarta.json.JsonStructure add(jakarta.json.JsonStructure, jakarta.json.JsonValue)
{
jakarta.json.JsonStructure v1, v4;
jakarta.json.JsonValue v2;
java.util.function.BiFunction v3;
org.eclipse.parsson.JsonPointerImpl v0;
v0 := @this: org.eclipse.parsson.JsonPointerImpl;
v1 := @parameter0: jakarta.json.JsonStructure;
v2 := @parameter1: jakarta.json.JsonValue;
v3 = staticinvoke <org.eclipse.parsson.JsonPointerImpl$add__584: java.util.function.BiFunction bootstrap$()>();
v4 = specialinvoke v0.<org.eclipse.parsson.JsonPointerImpl: jakarta.json.JsonStructure execute(java.util.function.BiFunction,jakarta.json.JsonStructure,jakarta.json.JsonValue)>(v3, v1, v2);
return v4;
}
public jakarta.json.JsonStructure replace(jakarta.json.JsonStructure, jakarta.json.JsonValue)
{
jakarta.json.JsonStructure v1, v4;
jakarta.json.JsonValue v2;
java.util.function.BiFunction v3;
org.eclipse.parsson.JsonPointerImpl v0;
v0 := @this: org.eclipse.parsson.JsonPointerImpl;
v1 := @parameter0: jakarta.json.JsonStructure;
v2 := @parameter1: jakarta.json.JsonValue;
v3 = staticinvoke <org.eclipse.parsson.JsonPointerImpl$replace__585: java.util.function.BiFunction bootstrap$()>();
v4 = specialinvoke v0.<org.eclipse.parsson.JsonPointerImpl: jakarta.json.JsonStructure execute(java.util.function.BiFunction,jakarta.json.JsonStructure,jakarta.json.JsonValue)>(v3, v1, v2);
return v4;
}
public jakarta.json.JsonStructure remove(jakarta.json.JsonStructure)
{
jakarta.json.JsonStructure v1, v3;
java.util.function.BiFunction v2;
org.eclipse.parsson.JsonPointerImpl v0;
v0 := @this: org.eclipse.parsson.JsonPointerImpl;
v1 := @parameter0: jakarta.json.JsonStructure;
v2 = staticinvoke <org.eclipse.parsson.JsonPointerImpl$lambda_remove_0__586: java.util.function.BiFunction bootstrap$()>();
v3 = specialinvoke v0.<org.eclipse.parsson.JsonPointerImpl: jakarta.json.JsonStructure execute(java.util.function.BiFunction,jakarta.json.JsonStructure,jakarta.json.JsonValue)>(v2, v1, null);
return v3;
}
public java.lang.String toString()
{
java.lang.String v1;
org.eclipse.parsson.JsonPointerImpl v0;
v0 := @this: org.eclipse.parsson.JsonPointerImpl;
v1 = v0.<org.eclipse.parsson.JsonPointerImpl: java.lang.String jsonPointer>;
return v1;
}
private jakarta.json.JsonStructure execute(java.util.function.BiFunction, jakarta.json.JsonStructure, jakarta.json.JsonValue)
{
org.eclipse.parsson.NodeReference[] v4;
jakarta.json.JsonValue v3;
java.util.function.BiFunction v1;
org.eclipse.parsson.NodeReference v5, v9;
jakarta.json.JsonStructure v2;
int v7, v8;
java.lang.Object v6;
org.eclipse.parsson.JsonPointerImpl v0;
v0 := @this: org.eclipse.parsson.JsonPointerImpl;
v1 := @parameter0: java.util.function.BiFunction;
v2 := @parameter1: jakarta.json.JsonStructure;
v3 := @parameter2: jakarta.json.JsonValue;
v4 = specialinvoke v0.<org.eclipse.parsson.JsonPointerImpl: org.eclipse.parsson.NodeReference[] getReferences(jakarta.json.JsonStructure)>(v2);
v5 = v4[0];
v6 = interfaceinvoke v1.<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>(v5, v3);
v7 = 1;
label1:
v8 = lengthof v4;
if v7 >= v8 goto label2;
v9 = v4[v7];
v6 = virtualinvoke v9.<org.eclipse.parsson.NodeReference: jakarta.json.JsonStructure replace(jakarta.json.JsonValue)>(v6);
v7 = v7 + 1;
goto label1;
label2:
return v6;
}
private org.eclipse.parsson.NodeReference[] getReferences(jakarta.json.JsonStructure)
{
int[] v13;
org.eclipse.parsson.JsonPointerImpl v0;
java.lang.String[] v10, v19, v2, v23, v27, v30, v6;
jakarta.json.JsonStructure v1;
int v11, v12, v15, v16, v17, v18, v22, v3, v32, v33, v34, v36, v37, v38, v40, v7, v8;
jakarta.json.JsonValue$ValueType v14, v43;
jakarta.json.JsonException v26, v39, v42;
java.lang.String v20, v24, v28, v29, v31, v41, v44;
org.eclipse.parsson.NodeReference[] v4, v9;
org.eclipse.parsson.NodeReference v21, v35, v5;
java.lang.Object v25;
v0 := @this: org.eclipse.parsson.JsonPointerImpl;
v1 := @parameter0: jakarta.json.JsonStructure;
v2 = v0.<org.eclipse.parsson.JsonPointerImpl: java.lang.String[] tokens>;
v3 = lengthof v2;
if v3 != 1 goto label1;
v4 = newarray (org.eclipse.parsson.NodeReference)[1];
v5 = staticinvoke <org.eclipse.parsson.NodeReference: org.eclipse.parsson.NodeReference of(jakarta.json.JsonStructure)>(v1);
v4[0] = v5;
return v4;
label1:
v6 = v0.<org.eclipse.parsson.JsonPointerImpl: java.lang.String[] tokens>;
v7 = lengthof v6;
v8 = v7 - 1;
v9 = newarray (org.eclipse.parsson.NodeReference)[v8];
v10 = v0.<org.eclipse.parsson.JsonPointerImpl: java.lang.String[] tokens>;
v11 = lengthof v10;
v12 = 1;
label2:
if v12 >= v11 goto label8;
v13 = <org.eclipse.parsson.JsonPointerImpl$1: int[] $SwitchMap$jakarta$json$JsonValue$ValueType>;
v14 = interfaceinvoke v1.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v15 = virtualinvoke v14.<jakarta.json.JsonValue$ValueType: int ordinal()>();
v16 = v13[v15];
lookupswitch(v16)
{
case 1: goto label3;
case 2: goto label4;
default: goto label6;
};
label3:
v17 = v11 - v12;
v18 = v17 - 1;
v19 = v0.<org.eclipse.parsson.JsonPointerImpl: java.lang.String[] tokens>;
v20 = v19[v12];
v21 = staticinvoke <org.eclipse.parsson.NodeReference: org.eclipse.parsson.NodeReference of(jakarta.json.JsonObject,java.lang.String)>(v1, v20);
v9[v18] = v21;
v22 = v11 - 1;
if v12 >= v22 goto label7;
v23 = v0.<org.eclipse.parsson.JsonPointerImpl: java.lang.String[] tokens>;
v24 = v23[v12];
v25 = interfaceinvoke v1.<jakarta.json.JsonObject: java.lang.Object get(java.lang.Object)>(v24);
if v25 != null goto label7;
v26 = new jakarta.json.JsonException;
v27 = v0.<org.eclipse.parsson.JsonPointerImpl: java.lang.String[] tokens>;
v28 = v27[v12];
v29 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String POINTER_MAPPING_MISSING(jakarta.json.JsonObject,java.lang.String)>(v1, v28);
specialinvoke v26.<jakarta.json.JsonException: void <init>(java.lang.String)>(v29);
throw v26;
label4:
v30 = v0.<org.eclipse.parsson.JsonPointerImpl: java.lang.String[] tokens>;
v31 = v30[v12];
v32 = staticinvoke <org.eclipse.parsson.JsonPointerImpl: int getIndex(java.lang.String)>(v31);
v33 = v11 - v12;
v34 = v33 - 1;
v35 = staticinvoke <org.eclipse.parsson.NodeReference: org.eclipse.parsson.NodeReference of(jakarta.json.JsonArray,int)>(v1, v32);
v9[v34] = v35;
v36 = v11 - 1;
if v12 >= v36 goto label7;
v37 = (int) -1;
if v32 == v37 goto label7;
v38 = interfaceinvoke v1.<jakarta.json.JsonArray: int size()>();
if v32 < v38 goto label5;
v39 = new jakarta.json.JsonException;
v40 = interfaceinvoke v1.<jakarta.json.JsonArray: int size()>();
v41 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String NODEREF_ARRAY_INDEX_ERR(int,int)>(v32, v40);
specialinvoke v39.<jakarta.json.JsonException: void <init>(java.lang.String)>(v41);
throw v39;
label5:
interfaceinvoke v1.<jakarta.json.JsonArray: java.lang.Object get(int)>(v32);
goto label7;
label6:
v42 = new jakarta.json.JsonException;
v43 = interfaceinvoke v25.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v44 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String POINTER_REFERENCE_INVALID(jakarta.json.JsonValue$ValueType)>(v43);
specialinvoke v42.<jakarta.json.JsonException: void <init>(java.lang.String)>(v44);
throw v42;
label7:
v12 = v12 + 1;
goto label2;
label8:
return v9;
}
private static int getIndex(java.lang.String)
{
char v7, v8;
java.lang.NumberFormatException v12;
int v1, v11, v5;
jakarta.json.JsonException v13, v2, v9;
java.lang.String v0, v10, v14, v3;
boolean v4, v6;
v0 := @parameter0: java.lang.String;
if v0 == null goto label1;
v1 = virtualinvoke v0.<java.lang.String: int length()>();
if v1 != 0 goto label2;
label1:
v2 = new jakarta.json.JsonException;
v3 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String POINTER_ARRAY_INDEX_ERR(java.lang.String)>(v0);
specialinvoke v2.<jakarta.json.JsonException: void <init>(java.lang.String)>(v3);
throw v2;
label2:
v4 = virtualinvoke v0.<java.lang.String: boolean equals(java.lang.Object)>("-");
if v4 == 0 goto label3;
v5 = (int) -1;
return v5;
label3:
v6 = virtualinvoke v0.<java.lang.String: boolean equals(java.lang.Object)>("0");
if v6 == 0 goto label4;
return 0;
label4:
v7 = virtualinvoke v0.<java.lang.String: char charAt(int)>(0);
if v7 == 43 goto label5;
v8 = virtualinvoke v0.<java.lang.String: char charAt(int)>(0);
if v8 != 45 goto label6;
label5:
v9 = new jakarta.json.JsonException;
v10 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String POINTER_ARRAY_INDEX_ERR(java.lang.String)>(v0);
specialinvoke v9.<jakarta.json.JsonException: void <init>(java.lang.String)>(v10);
throw v9;
label6:
v11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v0);
label7:
return v11;
label8:
v12 := @caughtexception;
v13 = new jakarta.json.JsonException;
v14 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String POINTER_ARRAY_INDEX_ILLEGAL(java.lang.String)>(v0);
specialinvoke v13.<jakarta.json.JsonException: void <init>(java.lang.String,java.lang.Throwable)>(v14, v12);
throw v13;
catch java.lang.NumberFormatException from label6 to label7 with label8;
}
}