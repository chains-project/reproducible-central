public class org.eclipse.parsson.JsonProviderImpl extends jakarta.json.spi.JsonProvider
{
private final org.eclipse.parsson.api.BufferPool bufferPool;
public void <init>()
{
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.BufferPoolImpl v1;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
specialinvoke v0.<jakarta.json.spi.JsonProvider: void <init>()>();
v1 = new org.eclipse.parsson.BufferPoolImpl;
specialinvoke v1.<org.eclipse.parsson.BufferPoolImpl: void <init>()>();
v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool> = v1;
return;
}
public jakarta.json.stream.JsonGenerator createGenerator(java.io.Writer)
{
java.io.Writer v1;
org.eclipse.parsson.JsonGeneratorImpl v2;
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.api.BufferPool v3;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.io.Writer;
v2 = new org.eclipse.parsson.JsonGeneratorImpl;
v3 = v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
specialinvoke v2.<org.eclipse.parsson.JsonGeneratorImpl: void <init>(java.io.Writer,org.eclipse.parsson.api.BufferPool)>(v1, v3);
return v2;
}
public jakarta.json.stream.JsonGenerator createGenerator(java.io.OutputStream)
{
java.io.OutputStream v1;
org.eclipse.parsson.JsonGeneratorImpl v2;
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.api.BufferPool v3;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.io.OutputStream;
v2 = new org.eclipse.parsson.JsonGeneratorImpl;
v3 = v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
specialinvoke v2.<org.eclipse.parsson.JsonGeneratorImpl: void <init>(java.io.OutputStream,org.eclipse.parsson.api.BufferPool)>(v1, v3);
return v2;
}
public jakarta.json.stream.JsonParser createParser(java.io.Reader)
{
org.eclipse.parsson.JsonParserImpl v2;
java.io.Reader v1;
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.api.BufferPool v3;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.io.Reader;
v2 = new org.eclipse.parsson.JsonParserImpl;
v3 = v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
specialinvoke v2.<org.eclipse.parsson.JsonParserImpl: void <init>(java.io.Reader,org.eclipse.parsson.api.BufferPool)>(v1, v3);
return v2;
}
public jakarta.json.stream.JsonParser createParser(java.io.InputStream)
{
org.eclipse.parsson.JsonParserImpl v2;
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.api.BufferPool v3;
java.io.InputStream v1;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.io.InputStream;
v2 = new org.eclipse.parsson.JsonParserImpl;
v3 = v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
specialinvoke v2.<org.eclipse.parsson.JsonParserImpl: void <init>(java.io.InputStream,org.eclipse.parsson.api.BufferPool)>(v1, v3);
return v2;
}
public jakarta.json.stream.JsonParserFactory createParserFactory(java.util.Map)
{
org.eclipse.parsson.JsonParserFactoryImpl v8;
org.eclipse.parsson.JsonProviderImpl v0;
java.util.Map v1;
java.lang.Class v2, v5;
java.lang.Object v7;
java.lang.String v3, v6;
boolean v4;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.util.Map;
if v1 == null goto label1;
v2 = class "Lorg/eclipse/parsson/api/BufferPool;";
v3 = virtualinvoke v2.<java.lang.Class: java.lang.String getName()>();
v4 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v3);
if v4 == 0 goto label1;
v5 = class "Lorg/eclipse/parsson/api/BufferPool;";
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
v7 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v6);
label1:
if v7 != null goto label2;
v7 = v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
label2:
v8 = new org.eclipse.parsson.JsonParserFactoryImpl;
specialinvoke v8.<org.eclipse.parsson.JsonParserFactoryImpl: void <init>(org.eclipse.parsson.api.BufferPool)>(v7);
return v8;
}
public jakarta.json.stream.JsonGeneratorFactory createGeneratorFactory(java.util.Map)
{
java.util.HashMap v4;
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.JsonGeneratorFactoryImpl v12;
java.util.Map v1, v2;
java.lang.Boolean v6;
java.lang.Class v10, v7;
java.lang.Object v9;
java.lang.String v11, v8;
boolean v3, v5;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.util.Map;
if v1 != null goto label1;
v2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
v3 = 0;
goto label5;
label1:
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>()>();
v5 = staticinvoke <org.eclipse.parsson.JsonProviderImpl: boolean isPrettyPrintingEnabled(java.util.Map)>(v1);
v3 = v5;
if v5 == 0 goto label2;
v6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jakarta.json.stream.JsonGenerator.prettyPrinting", v6);
label2:
v7 = class "Lorg/eclipse/parsson/api/BufferPool;";
v8 = virtualinvoke v7.<java.lang.Class: java.lang.String getName()>();
v9 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v8);
if v9 == null goto label3;
v10 = class "Lorg/eclipse/parsson/api/BufferPool;";
v11 = virtualinvoke v10.<java.lang.Class: java.lang.String getName()>();
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v11, v9);
goto label4;
label3:
v9 = v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
label4:
v2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v4);
label5:
v12 = new org.eclipse.parsson.JsonGeneratorFactoryImpl;
specialinvoke v12.<org.eclipse.parsson.JsonGeneratorFactoryImpl: void <init>(java.util.Map,boolean,org.eclipse.parsson.api.BufferPool)>(v2, v3, v9);
return v12;
}
public jakarta.json.JsonReader createReader(java.io.Reader)
{
java.io.Reader v1;
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.JsonReaderImpl v2;
org.eclipse.parsson.api.BufferPool v3;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.io.Reader;
v2 = new org.eclipse.parsson.JsonReaderImpl;
v3 = v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
specialinvoke v2.<org.eclipse.parsson.JsonReaderImpl: void <init>(java.io.Reader,org.eclipse.parsson.api.BufferPool)>(v1, v3);
return v2;
}
public jakarta.json.JsonReader createReader(java.io.InputStream)
{
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.JsonReaderImpl v2;
org.eclipse.parsson.api.BufferPool v3;
java.io.InputStream v1;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.io.InputStream;
v2 = new org.eclipse.parsson.JsonReaderImpl;
v3 = v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
specialinvoke v2.<org.eclipse.parsson.JsonReaderImpl: void <init>(java.io.InputStream,org.eclipse.parsson.api.BufferPool)>(v1, v3);
return v2;
}
public jakarta.json.JsonWriter createWriter(java.io.Writer)
{
java.io.Writer v1;
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.api.BufferPool v3;
org.eclipse.parsson.JsonWriterImpl v2;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.io.Writer;
v2 = new org.eclipse.parsson.JsonWriterImpl;
v3 = v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
specialinvoke v2.<org.eclipse.parsson.JsonWriterImpl: void <init>(java.io.Writer,org.eclipse.parsson.api.BufferPool)>(v1, v3);
return v2;
}
public jakarta.json.JsonWriter createWriter(java.io.OutputStream)
{
java.io.OutputStream v1;
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.api.BufferPool v3;
org.eclipse.parsson.JsonWriterImpl v2;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.io.OutputStream;
v2 = new org.eclipse.parsson.JsonWriterImpl;
v3 = v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
specialinvoke v2.<org.eclipse.parsson.JsonWriterImpl: void <init>(java.io.OutputStream,org.eclipse.parsson.api.BufferPool)>(v1, v3);
return v2;
}
public jakarta.json.JsonWriterFactory createWriterFactory(java.util.Map)
{
java.util.HashMap v4;
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.JsonWriterFactoryImpl v12;
java.util.Map v1, v2;
java.lang.Boolean v6;
java.lang.Class v10, v7;
java.lang.Object v9;
java.lang.String v11, v8;
boolean v3, v5;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.util.Map;
if v1 != null goto label1;
v2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
v3 = 0;
goto label5;
label1:
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>()>();
v5 = staticinvoke <org.eclipse.parsson.JsonProviderImpl: boolean isPrettyPrintingEnabled(java.util.Map)>(v1);
v3 = v5;
if v5 == 0 goto label2;
v6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jakarta.json.stream.JsonGenerator.prettyPrinting", v6);
label2:
v7 = class "Lorg/eclipse/parsson/api/BufferPool;";
v8 = virtualinvoke v7.<java.lang.Class: java.lang.String getName()>();
v9 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v8);
if v9 == null goto label3;
v10 = class "Lorg/eclipse/parsson/api/BufferPool;";
v11 = virtualinvoke v10.<java.lang.Class: java.lang.String getName()>();
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v11, v9);
goto label4;
label3:
v9 = v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
label4:
v2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v4);
label5:
v12 = new org.eclipse.parsson.JsonWriterFactoryImpl;
specialinvoke v12.<org.eclipse.parsson.JsonWriterFactoryImpl: void <init>(java.util.Map,boolean,org.eclipse.parsson.api.BufferPool)>(v2, v3, v9);
return v12;
}
public jakarta.json.JsonReaderFactory createReaderFactory(java.util.Map)
{
java.util.HashMap v4;
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.JsonReaderFactoryImpl v12;
java.util.Map v1, v2;
java.lang.Boolean v6;
java.lang.Class v10, v7;
java.lang.Object v9;
java.lang.String v11, v8;
boolean v3, v5;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.util.Map;
if v1 != null goto label1;
v2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
v3 = 0;
goto label5;
label1:
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>()>();
specialinvoke v0.<org.eclipse.parsson.JsonProviderImpl: void addKnowProperty(java.util.Map,java.util.Map,java.lang.String)>(v4, v1, "jakarta.json.JsonConfig.keyStrategy");
v5 = staticinvoke <org.eclipse.parsson.JsonProviderImpl: boolean isRejectDuplicateKeysEnabled(java.util.Map)>(v1);
v3 = v5;
if v5 == 0 goto label2;
v6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.parsson.rejectDuplicateKeys", v6);
label2:
v7 = class "Lorg/eclipse/parsson/api/BufferPool;";
v8 = virtualinvoke v7.<java.lang.Class: java.lang.String getName()>();
v9 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v8);
if v9 == null goto label3;
v10 = class "Lorg/eclipse/parsson/api/BufferPool;";
v11 = virtualinvoke v10.<java.lang.Class: java.lang.String getName()>();
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v11, v9);
goto label4;
label3:
v9 = v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
label4:
v2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v4);
label5:
v12 = new org.eclipse.parsson.JsonReaderFactoryImpl;
specialinvoke v12.<org.eclipse.parsson.JsonReaderFactoryImpl: void <init>(java.util.Map,org.eclipse.parsson.api.BufferPool,boolean)>(v2, v9, v3);
return v12;
}
public jakarta.json.JsonObjectBuilder createObjectBuilder()
{
org.eclipse.parsson.JsonObjectBuilderImpl v1;
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.api.BufferPool v2;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 = new org.eclipse.parsson.JsonObjectBuilderImpl;
v2 = v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
specialinvoke v1.<org.eclipse.parsson.JsonObjectBuilderImpl: void <init>(org.eclipse.parsson.api.BufferPool)>(v2);
return v1;
}
public jakarta.json.JsonObjectBuilder createObjectBuilder(jakarta.json.JsonObject)
{
org.eclipse.parsson.JsonObjectBuilderImpl v2;
jakarta.json.JsonObject v1;
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.api.BufferPool v3;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: jakarta.json.JsonObject;
v2 = new org.eclipse.parsson.JsonObjectBuilderImpl;
v3 = v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
specialinvoke v2.<org.eclipse.parsson.JsonObjectBuilderImpl: void <init>(jakarta.json.JsonObject,org.eclipse.parsson.api.BufferPool)>(v1, v3);
return v2;
}
public jakarta.json.JsonObjectBuilder createObjectBuilder(java.util.Map)
{
org.eclipse.parsson.JsonObjectBuilderImpl v2;
java.util.Map v1;
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.api.BufferPool v3;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.util.Map;
v2 = new org.eclipse.parsson.JsonObjectBuilderImpl;
v3 = v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
specialinvoke v2.<org.eclipse.parsson.JsonObjectBuilderImpl: void <init>(java.util.Map,org.eclipse.parsson.api.BufferPool)>(v1, v3);
return v2;
}
public jakarta.json.JsonArrayBuilder createArrayBuilder()
{
org.eclipse.parsson.JsonArrayBuilderImpl v1;
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.api.BufferPool v2;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 = new org.eclipse.parsson.JsonArrayBuilderImpl;
v2 = v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
specialinvoke v1.<org.eclipse.parsson.JsonArrayBuilderImpl: void <init>(org.eclipse.parsson.api.BufferPool)>(v2);
return v1;
}
public jakarta.json.JsonArrayBuilder createArrayBuilder(jakarta.json.JsonArray)
{
org.eclipse.parsson.JsonArrayBuilderImpl v2;
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.api.BufferPool v3;
jakarta.json.JsonArray v1;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: jakarta.json.JsonArray;
v2 = new org.eclipse.parsson.JsonArrayBuilderImpl;
v3 = v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
specialinvoke v2.<org.eclipse.parsson.JsonArrayBuilderImpl: void <init>(jakarta.json.JsonArray,org.eclipse.parsson.api.BufferPool)>(v1, v3);
return v2;
}
public jakarta.json.JsonArrayBuilder createArrayBuilder(java.util.Collection)
{
java.util.Collection v1;
org.eclipse.parsson.JsonArrayBuilderImpl v2;
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.api.BufferPool v3;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.util.Collection;
v2 = new org.eclipse.parsson.JsonArrayBuilderImpl;
v3 = v0.<org.eclipse.parsson.JsonProviderImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
specialinvoke v2.<org.eclipse.parsson.JsonArrayBuilderImpl: void <init>(java.util.Collection,org.eclipse.parsson.api.BufferPool)>(v1, v3);
return v2;
}
public jakarta.json.JsonPointer createPointer(java.lang.String)
{
java.lang.String v1;
org.eclipse.parsson.JsonPointerImpl v2;
org.eclipse.parsson.JsonProviderImpl v0;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.lang.String;
v2 = new org.eclipse.parsson.JsonPointerImpl;
specialinvoke v2.<org.eclipse.parsson.JsonPointerImpl: void <init>(java.lang.String)>(v1);
return v2;
}
public jakarta.json.JsonPatchBuilder createPatchBuilder()
{
org.eclipse.parsson.JsonPatchBuilderImpl v1;
org.eclipse.parsson.JsonProviderImpl v0;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 = new org.eclipse.parsson.JsonPatchBuilderImpl;
specialinvoke v1.<org.eclipse.parsson.JsonPatchBuilderImpl: void <init>()>();
return v1;
}
public jakarta.json.JsonPatchBuilder createPatchBuilder(jakarta.json.JsonArray)
{
org.eclipse.parsson.JsonPatchBuilderImpl v2;
org.eclipse.parsson.JsonProviderImpl v0;
jakarta.json.JsonArray v1;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: jakarta.json.JsonArray;
v2 = new org.eclipse.parsson.JsonPatchBuilderImpl;
specialinvoke v2.<org.eclipse.parsson.JsonPatchBuilderImpl: void <init>(jakarta.json.JsonArray)>(v1);
return v2;
}
public jakarta.json.JsonPatch createPatch(jakarta.json.JsonArray)
{
org.eclipse.parsson.JsonPatchImpl v2;
org.eclipse.parsson.JsonProviderImpl v0;
jakarta.json.JsonArray v1;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: jakarta.json.JsonArray;
v2 = new org.eclipse.parsson.JsonPatchImpl;
specialinvoke v2.<org.eclipse.parsson.JsonPatchImpl: void <init>(jakarta.json.JsonArray)>(v1);
return v2;
}
public jakarta.json.JsonPatch createDiff(jakarta.json.JsonStructure, jakarta.json.JsonStructure)
{
jakarta.json.JsonStructure v1, v2;
org.eclipse.parsson.JsonPatchImpl v3;
org.eclipse.parsson.JsonProviderImpl v0;
jakarta.json.JsonArray v4;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: jakarta.json.JsonStructure;
v2 := @parameter1: jakarta.json.JsonStructure;
v3 = new org.eclipse.parsson.JsonPatchImpl;
v4 = staticinvoke <org.eclipse.parsson.JsonPatchImpl: jakarta.json.JsonArray diff(jakarta.json.JsonStructure,jakarta.json.JsonStructure)>(v1, v2);
specialinvoke v3.<org.eclipse.parsson.JsonPatchImpl: void <init>(jakarta.json.JsonArray)>(v4);
return v3;
}
public jakarta.json.JsonMergePatch createMergePatch(jakarta.json.JsonValue)
{
org.eclipse.parsson.JsonProviderImpl v0;
jakarta.json.JsonValue v1;
org.eclipse.parsson.JsonMergePatchImpl v2;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: jakarta.json.JsonValue;
v2 = new org.eclipse.parsson.JsonMergePatchImpl;
specialinvoke v2.<org.eclipse.parsson.JsonMergePatchImpl: void <init>(jakarta.json.JsonValue)>(v1);
return v2;
}
public jakarta.json.JsonMergePatch createMergeDiff(jakarta.json.JsonValue, jakarta.json.JsonValue)
{
jakarta.json.JsonValue v1, v2, v4;
org.eclipse.parsson.JsonMergePatchImpl v3;
org.eclipse.parsson.JsonProviderImpl v0;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: jakarta.json.JsonValue;
v2 := @parameter1: jakarta.json.JsonValue;
v3 = new org.eclipse.parsson.JsonMergePatchImpl;
v4 = staticinvoke <org.eclipse.parsson.JsonMergePatchImpl: jakarta.json.JsonValue diff(jakarta.json.JsonValue,jakarta.json.JsonValue)>(v1, v2);
specialinvoke v3.<org.eclipse.parsson.JsonMergePatchImpl: void <init>(jakarta.json.JsonValue)>(v4);
return v3;
}
public jakarta.json.JsonString createValue(java.lang.String)
{
org.eclipse.parsson.JsonStringImpl v2;
java.lang.String v1;
org.eclipse.parsson.JsonProviderImpl v0;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.lang.String;
v2 = new org.eclipse.parsson.JsonStringImpl;
specialinvoke v2.<org.eclipse.parsson.JsonStringImpl: void <init>(java.lang.CharSequence)>(v1);
return v2;
}
public jakarta.json.JsonNumber createValue(int)
{
int v1;
jakarta.json.JsonNumber v2;
org.eclipse.parsson.JsonProviderImpl v0;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: int;
v2 = staticinvoke <org.eclipse.parsson.JsonNumberImpl: jakarta.json.JsonNumber getJsonNumber(int)>(v1);
return v2;
}
public jakarta.json.JsonNumber createValue(long)
{
jakarta.json.JsonNumber v2;
long v1;
org.eclipse.parsson.JsonProviderImpl v0;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: long;
v2 = staticinvoke <org.eclipse.parsson.JsonNumberImpl: jakarta.json.JsonNumber getJsonNumber(long)>(v1);
return v2;
}
public jakarta.json.JsonNumber createValue(double)
{
jakarta.json.JsonNumber v2;
org.eclipse.parsson.JsonProviderImpl v0;
double v1;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: double;
v2 = staticinvoke <org.eclipse.parsson.JsonNumberImpl: jakarta.json.JsonNumber getJsonNumber(double)>(v1);
return v2;
}
public jakarta.json.JsonNumber createValue(java.math.BigInteger)
{
jakarta.json.JsonNumber v2;
java.math.BigInteger v1;
org.eclipse.parsson.JsonProviderImpl v0;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.math.BigInteger;
v2 = staticinvoke <org.eclipse.parsson.JsonNumberImpl: jakarta.json.JsonNumber getJsonNumber(java.math.BigInteger)>(v1);
return v2;
}
public jakarta.json.JsonNumber createValue(java.math.BigDecimal)
{
java.math.BigDecimal v1;
jakarta.json.JsonNumber v2;
org.eclipse.parsson.JsonProviderImpl v0;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.math.BigDecimal;
v2 = staticinvoke <org.eclipse.parsson.JsonNumberImpl: jakarta.json.JsonNumber getJsonNumber(java.math.BigDecimal)>(v1);
return v2;
}
public jakarta.json.JsonBuilderFactory createBuilderFactory(java.util.Map)
{
org.eclipse.parsson.JsonProviderImpl v0;
org.eclipse.parsson.JsonBuilderFactoryImpl v9;
java.util.Map v1;
java.lang.Class v3, v6;
java.lang.Object v8;
java.lang.String v4, v7;
boolean v2, v5;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.util.Map;
v2 = 0;
if v1 == null goto label2;
v3 = class "Lorg/eclipse/parsson/api/BufferPool;";
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
v5 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v4);
if v5 == 0 goto label1;
v6 = class "Lorg/eclipse/parsson/api/BufferPool;";
v7 = virtualinvoke v6.<java.lang.Class: java.lang.String getName()>();
v8 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v7);
label1:
v2 = staticinvoke <org.eclipse.parsson.JsonProviderImpl: boolean isRejectDuplicateKeysEnabled(java.util.Map)>(v1);
label2:
v9 = new org.eclipse.parsson.JsonBuilderFactoryImpl;
specialinvoke v9.<org.eclipse.parsson.JsonBuilderFactoryImpl: void <init>(org.eclipse.parsson.api.BufferPool,boolean)>(v8, v2);
return v9;
}
public jakarta.json.JsonNumber createValue(java.lang.Number)
{
jakarta.json.JsonNumber v2;
org.eclipse.parsson.JsonProviderImpl v0;
java.lang.Number v1;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.lang.Number;
v2 = staticinvoke <org.eclipse.parsson.JsonNumberImpl: jakarta.json.JsonNumber getJsonNumber(java.lang.Number)>(v1);
return v2;
}
private void addKnowProperty(java.util.Map, java.util.Map, java.lang.String)
{
java.util.Map v1, v2;
java.lang.Object v5;
java.lang.String v3;
org.eclipse.parsson.JsonProviderImpl v0;
boolean v4;
v0 := @this: org.eclipse.parsson.JsonProviderImpl;
v1 := @parameter0: java.util.Map;
v2 := @parameter1: java.util.Map;
v3 := @parameter2: java.lang.String;
v4 = interfaceinvoke v2.<java.util.Map: boolean containsKey(java.lang.Object)>(v3);
if v4 == 0 goto label1;
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, v5);
label1:
return;
}
static boolean isPrettyPrintingEnabled(java.util.Map)
{
boolean v1;
java.util.Map v0;
v0 := @parameter0: java.util.Map;
v1 = interfaceinvoke v0.<java.util.Map: boolean containsKey(java.lang.Object)>("jakarta.json.stream.JsonGenerator.prettyPrinting");
return v1;
}
static boolean isRejectDuplicateKeysEnabled(java.util.Map)
{
boolean v1;
java.util.Map v0;
v0 := @parameter0: java.util.Map;
v1 = interfaceinvoke v0.<java.util.Map: boolean containsKey(java.lang.Object)>("org.eclipse.parsson.rejectDuplicateKeys");
return v1;
}
}