class org.eclipse.parsson.NodeReference$ObjectReference extends org.eclipse.parsson.NodeReference
{
private final jakarta.json.JsonObject object;
private final java.lang.String key;
void <init>(jakarta.json.JsonObject, java.lang.String)
{
jakarta.json.JsonObject v1;
java.lang.String v2;
org.eclipse.parsson.NodeReference$ObjectReference v0;
v0 := @this: org.eclipse.parsson.NodeReference$ObjectReference;
v1 := @parameter0: jakarta.json.JsonObject;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<org.eclipse.parsson.NodeReference: void <init>()>();
v0.<org.eclipse.parsson.NodeReference$ObjectReference: jakarta.json.JsonObject object> = v1;
v0.<org.eclipse.parsson.NodeReference$ObjectReference: java.lang.String key> = v2;
return;
}
public boolean contains()
{
org.eclipse.parsson.NodeReference$ObjectReference v0;
jakarta.json.JsonObject v1, v2;
java.lang.String v3;
boolean v4, v5;
v0 := @this: org.eclipse.parsson.NodeReference$ObjectReference;
v1 = v0.<org.eclipse.parsson.NodeReference$ObjectReference: jakarta.json.JsonObject object>;
if v1 == null goto label1;
v2 = v0.<org.eclipse.parsson.NodeReference$ObjectReference: jakarta.json.JsonObject object>;
v3 = v0.<org.eclipse.parsson.NodeReference$ObjectReference: java.lang.String key>;
v4 = interfaceinvoke v2.<jakarta.json.JsonObject: boolean containsKey(java.lang.Object)>(v3);
if v4 == 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public jakarta.json.JsonValue get()
{
org.eclipse.parsson.NodeReference$ObjectReference v0;
jakarta.json.JsonObject v5;
java.lang.Object v7;
jakarta.json.JsonException v2;
java.lang.String v3, v4, v6;
boolean v1;
v0 := @this: org.eclipse.parsson.NodeReference$ObjectReference;
v1 = virtualinvoke v0.<org.eclipse.parsson.NodeReference$ObjectReference: boolean contains()>();
if v1 != 0 goto label1;
v2 = new jakarta.json.JsonException;
v3 = v0.<org.eclipse.parsson.NodeReference$ObjectReference: java.lang.String key>;
v4 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String NODEREF_OBJECT_MISSING(java.lang.String)>(v3);
specialinvoke v2.<jakarta.json.JsonException: void <init>(java.lang.String)>(v4);
throw v2;
label1:
v5 = v0.<org.eclipse.parsson.NodeReference$ObjectReference: jakarta.json.JsonObject object>;
v6 = v0.<org.eclipse.parsson.NodeReference$ObjectReference: java.lang.String key>;
v7 = interfaceinvoke v5.<jakarta.json.JsonObject: java.lang.Object get(java.lang.Object)>(v6);
return v7;
}
public jakarta.json.JsonObject add(jakarta.json.JsonValue)
{
org.eclipse.parsson.JsonObjectBuilderImpl v2;
jakarta.json.JsonValue v1;
jakarta.json.JsonObjectBuilder v6;
org.eclipse.parsson.NodeReference$ObjectReference v0;
jakarta.json.JsonObject v3, v7;
java.lang.String v5;
org.eclipse.parsson.api.BufferPool v4;
v0 := @this: org.eclipse.parsson.NodeReference$ObjectReference;
v1 := @parameter0: jakarta.json.JsonValue;
v2 = new org.eclipse.parsson.JsonObjectBuilderImpl;
v3 = v0.<org.eclipse.parsson.NodeReference$ObjectReference: jakarta.json.JsonObject object>;
v4 = staticinvoke <org.eclipse.parsson.JsonUtil: org.eclipse.parsson.api.BufferPool getInternalBufferPool()>();
specialinvoke v2.<org.eclipse.parsson.JsonObjectBuilderImpl: void <init>(jakarta.json.JsonObject,org.eclipse.parsson.api.BufferPool)>(v3, v4);
v5 = v0.<org.eclipse.parsson.NodeReference$ObjectReference: java.lang.String key>;
v6 = virtualinvoke v2.<org.eclipse.parsson.JsonObjectBuilderImpl: jakarta.json.JsonObjectBuilder add(java.lang.String,jakarta.json.JsonValue)>(v5, v1);
v7 = interfaceinvoke v6.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObject build()>();
return v7;
}
public jakarta.json.JsonObject remove()
{
org.eclipse.parsson.JsonObjectBuilderImpl v5;
jakarta.json.JsonObjectBuilder v9;
org.eclipse.parsson.NodeReference$ObjectReference v0;
jakarta.json.JsonObject v10, v6;
jakarta.json.JsonException v2;
java.lang.String v3, v4, v8;
org.eclipse.parsson.api.BufferPool v7;
boolean v1;
v0 := @this: org.eclipse.parsson.NodeReference$ObjectReference;
v1 = virtualinvoke v0.<org.eclipse.parsson.NodeReference$ObjectReference: boolean contains()>();
if v1 != 0 goto label1;
v2 = new jakarta.json.JsonException;
v3 = v0.<org.eclipse.parsson.NodeReference$ObjectReference: java.lang.String key>;
v4 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String NODEREF_OBJECT_MISSING(java.lang.String)>(v3);
specialinvoke v2.<jakarta.json.JsonException: void <init>(java.lang.String)>(v4);
throw v2;
label1:
v5 = new org.eclipse.parsson.JsonObjectBuilderImpl;
v6 = v0.<org.eclipse.parsson.NodeReference$ObjectReference: jakarta.json.JsonObject object>;
v7 = staticinvoke <org.eclipse.parsson.JsonUtil: org.eclipse.parsson.api.BufferPool getInternalBufferPool()>();
specialinvoke v5.<org.eclipse.parsson.JsonObjectBuilderImpl: void <init>(jakarta.json.JsonObject,org.eclipse.parsson.api.BufferPool)>(v6, v7);
v8 = v0.<org.eclipse.parsson.NodeReference$ObjectReference: java.lang.String key>;
v9 = virtualinvoke v5.<org.eclipse.parsson.JsonObjectBuilderImpl: jakarta.json.JsonObjectBuilder remove(java.lang.String)>(v8);
v10 = interfaceinvoke v9.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObject build()>();
return v10;
}
public jakarta.json.JsonObject replace(jakarta.json.JsonValue)
{
org.eclipse.parsson.NodeReference$ObjectReference v0;
jakarta.json.JsonValue v1;
jakarta.json.JsonObject v6;
jakarta.json.JsonException v3;
java.lang.String v4, v5;
boolean v2;
v0 := @this: org.eclipse.parsson.NodeReference$ObjectReference;
v1 := @parameter0: jakarta.json.JsonValue;
v2 = virtualinvoke v0.<org.eclipse.parsson.NodeReference$ObjectReference: boolean contains()>();
if v2 != 0 goto label1;
v3 = new jakarta.json.JsonException;
v4 = v0.<org.eclipse.parsson.NodeReference$ObjectReference: java.lang.String key>;
v5 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String NODEREF_OBJECT_MISSING(java.lang.String)>(v4);
specialinvoke v3.<jakarta.json.JsonException: void <init>(java.lang.String)>(v5);
throw v3;
label1:
v6 = virtualinvoke v0.<org.eclipse.parsson.NodeReference$ObjectReference: jakarta.json.JsonObject add(jakarta.json.JsonValue)>(v1);
return v6;
}
}