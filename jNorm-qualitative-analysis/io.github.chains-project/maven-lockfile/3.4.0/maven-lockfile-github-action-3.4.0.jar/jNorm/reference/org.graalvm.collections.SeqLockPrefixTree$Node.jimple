public final class org.graalvm.collections.SeqLockPrefixTree$Node extends java.util.concurrent.atomic.AtomicLong
{
private static final long serialVersionUID;
private volatile long seqlock;
private volatile long[] keys;
private volatile org.graalvm.collections.SeqLockPrefixTree$Node[] children;
private volatile int arity;
private void <init>()
{
org.graalvm.collections.SeqLockPrefixTree$Node v0;
v0 := @this: org.graalvm.collections.SeqLockPrefixTree$Node;
specialinvoke v0.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long seqlock> = 0L;
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys> = null;
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node[] children> = null;
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: int arity> = 0;
return;
}
public long value()
{
long v1;
org.graalvm.collections.SeqLockPrefixTree$Node v0;
v0 := @this: org.graalvm.collections.SeqLockPrefixTree$Node;
v1 = virtualinvoke v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long get()>();
return v1;
}
public long incValue()
{
long v1;
org.graalvm.collections.SeqLockPrefixTree$Node v0;
v0 := @this: org.graalvm.collections.SeqLockPrefixTree$Node;
v1 = virtualinvoke v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long incrementAndGet()>();
return v1;
}
public void setValue(long)
{
long v1;
org.graalvm.collections.SeqLockPrefixTree$Node v0;
v0 := @this: org.graalvm.collections.SeqLockPrefixTree$Node;
v1 := @parameter0: long;
virtualinvoke v0.<org.graalvm.collections.SeqLockPrefixTree$Node: void set(long)>(v1);
return;
}
public org.graalvm.collections.SeqLockPrefixTree$Node at(long)
{
byte v2;
long v1;
org.graalvm.collections.SeqLockPrefixTree$Node v0, v4, v5;
java.lang.IllegalArgumentException v3;
v0 := @this: org.graalvm.collections.SeqLockPrefixTree$Node;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 != 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Key in the prefix tree cannot be 0.");
throw v3;
label1:
v4 = specialinvoke v0.<org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node findChildLockFree(long)>(v1);
if v4 == null goto label2;
v5 = v4;
goto label3;
label2:
v5 = specialinvoke v0.<org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node tryAddChild(long)>(v1);
label3:
return v5;
}
public long seqlockValue()
{
long v1;
org.graalvm.collections.SeqLockPrefixTree$Node v0;
v0 := @this: org.graalvm.collections.SeqLockPrefixTree$Node;
v1 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long seqlock>;
return v1;
}
private org.graalvm.collections.SeqLockPrefixTree$Node findChildLockFree(long)
{
long v1, v2, v3, v8;
org.graalvm.collections.SeqLockPrefixTree$Node v0, v7;
long[] v5;
byte v4, v9;
org.graalvm.collections.SeqLockPrefixTree$Node[] v6;
v0 := @this: org.graalvm.collections.SeqLockPrefixTree$Node;
v1 := @parameter0: long;
v2 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long seqlock>;
v3 = v2 & 1L;
v4 = v3 cmp 1L;
if v4 != 0 goto label1;
return null;
label1:
v5 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys>;
v6 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node[] children>;
v7 = staticinvoke <org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node findChild(long[],org.graalvm.collections.SeqLockPrefixTree$Node[],long)>(v5, v6, v1);
v8 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long seqlock>;
v9 = v2 cmp v8;
if v9 == 0 goto label2;
return null;
label2:
return v7;
}
private static org.graalvm.collections.SeqLockPrefixTree$Node findChild(long[], org.graalvm.collections.SeqLockPrefixTree$Node[], long)
{
long v15, v2, v8;
org.graalvm.collections.SeqLockPrefixTree$Node v10, v17;
long[] v0;
byte v11, v16, v18, v9;
int v12, v13, v14, v19, v20, v3, v4, v5, v6, v7;
org.graalvm.collections.SeqLockPrefixTree$Node[] v1;
v0 := @parameter0: long[];
v1 := @parameter1: org.graalvm.collections.SeqLockPrefixTree$Node[];
v2 := @parameter2: long;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
return null;
label2:
v3 = lengthof v0;
v4 = lengthof v1;
if v3 == v4 goto label3;
return null;
label3:
v5 = lengthof v0;
if v5 > 6 goto label6;
v6 = 0;
label4:
v7 = lengthof v0;
if v6 >= v7 goto label9;
v8 = v0[v6];
v9 = v8 cmp v2;
if v9 != 0 goto label5;
v10 = v1[v6];
return v10;
label5:
v11 = v8 cmp 0L;
if v11 == 0 goto label9;
v6 = v6 + 1;
goto label4;
label6:
v12 = staticinvoke <org.graalvm.collections.SeqLockPrefixTree$Node: int hash(long)>(v2);
v13 = lengthof v0;
v14 = v12 % v13;
label7:
v15 = v0[v14];
v16 = v15 cmp v2;
if v16 != 0 goto label8;
v17 = v1[v14];
return v17;
label8:
v18 = v15 cmp 0L;
if v18 == 0 goto label9;
v19 = v14 + 1;
v20 = lengthof v0;
v14 = v19 % v20;
goto label7;
label9:
return null;
}
private synchronized org.graalvm.collections.SeqLockPrefixTree$Node tryAddChild(long)
{
java.lang.Throwable v16;
long v1, v14, v15, v17, v18, v6, v7;
org.graalvm.collections.SeqLockPrefixTree$Node v0, v11, v5;
long[] v12, v2, v3, v8, v9;
int v13;
org.graalvm.collections.SeqLockPrefixTree$Node[] v10, v4;
v0 := @this: org.graalvm.collections.SeqLockPrefixTree$Node;
v1 := @parameter0: long;
v2 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys>;
if v2 == null goto label1;
v3 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys>;
v4 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node[] children>;
v5 = staticinvoke <org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node findChild(long[],org.graalvm.collections.SeqLockPrefixTree$Node[],long)>(v3, v4, v1);
if v5 == null goto label1;
return v5;
label1:
v6 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long seqlock>;
v7 = v6 + 1L;
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long seqlock> = v7;
label2:
v8 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys>;
if v8 != null goto label3;
v9 = newarray (long)[3];
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys> = v9;
v10 = newarray (org.graalvm.collections.SeqLockPrefixTree$Node)[3];
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node[] children> = v10;
label3:
v11 = new org.graalvm.collections.SeqLockPrefixTree$Node;
specialinvoke v11.<org.graalvm.collections.SeqLockPrefixTree$Node: void <init>()>();
v12 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys>;
v13 = lengthof v12;
if v13 > 6 goto label4;
specialinvoke v0.<org.graalvm.collections.SeqLockPrefixTree$Node: void addChildToLinearNode(long,org.graalvm.collections.SeqLockPrefixTree$Node)>(v1, v11);
goto label5;
label4:
specialinvoke v0.<org.graalvm.collections.SeqLockPrefixTree$Node: void addChildToHashNode(long,org.graalvm.collections.SeqLockPrefixTree$Node)>(v1, v11);
label5:
v14 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long seqlock>;
v15 = v14 + 1L;
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long seqlock> = v15;
return v11;
label6:
v16 := @caughtexception;
v17 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long seqlock>;
v18 = v17 + 1L;
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long seqlock> = v18;
throw v16;
catch java.lang.Throwable from label2 to label5 with label6;
}
private void addChildToLinearNode(long, org.graalvm.collections.SeqLockPrefixTree$Node)
{
long v1, v19;
org.graalvm.collections.SeqLockPrefixTree$Node v0, v2, v21;
long[] v10, v16, v18, v22, v4, v7;
int v12, v13, v15, v17, v23, v25, v26, v27, v3, v5, v6, v8, v9;
org.graalvm.collections.SeqLockPrefixTree$Node[] v11, v14, v20, v24;
v0 := @this: org.graalvm.collections.SeqLockPrefixTree$Node;
v1 := @parameter0: long;
v2 := @parameter1: org.graalvm.collections.SeqLockPrefixTree$Node;
v3 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: int arity>;
v4 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys>;
v5 = lengthof v4;
if v3 != v5 goto label4;
v6 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: int arity>;
if v6 != 6 goto label1;
specialinvoke v0.<org.graalvm.collections.SeqLockPrefixTree$Node: void convertToHashNode()>();
specialinvoke v0.<org.graalvm.collections.SeqLockPrefixTree$Node: void addChildToHashNode(long,org.graalvm.collections.SeqLockPrefixTree$Node)>(v1, v2);
return;
label1:
v7 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys>;
v8 = lengthof v7;
v9 = 2 * v8;
v10 = newarray (long)[v9];
v11 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node[] children>;
v12 = lengthof v11;
v13 = 2 * v12;
v14 = newarray (org.graalvm.collections.SeqLockPrefixTree$Node)[v13];
v15 = 0;
label2:
v16 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys>;
v17 = lengthof v16;
if v15 >= v17 goto label3;
v18 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys>;
v19 = v18[v15];
v10[v15] = v19;
v20 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node[] children>;
v21 = v20[v15];
v14[v15] = v21;
v15 = v15 + 1;
goto label2;
label3:
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys> = v10;
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node[] children> = v14;
label4:
v22 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys>;
v23 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: int arity>;
v22[v23] = v1;
v24 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node[] children>;
v25 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: int arity>;
v24[v25] = v2;
v26 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: int arity>;
v27 = v26 + 1;
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: int arity> = v27;
return;
}
private void convertToHashNode()
{
long v7;
org.graalvm.collections.SeqLockPrefixTree$Node v0, v8;
long[] v1, v4;
int v3, v6;
org.graalvm.collections.SeqLockPrefixTree$Node[] v2, v5;
v0 := @this: org.graalvm.collections.SeqLockPrefixTree$Node;
v1 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys>;
v2 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node[] children>;
v3 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: int arity>;
v4 = newarray (long)[16];
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys> = v4;
v5 = newarray (org.graalvm.collections.SeqLockPrefixTree$Node)[16];
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node[] children> = v5;
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: int arity> = 0;
v6 = 0;
label1:
if v6 >= v3 goto label2;
v7 = v1[v6];
v8 = v2[v6];
specialinvoke v0.<org.graalvm.collections.SeqLockPrefixTree$Node: void addChildToHashNode(long,org.graalvm.collections.SeqLockPrefixTree$Node)>(v7, v8);
v6 = v6 + 1;
goto label1;
label2:
return;
}
private void addChildToHashNode(long, org.graalvm.collections.SeqLockPrefixTree$Node)
{
long v1;
org.graalvm.collections.SeqLockPrefixTree$Node v0, v2;
boolean v3;
v0 := @this: org.graalvm.collections.SeqLockPrefixTree$Node;
v1 := @parameter0: long;
v2 := @parameter1: org.graalvm.collections.SeqLockPrefixTree$Node;
v3 = specialinvoke v0.<org.graalvm.collections.SeqLockPrefixTree$Node: boolean mustGrowHash()>();
if v3 == 0 goto label1;
specialinvoke v0.<org.graalvm.collections.SeqLockPrefixTree$Node: void growHash()>();
label1:
specialinvoke v0.<org.graalvm.collections.SeqLockPrefixTree$Node: void addChildToNonFullHashNode(long,org.graalvm.collections.SeqLockPrefixTree$Node)>(v1, v2);
return;
}
private void addChildToNonFullHashNode(long, org.graalvm.collections.SeqLockPrefixTree$Node)
{
long v1, v8;
org.graalvm.collections.SeqLockPrefixTree$Node v0, v2;
long[] v11, v13, v4, v7;
byte v9;
int v10, v12, v15, v16, v3, v5, v6;
org.graalvm.collections.SeqLockPrefixTree$Node[] v14;
v0 := @this: org.graalvm.collections.SeqLockPrefixTree$Node;
v1 := @parameter0: long;
v2 := @parameter1: org.graalvm.collections.SeqLockPrefixTree$Node;
v3 = staticinvoke <org.graalvm.collections.SeqLockPrefixTree$Node: int hash(long)>(v1);
v4 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys>;
v5 = lengthof v4;
v6 = v3 % v5;
label1:
v7 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys>;
v8 = v7[v6];
v9 = v8 cmp 0L;
if v9 == 0 goto label2;
v10 = v6 + 1;
v11 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys>;
v12 = lengthof v11;
v6 = v10 % v12;
goto label1;
label2:
v13 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys>;
v13[v6] = v1;
v14 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node[] children>;
v14[v6] = v2;
v15 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: int arity>;
v16 = v15 + 1;
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: int arity> = v16;
return;
}
private boolean mustGrowHash()
{
long[] v2;
byte v5;
int v1, v3;
org.graalvm.collections.SeqLockPrefixTree$Node v0;
boolean v6;
double v4;
v0 := @this: org.graalvm.collections.SeqLockPrefixTree$Node;
v1 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: int arity>;
v2 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys>;
v3 = lengthof v2;
v4 = v1 / v3;
v5 = v4 cmpl 0.5;
if v5 <= 0 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
return v6;
}
private void growHash()
{
long v11;
org.graalvm.collections.SeqLockPrefixTree$Node v0, v13;
long[] v1, v5;
byte v12;
int v10, v3, v4, v6, v7, v9;
org.graalvm.collections.SeqLockPrefixTree$Node[] v2, v8;
v0 := @this: org.graalvm.collections.SeqLockPrefixTree$Node;
v1 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys>;
v2 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node[] children>;
v3 = lengthof v1;
v4 = 2 * v3;
v5 = newarray (long)[v4];
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys> = v5;
v6 = lengthof v2;
v7 = 2 * v6;
v8 = newarray (org.graalvm.collections.SeqLockPrefixTree$Node)[v7];
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node[] children> = v8;
v0.<org.graalvm.collections.SeqLockPrefixTree$Node: int arity> = 0;
v9 = 0;
label1:
v10 = lengthof v1;
if v9 >= v10 goto label3;
v11 = v1[v9];
v12 = v11 cmp 0L;
if v12 == 0 goto label2;
v13 = v2[v9];
specialinvoke v0.<org.graalvm.collections.SeqLockPrefixTree$Node: void addChildToNonFullHashNode(long,org.graalvm.collections.SeqLockPrefixTree$Node)>(v11, v13);
label2:
v9 = v9 + 1;
goto label1;
label3:
return;
}
private static int hash(long)
{
int v6;
long v0, v1, v2, v3, v4, v5;
v0 := @parameter0: long;
v1 = v0 * -7046033566014671411L;
v2 = staticinvoke <java.lang.Long: long reverseBytes(long)>(v1);
v3 = v2 * -7046033566014671411L;
v4 = v3 >> 32;
v5 = v3 ^ v4;
v6 = 2147483647 & v5;
return v6;
}
private synchronized java.lang.Object bottomUp(org.graalvm.collections.SeqLockPrefixTree$Visitor)
{
org.graalvm.collections.SeqLockPrefixTree$Visitor v1;
org.graalvm.collections.SeqLockPrefixTree$Node v0, v6, v7;
java.util.ArrayList v2;
int v4, v5;
java.lang.Object v8, v9;
org.graalvm.collections.SeqLockPrefixTree$Node[] v3;
v0 := @this: org.graalvm.collections.SeqLockPrefixTree$Node;
v1 := @parameter0: org.graalvm.collections.SeqLockPrefixTree$Visitor;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node[] children>;
v4 = 0;
label1:
v5 = lengthof v3;
if v4 >= v5 goto label3;
v6 = v3[v4];
if v6 == null goto label2;
v7 = v3[v4];
v8 = specialinvoke v7.<org.graalvm.collections.SeqLockPrefixTree$Node: java.lang.Object bottomUp(org.graalvm.collections.SeqLockPrefixTree$Visitor)>(v1);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v8);
label2:
v4 = v4 + 1;
goto label1;
label3:
v9 = interfaceinvoke v1.<org.graalvm.collections.SeqLockPrefixTree$Visitor: java.lang.Object visit(org.graalvm.collections.SeqLockPrefixTree$Node,java.util.List)>(v0, v2);
return v9;
}
public synchronized void topDown(java.lang.Object, java.util.function.BiFunction, java.util.function.BiConsumer)
{
java.util.function.BiFunction v2;
long v11, v6;
org.graalvm.collections.SeqLockPrefixTree$Node v0, v10;
long[] v5;
java.lang.Long v12, v7;
int v8, v9;
java.util.function.BiConsumer v3;
java.lang.Object v1, v13;
org.graalvm.collections.SeqLockPrefixTree$Node[] v4;
v0 := @this: org.graalvm.collections.SeqLockPrefixTree$Node;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.util.function.BiFunction;
v3 := @parameter2: java.util.function.BiConsumer;
v4 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: org.graalvm.collections.SeqLockPrefixTree$Node[] children>;
v5 = v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long[] keys>;
v6 = virtualinvoke v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long get()>();
v7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v6);
interfaceinvoke v3.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(v1, v7);
if v4 != null goto label1;
return;
label1:
v8 = 0;
label2:
v9 = lengthof v4;
if v8 >= v9 goto label4;
v10 = v4[v8];
if v10 == null goto label3;
v11 = v5[v8];
v12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v11);
v13 = interfaceinvoke v2.<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>(v1, v12);
virtualinvoke v10.<org.graalvm.collections.SeqLockPrefixTree$Node: void topDown(java.lang.Object,java.util.function.BiFunction,java.util.function.BiConsumer)>(v13, v2, v3);
label3:
v8 = v8 + 1;
goto label2;
label4:
return;
}
public java.lang.String toString()
{
long v1;
java.lang.String v2;
org.graalvm.collections.SeqLockPrefixTree$Node v0;
v0 := @this: org.graalvm.collections.SeqLockPrefixTree$Node;
v1 = virtualinvoke v0.<org.graalvm.collections.SeqLockPrefixTree$Node: long value()>();
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Node<\u0001>");
return v2;
}
}