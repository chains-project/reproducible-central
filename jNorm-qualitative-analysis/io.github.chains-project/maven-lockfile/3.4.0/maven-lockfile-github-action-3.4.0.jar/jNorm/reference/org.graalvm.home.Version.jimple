public final class org.graalvm.home.Version extends java.lang.Object implements java.lang.Comparable
{
private static final java.lang.String SNAPSHOT_STRING;
private static final java.lang.String SNAPSHOT_SUFFIX;
private static final int MIN_VERSION_DIGITS;
private final int[] versions;
private final java.lang.String suffix;
private final boolean snapshot;
static final boolean $assertionsDisabled;
transient void <init>(int[])
{
org.graalvm.home.Version v0;
int[] v1;
v0 := @this: org.graalvm.home.Version;
v1 := @parameter0: int[];
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.graalvm.home.Version: int[] versions> = v1;
v0.<org.graalvm.home.Version: java.lang.String suffix> = null;
v0.<org.graalvm.home.Version: boolean snapshot> = 0;
return;
}
void <init>(java.lang.String)
{
java.lang.String[] v15;
java.lang.AssertionError v26;
int[] v17, v27, v4;
int v12, v14, v16, v18, v19, v21, v25, v28, v5, v6, v7, v8;
java.lang.String v1, v10, v13, v20, v9;
boolean v11, v2, v24, v3;
java.lang.NumberFormatException v22;
java.lang.IllegalArgumentException v23, v29;
org.graalvm.home.Version v0;
v0 := @this: org.graalvm.home.Version;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = virtualinvoke v1.<java.lang.String: boolean equals(java.lang.Object)>("snapshot");
if v2 != 0 goto label01;
v3 = virtualinvoke v1.<java.lang.String: boolean equals(java.lang.Object)>("dev");
if v3 == 0 goto label02;
label01:
v0.<org.graalvm.home.Version: boolean snapshot> = 1;
v4 = newarray (int)[0];
v0.<org.graalvm.home.Version: int[] versions> = v4;
v0.<org.graalvm.home.Version: java.lang.String suffix> = "snapshot";
goto label13;
label02:
v5 = virtualinvoke v1.<java.lang.String: int indexOf(int)>(45);
v6 = (int) -1;
if v5 == v6 goto label03;
v7 = v5 + 1;
v8 = virtualinvoke v1.<java.lang.String: int length()>();
v9 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(v7, v8);
v0.<org.graalvm.home.Version: java.lang.String suffix> = v9;
v10 = v0.<org.graalvm.home.Version: java.lang.String suffix>;
v11 = virtualinvoke v10.<java.lang.String: boolean equals(java.lang.Object)>("dev");
v0.<org.graalvm.home.Version: boolean snapshot> = v11;
v12 = v5;
goto label04;
label03:
v0.<org.graalvm.home.Version: java.lang.String suffix> = null;
v0.<org.graalvm.home.Version: boolean snapshot> = 0;
v12 = virtualinvoke v1.<java.lang.String: int length()>();
label04:
v13 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, v12);
v14 = (int) -1;
v15 = virtualinvoke v13.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\.", v14);
v16 = lengthof v15;
v17 = newarray (int)[v16];
v18 = 0;
label05:
v19 = lengthof v15;
if v18 >= v19 goto label11;
label06:
v20 = v15[v18];
v21 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v20);
v17[v18] = v21;
label07:
goto label09;
label08:
v22 := @caughtexception;
v23 = staticinvoke <org.graalvm.home.Version: java.lang.IllegalArgumentException invalid(java.lang.String)>(v1);
throw v23;
label09:
v24 = <org.graalvm.home.Version: boolean $assertionsDisabled>;
if v24 != 0 goto label10;
v25 = v17[v18];
if v25 >= 0 goto label10;
v26 = new java.lang.AssertionError;
specialinvoke v26.<java.lang.AssertionError: void <init>()>();
throw v26;
label10:
v18 = v18 + 1;
goto label05;
label11:
v27 = staticinvoke <org.graalvm.home.Version: int[] trimTrailingZeros(int[])>(v17);
v28 = lengthof v27;
if v28 != 0 goto label12;
v29 = staticinvoke <org.graalvm.home.Version: java.lang.IllegalArgumentException invalid(java.lang.String)>(v1);
throw v29;
label12:
v0.<org.graalvm.home.Version: int[] versions> = v27;
label13:
return;
catch java.lang.NumberFormatException from label06 to label07 with label08;
}
private static int[] trimTrailingZeros(int[])
{
int[] v0, v7;
int v1, v2, v3, v4, v5, v6;
v0 := @parameter0: int[];
v1 = lengthof v0;
v2 = v1 - 1;
label1:
if v2 < 0 goto label2;
v3 = v0[v2];
if v3 != 0 goto label2;
v2 = v2 - 1;
goto label1;
label2:
v4 = lengthof v0;
v5 = v4 - 1;
if v2 == v5 goto label3;
v6 = v2 + 1;
v7 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(v0, v6);
return v7;
label3:
return v0;
}
private static java.lang.IllegalArgumentException invalid(java.lang.String)
{
java.lang.String v0, v2;
java.lang.IllegalArgumentException v1;
v0 := @parameter0: java.lang.String;
v1 = new java.lang.IllegalArgumentException;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid version string \'\u0001\'.");
specialinvoke v1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v2);
return v1;
}
public boolean isRelease()
{
org.graalvm.home.Version v0;
boolean v1, v2;
v0 := @this: org.graalvm.home.Version;
v1 = v0.<org.graalvm.home.Version: boolean snapshot>;
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public boolean isSnapshot()
{
org.graalvm.home.Version v0;
boolean v1;
v0 := @this: org.graalvm.home.Version;
v1 = v0.<org.graalvm.home.Version: boolean snapshot>;
return v1;
}
public int compareTo(org.graalvm.home.Version)
{
int[] v2, v3;
int v10, v11, v12, v13, v4, v5, v6, v7, v8, v9;
org.graalvm.home.Version v0, v1;
v0 := @this: org.graalvm.home.Version;
v1 := @parameter0: org.graalvm.home.Version;
v2 = v0.<org.graalvm.home.Version: int[] versions>;
v3 = v1.<org.graalvm.home.Version: int[] versions>;
v4 = 0;
label1:
v5 = lengthof v3;
v6 = lengthof v2;
v7 = staticinvoke <java.lang.Math: int max(int,int)>(v5, v6);
if v4 >= v7 goto label7;
v8 = lengthof v2;
if v4 < v8 goto label2;
v9 = 0;
goto label3;
label2:
v9 = v2[v4];
label3:
v10 = v9;
v11 = lengthof v3;
if v4 < v11 goto label4;
v12 = 0;
goto label5;
label4:
v12 = v3[v4];
label5:
v13 = staticinvoke <java.lang.Integer: int compare(int,int)>(v10, v12);
if v13 == 0 goto label6;
return v13;
label6:
v4 = v4 + 1;
goto label1;
label7:
return 0;
}
public transient int compareTo(int[])
{
int[] v1;
int v3;
org.graalvm.home.Version v0, v2;
v0 := @this: org.graalvm.home.Version;
v1 := @parameter0: int[];
v2 = staticinvoke <org.graalvm.home.Version: org.graalvm.home.Version create(int[])>(v1);
v3 = virtualinvoke v0.<org.graalvm.home.Version: int compareTo(org.graalvm.home.Version)>(v2);
return v3;
}
public boolean equals(java.lang.Object)
{
int[] v3, v4;
org.graalvm.home.Version v0;
java.lang.Object v1;
java.lang.String v8, v9;
boolean v10, v11, v2, v5, v6, v7;
v0 := @this: org.graalvm.home.Version;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof org.graalvm.home.Version;
if v2 != 0 goto label1;
return 0;
label1:
v3 = v0.<org.graalvm.home.Version: int[] versions>;
v4 = v1.<org.graalvm.home.Version: int[] versions>;
v5 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>(v3, v4);
if v5 == 0 goto label2;
v6 = v0.<org.graalvm.home.Version: boolean snapshot>;
v7 = v1.<org.graalvm.home.Version: boolean snapshot>;
if v6 != v7 goto label2;
v8 = v0.<org.graalvm.home.Version: java.lang.String suffix>;
v9 = v1.<org.graalvm.home.Version: java.lang.String suffix>;
v10 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v8, v9);
if v10 == 0 goto label2;
v11 = 1;
goto label3;
label2:
v11 = 0;
label3:
return v11;
}
public int hashCode()
{
java.lang.Object[] v1;
java.lang.Integer v4;
int[] v2;
int v3, v8;
org.graalvm.home.Version v0;
java.lang.Boolean v6;
java.lang.String v7;
boolean v5;
v0 := @this: org.graalvm.home.Version;
v1 = newarray (java.lang.Object)[3];
v2 = v0.<org.graalvm.home.Version: int[] versions>;
v3 = staticinvoke <java.util.Arrays: int hashCode(int[])>(v2);
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v1[0] = v4;
v5 = v0.<org.graalvm.home.Version: boolean snapshot>;
v6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v5);
v1[1] = v6;
v7 = v0.<org.graalvm.home.Version: java.lang.String suffix>;
v1[2] = v7;
v8 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>(v1);
return v8;
}
public java.lang.String toString()
{
java.lang.AssertionError v7;
int[] v1, v12, v15, v17;
int v11, v13, v14, v16, v18, v2;
java.lang.String v10, v19, v21, v22, v4, v5, v8;
boolean v3, v6;
org.graalvm.home.Version v0;
java.lang.StringBuilder v20, v9;
v0 := @this: org.graalvm.home.Version;
v1 = v0.<org.graalvm.home.Version: int[] versions>;
v2 = lengthof v1;
if v2 != 0 goto label3;
v3 = <org.graalvm.home.Version: boolean $assertionsDisabled>;
if v3 != 0 goto label2;
v4 = v0.<org.graalvm.home.Version: java.lang.String suffix>;
if v4 == null goto label1;
v5 = v0.<org.graalvm.home.Version: java.lang.String suffix>;
v6 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("snapshot");
if v6 != 0 goto label2;
label1:
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label2:
v8 = v0.<org.graalvm.home.Version: java.lang.String suffix>;
return v8;
label3:
v9 = new java.lang.StringBuilder;
specialinvoke v9.<java.lang.StringBuilder: void <init>()>();
v10 = "";
v11 = 0;
label4:
v12 = v0.<org.graalvm.home.Version: int[] versions>;
v13 = lengthof v12;
v14 = staticinvoke <java.lang.Math: int max(int,int)>(3, v13);
if v11 >= v14 goto label7;
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v10);
v15 = v0.<org.graalvm.home.Version: int[] versions>;
v16 = lengthof v15;
if v11 >= v16 goto label5;
v17 = v0.<org.graalvm.home.Version: int[] versions>;
v18 = v17[v11];
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v18);
goto label6;
label5:
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0);
label6:
v10 = ".";
v11 = v11 + 1;
goto label4;
label7:
v19 = v0.<org.graalvm.home.Version: java.lang.String suffix>;
if v19 == null goto label8;
v20 = virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");
v21 = v0.<org.graalvm.home.Version: java.lang.String suffix>;
virtualinvoke v20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v21);
label8:
v22 = virtualinvoke v9.<java.lang.StringBuilder: java.lang.String toString()>();
return v22;
}
public static org.graalvm.home.Version parse(java.lang.String) throws java.lang.IllegalArgumentException
{
org.graalvm.home.Version v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v1 = new org.graalvm.home.Version;
specialinvoke v1.<org.graalvm.home.Version: void <init>(java.lang.String)>(v0);
return v1;
}
public static transient org.graalvm.home.Version create(int[]) throws java.lang.IllegalArgumentException
{
java.lang.IllegalArgumentException v3, v7;
int[] v0, v1;
int v2, v4, v5, v6;
org.graalvm.home.Version v8;
v0 := @parameter0: int[];
virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v1 = staticinvoke <org.graalvm.home.Version: int[] trimTrailingZeros(int[])>(v0);
v2 = lengthof v1;
if v2 != 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("At least one non-zero version must be specified.");
throw v3;
label1:
v4 = 0;
label2:
v5 = lengthof v1;
if v4 >= v5 goto label4;
v6 = v1[v4];
if v6 >= 0 goto label3;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Versions must not be negative.");
throw v7;
label3:
v4 = v4 + 1;
goto label2;
label4:
v8 = new org.graalvm.home.Version;
specialinvoke v8.<org.graalvm.home.Version: void <init>(int[])>(v1);
return v8;
}
public static org.graalvm.home.Version getCurrent()
{
org.graalvm.home.Version v2;
java.lang.String v1;
org.graalvm.home.HomeFinder v0;
v0 = staticinvoke <org.graalvm.home.HomeFinder: org.graalvm.home.HomeFinder getInstance()>();
v1 = virtualinvoke v0.<org.graalvm.home.HomeFinder: java.lang.String getVersion()>();
v2 = staticinvoke <org.graalvm.home.Version: org.graalvm.home.Version parse(java.lang.String)>(v1);
return v2;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lorg/graalvm/home/Version;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<org.graalvm.home.Version: boolean $assertionsDisabled> = v2;
return;
}
}