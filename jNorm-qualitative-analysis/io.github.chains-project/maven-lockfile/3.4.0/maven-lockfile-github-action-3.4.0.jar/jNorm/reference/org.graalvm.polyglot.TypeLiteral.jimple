public abstract class org.graalvm.polyglot.TypeLiteral extends java.lang.Object
{
private final java.lang.reflect.Type type;
private final java.lang.Class rawType;
protected void <init>()
{
org.graalvm.polyglot.TypeLiteral v0;
java.lang.reflect.Type v2, v3;
java.lang.Class v1, v4;
v0 := @this: org.graalvm.polyglot.TypeLiteral;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <org.graalvm.polyglot.TypeLiteral: java.lang.reflect.Type extractLiteralType(java.lang.Class)>(v1);
v0.<org.graalvm.polyglot.TypeLiteral: java.lang.reflect.Type type> = v2;
v3 = v0.<org.graalvm.polyglot.TypeLiteral: java.lang.reflect.Type type>;
v4 = staticinvoke <org.graalvm.polyglot.TypeLiteral: java.lang.Class extractRawType(java.lang.reflect.Type)>(v3);
v0.<org.graalvm.polyglot.TypeLiteral: java.lang.Class rawType> = v4;
return;
}
private static java.lang.reflect.Type extractLiteralType(java.lang.Class)
{
java.lang.AssertionError v6, v8;
java.lang.reflect.Type v1, v3, v5;
java.lang.reflect.Type[] v4;
java.lang.Class v0;
boolean v2, v7;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();
label1:
v2 = v1 instanceof java.lang.reflect.ParameterizedType;
if v2 == 0 goto label3;
v3 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
if v3 != class "Lorg/graalvm/polyglot/TypeLiteral;" goto label2;
v4 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v5 = v4[0];
goto label6;
label2:
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>(java.lang.Object)>("Unsupported type hierarchy for type literal.");
throw v6;
label3:
v7 = v1 instanceof java.lang.Class;
if v7 == 0 goto label5;
if v1 != class "Lorg/graalvm/polyglot/TypeLiteral;" goto label4;
v5 = class "Ljava/lang/Object;";
goto label6;
label4:
v1 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();
goto label1;
label5:
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>(java.lang.Object)>("Unsupported type hierarchy for type literal.");
throw v8;
label6:
return v5;
}
private static java.lang.Class extractRawType(java.lang.reflect.Type)
{
java.lang.IllegalArgumentException v6;
java.lang.reflect.Type v0, v4;
java.lang.Class v5;
java.lang.String v7;
boolean v1, v2, v3;
v0 := @parameter0: java.lang.reflect.Type;
v1 = v0 instanceof java.lang.Class;
if v1 != 0 goto label3;
v2 = v0 instanceof java.lang.reflect.ParameterizedType;
if v2 == 0 goto label1;
interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
goto label3;
label1:
v3 = v0 instanceof java.lang.reflect.GenericArrayType;
if v3 == 0 goto label2;
v4 = interfaceinvoke v0.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v5 = staticinvoke <org.graalvm.polyglot.TypeLiteral: java.lang.Class extractRawType(java.lang.reflect.Type)>(v4);
v0 = staticinvoke <org.graalvm.polyglot.TypeLiteral: java.lang.Class arrayTypeFromComponentType(java.lang.Class)>(v5);
goto label3;
label2:
v6 = new java.lang.IllegalArgumentException;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unsupported type: \u0001");
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v7);
throw v6;
label3:
return v0;
}
private static java.lang.Class arrayTypeFromComponentType(java.lang.Class)
{
java.lang.Class v0, v2;
java.lang.Object v1;
v0 := @parameter0: java.lang.Class;
v1 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v0, 0);
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
return v2;
}
public final java.lang.reflect.Type getType()
{
org.graalvm.polyglot.TypeLiteral v0;
java.lang.reflect.Type v1;
v0 := @this: org.graalvm.polyglot.TypeLiteral;
v1 = v0.<org.graalvm.polyglot.TypeLiteral: java.lang.reflect.Type type>;
return v1;
}
public final java.lang.Class getRawType()
{
java.lang.Class v1;
org.graalvm.polyglot.TypeLiteral v0;
v0 := @this: org.graalvm.polyglot.TypeLiteral;
v1 = v0.<org.graalvm.polyglot.TypeLiteral: java.lang.Class rawType>;
return v1;
}
public final boolean equals(java.lang.Object)
{
java.lang.Object v1;
org.graalvm.polyglot.TypeLiteral v0;
boolean v2;
v0 := @this: org.graalvm.polyglot.TypeLiteral;
v1 := @parameter0: java.lang.Object;
v2 = specialinvoke v0.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
return v2;
}
public final int hashCode()
{
int v1;
org.graalvm.polyglot.TypeLiteral v0;
v0 := @this: org.graalvm.polyglot.TypeLiteral;
v1 = specialinvoke v0.<java.lang.Object: int hashCode()>();
return v1;
}
public final java.lang.String toString()
{
java.lang.String v2;
org.graalvm.polyglot.TypeLiteral v0;
java.lang.reflect.Type v1;
v0 := @this: org.graalvm.polyglot.TypeLiteral;
v1 = v0.<org.graalvm.polyglot.TypeLiteral: java.lang.reflect.Type type>;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("TypeLiteral<\u0001>");
return v2;
}
}