class org.jboss.logmanager.FastCopyHashMap extends java.util.AbstractMap implements java.util.Map, java.lang.Cloneable, java.io.Serializable
{
private static final java.lang.Object NULL;
private static final long serialVersionUID;
private static final int DEFAULT_CAPACITY;
private static final int MAXIMUM_CAPACITY;
private static final float DEFAULT_LOAD_FACTOR;
private transient org.jboss.logmanager.FastCopyHashMap$Entry[] table;
private transient int size;
private transient int threshold;
private final float loadFactor;
private transient int modCount;
private transient org.jboss.logmanager.FastCopyHashMap$KeySet keySet;
private transient org.jboss.logmanager.FastCopyHashMap$Values values;
private transient org.jboss.logmanager.FastCopyHashMap$EntrySet entrySet;
public void <init>(int, float)
{
org.jboss.logmanager.FastCopyHashMap v0;
byte v4, v5;
int v1;
float v2;
java.lang.IllegalArgumentException v3, v6;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 := @parameter0: int;
v2 := @parameter1: float;
specialinvoke v0.<java.util.AbstractMap: void <init>()>();
if v1 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can not have a negative size table!");
throw v3;
label1:
if v1 <= 1073741824 goto label2;
v1 = 1073741824;
label2:
v4 = v2 cmpl 0.0F;
if v4 <= 0 goto label3;
v5 = v2 cmpg 1.0F;
if v5 <= 0 goto label4;
label3:
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Load factor must be greater than 0 and less than or equal to 1");
throw v6;
label4:
v0.<org.jboss.logmanager.FastCopyHashMap: float loadFactor> = v2;
specialinvoke v0.<org.jboss.logmanager.FastCopyHashMap: void init(int,float)>(v1, v2);
return;
}
public void <init>(java.util.Map)
{
org.jboss.logmanager.FastCopyHashMap v0;
org.jboss.logmanager.FastCopyHashMap$Entry[] v3;
java.util.Map v1;
int v6, v7, v8;
float v5, v9;
java.lang.Object v4;
boolean v2;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 := @parameter0: java.util.Map;
specialinvoke v0.<java.util.AbstractMap: void <init>()>();
v2 = v1 instanceof org.jboss.logmanager.FastCopyHashMap;
if v2 == 0 goto label1;
v3 = v1.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table>;
v4 = virtualinvoke v3.<java.lang.Object: java.lang.Object clone()>();
v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table> = v4;
v5 = v1.<org.jboss.logmanager.FastCopyHashMap: float loadFactor>;
v0.<org.jboss.logmanager.FastCopyHashMap: float loadFactor> = v5;
v6 = v1.<org.jboss.logmanager.FastCopyHashMap: int size>;
v0.<org.jboss.logmanager.FastCopyHashMap: int size> = v6;
v7 = v1.<org.jboss.logmanager.FastCopyHashMap: int threshold>;
v0.<org.jboss.logmanager.FastCopyHashMap: int threshold> = v7;
goto label2;
label1:
v0.<org.jboss.logmanager.FastCopyHashMap: float loadFactor> = 0.67F;
v8 = interfaceinvoke v1.<java.util.Map: int size()>();
v9 = v0.<org.jboss.logmanager.FastCopyHashMap: float loadFactor>;
specialinvoke v0.<org.jboss.logmanager.FastCopyHashMap: void init(int,float)>(v8, v9);
virtualinvoke v0.<org.jboss.logmanager.FastCopyHashMap: void putAll(java.util.Map)>(v1);
label2:
return;
}
private void init(int, float)
{
org.jboss.logmanager.FastCopyHashMap v0;
org.jboss.logmanager.FastCopyHashMap$Entry[] v7;
int v1, v3, v5;
float v2, v4, v6;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 := @parameter0: int;
v2 := @parameter1: float;
v3 = 1;
label1:
if v3 >= v1 goto label2;
v3 = v3 << 1;
goto label1;
label2:
v4 = v3 * v2;
v0.<org.jboss.logmanager.FastCopyHashMap: int threshold> = v4;
v5 = v0.<org.jboss.logmanager.FastCopyHashMap: int threshold>;
if v1 <= v5 goto label3;
if v3 >= 1073741824 goto label3;
v3 = v3 << 1;
v6 = v3 * v2;
v0.<org.jboss.logmanager.FastCopyHashMap: int threshold> = v6;
label3:
v7 = newarray (org.jboss.logmanager.FastCopyHashMap$Entry)[v3];
v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table> = v7;
return;
}
public void <init>(int)
{
int v1;
org.jboss.logmanager.FastCopyHashMap v0;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 := @parameter0: int;
specialinvoke v0.<org.jboss.logmanager.FastCopyHashMap: void <init>(int,float)>(v1, 0.67F);
return;
}
public void <init>()
{
org.jboss.logmanager.FastCopyHashMap v0;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
specialinvoke v0.<org.jboss.logmanager.FastCopyHashMap: void <init>(int)>(8);
return;
}
private static final int hash(java.lang.Object)
{
int v1, v2, v3, v4, v5, v6, v7, v8, v9;
java.lang.Object v0;
v0 := @parameter0: java.lang.Object;
v1 = virtualinvoke v0.<java.lang.Object: int hashCode()>();
v2 = v1 >>> 20;
v3 = v1 >>> 12;
v4 = v2 ^ v3;
v5 = v1 ^ v4;
v6 = v5 >>> 7;
v7 = v5 ^ v6;
v8 = v5 >>> 4;
v9 = v7 ^ v8;
return v9;
}
private static final java.lang.Object maskNull(java.lang.Object)
{
java.lang.Object v0, v1;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
v1 = <org.jboss.logmanager.FastCopyHashMap: java.lang.Object NULL>;
goto label2;
label1:
v1 = v0;
label2:
return v1;
}
private static final java.lang.Object unmaskNull(java.lang.Object)
{
java.lang.Object v0, v1, v2;
v0 := @parameter0: java.lang.Object;
v1 = <org.jboss.logmanager.FastCopyHashMap: java.lang.Object NULL>;
if v0 != v1 goto label1;
v2 = null;
goto label2;
label1:
v2 = v0;
label2:
return v2;
}
private int nextIndex(int, int)
{
org.jboss.logmanager.FastCopyHashMap v0;
int v1, v2, v3, v4;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v2 - 1;
if v1 < v3 goto label1;
v4 = 0;
goto label2;
label1:
v4 = v1 + 1;
label2:
return v4;
}
private static final boolean eq(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
boolean v2, v3;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
if v0 == v1 goto label1;
if v0 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v2 == 0 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
private static final int index(int, int)
{
int v0, v1, v2, v3;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 = v1 - 1;
v3 = v0 & v2;
return v3;
}
public int size()
{
int v1;
org.jboss.logmanager.FastCopyHashMap v0;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 = v0.<org.jboss.logmanager.FastCopyHashMap: int size>;
return v1;
}
public boolean isEmpty()
{
int v1;
org.jboss.logmanager.FastCopyHashMap v0;
boolean v2;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 = v0.<org.jboss.logmanager.FastCopyHashMap: int size>;
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public java.lang.Object get(java.lang.Object)
{
org.jboss.logmanager.FastCopyHashMap v0;
org.jboss.logmanager.FastCopyHashMap$Entry[] v4, v8;
org.jboss.logmanager.FastCopyHashMap$Entry v9;
int v10, v3, v5, v6, v7;
java.lang.Object v1, v11, v13, v2;
boolean v12;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: java.lang.Object maskNull(java.lang.Object)>(v1);
v3 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: int hash(java.lang.Object)>(v2);
v4 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table>;
v5 = lengthof v4;
v6 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: int index(int,int)>(v3, v5);
v7 = v6;
label1:
v8 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table>;
v9 = v8[v6];
if v9 != null goto label2;
return null;
label2:
v10 = v9.<org.jboss.logmanager.FastCopyHashMap$Entry: int hash>;
if v10 != v3 goto label3;
v11 = v9.<org.jboss.logmanager.FastCopyHashMap$Entry: java.lang.Object key>;
v12 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: boolean eq(java.lang.Object,java.lang.Object)>(v2, v11);
if v12 == 0 goto label3;
v13 = v9.<org.jboss.logmanager.FastCopyHashMap$Entry: java.lang.Object value>;
return v13;
label3:
v6 = specialinvoke v0.<org.jboss.logmanager.FastCopyHashMap: int nextIndex(int,int)>(v6, v5);
if v6 != v7 goto label1;
return null;
}
public boolean containsKey(java.lang.Object)
{
org.jboss.logmanager.FastCopyHashMap v0;
org.jboss.logmanager.FastCopyHashMap$Entry[] v4, v8;
org.jboss.logmanager.FastCopyHashMap$Entry v9;
int v10, v3, v5, v6, v7;
java.lang.Object v1, v11, v2;
boolean v12;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: java.lang.Object maskNull(java.lang.Object)>(v1);
v3 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: int hash(java.lang.Object)>(v2);
v4 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table>;
v5 = lengthof v4;
v6 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: int index(int,int)>(v3, v5);
v7 = v6;
label1:
v8 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table>;
v9 = v8[v6];
if v9 != null goto label2;
return 0;
label2:
v10 = v9.<org.jboss.logmanager.FastCopyHashMap$Entry: int hash>;
if v10 != v3 goto label3;
v11 = v9.<org.jboss.logmanager.FastCopyHashMap$Entry: java.lang.Object key>;
v12 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: boolean eq(java.lang.Object,java.lang.Object)>(v2, v11);
if v12 == 0 goto label3;
return 1;
label3:
v6 = specialinvoke v0.<org.jboss.logmanager.FastCopyHashMap: int nextIndex(int,int)>(v6, v5);
if v6 != v7 goto label1;
return 0;
}
public boolean containsValue(java.lang.Object)
{
org.jboss.logmanager.FastCopyHashMap v0;
org.jboss.logmanager.FastCopyHashMap$Entry[] v2;
org.jboss.logmanager.FastCopyHashMap$Entry v5;
int v3, v4;
java.lang.Object v1, v6;
boolean v7;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 := @parameter0: java.lang.Object;
v2 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label3;
v5 = v2[v4];
if v5 == null goto label2;
v6 = v5.<org.jboss.logmanager.FastCopyHashMap$Entry: java.lang.Object value>;
v7 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: boolean eq(java.lang.Object,java.lang.Object)>(v1, v6);
if v7 == 0 goto label2;
return 1;
label2:
v4 = v4 + 1;
goto label1;
label3:
return 0;
}
public java.lang.Object put(java.lang.Object, java.lang.Object)
{
java.lang.IllegalStateException v17;
org.jboss.logmanager.FastCopyHashMap v0;
org.jboss.logmanager.FastCopyHashMap$Entry[] v4;
int v10, v15, v18, v19, v21, v22, v23, v5, v6, v7, v8;
boolean v12;
org.jboss.logmanager.FastCopyHashMap$Entry v13, v20, v9;
java.lang.Object v1, v11, v14, v16, v2, v3;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: java.lang.Object maskNull(java.lang.Object)>(v1);
v4 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table>;
v5 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: int hash(java.lang.Object)>(v3);
v6 = lengthof v4;
v7 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: int index(int,int)>(v5, v6);
v8 = v7;
label1:
v9 = v4[v7];
if v9 == null goto label3;
v10 = v9.<org.jboss.logmanager.FastCopyHashMap$Entry: int hash>;
if v10 != v5 goto label2;
v11 = v9.<org.jboss.logmanager.FastCopyHashMap$Entry: java.lang.Object key>;
v12 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: boolean eq(java.lang.Object,java.lang.Object)>(v3, v11);
if v12 == 0 goto label2;
v13 = new org.jboss.logmanager.FastCopyHashMap$Entry;
v14 = v9.<org.jboss.logmanager.FastCopyHashMap$Entry: java.lang.Object key>;
v15 = v9.<org.jboss.logmanager.FastCopyHashMap$Entry: int hash>;
specialinvoke v13.<org.jboss.logmanager.FastCopyHashMap$Entry: void <init>(java.lang.Object,int,java.lang.Object)>(v14, v15, v2);
v4[v7] = v13;
v16 = v9.<org.jboss.logmanager.FastCopyHashMap$Entry: java.lang.Object value>;
return v16;
label2:
v7 = specialinvoke v0.<org.jboss.logmanager.FastCopyHashMap: int nextIndex(int,int)>(v7, v6);
if v7 != v8 goto label1;
v17 = new java.lang.IllegalStateException;
specialinvoke v17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Table is full!");
throw v17;
label3:
v18 = v0.<org.jboss.logmanager.FastCopyHashMap: int modCount>;
v19 = v18 + 1;
v0.<org.jboss.logmanager.FastCopyHashMap: int modCount> = v19;
v20 = new org.jboss.logmanager.FastCopyHashMap$Entry;
specialinvoke v20.<org.jboss.logmanager.FastCopyHashMap$Entry: void <init>(java.lang.Object,int,java.lang.Object)>(v3, v5, v2);
v4[v7] = v20;
v21 = v0.<org.jboss.logmanager.FastCopyHashMap: int size>;
v22 = v21 + 1;
v0.<org.jboss.logmanager.FastCopyHashMap: int size> = v22;
v23 = v0.<org.jboss.logmanager.FastCopyHashMap: int threshold>;
if v22 < v23 goto label4;
specialinvoke v0.<org.jboss.logmanager.FastCopyHashMap: void resize(int)>(v6);
label4:
return null;
}
private void resize(int)
{
org.jboss.logmanager.FastCopyHashMap v0;
org.jboss.logmanager.FastCopyHashMap$Entry[] v3, v4;
org.jboss.logmanager.FastCopyHashMap$Entry v10, v7;
int v1, v2, v5, v6, v8, v9;
float v11, v12;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 := @parameter0: int;
v2 = v1 << 1;
if v2 > 1073741824 goto label1;
if v2 > v1 goto label2;
label1:
return;
label2:
v3 = newarray (org.jboss.logmanager.FastCopyHashMap$Entry)[v2];
v4 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table>;
v5 = lengthof v4;
v6 = 0;
label3:
if v6 >= v5 goto label7;
v7 = v4[v6];
if v7 == null goto label6;
v8 = v7.<org.jboss.logmanager.FastCopyHashMap$Entry: int hash>;
v9 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: int index(int,int)>(v8, v2);
label4:
v10 = v3[v9];
if v10 == null goto label5;
v9 = specialinvoke v0.<org.jboss.logmanager.FastCopyHashMap: int nextIndex(int,int)>(v9, v2);
goto label4;
label5:
v3[v9] = v7;
label6:
v6 = v6 + 1;
goto label3;
label7:
v11 = v0.<org.jboss.logmanager.FastCopyHashMap: float loadFactor>;
v12 = v11 * v2;
v0.<org.jboss.logmanager.FastCopyHashMap: int threshold> = v12;
v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table> = v3;
return;
}
public void putAll(java.util.Map)
{
org.jboss.logmanager.FastCopyHashMap v0;
java.util.Iterator v7;
org.jboss.logmanager.FastCopyHashMap$Entry[] v4;
java.util.Set v6;
java.util.Map v1;
int v2, v3, v5;
java.lang.Object v10, v11, v9;
boolean v8;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 := @parameter0: java.util.Map;
v2 = interfaceinvoke v1.<java.util.Map: int size()>();
if v2 != 0 goto label1;
return;
label1:
v3 = v0.<org.jboss.logmanager.FastCopyHashMap: int threshold>;
if v2 <= v3 goto label5;
if v2 <= 1073741824 goto label2;
v2 = 1073741824;
label2:
v4 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table>;
v5 = lengthof v4;
label3:
if v5 >= v2 goto label4;
v5 = v5 << 1;
goto label3;
label4:
specialinvoke v0.<org.jboss.logmanager.FastCopyHashMap: void resize(int)>(v5);
label5:
v6 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v7 = interfaceinvoke v6.<java.util.Set: java.util.Iterator iterator()>();
label6:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label7;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = interfaceinvoke v9.<java.util.Map$Entry: java.lang.Object getKey()>();
v11 = interfaceinvoke v9.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v0.<org.jboss.logmanager.FastCopyHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, v11);
goto label6;
label7:
return;
}
public java.lang.Object remove(java.lang.Object)
{
org.jboss.logmanager.FastCopyHashMap v0;
org.jboss.logmanager.FastCopyHashMap$Entry[] v3;
int v12, v13, v14, v15, v4, v5, v6, v7, v9;
boolean v11;
org.jboss.logmanager.FastCopyHashMap$Entry v8;
java.lang.Object v1, v10, v16, v2;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: java.lang.Object maskNull(java.lang.Object)>(v1);
v3 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table>;
v4 = lengthof v3;
v5 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: int hash(java.lang.Object)>(v2);
v6 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: int index(int,int)>(v5, v4);
v7 = v6;
label1:
v8 = v3[v7];
if v8 != null goto label2;
return null;
label2:
v9 = v8.<org.jboss.logmanager.FastCopyHashMap$Entry: int hash>;
if v9 != v5 goto label3;
v10 = v8.<org.jboss.logmanager.FastCopyHashMap$Entry: java.lang.Object key>;
v11 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: boolean eq(java.lang.Object,java.lang.Object)>(v2, v10);
if v11 == 0 goto label3;
v3[v7] = null;
specialinvoke v0.<org.jboss.logmanager.FastCopyHashMap: void relocate(int)>(v7);
v12 = v0.<org.jboss.logmanager.FastCopyHashMap: int modCount>;
v13 = v12 + 1;
v0.<org.jboss.logmanager.FastCopyHashMap: int modCount> = v13;
v14 = v0.<org.jboss.logmanager.FastCopyHashMap: int size>;
v15 = v14 - 1;
v0.<org.jboss.logmanager.FastCopyHashMap: int size> = v15;
v16 = v8.<org.jboss.logmanager.FastCopyHashMap$Entry: java.lang.Object value>;
return v16;
label3:
v7 = specialinvoke v0.<org.jboss.logmanager.FastCopyHashMap: int nextIndex(int,int)>(v7, v4);
if v7 != v6 goto label1;
return null;
}
private void relocate(int)
{
org.jboss.logmanager.FastCopyHashMap v0;
org.jboss.logmanager.FastCopyHashMap$Entry[] v2;
org.jboss.logmanager.FastCopyHashMap$Entry v5;
int v1, v3, v4, v6, v7;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 := @parameter0: int;
v2 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table>;
v3 = lengthof v2;
v4 = specialinvoke v0.<org.jboss.logmanager.FastCopyHashMap: int nextIndex(int,int)>(v1, v3);
label1:
v5 = v2[v4];
if v5 != null goto label2;
return;
label2:
v6 = v5.<org.jboss.logmanager.FastCopyHashMap$Entry: int hash>;
v7 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: int index(int,int)>(v6, v3);
if v4 >= v7 goto label3;
if v7 <= v1 goto label4;
if v1 <= v4 goto label4;
label3:
if v7 > v1 goto label5;
if v1 > v4 goto label5;
label4:
v2[v1] = v5;
v2[v4] = null;
v1 = v4;
label5:
v4 = specialinvoke v0.<org.jboss.logmanager.FastCopyHashMap: int nextIndex(int,int)>(v4, v3);
goto label1;
}
public void clear()
{
org.jboss.logmanager.FastCopyHashMap v0;
org.jboss.logmanager.FastCopyHashMap$Entry[] v3;
int v1, v2, v4, v5;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 = v0.<org.jboss.logmanager.FastCopyHashMap: int modCount>;
v2 = v1 + 1;
v0.<org.jboss.logmanager.FastCopyHashMap: int modCount> = v2;
v3 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table>;
v4 = 0;
label1:
v5 = lengthof v3;
if v4 >= v5 goto label2;
v3[v4] = null;
v4 = v4 + 1;
goto label1;
label2:
v0.<org.jboss.logmanager.FastCopyHashMap: int size> = 0;
return;
}
public org.jboss.logmanager.FastCopyHashMap clone()
{
java.lang.IllegalStateException v5;
org.jboss.logmanager.FastCopyHashMap v0;
org.jboss.logmanager.FastCopyHashMap$Entry[] v2;
java.lang.Object v1, v3;
java.lang.CloneNotSupportedException v4;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
label1:
v1 = specialinvoke v0.<java.util.AbstractMap: java.lang.Object clone()>();
v2 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table>;
v3 = virtualinvoke v2.<java.lang.Object: java.lang.Object clone()>();
v1.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table> = v3;
v1.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$EntrySet entrySet> = null;
v1.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Values values> = null;
v1.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$KeySet keySet> = null;
label2:
return v1;
label3:
v4 := @caughtexception;
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v4);
throw v5;
catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
}
public void printDebugStats()
{
org.jboss.logmanager.FastCopyHashMap v0;
org.jboss.logmanager.FastCopyHashMap$Entry[] v11, v6, v8;
int v1, v10, v12, v13, v14, v15, v17, v2, v26, v3, v4, v5, v7;
java.lang.String v18, v20, v24, v28, v30;
java.io.PrintStream v16, v19, v21, v25, v29;
org.jboss.logmanager.FastCopyHashMap$Entry v9;
float v22, v23, v27;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 = 0;
v2 = 0;
v3 = 0;
v4 = 0;
v5 = 0;
label1:
v6 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table>;
v7 = lengthof v6;
if v5 >= v7 goto label5;
v8 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table>;
v9 = v8[v5];
if v9 == null goto label4;
v2 = v2 + 1;
v10 = v9.<org.jboss.logmanager.FastCopyHashMap$Entry: int hash>;
v11 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table>;
v12 = lengthof v11;
v13 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: int index(int,int)>(v10, v12);
if v5 != v13 goto label2;
v1 = v1 + 1;
goto label4;
label2:
v14 = v5 - v13;
v15 = staticinvoke <java.lang.Math: int abs(int)>(v14);
if v15 <= v4 goto label3;
v4 = v15;
label3:
v3 = v3 + v15;
label4:
v5 = v5 + 1;
goto label1;
label5:
v16 = <java.lang.System: java.io.PrintStream out>;
v17 = v0.<org.jboss.logmanager.FastCopyHashMap: int size>;
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v17) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(" Size:            \u0001");
virtualinvoke v16.<java.io.PrintStream: void println(java.lang.String)>(v18);
v19 = <java.lang.System: java.io.PrintStream out>;
v20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(" Real Size:       \u0001");
virtualinvoke v19.<java.io.PrintStream: void println(java.lang.String)>(v20);
v21 = <java.lang.System: java.io.PrintStream out>;
v22 = v1 * 100.0F;
v23 = v22 / v2;
v24 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,float)>(v1, v23) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(" Optimal:         \u0001 (\u0001%)");
virtualinvoke v21.<java.io.PrintStream: void println(java.lang.String)>(v24);
v25 = <java.lang.System: java.io.PrintStream out>;
v26 = v2 - v1;
v27 = v3 / v26;
v28 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (float)>(v27) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(" Average Distance:\u0001");
virtualinvoke v25.<java.io.PrintStream: void println(java.lang.String)>(v28);
v29 = <java.lang.System: java.io.PrintStream out>;
v30 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(" Max Distance:    \u0001");
virtualinvoke v29.<java.io.PrintStream: void println(java.lang.String)>(v30);
return;
}
public java.util.Set entrySet()
{
org.jboss.logmanager.FastCopyHashMap v0;
org.jboss.logmanager.FastCopyHashMap$EntrySet v1, v2, v3;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$EntrySet entrySet>;
if v1 != null goto label1;
v2 = new org.jboss.logmanager.FastCopyHashMap$EntrySet;
specialinvoke v2.<org.jboss.logmanager.FastCopyHashMap$EntrySet: void <init>(org.jboss.logmanager.FastCopyHashMap)>(v0);
v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$EntrySet entrySet> = v2;
label1:
v3 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$EntrySet entrySet>;
return v3;
}
public java.util.Set keySet()
{
org.jboss.logmanager.FastCopyHashMap$KeySet v1, v2, v3;
org.jboss.logmanager.FastCopyHashMap v0;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$KeySet keySet>;
if v1 != null goto label1;
v2 = new org.jboss.logmanager.FastCopyHashMap$KeySet;
specialinvoke v2.<org.jboss.logmanager.FastCopyHashMap$KeySet: void <init>(org.jboss.logmanager.FastCopyHashMap)>(v0);
v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$KeySet keySet> = v2;
label1:
v3 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$KeySet keySet>;
return v3;
}
public java.util.Collection values()
{
org.jboss.logmanager.FastCopyHashMap v0;
org.jboss.logmanager.FastCopyHashMap$Values v1, v2, v3;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Values values>;
if v1 != null goto label1;
v2 = new org.jboss.logmanager.FastCopyHashMap$Values;
specialinvoke v2.<org.jboss.logmanager.FastCopyHashMap$Values: void <init>(org.jboss.logmanager.FastCopyHashMap)>(v0);
v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Values values> = v2;
label1:
v3 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Values values>;
return v3;
}
private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
{
org.jboss.logmanager.FastCopyHashMap v0;
int v2, v4;
java.io.ObjectInputStream v1;
float v3;
java.lang.Object v5, v6;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 := @parameter0: java.io.ObjectInputStream;
virtualinvoke v1.<java.io.ObjectInputStream: void defaultReadObject()>();
v2 = virtualinvoke v1.<java.io.ObjectInputStream: int readInt()>();
v3 = v0.<org.jboss.logmanager.FastCopyHashMap: float loadFactor>;
specialinvoke v0.<org.jboss.logmanager.FastCopyHashMap: void init(int,float)>(v2, v3);
v4 = 0;
label1:
if v4 >= v2 goto label2;
v5 = virtualinvoke v1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
v6 = virtualinvoke v1.<java.io.ObjectInputStream: java.lang.Object readObject()>();
specialinvoke v0.<org.jboss.logmanager.FastCopyHashMap: void putForCreate(java.lang.Object,java.lang.Object)>(v5, v6);
v4 = v4 + 1;
goto label1;
label2:
v0.<org.jboss.logmanager.FastCopyHashMap: int size> = v2;
return;
}
private void putForCreate(java.lang.Object, java.lang.Object)
{
org.jboss.logmanager.FastCopyHashMap v0;
org.jboss.logmanager.FastCopyHashMap$Entry[] v4;
org.jboss.logmanager.FastCopyHashMap$Entry v8, v9;
int v5, v6, v7;
java.lang.Object v1, v2, v3;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: java.lang.Object maskNull(java.lang.Object)>(v1);
v4 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table>;
v5 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: int hash(java.lang.Object)>(v3);
v6 = lengthof v4;
v7 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: int index(int,int)>(v5, v6);
v8 = v4[v7];
label1:
if v8 == null goto label2;
v7 = specialinvoke v0.<org.jboss.logmanager.FastCopyHashMap: int nextIndex(int,int)>(v7, v6);
v8 = v4[v7];
goto label1;
label2:
v9 = new org.jboss.logmanager.FastCopyHashMap$Entry;
specialinvoke v9.<org.jboss.logmanager.FastCopyHashMap$Entry: void <init>(java.lang.Object,int,java.lang.Object)>(v3, v5, v2);
v4[v7] = v9;
return;
}
private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
{
org.jboss.logmanager.FastCopyHashMap v0;
org.jboss.logmanager.FastCopyHashMap$Entry[] v3;
org.jboss.logmanager.FastCopyHashMap$Entry v6;
int v2, v4, v5;
java.io.ObjectOutputStream v1;
java.lang.Object v7, v8, v9;
v0 := @this: org.jboss.logmanager.FastCopyHashMap;
v1 := @parameter0: java.io.ObjectOutputStream;
virtualinvoke v1.<java.io.ObjectOutputStream: void defaultWriteObject()>();
v2 = v0.<org.jboss.logmanager.FastCopyHashMap: int size>;
virtualinvoke v1.<java.io.ObjectOutputStream: void writeInt(int)>(v2);
v3 = v0.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap$Entry[] table>;
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label3;
v6 = v3[v5];
if v6 == null goto label2;
v7 = v6.<org.jboss.logmanager.FastCopyHashMap$Entry: java.lang.Object key>;
v8 = staticinvoke <org.jboss.logmanager.FastCopyHashMap: java.lang.Object unmaskNull(java.lang.Object)>(v7);
virtualinvoke v1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(v8);
v9 = v6.<org.jboss.logmanager.FastCopyHashMap$Entry: java.lang.Object value>;
virtualinvoke v1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(v9);
label2:
v5 = v5 + 1;
goto label1;
label3:
return;
}
static void <clinit>()
{
java.lang.Object v0;
v0 = new java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
<org.jboss.logmanager.FastCopyHashMap: java.lang.Object NULL> = v0;
return;
}
}