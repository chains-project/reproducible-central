public class org.jboss.logmanager.formatters.JsonFormatter extends org.jboss.logmanager.formatters.StructuredFormatter
{
private final java.util.Map config;
private jakarta.json.stream.JsonGeneratorFactory factory;
public void <init>()
{
org.jboss.logmanager.formatters.JsonFormatter v0;
java.util.Map v2;
jakarta.json.stream.JsonGeneratorFactory v3;
java.util.HashMap v1;
v0 := @this: org.jboss.logmanager.formatters.JsonFormatter;
specialinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: void <init>()>();
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
v0.<org.jboss.logmanager.formatters.JsonFormatter: java.util.Map config> = v1;
v2 = v0.<org.jboss.logmanager.formatters.JsonFormatter: java.util.Map config>;
v3 = staticinvoke <jakarta.json.Json: jakarta.json.stream.JsonGeneratorFactory createGeneratorFactory(java.util.Map)>(v2);
v0.<org.jboss.logmanager.formatters.JsonFormatter: jakarta.json.stream.JsonGeneratorFactory factory> = v3;
return;
}
public void <init>(java.lang.String)
{
org.jboss.logmanager.formatters.JsonFormatter v0;
java.util.Map v3;
jakarta.json.stream.JsonGeneratorFactory v4;
java.util.HashMap v2;
java.lang.String v1;
v0 := @this: org.jboss.logmanager.formatters.JsonFormatter;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: void <init>(java.lang.String)>(v1);
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
v0.<org.jboss.logmanager.formatters.JsonFormatter: java.util.Map config> = v2;
v3 = v0.<org.jboss.logmanager.formatters.JsonFormatter: java.util.Map config>;
v4 = staticinvoke <jakarta.json.Json: jakarta.json.stream.JsonGeneratorFactory createGeneratorFactory(java.util.Map)>(v3);
v0.<org.jboss.logmanager.formatters.JsonFormatter: jakarta.json.stream.JsonGeneratorFactory factory> = v4;
return;
}
public void <init>(java.util.Map)
{
org.jboss.logmanager.formatters.JsonFormatter v0;
java.util.Map v1, v3;
jakarta.json.stream.JsonGeneratorFactory v4;
java.util.HashMap v2;
v0 := @this: org.jboss.logmanager.formatters.JsonFormatter;
v1 := @parameter0: java.util.Map;
specialinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: void <init>(java.util.Map)>(v1);
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
v0.<org.jboss.logmanager.formatters.JsonFormatter: java.util.Map config> = v2;
v3 = v0.<org.jboss.logmanager.formatters.JsonFormatter: java.util.Map config>;
v4 = staticinvoke <jakarta.json.Json: jakarta.json.stream.JsonGeneratorFactory createGeneratorFactory(java.util.Map)>(v3);
v0.<org.jboss.logmanager.formatters.JsonFormatter: jakarta.json.stream.JsonGeneratorFactory factory> = v4;
return;
}
public boolean isPrettyPrint()
{
java.lang.Throwable v7;
org.jboss.logmanager.formatters.JsonFormatter v0;
java.util.Map v1, v2, v4;
java.lang.Object v5;
boolean v3, v6;
v0 := @this: org.jboss.logmanager.formatters.JsonFormatter;
v1 = v0.<org.jboss.logmanager.formatters.JsonFormatter: java.util.Map config>;
entermonitor v1;
label1:
v2 = v0.<org.jboss.logmanager.formatters.JsonFormatter: java.util.Map config>;
v3 = interfaceinvoke v2.<java.util.Map: boolean containsKey(java.lang.Object)>("jakarta.json.stream.JsonGenerator.prettyPrinting");
if v3 == 0 goto label2;
v4 = v0.<org.jboss.logmanager.formatters.JsonFormatter: java.util.Map config>;
v5 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>("jakarta.json.stream.JsonGenerator.prettyPrinting");
v6 = virtualinvoke v5.<java.lang.Boolean: boolean booleanValue()>();
goto label3;
label2:
v6 = 0;
label3:
exitmonitor v1;
label4:
return v6;
label5:
v7 := @caughtexception;
exitmonitor v1;
throw v7;
catch java.lang.Throwable from label1 to label4 with label5;
}
public void setPrettyPrint(boolean)
{
java.lang.Throwable v8;
jakarta.json.stream.JsonGeneratorFactory v7;
org.jboss.logmanager.formatters.JsonFormatter v0;
java.util.Map v2, v3, v5, v6;
java.lang.Boolean v4;
boolean v1;
v0 := @this: org.jboss.logmanager.formatters.JsonFormatter;
v1 := @parameter0: boolean;
v2 = v0.<org.jboss.logmanager.formatters.JsonFormatter: java.util.Map config>;
entermonitor v2;
label1:
if v1 == 0 goto label2;
v3 = v0.<org.jboss.logmanager.formatters.JsonFormatter: java.util.Map config>;
v4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("jakarta.json.stream.JsonGenerator.prettyPrinting", v4);
goto label3;
label2:
v5 = v0.<org.jboss.logmanager.formatters.JsonFormatter: java.util.Map config>;
interfaceinvoke v5.<java.util.Map: java.lang.Object remove(java.lang.Object)>("jakarta.json.stream.JsonGenerator.prettyPrinting");
label3:
v6 = v0.<org.jboss.logmanager.formatters.JsonFormatter: java.util.Map config>;
v7 = staticinvoke <jakarta.json.Json: jakarta.json.stream.JsonGeneratorFactory createGeneratorFactory(java.util.Map)>(v6);
v0.<org.jboss.logmanager.formatters.JsonFormatter: jakarta.json.stream.JsonGeneratorFactory factory> = v7;
exitmonitor v2;
label4:
goto label6;
label5:
v8 := @caughtexception;
exitmonitor v2;
throw v8;
label6:
return;
catch java.lang.Throwable from label1 to label4 with label5;
}
protected org.jboss.logmanager.formatters.StructuredFormatter$Generator createGenerator(java.io.Writer)
{
java.lang.Throwable v4;
org.jboss.logmanager.formatters.JsonFormatter v0;
org.jboss.logmanager.formatters.JsonFormatter$FormatterJsonGenerator v5;
java.util.Map v2;
jakarta.json.stream.JsonGeneratorFactory v3;
java.io.Writer v1;
jakarta.json.stream.JsonGenerator v6;
v0 := @this: org.jboss.logmanager.formatters.JsonFormatter;
v1 := @parameter0: java.io.Writer;
v2 = v0.<org.jboss.logmanager.formatters.JsonFormatter: java.util.Map config>;
entermonitor v2;
label1:
v3 = v0.<org.jboss.logmanager.formatters.JsonFormatter: jakarta.json.stream.JsonGeneratorFactory factory>;
exitmonitor v2;
label2:
goto label4;
label3:
v4 := @caughtexception;
exitmonitor v2;
throw v4;
label4:
v5 = new org.jboss.logmanager.formatters.JsonFormatter$FormatterJsonGenerator;
v6 = interfaceinvoke v3.<jakarta.json.stream.JsonGeneratorFactory: jakarta.json.stream.JsonGenerator createGenerator(java.io.Writer)>(v1);
specialinvoke v5.<org.jboss.logmanager.formatters.JsonFormatter$FormatterJsonGenerator: void <init>(org.jboss.logmanager.formatters.JsonFormatter,jakarta.json.stream.JsonGenerator)>(v0, v6);
return v5;
catch java.lang.Throwable from label1 to label2 with label3;
}
}