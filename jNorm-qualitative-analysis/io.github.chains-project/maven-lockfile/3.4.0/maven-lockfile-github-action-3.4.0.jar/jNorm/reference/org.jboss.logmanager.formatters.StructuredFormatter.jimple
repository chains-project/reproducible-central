public abstract class org.jboss.logmanager.formatters.StructuredFormatter extends org.jboss.logmanager.ExtFormatter
{
private final java.util.Map keyOverrides;
private final java.lang.String keyOverridesValue;
private volatile boolean printDetails;
private volatile java.lang.String eorDelimiter;
private java.time.format.DateTimeFormatter dateTimeFormatter;
private java.time.ZoneId zoneId;
private volatile org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType exceptionOutputType;
private final org.jboss.logmanager.formatters.StringBuilderWriter writer;
private int refId;
protected void <init>()
{
org.jboss.logmanager.formatters.StructuredFormatter v0;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
specialinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: void <init>(java.util.Map,java.lang.String)>(null, null);
return;
}
protected void <init>(java.util.Map)
{
java.lang.String v2;
org.jboss.logmanager.formatters.StructuredFormatter v0;
java.util.Map v1;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 := @parameter0: java.util.Map;
v2 = staticinvoke <org.jboss.logmanager.PropertyValues: java.lang.String mapToString(java.util.Map)>(v1);
specialinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: void <init>(java.util.Map,java.lang.String)>(v1, v2);
return;
}
protected void <init>(java.lang.String)
{
java.lang.String v1;
java.util.EnumMap v2;
org.jboss.logmanager.formatters.StructuredFormatter v0;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <org.jboss.logmanager.PropertyValues: java.util.EnumMap stringToEnumMap(java.lang.Class,java.lang.String)>(class "Lorg/jboss/logmanager/formatters/StructuredFormatter$Key;", v1);
specialinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: void <init>(java.util.Map,java.lang.String)>(v2, v1);
return;
}
private void <init>(java.util.Map, java.lang.String)
{
java.util.EnumMap v9;
org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType v10;
java.time.ZoneId v4, v6;
org.jboss.logmanager.formatters.StringBuilderWriter v3;
java.time.format.DateTimeFormatter v5, v7;
java.util.Map v1, v8;
java.lang.String v2;
org.jboss.logmanager.formatters.StructuredFormatter v0;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 := @parameter0: java.util.Map;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<org.jboss.logmanager.ExtFormatter: void <init>()>();
v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String eorDelimiter> = "\n";
v3 = new org.jboss.logmanager.formatters.StringBuilderWriter;
specialinvoke v3.<org.jboss.logmanager.formatters.StringBuilderWriter: void <init>()>();
v0.<org.jboss.logmanager.formatters.StructuredFormatter: org.jboss.logmanager.formatters.StringBuilderWriter writer> = v3;
v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String keyOverridesValue> = v2;
v0.<org.jboss.logmanager.formatters.StructuredFormatter: boolean printDetails> = 0;
v4 = staticinvoke <java.time.ZoneId: java.time.ZoneId systemDefault()>();
v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.time.ZoneId zoneId> = v4;
v5 = <java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ISO_OFFSET_DATE_TIME>;
v6 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.time.ZoneId zoneId>;
v7 = virtualinvoke v5.<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withZone(java.time.ZoneId)>(v6);
v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.time.format.DateTimeFormatter dateTimeFormatter> = v7;
if v1 != null goto label1;
v8 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
goto label2;
label1:
v9 = new java.util.EnumMap;
v8 = v9;
specialinvoke v9.<java.util.EnumMap: void <init>(java.util.Map)>(v1);
label2:
v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.util.Map keyOverrides> = v8;
v10 = <org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType: org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType DETAILED>;
v0.<org.jboss.logmanager.formatters.StructuredFormatter: org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType exceptionOutputType> = v10;
return;
}
protected abstract org.jboss.logmanager.formatters.StructuredFormatter$Generator createGenerator(java.io.Writer) throws java.lang.Exception;
protected void before(org.jboss.logmanager.formatters.StructuredFormatter$Generator, org.jboss.logmanager.ExtLogRecord) throws java.lang.Exception
{
org.jboss.logmanager.ExtLogRecord v2;
org.jboss.logmanager.formatters.StructuredFormatter$Generator v1;
org.jboss.logmanager.formatters.StructuredFormatter v0;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 := @parameter0: org.jboss.logmanager.formatters.StructuredFormatter$Generator;
v2 := @parameter1: org.jboss.logmanager.ExtLogRecord;
return;
}
protected void after(org.jboss.logmanager.formatters.StructuredFormatter$Generator, org.jboss.logmanager.ExtLogRecord) throws java.lang.Exception
{
org.jboss.logmanager.ExtLogRecord v2;
org.jboss.logmanager.formatters.StructuredFormatter$Generator v1;
org.jboss.logmanager.formatters.StructuredFormatter v0;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 := @parameter0: org.jboss.logmanager.formatters.StructuredFormatter$Generator;
v2 := @parameter1: org.jboss.logmanager.ExtLogRecord;
return;
}
protected final java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)
{
java.util.Map v2, v4;
org.jboss.logmanager.formatters.StructuredFormatter$Key v1;
java.lang.Object v5;
java.lang.String v6;
org.jboss.logmanager.formatters.StructuredFormatter v0;
boolean v3;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 := @parameter0: org.jboss.logmanager.formatters.StructuredFormatter$Key;
v2 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.util.Map keyOverrides>;
v3 = interfaceinvoke v2.<java.util.Map: boolean containsKey(java.lang.Object)>(v1);
if v3 == 0 goto label1;
v4 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.util.Map keyOverrides>;
v5 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v5;
label1:
v6 = virtualinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Key: java.lang.String getKey()>();
return v6;
}
public final synchronized java.lang.String format(org.jboss.logmanager.ExtLogRecord)
{
byte v60;
java.util.Map v44;
java.io.PrintWriter v71;
java.lang.Exception v104;
org.jboss.logmanager.formatters.StructuredFormatter$Key v13, v17, v21, v25, v30, v34, v38, v42, v46, v51, v56, v6, v61, v67, v72, v75, v79, v83, v87, v91, v95;
java.lang.Throwable v106, v64;
long v15, v59, v63, v9;
org.jboss.logmanager.ExtLogRecord v1;
org.jboss.logmanager.formatters.StringBuilderWriter v101, v103, v107, v3, v70, v99;
java.lang.String v100, v102, v11, v14, v18, v19, v22, v23, v26, v28, v31, v32, v35, v36, v39, v43, v47, v48, v49, v52, v53, v54, v57, v58, v62, v68, v7, v73, v74, v76, v77, v80, v81, v84, v85, v88, v92, v93, v96, v97, v98;
java.lang.RuntimeException v105;
boolean v2, v50, v55, v65, v69;
java.util.IdentityHashMap v66;
java.time.Instant v10;
java.util.logging.Level v27;
org.jboss.logmanager.formatters.StructuredFormatter$Generator v12, v16, v20, v24, v29, v33, v37, v4, v41, v45, v5, v78, v82, v86, v90, v94;
int v40, v89;
java.time.format.DateTimeFormatter v8;
org.jboss.logmanager.formatters.StructuredFormatter v0;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 := @parameter0: org.jboss.logmanager.ExtLogRecord;
v2 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: boolean printDetails>;
label01:
v3 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: org.jboss.logmanager.formatters.StringBuilderWriter writer>;
v4 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: org.jboss.logmanager.formatters.StructuredFormatter$Generator createGenerator(java.io.Writer)>(v3);
v5 = interfaceinvoke v4.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator begin()>();
virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: void before(org.jboss.logmanager.formatters.StructuredFormatter$Generator,org.jboss.logmanager.ExtLogRecord)>(v5, v1);
v6 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key TIMESTAMP>;
v7 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v6);
v8 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.time.format.DateTimeFormatter dateTimeFormatter>;
v9 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: long getMillis()>();
v10 = staticinvoke <java.time.Instant: java.time.Instant ofEpochMilli(long)>(v9);
v11 = virtualinvoke v8.<java.time.format.DateTimeFormatter: java.lang.String format(java.time.temporal.TemporalAccessor)>(v10);
v12 = interfaceinvoke v5.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v7, v11);
v13 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key SEQUENCE>;
v14 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v13);
v15 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: long getSequenceNumber()>();
v16 = interfaceinvoke v12.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,long)>(v14, v15);
v17 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key LOGGER_CLASS_NAME>;
v18 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v17);
v19 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: java.lang.String getLoggerClassName()>();
v20 = interfaceinvoke v16.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v18, v19);
v21 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key LOGGER_NAME>;
v22 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v21);
v23 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: java.lang.String getLoggerName()>();
v24 = interfaceinvoke v20.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v22, v23);
v25 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key LEVEL>;
v26 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v25);
v27 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: java.util.logging.Level getLevel()>();
v28 = virtualinvoke v27.<java.util.logging.Level: java.lang.String getName()>();
v29 = interfaceinvoke v24.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v26, v28);
v30 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key MESSAGE>;
v31 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v30);
v32 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String formatMessage(java.util.logging.LogRecord)>(v1);
v33 = interfaceinvoke v29.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v31, v32);
v34 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key THREAD_NAME>;
v35 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v34);
v36 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: java.lang.String getThreadName()>();
v37 = interfaceinvoke v33.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v35, v36);
v38 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key THREAD_ID>;
v39 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v38);
v40 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: int getThreadID()>();
v41 = interfaceinvoke v37.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,int)>(v39, v40);
v42 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key MDC>;
v43 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v42);
v44 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: java.util.Map getMdcCopy()>();
v45 = interfaceinvoke v41.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.util.Map)>(v43, v44);
v46 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key NDC>;
v47 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v46);
v48 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: java.lang.String getNdc()>();
interfaceinvoke v45.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v47, v48);
v49 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: java.lang.String getHostName()>();
v50 = staticinvoke <org.jboss.logmanager.formatters.StructuredFormatter: boolean isNotNullOrEmpty(java.lang.String)>(v49);
if v50 == 0 goto label02;
v51 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key HOST_NAME>;
v52 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v51);
v53 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: java.lang.String getHostName()>();
interfaceinvoke v5.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v52, v53);
label02:
v54 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: java.lang.String getProcessName()>();
v55 = staticinvoke <org.jboss.logmanager.formatters.StructuredFormatter: boolean isNotNullOrEmpty(java.lang.String)>(v54);
if v55 == 0 goto label03;
v56 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key PROCESS_NAME>;
v57 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v56);
v58 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: java.lang.String getProcessName()>();
interfaceinvoke v5.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v57, v58);
label03:
v59 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: long getProcessId()>();
v60 = v59 cmp 0L;
if v60 < 0 goto label04;
v61 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key PROCESS_ID>;
v62 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v61);
v63 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: long getProcessId()>();
interfaceinvoke v5.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,long)>(v62, v63);
label04:
v64 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: java.lang.Throwable getThrown()>();
if v64 == null goto label06;
v65 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: boolean isDetailedExceptionOutputType()>();
if v65 == 0 goto label05;
v0.<org.jboss.logmanager.formatters.StructuredFormatter: int refId> = 0;
v66 = new java.util.IdentityHashMap;
specialinvoke v66.<java.util.IdentityHashMap: void <init>()>();
v67 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key EXCEPTION>;
v68 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v67);
interfaceinvoke v5.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator startObject(java.lang.String)>(v68);
specialinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: void addException(org.jboss.logmanager.formatters.StructuredFormatter$Generator,java.lang.Throwable,java.util.Map)>(v5, v64, v66);
interfaceinvoke v5.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator endObject()>();
label05:
v69 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: boolean isFormattedExceptionOutputType()>();
if v69 == 0 goto label06;
v70 = new org.jboss.logmanager.formatters.StringBuilderWriter;
specialinvoke v70.<org.jboss.logmanager.formatters.StringBuilderWriter: void <init>()>();
v71 = new java.io.PrintWriter;
specialinvoke v71.<java.io.PrintWriter: void <init>(java.io.Writer)>(v70);
virtualinvoke v64.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>(v71);
v72 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key STACK_TRACE>;
v73 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v72);
v74 = virtualinvoke v70.<org.jboss.logmanager.formatters.StringBuilderWriter: java.lang.String toString()>();
interfaceinvoke v5.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v73, v74);
label06:
if v2 == 0 goto label07;
v75 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key SOURCE_CLASS_NAME>;
v76 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v75);
v77 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: java.lang.String getSourceClassName()>();
v78 = interfaceinvoke v5.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v76, v77);
v79 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key SOURCE_FILE_NAME>;
v80 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v79);
v81 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: java.lang.String getSourceFileName()>();
v82 = interfaceinvoke v78.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v80, v81);
v83 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key SOURCE_METHOD_NAME>;
v84 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v83);
v85 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: java.lang.String getSourceMethodName()>();
v86 = interfaceinvoke v82.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v84, v85);
v87 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key SOURCE_LINE_NUMBER>;
v88 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v87);
v89 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: int getSourceLineNumber()>();
v90 = interfaceinvoke v86.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,int)>(v88, v89);
v91 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key SOURCE_MODULE_NAME>;
v92 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v91);
v93 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: java.lang.String getSourceModuleName()>();
v94 = interfaceinvoke v90.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v92, v93);
v95 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key SOURCE_MODULE_VERSION>;
v96 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v95);
v97 = virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: java.lang.String getSourceModuleVersion()>();
interfaceinvoke v94.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v96, v97);
label07:
virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: void after(org.jboss.logmanager.formatters.StructuredFormatter$Generator,org.jboss.logmanager.ExtLogRecord)>(v5, v1);
interfaceinvoke v5.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator end()>();
v98 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getRecordDelimiter()>();
if v98 == null goto label08;
v99 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: org.jboss.logmanager.formatters.StringBuilderWriter writer>;
v100 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getRecordDelimiter()>();
virtualinvoke v99.<org.jboss.logmanager.formatters.StringBuilderWriter: java.io.Writer append(java.lang.CharSequence)>(v100);
label08:
v101 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: org.jboss.logmanager.formatters.StringBuilderWriter writer>;
v102 = virtualinvoke v101.<org.jboss.logmanager.formatters.StringBuilderWriter: java.lang.String toString()>();
label09:
v103 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: org.jboss.logmanager.formatters.StringBuilderWriter writer>;
virtualinvoke v103.<org.jboss.logmanager.formatters.StringBuilderWriter: void clear()>();
return v102;
label10:
v104 := @caughtexception;
v105 = new java.lang.RuntimeException;
specialinvoke v105.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v104);
throw v105;
label11:
v106 := @caughtexception;
v107 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: org.jboss.logmanager.formatters.StringBuilderWriter writer>;
virtualinvoke v107.<org.jboss.logmanager.formatters.StringBuilderWriter: void clear()>();
throw v106;
catch java.lang.Exception from label01 to label09 with label10;
catch java.lang.Throwable from label01 to label09 with label11;
}
public boolean isCallerCalculationRequired()
{
org.jboss.logmanager.formatters.StructuredFormatter v0;
boolean v1;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: boolean isPrintDetails()>();
return v1;
}
public java.lang.String getKeyOverrides()
{
java.lang.String v1;
org.jboss.logmanager.formatters.StructuredFormatter v0;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String keyOverridesValue>;
return v1;
}
public java.lang.String getRecordDelimiter()
{
java.lang.String v1;
org.jboss.logmanager.formatters.StructuredFormatter v0;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String eorDelimiter>;
return v1;
}
public void setRecordDelimiter(java.lang.String)
{
java.lang.String v1;
org.jboss.logmanager.formatters.StructuredFormatter v0;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 := @parameter0: java.lang.String;
v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String eorDelimiter> = v1;
return;
}
public synchronized java.time.format.DateTimeFormatter getDateTimeFormatter()
{
org.jboss.logmanager.formatters.StructuredFormatter v0;
java.time.format.DateTimeFormatter v1;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.time.format.DateTimeFormatter dateTimeFormatter>;
return v1;
}
public synchronized void setDateFormat(java.lang.String)
{
java.time.ZoneId v3, v6;
java.time.format.DateTimeFormatter v2, v4, v5, v7;
java.lang.String v1;
org.jboss.logmanager.formatters.StructuredFormatter v0;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 := @parameter0: java.lang.String;
if v1 != null goto label1;
v2 = <java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ISO_OFFSET_DATE_TIME>;
v3 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.time.ZoneId zoneId>;
v4 = virtualinvoke v2.<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withZone(java.time.ZoneId)>(v3);
v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.time.format.DateTimeFormatter dateTimeFormatter> = v4;
goto label2;
label1:
v5 = staticinvoke <java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String)>(v1);
v6 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.time.ZoneId zoneId>;
v7 = virtualinvoke v5.<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withZone(java.time.ZoneId)>(v6);
v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.time.format.DateTimeFormatter dateTimeFormatter> = v7;
label2:
return;
}
public synchronized java.time.ZoneId getZoneId()
{
java.time.ZoneId v1;
org.jboss.logmanager.formatters.StructuredFormatter v0;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.time.ZoneId zoneId>;
return v1;
}
public void setZoneId(java.lang.String)
{
java.lang.Throwable v5;
java.time.format.DateTimeFormatter v3, v4;
java.lang.String v1;
java.time.ZoneId v2;
org.jboss.logmanager.formatters.StructuredFormatter v0;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 := @parameter0: java.lang.String;
if v1 != null goto label1;
v2 = staticinvoke <java.time.ZoneId: java.time.ZoneId systemDefault()>();
goto label2;
label1:
v2 = staticinvoke <java.time.ZoneId: java.time.ZoneId of(java.lang.String)>(v1);
label2:
entermonitor v0;
label3:
v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.time.ZoneId zoneId> = v2;
v3 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.time.format.DateTimeFormatter dateTimeFormatter>;
v4 = virtualinvoke v3.<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withZone(java.time.ZoneId)>(v2);
v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.time.format.DateTimeFormatter dateTimeFormatter> = v4;
exitmonitor v0;
label4:
goto label6;
label5:
v5 := @caughtexception;
exitmonitor v0;
throw v5;
label6:
return;
catch java.lang.Throwable from label3 to label4 with label5;
}
public boolean isPrintDetails()
{
org.jboss.logmanager.formatters.StructuredFormatter v0;
boolean v1;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: boolean printDetails>;
return v1;
}
public void setPrintDetails(boolean)
{
org.jboss.logmanager.formatters.StructuredFormatter v0;
boolean v1;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 := @parameter0: boolean;
v0.<org.jboss.logmanager.formatters.StructuredFormatter: boolean printDetails> = v1;
return;
}
public org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType getExceptionOutputType()
{
org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType v1;
org.jboss.logmanager.formatters.StructuredFormatter v0;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType exceptionOutputType>;
return v1;
}
public void setExceptionOutputType(org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType)
{
org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType v1, v2;
org.jboss.logmanager.formatters.StructuredFormatter v0;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 := @parameter0: org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType;
if v1 != null goto label1;
v2 = <org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType: org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType DETAILED>;
v0.<org.jboss.logmanager.formatters.StructuredFormatter: org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType exceptionOutputType> = v2;
goto label2;
label1:
v0.<org.jboss.logmanager.formatters.StructuredFormatter: org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType exceptionOutputType> = v1;
label2:
return;
}
protected boolean isDetailedExceptionOutputType()
{
org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType v1, v2, v3;
org.jboss.logmanager.formatters.StructuredFormatter v0;
boolean v4;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType exceptionOutputType>;
v2 = <org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType: org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType DETAILED>;
if v1 == v2 goto label1;
v3 = <org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType: org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType DETAILED_AND_FORMATTED>;
if v1 != v3 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
protected boolean isFormattedExceptionOutputType()
{
org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType v1, v2, v3;
org.jboss.logmanager.formatters.StructuredFormatter v0;
boolean v4;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType exceptionOutputType>;
v2 = <org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType: org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType FORMATTED>;
if v1 == v2 goto label1;
v3 = <org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType: org.jboss.logmanager.formatters.StructuredFormatter$ExceptionOutputType DETAILED_AND_FORMATTED>;
if v1 != v3 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
private void addException(org.jboss.logmanager.formatters.StructuredFormatter$Generator, java.lang.Throwable, java.util.Map) throws java.lang.Exception
{
java.lang.Integer v16;
java.util.Map v3;
boolean v34, v4;
java.lang.StackTraceElement[] v26;
org.jboss.logmanager.formatters.StructuredFormatter$Key v11, v17, v19, v23, v29, v35, v38, v40, v5, v9;
java.lang.Throwable v2, v33, v37;
org.jboss.logmanager.formatters.StructuredFormatter$Generator v1;
int v14, v15, v28, v31, v32, v8;
java.lang.String v10, v12, v13, v18, v20, v22, v24, v25, v30, v36, v39, v41, v6;
java.lang.Throwable[] v27;
java.lang.Class v21;
java.lang.Object v7;
org.jboss.logmanager.formatters.StructuredFormatter v0;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 := @parameter0: org.jboss.logmanager.formatters.StructuredFormatter$Generator;
v2 := @parameter1: java.lang.Throwable;
v3 := @parameter2: java.util.Map;
if v2 != null goto label1;
return;
label1:
v4 = interfaceinvoke v3.<java.util.Map: boolean containsKey(java.lang.Object)>(v2);
if v4 == 0 goto label2;
v5 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key EXCEPTION_REFERENCE_ID>;
v6 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v5);
v7 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
v8 = virtualinvoke v7.<java.lang.Integer: int intValue()>();
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator addAttribute(java.lang.String,int)>(v6, v8);
v9 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key EXCEPTION_CIRCULAR_REFERENCE>;
v10 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v9);
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator startObject(java.lang.String)>(v10);
v11 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key EXCEPTION_MESSAGE>;
v12 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v11);
v13 = virtualinvoke v2.<java.lang.Throwable: java.lang.String getMessage()>();
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v12, v13);
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator endObject()>();
goto label8;
label2:
v14 = v0.<org.jboss.logmanager.formatters.StructuredFormatter: int refId>;
v15 = v14 + 1;
v0.<org.jboss.logmanager.formatters.StructuredFormatter: int refId> = v15;
v16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v15);
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v2, v16);
v17 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key EXCEPTION_REFERENCE_ID>;
v18 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v17);
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator addAttribute(java.lang.String,int)>(v18, v15);
v19 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key EXCEPTION_TYPE>;
v20 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v19);
v21 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v22 = virtualinvoke v21.<java.lang.Class: java.lang.String getName()>();
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v20, v22);
v23 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key EXCEPTION_MESSAGE>;
v24 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v23);
v25 = virtualinvoke v2.<java.lang.Throwable: java.lang.String getMessage()>();
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v24, v25);
v26 = virtualinvoke v2.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();
specialinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: void addStackTraceElements(org.jboss.logmanager.formatters.StructuredFormatter$Generator,java.lang.StackTraceElement[])>(v1, v26);
v27 = virtualinvoke v2.<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>();
if v27 == null goto label7;
v28 = lengthof v27;
if v28 <= 0 goto label7;
v29 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key EXCEPTION_SUPPRESSED>;
v30 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v29);
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator startArray(java.lang.String)>(v30);
v31 = lengthof v27;
v32 = 0;
label3:
if v32 >= v31 goto label6;
v33 = v27[v32];
v34 = interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: boolean wrapArrays()>();
if v34 == 0 goto label4;
v35 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key EXCEPTION>;
v36 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v35);
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator startObject(java.lang.String)>(v36);
goto label5;
label4:
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator startObject(java.lang.String)>(null);
label5:
specialinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: void addException(org.jboss.logmanager.formatters.StructuredFormatter$Generator,java.lang.Throwable,java.util.Map)>(v1, v33, v3);
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator endObject()>();
v32 = v32 + 1;
goto label3;
label6:
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator endArray()>();
label7:
v37 = virtualinvoke v2.<java.lang.Throwable: java.lang.Throwable getCause()>();
if v37 == null goto label8;
v38 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key EXCEPTION_CAUSED_BY>;
v39 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v38);
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator startObject(java.lang.String)>(v39);
v40 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key EXCEPTION>;
v41 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v40);
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator startObject(java.lang.String)>(v41);
specialinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: void addException(org.jboss.logmanager.formatters.StructuredFormatter$Generator,java.lang.Throwable,java.util.Map)>(v1, v37, v3);
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator endObject()>();
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator endObject()>();
label8:
return;
}
private void addStackTraceElements(org.jboss.logmanager.formatters.StructuredFormatter$Generator, java.lang.StackTraceElement[]) throws java.lang.Exception
{
org.jboss.logmanager.formatters.StructuredFormatter$Generator v1;
int v17, v20, v5, v6;
java.lang.StackTraceElement v7;
java.lang.String v10, v12, v13, v15, v16, v19, v4;
boolean v8;
java.lang.StackTraceElement[] v2;
org.jboss.logmanager.formatters.StructuredFormatter$Key v11, v14, v18, v3, v9;
org.jboss.logmanager.formatters.StructuredFormatter v0;
v0 := @this: org.jboss.logmanager.formatters.StructuredFormatter;
v1 := @parameter0: org.jboss.logmanager.formatters.StructuredFormatter$Generator;
v2 := @parameter1: java.lang.StackTraceElement[];
v3 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key EXCEPTION_FRAMES>;
v4 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v3);
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator startArray(java.lang.String)>(v4);
v5 = lengthof v2;
v6 = 0;
label1:
if v6 >= v5 goto label5;
v7 = v2[v6];
v8 = interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: boolean wrapArrays()>();
if v8 == 0 goto label2;
v9 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key EXCEPTION_FRAME>;
v10 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v9);
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator startObject(java.lang.String)>(v10);
goto label3;
label2:
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator startObject(java.lang.String)>(null);
label3:
v11 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key EXCEPTION_FRAME_CLASS>;
v12 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v11);
v13 = virtualinvoke v7.<java.lang.StackTraceElement: java.lang.String getClassName()>();
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v12, v13);
v14 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key EXCEPTION_FRAME_METHOD>;
v15 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v14);
v16 = virtualinvoke v7.<java.lang.StackTraceElement: java.lang.String getMethodName()>();
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,java.lang.String)>(v15, v16);
v17 = virtualinvoke v7.<java.lang.StackTraceElement: int getLineNumber()>();
if v17 < 0 goto label4;
v18 = <org.jboss.logmanager.formatters.StructuredFormatter$Key: org.jboss.logmanager.formatters.StructuredFormatter$Key EXCEPTION_FRAME_LINE>;
v19 = virtualinvoke v0.<org.jboss.logmanager.formatters.StructuredFormatter: java.lang.String getKey(org.jboss.logmanager.formatters.StructuredFormatter$Key)>(v18);
v20 = virtualinvoke v7.<java.lang.StackTraceElement: int getLineNumber()>();
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator add(java.lang.String,int)>(v19, v20);
label4:
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator endObject()>();
v6 = v6 + 1;
goto label1;
label5:
interfaceinvoke v1.<org.jboss.logmanager.formatters.StructuredFormatter$Generator: org.jboss.logmanager.formatters.StructuredFormatter$Generator endArray()>();
return;
}
private static boolean isNotNullOrEmpty(java.lang.String)
{
java.lang.String v0;
boolean v1, v2;
v0 := @parameter0: java.lang.String;
if v0 == null goto label1;
v1 = virtualinvoke v0.<java.lang.String: boolean isEmpty()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
private static boolean isNotNullOrEmpty(java.util.Collection)
{
boolean v1, v2;
java.util.Collection v0;
v0 := @parameter0: java.util.Collection;
if v0 == null goto label1;
v1 = interfaceinvoke v0.<java.util.Collection: boolean isEmpty()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
}