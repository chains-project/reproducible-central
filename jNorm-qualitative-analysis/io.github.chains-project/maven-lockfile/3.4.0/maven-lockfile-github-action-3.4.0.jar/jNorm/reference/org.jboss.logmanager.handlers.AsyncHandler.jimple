public class org.jboss.logmanager.handlers.AsyncHandler extends org.jboss.logmanager.ExtHandler
{
private final java.util.concurrent.BlockingQueue recordQueue;
private final int queueLength;
private final java.lang.Thread thread;
private volatile org.jboss.logmanager.handlers.AsyncHandler$OverflowAction overflowAction;
private volatile int state;
private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater stateUpdater;
private static final int DEFAULT_QUEUE_LENGTH;
public void <init>(int, java.util.concurrent.ThreadFactory)
{
java.lang.IllegalArgumentException v8;
java.util.concurrent.ArrayBlockingQueue v4;
java.lang.Thread v6, v7, v9;
org.jboss.logmanager.handlers.AsyncHandler$OverflowAction v3;
int v1;
org.jboss.logmanager.handlers.AsyncHandler$AsyncTask v5;
java.util.concurrent.ThreadFactory v2;
org.jboss.logmanager.handlers.AsyncHandler v0;
v0 := @this: org.jboss.logmanager.handlers.AsyncHandler;
v1 := @parameter0: int;
v2 := @parameter1: java.util.concurrent.ThreadFactory;
specialinvoke v0.<org.jboss.logmanager.ExtHandler: void <init>()>();
v3 = <org.jboss.logmanager.handlers.AsyncHandler$OverflowAction: org.jboss.logmanager.handlers.AsyncHandler$OverflowAction BLOCK>;
v0.<org.jboss.logmanager.handlers.AsyncHandler: org.jboss.logmanager.handlers.AsyncHandler$OverflowAction overflowAction> = v3;
v4 = new java.util.concurrent.ArrayBlockingQueue;
specialinvoke v4.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>(v1);
v0.<org.jboss.logmanager.handlers.AsyncHandler: java.util.concurrent.BlockingQueue recordQueue> = v4;
v5 = new org.jboss.logmanager.handlers.AsyncHandler$AsyncTask;
specialinvoke v5.<org.jboss.logmanager.handlers.AsyncHandler$AsyncTask: void <init>(org.jboss.logmanager.handlers.AsyncHandler)>(v0);
v6 = interfaceinvoke v2.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(v5);
v0.<org.jboss.logmanager.handlers.AsyncHandler: java.lang.Thread thread> = v6;
v7 = v0.<org.jboss.logmanager.handlers.AsyncHandler: java.lang.Thread thread>;
if v7 != null goto label1;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Thread factory did not create a thread");
throw v8;
label1:
v9 = v0.<org.jboss.logmanager.handlers.AsyncHandler: java.lang.Thread thread>;
virtualinvoke v9.<java.lang.Thread: void setDaemon(boolean)>(1);
v0.<org.jboss.logmanager.handlers.AsyncHandler: int queueLength> = v1;
return;
}
public void <init>(java.util.concurrent.ThreadFactory)
{
java.util.concurrent.ThreadFactory v1;
org.jboss.logmanager.handlers.AsyncHandler v0;
v0 := @this: org.jboss.logmanager.handlers.AsyncHandler;
v1 := @parameter0: java.util.concurrent.ThreadFactory;
specialinvoke v0.<org.jboss.logmanager.handlers.AsyncHandler: void <init>(int,java.util.concurrent.ThreadFactory)>(512, v1);
return;
}
public void <init>(int)
{
int v1;
java.util.concurrent.ThreadFactory v2;
org.jboss.logmanager.handlers.AsyncHandler v0;
v0 := @this: org.jboss.logmanager.handlers.AsyncHandler;
v1 := @parameter0: int;
v2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();
specialinvoke v0.<org.jboss.logmanager.handlers.AsyncHandler: void <init>(int,java.util.concurrent.ThreadFactory)>(v1, v2);
return;
}
public void <init>()
{
org.jboss.logmanager.handlers.AsyncHandler v0;
v0 := @this: org.jboss.logmanager.handlers.AsyncHandler;
specialinvoke v0.<org.jboss.logmanager.handlers.AsyncHandler: void <init>(int)>(512);
return;
}
public int getQueueLength()
{
int v1;
org.jboss.logmanager.handlers.AsyncHandler v0;
v0 := @this: org.jboss.logmanager.handlers.AsyncHandler;
v1 = v0.<org.jboss.logmanager.handlers.AsyncHandler: int queueLength>;
return v1;
}
public org.jboss.logmanager.handlers.AsyncHandler$OverflowAction getOverflowAction()
{
org.jboss.logmanager.handlers.AsyncHandler v0;
org.jboss.logmanager.handlers.AsyncHandler$OverflowAction v1;
v0 := @this: org.jboss.logmanager.handlers.AsyncHandler;
v1 = v0.<org.jboss.logmanager.handlers.AsyncHandler: org.jboss.logmanager.handlers.AsyncHandler$OverflowAction overflowAction>;
return v1;
}
public void setOverflowAction(org.jboss.logmanager.handlers.AsyncHandler$OverflowAction)
{
org.jboss.logmanager.handlers.AsyncHandler v0;
java.lang.NullPointerException v2;
org.jboss.logmanager.handlers.AsyncHandler$OverflowAction v1;
v0 := @this: org.jboss.logmanager.handlers.AsyncHandler;
v1 := @parameter0: org.jboss.logmanager.handlers.AsyncHandler$OverflowAction;
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>("overflowAction is null");
throw v2;
label1:
v0.<org.jboss.logmanager.handlers.AsyncHandler: org.jboss.logmanager.handlers.AsyncHandler$OverflowAction overflowAction> = v1;
return;
}
protected void doPublish(org.jboss.logmanager.ExtLogRecord)
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v3;
java.util.concurrent.BlockingQueue v6;
org.jboss.logmanager.ExtLogRecord v1;
java.lang.InterruptedException v10;
java.lang.Thread v11, v5;
org.jboss.logmanager.handlers.AsyncHandler$OverflowAction v8, v9;
int v2;
org.jboss.logmanager.handlers.AsyncHandler v0;
boolean v4, v7;
v0 := @this: org.jboss.logmanager.handlers.AsyncHandler;
v1 := @parameter0: org.jboss.logmanager.ExtLogRecord;
v2 = v0.<org.jboss.logmanager.handlers.AsyncHandler: int state>;
lookupswitch(v2)
{
case 0: goto label1;
case 1: goto label3;
default: goto label2;
};
label1:
v3 = <org.jboss.logmanager.handlers.AsyncHandler: java.util.concurrent.atomic.AtomicIntegerFieldUpdater stateUpdater>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(v0, 0, 1);
if v4 == 0 goto label3;
v5 = v0.<org.jboss.logmanager.handlers.AsyncHandler: java.lang.Thread thread>;
virtualinvoke v5.<java.lang.Thread: void start()>();
goto label3;
label2:
return;
label3:
v6 = v0.<org.jboss.logmanager.handlers.AsyncHandler: java.util.concurrent.BlockingQueue recordQueue>;
v7 = virtualinvoke v0.<org.jboss.logmanager.handlers.AsyncHandler: boolean isCallerCalculationRequired()>();
if v7 == 0 goto label4;
virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: void copyAll()>();
goto label5;
label4:
virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: void disableCallerCalculation()>();
virtualinvoke v1.<org.jboss.logmanager.ExtLogRecord: void copyMdc()>();
label5:
v8 = v0.<org.jboss.logmanager.handlers.AsyncHandler: org.jboss.logmanager.handlers.AsyncHandler$OverflowAction overflowAction>;
v9 = <org.jboss.logmanager.handlers.AsyncHandler$OverflowAction: org.jboss.logmanager.handlers.AsyncHandler$OverflowAction DISCARD>;
if v8 != v9 goto label6;
interfaceinvoke v6.<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object)>(v1);
goto label9;
label6:
interfaceinvoke v6.<java.util.concurrent.BlockingQueue: void put(java.lang.Object)>(v1);
label7:
goto label9;
label8:
v10 := @caughtexception;
v11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v11.<java.lang.Thread: void interrupt()>();
return;
label9:
return;
catch java.lang.InterruptedException from label6 to label7 with label8;
}
public void close() throws java.lang.SecurityException
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v1;
java.lang.Thread v3;
int v2;
org.jboss.logmanager.handlers.AsyncHandler v0;
v0 := @this: org.jboss.logmanager.handlers.AsyncHandler;
v1 = <org.jboss.logmanager.handlers.AsyncHandler: java.util.concurrent.atomic.AtomicIntegerFieldUpdater stateUpdater>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndSet(java.lang.Object,int)>(v0, 2);
if v2 == 2 goto label1;
v3 = v0.<org.jboss.logmanager.handlers.AsyncHandler: java.lang.Thread thread>;
virtualinvoke v3.<java.lang.Thread: void interrupt()>();
specialinvoke v0.<org.jboss.logmanager.ExtHandler: void close()>();
label1:
return;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v0;
v0 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lorg/jboss/logmanager/handlers/AsyncHandler;", "state");
<org.jboss.logmanager.handlers.AsyncHandler: java.util.concurrent.atomic.AtomicIntegerFieldUpdater stateUpdater> = v0;
return;
}
}