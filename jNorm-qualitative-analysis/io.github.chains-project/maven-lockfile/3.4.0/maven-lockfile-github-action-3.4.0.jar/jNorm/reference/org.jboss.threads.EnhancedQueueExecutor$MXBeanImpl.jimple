final class org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl extends java.lang.Object implements org.jboss.threads.management.StandardThreadPoolMXBean
{
final org.jboss.threads.EnhancedQueueExecutor this$0;
void <init>(org.jboss.threads.EnhancedQueueExecutor)
{
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 := @parameter0: org.jboss.threads.EnhancedQueueExecutor;
v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public float getGrowthResistance()
{
float v2;
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: float getGrowthResistance()>();
return v2;
}
public void setGrowthResistance(float)
{
float v1;
org.jboss.threads.EnhancedQueueExecutor v2;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 := @parameter0: float;
v2 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
virtualinvoke v2.<org.jboss.threads.EnhancedQueueExecutor: void setGrowthResistance(float)>(v1);
return;
}
public boolean isGrowthResistanceSupported()
{
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
return 1;
}
public int getCorePoolSize()
{
int v2;
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: int getCorePoolSize()>();
return v2;
}
public void setCorePoolSize(int)
{
int v1;
org.jboss.threads.EnhancedQueueExecutor v2;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 := @parameter0: int;
v2 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
virtualinvoke v2.<org.jboss.threads.EnhancedQueueExecutor: void setCorePoolSize(int)>(v1);
return;
}
public boolean isCorePoolSizeSupported()
{
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
return 1;
}
public boolean prestartCoreThread()
{
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
boolean v2;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: boolean prestartCoreThread()>();
return v2;
}
public int prestartAllCoreThreads()
{
int v2;
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: int prestartAllCoreThreads()>();
return v2;
}
public boolean isCoreThreadPrestartSupported()
{
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
return 1;
}
public int getMaximumPoolSize()
{
int v2;
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: int getMaximumPoolSize()>();
return v2;
}
public void setMaximumPoolSize(int)
{
int v1;
org.jboss.threads.EnhancedQueueExecutor v2;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 := @parameter0: int;
v2 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
virtualinvoke v2.<org.jboss.threads.EnhancedQueueExecutor: void setMaximumPoolSize(int)>(v1);
return;
}
public int getPoolSize()
{
int v2;
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: int getPoolSize()>();
return v2;
}
public int getLargestPoolSize()
{
int v2;
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: int getLargestPoolSize()>();
return v2;
}
public int getActiveCount()
{
int v2;
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: int getActiveCount()>();
return v2;
}
public boolean isAllowCoreThreadTimeOut()
{
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
boolean v2;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: boolean allowsCoreThreadTimeOut()>();
return v2;
}
public void setAllowCoreThreadTimeOut(boolean)
{
org.jboss.threads.EnhancedQueueExecutor v2;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
boolean v1;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 := @parameter0: boolean;
v2 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
virtualinvoke v2.<org.jboss.threads.EnhancedQueueExecutor: void allowCoreThreadTimeOut(boolean)>(v1);
return;
}
public long getKeepAliveTimeSeconds()
{
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
java.time.Duration v2;
long v3;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: java.time.Duration getKeepAliveTime()>();
v3 = virtualinvoke v2.<java.time.Duration: long getSeconds()>();
return v3;
}
public void setKeepAliveTimeSeconds(long)
{
java.time.temporal.ChronoUnit v3;
org.jboss.threads.EnhancedQueueExecutor v2;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
java.time.Duration v4;
long v1;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 := @parameter0: long;
v2 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v3 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit SECONDS>;
v4 = staticinvoke <java.time.Duration: java.time.Duration of(long,java.time.temporal.TemporalUnit)>(v1, v3);
virtualinvoke v2.<org.jboss.threads.EnhancedQueueExecutor: void setKeepAliveTime(java.time.Duration)>(v4);
return;
}
public int getMaximumQueueSize()
{
int v2;
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: int getMaximumQueueSize()>();
return v2;
}
public void setMaximumQueueSize(int)
{
int v1;
org.jboss.threads.EnhancedQueueExecutor v2;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 := @parameter0: int;
v2 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
virtualinvoke v2.<org.jboss.threads.EnhancedQueueExecutor: void setMaximumQueueSize(int)>(v1);
return;
}
public int getQueueSize()
{
int v2;
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: int getQueueSize()>();
return v2;
}
public int getLargestQueueSize()
{
int v2;
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: int getLargestQueueSize()>();
return v2;
}
public boolean isQueueBounded()
{
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
boolean v1, v2;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = <org.jboss.threads.EnhancedQueueExecutor: boolean NO_QUEUE_LIMIT>;
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public boolean isQueueSizeModifiable()
{
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
boolean v1, v2;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = <org.jboss.threads.EnhancedQueueExecutor: boolean NO_QUEUE_LIMIT>;
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public boolean isShutdown()
{
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
boolean v2;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: boolean isShutdown()>();
return v2;
}
public boolean isTerminating()
{
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
boolean v2;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: boolean isTerminating()>();
return v2;
}
public boolean isTerminated()
{
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
boolean v2;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: boolean isTerminated()>();
return v2;
}
public long getSubmittedTaskCount()
{
long v2;
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: long getSubmittedTaskCount()>();
return v2;
}
public long getRejectedTaskCount()
{
long v2;
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: long getRejectedTaskCount()>();
return v2;
}
public long getCompletedTaskCount()
{
long v2;
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = virtualinvoke v1.<org.jboss.threads.EnhancedQueueExecutor: long getCompletedTaskCount()>();
return v2;
}
public long getSpinMissCount()
{
java.util.concurrent.atomic.LongAdder v2;
org.jboss.threads.EnhancedQueueExecutor v1;
org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl v0;
long v3;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$MXBeanImpl: org.jboss.threads.EnhancedQueueExecutor this$0>;
v2 = v1.<org.jboss.threads.EnhancedQueueExecutor: java.util.concurrent.atomic.LongAdder spinMisses>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.LongAdder: long longValue()>();
return v3;
}
}