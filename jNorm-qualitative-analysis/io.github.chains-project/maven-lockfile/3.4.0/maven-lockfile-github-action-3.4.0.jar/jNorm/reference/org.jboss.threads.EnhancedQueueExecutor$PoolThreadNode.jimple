final class org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode extends org.jboss.threads.EnhancedQueueExecutor$PoolThreadNodeBase
{
private static final int STATE_NORMAL;
private static final int STATE_PARKED;
private static final int STATE_UNPARKED;
private static final long taskOffset;
private static final long parkedOffset;
private final java.lang.Thread thread;
private volatile java.lang.Runnable task;
private volatile int parked;
void <init>(java.lang.Thread)
{
java.lang.Runnable v2;
org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode v0;
java.lang.Thread v1;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode;
v1 := @parameter0: java.lang.Thread;
specialinvoke v0.<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNodeBase: void <init>()>();
v0.<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: java.lang.Thread thread> = v1;
v2 = <org.jboss.threads.EnhancedQueueExecutor: java.lang.Runnable WAITING>;
v0.<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: java.lang.Runnable task> = v2;
return;
}
boolean compareAndSetTask(java.lang.Runnable, java.lang.Runnable)
{
sun.misc.Unsafe v4;
long v5;
java.lang.Runnable v1, v2, v3;
org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode v0;
boolean v6, v7;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: java.lang.Runnable;
v3 = v0.<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: java.lang.Runnable task>;
if v3 != v1 goto label1;
v4 = <org.jboss.threads.JBossExecutors: sun.misc.Unsafe unsafe>;
v5 = <org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: long taskOffset>;
v6 = virtualinvoke v4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(v0, v5, v1, v2);
if v6 == 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
return v7;
}
java.lang.Runnable getTask()
{
java.lang.Runnable v1;
org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: java.lang.Runnable task>;
return v1;
}
org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode getNext()
{
org.jboss.threads.EnhancedQueueExecutor$QNode v1;
org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode;
v1 = specialinvoke v0.<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNodeBase: org.jboss.threads.EnhancedQueueExecutor$QNode getNext()>();
return v1;
}
void park(org.jboss.threads.EnhancedQueueExecutor)
{
java.lang.Throwable v16;
sun.misc.Unsafe v13, v4, v9;
org.jboss.threads.EnhancedQueueExecutor v1;
long v10, v14, v5;
int v12, v2, v3, v7, v8;
boolean v11, v15, v6;
org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode;
v1 := @parameter0: org.jboss.threads.EnhancedQueueExecutor;
v2 = <org.jboss.threads.EnhancedQueueExecutor: int PARK_SPINS>;
v3 = v0.<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: int parked>;
if v3 != 2 goto label1;
v4 = <org.jboss.threads.JBossExecutors: sun.misc.Unsafe unsafe>;
v5 = <org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: long parkedOffset>;
v6 = virtualinvoke v4.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(v0, v5, 2, 0);
if v6 == 0 goto label1;
return;
label1:
if v2 <= 0 goto label4;
v7 = <org.jboss.threads.EnhancedQueueExecutor: int YIELD_FACTOR>;
if v2 >= v7 goto label2;
staticinvoke <java.lang.Thread: void yield()>();
goto label3;
label2:
staticinvoke <org.jboss.threads.JDKSpecific: void onSpinWait()>();
label3:
v2 = v2 - 1;
v8 = v0.<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: int parked>;
if v8 != 2 goto label1;
v9 = <org.jboss.threads.JBossExecutors: sun.misc.Unsafe unsafe>;
v10 = <org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: long parkedOffset>;
v11 = virtualinvoke v9.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(v0, v10, 2, 0);
if v11 == 0 goto label1;
return;
label4:
v12 = v0.<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: int parked>;
if v12 != 0 goto label8;
v13 = <org.jboss.threads.JBossExecutors: sun.misc.Unsafe unsafe>;
v14 = <org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: long parkedOffset>;
v15 = virtualinvoke v13.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(v0, v14, 0, 1);
if v15 == 0 goto label8;
label5:
staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(v1);
label6:
v0.<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: int parked> = 0;
goto label8;
label7:
v16 := @caughtexception;
v0.<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: int parked> = 0;
throw v16;
label8:
return;
catch java.lang.Throwable from label5 to label6 with label7;
}
void park(org.jboss.threads.EnhancedQueueExecutor, long)
{
java.lang.Throwable v22;
sun.misc.Unsafe v11, v19, v6;
org.jboss.threads.EnhancedQueueExecutor v1;
long v12, v14, v15, v16, v2, v20, v4, v7;
byte v17;
int v10, v18, v3, v5, v9;
boolean v13, v21, v8;
org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode v0;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode;
v1 := @parameter0: org.jboss.threads.EnhancedQueueExecutor;
v2 := @parameter1: long;
v3 = <org.jboss.threads.EnhancedQueueExecutor: int PARK_SPINS>;
if v3 <= 0 goto label06;
v4 = staticinvoke <java.lang.System: long nanoTime()>();
v5 = v0.<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: int parked>;
if v5 != 2 goto label01;
v6 = <org.jboss.threads.JBossExecutors: sun.misc.Unsafe unsafe>;
v7 = <org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: long parkedOffset>;
v8 = virtualinvoke v6.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(v0, v7, 2, 0);
if v8 == 0 goto label01;
return;
label01:
if v3 <= 0 goto label05;
v9 = <org.jboss.threads.EnhancedQueueExecutor: int YIELD_FACTOR>;
if v3 >= v9 goto label02;
staticinvoke <java.lang.Thread: void yield()>();
goto label03;
label02:
staticinvoke <org.jboss.threads.JDKSpecific: void onSpinWait()>();
label03:
v10 = v0.<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: int parked>;
if v10 != 2 goto label04;
v11 = <org.jboss.threads.JBossExecutors: sun.misc.Unsafe unsafe>;
v12 = <org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: long parkedOffset>;
v13 = virtualinvoke v11.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(v0, v12, 2, 0);
if v13 == 0 goto label04;
return;
label04:
v3 = v3 - 1;
goto label01;
label05:
v14 = staticinvoke <java.lang.System: long nanoTime()>();
v15 = v14 - v4;
v16 = v2 - v15;
v17 = v16 cmp 0L;
if v17 >= 0 goto label07;
return;
label06:
v16 = v2;
label07:
v18 = v0.<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: int parked>;
if v18 != 0 goto label11;
v19 = <org.jboss.threads.JBossExecutors: sun.misc.Unsafe unsafe>;
v20 = <org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: long parkedOffset>;
v21 = virtualinvoke v19.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(v0, v20, 0, 1);
if v21 == 0 goto label11;
label08:
staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(v1, v16);
label09:
v0.<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: int parked> = 0;
goto label11;
label10:
v22 := @caughtexception;
v0.<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: int parked> = 0;
throw v22;
label11:
return;
catch java.lang.Throwable from label08 to label09 with label10;
}
void unpark()
{
sun.misc.Unsafe v2;
java.lang.Thread v5;
int v1;
long v3;
org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode v0;
boolean v4;
v0 := @this: org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode;
v1 = v0.<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: int parked>;
if v1 != 0 goto label1;
v2 = <org.jboss.threads.JBossExecutors: sun.misc.Unsafe unsafe>;
v3 = <org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: long parkedOffset>;
v4 = virtualinvoke v2.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(v0, v3, 0, 2);
if v4 == 0 goto label1;
return;
label1:
v5 = v0.<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: java.lang.Thread thread>;
staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>(v5);
return;
}
static void <clinit>()
{
sun.misc.Unsafe v0, v4;
long v3, v7;
java.lang.reflect.Field v2, v6;
java.lang.NoSuchFieldError v9;
java.lang.NoSuchFieldException v8;
java.lang.Class v1, v5;
java.lang.String v10;
label1:
v0 = <org.jboss.threads.JBossExecutors: sun.misc.Unsafe unsafe>;
v1 = class "Lorg/jboss/threads/EnhancedQueueExecutor$PoolThreadNode;";
v2 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("task");
v3 = virtualinvoke v0.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>(v2);
<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: long taskOffset> = v3;
v4 = <org.jboss.threads.JBossExecutors: sun.misc.Unsafe unsafe>;
v5 = class "Lorg/jboss/threads/EnhancedQueueExecutor$PoolThreadNode;";
v6 = virtualinvoke v5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("parked");
v7 = virtualinvoke v4.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>(v6);
<org.jboss.threads.EnhancedQueueExecutor$PoolThreadNode: long parkedOffset> = v7;
label2:
goto label4;
label3:
v8 := @caughtexception;
v9 = new java.lang.NoSuchFieldError;
v10 = virtualinvoke v8.<java.lang.NoSuchFieldException: java.lang.String getMessage()>();
specialinvoke v9.<java.lang.NoSuchFieldError: void <init>(java.lang.String)>(v10);
throw v9;
label4:
return;
catch java.lang.NoSuchFieldException from label1 to label2 with label3;
}
}