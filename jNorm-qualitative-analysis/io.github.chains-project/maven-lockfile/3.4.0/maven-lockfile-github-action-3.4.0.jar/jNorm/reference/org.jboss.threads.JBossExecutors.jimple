public final class org.jboss.threads.JBossExecutors extends java.lang.Object
{
private static final org.jboss.logging.Logger THREAD_ERROR_LOGGER;
private static final java.lang.RuntimePermission COPY_CONTEXT_CLASSLOADER_PERMISSION;
private static final java.util.concurrent.ExecutorService REJECTING_EXECUTOR_SERVICE;
private static final java.util.concurrent.ExecutorService DISCARDING_EXECUTOR_SERVICE;
private static final java.util.concurrent.RejectedExecutionHandler ABORT_POLICY;
private static final java.util.concurrent.RejectedExecutionHandler CALLER_RUNS_POLICY;
private static final java.util.concurrent.RejectedExecutionHandler DISCARD_OLDEST_POLICY;
private static final java.util.concurrent.RejectedExecutionHandler DISCARD_POLICY;
private static final java.lang.Runnable TCCL_RESETTER;
private static final java.lang.Runnable NULL_RUNNABLE;
static final java.lang.ClassLoader SAFE_CL;
static final sun.misc.Unsafe unsafe;
static final long contextClassLoaderOffs;
private static final java.lang.Thread$UncaughtExceptionHandler LOGGING_HANDLER;
private void <init>()
{
org.jboss.threads.JBossExecutors v0;
v0 := @this: org.jboss.threads.JBossExecutors;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.util.concurrent.Executor directExecutor()
{
org.jboss.threads.SimpleDirectExecutor v0;
v0 = <org.jboss.threads.SimpleDirectExecutor: org.jboss.threads.SimpleDirectExecutor INSTANCE>;
return v0;
}
public static java.util.concurrent.Executor rejectingExecutor()
{
org.jboss.threads.RejectingExecutor v0;
v0 = <org.jboss.threads.RejectingExecutor: org.jboss.threads.RejectingExecutor INSTANCE>;
return v0;
}
public static java.util.concurrent.Executor rejectingExecutor(java.lang.String)
{
org.jboss.threads.RejectingExecutor v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = new org.jboss.threads.RejectingExecutor;
specialinvoke v1.<org.jboss.threads.RejectingExecutor: void <init>(java.lang.String)>(v0);
return v1;
}
public static java.util.concurrent.ExecutorService rejectingExecutorService()
{
java.util.concurrent.ExecutorService v0;
v0 = <org.jboss.threads.JBossExecutors: java.util.concurrent.ExecutorService REJECTING_EXECUTOR_SERVICE>;
return v0;
}
public static java.util.concurrent.ExecutorService rejectingExecutorService(java.lang.String)
{
java.lang.String v0;
java.util.concurrent.Executor v1;
java.util.concurrent.ExecutorService v2;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.jboss.threads.JBossExecutors: java.util.concurrent.Executor rejectingExecutor(java.lang.String)>(v0);
v2 = staticinvoke <org.jboss.threads.JBossExecutors: java.util.concurrent.ExecutorService protectedExecutorService(java.util.concurrent.Executor)>(v1);
return v2;
}
public static java.util.concurrent.Executor discardingExecutor()
{
org.jboss.threads.DiscardingExecutor v0;
v0 = <org.jboss.threads.DiscardingExecutor: org.jboss.threads.DiscardingExecutor INSTANCE>;
return v0;
}
public static java.util.concurrent.ExecutorService discardingExecutorService()
{
java.util.concurrent.ExecutorService v0;
v0 = <org.jboss.threads.JBossExecutors: java.util.concurrent.ExecutorService DISCARDING_EXECUTOR_SERVICE>;
return v0;
}
public static java.util.concurrent.Executor contextClassLoaderExecutor(java.util.concurrent.Executor, java.lang.ClassLoader)
{
org.jboss.threads.JBossExecutors$1 v2;
java.lang.ClassLoader v1;
java.util.concurrent.Executor v0;
v0 := @parameter0: java.util.concurrent.Executor;
v1 := @parameter1: java.lang.ClassLoader;
v2 = new org.jboss.threads.JBossExecutors$1;
specialinvoke v2.<org.jboss.threads.JBossExecutors$1: void <init>(java.util.concurrent.Executor,java.lang.ClassLoader)>(v0, v1);
return v2;
}
public static java.util.concurrent.RejectedExecutionHandler abortPolicy()
{
java.util.concurrent.RejectedExecutionHandler v0;
v0 = <org.jboss.threads.JBossExecutors: java.util.concurrent.RejectedExecutionHandler ABORT_POLICY>;
return v0;
}
public static java.util.concurrent.RejectedExecutionHandler callerRunsPolicy()
{
java.util.concurrent.RejectedExecutionHandler v0;
v0 = <org.jboss.threads.JBossExecutors: java.util.concurrent.RejectedExecutionHandler CALLER_RUNS_POLICY>;
return v0;
}
public static java.util.concurrent.RejectedExecutionHandler discardOldestPolicy()
{
java.util.concurrent.RejectedExecutionHandler v0;
v0 = <org.jboss.threads.JBossExecutors: java.util.concurrent.RejectedExecutionHandler DISCARD_OLDEST_POLICY>;
return v0;
}
public static java.util.concurrent.RejectedExecutionHandler discardPolicy()
{
java.util.concurrent.RejectedExecutionHandler v0;
v0 = <org.jboss.threads.JBossExecutors: java.util.concurrent.RejectedExecutionHandler DISCARD_POLICY>;
return v0;
}
public static java.util.concurrent.RejectedExecutionHandler handoffPolicy(java.util.concurrent.Executor)
{
java.util.concurrent.Executor v0;
org.jboss.threads.HandoffRejectedExecutionHandler v1;
v0 := @parameter0: java.util.concurrent.Executor;
v1 = new org.jboss.threads.HandoffRejectedExecutionHandler;
specialinvoke v1.<org.jboss.threads.HandoffRejectedExecutionHandler: void <init>(java.util.concurrent.Executor)>(v0);
return v1;
}
public static java.util.concurrent.ExecutorService protectedExecutorService(java.util.concurrent.Executor)
{
java.util.concurrent.Executor v0;
org.jboss.threads.DelegatingExecutorService v1;
v0 := @parameter0: java.util.concurrent.Executor;
v1 = new org.jboss.threads.DelegatingExecutorService;
specialinvoke v1.<org.jboss.threads.DelegatingExecutorService: void <init>(java.util.concurrent.Executor)>(v0);
return v1;
}
public static java.util.concurrent.ScheduledExecutorService protectedScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)
{
java.util.concurrent.ScheduledExecutorService v0;
org.jboss.threads.DelegatingScheduledExecutorService v1;
v0 := @parameter0: java.util.concurrent.ScheduledExecutorService;
v1 = new org.jboss.threads.DelegatingScheduledExecutorService;
specialinvoke v1.<org.jboss.threads.DelegatingScheduledExecutorService: void <init>(java.util.concurrent.ScheduledExecutorService)>(v0);
return v1;
}
public static java.util.concurrent.ThreadFactory resettingThreadFactory(java.util.concurrent.ThreadFactory) throws java.lang.SecurityException
{
org.jboss.threads.JBossExecutors$2 v1;
java.util.concurrent.ThreadFactory v0;
v0 := @parameter0: java.util.concurrent.ThreadFactory;
v1 = new org.jboss.threads.JBossExecutors$2;
specialinvoke v1.<org.jboss.threads.JBossExecutors$2: void <init>(java.util.concurrent.ThreadFactory)>(v0);
return v1;
}
public static java.lang.Runnable nullRunnable()
{
java.lang.Runnable v0;
v0 = <org.jboss.threads.JBossExecutors: java.lang.Runnable NULL_RUNNABLE>;
return v0;
}
public static java.lang.Runnable contextClassLoaderResetter()
{
java.lang.Runnable v0;
v0 = <org.jboss.threads.JBossExecutors: java.lang.Runnable TCCL_RESETTER>;
return v0;
}
public static java.lang.Runnable classLoaderPreservingTask(java.lang.Runnable) throws java.lang.SecurityException
{
java.lang.RuntimePermission v2;
java.lang.Runnable v0, v3;
java.lang.SecurityManager v1;
v0 := @parameter0: java.lang.Runnable;
v1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
if v1 == null goto label1;
v2 = <org.jboss.threads.JBossExecutors: java.lang.RuntimePermission COPY_CONTEXT_CLASSLOADER_PERMISSION>;
virtualinvoke v1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>(v2);
label1:
v3 = staticinvoke <org.jboss.threads.JBossExecutors: java.lang.Runnable classLoaderPreservingTaskUnchecked(java.lang.Runnable)>(v0);
return v3;
}
static java.lang.Runnable classLoaderPreservingTaskUnchecked(java.lang.Runnable)
{
java.lang.Thread v2;
java.lang.ClassLoader v3;
org.jboss.threads.ContextClassLoaderSavingRunnable v1;
java.lang.Runnable v0;
v0 := @parameter0: java.lang.Runnable;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("delegate", v0);
v1 = new org.jboss.threads.ContextClassLoaderSavingRunnable;
v2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v3 = staticinvoke <org.jboss.threads.JBossExecutors: java.lang.ClassLoader getContextClassLoader(java.lang.Thread)>(v2);
specialinvoke v1.<org.jboss.threads.ContextClassLoaderSavingRunnable: void <init>(java.lang.ClassLoader,java.lang.Runnable)>(v3, v0);
return v1;
}
static java.lang.ClassLoader getContextClassLoader(java.lang.Thread)
{
sun.misc.Unsafe v1;
java.lang.Thread v0;
java.lang.Object v3;
long v2;
v0 := @parameter0: java.lang.Thread;
v1 = <org.jboss.threads.JBossExecutors: sun.misc.Unsafe unsafe>;
v2 = <org.jboss.threads.JBossExecutors: long contextClassLoaderOffs>;
v3 = virtualinvoke v1.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>(v0, v2);
return v3;
}
static java.lang.ClassLoader getAndSetContextClassLoader(java.lang.Thread, java.lang.ClassLoader)
{
java.lang.Throwable v3;
java.lang.Thread v0;
java.lang.ClassLoader v1, v2;
v0 := @parameter0: java.lang.Thread;
v1 := @parameter1: java.lang.ClassLoader;
label1:
v2 = staticinvoke <org.jboss.threads.JBossExecutors: java.lang.ClassLoader getContextClassLoader(java.lang.Thread)>(v0);
label2:
staticinvoke <org.jboss.threads.JBossExecutors: void setContextClassLoader(java.lang.Thread,java.lang.ClassLoader)>(v0, v1);
return v2;
label3:
v3 := @caughtexception;
staticinvoke <org.jboss.threads.JBossExecutors: void setContextClassLoader(java.lang.Thread,java.lang.ClassLoader)>(v0, v1);
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
static void setContextClassLoader(java.lang.Thread, java.lang.ClassLoader)
{
sun.misc.Unsafe v2;
java.lang.Thread v0;
long v3;
java.lang.ClassLoader v1;
v0 := @parameter0: java.lang.Thread;
v1 := @parameter1: java.lang.ClassLoader;
v2 = <org.jboss.threads.JBossExecutors: sun.misc.Unsafe unsafe>;
v3 = <org.jboss.threads.JBossExecutors: long contextClassLoaderOffs>;
virtualinvoke v2.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(v0, v3, v1);
return;
}
static void clearContextClassLoader(java.lang.Thread)
{
sun.misc.Unsafe v1;
java.lang.Thread v0;
long v2;
java.lang.ClassLoader v3;
v0 := @parameter0: java.lang.Thread;
v1 = <org.jboss.threads.JBossExecutors: sun.misc.Unsafe unsafe>;
v2 = <org.jboss.threads.JBossExecutors: long contextClassLoaderOffs>;
v3 = <org.jboss.threads.JBossExecutors: java.lang.ClassLoader SAFE_CL>;
virtualinvoke v1.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(v0, v2, v3);
return;
}
public static java.lang.Thread$UncaughtExceptionHandler loggingExceptionHandler(org.jboss.logging.Logger)
{
org.jboss.threads.LoggingUncaughtExceptionHandler v1;
org.jboss.logging.Logger v0;
v0 := @parameter0: org.jboss.logging.Logger;
v1 = new org.jboss.threads.LoggingUncaughtExceptionHandler;
specialinvoke v1.<org.jboss.threads.LoggingUncaughtExceptionHandler: void <init>(org.jboss.logging.Logger)>(v0);
return v1;
}
public static java.lang.Thread$UncaughtExceptionHandler loggingExceptionHandler(java.lang.String)
{
org.jboss.threads.LoggingUncaughtExceptionHandler v1;
java.lang.String v0;
org.jboss.logging.Logger v2;
v0 := @parameter0: java.lang.String;
v1 = new org.jboss.threads.LoggingUncaughtExceptionHandler;
v2 = staticinvoke <org.jboss.logging.Logger: org.jboss.logging.Logger getLogger(java.lang.String)>(v0);
specialinvoke v1.<org.jboss.threads.LoggingUncaughtExceptionHandler: void <init>(org.jboss.logging.Logger)>(v2);
return v1;
}
public static java.lang.Thread$UncaughtExceptionHandler loggingExceptionHandler()
{
java.lang.Thread$UncaughtExceptionHandler v0;
v0 = <org.jboss.threads.JBossExecutors: java.lang.Thread$UncaughtExceptionHandler LOGGING_HANDLER>;
return v0;
}
static void <clinit>()
{
sun.misc.Unsafe v17;
org.jboss.threads.DiscardingExecutor v5;
java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy v7;
org.jboss.threads.DelegatingExecutorService v2, v4;
org.jboss.threads.JBossExecutors$5 v15;
org.jboss.logging.Logger v0, v24;
long v20;
java.lang.NoSuchFieldError v22;
java.lang.NoSuchFieldException v21;
java.lang.Thread$UncaughtExceptionHandler v25;
java.util.concurrent.ThreadPoolExecutor$AbortPolicy v6;
java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy v8;
java.lang.String v23;
org.jboss.threads.NullRunnable v11;
java.lang.reflect.Field v19;
org.jboss.threads.RejectingExecutor v3;
org.jboss.threads.JBossExecutors$3 v10;
org.jboss.threads.JBossExecutors$4 v14;
java.lang.Class v12, v18;
java.lang.Object v16;
java.lang.RuntimePermission v1;
java.lang.ClassLoader v13;
java.util.concurrent.ThreadPoolExecutor$DiscardPolicy v9;
v0 = staticinvoke <org.jboss.logging.Logger: org.jboss.logging.Logger getLogger(java.lang.String)>("org.jboss.threads.errors");
<org.jboss.threads.JBossExecutors: org.jboss.logging.Logger THREAD_ERROR_LOGGER> = v0;
v1 = new java.lang.RuntimePermission;
specialinvoke v1.<java.lang.RuntimePermission: void <init>(java.lang.String)>("copyClassLoader");
<org.jboss.threads.JBossExecutors: java.lang.RuntimePermission COPY_CONTEXT_CLASSLOADER_PERMISSION> = v1;
v2 = new org.jboss.threads.DelegatingExecutorService;
v3 = <org.jboss.threads.RejectingExecutor: org.jboss.threads.RejectingExecutor INSTANCE>;
specialinvoke v2.<org.jboss.threads.DelegatingExecutorService: void <init>(java.util.concurrent.Executor)>(v3);
<org.jboss.threads.JBossExecutors: java.util.concurrent.ExecutorService REJECTING_EXECUTOR_SERVICE> = v2;
v4 = new org.jboss.threads.DelegatingExecutorService;
v5 = <org.jboss.threads.DiscardingExecutor: org.jboss.threads.DiscardingExecutor INSTANCE>;
specialinvoke v4.<org.jboss.threads.DelegatingExecutorService: void <init>(java.util.concurrent.Executor)>(v5);
<org.jboss.threads.JBossExecutors: java.util.concurrent.ExecutorService DISCARDING_EXECUTOR_SERVICE> = v4;
v6 = new java.util.concurrent.ThreadPoolExecutor$AbortPolicy;
specialinvoke v6.<java.util.concurrent.ThreadPoolExecutor$AbortPolicy: void <init>()>();
<org.jboss.threads.JBossExecutors: java.util.concurrent.RejectedExecutionHandler ABORT_POLICY> = v6;
v7 = new java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy;
specialinvoke v7.<java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy: void <init>()>();
<org.jboss.threads.JBossExecutors: java.util.concurrent.RejectedExecutionHandler CALLER_RUNS_POLICY> = v7;
v8 = new java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy;
specialinvoke v8.<java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy: void <init>()>();
<org.jboss.threads.JBossExecutors: java.util.concurrent.RejectedExecutionHandler DISCARD_OLDEST_POLICY> = v8;
v9 = new java.util.concurrent.ThreadPoolExecutor$DiscardPolicy;
specialinvoke v9.<java.util.concurrent.ThreadPoolExecutor$DiscardPolicy: void <init>()>();
<org.jboss.threads.JBossExecutors: java.util.concurrent.RejectedExecutionHandler DISCARD_POLICY> = v9;
v10 = new org.jboss.threads.JBossExecutors$3;
specialinvoke v10.<org.jboss.threads.JBossExecutors$3: void <init>()>();
<org.jboss.threads.JBossExecutors: java.lang.Runnable TCCL_RESETTER> = v10;
v11 = staticinvoke <org.jboss.threads.NullRunnable: org.jboss.threads.NullRunnable getInstance()>();
<org.jboss.threads.JBossExecutors: java.lang.Runnable NULL_RUNNABLE> = v11;
v12 = class "Lorg/jboss/threads/JBossExecutors;";
v13 = virtualinvoke v12.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
if v13 != null goto label1;
v13 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
if v13 != null goto label1;
v14 = new org.jboss.threads.JBossExecutors$4;
specialinvoke v14.<org.jboss.threads.JBossExecutors$4: void <init>()>();
v13 = v14;
label1:
<org.jboss.threads.JBossExecutors: java.lang.ClassLoader SAFE_CL> = v13;
v15 = new org.jboss.threads.JBossExecutors$5;
specialinvoke v15.<org.jboss.threads.JBossExecutors$5: void <init>()>();
v16 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(v15);
<org.jboss.threads.JBossExecutors: sun.misc.Unsafe unsafe> = v16;
label2:
v17 = <org.jboss.threads.JBossExecutors: sun.misc.Unsafe unsafe>;
v18 = class "Ljava/lang/Thread;";
v19 = virtualinvoke v18.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("contextClassLoader");
v20 = virtualinvoke v17.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>(v19);
<org.jboss.threads.JBossExecutors: long contextClassLoaderOffs> = v20;
label3:
goto label5;
label4:
v21 := @caughtexception;
v22 = new java.lang.NoSuchFieldError;
v23 = virtualinvoke v21.<java.lang.NoSuchFieldException: java.lang.String getMessage()>();
specialinvoke v22.<java.lang.NoSuchFieldError: void <init>(java.lang.String)>(v23);
throw v22;
label5:
v24 = <org.jboss.threads.JBossExecutors: org.jboss.logging.Logger THREAD_ERROR_LOGGER>;
v25 = staticinvoke <org.jboss.threads.JBossExecutors: java.lang.Thread$UncaughtExceptionHandler loggingExceptionHandler(org.jboss.logging.Logger)>(v24);
<org.jboss.threads.JBossExecutors: java.lang.Thread$UncaughtExceptionHandler LOGGING_HANDLER> = v25;
return;
catch java.lang.NoSuchFieldException from label2 to label3 with label4;
}
}