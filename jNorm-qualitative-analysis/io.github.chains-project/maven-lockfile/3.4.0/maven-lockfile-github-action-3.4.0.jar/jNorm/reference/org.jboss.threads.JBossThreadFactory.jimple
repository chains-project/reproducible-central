public final class org.jboss.threads.JBossThreadFactory extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
private final java.lang.ThreadGroup threadGroup;
private final java.lang.Boolean daemon;
private final java.lang.Integer initialPriority;
private final java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler;
private final java.lang.Long stackSize;
private final java.lang.String namePattern;
private final java.util.concurrent.atomic.AtomicLong factoryThreadIndexSequence;
private final long factoryIndex;
private final java.security.AccessControlContext creatingContext;
private static final java.util.concurrent.atomic.AtomicLong globalThreadIndexSequence;
private static final java.util.concurrent.atomic.AtomicLong factoryIndexSequence;
public void <init>(java.lang.ThreadGroup, java.lang.Boolean, java.lang.Integer, java.lang.String, java.lang.Thread$UncaughtExceptionHandler, java.lang.Long)
{
java.security.AccessControlContext v13;
org.jboss.threads.JBossThreadFactory v0;
long v12;
java.lang.ThreadGroup v1, v9;
java.lang.Integer v3;
java.lang.SecurityManager v8;
java.util.concurrent.atomic.AtomicLong v11, v7;
java.lang.Thread$UncaughtExceptionHandler v5;
java.lang.Long v6;
java.lang.Thread v10;
java.lang.Boolean v2;
java.lang.String v4;
v0 := @this: org.jboss.threads.JBossThreadFactory;
v1 := @parameter0: java.lang.ThreadGroup;
v2 := @parameter1: java.lang.Boolean;
v3 := @parameter2: java.lang.Integer;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: java.lang.Thread$UncaughtExceptionHandler;
v6 := @parameter5: java.lang.Long;
specialinvoke v0.<java.lang.Object: void <init>()>();
v7 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v7.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(1L);
v0.<org.jboss.threads.JBossThreadFactory: java.util.concurrent.atomic.AtomicLong factoryThreadIndexSequence> = v7;
if v1 != null goto label3;
v8 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
if v8 == null goto label1;
v9 = virtualinvoke v8.<java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()>();
goto label2;
label1:
v10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v9 = virtualinvoke v10.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();
label2:
v1 = v9;
label3:
v0.<org.jboss.threads.JBossThreadFactory: java.lang.ThreadGroup threadGroup> = v1;
v0.<org.jboss.threads.JBossThreadFactory: java.lang.Boolean daemon> = v2;
v0.<org.jboss.threads.JBossThreadFactory: java.lang.Integer initialPriority> = v3;
v0.<org.jboss.threads.JBossThreadFactory: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler> = v5;
v0.<org.jboss.threads.JBossThreadFactory: java.lang.Long stackSize> = v6;
v11 = <org.jboss.threads.JBossThreadFactory: java.util.concurrent.atomic.AtomicLong factoryIndexSequence>;
v12 = virtualinvoke v11.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();
v0.<org.jboss.threads.JBossThreadFactory: long factoryIndex> = v12;
if v4 != null goto label4;
v4 = "pool-%f-thread-%t";
label4:
v0.<org.jboss.threads.JBossThreadFactory: java.lang.String namePattern> = v4;
v13 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getContext()>();
v0.<org.jboss.threads.JBossThreadFactory: java.security.AccessControlContext creatingContext> = v13;
return;
}
public void <init>(java.lang.ThreadGroup, java.lang.Boolean, java.lang.Integer, java.lang.String, java.lang.Thread$UncaughtExceptionHandler, java.lang.Long, java.security.AccessControlContext)
{
java.security.AccessControlContext v7;
org.jboss.threads.JBossThreadFactory v0;
java.lang.ThreadGroup v1;
java.lang.Integer v3;
java.lang.Thread$UncaughtExceptionHandler v5;
java.lang.Long v6;
java.lang.Boolean v2;
java.lang.String v4;
v0 := @this: org.jboss.threads.JBossThreadFactory;
v1 := @parameter0: java.lang.ThreadGroup;
v2 := @parameter1: java.lang.Boolean;
v3 := @parameter2: java.lang.Integer;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: java.lang.Thread$UncaughtExceptionHandler;
v6 := @parameter5: java.lang.Long;
v7 := @parameter6: java.security.AccessControlContext;
specialinvoke v0.<org.jboss.threads.JBossThreadFactory: void <init>(java.lang.ThreadGroup,java.lang.Boolean,java.lang.Integer,java.lang.String,java.lang.Thread$UncaughtExceptionHandler,java.lang.Long)>(v1, v2, v3, v4, v5, v6);
return;
}
public java.lang.Thread newThread(java.lang.Runnable)
{
java.security.AccessControlContext v2;
org.jboss.threads.JBossThreadFactory v0;
java.lang.Thread v5;
java.lang.Object v4;
org.jboss.threads.JBossThreadFactory$ThreadCreateAction v3;
java.lang.Runnable v1;
v0 := @this: org.jboss.threads.JBossThreadFactory;
v1 := @parameter0: java.lang.Runnable;
v2 = v0.<org.jboss.threads.JBossThreadFactory: java.security.AccessControlContext creatingContext>;
if v2 == null goto label1;
v3 = new org.jboss.threads.JBossThreadFactory$ThreadCreateAction;
specialinvoke v3.<org.jboss.threads.JBossThreadFactory$ThreadCreateAction: void <init>(org.jboss.threads.JBossThreadFactory,java.lang.Runnable)>(v0, v1);
v4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>(v3, v2);
return v4;
label1:
v5 = specialinvoke v0.<org.jboss.threads.JBossThreadFactory: java.lang.Thread createThread(java.lang.Runnable)>(v1);
return v5;
}
private java.lang.Thread createThread(java.lang.Runnable)
{
long v12, v4, v6, v7;
java.lang.ThreadGroup v10, v15;
java.lang.Integer v18, v19;
java.lang.Runnable v1;
java.lang.Thread$UncaughtExceptionHandler v24, v25;
java.lang.Long v11, v8;
int v20;
java.lang.Boolean v21, v22;
java.lang.String v16, v17;
org.jboss.threads.ThreadNameInfo v2;
boolean v23;
org.jboss.threads.JBossThreadFactory v0;
java.util.concurrent.atomic.AtomicLong v3, v5;
org.jboss.threads.JBossThread v13, v14, v9;
v0 := @this: org.jboss.threads.JBossThreadFactory;
v1 := @parameter0: java.lang.Runnable;
v2 = new org.jboss.threads.ThreadNameInfo;
v3 = <org.jboss.threads.JBossThreadFactory: java.util.concurrent.atomic.AtomicLong globalThreadIndexSequence>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();
v5 = v0.<org.jboss.threads.JBossThreadFactory: java.util.concurrent.atomic.AtomicLong factoryThreadIndexSequence>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();
v7 = v0.<org.jboss.threads.JBossThreadFactory: long factoryIndex>;
specialinvoke v2.<org.jboss.threads.ThreadNameInfo: void <init>(long,long,long)>(v4, v6, v7);
v8 = v0.<org.jboss.threads.JBossThreadFactory: java.lang.Long stackSize>;
if v8 == null goto label1;
v9 = new org.jboss.threads.JBossThread;
v10 = v0.<org.jboss.threads.JBossThreadFactory: java.lang.ThreadGroup threadGroup>;
v11 = v0.<org.jboss.threads.JBossThreadFactory: java.lang.Long stackSize>;
v12 = virtualinvoke v11.<java.lang.Long: long longValue()>();
specialinvoke v9.<org.jboss.threads.JBossThread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(v10, v1, "<new>", v12);
v13 = v9;
goto label2;
label1:
v14 = new org.jboss.threads.JBossThread;
v15 = v0.<org.jboss.threads.JBossThreadFactory: java.lang.ThreadGroup threadGroup>;
specialinvoke v14.<org.jboss.threads.JBossThread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>(v15, v1);
v13 = v14;
label2:
virtualinvoke v13.<org.jboss.threads.JBossThread: void setThreadNameInfo(org.jboss.threads.ThreadNameInfo)>(v2);
v16 = v0.<org.jboss.threads.JBossThreadFactory: java.lang.String namePattern>;
v17 = virtualinvoke v2.<org.jboss.threads.ThreadNameInfo: java.lang.String format(java.lang.Thread,java.lang.String)>(v13, v16);
virtualinvoke v13.<org.jboss.threads.JBossThread: void setName(java.lang.String)>(v17);
v18 = v0.<org.jboss.threads.JBossThreadFactory: java.lang.Integer initialPriority>;
if v18 == null goto label3;
v19 = v0.<org.jboss.threads.JBossThreadFactory: java.lang.Integer initialPriority>;
v20 = virtualinvoke v19.<java.lang.Integer: int intValue()>();
virtualinvoke v13.<org.jboss.threads.JBossThread: void setPriority(int)>(v20);
label3:
v21 = v0.<org.jboss.threads.JBossThreadFactory: java.lang.Boolean daemon>;
if v21 == null goto label4;
v22 = v0.<org.jboss.threads.JBossThreadFactory: java.lang.Boolean daemon>;
v23 = virtualinvoke v22.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v13.<org.jboss.threads.JBossThread: void setDaemon(boolean)>(v23);
label4:
v24 = v0.<org.jboss.threads.JBossThreadFactory: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler>;
if v24 == null goto label5;
v25 = v0.<org.jboss.threads.JBossThreadFactory: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler>;
virtualinvoke v13.<org.jboss.threads.JBossThread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>(v25);
label5:
staticinvoke <org.jboss.threads.JBossExecutors: void clearContextClassLoader(java.lang.Thread)>(v13);
return v13;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicLong v0, v1;
v0 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v0.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(1L);
<org.jboss.threads.JBossThreadFactory: java.util.concurrent.atomic.AtomicLong globalThreadIndexSequence> = v0;
v1 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v1.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(1L);
<org.jboss.threads.JBossThreadFactory: java.util.concurrent.atomic.AtomicLong factoryIndexSequence> = v1;
return;
}
}