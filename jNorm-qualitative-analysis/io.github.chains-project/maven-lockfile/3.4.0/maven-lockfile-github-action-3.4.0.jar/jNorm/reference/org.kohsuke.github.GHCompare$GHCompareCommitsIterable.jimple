class org.kohsuke.github.GHCompare$GHCompareCommitsIterable extends org.kohsuke.github.PagedIterable
{
private org.kohsuke.github.GHCompare result;
final org.kohsuke.github.GHCompare this$0;
public void <init>(org.kohsuke.github.GHCompare)
{
org.kohsuke.github.GHCompare v1;
org.kohsuke.github.GHCompare$GHCompareCommitsIterable v0;
v0 := @this: org.kohsuke.github.GHCompare$GHCompareCommitsIterable;
v1 := @parameter0: org.kohsuke.github.GHCompare;
v0.<org.kohsuke.github.GHCompare$GHCompareCommitsIterable: org.kohsuke.github.GHCompare this$0> = v1;
specialinvoke v0.<org.kohsuke.github.PagedIterable: void <init>()>();
return;
}
public org.kohsuke.github.PagedIterator _iterator(int)
{
org.kohsuke.github.GHRepository v11, v24, v3;
org.kohsuke.github.GitHubPageIterator v27;
java.lang.String[] v19;
org.kohsuke.github.GitHubRequest$Builder v20, v9;
org.kohsuke.github.GHCompare$GHCompareCommitsIterable v0;
int v1, v16;
java.lang.Boolean v8;
org.kohsuke.github.PagedIterator v22;
java.lang.String v13, v15, v17, v18;
org.kohsuke.github.GitHub v25, v4;
boolean v7;
java.util.Iterator v28;
org.kohsuke.github.GHCompare v10, v12, v14, v2, v23, v6;
org.kohsuke.github.GitHubClient v26;
org.kohsuke.github.GitHubRequest v21;
java.util.function.Consumer v29;
org.kohsuke.github.Requester v5;
v0 := @this: org.kohsuke.github.GHCompare$GHCompareCommitsIterable;
v1 := @parameter0: int;
v2 = v0.<org.kohsuke.github.GHCompare$GHCompareCommitsIterable: org.kohsuke.github.GHCompare this$0>;
v3 = v2.<org.kohsuke.github.GHCompare: org.kohsuke.github.GHRepository owner>;
v4 = virtualinvoke v3.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v5 = virtualinvoke v4.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v6 = v0.<org.kohsuke.github.GHCompare$GHCompareCommitsIterable: org.kohsuke.github.GHCompare this$0>;
v7 = v6.<org.kohsuke.github.GHCompare: boolean usePaginatedCommits>;
v8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v7);
v9 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder injectMappingValue(java.lang.String,java.lang.Object)>("GHCompare_usePaginatedCommits", v8);
v10 = v0.<org.kohsuke.github.GHCompare$GHCompareCommitsIterable: org.kohsuke.github.GHCompare this$0>;
v11 = v10.<org.kohsuke.github.GHCompare: org.kohsuke.github.GHRepository owner>;
v12 = v0.<org.kohsuke.github.GHCompare$GHCompareCommitsIterable: org.kohsuke.github.GHCompare this$0>;
v13 = v12.<org.kohsuke.github.GHCompare: java.lang.String url>;
v14 = v0.<org.kohsuke.github.GHCompare$GHCompareCommitsIterable: org.kohsuke.github.GHCompare this$0>;
v15 = v14.<org.kohsuke.github.GHCompare: java.lang.String url>;
v16 = virtualinvoke v15.<java.lang.String: int lastIndexOf(java.lang.String)>("/compare/");
v17 = virtualinvoke v13.<java.lang.String: java.lang.String substring(int)>(v16);
v18 = virtualinvoke v11.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v17);
v19 = newarray (java.lang.String)[0];
v20 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v18, v19);
v21 = virtualinvoke v20.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest build()>();
if v1 != 0 goto label1;
v1 = 10;
label1:
v22 = new org.kohsuke.github.PagedIterator;
v23 = v0.<org.kohsuke.github.GHCompare$GHCompareCommitsIterable: org.kohsuke.github.GHCompare this$0>;
v24 = v23.<org.kohsuke.github.GHCompare: org.kohsuke.github.GHRepository owner>;
v25 = virtualinvoke v24.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v26 = virtualinvoke v25.<org.kohsuke.github.GitHub: org.kohsuke.github.GitHubClient getClient()>();
v27 = staticinvoke <org.kohsuke.github.GitHubPageIterator: org.kohsuke.github.GitHubPageIterator create(org.kohsuke.github.GitHubClient,java.lang.Class,org.kohsuke.github.GitHubRequest,int)>(v26, class "Lorg/kohsuke/github/GHCompare;", v21, v1);
v28 = virtualinvoke v0.<org.kohsuke.github.GHCompare$GHCompareCommitsIterable: java.util.Iterator adapt(java.util.Iterator)>(v27);
v29 = staticinvoke <org.kohsuke.github.GHCompare$GHCompareCommitsIterable$lambda__iterator_0__74: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHCompare$GHCompareCommitsIterable)>(v0);
specialinvoke v22.<org.kohsuke.github.PagedIterator: void <init>(java.util.Iterator,java.util.function.Consumer)>(v28, v29);
return v22;
}
protected java.util.Iterator adapt(java.util.Iterator)
{
java.util.Iterator v1;
org.kohsuke.github.GHCompare$GHCompareCommitsIterable v0;
org.kohsuke.github.GHCompare$GHCompareCommitsIterable$1 v2;
v0 := @this: org.kohsuke.github.GHCompare$GHCompareCommitsIterable;
v1 := @parameter0: java.util.Iterator;
v2 = new org.kohsuke.github.GHCompare$GHCompareCommitsIterable$1;
specialinvoke v2.<org.kohsuke.github.GHCompare$GHCompareCommitsIterable$1: void <init>(org.kohsuke.github.GHCompare$GHCompareCommitsIterable,java.util.Iterator)>(v0, v1);
return v2;
}
}