public class org.kohsuke.github.GHCreateRepositoryBuilder extends org.kohsuke.github.GHRepositoryBuilder
{
public void <init>(java.lang.String, org.kohsuke.github.GitHub, java.lang.String)
{
org.kohsuke.github.GHCreateRepositoryBuilder v0;
java.io.IOException v7;
java.lang.String[] v6;
org.kohsuke.github.GitHubRequest$Builder v5;
java.lang.String v1, v3;
org.kohsuke.github.Requester v4;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHCreateRepositoryBuilder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.kohsuke.github.GitHub;
v3 := @parameter2: java.lang.String;
specialinvoke v0.<org.kohsuke.github.GHRepositoryBuilder: void <init>(java.lang.Class,org.kohsuke.github.GitHub,org.kohsuke.github.GHRepository)>(class "Lorg/kohsuke/github/GHCreateRepositoryBuilder;", v2, null);
v4 = v0.<org.kohsuke.github.GHCreateRepositoryBuilder: org.kohsuke.github.Requester requester>;
v5 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v6 = newarray (java.lang.String)[0];
virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v3, v6);
label1:
virtualinvoke v0.<org.kohsuke.github.GHCreateRepositoryBuilder: java.lang.Object name(java.lang.String)>(v1);
label2:
goto label4;
label3:
v7 := @caughtexception;
label4:
return;
catch java.io.IOException from label1 to label2 with label3;
}
public org.kohsuke.github.GHCreateRepositoryBuilder gitignoreTemplate(java.lang.String) throws java.io.IOException
{
java.lang.Object v2;
java.lang.String v1;
org.kohsuke.github.GHCreateRepositoryBuilder v0;
v0 := @this: org.kohsuke.github.GHCreateRepositoryBuilder;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHCreateRepositoryBuilder: java.lang.Object 'with'(java.lang.String,java.lang.Object)>("gitignore_template", v1);
return v2;
}
public org.kohsuke.github.GHCreateRepositoryBuilder licenseTemplate(java.lang.String) throws java.io.IOException
{
java.lang.Object v2;
java.lang.String v1;
org.kohsuke.github.GHCreateRepositoryBuilder v0;
v0 := @this: org.kohsuke.github.GHCreateRepositoryBuilder;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHCreateRepositoryBuilder: java.lang.Object 'with'(java.lang.String,java.lang.Object)>("license_template", v1);
return v2;
}
public org.kohsuke.github.GHCreateRepositoryBuilder autoInit(boolean) throws java.io.IOException
{
org.kohsuke.github.GHCreateRepositoryBuilder v0;
java.lang.Boolean v2;
java.lang.Object v3;
boolean v1;
v0 := @this: org.kohsuke.github.GHCreateRepositoryBuilder;
v1 := @parameter0: boolean;
v2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v1);
v3 = virtualinvoke v0.<org.kohsuke.github.GHCreateRepositoryBuilder: java.lang.Object 'with'(java.lang.String,java.lang.Object)>("auto_init", v2);
return v3;
}
public org.kohsuke.github.GHCreateRepositoryBuilder team(org.kohsuke.github.GHTeam) throws java.io.IOException
{
java.lang.Long v3;
org.kohsuke.github.GHCreateRepositoryBuilder v0;
org.kohsuke.github.GHTeam v1;
java.lang.Object v4;
long v2;
v0 := @this: org.kohsuke.github.GHCreateRepositoryBuilder;
v1 := @parameter0: org.kohsuke.github.GHTeam;
if v1 == null goto label1;
v2 = virtualinvoke v1.<org.kohsuke.github.GHTeam: long getId()>();
v3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
v4 = virtualinvoke v0.<org.kohsuke.github.GHCreateRepositoryBuilder: java.lang.Object 'with'(java.lang.String,java.lang.Object)>("team_id", v3);
return v4;
label1:
return v0;
}
public org.kohsuke.github.GHCreateRepositoryBuilder templateRepository(boolean) throws java.io.IOException
{
java.lang.Object v2;
org.kohsuke.github.GHCreateRepositoryBuilder v0;
boolean v1;
v0 := @this: org.kohsuke.github.GHCreateRepositoryBuilder;
v1 := @parameter0: boolean;
v2 = virtualinvoke v0.<org.kohsuke.github.GHCreateRepositoryBuilder: java.lang.Object isTemplate(boolean)>(v1);
return v2;
}
public org.kohsuke.github.GHCreateRepositoryBuilder owner(java.lang.String) throws java.io.IOException
{
java.lang.Object v2;
java.lang.String v1;
org.kohsuke.github.GHCreateRepositoryBuilder v0;
v0 := @this: org.kohsuke.github.GHCreateRepositoryBuilder;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHCreateRepositoryBuilder: java.lang.Object 'with'(java.lang.String,java.lang.Object)>("owner", v1);
return v2;
}
public org.kohsuke.github.GHCreateRepositoryBuilder fromTemplateRepository(java.lang.String, java.lang.String)
{
org.kohsuke.github.GHCreateRepositoryBuilder v0;
org.kohsuke.github.internal.Previews v4;
java.lang.String[] v7;
org.kohsuke.github.GitHubRequest$Builder v5;
java.lang.String v1, v2, v6;
org.kohsuke.github.Requester v3;
v0 := @this: org.kohsuke.github.GHCreateRepositoryBuilder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<org.kohsuke.github.GHCreateRepositoryBuilder: org.kohsuke.github.Requester requester>;
v4 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews BAPTISTE>;
v5 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v4);
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("/repos/\u0001/\u0001/generate");
v7 = newarray (java.lang.String)[0];
virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v6, v7);
return v0;
}
public org.kohsuke.github.GHRepository create() throws java.io.IOException
{
org.kohsuke.github.GHRepository v1;
org.kohsuke.github.GHCreateRepositoryBuilder v0;
v0 := @this: org.kohsuke.github.GHCreateRepositoryBuilder;
v1 = virtualinvoke v0.<org.kohsuke.github.GHCreateRepositoryBuilder: org.kohsuke.github.GHRepository done()>();
return v1;
}
}