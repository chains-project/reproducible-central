public class org.kohsuke.github.GHEventPayload$WorkflowJob extends org.kohsuke.github.GHEventPayload
{
private org.kohsuke.github.GHWorkflowJob workflowJob;
public void <init>()
{
org.kohsuke.github.GHEventPayload$WorkflowJob v0;
v0 := @this: org.kohsuke.github.GHEventPayload$WorkflowJob;
specialinvoke v0.<org.kohsuke.github.GHEventPayload: void <init>()>();
return;
}
public org.kohsuke.github.GHWorkflowJob getWorkflowJob()
{
org.kohsuke.github.GHWorkflowJob v1;
org.kohsuke.github.GHEventPayload$WorkflowJob v0;
v0 := @this: org.kohsuke.github.GHEventPayload$WorkflowJob;
v1 = v0.<org.kohsuke.github.GHEventPayload$WorkflowJob: org.kohsuke.github.GHWorkflowJob workflowJob>;
return v1;
}
void lateBind()
{
java.lang.IllegalStateException v2, v4;
org.kohsuke.github.GHRepository v3;
org.kohsuke.github.GHWorkflowJob v1, v5;
org.kohsuke.github.GHEventPayload$WorkflowJob v0;
v0 := @this: org.kohsuke.github.GHEventPayload$WorkflowJob;
v1 = v0.<org.kohsuke.github.GHEventPayload$WorkflowJob: org.kohsuke.github.GHWorkflowJob workflowJob>;
if v1 != null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Expected workflow_job payload, but got something else.  Maybe we\'ve got another type of event?");
throw v2;
label1:
specialinvoke v0.<org.kohsuke.github.GHEventPayload: void lateBind()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHEventPayload$WorkflowJob: org.kohsuke.github.GHRepository getRepository()>();
if v3 != null goto label2;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Repository must not be null");
throw v4;
label2:
v5 = v0.<org.kohsuke.github.GHEventPayload$WorkflowJob: org.kohsuke.github.GHWorkflowJob workflowJob>;
virtualinvoke v5.<org.kohsuke.github.GHWorkflowJob: org.kohsuke.github.GHWorkflowJob wrapUp(org.kohsuke.github.GHRepository)>(v3);
return;
}
}