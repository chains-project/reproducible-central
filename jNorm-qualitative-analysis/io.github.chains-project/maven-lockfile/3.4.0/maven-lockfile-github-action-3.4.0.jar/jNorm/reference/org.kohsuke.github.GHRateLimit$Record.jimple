public class org.kohsuke.github.GHRateLimit$Record extends java.lang.Object
{
private final int remaining;
private final int limit;
private final long resetEpochSeconds;
private final long createdAtEpochSeconds;
private final java.util.Date resetDate;
public void <init>(int, int, long)
{
int v1, v2;
long v3;
org.kohsuke.github.GHRateLimit$Record v0;
v0 := @this: org.kohsuke.github.GHRateLimit$Record;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: long;
specialinvoke v0.<org.kohsuke.github.GHRateLimit$Record: void <init>(int,int,long,org.kohsuke.github.connector.GitHubConnectorResponse)>(v1, v2, v3, null);
return;
}
void <init>(int, int, long, org.kohsuke.github.connector.GitHubConnectorResponse)
{
java.util.Date v8;
long v3, v5, v6;
int v1, v2;
java.lang.String v7;
org.kohsuke.github.GHRateLimit$Record v0;
org.kohsuke.github.connector.GitHubConnectorResponse v4;
v0 := @this: org.kohsuke.github.GHRateLimit$Record;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: long;
v4 := @parameter3: org.kohsuke.github.connector.GitHubConnectorResponse;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v6 = v5 / 1000L;
v0.<org.kohsuke.github.GHRateLimit$Record: long createdAtEpochSeconds> = v6;
v0.<org.kohsuke.github.GHRateLimit$Record: int limit> = v1;
v0.<org.kohsuke.github.GHRateLimit$Record: int remaining> = v2;
v0.<org.kohsuke.github.GHRateLimit$Record: long resetEpochSeconds> = v3;
v7 = null;
if v4 == null goto label1;
v7 = virtualinvoke v4.<org.kohsuke.github.connector.GitHubConnectorResponse: java.lang.String header(java.lang.String)>("Date");
label1:
v8 = specialinvoke v0.<org.kohsuke.github.GHRateLimit$Record: java.util.Date calculateResetDate(java.lang.String)>(v7);
v0.<org.kohsuke.github.GHRateLimit$Record: java.util.Date resetDate> = v8;
return;
}
org.kohsuke.github.GHRateLimit$Record currentOrUpdated(org.kohsuke.github.GHRateLimit$Record)
{
long v2, v3, v5, v6;
byte v4, v7;
int v8, v9;
org.kohsuke.github.GHRateLimit$Record v0, v1;
boolean v10, v11, v12;
v0 := @this: org.kohsuke.github.GHRateLimit$Record;
v1 := @parameter0: org.kohsuke.github.GHRateLimit$Record;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRateLimit$Record: long getResetEpochSeconds()>();
v3 = virtualinvoke v1.<org.kohsuke.github.GHRateLimit$Record: long getResetEpochSeconds()>();
v4 = v2 cmp v3;
if v4 > 0 goto label1;
v5 = virtualinvoke v0.<org.kohsuke.github.GHRateLimit$Record: long getResetEpochSeconds()>();
v6 = virtualinvoke v1.<org.kohsuke.github.GHRateLimit$Record: long getResetEpochSeconds()>();
v7 = v5 cmp v6;
if v7 != 0 goto label2;
v8 = virtualinvoke v0.<org.kohsuke.github.GHRateLimit$Record: int getRemaining()>();
v9 = virtualinvoke v1.<org.kohsuke.github.GHRateLimit$Record: int getRemaining()>();
if v8 > v9 goto label2;
label1:
return v0;
label2:
v10 = v1 instanceof org.kohsuke.github.GHRateLimit$UnknownLimitRecord;
if v10 != 0 goto label3;
return v1;
label3:
v11 = virtualinvoke v0.<org.kohsuke.github.GHRateLimit$Record: boolean isExpired()>();
if v11 == 0 goto label4;
v12 = virtualinvoke v1.<org.kohsuke.github.GHRateLimit$Record: boolean isExpired()>();
if v12 != 0 goto label4;
return v1;
label4:
return v0;
}
private java.util.Date calculateResetDate(java.lang.String)
{
java.util.Date v15;
java.time.ZonedDateTime v5;
long v13, v14, v16, v17, v18, v2;
java.util.logging.Level v11, v8;
java.lang.String v1, v12;
boolean v3, v9;
java.util.logging.Logger v10, v7;
java.time.format.DateTimeParseException v6;
java.time.format.DateTimeFormatter v4;
org.kohsuke.github.GHRateLimit$Record v0;
v0 := @this: org.kohsuke.github.GHRateLimit$Record;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.kohsuke.github.GHRateLimit$Record: long createdAtEpochSeconds>;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(v1);
if v3 != 0 goto label4;
label1:
v4 = <java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter RFC_1123_DATE_TIME>;
v5 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>(v1, v4);
v2 = virtualinvoke v5.<java.time.ZonedDateTime: long toEpochSecond()>();
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = <org.kohsuke.github.GHRateLimit: java.util.logging.Logger LOGGER>;
v8 = <java.util.logging.Level: java.util.logging.Level FINEST>;
v9 = virtualinvoke v7.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(v8);
if v9 == 0 goto label4;
v10 = <org.kohsuke.github.GHRateLimit: java.util.logging.Logger LOGGER>;
v11 = <java.util.logging.Level: java.util.logging.Level FINEST>;
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Malformed Date header value \u0001");
virtualinvoke v10.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>(v11, v12, v6);
label4:
v13 = v0.<org.kohsuke.github.GHRateLimit$Record: long resetEpochSeconds>;
v14 = v13 - v2;
v15 = new java.util.Date;
v16 = v0.<org.kohsuke.github.GHRateLimit$Record: long createdAtEpochSeconds>;
v17 = v16 + v14;
v18 = v17 * 1000L;
specialinvoke v15.<java.util.Date: void <init>(long)>(v18);
return v15;
catch java.time.format.DateTimeParseException from label1 to label2 with label3;
}
public int getRemaining()
{
int v1;
org.kohsuke.github.GHRateLimit$Record v0;
v0 := @this: org.kohsuke.github.GHRateLimit$Record;
v1 = v0.<org.kohsuke.github.GHRateLimit$Record: int remaining>;
return v1;
}
public int getLimit()
{
int v1;
org.kohsuke.github.GHRateLimit$Record v0;
v0 := @this: org.kohsuke.github.GHRateLimit$Record;
v1 = v0.<org.kohsuke.github.GHRateLimit$Record: int limit>;
return v1;
}
public long getResetEpochSeconds()
{
long v1;
org.kohsuke.github.GHRateLimit$Record v0;
v0 := @this: org.kohsuke.github.GHRateLimit$Record;
v1 = v0.<org.kohsuke.github.GHRateLimit$Record: long resetEpochSeconds>;
return v1;
}
public boolean isExpired()
{
byte v4;
java.util.Date v1;
long v2, v3;
org.kohsuke.github.GHRateLimit$Record v0;
boolean v5;
v0 := @this: org.kohsuke.github.GHRateLimit$Record;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRateLimit$Record: java.util.Date getResetDate()>();
v2 = virtualinvoke v1.<java.util.Date: long getTime()>();
v3 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v4 = v2 cmp v3;
if v4 >= 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public java.util.Date getResetDate()
{
java.util.Date v1, v2;
long v3;
org.kohsuke.github.GHRateLimit$Record v0;
v0 := @this: org.kohsuke.github.GHRateLimit$Record;
v1 = new java.util.Date;
v2 = v0.<org.kohsuke.github.GHRateLimit$Record: java.util.Date resetDate>;
v3 = virtualinvoke v2.<java.util.Date: long getTime()>();
specialinvoke v1.<java.util.Date: void <init>(long)>(v3);
return v1;
}
public java.lang.String toString()
{
java.util.Date v3;
int v1, v2;
java.lang.String v4;
org.kohsuke.github.GHRateLimit$Record v0;
v0 := @this: org.kohsuke.github.GHRateLimit$Record;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRateLimit$Record: int getRemaining()>();
v2 = virtualinvoke v0.<org.kohsuke.github.GHRateLimit$Record: int getLimit()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHRateLimit$Record: java.util.Date getResetDate()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,java.util.Date)>(v1, v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("{remaining=\u0001, limit=\u0001, resetDate=\u0001}");
return v4;
}
public boolean equals(java.lang.Object)
{
java.util.Date v11, v12;
long v8, v9;
byte v10;
int v4, v5, v6, v7;
java.lang.Class v2, v3;
java.lang.Object v1;
org.kohsuke.github.GHRateLimit$Record v0;
boolean v13, v14;
v0 := @this: org.kohsuke.github.GHRateLimit$Record;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = virtualinvoke v0.<org.kohsuke.github.GHRateLimit$Record: int getRemaining()>();
v5 = virtualinvoke v1.<org.kohsuke.github.GHRateLimit$Record: int getRemaining()>();
if v4 != v5 goto label4;
v6 = virtualinvoke v0.<org.kohsuke.github.GHRateLimit$Record: int getLimit()>();
v7 = virtualinvoke v1.<org.kohsuke.github.GHRateLimit$Record: int getLimit()>();
if v6 != v7 goto label4;
v8 = virtualinvoke v0.<org.kohsuke.github.GHRateLimit$Record: long getResetEpochSeconds()>();
v9 = virtualinvoke v1.<org.kohsuke.github.GHRateLimit$Record: long getResetEpochSeconds()>();
v10 = v8 cmp v9;
if v10 != 0 goto label4;
v11 = virtualinvoke v0.<org.kohsuke.github.GHRateLimit$Record: java.util.Date getResetDate()>();
v12 = virtualinvoke v1.<org.kohsuke.github.GHRateLimit$Record: java.util.Date getResetDate()>();
v13 = virtualinvoke v11.<java.util.Date: boolean equals(java.lang.Object)>(v12);
if v13 == 0 goto label4;
v14 = 1;
goto label5;
label4:
v14 = 0;
label5:
return v14;
}
public int hashCode()
{
java.lang.Object[] v1;
java.util.Date v8;
long v6;
java.lang.Integer v3, v5;
java.lang.Long v7;
int v2, v4, v9;
org.kohsuke.github.GHRateLimit$Record v0;
v0 := @this: org.kohsuke.github.GHRateLimit$Record;
v1 = newarray (java.lang.Object)[4];
v2 = virtualinvoke v0.<org.kohsuke.github.GHRateLimit$Record: int getRemaining()>();
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v1[0] = v3;
v4 = virtualinvoke v0.<org.kohsuke.github.GHRateLimit$Record: int getLimit()>();
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
v1[1] = v5;
v6 = virtualinvoke v0.<org.kohsuke.github.GHRateLimit$Record: long getResetEpochSeconds()>();
v7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v6);
v1[2] = v7;
v8 = virtualinvoke v0.<org.kohsuke.github.GHRateLimit$Record: java.util.Date getResetDate()>();
v1[3] = v8;
v9 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>(v1);
return v9;
}
}