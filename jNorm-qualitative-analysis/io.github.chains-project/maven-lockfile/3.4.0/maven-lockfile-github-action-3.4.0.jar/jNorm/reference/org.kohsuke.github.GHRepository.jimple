public class org.kohsuke.github.GHRepository extends org.kohsuke.github.GHObject
{
private java.lang.String nodeId;
private java.lang.String description;
private java.lang.String homepage;
private java.lang.String name;
private java.lang.String full_name;
private java.lang.String html_url;
private org.kohsuke.github.GHLicense license;
private java.lang.String git_url;
private java.lang.String ssh_url;
private java.lang.String clone_url;
private java.lang.String svn_url;
private java.lang.String mirror_url;
private org.kohsuke.github.GHUser owner;
private boolean has_issues;
private boolean has_wiki;
private boolean fork;
private boolean has_downloads;
private boolean has_pages;
private boolean archived;
private boolean disabled;
private boolean has_projects;
private boolean allow_squash_merge;
private boolean allow_merge_commit;
private boolean allow_rebase_merge;
private boolean delete_branch_on_merge;
private boolean _private;
private java.lang.String visibility;
private int forks_count;
private int stargazers_count;
private int watchers_count;
private int size;
private int open_issues_count;
private int subscribers_count;
private java.lang.String pushed_at;
private java.util.Map milestones;
private java.lang.String default_branch;
private java.lang.String language;
private java.util.Map commits;
private org.kohsuke.github.GHRepository$GHRepoPermission permissions;
private org.kohsuke.github.GHRepository source;
private org.kohsuke.github.GHRepository parent;
private java.lang.Boolean isTemplate;
private boolean compareUsePaginatedCommits;
private transient java.util.Set postCommitHooks;
public void <init>()
{
org.kohsuke.github.GHRepository v0;
java.util.Map v2, v4;
java.util.WeakHashMap v1, v3;
v0 := @this: org.kohsuke.github.GHRepository;
specialinvoke v0.<org.kohsuke.github.GHObject: void <init>()>();
v1 = new java.util.WeakHashMap;
specialinvoke v1.<java.util.WeakHashMap: void <init>()>();
v2 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>(v1);
v0.<org.kohsuke.github.GHRepository: java.util.Map milestones> = v2;
v3 = new java.util.WeakHashMap;
specialinvoke v3.<java.util.WeakHashMap: void <init>()>();
v4 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>(v3);
v0.<org.kohsuke.github.GHRepository: java.util.Map commits> = v4;
return;
}
static org.kohsuke.github.GHRepository read(org.kohsuke.github.GitHub, java.lang.String, java.lang.String) throws java.io.IOException
{
java.lang.String[] v5;
org.kohsuke.github.GitHubRequest$Builder v6;
java.lang.Object v7;
java.lang.String v1, v2, v4;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v0;
v0 := @parameter0: org.kohsuke.github.GitHub;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
v3 = virtualinvoke v0.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("/repos/\u0001/\u0001");
v5 = newarray (java.lang.String)[0];
v6 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v4, v5);
v7 = virtualinvoke v6.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHRepository;");
return v7;
}
public org.kohsuke.github.GHDeploymentBuilder createDeployment(java.lang.String)
{
org.kohsuke.github.GHDeploymentBuilder v2;
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = new org.kohsuke.github.GHDeploymentBuilder;
specialinvoke v2.<org.kohsuke.github.GHDeploymentBuilder: void <init>(org.kohsuke.github.GHRepository,java.lang.String)>(v0, v1);
return v2;
}
public org.kohsuke.github.PagedIterable getDeploymentStatuses(int) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHDeployment v2;
int v1;
org.kohsuke.github.PagedIterable v3;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHDeployment getDeployment(long)>(v1);
v3 = virtualinvoke v2.<org.kohsuke.github.GHDeployment: org.kohsuke.github.PagedIterable listStatuses()>();
return v3;
}
public org.kohsuke.github.PagedIterable listDeployments(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v12;
org.kohsuke.github.GitHubRequest$Builder v10, v13, v15, v17, v7, v8, v9;
java.lang.String v1, v11, v2, v3, v4;
org.kohsuke.github.PagedIterable v19;
org.kohsuke.github.GitHub v5;
org.kohsuke.github.internal.Previews v14, v16;
java.util.function.Consumer v18;
org.kohsuke.github.Requester v6;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v6 = virtualinvoke v5.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v7 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("sha", v1);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("ref", v2);
v9 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("task", v3);
v10 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("environment", v4);
v11 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("deployments");
v12 = newarray (java.lang.String)[0];
v13 = virtualinvoke v10.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v11, v12);
v14 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews ANT_MAN>;
v15 = virtualinvoke v13.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v14);
v16 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews FLASH>;
v17 = virtualinvoke v15.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v16);
v18 = staticinvoke <org.kohsuke.github.GHRepository$lambda_listDeployments_0__3313: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHRepository)>(v0);
v19 = virtualinvoke v17.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHDeployment;", v18);
return v19;
}
public org.kohsuke.github.GHDeployment getDeployment(long) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.internal.Previews v10, v8;
java.lang.String[] v6;
long v1;
org.kohsuke.github.GitHubRequest$Builder v11, v7, v9;
org.kohsuke.github.GHDeployment v13;
java.lang.Object v12;
java.lang.String v4, v5;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: long;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("deployments/\u0001");
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v4);
v6 = newarray (java.lang.String)[0];
v7 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v6);
v8 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews ANT_MAN>;
v9 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v8);
v10 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews FLASH>;
v11 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v10);
v12 = virtualinvoke v11.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHDeployment;");
v13 = virtualinvoke v12.<org.kohsuke.github.GHDeployment: org.kohsuke.github.GHDeployment wrap(org.kohsuke.github.GHRepository)>(v0);
return v13;
}
public org.kohsuke.github.GHDeploymentStatusBuilder createDeployStatus(int, org.kohsuke.github.GHDeploymentState) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHDeployment v3;
int v1;
org.kohsuke.github.GHDeploymentState v2;
org.kohsuke.github.GHDeploymentStatusBuilder v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: int;
v2 := @parameter1: org.kohsuke.github.GHDeploymentState;
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHDeployment getDeployment(long)>(v1);
v4 = virtualinvoke v3.<org.kohsuke.github.GHDeployment: org.kohsuke.github.GHDeploymentStatusBuilder createStatus(org.kohsuke.github.GHDeploymentState)>(v2);
return v4;
}
public java.lang.String getNodeId()
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: java.lang.String nodeId>;
return v1;
}
public java.lang.String getDescription()
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: java.lang.String description>;
return v1;
}
public java.lang.String getHomepage()
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: java.lang.String homepage>;
return v1;
}
public java.lang.String getGitTransportUrl()
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: java.lang.String git_url>;
return v1;
}
public java.lang.String getHttpTransportUrl()
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: java.lang.String clone_url>;
return v1;
}
public java.lang.String gitHttpTransportUrl()
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: java.lang.String clone_url>;
return v1;
}
public java.lang.String getSvnUrl()
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: java.lang.String svn_url>;
return v1;
}
public java.lang.String getMirrorUrl()
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: java.lang.String mirror_url>;
return v1;
}
public java.lang.String getSshUrl()
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: java.lang.String ssh_url>;
return v1;
}
public java.net.URL getHtmlUrl()
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
java.net.URL v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: java.lang.String html_url>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public java.lang.String getName()
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
return v1;
}
public java.lang.String getFullName()
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: java.lang.String full_name>;
return v1;
}
public boolean hasPullAccess()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHRepository$GHRepoPermission v1, v2;
boolean v3, v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$GHRepoPermission permissions>;
if v1 == null goto label1;
v2 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$GHRepoPermission permissions>;
v3 = v2.<org.kohsuke.github.GHRepository$GHRepoPermission: boolean pull>;
if v3 == 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean hasPushAccess()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHRepository$GHRepoPermission v1, v2;
boolean v3, v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$GHRepoPermission permissions>;
if v1 == null goto label1;
v2 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$GHRepoPermission permissions>;
v3 = v2.<org.kohsuke.github.GHRepository$GHRepoPermission: boolean push>;
if v3 == 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean hasAdminAccess()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHRepository$GHRepoPermission v1, v2;
boolean v3, v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$GHRepoPermission permissions>;
if v1 == null goto label1;
v2 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$GHRepoPermission permissions>;
v3 = v2.<org.kohsuke.github.GHRepository$GHRepoPermission: boolean admin>;
if v3 == 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public java.lang.String getLanguage()
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: java.lang.String language>;
return v1;
}
public org.kohsuke.github.GHUser getOwner() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHUser v2;
java.lang.String v4;
org.kohsuke.github.GitHub v3;
boolean v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: boolean isOffline()>();
if v1 == 0 goto label1;
v2 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHUser owner>;
goto label2;
label1:
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v2 = virtualinvoke v3.<org.kohsuke.github.GitHub: org.kohsuke.github.GHUser getUser(java.lang.String)>(v4);
label2:
return v2;
}
public org.kohsuke.github.GHIssue getIssue(int) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v6;
org.kohsuke.github.GitHubRequest$Builder v7;
int v1;
java.lang.Object v8;
java.lang.String v4, v5;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
org.kohsuke.github.GHIssue v9;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("issues/\u0001");
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v4);
v6 = newarray (java.lang.String)[0];
v7 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v6);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHIssue;");
v9 = virtualinvoke v8.<org.kohsuke.github.GHIssue: org.kohsuke.github.GHIssue wrap(org.kohsuke.github.GHRepository)>(v0);
return v9;
}
public org.kohsuke.github.GHIssueBuilder createIssue(java.lang.String)
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
org.kohsuke.github.GHIssueBuilder v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = new org.kohsuke.github.GHIssueBuilder;
specialinvoke v2.<org.kohsuke.github.GHIssueBuilder: void <init>(org.kohsuke.github.GHRepository,java.lang.String)>(v0, v1);
return v2;
}
public java.util.List getIssues(org.kohsuke.github.GHIssueState) throws java.io.IOException
{
org.kohsuke.github.GHIssueQueryBuilder v3;
java.util.List v5;
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHIssueQueryBuilder$ForRepository v2;
org.kohsuke.github.PagedIterable v4;
org.kohsuke.github.GHIssueState v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHIssueState;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHIssueQueryBuilder$ForRepository queryIssues()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GHIssueQueryBuilder$ForRepository: org.kohsuke.github.GHIssueQueryBuilder state(org.kohsuke.github.GHIssueState)>(v1);
v4 = virtualinvoke v3.<org.kohsuke.github.GHIssueQueryBuilder: org.kohsuke.github.PagedIterable list()>();
v5 = virtualinvoke v4.<org.kohsuke.github.PagedIterable: java.util.List toList()>();
return v5;
}
public java.util.List getIssues(org.kohsuke.github.GHIssueState, org.kohsuke.github.GHMilestone) throws java.io.IOException
{
org.kohsuke.github.GHIssueQueryBuilder v7;
org.kohsuke.github.GHRepository v0;
java.util.List v9;
org.kohsuke.github.GHIssueQueryBuilder$ForRepository v3, v6;
org.kohsuke.github.GHMilestone v2;
int v5;
java.lang.String v4;
org.kohsuke.github.PagedIterable v8;
org.kohsuke.github.GHIssueState v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHIssueState;
v2 := @parameter1: org.kohsuke.github.GHMilestone;
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHIssueQueryBuilder$ForRepository queryIssues()>();
if v2 != null goto label1;
v4 = "none";
goto label2;
label1:
v5 = virtualinvoke v2.<org.kohsuke.github.GHMilestone: int getNumber()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001");
label2:
v6 = virtualinvoke v3.<org.kohsuke.github.GHIssueQueryBuilder$ForRepository: org.kohsuke.github.GHIssueQueryBuilder$ForRepository milestone(java.lang.String)>(v4);
v7 = virtualinvoke v6.<org.kohsuke.github.GHIssueQueryBuilder$ForRepository: org.kohsuke.github.GHIssueQueryBuilder state(org.kohsuke.github.GHIssueState)>(v1);
v8 = virtualinvoke v7.<org.kohsuke.github.GHIssueQueryBuilder: org.kohsuke.github.PagedIterable list()>();
v9 = virtualinvoke v8.<org.kohsuke.github.PagedIterable: java.util.List toList()>();
return v9;
}
public org.kohsuke.github.PagedIterable listIssues(org.kohsuke.github.GHIssueState)
{
org.kohsuke.github.GHIssueQueryBuilder v3;
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHIssueQueryBuilder$ForRepository v2;
org.kohsuke.github.PagedIterable v4;
org.kohsuke.github.GHIssueState v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHIssueState;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHIssueQueryBuilder$ForRepository queryIssues()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GHIssueQueryBuilder$ForRepository: org.kohsuke.github.GHIssueQueryBuilder state(org.kohsuke.github.GHIssueState)>(v1);
v4 = virtualinvoke v3.<org.kohsuke.github.GHIssueQueryBuilder: org.kohsuke.github.PagedIterable list()>();
return v4;
}
public org.kohsuke.github.GHIssueQueryBuilder$ForRepository queryIssues()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHIssueQueryBuilder$ForRepository v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new org.kohsuke.github.GHIssueQueryBuilder$ForRepository;
specialinvoke v1.<org.kohsuke.github.GHIssueQueryBuilder$ForRepository: void <init>(org.kohsuke.github.GHRepository)>(v0);
return v1;
}
public org.kohsuke.github.GHReleaseBuilder createRelease(java.lang.String)
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
org.kohsuke.github.GHReleaseBuilder v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = new org.kohsuke.github.GHReleaseBuilder;
specialinvoke v2.<org.kohsuke.github.GHReleaseBuilder: void <init>(org.kohsuke.github.GHRepository,java.lang.String)>(v0, v1);
return v2;
}
public org.kohsuke.github.GHRef createRef(java.lang.String, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v9;
org.kohsuke.github.GitHubRequest$Builder v10, v5, v6, v7;
java.lang.Object v11;
java.lang.String v1, v2, v8;
org.kohsuke.github.Requester v4;
org.kohsuke.github.GitHub v3;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v4 = virtualinvoke v3.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v5 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("ref", v1);
v7 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("sha", v2);
v8 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("git/refs");
v9 = newarray (java.lang.String)[0];
v10 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v8, v9);
v11 = virtualinvoke v10.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHRef;");
return v11;
}
public java.util.List getReleases() throws java.io.IOException
{
java.util.List v2;
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.PagedIterable v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.PagedIterable listReleases()>();
v2 = virtualinvoke v1.<org.kohsuke.github.PagedIterable: java.util.List toList()>();
return v2;
}
public org.kohsuke.github.GHRelease getRelease(long) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v6;
long v1;
org.kohsuke.github.GitHubRequest$Builder v7;
java.io.FileNotFoundException v10;
java.lang.Object v8;
java.lang.String v4, v5;
org.kohsuke.github.GHRelease v9;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: long;
label1:
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("releases/\u0001");
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v4);
v6 = newarray (java.lang.String)[0];
v7 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v6);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHRelease;");
v9 = virtualinvoke v8.<org.kohsuke.github.GHRelease: org.kohsuke.github.GHRelease wrap(org.kohsuke.github.GHRepository)>(v0);
label2:
return v9;
label3:
v10 := @caughtexception;
return null;
catch java.io.FileNotFoundException from label1 to label2 with label3;
}
public org.kohsuke.github.GHRelease getReleaseByTagName(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v6;
org.kohsuke.github.GitHubRequest$Builder v7;
java.io.FileNotFoundException v10;
java.lang.Object v8;
java.lang.String v1, v4, v5;
org.kohsuke.github.GHRelease v9;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
label1:
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("releases/tags/\u0001");
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v4);
v6 = newarray (java.lang.String)[0];
v7 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v6);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHRelease;");
v9 = virtualinvoke v8.<org.kohsuke.github.GHRelease: org.kohsuke.github.GHRelease wrap(org.kohsuke.github.GHRepository)>(v0);
label2:
return v9;
label3:
v10 := @caughtexception;
return null;
catch java.io.FileNotFoundException from label1 to label2 with label3;
}
public org.kohsuke.github.GHRelease getLatestRelease() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v4;
org.kohsuke.github.GitHubRequest$Builder v5;
java.io.FileNotFoundException v8;
java.lang.Object v6;
java.lang.String v3;
org.kohsuke.github.GHRelease v7;
org.kohsuke.github.Requester v2;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
label1:
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("releases/latest");
v4 = newarray (java.lang.String)[0];
v5 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v3, v4);
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHRelease;");
v7 = virtualinvoke v6.<org.kohsuke.github.GHRelease: org.kohsuke.github.GHRelease wrap(org.kohsuke.github.GHRepository)>(v0);
label2:
return v7;
label3:
v8 := @caughtexception;
return null;
catch java.io.FileNotFoundException from label1 to label2 with label3;
}
public org.kohsuke.github.PagedIterable listReleases() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v4;
org.kohsuke.github.GitHubRequest$Builder v5;
java.util.function.Consumer v6;
java.lang.String v3;
org.kohsuke.github.Requester v2;
org.kohsuke.github.PagedIterable v7;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("releases");
v4 = newarray (java.lang.String)[0];
v5 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v3, v4);
v6 = staticinvoke <org.kohsuke.github.GHRepository$lambda_listReleases_1__3314: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHRepository)>(v0);
v7 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHRelease;", v6);
return v7;
}
public org.kohsuke.github.PagedIterable listTags() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v4;
org.kohsuke.github.GitHubRequest$Builder v5;
java.util.function.Consumer v6;
java.lang.String v3;
org.kohsuke.github.Requester v2;
org.kohsuke.github.PagedIterable v7;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("tags");
v4 = newarray (java.lang.String)[0];
v5 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v3, v4);
v6 = staticinvoke <org.kohsuke.github.GHRepository$lambda_listTags_2__3315: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHRepository)>(v0);
v7 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHTag;", v6);
return v7;
}
public java.util.Map listLanguages() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v5;
java.util.HashMap v1;
org.kohsuke.github.GitHubRequest$Builder v6;
java.util.function.BiConsumer v8;
java.lang.Object v7;
java.lang.String v4;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("languages");
v5 = newarray (java.lang.String)[0];
v6 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v4, v5);
v7 = virtualinvoke v6.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Ljava/util/HashMap;");
v8 = staticinvoke <org.kohsuke.github.GHRepository$lambda_listLanguages_3__3316: java.util.function.BiConsumer bootstrap$(java.util.HashMap)>(v1);
virtualinvoke v7.<java.util.HashMap: void forEach(java.util.function.BiConsumer)>(v8);
return v1;
}
public java.lang.String getOwnerName()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHUser v1, v3, v5;
java.lang.String v2, v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHUser owner>;
v2 = v1.<org.kohsuke.github.GHUser: java.lang.String login>;
if v2 == null goto label1;
v3 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHUser owner>;
v4 = v3.<org.kohsuke.github.GHUser: java.lang.String login>;
goto label2;
label1:
v5 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHUser owner>;
v4 = v5.<org.kohsuke.github.GHUser: java.lang.String name>;
label2:
return v4;
}
public boolean hasIssues()
{
org.kohsuke.github.GHRepository v0;
boolean v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: boolean has_issues>;
return v1;
}
public boolean hasProjects()
{
org.kohsuke.github.GHRepository v0;
boolean v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: boolean has_projects>;
return v1;
}
public boolean hasWiki()
{
org.kohsuke.github.GHRepository v0;
boolean v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: boolean has_wiki>;
return v1;
}
public boolean isFork()
{
org.kohsuke.github.GHRepository v0;
boolean v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: boolean fork>;
return v1;
}
public boolean isArchived()
{
org.kohsuke.github.GHRepository v0;
boolean v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: boolean archived>;
return v1;
}
public boolean isDisabled()
{
org.kohsuke.github.GHRepository v0;
boolean v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: boolean disabled>;
return v1;
}
public boolean isAllowSquashMerge()
{
org.kohsuke.github.GHRepository v0;
boolean v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: boolean allow_squash_merge>;
return v1;
}
public boolean isAllowMergeCommit()
{
org.kohsuke.github.GHRepository v0;
boolean v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: boolean allow_merge_commit>;
return v1;
}
public boolean isAllowRebaseMerge()
{
org.kohsuke.github.GHRepository v0;
boolean v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: boolean allow_rebase_merge>;
return v1;
}
public boolean isDeleteBranchOnMerge()
{
org.kohsuke.github.GHRepository v0;
boolean v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: boolean delete_branch_on_merge>;
return v1;
}
public int getForks()
{
int v1;
org.kohsuke.github.GHRepository v0;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: int getForksCount()>();
return v1;
}
public int getForksCount()
{
int v1;
org.kohsuke.github.GHRepository v0;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: int forks_count>;
return v1;
}
public int getStargazersCount()
{
int v1;
org.kohsuke.github.GHRepository v0;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: int stargazers_count>;
return v1;
}
public boolean isPrivate()
{
org.kohsuke.github.GHRepository v0;
boolean v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: boolean _private>;
return v1;
}
public org.kohsuke.github.GHRepository$Visibility getVisibility()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHRepository$Visibility v5;
java.io.IOException v2;
java.lang.String v1, v4;
org.kohsuke.github.GHException v3;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: java.lang.String visibility>;
if v1 != null goto label4;
label1:
virtualinvoke v0.<org.kohsuke.github.GHRepository: void populate()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = new org.kohsuke.github.GHException;
specialinvoke v3.<org.kohsuke.github.GHException: void <init>(java.lang.String,java.lang.Throwable)>("Could not populate the visibility of the repository", v2);
throw v3;
label4:
v4 = v0.<org.kohsuke.github.GHRepository: java.lang.String visibility>;
v5 = staticinvoke <org.kohsuke.github.GHRepository$Visibility: org.kohsuke.github.GHRepository$Visibility 'from'(java.lang.String)>(v4);
return v5;
catch java.io.IOException from label1 to label2 with label3;
}
public boolean isTemplate()
{
org.kohsuke.github.GHRepository v0;
java.io.IOException v2;
org.kohsuke.github.GHException v3;
java.lang.Boolean v1, v4, v5, v7, v8;
boolean v6, v9;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: java.lang.Boolean isTemplate>;
if v1 != null goto label5;
label1:
virtualinvoke v0.<org.kohsuke.github.GHRepository: void populate()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = new org.kohsuke.github.GHException;
specialinvoke v3.<org.kohsuke.github.GHException: void <init>(java.lang.String,java.lang.Throwable)>("Could not populate the template setting of the repository", v2);
throw v3;
label4:
v4 = <java.lang.Boolean: java.lang.Boolean TRUE>;
v5 = v0.<org.kohsuke.github.GHRepository: java.lang.Boolean isTemplate>;
v6 = virtualinvoke v4.<java.lang.Boolean: boolean equals(java.lang.Object)>(v5);
v7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v6);
v0.<org.kohsuke.github.GHRepository: java.lang.Boolean isTemplate> = v7;
label5:
v8 = v0.<org.kohsuke.github.GHRepository: java.lang.Boolean isTemplate>;
v9 = virtualinvoke v8.<java.lang.Boolean: boolean booleanValue()>();
return v9;
catch java.io.IOException from label1 to label2 with label3;
}
public boolean hasDownloads()
{
org.kohsuke.github.GHRepository v0;
boolean v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: boolean has_downloads>;
return v1;
}
public boolean hasPages()
{
org.kohsuke.github.GHRepository v0;
boolean v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: boolean has_pages>;
return v1;
}
public int getWatchers()
{
int v1;
org.kohsuke.github.GHRepository v0;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: int getWatchersCount()>();
return v1;
}
public int getWatchersCount()
{
int v1;
org.kohsuke.github.GHRepository v0;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: int watchers_count>;
return v1;
}
public int getOpenIssueCount()
{
int v1;
org.kohsuke.github.GHRepository v0;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: int open_issues_count>;
return v1;
}
public int getSubscribersCount()
{
int v1;
org.kohsuke.github.GHRepository v0;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: int subscribers_count>;
return v1;
}
public java.util.Date getPushedAt()
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
java.util.Date v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: java.lang.String pushed_at>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.util.Date parseDate(java.lang.String)>(v1);
return v2;
}
public java.lang.String getDefaultBranch()
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: java.lang.String default_branch>;
return v1;
}
public java.lang.String getMasterBranch()
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: java.lang.String default_branch>;
return v1;
}
public int getSize()
{
int v1;
org.kohsuke.github.GHRepository v0;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: int size>;
return v1;
}
public org.kohsuke.github.GHPersonSet getCollaborators() throws java.io.IOException
{
java.util.List v3;
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHPersonSet v1;
org.kohsuke.github.PagedIterable v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new org.kohsuke.github.GHPersonSet;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.PagedIterable listCollaborators()>();
v3 = virtualinvoke v2.<org.kohsuke.github.PagedIterable: java.util.List toList()>();
specialinvoke v1.<org.kohsuke.github.GHPersonSet: void <init>(java.util.Collection)>(v3);
return v1;
}
public org.kohsuke.github.PagedIterable listCollaborators() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.PagedIterable v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = specialinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.PagedIterable listUsers(java.lang.String)>("collaborators");
return v1;
}
public org.kohsuke.github.PagedIterable listCollaborators(org.kohsuke.github.GHRepository$CollaboratorAffiliation) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GitHubRequest$Builder v4;
org.kohsuke.github.Requester v3;
org.kohsuke.github.PagedIterable v5;
org.kohsuke.github.GHRepository$CollaboratorAffiliation v1;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHRepository$CollaboratorAffiliation;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Enum)>("affiliation", v1);
v5 = specialinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.PagedIterable listUsers(org.kohsuke.github.Requester,java.lang.String)>(v4, "collaborators");
return v5;
}
public org.kohsuke.github.PagedIterable listAssignees() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.PagedIterable v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = specialinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.PagedIterable listUsers(java.lang.String)>("assignees");
return v1;
}
public boolean hasAssignee(org.kohsuke.github.GHUser) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v7;
org.kohsuke.github.GitHubRequest$Builder v8;
org.kohsuke.github.GHUser v1;
int v10, v9;
java.lang.String v4, v5, v6;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
boolean v11;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHUser;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v1.<org.kohsuke.github.GHUser: java.lang.String getLogin()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("assignees/\u0001");
v6 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v5);
v7 = newarray (java.lang.String)[0];
v8 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v6, v7);
v9 = virtualinvoke v8.<org.kohsuke.github.Requester: int fetchHttpStatusCode()>();
v10 = v9 / 100;
if v10 != 2 goto label1;
v11 = 1;
goto label2;
label1:
v11 = 0;
label2:
return v11;
}
public java.util.Set getCollaboratorNames() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v8;
java.lang.String[] v5;
org.kohsuke.github.GitHubRequest$Builder v6;
java.util.HashSet v1;
org.kohsuke.github.GHUser v11;
int v10, v9;
java.lang.String v12, v4;
org.kohsuke.github.Requester v3;
org.kohsuke.github.PagedIterable v7;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new java.util.HashSet;
specialinvoke v1.<java.util.HashSet: void <init>()>();
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("collaborators");
v5 = newarray (java.lang.String)[0];
v6 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v4, v5);
v7 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHUser;", null);
v8 = virtualinvoke v7.<org.kohsuke.github.PagedIterable: java.lang.Object[] toArray()>();
v9 = lengthof v8;
v10 = 0;
label1:
if v10 >= v9 goto label2;
v11 = v8[v10];
v12 = v11.<org.kohsuke.github.GHUser: java.lang.String login>;
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>(v12);
v10 = v10 + 1;
goto label1;
label2:
return v1;
}
public java.util.Set getCollaboratorNames(org.kohsuke.github.GHRepository$CollaboratorAffiliation) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v10;
java.lang.String[] v6;
org.kohsuke.github.GitHubRequest$Builder v7, v8;
java.util.HashSet v2;
org.kohsuke.github.GHUser v13;
int v11, v12;
java.lang.String v14, v5;
org.kohsuke.github.Requester v4;
org.kohsuke.github.PagedIterable v9;
org.kohsuke.github.GHRepository$CollaboratorAffiliation v1;
org.kohsuke.github.GitHub v3;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHRepository$CollaboratorAffiliation;
v2 = new java.util.HashSet;
specialinvoke v2.<java.util.HashSet: void <init>()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v4 = virtualinvoke v3.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("collaborators");
v6 = newarray (java.lang.String)[0];
v7 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v6);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Enum)>("affiliation", v1);
v9 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHUser;", null);
v10 = virtualinvoke v9.<org.kohsuke.github.PagedIterable: java.lang.Object[] toArray()>();
v11 = lengthof v10;
v12 = 0;
label1:
if v12 >= v11 goto label2;
v13 = v10[v12];
v14 = v13.<org.kohsuke.github.GHUser: java.lang.String login>;
interfaceinvoke v2.<java.util.Set: boolean add(java.lang.Object)>(v14);
v12 = v12 + 1;
goto label1;
label2:
return v2;
}
public boolean isCollaborator(org.kohsuke.github.GHUser) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v7;
org.kohsuke.github.GitHubRequest$Builder v8;
org.kohsuke.github.GHUser v1;
int v9;
java.lang.String v4, v5, v6;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
boolean v10;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHUser;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v1.<org.kohsuke.github.GHUser: java.lang.String getLogin()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("collaborators/\u0001");
v6 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v5);
v7 = newarray (java.lang.String)[0];
v8 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v6, v7);
v9 = virtualinvoke v8.<org.kohsuke.github.Requester: int fetchHttpStatusCode()>();
if v9 != 204 goto label1;
v10 = 1;
goto label2;
label1:
v10 = 0;
label2:
return v10;
}
public org.kohsuke.github.GHPermissionType getPermission(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v6;
org.kohsuke.github.GitHubRequest$Builder v7;
org.kohsuke.github.GHPermissionType v9;
java.lang.Object v8;
java.lang.String v1, v4, v5;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("collaborators/\u0001/permission");
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v4);
v6 = newarray (java.lang.String)[0];
v7 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v6);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHPermission;");
v9 = virtualinvoke v8.<org.kohsuke.github.GHPermission: org.kohsuke.github.GHPermissionType getPermissionType()>();
return v9;
}
public org.kohsuke.github.GHPermissionType getPermission(org.kohsuke.github.GHUser) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHPermissionType v3;
org.kohsuke.github.GHUser v1;
java.lang.String v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHUser;
v2 = virtualinvoke v1.<org.kohsuke.github.GHUser: java.lang.String getLogin()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHPermissionType getPermission(java.lang.String)>(v2);
return v3;
}
public boolean hasPermission(java.lang.String, org.kohsuke.github.GHPermissionType) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHPermissionType v2, v3;
java.lang.String v1;
boolean v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.kohsuke.github.GHPermissionType;
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHPermissionType getPermission(java.lang.String)>(v1);
v4 = virtualinvoke v3.<org.kohsuke.github.GHPermissionType: boolean implies(org.kohsuke.github.GHPermissionType)>(v2);
return v4;
}
public boolean hasPermission(org.kohsuke.github.GHUser, org.kohsuke.github.GHPermissionType) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHPermissionType v2;
org.kohsuke.github.GHUser v1;
java.lang.String v3;
boolean v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHUser;
v2 := @parameter1: org.kohsuke.github.GHPermissionType;
v3 = virtualinvoke v1.<org.kohsuke.github.GHUser: java.lang.String getLogin()>();
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: boolean hasPermission(java.lang.String,org.kohsuke.github.GHPermissionType)>(v3, v2);
return v4;
}
public java.util.Set getTeams() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.util.Set v11;
java.lang.String[] v7;
org.kohsuke.github.GitHubRequest$Builder v8;
java.util.function.Consumer v9;
org.kohsuke.github.GHOrganization v3;
java.lang.String v2, v6;
org.kohsuke.github.Requester v5;
org.kohsuke.github.PagedIterable v10;
org.kohsuke.github.GitHub v1, v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v3 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.GHOrganization getOrganization(java.lang.String)>(v2);
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v5 = virtualinvoke v4.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v6 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("teams");
v7 = newarray (java.lang.String)[0];
v8 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v6, v7);
v9 = staticinvoke <org.kohsuke.github.GHRepository$lambda_getTeams_4__3317: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHOrganization)>(v3);
v10 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHTeam;", v9);
v11 = virtualinvoke v10.<org.kohsuke.github.PagedIterable: java.util.Set toSet()>();
return v11;
}
public transient void addCollaborators(org.kohsuke.github.GHOrganization$Permission, org.kohsuke.github.GHUser[]) throws java.io.IOException
{
java.util.List v3;
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHUser[] v2;
org.kohsuke.github.GHOrganization$Permission v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHOrganization$Permission;
v2 := @parameter1: org.kohsuke.github.GHUser[];
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
virtualinvoke v0.<org.kohsuke.github.GHRepository: void addCollaborators(java.util.Collection,org.kohsuke.github.GHOrganization$Permission)>(v3, v1);
return;
}
public transient void addCollaborators(org.kohsuke.github.GHOrganization$RepositoryRole, org.kohsuke.github.GHUser[]) throws java.io.IOException
{
java.util.List v3;
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHUser[] v2;
org.kohsuke.github.GHOrganization$RepositoryRole v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHOrganization$RepositoryRole;
v2 := @parameter1: org.kohsuke.github.GHUser[];
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
virtualinvoke v0.<org.kohsuke.github.GHRepository: void addCollaborators(java.util.Collection,org.kohsuke.github.GHOrganization$RepositoryRole)>(v3, v1);
return;
}
public transient void addCollaborators(org.kohsuke.github.GHUser[]) throws java.io.IOException
{
org.kohsuke.github.GHUser[] v1;
java.util.List v2;
org.kohsuke.github.GHRepository v0;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHUser[];
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
virtualinvoke v0.<org.kohsuke.github.GHRepository: void addCollaborators(java.util.Collection)>(v2);
return;
}
public void addCollaborators(java.util.Collection) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.util.Collection v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.util.Collection;
specialinvoke v0.<org.kohsuke.github.GHRepository: void modifyCollaborators(java.util.Collection,java.lang.String,org.kohsuke.github.GHOrganization$RepositoryRole)>(v1, "PUT", null);
return;
}
public void addCollaborators(java.util.Collection, org.kohsuke.github.GHOrganization$Permission) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.util.Collection v1;
org.kohsuke.github.GHOrganization$RepositoryRole v3;
org.kohsuke.github.GHOrganization$Permission v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.util.Collection;
v2 := @parameter1: org.kohsuke.github.GHOrganization$Permission;
v3 = staticinvoke <org.kohsuke.github.GHOrganization$RepositoryRole: org.kohsuke.github.GHOrganization$RepositoryRole 'from'(org.kohsuke.github.GHOrganization$Permission)>(v2);
specialinvoke v0.<org.kohsuke.github.GHRepository: void modifyCollaborators(java.util.Collection,java.lang.String,org.kohsuke.github.GHOrganization$RepositoryRole)>(v1, "PUT", v3);
return;
}
public void addCollaborators(java.util.Collection, org.kohsuke.github.GHOrganization$RepositoryRole) throws java.io.IOException
{
org.kohsuke.github.GHOrganization$RepositoryRole v2;
org.kohsuke.github.GHRepository v0;
java.util.Collection v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.util.Collection;
v2 := @parameter1: org.kohsuke.github.GHOrganization$RepositoryRole;
specialinvoke v0.<org.kohsuke.github.GHRepository: void modifyCollaborators(java.util.Collection,java.lang.String,org.kohsuke.github.GHOrganization$RepositoryRole)>(v1, "PUT", v2);
return;
}
public transient void removeCollaborators(org.kohsuke.github.GHUser[]) throws java.io.IOException
{
org.kohsuke.github.GHUser[] v1;
java.util.List v2;
org.kohsuke.github.GHRepository v0;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHUser[];
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
virtualinvoke v0.<org.kohsuke.github.GHRepository: void removeCollaborators(java.util.Collection)>(v2);
return;
}
public void removeCollaborators(java.util.Collection) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.util.Collection v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.util.Collection;
specialinvoke v0.<org.kohsuke.github.GHRepository: void modifyCollaborators(java.util.Collection,java.lang.String,org.kohsuke.github.GHOrganization$RepositoryRole)>(v1, "DELETE", null);
return;
}
private void modifyCollaborators(java.util.Collection, java.lang.String, org.kohsuke.github.GHOrganization$RepositoryRole) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v16;
org.kohsuke.github.GitHubRequest$Builder v17, v6, v8;
java.lang.String v13, v14, v15, v2, v7;
java.util.LinkedHashSet v9;
org.kohsuke.github.GitHub v4;
boolean v11;
java.util.Iterator v10;
java.util.Collection v1;
org.kohsuke.github.GHOrganization$RepositoryRole v3;
java.lang.Object v12;
org.kohsuke.github.Requester v5;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.util.Collection;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: org.kohsuke.github.GHOrganization$RepositoryRole;
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v5 = virtualinvoke v4.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>(v2);
if v3 == null goto label1;
v7 = virtualinvoke v3.<org.kohsuke.github.GHOrganization$RepositoryRole: java.lang.String toString()>();
v8 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("permission", v7);
virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder inBody()>();
label1:
v9 = new java.util.LinkedHashSet;
specialinvoke v9.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(v1);
v10 = virtualinvoke v9.<java.util.LinkedHashSet: java.util.Iterator iterator()>();
label2:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label3;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
v13 = virtualinvoke v12.<org.kohsuke.github.GHUser: java.lang.String getLogin()>();
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("collaborators/\u0001");
v15 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v14);
v16 = newarray (java.lang.String)[0];
v17 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v15, v16);
virtualinvoke v17.<org.kohsuke.github.Requester: void send()>();
goto label2;
label3:
return;
}
public void setEmailServiceHook(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v10;
java.util.HashMap v2;
org.kohsuke.github.GitHubRequest$Builder v11, v5, v6, v7, v8;
java.lang.String v1, v9;
org.kohsuke.github.Requester v4;
org.kohsuke.github.GitHub v3;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("address", v1);
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v4 = virtualinvoke v3.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v5 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("name", "email");
v7 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.util.Map)>("config", v2);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,boolean)>("active", 1);
v9 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("hooks");
v10 = newarray (java.lang.String)[0];
v11 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v9, v10);
virtualinvoke v11.<org.kohsuke.github.Requester: void send()>();
return;
}
public void enableIssueTracker(boolean) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
boolean v1;
org.kohsuke.github.GHRepository$Setter v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: boolean;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$Setter set()>();
virtualinvoke v2.<org.kohsuke.github.GHRepository$Setter: java.lang.Object issues(boolean)>(v1);
return;
}
public void enableProjects(boolean) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
boolean v1;
org.kohsuke.github.GHRepository$Setter v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: boolean;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$Setter set()>();
virtualinvoke v2.<org.kohsuke.github.GHRepository$Setter: java.lang.Object projects(boolean)>(v1);
return;
}
public void enableWiki(boolean) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
boolean v1;
org.kohsuke.github.GHRepository$Setter v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: boolean;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$Setter set()>();
virtualinvoke v2.<org.kohsuke.github.GHRepository$Setter: java.lang.Object wiki(boolean)>(v1);
return;
}
public void enableDownloads(boolean) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
boolean v1;
org.kohsuke.github.GHRepository$Setter v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: boolean;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$Setter set()>();
virtualinvoke v2.<org.kohsuke.github.GHRepository$Setter: java.lang.Object downloads(boolean)>(v1);
return;
}
public void renameTo(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
org.kohsuke.github.GHRepository$Setter v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$Setter set()>();
virtualinvoke v2.<org.kohsuke.github.GHRepository$Setter: java.lang.Object name(java.lang.String)>(v1);
return;
}
public void setDescription(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
org.kohsuke.github.GHRepository$Setter v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$Setter set()>();
virtualinvoke v2.<org.kohsuke.github.GHRepository$Setter: java.lang.Object description(java.lang.String)>(v1);
return;
}
public void setHomepage(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
org.kohsuke.github.GHRepository$Setter v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$Setter set()>();
virtualinvoke v2.<org.kohsuke.github.GHRepository$Setter: java.lang.Object homepage(java.lang.String)>(v1);
return;
}
public void setDefaultBranch(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
org.kohsuke.github.GHRepository$Setter v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$Setter set()>();
virtualinvoke v2.<org.kohsuke.github.GHRepository$Setter: java.lang.Object defaultBranch(java.lang.String)>(v1);
return;
}
public void setPrivate(boolean) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
boolean v1;
org.kohsuke.github.GHRepository$Setter v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: boolean;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$Setter set()>();
virtualinvoke v2.<org.kohsuke.github.GHRepository$Setter: java.lang.Object private_(boolean)>(v1);
return;
}
public void setVisibility(org.kohsuke.github.GHRepository$Visibility) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.internal.Previews v5;
java.lang.String[] v11;
org.kohsuke.github.GitHubRequest$Builder v12, v4, v6, v8, v9;
org.kohsuke.github.GHRepository$Visibility v1;
java.lang.String v10, v7;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHRepository$Visibility;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("PATCH");
v5 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews NEBULA>;
v6 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v5);
v7 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
v8 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("name", v7);
v9 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Enum)>("visibility", v1);
v10 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("");
v11 = newarray (java.lang.String)[0];
v12 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v10, v11);
virtualinvoke v12.<org.kohsuke.github.Requester: void send()>();
return;
}
public void allowSquashMerge(boolean) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
boolean v1;
org.kohsuke.github.GHRepository$Setter v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: boolean;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$Setter set()>();
virtualinvoke v2.<org.kohsuke.github.GHRepository$Setter: java.lang.Object allowSquashMerge(boolean)>(v1);
return;
}
public void allowMergeCommit(boolean) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
boolean v1;
org.kohsuke.github.GHRepository$Setter v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: boolean;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$Setter set()>();
virtualinvoke v2.<org.kohsuke.github.GHRepository$Setter: java.lang.Object allowMergeCommit(boolean)>(v1);
return;
}
public void allowRebaseMerge(boolean) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
boolean v1;
org.kohsuke.github.GHRepository$Setter v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: boolean;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$Setter set()>();
virtualinvoke v2.<org.kohsuke.github.GHRepository$Setter: java.lang.Object allowRebaseMerge(boolean)>(v1);
return;
}
public void deleteBranchOnMerge(boolean) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
boolean v1;
org.kohsuke.github.GHRepository$Setter v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: boolean;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$Setter set()>();
virtualinvoke v2.<org.kohsuke.github.GHRepository$Setter: java.lang.Object deleteBranchOnMerge(boolean)>(v1);
return;
}
public void delete() throws java.io.IOException
{
java.lang.Throwable v12;
org.kohsuke.github.GHRepository v0;
java.lang.String[] v5;
org.kohsuke.github.GitHubRequest$Builder v3, v6;
java.io.FileNotFoundException v7, v8;
java.lang.String v10, v11, v4, v9;
org.kohsuke.github.Requester v2;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
label1:
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("DELETE");
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("");
v5 = newarray (java.lang.String)[0];
v6 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v4, v5);
virtualinvoke v6.<org.kohsuke.github.Requester: void send()>();
label2:
goto label4;
label3:
v7 := @caughtexception;
v8 = new java.io.FileNotFoundException;
v9 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v10 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v9, v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to delete \u0001/\u0001; might not exist, or you might need the delete_repo scope in your token: http://stackoverflow.com/a/19327004/12916");
specialinvoke v8.<java.io.FileNotFoundException: void <init>(java.lang.String)>(v11);
v12 = virtualinvoke v8.<java.io.FileNotFoundException: java.lang.Throwable initCause(java.lang.Throwable)>(v7);
throw v12;
label4:
return;
catch java.io.FileNotFoundException from label1 to label2 with label3;
}
public void archive() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHRepository$Setter v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository$Setter set()>();
virtualinvoke v1.<org.kohsuke.github.GHRepository$Setter: java.lang.Object archive()>();
v0.<org.kohsuke.github.GHRepository: boolean archived> = 1;
return;
}
public org.kohsuke.github.GHRepository$Updater update()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHRepository$Updater v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new org.kohsuke.github.GHRepository$Updater;
specialinvoke v1.<org.kohsuke.github.GHRepository$Updater: void <init>(org.kohsuke.github.GHRepository)>(v0);
return v1;
}
public org.kohsuke.github.GHRepository$Setter set()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHRepository$Setter v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new org.kohsuke.github.GHRepository$Setter;
specialinvoke v1.<org.kohsuke.github.GHRepository$Setter: void <init>(org.kohsuke.github.GHRepository)>(v0);
return v1;
}
public org.kohsuke.github.PagedIterable listForks()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.PagedIterable v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.PagedIterable listForks(org.kohsuke.github.GHRepository$ForkSort)>(null);
return v1;
}
public org.kohsuke.github.PagedIterable listForks(org.kohsuke.github.GHRepository$ForkSort)
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v6;
org.kohsuke.github.GitHubRequest$Builder v4, v7;
org.kohsuke.github.GHRepository$ForkSort v1;
java.lang.String v5;
org.kohsuke.github.Requester v3;
org.kohsuke.github.PagedIterable v8;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHRepository$ForkSort;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Enum)>("sort", v1);
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("forks");
v6 = newarray (java.lang.String)[0];
v7 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v6);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHRepository;", null);
return v8;
}
public org.kohsuke.github.GHRepository fork() throws java.io.IOException
{
java.lang.Throwable v14;
org.kohsuke.github.GHRepository v0, v11;
java.lang.String[] v5;
org.kohsuke.github.GitHubRequest$Builder v3, v6;
java.io.InterruptedIOException v13;
int v7;
org.kohsuke.github.GHMyself v9;
java.lang.String v10, v16, v4;
org.kohsuke.github.GitHub v1, v8;
java.io.IOException v15;
java.lang.InterruptedException v12;
org.kohsuke.github.Requester v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("forks");
v5 = newarray (java.lang.String)[0];
v6 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v4, v5);
virtualinvoke v6.<org.kohsuke.github.Requester: void send()>();
v7 = 0;
label1:
if v7 >= 10 goto label6;
v8 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v9 = virtualinvoke v8.<org.kohsuke.github.GitHub: org.kohsuke.github.GHMyself getMyself()>();
v10 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
v11 = virtualinvoke v9.<org.kohsuke.github.GHMyself: org.kohsuke.github.GHRepository getRepository(java.lang.String)>(v10);
if v11 == null goto label2;
return v11;
label2:
staticinvoke <java.lang.Thread: void sleep(long)>(3000L);
label3:
goto label5;
label4:
v12 := @caughtexception;
v13 = new java.io.InterruptedIOException;
specialinvoke v13.<java.io.InterruptedIOException: void <init>()>();
v14 = virtualinvoke v13.<java.io.InterruptedIOException: java.lang.Throwable initCause(java.lang.Throwable)>(v12);
throw v14;
label5:
v7 = v7 + 1;
goto label1;
label6:
v15 = new java.io.IOException;
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.kohsuke.github.GHRepository)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 was forked but can\'t find the new repository");
specialinvoke v15.<java.io.IOException: void <init>(java.lang.String)>(v16);
throw v15;
catch java.lang.InterruptedException from label2 to label3 with label4;
}
public org.kohsuke.github.GHRepository forkTo(org.kohsuke.github.GHOrganization) throws java.io.IOException
{
java.lang.Throwable v15;
org.kohsuke.github.GHRepository v0, v12;
java.lang.String[] v8;
org.kohsuke.github.GitHubRequest$Builder v4, v6, v9;
java.io.InterruptedIOException v14;
int v10;
java.lang.String v11, v17, v18, v5, v7;
org.kohsuke.github.GitHub v2;
java.io.IOException v16;
org.kohsuke.github.GHOrganization v1;
java.lang.InterruptedException v13;
org.kohsuke.github.Requester v3;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHOrganization;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v5 = virtualinvoke v1.<org.kohsuke.github.GHOrganization: java.lang.String getLogin()>();
v6 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("organization", v5);
v7 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("forks");
v8 = newarray (java.lang.String)[0];
v9 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v7, v8);
virtualinvoke v9.<org.kohsuke.github.Requester: void send()>();
v10 = 0;
label1:
if v10 >= 10 goto label6;
v11 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
v12 = virtualinvoke v1.<org.kohsuke.github.GHOrganization: org.kohsuke.github.GHRepository getRepository(java.lang.String)>(v11);
if v12 == null goto label2;
return v12;
label2:
staticinvoke <java.lang.Thread: void sleep(long)>(3000L);
label3:
goto label5;
label4:
v13 := @caughtexception;
v14 = new java.io.InterruptedIOException;
specialinvoke v14.<java.io.InterruptedIOException: void <init>()>();
v15 = virtualinvoke v14.<java.io.InterruptedIOException: java.lang.Throwable initCause(java.lang.Throwable)>(v13);
throw v15;
label5:
v10 = v10 + 1;
goto label1;
label6:
v16 = new java.io.IOException;
v17 = virtualinvoke v1.<org.kohsuke.github.GHOrganization: java.lang.String getLogin()>();
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.kohsuke.github.GHRepository,java.lang.String)>(v0, v17) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 was forked into \u0001 but can\'t find the new repository");
specialinvoke v16.<java.io.IOException: void <init>(java.lang.String)>(v18);
throw v16;
catch java.lang.InterruptedException from label2 to label3 with label4;
}
public org.kohsuke.github.GHPullRequest getPullRequest(int) throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v11;
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.internal.Previews v4;
java.lang.String[] v8;
org.kohsuke.github.GitHubRequest$Builder v5, v9;
int v1;
java.lang.Object v10;
java.lang.String v6, v7;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews SHADOW_CAT>;
v5 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v4);
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("pulls/\u0001");
v7 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v6);
v8 = newarray (java.lang.String)[0];
v9 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v7, v8);
v10 = virtualinvoke v9.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHPullRequest;");
v11 = virtualinvoke v10.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHPullRequest wrapUp(org.kohsuke.github.GHRepository)>(v0);
return v11;
}
public java.util.List getPullRequests(org.kohsuke.github.GHIssueState) throws java.io.IOException
{
java.util.List v5;
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.PagedIterable v4;
org.kohsuke.github.GHPullRequestQueryBuilder v2, v3;
org.kohsuke.github.GHIssueState v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHIssueState;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHPullRequestQueryBuilder queryPullRequests()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GHPullRequestQueryBuilder: org.kohsuke.github.GHPullRequestQueryBuilder state(org.kohsuke.github.GHIssueState)>(v1);
v4 = virtualinvoke v3.<org.kohsuke.github.GHPullRequestQueryBuilder: org.kohsuke.github.PagedIterable list()>();
v5 = virtualinvoke v4.<org.kohsuke.github.PagedIterable: java.util.List toList()>();
return v5;
}
public org.kohsuke.github.PagedIterable listPullRequests(org.kohsuke.github.GHIssueState)
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.PagedIterable v4;
org.kohsuke.github.GHPullRequestQueryBuilder v2, v3;
org.kohsuke.github.GHIssueState v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHIssueState;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHPullRequestQueryBuilder queryPullRequests()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GHPullRequestQueryBuilder: org.kohsuke.github.GHPullRequestQueryBuilder state(org.kohsuke.github.GHIssueState)>(v1);
v4 = virtualinvoke v3.<org.kohsuke.github.GHPullRequestQueryBuilder: org.kohsuke.github.PagedIterable list()>();
return v4;
}
public org.kohsuke.github.GHPullRequestQueryBuilder queryPullRequests()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHPullRequestQueryBuilder v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new org.kohsuke.github.GHPullRequestQueryBuilder;
specialinvoke v1.<org.kohsuke.github.GHPullRequestQueryBuilder: void <init>(org.kohsuke.github.GHRepository)>(v0);
return v1;
}
public org.kohsuke.github.GHPullRequest createPullRequest(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v5;
org.kohsuke.github.GHRepository v0;
java.lang.String v1, v2, v3, v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHPullRequest createPullRequest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>(v1, v2, v3, v4, 1);
return v5;
}
public org.kohsuke.github.GHPullRequest createPullRequest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean) throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v6;
org.kohsuke.github.GHRepository v0;
java.lang.String v1, v2, v3, v4;
boolean v5;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: boolean;
v6 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHPullRequest createPullRequest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(v1, v2, v3, v4, v5, 0);
return v6;
}
public org.kohsuke.github.GHPullRequest createPullRequest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v19;
org.kohsuke.github.GitHubRequest$Builder v11, v12, v13, v14, v15, v16, v17, v20, v9;
java.lang.String v1, v18, v2, v3, v4;
org.kohsuke.github.GitHub v7;
boolean v5, v6;
org.kohsuke.github.GHPullRequest v22;
org.kohsuke.github.internal.Previews v10;
java.lang.Object v21;
org.kohsuke.github.Requester v8;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: boolean;
v6 := @parameter5: boolean;
v7 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v8 = virtualinvoke v7.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v9 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v10 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews SHADOW_CAT>;
v11 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v10);
v12 = virtualinvoke v11.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("title", v1);
v13 = virtualinvoke v12.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("head", v2);
v14 = virtualinvoke v13.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("base", v3);
v15 = virtualinvoke v14.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("body", v4);
v16 = virtualinvoke v15.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,boolean)>("maintainer_can_modify", v5);
v17 = virtualinvoke v16.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,boolean)>("draft", v6);
v18 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("pulls");
v19 = newarray (java.lang.String)[0];
v20 = virtualinvoke v17.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v18, v19);
v21 = virtualinvoke v20.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHPullRequest;");
v22 = virtualinvoke v21.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHPullRequest wrapUp(org.kohsuke.github.GHRepository)>(v0);
return v22;
}
public java.util.List getHooks() throws java.io.IOException
{
java.util.List v3;
org.kohsuke.github.GHHooks$Context v2;
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHUser v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHUser owner>;
v2 = staticinvoke <org.kohsuke.github.GHHooks: org.kohsuke.github.GHHooks$Context repoContext(org.kohsuke.github.GHRepository,org.kohsuke.github.GHUser)>(v0, v1);
v3 = virtualinvoke v2.<org.kohsuke.github.GHHooks$Context: java.util.List getHooks()>();
return v3;
}
public org.kohsuke.github.GHHook getHook(int) throws java.io.IOException
{
org.kohsuke.github.GHHooks$Context v3;
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHHook v4;
org.kohsuke.github.GHUser v2;
int v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: int;
v2 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHUser owner>;
v3 = staticinvoke <org.kohsuke.github.GHHooks: org.kohsuke.github.GHHooks$Context repoContext(org.kohsuke.github.GHRepository,org.kohsuke.github.GHUser)>(v0, v2);
v4 = virtualinvoke v3.<org.kohsuke.github.GHHooks$Context: org.kohsuke.github.GHHook getHook(int)>(v1);
return v4;
}
public void deleteHook(int) throws java.io.IOException
{
org.kohsuke.github.GHHooks$Context v3;
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHUser v2;
int v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: int;
v2 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHUser owner>;
v3 = staticinvoke <org.kohsuke.github.GHHooks: org.kohsuke.github.GHHooks$Context repoContext(org.kohsuke.github.GHRepository,org.kohsuke.github.GHUser)>(v0, v2);
virtualinvoke v3.<org.kohsuke.github.GHHooks$Context: void deleteHook(int)>(v1);
return;
}
public void setCompareUsePaginatedCommits(boolean)
{
org.kohsuke.github.GHRepository v0;
boolean v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: boolean;
v0.<org.kohsuke.github.GHRepository: boolean compareUsePaginatedCommits> = v1;
return;
}
public org.kohsuke.github.GHCompare getCompare(java.lang.String, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v5;
java.lang.String[] v8;
org.kohsuke.github.GitHubRequest$Builder v11, v9;
java.lang.Boolean v13;
java.lang.String v1, v2, v6, v7;
org.kohsuke.github.GitHub v3;
boolean v10, v12;
org.kohsuke.github.GHCompare v15;
java.lang.Object v14;
org.kohsuke.github.Requester v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v4 = virtualinvoke v3.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v5 = newarray (java.lang.Object)[2];
v5[0] = v1;
v5[1] = v2;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("compare/%s...%s", v5);
v7 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v6);
v8 = newarray (java.lang.String)[0];
v9 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v7, v8);
v10 = v0.<org.kohsuke.github.GHRepository: boolean compareUsePaginatedCommits>;
if v10 == 0 goto label1;
v11 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,int)>("per_page", 1);
virtualinvoke v11.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,int)>("page", 1);
label1:
v12 = v0.<org.kohsuke.github.GHRepository: boolean compareUsePaginatedCommits>;
v13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v12);
virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder injectMappingValue(java.lang.String,java.lang.Object)>("GHCompare_usePaginatedCommits", v13);
v14 = virtualinvoke v9.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHCompare;");
v15 = virtualinvoke v14.<org.kohsuke.github.GHCompare: org.kohsuke.github.GHCompare lateBind(org.kohsuke.github.GHRepository)>(v0);
return v15;
}
public org.kohsuke.github.GHCompare getCompare(org.kohsuke.github.GHCommit, org.kohsuke.github.GHCommit) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHCompare v5;
java.lang.String v3, v4;
org.kohsuke.github.GHCommit v1, v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHCommit;
v2 := @parameter1: org.kohsuke.github.GHCommit;
v3 = virtualinvoke v1.<org.kohsuke.github.GHCommit: java.lang.String getSHA1()>();
v4 = virtualinvoke v2.<org.kohsuke.github.GHCommit: java.lang.String getSHA1()>();
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHCompare getCompare(java.lang.String,java.lang.String)>(v3, v4);
return v5;
}
public org.kohsuke.github.GHCompare getCompare(org.kohsuke.github.GHBranch, org.kohsuke.github.GHBranch) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0, v3, v4;
java.lang.Object[] v11, v8;
org.kohsuke.github.GHBranch v1, v2;
java.lang.String v10, v12, v13, v15, v16, v5, v6, v9;
boolean v7;
org.kohsuke.github.GHCompare v14, v17;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHBranch;
v2 := @parameter1: org.kohsuke.github.GHBranch;
v3 = virtualinvoke v1.<org.kohsuke.github.GHBranch: org.kohsuke.github.GHRepository getOwner()>();
v4 = virtualinvoke v2.<org.kohsuke.github.GHBranch: org.kohsuke.github.GHRepository getOwner()>();
if v3 == null goto label1;
if v4 == null goto label1;
v5 = virtualinvoke v3.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v6 = virtualinvoke v4.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(v5, v6);
if v7 != 0 goto label1;
v8 = newarray (java.lang.Object)[2];
v8[0] = v5;
v9 = virtualinvoke v1.<org.kohsuke.github.GHBranch: java.lang.String getName()>();
v8[1] = v9;
v10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%s", v8);
v11 = newarray (java.lang.Object)[2];
v11[0] = v6;
v12 = virtualinvoke v2.<org.kohsuke.github.GHBranch: java.lang.String getName()>();
v11[1] = v12;
v13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%s", v11);
v14 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHCompare getCompare(java.lang.String,java.lang.String)>(v10, v13);
return v14;
label1:
v15 = virtualinvoke v1.<org.kohsuke.github.GHBranch: java.lang.String getName()>();
v16 = virtualinvoke v2.<org.kohsuke.github.GHBranch: java.lang.String getName()>();
v17 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHCompare getCompare(java.lang.String,java.lang.String)>(v15, v16);
return v17;
}
public org.kohsuke.github.GHRef[] getRefs() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v2;
org.kohsuke.github.PagedIterable v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.PagedIterable listRefs()>();
v2 = virtualinvoke v1.<org.kohsuke.github.PagedIterable: java.lang.Object[] toArray()>();
return v2;
}
public org.kohsuke.github.PagedIterable listRefs() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.PagedIterable v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.PagedIterable listRefs(java.lang.String)>("");
return v1;
}
public org.kohsuke.github.GHRef[] getRefs(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v3;
java.lang.String v1;
org.kohsuke.github.PagedIterable v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.PagedIterable listRefs(java.lang.String)>(v1);
v3 = virtualinvoke v2.<org.kohsuke.github.PagedIterable: java.lang.Object[] toArray()>();
return v3;
}
public org.kohsuke.github.PagedIterable listRefs(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
org.kohsuke.github.PagedIterable v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <org.kohsuke.github.GHRef: org.kohsuke.github.PagedIterable readMatching(org.kohsuke.github.GHRepository,java.lang.String)>(v0, v1);
return v2;
}
public org.kohsuke.github.GHRef getRef(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
org.kohsuke.github.GHRef v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <org.kohsuke.github.GHRef: org.kohsuke.github.GHRef read(org.kohsuke.github.GHRepository,java.lang.String)>(v0, v1);
return v2;
}
public org.kohsuke.github.GHTagObject getTagObject(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHTagObject v9;
java.lang.String[] v6;
org.kohsuke.github.GitHubRequest$Builder v7;
java.lang.Object v8;
java.lang.String v1, v4, v5;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("git/tags/\u0001");
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v4);
v6 = newarray (java.lang.String)[0];
v7 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v6);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHTagObject;");
v9 = virtualinvoke v8.<org.kohsuke.github.GHTagObject: org.kohsuke.github.GHTagObject wrap(org.kohsuke.github.GHRepository)>(v0);
return v9;
}
public org.kohsuke.github.GHTree getTree(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v2;
java.lang.String[] v8;
org.kohsuke.github.GitHubRequest$Builder v9;
java.lang.Object v10;
java.lang.String v1, v3, v4, v5;
org.kohsuke.github.GHTree v11;
org.kohsuke.github.Requester v7;
org.kohsuke.github.GitHub v6;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = newarray (java.lang.Object)[3];
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v2[0] = v3;
v4 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
v2[1] = v4;
v2[2] = v1;
v5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/repos/%s/%s/git/trees/%s", v2);
v6 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v7 = virtualinvoke v6.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v8 = newarray (java.lang.String)[0];
v9 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v8);
v10 = virtualinvoke v9.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHTree;");
v11 = virtualinvoke v10.<org.kohsuke.github.GHTree: org.kohsuke.github.GHTree wrap(org.kohsuke.github.GHRepository)>(v0);
return v11;
}
public org.kohsuke.github.GHTreeBuilder createTree()
{
org.kohsuke.github.GHTreeBuilder v1;
org.kohsuke.github.GHRepository v0;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new org.kohsuke.github.GHTreeBuilder;
specialinvoke v1.<org.kohsuke.github.GHTreeBuilder: void <init>(org.kohsuke.github.GHRepository)>(v0);
return v1;
}
public org.kohsuke.github.GHTree getTreeRecursive(java.lang.String, int) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v3;
java.lang.String[] v10;
org.kohsuke.github.GitHubRequest$Builder v11, v9;
int v2;
java.lang.Object v12;
java.lang.String v1, v4, v5, v6;
org.kohsuke.github.GHTree v13;
org.kohsuke.github.Requester v8;
org.kohsuke.github.GitHub v7;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = newarray (java.lang.Object)[3];
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v3[0] = v4;
v5 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
v3[1] = v5;
v3[2] = v1;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/repos/%s/%s/git/trees/%s", v3);
v7 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v8 = virtualinvoke v7.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v9 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,int)>("recursive", v2);
v10 = newarray (java.lang.String)[0];
v11 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v6, v10);
v12 = virtualinvoke v11.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHTree;");
v13 = virtualinvoke v12.<org.kohsuke.github.GHTree: org.kohsuke.github.GHTree wrap(org.kohsuke.github.GHRepository)>(v0);
return v13;
}
public org.kohsuke.github.GHBlob getBlob(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v6;
org.kohsuke.github.GitHubRequest$Builder v7;
java.lang.Object v8;
java.lang.String v1, v2, v3;
org.kohsuke.github.Requester v5;
org.kohsuke.github.GitHub v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("git/blobs/\u0001");
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v2);
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v5 = virtualinvoke v4.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v6 = newarray (java.lang.String)[0];
v7 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v3, v6);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHBlob;");
return v8;
}
public org.kohsuke.github.GHBlobBuilder createBlob()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHBlobBuilder v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new org.kohsuke.github.GHBlobBuilder;
specialinvoke v1.<org.kohsuke.github.GHBlobBuilder: void <init>(org.kohsuke.github.GHRepository)>(v0);
return v1;
}
public java.io.InputStream readBlob(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.function.InputStreamFunction v9;
org.kohsuke.github.GHRepository v0;
java.lang.String[] v7;
org.kohsuke.github.GitHubRequest$Builder v6, v8;
java.lang.Object v10;
java.lang.String v1, v2, v3;
org.kohsuke.github.Requester v5;
org.kohsuke.github.GitHub v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("git/blobs/\u0001");
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v2);
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v5 = virtualinvoke v4.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withHeader(java.lang.String,java.lang.String)>("Accept", "application/vnd.github.v3.raw");
v7 = newarray (java.lang.String)[0];
v8 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v3, v7);
v9 = staticinvoke <org.kohsuke.github.GHRepository$copyInputStream__3318: org.kohsuke.github.function.InputStreamFunction bootstrap$()>();
v10 = virtualinvoke v8.<org.kohsuke.github.Requester: java.lang.Object fetchStream(org.kohsuke.github.function.InputStreamFunction)>(v9);
return v10;
}
public org.kohsuke.github.GHCommit getCommit(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v6;
java.lang.String[] v10;
org.kohsuke.github.GitHubRequest$Builder v11;
java.util.Map v13, v2;
java.lang.Object v12, v3;
java.lang.String v1, v7, v8, v9;
org.kohsuke.github.Requester v5;
org.kohsuke.github.GitHub v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.kohsuke.github.GHRepository: java.util.Map commits>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 != null goto label1;
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v5 = virtualinvoke v4.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v6 = newarray (java.lang.Object)[3];
v7 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v6[0] = v7;
v8 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
v6[1] = v8;
v6[2] = v1;
v9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/repos/%s/%s/commits/%s", v6);
v10 = newarray (java.lang.String)[0];
v11 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v9, v10);
v12 = virtualinvoke v11.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHCommit;");
v3 = virtualinvoke v12.<org.kohsuke.github.GHCommit: org.kohsuke.github.GHCommit wrapUp(org.kohsuke.github.GHRepository)>(v0);
v13 = v0.<org.kohsuke.github.GHRepository: java.util.Map commits>;
interfaceinvoke v13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v3);
label1:
return v3;
}
public org.kohsuke.github.GHCommitBuilder createCommit()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHCommitBuilder v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new org.kohsuke.github.GHCommitBuilder;
specialinvoke v1.<org.kohsuke.github.GHCommitBuilder: void <init>(org.kohsuke.github.GHRepository)>(v0);
return v1;
}
public org.kohsuke.github.PagedIterable listCommits()
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v3;
java.lang.String[] v7;
org.kohsuke.github.GitHubRequest$Builder v8;
java.util.function.Consumer v9;
java.lang.String v4, v5, v6;
org.kohsuke.github.Requester v2;
org.kohsuke.github.PagedIterable v10;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = newarray (java.lang.Object)[2];
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v3[0] = v4;
v5 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
v3[1] = v5;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/repos/%s/%s/commits", v3);
v7 = newarray (java.lang.String)[0];
v8 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v6, v7);
v9 = staticinvoke <org.kohsuke.github.GHRepository$lambda_listCommits_5__3319: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHRepository)>(v0);
v10 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHCommit;", v9);
return v10;
}
public org.kohsuke.github.GHCommitQueryBuilder queryCommits()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHCommitQueryBuilder v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new org.kohsuke.github.GHCommitQueryBuilder;
specialinvoke v1.<org.kohsuke.github.GHCommitQueryBuilder: void <init>(org.kohsuke.github.GHRepository)>(v0);
return v1;
}
public org.kohsuke.github.PagedIterable listCommitComments()
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v3;
java.lang.String[] v7;
org.kohsuke.github.GitHubRequest$Builder v8;
java.util.function.Consumer v9;
java.lang.String v4, v5, v6;
org.kohsuke.github.Requester v2;
org.kohsuke.github.PagedIterable v10;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = newarray (java.lang.Object)[2];
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v3[0] = v4;
v5 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
v3[1] = v5;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/repos/%s/%s/comments", v3);
v7 = newarray (java.lang.String)[0];
v8 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v6, v7);
v9 = staticinvoke <org.kohsuke.github.GHRepository$lambda_listCommitComments_6__3320: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHRepository)>(v0);
v10 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHCommitComment;", v9);
return v10;
}
public org.kohsuke.github.PagedIterable listCommitComments(java.lang.String)
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v4;
java.lang.String[] v8;
org.kohsuke.github.GitHubRequest$Builder v9;
java.util.function.Consumer v10;
java.lang.String v1, v5, v6, v7;
org.kohsuke.github.Requester v3;
org.kohsuke.github.PagedIterable v11;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = newarray (java.lang.Object)[3];
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v4[0] = v5;
v6 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
v4[1] = v6;
v4[2] = v1;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/repos/%s/%s/commits/%s/comments", v4);
v8 = newarray (java.lang.String)[0];
v9 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v7, v8);
v10 = staticinvoke <org.kohsuke.github.GHRepository$lambda_listCommitComments_7__3321: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHRepository)>(v0);
v11 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHCommitComment;", v10);
return v11;
}
public org.kohsuke.github.GHLicense getLicense() throws java.io.IOException
{
org.kohsuke.github.GHContentWithLicense v1;
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHLicense v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = specialinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHContentWithLicense getLicenseContent_()>();
if v1 == null goto label1;
v2 = v1.<org.kohsuke.github.GHContentWithLicense: org.kohsuke.github.GHLicense license>;
goto label2;
label1:
v2 = null;
label2:
return v2;
}
public org.kohsuke.github.GHContent getLicenseContent() throws java.io.IOException
{
org.kohsuke.github.GHContentWithLicense v1;
org.kohsuke.github.GHRepository v0;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = specialinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHContentWithLicense getLicenseContent_()>();
return v1;
}
private org.kohsuke.github.GHContentWithLicense getLicenseContent_() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v4;
org.kohsuke.github.GitHubRequest$Builder v5;
java.io.FileNotFoundException v8;
org.kohsuke.github.GHContentWithLicense v7;
java.lang.Object v6;
java.lang.String v3;
org.kohsuke.github.Requester v2;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
label1:
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("license");
v4 = newarray (java.lang.String)[0];
v5 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v3, v4);
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHContentWithLicense;");
v7 = virtualinvoke v6.<org.kohsuke.github.GHContentWithLicense: org.kohsuke.github.GHContentWithLicense wrap(org.kohsuke.github.GHRepository)>(v0);
label2:
return v7;
label3:
v8 := @caughtexception;
return null;
catch java.io.FileNotFoundException from label1 to label2 with label3;
}
public org.kohsuke.github.PagedIterable listCommitStatuses(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v4;
java.lang.String[] v8;
org.kohsuke.github.GitHubRequest$Builder v9;
java.lang.String v1, v5, v6, v7;
org.kohsuke.github.Requester v3;
org.kohsuke.github.PagedIterable v10;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = newarray (java.lang.Object)[3];
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v4[0] = v5;
v6 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
v4[1] = v6;
v4[2] = v1;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/repos/%s/%s/statuses/%s", v4);
v8 = newarray (java.lang.String)[0];
v9 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v7, v8);
v10 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHCommitStatus;", null);
return v10;
}
public org.kohsuke.github.GHCommitStatus getLastCommitStatus(java.lang.String) throws java.io.IOException
{
java.util.List v3;
org.kohsuke.github.GHRepository v0;
java.lang.Object v5;
java.lang.String v1;
org.kohsuke.github.PagedIterable v2;
boolean v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.PagedIterable listCommitStatuses(java.lang.String)>(v1);
v3 = virtualinvoke v2.<org.kohsuke.github.PagedIterable: java.util.List toList()>();
v4 = interfaceinvoke v3.<java.util.List: boolean isEmpty()>();
if v4 != 0 goto label1;
v5 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(0);
label1:
return v5;
}
public org.kohsuke.github.PagedIterable getCheckRuns(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v4;
org.kohsuke.github.GHCheckRunsIterable v13;
org.kohsuke.github.internal.Previews v10;
java.lang.String[] v8;
org.kohsuke.github.GitHubRequest$Builder v11, v9;
org.kohsuke.github.GitHubRequest v12;
java.lang.String v1, v5, v6, v7;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = newarray (java.lang.Object)[3];
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v4[0] = v5;
v6 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
v4[1] = v6;
v4[2] = v1;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/repos/%s/%s/commits/%s/check-runs", v4);
v8 = newarray (java.lang.String)[0];
v9 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v7, v8);
v10 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews ANTIOPE>;
v11 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v10);
v12 = virtualinvoke v11.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest build()>();
v13 = new org.kohsuke.github.GHCheckRunsIterable;
specialinvoke v13.<org.kohsuke.github.GHCheckRunsIterable: void <init>(org.kohsuke.github.GHRepository,org.kohsuke.github.GitHubRequest)>(v0, v12);
return v13;
}
public org.kohsuke.github.PagedIterable getCheckRuns(java.lang.String, java.util.Map) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v5;
org.kohsuke.github.GHCheckRunsIterable v15;
java.lang.String[] v9;
org.kohsuke.github.GitHubRequest$Builder v10, v11, v13;
java.util.Map v2;
java.lang.String v1, v6, v7, v8;
org.kohsuke.github.GitHub v3;
org.kohsuke.github.internal.Previews v12;
org.kohsuke.github.GitHubRequest v14;
org.kohsuke.github.Requester v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.util.Map;
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v4 = virtualinvoke v3.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v5 = newarray (java.lang.Object)[3];
v6 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v5[0] = v6;
v7 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
v5[1] = v7;
v5[2] = v1;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/repos/%s/%s/commits/%s/check-runs", v5);
v9 = newarray (java.lang.String)[0];
v10 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v8, v9);
v11 = virtualinvoke v10.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.util.Map)>(v2);
v12 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews ANTIOPE>;
v13 = virtualinvoke v11.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v12);
v14 = virtualinvoke v13.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest build()>();
v15 = new org.kohsuke.github.GHCheckRunsIterable;
specialinvoke v15.<org.kohsuke.github.GHCheckRunsIterable: void <init>(org.kohsuke.github.GHRepository,org.kohsuke.github.GitHubRequest)>(v0, v14);
return v15;
}
public org.kohsuke.github.GHCommitStatus createCommitStatus(java.lang.String, org.kohsuke.github.GHCommitState, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHCommitState v2;
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v13;
java.lang.String[] v17;
org.kohsuke.github.GitHubRequest$Builder v10, v11, v12, v18, v8, v9;
java.lang.String v1, v14, v15, v16, v3, v4, v5;
org.kohsuke.github.GitHub v6;
java.lang.Object v19;
org.kohsuke.github.Requester v7;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.kohsuke.github.GHCommitState;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: java.lang.String;
v6 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v7 = virtualinvoke v6.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v9 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Enum)>("state", v2);
v10 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("target_url", v3);
v11 = virtualinvoke v10.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("description", v4);
v12 = virtualinvoke v11.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("context", v5);
v13 = newarray (java.lang.Object)[3];
v14 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v13[0] = v14;
v15 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
v13[1] = v15;
v13[2] = v1;
v16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/repos/%s/%s/statuses/%s", v13);
v17 = newarray (java.lang.String)[0];
v18 = virtualinvoke v12.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v16, v17);
v19 = virtualinvoke v18.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHCommitStatus;");
return v19;
}
public org.kohsuke.github.GHCommitStatus createCommitStatus(java.lang.String, org.kohsuke.github.GHCommitState, java.lang.String, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHCommitState v2;
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHCommitStatus v5;
java.lang.String v1, v3, v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.kohsuke.github.GHCommitState;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHCommitStatus createCommitStatus(java.lang.String,org.kohsuke.github.GHCommitState,java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3, v4, null);
return v5;
}
public org.kohsuke.github.GHCheckRunBuilder createCheckRun(java.lang.String, java.lang.String)
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHCheckRunBuilder v3;
java.lang.String v1, v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = new org.kohsuke.github.GHCheckRunBuilder;
specialinvoke v3.<org.kohsuke.github.GHCheckRunBuilder: void <init>(org.kohsuke.github.GHRepository,java.lang.String,java.lang.String)>(v0, v1, v2);
return v3;
}
public org.kohsuke.github.GHCheckRunBuilder updateCheckRun(long)
{
long v1;
org.kohsuke.github.GHCheckRunBuilder v2;
org.kohsuke.github.GHRepository v0;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: long;
v2 = new org.kohsuke.github.GHCheckRunBuilder;
specialinvoke v2.<org.kohsuke.github.GHCheckRunBuilder: void <init>(org.kohsuke.github.GHRepository,long)>(v0, v1);
return v2;
}
public org.kohsuke.github.PagedIterable listEvents() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v3;
java.lang.String[] v7;
org.kohsuke.github.GitHubRequest$Builder v8;
java.lang.String v4, v5, v6;
org.kohsuke.github.Requester v2;
org.kohsuke.github.PagedIterable v9;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = newarray (java.lang.Object)[2];
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v3[0] = v4;
v5 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
v3[1] = v5;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/repos/%s/%s/events", v3);
v7 = newarray (java.lang.String)[0];
v8 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v6, v7);
v9 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHEventInfo;", null);
return v9;
}
public org.kohsuke.github.PagedIterable listLabels() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.PagedIterable v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = staticinvoke <org.kohsuke.github.GHLabel: org.kohsuke.github.PagedIterable readAll(org.kohsuke.github.GHRepository)>(v0);
return v1;
}
public org.kohsuke.github.GHLabel getLabel(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
org.kohsuke.github.GHLabel v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <org.kohsuke.github.GHLabel: org.kohsuke.github.GHLabel read(org.kohsuke.github.GHRepository,java.lang.String)>(v0, v1);
return v2;
}
public org.kohsuke.github.GHLabel createLabel(java.lang.String, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHLabel$Creator v3;
java.lang.Object v4, v5, v6, v7;
java.lang.String v1, v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <org.kohsuke.github.GHLabel: org.kohsuke.github.GHLabel$Creator create(org.kohsuke.github.GHRepository)>(v0);
v4 = virtualinvoke v3.<org.kohsuke.github.GHLabel$Creator: java.lang.Object name(java.lang.String)>(v1);
v5 = virtualinvoke v4.<org.kohsuke.github.GHLabel$Creator: java.lang.Object color(java.lang.String)>(v2);
v6 = virtualinvoke v5.<org.kohsuke.github.GHLabel$Creator: java.lang.Object description(java.lang.String)>("");
v7 = virtualinvoke v6.<org.kohsuke.github.GHLabel$Creator: java.lang.Object done()>();
return v7;
}
public org.kohsuke.github.GHLabel createLabel(java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHLabel$Creator v4;
java.lang.Object v5, v6, v7, v8;
java.lang.String v1, v2, v3;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = staticinvoke <org.kohsuke.github.GHLabel: org.kohsuke.github.GHLabel$Creator create(org.kohsuke.github.GHRepository)>(v0);
v5 = virtualinvoke v4.<org.kohsuke.github.GHLabel$Creator: java.lang.Object name(java.lang.String)>(v1);
v6 = virtualinvoke v5.<org.kohsuke.github.GHLabel$Creator: java.lang.Object color(java.lang.String)>(v2);
v7 = virtualinvoke v6.<org.kohsuke.github.GHLabel$Creator: java.lang.Object description(java.lang.String)>(v3);
v8 = virtualinvoke v7.<org.kohsuke.github.GHLabel$Creator: java.lang.Object done()>();
return v8;
}
public org.kohsuke.github.PagedIterable listInvitations()
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v3;
java.lang.String[] v7;
org.kohsuke.github.GitHubRequest$Builder v8;
java.lang.String v4, v5, v6;
org.kohsuke.github.Requester v2;
org.kohsuke.github.PagedIterable v9;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = newarray (java.lang.Object)[2];
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v3[0] = v4;
v5 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
v3[1] = v5;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/repos/%s/%s/invitations", v3);
v7 = newarray (java.lang.String)[0];
v8 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v6, v7);
v9 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHInvitation;", null);
return v9;
}
public org.kohsuke.github.PagedIterable listSubscribers()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.PagedIterable v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = specialinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.PagedIterable listUsers(java.lang.String)>("subscribers");
return v1;
}
public org.kohsuke.github.PagedIterable listStargazers()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.PagedIterable v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = specialinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.PagedIterable listUsers(java.lang.String)>("stargazers");
return v1;
}
public org.kohsuke.github.PagedIterable listStargazers2()
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v5;
org.kohsuke.github.GitHubRequest$Builder v3, v6;
java.util.function.Consumer v7;
java.lang.String v4;
org.kohsuke.github.Requester v2;
org.kohsuke.github.PagedIterable v8;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(java.lang.String)>("application/vnd.github.v3.star+json");
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("stargazers");
v5 = newarray (java.lang.String)[0];
v6 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v4, v5);
v7 = staticinvoke <org.kohsuke.github.GHRepository$lambda_listStargazers2_8__3322: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHRepository)>(v0);
v8 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHStargazer;", v7);
return v8;
}
private org.kohsuke.github.PagedIterable listUsers(java.lang.String)
{
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
org.kohsuke.github.Requester v3;
org.kohsuke.github.PagedIterable v4;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = specialinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.PagedIterable listUsers(org.kohsuke.github.Requester,java.lang.String)>(v3, v1);
return v4;
}
private org.kohsuke.github.PagedIterable listUsers(org.kohsuke.github.Requester, java.lang.String)
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v4;
java.lang.String v2, v3;
org.kohsuke.github.GitHubRequest$Builder v5;
org.kohsuke.github.Requester v1;
org.kohsuke.github.PagedIterable v6;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.Requester;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v2);
v4 = newarray (java.lang.String)[0];
v5 = virtualinvoke v1.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v3, v4);
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHUser;", null);
return v6;
}
public org.kohsuke.github.GHHook createHook(java.lang.String, java.util.Map, java.util.Collection, boolean) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.util.Collection v3;
org.kohsuke.github.GHHooks$Context v6;
org.kohsuke.github.GHHook v7;
org.kohsuke.github.GHUser v5;
java.util.Map v2;
java.lang.String v1;
boolean v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.util.Map;
v3 := @parameter2: java.util.Collection;
v4 := @parameter3: boolean;
v5 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHUser owner>;
v6 = staticinvoke <org.kohsuke.github.GHHooks: org.kohsuke.github.GHHooks$Context repoContext(org.kohsuke.github.GHRepository,org.kohsuke.github.GHUser)>(v0, v5);
v7 = virtualinvoke v6.<org.kohsuke.github.GHHooks$Context: org.kohsuke.github.GHHook createHook(java.lang.String,java.util.Map,java.util.Collection,boolean)>(v1, v2, v3, v4);
return v7;
}
public org.kohsuke.github.GHHook createWebHook(java.net.URL, java.util.Collection) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHHook v5;
java.net.URL v1;
java.util.Collection v2;
java.util.Map v4;
java.lang.String v3;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.net.URL;
v2 := @parameter1: java.util.Collection;
v3 = virtualinvoke v1.<java.net.URL: java.lang.String toExternalForm()>();
v4 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("url", v3);
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHHook createHook(java.lang.String,java.util.Map,java.util.Collection,boolean)>("web", v4, v2, 1);
return v5;
}
public org.kohsuke.github.GHHook createWebHook(java.net.URL) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHHook v2;
java.net.URL v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.net.URL;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHHook createWebHook(java.net.URL,java.util.Collection)>(v1, null);
return v2;
}
public java.util.Set getPostCommitHooks()
{
java.lang.Throwable v4;
org.kohsuke.github.GHRepository v0;
java.util.Set v1, v2, v3;
v0 := @this: org.kohsuke.github.GHRepository;
entermonitor v0;
label1:
v1 = v0.<org.kohsuke.github.GHRepository: java.util.Set postCommitHooks>;
if v1 != null goto label2;
v2 = specialinvoke v0.<org.kohsuke.github.GHRepository: java.util.Set setupPostCommitHooks()>();
v0.<org.kohsuke.github.GHRepository: java.util.Set postCommitHooks> = v2;
label2:
v3 = v0.<org.kohsuke.github.GHRepository: java.util.Set postCommitHooks>;
exitmonitor v0;
label3:
return v3;
label4:
v4 := @caughtexception;
exitmonitor v0;
throw v4;
catch java.lang.Throwable from label1 to label3 with label4;
}
private java.util.Set setupPostCommitHooks()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHRepository$1 v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new org.kohsuke.github.GHRepository$1;
specialinvoke v1.<org.kohsuke.github.GHRepository$1: void <init>(org.kohsuke.github.GHRepository)>(v0);
return v1;
}
public java.util.Map getBranches() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v9;
java.lang.String[] v5;
org.kohsuke.github.GitHubRequest$Builder v6;
java.util.function.Consumer v7;
org.kohsuke.github.GHBranch v12;
java.util.TreeMap v1;
int v10, v11;
java.lang.String v13, v4;
org.kohsuke.github.Requester v3;
org.kohsuke.github.PagedIterable v8;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new java.util.TreeMap;
specialinvoke v1.<java.util.TreeMap: void <init>()>();
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("branches");
v5 = newarray (java.lang.String)[0];
v6 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v4, v5);
v7 = staticinvoke <org.kohsuke.github.GHRepository$lambda_getBranches_9__3323: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHRepository)>(v0);
v8 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHBranch;", v7);
v9 = virtualinvoke v8.<org.kohsuke.github.PagedIterable: java.lang.Object[] toArray()>();
v10 = lengthof v9;
v11 = 0;
label1:
if v11 >= v10 goto label2;
v12 = v9[v11];
v13 = virtualinvoke v12.<org.kohsuke.github.GHBranch: java.lang.String getName()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v13, v12);
v11 = v11 + 1;
goto label1;
label2:
return v1;
}
public org.kohsuke.github.GHBranch getBranch(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v6;
org.kohsuke.github.GitHubRequest$Builder v7;
org.kohsuke.github.GHBranch v9;
java.lang.Object v8;
java.lang.String v1, v4, v5;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("branches/\u0001");
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v4);
v6 = newarray (java.lang.String)[0];
v7 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v6);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHBranch;");
v9 = virtualinvoke v8.<org.kohsuke.github.GHBranch: org.kohsuke.github.GHBranch wrap(org.kohsuke.github.GHRepository)>(v0);
return v9;
}
public java.util.Map getMilestones() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.Integer v8;
java.util.TreeMap v1;
int v7;
java.lang.Object v6;
org.kohsuke.github.PagedIterator v4;
org.kohsuke.github.PagedIterable v3;
boolean v5;
org.kohsuke.github.GHIssueState v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new java.util.TreeMap;
specialinvoke v1.<java.util.TreeMap: void <init>()>();
v2 = <org.kohsuke.github.GHIssueState: org.kohsuke.github.GHIssueState OPEN>;
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.PagedIterable listMilestones(org.kohsuke.github.GHIssueState)>(v2);
v4 = virtualinvoke v3.<org.kohsuke.github.PagedIterable: org.kohsuke.github.PagedIterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<org.kohsuke.github.GHMilestone: int getNumber()>();
v8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v7);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v8, v6);
goto label1;
label2:
return v1;
}
public org.kohsuke.github.PagedIterable listMilestones(org.kohsuke.github.GHIssueState)
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v6;
org.kohsuke.github.GitHubRequest$Builder v4, v7;
java.util.function.Consumer v8;
java.lang.String v5;
org.kohsuke.github.Requester v3;
org.kohsuke.github.PagedIterable v9;
org.kohsuke.github.GitHub v2;
org.kohsuke.github.GHIssueState v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHIssueState;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Enum)>("state", v1);
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("milestones");
v6 = newarray (java.lang.String)[0];
v7 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v6);
v8 = staticinvoke <org.kohsuke.github.GHRepository$lambda_listMilestones_10__3324: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHRepository)>(v0);
v9 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHMilestone;", v8);
return v9;
}
public org.kohsuke.github.GHMilestone getMilestone(int) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v9;
org.kohsuke.github.GitHubRequest$Builder v10;
java.lang.Integer v13, v3;
java.util.Map v11, v2;
int v1, v12;
java.lang.Object v4;
java.lang.String v7, v8;
org.kohsuke.github.Requester v6;
org.kohsuke.github.GitHub v5;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: int;
v2 = v0.<org.kohsuke.github.GHRepository: java.util.Map milestones>;
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
if v4 != null goto label1;
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v6 = virtualinvoke v5.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("milestones/\u0001");
v8 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v7);
v9 = newarray (java.lang.String)[0];
v10 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v8, v9);
virtualinvoke v10.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHMilestone;");
v4.<org.kohsuke.github.GHMilestone: org.kohsuke.github.GHRepository owner> = v0;
v11 = v0.<org.kohsuke.github.GHRepository: java.util.Map milestones>;
v12 = virtualinvoke v4.<org.kohsuke.github.GHMilestone: int getNumber()>();
v13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v12);
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v13, v4);
label1:
return v4;
}
public org.kohsuke.github.GHContent getFileContent(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHContent v2;
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHContent getFileContent(java.lang.String,java.lang.String)>(v1, null);
return v2;
}
public org.kohsuke.github.GHContent getFileContent(java.lang.String, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHContent v11;
org.kohsuke.github.GHRepository v0;
java.lang.String[] v8;
org.kohsuke.github.GitHubRequest$Builder v7, v9;
java.lang.Object v10;
java.lang.String v1, v2, v5, v6;
org.kohsuke.github.Requester v4;
org.kohsuke.github.GitHub v3;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v4 = virtualinvoke v3.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("contents/\u0001");
v6 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v5);
v7 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("ref", v2);
v8 = newarray (java.lang.String)[0];
v9 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v6, v8);
v10 = virtualinvoke v9.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHContent;");
v11 = virtualinvoke v10.<org.kohsuke.github.GHContent: org.kohsuke.github.GHContent wrap(org.kohsuke.github.GHRepository)>(v0);
return v11;
}
public java.util.List getDirectoryContent(java.lang.String) throws java.io.IOException
{
java.util.List v2;
org.kohsuke.github.GHRepository v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.util.List getDirectoryContent(java.lang.String,java.lang.String)>(v1, null);
return v2;
}
public java.util.List getDirectoryContent(java.lang.String, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v11;
org.kohsuke.github.GitHubRequest$Builder v10, v12;
int v6, v7;
java.lang.String v1, v2, v8, v9;
org.kohsuke.github.PagedIterable v14;
org.kohsuke.github.GitHub v3;
boolean v5;
java.util.function.Consumer v13;
java.util.List v15;
org.kohsuke.github.Requester v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v4 = virtualinvoke v3.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
label1:
v5 = virtualinvoke v1.<java.lang.String: boolean endsWith(java.lang.String)>("/");
if v5 == 0 goto label2;
v6 = virtualinvoke v1.<java.lang.String: int length()>();
v7 = v6 - 1;
v1 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, v7);
goto label1;
label2:
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("contents/\u0001");
v9 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v8);
v10 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("ref", v2);
v11 = newarray (java.lang.String)[0];
v12 = virtualinvoke v10.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v9, v11);
v13 = staticinvoke <org.kohsuke.github.GHRepository$lambda_getDirectoryContent_11__3325: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHRepository)>(v0);
v14 = virtualinvoke v12.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHContent;", v13);
v15 = virtualinvoke v14.<org.kohsuke.github.PagedIterable: java.util.List toList()>();
return v15;
}
public org.kohsuke.github.GHContent getReadme() throws java.io.IOException
{
org.kohsuke.github.GHContent v7;
org.kohsuke.github.GHRepository v0;
java.lang.String[] v4;
org.kohsuke.github.GitHubRequest$Builder v5;
java.lang.Object v6;
java.lang.String v3;
org.kohsuke.github.Requester v2;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("readme");
v4 = newarray (java.lang.String)[0];
v5 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v3, v4);
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHContent;");
v7 = virtualinvoke v6.<org.kohsuke.github.GHContent: org.kohsuke.github.GHContent wrap(org.kohsuke.github.GHRepository)>(v0);
return v7;
}
public org.kohsuke.github.GHContentBuilder createContent()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHContentBuilder v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new org.kohsuke.github.GHContentBuilder;
specialinvoke v1.<org.kohsuke.github.GHContentBuilder: void <init>(org.kohsuke.github.GHRepository)>(v0);
return v1;
}
public org.kohsuke.github.GHContentUpdateResponse createContent(java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHContentUpdateResponse v8;
org.kohsuke.github.GHContentBuilder v4, v5, v6, v7;
java.lang.String v1, v2, v3;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHContentBuilder createContent()>();
v5 = virtualinvoke v4.<org.kohsuke.github.GHContentBuilder: org.kohsuke.github.GHContentBuilder content(java.lang.String)>(v1);
v6 = virtualinvoke v5.<org.kohsuke.github.GHContentBuilder: org.kohsuke.github.GHContentBuilder message(java.lang.String)>(v2);
v7 = virtualinvoke v6.<org.kohsuke.github.GHContentBuilder: org.kohsuke.github.GHContentBuilder path(java.lang.String)>(v3);
v8 = virtualinvoke v7.<org.kohsuke.github.GHContentBuilder: org.kohsuke.github.GHContentUpdateResponse commit()>();
return v8;
}
public org.kohsuke.github.GHContentUpdateResponse createContent(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHContentUpdateResponse v10;
org.kohsuke.github.GHContentBuilder v5, v6, v7, v8, v9;
java.lang.String v1, v2, v3, v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHContentBuilder createContent()>();
v6 = virtualinvoke v5.<org.kohsuke.github.GHContentBuilder: org.kohsuke.github.GHContentBuilder content(java.lang.String)>(v1);
v7 = virtualinvoke v6.<org.kohsuke.github.GHContentBuilder: org.kohsuke.github.GHContentBuilder message(java.lang.String)>(v2);
v8 = virtualinvoke v7.<org.kohsuke.github.GHContentBuilder: org.kohsuke.github.GHContentBuilder path(java.lang.String)>(v3);
v9 = virtualinvoke v8.<org.kohsuke.github.GHContentBuilder: org.kohsuke.github.GHContentBuilder branch(java.lang.String)>(v4);
v10 = virtualinvoke v9.<org.kohsuke.github.GHContentBuilder: org.kohsuke.github.GHContentUpdateResponse commit()>();
return v10;
}
public org.kohsuke.github.GHContentUpdateResponse createContent(byte[], java.lang.String, java.lang.String) throws java.io.IOException
{
byte[] v1;
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHContentUpdateResponse v8;
org.kohsuke.github.GHContentBuilder v4, v5, v6, v7;
java.lang.String v2, v3;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: byte[];
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHContentBuilder createContent()>();
v5 = virtualinvoke v4.<org.kohsuke.github.GHContentBuilder: org.kohsuke.github.GHContentBuilder content(byte[])>(v1);
v6 = virtualinvoke v5.<org.kohsuke.github.GHContentBuilder: org.kohsuke.github.GHContentBuilder message(java.lang.String)>(v2);
v7 = virtualinvoke v6.<org.kohsuke.github.GHContentBuilder: org.kohsuke.github.GHContentBuilder path(java.lang.String)>(v3);
v8 = virtualinvoke v7.<org.kohsuke.github.GHContentBuilder: org.kohsuke.github.GHContentUpdateResponse commit()>();
return v8;
}
public org.kohsuke.github.GHContentUpdateResponse createContent(byte[], java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
{
byte[] v1;
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHContentUpdateResponse v10;
org.kohsuke.github.GHContentBuilder v5, v6, v7, v8, v9;
java.lang.String v2, v3, v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: byte[];
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHContentBuilder createContent()>();
v6 = virtualinvoke v5.<org.kohsuke.github.GHContentBuilder: org.kohsuke.github.GHContentBuilder content(byte[])>(v1);
v7 = virtualinvoke v6.<org.kohsuke.github.GHContentBuilder: org.kohsuke.github.GHContentBuilder message(java.lang.String)>(v2);
v8 = virtualinvoke v7.<org.kohsuke.github.GHContentBuilder: org.kohsuke.github.GHContentBuilder path(java.lang.String)>(v3);
v9 = virtualinvoke v8.<org.kohsuke.github.GHContentBuilder: org.kohsuke.github.GHContentBuilder branch(java.lang.String)>(v4);
v10 = virtualinvoke v9.<org.kohsuke.github.GHContentBuilder: org.kohsuke.github.GHContentUpdateResponse commit()>();
return v10;
}
public org.kohsuke.github.GHMilestone createMilestone(java.lang.String, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v9;
org.kohsuke.github.GitHubRequest$Builder v10, v5, v6, v7;
org.kohsuke.github.GHMilestone v12;
java.lang.Object v11;
java.lang.String v1, v2, v8;
org.kohsuke.github.Requester v4;
org.kohsuke.github.GitHub v3;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v4 = virtualinvoke v3.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v5 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("title", v1);
v7 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("description", v2);
v8 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("milestones");
v9 = newarray (java.lang.String)[0];
v10 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v8, v9);
v11 = virtualinvoke v10.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHMilestone;");
v12 = virtualinvoke v11.<org.kohsuke.github.GHMilestone: org.kohsuke.github.GHMilestone lateBind(org.kohsuke.github.GHRepository)>(v0);
return v12;
}
public org.kohsuke.github.GHDeployKey addDeployKey(java.lang.String, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v9;
org.kohsuke.github.GitHubRequest$Builder v10, v5, v6, v7;
org.kohsuke.github.GHDeployKey v12;
java.lang.Object v11;
java.lang.String v1, v2, v8;
org.kohsuke.github.Requester v4;
org.kohsuke.github.GitHub v3;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v4 = virtualinvoke v3.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v5 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("title", v1);
v7 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("key", v2);
v8 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("keys");
v9 = newarray (java.lang.String)[0];
v10 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v8, v9);
v11 = virtualinvoke v10.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHDeployKey;");
v12 = virtualinvoke v11.<org.kohsuke.github.GHDeployKey: org.kohsuke.github.GHDeployKey lateBind(org.kohsuke.github.GHRepository)>(v0);
return v12;
}
public java.util.List getDeployKeys() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v4;
org.kohsuke.github.GitHubRequest$Builder v5;
java.util.function.Consumer v6;
java.util.List v8;
java.lang.String v3;
org.kohsuke.github.Requester v2;
org.kohsuke.github.PagedIterable v7;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("keys");
v4 = newarray (java.lang.String)[0];
v5 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v3, v4);
v6 = staticinvoke <org.kohsuke.github.GHRepository$lambda_getDeployKeys_12__3326: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHRepository)>(v0);
v7 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHDeployKey;", v6);
v8 = virtualinvoke v7.<org.kohsuke.github.PagedIterable: java.util.List toList()>();
return v8;
}
public org.kohsuke.github.GHRepository getSource() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0, v2, v3, v4;
boolean v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: boolean fork>;
if v1 == 0 goto label1;
v2 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository source>;
if v2 != null goto label1;
virtualinvoke v0.<org.kohsuke.github.GHRepository: void populate()>();
label1:
v3 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository source>;
if v3 != null goto label2;
return null;
label2:
v4 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository source>;
return v4;
}
public org.kohsuke.github.GHRepository getParent() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0, v2, v3, v4;
boolean v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = v0.<org.kohsuke.github.GHRepository: boolean fork>;
if v1 == 0 goto label1;
v2 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository parent>;
if v2 != null goto label1;
virtualinvoke v0.<org.kohsuke.github.GHRepository: void populate()>();
label1:
v3 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository parent>;
if v3 != null goto label2;
return null;
label2:
v4 = v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHRepository parent>;
return v4;
}
public org.kohsuke.github.GHSubscription subscribe(boolean, boolean) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v9;
org.kohsuke.github.GitHubRequest$Builder v10, v5, v6, v7;
org.kohsuke.github.GHSubscription v12;
java.lang.Object v11;
java.lang.String v8;
org.kohsuke.github.Requester v4;
org.kohsuke.github.GitHub v3;
boolean v1, v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: boolean;
v2 := @parameter1: boolean;
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v4 = virtualinvoke v3.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v5 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("PUT");
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,boolean)>("subscribed", v1);
v7 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,boolean)>("ignored", v2);
v8 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("subscription");
v9 = newarray (java.lang.String)[0];
v10 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v8, v9);
v11 = virtualinvoke v10.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHSubscription;");
v12 = virtualinvoke v11.<org.kohsuke.github.GHSubscription: org.kohsuke.github.GHSubscription wrapUp(org.kohsuke.github.GHRepository)>(v0);
return v12;
}
public org.kohsuke.github.GHSubscription getSubscription() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v4;
org.kohsuke.github.GitHubRequest$Builder v5;
java.io.FileNotFoundException v8;
org.kohsuke.github.GHSubscription v7;
java.lang.Object v6;
java.lang.String v3;
org.kohsuke.github.Requester v2;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
label1:
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("subscription");
v4 = newarray (java.lang.String)[0];
v5 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v3, v4);
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHSubscription;");
v7 = virtualinvoke v6.<org.kohsuke.github.GHSubscription: org.kohsuke.github.GHSubscription wrapUp(org.kohsuke.github.GHRepository)>(v0);
label2:
return v7;
label3:
v8 := @caughtexception;
return null;
catch java.io.FileNotFoundException from label1 to label2 with label3;
}
public java.util.List listCodeownersErrors() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v4;
org.kohsuke.github.GitHubRequest$Builder v5;
java.util.List v7;
java.lang.Object v6;
java.lang.String v3;
org.kohsuke.github.Requester v2;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("codeowners/errors");
v4 = newarray (java.lang.String)[0];
v5 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v3, v4);
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHRepository$GHCodeownersErrors;");
v7 = v6.<org.kohsuke.github.GHRepository$GHCodeownersErrors: java.util.List errors>;
return v7;
}
public org.kohsuke.github.PagedIterable listContributors() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v4;
java.lang.String v3;
org.kohsuke.github.GitHubRequest$Builder v5;
org.kohsuke.github.Requester v2;
org.kohsuke.github.PagedIterable v6;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("contributors");
v4 = newarray (java.lang.String)[0];
v5 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v3, v4);
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHRepository$Contributor;", null);
return v6;
}
public org.kohsuke.github.GHRepositoryStatistics getStatistics()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHRepositoryStatistics v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new org.kohsuke.github.GHRepositoryStatistics;
specialinvoke v1.<org.kohsuke.github.GHRepositoryStatistics: void <init>(org.kohsuke.github.GHRepository)>(v0);
return v1;
}
public org.kohsuke.github.GHProject createProject(java.lang.String, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.internal.Previews v6;
java.lang.String[] v11;
org.kohsuke.github.GitHubRequest$Builder v12, v5, v7, v8, v9;
java.lang.Object v13;
java.lang.String v1, v10, v2;
org.kohsuke.github.GHProject v14;
org.kohsuke.github.Requester v4;
org.kohsuke.github.GitHub v3;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v4 = virtualinvoke v3.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v5 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v6 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews INERTIA>;
v7 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v6);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("name", v1);
v9 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("body", v2);
v10 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("projects");
v11 = newarray (java.lang.String)[0];
v12 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v10, v11);
v13 = virtualinvoke v12.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHProject;");
v14 = virtualinvoke v13.<org.kohsuke.github.GHProject: org.kohsuke.github.GHProject lateBind(org.kohsuke.github.GHRepository)>(v0);
return v14;
}
public org.kohsuke.github.PagedIterable listProjects(org.kohsuke.github.GHProject$ProjectStateFilter) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.internal.Previews v4;
java.lang.String[] v8;
org.kohsuke.github.GitHubRequest$Builder v5, v6, v9;
java.util.function.Consumer v10;
org.kohsuke.github.GHProject$ProjectStateFilter v1;
java.lang.String v7;
org.kohsuke.github.Requester v3;
org.kohsuke.github.PagedIterable v11;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.GHProject$ProjectStateFilter;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews INERTIA>;
v5 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v4);
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Enum)>("state", v1);
v7 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("projects");
v8 = newarray (java.lang.String)[0];
v9 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v7, v8);
v10 = staticinvoke <org.kohsuke.github.GHRepository$lambda_listProjects_13__3327: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHRepository)>(v0);
v11 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHProject;", v10);
return v11;
}
public org.kohsuke.github.PagedIterable listProjects() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHProject$ProjectStateFilter v1;
org.kohsuke.github.PagedIterable v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = <org.kohsuke.github.GHProject$ProjectStateFilter: org.kohsuke.github.GHProject$ProjectStateFilter OPEN>;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.PagedIterable listProjects(org.kohsuke.github.GHProject$ProjectStateFilter)>(v1);
return v2;
}
public java.io.Reader renderMarkdown(java.lang.String, org.kohsuke.github.MarkdownMode) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v12;
org.kohsuke.github.GitHubRequest$Builder v11, v13, v6, v7, v9;
java.lang.String v1, v10, v8;
org.kohsuke.github.GitHub v4;
org.kohsuke.github.function.InputStreamFunction v14;
java.io.InputStreamReader v3;
java.lang.Object v15;
org.kohsuke.github.MarkdownMode v2;
org.kohsuke.github.Requester v5;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.kohsuke.github.MarkdownMode;
v3 = new java.io.InputStreamReader;
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v5 = virtualinvoke v4.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v7 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("text", v1);
if v2 != null goto label1;
v8 = null;
goto label2;
label1:
v8 = virtualinvoke v2.<org.kohsuke.github.MarkdownMode: java.lang.String toString()>();
label2:
v9 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("mode", v8);
v10 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getFullName()>();
v11 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("context", v10);
v12 = newarray (java.lang.String)[0];
v13 = virtualinvoke v11.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>("/markdown", v12);
v14 = staticinvoke <org.kohsuke.github.GHRepository$copyInputStream__3328: org.kohsuke.github.function.InputStreamFunction bootstrap$()>();
v15 = virtualinvoke v13.<org.kohsuke.github.Requester: java.lang.Object fetchStream(org.kohsuke.github.function.InputStreamFunction)>(v14);
specialinvoke v3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(v15, "UTF-8");
return v3;
}
public org.kohsuke.github.GHNotificationStream listNotifications()
{
org.kohsuke.github.GHRepository v0;
java.lang.String v3;
org.kohsuke.github.GHNotificationStream v1;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new org.kohsuke.github.GHNotificationStream;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("/notifications");
specialinvoke v1.<org.kohsuke.github.GHNotificationStream: void <init>(org.kohsuke.github.GitHub,java.lang.String)>(v2, v3);
return v1;
}
public org.kohsuke.github.GHRepositoryViewTraffic getViewTraffic() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.Object v6;
java.lang.String[] v4;
java.lang.String v3;
org.kohsuke.github.GitHubRequest$Builder v5;
org.kohsuke.github.Requester v2;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("/traffic/views");
v4 = newarray (java.lang.String)[0];
v5 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v3, v4);
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHRepositoryViewTraffic;");
return v6;
}
public org.kohsuke.github.GHRepositoryCloneTraffic getCloneTraffic() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.Object v6;
java.lang.String[] v4;
java.lang.String v3;
org.kohsuke.github.GitHubRequest$Builder v5;
org.kohsuke.github.Requester v2;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("/traffic/clones");
v4 = newarray (java.lang.String)[0];
v5 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v3, v4);
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHRepositoryCloneTraffic;");
return v6;
}
public int hashCode()
{
org.kohsuke.github.GHRepository v0;
int v4;
java.lang.String v1, v2, v3;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v2 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Repository:\u0001:\u0001");
v4 = virtualinvoke v3.<java.lang.String: int hashCode()>();
return v4;
}
public boolean equals(java.lang.Object)
{
org.kohsuke.github.GHRepository v0;
java.lang.Object v1;
java.lang.String v3, v4, v6, v7;
boolean v2, v5, v8, v9;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof org.kohsuke.github.GHRepository;
if v2 == 0 goto label3;
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v4 = virtualinvoke v1.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v5 = virtualinvoke v3.<java.lang.String: boolean equals(java.lang.Object)>(v4);
if v5 == 0 goto label1;
v6 = v0.<org.kohsuke.github.GHRepository: java.lang.String name>;
v7 = v1.<org.kohsuke.github.GHRepository: java.lang.String name>;
v8 = virtualinvoke v6.<java.lang.String: boolean equals(java.lang.Object)>(v7);
if v8 == 0 goto label1;
v9 = 1;
goto label2;
label1:
v9 = 0;
label2:
return v9;
label3:
return 0;
}
java.lang.String getApiTailUrl(java.lang.String)
{
org.kohsuke.github.GHRepository v0;
int v2;
java.lang.String v1, v4, v5;
boolean v3;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: int length()>();
if v2 <= 0 goto label1;
v3 = virtualinvoke v1.<java.lang.String: boolean startsWith(java.lang.String)>("/");
if v3 != 0 goto label1;
v1 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("/\u0001");
label1:
v4 = v0.<org.kohsuke.github.GHRepository: java.lang.String full_name>;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v4, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("/repos/\u0001\u0001");
return v5;
}
public org.kohsuke.github.PagedIterable listIssueEvents() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v4;
java.lang.String v3;
org.kohsuke.github.GitHubRequest$Builder v5;
org.kohsuke.github.Requester v2;
org.kohsuke.github.PagedIterable v6;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("issues/events");
v4 = newarray (java.lang.String)[0];
v5 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v3, v4);
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHIssueEvent;", null);
return v6;
}
public org.kohsuke.github.GHIssueEvent getIssueEvent(long) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v6;
long v1;
org.kohsuke.github.GitHubRequest$Builder v7;
java.lang.Object v8;
java.lang.String v4, v5;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: long;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("issues/events/\u0001");
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v4);
v6 = newarray (java.lang.String)[0];
v7 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v6);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHIssueEvent;");
return v8;
}
public org.kohsuke.github.PagedIterable listWorkflows()
{
org.kohsuke.github.GHWorkflowsIterable v1;
org.kohsuke.github.GHRepository v0;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new org.kohsuke.github.GHWorkflowsIterable;
specialinvoke v1.<org.kohsuke.github.GHWorkflowsIterable: void <init>(org.kohsuke.github.GHRepository)>(v0);
return v1;
}
public org.kohsuke.github.GHWorkflow getWorkflow(long) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHWorkflow v3;
long v1;
java.lang.String v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: long;
v2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(v1);
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GHWorkflow getWorkflow(java.lang.String)>(v2);
return v3;
}
public org.kohsuke.github.GHWorkflow getWorkflow(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHWorkflow v8;
java.lang.String[] v5;
org.kohsuke.github.GitHubRequest$Builder v6;
java.lang.Object v7;
java.lang.String v1, v4;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("actions/workflows");
v5 = newarray (java.lang.String)[1];
v5[0] = v1;
v6 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v4, v5);
v7 = virtualinvoke v6.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHWorkflow;");
v8 = virtualinvoke v7.<org.kohsuke.github.GHWorkflow: org.kohsuke.github.GHWorkflow wrapUp(org.kohsuke.github.GHRepository)>(v0);
return v8;
}
public org.kohsuke.github.GHWorkflowRunQueryBuilder queryWorkflowRuns()
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHWorkflowRunQueryBuilder v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new org.kohsuke.github.GHWorkflowRunQueryBuilder;
specialinvoke v1.<org.kohsuke.github.GHWorkflowRunQueryBuilder: void <init>(org.kohsuke.github.GHRepository)>(v0);
return v1;
}
public org.kohsuke.github.GHWorkflowRun getWorkflowRun(long) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v5;
long v1;
org.kohsuke.github.GitHubRequest$Builder v7;
org.kohsuke.github.GHWorkflowRun v9;
java.lang.Object v8;
java.lang.String v4, v6;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: long;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("actions/runs");
v5 = newarray (java.lang.String)[1];
v6 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(v1);
v5[0] = v6;
v7 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v4, v5);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHWorkflowRun;");
v9 = virtualinvoke v8.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GHWorkflowRun wrapUp(org.kohsuke.github.GHRepository)>(v0);
return v9;
}
public org.kohsuke.github.PagedIterable listArtifacts()
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v5;
java.lang.String v4;
org.kohsuke.github.GHArtifactsIterable v1;
org.kohsuke.github.GitHubRequest$Builder v6;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = new org.kohsuke.github.GHArtifactsIterable;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("actions/artifacts");
v5 = newarray (java.lang.String)[0];
v6 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v4, v5);
specialinvoke v1.<org.kohsuke.github.GHArtifactsIterable: void <init>(org.kohsuke.github.GHRepository,org.kohsuke.github.GitHubRequest$Builder)>(v0, v6);
return v1;
}
public org.kohsuke.github.GHArtifact getArtifact(long) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v5;
long v1;
org.kohsuke.github.GitHubRequest$Builder v7;
org.kohsuke.github.GHArtifact v9;
java.lang.Object v8;
java.lang.String v4, v6;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: long;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("actions/artifacts");
v5 = newarray (java.lang.String)[1];
v6 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(v1);
v5[0] = v6;
v7 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v4, v5);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHArtifact;");
v9 = virtualinvoke v8.<org.kohsuke.github.GHArtifact: org.kohsuke.github.GHArtifact wrapUp(org.kohsuke.github.GHRepository)>(v0);
return v9;
}
public org.kohsuke.github.GHWorkflowJob getWorkflowJob(long) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHWorkflowJob v9;
java.lang.String[] v5;
long v1;
org.kohsuke.github.GitHubRequest$Builder v7;
java.lang.Object v8;
java.lang.String v4, v6;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: long;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("/actions/jobs");
v5 = newarray (java.lang.String)[1];
v6 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(v1);
v5[0] = v6;
v7 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v4, v5);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHWorkflowJob;");
v9 = virtualinvoke v8.<org.kohsuke.github.GHWorkflowJob: org.kohsuke.github.GHWorkflowJob wrapUp(org.kohsuke.github.GHRepository)>(v0);
return v9;
}
public org.kohsuke.github.GHRepositoryPublicKey getPublicKey() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v4;
org.kohsuke.github.GitHubRequest$Builder v5;
org.kohsuke.github.GHRepositoryPublicKey v7;
java.lang.Object v6;
java.lang.String v3;
org.kohsuke.github.Requester v2;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("/actions/secrets/public-key");
v4 = newarray (java.lang.String)[0];
v5 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v3, v4);
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHRepositoryPublicKey;");
v7 = virtualinvoke v6.<org.kohsuke.github.GHRepositoryPublicKey: org.kohsuke.github.GHRepositoryPublicKey wrapUp(org.kohsuke.github.GHRepository)>(v0);
return v7;
}
public java.util.List listTopics() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.internal.Previews v3;
java.lang.String[] v6;
org.kohsuke.github.GitHubRequest$Builder v4, v7;
java.util.List v9;
java.lang.Object v8;
java.lang.String v5;
org.kohsuke.github.Requester v2;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews MERCY>;
v4 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v3);
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("topics");
v6 = newarray (java.lang.String)[0];
v7 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v6);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHRepository$Topics;");
v9 = v8.<org.kohsuke.github.GHRepository$Topics: java.util.List names>;
return v9;
}
public void setTopics(java.util.List) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.internal.Previews v6;
java.lang.String[] v9;
org.kohsuke.github.GitHubRequest$Builder v10, v4, v5, v7;
java.util.List v1;
java.lang.String v8;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.util.List;
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("PUT");
v5 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.util.Collection)>("names", v1);
v6 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews MERCY>;
v7 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v6);
v8 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("topics");
v9 = newarray (java.lang.String)[0];
v10 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v8, v9);
virtualinvoke v10.<org.kohsuke.github.Requester: void send()>();
return;
}
public void createSecret(java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v11;
org.kohsuke.github.GitHubRequest$Builder v12, v6, v7, v8;
java.lang.String v1, v10, v2, v3, v9;
org.kohsuke.github.Requester v5;
org.kohsuke.github.GitHub v4;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v5 = virtualinvoke v4.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("PUT");
v7 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("encrypted_value", v2);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("key_id", v3);
v9 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("actions/secrets");
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v9, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/\u0001");
v11 = newarray (java.lang.String)[0];
v12 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v10, v11);
virtualinvoke v12.<org.kohsuke.github.Requester: void send()>();
return;
}
public org.kohsuke.github.GHTagObject createTag(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.GHTagObject v16;
java.lang.String[] v13;
org.kohsuke.github.GitHubRequest$Builder v10, v11, v14, v7, v8, v9;
java.lang.String v1, v12, v2, v3, v4;
org.kohsuke.github.GitHub v5;
java.lang.Object v15;
org.kohsuke.github.Requester v6;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v6 = virtualinvoke v5.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v7 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("tag", v1);
v9 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("message", v2);
v10 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("object", v3);
v11 = virtualinvoke v10.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("type", v4);
v12 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("git/tags");
v13 = newarray (java.lang.String)[0];
v14 = virtualinvoke v11.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v12, v13);
v15 = virtualinvoke v14.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHTagObject;");
v16 = virtualinvoke v15.<org.kohsuke.github.GHTagObject: org.kohsuke.github.GHTagObject wrap(org.kohsuke.github.GHRepository)>(v0);
return v16;
}
public java.lang.Object readZip(org.kohsuke.github.function.InputStreamFunction, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.function.InputStreamFunction v1;
org.kohsuke.github.GHRepository v0;
java.lang.Object v3;
java.lang.String v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.function.InputStreamFunction;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<org.kohsuke.github.GHRepository: java.lang.Object downloadArchive(java.lang.String,java.lang.String,org.kohsuke.github.function.InputStreamFunction)>("zip", v2, v1);
return v3;
}
public java.lang.Object readTar(org.kohsuke.github.function.InputStreamFunction, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.function.InputStreamFunction v1;
org.kohsuke.github.GHRepository v0;
java.lang.Object v3;
java.lang.String v2;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: org.kohsuke.github.function.InputStreamFunction;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<org.kohsuke.github.GHRepository: java.lang.Object downloadArchive(java.lang.String,java.lang.String,org.kohsuke.github.function.InputStreamFunction)>("tar", v2, v1);
return v3;
}
public void dispatch(java.lang.String, java.lang.Object) throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.String[] v7;
org.kohsuke.github.GitHubRequest$Builder v10, v5, v8, v9;
java.lang.Object v2;
java.lang.String v1, v6;
org.kohsuke.github.Requester v4;
org.kohsuke.github.GitHub v3;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v4 = virtualinvoke v3.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v5 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v6 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("dispatches");
v7 = newarray (java.lang.String)[0];
v8 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v6, v7);
v9 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("event_type", v1);
v10 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Object)>("client_payload", v2);
virtualinvoke v10.<org.kohsuke.github.Requester: void send()>();
return;
}
private java.lang.Object downloadArchive(java.lang.String, java.lang.String, org.kohsuke.github.function.InputStreamFunction) throws java.io.IOException
{
org.kohsuke.github.function.InputStreamFunction v3;
org.kohsuke.github.GHRepository v0;
java.lang.String[] v9;
org.kohsuke.github.GitHubRequest$Builder v10, v8;
java.lang.Object v11;
java.lang.String v1, v2, v4, v5;
org.kohsuke.github.Requester v7;
org.kohsuke.github.GitHub v6;
v0 := @this: org.kohsuke.github.GHRepository;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: org.kohsuke.github.function.InputStreamFunction;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v3, "Sink must not be null");
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001ball");
v5 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>(v4);
if v2 == null goto label1;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v5, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/\u0001");
label1:
v6 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v7 = virtualinvoke v6.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("GET");
v9 = newarray (java.lang.String)[0];
v10 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v9);
v11 = virtualinvoke v10.<org.kohsuke.github.Requester: java.lang.Object fetchStream(org.kohsuke.github.function.InputStreamFunction)>(v3);
return v11;
}
void populate() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
org.kohsuke.github.internal.Previews v4, v6;
java.lang.String[] v9;
org.kohsuke.github.GitHubRequest$Builder v10, v5, v7;
java.lang.String v8;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
boolean v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: boolean isOffline()>();
if v1 == 0 goto label1;
return;
label1:
v2 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews BAPTISTE>;
v5 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v4);
v6 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews NEBULA>;
v7 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v6);
v8 = virtualinvoke v0.<org.kohsuke.github.GHRepository: java.lang.String getApiTailUrl(java.lang.String)>("");
v9 = newarray (java.lang.String)[0];
v10 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v8, v9);
virtualinvoke v10.<org.kohsuke.github.Requester: java.lang.Object fetchInto(java.lang.Object)>(v0);
return;
}
public void star() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v4;
java.lang.String[] v7;
org.kohsuke.github.GitHubRequest$Builder v3, v8;
java.lang.String v5, v6;
org.kohsuke.github.Requester v2;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("PUT");
v4 = newarray (java.lang.Object)[1];
v5 = v0.<org.kohsuke.github.GHRepository: java.lang.String full_name>;
v4[0] = v5;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/user/starred/%s", v4);
v7 = newarray (java.lang.String)[0];
v8 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v6, v7);
virtualinvoke v8.<org.kohsuke.github.Requester: void send()>();
return;
}
public void unstar() throws java.io.IOException
{
org.kohsuke.github.GHRepository v0;
java.lang.Object[] v4;
java.lang.String[] v7;
org.kohsuke.github.GitHubRequest$Builder v3, v8;
java.lang.String v5, v6;
org.kohsuke.github.Requester v2;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHRepository;
v1 = virtualinvoke v0.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("DELETE");
v4 = newarray (java.lang.Object)[1];
v5 = v0.<org.kohsuke.github.GHRepository: java.lang.String full_name>;
v4[0] = v5;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("/user/starred/%s", v4);
v7 = newarray (java.lang.String)[0];
v8 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v6, v7);
virtualinvoke v8.<org.kohsuke.github.Requester: void send()>();
return;
}
}