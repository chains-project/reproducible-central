public class org.kohsuke.github.RateLimitChecker$LiteralValue extends org.kohsuke.github.RateLimitChecker
{
private final int sleepAtOrBelow;
public void <init>(int)
{
int v1;
java.lang.IllegalArgumentException v2;
org.kohsuke.github.RateLimitChecker$LiteralValue v0;
v0 := @this: org.kohsuke.github.RateLimitChecker$LiteralValue;
v1 := @parameter0: int;
specialinvoke v0.<org.kohsuke.github.RateLimitChecker: void <init>()>();
if v1 >= 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sleepAtOrBelow must >= 0");
throw v2;
label1:
v0.<org.kohsuke.github.RateLimitChecker$LiteralValue: int sleepAtOrBelow> = v1;
return;
}
protected boolean checkRateLimit(org.kohsuke.github.GHRateLimit$Record, long) throws java.lang.InterruptedException
{
org.kohsuke.github.RateLimitChecker$LiteralValue v0;
int v3, v4;
long v2;
org.kohsuke.github.GHRateLimit$Record v1;
boolean v5;
v0 := @this: org.kohsuke.github.RateLimitChecker$LiteralValue;
v1 := @parameter0: org.kohsuke.github.GHRateLimit$Record;
v2 := @parameter1: long;
v3 = virtualinvoke v1.<org.kohsuke.github.GHRateLimit$Record: int getRemaining()>();
v4 = v0.<org.kohsuke.github.RateLimitChecker$LiteralValue: int sleepAtOrBelow>;
if v3 > v4 goto label1;
v5 = virtualinvoke v0.<org.kohsuke.github.RateLimitChecker$LiteralValue: boolean sleepUntilReset(org.kohsuke.github.GHRateLimit$Record)>(v1);
return v5;
label1:
return 0;
}
}