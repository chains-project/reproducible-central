public class org.slf4j.MarkerFactory extends java.lang.Object
{
static org.slf4j.IMarkerFactory MARKER_FACTORY;
private void <init>()
{
org.slf4j.MarkerFactory v0;
v0 := @this: org.slf4j.MarkerFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static org.slf4j.Marker getMarker(java.lang.String)
{
java.lang.String v0;
org.slf4j.IMarkerFactory v1;
org.slf4j.Marker v2;
v0 := @parameter0: java.lang.String;
v1 = <org.slf4j.MarkerFactory: org.slf4j.IMarkerFactory MARKER_FACTORY>;
v2 = interfaceinvoke v1.<org.slf4j.IMarkerFactory: org.slf4j.Marker getMarker(java.lang.String)>(v0);
return v2;
}
public static org.slf4j.Marker getDetachedMarker(java.lang.String)
{
java.lang.String v0;
org.slf4j.IMarkerFactory v1;
org.slf4j.Marker v2;
v0 := @parameter0: java.lang.String;
v1 = <org.slf4j.MarkerFactory: org.slf4j.IMarkerFactory MARKER_FACTORY>;
v2 = interfaceinvoke v1.<org.slf4j.IMarkerFactory: org.slf4j.Marker getDetachedMarker(java.lang.String)>(v0);
return v2;
}
public static org.slf4j.IMarkerFactory getIMarkerFactory()
{
org.slf4j.IMarkerFactory v0;
v0 = <org.slf4j.MarkerFactory: org.slf4j.IMarkerFactory MARKER_FACTORY>;
return v0;
}
static void <clinit>()
{
org.slf4j.IMarkerFactory v1;
org.slf4j.helpers.BasicMarkerFactory v2;
org.slf4j.spi.SLF4JServiceProvider v0;
v0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.spi.SLF4JServiceProvider getProvider()>();
if v0 == null goto label1;
v1 = interfaceinvoke v0.<org.slf4j.spi.SLF4JServiceProvider: org.slf4j.IMarkerFactory getMarkerFactory()>();
<org.slf4j.MarkerFactory: org.slf4j.IMarkerFactory MARKER_FACTORY> = v1;
goto label2;
label1:
staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("Failed to find provider");
staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("Defaulting to BasicMarkerFactory.");
v2 = new org.slf4j.helpers.BasicMarkerFactory;
specialinvoke v2.<org.slf4j.helpers.BasicMarkerFactory: void <init>()>();
<org.slf4j.MarkerFactory: org.slf4j.IMarkerFactory MARKER_FACTORY> = v2;
label2:
return;
}
}