public final class org.wildfly.common.array.ArrayIterator extends java.lang.Object implements java.util.ListIterator, org.wildfly.common.iteration.EnumerationIterator
{
private final java.lang.Object[] elements;
private final boolean descending;
private int idx;
public void <init>(java.lang.Object[])
{
java.lang.Object[] v1;
org.wildfly.common.array.ArrayIterator v0;
v0 := @this: org.wildfly.common.array.ArrayIterator;
v1 := @parameter0: java.lang.Object[];
specialinvoke v0.<org.wildfly.common.array.ArrayIterator: void <init>(java.lang.Object[],boolean)>(v1, 0);
return;
}
public void <init>(java.lang.Object[], boolean)
{
java.lang.Object[] v1;
int v3;
org.wildfly.common.array.ArrayIterator v0;
boolean v2;
v0 := @this: org.wildfly.common.array.ArrayIterator;
v1 := @parameter0: java.lang.Object[];
v2 := @parameter1: boolean;
if v2 == 0 goto label1;
v3 = lengthof v1;
goto label2;
label1:
v3 = 0;
label2:
specialinvoke v0.<org.wildfly.common.array.ArrayIterator: void <init>(java.lang.Object[],boolean,int)>(v1, v2, v3);
return;
}
public void <init>(java.lang.Object[], int)
{
int v2;
java.lang.Object[] v1;
org.wildfly.common.array.ArrayIterator v0;
v0 := @this: org.wildfly.common.array.ArrayIterator;
v1 := @parameter0: java.lang.Object[];
v2 := @parameter1: int;
specialinvoke v0.<org.wildfly.common.array.ArrayIterator: void <init>(java.lang.Object[],boolean,int)>(v1, 0, v2);
return;
}
public void <init>(java.lang.Object[], boolean, int)
{
java.lang.Object[] v1;
int v3, v4;
org.wildfly.common.array.ArrayIterator v0;
boolean v2;
v0 := @this: org.wildfly.common.array.ArrayIterator;
v1 := @parameter0: java.lang.Object[];
v2 := @parameter1: boolean;
v3 := @parameter2: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("elements", v1);
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("startIdx", 0, v3);
v4 = lengthof v1;
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("startIdx", v4, v3);
v0.<org.wildfly.common.array.ArrayIterator: java.lang.Object[] elements> = v1;
v0.<org.wildfly.common.array.ArrayIterator: boolean descending> = v2;
v0.<org.wildfly.common.array.ArrayIterator: int idx> = v3;
return;
}
public boolean hasPrevious()
{
java.lang.Object[] v3;
int v2, v4, v6;
org.wildfly.common.array.ArrayIterator v0;
boolean v1, v5;
v0 := @this: org.wildfly.common.array.ArrayIterator;
v1 = v0.<org.wildfly.common.array.ArrayIterator: boolean descending>;
if v1 == 0 goto label2;
v2 = v0.<org.wildfly.common.array.ArrayIterator: int idx>;
v3 = v0.<org.wildfly.common.array.ArrayIterator: java.lang.Object[] elements>;
v4 = lengthof v3;
if v2 >= v4 goto label1;
v5 = 1;
goto label4;
label1:
v5 = 0;
goto label4;
label2:
v6 = v0.<org.wildfly.common.array.ArrayIterator: int idx>;
if v6 <= 0 goto label3;
v5 = 1;
goto label4;
label3:
v5 = 0;
label4:
return v5;
}
public boolean hasNext()
{
java.lang.Object[] v5;
int v2, v4, v6;
org.wildfly.common.array.ArrayIterator v0;
boolean v1, v3;
v0 := @this: org.wildfly.common.array.ArrayIterator;
v1 = v0.<org.wildfly.common.array.ArrayIterator: boolean descending>;
if v1 == 0 goto label2;
v2 = v0.<org.wildfly.common.array.ArrayIterator: int idx>;
if v2 <= 0 goto label1;
v3 = 1;
goto label4;
label1:
v3 = 0;
goto label4;
label2:
v4 = v0.<org.wildfly.common.array.ArrayIterator: int idx>;
v5 = v0.<org.wildfly.common.array.ArrayIterator: java.lang.Object[] elements>;
v6 = lengthof v5;
if v4 >= v6 goto label3;
v3 = 1;
goto label4;
label3:
v3 = 0;
label4:
return v3;
}
public java.lang.Object previous()
{
java.lang.Object[] v3;
int v5, v6, v7;
java.lang.Object v8;
java.util.NoSuchElementException v2;
org.wildfly.common.array.ArrayIterator v0;
boolean v1, v4;
v0 := @this: org.wildfly.common.array.ArrayIterator;
v1 = virtualinvoke v0.<org.wildfly.common.array.ArrayIterator: boolean hasPrevious()>();
if v1 != 0 goto label1;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>()>();
throw v2;
label1:
v3 = v0.<org.wildfly.common.array.ArrayIterator: java.lang.Object[] elements>;
v4 = v0.<org.wildfly.common.array.ArrayIterator: boolean descending>;
if v4 == 0 goto label2;
v5 = v0.<org.wildfly.common.array.ArrayIterator: int idx>;
v6 = v5 + 1;
v0.<org.wildfly.common.array.ArrayIterator: int idx> = v6;
goto label3;
label2:
v7 = v0.<org.wildfly.common.array.ArrayIterator: int idx>;
v5 = v7 - 1;
v0.<org.wildfly.common.array.ArrayIterator: int idx> = v5;
label3:
v8 = v3[v5];
return v8;
}
public java.lang.Object next()
{
java.lang.Object[] v3;
int v5, v6, v7;
java.lang.Object v8;
java.util.NoSuchElementException v2;
org.wildfly.common.array.ArrayIterator v0;
boolean v1, v4;
v0 := @this: org.wildfly.common.array.ArrayIterator;
v1 = virtualinvoke v0.<org.wildfly.common.array.ArrayIterator: boolean hasNext()>();
if v1 != 0 goto label1;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>()>();
throw v2;
label1:
v3 = v0.<org.wildfly.common.array.ArrayIterator: java.lang.Object[] elements>;
v4 = v0.<org.wildfly.common.array.ArrayIterator: boolean descending>;
if v4 == 0 goto label2;
v5 = v0.<org.wildfly.common.array.ArrayIterator: int idx>;
v6 = v5 - 1;
v0.<org.wildfly.common.array.ArrayIterator: int idx> = v6;
goto label3;
label2:
v6 = v0.<org.wildfly.common.array.ArrayIterator: int idx>;
v7 = v6 + 1;
v0.<org.wildfly.common.array.ArrayIterator: int idx> = v7;
label3:
v8 = v3[v6];
return v8;
}
public int nextIndex()
{
int v2, v3;
org.wildfly.common.array.ArrayIterator v0;
boolean v1;
v0 := @this: org.wildfly.common.array.ArrayIterator;
v1 = v0.<org.wildfly.common.array.ArrayIterator: boolean descending>;
if v1 == 0 goto label1;
v2 = v0.<org.wildfly.common.array.ArrayIterator: int idx>;
v3 = v2 - 1;
goto label2;
label1:
v3 = v0.<org.wildfly.common.array.ArrayIterator: int idx>;
label2:
return v3;
}
public int previousIndex()
{
int v2, v3;
org.wildfly.common.array.ArrayIterator v0;
boolean v1;
v0 := @this: org.wildfly.common.array.ArrayIterator;
v1 = v0.<org.wildfly.common.array.ArrayIterator: boolean descending>;
if v1 == 0 goto label1;
v2 = v0.<org.wildfly.common.array.ArrayIterator: int idx>;
goto label2;
label1:
v3 = v0.<org.wildfly.common.array.ArrayIterator: int idx>;
v2 = v3 - 1;
label2:
return v2;
}
public void remove()
{
java.lang.UnsupportedOperationException v1;
org.wildfly.common.array.ArrayIterator v0;
v0 := @this: org.wildfly.common.array.ArrayIterator;
v1 = staticinvoke <org.wildfly.common.Assert: java.lang.UnsupportedOperationException unsupported()>();
throw v1;
}
public void set(java.lang.Object)
{
java.lang.UnsupportedOperationException v2;
java.lang.Object v1;
org.wildfly.common.array.ArrayIterator v0;
v0 := @this: org.wildfly.common.array.ArrayIterator;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <org.wildfly.common.Assert: java.lang.UnsupportedOperationException unsupported()>();
throw v2;
}
public void add(java.lang.Object)
{
java.lang.UnsupportedOperationException v2;
java.lang.Object v1;
org.wildfly.common.array.ArrayIterator v0;
v0 := @this: org.wildfly.common.array.ArrayIterator;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <org.wildfly.common.Assert: java.lang.UnsupportedOperationException unsupported()>();
throw v2;
}
}