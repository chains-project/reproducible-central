final class org.wildfly.common.expression.Expression$Itr extends java.lang.Object
{
private final java.lang.String str;
private int idx;
void <init>(java.lang.String)
{
org.wildfly.common.expression.Expression$Itr v0;
java.lang.String v1;
v0 := @this: org.wildfly.common.expression.Expression$Itr;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String str> = v1;
return;
}
boolean hasNext()
{
org.wildfly.common.expression.Expression$Itr v0;
int v1, v3;
java.lang.String v2;
boolean v4;
v0 := @this: org.wildfly.common.expression.Expression$Itr;
v1 = v0.<org.wildfly.common.expression.Expression$Itr: int idx>;
v2 = v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String str>;
v3 = virtualinvoke v2.<java.lang.String: int length()>();
if v1 >= v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
int next()
{
java.lang.Throwable v6;
org.wildfly.common.expression.Expression$Itr v0;
int v1, v3, v5, v8;
java.lang.String v2, v4, v7;
v0 := @this: org.wildfly.common.expression.Expression$Itr;
v1 = v0.<org.wildfly.common.expression.Expression$Itr: int idx>;
label1:
v2 = v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String str>;
v3 = virtualinvoke v2.<java.lang.String: int codePointAt(int)>(v1);
label2:
v4 = v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String str>;
v5 = virtualinvoke v4.<java.lang.String: int offsetByCodePoints(int,int)>(v1, 1);
v0.<org.wildfly.common.expression.Expression$Itr: int idx> = v5;
return v3;
label3:
v6 := @caughtexception;
v7 = v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String str>;
v8 = virtualinvoke v7.<java.lang.String: int offsetByCodePoints(int,int)>(v1, 1);
v0.<org.wildfly.common.expression.Expression$Itr: int idx> = v8;
throw v6;
catch java.lang.Throwable from label1 to label2 with label3;
}
int prev()
{
java.lang.Throwable v7;
org.wildfly.common.expression.Expression$Itr v0;
int v1, v10, v3, v5, v6, v9;
java.lang.String v2, v4, v8;
v0 := @this: org.wildfly.common.expression.Expression$Itr;
v1 = v0.<org.wildfly.common.expression.Expression$Itr: int idx>;
label1:
v2 = v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String str>;
v3 = virtualinvoke v2.<java.lang.String: int codePointBefore(int)>(v1);
label2:
v4 = v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String str>;
v5 = (int) -1;
v6 = virtualinvoke v4.<java.lang.String: int offsetByCodePoints(int,int)>(v1, v5);
v0.<org.wildfly.common.expression.Expression$Itr: int idx> = v6;
return v3;
label3:
v7 := @caughtexception;
v8 = v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String str>;
v9 = (int) -1;
v10 = virtualinvoke v8.<java.lang.String: int offsetByCodePoints(int,int)>(v1, v9);
v0.<org.wildfly.common.expression.Expression$Itr: int idx> = v10;
throw v7;
catch java.lang.Throwable from label1 to label2 with label3;
}
int getNextIdx()
{
int v1;
org.wildfly.common.expression.Expression$Itr v0;
v0 := @this: org.wildfly.common.expression.Expression$Itr;
v1 = v0.<org.wildfly.common.expression.Expression$Itr: int idx>;
return v1;
}
int getPrevIdx()
{
org.wildfly.common.expression.Expression$Itr v0;
int v2, v3, v4;
java.lang.String v1;
v0 := @this: org.wildfly.common.expression.Expression$Itr;
v1 = v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String str>;
v2 = v0.<org.wildfly.common.expression.Expression$Itr: int idx>;
v3 = (int) -1;
v4 = virtualinvoke v1.<java.lang.String: int offsetByCodePoints(int,int)>(v2, v3);
return v4;
}
java.lang.String getStr()
{
org.wildfly.common.expression.Expression$Itr v0;
java.lang.String v1;
v0 := @this: org.wildfly.common.expression.Expression$Itr;
v1 = v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String str>;
return v1;
}
int peekNext()
{
org.wildfly.common.expression.Expression$Itr v0;
int v2, v3;
java.lang.String v1;
v0 := @this: org.wildfly.common.expression.Expression$Itr;
v1 = v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String str>;
v2 = v0.<org.wildfly.common.expression.Expression$Itr: int idx>;
v3 = virtualinvoke v1.<java.lang.String: int codePointAt(int)>(v2);
return v3;
}
int peekPrev()
{
org.wildfly.common.expression.Expression$Itr v0;
int v2, v3;
java.lang.String v1;
v0 := @this: org.wildfly.common.expression.Expression$Itr;
v1 = v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String str>;
v2 = v0.<org.wildfly.common.expression.Expression$Itr: int idx>;
v3 = virtualinvoke v1.<java.lang.String: int codePointBefore(int)>(v2);
return v3;
}
void rewind(int)
{
int v1;
org.wildfly.common.expression.Expression$Itr v0;
v0 := @this: org.wildfly.common.expression.Expression$Itr;
v1 := @parameter0: int;
v0.<org.wildfly.common.expression.Expression$Itr: int idx> = v1;
return;
}
}