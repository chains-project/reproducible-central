abstract class org.wildfly.common.expression.Node extends java.lang.Object
{
static final org.wildfly.common.expression.Node[] NO_NODES;
static final org.wildfly.common.expression.Node NULL;
void <init>()
{
org.wildfly.common.expression.Node v0;
v0 := @this: org.wildfly.common.expression.Node;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static org.wildfly.common.expression.Node fromList(java.util.List)
{
org.wildfly.common.expression.Node v2;
java.util.List v0;
int v3;
java.lang.Object v4;
org.wildfly.common.expression.CompositeNode v5;
boolean v1;
v0 := @parameter0: java.util.List;
if v0 == null goto label1;
v1 = interfaceinvoke v0.<java.util.List: boolean isEmpty()>();
if v1 == 0 goto label2;
label1:
v2 = <org.wildfly.common.expression.Node: org.wildfly.common.expression.Node NULL>;
return v2;
label2:
v3 = interfaceinvoke v0.<java.util.List: int size()>();
if v3 != 1 goto label3;
v4 = interfaceinvoke v0.<java.util.List: java.lang.Object get(int)>(0);
return v4;
label3:
v5 = new org.wildfly.common.expression.CompositeNode;
specialinvoke v5.<org.wildfly.common.expression.CompositeNode: void <init>(java.util.List)>(v0);
return v5;
}
abstract void emit(org.wildfly.common.expression.ResolveContext, org.wildfly.common.function.ExceptionBiConsumer) throws java.lang.Exception;
abstract void catalog(java.util.HashSet);
static void <clinit>()
{
org.wildfly.common.expression.Node$1 v1;
org.wildfly.common.expression.Node[] v0;
v0 = newarray (org.wildfly.common.expression.Node)[0];
<org.wildfly.common.expression.Node: org.wildfly.common.expression.Node[] NO_NODES> = v0;
v1 = new org.wildfly.common.expression.Node$1;
specialinvoke v1.<org.wildfly.common.expression.Node$1: void <init>()>();
<org.wildfly.common.expression.Node: org.wildfly.common.expression.Node NULL> = v1;
return;
}
}