public interface  org.wildfly.common.function.ExceptionBiConsumer extends java.lang.Object
{
public abstract void accept(java.lang.Object, java.lang.Object) throws java.lang.Exception;
public org.wildfly.common.function.ExceptionBiConsumer andThen(org.wildfly.common.function.ExceptionBiConsumer)
{
org.wildfly.common.function.ExceptionBiConsumer v0, v1, v2;
v0 := @this: org.wildfly.common.function.ExceptionBiConsumer;
v1 := @parameter0: org.wildfly.common.function.ExceptionBiConsumer;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("after", v1);
v2 = staticinvoke <org.wildfly.common.function.ExceptionBiConsumer$lambda_andThen_0__3258: org.wildfly.common.function.ExceptionBiConsumer bootstrap$(org.wildfly.common.function.ExceptionBiConsumer,org.wildfly.common.function.ExceptionBiConsumer)>(v0, v1);
return v2;
}
public org.wildfly.common.function.ExceptionRunnable compose(org.wildfly.common.function.ExceptionSupplier, org.wildfly.common.function.ExceptionSupplier)
{
org.wildfly.common.function.ExceptionRunnable v3;
org.wildfly.common.function.ExceptionBiConsumer v0;
org.wildfly.common.function.ExceptionSupplier v1, v2;
v0 := @this: org.wildfly.common.function.ExceptionBiConsumer;
v1 := @parameter0: org.wildfly.common.function.ExceptionSupplier;
v2 := @parameter1: org.wildfly.common.function.ExceptionSupplier;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("before1", v1);
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("before2", v2);
v3 = staticinvoke <org.wildfly.common.function.ExceptionBiConsumer$lambda_compose_1__3259: org.wildfly.common.function.ExceptionRunnable bootstrap$(org.wildfly.common.function.ExceptionBiConsumer,org.wildfly.common.function.ExceptionSupplier,org.wildfly.common.function.ExceptionSupplier)>(v0, v1, v2);
return v3;
}
}