public class org.wildfly.common.lock.SpinLock extends java.lang.Object implements org.wildfly.common.lock.ExtendedLock
{
private static final long ownerOffset;
private static final int spinLimit;
private volatile java.lang.Thread owner;
private int level;
public void <init>()
{
org.wildfly.common.lock.SpinLock v0;
v0 := @this: org.wildfly.common.lock.SpinLock;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public boolean isLocked()
{
org.wildfly.common.lock.SpinLock v0;
boolean v2;
java.lang.Thread v1;
v0 := @this: org.wildfly.common.lock.SpinLock;
v1 = v0.<org.wildfly.common.lock.SpinLock: java.lang.Thread owner>;
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public boolean isHeldByCurrentThread()
{
org.wildfly.common.lock.SpinLock v0;
java.lang.Thread v1, v2;
boolean v3;
v0 := @this: org.wildfly.common.lock.SpinLock;
v1 = v0.<org.wildfly.common.lock.SpinLock: java.lang.Thread owner>;
v2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isFair()
{
org.wildfly.common.lock.SpinLock v0;
v0 := @this: org.wildfly.common.lock.SpinLock;
return 1;
}
public void lock()
{
org.wildfly.common.lock.SpinLock v0;
sun.misc.Unsafe v6;
long v7;
java.lang.Thread v2, v3, v8;
int v1, v10, v4, v5;
boolean v9;
v0 := @this: org.wildfly.common.lock.SpinLock;
v1 = 0;
label1:
v2 = v0.<org.wildfly.common.lock.SpinLock: java.lang.Thread owner>;
v3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
if v2 != v3 goto label2;
v4 = v0.<org.wildfly.common.lock.SpinLock: int level>;
v5 = v4 + 1;
v0.<org.wildfly.common.lock.SpinLock: int level> = v5;
return;
label2:
if v2 != null goto label3;
v6 = <org.wildfly.common.lock.JDKSpecific: sun.misc.Unsafe unsafe>;
v7 = <org.wildfly.common.lock.SpinLock: long ownerOffset>;
v8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v9 = virtualinvoke v6.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(v0, v7, null, v8);
if v9 == 0 goto label3;
v0.<org.wildfly.common.lock.SpinLock: int level> = 1;
return;
label3:
v10 = <org.wildfly.common.lock.SpinLock: int spinLimit>;
if v1 < v10 goto label4;
staticinvoke <java.lang.Thread: void yield()>();
goto label1;
label4:
staticinvoke <org.wildfly.common.lock.JDKSpecific: void onSpinWait()>();
v1 = v1 + 1;
goto label1;
}
public void lockInterruptibly() throws java.lang.InterruptedException
{
org.wildfly.common.lock.SpinLock v0;
sun.misc.Unsafe v8;
long v9;
java.lang.InterruptedException v3;
java.lang.Thread v10, v4, v5;
int v1, v12, v6, v7;
boolean v11, v2;
v0 := @this: org.wildfly.common.lock.SpinLock;
v1 = 0;
label1:
v2 = staticinvoke <java.lang.Thread: boolean interrupted()>();
if v2 == 0 goto label2;
v3 = new java.lang.InterruptedException;
specialinvoke v3.<java.lang.InterruptedException: void <init>()>();
throw v3;
label2:
v4 = v0.<org.wildfly.common.lock.SpinLock: java.lang.Thread owner>;
v5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
if v4 != v5 goto label3;
v6 = v0.<org.wildfly.common.lock.SpinLock: int level>;
v7 = v6 + 1;
v0.<org.wildfly.common.lock.SpinLock: int level> = v7;
return;
label3:
if v4 != null goto label4;
v8 = <org.wildfly.common.lock.JDKSpecific: sun.misc.Unsafe unsafe>;
v9 = <org.wildfly.common.lock.SpinLock: long ownerOffset>;
v10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v11 = virtualinvoke v8.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(v0, v9, null, v10);
if v11 == 0 goto label4;
v0.<org.wildfly.common.lock.SpinLock: int level> = 1;
return;
label4:
v12 = <org.wildfly.common.lock.SpinLock: int spinLimit>;
if v1 < v12 goto label5;
staticinvoke <java.lang.Thread: void yield()>();
goto label1;
label5:
staticinvoke <org.wildfly.common.lock.JDKSpecific: void onSpinWait()>();
v1 = v1 + 1;
goto label1;
}
public boolean tryLock()
{
org.wildfly.common.lock.SpinLock v0;
sun.misc.Unsafe v5;
long v6;
java.lang.Thread v1, v2, v7;
int v3, v4;
boolean v8;
v0 := @this: org.wildfly.common.lock.SpinLock;
v1 = v0.<org.wildfly.common.lock.SpinLock: java.lang.Thread owner>;
v2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
if v1 != v2 goto label1;
v3 = v0.<org.wildfly.common.lock.SpinLock: int level>;
v4 = v3 + 1;
v0.<org.wildfly.common.lock.SpinLock: int level> = v4;
return 1;
label1:
if v1 != null goto label2;
v5 = <org.wildfly.common.lock.JDKSpecific: sun.misc.Unsafe unsafe>;
v6 = <org.wildfly.common.lock.SpinLock: long ownerOffset>;
v7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v8 = virtualinvoke v5.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(v0, v6, null, v7);
if v8 == 0 goto label2;
v0.<org.wildfly.common.lock.SpinLock: int level> = 1;
return 1;
label2:
return 0;
}
public void unlock()
{
org.wildfly.common.lock.SpinLock v0;
java.lang.IllegalMonitorStateException v5;
java.lang.Thread v1, v2;
int v3, v4;
v0 := @this: org.wildfly.common.lock.SpinLock;
v1 = v0.<org.wildfly.common.lock.SpinLock: java.lang.Thread owner>;
v2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
if v1 != v2 goto label1;
v3 = v0.<org.wildfly.common.lock.SpinLock: int level>;
v4 = v3 - 1;
v0.<org.wildfly.common.lock.SpinLock: int level> = v4;
if v4 != 0 goto label2;
v0.<org.wildfly.common.lock.SpinLock: java.lang.Thread owner> = null;
goto label2;
label1:
v5 = new java.lang.IllegalMonitorStateException;
specialinvoke v5.<java.lang.IllegalMonitorStateException: void <init>()>();
throw v5;
label2:
return;
}
public boolean tryLock(long, java.util.concurrent.TimeUnit) throws java.lang.UnsupportedOperationException
{
java.util.concurrent.TimeUnit v2;
org.wildfly.common.lock.SpinLock v0;
java.lang.UnsupportedOperationException v3;
long v1;
v0 := @this: org.wildfly.common.lock.SpinLock;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
v3 = staticinvoke <org.wildfly.common.Assert: java.lang.UnsupportedOperationException unsupported()>();
throw v3;
}
public java.util.concurrent.locks.Condition newCondition() throws java.lang.UnsupportedOperationException
{
org.wildfly.common.lock.SpinLock v0;
java.lang.UnsupportedOperationException v1;
v0 := @this: org.wildfly.common.lock.SpinLock;
v1 = staticinvoke <org.wildfly.common.Assert: java.lang.UnsupportedOperationException unsupported()>();
throw v1;
}
static void <clinit>()
{
sun.misc.Unsafe v0;
long v3;
java.lang.reflect.Field v2;
java.security.PrivilegedAction v7;
java.lang.NoSuchFieldError v5;
java.lang.NoSuchFieldException v4;
int v9;
java.lang.Class v1;
java.lang.Object v8;
java.lang.String v6;
label1:
v0 = <org.wildfly.common.lock.JDKSpecific: sun.misc.Unsafe unsafe>;
v1 = class "Lorg/wildfly/common/lock/SpinLock;";
v2 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("owner");
v3 = virtualinvoke v0.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>(v2);
<org.wildfly.common.lock.SpinLock: long ownerOffset> = v3;
label2:
goto label4;
label3:
v4 := @caughtexception;
v5 = new java.lang.NoSuchFieldError;
v6 = virtualinvoke v4.<java.lang.NoSuchFieldException: java.lang.String getMessage()>();
specialinvoke v5.<java.lang.NoSuchFieldError: void <init>(java.lang.String)>(v6);
throw v5;
label4:
v7 = staticinvoke <org.wildfly.common.lock.SpinLock$lambda_static_0__3298: java.security.PrivilegedAction bootstrap$()>();
v8 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(v7);
v9 = virtualinvoke v8.<java.lang.Integer: int intValue()>();
<org.wildfly.common.lock.SpinLock: int spinLimit> = v9;
return;
catch java.lang.NoSuchFieldException from label1 to label2 with label3;
}
}