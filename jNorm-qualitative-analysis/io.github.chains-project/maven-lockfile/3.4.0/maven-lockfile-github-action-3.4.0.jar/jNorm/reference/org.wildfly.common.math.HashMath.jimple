public final class org.wildfly.common.math.HashMath extends java.lang.Object
{
private static final int PRESELECTED_PRIME;
private void <init>()
{
org.wildfly.common.math.HashMath v0;
v0 := @this: org.wildfly.common.math.HashMath;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static int roundToPowerOfTwo(int)
{
int v0, v1, v2, v3;
v0 := @parameter0: int;
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("value", 0, v0);
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("value", 1073741824, v0);
if v0 > 1 goto label1;
v1 = v0;
goto label2;
label1:
v2 = v0 - 1;
v3 = staticinvoke <java.lang.Integer: int highestOneBit(int)>(v2);
v1 = v3 << 1;
label2:
return v1;
}
public static int multiHashOrdered(int, int, int)
{
int v0, v1, v2, v3, v4;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <org.wildfly.common.math.HashMath: int multiplyWrap(int,int)>(v0, v1);
v4 = v3 + v2;
return v4;
}
public static int multiHashUnordered(int, int, int)
{
int v0, v1, v2, v3, v4;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <org.wildfly.common.math.HashMath: int multiplyWrap(int,int)>(v2, v1);
v4 = v3 + v0;
return v4;
}
public static int multiHashOrdered(int, int)
{
int v0, v1, v2;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 = staticinvoke <org.wildfly.common.math.HashMath: int multiHashOrdered(int,int,int)>(v0, 1299827, v1);
return v2;
}
public static int multiHashUnordered(int, int)
{
int v0, v1, v2;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 = staticinvoke <org.wildfly.common.math.HashMath: int multiHashUnordered(int,int,int)>(v0, 1299827, v1);
return v2;
}
public static int multiplyWrap(int, int)
{
int v0, v1, v4;
long v2, v3;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 = v0 * v1;
v3 = v2 >>> 32;
v4 = v2 ^ v3;
return v4;
}
}