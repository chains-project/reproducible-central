public final class org.wildfly.common.net.CidrAddressTable extends java.lang.Object implements java.lang.Iterable
{
private static final org.wildfly.common.net.CidrAddressTable$Mapping[] NO_MAPPINGS;
private final java.util.concurrent.atomic.AtomicReference mappingsRef;
static final boolean $assertionsDisabled;
public void <init>()
{
java.util.concurrent.atomic.AtomicReference v1;
org.wildfly.common.net.CidrAddressTable$Mapping[] v2;
org.wildfly.common.net.CidrAddressTable v0;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.atomic.AtomicReference;
v2 = staticinvoke <org.wildfly.common.net.CidrAddressTable: org.wildfly.common.net.CidrAddressTable$Mapping[] empty()>();
specialinvoke v1.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(v2);
v0.<org.wildfly.common.net.CidrAddressTable: java.util.concurrent.atomic.AtomicReference mappingsRef> = v1;
return;
}
private void <init>(org.wildfly.common.net.CidrAddressTable$Mapping[])
{
java.util.concurrent.atomic.AtomicReference v2;
org.wildfly.common.net.CidrAddressTable$Mapping[] v1;
org.wildfly.common.net.CidrAddressTable v0;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 := @parameter0: org.wildfly.common.net.CidrAddressTable$Mapping[];
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v2.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(v1);
v0.<org.wildfly.common.net.CidrAddressTable: java.util.concurrent.atomic.AtomicReference mappingsRef> = v2;
return;
}
public java.lang.Object getOrDefault(java.net.InetAddress, java.lang.Object)
{
byte[] v5;
java.util.concurrent.atomic.AtomicReference v3;
org.wildfly.common.net.CidrAddressTable v0;
java.net.InetAddress v1;
org.wildfly.common.net.CidrAddressTable$Mapping v9;
short v7;
int v8;
java.lang.Object v10, v2, v4;
boolean v6;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: java.lang.Object;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("address", v1);
v3 = v0.<org.wildfly.common.net.CidrAddressTable: java.util.concurrent.atomic.AtomicReference mappingsRef>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v5 = virtualinvoke v1.<java.net.InetAddress: byte[] getAddress()>();
v6 = v1 instanceof java.net.Inet4Address;
if v6 == 0 goto label1;
v7 = 32;
goto label2;
label1:
v7 = 128;
label2:
v8 = staticinvoke <org.wildfly.common.net.Inet: int getScopeId(java.net.InetAddress)>(v1);
v9 = specialinvoke v0.<org.wildfly.common.net.CidrAddressTable: org.wildfly.common.net.CidrAddressTable$Mapping doGet(org.wildfly.common.net.CidrAddressTable$Mapping[],byte[],int,int)>(v4, v5, v7, v8);
if v9 != null goto label3;
v10 = v2;
goto label4;
label3:
v10 = v9.<org.wildfly.common.net.CidrAddressTable$Mapping: java.lang.Object value>;
label4:
return v10;
}
public java.lang.Object get(java.net.InetAddress)
{
java.net.InetAddress v1;
java.lang.Object v2;
org.wildfly.common.net.CidrAddressTable v0;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 := @parameter0: java.net.InetAddress;
v2 = virtualinvoke v0.<org.wildfly.common.net.CidrAddressTable: java.lang.Object getOrDefault(java.net.InetAddress,java.lang.Object)>(v1, null);
return v2;
}
public java.lang.Object put(org.wildfly.common.net.CidrAddress, java.lang.Object)
{
java.lang.Object v2, v3;
org.wildfly.common.net.CidrAddress v1;
org.wildfly.common.net.CidrAddressTable v0;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 := @parameter0: org.wildfly.common.net.CidrAddress;
v2 := @parameter1: java.lang.Object;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("block", v1);
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("value", v2);
v3 = specialinvoke v0.<org.wildfly.common.net.CidrAddressTable: java.lang.Object doPut(org.wildfly.common.net.CidrAddress,java.lang.Object,java.lang.Object,boolean,boolean)>(v1, null, v2, 1, 1);
return v3;
}
public java.lang.Object putIfAbsent(org.wildfly.common.net.CidrAddress, java.lang.Object)
{
java.lang.Object v2, v3;
org.wildfly.common.net.CidrAddress v1;
org.wildfly.common.net.CidrAddressTable v0;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 := @parameter0: org.wildfly.common.net.CidrAddress;
v2 := @parameter1: java.lang.Object;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("block", v1);
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("value", v2);
v3 = specialinvoke v0.<org.wildfly.common.net.CidrAddressTable: java.lang.Object doPut(org.wildfly.common.net.CidrAddress,java.lang.Object,java.lang.Object,boolean,boolean)>(v1, null, v2, 1, 0);
return v3;
}
public java.lang.Object replaceExact(org.wildfly.common.net.CidrAddress, java.lang.Object)
{
java.lang.Object v2, v3;
org.wildfly.common.net.CidrAddress v1;
org.wildfly.common.net.CidrAddressTable v0;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 := @parameter0: org.wildfly.common.net.CidrAddress;
v2 := @parameter1: java.lang.Object;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("block", v1);
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("value", v2);
v3 = specialinvoke v0.<org.wildfly.common.net.CidrAddressTable: java.lang.Object doPut(org.wildfly.common.net.CidrAddress,java.lang.Object,java.lang.Object,boolean,boolean)>(v1, null, v2, 0, 1);
return v3;
}
public boolean replaceExact(org.wildfly.common.net.CidrAddress, java.lang.Object, java.lang.Object)
{
java.lang.Object v2, v3, v4;
org.wildfly.common.net.CidrAddress v1;
boolean v5;
org.wildfly.common.net.CidrAddressTable v0;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 := @parameter0: org.wildfly.common.net.CidrAddress;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("block", v1);
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("expect", v2);
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("update", v3);
v4 = specialinvoke v0.<org.wildfly.common.net.CidrAddressTable: java.lang.Object doPut(org.wildfly.common.net.CidrAddress,java.lang.Object,java.lang.Object,boolean,boolean)>(v1, v2, v3, 0, 1);
if v4 != v2 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public java.lang.Object removeExact(org.wildfly.common.net.CidrAddress)
{
java.lang.Object v2;
org.wildfly.common.net.CidrAddress v1;
org.wildfly.common.net.CidrAddressTable v0;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 := @parameter0: org.wildfly.common.net.CidrAddress;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("block", v1);
v2 = specialinvoke v0.<org.wildfly.common.net.CidrAddressTable: java.lang.Object doPut(org.wildfly.common.net.CidrAddress,java.lang.Object,java.lang.Object,boolean,boolean)>(v1, null, null, 0, 1);
return v2;
}
public boolean removeExact(org.wildfly.common.net.CidrAddress, java.lang.Object)
{
java.lang.Object v2, v3;
org.wildfly.common.net.CidrAddress v1;
boolean v4;
org.wildfly.common.net.CidrAddressTable v0;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 := @parameter0: org.wildfly.common.net.CidrAddress;
v2 := @parameter1: java.lang.Object;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("block", v1);
v3 = specialinvoke v0.<org.wildfly.common.net.CidrAddressTable: java.lang.Object doPut(org.wildfly.common.net.CidrAddress,java.lang.Object,java.lang.Object,boolean,boolean)>(v1, v2, null, 0, 1);
if v3 != v2 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
private java.lang.Object doPut(org.wildfly.common.net.CidrAddress, java.lang.Object, java.lang.Object, boolean, boolean)
{
byte[] v10;
java.net.InetAddress v9;
org.wildfly.common.net.CidrAddress v1, v60;
java.lang.Object[] v23;
java.lang.AssertionError v20, v7;
org.wildfly.common.net.CidrAddressTable v0;
org.wildfly.common.net.CidrAddressTable$Mapping v16, v21, v29, v30, v31, v32, v33, v34, v35, v36, v37, v39, v40, v41, v42, v46, v47, v56, v57, v58, v59, v62, v63;
boolean v17, v19, v4, v5, v6, v61, v64;
java.util.concurrent.atomic.AtomicReference v8;
int v12, v13, v14, v18, v22, v24, v25, v26, v27, v28, v38, v43, v44, v45, v48, v49, v50, v51, v52, v53, v54, v55;
java.lang.Object v11, v15, v2, v3, v65;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 := @parameter0: org.wildfly.common.net.CidrAddress;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
v6 = <org.wildfly.common.net.CidrAddressTable: boolean $assertionsDisabled>;
if v6 != 0 goto label01;
if v4 != 0 goto label01;
if v5 != 0 goto label01;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label01:
v8 = v0.<org.wildfly.common.net.CidrAddressTable: java.util.concurrent.atomic.AtomicReference mappingsRef>;
v9 = virtualinvoke v1.<org.wildfly.common.net.CidrAddress: java.net.InetAddress getNetworkAddress()>();
v10 = virtualinvoke v9.<java.net.InetAddress: byte[] getAddress()>();
label02:
v11 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v12 = virtualinvoke v1.<org.wildfly.common.net.CidrAddress: int getNetmaskBits()>();
v13 = virtualinvoke v1.<org.wildfly.common.net.CidrAddress: int getScopeId()>();
v14 = specialinvoke v0.<org.wildfly.common.net.CidrAddressTable: int doFind(org.wildfly.common.net.CidrAddressTable$Mapping[],byte[],int,int)>(v11, v10, v12, v13);
if v14 >= 0 goto label04;
if v4 != 0 goto label03;
return null;
label03:
v15 = null;
goto label05;
label04:
v16 = v11[v14];
v15 = v16.<org.wildfly.common.net.CidrAddressTable$Mapping: java.lang.Object value>;
label05:
if v2 == null goto label06;
v17 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v2, v15);
if v17 != 0 goto label07;
return v15;
label06:
v17 = 0;
label07:
if v14 < 0 goto label08;
if v5 != 0 goto label08;
return v15;
label08:
v18 = lengthof v11;
if v3 != null goto label13;
v19 = <org.wildfly.common.net.CidrAddressTable: boolean $assertionsDisabled>;
if v19 != 0 goto label09;
if v14 >= 0 goto label09;
v20 = new java.lang.AssertionError;
specialinvoke v20.<java.lang.AssertionError: void <init>()>();
throw v20;
label09:
if v18 != 1 goto label10;
staticinvoke <org.wildfly.common.net.CidrAddressTable: org.wildfly.common.net.CidrAddressTable$Mapping[] empty()>();
goto label19;
label10:
v21 = v11[v14];
v22 = v18 - 1;
v23 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(v11, v22);
v24 = v14 + 1;
v25 = v18 - v14;
v26 = v25 - 1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v11, v24, v23, v14, v26);
v27 = 0;
label11:
v28 = v18 - 1;
if v27 >= v28 goto label19;
v29 = v23[v27];
v30 = v29.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddressTable$Mapping parent>;
if v30 != v21 goto label12;
v31 = v23[v27];
v32 = v21.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddressTable$Mapping parent>;
v33 = virtualinvoke v31.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddressTable$Mapping withNewParent(org.wildfly.common.net.CidrAddressTable$Mapping)>(v32);
v23[v27] = v33;
label12:
v27 = v27 + 1;
goto label11;
label13:
if v14 < 0 goto label16;
virtualinvoke v11.<java.lang.Object: java.lang.Object clone()>();
v34 = v11[v14];
v35 = new org.wildfly.common.net.CidrAddressTable$Mapping;
v36 = v11[v14];
v37 = v36.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddressTable$Mapping parent>;
specialinvoke v35.<org.wildfly.common.net.CidrAddressTable$Mapping: void <init>(org.wildfly.common.net.CidrAddress,java.lang.Object,org.wildfly.common.net.CidrAddressTable$Mapping)>(v1, v3, v37);
v23[v14] = v35;
v38 = 0;
label14:
if v38 >= v18 goto label19;
if v38 == v14 goto label15;
v39 = v23[v38];
v40 = v39.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddressTable$Mapping parent>;
if v40 != v34 goto label15;
v41 = v23[v38];
v42 = virtualinvoke v41.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddressTable$Mapping withNewParent(org.wildfly.common.net.CidrAddressTable$Mapping)>(v35);
v23[v38] = v42;
label15:
v38 = v38 + 1;
goto label14;
label16:
v43 = v18 + 1;
staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(v11, v43);
v44 = virtualinvoke v1.<org.wildfly.common.net.CidrAddress: int getNetmaskBits()>();
v45 = virtualinvoke v1.<org.wildfly.common.net.CidrAddress: int getScopeId()>();
v46 = specialinvoke v0.<org.wildfly.common.net.CidrAddressTable: org.wildfly.common.net.CidrAddressTable$Mapping doGet(org.wildfly.common.net.CidrAddressTable$Mapping[],byte[],int,int)>(v11, v10, v44, v45);
v47 = new org.wildfly.common.net.CidrAddressTable$Mapping;
specialinvoke v47.<org.wildfly.common.net.CidrAddressTable$Mapping: void <init>(org.wildfly.common.net.CidrAddress,java.lang.Object,org.wildfly.common.net.CidrAddressTable$Mapping)>(v1, v3, v46);
v48 = neg v14;
v49 = v48 - 1;
v23[v49] = v47;
v50 = neg v14;
v51 = v50 - 1;
v52 = neg v14;
v53 = v18 + v14;
v54 = v53 + 1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v11, v51, v23, v52, v54);
v55 = 0;
label17:
if v55 > v18 goto label19;
v56 = v23[v55];
if v56 == v47 goto label18;
v57 = v23[v55];
v58 = v57.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddressTable$Mapping parent>;
if v58 != v46 goto label18;
v59 = v23[v55];
v60 = v59.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddress range>;
v61 = virtualinvoke v1.<org.wildfly.common.net.CidrAddress: boolean matches(org.wildfly.common.net.CidrAddress)>(v60);
if v61 == 0 goto label18;
v62 = v23[v55];
v63 = virtualinvoke v62.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddressTable$Mapping withNewParent(org.wildfly.common.net.CidrAddressTable$Mapping)>(v47);
v23[v55] = v63;
label18:
v55 = v55 + 1;
goto label17;
label19:
v64 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v11, v23);
if v64 == 0 goto label02;
if v17 == 0 goto label20;
v65 = v2;
goto label21;
label20:
v65 = v15;
label21:
return v65;
}
private static org.wildfly.common.net.CidrAddressTable$Mapping[] empty()
{
org.wildfly.common.net.CidrAddressTable$Mapping[] v0;
v0 = <org.wildfly.common.net.CidrAddressTable: org.wildfly.common.net.CidrAddressTable$Mapping[] NO_MAPPINGS>;
return v0;
}
public void clear()
{
java.util.concurrent.atomic.AtomicReference v1;
org.wildfly.common.net.CidrAddressTable$Mapping[] v2;
org.wildfly.common.net.CidrAddressTable v0;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 = v0.<org.wildfly.common.net.CidrAddressTable: java.util.concurrent.atomic.AtomicReference mappingsRef>;
v2 = staticinvoke <org.wildfly.common.net.CidrAddressTable: org.wildfly.common.net.CidrAddressTable$Mapping[] empty()>();
virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v2);
return;
}
public int size()
{
int v3;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
org.wildfly.common.net.CidrAddressTable v0;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 = v0.<org.wildfly.common.net.CidrAddressTable: java.util.concurrent.atomic.AtomicReference mappingsRef>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v3 = lengthof v2;
return v3;
}
public boolean isEmpty()
{
int v1;
boolean v2;
org.wildfly.common.net.CidrAddressTable v0;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 = virtualinvoke v0.<org.wildfly.common.net.CidrAddressTable: int size()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public org.wildfly.common.net.CidrAddressTable clone()
{
java.lang.Object v3;
java.util.concurrent.atomic.AtomicReference v2;
org.wildfly.common.net.CidrAddressTable v0, v1;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 = new org.wildfly.common.net.CidrAddressTable;
v2 = v0.<org.wildfly.common.net.CidrAddressTable: java.util.concurrent.atomic.AtomicReference mappingsRef>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
specialinvoke v1.<org.wildfly.common.net.CidrAddressTable: void <init>(org.wildfly.common.net.CidrAddressTable$Mapping[])>(v3);
return v1;
}
public java.util.Iterator iterator()
{
org.wildfly.common.net.CidrAddressTable$1 v3;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
org.wildfly.common.net.CidrAddressTable v0;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 = v0.<org.wildfly.common.net.CidrAddressTable: java.util.concurrent.atomic.AtomicReference mappingsRef>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v3 = new org.wildfly.common.net.CidrAddressTable$1;
specialinvoke v3.<org.wildfly.common.net.CidrAddressTable$1: void <init>(org.wildfly.common.net.CidrAddressTable,org.wildfly.common.net.CidrAddressTable$Mapping[])>(v0, v2);
return v3;
}
public java.util.Spliterator spliterator()
{
java.lang.Object v2;
java.util.Spliterator v3;
java.util.concurrent.atomic.AtomicReference v1;
org.wildfly.common.net.CidrAddressTable v0;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 = v0.<org.wildfly.common.net.CidrAddressTable: java.util.concurrent.atomic.AtomicReference mappingsRef>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v3 = staticinvoke <java.util.Spliterators: java.util.Spliterator spliterator(java.lang.Object[],int)>(v2, 1040);
return v3;
}
public java.lang.String toString()
{
java.util.concurrent.atomic.AtomicReference v2;
org.wildfly.common.net.CidrAddressTable$Mapping v13, v15, v8;
int v4, v6, v7;
java.lang.String v20, v9;
org.wildfly.common.net.CidrAddressTable v0;
java.lang.Object v19, v3;
java.lang.StringBuilder v1, v10, v11, v14, v17, v18, v5;
org.wildfly.common.net.CidrAddress v12, v16;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = v0.<org.wildfly.common.net.CidrAddressTable: java.util.concurrent.atomic.AtomicReference mappingsRef>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v4 = lengthof v3;
v5 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v4);
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mappings");
v6 = lengthof v3;
v7 = 0;
label1:
if v7 >= v6 goto label3;
v8 = v3[v7];
v9 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();
v10 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v9);
v11 = virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);
v12 = v8.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddress range>;
virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v12);
v13 = v8.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddressTable$Mapping parent>;
if v13 == null goto label2;
v14 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (parent ");
v15 = v8.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddressTable$Mapping parent>;
v16 = v15.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddress range>;
v17 = virtualinvoke v14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v16);
virtualinvoke v17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);
label2:
v18 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");
v19 = v8.<org.wildfly.common.net.CidrAddressTable$Mapping: java.lang.Object value>;
virtualinvoke v18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v19);
v7 = v7 + 1;
goto label1;
label3:
v20 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v20;
}
private int doFind(org.wildfly.common.net.CidrAddressTable$Mapping[], byte[], int, int)
{
byte[] v2;
org.wildfly.common.net.CidrAddressTable$Mapping[] v1;
org.wildfly.common.net.CidrAddressTable v0;
org.wildfly.common.net.CidrAddressTable$Mapping v10;
int v12, v13, v14, v3, v4, v5, v6, v7, v8, v9;
org.wildfly.common.net.CidrAddress v11;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 := @parameter0: org.wildfly.common.net.CidrAddressTable$Mapping[];
v2 := @parameter1: byte[];
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = 0;
v6 = lengthof v1;
v7 = v6 - 1;
label1:
if v5 > v7 goto label4;
v8 = v5 + v7;
v9 = v8 >>> 1;
v10 = v1[v9];
v11 = v10.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddress range>;
v12 = virtualinvoke v11.<org.wildfly.common.net.CidrAddress: int compareAddressBytesTo(byte[],int,int)>(v2, v3, v4);
if v12 >= 0 goto label2;
v5 = v9 + 1;
goto label1;
label2:
if v12 <= 0 goto label3;
v7 = v9 - 1;
goto label1;
label3:
return v9;
label4:
v13 = v5 + 1;
v14 = neg v13;
return v14;
}
private org.wildfly.common.net.CidrAddressTable$Mapping doGet(org.wildfly.common.net.CidrAddressTable$Mapping[], byte[], int, int)
{
byte[] v2;
java.lang.AssertionError v10;
org.wildfly.common.net.CidrAddressTable$Mapping v11, v14, v17, v18, v19, v7;
int v12, v13, v3, v4, v5;
boolean v16, v21, v6, v9;
org.wildfly.common.net.CidrAddressTable$Mapping[] v1;
org.wildfly.common.net.CidrAddressTable v0;
org.wildfly.common.net.CidrAddress v15, v20, v8;
v0 := @this: org.wildfly.common.net.CidrAddressTable;
v1 := @parameter0: org.wildfly.common.net.CidrAddressTable$Mapping[];
v2 := @parameter1: byte[];
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = specialinvoke v0.<org.wildfly.common.net.CidrAddressTable: int doFind(org.wildfly.common.net.CidrAddressTable$Mapping[],byte[],int,int)>(v1, v2, v3, v4);
if v5 < 0 goto label2;
v6 = <org.wildfly.common.net.CidrAddressTable: boolean $assertionsDisabled>;
if v6 != 0 goto label1;
v7 = v1[v5];
v8 = v7.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddress range>;
v9 = virtualinvoke v8.<org.wildfly.common.net.CidrAddress: boolean matches(byte[],int)>(v2, v4);
if v9 != 0 goto label1;
v10 = new java.lang.AssertionError;
specialinvoke v10.<java.lang.AssertionError: void <init>()>();
throw v10;
label1:
v11 = v1[v5];
return v11;
label2:
v12 = neg v5;
v13 = v12 - 2;
if v13 < 0 goto label6;
v14 = v1[v13];
v15 = v14.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddress range>;
v16 = virtualinvoke v15.<org.wildfly.common.net.CidrAddress: boolean matches(byte[],int)>(v2, v4);
if v16 == 0 goto label3;
v17 = v1[v13];
return v17;
label3:
v18 = v1[v13];
v19 = v18.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddressTable$Mapping parent>;
label4:
if v19 == null goto label6;
v20 = v19.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddress range>;
v21 = virtualinvoke v20.<org.wildfly.common.net.CidrAddress: boolean matches(byte[],int)>(v2, v4);
if v21 == 0 goto label5;
return v19;
label5:
v19 = v19.<org.wildfly.common.net.CidrAddressTable$Mapping: org.wildfly.common.net.CidrAddressTable$Mapping parent>;
goto label4;
label6:
return null;
}
static void <clinit>()
{
org.wildfly.common.net.CidrAddressTable$Mapping[] v3;
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lorg/wildfly/common/net/CidrAddressTable;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<org.wildfly.common.net.CidrAddressTable: boolean $assertionsDisabled> = v2;
v3 = newarray (org.wildfly.common.net.CidrAddressTable$Mapping)[0];
<org.wildfly.common.net.CidrAddressTable: org.wildfly.common.net.CidrAddressTable$Mapping[] NO_MAPPINGS> = v3;
return;
}
}