public class org.wildfly.common.ref.CleanerReference extends org.wildfly.common.ref.PhantomReference
{
private static final java.util.Set set;
public void <init>(java.lang.Object, java.lang.Object, org.wildfly.common.ref.Reaper)
{
org.wildfly.common.ref.Reaper v3;
java.util.Set v4;
java.lang.Object v1, v2;
org.wildfly.common.ref.CleanerReference v0;
v0 := @this: org.wildfly.common.ref.CleanerReference;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: org.wildfly.common.ref.Reaper;
specialinvoke v0.<org.wildfly.common.ref.PhantomReference: void <init>(java.lang.Object,java.lang.Object,org.wildfly.common.ref.Reaper)>(v1, v2, v3);
v4 = <org.wildfly.common.ref.CleanerReference: java.util.Set set>;
interfaceinvoke v4.<java.util.Set: boolean add(java.lang.Object)>(v0);
return;
}
void clean()
{
java.util.Set v1;
org.wildfly.common.ref.CleanerReference v0;
v0 := @this: org.wildfly.common.ref.CleanerReference;
v1 = <org.wildfly.common.ref.CleanerReference: java.util.Set set>;
interfaceinvoke v1.<java.util.Set: boolean remove(java.lang.Object)>(v0);
return;
}
public final int hashCode()
{
int v1;
org.wildfly.common.ref.CleanerReference v0;
v0 := @this: org.wildfly.common.ref.CleanerReference;
v1 = specialinvoke v0.<java.lang.Object: int hashCode()>();
return v1;
}
public final boolean equals(java.lang.Object)
{
java.lang.Object v1;
org.wildfly.common.ref.CleanerReference v0;
boolean v2;
v0 := @this: org.wildfly.common.ref.CleanerReference;
v1 := @parameter0: java.lang.Object;
v2 = specialinvoke v0.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
return v2;
}
static void <clinit>()
{
java.util.concurrent.ConcurrentHashMap v0;
java.util.Set v1;
v0 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v1 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>(v0);
<org.wildfly.common.ref.CleanerReference: java.util.Set set> = v1;
return;
}
}