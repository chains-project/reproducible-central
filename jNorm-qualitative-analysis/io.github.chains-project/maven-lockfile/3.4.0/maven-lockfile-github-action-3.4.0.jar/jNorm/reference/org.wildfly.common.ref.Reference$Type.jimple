public final enum class org.wildfly.common.ref.Reference$Type extends java.lang.Enum
{
public static final enum org.wildfly.common.ref.Reference$Type STRONG;
public static final enum org.wildfly.common.ref.Reference$Type WEAK;
public static final enum org.wildfly.common.ref.Reference$Type PHANTOM;
public static final enum org.wildfly.common.ref.Reference$Type SOFT;
public static final enum org.wildfly.common.ref.Reference$Type NULL;
private static final int fullSize;
private static final org.wildfly.common.ref.Reference$Type[] $VALUES;
public static org.wildfly.common.ref.Reference$Type[] values()
{
java.lang.Object v1;
org.wildfly.common.ref.Reference$Type[] v0;
v0 = <org.wildfly.common.ref.Reference$Type: org.wildfly.common.ref.Reference$Type[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static org.wildfly.common.ref.Reference$Type valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/wildfly/common/ref/Reference$Type;", v0);
return v1;
}
private void <init>(java.lang.String, int)
{
int v2;
java.lang.String v1;
org.wildfly.common.ref.Reference$Type v0;
v0 := @this: org.wildfly.common.ref.Reference$Type;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
return;
}
public static boolean isFull(java.util.EnumSet)
{
int v1, v2;
java.util.EnumSet v0;
boolean v3;
v0 := @parameter0: java.util.EnumSet;
if v0 == null goto label1;
v1 = virtualinvoke v0.<java.util.EnumSet: int size()>();
v2 = <org.wildfly.common.ref.Reference$Type: int fullSize>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean in(org.wildfly.common.ref.Reference$Type)
{
org.wildfly.common.ref.Reference$Type v0, v1;
boolean v2;
v0 := @this: org.wildfly.common.ref.Reference$Type;
v1 := @parameter0: org.wildfly.common.ref.Reference$Type;
if v0 != v1 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public boolean in(org.wildfly.common.ref.Reference$Type, org.wildfly.common.ref.Reference$Type)
{
org.wildfly.common.ref.Reference$Type v0, v1, v2;
boolean v3;
v0 := @this: org.wildfly.common.ref.Reference$Type;
v1 := @parameter0: org.wildfly.common.ref.Reference$Type;
v2 := @parameter1: org.wildfly.common.ref.Reference$Type;
if v0 == v1 goto label1;
if v0 != v2 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
public boolean in(org.wildfly.common.ref.Reference$Type, org.wildfly.common.ref.Reference$Type, org.wildfly.common.ref.Reference$Type)
{
org.wildfly.common.ref.Reference$Type v0, v1, v2, v3;
boolean v4;
v0 := @this: org.wildfly.common.ref.Reference$Type;
v1 := @parameter0: org.wildfly.common.ref.Reference$Type;
v2 := @parameter1: org.wildfly.common.ref.Reference$Type;
v3 := @parameter2: org.wildfly.common.ref.Reference$Type;
if v0 == v1 goto label1;
if v0 == v2 goto label1;
if v0 != v3 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
public transient boolean in(org.wildfly.common.ref.Reference$Type[])
{
org.wildfly.common.ref.Reference$Type v0, v4;
org.wildfly.common.ref.Reference$Type[] v1;
int v2, v3;
v0 := @this: org.wildfly.common.ref.Reference$Type;
v1 := @parameter0: org.wildfly.common.ref.Reference$Type[];
if v1 == null goto label3;
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v1[v3];
if v0 != v4 goto label2;
return 1;
label2:
v3 = v3 + 1;
goto label1;
label3:
return 0;
}
private static org.wildfly.common.ref.Reference$Type[] $values()
{
org.wildfly.common.ref.Reference$Type v1, v2, v3, v4, v5;
org.wildfly.common.ref.Reference$Type[] v0;
v0 = newarray (org.wildfly.common.ref.Reference$Type)[5];
v1 = <org.wildfly.common.ref.Reference$Type: org.wildfly.common.ref.Reference$Type STRONG>;
v0[0] = v1;
v2 = <org.wildfly.common.ref.Reference$Type: org.wildfly.common.ref.Reference$Type WEAK>;
v0[1] = v2;
v3 = <org.wildfly.common.ref.Reference$Type: org.wildfly.common.ref.Reference$Type PHANTOM>;
v0[2] = v3;
v4 = <org.wildfly.common.ref.Reference$Type: org.wildfly.common.ref.Reference$Type SOFT>;
v0[3] = v4;
v5 = <org.wildfly.common.ref.Reference$Type: org.wildfly.common.ref.Reference$Type NULL>;
v0[4] = v5;
return v0;
}
static void <clinit>()
{
org.wildfly.common.ref.Reference$Type[] v5, v6;
org.wildfly.common.ref.Reference$Type v0, v1, v2, v3, v4;
int v7;
v0 = new org.wildfly.common.ref.Reference$Type;
specialinvoke v0.<org.wildfly.common.ref.Reference$Type: void <init>(java.lang.String,int)>("STRONG", 0);
<org.wildfly.common.ref.Reference$Type: org.wildfly.common.ref.Reference$Type STRONG> = v0;
v1 = new org.wildfly.common.ref.Reference$Type;
specialinvoke v1.<org.wildfly.common.ref.Reference$Type: void <init>(java.lang.String,int)>("WEAK", 1);
<org.wildfly.common.ref.Reference$Type: org.wildfly.common.ref.Reference$Type WEAK> = v1;
v2 = new org.wildfly.common.ref.Reference$Type;
specialinvoke v2.<org.wildfly.common.ref.Reference$Type: void <init>(java.lang.String,int)>("PHANTOM", 2);
<org.wildfly.common.ref.Reference$Type: org.wildfly.common.ref.Reference$Type PHANTOM> = v2;
v3 = new org.wildfly.common.ref.Reference$Type;
specialinvoke v3.<org.wildfly.common.ref.Reference$Type: void <init>(java.lang.String,int)>("SOFT", 3);
<org.wildfly.common.ref.Reference$Type: org.wildfly.common.ref.Reference$Type SOFT> = v3;
v4 = new org.wildfly.common.ref.Reference$Type;
specialinvoke v4.<org.wildfly.common.ref.Reference$Type: void <init>(java.lang.String,int)>("NULL", 4);
<org.wildfly.common.ref.Reference$Type: org.wildfly.common.ref.Reference$Type NULL> = v4;
v5 = staticinvoke <org.wildfly.common.ref.Reference$Type: org.wildfly.common.ref.Reference$Type[] $values()>();
<org.wildfly.common.ref.Reference$Type: org.wildfly.common.ref.Reference$Type[] $VALUES> = v5;
v6 = staticinvoke <org.wildfly.common.ref.Reference$Type: org.wildfly.common.ref.Reference$Type[] values()>();
v7 = lengthof v6;
<org.wildfly.common.ref.Reference$Type: int fullSize> = v7;
return;
}
}