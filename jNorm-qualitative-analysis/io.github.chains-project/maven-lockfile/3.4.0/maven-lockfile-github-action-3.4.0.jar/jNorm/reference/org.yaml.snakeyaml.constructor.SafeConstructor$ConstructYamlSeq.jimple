public class org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq extends java.lang.Object implements org.yaml.snakeyaml.constructor.Construct
{
final org.yaml.snakeyaml.constructor.SafeConstructor this$0;
public void <init>(org.yaml.snakeyaml.constructor.SafeConstructor)
{
org.yaml.snakeyaml.constructor.SafeConstructor v1;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq v0;
v0 := @this: org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq;
v1 := @parameter0: org.yaml.snakeyaml.constructor.SafeConstructor;
v0.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq: org.yaml.snakeyaml.constructor.SafeConstructor this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.nodes.Node v1;
java.util.List v4, v6;
org.yaml.snakeyaml.constructor.SafeConstructor v3, v5;
boolean v2;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq v0;
v0 := @this: org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: boolean isTwoStepsConstruction()>();
if v2 == 0 goto label1;
v3 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq: org.yaml.snakeyaml.constructor.SafeConstructor this$0>;
v4 = virtualinvoke v3.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.List newList(org.yaml.snakeyaml.nodes.SequenceNode)>(v1);
return v4;
label1:
v5 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq: org.yaml.snakeyaml.constructor.SafeConstructor this$0>;
v6 = virtualinvoke v5.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.List constructSequence(org.yaml.snakeyaml.nodes.SequenceNode)>(v1);
return v6;
}
public void construct2ndStep(org.yaml.snakeyaml.nodes.Node, java.lang.Object)
{
org.yaml.snakeyaml.nodes.Node v1;
org.yaml.snakeyaml.constructor.SafeConstructor v4;
java.lang.Object v2;
java.lang.String v6;
boolean v3;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq v0;
org.yaml.snakeyaml.error.YAMLException v5;
v0 := @this: org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: boolean isTwoStepsConstruction()>();
if v3 == 0 goto label1;
v4 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq: org.yaml.snakeyaml.constructor.SafeConstructor this$0>;
virtualinvoke v4.<org.yaml.snakeyaml.constructor.SafeConstructor: void constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.util.Collection)>(v1, v2);
goto label2;
label1:
v5 = new org.yaml.snakeyaml.error.YAMLException;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.yaml.snakeyaml.nodes.Node)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected recursive sequence structure. Node: \u0001");
specialinvoke v5.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v6);
throw v5;
label2:
return;
}
}