class org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue extends java.lang.Object implements org.yaml.snakeyaml.emitter.EmitterState
{
final org.yaml.snakeyaml.emitter.Emitter this$0;
private void <init>(org.yaml.snakeyaml.emitter.Emitter)
{
org.yaml.snakeyaml.emitter.Emitter v1;
org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue v0;
v0 := @this: org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue;
v1 := @parameter0: org.yaml.snakeyaml.emitter.Emitter;
v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue: org.yaml.snakeyaml.emitter.Emitter this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void expect() throws java.io.IOException
{
org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue v0;
org.yaml.snakeyaml.events.Event v17, v6, v7;
org.yaml.snakeyaml.comments.CommentEventsCollector v15, v4;
org.yaml.snakeyaml.util.ArrayStack v10;
org.yaml.snakeyaml.emitter.Emitter v1, v12, v13, v14, v16, v18, v2, v3, v5, v8, v9;
org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingKey v11;
v0 := @this: org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue;
v1 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
virtualinvoke v1.<org.yaml.snakeyaml.emitter.Emitter: void writeIndicator(java.lang.String,boolean,boolean,boolean)>(":", 0, 0, 0);
v2 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
v3 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
v4 = v3.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.comments.CommentEventsCollector inlineCommentsCollector>;
v5 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
v6 = v5.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.events.Event event>;
v7 = virtualinvoke v4.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.events.Event collectEventsAndPoll(org.yaml.snakeyaml.events.Event)>(v6);
v2.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.events.Event event> = v7;
v8 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
specialinvoke v8.<org.yaml.snakeyaml.emitter.Emitter: boolean writeInlineComments()>();
v9 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
v10 = v9.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.util.ArrayStack states>;
v11 = new org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingKey;
v12 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
specialinvoke v11.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingKey: void <init>(org.yaml.snakeyaml.emitter.Emitter)>(v12);
virtualinvoke v10.<org.yaml.snakeyaml.util.ArrayStack: void push(java.lang.Object)>(v11);
v13 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
specialinvoke v13.<org.yaml.snakeyaml.emitter.Emitter: void expectNode(boolean,boolean,boolean)>(0, 1, 0);
v14 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
v15 = v14.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.comments.CommentEventsCollector inlineCommentsCollector>;
v16 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
v17 = v16.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.events.Event event>;
virtualinvoke v15.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.events.Event collectEvents(org.yaml.snakeyaml.events.Event)>(v17);
v18 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingSimpleValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
specialinvoke v18.<org.yaml.snakeyaml.emitter.Emitter: boolean writeInlineComments()>();
return;
}
}