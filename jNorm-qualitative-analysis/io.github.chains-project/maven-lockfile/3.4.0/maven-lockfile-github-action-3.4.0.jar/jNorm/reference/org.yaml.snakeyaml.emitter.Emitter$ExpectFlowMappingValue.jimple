class org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue extends java.lang.Object implements org.yaml.snakeyaml.emitter.EmitterState
{
final org.yaml.snakeyaml.emitter.Emitter this$0;
private void <init>(org.yaml.snakeyaml.emitter.Emitter)
{
org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue v0;
org.yaml.snakeyaml.emitter.Emitter v1;
v0 := @this: org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue;
v1 := @parameter0: org.yaml.snakeyaml.emitter.Emitter;
v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue: org.yaml.snakeyaml.emitter.Emitter this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void expect() throws java.io.IOException
{
org.yaml.snakeyaml.events.Event v17, v18, v28;
org.yaml.snakeyaml.comments.CommentEventsCollector v15, v26;
int v5, v7;
java.lang.Boolean v2, v9;
boolean v10, v3;
org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue v0;
org.yaml.snakeyaml.util.ArrayStack v21;
org.yaml.snakeyaml.emitter.Emitter v1, v11, v12, v13, v14, v16, v19, v20, v23, v24, v25, v27, v29, v4, v6, v8;
org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingKey v22;
v0 := @this: org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue;
v1 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
v2 = v1.<org.yaml.snakeyaml.emitter.Emitter: java.lang.Boolean canonical>;
v3 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
if v3 != 0 goto label1;
v4 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
v5 = v4.<org.yaml.snakeyaml.emitter.Emitter: int column>;
v6 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
v7 = v6.<org.yaml.snakeyaml.emitter.Emitter: int bestWidth>;
if v5 > v7 goto label1;
v8 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
v9 = v8.<org.yaml.snakeyaml.emitter.Emitter: java.lang.Boolean prettyFlow>;
v10 = virtualinvoke v9.<java.lang.Boolean: boolean booleanValue()>();
if v10 == 0 goto label2;
label1:
v11 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
virtualinvoke v11.<org.yaml.snakeyaml.emitter.Emitter: void writeIndent()>();
label2:
v12 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
virtualinvoke v12.<org.yaml.snakeyaml.emitter.Emitter: void writeIndicator(java.lang.String,boolean,boolean,boolean)>(":", 1, 0, 0);
v13 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
v14 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
v15 = v14.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.comments.CommentEventsCollector inlineCommentsCollector>;
v16 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
v17 = v16.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.events.Event event>;
v18 = virtualinvoke v15.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.events.Event collectEventsAndPoll(org.yaml.snakeyaml.events.Event)>(v17);
v13.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.events.Event event> = v18;
v19 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
specialinvoke v19.<org.yaml.snakeyaml.emitter.Emitter: boolean writeInlineComments()>();
v20 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
v21 = v20.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.util.ArrayStack states>;
v22 = new org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingKey;
v23 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
specialinvoke v22.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingKey: void <init>(org.yaml.snakeyaml.emitter.Emitter)>(v23);
virtualinvoke v21.<org.yaml.snakeyaml.util.ArrayStack: void push(java.lang.Object)>(v22);
v24 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
specialinvoke v24.<org.yaml.snakeyaml.emitter.Emitter: void expectNode(boolean,boolean,boolean)>(0, 1, 0);
v25 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
v26 = v25.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.comments.CommentEventsCollector inlineCommentsCollector>;
v27 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
v28 = v27.<org.yaml.snakeyaml.emitter.Emitter: org.yaml.snakeyaml.events.Event event>;
virtualinvoke v26.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.events.Event collectEvents(org.yaml.snakeyaml.events.Event)>(v28);
v29 = v0.<org.yaml.snakeyaml.emitter.Emitter$ExpectFlowMappingValue: org.yaml.snakeyaml.emitter.Emitter this$0>;
specialinvoke v29.<org.yaml.snakeyaml.emitter.Emitter: boolean writeInlineComments()>();
return;
}
}