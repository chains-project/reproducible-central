public class org.yaml.snakeyaml.env.EnvScalarConstructor extends org.yaml.snakeyaml.constructor.Constructor
{
public static final org.yaml.snakeyaml.nodes.Tag ENV_TAG;
public static final java.util.regex.Pattern ENV_FORMAT;
public void <init>()
{
org.yaml.snakeyaml.env.EnvScalarConstructor$ConstructEnv v4;
java.util.Map v2;
org.yaml.snakeyaml.LoaderOptions v1;
org.yaml.snakeyaml.env.EnvScalarConstructor v0;
org.yaml.snakeyaml.nodes.Tag v3;
v0 := @this: org.yaml.snakeyaml.env.EnvScalarConstructor;
v1 = new org.yaml.snakeyaml.LoaderOptions;
specialinvoke v1.<org.yaml.snakeyaml.LoaderOptions: void <init>()>();
specialinvoke v0.<org.yaml.snakeyaml.constructor.Constructor: void <init>(org.yaml.snakeyaml.LoaderOptions)>(v1);
v2 = v0.<org.yaml.snakeyaml.env.EnvScalarConstructor: java.util.Map yamlConstructors>;
v3 = <org.yaml.snakeyaml.env.EnvScalarConstructor: org.yaml.snakeyaml.nodes.Tag ENV_TAG>;
v4 = new org.yaml.snakeyaml.env.EnvScalarConstructor$ConstructEnv;
specialinvoke v4.<org.yaml.snakeyaml.env.EnvScalarConstructor$ConstructEnv: void <init>(org.yaml.snakeyaml.env.EnvScalarConstructor)>(v0);
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, v4);
return;
}
public void <init>(org.yaml.snakeyaml.TypeDescription, java.util.Collection, org.yaml.snakeyaml.LoaderOptions)
{
org.yaml.snakeyaml.env.EnvScalarConstructor$ConstructEnv v6;
java.util.Collection v2;
java.util.Map v4;
org.yaml.snakeyaml.LoaderOptions v3;
org.yaml.snakeyaml.TypeDescription v1;
org.yaml.snakeyaml.env.EnvScalarConstructor v0;
org.yaml.snakeyaml.nodes.Tag v5;
v0 := @this: org.yaml.snakeyaml.env.EnvScalarConstructor;
v1 := @parameter0: org.yaml.snakeyaml.TypeDescription;
v2 := @parameter1: java.util.Collection;
v3 := @parameter2: org.yaml.snakeyaml.LoaderOptions;
specialinvoke v0.<org.yaml.snakeyaml.constructor.Constructor: void <init>(org.yaml.snakeyaml.TypeDescription,java.util.Collection,org.yaml.snakeyaml.LoaderOptions)>(v1, v2, v3);
v4 = v0.<org.yaml.snakeyaml.env.EnvScalarConstructor: java.util.Map yamlConstructors>;
v5 = <org.yaml.snakeyaml.env.EnvScalarConstructor: org.yaml.snakeyaml.nodes.Tag ENV_TAG>;
v6 = new org.yaml.snakeyaml.env.EnvScalarConstructor$ConstructEnv;
specialinvoke v6.<org.yaml.snakeyaml.env.EnvScalarConstructor$ConstructEnv: void <init>(org.yaml.snakeyaml.env.EnvScalarConstructor)>(v0);
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v5, v6);
return;
}
public java.lang.String apply(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
{
java.lang.String v1, v11, v14, v2, v3, v4, v8;
boolean v12, v15, v16, v5, v6, v9;
org.yaml.snakeyaml.env.EnvScalarConstructor v0;
org.yaml.snakeyaml.error.MissingEnvironmentVariableException v10, v13, v7;
v0 := @this: org.yaml.snakeyaml.env.EnvScalarConstructor;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
if v4 == null goto label1;
v5 = virtualinvoke v4.<java.lang.String: boolean isEmpty()>();
if v5 != 0 goto label1;
return v4;
label1:
if v2 == null goto label7;
v6 = virtualinvoke v2.<java.lang.String: boolean equals(java.lang.Object)>("?");
if v6 == 0 goto label2;
if v4 != null goto label2;
v7 = new org.yaml.snakeyaml.error.MissingEnvironmentVariableException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v1, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Missing mandatory variable \u0001: \u0001");
specialinvoke v7.<org.yaml.snakeyaml.error.MissingEnvironmentVariableException: void <init>(java.lang.String)>(v8);
throw v7;
label2:
v9 = virtualinvoke v2.<java.lang.String: boolean equals(java.lang.Object)>(":?");
if v9 == 0 goto label4;
if v4 != null goto label3;
v10 = new org.yaml.snakeyaml.error.MissingEnvironmentVariableException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v1, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Missing mandatory variable \u0001: \u0001");
specialinvoke v10.<org.yaml.snakeyaml.error.MissingEnvironmentVariableException: void <init>(java.lang.String)>(v11);
throw v10;
label3:
v12 = virtualinvoke v4.<java.lang.String: boolean isEmpty()>();
if v12 == 0 goto label4;
v13 = new org.yaml.snakeyaml.error.MissingEnvironmentVariableException;
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v1, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Empty mandatory variable \u0001: \u0001");
specialinvoke v13.<org.yaml.snakeyaml.error.MissingEnvironmentVariableException: void <init>(java.lang.String)>(v14);
throw v13;
label4:
v15 = virtualinvoke v2.<java.lang.String: boolean startsWith(java.lang.String)>(":");
if v15 == 0 goto label6;
if v4 == null goto label5;
v16 = virtualinvoke v4.<java.lang.String: boolean isEmpty()>();
if v16 == 0 goto label7;
label5:
return v3;
label6:
if v4 != null goto label7;
return v3;
label7:
return "";
}
public java.lang.String getEnv(java.lang.String)
{
java.lang.String v1, v2;
org.yaml.snakeyaml.env.EnvScalarConstructor v0;
v0 := @this: org.yaml.snakeyaml.env.EnvScalarConstructor;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(v1);
return v2;
}
static void <clinit>()
{
java.util.regex.Pattern v1;
org.yaml.snakeyaml.nodes.Tag v0;
v0 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v0.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>("!ENV");
<org.yaml.snakeyaml.env.EnvScalarConstructor: org.yaml.snakeyaml.nodes.Tag ENV_TAG> = v0;
v1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^\\$\\{\\s*((?<name>\\w+)((?<separator>:?(-|\\?))(?<value>\\S+)?)?)\\s*\\}$");
<org.yaml.snakeyaml.env.EnvScalarConstructor: java.util.regex.Pattern ENV_FORMAT> = v1;
return;
}
}