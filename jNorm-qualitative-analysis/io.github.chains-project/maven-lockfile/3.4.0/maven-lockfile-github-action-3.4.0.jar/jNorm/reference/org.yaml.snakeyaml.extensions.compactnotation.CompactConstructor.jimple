public class org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor extends org.yaml.snakeyaml.constructor.Constructor
{
private static final java.util.regex.Pattern GUESS_COMPACT;
private static final java.util.regex.Pattern FIRST_PATTERN;
private static final java.util.regex.Pattern PROPERTY_NAME_PATTERN;
private org.yaml.snakeyaml.constructor.Construct compactConstruct;
public void <init>(org.yaml.snakeyaml.LoaderOptions)
{
org.yaml.snakeyaml.LoaderOptions v1;
org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor v0;
v0 := @this: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor;
v1 := @parameter0: org.yaml.snakeyaml.LoaderOptions;
specialinvoke v0.<org.yaml.snakeyaml.constructor.Constructor: void <init>(org.yaml.snakeyaml.LoaderOptions)>(v1);
return;
}
public void <init>()
{
org.yaml.snakeyaml.LoaderOptions v1;
org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor v0;
v0 := @this: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor;
v1 = new org.yaml.snakeyaml.LoaderOptions;
specialinvoke v1.<org.yaml.snakeyaml.LoaderOptions: void <init>()>();
specialinvoke v0.<org.yaml.snakeyaml.constructor.Constructor: void <init>(org.yaml.snakeyaml.LoaderOptions)>(v1);
return;
}
protected java.lang.Object constructCompactFormat(org.yaml.snakeyaml.nodes.ScalarNode, org.yaml.snakeyaml.extensions.compactnotation.CompactData)
{
org.yaml.snakeyaml.extensions.compactnotation.CompactData v2;
java.util.HashMap v4;
java.lang.Exception v6;
org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor v0;
java.util.Map v5;
org.yaml.snakeyaml.nodes.ScalarNode v1;
java.lang.Object v3;
org.yaml.snakeyaml.error.YAMLException v7;
v0 := @this: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.ScalarNode;
v2 := @parameter1: org.yaml.snakeyaml.extensions.compactnotation.CompactData;
label1:
v3 = virtualinvoke v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: java.lang.Object createInstance(org.yaml.snakeyaml.nodes.ScalarNode,org.yaml.snakeyaml.extensions.compactnotation.CompactData)>(v1, v2);
v4 = new java.util.HashMap;
v5 = virtualinvoke v2.<org.yaml.snakeyaml.extensions.compactnotation.CompactData: java.util.Map getProperties()>();
specialinvoke v4.<java.util.HashMap: void <init>(java.util.Map)>(v5);
virtualinvoke v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: void setProperties(java.lang.Object,java.util.Map)>(v3, v4);
label2:
return v3;
label3:
v6 := @caughtexception;
v7 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v7.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.Throwable)>(v6);
throw v7;
catch java.lang.Exception from label1 to label2 with label3;
}
protected java.lang.Object createInstance(org.yaml.snakeyaml.nodes.ScalarNode, org.yaml.snakeyaml.extensions.compactnotation.CompactData) throws java.lang.Exception
{
java.lang.Object[] v12;
org.yaml.snakeyaml.extensions.compactnotation.CompactData v2;
java.lang.Class[] v7;
java.lang.reflect.Constructor v10;
org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor v0;
java.util.List v11, v5;
int v6, v8, v9;
org.yaml.snakeyaml.nodes.ScalarNode v1;
java.lang.Class v4;
java.lang.Object v13;
java.lang.String v3;
v0 := @this: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.ScalarNode;
v2 := @parameter1: org.yaml.snakeyaml.extensions.compactnotation.CompactData;
v3 = virtualinvoke v2.<org.yaml.snakeyaml.extensions.compactnotation.CompactData: java.lang.String getPrefix()>();
v4 = virtualinvoke v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: java.lang.Class getClassForName(java.lang.String)>(v3);
v5 = virtualinvoke v2.<org.yaml.snakeyaml.extensions.compactnotation.CompactData: java.util.List getArguments()>();
v6 = interfaceinvoke v5.<java.util.List: int size()>();
v7 = newarray (java.lang.Class)[v6];
v8 = 0;
label1:
v9 = lengthof v7;
if v8 >= v9 goto label2;
v7[v8] = class "Ljava/lang/String;";
v8 = v8 + 1;
goto label1;
label2:
v10 = virtualinvoke v4.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(v7);
virtualinvoke v10.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);
v11 = virtualinvoke v2.<org.yaml.snakeyaml.extensions.compactnotation.CompactData: java.util.List getArguments()>();
v12 = interfaceinvoke v11.<java.util.List: java.lang.Object[] toArray()>();
v13 = virtualinvoke v10.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v12);
return v13;
}
protected void setProperties(java.lang.Object, java.util.Map) throws java.lang.Exception
{
java.lang.NullPointerException v3;
java.util.Map v2;
java.lang.String v18;
boolean v6;
java.util.Iterator v5;
org.yaml.snakeyaml.introspector.Property v11;
java.util.Set v4;
java.lang.IllegalArgumentException v13;
org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor v0;
java.lang.Class v10, v17;
java.lang.Object v1, v12, v15, v16, v7, v8;
org.yaml.snakeyaml.introspector.PropertyUtils v9;
org.yaml.snakeyaml.error.YAMLException v14;
v0 := @this: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.util.Map;
if v2 != null goto label1;
v3 = new java.lang.NullPointerException;
specialinvoke v3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Data for Compact Object Notation cannot be null.");
throw v3;
label1:
v4 = interfaceinvoke v2.<java.util.Map: java.util.Set entrySet()>();
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label2:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label6;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getKey()>();
v9 = virtualinvoke v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: org.yaml.snakeyaml.introspector.PropertyUtils getPropertyUtils()>();
v10 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v11 = virtualinvoke v9.<org.yaml.snakeyaml.introspector.PropertyUtils: org.yaml.snakeyaml.introspector.Property getProperty(java.lang.Class,java.lang.String)>(v10, v8);
label3:
v12 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v11.<org.yaml.snakeyaml.introspector.Property: void set(java.lang.Object,java.lang.Object)>(v1, v12);
label4:
goto label2;
label5:
v13 := @caughtexception;
v14 = new org.yaml.snakeyaml.error.YAMLException;
v15 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v8);
v16 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v8);
v17 = virtualinvoke v16.<java.lang.Object: java.lang.Class getClass()>();
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Object,java.lang.Class,java.lang.Object)>(v8, v15, v17, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot set property=\'\u0001\' with value=\'\u0001\' (\u0001) in \u0001");
specialinvoke v14.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v18);
throw v14;
label6:
return;
catch java.lang.IllegalArgumentException from label3 to label4 with label5;
}
public org.yaml.snakeyaml.extensions.compactnotation.CompactData getCompactData(java.lang.String)
{
java.lang.String[] v12;
java.util.regex.Matcher v19, v5;
java.util.Map v24;
int v11, v13, v14, v16, v3;
java.lang.String v1, v15, v21, v22, v23, v7, v8, v9;
boolean v2, v20, v6;
org.yaml.snakeyaml.extensions.compactnotation.CompactData v10;
org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor v0;
java.util.List v17;
java.util.regex.Pattern v18, v4;
v0 := @this: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: boolean endsWith(java.lang.String)>(")");
if v2 != 0 goto label1;
return null;
label1:
v3 = virtualinvoke v1.<java.lang.String: int indexOf(int)>(40);
if v3 >= 0 goto label2;
return null;
label2:
v4 = <org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: java.util.regex.Pattern FIRST_PATTERN>;
v5 = virtualinvoke v4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v1);
v6 = virtualinvoke v5.<java.util.regex.Matcher: boolean matches()>();
if v6 == 0 goto label9;
v7 = virtualinvoke v5.<java.util.regex.Matcher: java.lang.String group(int)>(1);
v8 = virtualinvoke v7.<java.lang.String: java.lang.String trim()>();
v9 = virtualinvoke v5.<java.util.regex.Matcher: java.lang.String group(int)>(3);
v10 = new org.yaml.snakeyaml.extensions.compactnotation.CompactData;
specialinvoke v10.<org.yaml.snakeyaml.extensions.compactnotation.CompactData: void <init>(java.lang.String)>(v8);
v11 = virtualinvoke v9.<java.lang.String: int length()>();
if v11 != 0 goto label3;
return v10;
label3:
v12 = virtualinvoke v9.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s*,\\s*");
v13 = 0;
label4:
v14 = lengthof v12;
if v13 >= v14 goto label8;
v15 = v12[v13];
v16 = virtualinvoke v15.<java.lang.String: int indexOf(int)>(61);
if v16 >= 0 goto label5;
v17 = virtualinvoke v10.<org.yaml.snakeyaml.extensions.compactnotation.CompactData: java.util.List getArguments()>();
interfaceinvoke v17.<java.util.List: boolean add(java.lang.Object)>(v15);
goto label7;
label5:
v18 = <org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: java.util.regex.Pattern PROPERTY_NAME_PATTERN>;
v19 = virtualinvoke v18.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v15);
v20 = virtualinvoke v19.<java.util.regex.Matcher: boolean matches()>();
if v20 == 0 goto label6;
v21 = virtualinvoke v19.<java.util.regex.Matcher: java.lang.String group(int)>(1);
v22 = virtualinvoke v19.<java.util.regex.Matcher: java.lang.String group(int)>(2);
v23 = virtualinvoke v22.<java.lang.String: java.lang.String trim()>();
v24 = virtualinvoke v10.<org.yaml.snakeyaml.extensions.compactnotation.CompactData: java.util.Map getProperties()>();
interfaceinvoke v24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v21, v23);
goto label7;
label6:
return null;
label7:
v13 = v13 + 1;
goto label4;
label8:
return v10;
label9:
return null;
}
private org.yaml.snakeyaml.constructor.Construct getCompactConstruct()
{
org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor v0;
org.yaml.snakeyaml.constructor.Construct v1, v2, v3;
v0 := @this: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor;
v1 = v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: org.yaml.snakeyaml.constructor.Construct compactConstruct>;
if v1 != null goto label1;
v2 = virtualinvoke v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: org.yaml.snakeyaml.constructor.Construct createCompactConstruct()>();
v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: org.yaml.snakeyaml.constructor.Construct compactConstruct> = v2;
label1:
v3 = v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: org.yaml.snakeyaml.constructor.Construct compactConstruct>;
return v3;
}
protected org.yaml.snakeyaml.constructor.Construct createCompactConstruct()
{
org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor$ConstructCompactObject v1;
org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor v0;
v0 := @this: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor;
v1 = new org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor$ConstructCompactObject;
specialinvoke v1.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor$ConstructCompactObject: void <init>(org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor)>(v0);
return v1;
}
protected org.yaml.snakeyaml.constructor.Construct getConstructor(org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.nodes.Node v1, v6;
java.util.regex.Matcher v10, v16;
int v4;
java.lang.String v15, v9;
boolean v11, v13, v17, v2, v7;
org.yaml.snakeyaml.constructor.Construct v12, v18, v19;
org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor v0;
java.util.List v3;
java.lang.Object v5;
java.util.regex.Pattern v14, v8;
v0 := @this: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = v1 instanceof org.yaml.snakeyaml.nodes.MappingNode;
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List getValue()>();
v4 = interfaceinvoke v3.<java.util.List: int size()>();
if v4 != 1 goto label2;
v5 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(0);
v6 = virtualinvoke v5.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
v7 = v6 instanceof org.yaml.snakeyaml.nodes.ScalarNode;
if v7 == 0 goto label2;
v8 = <org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: java.util.regex.Pattern GUESS_COMPACT>;
v9 = virtualinvoke v6.<org.yaml.snakeyaml.nodes.ScalarNode: java.lang.String getValue()>();
v10 = virtualinvoke v8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v9);
v11 = virtualinvoke v10.<java.util.regex.Matcher: boolean matches()>();
if v11 == 0 goto label2;
v12 = specialinvoke v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: org.yaml.snakeyaml.constructor.Construct getCompactConstruct()>();
return v12;
label1:
v13 = v1 instanceof org.yaml.snakeyaml.nodes.ScalarNode;
if v13 == 0 goto label2;
v14 = <org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: java.util.regex.Pattern GUESS_COMPACT>;
v15 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.ScalarNode: java.lang.String getValue()>();
v16 = virtualinvoke v14.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v15);
v17 = virtualinvoke v16.<java.util.regex.Matcher: boolean matches()>();
if v17 == 0 goto label2;
v18 = specialinvoke v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: org.yaml.snakeyaml.constructor.Construct getCompactConstruct()>();
return v18;
label2:
v19 = specialinvoke v0.<org.yaml.snakeyaml.constructor.Constructor: org.yaml.snakeyaml.constructor.Construct getConstructor(org.yaml.snakeyaml.nodes.Node)>(v1);
return v19;
}
protected void applySequence(java.lang.Object, java.util.List)
{
org.yaml.snakeyaml.introspector.Property v7;
java.lang.Exception v8;
org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor v0;
java.util.List v2;
java.lang.Class v4, v5;
java.lang.Object v1;
java.lang.String v6;
org.yaml.snakeyaml.introspector.PropertyUtils v3;
org.yaml.snakeyaml.error.YAMLException v9;
v0 := @this: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.util.List;
label1:
v3 = virtualinvoke v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: org.yaml.snakeyaml.introspector.PropertyUtils getPropertyUtils()>();
v4 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v5 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: java.lang.String getSequencePropertyName(java.lang.Class)>(v5);
v7 = virtualinvoke v3.<org.yaml.snakeyaml.introspector.PropertyUtils: org.yaml.snakeyaml.introspector.Property getProperty(java.lang.Class,java.lang.String)>(v4, v6);
virtualinvoke v7.<org.yaml.snakeyaml.introspector.Property: void set(java.lang.Object,java.lang.Object)>(v1, v2);
label2:
goto label4;
label3:
v8 := @caughtexception;
v9 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v9.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.Throwable)>(v8);
throw v9;
label4:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
protected java.lang.String getSequencePropertyName(java.lang.Class)
{
int v10, v13;
java.lang.String v12, v15, v18;
boolean v5, v9;
java.util.Iterator v16, v4;
java.util.Set v3;
org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor v0;
java.lang.Class v1, v7, v8;
java.lang.Object v17, v6;
org.yaml.snakeyaml.introspector.PropertyUtils v2;
org.yaml.snakeyaml.error.YAMLException v11, v14;
v0 := @this: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: org.yaml.snakeyaml.introspector.PropertyUtils getPropertyUtils()>();
v3 = virtualinvoke v2.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Set getProperties(java.lang.Class)>(v1);
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = class "Ljava/util/List;";
v8 = virtualinvoke v6.<org.yaml.snakeyaml.introspector.Property: java.lang.Class getType()>();
v9 = virtualinvoke v7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v8);
if v9 != 0 goto label1;
interfaceinvoke v4.<java.util.Iterator: void remove()>();
goto label1;
label2:
v10 = interfaceinvoke v3.<java.util.Set: int size()>();
if v10 != 0 goto label3;
v11 = new org.yaml.snakeyaml.error.YAMLException;
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No list property found in \u0001");
specialinvoke v11.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v12);
throw v11;
label3:
v13 = interfaceinvoke v3.<java.util.Set: int size()>();
if v13 <= 1 goto label4;
v14 = new org.yaml.snakeyaml.error.YAMLException;
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Many list properties found in \u0001; Please override getSequencePropertyName() to specify which property to use.");
specialinvoke v14.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v15);
throw v14;
label4:
v16 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
v17 = interfaceinvoke v16.<java.util.Iterator: java.lang.Object next()>();
v18 = virtualinvoke v17.<org.yaml.snakeyaml.introspector.Property: java.lang.String getName()>();
return v18;
}
static void <clinit>()
{
java.util.regex.Pattern v0, v1, v2;
v0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\p{Alpha}.*\\s*\\((?:,?\\s*(?:(?:\\w*)|(?:\\p{Alpha}\\w*\\s*=.+))\\s*)+\\)");
<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: java.util.regex.Pattern GUESS_COMPACT> = v0;
v1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\p{Alpha}.*)(\\s*)\\((.*?)\\)");
<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: java.util.regex.Pattern FIRST_PATTERN> = v1;
v2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s*(\\p{Alpha}\\w*)\\s*=(.+)");
<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: java.util.regex.Pattern PROPERTY_NAME_PATTERN> = v2;
return;
}
}