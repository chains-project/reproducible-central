public class org.yaml.snakeyaml.introspector.PropertySubstitute extends org.yaml.snakeyaml.introspector.Property
{
private static final org.yaml.snakeyaml.internal.Logger log;
protected java.lang.Class targetType;
private final java.lang.String readMethod;
private final java.lang.String writeMethod;
private transient java.lang.reflect.Method read;
private transient java.lang.reflect.Method write;
private java.lang.reflect.Field field;
protected java.lang.Class[] parameters;
private org.yaml.snakeyaml.introspector.Property delegate;
private boolean filler;
public transient void <init>(java.lang.String, java.lang.Class, java.lang.String, java.lang.String, java.lang.Class[])
{
java.lang.Class[] v5;
java.lang.Class v2;
java.lang.String v1, v3, v4;
org.yaml.snakeyaml.introspector.PropertySubstitute v0;
v0 := @this: org.yaml.snakeyaml.introspector.PropertySubstitute;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: java.lang.Class[];
specialinvoke v0.<org.yaml.snakeyaml.introspector.Property: void <init>(java.lang.String,java.lang.Class)>(v1, v2);
v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.String readMethod> = v3;
v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.String writeMethod> = v4;
virtualinvoke v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: void setActualTypeArguments(java.lang.Class[])>(v5);
v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: boolean filler> = 0;
return;
}
public transient void <init>(java.lang.String, java.lang.Class, java.lang.Class[])
{
java.lang.Class[] v3;
java.lang.Class v2;
java.lang.String v1;
org.yaml.snakeyaml.introspector.PropertySubstitute v0;
v0 := @this: org.yaml.snakeyaml.introspector.PropertySubstitute;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
v3 := @parameter2: java.lang.Class[];
specialinvoke v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: void <init>(java.lang.String,java.lang.Class,java.lang.String,java.lang.String,java.lang.Class[])>(v1, v2, null, null, v3);
return;
}
public java.lang.Class[] getActualTypeArguments()
{
org.yaml.snakeyaml.introspector.Property v2, v3;
java.lang.Class[] v1, v4, v5;
org.yaml.snakeyaml.introspector.PropertySubstitute v0;
v0 := @this: org.yaml.snakeyaml.introspector.PropertySubstitute;
v1 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.Class[] parameters>;
if v1 != null goto label1;
v2 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.introspector.Property delegate>;
if v2 == null goto label1;
v3 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.introspector.Property delegate>;
v4 = virtualinvoke v3.<org.yaml.snakeyaml.introspector.Property: java.lang.Class[] getActualTypeArguments()>();
return v4;
label1:
v5 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.Class[] parameters>;
return v5;
}
public transient void setActualTypeArguments(java.lang.Class[])
{
int v2;
java.lang.Class[] v1;
org.yaml.snakeyaml.introspector.PropertySubstitute v0;
v0 := @this: org.yaml.snakeyaml.introspector.PropertySubstitute;
v1 := @parameter0: java.lang.Class[];
if v1 == null goto label1;
v2 = lengthof v1;
if v2 <= 0 goto label1;
v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.Class[] parameters> = v1;
goto label2;
label1:
v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.Class[] parameters> = null;
label2:
return;
}
public void set(java.lang.Object, java.lang.Object) throws java.lang.Exception
{
java.lang.reflect.Method v11, v18, v26, v3, v5;
boolean v13, v16, v23, v4, v7, v9;
org.yaml.snakeyaml.internal.Logger v33;
org.yaml.snakeyaml.introspector.Property v31, v32;
java.util.Set v14;
org.yaml.snakeyaml.introspector.PropertySubstitute v0;
java.lang.Object[] v12, v19, v27, v6;
int v24, v25;
java.lang.String v34, v35;
java.util.Iterator v15, v8;
java.lang.reflect.Field v29, v30;
java.lang.Class v22;
java.lang.Object v1, v10, v17, v2, v20, v21, v28;
v0 := @this: org.yaml.snakeyaml.introspector.PropertySubstitute;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method write>;
if v3 == null goto label07;
v4 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: boolean filler>;
if v4 != 0 goto label01;
v5 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method write>;
v6 = newarray (java.lang.Object)[1];
v6[0] = v2;
virtualinvoke v5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v1, v6);
goto label10;
label01:
if v2 == null goto label10;
v7 = v2 instanceof java.util.Collection;
if v7 == 0 goto label03;
v8 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
label02:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label10;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method write>;
v12 = newarray (java.lang.Object)[1];
v12[0] = v10;
virtualinvoke v11.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v1, v12);
goto label02;
label03:
v13 = v2 instanceof java.util.Map;
if v13 == 0 goto label05;
v14 = interfaceinvoke v2.<java.util.Map: java.util.Set entrySet()>();
v15 = interfaceinvoke v14.<java.util.Set: java.util.Iterator iterator()>();
label04:
v16 = interfaceinvoke v15.<java.util.Iterator: boolean hasNext()>();
if v16 == 0 goto label10;
v17 = interfaceinvoke v15.<java.util.Iterator: java.lang.Object next()>();
v18 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method write>;
v19 = newarray (java.lang.Object)[2];
v20 = interfaceinvoke v17.<java.util.Map$Entry: java.lang.Object getKey()>();
v19[0] = v20;
v21 = interfaceinvoke v17.<java.util.Map$Entry: java.lang.Object getValue()>();
v19[1] = v21;
virtualinvoke v18.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v1, v19);
goto label04;
label05:
v22 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v23 = virtualinvoke v22.<java.lang.Class: boolean isArray()>();
if v23 == 0 goto label10;
v24 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(v2);
v25 = 0;
label06:
if v25 >= v24 goto label10;
v26 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method write>;
v27 = newarray (java.lang.Object)[1];
v28 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(v2, v25);
v27[0] = v28;
virtualinvoke v26.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v1, v27);
v25 = v25 + 1;
goto label06;
label07:
v29 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Field field>;
if v29 == null goto label08;
v30 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Field field>;
virtualinvoke v30.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(v1, v2);
goto label10;
label08:
v31 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.introspector.Property delegate>;
if v31 == null goto label09;
v32 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.introspector.Property delegate>;
virtualinvoke v32.<org.yaml.snakeyaml.introspector.Property: void set(java.lang.Object,java.lang.Object)>(v1, v2);
goto label10;
label09:
v33 = <org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.internal.Logger log>;
v34 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.String getName()>();
v35 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Object)>(v34, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No setter/delegate for \'\u0001\' on object \u0001");
virtualinvoke v33.<org.yaml.snakeyaml.internal.Logger: void warn(java.lang.String)>(v35);
label10:
return;
}
public java.lang.Object get(java.lang.Object)
{
java.lang.Object[] v4;
java.lang.String v11, v12, v17, v18;
java.lang.reflect.Method v2, v3;
org.yaml.snakeyaml.introspector.Property v13, v14;
java.lang.reflect.Field v6, v7;
org.yaml.snakeyaml.introspector.PropertySubstitute v0;
java.lang.Exception v9;
java.lang.Object v1, v15, v5, v8;
org.yaml.snakeyaml.error.YAMLException v10, v16;
v0 := @this: org.yaml.snakeyaml.introspector.PropertySubstitute;
v1 := @parameter0: java.lang.Object;
label1:
v2 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method read>;
if v2 == null goto label3;
v3 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method read>;
v4 = newarray (java.lang.Object)[0];
v5 = virtualinvoke v3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v1, v4);
label2:
return v5;
label3:
v6 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Field field>;
if v6 == null goto label6;
v7 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Field field>;
v8 = virtualinvoke v7.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(v1);
label4:
return v8;
label5:
v9 := @caughtexception;
v10 = new org.yaml.snakeyaml.error.YAMLException;
v11 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.String getName()>();
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Object,java.lang.Exception)>(v11, v1, v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unable to find getter for property \'\u0001\' on object \u0001:\u0001");
specialinvoke v10.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v12);
throw v10;
label6:
v13 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.introspector.Property delegate>;
if v13 == null goto label7;
v14 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.introspector.Property delegate>;
v15 = virtualinvoke v14.<org.yaml.snakeyaml.introspector.Property: java.lang.Object get(java.lang.Object)>(v1);
return v15;
label7:
v16 = new org.yaml.snakeyaml.error.YAMLException;
v17 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.String getName()>();
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Object)>(v17, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No getter or delegate for property \'\u0001\' on object \u0001");
specialinvoke v16.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v18);
throw v16;
catch java.lang.Exception from label1 to label2 with label5;
catch java.lang.Exception from label3 to label4 with label5;
}
public java.util.List getAnnotations()
{
org.yaml.snakeyaml.introspector.Property v7;
java.lang.'annotation'.Annotation[] v1;
java.lang.reflect.Field v4, v5;
org.yaml.snakeyaml.introspector.PropertySubstitute v0;
java.util.List v6;
java.lang.reflect.Method v2, v3;
v0 := @this: org.yaml.snakeyaml.introspector.PropertySubstitute;
v1 = null;
v2 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method read>;
if v2 == null goto label1;
v3 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method read>;
v1 = virtualinvoke v3.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>();
goto label2;
label1:
v4 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Field field>;
if v4 == null goto label2;
v5 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Field field>;
v1 = virtualinvoke v5.<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getAnnotations()>();
label2:
if v1 == null goto label3;
v6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
goto label4;
label3:
v7 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.introspector.Property delegate>;
v6 = virtualinvoke v7.<org.yaml.snakeyaml.introspector.Property: java.util.List getAnnotations()>();
label4:
return v6;
}
public java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)
{
org.yaml.snakeyaml.introspector.Property v7;
java.lang.reflect.Field v5, v6;
org.yaml.snakeyaml.introspector.PropertySubstitute v0;
java.lang.'annotation'.Annotation v4;
java.lang.Class v1;
java.lang.reflect.Method v2, v3;
v0 := @this: org.yaml.snakeyaml.introspector.PropertySubstitute;
v1 := @parameter0: java.lang.Class;
v2 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method read>;
if v2 == null goto label1;
v3 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method read>;
v4 = virtualinvoke v3.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(v1);
goto label3;
label1:
v5 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Field field>;
if v5 == null goto label2;
v6 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Field field>;
v4 = virtualinvoke v6.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(v1);
goto label3;
label2:
v7 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.introspector.Property delegate>;
v4 = virtualinvoke v7.<org.yaml.snakeyaml.introspector.Property: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(v1);
label3:
return v4;
}
public void setTargetType(java.lang.Class)
{
java.lang.reflect.Method v26, v31, v32, v36;
boolean v10, v12, v13, v17;
org.yaml.snakeyaml.internal.Logger v15, v18;
org.yaml.snakeyaml.introspector.PropertySubstitute v0;
java.lang.Object[] v19;
int v11, v6, v7;
java.lang.String v20, v21, v22, v23, v24, v27, v28, v3, v34, v9;
java.lang.Class[] v25, v29, v33, v35;
java.lang.reflect.Field v14, v8;
org.yaml.snakeyaml.internal.Logger$Level v16;
java.lang.reflect.Field[] v5;
java.lang.Class v1, v2, v30, v4;
v0 := @this: org.yaml.snakeyaml.introspector.PropertySubstitute;
v1 := @parameter0: java.lang.Class;
v2 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.Class targetType>;
if v2 == v1 goto label8;
v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.Class targetType> = v1;
v3 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.String getName()>();
v4 = v1;
label1:
if v4 == null goto label5;
v5 = virtualinvoke v4.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();
v6 = lengthof v5;
v7 = 0;
label2:
if v7 >= v6 goto label4;
v8 = v5[v7];
v9 = virtualinvoke v8.<java.lang.reflect.Field: java.lang.String getName()>();
v10 = virtualinvoke v9.<java.lang.String: boolean equals(java.lang.Object)>(v3);
if v10 == 0 goto label3;
v11 = virtualinvoke v8.<java.lang.reflect.Field: int getModifiers()>();
v12 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(v11);
if v12 != 0 goto label4;
v13 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>(v11);
if v13 != 0 goto label4;
virtualinvoke v8.<java.lang.reflect.Field: void setAccessible(boolean)>(1);
v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Field field> = v8;
goto label4;
label3:
v7 = v7 + 1;
goto label2;
label4:
v4 = virtualinvoke v4.<java.lang.Class: java.lang.Class getSuperclass()>();
goto label1;
label5:
v14 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Field field>;
if v14 != null goto label6;
v15 = <org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.internal.Logger log>;
v16 = <org.yaml.snakeyaml.internal.Logger$Level: org.yaml.snakeyaml.internal.Logger$Level WARNING>;
v17 = virtualinvoke v15.<org.yaml.snakeyaml.internal.Logger: boolean isLoggable(org.yaml.snakeyaml.internal.Logger$Level)>(v16);
if v17 == 0 goto label6;
v18 = <org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.internal.Logger log>;
v19 = newarray (java.lang.Object)[2];
v20 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v19[0] = v20;
v21 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.String getName()>();
v19[1] = v21;
v22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to find field for %s.%s", v19);
virtualinvoke v18.<org.yaml.snakeyaml.internal.Logger: void warn(java.lang.String)>(v22);
label6:
v23 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.String readMethod>;
if v23 == null goto label7;
v24 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.String readMethod>;
v25 = newarray (java.lang.Class)[0];
v26 = specialinvoke v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method discoverMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(v1, v24, v25);
v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method read> = v26;
label7:
v27 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.String writeMethod>;
if v27 == null goto label8;
v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: boolean filler> = 0;
v28 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.String writeMethod>;
v29 = newarray (java.lang.Class)[1];
v30 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.Class getType()>();
v29[0] = v30;
v31 = specialinvoke v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method discoverMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(v1, v28, v29);
v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method write> = v31;
v32 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method write>;
if v32 != null goto label8;
v33 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.Class[] parameters>;
if v33 == null goto label8;
v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: boolean filler> = 1;
v34 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.String writeMethod>;
v35 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.Class[] parameters>;
v36 = specialinvoke v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method discoverMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(v1, v34, v35);
v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method write> = v36;
label8:
return;
}
private transient java.lang.reflect.Method discoverMethod(java.lang.Class, java.lang.String, java.lang.Class[])
{
java.lang.Object[] v24;
java.lang.Integer v26;
java.lang.reflect.Method[] v5;
int v12, v13, v15, v16, v25, v6, v7;
java.lang.String v2, v28, v29, v30, v9;
java.lang.reflect.Method v8;
boolean v10, v14, v19, v22;
org.yaml.snakeyaml.internal.Logger v20, v23;
java.lang.Class[] v11, v3;
org.yaml.snakeyaml.introspector.PropertySubstitute v0;
org.yaml.snakeyaml.internal.Logger$Level v21;
java.lang.Class v1, v17, v18, v27, v4;
v0 := @this: org.yaml.snakeyaml.introspector.PropertySubstitute;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.Class[];
v4 = v1;
label1:
if v4 == null goto label8;
v5 = virtualinvoke v4.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();
v6 = lengthof v5;
v7 = 0;
label2:
if v7 >= v6 goto label7;
v8 = v5[v7];
v9 = virtualinvoke v8.<java.lang.reflect.Method: java.lang.String getName()>();
v10 = virtualinvoke v2.<java.lang.String: boolean equals(java.lang.Object)>(v9);
if v10 == 0 goto label6;
v11 = virtualinvoke v8.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
v12 = lengthof v11;
v13 = lengthof v3;
if v12 != v13 goto label6;
v14 = 1;
v15 = 0;
label3:
v16 = lengthof v11;
if v15 >= v16 goto label5;
v17 = v11[v15];
v18 = v3[v15];
v19 = virtualinvoke v17.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v18);
if v19 != 0 goto label4;
v14 = 0;
label4:
v15 = v15 + 1;
goto label3;
label5:
if v14 == 0 goto label6;
virtualinvoke v8.<java.lang.reflect.Method: void setAccessible(boolean)>(1);
return v8;
label6:
v7 = v7 + 1;
goto label2;
label7:
v4 = virtualinvoke v4.<java.lang.Class: java.lang.Class getSuperclass()>();
goto label1;
label8:
v20 = <org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.internal.Logger log>;
v21 = <org.yaml.snakeyaml.internal.Logger$Level: org.yaml.snakeyaml.internal.Logger$Level WARNING>;
v22 = virtualinvoke v20.<org.yaml.snakeyaml.internal.Logger: boolean isLoggable(org.yaml.snakeyaml.internal.Logger$Level)>(v21);
if v22 == 0 goto label9;
v23 = <org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.internal.Logger log>;
v24 = newarray (java.lang.Object)[4];
v24[0] = v2;
v25 = lengthof v3;
v26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v25);
v24[1] = v26;
v27 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.Class targetType>;
v28 = virtualinvoke v27.<java.lang.Class: java.lang.String getName()>();
v24[2] = v28;
v29 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.String getName()>();
v24[3] = v29;
v30 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to find [%s(%d args)] for %s.%s", v24);
virtualinvoke v23.<org.yaml.snakeyaml.internal.Logger: void warn(java.lang.String)>(v30);
label9:
return null;
}
public java.lang.String getName()
{
org.yaml.snakeyaml.introspector.Property v2, v3;
java.lang.String v1, v4;
org.yaml.snakeyaml.introspector.PropertySubstitute v0;
v0 := @this: org.yaml.snakeyaml.introspector.PropertySubstitute;
v1 = specialinvoke v0.<org.yaml.snakeyaml.introspector.Property: java.lang.String getName()>();
if v1 == null goto label1;
return v1;
label1:
v2 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.introspector.Property delegate>;
if v2 == null goto label2;
v3 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.introspector.Property delegate>;
v4 = virtualinvoke v3.<org.yaml.snakeyaml.introspector.Property: java.lang.String getName()>();
goto label3;
label2:
v4 = null;
label3:
return v4;
}
public java.lang.Class getType()
{
org.yaml.snakeyaml.introspector.Property v2, v3;
java.lang.Class v1, v4;
org.yaml.snakeyaml.introspector.PropertySubstitute v0;
v0 := @this: org.yaml.snakeyaml.introspector.PropertySubstitute;
v1 = specialinvoke v0.<org.yaml.snakeyaml.introspector.Property: java.lang.Class getType()>();
if v1 == null goto label1;
return v1;
label1:
v2 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.introspector.Property delegate>;
if v2 == null goto label2;
v3 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.introspector.Property delegate>;
v4 = virtualinvoke v3.<org.yaml.snakeyaml.introspector.Property: java.lang.Class getType()>();
goto label3;
label2:
v4 = null;
label3:
return v4;
}
public boolean isReadable()
{
org.yaml.snakeyaml.introspector.Property v3, v4;
java.lang.reflect.Field v2;
org.yaml.snakeyaml.introspector.PropertySubstitute v0;
java.lang.reflect.Method v1;
boolean v5, v6;
v0 := @this: org.yaml.snakeyaml.introspector.PropertySubstitute;
v1 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method read>;
if v1 != null goto label1;
v2 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Field field>;
if v2 != null goto label1;
v3 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.introspector.Property delegate>;
if v3 == null goto label2;
v4 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.introspector.Property delegate>;
v5 = virtualinvoke v4.<org.yaml.snakeyaml.introspector.Property: boolean isReadable()>();
if v5 == 0 goto label2;
label1:
v6 = 1;
goto label3;
label2:
v6 = 0;
label3:
return v6;
}
public boolean isWritable()
{
org.yaml.snakeyaml.introspector.Property v3, v4;
java.lang.reflect.Field v2;
org.yaml.snakeyaml.introspector.PropertySubstitute v0;
java.lang.reflect.Method v1;
boolean v5, v6;
v0 := @this: org.yaml.snakeyaml.introspector.PropertySubstitute;
v1 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method write>;
if v1 != null goto label1;
v2 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Field field>;
if v2 != null goto label1;
v3 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.introspector.Property delegate>;
if v3 == null goto label2;
v4 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.introspector.Property delegate>;
v5 = virtualinvoke v4.<org.yaml.snakeyaml.introspector.Property: boolean isWritable()>();
if v5 == 0 goto label2;
label1:
v6 = 1;
goto label3;
label2:
v6 = 0;
label3:
return v6;
}
public void setDelegate(org.yaml.snakeyaml.introspector.Property)
{
org.yaml.snakeyaml.introspector.Property v1;
java.lang.Class[] v7;
org.yaml.snakeyaml.introspector.PropertySubstitute v0;
java.lang.Class v5;
java.lang.String v2, v6;
java.lang.reflect.Method v3, v8;
boolean v4;
v0 := @this: org.yaml.snakeyaml.introspector.PropertySubstitute;
v1 := @parameter0: org.yaml.snakeyaml.introspector.Property;
v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.introspector.Property delegate> = v1;
v2 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.String writeMethod>;
if v2 == null goto label1;
v3 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method write>;
if v3 != null goto label1;
v4 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: boolean filler>;
if v4 != 0 goto label1;
v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: boolean filler> = 1;
v5 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.Class targetType>;
v6 = v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.String writeMethod>;
v7 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.Class[] getActualTypeArguments()>();
v8 = specialinvoke v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method discoverMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(v5, v6, v7);
v0.<org.yaml.snakeyaml.introspector.PropertySubstitute: java.lang.reflect.Method write> = v8;
label1:
return;
}
static void <clinit>()
{
java.lang.Package v1;
org.yaml.snakeyaml.internal.Logger v3;
java.lang.Class v0;
java.lang.String v2;
v0 = class "Lorg/yaml/snakeyaml/introspector/PropertySubstitute;";
v1 = virtualinvoke v0.<java.lang.Class: java.lang.Package getPackage()>();
v2 = virtualinvoke v1.<java.lang.Package: java.lang.String getName()>();
v3 = staticinvoke <org.yaml.snakeyaml.internal.Logger: org.yaml.snakeyaml.internal.Logger getLogger(java.lang.String)>(v2);
<org.yaml.snakeyaml.introspector.PropertySubstitute: org.yaml.snakeyaml.internal.Logger log> = v3;
return;
}
}