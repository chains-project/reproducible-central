public class org.yaml.snakeyaml.introspector.PropertyUtils extends java.lang.Object
{
private final java.util.Map propertiesCache;
private final java.util.Map readableProperties;
private org.yaml.snakeyaml.introspector.BeanAccess beanAccess;
private boolean allowReadOnlyProperties;
private boolean skipMissingProperties;
private final org.yaml.snakeyaml.util.PlatformFeatureDetector platformFeatureDetector;
private static final java.lang.String TRANSIENT;
public void <init>()
{
org.yaml.snakeyaml.introspector.PropertyUtils v0;
org.yaml.snakeyaml.util.PlatformFeatureDetector v1;
v0 := @this: org.yaml.snakeyaml.introspector.PropertyUtils;
v1 = new org.yaml.snakeyaml.util.PlatformFeatureDetector;
specialinvoke v1.<org.yaml.snakeyaml.util.PlatformFeatureDetector: void <init>()>();
specialinvoke v0.<org.yaml.snakeyaml.introspector.PropertyUtils: void <init>(org.yaml.snakeyaml.util.PlatformFeatureDetector)>(v1);
return;
}
void <init>(org.yaml.snakeyaml.util.PlatformFeatureDetector)
{
org.yaml.snakeyaml.introspector.BeanAccess v4, v6;
java.util.HashMap v2, v3;
org.yaml.snakeyaml.introspector.PropertyUtils v0;
boolean v5;
org.yaml.snakeyaml.util.PlatformFeatureDetector v1;
v0 := @this: org.yaml.snakeyaml.introspector.PropertyUtils;
v1 := @parameter0: org.yaml.snakeyaml.util.PlatformFeatureDetector;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
v0.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Map propertiesCache> = v2;
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>()>();
v0.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Map readableProperties> = v3;
v4 = <org.yaml.snakeyaml.introspector.BeanAccess: org.yaml.snakeyaml.introspector.BeanAccess DEFAULT>;
v0.<org.yaml.snakeyaml.introspector.PropertyUtils: org.yaml.snakeyaml.introspector.BeanAccess beanAccess> = v4;
v0.<org.yaml.snakeyaml.introspector.PropertyUtils: boolean allowReadOnlyProperties> = 0;
v0.<org.yaml.snakeyaml.introspector.PropertyUtils: boolean skipMissingProperties> = 0;
v0.<org.yaml.snakeyaml.introspector.PropertyUtils: org.yaml.snakeyaml.util.PlatformFeatureDetector platformFeatureDetector> = v1;
v5 = virtualinvoke v1.<org.yaml.snakeyaml.util.PlatformFeatureDetector: boolean isRunningOnAndroid()>();
if v5 == 0 goto label1;
v6 = <org.yaml.snakeyaml.introspector.BeanAccess: org.yaml.snakeyaml.introspector.BeanAccess FIELD>;
v0.<org.yaml.snakeyaml.introspector.PropertyUtils: org.yaml.snakeyaml.introspector.BeanAccess beanAccess> = v6;
label1:
return;
}
protected java.util.Map getPropertiesMap(java.lang.Class, org.yaml.snakeyaml.introspector.BeanAccess)
{
org.yaml.snakeyaml.introspector.BeanAccess v2, v9;
java.beans.PropertyDescriptor[] v23;
java.util.Map v3, v5, v50;
java.lang.reflect.Method v27;
boolean v16, v17, v19, v29, v30, v4, v41, v42, v43, v46, v8;
org.yaml.snakeyaml.introspector.FieldProperty v21, v45;
java.beans.IntrospectionException v33;
java.beans.PropertyDescriptor v26;
org.yaml.snakeyaml.introspector.PropertyUtils v0;
org.yaml.snakeyaml.error.YAMLException v34, v47;
org.yaml.snakeyaml.introspector.MethodProperty v32;
java.util.LinkedHashMap v7;
java.beans.BeanInfo v22;
int v12, v13, v15, v24, v25, v37, v38, v40;
java.lang.String v18, v20, v28, v31, v44, v48, v49;
java.lang.reflect.Field v14, v39;
java.lang.reflect.Field[] v11, v36;
java.lang.Class v1, v10, v35;
java.lang.Object v6;
v0 := @this: org.yaml.snakeyaml.introspector.PropertyUtils;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: org.yaml.snakeyaml.introspector.BeanAccess;
v3 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Map propertiesCache>;
v4 = interfaceinvoke v3.<java.util.Map: boolean containsKey(java.lang.Object)>(v1);
if v4 == 0 goto label01;
v5 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Map propertiesCache>;
v6 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v6;
label01:
v7 = new java.util.LinkedHashMap;
specialinvoke v7.<java.util.LinkedHashMap: void <init>()>();
v8 = 0;
v9 = <org.yaml.snakeyaml.introspector.BeanAccess: org.yaml.snakeyaml.introspector.BeanAccess FIELD>;
if v2 != v9 goto label06;
v10 = v1;
label02:
if v10 == null goto label17;
v11 = virtualinvoke v10.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();
v12 = lengthof v11;
v13 = 0;
label03:
if v13 >= v12 goto label05;
v14 = v11[v13];
v15 = virtualinvoke v14.<java.lang.reflect.Field: int getModifiers()>();
v16 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(v15);
if v16 != 0 goto label04;
v17 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>(v15);
if v17 != 0 goto label04;
v18 = virtualinvoke v14.<java.lang.reflect.Field: java.lang.String getName()>();
v19 = interfaceinvoke v7.<java.util.Map: boolean containsKey(java.lang.Object)>(v18);
if v19 != 0 goto label04;
v20 = virtualinvoke v14.<java.lang.reflect.Field: java.lang.String getName()>();
v21 = new org.yaml.snakeyaml.introspector.FieldProperty;
specialinvoke v21.<org.yaml.snakeyaml.introspector.FieldProperty: void <init>(java.lang.reflect.Field)>(v14);
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v20, v21);
label04:
v13 = v13 + 1;
goto label03;
label05:
v10 = virtualinvoke v10.<java.lang.Class: java.lang.Class getSuperclass()>();
goto label02;
label06:
v22 = staticinvoke <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class)>(v1);
v23 = interfaceinvoke v22.<java.beans.BeanInfo: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();
v24 = lengthof v23;
v25 = 0;
label07:
if v25 >= v24 goto label11;
v26 = v23[v25];
v27 = virtualinvoke v26.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();
if v27 == null goto label08;
v28 = virtualinvoke v27.<java.lang.reflect.Method: java.lang.String getName()>();
v29 = virtualinvoke v28.<java.lang.String: boolean equals(java.lang.Object)>("getClass");
if v29 != 0 goto label09;
label08:
v30 = specialinvoke v0.<org.yaml.snakeyaml.introspector.PropertyUtils: boolean isTransient(java.beans.FeatureDescriptor)>(v26);
if v30 != 0 goto label09;
v31 = virtualinvoke v26.<java.beans.PropertyDescriptor: java.lang.String getName()>();
v32 = new org.yaml.snakeyaml.introspector.MethodProperty;
specialinvoke v32.<org.yaml.snakeyaml.introspector.MethodProperty: void <init>(java.beans.PropertyDescriptor)>(v26);
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v31, v32);
label09:
v25 = v25 + 1;
goto label07;
label10:
v33 := @caughtexception;
v34 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v34.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.Throwable)>(v33);
throw v34;
label11:
v35 = v1;
label12:
if v35 == null goto label17;
v36 = virtualinvoke v35.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();
v37 = lengthof v36;
v38 = 0;
label13:
if v38 >= v37 goto label16;
v39 = v36[v38];
v40 = virtualinvoke v39.<java.lang.reflect.Field: int getModifiers()>();
v41 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(v40);
if v41 != 0 goto label15;
v42 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>(v40);
if v42 != 0 goto label15;
v43 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(v40);
if v43 == 0 goto label14;
v44 = virtualinvoke v39.<java.lang.reflect.Field: java.lang.String getName()>();
v45 = new org.yaml.snakeyaml.introspector.FieldProperty;
specialinvoke v45.<org.yaml.snakeyaml.introspector.FieldProperty: void <init>(java.lang.reflect.Field)>(v39);
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v44, v45);
goto label15;
label14:
v8 = 1;
label15:
v38 = v38 + 1;
goto label13;
label16:
v35 = virtualinvoke v35.<java.lang.Class: java.lang.Class getSuperclass()>();
goto label12;
label17:
v46 = interfaceinvoke v7.<java.util.Map: boolean isEmpty()>();
if v46 == 0 goto label18;
if v8 == 0 goto label18;
v47 = new org.yaml.snakeyaml.error.YAMLException;
v48 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v49 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v48) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No JavaBean properties found in \u0001");
specialinvoke v47.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v49);
throw v47;
label18:
v50 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Map propertiesCache>;
interfaceinvoke v50.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v7);
return v7;
catch java.beans.IntrospectionException from label06 to label10 with label10;
}
private boolean isTransient(java.beans.FeatureDescriptor)
{
java.lang.Boolean v2;
java.lang.Object v3;
java.beans.FeatureDescriptor v1;
org.yaml.snakeyaml.introspector.PropertyUtils v0;
boolean v4;
v0 := @this: org.yaml.snakeyaml.introspector.PropertyUtils;
v1 := @parameter0: java.beans.FeatureDescriptor;
v2 = <java.lang.Boolean: java.lang.Boolean TRUE>;
v3 = virtualinvoke v1.<java.beans.FeatureDescriptor: java.lang.Object getValue(java.lang.String)>("transient");
v4 = virtualinvoke v2.<java.lang.Boolean: boolean equals(java.lang.Object)>(v3);
return v4;
}
public java.util.Set getProperties(java.lang.Class)
{
org.yaml.snakeyaml.introspector.BeanAccess v2;
java.util.Set v3;
java.lang.Class v1;
org.yaml.snakeyaml.introspector.PropertyUtils v0;
v0 := @this: org.yaml.snakeyaml.introspector.PropertyUtils;
v1 := @parameter0: java.lang.Class;
v2 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: org.yaml.snakeyaml.introspector.BeanAccess beanAccess>;
v3 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Set getProperties(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)>(v1, v2);
return v3;
}
public java.util.Set getProperties(java.lang.Class, org.yaml.snakeyaml.introspector.BeanAccess)
{
org.yaml.snakeyaml.introspector.BeanAccess v2;
java.util.Set v7;
java.util.Map v3, v5, v8;
java.lang.Class v1;
java.lang.Object v6;
org.yaml.snakeyaml.introspector.PropertyUtils v0;
boolean v4;
v0 := @this: org.yaml.snakeyaml.introspector.PropertyUtils;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: org.yaml.snakeyaml.introspector.BeanAccess;
v3 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Map readableProperties>;
v4 = interfaceinvoke v3.<java.util.Map: boolean containsKey(java.lang.Object)>(v1);
if v4 == 0 goto label1;
v5 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Map readableProperties>;
v6 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v6;
label1:
v7 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Set createPropertySet(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)>(v1, v2);
v8 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Map readableProperties>;
interfaceinvoke v8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v7);
return v7;
}
protected java.util.Set createPropertySet(java.lang.Class, org.yaml.snakeyaml.introspector.BeanAccess)
{
org.yaml.snakeyaml.introspector.BeanAccess v2;
java.util.Iterator v6;
java.util.Collection v5;
java.util.TreeSet v3;
java.util.Map v4;
java.lang.Class v1;
java.lang.Object v8;
org.yaml.snakeyaml.introspector.PropertyUtils v0;
boolean v10, v11, v7, v9;
v0 := @this: org.yaml.snakeyaml.introspector.PropertyUtils;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: org.yaml.snakeyaml.introspector.BeanAccess;
v3 = new java.util.TreeSet;
specialinvoke v3.<java.util.TreeSet: void <init>()>();
v4 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Map getPropertiesMap(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)>(v1, v2);
v5 = interfaceinvoke v4.<java.util.Map: java.util.Collection values()>();
v6 = interfaceinvoke v5.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label3;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = virtualinvoke v8.<org.yaml.snakeyaml.introspector.Property: boolean isReadable()>();
if v9 == 0 goto label1;
v10 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: boolean allowReadOnlyProperties>;
if v10 != 0 goto label2;
v11 = virtualinvoke v8.<org.yaml.snakeyaml.introspector.Property: boolean isWritable()>();
if v11 == 0 goto label1;
label2:
interfaceinvoke v3.<java.util.Set: boolean add(java.lang.Object)>(v8);
goto label1;
label3:
return v3;
}
public org.yaml.snakeyaml.introspector.Property getProperty(java.lang.Class, java.lang.String)
{
org.yaml.snakeyaml.introspector.BeanAccess v3;
org.yaml.snakeyaml.introspector.Property v4;
java.lang.Class v1;
java.lang.String v2;
org.yaml.snakeyaml.introspector.PropertyUtils v0;
v0 := @this: org.yaml.snakeyaml.introspector.PropertyUtils;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: org.yaml.snakeyaml.introspector.BeanAccess beanAccess>;
v4 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.PropertyUtils: org.yaml.snakeyaml.introspector.Property getProperty(java.lang.Class,java.lang.String,org.yaml.snakeyaml.introspector.BeanAccess)>(v1, v2, v3);
return v4;
}
public org.yaml.snakeyaml.introspector.Property getProperty(java.lang.Class, java.lang.String, org.yaml.snakeyaml.introspector.BeanAccess)
{
org.yaml.snakeyaml.introspector.BeanAccess v3;
org.yaml.snakeyaml.introspector.MissingProperty v7;
java.util.Map v4;
java.lang.Class v1;
java.lang.Object v5;
java.lang.String v10, v2, v9;
org.yaml.snakeyaml.introspector.PropertyUtils v0;
boolean v6;
org.yaml.snakeyaml.error.YAMLException v8;
v0 := @this: org.yaml.snakeyaml.introspector.PropertyUtils;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: org.yaml.snakeyaml.introspector.BeanAccess;
v4 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Map getPropertiesMap(java.lang.Class,org.yaml.snakeyaml.introspector.BeanAccess)>(v1, v3);
v5 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
if v5 != null goto label2;
v6 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: boolean skipMissingProperties>;
if v6 == 0 goto label1;
v7 = new org.yaml.snakeyaml.introspector.MissingProperty;
specialinvoke v7.<org.yaml.snakeyaml.introspector.MissingProperty: void <init>(java.lang.String)>(v2);
v5 = v7;
label1:
if v5 != null goto label2;
v8 = new org.yaml.snakeyaml.error.YAMLException;
v9 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v2, v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unable to find property \'\u0001\' on class: \u0001");
specialinvoke v8.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v10);
throw v8;
label2:
return v5;
}
public void setBeanAccess(org.yaml.snakeyaml.introspector.BeanAccess)
{
org.yaml.snakeyaml.introspector.BeanAccess v1, v4, v6;
java.lang.IllegalArgumentException v5;
java.util.Map v7, v8;
org.yaml.snakeyaml.introspector.PropertyUtils v0;
boolean v3;
org.yaml.snakeyaml.util.PlatformFeatureDetector v2;
v0 := @this: org.yaml.snakeyaml.introspector.PropertyUtils;
v1 := @parameter0: org.yaml.snakeyaml.introspector.BeanAccess;
v2 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: org.yaml.snakeyaml.util.PlatformFeatureDetector platformFeatureDetector>;
v3 = virtualinvoke v2.<org.yaml.snakeyaml.util.PlatformFeatureDetector: boolean isRunningOnAndroid()>();
if v3 == 0 goto label1;
v4 = <org.yaml.snakeyaml.introspector.BeanAccess: org.yaml.snakeyaml.introspector.BeanAccess FIELD>;
if v1 == v4 goto label1;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("JVM is Android - only BeanAccess.FIELD is available");
throw v5;
label1:
v6 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: org.yaml.snakeyaml.introspector.BeanAccess beanAccess>;
if v6 == v1 goto label2;
v0.<org.yaml.snakeyaml.introspector.PropertyUtils: org.yaml.snakeyaml.introspector.BeanAccess beanAccess> = v1;
v7 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Map propertiesCache>;
interfaceinvoke v7.<java.util.Map: void clear()>();
v8 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Map readableProperties>;
interfaceinvoke v8.<java.util.Map: void clear()>();
label2:
return;
}
public void setAllowReadOnlyProperties(boolean)
{
java.util.Map v3;
org.yaml.snakeyaml.introspector.PropertyUtils v0;
boolean v1, v2;
v0 := @this: org.yaml.snakeyaml.introspector.PropertyUtils;
v1 := @parameter0: boolean;
v2 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: boolean allowReadOnlyProperties>;
if v2 == v1 goto label1;
v0.<org.yaml.snakeyaml.introspector.PropertyUtils: boolean allowReadOnlyProperties> = v1;
v3 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Map readableProperties>;
interfaceinvoke v3.<java.util.Map: void clear()>();
label1:
return;
}
public boolean isAllowReadOnlyProperties()
{
org.yaml.snakeyaml.introspector.PropertyUtils v0;
boolean v1;
v0 := @this: org.yaml.snakeyaml.introspector.PropertyUtils;
v1 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: boolean allowReadOnlyProperties>;
return v1;
}
public void setSkipMissingProperties(boolean)
{
java.util.Map v3;
org.yaml.snakeyaml.introspector.PropertyUtils v0;
boolean v1, v2;
v0 := @this: org.yaml.snakeyaml.introspector.PropertyUtils;
v1 := @parameter0: boolean;
v2 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: boolean skipMissingProperties>;
if v2 == v1 goto label1;
v0.<org.yaml.snakeyaml.introspector.PropertyUtils: boolean skipMissingProperties> = v1;
v3 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Map readableProperties>;
interfaceinvoke v3.<java.util.Map: void clear()>();
label1:
return;
}
public boolean isSkipMissingProperties()
{
org.yaml.snakeyaml.introspector.PropertyUtils v0;
boolean v1;
v0 := @this: org.yaml.snakeyaml.introspector.PropertyUtils;
v1 = v0.<org.yaml.snakeyaml.introspector.PropertyUtils: boolean skipMissingProperties>;
return v1;
}
}