public class org.yaml.snakeyaml.nodes.MappingNode extends org.yaml.snakeyaml.nodes.CollectionNode
{
private java.util.List value;
private boolean merged;
public void <init>(org.yaml.snakeyaml.nodes.Tag, boolean, java.util.List, org.yaml.snakeyaml.error.Mark, org.yaml.snakeyaml.error.Mark, org.yaml.snakeyaml.DumperOptions$FlowStyle)
{
org.yaml.snakeyaml.DumperOptions$FlowStyle v6;
org.yaml.snakeyaml.nodes.Tag v1;
java.lang.NullPointerException v7;
org.yaml.snakeyaml.nodes.MappingNode v0;
java.util.List v3;
org.yaml.snakeyaml.error.Mark v4, v5;
boolean v2;
v0 := @this: org.yaml.snakeyaml.nodes.MappingNode;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Tag;
v2 := @parameter1: boolean;
v3 := @parameter2: java.util.List;
v4 := @parameter3: org.yaml.snakeyaml.error.Mark;
v5 := @parameter4: org.yaml.snakeyaml.error.Mark;
v6 := @parameter5: org.yaml.snakeyaml.DumperOptions$FlowStyle;
specialinvoke v0.<org.yaml.snakeyaml.nodes.CollectionNode: void <init>(org.yaml.snakeyaml.nodes.Tag,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v1, v4, v5, v6);
v0.<org.yaml.snakeyaml.nodes.MappingNode: boolean merged> = 0;
if v3 != null goto label1;
v7 = new java.lang.NullPointerException;
specialinvoke v7.<java.lang.NullPointerException: void <init>(java.lang.String)>("value in a Node is required.");
throw v7;
label1:
v0.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List value> = v3;
v0.<org.yaml.snakeyaml.nodes.MappingNode: boolean resolved> = v2;
return;
}
public void <init>(org.yaml.snakeyaml.nodes.Tag, java.util.List, org.yaml.snakeyaml.DumperOptions$FlowStyle)
{
java.util.List v2;
org.yaml.snakeyaml.DumperOptions$FlowStyle v3;
org.yaml.snakeyaml.nodes.Tag v1;
org.yaml.snakeyaml.nodes.MappingNode v0;
v0 := @this: org.yaml.snakeyaml.nodes.MappingNode;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Tag;
v2 := @parameter1: java.util.List;
v3 := @parameter2: org.yaml.snakeyaml.DumperOptions$FlowStyle;
specialinvoke v0.<org.yaml.snakeyaml.nodes.MappingNode: void <init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v1, 1, v2, null, null, v3);
return;
}
public org.yaml.snakeyaml.nodes.NodeId getNodeId()
{
org.yaml.snakeyaml.nodes.MappingNode v0;
org.yaml.snakeyaml.nodes.NodeId v1;
v0 := @this: org.yaml.snakeyaml.nodes.MappingNode;
v1 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId mapping>;
return v1;
}
public java.util.List getValue()
{
java.util.List v1;
org.yaml.snakeyaml.nodes.MappingNode v0;
v0 := @this: org.yaml.snakeyaml.nodes.MappingNode;
v1 = v0.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List value>;
return v1;
}
public void setValue(java.util.List)
{
java.util.List v1;
org.yaml.snakeyaml.nodes.MappingNode v0;
v0 := @this: org.yaml.snakeyaml.nodes.MappingNode;
v1 := @parameter0: java.util.List;
v0.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List value> = v1;
return;
}
public void setOnlyKeyType(java.lang.Class)
{
org.yaml.snakeyaml.nodes.Node v6;
java.util.List v2;
java.util.Iterator v3;
java.lang.Class v1;
java.lang.Object v5;
org.yaml.snakeyaml.nodes.MappingNode v0;
boolean v4;
v0 := @this: org.yaml.snakeyaml.nodes.MappingNode;
v1 := @parameter0: java.lang.Class;
v2 = v0.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List value>;
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = virtualinvoke v5.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
virtualinvoke v6.<org.yaml.snakeyaml.nodes.Node: void setType(java.lang.Class)>(v1);
goto label1;
label2:
return;
}
public void setTypes(java.lang.Class, java.lang.Class)
{
java.util.Iterator v4;
org.yaml.snakeyaml.nodes.MappingNode v0;
org.yaml.snakeyaml.nodes.Node v7, v8;
java.util.List v3;
java.lang.Class v1, v2;
java.lang.Object v6;
boolean v5;
v0 := @this: org.yaml.snakeyaml.nodes.MappingNode;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.Class;
v3 = v0.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List value>;
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getValueNode()>();
virtualinvoke v7.<org.yaml.snakeyaml.nodes.Node: void setType(java.lang.Class)>(v2);
v8 = virtualinvoke v6.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
virtualinvoke v8.<org.yaml.snakeyaml.nodes.Node: void setType(java.lang.Class)>(v1);
goto label1;
label2:
return;
}
public java.lang.String toString()
{
org.yaml.snakeyaml.nodes.MappingNode v0;
org.yaml.snakeyaml.nodes.Node v6, v7, v9;
int v10;
java.lang.String v11, v13, v15;
boolean v4, v8;
java.util.Iterator v3;
org.yaml.snakeyaml.nodes.Tag v14;
java.util.List v2;
java.lang.Class v12;
java.lang.Object v5;
java.lang.StringBuilder v1;
v0 := @this: org.yaml.snakeyaml.nodes.MappingNode;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = virtualinvoke v0.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List getValue()>();
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label4;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{ key=");
v6 = virtualinvoke v5.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v6);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; value=");
v7 = virtualinvoke v5.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getValueNode()>();
v8 = v7 instanceof org.yaml.snakeyaml.nodes.CollectionNode;
if v8 == 0 goto label2;
v9 = virtualinvoke v5.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getValueNode()>();
v10 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(v9);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v10);
goto label3;
label2:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v5);
label3:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" }");
goto label1;
label4:
v11 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
v12 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v13 = virtualinvoke v12.<java.lang.Class: java.lang.String getName()>();
v14 = virtualinvoke v0.<org.yaml.snakeyaml.nodes.MappingNode: org.yaml.snakeyaml.nodes.Tag getTag()>();
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,org.yaml.snakeyaml.nodes.Tag,java.lang.String)>(v13, v14, v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("<\u0001 (tag=\u0001, values=\u0001)>");
return v15;
}
public void setMerged(boolean)
{
org.yaml.snakeyaml.nodes.MappingNode v0;
boolean v1;
v0 := @this: org.yaml.snakeyaml.nodes.MappingNode;
v1 := @parameter0: boolean;
v0.<org.yaml.snakeyaml.nodes.MappingNode: boolean merged> = v1;
return;
}
public boolean isMerged()
{
org.yaml.snakeyaml.nodes.MappingNode v0;
boolean v1;
v0 := @this: org.yaml.snakeyaml.nodes.MappingNode;
v1 = v0.<org.yaml.snakeyaml.nodes.MappingNode: boolean merged>;
return v1;
}
}