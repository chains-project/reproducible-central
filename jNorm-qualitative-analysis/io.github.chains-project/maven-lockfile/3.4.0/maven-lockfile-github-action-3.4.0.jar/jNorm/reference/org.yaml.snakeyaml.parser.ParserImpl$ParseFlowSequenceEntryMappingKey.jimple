class org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingKey extends java.lang.Object implements org.yaml.snakeyaml.parser.Production
{
final org.yaml.snakeyaml.parser.ParserImpl this$0;
private void <init>(org.yaml.snakeyaml.parser.ParserImpl)
{
org.yaml.snakeyaml.parser.ParserImpl v1;
org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingKey v0;
v0 := @this: org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingKey;
v1 := @parameter0: org.yaml.snakeyaml.parser.ParserImpl;
v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingKey: org.yaml.snakeyaml.parser.ParserImpl this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public org.yaml.snakeyaml.events.Event produce()
{
org.yaml.snakeyaml.parser.ParserImpl v1, v11, v14, v15, v17, v19, v20, v4;
org.yaml.snakeyaml.events.Event v16, v22;
boolean v10;
org.yaml.snakeyaml.tokens.Token v3;
org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingValue v13, v18;
org.yaml.snakeyaml.tokens.Token$ID v7, v8, v9;
org.yaml.snakeyaml.util.ArrayStack v12;
org.yaml.snakeyaml.scanner.Scanner v2, v5;
org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingKey v0;
org.yaml.snakeyaml.error.Mark v21;
org.yaml.snakeyaml.tokens.Token$ID[] v6;
v0 := @this: org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingKey;
v1 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v2 = v1.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.scanner.Scanner scanner>;
v3 = interfaceinvoke v2.<org.yaml.snakeyaml.scanner.Scanner: org.yaml.snakeyaml.tokens.Token getToken()>();
v4 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v5 = v4.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.scanner.Scanner scanner>;
v6 = newarray (org.yaml.snakeyaml.tokens.Token$ID)[3];
v7 = <org.yaml.snakeyaml.tokens.Token$ID: org.yaml.snakeyaml.tokens.Token$ID Value>;
v6[0] = v7;
v8 = <org.yaml.snakeyaml.tokens.Token$ID: org.yaml.snakeyaml.tokens.Token$ID FlowEntry>;
v6[1] = v8;
v9 = <org.yaml.snakeyaml.tokens.Token$ID: org.yaml.snakeyaml.tokens.Token$ID FlowSequenceEnd>;
v6[2] = v9;
v10 = interfaceinvoke v5.<org.yaml.snakeyaml.scanner.Scanner: boolean checkToken(org.yaml.snakeyaml.tokens.Token$ID[])>(v6);
if v10 != 0 goto label1;
v11 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v12 = v11.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.util.ArrayStack states>;
v13 = new org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingValue;
v14 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
specialinvoke v13.<org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingValue: void <init>(org.yaml.snakeyaml.parser.ParserImpl)>(v14);
virtualinvoke v12.<org.yaml.snakeyaml.util.ArrayStack: void push(java.lang.Object)>(v13);
v15 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v16 = specialinvoke v15.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.events.Event parseFlowNode()>();
return v16;
label1:
v17 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v18 = new org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingValue;
v19 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
specialinvoke v18.<org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingValue: void <init>(org.yaml.snakeyaml.parser.ParserImpl)>(v19);
v17.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.parser.Production state> = v18;
v20 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseFlowSequenceEntryMappingKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v21 = virtualinvoke v3.<org.yaml.snakeyaml.tokens.Token: org.yaml.snakeyaml.error.Mark getEndMark()>();
v22 = specialinvoke v20.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.events.Event processEmptyScalar(org.yaml.snakeyaml.error.Mark)>(v21);
return v22;
}
}