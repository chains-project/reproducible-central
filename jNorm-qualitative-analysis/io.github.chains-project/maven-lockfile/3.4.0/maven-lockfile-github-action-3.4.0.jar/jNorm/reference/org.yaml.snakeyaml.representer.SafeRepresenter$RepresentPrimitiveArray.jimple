public class org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray extends java.lang.Object implements org.yaml.snakeyaml.representer.Represent
{
final org.yaml.snakeyaml.representer.SafeRepresenter this$0;
protected void <init>(org.yaml.snakeyaml.representer.SafeRepresenter)
{
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray v0;
org.yaml.snakeyaml.representer.SafeRepresenter v1;
v0 := @this: org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray;
v1 := @parameter0: org.yaml.snakeyaml.representer.SafeRepresenter;
v0.<org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray: org.yaml.snakeyaml.representer.SafeRepresenter this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public org.yaml.snakeyaml.nodes.Node representData(java.lang.Object)
{
org.yaml.snakeyaml.DumperOptions$FlowStyle v14, v20, v26, v32, v38, v44, v50, v8;
org.yaml.snakeyaml.nodes.Node v15, v21, v27, v33, v39, v45, v51, v9;
java.util.List v13, v19, v25, v31, v37, v43, v49, v7;
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray v0;
org.yaml.snakeyaml.representer.SafeRepresenter v11, v17, v23, v29, v35, v41, v47, v5;
org.yaml.snakeyaml.error.YAMLException v52;
java.lang.String v53, v54;
org.yaml.snakeyaml.nodes.Tag v12, v18, v24, v30, v36, v42, v48, v6;
java.lang.Class v10, v16, v2, v22, v28, v3, v34, v4, v40, v46;
java.lang.Object v1;
v0 := @this: org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v2.<java.lang.Class: java.lang.Class getComponentType()>();
v4 = <java.lang.Byte: java.lang.Class TYPE>;
if v4 != v3 goto label1;
v5 = v0.<org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray: org.yaml.snakeyaml.representer.SafeRepresenter this$0>;
v6 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag SEQ>;
v7 = specialinvoke v0.<org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray: java.util.List asByteList(java.lang.Object)>(v1);
v8 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle AUTO>;
v9 = virtualinvoke v5.<org.yaml.snakeyaml.representer.SafeRepresenter: org.yaml.snakeyaml.nodes.Node representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v6, v7, v8);
return v9;
label1:
v10 = <java.lang.Short: java.lang.Class TYPE>;
if v10 != v3 goto label2;
v11 = v0.<org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray: org.yaml.snakeyaml.representer.SafeRepresenter this$0>;
v12 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag SEQ>;
v13 = specialinvoke v0.<org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray: java.util.List asShortList(java.lang.Object)>(v1);
v14 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle AUTO>;
v15 = virtualinvoke v11.<org.yaml.snakeyaml.representer.SafeRepresenter: org.yaml.snakeyaml.nodes.Node representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v12, v13, v14);
return v15;
label2:
v16 = <java.lang.Integer: java.lang.Class TYPE>;
if v16 != v3 goto label3;
v17 = v0.<org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray: org.yaml.snakeyaml.representer.SafeRepresenter this$0>;
v18 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag SEQ>;
v19 = specialinvoke v0.<org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray: java.util.List asIntList(java.lang.Object)>(v1);
v20 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle AUTO>;
v21 = virtualinvoke v17.<org.yaml.snakeyaml.representer.SafeRepresenter: org.yaml.snakeyaml.nodes.Node representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v18, v19, v20);
return v21;
label3:
v22 = <java.lang.Long: java.lang.Class TYPE>;
if v22 != v3 goto label4;
v23 = v0.<org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray: org.yaml.snakeyaml.representer.SafeRepresenter this$0>;
v24 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag SEQ>;
v25 = specialinvoke v0.<org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray: java.util.List asLongList(java.lang.Object)>(v1);
v26 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle AUTO>;
v27 = virtualinvoke v23.<org.yaml.snakeyaml.representer.SafeRepresenter: org.yaml.snakeyaml.nodes.Node representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v24, v25, v26);
return v27;
label4:
v28 = <java.lang.Float: java.lang.Class TYPE>;
if v28 != v3 goto label5;
v29 = v0.<org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray: org.yaml.snakeyaml.representer.SafeRepresenter this$0>;
v30 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag SEQ>;
v31 = specialinvoke v0.<org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray: java.util.List asFloatList(java.lang.Object)>(v1);
v32 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle AUTO>;
v33 = virtualinvoke v29.<org.yaml.snakeyaml.representer.SafeRepresenter: org.yaml.snakeyaml.nodes.Node representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v30, v31, v32);
return v33;
label5:
v34 = <java.lang.Double: java.lang.Class TYPE>;
if v34 != v3 goto label6;
v35 = v0.<org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray: org.yaml.snakeyaml.representer.SafeRepresenter this$0>;
v36 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag SEQ>;
v37 = specialinvoke v0.<org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray: java.util.List asDoubleList(java.lang.Object)>(v1);
v38 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle AUTO>;
v39 = virtualinvoke v35.<org.yaml.snakeyaml.representer.SafeRepresenter: org.yaml.snakeyaml.nodes.Node representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v36, v37, v38);
return v39;
label6:
v40 = <java.lang.Character: java.lang.Class TYPE>;
if v40 != v3 goto label7;
v41 = v0.<org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray: org.yaml.snakeyaml.representer.SafeRepresenter this$0>;
v42 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag SEQ>;
v43 = specialinvoke v0.<org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray: java.util.List asCharList(java.lang.Object)>(v1);
v44 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle AUTO>;
v45 = virtualinvoke v41.<org.yaml.snakeyaml.representer.SafeRepresenter: org.yaml.snakeyaml.nodes.Node representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v42, v43, v44);
return v45;
label7:
v46 = <java.lang.Boolean: java.lang.Class TYPE>;
if v46 != v3 goto label8;
v47 = v0.<org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray: org.yaml.snakeyaml.representer.SafeRepresenter this$0>;
v48 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag SEQ>;
v49 = specialinvoke v0.<org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray: java.util.List asBooleanList(java.lang.Object)>(v1);
v50 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle AUTO>;
v51 = virtualinvoke v47.<org.yaml.snakeyaml.representer.SafeRepresenter: org.yaml.snakeyaml.nodes.Node representSequence(org.yaml.snakeyaml.nodes.Tag,java.lang.Iterable,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v48, v49, v50);
return v51;
label8:
v52 = new org.yaml.snakeyaml.error.YAMLException;
v53 = virtualinvoke v3.<java.lang.Class: java.lang.String getCanonicalName()>();
v54 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v53) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected primitive \'\u0001\'");
specialinvoke v52.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v54);
throw v52;
}
private java.util.List asByteList(java.lang.Object)
{
java.util.ArrayList v2;
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray v0;
byte v6;
int v3, v4, v5;
java.lang.Object v1;
java.lang.Byte v7;
v0 := @this: org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray;
v1 := @parameter0: java.lang.Object;
v2 = new java.util.ArrayList;
v3 = lengthof v1;
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v3);
v4 = 0;
label1:
v5 = lengthof v1;
if v4 >= v5 goto label2;
v6 = v1[v4];
v7 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(v6);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v7);
v4 = v4 + 1;
goto label1;
label2:
return v2;
}
private java.util.List asShortList(java.lang.Object)
{
java.util.ArrayList v2;
short v6;
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray v0;
java.lang.Short v7;
int v3, v4, v5;
java.lang.Object v1;
v0 := @this: org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray;
v1 := @parameter0: java.lang.Object;
v2 = new java.util.ArrayList;
v3 = lengthof v1;
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v3);
v4 = 0;
label1:
v5 = lengthof v1;
if v4 >= v5 goto label2;
v6 = v1[v4];
v7 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(v6);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v7);
v4 = v4 + 1;
goto label1;
label2:
return v2;
}
private java.util.List asIntList(java.lang.Object)
{
java.lang.Integer v7;
java.util.ArrayList v2;
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray v0;
int v3, v4, v5, v6;
java.lang.Object v1;
v0 := @this: org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray;
v1 := @parameter0: java.lang.Object;
v2 = new java.util.ArrayList;
v3 = lengthof v1;
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v3);
v4 = 0;
label1:
v5 = lengthof v1;
if v4 >= v5 goto label2;
v6 = v1[v4];
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v7);
v4 = v4 + 1;
goto label1;
label2:
return v2;
}
private java.util.List asLongList(java.lang.Object)
{
long v6;
java.util.ArrayList v2;
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray v0;
java.lang.Long v7;
int v3, v4, v5;
java.lang.Object v1;
v0 := @this: org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray;
v1 := @parameter0: java.lang.Object;
v2 = new java.util.ArrayList;
v3 = lengthof v1;
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v3);
v4 = 0;
label1:
v5 = lengthof v1;
if v4 >= v5 goto label2;
v6 = v1[v4];
v7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v6);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v7);
v4 = v4 + 1;
goto label1;
label2:
return v2;
}
private java.util.List asFloatList(java.lang.Object)
{
java.lang.Float v7;
java.util.ArrayList v2;
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray v0;
int v3, v4, v5;
float v6;
java.lang.Object v1;
v0 := @this: org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray;
v1 := @parameter0: java.lang.Object;
v2 = new java.util.ArrayList;
v3 = lengthof v1;
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v3);
v4 = 0;
label1:
v5 = lengthof v1;
if v4 >= v5 goto label2;
v6 = v1[v4];
v7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(v6);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v7);
v4 = v4 + 1;
goto label1;
label2:
return v2;
}
private java.util.List asDoubleList(java.lang.Object)
{
java.lang.Double v7;
java.util.ArrayList v2;
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray v0;
int v3, v4, v5;
java.lang.Object v1;
double v6;
v0 := @this: org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray;
v1 := @parameter0: java.lang.Object;
v2 = new java.util.ArrayList;
v3 = lengthof v1;
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v3);
v4 = 0;
label1:
v5 = lengthof v1;
if v4 >= v5 goto label2;
v6 = v1[v4];
v7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v6);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v7);
v4 = v4 + 1;
goto label1;
label2:
return v2;
}
private java.util.List asCharList(java.lang.Object)
{
char v6;
java.util.ArrayList v2;
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray v0;
java.lang.Character v7;
int v3, v4, v5;
java.lang.Object v1;
v0 := @this: org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray;
v1 := @parameter0: java.lang.Object;
v2 = new java.util.ArrayList;
v3 = lengthof v1;
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v3);
v4 = 0;
label1:
v5 = lengthof v1;
if v4 >= v5 goto label2;
v6 = v1[v4];
v7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v6);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v7);
v4 = v4 + 1;
goto label1;
label2:
return v2;
}
private java.util.List asBooleanList(java.lang.Object)
{
java.util.ArrayList v2;
org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray v0;
int v3, v4, v5;
java.lang.Boolean v7;
java.lang.Object v1;
boolean v6;
v0 := @this: org.yaml.snakeyaml.representer.SafeRepresenter$RepresentPrimitiveArray;
v1 := @parameter0: java.lang.Object;
v2 = new java.util.ArrayList;
v3 = lengthof v1;
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v3);
v4 = 0;
label1:
v5 = lengthof v1;
if v4 >= v5 goto label2;
v6 = v1[v4];
v7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v6);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v7);
v4 = v4 + 1;
goto label1;
label2:
return v2;
}
}