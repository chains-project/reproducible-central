public final class com.novell.ldapchai.cr.ChaiCrFactory extends java.lang.Object
{
public static final java.lang.String USER_SUPPLIED_QUESTION;
private static final int MAX_HASH_THREAD_COUNT;
private static final java.util.concurrent.Semaphore CONCURRENT_HASH_OPERATIONS;
static final java.nio.charset.Charset DEFAULT_CHARSET;
private static final com.novell.ldapchai.util.internal.ChaiLogger LOGGER;
private void <init>()
{
com.novell.ldapchai.cr.ChaiCrFactory v0;
v0 := @this: com.novell.ldapchai.cr.ChaiCrFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static com.novell.ldapchai.cr.ChaiResponseSet newChaiResponseSet(java.util.Map, java.util.Locale, int, com.novell.ldapchai.provider.ChaiConfiguration, java.lang.String) throws com.novell.ldapchai.exception.ChaiValidationException
{
java.util.Locale v1;
java.util.Map v0, v5;
int v2;
com.novell.ldapchai.provider.ChaiConfiguration v3;
com.novell.ldapchai.cr.ChaiResponseSet v6;
java.lang.String v4;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: java.util.Locale;
v2 := @parameter2: int;
v3 := @parameter3: com.novell.ldapchai.provider.ChaiConfiguration;
v4 := @parameter4: java.lang.String;
v5 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
v6 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory: com.novell.ldapchai.cr.ChaiResponseSet newChaiResponseSet(java.util.Map,java.util.Map,java.util.Locale,int,com.novell.ldapchai.provider.ChaiConfiguration,java.lang.String)>(v0, v5, v1, v2, v3, v4);
return v6;
}
public static com.novell.ldapchai.cr.ChaiResponseSet newChaiResponseSet(java.util.Map, java.util.Map, java.util.Locale, int, com.novell.ldapchai.provider.ChaiConfiguration, java.lang.String) throws com.novell.ldapchai.exception.ChaiValidationException
{
com.novell.ldapchai.provider.ChaiConfiguration v4;
com.novell.ldapchai.cr.ChaiResponseSet v10;
com.novell.ldapchai.provider.ChaiSetting v6;
java.time.Instant v12;
java.util.Locale v2;
java.util.Map v0, v1, v8, v9;
int v3;
java.lang.String v5;
com.novell.ldapchai.cr.AbstractResponseSet$STATE v11;
boolean v7;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: java.util.Map;
v2 := @parameter2: java.util.Locale;
v3 := @parameter3: int;
v4 := @parameter4: com.novell.ldapchai.provider.ChaiConfiguration;
v5 := @parameter5: java.lang.String;
v6 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting CR_CASE_INSENSITIVE>;
v7 = virtualinvoke v4.<com.novell.ldapchai.provider.ChaiConfiguration: boolean getBooleanSetting(com.novell.ldapchai.provider.ChaiSetting)>(v6);
staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory: void validateAnswers(java.util.Map,com.novell.ldapchai.provider.ChaiConfiguration)>(v0, v4);
v8 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory: java.util.Map makeAnswerMap(java.util.Map,com.novell.ldapchai.provider.ChaiConfiguration)>(v0, v4);
v9 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory: java.util.Map makeHelpdeskAnswerMap(java.util.Map,com.novell.ldapchai.provider.ChaiConfiguration)>(v1, v4);
v10 = new com.novell.ldapchai.cr.ChaiResponseSet;
v11 = <com.novell.ldapchai.cr.AbstractResponseSet$STATE: com.novell.ldapchai.cr.AbstractResponseSet$STATE NEW>;
v12 = staticinvoke <java.time.Instant: java.time.Instant now()>();
specialinvoke v10.<com.novell.ldapchai.cr.ChaiResponseSet: void <init>(java.util.Map,java.util.Map,java.util.Locale,int,com.novell.ldapchai.cr.AbstractResponseSet$STATE,boolean,java.lang.String,java.time.Instant)>(v8, v9, v2, v3, v11, v7, v5, v12);
return v10;
}
public static com.novell.ldapchai.cr.ChaiResponseSet newChaiResponseSet(java.util.Collection, java.util.Collection, java.util.Locale, int, java.lang.String) throws com.novell.ldapchai.exception.ChaiValidationException
{
java.util.Locale v2;
java.util.Map v27, v28;
java.util.stream.Collector v20, v25;
com.novell.ldapchai.cr.AbstractResponseSet$STATE v30;
boolean v10, v11, v9;
java.util.Collection v0, v1;
com.novell.ldapchai.provider.ChaiConfiguration$ChaiConfigurationBuilder v12, v15;
java.time.Instant v31;
java.util.stream.Stream v17, v22;
java.util.function.Function v18, v19, v23, v24;
int v3, v5;
java.lang.String v14, v4;
java.util.Iterator v6;
com.novell.ldapchai.provider.ChaiConfiguration v16;
com.novell.ldapchai.cr.ChaiResponseSet v29;
com.novell.ldapchai.provider.ChaiSetting v13;
com.novell.ldapchai.cr.bean.AnswerBean v8;
java.lang.Object v21, v26, v7;
v0 := @parameter0: java.util.Collection;
v1 := @parameter1: java.util.Collection;
v2 := @parameter2: java.util.Locale;
v3 := @parameter3: int;
v4 := @parameter4: java.lang.String;
if v0 == null goto label1;
v5 = interfaceinvoke v0.<java.util.Collection: int size()>();
if v5 <= 1 goto label1;
v6 = interfaceinvoke v0.<java.util.Collection: java.util.Iterator iterator()>();
v7 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v8 = virtualinvoke v7.<com.novell.ldapchai.cr.bean.ChallengeBean: com.novell.ldapchai.cr.bean.AnswerBean getAnswer()>();
v9 = virtualinvoke v8.<com.novell.ldapchai.cr.bean.AnswerBean: boolean isCaseInsensitive()>();
if v9 == 0 goto label1;
v10 = 1;
goto label2;
label1:
v10 = 0;
label2:
v11 = v10;
v12 = staticinvoke <com.novell.ldapchai.provider.ChaiConfiguration: com.novell.ldapchai.provider.ChaiConfiguration$ChaiConfigurationBuilder builder()>();
v13 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting CR_CASE_INSENSITIVE>;
v14 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(v10);
v15 = virtualinvoke v12.<com.novell.ldapchai.provider.ChaiConfiguration$ChaiConfigurationBuilder: com.novell.ldapchai.provider.ChaiConfiguration$ChaiConfigurationBuilder setSetting(com.novell.ldapchai.provider.ChaiSetting,java.lang.String)>(v13, v14);
v16 = virtualinvoke v15.<com.novell.ldapchai.provider.ChaiConfiguration$ChaiConfigurationBuilder: com.novell.ldapchai.provider.ChaiConfiguration build()>();
if v0 != null goto label3;
staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
goto label4;
label3:
v17 = interfaceinvoke v0.<java.util.Collection: java.util.stream.Stream stream()>();
v18 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory$fromChallengeBean__5: java.util.function.Function bootstrap$()>();
v19 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory$lambda_newChaiResponseSet_0__6: java.util.function.Function bootstrap$()>();
v20 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>(v18, v19);
v21 = interfaceinvoke v17.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v20);
label4:
if v1 != null goto label5;
staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
goto label6;
label5:
v22 = interfaceinvoke v1.<java.util.Collection: java.util.stream.Stream stream()>();
v23 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory$fromChallengeBean__7: java.util.function.Function bootstrap$()>();
v24 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory$lambda_newChaiResponseSet_1__8: java.util.function.Function bootstrap$()>();
v25 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>(v23, v24);
v26 = interfaceinvoke v22.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v25);
label6:
v27 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory: java.util.Map makeAnswerMap(java.util.Map,com.novell.ldapchai.provider.ChaiConfiguration)>(v21, v16);
v28 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory: java.util.Map makeHelpdeskAnswerMap(java.util.Map,com.novell.ldapchai.provider.ChaiConfiguration)>(v26, v16);
v29 = new com.novell.ldapchai.cr.ChaiResponseSet;
v30 = <com.novell.ldapchai.cr.AbstractResponseSet$STATE: com.novell.ldapchai.cr.AbstractResponseSet$STATE NEW>;
v31 = staticinvoke <java.time.Instant: java.time.Instant now()>();
specialinvoke v29.<com.novell.ldapchai.cr.ChaiResponseSet: void <init>(java.util.Map,java.util.Map,java.util.Locale,int,com.novell.ldapchai.cr.AbstractResponseSet$STATE,boolean,java.lang.String,java.time.Instant)>(v27, v28, v2, v3, v30, v11, v4, v31);
return v29;
}
public static void writeChaiResponseSet(com.novell.ldapchai.cr.ChaiResponseSet, java.io.Writer) throws com.novell.ldapchai.exception.ChaiOperationException
{
java.io.Writer v1;
com.novell.ldapchai.cr.ChaiResponseSet v0;
v0 := @parameter0: com.novell.ldapchai.cr.ChaiResponseSet;
v1 := @parameter1: java.io.Writer;
virtualinvoke v0.<com.novell.ldapchai.cr.ChaiResponseSet: void write(java.io.Writer)>(v1);
return;
}
public static boolean writeChaiResponseSet(com.novell.ldapchai.cr.ChaiResponseSet, com.novell.ldapchai.ChaiUser) throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.ChaiUser v1;
com.novell.ldapchai.cr.ChaiResponseSet v0;
boolean v2;
v0 := @parameter0: com.novell.ldapchai.cr.ChaiResponseSet;
v1 := @parameter1: com.novell.ldapchai.ChaiUser;
v2 = virtualinvoke v0.<com.novell.ldapchai.cr.ChaiResponseSet: boolean write(com.novell.ldapchai.ChaiUser)>(v1);
return v2;
}
private static java.util.Map makeHelpdeskAnswerMap(java.util.Map, com.novell.ldapchai.provider.ChaiConfiguration)
{
com.novell.ldapchai.cr.Answer$FormatType v2;
java.util.Iterator v6;
com.novell.ldapchai.provider.ChaiConfiguration v1;
java.util.Set v5;
java.util.LinkedHashMap v4;
java.util.Map v0, v3;
java.lang.Object v10, v8, v9;
boolean v7;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: com.novell.ldapchai.provider.ChaiConfiguration;
v2 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType HELPDESK>;
v3 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory: java.util.Map makeAnswerMap(java.util.Map,com.novell.ldapchai.cr.Answer$FormatType,com.novell.ldapchai.provider.ChaiConfiguration)>(v0, v2, v1);
v4 = new java.util.LinkedHashMap;
specialinvoke v4.<java.util.LinkedHashMap: void <init>()>();
v5 = interfaceinvoke v3.<java.util.Map: java.util.Set entrySet()>();
v6 = interfaceinvoke v5.<java.util.Set: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = interfaceinvoke v8.<java.util.Map$Entry: java.lang.Object getKey()>();
v10 = interfaceinvoke v8.<java.util.Map$Entry: java.lang.Object getValue()>();
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, v10);
goto label1;
label2:
return v4;
}
private static java.util.Map makeAnswerMap(java.util.Map, com.novell.ldapchai.provider.ChaiConfiguration)
{
com.novell.ldapchai.cr.Answer$FormatType v4;
java.util.Map v0, v5;
com.novell.ldapchai.provider.ChaiConfiguration v1;
com.novell.ldapchai.provider.ChaiSetting v2;
java.lang.String v3;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: com.novell.ldapchai.provider.ChaiConfiguration;
v2 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting CR_DEFAULT_FORMAT_TYPE>;
v3 = virtualinvoke v1.<com.novell.ldapchai.provider.ChaiConfiguration: java.lang.String getSetting(com.novell.ldapchai.provider.ChaiSetting)>(v2);
v4 = staticinvoke <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType valueOf(java.lang.String)>(v3);
v5 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory: java.util.Map makeAnswerMap(java.util.Map,com.novell.ldapchai.cr.Answer$FormatType,com.novell.ldapchai.provider.ChaiConfiguration)>(v0, v4, v1);
return v5;
}
private static int figureThreadCount(java.util.Map, com.novell.ldapchai.provider.ChaiConfiguration)
{
java.lang.Runtime v5;
com.novell.ldapchai.provider.ChaiConfiguration v1;
com.novell.ldapchai.provider.ChaiSetting v2;
java.util.Map v0;
int v10, v4, v6, v7, v8, v9;
java.lang.String v3;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: com.novell.ldapchai.provider.ChaiConfiguration;
v2 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting CR_CHAI_HASH_THREAD_COUNT>;
v3 = virtualinvoke v1.<com.novell.ldapchai.provider.ChaiConfiguration: java.lang.String getSetting(com.novell.ldapchai.provider.ChaiSetting)>(v2);
v4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v3);
if v4 >= 1 goto label1;
v5 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
v6 = virtualinvoke v5.<java.lang.Runtime: int availableProcessors()>();
goto label2;
label1:
v6 = v4;
label2:
v7 = interfaceinvoke v0.<java.util.Map: int size()>();
v8 = staticinvoke <java.lang.Math: int min(int,int)>(v6, v7);
v9 = staticinvoke <java.lang.Math: int min(int,int)>(10, v8);
if v9 <= 0 goto label3;
v10 = v9;
goto label4;
label3:
v10 = 1;
label4:
return v10;
}
private static java.util.Map makeAnswerMap(java.util.Map, com.novell.ldapchai.cr.Answer$FormatType, com.novell.ldapchai.provider.ChaiConfiguration)
{
java.lang.Throwable v14;
java.util.function.Supplier v17, v20;
java.util.Map v0, v4, v8;
int v18, v6, v9;
boolean v10, v12, v3;
com.novell.ldapchai.cr.Answer$FormatType v1;
java.util.concurrent.Semaphore v11, v13, v15;
com.novell.ldapchai.provider.ChaiConfiguration v2;
java.time.Instant v5;
java.util.List v7;
com.novell.ldapchai.util.internal.ChaiLogger v16, v19;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: com.novell.ldapchai.cr.Answer$FormatType;
v2 := @parameter2: com.novell.ldapchai.provider.ChaiConfiguration;
if v0 == null goto label1;
v3 = interfaceinvoke v0.<java.util.Map: boolean isEmpty()>();
if v3 == 0 goto label2;
label1:
v4 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
return v4;
label2:
v5 = staticinvoke <java.time.Instant: java.time.Instant now()>();
v6 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory: int figureThreadCount(java.util.Map,com.novell.ldapchai.provider.ChaiConfiguration)>(v0, v2);
v7 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory: java.util.List makeAnswerCallables(java.util.Map,com.novell.ldapchai.cr.Answer$FormatType,com.novell.ldapchai.provider.ChaiConfiguration)>(v0, v1, v2);
v8 = null;
v9 = 0;
if v6 <= 1 goto label7;
v10 = virtualinvoke v1.<com.novell.ldapchai.cr.Answer$FormatType: boolean isHashThreadingEligible()>();
if v10 == 0 goto label7;
v11 = <com.novell.ldapchai.cr.ChaiCrFactory: java.util.concurrent.Semaphore CONCURRENT_HASH_OPERATIONS>;
v12 = virtualinvoke v11.<java.util.concurrent.Semaphore: boolean tryAcquire()>();
if v12 == 0 goto label6;
label3:
v8 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory: java.util.Map concurrentAnswerMaker(int,java.util.List)>(v6, v7);
v9 = v6;
label4:
v13 = <com.novell.ldapchai.cr.ChaiCrFactory: java.util.concurrent.Semaphore CONCURRENT_HASH_OPERATIONS>;
virtualinvoke v13.<java.util.concurrent.Semaphore: void release()>();
goto label7;
label5:
v14 := @caughtexception;
v15 = <com.novell.ldapchai.cr.ChaiCrFactory: java.util.concurrent.Semaphore CONCURRENT_HASH_OPERATIONS>;
virtualinvoke v15.<java.util.concurrent.Semaphore: void release()>();
throw v14;
label6:
v16 = <com.novell.ldapchai.cr.ChaiCrFactory: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v17 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory$lambda_makeAnswerMap_2__10: java.util.function.Supplier bootstrap$()>();
virtualinvoke v16.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v17);
label7:
if v8 != null goto label8;
v8 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory: java.util.Map singleThreadAnswerMaker(java.util.List)>(v7);
v9 = 1;
label8:
v18 = interfaceinvoke v8.<java.util.Map: int size()>();
v19 = <com.novell.ldapchai.cr.ChaiCrFactory: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v20 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory$lambda_makeAnswerMap_3__9: java.util.function.Supplier bootstrap$(com.novell.ldapchai.cr.Answer$FormatType,int,java.time.Instant,int)>(v1, v18, v5, v9);
virtualinvoke v19.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v20);
return v8;
catch java.lang.Throwable from label3 to label4 with label5;
}
private static java.util.Map singleThreadAnswerMaker(java.util.List)
{
java.util.Iterator v2;
java.lang.RuntimeException v11;
java.util.function.Supplier v10;
java.lang.Exception v6;
java.util.LinkedHashMap v1;
java.util.List v0;
java.lang.Object v4, v5;
java.lang.String v7, v8;
boolean v3;
com.novell.ldapchai.util.internal.ChaiLogger v9;
v0 := @parameter0: java.util.List;
v1 = new java.util.LinkedHashMap;
specialinvoke v1.<java.util.LinkedHashMap: void <init>()>();
v2 = interfaceinvoke v0.<java.util.List: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label5;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
label2:
v5 = interfaceinvoke v4.<java.util.concurrent.Callable: java.lang.Object call()>();
interfaceinvoke v1.<java.util.Map: void putAll(java.util.Map)>(v5);
label3:
goto label1;
label4:
v6 := @caughtexception;
v7 = virtualinvoke v6.<java.lang.Exception: java.lang.String getMessage()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unexpected execution error during response set generation: \u0001");
v9 = <com.novell.ldapchai.cr.ChaiCrFactory: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v10 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory$lambda_singleThreadAnswerMaker_4__11: java.util.function.Supplier bootstrap$(java.lang.String)>(v8);
virtualinvoke v9.<com.novell.ldapchai.util.internal.ChaiLogger: void error(java.util.function.Supplier)>(v10);
v11 = new java.lang.RuntimeException;
specialinvoke v11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v8, v6);
throw v11;
label5:
return v1;
catch java.lang.Exception from label2 to label3 with label4;
}
private static java.util.Map concurrentAnswerMaker(int, java.util.List)
{
java.lang.Throwable v19;
java.util.function.Function v5;
java.util.function.Supplier v17;
java.util.LinkedHashMap v2;
int v0;
java.lang.String v14, v15;
java.util.stream.Collector v7;
java.util.concurrent.ExecutorService v3;
boolean v10;
java.util.Iterator v9;
java.lang.RuntimeException v18;
java.lang.Exception v13;
java.util.List v1;
java.util.stream.Stream v4, v6;
java.lang.Object v11, v12, v8;
com.novell.ldapchai.util.internal.ChaiLogger v16;
v0 := @parameter0: int;
v1 := @parameter1: java.util.List;
v2 = new java.util.LinkedHashMap;
specialinvoke v2.<java.util.LinkedHashMap: void <init>()>();
v3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(v0);
label1:
v4 = interfaceinvoke v1.<java.util.List: java.util.stream.Stream stream()>();
virtualinvoke v3.<java.lang.Object: java.lang.Class getClass()>();
v5 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory$submit__12: java.util.function.Function bootstrap$(java.util.concurrent.ExecutorService)>(v3);
v6 = interfaceinvoke v4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v5);
v7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v8 = interfaceinvoke v6.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v7);
v9 = interfaceinvoke v8.<java.util.List: java.util.Iterator iterator()>();
label2:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label3;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
v12 = interfaceinvoke v11.<java.util.concurrent.Future: java.lang.Object get()>();
interfaceinvoke v2.<java.util.Map: void putAll(java.util.Map)>(v12);
goto label2;
label3:
interfaceinvoke v3.<java.util.concurrent.ExecutorService: void shutdown()>();
goto label6;
label4:
v13 := @caughtexception;
v14 = virtualinvoke v13.<java.lang.Exception: java.lang.String getMessage()>();
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unexpected execution error during response set generation: \u0001");
v16 = <com.novell.ldapchai.cr.ChaiCrFactory: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v17 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory$lambda_concurrentAnswerMaker_5__13: java.util.function.Supplier bootstrap$(java.lang.String)>(v15);
virtualinvoke v16.<com.novell.ldapchai.util.internal.ChaiLogger: void error(java.util.function.Supplier)>(v17);
v18 = new java.lang.RuntimeException;
specialinvoke v18.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v15, v13);
throw v18;
label5:
v19 := @caughtexception;
interfaceinvoke v3.<java.util.concurrent.ExecutorService: void shutdown()>();
throw v19;
label6:
return v2;
catch java.util.concurrent.ExecutionException from label1 to label3 with label4;
catch java.lang.InterruptedException from label1 to label3 with label4;
catch java.lang.Throwable from label1 to label3 with label5;
}
private static java.util.List makeAnswerCallables(java.util.Map, com.novell.ldapchai.cr.Answer$FormatType, com.novell.ldapchai.provider.ChaiConfiguration)
{
com.novell.ldapchai.cr.AnswerConfiguration v29;
java.util.concurrent.Callable v30;
java.util.ArrayList v4;
java.util.Map v0;
int v13, v14, v15, v18, v19;
java.lang.String v12, v17, v27;
boolean v22, v7;
com.novell.ldapchai.cr.Answer$FormatType v1;
java.util.Iterator v6;
com.novell.ldapchai.provider.ChaiConfiguration v2;
java.util.Set v5;
com.novell.ldapchai.provider.ChaiSetting v11, v16, v21;
com.novell.ldapchai.cr.AnswerConfiguration$AnswerConfigurationBuilder v20, v23, v24, v25, v26, v28;
java.util.List v3;
java.lang.Object v10, v8, v9;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: com.novell.ldapchai.cr.Answer$FormatType;
v2 := @parameter2: com.novell.ldapchai.provider.ChaiConfiguration;
if v0 != null goto label1;
v3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v3;
label1:
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
v5 = interfaceinvoke v0.<java.util.Map: java.util.Set entrySet()>();
v6 = interfaceinvoke v5.<java.util.Set: java.util.Iterator iterator()>();
label2:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label7;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = interfaceinvoke v8.<java.util.Map$Entry: java.lang.Object getKey()>();
v10 = interfaceinvoke v8.<java.util.Map$Entry: java.lang.Object getValue()>();
v11 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting CR_CHAI_ITERATIONS>;
v12 = virtualinvoke v2.<com.novell.ldapchai.provider.ChaiConfiguration: java.lang.String getSetting(com.novell.ldapchai.provider.ChaiSetting)>(v11);
v13 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v12);
if v13 <= 0 goto label3;
v14 = v13;
goto label4;
label3:
v14 = virtualinvoke v1.<com.novell.ldapchai.cr.Answer$FormatType: int getDefaultIterations()>();
label4:
v15 = v14;
v16 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting CR_CHAI_SALT_CHAR_COUNT>;
v17 = virtualinvoke v2.<com.novell.ldapchai.provider.ChaiConfiguration: java.lang.String getSetting(com.novell.ldapchai.provider.ChaiSetting)>(v16);
v18 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v17);
if v18 <= 0 goto label5;
v19 = v18;
goto label6;
label5:
v19 = virtualinvoke v1.<com.novell.ldapchai.cr.Answer$FormatType: int getSaltLength()>();
label6:
v20 = staticinvoke <com.novell.ldapchai.cr.AnswerConfiguration: com.novell.ldapchai.cr.AnswerConfiguration$AnswerConfigurationBuilder builder()>();
v21 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting CR_CASE_INSENSITIVE>;
v22 = virtualinvoke v2.<com.novell.ldapchai.provider.ChaiConfiguration: boolean getBooleanSetting(com.novell.ldapchai.provider.ChaiSetting)>(v21);
v23 = virtualinvoke v20.<com.novell.ldapchai.cr.AnswerConfiguration$AnswerConfigurationBuilder: com.novell.ldapchai.cr.AnswerConfiguration$AnswerConfigurationBuilder caseInsensitive(boolean)>(v22);
v24 = virtualinvoke v23.<com.novell.ldapchai.cr.AnswerConfiguration$AnswerConfigurationBuilder: com.novell.ldapchai.cr.AnswerConfiguration$AnswerConfigurationBuilder iterations(int)>(v15);
v25 = virtualinvoke v24.<com.novell.ldapchai.cr.AnswerConfiguration$AnswerConfigurationBuilder: com.novell.ldapchai.cr.AnswerConfiguration$AnswerConfigurationBuilder saltCharCount(int)>(v19);
v26 = virtualinvoke v25.<com.novell.ldapchai.cr.AnswerConfiguration$AnswerConfigurationBuilder: com.novell.ldapchai.cr.AnswerConfiguration$AnswerConfigurationBuilder formatType(com.novell.ldapchai.cr.Answer$FormatType)>(v1);
v27 = interfaceinvoke v9.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
v28 = virtualinvoke v26.<com.novell.ldapchai.cr.AnswerConfiguration$AnswerConfigurationBuilder: com.novell.ldapchai.cr.AnswerConfiguration$AnswerConfigurationBuilder challengeText(java.lang.String)>(v27);
v29 = virtualinvoke v28.<com.novell.ldapchai.cr.AnswerConfiguration$AnswerConfigurationBuilder: com.novell.ldapchai.cr.AnswerConfiguration build()>();
v30 = staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory$lambda_makeAnswerCallables_6__14: java.util.concurrent.Callable bootstrap$(com.novell.ldapchai.cr.Challenge,com.novell.ldapchai.cr.AnswerConfiguration,java.lang.String)>(v9, v29, v10);
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v30);
goto label2;
label7:
return v4;
}
private static void validateAnswers(java.util.Map, com.novell.ldapchai.provider.ChaiConfiguration) throws com.novell.ldapchai.exception.ChaiValidationException
{
java.util.Map v0;
com.novell.ldapchai.exception.ChaiValidationException v13, v18, v25, v32;
boolean v3, v6;
java.util.Set v4;
int v12, v15, v21, v22, v28, v29, v35;
java.lang.String v10, v11, v16, v17, v20, v23, v24, v27, v30, v31, v34;
java.util.Iterator v5;
com.novell.ldapchai.provider.ChaiConfiguration v1;
com.novell.ldapchai.provider.ChaiSetting v2;
com.novell.ldapchai.exception.ChaiError v14, v19, v26, v33;
java.lang.Object v7, v8, v9;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: com.novell.ldapchai.provider.ChaiConfiguration;
v2 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting CR_ALLOW_DUPLICATE_RESPONSES>;
v3 = virtualinvoke v1.<com.novell.ldapchai.provider.ChaiConfiguration: boolean getBooleanSetting(com.novell.ldapchai.provider.ChaiSetting)>(v2);
v4 = interfaceinvoke v0.<java.util.Map: java.util.Set entrySet()>();
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label8;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getKey()>();
v9 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getValue()>();
v10 = interfaceinvoke v8.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
if v10 == null goto label2;
v11 = interfaceinvoke v8.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
v12 = virtualinvoke v11.<java.lang.String: int length()>();
if v12 >= 1 goto label3;
label2:
v13 = new com.novell.ldapchai.exception.ChaiValidationException;
v14 = <com.novell.ldapchai.exception.ChaiError: com.novell.ldapchai.exception.ChaiError CR_MISSING_REQUIRED_CHALLENGE_TEXT>;
specialinvoke v13.<com.novell.ldapchai.exception.ChaiValidationException: void <init>(java.lang.String,com.novell.ldapchai.exception.ChaiError)>("challenge text missing for challenge", v14);
throw v13;
label3:
if v9 == null goto label4;
v15 = virtualinvoke v9.<java.lang.String: int length()>();
if v15 >= 1 goto label5;
label4:
v16 = interfaceinvoke v8.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("response text missing for challenge \'\u0001\'");
v18 = new com.novell.ldapchai.exception.ChaiValidationException;
v19 = <com.novell.ldapchai.exception.ChaiError: com.novell.ldapchai.exception.ChaiError CR_MISSING_REQUIRED_RESPONSE_TEXT>;
v20 = interfaceinvoke v8.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
specialinvoke v18.<com.novell.ldapchai.exception.ChaiValidationException: void <init>(java.lang.String,com.novell.ldapchai.exception.ChaiError,java.lang.String)>(v17, v19, v20);
throw v18;
label5:
v21 = virtualinvoke v9.<java.lang.String: int length()>();
v22 = interfaceinvoke v8.<com.novell.ldapchai.cr.Challenge: int getMinLength()>();
if v21 >= v22 goto label6;
v23 = interfaceinvoke v8.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
v24 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v23) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("response text is too short for challenge \'\u0001\'");
v25 = new com.novell.ldapchai.exception.ChaiValidationException;
v26 = <com.novell.ldapchai.exception.ChaiError: com.novell.ldapchai.exception.ChaiError CR_RESPONSE_TOO_SHORT>;
v27 = interfaceinvoke v8.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
specialinvoke v25.<com.novell.ldapchai.exception.ChaiValidationException: void <init>(java.lang.String,com.novell.ldapchai.exception.ChaiError,java.lang.String)>(v24, v26, v27);
throw v25;
label6:
v28 = virtualinvoke v9.<java.lang.String: int length()>();
v29 = interfaceinvoke v8.<com.novell.ldapchai.cr.Challenge: int getMaxLength()>();
if v28 <= v29 goto label7;
v30 = interfaceinvoke v8.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
v31 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v30) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("response text is too long for challenge \'\u0001\'");
v32 = new com.novell.ldapchai.exception.ChaiValidationException;
v33 = <com.novell.ldapchai.exception.ChaiError: com.novell.ldapchai.exception.ChaiError CR_RESPONSE_TOO_LONG>;
v34 = interfaceinvoke v8.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
specialinvoke v32.<com.novell.ldapchai.exception.ChaiValidationException: void <init>(java.lang.String,com.novell.ldapchai.exception.ChaiError,java.lang.String)>(v31, v33, v34);
throw v32;
label7:
v35 = interfaceinvoke v8.<com.novell.ldapchai.cr.Challenge: int getMaxQuestionCharsInAnswer()>();
if v35 <= 0 goto label1;
staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory: void checkIfAnswerTextContainsChallengeText(com.novell.ldapchai.cr.Challenge,java.lang.String)>(v8, v9);
goto label1;
label8:
if v3 != 0 goto label9;
staticinvoke <com.novell.ldapchai.cr.ChaiCrFactory: void checkForDuplicateAnswerValues(java.util.Map)>(v0);
label9:
return;
}
private static void checkForDuplicateAnswerValues(java.util.Map) throws com.novell.ldapchai.exception.ChaiValidationException
{
java.util.Iterator v3;
java.util.Set v2;
com.novell.ldapchai.exception.ChaiError v12;
java.util.HashSet v1;
java.util.Map v0;
java.lang.Object v5, v6, v7;
java.lang.String v13, v9;
com.novell.ldapchai.exception.ChaiValidationException v11;
boolean v10, v4, v8;
v0 := @parameter0: java.util.Map;
v1 = new java.util.HashSet;
specialinvoke v1.<java.util.HashSet: void <init>()>();
v2 = interfaceinvoke v0.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label3;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
v8 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: boolean isEmpty(java.lang.CharSequence)>(v7);
if v8 != 0 goto label1;
v9 = virtualinvoke v7.<java.lang.String: java.lang.String toLowerCase()>();
v10 = interfaceinvoke v1.<java.util.Set: boolean contains(java.lang.Object)>(v9);
if v10 == 0 goto label2;
v11 = new com.novell.ldapchai.exception.ChaiValidationException;
v12 = <com.novell.ldapchai.exception.ChaiError: com.novell.ldapchai.exception.ChaiError CR_DUPLICATE_RESPONSES>;
v13 = interfaceinvoke v6.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
specialinvoke v11.<com.novell.ldapchai.exception.ChaiValidationException: void <init>(java.lang.String,com.novell.ldapchai.exception.ChaiError,java.lang.String)>("multiple responses have the same value", v12, v13);
throw v11;
label2:
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>(v9);
goto label1;
label3:
return;
}
private static void checkIfAnswerTextContainsChallengeText(com.novell.ldapchai.cr.Challenge, java.lang.String) throws com.novell.ldapchai.exception.ChaiValidationException
{
com.novell.ldapchai.cr.Challenge v0;
java.lang.String[] v5;
int v11, v12, v13, v14, v15, v16, v17, v7, v8, v9;
java.lang.String v1, v10, v18, v20, v21, v24, v3, v4, v6;
com.novell.ldapchai.exception.ChaiValidationException v22;
boolean v19, v2;
com.novell.ldapchai.exception.ChaiError v23;
v0 := @parameter0: com.novell.ldapchai.cr.Challenge;
v1 := @parameter1: java.lang.String;
if v0 == null goto label1;
v2 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: boolean isEmpty(java.lang.CharSequence)>(v1);
if v2 == 0 goto label2;
label1:
return;
label2:
v3 = interfaceinvoke v0.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
if v3 == null goto label7;
v4 = virtualinvoke v3.<java.lang.String: java.lang.String toLowerCase()>();
v5 = virtualinvoke v4.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s");
v6 = virtualinvoke v1.<java.lang.String: java.lang.String toLowerCase()>();
v7 = interfaceinvoke v0.<com.novell.ldapchai.cr.Challenge: int getMaxQuestionCharsInAnswer()>();
v8 = lengthof v5;
v9 = 0;
label3:
if v9 >= v8 goto label7;
v10 = v5[v9];
v11 = virtualinvoke v10.<java.lang.String: int length()>();
if v11 <= v7 goto label6;
v12 = 0;
label4:
v13 = virtualinvoke v10.<java.lang.String: int length()>();
v14 = v7 + 1;
v15 = v13 - v14;
if v12 > v15 goto label6;
v16 = v7 + 1;
v17 = v12 + v16;
v18 = virtualinvoke v10.<java.lang.String: java.lang.String substring(int,int)>(v12, v17);
v19 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>(v18);
if v19 == 0 goto label5;
v20 = interfaceinvoke v0.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
v21 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v20) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("response text contains too many challenge characters for challenge \'\u0001\'");
v22 = new com.novell.ldapchai.exception.ChaiValidationException;
v23 = <com.novell.ldapchai.exception.ChaiError: com.novell.ldapchai.exception.ChaiError CR_TOO_MANY_QUESTION_CHARS>;
v24 = interfaceinvoke v0.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
specialinvoke v22.<com.novell.ldapchai.exception.ChaiValidationException: void <init>(java.lang.String,com.novell.ldapchai.exception.ChaiError,java.lang.String)>(v21, v23, v24);
throw v22;
label5:
v12 = v12 + 1;
goto label4;
label6:
v9 = v9 + 1;
goto label3;
label7:
return;
}
public static com.novell.ldapchai.cr.ChaiResponseSet readChaiResponseSet(com.novell.ldapchai.ChaiUser) throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiValidationException, com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.ChaiUser v0;
com.novell.ldapchai.cr.ChaiResponseSet v1;
v0 := @parameter0: com.novell.ldapchai.ChaiUser;
v1 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet: com.novell.ldapchai.cr.ChaiResponseSet readUserResponseSet(com.novell.ldapchai.ChaiUser)>(v0);
return v1;
}
public static com.novell.ldapchai.cr.ResponseSet parseChaiResponseSetXML(java.lang.String) throws com.novell.ldapchai.exception.ChaiValidationException, com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.cr.ChaiResponseSet v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet$ChaiResponseXmlParser: com.novell.ldapchai.cr.ChaiResponseSet parseChaiResponseSetXML(java.lang.String)>(v0);
return v1;
}
static void <clinit>()
{
java.nio.charset.Charset v1;
java.util.concurrent.Semaphore v0;
com.novell.ldapchai.util.internal.ChaiLogger v2;
v0 = new java.util.concurrent.Semaphore;
specialinvoke v0.<java.util.concurrent.Semaphore: void <init>(int)>(10);
<com.novell.ldapchai.cr.ChaiCrFactory: java.util.concurrent.Semaphore CONCURRENT_HASH_OPERATIONS> = v0;
v1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
<com.novell.ldapchai.cr.ChaiCrFactory: java.nio.charset.Charset DEFAULT_CHARSET> = v1;
v2 = staticinvoke <com.novell.ldapchai.util.internal.ChaiLogger: com.novell.ldapchai.util.internal.ChaiLogger getLogger(java.lang.Class)>(class "Lcom/novell/ldapchai/cr/ChaiCrFactory;");
<com.novell.ldapchai.cr.ChaiCrFactory: com.novell.ldapchai.util.internal.ChaiLogger LOGGER> = v2;
return;
}
}