class com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory extends java.lang.Object implements com.novell.ldapchai.cr.Answer$ImplementationFactory
{
void <init>()
{
com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory v0;
v0 := @this: com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public com.novell.ldapchai.cr.HashSaltAnswer newAnswer(com.novell.ldapchai.cr.AnswerConfiguration, java.lang.String)
{
com.novell.ldapchai.cr.HashSaltAnswer v3;
com.novell.ldapchai.cr.AnswerConfiguration v1;
com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory v0;
java.lang.String v2;
v0 := @this: com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory;
v1 := @parameter0: com.novell.ldapchai.cr.AnswerConfiguration;
v2 := @parameter1: java.lang.String;
v3 = new com.novell.ldapchai.cr.HashSaltAnswer;
specialinvoke v3.<com.novell.ldapchai.cr.HashSaltAnswer: void <init>(com.novell.ldapchai.cr.AnswerConfiguration,java.lang.String)>(v1, v2);
return v3;
}
public com.novell.ldapchai.cr.Answer fromAnswerBean(com.novell.ldapchai.cr.bean.AnswerBean, java.lang.String)
{
com.novell.ldapchai.cr.HashSaltAnswer v15;
java.lang.String[] v7;
int v17, v4;
java.lang.String v12, v13, v14, v16, v2, v3, v8;
boolean v18, v6;
com.novell.ldapchai.cr.Answer$FormatType v19;
java.lang.IllegalArgumentException v10, v11, v5;
com.novell.ldapchai.cr.HashSaltAnswer$VERSION v9;
com.novell.ldapchai.cr.bean.AnswerBean v1;
com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory v0;
v0 := @this: com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory;
v1 := @parameter0: com.novell.ldapchai.cr.bean.AnswerBean;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v1.<com.novell.ldapchai.cr.bean.AnswerBean: java.lang.String getAnswerHash()>();
if v3 == null goto label1;
v4 = virtualinvoke v3.<java.lang.String: int length()>();
if v4 >= 1 goto label2;
label1:
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("missing answer value");
throw v5;
label2:
v6 = virtualinvoke v3.<java.lang.String: boolean contains(java.lang.CharSequence)>(":");
if v6 == 0 goto label7;
v7 = virtualinvoke v3.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");
label3:
v8 = v7[0];
v9 = staticinvoke <com.novell.ldapchai.cr.HashSaltAnswer$VERSION: com.novell.ldapchai.cr.HashSaltAnswer$VERSION valueOf(java.lang.String)>(v8);
label4:
goto label6;
label5:
v10 := @caughtexception;
v11 = new java.lang.IllegalArgumentException;
v12 = v7[0];
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unsupported version type \u0001");
specialinvoke v11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v13);
throw v11;
label6:
v14 = v7[1];
goto label8;
label7:
v9 = <com.novell.ldapchai.cr.HashSaltAnswer$VERSION: com.novell.ldapchai.cr.HashSaltAnswer$VERSION A>;
v14 = v3;
label8:
v15 = new com.novell.ldapchai.cr.HashSaltAnswer;
v16 = virtualinvoke v1.<com.novell.ldapchai.cr.bean.AnswerBean: java.lang.String getSalt()>();
v17 = virtualinvoke v1.<com.novell.ldapchai.cr.bean.AnswerBean: int getHashCount()>();
v18 = virtualinvoke v1.<com.novell.ldapchai.cr.bean.AnswerBean: boolean isCaseInsensitive()>();
v19 = virtualinvoke v1.<com.novell.ldapchai.cr.bean.AnswerBean: com.novell.ldapchai.cr.Answer$FormatType getType()>();
specialinvoke v15.<com.novell.ldapchai.cr.HashSaltAnswer: void <init>(java.lang.String,java.lang.String,int,boolean,com.novell.ldapchai.cr.Answer$FormatType,com.novell.ldapchai.cr.HashSaltAnswer$VERSION)>(v14, v16, v17, v18, v19, v9);
return v15;
catch java.lang.IllegalArgumentException from label3 to label4 with label5;
}
public com.novell.ldapchai.cr.HashSaltAnswer fromXml(org.jrivard.xmlchai.XmlElement, boolean, java.lang.String)
{
com.novell.ldapchai.cr.HashSaltAnswer v28;
java.lang.String[] v8;
java.util.function.Supplier v5;
org.jrivard.xmlchai.XmlElement v1;
int v20;
java.lang.String v13, v14, v15, v27, v3, v9;
boolean v2, v7;
com.novell.ldapchai.cr.Answer$FormatType v24;
java.lang.NumberFormatException v21;
java.lang.IllegalArgumentException v11, v12, v25, v26;
com.novell.ldapchai.cr.HashSaltAnswer$VERSION v10;
java.util.Optional v16, v18, v22, v4;
com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory v0;
java.lang.Object v17, v19, v23, v6;
v0 := @this: com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory;
v1 := @parameter0: org.jrivard.xmlchai.XmlElement;
v2 := @parameter1: boolean;
v3 := @parameter2: java.lang.String;
v4 = interfaceinvoke v1.<org.jrivard.xmlchai.XmlElement: java.util.Optional getText()>();
v5 = staticinvoke <com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory$lambda_fromXml_0__28: java.util.function.Supplier bootstrap$()>();
v6 = virtualinvoke v4.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>(v5);
v7 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>(":");
if v7 == 0 goto label05;
v8 = virtualinvoke v6.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");
label01:
v9 = v8[0];
v10 = staticinvoke <com.novell.ldapchai.cr.HashSaltAnswer$VERSION: com.novell.ldapchai.cr.HashSaltAnswer$VERSION valueOf(java.lang.String)>(v9);
label02:
goto label04;
label03:
v11 := @caughtexception;
v12 = new java.lang.IllegalArgumentException;
v13 = v8[0];
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unsupported version type \u0001");
specialinvoke v12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v14);
throw v12;
label04:
v15 = v8[1];
goto label06;
label05:
v10 = <com.novell.ldapchai.cr.HashSaltAnswer$VERSION: com.novell.ldapchai.cr.HashSaltAnswer$VERSION A>;
v15 = v6;
label06:
v16 = interfaceinvoke v1.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("salt");
v17 = virtualinvoke v16.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("");
v18 = interfaceinvoke v1.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("hashcount");
v19 = virtualinvoke v18.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("1");
v20 = 1;
label07:
v20 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v19);
label08:
goto label10;
label09:
v21 := @caughtexception;
label10:
v22 = interfaceinvoke v1.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("format");
v23 = virtualinvoke v22.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("");
label11:
v24 = staticinvoke <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType valueOf(java.lang.String)>(v23);
label12:
goto label14;
label13:
v25 := @caughtexception;
v26 = new java.lang.IllegalArgumentException;
v27 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v23) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unknown content format specified in xml format value: \'\u0001\'");
specialinvoke v26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v27);
throw v26;
label14:
v28 = new com.novell.ldapchai.cr.HashSaltAnswer;
specialinvoke v28.<com.novell.ldapchai.cr.HashSaltAnswer: void <init>(java.lang.String,java.lang.String,int,boolean,com.novell.ldapchai.cr.Answer$FormatType,com.novell.ldapchai.cr.HashSaltAnswer$VERSION)>(v15, v17, v20, v2, v24, v10);
return v28;
catch java.lang.IllegalArgumentException from label01 to label02 with label03;
catch java.lang.NumberFormatException from label07 to label08 with label09;
catch java.lang.IllegalArgumentException from label11 to label12 with label13;
}
}