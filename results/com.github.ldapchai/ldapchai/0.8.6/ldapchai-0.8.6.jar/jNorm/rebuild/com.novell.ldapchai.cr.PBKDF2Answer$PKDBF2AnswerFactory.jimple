class com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory extends java.lang.Object implements com.novell.ldapchai.cr.Answer$ImplementationFactory
{
void <init>()
{
com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory v0;
v0 := @this: com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public com.novell.ldapchai.cr.PBKDF2Answer newAnswer(com.novell.ldapchai.cr.AnswerConfiguration, java.lang.String)
{
com.novell.ldapchai.cr.AnswerConfiguration v1;
com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory v0;
com.novell.ldapchai.cr.PBKDF2Answer v3;
java.lang.String v2;
v0 := @this: com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory;
v1 := @parameter0: com.novell.ldapchai.cr.AnswerConfiguration;
v2 := @parameter1: java.lang.String;
v3 = new com.novell.ldapchai.cr.PBKDF2Answer;
specialinvoke v3.<com.novell.ldapchai.cr.PBKDF2Answer: void <init>(com.novell.ldapchai.cr.AnswerConfiguration,java.lang.String)>(v1, v2);
return v3;
}
public com.novell.ldapchai.cr.Answer fromAnswerBean(com.novell.ldapchai.cr.bean.AnswerBean, java.lang.String)
{
com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory v0;
com.novell.ldapchai.cr.Answer$FormatType v7;
com.novell.ldapchai.cr.PBKDF2Answer v6;
java.lang.IllegalArgumentException v5;
int v10, v4;
com.novell.ldapchai.cr.bean.AnswerBean v1;
java.lang.String v2, v3, v8, v9;
boolean v11;
v0 := @this: com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory;
v1 := @parameter0: com.novell.ldapchai.cr.bean.AnswerBean;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v1.<com.novell.ldapchai.cr.bean.AnswerBean: java.lang.String getAnswerHash()>();
if v3 == null goto label1;
v4 = virtualinvoke v3.<java.lang.String: int length()>();
if v4 >= 1 goto label2;
label1:
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("missing answer value");
throw v5;
label2:
v6 = new com.novell.ldapchai.cr.PBKDF2Answer;
v7 = virtualinvoke v1.<com.novell.ldapchai.cr.bean.AnswerBean: com.novell.ldapchai.cr.Answer$FormatType getType()>();
v8 = virtualinvoke v1.<com.novell.ldapchai.cr.bean.AnswerBean: java.lang.String getAnswerHash()>();
v9 = virtualinvoke v1.<com.novell.ldapchai.cr.bean.AnswerBean: java.lang.String getSalt()>();
v10 = virtualinvoke v1.<com.novell.ldapchai.cr.bean.AnswerBean: int getHashCount()>();
v11 = virtualinvoke v1.<com.novell.ldapchai.cr.bean.AnswerBean: boolean isCaseInsensitive()>();
specialinvoke v6.<com.novell.ldapchai.cr.PBKDF2Answer: void <init>(com.novell.ldapchai.cr.Answer$FormatType,java.lang.String,java.lang.String,int,boolean)>(v7, v8, v9, v10, v11);
return v6;
}
public com.novell.ldapchai.cr.PBKDF2Answer fromXml(org.jrivard.xmlchai.XmlElement, boolean, java.lang.String)
{
com.novell.ldapchai.cr.PBKDF2Answer v18;
java.util.function.Function v12;
java.util.function.Supplier v14, v5;
org.jrivard.xmlchai.XmlElement v1;
int v16;
java.lang.String v3;
boolean v2;
com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory v0;
java.lang.NumberFormatException v17;
java.util.Optional v11, v13, v4, v7, v9;
java.lang.Object v10, v15, v6, v8;
v0 := @this: com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory;
v1 := @parameter0: org.jrivard.xmlchai.XmlElement;
v2 := @parameter1: boolean;
v3 := @parameter2: java.lang.String;
v4 = interfaceinvoke v1.<org.jrivard.xmlchai.XmlElement: java.util.Optional getText()>();
v5 = staticinvoke <com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory$lambda_fromXml_0__31: java.util.function.Supplier bootstrap$()>();
v6 = virtualinvoke v4.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>(v5);
v7 = interfaceinvoke v1.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("salt");
v8 = virtualinvoke v7.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("");
v9 = interfaceinvoke v1.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("hashcount");
v10 = virtualinvoke v9.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("1");
v11 = interfaceinvoke v1.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("format");
v12 = staticinvoke <com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory$valueOf__32: java.util.function.Function bootstrap$()>();
v13 = virtualinvoke v11.<java.util.Optional: java.util.Optional map(java.util.function.Function)>(v12);
v14 = staticinvoke <com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory$lambda_fromXml_1__33: java.util.function.Supplier bootstrap$()>();
v15 = virtualinvoke v13.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>(v14);
v16 = 1;
label1:
v16 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v10);
label2:
goto label4;
label3:
v17 := @caughtexception;
label4:
v18 = new com.novell.ldapchai.cr.PBKDF2Answer;
specialinvoke v18.<com.novell.ldapchai.cr.PBKDF2Answer: void <init>(com.novell.ldapchai.cr.Answer$FormatType,java.lang.String,java.lang.String,int,boolean)>(v15, v6, v8, v16, v2);
return v18;
catch java.lang.NumberFormatException from label1 to label2 with label3;
}
}