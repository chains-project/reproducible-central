class com.novell.ldapchai.cr.PBKDF2Answer extends java.lang.Object implements com.novell.ldapchai.cr.Answer
{
private final java.lang.String hashedAnswer;
private final java.lang.String salt;
private final int hashCount;
private final boolean caseInsensitive;
private final com.novell.ldapchai.cr.Answer$FormatType formatType;
private void <init>(com.novell.ldapchai.cr.Answer$FormatType, java.lang.String, java.lang.String, int, boolean)
{
com.novell.ldapchai.cr.Answer$FormatType v1;
com.novell.ldapchai.cr.PBKDF2Answer v0;
java.lang.IllegalArgumentException v10, v13, v6;
int[] v7;
int v12, v4, v8, v9;
java.lang.String v11, v2, v3;
boolean v5;
v0 := @this: com.novell.ldapchai.cr.PBKDF2Answer;
v1 := @parameter0: com.novell.ldapchai.cr.Answer$FormatType;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: int;
v5 := @parameter4: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
if v1 != null goto label1;
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("missing formatType");
throw v6;
label1:
v7 = <com.novell.ldapchai.cr.PBKDF2Answer$1: int[] $SwitchMap$com$novell$ldapchai$cr$Answer$FormatType>;
v8 = virtualinvoke v1.<com.novell.ldapchai.cr.Answer$FormatType: int ordinal()>();
v9 = v7[v8];
tableswitch(v9)
{
case 1: goto label3;
case 2: goto label3;
case 3: goto label3;
default: goto label2;
};
label2:
v10 = new java.lang.IllegalArgumentException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.novell.ldapchai.cr.Answer$FormatType)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unsupported formatType: \u0001");
specialinvoke v10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v11);
throw v10;
label3:
if v2 == null goto label4;
v12 = virtualinvoke v2.<java.lang.String: int length()>();
if v12 >= 1 goto label5;
label4:
v13 = new java.lang.IllegalArgumentException;
specialinvoke v13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("missing answerHash");
throw v13;
label5:
v0.<com.novell.ldapchai.cr.PBKDF2Answer: com.novell.ldapchai.cr.Answer$FormatType formatType> = v1;
v0.<com.novell.ldapchai.cr.PBKDF2Answer: java.lang.String hashedAnswer> = v2;
v0.<com.novell.ldapchai.cr.PBKDF2Answer: java.lang.String salt> = v3;
v0.<com.novell.ldapchai.cr.PBKDF2Answer: int hashCount> = v4;
v0.<com.novell.ldapchai.cr.PBKDF2Answer: boolean caseInsensitive> = v5;
return;
}
private void <init>(com.novell.ldapchai.cr.AnswerConfiguration, java.lang.String)
{
com.novell.ldapchai.cr.AnswerConfiguration v1;
com.novell.ldapchai.cr.Answer$FormatType v6;
com.novell.ldapchai.cr.PBKDF2Answer v0;
java.lang.IllegalArgumentException v8;
int v3, v7;
java.lang.String v10, v11, v2, v5;
boolean v4, v9;
v0 := @this: com.novell.ldapchai.cr.PBKDF2Answer;
v1 := @parameter0: com.novell.ldapchai.cr.AnswerConfiguration;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = v1.<com.novell.ldapchai.cr.AnswerConfiguration: int iterations>;
v0.<com.novell.ldapchai.cr.PBKDF2Answer: int hashCount> = v3;
v4 = v1.<com.novell.ldapchai.cr.AnswerConfiguration: boolean caseInsensitive>;
v0.<com.novell.ldapchai.cr.PBKDF2Answer: boolean caseInsensitive> = v4;
v5 = staticinvoke <com.novell.ldapchai.cr.PBKDF2Answer: java.lang.String generateSalt(int)>(32);
v0.<com.novell.ldapchai.cr.PBKDF2Answer: java.lang.String salt> = v5;
v6 = virtualinvoke v1.<com.novell.ldapchai.cr.AnswerConfiguration: com.novell.ldapchai.cr.Answer$FormatType getFormatType()>();
v0.<com.novell.ldapchai.cr.PBKDF2Answer: com.novell.ldapchai.cr.Answer$FormatType formatType> = v6;
if v2 == null goto label1;
v7 = virtualinvoke v2.<java.lang.String: int length()>();
if v7 >= 1 goto label2;
label1:
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("missing answerHash text");
throw v8;
label2:
v9 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: boolean caseInsensitive>;
if v9 == 0 goto label3;
v10 = virtualinvoke v2.<java.lang.String: java.lang.String toLowerCase()>();
goto label4;
label3:
v10 = v2;
label4:
v11 = specialinvoke v0.<com.novell.ldapchai.cr.PBKDF2Answer: java.lang.String hashValue(java.lang.String)>(v10);
v0.<com.novell.ldapchai.cr.PBKDF2Answer: java.lang.String hashedAnswer> = v11;
return;
}
public org.jrivard.xmlchai.XmlElement toXml()
{
com.novell.ldapchai.cr.Answer$FormatType v8;
com.novell.ldapchai.cr.PBKDF2Answer v0;
org.jrivard.xmlchai.XmlElement v2;
int v10, v11, v6;
java.lang.String v12, v3, v4, v5, v7, v9;
org.jrivard.xmlchai.XmlFactory v1;
v0 := @this: com.novell.ldapchai.cr.PBKDF2Answer;
v1 = staticinvoke <org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlFactory getFactory()>();
v2 = interfaceinvoke v1.<org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlElement newElement(java.lang.String)>("answer");
v3 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: java.lang.String hashedAnswer>;
interfaceinvoke v2.<org.jrivard.xmlchai.XmlElement: void setText(java.lang.String)>(v3);
v4 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: java.lang.String salt>;
if v4 == null goto label1;
v5 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: java.lang.String salt>;
v6 = virtualinvoke v5.<java.lang.String: int length()>();
if v6 <= 0 goto label1;
v7 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: java.lang.String salt>;
interfaceinvoke v2.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("salt", v7);
label1:
v8 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: com.novell.ldapchai.cr.Answer$FormatType formatType>;
v9 = virtualinvoke v8.<com.novell.ldapchai.cr.Answer$FormatType: java.lang.String toString()>();
interfaceinvoke v2.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("format", v9);
v10 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: int hashCount>;
if v10 <= 1 goto label2;
v11 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: int hashCount>;
v12 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v11);
interfaceinvoke v2.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("hashcount", v12);
label2:
return v2;
}
public boolean testAnswer(java.lang.String)
{
com.novell.ldapchai.cr.PBKDF2Answer v0;
java.lang.String v1, v3, v4, v5, v6;
boolean v2, v7;
v0 := @this: com.novell.ldapchai.cr.PBKDF2Answer;
v1 := @parameter0: java.lang.String;
if v1 != null goto label1;
return 0;
label1:
v2 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: boolean caseInsensitive>;
if v2 == 0 goto label2;
v3 = virtualinvoke v1.<java.lang.String: java.lang.String toLowerCase()>();
goto label3;
label2:
v3 = v1;
label3:
v4 = specialinvoke v0.<com.novell.ldapchai.cr.PBKDF2Answer: java.lang.String hashValue(java.lang.String)>(v3);
if v4 == null goto label4;
v5 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: java.lang.String hashedAnswer>;
if v5 == null goto label4;
v6 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: java.lang.String hashedAnswer>;
v7 = virtualinvoke v6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v4);
return v7;
label4:
return 0;
}
private java.lang.String hashValue(java.lang.String)
{
byte[] v15, v20;
java.lang.IllegalStateException v24, v8;
com.novell.ldapchai.util.internal.StringHelper$Base64Options[] v21;
com.novell.ldapchai.cr.PBKDF2Answer v0;
javax.crypto.SecretKeyFactory v18;
short v7;
java.nio.charset.Charset v14;
int[] v2;
javax.crypto.spec.PBEKeySpec v16;
int v17, v4, v5;
java.lang.String v1, v10, v11, v13, v22, v25, v26, v6;
com.novell.ldapchai.cr.Answer$FormatType v3, v9;
java.lang.Exception v23;
char[] v12;
javax.crypto.SecretKey v19;
v0 := @this: com.novell.ldapchai.cr.PBKDF2Answer;
v1 := @parameter0: java.lang.String;
label1:
v2 = <com.novell.ldapchai.cr.PBKDF2Answer$1: int[] $SwitchMap$com$novell$ldapchai$cr$Answer$FormatType>;
v3 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: com.novell.ldapchai.cr.Answer$FormatType formatType>;
v4 = virtualinvoke v3.<com.novell.ldapchai.cr.Answer$FormatType: int ordinal()>();
v5 = v2[v4];
tableswitch(v5)
{
case 1: goto label2;
case 2: goto label3;
case 3: goto label4;
default: goto label5;
};
label2:
v6 = "PBKDF2WithHmacSHA1";
v7 = 512;
goto label6;
label3:
v6 = "PBKDF2WithHmacSHA256";
v7 = 1024;
goto label6;
label4:
v6 = "PBKDF2WithHmacSHA512";
v7 = 1536;
goto label6;
label5:
v8 = new java.lang.IllegalStateException;
v9 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: com.novell.ldapchai.cr.Answer$FormatType formatType>;
v10 = virtualinvoke v9.<com.novell.ldapchai.cr.Answer$FormatType: java.lang.String toString()>();
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("formatType not supported: \u0001");
specialinvoke v8.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v11);
throw v8;
label6:
v12 = virtualinvoke v1.<java.lang.String: char[] toCharArray()>();
v13 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: java.lang.String salt>;
v14 = <com.novell.ldapchai.cr.ChaiCrFactory: java.nio.charset.Charset DEFAULT_CHARSET>;
v15 = virtualinvoke v13.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v14);
v16 = new javax.crypto.spec.PBEKeySpec;
v17 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: int hashCount>;
specialinvoke v16.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>(v12, v15, v17, v7);
v18 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(v6);
v19 = virtualinvoke v18.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(v16);
v20 = interfaceinvoke v19.<javax.crypto.SecretKey: byte[] getEncoded()>();
v21 = newarray (com.novell.ldapchai.util.internal.StringHelper$Base64Options)[0];
v22 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: java.lang.String base64Encode(byte[],com.novell.ldapchai.util.internal.StringHelper$Base64Options[])>(v20, v21);
label7:
return v22;
label8:
v23 := @caughtexception;
v24 = new java.lang.IllegalStateException;
v25 = virtualinvoke v23.<java.lang.Exception: java.lang.String getMessage()>();
v26 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v25) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unable to perform PBKDF2 hashing operation: \u0001");
specialinvoke v24.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v26);
throw v24;
catch java.lang.Exception from label1 to label7 with label8;
}
private static java.lang.String generateSalt(int)
{
char v8;
java.security.SecureRandom v1;
int v0, v3, v6, v7;
java.lang.StringBuilder v2;
java.lang.String v4, v5, v9;
v0 := @parameter0: int;
v1 = new java.security.SecureRandom;
specialinvoke v1.<java.security.SecureRandom: void <init>()>();
v2 = new java.lang.StringBuilder;
specialinvoke v2.<java.lang.StringBuilder: void <init>(int)>(v0);
v3 = 0;
label1:
if v3 >= v0 goto label2;
v4 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
v5 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
v6 = virtualinvoke v5.<java.lang.String: int length()>();
v7 = virtualinvoke v1.<java.security.SecureRandom: int nextInt(int)>(v6);
v8 = virtualinvoke v4.<java.lang.String: char charAt(int)>(v7);
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v8);
v3 = v3 + 1;
goto label1;
label2:
v9 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.String toString()>();
return v9;
}
public com.novell.ldapchai.cr.bean.AnswerBean asAnswerBean()
{
com.novell.ldapchai.cr.Answer$FormatType v2;
int v5;
com.novell.ldapchai.cr.bean.AnswerBean v1;
com.novell.ldapchai.cr.PBKDF2Answer v0;
java.lang.String v3, v4;
boolean v6;
v0 := @this: com.novell.ldapchai.cr.PBKDF2Answer;
v1 = new com.novell.ldapchai.cr.bean.AnswerBean;
v2 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: com.novell.ldapchai.cr.Answer$FormatType formatType>;
v3 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: java.lang.String hashedAnswer>;
v4 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: java.lang.String salt>;
v5 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: int hashCount>;
v6 = v0.<com.novell.ldapchai.cr.PBKDF2Answer: boolean caseInsensitive>;
specialinvoke v1.<com.novell.ldapchai.cr.bean.AnswerBean: void <init>(com.novell.ldapchai.cr.Answer$FormatType,java.lang.String,java.lang.String,java.lang.String,int,boolean)>(v2, null, v3, v4, v5, v6);
return v1;
}
}