public class com.novell.ldapchai.impl.ad.entry.ADEntries extends java.lang.Object
{
static final long AD_EPOCH_OFFSET_MS;
private void <init>()
{
com.novell.ldapchai.impl.ad.entry.ADEntries v0;
v0 := @this: com.novell.ldapchai.impl.ad.entry.ADEntries;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.String convertDateToWinEpoch(java.time.Instant)
{
long v2, v3, v4, v5;
java.lang.String v6;
java.time.Instant v0;
java.lang.NullPointerException v1;
v0 := @parameter0: java.time.Instant;
if v0 != null goto label1;
v1 = new java.lang.NullPointerException;
specialinvoke v1.<java.lang.NullPointerException: void <init>(java.lang.String)>("date must be non-null");
throw v1;
label1:
v2 = virtualinvoke v0.<java.time.Instant: long toEpochMilli()>();
v3 = <com.novell.ldapchai.impl.ad.entry.ADEntries: long AD_EPOCH_OFFSET_MS>;
v4 = v2 - v3;
v5 = v4 * 10000L;
v6 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(v5);
return v6;
}
public static java.time.Instant convertWinEpochToDate(java.lang.String)
{
long v3, v5, v6, v7;
java.time.Instant v9;
byte v4, v8;
java.lang.String v0, v1;
boolean v2;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
return null;
label1:
v1 = "0";
v2 = virtualinvoke v1.<java.lang.String: boolean equals(java.lang.Object)>(v0);
if v2 == 0 goto label2;
return null;
label2:
v3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(v0);
v4 = v3 cmp 0L;
if v4 > 0 goto label3;
return null;
label3:
v5 = v3 / 10000L;
v6 = <com.novell.ldapchai.impl.ad.entry.ADEntries: long AD_EPOCH_OFFSET_MS>;
v7 = v5 + v6;
v8 = v7 cmp 910692730085477L;
if v8 < 0 goto label4;
return null;
label4:
v9 = staticinvoke <java.time.Instant: java.time.Instant ofEpochMilli(long)>(v7);
return v9;
}
static java.lang.String readGUID(com.novell.ldapchai.ChaiEntry) throws com.novell.ldapchai.exception.ChaiOperationException, com.novell.ldapchai.exception.ChaiUnavailableException
{
byte[] v4;
byte[][] v3;
com.novell.ldapchai.ChaiEntry v0;
java.math.BigInteger v5;
java.lang.String v2, v6;
com.novell.ldapchai.provider.ChaiProvider v1;
v0 := @parameter0: com.novell.ldapchai.ChaiEntry;
v1 = interfaceinvoke v0.<com.novell.ldapchai.ChaiEntry: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
v2 = interfaceinvoke v0.<com.novell.ldapchai.ChaiEntry: java.lang.String getEntryDN()>();
v3 = interfaceinvoke v1.<com.novell.ldapchai.provider.ChaiProvider: byte[][] readMultiByteAttribute(java.lang.String,java.lang.String)>(v2, "objectGUID");
v4 = v3[0];
v5 = new java.math.BigInteger;
specialinvoke v5.<java.math.BigInteger: void <init>(int,byte[])>(1, v4);
v6 = virtualinvoke v5.<java.math.BigInteger: java.lang.String toString(int)>(16);
return v6;
}
static void <clinit>()
{
java.util.GregorianCalendar v0;
java.util.Date v2;
java.util.TimeZone v1;
long v3;
v0 = new java.util.GregorianCalendar;
v1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");
specialinvoke v0.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>(v1);
virtualinvoke v0.<java.util.Calendar: void clear()>();
virtualinvoke v0.<java.util.Calendar: void set(int,int,int,int,int)>(1601, 0, 1, 0, 0);
v2 = virtualinvoke v0.<java.util.Calendar: java.util.Date getTime()>();
v3 = virtualinvoke v2.<java.util.Date: long getTime()>();
<com.novell.ldapchai.impl.ad.entry.ADEntries: long AD_EPOCH_OFFSET_MS> = v3;
return;
}
}