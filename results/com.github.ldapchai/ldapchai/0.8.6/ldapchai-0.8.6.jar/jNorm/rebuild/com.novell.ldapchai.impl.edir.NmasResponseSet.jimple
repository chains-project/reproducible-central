public class com.novell.ldapchai.impl.edir.NmasResponseSet extends com.novell.ldapchai.cr.AbstractResponseSet
{
private static final com.novell.ldapchai.util.internal.ChaiLogger LOGGER;
private final com.novell.ldapchai.ChaiUser user;
private static final java.lang.String NMAS_XML_ROOTNODE;
private static final java.lang.String NMAS_XML_ATTR_RANDOM_COUNT;
private static final java.lang.String NMAS_XML_NODE_CHALLENGE;
private static final java.lang.String NMAS_XML_ATTR_TYPE;
private static final java.lang.String NMAS_XML_ATTR_DEFINE;
private static final java.lang.String NMAS_XML_ATTR_MIN_LENGTH;
private static final java.lang.String NMAS_XML_ATTR_MAX_LENGTH;
static com.novell.ldapchai.impl.edir.NmasResponseSet readNmasUserResponseSet(com.novell.ldapchai.ChaiUser) throws com.novell.ldapchai.exception.ChaiUnavailableException
{
byte[] v9;
com.novell.ldapchai.ChaiUser v0;
java.util.function.Supplier v12, v16;
javax.naming.ldap.ExtendedResponse v8;
int[] v3, v4;
int v5, v6;
com.novell.ldapchai.impl.edir.entry.ext.GetLoginConfigRequest v1;
java.lang.String v10, v2;
java.lang.Exception v14;
com.novell.ldapchai.provider.ChaiProvider v7;
com.novell.ldapchai.impl.edir.NmasResponseSet v13;
com.novell.ldapchai.util.internal.ChaiLogger v11, v15;
v0 := @parameter0: com.novell.ldapchai.ChaiUser;
v1 = new com.novell.ldapchai.impl.edir.entry.ext.GetLoginConfigRequest;
specialinvoke v1.<com.novell.ldapchai.impl.edir.entry.ext.GetLoginConfigRequest: void <init>()>();
v2 = interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: java.lang.String getEntryDN()>();
virtualinvoke v1.<com.novell.ldapchai.impl.edir.entry.ext.GetLoginConfigRequest: void setObjectDN(java.lang.String)>(v2);
virtualinvoke v1.<com.novell.ldapchai.impl.edir.entry.ext.GetLoginConfigRequest: void setTag(java.lang.String)>("ChallengeResponseQuestions");
v3 = staticinvoke <com.novell.ldapchai.impl.edir.entry.ext.NMASChallengeResponse: int[] getMethodId()>();
virtualinvoke v1.<com.novell.ldapchai.impl.edir.entry.ext.GetLoginConfigRequest: void setMethodID(int[])>(v3);
v4 = staticinvoke <com.novell.ldapchai.impl.edir.entry.ext.NMASChallengeResponse: int[] getMethodId()>();
v5 = lengthof v4;
v6 = v5 * 4;
virtualinvoke v1.<com.novell.ldapchai.impl.edir.entry.ext.GetLoginConfigRequest: void setMethodIDLen(int)>(v6);
label1:
v7 = interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
v8 = interfaceinvoke v7.<com.novell.ldapchai.provider.ChaiProvider: javax.naming.ldap.ExtendedResponse extendedOperation(javax.naming.ldap.ExtendedRequest)>(v1);
v9 = interfaceinvoke v8.<javax.naming.ldap.ExtendedResponse: byte[] getEncodedValue()>();
if v9 != null goto label3;
label2:
return null;
label3:
v10 = new java.lang.String;
specialinvoke v10.<java.lang.String: void <init>(byte[],java.lang.String)>(v9, "UTF8");
v11 = <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v12 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_readNmasUserResponseSet_0__50: java.util.function.Supplier bootstrap$(java.lang.String)>(v10);
virtualinvoke v11.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v12);
v13 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.impl.edir.NmasResponseSet readNmasUserResponseSet(com.novell.ldapchai.ChaiUser,java.lang.String)>(v0, v10);
label4:
return v13;
label5:
v14 := @caughtexception;
v15 = <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v16 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_readNmasUserResponseSet_1__51: java.util.function.Supplier bootstrap$(com.novell.ldapchai.ChaiUser,java.lang.Exception)>(v0, v14);
virtualinvoke v15.<com.novell.ldapchai.util.internal.ChaiLogger: void error(java.util.function.Supplier)>(v16);
return null;
catch java.io.IOException from label1 to label2 with label5;
catch com.novell.ldapchai.exception.ChaiValidationException from label1 to label2 with label5;
catch com.novell.ldapchai.exception.ChaiOperationException from label1 to label2 with label5;
catch java.io.IOException from label3 to label4 with label5;
catch com.novell.ldapchai.exception.ChaiValidationException from label3 to label4 with label5;
catch com.novell.ldapchai.exception.ChaiOperationException from label3 to label4 with label5;
}
static com.novell.ldapchai.impl.edir.NmasResponseSet readNmasUserResponseSet(com.novell.ldapchai.ChaiUser, java.lang.String) throws com.novell.ldapchai.exception.ChaiValidationException
{
java.util.Locale v47;
com.novell.ldapchai.cr.AbstractResponseSet$STATE v49;
boolean v17, v44;
java.util.List v42;
java.lang.StringBuilder v13, v19, v31, v4;
com.novell.ldapchai.impl.edir.NmasResponseSet v46;
com.novell.ldapchai.util.internal.ChaiLogger v15, v21, v23, v27, v33, v37, v39, v7, v9;
com.novell.ldapchai.ChaiUser v0;
java.util.HashMap v41;
java.util.function.Supplier v10, v16, v22, v24, v28, v34, v38, v40, v8;
com.novell.ldapchai.cr.ChallengeSet v2;
int v12, v25, v3, v30, v36, v48, v5;
java.lang.String v1, v14, v20, v26, v32, v35, v50, v6;
java.util.Iterator v43;
java.io.IOException v11, v18, v29;
java.lang.Object v45;
v0 := @parameter0: com.novell.ldapchai.ChaiUser;
v1 := @parameter1: java.lang.String;
v2 = null;
v3 = 0;
v4 = new java.lang.StringBuilder;
specialinvoke v4.<java.lang.StringBuilder: void <init>()>();
v5 = virtualinvoke v1.<java.lang.String: int indexOf(java.lang.String)>("<");
if v5 <= 0 goto label05;
label01:
v3 = 1;
v6 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int)>(v5);
v7 = <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v8 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_readNmasUserResponseSet_2__56: java.util.function.Supplier bootstrap$(java.lang.String)>(v6);
virtualinvoke v7.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v8);
v2 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.cr.ChallengeSet parseNmasUserResponseXML(java.lang.String)>(v6);
v9 = <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v10 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_readNmasUserResponseSet_3__57: java.util.function.Supplier bootstrap$(int)>(v5);
virtualinvoke v9.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v10);
label02:
goto label05;
label03:
v11 := @caughtexception;
v12 = virtualinvoke v4.<java.lang.StringBuilder: int length()>();
if v12 <= 0 goto label04;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
label04:
v13 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error parsing index stripped value: ");
v14 = virtualinvoke v11.<java.io.IOException: java.lang.String getMessage()>();
virtualinvoke v13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v14);
v15 = <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v16 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_readNmasUserResponseSet_4__60: java.util.function.Supplier bootstrap$(java.io.IOException)>(v11);
virtualinvoke v15.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v16);
label05:
if v2 != null goto label18;
v17 = virtualinvoke v1.<java.lang.String: boolean startsWith(java.lang.String)>("<?xml");
if v17 == 0 goto label10;
label06:
v3 = v3 + 1;
v2 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.cr.ChallengeSet parseNmasUserResponseXML(java.lang.String)>(v1);
label07:
goto label09;
label08:
v18 := @caughtexception;
v19 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error parsing raw value: ");
v20 = virtualinvoke v18.<java.io.IOException: java.lang.String getMessage()>();
virtualinvoke v19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v20);
v21 = <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v22 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_readNmasUserResponseSet_5__59: java.util.function.Supplier bootstrap$(java.io.IOException)>(v18);
virtualinvoke v21.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v22);
label09:
v23 = <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v24 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_readNmasUserResponseSet_6__55: java.util.function.Supplier bootstrap$()>();
virtualinvoke v23.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v24);
label10:
if v2 != null goto label18;
v25 = virtualinvoke v1.<java.lang.String: int length()>();
if v25 <= 16 goto label15;
v26 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int)>(16);
label11:
v3 = v3 + 1;
v2 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.cr.ChallengeSet parseNmasUserResponseXML(java.lang.String)>(v26);
v27 = <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v28 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_readNmasUserResponseSet_7__54: java.util.function.Supplier bootstrap$()>();
virtualinvoke v27.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v28);
label12:
goto label15;
label13:
v29 := @caughtexception;
v30 = virtualinvoke v4.<java.lang.StringBuilder: int length()>();
if v30 <= 0 goto label14;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
label14:
v31 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error parsing header stripped value: ");
v32 = virtualinvoke v29.<java.io.IOException: java.lang.String getMessage()>();
virtualinvoke v31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v32);
v33 = <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v34 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_readNmasUserResponseSet_8__58: java.util.function.Supplier bootstrap$(java.io.IOException)>(v29);
virtualinvoke v33.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v34);
label15:
if v2 != null goto label18;
v35 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.StringBuilder)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unable to parse nmas ChallengeResponseQuestions: \u0001");
if v3 <= 0 goto label16;
v36 = virtualinvoke v1.<java.lang.String: int length()>();
if v36 <= 16 goto label16;
v37 = <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v38 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_readNmasUserResponseSet_9__53: java.util.function.Supplier bootstrap$(java.lang.String)>(v35);
virtualinvoke v37.<com.novell.ldapchai.util.internal.ChaiLogger: void error(java.util.function.Supplier)>(v38);
goto label17;
label16:
v39 = <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v40 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_readNmasUserResponseSet_10__52: java.util.function.Supplier bootstrap$(java.lang.String)>(v35);
virtualinvoke v39.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v40);
label17:
return null;
label18:
v41 = new java.util.HashMap;
specialinvoke v41.<java.util.HashMap: void <init>()>();
v42 = interfaceinvoke v2.<com.novell.ldapchai.cr.ChallengeSet: java.util.List getChallenges()>();
v43 = interfaceinvoke v42.<java.util.List: java.util.Iterator iterator()>();
label19:
v44 = interfaceinvoke v43.<java.util.Iterator: boolean hasNext()>();
if v44 == 0 goto label20;
v45 = interfaceinvoke v43.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v41.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v45, null);
goto label19;
label20:
v46 = new com.novell.ldapchai.impl.edir.NmasResponseSet;
v47 = interfaceinvoke v2.<com.novell.ldapchai.cr.ChallengeSet: java.util.Locale getLocale()>();
v48 = interfaceinvoke v2.<com.novell.ldapchai.cr.ChallengeSet: int getMinRandomRequired()>();
v49 = <com.novell.ldapchai.cr.AbstractResponseSet$STATE: com.novell.ldapchai.cr.AbstractResponseSet$STATE READ>;
v50 = interfaceinvoke v2.<com.novell.ldapchai.cr.ChallengeSet: java.lang.String getIdentifier()>();
specialinvoke v46.<com.novell.ldapchai.impl.edir.NmasResponseSet: void <init>(java.util.Map,java.util.Locale,int,com.novell.ldapchai.cr.AbstractResponseSet$STATE,com.novell.ldapchai.ChaiUser,java.lang.String)>(v41, v47, v48, v49, v0, v50);
return v46;
catch java.io.IOException from label01 to label02 with label03;
catch java.io.IOException from label06 to label07 with label08;
catch java.io.IOException from label11 to label12 with label13;
}
static com.novell.ldapchai.cr.ChallengeSet parseNmasUserResponseXML(java.lang.String) throws java.io.IOException, com.novell.ldapchai.exception.ChaiValidationException
{
org.jrivard.xmlchai.XmlDocument v4;
com.novell.ldapchai.cr.ChaiChallengeSet v33;
boolean v13, v24, v28;
java.util.List v11;
java.util.Optional v15, v18, v22, v26, v29, v6, v9;
com.novell.ldapchai.cr.ChaiChallenge v32;
java.util.function.Supplier v30;
org.jrivard.xmlchai.XmlElement v5;
java.util.ArrayList v1;
org.jrivard.xmlchai.AccessMode v3;
int v17, v20, v8;
java.lang.String v0, v21, v25;
org.jrivard.xmlchai.XmlFactory v2;
java.util.Iterator v12;
java.lang.Object v10, v14, v16, v19, v23, v27, v31, v7;
v0 := @parameter0: java.lang.String;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = staticinvoke <org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlFactory getFactory()>();
v3 = <org.jrivard.xmlchai.AccessMode: org.jrivard.xmlchai.AccessMode IMMUTABLE>;
v4 = interfaceinvoke v2.<org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlDocument parseString(java.lang.String,org.jrivard.xmlchai.AccessMode)>(v0, v3);
v5 = interfaceinvoke v4.<org.jrivard.xmlchai.XmlDocument: org.jrivard.xmlchai.XmlElement getRootElement()>();
v6 = interfaceinvoke v5.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("RandomQuestions");
v7 = virtualinvoke v6.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("0");
v8 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: int convertStrToInt(java.lang.String,int)>(v7, 0);
v9 = interfaceinvoke v5.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("GUID");
v10 = virtualinvoke v9.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);
v11 = interfaceinvoke v4.<org.jrivard.xmlchai.XmlDocument: java.util.List evaluateXpathToElements(java.lang.String)>("//Challenge");
v12 = interfaceinvoke v11.<java.util.List: java.util.Iterator iterator()>();
label1:
v13 = interfaceinvoke v12.<java.util.Iterator: boolean hasNext()>();
if v13 == 0 goto label2;
v14 = interfaceinvoke v12.<java.util.Iterator: java.lang.Object next()>();
v15 = interfaceinvoke v14.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("MaxLength");
v16 = virtualinvoke v15.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("");
v17 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: int convertStrToInt(java.lang.String,int)>(v16, 255);
v18 = interfaceinvoke v14.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("MinLength");
v19 = virtualinvoke v18.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("");
v20 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: int convertStrToInt(java.lang.String,int)>(v19, 2);
v21 = "Admin";
v22 = interfaceinvoke v14.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("Define");
v23 = virtualinvoke v22.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);
v24 = virtualinvoke v21.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v23);
v25 = "Required";
v26 = interfaceinvoke v14.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("Type");
v27 = virtualinvoke v26.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);
v28 = virtualinvoke v25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v27);
v29 = interfaceinvoke v14.<org.jrivard.xmlchai.XmlElement: java.util.Optional getText()>();
v30 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_parseNmasUserResponseXML_11__61: java.util.function.Supplier bootstrap$()>();
v31 = virtualinvoke v29.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>(v30);
v32 = new com.novell.ldapchai.cr.ChaiChallenge;
specialinvoke v32.<com.novell.ldapchai.cr.ChaiChallenge: void <init>(boolean,java.lang.String,int,int,boolean,int,boolean)>(v28, v31, v20, v17, v24, 0, 0);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v32);
goto label1;
label2:
v33 = new com.novell.ldapchai.cr.ChaiChallengeSet;
specialinvoke v33.<com.novell.ldapchai.cr.ChaiChallengeSet: void <init>(java.util.Collection,int,java.util.Locale,java.lang.String)>(v1, v8, null, v10);
return v33;
}
void <init>(java.util.Map, java.util.Locale, int, com.novell.ldapchai.cr.AbstractResponseSet$STATE, com.novell.ldapchai.ChaiUser, java.lang.String) throws com.novell.ldapchai.exception.ChaiValidationException
{
com.novell.ldapchai.ChaiUser v5;
java.util.Locale v2;
java.util.Map v1, v7, v8;
int v3;
java.lang.String v6;
com.novell.ldapchai.cr.AbstractResponseSet$STATE v4;
com.novell.ldapchai.impl.edir.NmasResponseSet v0;
v0 := @this: com.novell.ldapchai.impl.edir.NmasResponseSet;
v1 := @parameter0: java.util.Map;
v2 := @parameter1: java.util.Locale;
v3 := @parameter2: int;
v4 := @parameter3: com.novell.ldapchai.cr.AbstractResponseSet$STATE;
v5 := @parameter4: com.novell.ldapchai.ChaiUser;
v6 := @parameter5: java.lang.String;
v7 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet: java.util.Map convertAnswerTextMap(java.util.Map)>(v1);
v8 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
specialinvoke v0.<com.novell.ldapchai.cr.AbstractResponseSet: void <init>(java.util.Map,java.util.Map,java.util.Locale,int,com.novell.ldapchai.cr.AbstractResponseSet$STATE,java.lang.String,java.time.Instant)>(v7, v8, v2, v3, v4, v6, null);
v0.<com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.ChaiUser user> = v5;
return;
}
public java.lang.String stringValue() throws java.lang.UnsupportedOperationException
{
java.lang.UnsupportedOperationException v1;
com.novell.ldapchai.impl.edir.NmasResponseSet v0;
v0 := @this: com.novell.ldapchai.impl.edir.NmasResponseSet;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("stringValue() is not supported by NMAS response sets");
throw v1;
}
public boolean test(java.util.Map)
{
java.lang.UnsupportedOperationException v2;
com.novell.ldapchai.impl.edir.NmasResponseSet v0;
java.util.Map v1;
v0 := @this: com.novell.ldapchai.impl.edir.NmasResponseSet;
v1 := @parameter0: java.util.Map;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("NMAS Response testing not yet implemented");
throw v2;
}
boolean write() throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiOperationException
{
byte[] v10, v42;
java.util.Map v34;
java.util.Set v35;
java.lang.Exception v58;
com.novell.ldapchai.provider.ChaiProvider v17, v53;
com.novell.ldapchai.ChaiUser v16, v44, v5, v52;
java.util.function.Supplier v21, v24, v27, v30, v57, v60, v62;
java.lang.String v31, v41, v45, v47, v6, v8, v9;
java.lang.IllegalStateException v3;
javax.naming.ldap.ExtendedResponse v18, v54;
int[] v12, v13, v48, v49;
com.novell.ldapchai.cr.AbstractResponseSet$STATE v1, v2, v63;
com.novell.ldapchai.exception.ChaiValidationException v28;
boolean v33, v37;
com.novell.ldapchai.impl.edir.NmasResponseSet v0;
java.io.UnsupportedEncodingException v22;
com.novell.ldapchai.util.internal.ChaiLogger v20, v23, v26, v29, v56, v59, v61;
com.novell.ldapchai.impl.edir.entry.ext.PutLoginConfigRequest v4;
com.novell.ldapchai.cr.ChallengeSet v7;
com.novell.ldapchai.impl.edir.entry.ext.PutLoginSecretRequest v43;
int v11, v14, v15, v19, v46, v50, v51, v55;
com.novell.ldapchai.exception.ChaiOperationException v25, v32;
java.util.Iterator v36;
java.lang.Object v38, v39, v40;
v0 := @this: com.novell.ldapchai.impl.edir.NmasResponseSet;
v1 = v0.<com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.cr.AbstractResponseSet$STATE state>;
v2 = <com.novell.ldapchai.cr.AbstractResponseSet$STATE: com.novell.ldapchai.cr.AbstractResponseSet$STATE NEW>;
if v1 == v2 goto label01;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("RepsonseSet not suitable for writing (not in NEW state)");
throw v3;
label01:
v4 = new com.novell.ldapchai.impl.edir.entry.ext.PutLoginConfigRequest;
specialinvoke v4.<com.novell.ldapchai.impl.edir.entry.ext.PutLoginConfigRequest: void <init>()>();
v5 = v0.<com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.ChaiUser user>;
v6 = interfaceinvoke v5.<com.novell.ldapchai.ChaiUser: java.lang.String getEntryDN()>();
virtualinvoke v4.<com.novell.ldapchai.impl.edir.entry.ext.PutLoginConfigRequest: void setObjectDN(java.lang.String)>(v6);
v7 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.cr.ChallengeSet getChallengeSet()>();
v8 = v0.<com.novell.ldapchai.impl.edir.NmasResponseSet: java.lang.String csIdentifier>;
v9 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet: java.lang.String csToNmasXML(com.novell.ldapchai.cr.ChallengeSet,java.lang.String)>(v7, v8);
v10 = virtualinvoke v9.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");
virtualinvoke v4.<com.novell.ldapchai.impl.edir.entry.ext.PutLoginConfigRequest: void setData(byte[])>(v10);
v11 = lengthof v10;
virtualinvoke v4.<com.novell.ldapchai.impl.edir.entry.ext.PutLoginConfigRequest: void setDataLen(int)>(v11);
virtualinvoke v4.<com.novell.ldapchai.impl.edir.entry.ext.PutLoginConfigRequest: void setTag(java.lang.String)>("ChallengeResponseQuestions");
v12 = staticinvoke <com.novell.ldapchai.impl.edir.entry.ext.NMASChallengeResponse: int[] getMethodId()>();
virtualinvoke v4.<com.novell.ldapchai.impl.edir.entry.ext.PutLoginConfigRequest: void setMethodID(int[])>(v12);
v13 = staticinvoke <com.novell.ldapchai.impl.edir.entry.ext.NMASChallengeResponse: int[] getMethodId()>();
v14 = lengthof v13;
v15 = v14 * 4;
virtualinvoke v4.<com.novell.ldapchai.impl.edir.entry.ext.PutLoginConfigRequest: void setMethodIDLen(int)>(v15);
v16 = v0.<com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.ChaiUser user>;
v17 = interfaceinvoke v16.<com.novell.ldapchai.ChaiUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
v18 = interfaceinvoke v17.<com.novell.ldapchai.provider.ChaiProvider: javax.naming.ldap.ExtendedResponse extendedOperation(javax.naming.ldap.ExtendedRequest)>(v4);
if v18 == null goto label06;
v19 = virtualinvoke v18.<com.novell.ldapchai.impl.edir.entry.ext.PutLoginConfigResponse: int getNmasRetCode()>();
if v19 == 0 goto label06;
v20 = <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v21 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_write_12__64: java.util.function.Supplier bootstrap$(javax.naming.ldap.ExtendedResponse)>(v18);
virtualinvoke v20.<com.novell.ldapchai.util.internal.ChaiLogger: void debug(java.util.function.Supplier)>(v21);
label02:
return 0;
label03:
v22 := @caughtexception;
v23 = <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v24 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_write_13__68: java.util.function.Supplier bootstrap$(java.io.UnsupportedEncodingException)>(v22);
virtualinvoke v23.<com.novell.ldapchai.util.internal.ChaiLogger: void error(java.util.function.Supplier)>(v24);
return 0;
label04:
v25 := @caughtexception;
v26 = <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v27 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_write_14__67: java.util.function.Supplier bootstrap$(com.novell.ldapchai.exception.ChaiOperationException)>(v25);
virtualinvoke v26.<com.novell.ldapchai.util.internal.ChaiLogger: void error(java.util.function.Supplier)>(v27);
throw v25;
label05:
v28 := @caughtexception;
v29 = <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v30 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_write_15__66: java.util.function.Supplier bootstrap$(com.novell.ldapchai.exception.ChaiValidationException)>(v28);
virtualinvoke v29.<com.novell.ldapchai.util.internal.ChaiLogger: void error(java.util.function.Supplier)>(v30);
v31 = virtualinvoke v28.<com.novell.ldapchai.exception.ChaiValidationException: java.lang.String getMessage()>();
v32 = staticinvoke <com.novell.ldapchai.exception.ChaiOperationException: com.novell.ldapchai.exception.ChaiOperationException forErrorMessage(java.lang.String,java.lang.Throwable)>(v31, v28);
throw v32;
label06:
v33 = 1;
v34 = v0.<com.novell.ldapchai.impl.edir.NmasResponseSet: java.util.Map crMap>;
v35 = interfaceinvoke v34.<java.util.Map: java.util.Set entrySet()>();
v36 = interfaceinvoke v35.<java.util.Set: java.util.Iterator iterator()>();
label07:
v37 = interfaceinvoke v36.<java.util.Iterator: boolean hasNext()>();
if v37 == 0 goto label11;
v38 = interfaceinvoke v36.<java.util.Iterator: java.lang.Object next()>();
v39 = interfaceinvoke v38.<java.util.Map$Entry: java.lang.Object getKey()>();
label08:
v40 = interfaceinvoke v38.<java.util.Map$Entry: java.lang.Object getValue()>();
v41 = virtualinvoke v40.<com.novell.ldapchai.impl.edir.NmasResponseSet$NmasAnswer: java.lang.String getAnswerText()>();
v42 = virtualinvoke v41.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");
v43 = new com.novell.ldapchai.impl.edir.entry.ext.PutLoginSecretRequest;
specialinvoke v43.<com.novell.ldapchai.impl.edir.entry.ext.PutLoginSecretRequest: void <init>()>();
v44 = v0.<com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.ChaiUser user>;
v45 = interfaceinvoke v44.<com.novell.ldapchai.ChaiUser: java.lang.String getEntryDN()>();
virtualinvoke v43.<com.novell.ldapchai.impl.edir.entry.ext.PutLoginSecretRequest: void setObjectDN(java.lang.String)>(v45);
virtualinvoke v43.<com.novell.ldapchai.impl.edir.entry.ext.PutLoginSecretRequest: void setData(byte[])>(v42);
v46 = lengthof v42;
virtualinvoke v43.<com.novell.ldapchai.impl.edir.entry.ext.PutLoginSecretRequest: void setDataLen(int)>(v46);
v47 = interfaceinvoke v39.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
virtualinvoke v43.<com.novell.ldapchai.impl.edir.entry.ext.PutLoginSecretRequest: void setTag(java.lang.String)>(v47);
v48 = staticinvoke <com.novell.ldapchai.impl.edir.entry.ext.NMASChallengeResponse: int[] getMethodId()>();
virtualinvoke v43.<com.novell.ldapchai.impl.edir.entry.ext.PutLoginSecretRequest: void setMethodID(int[])>(v48);
v49 = staticinvoke <com.novell.ldapchai.impl.edir.entry.ext.NMASChallengeResponse: int[] getMethodId()>();
v50 = lengthof v49;
v51 = v50 * 4;
virtualinvoke v43.<com.novell.ldapchai.impl.edir.entry.ext.PutLoginSecretRequest: void setMethodIDLen(int)>(v51);
v52 = v0.<com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.ChaiUser user>;
v53 = interfaceinvoke v52.<com.novell.ldapchai.ChaiUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
v54 = interfaceinvoke v53.<com.novell.ldapchai.provider.ChaiProvider: javax.naming.ldap.ExtendedResponse extendedOperation(javax.naming.ldap.ExtendedRequest)>(v43);
if v54 == null goto label07;
v55 = virtualinvoke v54.<com.novell.ldapchai.impl.edir.entry.ext.PutLoginSecretResponse: int getNmasRetCode()>();
if v55 == 0 goto label07;
v56 = <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v57 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_write_16__63: java.util.function.Supplier bootstrap$(javax.naming.ldap.ExtendedResponse)>(v54);
virtualinvoke v56.<com.novell.ldapchai.util.internal.ChaiLogger: void debug(java.util.function.Supplier)>(v57);
v33 = 0;
label09:
goto label07;
label10:
v58 := @caughtexception;
v59 = <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v60 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_write_17__65: java.util.function.Supplier bootstrap$(java.lang.Exception)>(v58);
virtualinvoke v59.<com.novell.ldapchai.util.internal.ChaiLogger: void error(java.util.function.Supplier)>(v60);
goto label07;
label11:
if v33 == 0 goto label12;
v61 = <com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v62 = staticinvoke <com.novell.ldapchai.impl.edir.NmasResponseSet$lambda_write_18__62: java.util.function.Supplier bootstrap$(com.novell.ldapchai.impl.edir.NmasResponseSet)>(v0);
virtualinvoke v61.<com.novell.ldapchai.util.internal.ChaiLogger: void info(java.util.function.Supplier)>(v62);
v63 = <com.novell.ldapchai.cr.AbstractResponseSet$STATE: com.novell.ldapchai.cr.AbstractResponseSet$STATE WRITTEN>;
v0.<com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.cr.AbstractResponseSet$STATE state> = v63;
label12:
return v33;
catch java.io.UnsupportedEncodingException from label01 to label02 with label03;
catch com.novell.ldapchai.exception.ChaiOperationException from label01 to label02 with label04;
catch com.novell.ldapchai.exception.ChaiValidationException from label01 to label02 with label05;
catch java.lang.Exception from label08 to label09 with label10;
}
static java.lang.String csToNmasXML(com.novell.ldapchai.cr.ChallengeSet, java.lang.String)
{
java.lang.IllegalStateException v23;
org.jrivard.xmlchai.XmlDocument v3;
org.jrivard.xmlchai.XmlElement v11, v4;
com.novell.ldapchai.cr.ChallengeSet v0;
org.jrivard.xmlchai.XmlFactory$OutputFlag[] v20;
int v16, v18, v5;
java.lang.String v1, v12, v13, v17, v19, v21, v24, v25, v6;
org.jrivard.xmlchai.XmlFactory v2;
boolean v14, v15, v9;
java.util.Iterator v8;
java.io.IOException v22;
java.util.List v7;
java.lang.Object v10;
v0 := @parameter0: com.novell.ldapchai.cr.ChallengeSet;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlFactory getFactory()>();
v3 = interfaceinvoke v2.<org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlDocument newDocument(java.lang.String)>("Challenges");
v4 = interfaceinvoke v3.<org.jrivard.xmlchai.XmlDocument: org.jrivard.xmlchai.XmlElement getRootElement()>();
v5 = interfaceinvoke v0.<com.novell.ldapchai.cr.ChallengeSet: int getMinRandomRequired()>();
v6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v5);
interfaceinvoke v4.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("RandomQuestions", v6);
if v1 == null goto label01;
interfaceinvoke v4.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("GUID", v1);
goto label02;
label01:
interfaceinvoke v4.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("GUID", "0");
label02:
v7 = interfaceinvoke v0.<com.novell.ldapchai.cr.ChallengeSet: java.util.List getChallenges()>();
v8 = interfaceinvoke v7.<java.util.List: java.util.Iterator iterator()>();
label03:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label09;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = interfaceinvoke v2.<org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlElement newElement(java.lang.String)>("Challenge");
v12 = interfaceinvoke v10.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
if v12 == null goto label04;
v13 = interfaceinvoke v10.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
interfaceinvoke v11.<org.jrivard.xmlchai.XmlElement: void setText(java.lang.String)>(v13);
label04:
v14 = interfaceinvoke v10.<com.novell.ldapchai.cr.Challenge: boolean isAdminDefined()>();
if v14 == 0 goto label05;
interfaceinvoke v11.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("Define", "Admin");
goto label06;
label05:
interfaceinvoke v11.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("Define", "User");
label06:
v15 = interfaceinvoke v10.<com.novell.ldapchai.cr.Challenge: boolean isRequired()>();
if v15 == 0 goto label07;
interfaceinvoke v11.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("Type", "Required");
goto label08;
label07:
interfaceinvoke v11.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("Type", "Random");
label08:
v16 = interfaceinvoke v10.<com.novell.ldapchai.cr.Challenge: int getMinLength()>();
v17 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v16);
interfaceinvoke v11.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("MinLength", v17);
v18 = interfaceinvoke v10.<com.novell.ldapchai.cr.Challenge: int getMaxLength()>();
v19 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v18);
interfaceinvoke v11.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("MaxLength", v19);
interfaceinvoke v4.<org.jrivard.xmlchai.XmlElement: void attachElement(org.jrivard.xmlchai.XmlElement)>(v11);
goto label03;
label09:
v20 = newarray (org.jrivard.xmlchai.XmlFactory$OutputFlag)[0];
v21 = interfaceinvoke v2.<org.jrivard.xmlchai.XmlFactory: java.lang.String outputString(org.jrivard.xmlchai.XmlDocument,org.jrivard.xmlchai.XmlFactory$OutputFlag[])>(v3, v20);
label10:
return v21;
label11:
v22 := @caughtexception;
v23 = new java.lang.IllegalStateException;
v24 = virtualinvoke v22.<java.io.IOException: java.lang.String getMessage()>();
v25 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v24) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unexpected error serializing xml document for NMAS response set: \u0001");
specialinvoke v23.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v25);
throw v23;
catch java.io.IOException from label09 to label10 with label11;
}
private static java.util.Map convertAnswerTextMap(java.util.Map)
{
java.util.Iterator v3;
java.util.Set v2;
java.util.LinkedHashMap v1;
com.novell.ldapchai.impl.edir.NmasResponseSet$NmasAnswer v8;
java.util.Map v0;
java.lang.Object v5, v6, v7;
boolean v4;
v0 := @parameter0: java.util.Map;
v1 = new java.util.LinkedHashMap;
specialinvoke v1.<java.util.LinkedHashMap: void <init>()>();
v2 = interfaceinvoke v0.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
v8 = new com.novell.ldapchai.impl.edir.NmasResponseSet$NmasAnswer;
specialinvoke v8.<com.novell.ldapchai.impl.edir.NmasResponseSet$NmasAnswer: void <init>(java.lang.String)>(v7);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v8);
goto label1;
label2:
return v1;
}
public java.util.List asChallengeBeans(boolean)
{
java.lang.UnsupportedOperationException v2;
java.util.Iterator v8;
java.util.Set v7;
java.util.ArrayList v5;
java.util.List v4;
com.novell.ldapchai.cr.bean.ChallengeBean v11;
java.util.Map v3, v6;
java.lang.Object v10;
com.novell.ldapchai.impl.edir.NmasResponseSet v0;
boolean v1, v9;
v0 := @this: com.novell.ldapchai.impl.edir.NmasResponseSet;
v1 := @parameter0: boolean;
if v1 == 0 goto label1;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("NMAS stored responses do not support retrieval of answers");
throw v2;
label1:
v3 = v0.<com.novell.ldapchai.impl.edir.NmasResponseSet: java.util.Map crMap>;
if v3 != null goto label2;
v4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v4;
label2:
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>()>();
v6 = v0.<com.novell.ldapchai.impl.edir.NmasResponseSet: java.util.Map crMap>;
v7 = interfaceinvoke v6.<java.util.Map: java.util.Set keySet()>();
v8 = interfaceinvoke v7.<java.util.Set: java.util.Iterator iterator()>();
label3:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label4;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = interfaceinvoke v10.<com.novell.ldapchai.cr.Challenge: com.novell.ldapchai.cr.bean.ChallengeBean asChallengeBean()>();
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v11);
goto label3;
label4:
return v5;
}
public java.util.List asHelpdeskChallengeBeans(boolean)
{
java.lang.UnsupportedOperationException v2;
com.novell.ldapchai.impl.edir.NmasResponseSet v0;
boolean v1;
v0 := @this: com.novell.ldapchai.impl.edir.NmasResponseSet;
v1 := @parameter0: boolean;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("NMAS stored responses do not support Helpdesk Challenges");
throw v2;
}
static void <clinit>()
{
com.novell.ldapchai.util.internal.ChaiLogger v0;
v0 = staticinvoke <com.novell.ldapchai.util.internal.ChaiLogger: com.novell.ldapchai.util.internal.ChaiLogger getLogger(java.lang.Class)>(class "Lcom/novell/ldapchai/impl/edir/NmasResponseSet;");
<com.novell.ldapchai.impl.edir.NmasResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER> = v0;
return;
}
}