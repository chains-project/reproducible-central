final class com.novell.ldapchai.impl.edir.entry.EdirEntries$UserPasswordPolicyReader extends java.lang.Object
{
private static final java.util.Set TRADITIONAL_PASSWORD_ATTRIBUTES;
private static final com.novell.ldapchai.util.SearchHelper NSPM_ENTRY_SEARCH_HELPER;
private void <init>()
{
com.novell.ldapchai.impl.edir.entry.EdirEntries$UserPasswordPolicyReader v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.EdirEntries$UserPasswordPolicyReader;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static com.novell.ldapchai.ChaiPasswordPolicy readPasswordPolicy(com.novell.ldapchai.ChaiUser) throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.ChaiUser v0;
com.novell.ldapchai.ChaiEntry v3;
com.novell.ldapchai.ChaiPasswordPolicy v1;
java.util.function.Supplier v10, v12, v15, v17, v20;
java.lang.String v5;
com.novell.ldapchai.exception.ChaiOperationException v13, v18;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl v4;
boolean v2, v8;
com.novell.ldapchai.provider.ChaiProvider v6;
com.novell.ldapchai.util.PasswordRuleHelper v7;
com.novell.ldapchai.util.internal.ChaiLogger v11, v14, v16, v19, v9;
v0 := @parameter0: com.novell.ldapchai.ChaiUser;
v1 = staticinvoke <com.novell.ldapchai.util.DefaultChaiPasswordPolicy: com.novell.ldapchai.util.DefaultChaiPasswordPolicy createDefaultChaiPasswordPolicy()>();
v2 = 0;
label1:
v3 = staticinvoke <com.novell.ldapchai.impl.edir.entry.EdirEntries$UserPasswordPolicyReader: com.novell.ldapchai.ChaiEntry findNspmPolicyForUser(com.novell.ldapchai.ChaiUser)>(v0);
if v3 == null goto label5;
v4 = new com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl;
v5 = interfaceinvoke v3.<com.novell.ldapchai.ChaiEntry: java.lang.String getEntryDN()>();
v6 = interfaceinvoke v3.<com.novell.ldapchai.ChaiEntry: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
specialinvoke v4.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl: void <init>(java.lang.String,com.novell.ldapchai.provider.ChaiProvider)>(v5, v6);
v1 = v4;
v7 = interfaceinvoke v4.<com.novell.ldapchai.ChaiPasswordPolicy: com.novell.ldapchai.util.PasswordRuleHelper getRuleHelper()>();
v8 = interfaceinvoke v7.<com.novell.ldapchai.util.PasswordRuleHelper: boolean isPolicyEnabled()>();
if v8 == 0 goto label2;
v9 = <com.novell.ldapchai.impl.edir.entry.EdirEntries: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v10 = staticinvoke <com.novell.ldapchai.impl.edir.entry.EdirEntries$UserPasswordPolicyReader$lambda_readPasswordPolicy_0__73: java.util.function.Supplier bootstrap$(com.novell.ldapchai.ChaiUser,com.novell.ldapchai.ChaiEntry)>(v0, v3);
virtualinvoke v9.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v10);
v2 = 1;
goto label5;
label2:
v11 = <com.novell.ldapchai.impl.edir.entry.EdirEntries: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v12 = staticinvoke <com.novell.ldapchai.impl.edir.entry.EdirEntries$UserPasswordPolicyReader$lambda_readPasswordPolicy_1__72: java.util.function.Supplier bootstrap$(com.novell.ldapchai.ChaiUser,com.novell.ldapchai.ChaiEntry)>(v0, v3);
virtualinvoke v11.<com.novell.ldapchai.util.internal.ChaiLogger: void debug(java.util.function.Supplier)>(v12);
label3:
goto label5;
label4:
v13 := @caughtexception;
v14 = <com.novell.ldapchai.impl.edir.entry.EdirEntries: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v15 = staticinvoke <com.novell.ldapchai.impl.edir.entry.EdirEntries$UserPasswordPolicyReader$lambda_readPasswordPolicy_2__75: java.util.function.Supplier bootstrap$(com.novell.ldapchai.exception.ChaiOperationException)>(v13);
virtualinvoke v14.<com.novell.ldapchai.util.internal.ChaiLogger: void error(java.util.function.Supplier)>(v15);
throw v13;
label5:
if v2 != 0 goto label9;
label6:
v1 = staticinvoke <com.novell.ldapchai.impl.edir.entry.EdirEntries$UserPasswordPolicyReader: com.novell.ldapchai.ChaiPasswordPolicy readTraditionalPasswordRules(com.novell.ldapchai.ChaiUser)>(v0);
v16 = <com.novell.ldapchai.impl.edir.entry.EdirEntries: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v17 = staticinvoke <com.novell.ldapchai.impl.edir.entry.EdirEntries$UserPasswordPolicyReader$lambda_readPasswordPolicy_3__71: java.util.function.Supplier bootstrap$(com.novell.ldapchai.ChaiUser)>(v0);
virtualinvoke v16.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v17);
label7:
goto label9;
label8:
v18 := @caughtexception;
v19 = <com.novell.ldapchai.impl.edir.entry.EdirEntries: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v20 = staticinvoke <com.novell.ldapchai.impl.edir.entry.EdirEntries$UserPasswordPolicyReader$lambda_readPasswordPolicy_4__74: java.util.function.Supplier bootstrap$(com.novell.ldapchai.exception.ChaiOperationException)>(v18);
virtualinvoke v19.<com.novell.ldapchai.util.internal.ChaiLogger: void error(java.util.function.Supplier)>(v20);
label9:
return v1;
catch com.novell.ldapchai.exception.ChaiOperationException from label1 to label3 with label4;
catch com.novell.ldapchai.exception.ChaiOperationException from label6 to label7 with label8;
}
private static com.novell.ldapchai.ChaiEntry findNspmPolicyForUser(com.novell.ldapchai.ChaiUser) throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.ChaiUser v0;
com.novell.ldapchai.ChaiEntry v12, v15, v16, v19, v20, v23, v24, v27, v30;
javax.naming.ldap.ExtendedResponse v10;
int v14, v18, v22, v26, v29;
com.novell.ldapchai.ChaiEntryFactory v6;
java.lang.String v11, v13, v17, v21, v25, v28, v8;
boolean v4;
com.novell.ldapchai.provider.ChaiConfiguration v2;
com.novell.ldapchai.provider.ChaiSetting v3;
com.novell.ldapchai.provider.ChaiProvider v1, v5, v9;
com.novell.ldapchai.impl.edir.entry.ext.GetPwdPolicyInfoRequest v7;
v0 := @parameter0: com.novell.ldapchai.ChaiUser;
v1 = interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
v2 = interfaceinvoke v1.<com.novell.ldapchai.provider.ChaiProvider: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v3 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting EDIRECTORY_ENABLE_NMAS>;
v4 = virtualinvoke v2.<com.novell.ldapchai.provider.ChaiConfiguration: boolean getBooleanSetting(com.novell.ldapchai.provider.ChaiSetting)>(v3);
v5 = interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
v6 = interfaceinvoke v5.<com.novell.ldapchai.provider.ChaiProvider: com.novell.ldapchai.ChaiEntryFactory getEntryFactory()>();
if v4 == 0 goto label2;
v7 = new com.novell.ldapchai.impl.edir.entry.ext.GetPwdPolicyInfoRequest;
specialinvoke v7.<com.novell.ldapchai.impl.edir.entry.ext.GetPwdPolicyInfoRequest: void <init>()>();
v8 = interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: java.lang.String getEntryDN()>();
virtualinvoke v7.<com.novell.ldapchai.impl.edir.entry.ext.GetPwdPolicyInfoRequest: void setObjectDN(java.lang.String)>(v8);
v9 = interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
v10 = interfaceinvoke v9.<com.novell.ldapchai.provider.ChaiProvider: javax.naming.ldap.ExtendedResponse extendedOperation(javax.naming.ldap.ExtendedRequest)>(v7);
if v10 == null goto label1;
v11 = virtualinvoke v10.<com.novell.ldapchai.impl.edir.entry.ext.GetPwdPolicyInfoResponse: java.lang.String getPwdPolicyDNStr()>();
if v11 == null goto label1;
v12 = virtualinvoke v6.<com.novell.ldapchai.ChaiEntryFactory: com.novell.ldapchai.ChaiEntry newChaiEntry(java.lang.String)>(v11);
return v12;
label1:
return null;
label2:
v13 = interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: java.lang.String readStringAttribute(java.lang.String)>("nspmPasswordPolicyDN");
if v13 == null goto label3;
v14 = virtualinvoke v13.<java.lang.String: int length()>();
if v14 <= 0 goto label3;
v15 = virtualinvoke v6.<com.novell.ldapchai.ChaiEntryFactory: com.novell.ldapchai.ChaiEntry newChaiEntry(java.lang.String)>(v13);
return v15;
label3:
v16 = interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: com.novell.ldapchai.ChaiEntry getParentEntry()>();
if v16 == null goto label5;
v17 = interfaceinvoke v16.<com.novell.ldapchai.ChaiEntry: java.lang.String readStringAttribute(java.lang.String)>("nspmPasswordPolicyDN");
if v17 == null goto label4;
v18 = virtualinvoke v17.<java.lang.String: int length()>();
if v18 <= 0 goto label4;
v19 = virtualinvoke v6.<com.novell.ldapchai.ChaiEntryFactory: com.novell.ldapchai.ChaiEntry newChaiEntry(java.lang.String)>(v17);
return v19;
label4:
if v16 == null goto label5;
v20 = staticinvoke <com.novell.ldapchai.impl.edir.entry.EdirEntries: com.novell.ldapchai.ChaiEntry findPartitionRoot(com.novell.ldapchai.ChaiEntry)>(v16);
if v20 == null goto label5;
v21 = interfaceinvoke v20.<com.novell.ldapchai.ChaiEntry: java.lang.String readStringAttribute(java.lang.String)>("nspmPasswordPolicyDN");
if v21 == null goto label5;
v22 = virtualinvoke v21.<java.lang.String: int length()>();
if v22 <= 0 goto label5;
v23 = virtualinvoke v6.<com.novell.ldapchai.ChaiEntryFactory: com.novell.ldapchai.ChaiEntry newChaiEntry(java.lang.String)>(v21);
return v23;
label5:
v24 = virtualinvoke v6.<com.novell.ldapchai.ChaiEntryFactory: com.novell.ldapchai.ChaiEntry newChaiEntry(java.lang.String)>("cn=Security");
v25 = interfaceinvoke v24.<com.novell.ldapchai.ChaiEntry: java.lang.String readStringAttribute(java.lang.String)>("sASLoginPolicyDN");
if v25 == null goto label6;
v26 = virtualinvoke v25.<java.lang.String: int length()>();
if v26 <= 0 goto label6;
v27 = virtualinvoke v6.<com.novell.ldapchai.ChaiEntryFactory: com.novell.ldapchai.ChaiEntry newChaiEntry(java.lang.String)>(v25);
v28 = interfaceinvoke v27.<com.novell.ldapchai.ChaiEntry: java.lang.String readStringAttribute(java.lang.String)>("nspmPasswordPolicyDN");
if v28 == null goto label6;
v29 = virtualinvoke v28.<java.lang.String: int length()>();
if v29 <= 0 goto label6;
v30 = virtualinvoke v6.<com.novell.ldapchai.ChaiEntryFactory: com.novell.ldapchai.ChaiEntry newChaiEntry(java.lang.String)>(v28);
return v30;
label6:
return null;
}
private static com.novell.ldapchai.ChaiPasswordPolicy readTraditionalPasswordRules(com.novell.ldapchai.ChaiUser) throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.ChaiUser v0;
java.util.LinkedHashMap v9;
com.novell.ldapchai.util.DefaultChaiPasswordPolicy v24;
java.util.Map v2;
int v4, v6;
java.lang.String v11, v13, v15, v17, v19, v21, v23;
boolean v8;
java.util.Set v1;
java.lang.Object v3, v5, v7;
com.novell.ldapchai.ChaiPasswordRule v10, v12, v14, v16, v18, v20, v22;
v0 := @parameter0: com.novell.ldapchai.ChaiUser;
v1 = <com.novell.ldapchai.impl.edir.entry.EdirEntries$UserPasswordPolicyReader: java.util.Set TRADITIONAL_PASSWORD_ATTRIBUTES>;
v2 = interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: java.util.Map readStringAttributes(java.util.Set)>(v1);
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>("passwordMinimumLength");
v4 = staticinvoke <com.novell.ldapchai.impl.edir.entry.EdirEntries: int convertStrToInt(java.lang.String,int)>(v3, 0);
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>("passwordExpirationInterval");
v6 = staticinvoke <com.novell.ldapchai.impl.edir.entry.EdirEntries: int convertStrToInt(java.lang.String,int)>(v5, 0);
v7 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>("passwordUniqueRequired");
v8 = staticinvoke <com.novell.ldapchai.impl.edir.entry.EdirEntries: boolean convertStrToBoolean(java.lang.String)>(v7);
v9 = new java.util.LinkedHashMap;
specialinvoke v9.<java.util.LinkedHashMap: void <init>()>();
v10 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule MaximumLength>;
v11 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(16);
interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, v11);
v12 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule MinimumLength>;
v13 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v4);
interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v12, v13);
v14 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule ExpirationInterval>;
v15 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v6);
interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v14, v15);
v16 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule UniqueRequired>;
v17 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(v8);
interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v16, v17);
v18 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule AllowNumeric>;
v19 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(1);
interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v18, v19);
v20 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule AllowSpecial>;
v21 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(1);
interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v20, v21);
v22 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule CaseSensitive>;
v23 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(0);
interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v22, v23);
v24 = staticinvoke <com.novell.ldapchai.util.DefaultChaiPasswordPolicy: com.novell.ldapchai.util.DefaultChaiPasswordPolicy createDefaultChaiPasswordPolicyByRule(java.util.Map)>(v9);
return v24;
}
static void <clinit>()
{
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute[] v4;
com.novell.ldapchai.util.SearchHelper v0, v10, v12;
java.util.Set v2, v9;
java.util.HashSet v1, v3;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute v7;
int v5, v6;
java.lang.String v8;
com.novell.ldapchai.provider.SearchScope v11;
v0 = new com.novell.ldapchai.util.SearchHelper;
specialinvoke v0.<com.novell.ldapchai.util.SearchHelper: void <init>()>();
<com.novell.ldapchai.impl.edir.entry.EdirEntries$UserPasswordPolicyReader: com.novell.ldapchai.util.SearchHelper NSPM_ENTRY_SEARCH_HELPER> = v0;
v1 = new java.util.HashSet;
specialinvoke v1.<java.util.HashSet: void <init>()>();
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>("passwordMinimumLength");
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>("passwordExpirationInterval");
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>("passwordUniqueRequired");
v2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v1);
<com.novell.ldapchai.impl.edir.entry.EdirEntries$UserPasswordPolicyReader: java.util.Set TRADITIONAL_PASSWORD_ATTRIBUTES> = v2;
v3 = new java.util.HashSet;
specialinvoke v3.<java.util.HashSet: void <init>()>();
v4 = staticinvoke <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute[] values()>();
v5 = lengthof v4;
v6 = 0;
label1:
if v6 >= v5 goto label2;
v7 = v4[v6];
v8 = virtualinvoke v7.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute: java.lang.String getLdapAttribute()>();
interfaceinvoke v3.<java.util.Set: boolean add(java.lang.Object)>(v8);
v6 = v6 + 1;
goto label1;
label2:
v9 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v3);
v10 = <com.novell.ldapchai.impl.edir.entry.EdirEntries$UserPasswordPolicyReader: com.novell.ldapchai.util.SearchHelper NSPM_ENTRY_SEARCH_HELPER>;
v11 = <com.novell.ldapchai.provider.SearchScope: com.novell.ldapchai.provider.SearchScope BASE>;
virtualinvoke v10.<com.novell.ldapchai.util.SearchHelper: void setSearchScope(com.novell.ldapchai.provider.SearchScope)>(v11);
v12 = <com.novell.ldapchai.impl.edir.entry.EdirEntries$UserPasswordPolicyReader: com.novell.ldapchai.util.SearchHelper NSPM_ENTRY_SEARCH_HELPER>;
virtualinvoke v12.<com.novell.ldapchai.util.SearchHelper: void setAttributes(java.util.Collection)>(v9);
return;
}
}