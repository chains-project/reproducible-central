public abstract class com.novell.ldapchai.impl.edir.entry.ext.ber.Ber extends java.lang.Object
{
protected byte[] buffer;
protected int offset;
protected int bufsize;
public static final int ASN_BOOLEAN;
public static final int ASN_INTEGER;
public static final int ASN_BIT_STRING;
public static final int ASN_SIMPLE_STRING;
public static final int ASN_OCTET_STR;
public static final int ASN_NULL;
public static final int ASN_OBJECT_ID;
public static final int ASN_SEQUENCE;
public static final int ASN_SET;
public static final int ASN_PRIMITIVE;
public static final int ASN_UNIVERSAL;
public static final int ASN_CONSTRUCTOR;
public static final int ASN_APPLICATION;
public static final int ASN_CONTEXT;
public static final int ASN_PRIVATE;
public static final int ASN_ENUMERATED;
protected void <init>()
{
com.novell.ldapchai.impl.edir.entry.ext.ber.Ber v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.Ber;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static void dumpBER(java.io.OutputStream, java.lang.String, byte[], int, int)
{
com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder v6;
java.io.OutputStream v0;
byte[] v10, v2, v5;
java.io.IOException v11, v8;
java.io.ByteArrayInputStream v7;
int v3, v4;
java.lang.String v1, v9;
v0 := @parameter0: java.io.OutputStream;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: byte[];
v3 := @parameter3: int;
v4 := @parameter4: int;
label1:
virtualinvoke v0.<java.io.OutputStream: void write(int)>(10);
v5 = virtualinvoke v1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");
virtualinvoke v0.<java.io.OutputStream: void write(byte[])>(v5);
v6 = new com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder;
specialinvoke v6.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void <init>()>();
v7 = new java.io.ByteArrayInputStream;
specialinvoke v7.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>(v2, v3, v4);
virtualinvoke v6.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void encodeBuffer(java.io.InputStream,java.io.OutputStream)>(v7, v0);
virtualinvoke v0.<java.io.OutputStream: void write(int)>(10);
label2:
goto label7;
label3:
v8 := @caughtexception;
label4:
v9 = "Ber.dumpBER(): error encountered\n";
v10 = virtualinvoke v9.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");
virtualinvoke v0.<java.io.OutputStream: void write(byte[])>(v10);
label5:
goto label7;
label6:
v11 := @caughtexception;
label7:
return;
catch java.io.IOException from label1 to label2 with label3;
catch java.io.IOException from label4 to label5 with label6;
}
}