public final class com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder extends com.novell.ldapchai.impl.edir.entry.ext.ber.Ber
{
private final int origOffset;
public void <init>(byte[], int, int)
{
byte[] v1;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder v0;
int v2, v3;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber: void <init>()>();
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: byte[] buffer> = v1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int bufsize> = v3;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int origOffset> = v2;
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: void reset()>();
return;
}
public void reset()
{
int v1;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder;
v1 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int origOffset>;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset> = v1;
return;
}
public int getParsePosition()
{
int v1;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder;
v1 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
return v1;
}
public int parseLength() throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException
{
byte[] v13;
short v17;
byte v16;
com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException v18, v4, v5, v9;
int v1, v10, v11, v12, v14, v15, v2, v3, v6, v7, v8;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder;
v1 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int parseByte()>();
v2 = v1 & 128;
if v2 != 128 goto label7;
v3 = v1 & 127;
if v3 != 0 goto label1;
v4 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException;
specialinvoke v4.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException: void <init>(java.lang.String)>("Indefinite length not supported");
throw v4;
label1:
if v3 <= 4 goto label2;
v5 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException;
specialinvoke v5.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException: void <init>(java.lang.String)>("encoding too long");
throw v5;
label2:
v6 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int bufsize>;
v7 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v8 = v6 - v7;
if v8 >= v3 goto label3;
v9 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException;
specialinvoke v9.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException: void <init>(java.lang.String)>("Insufficient data");
throw v9;
label3:
v10 = 0;
v11 = 0;
label4:
if v11 >= v3 goto label5;
v12 = v10 << 8;
v13 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: byte[] buffer>;
v14 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v15 = v14 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset> = v15;
v16 = v13[v14];
v17 = v16 & 255;
v10 = v12 + v17;
v11 = v11 + 1;
goto label4;
label5:
if v10 >= 0 goto label6;
v18 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException;
specialinvoke v18.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException: void <init>(java.lang.String)>("Invalid length bytes");
throw v18;
label6:
return v10;
label7:
return v1;
}
public int parseSeq(int[]) throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException
{
com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder v0;
int[] v1;
int v2, v3;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder;
v1 := @parameter0: int[];
v2 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int parseByte()>();
v3 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int parseLength()>();
if v1 == null goto label1;
v1[0] = v3;
label1:
return v2;
}
void seek(int) throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException
{
com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder v0;
com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException v7;
int v1, v2, v3, v4, v5, v6, v8, v9;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder;
v1 := @parameter0: int;
v2 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v3 = v2 + v1;
v4 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int bufsize>;
if v3 > v4 goto label1;
v5 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v6 = v5 + v1;
if v6 >= 0 goto label2;
label1:
v7 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException;
specialinvoke v7.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException: void <init>(java.lang.String)>("array index out of bounds");
throw v7;
label2:
v8 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v9 = v8 + v1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset> = v9;
return;
}
public int parseByte() throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException
{
byte[] v5;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder v0;
short v9;
byte v8;
com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException v4;
int v1, v2, v3, v6, v7;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder;
v1 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int bufsize>;
v2 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v3 = v1 - v2;
if v3 >= 1 goto label1;
v4 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException;
specialinvoke v4.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException: void <init>(java.lang.String)>("Insufficient data");
throw v4;
label1:
v5 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: byte[] buffer>;
v6 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v7 = v6 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset> = v7;
v8 = v5[v6];
v9 = v8 & 255;
return v9;
}
public int peekByte() throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException
{
byte[] v5;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder v0;
short v8;
byte v7;
com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException v4;
int v1, v2, v3, v6;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder;
v1 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int bufsize>;
v2 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v3 = v1 - v2;
if v3 >= 1 goto label1;
v4 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException;
specialinvoke v4.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException: void <init>(java.lang.String)>("Insufficient data");
throw v4;
label1:
v5 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: byte[] buffer>;
v6 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v7 = v5[v6];
v8 = v7 & 255;
return v8;
}
public boolean parseBoolean() throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException
{
int v1;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder v0;
boolean v2;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder;
v1 = specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int parseIntWithTag(int)>(1);
if v1 != 0 goto label1;
v2 = 0;
goto label2;
label1:
v2 = 1;
label2:
return v2;
}
public int parseEnumeration() throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException
{
int v1;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder;
v1 = specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int parseIntWithTag(int)>(10);
return v1;
}
public int parseInt() throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException
{
int v1;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder;
v1 = specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int parseIntWithTag(int)>(2);
return v1;
}
private int parseIntWithTag(int) throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException
{
byte[] v18, v25, v4;
short v29, v30, v8;
byte v21, v28, v7;
com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException v10, v13, v17;
int v1, v12, v14, v15, v16, v19, v2, v20, v22, v23, v24, v26, v27, v3, v5, v6;
java.lang.String v11, v9;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int parseByte()>();
if v2 == v1 goto label3;
v3 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
if v3 <= 0 goto label1;
v4 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: byte[] buffer>;
v5 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v6 = v5 - 1;
v7 = v4[v6];
v8 = v7 & 255;
v9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(v8);
goto label2;
label1:
v9 = "Empty tag";
label2:
v10 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v9, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Encountered ASN.1 tag \u0001 (expected tag \u0001)");
specialinvoke v10.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException: void <init>(java.lang.String)>(v11);
throw v10;
label3:
v12 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int parseLength()>();
if v12 <= 4 goto label4;
v13 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException;
specialinvoke v13.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException: void <init>(java.lang.String)>("INTEGER too long");
throw v13;
label4:
v14 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int bufsize>;
v15 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v16 = v14 - v15;
if v12 <= v16 goto label5;
v17 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException;
specialinvoke v17.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException: void <init>(java.lang.String)>("Insufficient data");
throw v17;
label5:
v18 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: byte[] buffer>;
v19 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v20 = v19 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset> = v20;
v21 = v18[v19];
v22 = v21 & 127;
v23 = 1;
label6:
if v23 >= v12 goto label7;
v24 = v22 << 8;
v25 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: byte[] buffer>;
v26 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v27 = v26 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset> = v27;
v28 = v25[v26];
v29 = v28 & 255;
v22 = v24 | v29;
v23 = v23 + 1;
goto label6;
label7:
v30 = v21 & 128;
if v30 != 128 goto label8;
v22 = neg v22;
label8:
return v22;
}
public java.lang.String parseString(boolean) throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException
{
com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder v0;
java.lang.String v2;
boolean v1;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder;
v1 := @parameter0: boolean;
v2 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: java.lang.String parseStringWithTag(int,boolean,int[])>(4, v1, null);
return v2;
}
public java.lang.String parseStringWithTag(int, boolean, int[]) throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException
{
byte[] v14, v15;
int[] v3;
com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException v12, v19, v22, v6;
int v1, v10, v11, v16, v23, v24, v25, v26, v4, v5, v8, v9;
java.lang.String v13, v17, v20, v7;
boolean v2;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder v0;
java.io.UnsupportedEncodingException v18, v21;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
v3 := @parameter2: int[];
v4 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int parseByte()>();
v5 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
if v4 == v1 goto label01;
v6 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (byte,int)>(v4, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Encountered ASN.1 tag \u0001 (expected tag \u0001)");
specialinvoke v6.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException: void <init>(java.lang.String)>(v7);
throw v6;
label01:
v8 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int parseLength()>();
v9 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int bufsize>;
v10 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v11 = v9 - v10;
if v8 <= v11 goto label02;
v12 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException;
specialinvoke v12.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException: void <init>(java.lang.String)>("Insufficient data");
throw v12;
label02:
if v8 != 0 goto label03;
v13 = "";
goto label11;
label03:
v14 = newarray (byte)[v8];
v15 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: byte[] buffer>;
v16 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v15, v16, v14, 0, v8);
if v2 == 0 goto label07;
label04:
v17 = new java.lang.String;
specialinvoke v17.<java.lang.String: void <init>(byte[],java.lang.String)>(v14, "UTF8");
v13 = v17;
label05:
goto label10;
label06:
v18 := @caughtexception;
v19 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException;
specialinvoke v19.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException: void <init>(java.lang.String)>("UTF8 not available on platform");
throw v19;
label07:
v20 = new java.lang.String;
specialinvoke v20.<java.lang.String: void <init>(byte[],java.lang.String)>(v14, "8859_1");
v13 = v20;
label08:
goto label10;
label09:
v21 := @caughtexception;
v22 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException;
specialinvoke v22.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException: void <init>(java.lang.String)>("8859_1 not available on platform");
throw v22;
label10:
v23 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v24 = v23 + v8;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset> = v24;
label11:
if v3 == null goto label12;
v25 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v26 = v25 - v5;
v3[0] = v26;
label12:
return v13;
catch java.io.UnsupportedEncodingException from label04 to label05 with label06;
catch java.io.UnsupportedEncodingException from label07 to label08 with label09;
}
public byte[] parseOctetString(int, int[]) throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException
{
byte[] v12, v13;
int[] v2;
com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException v11, v5;
int v1, v10, v14, v15, v16, v17, v18, v3, v4, v7, v8, v9;
java.lang.String v6;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder;
v1 := @parameter0: int;
v2 := @parameter1: int[];
v3 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v4 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int parseByte()>();
if v4 == v1 goto label1;
v5 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v4, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Encountered ASN.1 tag \u0001 (expected tag \u0001)");
specialinvoke v5.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException: void <init>(java.lang.String)>(v6);
throw v5;
label1:
v7 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int parseLength()>();
v8 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int bufsize>;
v9 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v10 = v8 - v9;
if v7 <= v10 goto label2;
v11 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException;
specialinvoke v11.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$DecodeException: void <init>(java.lang.String)>("Insufficient data");
throw v11;
label2:
v12 = newarray (byte)[v7];
if v7 <= 0 goto label3;
v13 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: byte[] buffer>;
v14 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v13, v14, v12, 0, v7);
v15 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v16 = v15 + v7;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset> = v16;
label3:
if v2 == null goto label4;
v17 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v18 = v17 - v3;
v2[0] = v18;
label4:
return v12;
}
public int bytesLeft()
{
com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder v0;
int v1, v2, v3;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder;
v1 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int bufsize>;
v2 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerDecoder: int offset>;
v3 = v1 - v2;
return v3;
}
}