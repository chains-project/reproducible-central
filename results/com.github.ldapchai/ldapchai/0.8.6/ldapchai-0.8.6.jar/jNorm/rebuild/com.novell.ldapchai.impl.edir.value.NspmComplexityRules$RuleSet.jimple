public class com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet extends java.lang.Object
{
private final int violationsAllowed;
private final java.util.Map complexityRules;
public void <init>(int, java.util.Map)
{
com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet v0;
java.util.Map v2, v5;
int v1;
java.util.HashMap v4;
java.lang.NullPointerException v3;
v0 := @this: com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet;
v1 := @parameter0: int;
v2 := @parameter1: java.util.Map;
specialinvoke v0.<java.lang.Object: void <init>()>();
if v2 != null goto label1;
v3 = new java.lang.NullPointerException;
specialinvoke v3.<java.lang.NullPointerException: void <init>(java.lang.String)>("complexityRules may not be null");
throw v3;
label1:
v0.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet: int violationsAllowed> = v1;
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>(java.util.Map)>(v2);
v5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v4);
v0.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet: java.util.Map complexityRules> = v5;
return;
}
public int getViolationsAllowed()
{
int v1;
com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet v0;
v0 := @this: com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet;
v1 = v0.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet: int violationsAllowed>;
return v1;
}
public java.util.Map getComplexityRules()
{
com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet v0;
java.util.Map v1;
v0 := @this: com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet;
v1 = v0.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet: java.util.Map complexityRules>;
return v1;
}
public boolean equals(java.lang.Object)
{
com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet v0;
java.util.Map v10, v6, v7, v8;
int v4, v5;
java.lang.Class v2, v3;
java.lang.Object v1;
boolean v9;
v0 := @this: com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet: int violationsAllowed>;
v5 = v1.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet: int violationsAllowed>;
if v4 == v5 goto label4;
return 0;
label4:
v6 = v0.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet: java.util.Map complexityRules>;
if v6 == null goto label5;
v7 = v0.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet: java.util.Map complexityRules>;
v8 = v1.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet: java.util.Map complexityRules>;
v9 = interfaceinvoke v7.<java.util.Map: boolean equals(java.lang.Object)>(v8);
if v9 != 0 goto label7;
goto label6;
label5:
v10 = v1.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet: java.util.Map complexityRules>;
if v10 == null goto label7;
label6:
return 0;
label7:
return 1;
}
public int hashCode()
{
com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet v0;
java.util.Map v3, v4;
int v1, v2, v5, v6;
v0 := @this: com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet;
v1 = v0.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet: int violationsAllowed>;
v2 = 31 * v1;
v3 = v0.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet: java.util.Map complexityRules>;
if v3 == null goto label1;
v4 = v0.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet: java.util.Map complexityRules>;
v5 = interfaceinvoke v4.<java.util.Map: int hashCode()>();
goto label2;
label1:
v5 = 0;
label2:
v6 = v2 + v5;
return v6;
}
}