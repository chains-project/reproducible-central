public class com.novell.ldapchai.impl.edir.value.NspmComplexityRules extends java.lang.Object
{
public static final com.novell.ldapchai.impl.edir.value.NspmComplexityRules MS_COMPLEXITY_POLICY;
private static final com.novell.ldapchai.util.internal.ChaiLogger LOGGER;
private final java.util.List policies;
public void <init>(java.util.List)
{
java.util.List v1, v4;
com.novell.ldapchai.impl.edir.value.NspmComplexityRules v0;
java.lang.NullPointerException v2;
java.util.ArrayList v3;
v0 := @this: com.novell.ldapchai.impl.edir.value.NspmComplexityRules;
v1 := @parameter0: java.util.List;
specialinvoke v0.<java.lang.Object: void <init>()>();
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>("policies may not be null");
throw v2;
label1:
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>(java.util.Collection)>(v1);
v4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v3);
v0.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules: java.util.List policies> = v4;
return;
}
public void <init>(java.lang.String)
{
java.util.List v2;
java.lang.String v1;
com.novell.ldapchai.impl.edir.value.NspmComplexityRules v0;
v0 := @this: com.novell.ldapchai.impl.edir.value.NspmComplexityRules;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <com.novell.ldapchai.impl.edir.value.NspmComplexityRules: java.util.List readComplexityPoliciesFromXML(java.lang.String)>(v1);
v0.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules: java.util.List policies> = v2;
return;
}
private static java.util.List readComplexityPoliciesFromXML(java.lang.String)
{
org.jrivard.xmlchai.XmlDocument v4;
com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Policy v32;
com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet v31;
boolean v13, v21, v25, v8;
java.lang.Exception v33;
java.util.List v11, v19, v23, v6;
java.util.Optional v16, v28;
com.novell.ldapchai.util.internal.ChaiLogger v34;
java.util.HashMap v15;
java.util.function.Supplier v29, v35;
org.jrivard.xmlchai.XmlElement v5;
java.util.ArrayList v1, v10;
org.jrivard.xmlchai.AccessMode v3;
int v18;
java.lang.String v0;
org.jrivard.xmlchai.XmlFactory v2;
java.util.Iterator v12, v20, v24, v7;
com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Rule v27;
java.lang.Object v14, v17, v22, v26, v30, v9;
v0 := @parameter0: java.lang.String;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
label1:
v2 = staticinvoke <org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlFactory getFactory()>();
v3 = <org.jrivard.xmlchai.AccessMode: org.jrivard.xmlchai.AccessMode IMMUTABLE>;
v4 = interfaceinvoke v2.<org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlDocument parseString(java.lang.String,org.jrivard.xmlchai.AccessMode)>(v0, v3);
v5 = interfaceinvoke v4.<org.jrivard.xmlchai.XmlDocument: org.jrivard.xmlchai.XmlElement getRootElement()>();
v6 = interfaceinvoke v5.<org.jrivard.xmlchai.XmlElement: java.util.List getChildren(java.lang.String)>("Policy");
v7 = interfaceinvoke v6.<java.util.List: java.util.Iterator iterator()>();
label2:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label9;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = new java.util.ArrayList;
specialinvoke v10.<java.util.ArrayList: void <init>()>();
v11 = interfaceinvoke v9.<org.jrivard.xmlchai.XmlElement: java.util.List getChildren(java.lang.String)>("RuleSet");
v12 = interfaceinvoke v11.<java.util.List: java.util.Iterator iterator()>();
label3:
v13 = interfaceinvoke v12.<java.util.Iterator: boolean hasNext()>();
if v13 == 0 goto label7;
v14 = interfaceinvoke v12.<java.util.Iterator: java.lang.Object next()>();
v15 = new java.util.HashMap;
specialinvoke v15.<java.util.HashMap: void <init>()>();
v16 = interfaceinvoke v14.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("ViolationsAllowed");
v17 = virtualinvoke v16.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("0");
v18 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v17);
v19 = interfaceinvoke v14.<org.jrivard.xmlchai.XmlElement: java.util.List getChildren(java.lang.String)>("Rule");
v20 = interfaceinvoke v19.<java.util.List: java.util.Iterator iterator()>();
label4:
v21 = interfaceinvoke v20.<java.util.Iterator: boolean hasNext()>();
if v21 == 0 goto label6;
v22 = interfaceinvoke v20.<java.util.Iterator: java.lang.Object next()>();
v23 = interfaceinvoke v22.<org.jrivard.xmlchai.XmlElement: java.util.List getAttributeNames()>();
v24 = interfaceinvoke v23.<java.util.List: java.util.Iterator iterator()>();
label5:
v25 = interfaceinvoke v24.<java.util.Iterator: boolean hasNext()>();
if v25 == 0 goto label4;
v26 = interfaceinvoke v24.<java.util.Iterator: java.lang.Object next()>();
v27 = staticinvoke <com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Rule: com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Rule valueOf(java.lang.String)>(v26);
v28 = interfaceinvoke v22.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>(v26);
v29 = staticinvoke <com.novell.ldapchai.impl.edir.value.NspmComplexityRules$init__85: java.util.function.Supplier bootstrap$()>();
v30 = virtualinvoke v28.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>(v29);
interfaceinvoke v15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v27, v30);
goto label5;
label6:
v31 = new com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet;
specialinvoke v31.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet: void <init>(int,java.util.Map)>(v18, v15);
interfaceinvoke v10.<java.util.List: boolean add(java.lang.Object)>(v31);
goto label3;
label7:
v32 = new com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Policy;
specialinvoke v32.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Policy: void <init>(java.util.List)>(v10);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v32);
goto label2;
label8:
v33 := @caughtexception;
v34 = <com.novell.ldapchai.impl.edir.value.NspmComplexityRules: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v35 = staticinvoke <com.novell.ldapchai.impl.edir.value.NspmComplexityRules$lambda_readComplexityPoliciesFromXML_0__86: java.util.function.Supplier bootstrap$(java.lang.Exception)>(v33);
virtualinvoke v34.<com.novell.ldapchai.util.internal.ChaiLogger: void debug(java.util.function.Supplier)>(v35);
label9:
return v1;
catch java.io.IOException from label1 to label8 with label8;
catch java.lang.IllegalArgumentException from label1 to label8 with label8;
}
public int hashCode()
{
int v2;
java.util.List v1;
com.novell.ldapchai.impl.edir.value.NspmComplexityRules v0;
v0 := @this: com.novell.ldapchai.impl.edir.value.NspmComplexityRules;
v1 = v0.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules: java.util.List policies>;
v2 = interfaceinvoke v1.<java.util.List: int hashCode()>();
return v2;
}
public java.util.List getComplexityPolicies()
{
java.util.List v1;
com.novell.ldapchai.impl.edir.value.NspmComplexityRules v0;
v0 := @this: com.novell.ldapchai.impl.edir.value.NspmComplexityRules;
v1 = v0.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules: java.util.List policies>;
return v1;
}
public boolean isMsComplexityPolicy()
{
boolean v2;
com.novell.ldapchai.impl.edir.value.NspmComplexityRules v0, v1;
v0 := @this: com.novell.ldapchai.impl.edir.value.NspmComplexityRules;
v1 = <com.novell.ldapchai.impl.edir.value.NspmComplexityRules: com.novell.ldapchai.impl.edir.value.NspmComplexityRules MS_COMPLEXITY_POLICY>;
v2 = virtualinvoke v1.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules: boolean equals(java.lang.Object)>(v0);
return v2;
}
public boolean equals(java.lang.Object)
{
java.util.List v4, v5;
com.novell.ldapchai.impl.edir.value.NspmComplexityRules v0;
java.lang.Class v2, v3;
java.lang.Object v1;
boolean v6;
v0 := @this: com.novell.ldapchai.impl.edir.value.NspmComplexityRules;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules: java.util.List policies>;
v5 = v1.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules: java.util.List policies>;
v6 = interfaceinvoke v4.<java.util.List: boolean equals(java.lang.Object)>(v5);
if v6 != 0 goto label4;
return 0;
label4:
return 1;
}
static void <clinit>()
{
com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Policy v13;
com.novell.ldapchai.impl.edir.value.NspmComplexityRules v14;
java.util.HashMap v2, v6;
com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Rule v10, v3, v4, v7, v8, v9;
java.util.ArrayList v1, v12;
com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet v11, v5;
com.novell.ldapchai.util.internal.ChaiLogger v0;
v0 = staticinvoke <com.novell.ldapchai.util.internal.ChaiLogger: com.novell.ldapchai.util.internal.ChaiLogger getLogger(java.lang.Class)>(class "Lcom/novell/ldapchai/ChaiEntryFactory;");
<com.novell.ldapchai.impl.edir.value.NspmComplexityRules: com.novell.ldapchai.util.internal.ChaiLogger LOGGER> = v0;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
v3 = <com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Rule: com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Rule MinPwdLen>;
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, "6");
v4 = <com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Rule: com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Rule MaxPwdLen>;
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v4, "128");
v5 = new com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet;
specialinvoke v5.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet: void <init>(int,java.util.Map)>(0, v2);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v5);
v6 = new java.util.HashMap;
specialinvoke v6.<java.util.HashMap: void <init>()>();
v7 = <com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Rule: com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Rule MinUppercase>;
interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v7, "1");
v8 = <com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Rule: com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Rule MinLowercase>;
interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v8, "1");
v9 = <com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Rule: com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Rule MinSpecial>;
interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, "1");
v10 = <com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Rule: com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Rule MinNumeric>;
interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, "1");
v11 = new com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet;
specialinvoke v11.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules$RuleSet: void <init>(int,java.util.Map)>(1, v6);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v11);
v12 = new java.util.ArrayList;
specialinvoke v12.<java.util.ArrayList: void <init>()>();
v13 = new com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Policy;
specialinvoke v13.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules$Policy: void <init>(java.util.List)>(v1);
interfaceinvoke v12.<java.util.List: boolean add(java.lang.Object)>(v13);
v14 = new com.novell.ldapchai.impl.edir.value.NspmComplexityRules;
specialinvoke v14.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules: void <init>(java.util.List)>(v12);
<com.novell.ldapchai.impl.edir.value.NspmComplexityRules: com.novell.ldapchai.impl.edir.value.NspmComplexityRules MS_COMPLEXITY_POLICY> = v14;
return;
}
}