public final class com.novell.ldapchai.provider.ChaiProviderFactory extends java.lang.Object implements java.io.Closeable
{
private static final com.novell.ldapchai.util.internal.ChaiLogger LOGGER;
private final java.util.Map chaiProviderFactorySettingStringMap;
private final com.novell.ldapchai.provider.ChaiProviderFactory$CentralService centralService;
private boolean closed;
private void <init>(java.util.Map)
{
java.util.Map v1, v2;
com.novell.ldapchai.provider.ChaiProviderFactory$CentralService v3;
com.novell.ldapchai.provider.ChaiProviderFactory v0;
v0 := @this: com.novell.ldapchai.provider.ChaiProviderFactory;
v1 := @parameter0: java.util.Map;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.novell.ldapchai.provider.ChaiProviderFactory: boolean closed> = 0;
v2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v1);
v0.<com.novell.ldapchai.provider.ChaiProviderFactory: java.util.Map chaiProviderFactorySettingStringMap> = v2;
v3 = new com.novell.ldapchai.provider.ChaiProviderFactory$CentralService;
specialinvoke v3.<com.novell.ldapchai.provider.ChaiProviderFactory$CentralService: void <init>(com.novell.ldapchai.provider.ChaiProviderFactory)>(v0);
v0.<com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.provider.ChaiProviderFactory$CentralService centralService> = v3;
return;
}
public java.util.Map getGlobalStatistics()
{
java.util.LinkedHashMap v1;
java.util.Map v4, v5;
com.novell.ldapchai.provider.ChaiProviderFactory$CentralService v2;
com.novell.ldapchai.provider.StatisticsWrapper$StatsBean v3;
com.novell.ldapchai.provider.ChaiProviderFactory v0;
v0 := @this: com.novell.ldapchai.provider.ChaiProviderFactory;
v1 = new java.util.LinkedHashMap;
specialinvoke v1.<java.util.LinkedHashMap: void <init>()>();
v2 = virtualinvoke v0.<com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.provider.ChaiProviderFactory$CentralService getCentralService()>();
v3 = virtualinvoke v2.<com.novell.ldapchai.provider.ChaiProviderFactory$CentralService: com.novell.ldapchai.provider.StatisticsWrapper$StatsBean getStatsBean()>();
if v3 == null goto label1;
v4 = interfaceinvoke v3.<com.novell.ldapchai.provider.ProviderStatistics: java.util.Map allStatistics()>();
interfaceinvoke v1.<java.util.Map: void putAll(java.util.Map)>(v4);
label1:
v5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v1);
return v5;
}
public com.novell.ldapchai.provider.ChaiProvider newProvider(java.lang.String, java.lang.String, java.lang.String) throws com.novell.ldapchai.exception.ChaiUnavailableException
{
com.novell.ldapchai.provider.ChaiConfiguration v5;
com.novell.ldapchai.provider.ChaiConfiguration$ChaiConfigurationBuilder v4;
java.lang.String v1, v2, v3;
com.novell.ldapchai.provider.ChaiProvider v6;
com.novell.ldapchai.provider.ChaiProviderFactory v0;
v0 := @this: com.novell.ldapchai.provider.ChaiProviderFactory;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = staticinvoke <com.novell.ldapchai.provider.ChaiConfiguration: com.novell.ldapchai.provider.ChaiConfiguration$ChaiConfigurationBuilder builder(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = virtualinvoke v4.<com.novell.ldapchai.provider.ChaiConfiguration$ChaiConfigurationBuilder: com.novell.ldapchai.provider.ChaiConfiguration build()>();
v6 = virtualinvoke v0.<com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.provider.ChaiProvider newProvider(com.novell.ldapchai.provider.ChaiConfiguration)>(v5);
return v6;
}
public com.novell.ldapchai.provider.ChaiProvider newProvider(com.novell.ldapchai.provider.ChaiConfiguration) throws com.novell.ldapchai.exception.ChaiUnavailableException
{
com.novell.ldapchai.provider.ChaiConfiguration v1;
com.novell.ldapchai.provider.ChaiProviderImplementor v2;
com.novell.ldapchai.provider.ChaiProviderFactory v0;
v0 := @this: com.novell.ldapchai.provider.ChaiProviderFactory;
v1 := @parameter0: com.novell.ldapchai.provider.ChaiConfiguration;
v2 = specialinvoke v0.<com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.provider.ChaiProviderImplementor newProviderImpl(com.novell.ldapchai.provider.ChaiConfiguration)>(v1);
return v2;
}
private com.novell.ldapchai.provider.ChaiProviderImplementor newProviderImpl(com.novell.ldapchai.provider.ChaiConfiguration) throws com.novell.ldapchai.exception.ChaiUnavailableException
{
com.novell.ldapchai.provider.ChaiProviderImplementor v19, v2;
java.util.function.Supplier v11, v13;
com.novell.ldapchai.provider.ChaiProviderFactory$CentralService v20;
com.novell.ldapchai.provider.ChaiProviderFactory v0;
java.lang.String v15, v16, v17, v5, v6, v7;
boolean v8, v9;
com.novell.ldapchai.provider.ChaiConfiguration v1;
com.novell.ldapchai.exception.ChaiError v18;
java.lang.Exception v3;
com.novell.ldapchai.exception.ChaiUnavailableException v14;
java.lang.Class v4;
com.novell.ldapchai.util.internal.ChaiLogger v10, v12;
v0 := @this: com.novell.ldapchai.provider.ChaiProviderFactory;
v1 := @parameter0: com.novell.ldapchai.provider.ChaiConfiguration;
specialinvoke v0.<com.novell.ldapchai.provider.ChaiProviderFactory: void checkStatus()>();
label1:
v2 = virtualinvoke v0.<com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.provider.ChaiProviderImplementor createFailOverOrConcreteProvider(com.novell.ldapchai.provider.ChaiConfiguration)>(v1);
label2:
goto label7;
label3:
v3 := @caughtexception;
v4 = virtualinvoke v3.<java.lang.Object: java.lang.Class getClass()>();
v5 = virtualinvoke v4.<java.lang.Class: java.lang.String getName()>();
v6 = virtualinvoke v3.<java.lang.Exception: java.lang.String getMessage()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v5, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unable to create connection: \u0001:\u0001");
v8 = v3 instanceof com.novell.ldapchai.exception.ChaiException;
if v8 != 0 goto label4;
v9 = v3 instanceof java.io.IOException;
if v9 == 0 goto label5;
label4:
v10 = <com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v11 = staticinvoke <com.novell.ldapchai.provider.ChaiProviderFactory$lambda_newProviderImpl_0__116: java.util.function.Supplier bootstrap$(java.lang.String)>(v7);
virtualinvoke v10.<com.novell.ldapchai.util.internal.ChaiLogger: void debug(java.util.function.Supplier)>(v11);
goto label6;
label5:
v12 = <com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v13 = staticinvoke <com.novell.ldapchai.provider.ChaiProviderFactory$lambda_newProviderImpl_1__117: java.util.function.Supplier bootstrap$(java.lang.String)>(v7);
virtualinvoke v12.<com.novell.ldapchai.util.internal.ChaiLogger: void debug(java.util.function.Supplier,java.lang.Exception)>(v13, v3);
label6:
v14 = new com.novell.ldapchai.exception.ChaiUnavailableException;
v15 = virtualinvoke v3.<java.lang.Exception: java.lang.String getMessage()>();
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unable to create connection: \u0001");
v17 = virtualinvoke v3.<java.lang.Exception: java.lang.String getMessage()>();
v18 = staticinvoke <com.novell.ldapchai.exception.ChaiErrors: com.novell.ldapchai.exception.ChaiError getErrorForMessage(java.lang.String)>(v17);
specialinvoke v14.<com.novell.ldapchai.exception.ChaiUnavailableException: void <init>(java.lang.String,com.novell.ldapchai.exception.ChaiError,java.lang.Throwable)>(v16, v18, v3);
throw v14;
label7:
v19 = specialinvoke v0.<com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.provider.ChaiProviderImplementor addProviderWrappers(com.novell.ldapchai.provider.ChaiProviderImplementor)>(v2);
v20 = virtualinvoke v0.<com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.provider.ChaiProviderFactory$CentralService getCentralService()>();
virtualinvoke v20.<com.novell.ldapchai.provider.ChaiProviderFactory$CentralService: void registerProvider(com.novell.ldapchai.provider.ChaiProviderImplementor)>(v19);
return v19;
catch java.lang.Exception from label1 to label2 with label3;
}
com.novell.ldapchai.provider.ChaiProviderImplementor createFailOverOrConcreteProvider(com.novell.ldapchai.provider.ChaiConfiguration) throws com.novell.ldapchai.exception.ChaiUnavailableException
{
com.novell.ldapchai.provider.ChaiConfiguration v1;
com.novell.ldapchai.provider.ChaiProviderImplementor v4, v7;
com.novell.ldapchai.provider.ChaiSetting v2;
java.util.function.Supplier v6;
com.novell.ldapchai.provider.ChaiProviderFactory v0;
boolean v3;
com.novell.ldapchai.util.internal.ChaiLogger v5;
v0 := @this: com.novell.ldapchai.provider.ChaiProviderFactory;
v1 := @parameter0: com.novell.ldapchai.provider.ChaiConfiguration;
v2 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting FAILOVER_ENABLE>;
v3 = virtualinvoke v1.<com.novell.ldapchai.provider.ChaiConfiguration: boolean getBooleanSetting(com.novell.ldapchai.provider.ChaiSetting)>(v2);
if v3 == 0 goto label1;
v4 = staticinvoke <com.novell.ldapchai.provider.FailOverWrapper: com.novell.ldapchai.provider.ChaiProviderImplementor forConfiguration(com.novell.ldapchai.provider.ChaiProviderFactory,com.novell.ldapchai.provider.ChaiConfiguration)>(v0, v1);
return v4;
label1:
v5 = <com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v6 = staticinvoke <com.novell.ldapchai.provider.ChaiProviderFactory$lambda_createFailOverOrConcreteProvider_2__118: java.util.function.Supplier bootstrap$(com.novell.ldapchai.provider.ChaiConfiguration)>(v1);
virtualinvoke v5.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v6);
v7 = staticinvoke <com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.provider.ChaiProviderImplementor createConcreteProvider(com.novell.ldapchai.provider.ChaiProviderFactory,com.novell.ldapchai.provider.ChaiConfiguration,boolean)>(v0, v1, 1);
return v7;
}
static com.novell.ldapchai.provider.ChaiProviderImplementor createConcreteProvider(com.novell.ldapchai.provider.ChaiProviderFactory, com.novell.ldapchai.provider.ChaiConfiguration, boolean) throws com.novell.ldapchai.exception.ChaiUnavailableException, java.lang.IllegalStateException
{
java.lang.IllegalStateException v24;
java.lang.ReflectiveOperationException v19;
java.util.function.Supplier v23;
com.novell.ldapchai.provider.ChaiProviderFactory v0;
java.lang.String v10, v15, v16, v20, v21, v4, v9;
boolean v13, v2, v7;
com.novell.ldapchai.provider.ChaiConfiguration v1;
com.novell.ldapchai.provider.ChaiSetting v3;
com.novell.ldapchai.exception.ChaiError v12, v18;
com.novell.ldapchai.exception.ChaiUnavailableException v11, v17;
java.lang.Class v14, v5, v8;
java.lang.Object v6;
com.novell.ldapchai.util.internal.ChaiLogger v22;
v0 := @parameter0: com.novell.ldapchai.provider.ChaiProviderFactory;
v1 := @parameter1: com.novell.ldapchai.provider.ChaiConfiguration;
v2 := @parameter2: boolean;
label1:
v3 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting PROVIDER_IMPLEMENTATION>;
v4 = virtualinvoke v1.<com.novell.ldapchai.provider.ChaiConfiguration: java.lang.String getSetting(com.novell.ldapchai.provider.ChaiSetting)>(v3);
v5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(v4);
v6 = virtualinvoke v5.<java.lang.Class: java.lang.Object newInstance()>();
v7 = v6 instanceof com.novell.ldapchai.provider.ChaiProvider;
if v7 != 0 goto label2;
v8 = class "Lcom/novell/ldapchai/provider/ChaiProvider;";
v9 = virtualinvoke v8.<java.lang.Class: java.lang.String getName()>();
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v4, v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unable to create new ChaiProvider, \u0001 is not instance of \u0001");
v11 = new com.novell.ldapchai.exception.ChaiUnavailableException;
v12 = <com.novell.ldapchai.exception.ChaiError: com.novell.ldapchai.exception.ChaiError UNKNOWN>;
specialinvoke v11.<com.novell.ldapchai.exception.ChaiUnavailableException: void <init>(java.lang.String,com.novell.ldapchai.exception.ChaiError)>(v10, v12);
throw v11;
label2:
v13 = v6 instanceof com.novell.ldapchai.provider.ChaiProviderImplementor;
if v13 != 0 goto label3;
v14 = class "Lcom/novell/ldapchai/provider/ChaiProviderImplementor;";
v15 = virtualinvoke v14.<java.lang.Class: java.lang.String getName()>();
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v4, v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unable to create new ChaiProvider, \u0001 is not instance of \u0001");
v17 = new com.novell.ldapchai.exception.ChaiUnavailableException;
v18 = <com.novell.ldapchai.exception.ChaiError: com.novell.ldapchai.exception.ChaiError UNKNOWN>;
specialinvoke v17.<com.novell.ldapchai.exception.ChaiUnavailableException: void <init>(java.lang.String,com.novell.ldapchai.exception.ChaiError)>(v16, v18);
throw v17;
label3:
if v2 == 0 goto label4;
interfaceinvoke v6.<com.novell.ldapchai.provider.ChaiProviderImplementor: void init(com.novell.ldapchai.provider.ChaiConfiguration,com.novell.ldapchai.provider.ChaiProviderFactory)>(v1, v0);
label4:
return v6;
label5:
v19 := @caughtexception;
v20 = virtualinvoke v19.<java.lang.ReflectiveOperationException: java.lang.String getMessage()>();
v21 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v20) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unexpected error creating new concrete ChaiProvider instance: \u0001");
v22 = <com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v23 = staticinvoke <com.novell.ldapchai.provider.ChaiProviderFactory$lambda_createConcreteProvider_3__119: java.util.function.Supplier bootstrap$(java.lang.String)>(v21);
virtualinvoke v22.<com.novell.ldapchai.util.internal.ChaiLogger: void error(java.util.function.Supplier,java.lang.Exception)>(v23, v19);
v24 = new java.lang.IllegalStateException;
specialinvoke v24.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v21);
throw v24;
catch java.lang.ClassNotFoundException from label1 to label4 with label5;
catch java.lang.IllegalAccessException from label1 to label4 with label5;
catch java.lang.InstantiationException from label1 to label4 with label5;
}
private com.novell.ldapchai.provider.ChaiProviderImplementor addProviderWrappers(com.novell.ldapchai.provider.ChaiProviderImplementor)
{
boolean v10, v12, v14, v16, v19, v22, v25, v28, v31, v4, v6, v8;
com.novell.ldapchai.util.internal.ChaiLogger v17, v20, v23, v26, v29, v32;
com.novell.ldapchai.provider.ChaiProviderImplementor v1, v15;
java.util.function.Supplier v18, v21, v24, v27, v30, v33;
com.novell.ldapchai.provider.ChaiProviderFactory v0;
com.novell.ldapchai.provider.ChaiConfiguration v2;
com.novell.ldapchai.provider.ChaiSetting v11, v13, v3, v5, v7, v9;
v0 := @this: com.novell.ldapchai.provider.ChaiProviderFactory;
v1 := @parameter0: com.novell.ldapchai.provider.ChaiProviderImplementor;
v2 = interfaceinvoke v1.<com.novell.ldapchai.provider.ChaiProviderImplementor: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v3 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting WATCHDOG_ENABLE>;
v4 = virtualinvoke v2.<com.novell.ldapchai.provider.ChaiConfiguration: boolean getBooleanSetting(com.novell.ldapchai.provider.ChaiSetting)>(v3);
v5 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting READONLY>;
v6 = virtualinvoke v2.<com.novell.ldapchai.provider.ChaiConfiguration: boolean getBooleanSetting(com.novell.ldapchai.provider.ChaiSetting)>(v5);
v7 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting WIRETRACE_ENABLE>;
v8 = virtualinvoke v2.<com.novell.ldapchai.provider.ChaiConfiguration: boolean getBooleanSetting(com.novell.ldapchai.provider.ChaiSetting)>(v7);
v9 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting STATISTICS_ENABLE>;
v10 = virtualinvoke v2.<com.novell.ldapchai.provider.ChaiConfiguration: boolean getBooleanSetting(com.novell.ldapchai.provider.ChaiSetting)>(v9);
v11 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting CACHE_ENABLE>;
v12 = virtualinvoke v2.<com.novell.ldapchai.provider.ChaiConfiguration: boolean getBooleanSetting(com.novell.ldapchai.provider.ChaiSetting)>(v11);
v13 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting THREAD_SAFE_ENABLE>;
v14 = virtualinvoke v2.<com.novell.ldapchai.provider.ChaiConfiguration: boolean getBooleanSetting(com.novell.ldapchai.provider.ChaiSetting)>(v13);
v15 = v1;
if v4 == 0 goto label1;
v16 = v1 instanceof com.novell.ldapchai.provider.WatchdogWrapper;
if v16 != 0 goto label1;
v17 = <com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v18 = staticinvoke <com.novell.ldapchai.provider.ChaiProviderFactory$lambda_addProviderWrappers_4__125: java.util.function.Supplier bootstrap$()>();
virtualinvoke v17.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v18);
v15 = staticinvoke <com.novell.ldapchai.provider.WatchdogWrapper: com.novell.ldapchai.provider.ChaiProviderImplementor forProvider(com.novell.ldapchai.provider.ChaiProviderFactory,com.novell.ldapchai.provider.ChaiProviderImplementor)>(v0, v1);
label1:
if v6 == 0 goto label2;
v19 = v15 instanceof com.novell.ldapchai.provider.ReadOnlyWrapper;
if v19 != 0 goto label2;
v20 = <com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v21 = staticinvoke <com.novell.ldapchai.provider.ChaiProviderFactory$lambda_addProviderWrappers_5__124: java.util.function.Supplier bootstrap$()>();
virtualinvoke v20.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v21);
v15 = staticinvoke <com.novell.ldapchai.provider.ReadOnlyWrapper: com.novell.ldapchai.provider.ChaiProviderImplementor forProvider(com.novell.ldapchai.provider.ChaiProviderImplementor)>(v15);
label2:
if v8 == 0 goto label3;
v22 = v15 instanceof com.novell.ldapchai.provider.WireTraceWrapper;
if v22 != 0 goto label3;
v23 = <com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v24 = staticinvoke <com.novell.ldapchai.provider.ChaiProviderFactory$lambda_addProviderWrappers_6__123: java.util.function.Supplier bootstrap$()>();
virtualinvoke v23.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v24);
v15 = staticinvoke <com.novell.ldapchai.provider.WireTraceWrapper: com.novell.ldapchai.provider.ChaiProviderImplementor forProvider(com.novell.ldapchai.provider.ChaiProviderImplementor)>(v15);
label3:
if v10 == 0 goto label4;
v25 = v15 instanceof com.novell.ldapchai.provider.StatisticsWrapper;
if v25 != 0 goto label4;
v26 = <com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v27 = staticinvoke <com.novell.ldapchai.provider.ChaiProviderFactory$lambda_addProviderWrappers_7__122: java.util.function.Supplier bootstrap$()>();
virtualinvoke v26.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v27);
v15 = staticinvoke <com.novell.ldapchai.provider.StatisticsWrapper: com.novell.ldapchai.provider.ChaiProviderImplementor forProvider(com.novell.ldapchai.provider.ChaiProviderImplementor)>(v15);
label4:
if v12 == 0 goto label5;
v28 = v15 instanceof com.novell.ldapchai.provider.CachingWrapper;
if v28 != 0 goto label5;
v29 = <com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v30 = staticinvoke <com.novell.ldapchai.provider.ChaiProviderFactory$lambda_addProviderWrappers_8__121: java.util.function.Supplier bootstrap$()>();
virtualinvoke v29.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v30);
v15 = staticinvoke <com.novell.ldapchai.provider.CachingWrapper: com.novell.ldapchai.provider.ChaiProviderImplementor forProvider(com.novell.ldapchai.provider.ChaiProviderImplementor)>(v15);
label5:
if v14 == 0 goto label6;
v31 = v15 instanceof com.novell.ldapchai.provider.ThreadSafeWrapper;
if v31 != 0 goto label6;
v32 = <com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v33 = staticinvoke <com.novell.ldapchai.provider.ChaiProviderFactory$lambda_addProviderWrappers_9__120: java.util.function.Supplier bootstrap$()>();
virtualinvoke v32.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v33);
v15 = staticinvoke <com.novell.ldapchai.provider.ThreadSafeWrapper: com.novell.ldapchai.provider.ChaiProviderImplementor forProvider(com.novell.ldapchai.provider.ChaiProviderImplementor)>(v15);
label6:
return v15;
}
public static com.novell.ldapchai.provider.ChaiProviderFactory newProviderFactory()
{
com.novell.ldapchai.provider.ChaiProviderFactory v0;
java.util.Map v1;
v0 = new com.novell.ldapchai.provider.ChaiProviderFactory;
v1 = staticinvoke <com.novell.ldapchai.provider.ChaiProviderFactorySetting: java.util.Map getDefaultSettings()>();
specialinvoke v0.<com.novell.ldapchai.provider.ChaiProviderFactory: void <init>(java.util.Map)>(v1);
return v0;
}
public static com.novell.ldapchai.provider.ChaiProviderFactory newProviderFactory(java.util.Map)
{
java.util.LinkedHashMap v1;
java.util.Map v0, v2, v4;
com.novell.ldapchai.provider.ChaiProviderFactory v3;
v0 := @parameter0: java.util.Map;
v1 = new java.util.LinkedHashMap;
v2 = staticinvoke <com.novell.ldapchai.provider.ChaiProviderFactorySetting: java.util.Map getDefaultSettings()>();
specialinvoke v1.<java.util.LinkedHashMap: void <init>(java.util.Map)>(v2);
if v0 == null goto label1;
interfaceinvoke v1.<java.util.Map: void putAll(java.util.Map)>(v0);
label1:
v3 = new com.novell.ldapchai.provider.ChaiProviderFactory;
v4 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v1);
specialinvoke v3.<com.novell.ldapchai.provider.ChaiProviderFactory: void <init>(java.util.Map)>(v4);
return v3;
}
public java.util.Map getChaiProviderFactorySettings()
{
com.novell.ldapchai.provider.ChaiProviderFactory v0;
java.util.Map v1;
v0 := @this: com.novell.ldapchai.provider.ChaiProviderFactory;
v1 = v0.<com.novell.ldapchai.provider.ChaiProviderFactory: java.util.Map chaiProviderFactorySettingStringMap>;
return v1;
}
com.novell.ldapchai.provider.ChaiProviderFactory$CentralService getCentralService()
{
com.novell.ldapchai.provider.ChaiProviderFactory$CentralService v1;
com.novell.ldapchai.provider.ChaiProviderFactory v0;
v0 := @this: com.novell.ldapchai.provider.ChaiProviderFactory;
v1 = v0.<com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.provider.ChaiProviderFactory$CentralService centralService>;
return v1;
}
public java.util.Set activeProviders()
{
java.util.Set v2;
com.novell.ldapchai.provider.ChaiProviderFactory$CentralService v1;
com.novell.ldapchai.provider.ChaiProviderFactory v0;
v0 := @this: com.novell.ldapchai.provider.ChaiProviderFactory;
v1 = virtualinvoke v0.<com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.provider.ChaiProviderFactory$CentralService getCentralService()>();
v2 = virtualinvoke v1.<com.novell.ldapchai.provider.ChaiProviderFactory$CentralService: java.util.Set activeProviders()>();
return v2;
}
public void close()
{
java.util.Iterator v3;
java.util.Set v2;
java.lang.Object v5;
com.novell.ldapchai.provider.ChaiProviderFactory$CentralService v1;
boolean v4;
com.novell.ldapchai.provider.ChaiProviderFactory v0;
v0 := @this: com.novell.ldapchai.provider.ChaiProviderFactory;
v0.<com.novell.ldapchai.provider.ChaiProviderFactory: boolean closed> = 1;
v1 = v0.<com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.provider.ChaiProviderFactory$CentralService centralService>;
virtualinvoke v1.<com.novell.ldapchai.provider.ChaiProviderFactory$CentralService: void close()>();
v2 = virtualinvoke v0.<com.novell.ldapchai.provider.ChaiProviderFactory: java.util.Set activeProviders()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v5.<com.novell.ldapchai.provider.ChaiProvider: void close()>();
goto label1;
label2:
return;
}
private void checkStatus()
{
java.lang.IllegalStateException v2;
boolean v1;
com.novell.ldapchai.provider.ChaiProviderFactory v0;
v0 := @this: com.novell.ldapchai.provider.ChaiProviderFactory;
v1 = v0.<com.novell.ldapchai.provider.ChaiProviderFactory: boolean closed>;
if v1 == 0 goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ChaiProviderFactory instance is closed, new providers can not be created");
throw v2;
label1:
return;
}
static void <clinit>()
{
com.novell.ldapchai.util.internal.ChaiLogger v0;
v0 = staticinvoke <com.novell.ldapchai.util.internal.ChaiLogger: com.novell.ldapchai.util.internal.ChaiLogger getLogger(java.lang.Class)>(class "Lcom/novell/ldapchai/provider/ChaiProviderFactory;");
<com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.util.internal.ChaiLogger LOGGER> = v0;
return;
}
}