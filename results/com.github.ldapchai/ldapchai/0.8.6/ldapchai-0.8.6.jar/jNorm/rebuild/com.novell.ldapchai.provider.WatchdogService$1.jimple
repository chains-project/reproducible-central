class com.novell.ldapchai.provider.WatchdogService$1 extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
private final java.util.concurrent.ThreadFactory realThreadFactory;
final com.novell.ldapchai.provider.WatchdogService this$0;
void <init>(com.novell.ldapchai.provider.WatchdogService)
{
com.novell.ldapchai.provider.WatchdogService v1;
java.util.concurrent.ThreadFactory v2;
com.novell.ldapchai.provider.WatchdogService$1 v0;
v0 := @this: com.novell.ldapchai.provider.WatchdogService$1;
v1 := @parameter0: com.novell.ldapchai.provider.WatchdogService;
v0.<com.novell.ldapchai.provider.WatchdogService$1: com.novell.ldapchai.provider.WatchdogService this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();
v0.<com.novell.ldapchai.provider.WatchdogService$1: java.util.concurrent.ThreadFactory realThreadFactory> = v2;
return;
}
public java.lang.Thread newThread(java.lang.Runnable)
{
java.lang.Thread v3;
java.util.concurrent.ThreadFactory v2;
com.novell.ldapchai.provider.WatchdogService$1 v0;
java.lang.Runnable v1;
v0 := @this: com.novell.ldapchai.provider.WatchdogService$1;
v1 := @parameter0: java.lang.Runnable;
v2 = v0.<com.novell.ldapchai.provider.WatchdogService$1: java.util.concurrent.ThreadFactory realThreadFactory>;
v3 = interfaceinvoke v2.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(v1);
virtualinvoke v3.<java.lang.Thread: void setDaemon(boolean)>(1);
virtualinvoke v3.<java.lang.Thread: void setName(java.lang.String)>("LDAP Chai WatchdogWrapper timer thread");
return v3;
}
}