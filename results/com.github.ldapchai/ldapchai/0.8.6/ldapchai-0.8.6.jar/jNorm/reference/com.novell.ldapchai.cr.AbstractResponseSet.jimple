public abstract class com.novell.ldapchai.cr.AbstractResponseSet extends java.lang.Object implements com.novell.ldapchai.cr.ResponseSet
{
private static final com.novell.ldapchai.util.internal.ChaiLogger LOGGER;
protected final java.util.Map crMap;
protected final com.novell.ldapchai.cr.ChallengeSet allChallengeSet;
protected final com.novell.ldapchai.cr.ChallengeSet presentableChallengeSet;
protected final java.util.Locale locale;
protected final int minimumRandomRequired;
protected final java.time.Instant timestamp;
protected final java.lang.String csIdentifier;
protected final java.util.Map helpdeskCrMap;
protected com.novell.ldapchai.cr.AbstractResponseSet$STATE state;
protected void <init>(java.util.Map, java.util.Map, java.util.Locale, int, com.novell.ldapchai.cr.AbstractResponseSet$STATE, java.lang.String, java.time.Instant) throws com.novell.ldapchai.exception.ChaiValidationException
{
java.util.HashMap v11, v9;
com.novell.ldapchai.cr.ChallengeSet v15, v16;
com.novell.ldapchai.cr.ChaiChallengeSet v12;
java.util.Locale v3;
java.util.Map v1, v10, v13, v2, v8;
int v4;
java.lang.String v6;
com.novell.ldapchai.cr.AbstractResponseSet$STATE v5;
java.util.Set v14;
java.time.Instant v7;
com.novell.ldapchai.cr.AbstractResponseSet v0;
v0 := @this: com.novell.ldapchai.cr.AbstractResponseSet;
v1 := @parameter0: java.util.Map;
v2 := @parameter1: java.util.Map;
v3 := @parameter2: java.util.Locale;
v4 := @parameter3: int;
v5 := @parameter4: com.novell.ldapchai.cr.AbstractResponseSet$STATE;
v6 := @parameter5: java.lang.String;
v7 := @parameter6: java.time.Instant;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.novell.ldapchai.cr.AbstractResponseSet: com.novell.ldapchai.cr.AbstractResponseSet$STATE state> = v5;
v0.<com.novell.ldapchai.cr.AbstractResponseSet: java.util.Locale locale> = v3;
v0.<com.novell.ldapchai.cr.AbstractResponseSet: int minimumRandomRequired> = v4;
if v1 != null goto label1;
v8 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
goto label2;
label1:
v9 = new java.util.HashMap;
specialinvoke v9.<java.util.HashMap: void <init>(java.util.Map)>(v1);
v8 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v9);
label2:
v0.<com.novell.ldapchai.cr.AbstractResponseSet: java.util.Map crMap> = v8;
if v2 != null goto label3;
v10 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
goto label4;
label3:
v11 = new java.util.HashMap;
specialinvoke v11.<java.util.HashMap: void <init>(java.util.Map)>(v2);
v10 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v11);
label4:
v0.<com.novell.ldapchai.cr.AbstractResponseSet: java.util.Map helpdeskCrMap> = v10;
v0.<com.novell.ldapchai.cr.AbstractResponseSet: java.lang.String csIdentifier> = v6;
v0.<com.novell.ldapchai.cr.AbstractResponseSet: java.time.Instant timestamp> = v7;
v12 = new com.novell.ldapchai.cr.ChaiChallengeSet;
v13 = v0.<com.novell.ldapchai.cr.AbstractResponseSet: java.util.Map crMap>;
v14 = interfaceinvoke v13.<java.util.Map: java.util.Set keySet()>();
specialinvoke v12.<com.novell.ldapchai.cr.ChaiChallengeSet: void <init>(java.util.Collection,int,java.util.Locale,java.lang.String)>(v14, v4, v3, v6);
v0.<com.novell.ldapchai.cr.AbstractResponseSet: com.novell.ldapchai.cr.ChallengeSet allChallengeSet> = v12;
v15 = v0.<com.novell.ldapchai.cr.AbstractResponseSet: com.novell.ldapchai.cr.ChallengeSet allChallengeSet>;
v16 = staticinvoke <com.novell.ldapchai.cr.AbstractResponseSet: com.novell.ldapchai.cr.ChallengeSet reduceCsToMinRandoms(com.novell.ldapchai.cr.ChallengeSet)>(v15);
v0.<com.novell.ldapchai.cr.AbstractResponseSet: com.novell.ldapchai.cr.ChallengeSet presentableChallengeSet> = v16;
return;
}
public java.lang.String toString()
{
java.lang.Exception v9;
com.novell.ldapchai.cr.ChallengeSet v7;
com.novell.ldapchai.cr.AbstractResponseSet v0;
java.lang.Class v2;
java.lang.StringBuilder v1, v4, v6;
java.lang.String v10, v3, v8;
com.novell.ldapchai.cr.AbstractResponseSet$STATE v5;
v0 := @this: com.novell.ldapchai.cr.AbstractResponseSet;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v2.<java.lang.Class: java.lang.String getSimpleName()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v3);
v4 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": state(");
v5 = v0.<com.novell.ldapchai.cr.AbstractResponseSet: com.novell.ldapchai.cr.AbstractResponseSet$STATE state>;
v6 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v5);
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ChallengeSet: (");
label1:
v7 = virtualinvoke v0.<com.novell.ldapchai.cr.AbstractResponseSet: com.novell.ldapchai.cr.ChallengeSet getChallengeSet()>();
v8 = interfaceinvoke v7.<com.novell.ldapchai.cr.ChallengeSet: java.lang.String toString()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v8);
label2:
goto label4;
label3:
v9 := @caughtexception;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[error]");
label4:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
v10 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v10;
catch java.lang.Exception from label1 to label2 with label3;
}
public final com.novell.ldapchai.cr.ChallengeSet getChallengeSet() throws com.novell.ldapchai.exception.ChaiValidationException
{
com.novell.ldapchai.cr.AbstractResponseSet v0;
com.novell.ldapchai.cr.ChallengeSet v1;
v0 := @this: com.novell.ldapchai.cr.AbstractResponseSet;
v1 = v0.<com.novell.ldapchai.cr.AbstractResponseSet: com.novell.ldapchai.cr.ChallengeSet allChallengeSet>;
return v1;
}
public boolean meetsChallengeSetRequirements(com.novell.ldapchai.cr.ChallengeSet) throws com.novell.ldapchai.exception.ChaiValidationException
{
com.novell.ldapchai.exception.ChaiValidationException v12, v19, v34;
boolean v11, v4, v6, v7;
java.util.List v10, v15, v17, v2, v22, v28;
java.lang.StringBuilder v25, v26, v30, v31, v33;
com.novell.ldapchai.cr.ChallengeSet v1, v14, v21, v27, v9;
int v16, v18, v23, v24, v29, v32;
java.lang.String v35, v8;
java.util.Iterator v3;
com.novell.ldapchai.exception.ChaiError v13, v20, v36;
com.novell.ldapchai.cr.AbstractResponseSet v0;
java.lang.Object v5;
v0 := @this: com.novell.ldapchai.cr.AbstractResponseSet;
v1 := @parameter0: com.novell.ldapchai.cr.ChallengeSet;
v2 = interfaceinvoke v1.<com.novell.ldapchai.cr.ChallengeSet: java.util.List getChallenges()>();
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<com.novell.ldapchai.cr.Challenge: boolean isRequired()>();
if v6 == 0 goto label1;
v7 = interfaceinvoke v5.<com.novell.ldapchai.cr.Challenge: boolean isAdminDefined()>();
if v7 == 0 goto label1;
v8 = interfaceinvoke v5.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
v9 = virtualinvoke v0.<com.novell.ldapchai.cr.AbstractResponseSet: com.novell.ldapchai.cr.ChallengeSet getChallengeSet()>();
v10 = interfaceinvoke v9.<com.novell.ldapchai.cr.ChallengeSet: java.util.List getChallengeTexts()>();
v11 = interfaceinvoke v10.<java.util.List: boolean contains(java.lang.Object)>(v8);
if v11 != 0 goto label1;
v12 = new com.novell.ldapchai.exception.ChaiValidationException;
v13 = <com.novell.ldapchai.exception.ChaiError: com.novell.ldapchai.exception.ChaiError CR_MISSING_REQUIRED_RESPONSE_TEXT>;
specialinvoke v12.<com.novell.ldapchai.exception.ChaiValidationException: void <init>(java.lang.String,com.novell.ldapchai.exception.ChaiError,java.lang.String)>("multiple challenges have the same value", v13, v8);
throw v12;
label2:
v14 = virtualinvoke v0.<com.novell.ldapchai.cr.AbstractResponseSet: com.novell.ldapchai.cr.ChallengeSet getChallengeSet()>();
v15 = interfaceinvoke v14.<com.novell.ldapchai.cr.ChallengeSet: java.util.List getRequiredChallenges()>();
v16 = interfaceinvoke v15.<java.util.List: int size()>();
v17 = interfaceinvoke v1.<com.novell.ldapchai.cr.ChallengeSet: java.util.List getRequiredChallenges()>();
v18 = interfaceinvoke v17.<java.util.List: int size()>();
if v16 >= v18 goto label3;
v19 = new com.novell.ldapchai.exception.ChaiValidationException;
v20 = <com.novell.ldapchai.exception.ChaiError: com.novell.ldapchai.exception.ChaiError CR_TOO_FEW_CHALLENGES>;
specialinvoke v19.<com.novell.ldapchai.exception.ChaiValidationException: void <init>(java.lang.String,com.novell.ldapchai.exception.ChaiError)>("too few challenges are required", v20);
throw v19;
label3:
v21 = virtualinvoke v0.<com.novell.ldapchai.cr.AbstractResponseSet: com.novell.ldapchai.cr.ChallengeSet getChallengeSet()>();
v22 = interfaceinvoke v21.<com.novell.ldapchai.cr.ChallengeSet: java.util.List getRandomChallenges()>();
v23 = interfaceinvoke v22.<java.util.List: int size()>();
v24 = interfaceinvoke v1.<com.novell.ldapchai.cr.ChallengeSet: int getMinRandomRequired()>();
if v23 >= v24 goto label4;
v25 = new java.lang.StringBuilder;
specialinvoke v25.<java.lang.StringBuilder: void <init>()>();
v26 = virtualinvoke v25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("minimum number of random responses in response set (");
v27 = virtualinvoke v0.<com.novell.ldapchai.cr.AbstractResponseSet: com.novell.ldapchai.cr.ChallengeSet getChallengeSet()>();
v28 = interfaceinvoke v27.<com.novell.ldapchai.cr.ChallengeSet: java.util.List getRandomChallenges()>();
v29 = interfaceinvoke v28.<java.util.List: int size()>();
v30 = virtualinvoke v26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v29);
virtualinvoke v30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
v31 = virtualinvoke v25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is less than minimum number of random responses required in challenge set (");
v32 = interfaceinvoke v1.<com.novell.ldapchai.cr.ChallengeSet: int getMinRandomRequired()>();
v33 = virtualinvoke v31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v32);
virtualinvoke v33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
v34 = new com.novell.ldapchai.exception.ChaiValidationException;
v35 = virtualinvoke v25.<java.lang.StringBuilder: java.lang.String toString()>();
v36 = <com.novell.ldapchai.exception.ChaiError: com.novell.ldapchai.exception.ChaiError CR_TOO_FEW_RANDOM_RESPONSES>;
specialinvoke v34.<com.novell.ldapchai.exception.ChaiValidationException: void <init>(java.lang.String,com.novell.ldapchai.exception.ChaiError)>(v35, v36);
throw v34;
label4:
return 1;
}
public java.util.Locale getLocale()
{
java.util.Locale v1;
com.novell.ldapchai.cr.AbstractResponseSet v0;
v0 := @this: com.novell.ldapchai.cr.AbstractResponseSet;
v1 = v0.<com.novell.ldapchai.cr.AbstractResponseSet: java.util.Locale locale>;
return v1;
}
public java.time.Instant getTimestamp()
{
java.time.Instant v1;
com.novell.ldapchai.cr.AbstractResponseSet v0;
v0 := @this: com.novell.ldapchai.cr.AbstractResponseSet;
v1 = v0.<com.novell.ldapchai.cr.AbstractResponseSet: java.time.Instant timestamp>;
return v1;
}
public com.novell.ldapchai.cr.ChallengeSet getPresentableChallengeSet() throws com.novell.ldapchai.exception.ChaiValidationException
{
com.novell.ldapchai.cr.AbstractResponseSet v0;
com.novell.ldapchai.cr.ChallengeSet v1;
v0 := @this: com.novell.ldapchai.cr.AbstractResponseSet;
v1 = v0.<com.novell.ldapchai.cr.AbstractResponseSet: com.novell.ldapchai.cr.ChallengeSet presentableChallengeSet>;
return v1;
}
public java.util.Map getHelpdeskResponses()
{
java.util.Iterator v5;
java.util.Set v4;
java.util.LinkedHashMap v1;
com.novell.ldapchai.cr.AbstractResponseSet v0;
java.util.Map v2, v3;
java.lang.Object v7, v8, v9;
java.lang.String v10;
boolean v6;
v0 := @this: com.novell.ldapchai.cr.AbstractResponseSet;
v1 = new java.util.LinkedHashMap;
specialinvoke v1.<java.util.LinkedHashMap: void <init>()>();
v2 = v0.<com.novell.ldapchai.cr.AbstractResponseSet: java.util.Map helpdeskCrMap>;
if v2 == null goto label2;
v3 = v0.<com.novell.ldapchai.cr.AbstractResponseSet: java.util.Map helpdeskCrMap>;
v4 = interfaceinvoke v3.<java.util.Map: java.util.Set entrySet()>();
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getKey()>();
v9 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getValue()>();
v10 = interfaceinvoke v9.<com.novell.ldapchai.cr.HelpdeskAnswer: java.lang.String answerText()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v8, v10);
goto label1;
label2:
return v1;
}
private static com.novell.ldapchai.cr.ChallengeSet reduceCsToMinRandoms(com.novell.ldapchai.cr.ChallengeSet) throws com.novell.ldapchai.exception.ChaiValidationException
{
com.novell.ldapchai.cr.ChallengeSet v0;
java.util.ArrayList v5, v6;
java.security.SecureRandom v4;
com.novell.ldapchai.cr.ChaiChallengeSet v14;
java.util.Locale v16;
int v10, v11, v15, v2, v3, v8, v9;
java.lang.String v17;
java.util.List v1, v13, v7;
java.lang.Object v12;
v0 := @parameter0: com.novell.ldapchai.cr.ChallengeSet;
v1 = interfaceinvoke v0.<com.novell.ldapchai.cr.ChallengeSet: java.util.List getRandomChallenges()>();
v2 = interfaceinvoke v1.<java.util.List: int size()>();
v3 = interfaceinvoke v0.<com.novell.ldapchai.cr.ChallengeSet: int getMinRandomRequired()>();
if v2 > v3 goto label1;
return v0;
label1:
v4 = new java.security.SecureRandom;
specialinvoke v4.<java.security.SecureRandom: void <init>()>();
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>()>();
v6 = new java.util.ArrayList;
v7 = interfaceinvoke v0.<com.novell.ldapchai.cr.ChallengeSet: java.util.List getRandomChallenges()>();
specialinvoke v6.<java.util.ArrayList: void <init>(java.util.Collection)>(v7);
label2:
v8 = interfaceinvoke v5.<java.util.List: int size()>();
v9 = interfaceinvoke v0.<com.novell.ldapchai.cr.ChallengeSet: int getMinRandomRequired()>();
if v8 >= v9 goto label3;
v10 = interfaceinvoke v6.<java.util.List: int size()>();
v11 = virtualinvoke v4.<java.security.SecureRandom: int nextInt(int)>(v10);
v12 = interfaceinvoke v6.<java.util.List: java.lang.Object remove(int)>(v11);
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v12);
goto label2;
label3:
v13 = interfaceinvoke v0.<com.novell.ldapchai.cr.ChallengeSet: java.util.List getRequiredChallenges()>();
interfaceinvoke v5.<java.util.List: boolean addAll(java.util.Collection)>(v13);
v14 = new com.novell.ldapchai.cr.ChaiChallengeSet;
v15 = interfaceinvoke v0.<com.novell.ldapchai.cr.ChallengeSet: int getMinRandomRequired()>();
v16 = interfaceinvoke v0.<com.novell.ldapchai.cr.ChallengeSet: java.util.Locale getLocale()>();
v17 = interfaceinvoke v0.<com.novell.ldapchai.cr.ChallengeSet: java.lang.String getIdentifier()>();
specialinvoke v14.<com.novell.ldapchai.cr.ChaiChallengeSet: void <init>(java.util.Collection,int,java.util.Locale,java.lang.String)>(v5, v15, v16, v17);
return v14;
}
public java.util.Map getChallengeAnswers()
{
com.novell.ldapchai.cr.AbstractResponseSet v0;
java.util.Map v1, v2, v3;
v0 := @this: com.novell.ldapchai.cr.AbstractResponseSet;
v1 = v0.<com.novell.ldapchai.cr.AbstractResponseSet: java.util.Map crMap>;
if v1 != null goto label1;
v2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
goto label2;
label1:
v3 = v0.<com.novell.ldapchai.cr.AbstractResponseSet: java.util.Map crMap>;
v2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v3);
label2:
return v2;
}
public java.util.Map getHelpdeskAnswers()
{
com.novell.ldapchai.cr.AbstractResponseSet v0;
java.util.Map v1, v2, v3;
v0 := @this: com.novell.ldapchai.cr.AbstractResponseSet;
v1 = v0.<com.novell.ldapchai.cr.AbstractResponseSet: java.util.Map helpdeskCrMap>;
if v1 != null goto label1;
v2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
goto label2;
label1:
v3 = v0.<com.novell.ldapchai.cr.AbstractResponseSet: java.util.Map helpdeskCrMap>;
v2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v3);
label2:
return v2;
}
static void <clinit>()
{
com.novell.ldapchai.util.internal.ChaiLogger v0;
v0 = staticinvoke <com.novell.ldapchai.util.internal.ChaiLogger: com.novell.ldapchai.util.internal.ChaiLogger getLogger(java.lang.Class)>(class "Lcom/novell/ldapchai/cr/AbstractResponseSet;");
<com.novell.ldapchai.cr.AbstractResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER> = v0;
return;
}
}