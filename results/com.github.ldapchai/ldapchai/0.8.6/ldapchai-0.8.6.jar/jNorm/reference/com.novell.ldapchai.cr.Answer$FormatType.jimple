public final enum class com.novell.ldapchai.cr.Answer$FormatType extends java.lang.Enum
{
public static final enum com.novell.ldapchai.cr.Answer$FormatType TEXT;
public static final enum com.novell.ldapchai.cr.Answer$FormatType MD5;
public static final enum com.novell.ldapchai.cr.Answer$FormatType SHA1;
public static final enum com.novell.ldapchai.cr.Answer$FormatType SHA1_SALT;
public static final enum com.novell.ldapchai.cr.Answer$FormatType SHA256_SALT;
public static final enum com.novell.ldapchai.cr.Answer$FormatType SHA512_SALT;
public static final enum com.novell.ldapchai.cr.Answer$FormatType BCRYPT;
public static final enum com.novell.ldapchai.cr.Answer$FormatType SCRYPT;
public static final enum com.novell.ldapchai.cr.Answer$FormatType PBKDF2;
public static final enum com.novell.ldapchai.cr.Answer$FormatType PBKDF2_SHA256;
public static final enum com.novell.ldapchai.cr.Answer$FormatType PBKDF2_SHA512;
public static final enum com.novell.ldapchai.cr.Answer$FormatType HELPDESK;
public static final enum com.novell.ldapchai.cr.Answer$FormatType NMAS;
private final transient com.novell.ldapchai.cr.Answer$ImplementationFactory factory;
private final int saltLength;
private final int defaultIterations;
private final boolean hashThreadingEligible;
private static final com.novell.ldapchai.cr.Answer$FormatType[] $VALUES;
public static com.novell.ldapchai.cr.Answer$FormatType[] values()
{
com.novell.ldapchai.cr.Answer$FormatType[] v0;
java.lang.Object v1;
v0 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static com.novell.ldapchai.cr.Answer$FormatType valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/novell/ldapchai/cr/Answer$FormatType;", v0);
return v1;
}
private transient void <init>(java.lang.String, int, com.novell.ldapchai.cr.Answer$ImplementationFactory, int, int, com.novell.ldapchai.cr.Answer$FormatType$Flag[])
{
com.novell.ldapchai.cr.Answer$FormatType v0;
com.novell.ldapchai.cr.Answer$ImplementationFactory v3;
com.novell.ldapchai.cr.Answer$FormatType$Flag v7;
int v2, v4, v5;
java.lang.String v1;
com.novell.ldapchai.cr.Answer$FormatType$Flag[] v6;
boolean v8;
v0 := @this: com.novell.ldapchai.cr.Answer$FormatType;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: com.novell.ldapchai.cr.Answer$ImplementationFactory;
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 := @parameter5: com.novell.ldapchai.cr.Answer$FormatType$Flag[];
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
v0.<com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$ImplementationFactory factory> = v3;
v0.<com.novell.ldapchai.cr.Answer$FormatType: int saltLength> = v4;
v0.<com.novell.ldapchai.cr.Answer$FormatType: int defaultIterations> = v5;
v7 = <com.novell.ldapchai.cr.Answer$FormatType$Flag: com.novell.ldapchai.cr.Answer$FormatType$Flag HashThreadingEligible>;
v8 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: boolean enumArrayContainsValue(java.lang.Enum[],java.lang.Enum)>(v6, v7);
v0.<com.novell.ldapchai.cr.Answer$FormatType: boolean hashThreadingEligible> = v8;
return;
}
public com.novell.ldapchai.cr.Answer$ImplementationFactory getFactory()
{
com.novell.ldapchai.cr.Answer$FormatType v0;
com.novell.ldapchai.cr.Answer$ImplementationFactory v1;
v0 := @this: com.novell.ldapchai.cr.Answer$FormatType;
v1 = v0.<com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$ImplementationFactory factory>;
return v1;
}
public int getDefaultIterations()
{
int v1;
com.novell.ldapchai.cr.Answer$FormatType v0;
v0 := @this: com.novell.ldapchai.cr.Answer$FormatType;
v1 = v0.<com.novell.ldapchai.cr.Answer$FormatType: int defaultIterations>;
return v1;
}
public int getSaltLength()
{
int v1;
com.novell.ldapchai.cr.Answer$FormatType v0;
v0 := @this: com.novell.ldapchai.cr.Answer$FormatType;
v1 = v0.<com.novell.ldapchai.cr.Answer$FormatType: int saltLength>;
return v1;
}
public boolean isHashThreadingEligible()
{
com.novell.ldapchai.cr.Answer$FormatType v0;
boolean v1;
v0 := @this: com.novell.ldapchai.cr.Answer$FormatType;
v1 = v0.<com.novell.ldapchai.cr.Answer$FormatType: boolean hashThreadingEligible>;
return v1;
}
public static java.util.List implementedValues()
{
java.util.function.Predicate v2;
java.util.function.Function v5;
com.novell.ldapchai.cr.Answer$FormatType[] v0;
java.util.stream.Stream v1, v3;
java.lang.Object v7;
java.util.stream.Collector v4, v6;
v0 = staticinvoke <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType[] values()>();
v1 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(v0);
v2 = staticinvoke <com.novell.ldapchai.cr.Answer$FormatType$lambda_implementedValues_0__1: java.util.function.Predicate bootstrap$()>();
v3 = interfaceinvoke v1.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v2);
v4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v5 = staticinvoke <com.novell.ldapchai.cr.Answer$FormatType$unmodifiableList__2: java.util.function.Function bootstrap$()>();
v6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector collectingAndThen(java.util.stream.Collector,java.util.function.Function)>(v4, v5);
v7 = interfaceinvoke v3.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v6);
return v7;
}
private static com.novell.ldapchai.cr.Answer$FormatType[] $values()
{
com.novell.ldapchai.cr.Answer$FormatType v1, v10, v11, v12, v13, v2, v3, v4, v5, v6, v7, v8, v9;
com.novell.ldapchai.cr.Answer$FormatType[] v0;
v0 = newarray (com.novell.ldapchai.cr.Answer$FormatType)[13];
v1 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType TEXT>;
v0[0] = v1;
v2 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType MD5>;
v0[1] = v2;
v3 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType SHA1>;
v0[2] = v3;
v4 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType SHA1_SALT>;
v0[3] = v4;
v5 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType SHA256_SALT>;
v0[4] = v5;
v6 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType SHA512_SALT>;
v0[5] = v6;
v7 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType BCRYPT>;
v0[6] = v7;
v8 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType SCRYPT>;
v0[7] = v8;
v9 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType PBKDF2>;
v0[8] = v9;
v10 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType PBKDF2_SHA256>;
v0[9] = v10;
v11 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType PBKDF2_SHA512>;
v0[10] = v11;
v12 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType HELPDESK>;
v0[11] = v12;
v13 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType NMAS>;
v0[12] = v13;
return v0;
}
static void <clinit>()
{
com.novell.ldapchai.cr.TextAnswer$TextAnswerFactory v1;
com.novell.ldapchai.cr.Answer$FormatType[] v50;
com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory v32, v36, v40;
com.novell.ldapchai.cr.Answer$FormatType v0, v11, v15, v19, v23, v27, v3, v31, v35, v39, v43, v46, v7;
com.novell.ldapchai.cr.PasswordCryptAnswer$PasswordCryptAnswerFactory v24, v28;
int v48, v49;
com.novell.ldapchai.cr.ChaiHelpdeskAnswer$ChaiHelpdeskAnswerFactory v44;
com.novell.ldapchai.cr.Answer$FormatType$Flag v10, v14, v18, v22, v26, v30, v34, v38, v42, v6;
com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory v12, v16, v20, v4, v8;
com.novell.ldapchai.cr.Answer$FormatType$Flag[] v13, v17, v2, v21, v25, v29, v33, v37, v41, v45, v47, v5, v9;
v0 = new com.novell.ldapchai.cr.Answer$FormatType;
v1 = new com.novell.ldapchai.cr.TextAnswer$TextAnswerFactory;
specialinvoke v1.<com.novell.ldapchai.cr.TextAnswer$TextAnswerFactory: void <init>()>();
v2 = newarray (com.novell.ldapchai.cr.Answer$FormatType$Flag)[0];
specialinvoke v0.<com.novell.ldapchai.cr.Answer$FormatType: void <init>(java.lang.String,int,com.novell.ldapchai.cr.Answer$ImplementationFactory,int,int,com.novell.ldapchai.cr.Answer$FormatType$Flag[])>("TEXT", 0, v1, 0, 0, v2);
<com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType TEXT> = v0;
v3 = new com.novell.ldapchai.cr.Answer$FormatType;
v4 = new com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory;
specialinvoke v4.<com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory: void <init>()>();
v5 = newarray (com.novell.ldapchai.cr.Answer$FormatType$Flag)[1];
v6 = <com.novell.ldapchai.cr.Answer$FormatType$Flag: com.novell.ldapchai.cr.Answer$FormatType$Flag HashThreadingEligible>;
v5[0] = v6;
specialinvoke v3.<com.novell.ldapchai.cr.Answer$FormatType: void <init>(java.lang.String,int,com.novell.ldapchai.cr.Answer$ImplementationFactory,int,int,com.novell.ldapchai.cr.Answer$FormatType$Flag[])>("MD5", 1, v4, 0, 2000000, v5);
<com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType MD5> = v3;
v7 = new com.novell.ldapchai.cr.Answer$FormatType;
v8 = new com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory;
specialinvoke v8.<com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory: void <init>()>();
v9 = newarray (com.novell.ldapchai.cr.Answer$FormatType$Flag)[1];
v10 = <com.novell.ldapchai.cr.Answer$FormatType$Flag: com.novell.ldapchai.cr.Answer$FormatType$Flag HashThreadingEligible>;
v9[0] = v10;
specialinvoke v7.<com.novell.ldapchai.cr.Answer$FormatType: void <init>(java.lang.String,int,com.novell.ldapchai.cr.Answer$ImplementationFactory,int,int,com.novell.ldapchai.cr.Answer$FormatType$Flag[])>("SHA1", 2, v8, 0, 2000000, v9);
<com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType SHA1> = v7;
v11 = new com.novell.ldapchai.cr.Answer$FormatType;
v12 = new com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory;
specialinvoke v12.<com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory: void <init>()>();
v13 = newarray (com.novell.ldapchai.cr.Answer$FormatType$Flag)[1];
v14 = <com.novell.ldapchai.cr.Answer$FormatType$Flag: com.novell.ldapchai.cr.Answer$FormatType$Flag HashThreadingEligible>;
v13[0] = v14;
specialinvoke v11.<com.novell.ldapchai.cr.Answer$FormatType: void <init>(java.lang.String,int,com.novell.ldapchai.cr.Answer$ImplementationFactory,int,int,com.novell.ldapchai.cr.Answer$FormatType$Flag[])>("SHA1_SALT", 3, v12, 32, 2000000, v13);
<com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType SHA1_SALT> = v11;
v15 = new com.novell.ldapchai.cr.Answer$FormatType;
v16 = new com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory;
specialinvoke v16.<com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory: void <init>()>();
v17 = newarray (com.novell.ldapchai.cr.Answer$FormatType$Flag)[1];
v18 = <com.novell.ldapchai.cr.Answer$FormatType$Flag: com.novell.ldapchai.cr.Answer$FormatType$Flag HashThreadingEligible>;
v17[0] = v18;
specialinvoke v15.<com.novell.ldapchai.cr.Answer$FormatType: void <init>(java.lang.String,int,com.novell.ldapchai.cr.Answer$ImplementationFactory,int,int,com.novell.ldapchai.cr.Answer$FormatType$Flag[])>("SHA256_SALT", 4, v16, 32, 2000000, v17);
<com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType SHA256_SALT> = v15;
v19 = new com.novell.ldapchai.cr.Answer$FormatType;
v20 = new com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory;
specialinvoke v20.<com.novell.ldapchai.cr.HashSaltAnswer$HashSaltAnswerFactory: void <init>()>();
v21 = newarray (com.novell.ldapchai.cr.Answer$FormatType$Flag)[1];
v22 = <com.novell.ldapchai.cr.Answer$FormatType$Flag: com.novell.ldapchai.cr.Answer$FormatType$Flag HashThreadingEligible>;
v21[0] = v22;
specialinvoke v19.<com.novell.ldapchai.cr.Answer$FormatType: void <init>(java.lang.String,int,com.novell.ldapchai.cr.Answer$ImplementationFactory,int,int,com.novell.ldapchai.cr.Answer$FormatType$Flag[])>("SHA512_SALT", 5, v20, 32, 2000000, v21);
<com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType SHA512_SALT> = v19;
v23 = new com.novell.ldapchai.cr.Answer$FormatType;
v24 = new com.novell.ldapchai.cr.PasswordCryptAnswer$PasswordCryptAnswerFactory;
specialinvoke v24.<com.novell.ldapchai.cr.PasswordCryptAnswer$PasswordCryptAnswerFactory: void <init>()>();
v25 = newarray (com.novell.ldapchai.cr.Answer$FormatType$Flag)[1];
v26 = <com.novell.ldapchai.cr.Answer$FormatType$Flag: com.novell.ldapchai.cr.Answer$FormatType$Flag HashThreadingEligible>;
v25[0] = v26;
specialinvoke v23.<com.novell.ldapchai.cr.Answer$FormatType: void <init>(java.lang.String,int,com.novell.ldapchai.cr.Answer$ImplementationFactory,int,int,com.novell.ldapchai.cr.Answer$FormatType$Flag[])>("BCRYPT", 6, v24, 16, 15, v25);
<com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType BCRYPT> = v23;
v27 = new com.novell.ldapchai.cr.Answer$FormatType;
v28 = new com.novell.ldapchai.cr.PasswordCryptAnswer$PasswordCryptAnswerFactory;
specialinvoke v28.<com.novell.ldapchai.cr.PasswordCryptAnswer$PasswordCryptAnswerFactory: void <init>()>();
v29 = newarray (com.novell.ldapchai.cr.Answer$FormatType$Flag)[1];
v30 = <com.novell.ldapchai.cr.Answer$FormatType$Flag: com.novell.ldapchai.cr.Answer$FormatType$Flag HashThreadingEligible>;
v29[0] = v30;
specialinvoke v27.<com.novell.ldapchai.cr.Answer$FormatType: void <init>(java.lang.String,int,com.novell.ldapchai.cr.Answer$ImplementationFactory,int,int,com.novell.ldapchai.cr.Answer$FormatType$Flag[])>("SCRYPT", 7, v28, 32, 16384, v29);
<com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType SCRYPT> = v27;
v31 = new com.novell.ldapchai.cr.Answer$FormatType;
v32 = new com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory;
specialinvoke v32.<com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory: void <init>()>();
v33 = newarray (com.novell.ldapchai.cr.Answer$FormatType$Flag)[1];
v34 = <com.novell.ldapchai.cr.Answer$FormatType$Flag: com.novell.ldapchai.cr.Answer$FormatType$Flag HashThreadingEligible>;
v33[0] = v34;
specialinvoke v31.<com.novell.ldapchai.cr.Answer$FormatType: void <init>(java.lang.String,int,com.novell.ldapchai.cr.Answer$ImplementationFactory,int,int,com.novell.ldapchai.cr.Answer$FormatType$Flag[])>("PBKDF2", 8, v32, 32, 500000, v33);
<com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType PBKDF2> = v31;
v35 = new com.novell.ldapchai.cr.Answer$FormatType;
v36 = new com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory;
specialinvoke v36.<com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory: void <init>()>();
v37 = newarray (com.novell.ldapchai.cr.Answer$FormatType$Flag)[1];
v38 = <com.novell.ldapchai.cr.Answer$FormatType$Flag: com.novell.ldapchai.cr.Answer$FormatType$Flag HashThreadingEligible>;
v37[0] = v38;
specialinvoke v35.<com.novell.ldapchai.cr.Answer$FormatType: void <init>(java.lang.String,int,com.novell.ldapchai.cr.Answer$ImplementationFactory,int,int,com.novell.ldapchai.cr.Answer$FormatType$Flag[])>("PBKDF2_SHA256", 9, v36, 32, 500000, v37);
<com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType PBKDF2_SHA256> = v35;
v39 = new com.novell.ldapchai.cr.Answer$FormatType;
v40 = new com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory;
specialinvoke v40.<com.novell.ldapchai.cr.PBKDF2Answer$PKDBF2AnswerFactory: void <init>()>();
v41 = newarray (com.novell.ldapchai.cr.Answer$FormatType$Flag)[1];
v42 = <com.novell.ldapchai.cr.Answer$FormatType$Flag: com.novell.ldapchai.cr.Answer$FormatType$Flag HashThreadingEligible>;
v41[0] = v42;
specialinvoke v39.<com.novell.ldapchai.cr.Answer$FormatType: void <init>(java.lang.String,int,com.novell.ldapchai.cr.Answer$ImplementationFactory,int,int,com.novell.ldapchai.cr.Answer$FormatType$Flag[])>("PBKDF2_SHA512", 10, v40, 32, 500000, v41);
<com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType PBKDF2_SHA512> = v39;
v43 = new com.novell.ldapchai.cr.Answer$FormatType;
v44 = new com.novell.ldapchai.cr.ChaiHelpdeskAnswer$ChaiHelpdeskAnswerFactory;
specialinvoke v44.<com.novell.ldapchai.cr.ChaiHelpdeskAnswer$ChaiHelpdeskAnswerFactory: void <init>()>();
v45 = newarray (com.novell.ldapchai.cr.Answer$FormatType$Flag)[0];
specialinvoke v43.<com.novell.ldapchai.cr.Answer$FormatType: void <init>(java.lang.String,int,com.novell.ldapchai.cr.Answer$ImplementationFactory,int,int,com.novell.ldapchai.cr.Answer$FormatType$Flag[])>("HELPDESK", 11, v44, 0, 0, v45);
<com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType HELPDESK> = v43;
v46 = new com.novell.ldapchai.cr.Answer$FormatType;
v47 = newarray (com.novell.ldapchai.cr.Answer$FormatType$Flag)[0];
v48 = (int) -1;
v49 = (int) -1;
specialinvoke v46.<com.novell.ldapchai.cr.Answer$FormatType: void <init>(java.lang.String,int,com.novell.ldapchai.cr.Answer$ImplementationFactory,int,int,com.novell.ldapchai.cr.Answer$FormatType$Flag[])>("NMAS", 12, null, v48, v49, v47);
<com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType NMAS> = v46;
v50 = staticinvoke <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType[] $values()>();
<com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType[] $VALUES> = v50;
return;
}
}