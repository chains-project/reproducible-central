class com.novell.ldapchai.cr.ChaiHelpdeskAnswer extends java.lang.Object implements com.novell.ldapchai.cr.HelpdeskAnswer
{
private final java.lang.String challengeText;
private final java.lang.String answer;
private final boolean caseInsensitive;
void <init>(java.lang.String, java.lang.String, boolean)
{
com.novell.ldapchai.cr.ChaiHelpdeskAnswer v0;
java.lang.String v1, v2;
java.lang.IllegalArgumentException v5;
boolean v3, v4;
v0 := @this: com.novell.ldapchai.cr.ChaiHelpdeskAnswer;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: boolean isEmpty(java.lang.CharSequence)>(v1);
if v4 == 0 goto label1;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("missing answer text");
throw v5;
label1:
v0.<com.novell.ldapchai.cr.ChaiHelpdeskAnswer: java.lang.String answer> = v1;
v0.<com.novell.ldapchai.cr.ChaiHelpdeskAnswer: java.lang.String challengeText> = v2;
v0.<com.novell.ldapchai.cr.ChaiHelpdeskAnswer: boolean caseInsensitive> = v3;
return;
}
public java.lang.String answerText()
{
java.lang.String v1;
com.novell.ldapchai.cr.ChaiHelpdeskAnswer v0;
v0 := @this: com.novell.ldapchai.cr.ChaiHelpdeskAnswer;
v1 = v0.<com.novell.ldapchai.cr.ChaiHelpdeskAnswer: java.lang.String answer>;
return v1;
}
public org.jrivard.xmlchai.XmlElement toXml() throws com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.cr.Answer$FormatType v6;
org.jrivard.xmlchai.XmlElement v2;
com.novell.ldapchai.cr.ChaiHelpdeskAnswer v0;
java.lang.String v3, v4, v5, v7;
org.jrivard.xmlchai.XmlFactory v1;
v0 := @this: com.novell.ldapchai.cr.ChaiHelpdeskAnswer;
v1 = staticinvoke <org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlFactory getFactory()>();
v2 = interfaceinvoke v1.<org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlElement newElement(java.lang.String)>("answer");
v3 = v0.<com.novell.ldapchai.cr.ChaiHelpdeskAnswer: java.lang.String answer>;
v4 = v0.<com.novell.ldapchai.cr.ChaiHelpdeskAnswer: java.lang.String challengeText>;
v5 = staticinvoke <com.novell.ldapchai.cr.ChaiHelpdeskAnswer: java.lang.String encryptValue(java.lang.String,java.lang.String)>(v3, v4);
interfaceinvoke v2.<org.jrivard.xmlchai.XmlElement: void setText(java.lang.String)>(v5);
v6 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType HELPDESK>;
v7 = virtualinvoke v6.<com.novell.ldapchai.cr.Answer$FormatType: java.lang.String toString()>();
interfaceinvoke v2.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("format", v7);
return v2;
}
public boolean testAnswer(java.lang.String)
{
com.novell.ldapchai.cr.ChaiHelpdeskAnswer v0;
java.lang.String v1, v3, v5;
boolean v2, v4;
v0 := @this: com.novell.ldapchai.cr.ChaiHelpdeskAnswer;
v1 := @parameter0: java.lang.String;
if v1 != null goto label1;
return 0;
label1:
v2 = v0.<com.novell.ldapchai.cr.ChaiHelpdeskAnswer: boolean caseInsensitive>;
if v2 == 0 goto label2;
v3 = v0.<com.novell.ldapchai.cr.ChaiHelpdeskAnswer: java.lang.String answer>;
v4 = virtualinvoke v1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v3);
goto label3;
label2:
v5 = v0.<com.novell.ldapchai.cr.ChaiHelpdeskAnswer: java.lang.String answer>;
v4 = virtualinvoke v1.<java.lang.String: boolean equals(java.lang.Object)>(v5);
label3:
return v4;
}
private static java.lang.String encryptValue(java.lang.String, java.lang.String) throws com.novell.ldapchai.exception.ChaiOperationException
{
byte[] v7, v8;
com.novell.ldapchai.util.internal.StringHelper$Base64Options[] v9;
javax.crypto.Cipher v4;
java.nio.charset.Charset v6;
int v2;
java.lang.String v0, v1, v12, v14, v15;
com.novell.ldapchai.exception.ChaiOperationException v16;
com.novell.ldapchai.exception.ChaiError v17;
java.lang.Exception v13;
java.security.AlgorithmParameters v5;
com.novell.ldapchai.util.internal.StringHelper$Base64Options v10, v11;
javax.crypto.SecretKey v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
label1:
if v0 == null goto label2;
v2 = virtualinvoke v0.<java.lang.String: int length()>();
if v2 >= 1 goto label3;
label2:
return "";
label3:
v3 = staticinvoke <com.novell.ldapchai.cr.ChaiHelpdeskAnswer: javax.crypto.SecretKey makeKey(java.lang.String)>(v1);
v4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES");
v5 = virtualinvoke v4.<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()>();
virtualinvoke v4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>(1, v3, v5);
v6 = <com.novell.ldapchai.cr.ChaiCrFactory: java.nio.charset.Charset DEFAULT_CHARSET>;
v7 = virtualinvoke v0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v6);
v8 = virtualinvoke v4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(v7);
v9 = newarray (com.novell.ldapchai.util.internal.StringHelper$Base64Options)[2];
v10 = <com.novell.ldapchai.util.internal.StringHelper$Base64Options: com.novell.ldapchai.util.internal.StringHelper$Base64Options URL_SAFE>;
v9[0] = v10;
v11 = <com.novell.ldapchai.util.internal.StringHelper$Base64Options: com.novell.ldapchai.util.internal.StringHelper$Base64Options GZIP>;
v9[1] = v11;
v12 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: java.lang.String base64Encode(byte[],com.novell.ldapchai.util.internal.StringHelper$Base64Options[])>(v8, v9);
label4:
return v12;
label5:
v13 := @caughtexception;
v14 = virtualinvoke v13.<java.lang.Exception: java.lang.String getMessage()>();
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unexpected error performing helpdesk answer crypt operation: \u0001");
v16 = new com.novell.ldapchai.exception.ChaiOperationException;
v17 = <com.novell.ldapchai.exception.ChaiError: com.novell.ldapchai.exception.ChaiError CHAI_INTERNAL_ERROR>;
specialinvoke v16.<com.novell.ldapchai.exception.ChaiOperationException: void <init>(java.lang.String,com.novell.ldapchai.exception.ChaiError,java.lang.Throwable)>(v15, v17, v13);
throw v16;
catch java.lang.Exception from label1 to label2 with label5;
catch java.lang.Exception from label3 to label4 with label5;
}
private static java.lang.String decryptValue(java.lang.String, java.lang.String)
{
byte[] v7, v9;
com.novell.ldapchai.util.internal.StringHelper$Base64Options[] v4;
javax.crypto.Cipher v8;
java.nio.charset.Charset v11;
int v2;
java.lang.String v0, v1, v10, v13, v14;
java.lang.IllegalArgumentException v15;
java.lang.Exception v12;
com.novell.ldapchai.util.internal.StringHelper$Base64Options v5, v6;
javax.crypto.SecretKey v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
label1:
if v0 == null goto label2;
v2 = virtualinvoke v0.<java.lang.String: int length()>();
if v2 >= 1 goto label3;
label2:
return "";
label3:
v3 = staticinvoke <com.novell.ldapchai.cr.ChaiHelpdeskAnswer: javax.crypto.SecretKey makeKey(java.lang.String)>(v1);
v4 = newarray (com.novell.ldapchai.util.internal.StringHelper$Base64Options)[2];
v5 = <com.novell.ldapchai.util.internal.StringHelper$Base64Options: com.novell.ldapchai.util.internal.StringHelper$Base64Options URL_SAFE>;
v4[0] = v5;
v6 = <com.novell.ldapchai.util.internal.StringHelper$Base64Options: com.novell.ldapchai.util.internal.StringHelper$Base64Options GZIP>;
v4[1] = v6;
v7 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: byte[] base64Decode(java.lang.CharSequence,com.novell.ldapchai.util.internal.StringHelper$Base64Options[])>(v0, v4);
v8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES");
virtualinvoke v8.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, v3);
v9 = virtualinvoke v8.<javax.crypto.Cipher: byte[] doFinal(byte[])>(v7);
v10 = new java.lang.String;
v11 = <com.novell.ldapchai.cr.ChaiCrFactory: java.nio.charset.Charset DEFAULT_CHARSET>;
specialinvoke v10.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(v9, v11);
label4:
return v10;
label5:
v12 := @caughtexception;
v13 = virtualinvoke v12.<java.lang.Exception: java.lang.String getMessage()>();
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unexpected error performing helpdesk answer decrypt operation: \u0001");
v15 = new java.lang.IllegalArgumentException;
specialinvoke v15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v14);
throw v15;
catch java.lang.Exception from label1 to label2 with label5;
catch java.lang.Exception from label3 to label4 with label5;
}
private static javax.crypto.SecretKey makeKey(java.lang.String) throws java.security.NoSuchAlgorithmException, java.io.UnsupportedEncodingException
{
byte[] v2, v4, v5;
java.security.MessageDigest v1;
int v3;
javax.crypto.spec.SecretKeySpec v6;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA1");
v2 = virtualinvoke v0.<java.lang.String: byte[] getBytes(java.lang.String)>("iso-8859-1");
v3 = virtualinvoke v0.<java.lang.String: int length()>();
virtualinvoke v1.<java.security.MessageDigest: void update(byte[],int,int)>(v2, 0, v3);
v4 = newarray (byte)[16];
v5 = virtualinvoke v1.<java.security.MessageDigest: byte[] digest()>();
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v5, 0, v4, 0, 16);
v6 = new javax.crypto.spec.SecretKeySpec;
specialinvoke v6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(v4, "AES");
return v6;
}
public com.novell.ldapchai.cr.bean.AnswerBean asAnswerBean()
{
com.novell.ldapchai.cr.Answer$FormatType v2;
com.novell.ldapchai.cr.ChaiHelpdeskAnswer v0;
com.novell.ldapchai.cr.bean.AnswerBean v1;
java.lang.String v3;
v0 := @this: com.novell.ldapchai.cr.ChaiHelpdeskAnswer;
v1 = new com.novell.ldapchai.cr.bean.AnswerBean;
v2 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType HELPDESK>;
v3 = v0.<com.novell.ldapchai.cr.ChaiHelpdeskAnswer: java.lang.String answer>;
specialinvoke v1.<com.novell.ldapchai.cr.bean.AnswerBean: void <init>(com.novell.ldapchai.cr.Answer$FormatType,java.lang.String,java.lang.String,java.lang.String,int,boolean)>(v2, v3, null, null, 0, 0);
return v1;
}
}