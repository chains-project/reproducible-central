class com.novell.ldapchai.cr.ChaiResponseSet$ChaiResponseXmlParser extends java.lang.Object
{
void <init>()
{
com.novell.ldapchai.cr.ChaiResponseSet$ChaiResponseXmlParser v0;
v0 := @this: com.novell.ldapchai.cr.ChaiResponseSet$ChaiResponseXmlParser;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static com.novell.ldapchai.cr.ChaiResponseSet parseChaiResponseSetXML(java.lang.String) throws com.novell.ldapchai.exception.ChaiValidationException, com.novell.ldapchai.exception.ChaiOperationException
{
org.jrivard.xmlchai.XmlDocument v9;
com.novell.ldapchai.cr.Challenge v29, v39;
java.util.Locale v48;
com.novell.ldapchai.cr.AbstractResponseSet$STATE v50;
java.text.ParseException v22;
boolean v20, v27, v37, v5;
java.time.Instant v6;
java.util.List v25, v35;
java.util.Optional v11, v13, v15, v17, v19, v30, v40;
com.novell.ldapchai.util.internal.ChaiLogger v23, v46;
com.novell.ldapchai.cr.Answer v34, v44;
java.util.function.Supplier v24, v31, v41, v47;
org.jrivard.xmlchai.XmlElement v10;
org.jrivard.xmlchai.AccessMode v8;
java.util.LinkedHashMap v2, v3;
int v1, v4;
java.lang.String v0, v33, v43;
org.jrivard.xmlchai.XmlFactory v7;
java.util.Iterator v26, v36;
java.io.IOException v45;
com.novell.ldapchai.cr.ChaiResponseSet v49;
java.lang.Object v12, v14, v16, v18, v21, v28, v32, v38, v42;
v0 := @parameter0: java.lang.String;
if v0 == null goto label01;
v1 = virtualinvoke v0.<java.lang.String: int length()>();
if v1 >= 1 goto label02;
label01:
return null;
label02:
v2 = new java.util.LinkedHashMap;
specialinvoke v2.<java.util.LinkedHashMap: void <init>()>();
v3 = new java.util.LinkedHashMap;
specialinvoke v3.<java.util.LinkedHashMap: void <init>()>();
v4 = 0;
v5 = 0;
v6 = null;
label03:
v7 = staticinvoke <org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlFactory getFactory()>();
v8 = <org.jrivard.xmlchai.AccessMode: org.jrivard.xmlchai.AccessMode IMMUTABLE>;
v9 = interfaceinvoke v7.<org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlDocument parseString(java.lang.String,org.jrivard.xmlchai.AccessMode)>(v0, v8);
v10 = interfaceinvoke v9.<org.jrivard.xmlchai.XmlDocument: org.jrivard.xmlchai.XmlElement getRootElement()>();
v11 = interfaceinvoke v10.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("minRandomRequired");
v12 = virtualinvoke v11.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("0");
v4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v12);
v13 = interfaceinvoke v10.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("locale");
v14 = virtualinvoke v13.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);
v15 = interfaceinvoke v10.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("caseInsensitive");
v16 = virtualinvoke v15.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("false");
v5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(v16);
v17 = interfaceinvoke v10.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("challengeSetID");
v18 = virtualinvoke v17.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);
v19 = interfaceinvoke v10.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("time");
v20 = virtualinvoke v19.<java.util.Optional: boolean isPresent()>();
if v20 == 0 goto label07;
label04:
v21 = virtualinvoke v19.<java.util.Optional: java.lang.Object get()>();
v6 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet: java.time.Instant parseInstant(java.lang.String)>(v21);
label05:
goto label07;
label06:
v22 := @caughtexception;
v23 = <com.novell.ldapchai.cr.ChaiResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v24 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet$ChaiResponseXmlParser$lambda_parseChaiResponseSetXML_0__19: java.util.function.Supplier bootstrap$(java.text.ParseException)>(v22);
virtualinvoke v23.<com.novell.ldapchai.util.internal.ChaiLogger: void error(java.util.function.Supplier)>(v24);
label07:
v25 = interfaceinvoke v10.<org.jrivard.xmlchai.XmlElement: java.util.List getChildren(java.lang.String)>("response");
v26 = interfaceinvoke v25.<java.util.List: java.util.Iterator iterator()>();
label08:
v27 = interfaceinvoke v26.<java.util.Iterator: boolean hasNext()>();
if v27 == 0 goto label09;
v28 = interfaceinvoke v26.<java.util.Iterator: java.lang.Object next()>();
v29 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet$ChaiResponseXmlParser: com.novell.ldapchai.cr.Challenge parseResponseElement(org.jrivard.xmlchai.XmlElement)>(v28);
v30 = interfaceinvoke v28.<org.jrivard.xmlchai.XmlElement: java.util.Optional getChild(java.lang.String)>("answer");
v31 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet$ChaiResponseXmlParser$lambda_parseChaiResponseSetXML_1__17: java.util.function.Supplier bootstrap$()>();
v32 = virtualinvoke v30.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>(v31);
v33 = interfaceinvoke v29.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
v34 = staticinvoke <com.novell.ldapchai.cr.AnswerFactory: com.novell.ldapchai.cr.Answer fromXml(org.jrivard.xmlchai.XmlElement,boolean,java.lang.String)>(v32, v5, v33);
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v29, v34);
goto label08;
label09:
v35 = interfaceinvoke v10.<org.jrivard.xmlchai.XmlElement: java.util.List getChildren(java.lang.String)>("helpdesk-response");
v36 = interfaceinvoke v35.<java.util.List: java.util.Iterator iterator()>();
label10:
v37 = interfaceinvoke v36.<java.util.Iterator: boolean hasNext()>();
if v37 == 0 goto label12;
v38 = interfaceinvoke v36.<java.util.Iterator: java.lang.Object next()>();
v39 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet$ChaiResponseXmlParser: com.novell.ldapchai.cr.Challenge parseResponseElement(org.jrivard.xmlchai.XmlElement)>(v38);
v40 = interfaceinvoke v38.<org.jrivard.xmlchai.XmlElement: java.util.Optional getChild(java.lang.String)>("answer");
v41 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet$ChaiResponseXmlParser$lambda_parseChaiResponseSetXML_2__16: java.util.function.Supplier bootstrap$()>();
v42 = virtualinvoke v40.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>(v41);
v43 = interfaceinvoke v39.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
v44 = staticinvoke <com.novell.ldapchai.cr.AnswerFactory: com.novell.ldapchai.cr.Answer fromXml(org.jrivard.xmlchai.XmlElement,boolean,java.lang.String)>(v42, v5, v43);
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v39, v44);
goto label10;
label11:
v45 := @caughtexception;
v46 = <com.novell.ldapchai.cr.ChaiResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v47 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet$ChaiResponseXmlParser$lambda_parseChaiResponseSetXML_3__18: java.util.function.Supplier bootstrap$(java.io.IOException)>(v45);
virtualinvoke v46.<com.novell.ldapchai.util.internal.ChaiLogger: void debug(java.util.function.Supplier)>(v47);
label12:
v48 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();
if v14 == null goto label13;
v48 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet: java.util.Locale parseLocaleString(java.lang.String)>(v14);
label13:
v49 = new com.novell.ldapchai.cr.ChaiResponseSet;
v50 = <com.novell.ldapchai.cr.AbstractResponseSet$STATE: com.novell.ldapchai.cr.AbstractResponseSet$STATE READ>;
specialinvoke v49.<com.novell.ldapchai.cr.ChaiResponseSet: void <init>(java.util.Map,java.util.Map,java.util.Locale,int,com.novell.ldapchai.cr.AbstractResponseSet$STATE,boolean,java.lang.String,java.time.Instant)>(v2, v3, v48, v4, v50, v5, v18, v6);
return v49;
catch java.text.ParseException from label04 to label05 with label06;
catch java.io.IOException from label03 to label11 with label11;
}
private static com.novell.ldapchai.cr.Challenge parseResponseElement(org.jrivard.xmlchai.XmlElement)
{
com.novell.ldapchai.cr.ChaiChallenge v19;
java.util.function.Supplier v11, v8;
org.jrivard.xmlchai.XmlElement v0;
int v15, v18;
boolean v3, v6;
java.util.Optional v1, v10, v13, v16, v4, v7;
java.lang.Object v12, v14, v17, v2, v5, v9;
v0 := @parameter0: org.jrivard.xmlchai.XmlElement;
v1 = interfaceinvoke v0.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("required");
v2 = virtualinvoke v1.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("");
v3 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(v2);
v4 = interfaceinvoke v0.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("adminDefined");
v5 = virtualinvoke v4.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("");
v6 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(v5);
v7 = interfaceinvoke v0.<org.jrivard.xmlchai.XmlElement: java.util.Optional getChild(java.lang.String)>("challenge");
v8 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet$ChaiResponseXmlParser$lambda_parseResponseElement_4__20: java.util.function.Supplier bootstrap$()>();
v9 = virtualinvoke v7.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>(v8);
v10 = interfaceinvoke v9.<org.jrivard.xmlchai.XmlElement: java.util.Optional getText()>();
v11 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet$ChaiResponseXmlParser$lambda_parseResponseElement_5__21: java.util.function.Supplier bootstrap$()>();
v12 = virtualinvoke v10.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>(v11);
v13 = interfaceinvoke v0.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("minLength");
v14 = virtualinvoke v13.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("0");
v15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v14);
v16 = interfaceinvoke v0.<org.jrivard.xmlchai.XmlElement: java.util.Optional getAttribute(java.lang.String)>("maxLength");
v17 = virtualinvoke v16.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("0");
v18 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v17);
v19 = new com.novell.ldapchai.cr.ChaiChallenge;
specialinvoke v19.<com.novell.ldapchai.cr.ChaiChallenge: void <init>(boolean,java.lang.String,int,int,boolean,int,boolean)>(v3, v12, v15, v18, v6, 0, 0);
return v19;
}
}