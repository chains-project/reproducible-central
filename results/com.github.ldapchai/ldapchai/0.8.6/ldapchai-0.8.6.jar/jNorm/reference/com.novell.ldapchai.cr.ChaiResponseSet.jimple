public class com.novell.ldapchai.cr.ChaiResponseSet extends com.novell.ldapchai.cr.AbstractResponseSet
{
private static final com.novell.ldapchai.util.internal.ChaiLogger LOGGER;
static final java.lang.String SALT_CHARS;
static final java.lang.String XML_NODE_ROOT;
static final java.lang.String XML_ATTRIBUTE_MIN_RANDOM_REQUIRED;
static final java.lang.String XML_ATTRIBUTE_LOCALE;
static final java.lang.String XML_NODE_RESPONSE;
static final java.lang.String XML_NODE_HELPDESK_RESPONSE;
static final java.lang.String XML_NODE_CHALLENGE;
static final java.lang.String XML_NODE_ANSWER_VALUE;
static final java.lang.String XML_ATTRIBUTE_VERSION;
static final java.lang.String XML_ATTRIBUTE_CHAI_VERSION;
static final java.lang.String XML_ATTRIBUTE_ADMIN_DEFINED;
static final java.lang.String XML_ATTRIBUTE_REQUIRED;
static final java.lang.String XML_ATTRIBUTE_HASH_COUNT;
static final java.lang.String XML_ATTRIBUTE_CONTENT_FORMAT;
static final java.lang.String XML_ATTRIBUTE_SALT;
static final java.lang.String XNL_ATTRIBUTE_MIN_LENGTH;
static final java.lang.String XNL_ATTRIBUTE_MAX_LENGTH;
static final java.lang.String XML_ATTRIBUTE_CASE_INSENSITIVE;
static final java.lang.String XML_ATTRIBUTE_CHALLENGE_SET_IDENTIFER;
static final java.lang.String XML_ATTRIBUTE_TIMESTAMP;
static final java.lang.String VALUE_VERSION;
private final boolean caseInsensitive;
static com.novell.ldapchai.cr.ChaiResponseSet readUserResponseSet(com.novell.ldapchai.ChaiUser) throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiValidationException, com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.ChaiUser v0;
com.novell.ldapchai.provider.ChaiConfiguration v2, v6;
com.novell.ldapchai.cr.ChaiResponseSet v13;
com.novell.ldapchai.provider.ChaiSetting v3, v7;
com.novell.ldapchai.provider.ChaiProvider v1, v5;
java.util.List v9;
java.lang.Object v12;
java.lang.String v10, v4, v8;
boolean v11;
v0 := @parameter0: com.novell.ldapchai.ChaiUser;
v1 = interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
v2 = interfaceinvoke v1.<com.novell.ldapchai.provider.ChaiProvider: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v3 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting CR_CHAI_STORAGE_RECORD_ID>;
v4 = virtualinvoke v2.<com.novell.ldapchai.provider.ChaiConfiguration: java.lang.String getSetting(com.novell.ldapchai.provider.ChaiSetting)>(v3);
v5 = interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
v6 = interfaceinvoke v5.<com.novell.ldapchai.provider.ChaiProvider: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v7 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting CR_CHAI_STORAGE_ATTRIBUTE>;
v8 = virtualinvoke v6.<com.novell.ldapchai.provider.ChaiConfiguration: java.lang.String getSetting(com.novell.ldapchai.provider.ChaiSetting)>(v7);
v9 = staticinvoke <com.novell.ldapchai.util.ConfigObjectRecord: java.util.List readRecordFromLDAP(com.novell.ldapchai.ChaiEntry,java.lang.String,java.lang.String,java.util.Set,java.util.Set)>(v0, v8, v4, null, null);
v10 = "";
v11 = interfaceinvoke v9.<java.util.List: boolean isEmpty()>();
if v11 != 0 goto label1;
v12 = interfaceinvoke v9.<java.util.List: java.lang.Object get(int)>(0);
v10 = virtualinvoke v12.<com.novell.ldapchai.util.ConfigObjectRecord: java.lang.String getPayload()>();
label1:
v13 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet$ChaiResponseXmlParser: com.novell.ldapchai.cr.ChaiResponseSet parseChaiResponseSetXML(java.lang.String)>(v10);
if v13 != null goto label2;
return null;
label2:
return v13;
}
void <init>(java.util.Map, java.util.Map, java.util.Locale, int, com.novell.ldapchai.cr.AbstractResponseSet$STATE, boolean, java.lang.String, java.time.Instant) throws com.novell.ldapchai.exception.ChaiValidationException
{
com.novell.ldapchai.cr.ChaiResponseSet v0;
java.time.Instant v8;
java.util.Locale v3;
java.util.Map v1, v2;
int v4;
java.lang.String v7;
com.novell.ldapchai.cr.AbstractResponseSet$STATE v5;
boolean v6;
v0 := @this: com.novell.ldapchai.cr.ChaiResponseSet;
v1 := @parameter0: java.util.Map;
v2 := @parameter1: java.util.Map;
v3 := @parameter2: java.util.Locale;
v4 := @parameter3: int;
v5 := @parameter4: com.novell.ldapchai.cr.AbstractResponseSet$STATE;
v6 := @parameter5: boolean;
v7 := @parameter6: java.lang.String;
v8 := @parameter7: java.time.Instant;
specialinvoke v0.<com.novell.ldapchai.cr.AbstractResponseSet: void <init>(java.util.Map,java.util.Map,java.util.Locale,int,com.novell.ldapchai.cr.AbstractResponseSet$STATE,java.lang.String,java.time.Instant)>(v1, v2, v3, v4, v5, v7, v8);
v0.<com.novell.ldapchai.cr.ChaiResponseSet: boolean caseInsensitive> = v6;
return;
}
public java.lang.String toString()
{
java.lang.StringBuilder v1;
com.novell.ldapchai.cr.ChaiResponseSet v0;
java.lang.String v2, v3;
v0 := @this: com.novell.ldapchai.cr.ChaiResponseSet;
v1 = new java.lang.StringBuilder;
v2 = specialinvoke v0.<com.novell.ldapchai.cr.AbstractResponseSet: java.lang.String toString()>();
specialinvoke v1.<java.lang.StringBuilder: void <init>(java.lang.String)>(v2);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", format(");
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
v3 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v3;
}
public java.lang.String stringValue() throws java.lang.UnsupportedOperationException, com.novell.ldapchai.exception.ChaiOperationException
{
java.lang.UnsupportedOperationException v7;
com.novell.ldapchai.cr.ChaiResponseSet v0;
java.util.function.Supplier v6;
java.lang.String v1, v2, v3;
com.novell.ldapchai.exception.ChaiValidationException v4;
com.novell.ldapchai.util.internal.ChaiLogger v5;
v0 := @this: com.novell.ldapchai.cr.ChaiResponseSet;
label1:
v1 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet: java.lang.String rsToChaiXML(com.novell.ldapchai.cr.ChaiResponseSet)>(v0);
v2 = virtualinvoke v1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\r", "");
v3 = virtualinvoke v2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\n", "");
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = <com.novell.ldapchai.cr.ChaiResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v6 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet$lambda_stringValue_0__22: java.util.function.Supplier bootstrap$()>();
virtualinvoke v5.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier,java.lang.Exception)>(v6, v4);
v7 = new java.lang.UnsupportedOperationException;
specialinvoke v7.<java.lang.UnsupportedOperationException: void <init>(java.lang.Throwable)>(v4);
throw v7;
catch com.novell.ldapchai.exception.ChaiValidationException from label1 to label2 with label3;
}
public boolean test(java.util.Map)
{
java.util.function.Supplier v10;
com.novell.ldapchai.cr.ChallengeSet v3;
java.util.Map v1, v12;
int v11, v23, v6;
com.novell.ldapchai.exception.ChaiValidationException v8;
boolean v15, v20, v21, v22, v24, v5;
java.util.Iterator v14;
java.util.Set v13;
com.novell.ldapchai.cr.ChaiResponseSet v0;
java.lang.IllegalArgumentException v2, v7;
java.util.List v4;
java.lang.Object v16, v17, v18, v19;
com.novell.ldapchai.util.internal.ChaiLogger v9;
v0 := @this: com.novell.ldapchai.cr.ChaiResponseSet;
v1 := @parameter0: java.util.Map;
if v1 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("responses required");
throw v2;
label1:
v3 = virtualinvoke v0.<com.novell.ldapchai.cr.ChaiResponseSet: com.novell.ldapchai.cr.ChallengeSet getChallengeSet()>();
v4 = interfaceinvoke v3.<com.novell.ldapchai.cr.ChallengeSet: java.util.List getRequiredChallenges()>();
v5 = interfaceinvoke v4.<java.util.List: boolean isEmpty()>();
if v5 == 0 goto label3;
v6 = v0.<com.novell.ldapchai.cr.ChaiResponseSet: int minimumRandomRequired>;
if v6 != 0 goto label3;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("challenge set does not require any responses");
throw v7;
label2:
v8 := @caughtexception;
v9 = <com.novell.ldapchai.cr.ChaiResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v10 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet$lambda_test_1__23: java.util.function.Supplier bootstrap$()>();
virtualinvoke v9.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier,java.lang.Exception)>(v10, v8);
return 0;
label3:
v11 = 0;
v12 = v0.<com.novell.ldapchai.cr.ChaiResponseSet: java.util.Map crMap>;
v13 = interfaceinvoke v12.<java.util.Map: java.util.Set entrySet()>();
v14 = interfaceinvoke v13.<java.util.Set: java.util.Iterator iterator()>();
label4:
v15 = interfaceinvoke v14.<java.util.Iterator: boolean hasNext()>();
if v15 == 0 goto label6;
v16 = interfaceinvoke v14.<java.util.Iterator: java.lang.Object next()>();
v17 = interfaceinvoke v16.<java.util.Map$Entry: java.lang.Object getKey()>();
v18 = interfaceinvoke v16.<java.util.Map$Entry: java.lang.Object getValue()>();
v19 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v17);
v20 = interfaceinvoke v18.<com.novell.ldapchai.cr.Answer: boolean testAnswer(java.lang.String)>(v19);
if v20 == 0 goto label5;
v21 = interfaceinvoke v17.<com.novell.ldapchai.cr.Challenge: boolean isRequired()>();
if v21 != 0 goto label5;
v11 = v11 + 1;
label5:
if v20 != 0 goto label4;
v22 = interfaceinvoke v17.<com.novell.ldapchai.cr.Challenge: boolean isRequired()>();
if v22 == 0 goto label4;
return 0;
label6:
v23 = v0.<com.novell.ldapchai.cr.ChaiResponseSet: int minimumRandomRequired>;
if v11 < v23 goto label7;
v24 = 1;
goto label8;
label7:
v24 = 0;
label8:
return v24;
catch com.novell.ldapchai.exception.ChaiValidationException from label1 to label2 with label2;
}
boolean write(com.novell.ldapchai.ChaiUser) throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.ChaiUser v1;
java.lang.IllegalStateException v4;
java.util.function.Supplier v19, v22, v27;
java.lang.String v12, v16, v24, v8;
com.novell.ldapchai.cr.AbstractResponseSet$STATE v2, v28, v3;
com.novell.ldapchai.exception.ChaiValidationException v20;
com.novell.ldapchai.exception.ChaiOperationException v17, v23;
boolean v14;
com.novell.ldapchai.provider.ChaiConfiguration v10, v6;
com.novell.ldapchai.cr.ChaiResponseSet v0;
com.novell.ldapchai.provider.ChaiSetting v11, v7;
com.novell.ldapchai.exception.ChaiError v25;
com.novell.ldapchai.provider.ChaiProvider v5, v9;
java.util.List v13;
java.lang.Object v15;
com.novell.ldapchai.util.internal.ChaiLogger v18, v21, v26;
v0 := @this: com.novell.ldapchai.cr.ChaiResponseSet;
v1 := @parameter0: com.novell.ldapchai.ChaiUser;
v2 = v0.<com.novell.ldapchai.cr.ChaiResponseSet: com.novell.ldapchai.cr.AbstractResponseSet$STATE state>;
v3 = <com.novell.ldapchai.cr.AbstractResponseSet$STATE: com.novell.ldapchai.cr.AbstractResponseSet$STATE NEW>;
if v2 == v3 goto label1;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ResponseSet not suitable for writing (not in NEW state)");
throw v4;
label1:
v5 = interfaceinvoke v1.<com.novell.ldapchai.ChaiUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
v6 = interfaceinvoke v5.<com.novell.ldapchai.provider.ChaiProvider: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v7 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting CR_CHAI_STORAGE_ATTRIBUTE>;
v8 = virtualinvoke v6.<com.novell.ldapchai.provider.ChaiConfiguration: java.lang.String getSetting(com.novell.ldapchai.provider.ChaiSetting)>(v7);
v9 = interfaceinvoke v1.<com.novell.ldapchai.ChaiUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
v10 = interfaceinvoke v9.<com.novell.ldapchai.provider.ChaiProvider: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v11 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting CR_CHAI_STORAGE_RECORD_ID>;
v12 = virtualinvoke v10.<com.novell.ldapchai.provider.ChaiConfiguration: java.lang.String getSetting(com.novell.ldapchai.provider.ChaiSetting)>(v11);
label2:
v13 = staticinvoke <com.novell.ldapchai.util.ConfigObjectRecord: java.util.List readRecordFromLDAP(com.novell.ldapchai.ChaiEntry,java.lang.String,java.lang.String,java.util.Set,java.util.Set)>(v1, v8, v12, null, null);
v14 = interfaceinvoke v13.<java.util.List: boolean isEmpty()>();
if v14 != 0 goto label3;
v15 = interfaceinvoke v13.<java.util.List: java.lang.Object get(int)>(0);
goto label4;
label3:
v15 = staticinvoke <com.novell.ldapchai.util.ConfigObjectRecord: com.novell.ldapchai.util.ConfigObjectRecord createNew(com.novell.ldapchai.ChaiEntry,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(v1, v8, v12, null, null);
label4:
v16 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet: java.lang.String rsToChaiXML(com.novell.ldapchai.cr.ChaiResponseSet)>(v0);
virtualinvoke v15.<com.novell.ldapchai.util.ConfigObjectRecord: void updatePayload(java.lang.String)>(v16);
label5:
goto label8;
label6:
v17 := @caughtexception;
v18 = <com.novell.ldapchai.cr.ChaiResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v19 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet$lambda_write_2__26: java.util.function.Supplier bootstrap$(com.novell.ldapchai.exception.ChaiOperationException)>(v17);
virtualinvoke v18.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier)>(v19);
throw v17;
label7:
v20 := @caughtexception;
v21 = <com.novell.ldapchai.cr.ChaiResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v22 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet$lambda_write_3__25: java.util.function.Supplier bootstrap$()>();
virtualinvoke v21.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier,java.lang.Exception)>(v22, v20);
v23 = new com.novell.ldapchai.exception.ChaiOperationException;
v24 = virtualinvoke v20.<com.novell.ldapchai.exception.ChaiValidationException: java.lang.String getMessage()>();
v25 = <com.novell.ldapchai.exception.ChaiError: com.novell.ldapchai.exception.ChaiError UNKNOWN>;
specialinvoke v23.<com.novell.ldapchai.exception.ChaiOperationException: void <init>(java.lang.String,com.novell.ldapchai.exception.ChaiError,java.lang.Throwable)>(v24, v25, v20);
throw v23;
label8:
v26 = <com.novell.ldapchai.cr.ChaiResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v27 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet$lambda_write_4__24: java.util.function.Supplier bootstrap$(com.novell.ldapchai.ChaiUser)>(v1);
virtualinvoke v26.<com.novell.ldapchai.util.internal.ChaiLogger: void info(java.util.function.Supplier)>(v27);
v28 = <com.novell.ldapchai.cr.AbstractResponseSet$STATE: com.novell.ldapchai.cr.AbstractResponseSet$STATE WRITTEN>;
v0.<com.novell.ldapchai.cr.ChaiResponseSet: com.novell.ldapchai.cr.AbstractResponseSet$STATE state> = v28;
return 1;
catch com.novell.ldapchai.exception.ChaiOperationException from label2 to label5 with label6;
catch com.novell.ldapchai.exception.ChaiValidationException from label2 to label5 with label7;
}
void write(java.io.Writer) throws com.novell.ldapchai.exception.ChaiOperationException
{
java.lang.IllegalStateException v4;
com.novell.ldapchai.cr.ChaiResponseSet v0;
java.util.function.Supplier v8;
com.novell.ldapchai.exception.ChaiError v11;
java.lang.Exception v6;
java.io.Writer v1;
java.lang.String v10, v5;
com.novell.ldapchai.cr.AbstractResponseSet$STATE v2, v3;
com.novell.ldapchai.exception.ChaiOperationException v9;
com.novell.ldapchai.util.internal.ChaiLogger v7;
v0 := @this: com.novell.ldapchai.cr.ChaiResponseSet;
v1 := @parameter0: java.io.Writer;
v2 = v0.<com.novell.ldapchai.cr.ChaiResponseSet: com.novell.ldapchai.cr.AbstractResponseSet$STATE state>;
v3 = <com.novell.ldapchai.cr.AbstractResponseSet$STATE: com.novell.ldapchai.cr.AbstractResponseSet$STATE NEW>;
if v2 == v3 goto label1;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ResponseSet not suitable for writing (not in NEW state)");
throw v4;
label1:
v5 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet: java.lang.String rsToChaiXML(com.novell.ldapchai.cr.ChaiResponseSet)>(v0);
virtualinvoke v1.<java.io.Writer: void write(java.lang.String)>(v5);
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = <com.novell.ldapchai.cr.ChaiResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v8 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet$lambda_write_5__27: java.util.function.Supplier bootstrap$()>();
virtualinvoke v7.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier,java.lang.Exception)>(v8, v6);
v9 = new com.novell.ldapchai.exception.ChaiOperationException;
v10 = virtualinvoke v6.<java.lang.Exception: java.lang.String getMessage()>();
v11 = <com.novell.ldapchai.exception.ChaiError: com.novell.ldapchai.exception.ChaiError UNKNOWN>;
specialinvoke v9.<com.novell.ldapchai.exception.ChaiOperationException: void <init>(java.lang.String,com.novell.ldapchai.exception.ChaiError,java.lang.Throwable)>(v10, v11, v6);
throw v9;
label4:
return;
catch com.novell.ldapchai.exception.ChaiValidationException from label1 to label2 with label3;
catch java.io.IOException from label1 to label2 with label3;
}
static java.lang.String rsToChaiXML(com.novell.ldapchai.cr.ChaiResponseSet) throws com.novell.ldapchai.exception.ChaiValidationException, com.novell.ldapchai.exception.ChaiOperationException
{
java.lang.IllegalStateException v40;
org.jrivard.xmlchai.XmlDocument v2;
org.jrivard.xmlchai.XmlFactory$OutputFlag v37;
java.util.Locale v8;
org.jrivard.xmlchai.XmlFactory$OutputFlag[] v36;
java.util.Map v17, v18, v26, v27;
boolean v11, v21, v30;
java.util.Set v19, v28;
java.time.Instant v14, v15;
org.jrivard.xmlchai.XmlElement v25, v3, v34;
com.novell.ldapchai.cr.ChallengeSet v4, v7;
int v5;
java.lang.String v10, v12, v13, v16, v38, v6, v9;
org.jrivard.xmlchai.XmlFactory v1, v35;
java.util.Iterator v20, v29;
java.io.IOException v39;
com.novell.ldapchai.cr.ChaiResponseSet v0;
java.lang.Object v22, v23, v24, v31, v32, v33;
v0 := @parameter0: com.novell.ldapchai.cr.ChaiResponseSet;
v1 = staticinvoke <org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlFactory getFactory()>();
v2 = interfaceinvoke v1.<org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlDocument newDocument(java.lang.String)>("ResponseSet");
v3 = interfaceinvoke v2.<org.jrivard.xmlchai.XmlDocument: org.jrivard.xmlchai.XmlElement getRootElement()>();
v4 = virtualinvoke v0.<com.novell.ldapchai.cr.ChaiResponseSet: com.novell.ldapchai.cr.ChallengeSet getChallengeSet()>();
v5 = interfaceinvoke v4.<com.novell.ldapchai.cr.ChallengeSet: int getMinRandomRequired()>();
v6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v5);
interfaceinvoke v3.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("minRandomRequired", v6);
v7 = virtualinvoke v0.<com.novell.ldapchai.cr.ChaiResponseSet: com.novell.ldapchai.cr.ChallengeSet getChallengeSet()>();
v8 = interfaceinvoke v7.<com.novell.ldapchai.cr.ChallengeSet: java.util.Locale getLocale()>();
v9 = virtualinvoke v8.<java.util.Locale: java.lang.String toString()>();
interfaceinvoke v3.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("locale", v9);
interfaceinvoke v3.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("version", "2");
v10 = <com.novell.ldapchai.ChaiConstant: java.lang.String CHAI_API_VERSION>;
interfaceinvoke v3.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("chaiVersion", v10);
v11 = v0.<com.novell.ldapchai.cr.ChaiResponseSet: boolean caseInsensitive>;
if v11 == 0 goto label1;
interfaceinvoke v3.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("caseInsensitive", "true");
label1:
v12 = v0.<com.novell.ldapchai.cr.ChaiResponseSet: java.lang.String csIdentifier>;
if v12 == null goto label2;
v13 = v0.<com.novell.ldapchai.cr.ChaiResponseSet: java.lang.String csIdentifier>;
interfaceinvoke v3.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("challengeSetID", v13);
label2:
v14 = v0.<com.novell.ldapchai.cr.ChaiResponseSet: java.time.Instant timestamp>;
if v14 == null goto label3;
v15 = v0.<com.novell.ldapchai.cr.ChaiResponseSet: java.time.Instant timestamp>;
v16 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet: java.lang.String formatInstant(java.time.Instant)>(v15);
interfaceinvoke v3.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("time", v16);
label3:
v17 = v0.<com.novell.ldapchai.cr.ChaiResponseSet: java.util.Map crMap>;
if v17 == null goto label5;
v18 = v0.<com.novell.ldapchai.cr.ChaiResponseSet: java.util.Map crMap>;
v19 = interfaceinvoke v18.<java.util.Map: java.util.Set entrySet()>();
v20 = interfaceinvoke v19.<java.util.Set: java.util.Iterator iterator()>();
label4:
v21 = interfaceinvoke v20.<java.util.Iterator: boolean hasNext()>();
if v21 == 0 goto label5;
v22 = interfaceinvoke v20.<java.util.Iterator: java.lang.Object next()>();
v23 = interfaceinvoke v22.<java.util.Map$Entry: java.lang.Object getKey()>();
v24 = interfaceinvoke v22.<java.util.Map$Entry: java.lang.Object getValue()>();
v25 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet: org.jrivard.xmlchai.XmlElement challengeToXml(com.novell.ldapchai.cr.Challenge,com.novell.ldapchai.cr.Answer,java.lang.String)>(v23, v24, "response");
interfaceinvoke v3.<org.jrivard.xmlchai.XmlElement: void attachElement(org.jrivard.xmlchai.XmlElement)>(v25);
goto label4;
label5:
v26 = v0.<com.novell.ldapchai.cr.ChaiResponseSet: java.util.Map helpdeskCrMap>;
if v26 == null goto label7;
v27 = v0.<com.novell.ldapchai.cr.ChaiResponseSet: java.util.Map helpdeskCrMap>;
v28 = interfaceinvoke v27.<java.util.Map: java.util.Set entrySet()>();
v29 = interfaceinvoke v28.<java.util.Set: java.util.Iterator iterator()>();
label6:
v30 = interfaceinvoke v29.<java.util.Iterator: boolean hasNext()>();
if v30 == 0 goto label7;
v31 = interfaceinvoke v29.<java.util.Iterator: java.lang.Object next()>();
v32 = interfaceinvoke v31.<java.util.Map$Entry: java.lang.Object getKey()>();
v33 = interfaceinvoke v31.<java.util.Map$Entry: java.lang.Object getValue()>();
v34 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet: org.jrivard.xmlchai.XmlElement challengeToXml(com.novell.ldapchai.cr.Challenge,com.novell.ldapchai.cr.Answer,java.lang.String)>(v32, v33, "helpdesk-response");
interfaceinvoke v3.<org.jrivard.xmlchai.XmlElement: void attachElement(org.jrivard.xmlchai.XmlElement)>(v34);
goto label6;
label7:
v35 = staticinvoke <org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlFactory getFactory()>();
v36 = newarray (org.jrivard.xmlchai.XmlFactory$OutputFlag)[1];
v37 = <org.jrivard.xmlchai.XmlFactory$OutputFlag: org.jrivard.xmlchai.XmlFactory$OutputFlag Compact>;
v36[0] = v37;
v38 = interfaceinvoke v35.<org.jrivard.xmlchai.XmlFactory: java.lang.String outputString(org.jrivard.xmlchai.XmlDocument,org.jrivard.xmlchai.XmlFactory$OutputFlag[])>(v2, v36);
label8:
return v38;
label9:
v39 := @caughtexception;
v40 = new java.lang.IllegalStateException;
specialinvoke v40.<java.lang.IllegalStateException: void <init>(java.lang.String)>("unexpected error outputting challenge/response xml stream");
throw v40;
catch java.io.IOException from label7 to label8 with label9;
}
private static org.jrivard.xmlchai.XmlElement challengeToXml(com.novell.ldapchai.cr.Challenge, com.novell.ldapchai.cr.Answer, java.lang.String) throws com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.cr.Answer v1;
com.novell.ldapchai.cr.Challenge v0;
org.jrivard.xmlchai.XmlElement v4, v5, v7;
int v12, v14;
java.lang.String v11, v13, v15, v2, v6, v9;
org.jrivard.xmlchai.XmlFactory v3;
boolean v10, v8;
v0 := @parameter0: com.novell.ldapchai.cr.Challenge;
v1 := @parameter1: com.novell.ldapchai.cr.Answer;
v2 := @parameter2: java.lang.String;
v3 = staticinvoke <org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlFactory getFactory()>();
v4 = interfaceinvoke v3.<org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlElement newElement(java.lang.String)>(v2);
v5 = interfaceinvoke v4.<org.jrivard.xmlchai.XmlElement: org.jrivard.xmlchai.XmlElement newChildElement(java.lang.String)>("challenge");
v6 = interfaceinvoke v0.<com.novell.ldapchai.cr.Challenge: java.lang.String getChallengeText()>();
interfaceinvoke v5.<org.jrivard.xmlchai.XmlElement: void setText(java.lang.String)>(v6);
v7 = interfaceinvoke v1.<com.novell.ldapchai.cr.Answer: org.jrivard.xmlchai.XmlElement toXml()>();
interfaceinvoke v4.<org.jrivard.xmlchai.XmlElement: void attachElement(org.jrivard.xmlchai.XmlElement)>(v7);
v8 = interfaceinvoke v0.<com.novell.ldapchai.cr.Challenge: boolean isAdminDefined()>();
v9 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(v8);
interfaceinvoke v4.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("adminDefined", v9);
v10 = interfaceinvoke v0.<com.novell.ldapchai.cr.Challenge: boolean isRequired()>();
v11 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(v10);
interfaceinvoke v4.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("required", v11);
v12 = interfaceinvoke v0.<com.novell.ldapchai.cr.Challenge: int getMinLength()>();
v13 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v12);
interfaceinvoke v4.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("minLength", v13);
v14 = interfaceinvoke v0.<com.novell.ldapchai.cr.Challenge: int getMaxLength()>();
v15 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v14);
interfaceinvoke v4.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("maxLength", v15);
return v4;
}
public static com.novell.ldapchai.cr.ResponseSet parseChaiResponseSetXML(java.lang.String, com.novell.ldapchai.ChaiUser) throws com.novell.ldapchai.exception.ChaiValidationException
{
com.novell.ldapchai.ChaiUser v1;
com.novell.ldapchai.cr.ChaiResponseSet v2;
java.lang.String v0, v5;
com.novell.ldapchai.exception.ChaiValidationException v4;
com.novell.ldapchai.exception.ChaiError v6;
com.novell.ldapchai.exception.ChaiOperationException v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: com.novell.ldapchai.ChaiUser;
label1:
v2 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet$ChaiResponseXmlParser: com.novell.ldapchai.cr.ChaiResponseSet parseChaiResponseSetXML(java.lang.String)>(v0);
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new com.novell.ldapchai.exception.ChaiValidationException;
v5 = virtualinvoke v3.<com.novell.ldapchai.exception.ChaiOperationException: java.lang.String getMessage()>();
v6 = virtualinvoke v3.<com.novell.ldapchai.exception.ChaiOperationException: com.novell.ldapchai.exception.ChaiError getErrorCode()>();
specialinvoke v4.<com.novell.ldapchai.exception.ChaiValidationException: void <init>(java.lang.String,com.novell.ldapchai.exception.ChaiError)>(v5, v6);
throw v4;
catch com.novell.ldapchai.exception.ChaiOperationException from label1 to label2 with label3;
}
public java.util.List asChallengeBeans(boolean)
{
java.util.List v3;
java.util.Map v2;
com.novell.ldapchai.cr.ChaiResponseSet v0;
boolean v1;
v0 := @this: com.novell.ldapchai.cr.ChaiResponseSet;
v1 := @parameter0: boolean;
v2 = v0.<com.novell.ldapchai.cr.ChaiResponseSet: java.util.Map crMap>;
v3 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet: java.util.List asBeans(java.util.Map,boolean)>(v2, v1);
return v3;
}
public java.util.List asHelpdeskChallengeBeans(boolean)
{
java.util.List v3;
java.util.Map v2;
com.novell.ldapchai.cr.ChaiResponseSet v0;
boolean v1;
v0 := @this: com.novell.ldapchai.cr.ChaiResponseSet;
v1 := @parameter0: boolean;
v2 = v0.<com.novell.ldapchai.cr.ChaiResponseSet: java.util.Map helpdeskCrMap>;
v3 = staticinvoke <com.novell.ldapchai.cr.ChaiResponseSet: java.util.List asBeans(java.util.Map,boolean)>(v2, v1);
return v3;
}
public static java.util.List asBeans(java.util.Map, boolean)
{
java.util.ArrayList v3;
java.util.Map v0;
int v14, v15, v18;
java.lang.String v13;
boolean v1, v16, v17, v19, v6;
java.util.Iterator v5;
java.util.Set v4;
java.util.List v2;
com.novell.ldapchai.cr.bean.ChallengeBean v12, v9;
com.novell.ldapchai.cr.bean.AnswerBean v11;
java.lang.Object v10, v7, v8;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: boolean;
if v0 != null goto label1;
v2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v2;
label1:
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v4 = interfaceinvoke v0.<java.util.Map: java.util.Set entrySet()>();
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label2:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label4;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getKey()>();
v9 = interfaceinvoke v8.<com.novell.ldapchai.cr.Challenge: com.novell.ldapchai.cr.bean.ChallengeBean asChallengeBean()>();
if v1 == 0 goto label3;
v10 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getValue()>();
v11 = interfaceinvoke v10.<com.novell.ldapchai.cr.Answer: com.novell.ldapchai.cr.bean.AnswerBean asAnswerBean()>();
v12 = new com.novell.ldapchai.cr.bean.ChallengeBean;
v13 = virtualinvoke v9.<com.novell.ldapchai.cr.bean.ChallengeBean: java.lang.String getChallengeText()>();
v14 = virtualinvoke v9.<com.novell.ldapchai.cr.bean.ChallengeBean: int getMinLength()>();
v15 = virtualinvoke v9.<com.novell.ldapchai.cr.bean.ChallengeBean: int getMaxLength()>();
v16 = virtualinvoke v9.<com.novell.ldapchai.cr.bean.ChallengeBean: boolean isAdminDefined()>();
v17 = virtualinvoke v9.<com.novell.ldapchai.cr.bean.ChallengeBean: boolean isRequired()>();
v18 = virtualinvoke v9.<com.novell.ldapchai.cr.bean.ChallengeBean: int getMaxQuestionCharsInAnswer()>();
v19 = virtualinvoke v9.<com.novell.ldapchai.cr.bean.ChallengeBean: boolean isEnforceWordlist()>();
specialinvoke v12.<com.novell.ldapchai.cr.bean.ChallengeBean: void <init>(java.lang.String,int,int,boolean,boolean,int,boolean,com.novell.ldapchai.cr.bean.AnswerBean)>(v13, v14, v15, v16, v17, v18, v19, v11);
v9 = v12;
label3:
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v9);
goto label2;
label4:
return v3;
}
public static java.util.Locale parseLocaleString(java.lang.String)
{
java.util.Locale v1, v10, v12, v4, v7;
java.util.StringTokenizer v2;
java.lang.String v0, v11, v5, v8;
boolean v3, v6, v9;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
v1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();
return v1;
label1:
v2 = new java.util.StringTokenizer;
specialinvoke v2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(v0, "_");
v3 = virtualinvoke v2.<java.util.StringTokenizer: boolean hasMoreTokens()>();
if v3 != 0 goto label2;
v4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();
return v4;
label2:
v5 = virtualinvoke v2.<java.util.StringTokenizer: java.lang.String nextToken()>();
v6 = virtualinvoke v2.<java.util.StringTokenizer: boolean hasMoreTokens()>();
if v6 != 0 goto label3;
v7 = new java.util.Locale;
specialinvoke v7.<java.util.Locale: void <init>(java.lang.String)>(v5);
return v7;
label3:
v8 = virtualinvoke v2.<java.util.StringTokenizer: java.lang.String nextToken()>();
v9 = virtualinvoke v2.<java.util.StringTokenizer: boolean hasMoreTokens()>();
if v9 != 0 goto label4;
v10 = new java.util.Locale;
specialinvoke v10.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>(v5, v8);
return v10;
label4:
v11 = virtualinvoke v2.<java.util.StringTokenizer: java.lang.String nextToken(java.lang.String)>("");
v12 = new java.util.Locale;
specialinvoke v12.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>(v5, v8, v11);
return v12;
}
static java.lang.String formatInstant(java.time.Instant)
{
java.util.Date v3;
java.util.TimeZone v2;
java.text.SimpleDateFormat v1;
java.lang.String v4;
java.time.Instant v0;
v0 := @parameter0: java.time.Instant;
v1 = new java.text.SimpleDateFormat;
specialinvoke v1.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss Z");
v2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("Zulu");
virtualinvoke v1.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>(v2);
v3 = staticinvoke <java.util.Date: java.util.Date 'from'(java.time.Instant)>(v0);
v4 = virtualinvoke v1.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(v3);
return v4;
}
static java.time.Instant parseInstant(java.lang.String) throws java.text.ParseException
{
java.util.Date v3;
java.util.TimeZone v2;
java.text.SimpleDateFormat v1;
java.lang.String v0;
java.time.Instant v4;
v0 := @parameter0: java.lang.String;
v1 = new java.text.SimpleDateFormat;
specialinvoke v1.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss Z");
v2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("Zulu");
virtualinvoke v1.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>(v2);
v3 = virtualinvoke v1.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(v0);
v4 = virtualinvoke v3.<java.util.Date: java.time.Instant toInstant()>();
return v4;
}
static void <clinit>()
{
com.novell.ldapchai.util.internal.ChaiLogger v0;
v0 = staticinvoke <com.novell.ldapchai.util.internal.ChaiLogger: com.novell.ldapchai.util.internal.ChaiLogger getLogger(java.lang.Class)>(class "Lcom/novell/ldapchai/cr/ChaiResponseSet;");
<com.novell.ldapchai.cr.ChaiResponseSet: com.novell.ldapchai.util.internal.ChaiLogger LOGGER> = v0;
return;
}
}