class com.novell.ldapchai.cr.HashSaltAnswer extends java.lang.Object implements com.novell.ldapchai.cr.Answer
{
private static final java.lang.String VERSION_SEPARATOR;
private static final com.novell.ldapchai.cr.HashSaltAnswer$VERSION DEFAULT_VERSION;
protected final java.lang.String answerHash;
protected final java.lang.String salt;
protected final int hashCount;
protected final boolean caseInsensitive;
protected final com.novell.ldapchai.cr.Answer$FormatType formatType;
protected final com.novell.ldapchai.cr.HashSaltAnswer$VERSION version;
void <init>(java.lang.String, java.lang.String, int, boolean, com.novell.ldapchai.cr.Answer$FormatType, com.novell.ldapchai.cr.HashSaltAnswer$VERSION)
{
com.novell.ldapchai.cr.HashSaltAnswer v0;
com.novell.ldapchai.cr.Answer$FormatType v5;
java.lang.IllegalArgumentException v8;
com.novell.ldapchai.cr.HashSaltAnswer$VERSION v6;
int v3;
java.lang.String v1, v2;
boolean v4, v7;
v0 := @this: com.novell.ldapchai.cr.HashSaltAnswer;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: com.novell.ldapchai.cr.Answer$FormatType;
v6 := @parameter5: com.novell.ldapchai.cr.HashSaltAnswer$VERSION;
specialinvoke v0.<java.lang.Object: void <init>()>();
v7 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: boolean isEmpty(java.lang.CharSequence)>(v1);
if v7 == 0 goto label1;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("missing answerHash value");
throw v8;
label1:
staticinvoke <com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.HashSaltAnswer$HashType forFormatType(com.novell.ldapchai.cr.Answer$FormatType)>(v5);
v0.<com.novell.ldapchai.cr.HashSaltAnswer: java.lang.String answerHash> = v1;
v0.<com.novell.ldapchai.cr.HashSaltAnswer: com.novell.ldapchai.cr.HashSaltAnswer$VERSION version> = v6;
v0.<com.novell.ldapchai.cr.HashSaltAnswer: com.novell.ldapchai.cr.Answer$FormatType formatType> = v5;
v0.<com.novell.ldapchai.cr.HashSaltAnswer: java.lang.String salt> = v2;
v0.<com.novell.ldapchai.cr.HashSaltAnswer: int hashCount> = v3;
v0.<com.novell.ldapchai.cr.HashSaltAnswer: boolean caseInsensitive> = v4;
return;
}
void <init>(com.novell.ldapchai.cr.AnswerConfiguration, java.lang.String)
{
com.novell.ldapchai.cr.HashSaltAnswer v0;
com.novell.ldapchai.cr.AnswerConfiguration v1;
int v15, v3;
java.lang.String v13, v14, v16, v17, v18, v19, v2;
boolean v11, v12, v4, v7;
com.novell.ldapchai.cr.Answer$FormatType v5, v9;
java.lang.IllegalArgumentException v8;
com.novell.ldapchai.cr.HashSaltAnswer$VERSION v6;
com.novell.ldapchai.cr.HashSaltAnswer$HashType v10;
v0 := @this: com.novell.ldapchai.cr.HashSaltAnswer;
v1 := @parameter0: com.novell.ldapchai.cr.AnswerConfiguration;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = v1.<com.novell.ldapchai.cr.AnswerConfiguration: int iterations>;
v0.<com.novell.ldapchai.cr.HashSaltAnswer: int hashCount> = v3;
v4 = v1.<com.novell.ldapchai.cr.AnswerConfiguration: boolean caseInsensitive>;
v0.<com.novell.ldapchai.cr.HashSaltAnswer: boolean caseInsensitive> = v4;
v5 = v1.<com.novell.ldapchai.cr.AnswerConfiguration: com.novell.ldapchai.cr.Answer$FormatType formatType>;
v0.<com.novell.ldapchai.cr.HashSaltAnswer: com.novell.ldapchai.cr.Answer$FormatType formatType> = v5;
v6 = <com.novell.ldapchai.cr.HashSaltAnswer: com.novell.ldapchai.cr.HashSaltAnswer$VERSION DEFAULT_VERSION>;
v0.<com.novell.ldapchai.cr.HashSaltAnswer: com.novell.ldapchai.cr.HashSaltAnswer$VERSION version> = v6;
v7 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: boolean isEmpty(java.lang.CharSequence)>(v2);
if v7 == 0 goto label1;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("missing answer value");
throw v8;
label1:
v9 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: com.novell.ldapchai.cr.Answer$FormatType formatType>;
v10 = staticinvoke <com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.HashSaltAnswer$HashType forFormatType(com.novell.ldapchai.cr.Answer$FormatType)>(v9);
v11 = virtualinvoke v10.<com.novell.ldapchai.cr.HashSaltAnswer$HashType: boolean isSaltEnabled()>();
v12 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: boolean caseInsensitive>;
if v12 == 0 goto label2;
v13 = virtualinvoke v2.<java.lang.String: java.lang.String toLowerCase()>();
goto label3;
label2:
v13 = v2;
label3:
v14 = v13;
if v11 == 0 goto label4;
v15 = virtualinvoke v1.<com.novell.ldapchai.cr.AnswerConfiguration: int getSaltCharCount()>();
v16 = staticinvoke <com.novell.ldapchai.cr.HashSaltAnswer: java.lang.String generateSalt(int)>(v15);
goto label5;
label4:
v16 = "";
label5:
v0.<com.novell.ldapchai.cr.HashSaltAnswer: java.lang.String salt> = v16;
if v11 == 0 goto label6;
v17 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: java.lang.String salt>;
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v17, v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
goto label7;
label6:
v18 = v14;
label7:
v19 = virtualinvoke v0.<com.novell.ldapchai.cr.HashSaltAnswer: java.lang.String hashValue(java.lang.String)>(v18);
v0.<com.novell.ldapchai.cr.HashSaltAnswer: java.lang.String answerHash> = v19;
return;
}
public org.jrivard.xmlchai.XmlElement toXml()
{
com.novell.ldapchai.cr.HashSaltAnswer v0;
com.novell.ldapchai.cr.Answer$FormatType v10;
org.jrivard.xmlchai.XmlElement v2;
com.novell.ldapchai.cr.HashSaltAnswer$VERSION v3;
int v12, v13;
java.lang.String v11, v14, v4, v5, v6, v7, v9;
org.jrivard.xmlchai.XmlFactory v1;
boolean v8;
v0 := @this: com.novell.ldapchai.cr.HashSaltAnswer;
v1 = staticinvoke <org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlFactory getFactory()>();
v2 = interfaceinvoke v1.<org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlElement newElement(java.lang.String)>("answer");
v3 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: com.novell.ldapchai.cr.HashSaltAnswer$VERSION version>;
v4 = virtualinvoke v3.<com.novell.ldapchai.cr.HashSaltAnswer$VERSION: java.lang.String toString()>();
v5 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: java.lang.String answerHash>;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v4, v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001:\u0001");
interfaceinvoke v2.<org.jrivard.xmlchai.XmlElement: void setText(java.lang.String)>(v6);
v7 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: java.lang.String salt>;
v8 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: boolean isEmpty(java.lang.CharSequence)>(v7);
if v8 != 0 goto label1;
v9 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: java.lang.String salt>;
interfaceinvoke v2.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("salt", v9);
label1:
v10 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: com.novell.ldapchai.cr.Answer$FormatType formatType>;
v11 = virtualinvoke v10.<com.novell.ldapchai.cr.Answer$FormatType: java.lang.String toString()>();
interfaceinvoke v2.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("format", v11);
v12 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: int hashCount>;
if v12 <= 1 goto label2;
v13 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: int hashCount>;
v14 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v13);
interfaceinvoke v2.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("hashcount", v14);
label2:
return v2;
}
public boolean testAnswer(java.lang.String)
{
com.novell.ldapchai.cr.HashSaltAnswer v0;
java.lang.String v1, v3, v4, v5, v6, v7;
boolean v2, v8;
v0 := @this: com.novell.ldapchai.cr.HashSaltAnswer;
v1 := @parameter0: java.lang.String;
if v1 != null goto label1;
return 0;
label1:
v2 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: boolean caseInsensitive>;
if v2 == 0 goto label2;
v3 = virtualinvoke v1.<java.lang.String: java.lang.String toLowerCase()>();
goto label3;
label2:
v3 = v1;
label3:
v4 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: java.lang.String salt>;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v4, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
v6 = virtualinvoke v0.<com.novell.ldapchai.cr.HashSaltAnswer: java.lang.String hashValue(java.lang.String)>(v5);
v7 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: java.lang.String answerHash>;
v8 = virtualinvoke v7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v6);
return v8;
}
protected java.lang.String hashValue(java.lang.String)
{
com.novell.ldapchai.cr.HashSaltAnswer v0;
com.novell.ldapchai.cr.Answer$FormatType v3;
com.novell.ldapchai.cr.HashSaltAnswer$VERSION v4;
int v2;
java.lang.String v1, v5;
v0 := @this: com.novell.ldapchai.cr.HashSaltAnswer;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: int hashCount>;
v3 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: com.novell.ldapchai.cr.Answer$FormatType formatType>;
v4 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: com.novell.ldapchai.cr.HashSaltAnswer$VERSION version>;
v5 = staticinvoke <com.novell.ldapchai.cr.HashSaltAnswer: java.lang.String doHash(java.lang.String,int,com.novell.ldapchai.cr.Answer$FormatType,com.novell.ldapchai.cr.HashSaltAnswer$VERSION)>(v1, v2, v3, v4);
return v5;
}
static java.lang.String doHash(java.lang.String, int, com.novell.ldapchai.cr.Answer$FormatType, com.novell.ldapchai.cr.HashSaltAnswer$VERSION) throws java.lang.IllegalStateException
{
byte[] v13, v15;
java.lang.IllegalStateException v21, v8;
java.security.MessageDigest v6;
com.novell.ldapchai.util.internal.StringHelper$Base64Options[] v16, v19;
java.nio.charset.Charset v12;
int v1, v14, v18;
java.lang.String v0, v10, v11, v17, v20, v5, v9;
com.novell.ldapchai.cr.Answer$FormatType v2;
com.novell.ldapchai.cr.HashSaltAnswer$VERSION v3;
java.security.NoSuchAlgorithmException v7;
com.novell.ldapchai.cr.HashSaltAnswer$HashType v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: com.novell.ldapchai.cr.Answer$FormatType;
v3 := @parameter3: com.novell.ldapchai.cr.HashSaltAnswer$VERSION;
v4 = staticinvoke <com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.HashSaltAnswer$HashType forFormatType(com.novell.ldapchai.cr.Answer$FormatType)>(v2);
label1:
v5 = virtualinvoke v4.<com.novell.ldapchai.cr.HashSaltAnswer$HashType: java.lang.String getHashAlgName()>();
v6 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(v5);
label2:
goto label4;
label3:
v7 := @caughtexception;
v8 = new java.lang.IllegalStateException;
v9 = virtualinvoke v4.<com.novell.ldapchai.cr.HashSaltAnswer$HashType: java.lang.String getHashAlgName()>();
v10 = virtualinvoke v7.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v9, v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unable to load \u0001 message digest algorithm: \u0001");
specialinvoke v8.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v11);
throw v8;
label4:
v12 = <com.novell.ldapchai.cr.ChaiCrFactory: java.nio.charset.Charset DEFAULT_CHARSET>;
v13 = virtualinvoke v0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v12);
v14 = virtualinvoke v3.<com.novell.ldapchai.cr.HashSaltAnswer$VERSION: int ordinal()>();
lookupswitch(v14)
{
case 0: goto label5;
case 1: goto label6;
default: goto label9;
};
label5:
v15 = virtualinvoke v6.<java.security.MessageDigest: byte[] digest(byte[])>(v13);
v16 = newarray (com.novell.ldapchai.util.internal.StringHelper$Base64Options)[0];
v17 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: java.lang.String base64Encode(byte[],com.novell.ldapchai.util.internal.StringHelper$Base64Options[])>(v15, v16);
return v17;
label6:
v18 = 0;
label7:
if v18 >= v1 goto label8;
v13 = virtualinvoke v6.<java.security.MessageDigest: byte[] digest(byte[])>(v13);
v18 = v18 + 1;
goto label7;
label8:
v19 = newarray (com.novell.ldapchai.util.internal.StringHelper$Base64Options)[0];
v20 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: java.lang.String base64Encode(byte[],com.novell.ldapchai.util.internal.StringHelper$Base64Options[])>(v13, v19);
return v20;
label9:
v21 = new java.lang.IllegalStateException;
specialinvoke v21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("unexpected version enum in hash method");
throw v21;
catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
}
private static java.lang.String generateSalt(int)
{
char v8;
java.security.SecureRandom v1;
int v0, v3, v6, v7;
java.lang.StringBuilder v2;
java.lang.String v4, v5, v9;
v0 := @parameter0: int;
v1 = new java.security.SecureRandom;
specialinvoke v1.<java.security.SecureRandom: void <init>()>();
v2 = new java.lang.StringBuilder;
specialinvoke v2.<java.lang.StringBuilder: void <init>(int)>(v0);
v3 = 0;
label1:
if v3 >= v0 goto label2;
v4 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
v5 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
v6 = virtualinvoke v5.<java.lang.String: int length()>();
v7 = virtualinvoke v1.<java.security.SecureRandom: int nextInt(int)>(v6);
v8 = virtualinvoke v4.<java.lang.String: char charAt(int)>(v7);
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v8);
v3 = v3 + 1;
goto label1;
label2:
v9 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.String toString()>();
return v9;
}
public com.novell.ldapchai.cr.bean.AnswerBean asAnswerBean()
{
com.novell.ldapchai.cr.HashSaltAnswer v0;
com.novell.ldapchai.cr.Answer$FormatType v2;
com.novell.ldapchai.cr.HashSaltAnswer$VERSION v3;
int v8;
com.novell.ldapchai.cr.bean.AnswerBean v1;
java.lang.String v4, v5, v6, v7;
boolean v9;
v0 := @this: com.novell.ldapchai.cr.HashSaltAnswer;
v1 = new com.novell.ldapchai.cr.bean.AnswerBean;
v2 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: com.novell.ldapchai.cr.Answer$FormatType formatType>;
v3 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: com.novell.ldapchai.cr.HashSaltAnswer$VERSION version>;
v4 = virtualinvoke v3.<com.novell.ldapchai.cr.HashSaltAnswer$VERSION: java.lang.String toString()>();
v5 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: java.lang.String answerHash>;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v4, v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001:\u0001");
v7 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: java.lang.String salt>;
v8 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: int hashCount>;
v9 = v0.<com.novell.ldapchai.cr.HashSaltAnswer: boolean caseInsensitive>;
specialinvoke v1.<com.novell.ldapchai.cr.bean.AnswerBean: void <init>(com.novell.ldapchai.cr.Answer$FormatType,java.lang.String,java.lang.String,java.lang.String,int,boolean)>(v2, null, v6, v7, v8, v9);
return v1;
}
static void <clinit>()
{
com.novell.ldapchai.cr.HashSaltAnswer$VERSION v0;
v0 = <com.novell.ldapchai.cr.HashSaltAnswer$VERSION: com.novell.ldapchai.cr.HashSaltAnswer$VERSION B>;
<com.novell.ldapchai.cr.HashSaltAnswer: com.novell.ldapchai.cr.HashSaltAnswer$VERSION DEFAULT_VERSION> = v0;
return;
}
}