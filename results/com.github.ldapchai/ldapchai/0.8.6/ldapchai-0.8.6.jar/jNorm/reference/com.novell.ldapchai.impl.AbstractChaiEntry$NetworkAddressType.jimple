final enum class com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType extends java.lang.Enum
{
public static final enum com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType IPv4;
private final int typeIdentifier;
private static final com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType[] $VALUES;
public static com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType[] values()
{
java.lang.Object v1;
com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType[] v0;
v0 = <com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType: com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/novell/ldapchai/impl/AbstractChaiEntry$NetworkAddressType;", v0);
return v1;
}
private void <init>(java.lang.String, int, int)
{
com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType v0;
int v2, v3;
java.lang.String v1;
v0 := @this: com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
v0.<com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType: int typeIdentifier> = v3;
return;
}
public int getTypeIdentifier()
{
int v1;
com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType v0;
v0 := @this: com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType;
v1 = v0.<com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType: int typeIdentifier>;
return v1;
}
public static com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType forIdentifier(int)
{
com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType v4;
com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType[] v1;
int v0, v2, v3, v5;
v0 := @parameter0: int;
v1 = staticinvoke <com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType: com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType[] values()>();
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v1[v3];
v5 = virtualinvoke v4.<com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType: int getTypeIdentifier()>();
if v5 != v0 goto label2;
return v4;
label2:
v3 = v3 + 1;
goto label1;
label3:
return null;
}
private static com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType[] $values()
{
com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType v1;
com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType[] v0;
v0 = newarray (com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType)[1];
v1 = <com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType: com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType IPv4>;
v0[0] = v1;
return v0;
}
static void <clinit>()
{
com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType v0;
com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType[] v1;
v0 = new com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType;
specialinvoke v0.<com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType: void <init>(java.lang.String,int,int)>("IPv4", 0, 9);
<com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType: com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType IPv4> = v0;
v1 = staticinvoke <com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType: com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType[] $values()>();
<com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType: com.novell.ldapchai.impl.AbstractChaiEntry$NetworkAddressType[] $VALUES> = v1;
return;
}
}