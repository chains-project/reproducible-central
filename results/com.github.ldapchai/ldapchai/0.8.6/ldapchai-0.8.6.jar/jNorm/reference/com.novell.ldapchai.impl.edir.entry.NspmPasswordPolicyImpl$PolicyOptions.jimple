class com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions extends java.lang.Object implements java.io.Serializable
{
private int bitMask;
void <init>(java.lang.String)
{
int v2;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions v0;
java.lang.String v1;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions: int bitMask> = 0;
v2 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: int convertStrToInt(java.lang.String,int)>(v1, 0);
v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions: int bitMask> = v2;
return;
}
private boolean getOption(com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option)
{
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions v0;
int v2, v3, v4, v5;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option v1;
boolean v6;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions;
v1 := @parameter0: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option;
v2 = v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions: int bitMask>;
v3 = specialinvoke v1.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option: int getPosition()>();
v4 = v2 & v3;
v5 = specialinvoke v1.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option: int getPosition()>();
if v4 != v5 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
return v6;
}
public boolean isRemoveNdsHash()
{
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions v0;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option v1;
boolean v2;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions;
v1 = <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option REMOVE_NDS_HASH>;
v2 = specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions: boolean getOption(com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option)>(v1);
return v2;
}
public boolean isDoNotSetNds()
{
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions v0;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option v1;
boolean v2;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions;
v1 = <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option DO_NOT_SET_NDS>;
v2 = specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions: boolean getOption(com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option)>(v1);
return v2;
}
public boolean isDoNotSetSimple()
{
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions v0;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option v1;
boolean v2;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions;
v1 = <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option DO_NOT_SET_SIMPLE>;
v2 = specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions: boolean getOption(com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option)>(v1);
return v2;
}
public boolean isAllowSelfRetrieval()
{
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions v0;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option v1;
boolean v2;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions;
v1 = <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option ALLOW_SELF_RETRIEVAL>;
v2 = specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions: boolean getOption(com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option)>(v1);
return v2;
}
public boolean isAllowAdminRetrieval()
{
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions v0;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option v1;
boolean v2;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions;
v1 = <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option ALLOW_ADMIN_RETRIEVAL>;
v2 = specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions: boolean getOption(com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option)>(v1);
return v2;
}
public boolean isAllowAgentRetrieval()
{
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions v0;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option v1;
boolean v2;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions;
v1 = <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option ALLOW_AGENT_RETRIEVAL>;
v2 = specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions: boolean getOption(com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option)>(v1);
return v2;
}
public boolean isPasswordEnabled()
{
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions v0;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option v1;
boolean v2;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions;
v1 = <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option PASSWORD_ENABLED>;
v2 = specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions: boolean getOption(com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option)>(v1);
return v2;
}
public boolean isPolicyEnabled()
{
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions v0;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option v1;
boolean v2;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions;
v1 = <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option ADVANCED_POLICY_ENABLED>;
v2 = specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions: boolean getOption(com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option)>(v1);
return v2;
}
public java.lang.String toString()
{
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option v5;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option[] v2;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions v0;
int v10, v11, v3, v4, v8, v9;
java.lang.StringBuilder v1;
java.lang.String v12, v6;
boolean v7;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = staticinvoke <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option[] values()>();
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v6 = virtualinvoke v5.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option: java.lang.String toString()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v6);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");
v7 = specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions: boolean getOption(com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions$Option)>(v5);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(v7);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
v4 = v4 + 1;
goto label1;
label2:
v8 = virtualinvoke v1.<java.lang.StringBuilder: int length()>();
if v8 <= 2 goto label3;
v9 = virtualinvoke v1.<java.lang.StringBuilder: int length()>();
v10 = v9 - 2;
v11 = virtualinvoke v1.<java.lang.StringBuilder: int length()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(v10, v11);
label3:
v12 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v12;
}
}