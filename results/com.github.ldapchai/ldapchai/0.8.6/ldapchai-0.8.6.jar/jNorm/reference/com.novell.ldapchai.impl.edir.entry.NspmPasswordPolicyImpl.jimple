class com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl extends com.novell.ldapchai.impl.edir.entry.TopImpl implements com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy
{
static final java.util.Collection LDAP_PASSWORD_ATTRIBUTES;
private final java.util.Map ruleMap;
private final java.util.Map allEntryValues;
void <init>(java.lang.String, com.novell.ldapchai.provider.ChaiProvider) throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.util.SearchHelper v3;
java.util.HashMap v11, v13;
java.util.Map v12, v14, v15, v8;
java.lang.String v1, v7, v9;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl v0;
java.util.Collection v5;
com.novell.ldapchai.provider.ChaiProvider v2, v6;
java.lang.Object v10;
com.novell.ldapchai.provider.SearchScope v4;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.novell.ldapchai.provider.ChaiProvider;
specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.TopImpl: void <init>(java.lang.String,com.novell.ldapchai.provider.ChaiProvider)>(v1, v2);
v3 = new com.novell.ldapchai.util.SearchHelper;
specialinvoke v3.<com.novell.ldapchai.util.SearchHelper: void <init>()>();
virtualinvoke v3.<com.novell.ldapchai.util.SearchHelper: void setFilter(java.lang.String)>("(objectClass=*)");
v4 = <com.novell.ldapchai.provider.SearchScope: com.novell.ldapchai.provider.SearchScope BASE>;
virtualinvoke v3.<com.novell.ldapchai.util.SearchHelper: void setSearchScope(com.novell.ldapchai.provider.SearchScope)>(v4);
v5 = <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl: java.util.Collection LDAP_PASSWORD_ATTRIBUTES>;
virtualinvoke v3.<com.novell.ldapchai.util.SearchHelper: void setAttributes(java.util.Collection)>(v5);
v6 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
v7 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl: java.lang.String getEntryDN()>();
v8 = interfaceinvoke v6.<com.novell.ldapchai.provider.ChaiProvider: java.util.Map searchMultiValues(java.lang.String,com.novell.ldapchai.util.SearchHelper)>(v7, v3);
v9 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl: java.lang.String getEntryDN()>();
v10 = interfaceinvoke v8.<java.util.Map: java.lang.Object get(java.lang.Object)>(v9);
v11 = new java.util.HashMap;
specialinvoke v11.<java.util.HashMap: void <init>(java.util.Map)>(v10);
v12 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v11);
v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl: java.util.Map allEntryValues> = v12;
v13 = new java.util.HashMap;
v14 = staticinvoke <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl: java.util.Map createRuleMapUsingAttributeValues(java.util.Map)>(v10);
specialinvoke v13.<java.util.HashMap: void <init>(java.util.Map)>(v14);
v15 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v13);
v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl: java.util.Map ruleMap> = v15;
return;
}
public java.lang.String getLdapObjectClassName()
{
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl;
return "nspmPasswordPolicy";
}
public java.lang.String getChallengeSetDN()
{
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute v2;
java.util.Map v1;
java.lang.Object v4, v6;
java.lang.String v3;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl v0;
boolean v5;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl;
v1 = v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl: java.util.Map allEntryValues>;
v2 = <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute CHALLENGE_SET_DN>;
v3 = virtualinvoke v2.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute: java.lang.String getLdapAttribute()>();
v4 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
if v4 == null goto label1;
v5 = interfaceinvoke v4.<java.util.List: boolean isEmpty()>();
if v5 != 0 goto label1;
v6 = interfaceinvoke v4.<java.util.List: java.lang.Object get(int)>(0);
goto label2;
label1:
v6 = "";
label2:
return v6;
}
public java.lang.String getSourceDN()
{
java.lang.String v1;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl;
v1 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl: java.lang.String getEntryDN()>();
return v1;
}
public java.util.List testPasswordForErrors(java.lang.String)
{
java.lang.UnsupportedOperationException v2;
java.lang.String v1;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not implemented");
throw v2;
}
public com.novell.ldapchai.util.PasswordRuleHelper getRuleHelper()
{
com.novell.ldapchai.util.GenericRuleHelper v1;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl;
v1 = new com.novell.ldapchai.util.GenericRuleHelper;
specialinvoke v1.<com.novell.ldapchai.util.GenericRuleHelper: void <init>(com.novell.ldapchai.ChaiPasswordPolicy)>(v0);
return v1;
}
private static java.util.Map createRuleMapUsingComplexityRules(java.lang.String)
{
com.novell.ldapchai.impl.edir.value.NspmComplexityRules v2;
java.util.HashMap v1;
com.novell.ldapchai.ChaiPasswordRule v4, v7;
java.lang.String v0, v5, v6, v8;
boolean v3;
v0 := @parameter0: java.lang.String;
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
v2 = new com.novell.ldapchai.impl.edir.value.NspmComplexityRules;
specialinvoke v2.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules: void <init>(java.lang.String)>(v0);
v3 = virtualinvoke v2.<com.novell.ldapchai.impl.edir.value.NspmComplexityRules: boolean isMsComplexityPolicy()>();
if v3 == 0 goto label1;
v4 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule ADComplexity>;
v5 = virtualinvoke v4.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v6 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(1);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v5, v6);
return v1;
label1:
v7 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule NovellComplexityRules>;
v8 = virtualinvoke v7.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v8, v0);
return v1;
}
private static java.util.Map createRuleMapUsingAttributeValues(java.util.Map)
{
java.util.ListIterator v25;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions v41;
java.util.Map v0, v7;
boolean v18, v26, v35, v45, v5;
com.novell.ldapchai.ChaiPasswordRule[] v8;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute v12, v2, v21, v32, v37;
com.novell.ldapchai.ChaiPasswordRule v11, v30, v43;
java.util.HashMap v1;
java.util.ArrayList v24;
int v10, v39, v40, v9;
java.lang.String v13, v14, v15, v16, v19, v22, v28, v29, v3, v31, v33, v38, v42, v44, v46;
java.lang.Object v17, v20, v23, v27, v34, v36, v4, v6;
v0 := @parameter0: java.util.Map;
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
v2 = <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute AD_COMPLEXITY_RULES>;
v3 = virtualinvoke v2.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute: java.lang.String getLdapAttribute()>();
v4 = interfaceinvoke v0.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
if v4 == null goto label1;
v5 = interfaceinvoke v4.<java.util.List: boolean isEmpty()>();
if v5 != 0 goto label1;
v6 = interfaceinvoke v4.<java.util.List: java.lang.Object get(int)>(0);
v7 = staticinvoke <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl: java.util.Map createRuleMapUsingComplexityRules(java.lang.String)>(v6);
interfaceinvoke v1.<java.util.Map: void putAll(java.util.Map)>(v7);
label1:
v8 = staticinvoke <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule[] values()>();
v9 = lengthof v8;
v10 = 0;
label2:
if v10 >= v9 goto label4;
v11 = v8[v10];
v12 = staticinvoke <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute attributeForRule(com.novell.ldapchai.ChaiPasswordRule)>(v11);
if v12 == null goto label3;
v13 = virtualinvoke v11.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v14 = virtualinvoke v12.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute: java.lang.String getDefaultValue()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v13, v14);
v15 = virtualinvoke v12.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute: java.lang.String getLdapAttribute()>();
if v15 == null goto label3;
v16 = virtualinvoke v12.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute: java.lang.String getLdapAttribute()>();
v17 = interfaceinvoke v0.<java.util.Map: java.lang.Object get(java.lang.Object)>(v16);
if v17 == null goto label3;
v18 = interfaceinvoke v17.<java.util.List: boolean isEmpty()>();
if v18 != 0 goto label3;
v19 = virtualinvoke v11.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v20 = interfaceinvoke v17.<java.util.List: java.lang.Object get(int)>(0);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v19, v20);
label3:
v10 = v10 + 1;
goto label2;
label4:
v21 = <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute DISALLOWED_ATTRIBUTES>;
v22 = virtualinvoke v21.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute: java.lang.String getLdapAttribute()>();
v23 = interfaceinvoke v0.<java.util.Map: java.lang.Object get(java.lang.Object)>(v22);
if v23 == null goto label7;
v24 = new java.util.ArrayList;
specialinvoke v24.<java.util.ArrayList: void <init>()>();
v25 = interfaceinvoke v23.<java.util.List: java.util.ListIterator listIterator()>();
label5:
v26 = interfaceinvoke v25.<java.util.ListIterator: boolean hasNext()>();
if v26 == 0 goto label6;
v27 = interfaceinvoke v25.<java.util.ListIterator: java.lang.Object next()>();
v28 = virtualinvoke v27.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[ :]", "");
interfaceinvoke v24.<java.util.List: boolean add(java.lang.Object)>(v28);
goto label5;
label6:
v29 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: java.lang.String stringCollectionToString(java.util.Collection,java.lang.String)>(v24, "\n");
v30 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule DisallowedAttributes>;
v31 = virtualinvoke v30.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v31, v29);
label7:
v32 = <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute PASSWORD_POLICY_OPTIONS>;
v33 = virtualinvoke v32.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute: java.lang.String getLdapAttribute()>();
v34 = interfaceinvoke v0.<java.util.Map: java.lang.Object get(java.lang.Object)>(v33);
if v34 == null goto label8;
v35 = interfaceinvoke v34.<java.util.List: boolean isEmpty()>();
if v35 != 0 goto label8;
v36 = interfaceinvoke v34.<java.util.List: java.lang.Object get(int)>(0);
v37 = <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute PASSWORD_POLICY_OPTIONS>;
v38 = virtualinvoke v37.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute: java.lang.String getDefaultValue()>();
v39 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v38);
v40 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: int convertStrToInt(java.lang.String,int)>(v36, v39);
v41 = new com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions;
v42 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v40);
specialinvoke v41.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions: void <init>(java.lang.String)>(v42);
v43 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule PolicyEnabled>;
v44 = virtualinvoke v43.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v45 = virtualinvoke v41.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl$PolicyOptions: boolean isPolicyEnabled()>();
v46 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(v45);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v44, v46);
label8:
return v1;
}
public java.lang.String getValue(java.lang.String)
{
java.util.Map v2;
java.lang.Object v3;
java.lang.String v1;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl: java.util.Map ruleMap>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v3;
}
public java.lang.String getValue(com.novell.ldapchai.ChaiPasswordRule)
{
java.util.Map v2;
java.lang.Object v4;
com.novell.ldapchai.ChaiPasswordRule v1;
java.lang.String v3;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl;
v1 := @parameter0: com.novell.ldapchai.ChaiPasswordRule;
v2 = v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl: java.util.Map ruleMap>;
v3 = virtualinvoke v1.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
return v4;
}
public java.util.Set getKeys()
{
java.util.Map v1;
java.util.Set v2, v3;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl;
v1 = v0.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl: java.util.Map ruleMap>;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v2);
return v3;
}
public com.novell.ldapchai.ChaiEntry getPolicyEntry()
{
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl;
return v0;
}
static void <clinit>()
{
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute[] v1;
com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute v4;
java.util.Collection v6;
int v2, v3;
java.lang.String v5;
java.util.ArrayList v0;
v0 = new java.util.ArrayList;
specialinvoke v0.<java.util.ArrayList: void <init>()>();
v1 = staticinvoke <com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute: com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute[] values()>();
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = virtualinvoke v4.<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicy$Attribute: java.lang.String getLdapAttribute()>();
virtualinvoke v0.<java.util.ArrayList: boolean add(java.lang.Object)>(v5);
v3 = v3 + 1;
goto label1;
label2:
v6 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>(v0);
<com.novell.ldapchai.impl.edir.entry.NspmPasswordPolicyImpl: java.util.Collection LDAP_PASSWORD_ATTRIBUTES> = v6;
return;
}
}