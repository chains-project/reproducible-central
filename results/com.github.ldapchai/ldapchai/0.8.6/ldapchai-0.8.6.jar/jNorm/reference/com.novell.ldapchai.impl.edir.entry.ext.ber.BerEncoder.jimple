public final class com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder extends com.novell.ldapchai.impl.edir.entry.ext.ber.Ber
{
private int curSeqIndex;
private int[] seqOffset;
private static final int INITIAL_SEQUENCES;
private static final int DEFAULT_BUFSIZE;
private static final int BUF_GROWTH_FACTOR;
public void <init>()
{
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void <init>(int)>(1024);
return;
}
public void <init>(int)
{
byte[] v2;
int[] v3;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
int v1;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 := @parameter0: int;
specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber: void <init>()>();
v2 = newarray (byte)[v1];
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer> = v2;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int bufsize> = v1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = 0;
v3 = newarray (int)[16];
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset> = v3;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex> = 0;
return;
}
public void reset()
{
byte[] v2;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
int[] v6;
int v1, v3, v4, v5, v7, v8;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
label1:
v1 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
if v1 <= 0 goto label2;
v2 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v3 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v4 = v3 - 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v4;
v2[v4] = 0;
goto label1;
label2:
v5 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
if v5 <= 0 goto label3;
v6 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset>;
v7 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
v8 = v7 - 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex> = v8;
v6[v8] = 0;
goto label2;
label3:
return;
}
public int getDataLen()
{
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
int v1;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
return v1;
}
public byte[] getBuf()
{
byte[] v3;
java.lang.IllegalStateException v2;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
int v1;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
if v1 == 0 goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("BER encode error: Unbalanced SEQUENCEs.");
throw v2;
label1:
v3 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
return v3;
}
public byte[] getTrimmedBuf()
{
byte[] v2, v3;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
int v1;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int getDataLen()>();
v2 = newarray (byte)[v1];
v3 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] getBuf()>();
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v3, 0, v2, 0, v1);
return v2;
}
public void beginSeq(int)
{
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
int[] v10, v12, v14, v3, v5, v8;
int v1, v11, v13, v15, v16, v17, v18, v19, v2, v20, v4, v6, v7, v9;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 := @parameter0: int;
v2 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
v3 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset>;
v4 = lengthof v3;
if v2 < v4 goto label3;
v5 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset>;
v6 = lengthof v5;
v7 = v6 * 2;
v8 = newarray (int)[v7];
v9 = 0;
label1:
v10 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset>;
v11 = lengthof v10;
if v9 >= v11 goto label2;
v12 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset>;
v13 = v12[v9];
v8[v9] = v13;
v9 = v9 + 1;
goto label1;
label2:
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset> = v8;
label3:
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void encodeByte(int)>(v1);
v14 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset>;
v15 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
v16 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v14[v15] = v16;
specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void ensureFreeBytes(int)>(3);
v17 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v18 = v17 + 3;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v18;
v19 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
v20 = v19 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex> = v20;
return;
}
public void endSeq() throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$EncodeException
{
byte[] v12, v17, v21, v27, v31, v37, v42, v46, v52, v58;
java.lang.IllegalStateException v4;
int[] v13, v18, v22, v28, v32, v38, v43, v47, v5, v53, v59;
com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$EncodeException v63;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
int v1, v10, v11, v14, v15, v16, v19, v2, v20, v23, v24, v25, v26, v29, v3, v30, v33, v34, v35, v36, v39, v40, v41, v44, v45, v48, v49, v50, v51, v54, v55, v56, v57, v6, v60, v61, v62, v7, v8, v9;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
v2 = v1 - 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex> = v2;
v3 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
if v3 >= 0 goto label1;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("BER encode error: Unbalanced SEQUENCEs.");
throw v4;
label1:
v5 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset>;
v6 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
v7 = v5[v6];
v8 = v7 + 3;
v9 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v10 = v9 - v8;
if v10 > 127 goto label2;
v11 = (int) -2;
specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void shiftSeqData(int,int,int)>(v8, v10, v11);
v12 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v13 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset>;
v14 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
v15 = v13[v14];
v12[v15] = v10;
goto label6;
label2:
if v10 > 255 goto label3;
v16 = (int) -1;
specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void shiftSeqData(int,int,int)>(v8, v10, v16);
v17 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v18 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset>;
v19 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
v20 = v18[v19];
v17[v20] = -127;
v21 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v22 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset>;
v23 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
v24 = v22[v23];
v25 = v24 + 1;
v21[v25] = v10;
goto label6;
label3:
v26 = (int) 65535;
if v10 > v26 goto label4;
v27 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v28 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset>;
v29 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
v30 = v28[v29];
v27[v30] = -126;
v31 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v32 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset>;
v33 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
v34 = v32[v33];
v35 = v34 + 1;
v36 = v10 >> 8;
v31[v35] = v36;
v37 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v38 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset>;
v39 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
v40 = v38[v39];
v41 = v40 + 2;
v37[v41] = v10;
goto label6;
label4:
if v10 > 16777215 goto label5;
specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void shiftSeqData(int,int,int)>(v8, v10, 1);
v42 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v43 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset>;
v44 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
v45 = v43[v44];
v42[v45] = -125;
v46 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v47 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset>;
v48 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
v49 = v47[v48];
v50 = v49 + 1;
v51 = v10 >> 16;
v46[v50] = v51;
v52 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v53 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset>;
v54 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
v55 = v53[v54];
v56 = v55 + 2;
v57 = v10 >> 8;
v52[v56] = v57;
v58 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v59 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int[] seqOffset>;
v60 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int curSeqIndex>;
v61 = v59[v60];
v62 = v61 + 3;
v58[v62] = v10;
goto label6;
label5:
v63 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$EncodeException;
specialinvoke v63.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$EncodeException: void <init>(java.lang.String)>("SEQUENCE too long");
throw v63;
label6:
return;
}
private void shiftSeqData(int, int, int)
{
byte[] v4, v5;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
int v1, v2, v3, v6, v7, v8;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
if v3 <= 0 goto label1;
specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void ensureFreeBytes(int)>(v3);
label1:
v4 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v5 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v6 = v1 + v3;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v4, v1, v5, v6, v2);
v7 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v8 = v7 + v3;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v8;
return;
}
public void encodeByte(int)
{
byte[] v2;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
int v1, v3, v4;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 := @parameter0: int;
specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void ensureFreeBytes(int)>(1);
v2 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v3 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v4 = v3 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v4;
v2[v3] = v1;
return;
}
public void encodeInt(int)
{
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
int v1;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 := @parameter0: int;
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void encodeInt(int,int)>(v1, 2);
return;
}
public void encodeInt(int, int)
{
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
int v1, v2, v3, v4, v5, v6;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = 4;
v4 = v1;
label1:
v5 = v1 & -8388608;
if v5 == 0 goto label2;
v6 = v1 & -8388608;
if v6 != -8388608 goto label3;
label2:
if v3 <= 1 goto label3;
v3 = v3 - 1;
v4 = v4 << 8;
goto label1;
label3:
specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void encodeInt(int,int,int)>(v4, v2, v3);
return;
}
private void encodeInt(int, int, int)
{
byte[] v10, v15, v7;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
int v1, v11, v12, v13, v14, v16, v17, v18, v19, v2, v3, v4, v6, v8, v9;
java.lang.IllegalArgumentException v5;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v1;
if v3 <= 4 goto label1;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("BER encode error: INTEGER too long.");
throw v5;
label1:
v6 = 2 + v3;
specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void ensureFreeBytes(int)>(v6);
v7 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v8 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v9 = v8 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v9;
v7[v8] = v2;
v10 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v11 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v12 = v11 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v12;
v10[v11] = v3;
v13 = v3;
label2:
v14 = v13;
v13 = v13 - 1;
if v14 <= 0 goto label3;
v15 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v16 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v17 = v16 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v17;
v18 = v4 & -16777216;
v19 = v18 >> 24;
v15[v16] = v19;
v4 = v4 << 8;
goto label2;
label3:
return;
}
public void encodeBoolean(boolean)
{
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
boolean v1;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 := @parameter0: boolean;
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void encodeBoolean(boolean,int)>(v1, 1);
return;
}
public void encodeBoolean(boolean, int)
{
byte[] v3, v6, v9;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
byte v12;
int v10, v11, v2, v4, v5, v7, v8;
boolean v1;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 := @parameter0: boolean;
v2 := @parameter1: int;
specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void ensureFreeBytes(int)>(3);
v3 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v4 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v5 = v4 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v5;
v3[v4] = v2;
v6 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v7 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v8 = v7 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v8;
v6[v7] = 1;
v9 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v10 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v11 = v10 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v11;
if v1 == 0 goto label1;
v12 = -1;
goto label2;
label1:
v12 = 0;
label2:
v9[v10] = v12;
return;
}
public void encodeString(java.lang.String, boolean) throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$EncodeException
{
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
java.lang.String v1;
boolean v2;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void encodeString(java.lang.String,int,boolean)>(v1, 4, v2);
return;
}
public void encodeString(java.lang.String, int, boolean) throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$EncodeException
{
byte[] v11, v4;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
byte v15;
int v10, v12, v13, v14, v2, v5;
com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$EncodeException v7, v9;
java.lang.String v1;
boolean v3;
java.io.UnsupportedEncodingException v6, v8;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: boolean;
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void encodeByte(int)>(v2);
v4 = null;
if v1 != null goto label01;
v5 = 0;
goto label08;
label01:
if v3 == 0 goto label05;
label02:
v4 = virtualinvoke v1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8");
v5 = lengthof v4;
label03:
goto label08;
label04:
v6 := @caughtexception;
v7 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$EncodeException;
specialinvoke v7.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$EncodeException: void <init>(java.lang.String)>("UTF8 not available on platform");
throw v7;
label05:
v4 = virtualinvoke v1.<java.lang.String: byte[] getBytes(java.lang.String)>("8859_1");
v5 = lengthof v4;
label06:
goto label08;
label07:
v8 := @caughtexception;
v9 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$EncodeException;
specialinvoke v9.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$EncodeException: void <init>(java.lang.String)>("8859_1 not available on platform");
throw v9;
label08:
specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void encodeLength(int)>(v5);
specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void ensureFreeBytes(int)>(v5);
v10 = 0;
label09:
if v10 >= v5 goto label10;
v11 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v12 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v13 = v12 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v13;
v14 = v10;
v10 = v10 + 1;
v15 = v4[v14];
v11[v12] = v15;
goto label09;
label10:
return;
catch java.io.UnsupportedEncodingException from label02 to label03 with label04;
catch java.io.UnsupportedEncodingException from label05 to label06 with label07;
}
public void encodeOctetString(byte[], int, int, int) throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$EncodeException
{
byte[] v1, v5;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
int v2, v3, v4, v6, v7, v8;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void encodeByte(int)>(v2);
specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void encodeLength(int)>(v4);
if v4 <= 0 goto label1;
specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void ensureFreeBytes(int)>(v4);
v5 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v6 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, v3, v5, v6, v4);
v7 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v8 = v7 + v4;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v8;
label1:
return;
}
public void encodeOctetString(byte[], int) throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$EncodeException
{
byte[] v1;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
int v2, v3;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 = lengthof v1;
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void encodeOctetString(byte[],int,int,int)>(v1, v2, 0, v3);
return;
}
private void encodeLength(int) throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$EncodeException
{
byte[] v12, v15, v19, v2, v23, v26, v30, v34, v5, v8;
com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$EncodeException v38;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
int v1, v10, v11, v13, v14, v16, v17, v18, v20, v21, v22, v24, v25, v27, v28, v29, v3, v31, v32, v33, v35, v36, v37, v4, v6, v7, v9;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 := @parameter0: int;
specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void ensureFreeBytes(int)>(4);
if v1 >= 128 goto label1;
v2 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v3 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v4 = v3 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v4;
v2[v3] = v1;
goto label5;
label1:
if v1 > 255 goto label2;
v5 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v6 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v7 = v6 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v7;
v5[v6] = -127;
v8 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v9 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v10 = v9 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v10;
v8[v9] = v1;
goto label5;
label2:
v11 = (int) 65535;
if v1 > v11 goto label3;
v12 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v13 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v14 = v13 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v14;
v12[v13] = -126;
v15 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v16 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v17 = v16 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v17;
v18 = v1 >> 8;
v15[v16] = v18;
v19 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v20 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v21 = v20 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v21;
v22 = v1 & 255;
v19[v20] = v22;
goto label5;
label3:
if v1 > 16777215 goto label4;
v23 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v24 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v25 = v24 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v25;
v23[v24] = -125;
v26 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v27 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v28 = v27 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v28;
v29 = v1 >> 16;
v26[v27] = v29;
v30 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v31 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v32 = v31 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v32;
v33 = v1 >> 8;
v30[v31] = v33;
v34 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v35 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v36 = v35 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset> = v36;
v37 = v1 & 255;
v34[v35] = v37;
goto label5;
label4:
v38 = new com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$EncodeException;
specialinvoke v38.<com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$EncodeException: void <init>(java.lang.String)>("string too long");
throw v38;
label5:
return;
}
public void encodeStringArray(java.lang.String[], boolean) throws com.novell.ldapchai.impl.edir.entry.ext.ber.Ber$EncodeException
{
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
int v3, v4;
java.lang.String[] v1;
java.lang.String v5;
boolean v2;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 := @parameter0: java.lang.String[];
v2 := @parameter1: boolean;
if v1 != null goto label1;
return;
label1:
v3 = 0;
label2:
v4 = lengthof v1;
if v3 >= v4 goto label3;
v5 = v1[v3];
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: void encodeString(java.lang.String,boolean)>(v5, v2);
v3 = v3 + 1;
goto label2;
label3:
return;
}
private void ensureFreeBytes(int)
{
byte[] v10, v9;
com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder v0;
int v1, v11, v2, v3, v4, v5, v6, v7, v8;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder;
v1 := @parameter0: int;
v2 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int bufsize>;
v3 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v4 = v2 - v3;
if v4 >= v1 goto label2;
v5 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int bufsize>;
v6 = v5 * 8;
v7 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
v8 = v6 - v7;
if v8 >= v1 goto label1;
v6 = v6 + v1;
label1:
v9 = newarray (byte)[v6];
v10 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: byte[] buffer>;
v11 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.BerEncoder: int offset>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v10, 0, v9, 0, v11);
label2:
return;
}
}