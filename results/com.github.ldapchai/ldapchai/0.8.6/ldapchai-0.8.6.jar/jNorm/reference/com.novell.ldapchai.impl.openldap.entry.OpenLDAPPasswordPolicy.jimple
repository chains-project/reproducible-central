public class com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy extends com.novell.ldapchai.impl.openldap.entry.OpenLDAPEntry implements com.novell.ldapchai.ChaiPasswordPolicy
{
static final java.util.Set LDAP_PASSWORD_ATTRIBUTES;
private final java.util.Map ruleMap;
private final java.util.Map allEntryValues;
private final com.novell.ldapchai.provider.ChaiProvider provider;
public void <init>(java.lang.String, com.novell.ldapchai.provider.ChaiProvider) throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiOperationException
{
java.util.HashMap v3, v4;
java.util.function.Supplier v13, v19, v24, v9;
java.util.Map v10, v16, v17, v20, v21, v22, v5, v7;
java.lang.String v1;
com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy v0;
boolean v14, v15;
java.util.Set v6;
com.novell.ldapchai.provider.ChaiProvider v2;
java.lang.Object v11;
com.novell.ldapchai.util.internal.ChaiLogger v12, v18, v23, v8;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.novell.ldapchai.provider.ChaiProvider;
specialinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPEntry: void <init>(java.lang.String,com.novell.ldapchai.provider.ChaiProvider)>(v1, v2);
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>()>();
v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: java.util.Map ruleMap> = v3;
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>()>();
v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: java.util.Map allEntryValues> = v4;
v5 = v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: java.util.Map allEntryValues>;
v6 = <com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: java.util.Set LDAP_PASSWORD_ATTRIBUTES>;
v7 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: java.util.Map readStringAttributes(java.util.Set)>(v6);
interfaceinvoke v5.<java.util.Map: void putAll(java.util.Map)>(v7);
v8 = <com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v9 = staticinvoke <com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy$lambda_new_0__91: java.util.function.Supplier bootstrap$(com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy)>(v0);
virtualinvoke v8.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v9);
v10 = v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: java.util.Map allEntryValues>;
v11 = interfaceinvoke v10.<java.util.Map: java.lang.Object get(java.lang.Object)>("pwdCheckQuality");
v12 = <com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v13 = staticinvoke <com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy$lambda_new_1__92: java.util.function.Supplier bootstrap$(java.lang.String)>(v11);
virtualinvoke v12.<com.novell.ldapchai.util.internal.ChaiLogger: void debug(java.util.function.Supplier)>(v13);
v14 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>("1", v11);
if v14 != 0 goto label1;
v15 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>("2", v11);
if v15 == 0 goto label2;
label1:
v16 = v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: java.util.Map allEntryValues>;
v17 = specialinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: java.util.Map readCheckPasswordAttributes()>();
interfaceinvoke v16.<java.util.Map: void putAll(java.util.Map)>(v17);
label2:
v18 = <com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v19 = staticinvoke <com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy$lambda_new_2__93: java.util.function.Supplier bootstrap$(com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy)>(v0);
virtualinvoke v18.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v19);
v20 = v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: java.util.Map ruleMap>;
v21 = v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: java.util.Map allEntryValues>;
v22 = staticinvoke <com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: java.util.Map createRuleMapUsingAttributeValues(java.util.Map)>(v21);
interfaceinvoke v20.<java.util.Map: void putAll(java.util.Map)>(v22);
v23 = <com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v24 = staticinvoke <com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy$lambda_new_3__94: java.util.function.Supplier bootstrap$(com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy)>(v0);
virtualinvoke v23.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v24);
v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: com.novell.ldapchai.provider.ChaiProvider provider> = v2;
return;
}
private java.util.Map readCheckPasswordAttributes()
{
java.lang.Throwable v19;
java.net.URL v7;
java.util.HashMap v10;
java.util.function.Supplier v18;
java.util.Map v20, v6;
int v5;
java.lang.String v15, v4;
com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy v0;
boolean v13;
java.util.Properties v9;
java.util.Iterator v12;
com.novell.ldapchai.provider.ChaiConfiguration v2;
java.util.Set v11;
java.io.IOException v16;
com.novell.ldapchai.provider.ChaiSetting v3;
com.novell.ldapchai.provider.ChaiProvider v1;
java.lang.Object v14;
com.novell.ldapchai.util.internal.ChaiLogger v17;
java.io.InputStream v8;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy;
v1 = v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: com.novell.ldapchai.provider.ChaiProvider chaiProvider>;
v2 = interfaceinvoke v1.<com.novell.ldapchai.provider.ChaiProvider: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v3 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting OPENLDAP_LOCAL_PASSWORD_POLICY_URL>;
v4 = virtualinvoke v2.<com.novell.ldapchai.provider.ChaiConfiguration: java.lang.String getSetting(com.novell.ldapchai.provider.ChaiSetting)>(v3);
if v4 == null goto label1;
v5 = virtualinvoke v4.<java.lang.String: int length()>();
if v5 >= 1 goto label2;
label1:
v6 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
return v6;
label2:
v7 = new java.net.URL;
specialinvoke v7.<java.net.URL: void <init>(java.lang.String)>(v4);
v8 = virtualinvoke v7.<java.net.URL: java.io.InputStream openStream()>();
v9 = new java.util.Properties;
specialinvoke v9.<java.util.Properties: void <init>()>();
virtualinvoke v9.<java.util.Properties: void load(java.io.InputStream)>(v8);
v10 = new java.util.HashMap;
specialinvoke v10.<java.util.HashMap: void <init>()>();
v11 = virtualinvoke v9.<java.util.Properties: java.util.Set keySet()>();
v12 = interfaceinvoke v11.<java.util.Set: java.util.Iterator iterator()>();
label3:
v13 = interfaceinvoke v12.<java.util.Iterator: boolean hasNext()>();
if v13 == 0 goto label4;
v14 = interfaceinvoke v12.<java.util.Iterator: java.lang.Object next()>();
v15 = virtualinvoke v9.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(v14);
interfaceinvoke v10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v14, v15);
goto label3;
label4:
return v10;
label5:
v16 := @caughtexception;
v17 = <com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v18 = staticinvoke <com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy$lambda_readCheckPasswordAttributes_4__95: java.util.function.Supplier bootstrap$(java.lang.String,java.io.IOException)>(v4, v16);
virtualinvoke v17.<com.novell.ldapchai.util.internal.ChaiLogger: void debug(java.util.function.Supplier)>(v18);
label6:
goto label8;
label7:
v19 := @caughtexception;
throw v19;
label8:
v20 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
return v20;
catch java.io.IOException from label2 to label4 with label5;
catch java.lang.Throwable from label2 to label4 with label7;
catch java.lang.Throwable from label5 to label6 with label7;
}
private static java.util.Map createRuleMapUsingAttributeValues(java.util.Map)
{
java.util.Map v0;
boolean v21, v25, v28;
com.novell.ldapchai.ChaiPasswordRule[] v11;
java.lang.Exception v33;
com.novell.ldapchai.ChaiPasswordRule v14, v2, v31, v5, v8;
com.novell.ldapchai.util.internal.ChaiLogger v19, v34;
java.util.HashMap v1;
java.util.function.Supplier v20, v35;
int v12, v13, v30;
java.lang.String v10, v16, v17, v18, v22, v24, v26, v27, v3, v32, v4, v6, v7, v9;
com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy$Attribute v15;
java.lang.Object v23, v29;
v0 := @parameter0: java.util.Map;
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
v2 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule AllowNumeric>;
v3 = virtualinvoke v2.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v4 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(1);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, v4);
v5 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule AllowSpecial>;
v6 = virtualinvoke v5.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v7 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(1);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v7);
v8 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule CaseSensitive>;
v9 = virtualinvoke v8.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v10 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(1);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, v10);
v11 = staticinvoke <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule[] values()>();
v12 = lengthof v11;
v13 = 0;
label1:
if v13 >= v12 goto label4;
v14 = v11[v13];
v15 = staticinvoke <com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy$Attribute: com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy$Attribute attributeForRule(com.novell.ldapchai.ChaiPasswordRule)>(v14);
if v15 == null goto label2;
v16 = virtualinvoke v14.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v17 = virtualinvoke v15.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy$Attribute: java.lang.String getDefaultValue()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v16, v17);
v18 = virtualinvoke v15.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy$Attribute: java.lang.String getLdapAttribute()>();
v19 = <com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v20 = staticinvoke <com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy$lambda_createRuleMapUsingAttributeValues_5__96: java.util.function.Supplier bootstrap$(java.lang.String)>(v18);
virtualinvoke v19.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v20);
if v18 == null goto label2;
if v0 == null goto label2;
v21 = interfaceinvoke v0.<java.util.Map: boolean containsKey(java.lang.Object)>(v18);
if v21 == 0 goto label2;
v22 = virtualinvoke v14.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v23 = interfaceinvoke v0.<java.util.Map: java.lang.Object get(java.lang.Object)>(v18);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v22, v23);
label2:
v24 = virtualinvoke v14.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v25 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v24);
if v25 != 0 goto label3;
v26 = virtualinvoke v14.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v27 = virtualinvoke v14.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getDefaultValue()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v26, v27);
label3:
v13 = v13 + 1;
goto label1;
label4:
if v0 == null goto label8;
v28 = interfaceinvoke v0.<java.util.Map: boolean containsKey(java.lang.Object)>("pwdInHistory");
if v28 == 0 goto label8;
label5:
v29 = interfaceinvoke v0.<java.util.Map: java.lang.Object get(java.lang.Object)>("pwdInHistory");
v30 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v29);
if v30 <= 0 goto label8;
v31 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule UniqueRequired>;
v32 = virtualinvoke v31.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v32, "true");
label6:
goto label8;
label7:
v33 := @caughtexception;
v34 = <com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v35 = staticinvoke <com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy$lambda_createRuleMapUsingAttributeValues_6__97: java.util.function.Supplier bootstrap$(java.lang.Exception)>(v33);
virtualinvoke v34.<com.novell.ldapchai.util.internal.ChaiLogger: void error(java.util.function.Supplier)>(v35);
label8:
return v1;
catch java.lang.Exception from label5 to label6 with label7;
}
public java.lang.String getValue(java.lang.String)
{
java.util.Map v2;
java.lang.Object v3;
java.lang.String v1;
com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy v0;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: java.util.Map ruleMap>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v3;
}
public java.lang.String getValue(com.novell.ldapchai.ChaiPasswordRule)
{
java.util.Map v2;
java.lang.Object v4;
com.novell.ldapchai.ChaiPasswordRule v1;
java.lang.String v3;
com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy v0;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy;
v1 := @parameter0: com.novell.ldapchai.ChaiPasswordRule;
v2 = v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: java.util.Map ruleMap>;
v3 = virtualinvoke v1.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
return v4;
}
public java.util.Set getKeys()
{
java.util.Map v1;
java.util.Set v2, v3;
com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy v0;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy;
v1 = v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: java.util.Map ruleMap>;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v2);
return v3;
}
public com.novell.ldapchai.ChaiEntry getPolicyEntry()
{
com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy v0;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy;
return v0;
}
public com.novell.ldapchai.util.PasswordRuleHelper getRuleHelper()
{
com.novell.ldapchai.util.GenericRuleHelper v1;
com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy v0;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy;
v1 = new com.novell.ldapchai.util.GenericRuleHelper;
specialinvoke v1.<com.novell.ldapchai.util.GenericRuleHelper: void <init>(com.novell.ldapchai.ChaiPasswordPolicy)>(v0);
return v1;
}
public java.lang.String getLdapObjectClassName()
{
com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy v0;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy;
return "pwdPolicy";
}
public java.lang.String getSourceDN()
{
java.lang.String v1;
com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy v0;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy;
v1 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: java.lang.String getEntryDN()>();
return v1;
}
static void <clinit>()
{
java.util.HashSet v0;
com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy$Attribute[] v1;
int v2, v3;
java.util.Set v6;
java.lang.String v5;
com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy$Attribute v4;
v0 = new java.util.HashSet;
specialinvoke v0.<java.util.HashSet: void <init>()>();
interfaceinvoke v0.<java.util.Set: boolean add(java.lang.Object)>("pwdCheckQuality");
v1 = staticinvoke <com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy$Attribute: com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy$Attribute[] values()>();
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = virtualinvoke v4.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy$Attribute: java.lang.String getLdapAttribute()>();
interfaceinvoke v0.<java.util.Set: boolean add(java.lang.Object)>(v5);
v3 = v3 + 1;
goto label1;
label2:
v6 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v0);
<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: java.util.Set LDAP_PASSWORD_ATTRIBUTES> = v6;
return;
}
}