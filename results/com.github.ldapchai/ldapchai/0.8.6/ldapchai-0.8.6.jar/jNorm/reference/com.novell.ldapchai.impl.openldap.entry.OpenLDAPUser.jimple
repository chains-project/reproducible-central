public class com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser extends com.novell.ldapchai.impl.AbstractChaiUser implements com.novell.ldapchai.ChaiUser
{
public void <init>(java.lang.String, com.novell.ldapchai.provider.ChaiProvider)
{
java.lang.String v1;
com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser v0;
com.novell.ldapchai.provider.ChaiProvider v2;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.novell.ldapchai.provider.ChaiProvider;
specialinvoke v0.<com.novell.ldapchai.impl.AbstractChaiUser: void <init>(java.lang.String,com.novell.ldapchai.provider.ChaiProvider)>(v1, v2);
return;
}
public java.util.Set getGroups() throws com.novell.ldapchai.exception.ChaiOperationException, com.novell.ldapchai.exception.ChaiUnavailableException
{
com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser v0;
java.util.Iterator v3;
java.util.Set v2, v9;
com.novell.ldapchai.provider.ChaiProvider v6;
java.util.HashSet v1;
com.novell.ldapchai.ChaiEntryFactory v7;
java.lang.Object v5;
com.novell.ldapchai.ChaiGroup v8;
boolean v4;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser;
v1 = new java.util.HashSet;
specialinvoke v1.<java.util.HashSet: void <init>()>();
v2 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: java.util.Set readMultiStringAttribute(java.lang.String)>("memberOf");
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: com.novell.ldapchai.provider.ChaiProvider chaiProvider>;
v7 = interfaceinvoke v6.<com.novell.ldapchai.provider.ChaiProvider: com.novell.ldapchai.ChaiEntryFactory getEntryFactory()>();
v8 = virtualinvoke v7.<com.novell.ldapchai.ChaiEntryFactory: com.novell.ldapchai.ChaiGroup newChaiGroup(java.lang.String)>(v5);
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>(v8);
goto label1;
label2:
v9 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v1);
return v9;
}
public void addGroupMembership(com.novell.ldapchai.ChaiGroup) throws com.novell.ldapchai.exception.ChaiOperationException, com.novell.ldapchai.exception.ChaiUnavailableException
{
java.lang.String v2;
com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser v0;
com.novell.ldapchai.ChaiGroup v1;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser;
v1 := @parameter0: com.novell.ldapchai.ChaiGroup;
v2 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: java.lang.String getEntryDN()>();
interfaceinvoke v1.<com.novell.ldapchai.ChaiGroup: void addAttribute(java.lang.String,java.lang.String)>("member", v2);
return;
}
public void removeGroupMembership(com.novell.ldapchai.ChaiGroup) throws com.novell.ldapchai.exception.ChaiOperationException, com.novell.ldapchai.exception.ChaiUnavailableException
{
java.lang.String v2;
com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser v0;
com.novell.ldapchai.ChaiGroup v1;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser;
v1 := @parameter0: com.novell.ldapchai.ChaiGroup;
v2 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: java.lang.String getEntryDN()>();
interfaceinvoke v1.<com.novell.ldapchai.ChaiGroup: void deleteAttribute(java.lang.String,java.lang.String)>("member", v2);
return;
}
public java.time.Instant readPasswordExpirationDate() throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser v0;
long v10, v11, v8, v9;
com.novell.ldapchai.ChaiPasswordPolicy v2, v3;
java.time.Instant v1, v12;
int v7;
com.novell.ldapchai.ChaiPasswordRule v4;
java.lang.String v5, v6;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser;
v1 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: java.time.Instant readDateAttribute(java.lang.String)>("pwdChangedTime");
if v1 == null goto label1;
v2 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: com.novell.ldapchai.ChaiPasswordPolicy getPasswordPolicy()>();
if v2 == null goto label1;
v3 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: com.novell.ldapchai.ChaiPasswordPolicy getPasswordPolicy()>();
v4 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule ExpirationInterval>;
v5 = interfaceinvoke v3.<com.novell.ldapchai.ChaiPasswordPolicy: java.lang.String getValue(com.novell.ldapchai.ChaiPasswordRule)>(v4);
if v5 == null goto label1;
v6 = virtualinvoke v5.<java.lang.String: java.lang.String trim()>();
v7 = virtualinvoke v6.<java.lang.String: int length()>();
if v7 <= 0 goto label1;
v8 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(v5);
v9 = v8 * 1000L;
v10 = virtualinvoke v1.<java.time.Instant: long toEpochMilli()>();
v11 = v10 + v9;
v12 = staticinvoke <java.time.Instant: java.time.Instant ofEpochMilli(long)>(v11);
return v12;
label1:
return null;
}
public boolean isPasswordExpired() throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser v0;
java.time.Instant v1, v2;
boolean v3, v4, v5;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser;
v1 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: java.time.Instant readPasswordExpirationDate()>();
if v1 == null goto label1;
v2 = staticinvoke <java.time.Instant: java.time.Instant now()>();
v3 = virtualinvoke v2.<java.time.Instant: boolean isAfter(java.time.Instant)>(v1);
if v3 != 0 goto label2;
label1:
v4 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: boolean readBooleanAttribute(java.lang.String)>("pwdReset");
if v4 == 0 goto label3;
label2:
v5 = 1;
goto label4;
label3:
v5 = 0;
label4:
return v5;
}
public void setPassword(java.lang.String, boolean) throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiPasswordPolicyException, com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser v0;
com.novell.ldapchai.provider.ChaiConfiguration v7;
java.lang.Exception v8;
com.novell.ldapchai.provider.ChaiProvider v3, v6;
com.novell.ldapchai.impl.openldap.entry.OpenLDAPModifyPasswordRequest v4;
java.lang.String v1, v5, v9;
com.novell.ldapchai.exception.ChaiOperationException v10;
boolean v2;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
label1:
v3 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
v4 = new com.novell.ldapchai.impl.openldap.entry.OpenLDAPModifyPasswordRequest;
v5 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: java.lang.String getEntryDN()>();
v6 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
v7 = interfaceinvoke v6.<com.novell.ldapchai.provider.ChaiProvider: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
specialinvoke v4.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPModifyPasswordRequest: void <init>(java.lang.String,java.lang.String,com.novell.ldapchai.provider.ChaiConfiguration)>(v5, v1, v7);
interfaceinvoke v3.<com.novell.ldapchai.provider.ChaiProvider: javax.naming.ldap.ExtendedResponse extendedOperation(javax.naming.ldap.ExtendedRequest)>(v4);
label2:
goto label4;
label3:
v8 := @caughtexception;
v9 = virtualinvoke v8.<java.lang.Exception: java.lang.String getMessage()>();
v10 = staticinvoke <com.novell.ldapchai.exception.ChaiPasswordPolicyException: com.novell.ldapchai.exception.ChaiOperationException forErrorMessage(java.lang.String,java.lang.Throwable)>(v9, v8);
throw v10;
label4:
return;
catch javax.naming.NamingException from label1 to label2 with label3;
catch com.novell.ldapchai.exception.ChaiOperationException from label1 to label2 with label3;
}
public void changePassword(java.lang.String, java.lang.String) throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiPasswordPolicyException, com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser v0;
com.novell.ldapchai.provider.ChaiConfiguration v7;
java.lang.Exception v8;
com.novell.ldapchai.provider.ChaiProvider v3, v6;
com.novell.ldapchai.impl.openldap.entry.OpenLDAPModifyPasswordRequest v4;
java.lang.String v1, v2, v5, v9;
com.novell.ldapchai.exception.ChaiOperationException v10;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
label1:
v3 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
v4 = new com.novell.ldapchai.impl.openldap.entry.OpenLDAPModifyPasswordRequest;
v5 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: java.lang.String getEntryDN()>();
v6 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
v7 = interfaceinvoke v6.<com.novell.ldapchai.provider.ChaiProvider: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
specialinvoke v4.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPModifyPasswordRequest: void <init>(java.lang.String,java.lang.String,com.novell.ldapchai.provider.ChaiConfiguration)>(v5, v2, v7);
interfaceinvoke v3.<com.novell.ldapchai.provider.ChaiProvider: javax.naming.ldap.ExtendedResponse extendedOperation(javax.naming.ldap.ExtendedRequest)>(v4);
label2:
goto label4;
label3:
v8 := @caughtexception;
v9 = virtualinvoke v8.<java.lang.Exception: java.lang.String getMessage()>();
v10 = staticinvoke <com.novell.ldapchai.exception.ChaiPasswordPolicyException: com.novell.ldapchai.exception.ChaiOperationException forErrorMessage(java.lang.String,java.lang.Throwable)>(v9, v8);
throw v10;
label4:
return;
catch javax.naming.NamingException from label1 to label2 with label3;
catch com.novell.ldapchai.exception.ChaiOperationException from label1 to label2 with label3;
}
public void unlockPassword() throws com.novell.ldapchai.exception.ChaiOperationException, com.novell.ldapchai.exception.ChaiUnavailableException
{
com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser v0;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser;
virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: void deleteAttribute(java.lang.String,java.lang.String)>("pwdAccountLockedTime", null);
return;
}
public boolean isPasswordLocked() throws com.novell.ldapchai.exception.ChaiOperationException, com.novell.ldapchai.exception.ChaiUnavailableException
{
com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser v0;
java.time.Instant v1, v2;
boolean v3, v4;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser;
v1 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: java.time.Instant readDateAttribute(java.lang.String)>("pwdAccountLockedTime");
if v1 == null goto label1;
v2 = staticinvoke <java.time.Instant: java.time.Instant now()>();
v3 = virtualinvoke v2.<java.time.Instant: boolean isAfter(java.time.Instant)>(v1);
if v3 == 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public java.time.Instant readPasswordModificationDate() throws com.novell.ldapchai.exception.ChaiOperationException, com.novell.ldapchai.exception.ChaiUnavailableException
{
com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser v0;
java.time.Instant v1;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser;
v1 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: java.time.Instant readDateAttribute(java.lang.String)>("pwdChangedTime");
return v1;
}
public com.novell.ldapchai.ChaiPasswordPolicy getPasswordPolicy() throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser v0;
com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy v1;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser;
v1 = staticinvoke <com.novell.ldapchai.impl.openldap.entry.OpenLDAPEntries: com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy readPasswordPolicy(com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser)>(v0);
return v1;
}
public void expirePassword() throws com.novell.ldapchai.exception.ChaiOperationException, com.novell.ldapchai.exception.ChaiUnavailableException
{
com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser v0;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser;
virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: void writeStringAttribute(java.lang.String,java.lang.String)>("pwdReset", "TRUE");
return;
}
}