class com.novell.ldapchai.provider.CachingWrapper extends com.novell.ldapchai.provider.AbstractWrapper
{
private static final com.novell.ldapchai.util.internal.ChaiLogger LOGGER;
private final com.novell.ldapchai.provider.ChaiProvider realProvider;
private final com.novell.ldapchai.provider.ChaiProvider memorizedProvider;
static final boolean $assertionsDisabled;
static com.novell.ldapchai.provider.ChaiProviderImplementor forProvider(com.novell.ldapchai.provider.ChaiProviderImplementor)
{
java.lang.Class[] v9;
com.novell.ldapchai.provider.ChaiProviderImplementor v0;
java.util.function.Supplier v5;
java.lang.Class v1, v6, v8;
java.lang.Object v11;
java.lang.ClassLoader v7;
com.novell.ldapchai.provider.CachingWrapper v10;
boolean v2, v3;
com.novell.ldapchai.util.internal.ChaiLogger v4;
v0 := @parameter0: com.novell.ldapchai.provider.ChaiProviderImplementor;
v1 = interfaceinvoke v0.<com.novell.ldapchai.provider.ChaiProviderImplementor: java.lang.Class getClass()>();
v2 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(v1);
if v2 == 0 goto label1;
v3 = v0 instanceof com.novell.ldapchai.provider.CachingWrapper;
if v3 == 0 goto label1;
v4 = <com.novell.ldapchai.provider.CachingWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v5 = staticinvoke <com.novell.ldapchai.provider.CachingWrapper$lambda_forProvider_0__114: java.util.function.Supplier bootstrap$()>();
virtualinvoke v4.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier)>(v5);
return v0;
label1:
v6 = interfaceinvoke v0.<com.novell.ldapchai.provider.ChaiProviderImplementor: java.lang.Class getClass()>();
v7 = virtualinvoke v6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v8 = interfaceinvoke v0.<com.novell.ldapchai.provider.ChaiProviderImplementor: java.lang.Class getClass()>();
v9 = virtualinvoke v8.<java.lang.Class: java.lang.Class[] getInterfaces()>();
v10 = new com.novell.ldapchai.provider.CachingWrapper;
specialinvoke v10.<com.novell.ldapchai.provider.CachingWrapper: void <init>(com.novell.ldapchai.provider.ChaiProvider)>(v0);
v11 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>(v7, v9, v10);
return v11;
}
private void <init>(com.novell.ldapchai.provider.ChaiProvider)
{
java.lang.IllegalStateException v7;
java.util.function.Supplier v6;
int v11, v15;
java.lang.String v10, v14;
com.novell.ldapchai.provider.CachingWrapper v0;
boolean v3, v4;
com.novell.ldapchai.provider.ChaiConfiguration v12, v8;
com.novell.ldapchai.provider.ChaiSetting v13, v9;
com.novell.ldapchai.provider.ChaiProvider v1, v16;
java.lang.Class v2;
java.lang.Object v17;
com.novell.ldapchai.util.internal.ChaiLogger v5;
v0 := @this: com.novell.ldapchai.provider.CachingWrapper;
v1 := @parameter0: com.novell.ldapchai.provider.ChaiProvider;
specialinvoke v0.<com.novell.ldapchai.provider.AbstractWrapper: void <init>()>();
v2 = interfaceinvoke v1.<com.novell.ldapchai.provider.ChaiProvider: java.lang.Class getClass()>();
v3 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(v2);
if v3 == 0 goto label1;
v4 = v1 instanceof com.novell.ldapchai.provider.CachingWrapper;
if v4 == 0 goto label1;
v5 = <com.novell.ldapchai.provider.CachingWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v6 = staticinvoke <com.novell.ldapchai.provider.CachingWrapper$lambda_new_1__115: java.util.function.Supplier bootstrap$()>();
virtualinvoke v5.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier)>(v6);
v7 = new java.lang.IllegalStateException;
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("chaiProvider is already wrapped for caching");
throw v7;
label1:
v8 = interfaceinvoke v1.<com.novell.ldapchai.provider.ChaiProvider: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v9 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting CACHE_MAXIMUM_SIZE>;
v10 = virtualinvoke v8.<com.novell.ldapchai.provider.ChaiConfiguration: java.lang.String getSetting(com.novell.ldapchai.provider.ChaiSetting)>(v9);
v11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v10);
v12 = interfaceinvoke v1.<com.novell.ldapchai.provider.ChaiProvider: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v13 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting CACHE_MAXIMUM_AGE>;
v14 = virtualinvoke v12.<com.novell.ldapchai.provider.ChaiConfiguration: java.lang.String getSetting(com.novell.ldapchai.provider.ChaiSetting)>(v13);
v15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v14);
v0.<com.novell.ldapchai.provider.CachingWrapper: com.novell.ldapchai.provider.ChaiProvider realProvider> = v1;
v16 = v0.<com.novell.ldapchai.provider.CachingWrapper: com.novell.ldapchai.provider.ChaiProvider realProvider>;
v17 = staticinvoke <com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.lang.Object forObject(java.lang.Object,int,int)>(v16, v11, v15);
v0.<com.novell.ldapchai.provider.CachingWrapper: com.novell.ldapchai.provider.ChaiProvider memorizedProvider> = v17;
return;
}
public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
{
java.lang.Throwable v11;
java.lang.Object[] v3;
com.novell.ldapchai.provider.ChaiProvider v6, v8;
java.lang.reflect.InvocationTargetException v10;
java.lang.'annotation'.Annotation v4, v5;
java.lang.Object v1, v7, v9;
com.novell.ldapchai.provider.CachingWrapper v0;
java.lang.reflect.Method v2;
v0 := @this: com.novell.ldapchai.provider.CachingWrapper;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.reflect.Method;
v3 := @parameter2: java.lang.Object[];
v4 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/novell/ldapchai/provider/ChaiProvider$ModifyOperation;");
if v4 == null goto label1;
virtualinvoke v0.<com.novell.ldapchai.provider.CachingWrapper: void clearCache()>();
label1:
v5 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/novell/ldapchai/provider/ChaiProvider$LdapOperation;");
if v5 == null goto label3;
v6 = v0.<com.novell.ldapchai.provider.CachingWrapper: com.novell.ldapchai.provider.ChaiProvider memorizedProvider>;
v7 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v6, v3);
label2:
return v7;
label3:
v8 = v0.<com.novell.ldapchai.provider.CachingWrapper: com.novell.ldapchai.provider.ChaiProvider realProvider>;
v9 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v8, v3);
label4:
return v9;
label5:
v10 := @caughtexception;
v11 = virtualinvoke v10.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();
throw v11;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
catch java.lang.reflect.InvocationTargetException from label3 to label4 with label5;
}
public void clearCache()
{
java.lang.AssertionError v4;
com.novell.ldapchai.provider.CachingWrapper v0;
boolean v1, v3;
com.novell.ldapchai.provider.ChaiProvider v2, v5;
v0 := @this: com.novell.ldapchai.provider.CachingWrapper;
v1 = <com.novell.ldapchai.provider.CachingWrapper: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = v0.<com.novell.ldapchai.provider.CachingWrapper: com.novell.ldapchai.provider.ChaiProvider memorizedProvider>;
v3 = v2 instanceof com.novell.ldapchai.provider.CachingWrapper$Memorizer;
if v3 != 0 goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
v5 = v0.<com.novell.ldapchai.provider.CachingWrapper: com.novell.ldapchai.provider.ChaiProvider memorizedProvider>;
virtualinvoke v5.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: void clearCache()>();
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
com.novell.ldapchai.util.internal.ChaiLogger v3;
v0 = class "Lcom/novell/ldapchai/provider/CachingWrapper;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<com.novell.ldapchai.provider.CachingWrapper: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <com.novell.ldapchai.util.internal.ChaiLogger: com.novell.ldapchai.util.internal.ChaiLogger getLogger(java.lang.Class)>(class "Lcom/novell/ldapchai/provider/CachingWrapper;");
<com.novell.ldapchai.provider.CachingWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER> = v3;
return;
}
}