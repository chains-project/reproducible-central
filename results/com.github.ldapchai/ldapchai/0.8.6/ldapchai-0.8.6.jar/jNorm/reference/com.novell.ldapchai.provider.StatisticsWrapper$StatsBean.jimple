class com.novell.ldapchai.provider.StatisticsWrapper$StatsBean extends java.lang.Object implements com.novell.ldapchai.provider.ProviderStatistics
{
private final java.util.Map incrementerMap;
private final java.util.Map timestampMap;
void <init>()
{
java.util.concurrent.atomic.LongAdder v8;
java.util.concurrent.ConcurrentHashMap v2;
java.util.HashMap v1;
java.time.Instant v14;
com.novell.ldapchai.provider.ProviderStatistics$TimestampStatistic[] v9;
com.novell.ldapchai.provider.StatisticsWrapper$StatsBean v0;
com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic v6;
java.util.Map v13, v7;
int v10, v11, v4, v5;
com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic[] v3;
com.novell.ldapchai.provider.ProviderStatistics$TimestampStatistic v12;
v0 := @this: com.novell.ldapchai.provider.StatisticsWrapper$StatsBean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
v0.<com.novell.ldapchai.provider.StatisticsWrapper$StatsBean: java.util.Map incrementerMap> = v1;
v2 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<com.novell.ldapchai.provider.StatisticsWrapper$StatsBean: java.util.Map timestampMap> = v2;
v3 = staticinvoke <com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic: com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic[] values()>();
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label2;
v6 = v3[v5];
v7 = v0.<com.novell.ldapchai.provider.StatisticsWrapper$StatsBean: java.util.Map incrementerMap>;
v8 = new java.util.concurrent.atomic.LongAdder;
specialinvoke v8.<java.util.concurrent.atomic.LongAdder: void <init>()>();
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v8);
v5 = v5 + 1;
goto label1;
label2:
v9 = staticinvoke <com.novell.ldapchai.provider.ProviderStatistics$TimestampStatistic: com.novell.ldapchai.provider.ProviderStatistics$TimestampStatistic[] values()>();
v10 = lengthof v9;
v11 = 0;
label3:
if v11 >= v10 goto label4;
v12 = v9[v11];
v13 = v0.<com.novell.ldapchai.provider.StatisticsWrapper$StatsBean: java.util.Map timestampMap>;
v14 = staticinvoke <java.time.Instant: java.time.Instant now()>();
interfaceinvoke v13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v12, v14);
v11 = v11 + 1;
goto label3;
label4:
return;
}
public long getIncrementorStatistic(com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic)
{
java.util.Map v2;
java.lang.Object v3;
long v4;
com.novell.ldapchai.provider.StatisticsWrapper$StatsBean v0;
com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic v1;
v0 := @this: com.novell.ldapchai.provider.StatisticsWrapper$StatsBean;
v1 := @parameter0: com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic;
v2 = v0.<com.novell.ldapchai.provider.StatisticsWrapper$StatsBean: java.util.Map incrementerMap>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
v4 = virtualinvoke v3.<java.util.concurrent.atomic.LongAdder: long sum()>();
return v4;
}
public java.time.Instant getTimestampStatistic(com.novell.ldapchai.provider.ProviderStatistics$TimestampStatistic)
{
java.util.Map v2;
java.lang.Object v3;
com.novell.ldapchai.provider.ProviderStatistics$TimestampStatistic v1;
com.novell.ldapchai.provider.StatisticsWrapper$StatsBean v0;
v0 := @this: com.novell.ldapchai.provider.StatisticsWrapper$StatsBean;
v1 := @parameter0: com.novell.ldapchai.provider.ProviderStatistics$TimestampStatistic;
v2 = v0.<com.novell.ldapchai.provider.StatisticsWrapper$StatsBean: java.util.Map timestampMap>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v3;
}
void incrementStatistic(com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic)
{
java.util.Map v2;
java.lang.Object v3;
com.novell.ldapchai.provider.StatisticsWrapper$StatsBean v0;
com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic v1;
v0 := @this: com.novell.ldapchai.provider.StatisticsWrapper$StatsBean;
v1 := @parameter0: com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic;
v2 = v0.<com.novell.ldapchai.provider.StatisticsWrapper$StatsBean: java.util.Map incrementerMap>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
virtualinvoke v3.<java.util.concurrent.atomic.LongAdder: void increment()>();
return;
}
void markTimestampStatistic(com.novell.ldapchai.provider.ProviderStatistics$TimestampStatistic)
{
java.util.Map v2;
java.time.Instant v3;
com.novell.ldapchai.provider.ProviderStatistics$TimestampStatistic v1;
com.novell.ldapchai.provider.StatisticsWrapper$StatsBean v0;
v0 := @this: com.novell.ldapchai.provider.StatisticsWrapper$StatsBean;
v1 := @parameter0: com.novell.ldapchai.provider.ProviderStatistics$TimestampStatistic;
v2 = v0.<com.novell.ldapchai.provider.StatisticsWrapper$StatsBean: java.util.Map timestampMap>;
v3 = staticinvoke <java.time.Instant: java.time.Instant now()>();
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v3);
return;
}
public java.util.Map allStatistics()
{
com.novell.ldapchai.provider.ProviderStatistics$TimestampStatistic[] v10;
com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic v5;
java.util.LinkedHashMap v1;
java.util.Map v15, v18, v7;
int v11, v12, v3, v4;
java.lang.String v14, v17, v6, v9;
com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic[] v2;
com.novell.ldapchai.provider.StatisticsWrapper$StatsBean v0;
java.lang.Object v16, v8;
com.novell.ldapchai.provider.ProviderStatistics$TimestampStatistic v13;
v0 := @this: com.novell.ldapchai.provider.StatisticsWrapper$StatsBean;
v1 = new java.util.LinkedHashMap;
specialinvoke v1.<java.util.LinkedHashMap: void <init>()>();
v2 = staticinvoke <com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic: com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic[] values()>();
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v6 = virtualinvoke v5.<com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic: java.lang.String name()>();
v7 = v0.<com.novell.ldapchai.provider.StatisticsWrapper$StatsBean: java.util.Map incrementerMap>;
v8 = interfaceinvoke v7.<java.util.Map: java.lang.Object get(java.lang.Object)>(v5);
v9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(v8);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v9);
v4 = v4 + 1;
goto label1;
label2:
v10 = staticinvoke <com.novell.ldapchai.provider.ProviderStatistics$TimestampStatistic: com.novell.ldapchai.provider.ProviderStatistics$TimestampStatistic[] values()>();
v11 = lengthof v10;
v12 = 0;
label3:
if v12 >= v11 goto label4;
v13 = v10[v12];
v14 = virtualinvoke v13.<com.novell.ldapchai.provider.ProviderStatistics$TimestampStatistic: java.lang.String name()>();
v15 = v0.<com.novell.ldapchai.provider.StatisticsWrapper$StatsBean: java.util.Map timestampMap>;
v16 = interfaceinvoke v15.<java.util.Map: java.lang.Object get(java.lang.Object)>(v13);
v17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(v16);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v14, v17);
v12 = v12 + 1;
goto label3;
label4:
v18 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v1);
return v18;
}
}