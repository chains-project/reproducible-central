class com.novell.ldapchai.provider.WireTraceWrapper extends com.novell.ldapchai.provider.AbstractWrapper
{
private static final com.novell.ldapchai.util.internal.ChaiLogger LOGGER;
private final java.util.concurrent.atomic.AtomicLong operationCounter;
static com.novell.ldapchai.provider.ChaiProviderImplementor forProvider(com.novell.ldapchai.provider.ChaiProviderImplementor)
{
java.lang.IllegalStateException v7;
com.novell.ldapchai.provider.WireTraceWrapper v17;
com.novell.ldapchai.provider.ChaiProviderImplementor v0;
java.util.function.Supplier v12, v6;
java.lang.String v3;
boolean v10, v4, v9;
com.novell.ldapchai.provider.ChaiConfiguration v1;
java.lang.Class[] v16;
com.novell.ldapchai.provider.ChaiSetting v2;
java.lang.Class v13, v15, v8;
java.lang.Object v18;
java.lang.ClassLoader v14;
com.novell.ldapchai.util.internal.ChaiLogger v11, v5;
v0 := @parameter0: com.novell.ldapchai.provider.ChaiProviderImplementor;
v1 = interfaceinvoke v0.<com.novell.ldapchai.provider.ChaiProviderImplementor: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v2 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting WIRETRACE_ENABLE>;
v3 = virtualinvoke v1.<com.novell.ldapchai.provider.ChaiConfiguration: java.lang.String getSetting(com.novell.ldapchai.provider.ChaiSetting)>(v2);
v4 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(v3);
if v4 != 0 goto label1;
v5 = <com.novell.ldapchai.provider.WireTraceWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v6 = staticinvoke <com.novell.ldapchai.provider.WireTraceWrapper$lambda_forProvider_0__209: java.util.function.Supplier bootstrap$()>();
virtualinvoke v5.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier)>(v6);
v7 = new java.lang.IllegalStateException;
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("attempt to obtain WireTrace wrapper when watchdog is not enabled in chai config");
throw v7;
label1:
v8 = interfaceinvoke v0.<com.novell.ldapchai.provider.ChaiProviderImplementor: java.lang.Class getClass()>();
v9 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(v8);
if v9 == 0 goto label2;
v10 = v0 instanceof com.novell.ldapchai.provider.WireTraceWrapper;
if v10 == 0 goto label2;
v11 = <com.novell.ldapchai.provider.WireTraceWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v12 = staticinvoke <com.novell.ldapchai.provider.WireTraceWrapper$lambda_forProvider_1__208: java.util.function.Supplier bootstrap$()>();
virtualinvoke v11.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier)>(v12);
return v0;
label2:
v13 = interfaceinvoke v0.<com.novell.ldapchai.provider.ChaiProviderImplementor: java.lang.Class getClass()>();
v14 = virtualinvoke v13.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v15 = interfaceinvoke v0.<com.novell.ldapchai.provider.ChaiProviderImplementor: java.lang.Class getClass()>();
v16 = virtualinvoke v15.<java.lang.Class: java.lang.Class[] getInterfaces()>();
v17 = new com.novell.ldapchai.provider.WireTraceWrapper;
specialinvoke v17.<com.novell.ldapchai.provider.WireTraceWrapper: void <init>(com.novell.ldapchai.provider.ChaiProviderImplementor)>(v0);
v18 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>(v14, v16, v17);
return v18;
}
void <init>(com.novell.ldapchai.provider.ChaiProviderImplementor)
{
java.util.concurrent.atomic.AtomicLong v2;
com.novell.ldapchai.provider.ChaiProviderImplementor v1;
com.novell.ldapchai.provider.WireTraceWrapper v0;
v0 := @this: com.novell.ldapchai.provider.WireTraceWrapper;
v1 := @parameter0: com.novell.ldapchai.provider.ChaiProviderImplementor;
specialinvoke v0.<com.novell.ldapchai.provider.AbstractWrapper: void <init>()>();
v2 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v2.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);
v0.<com.novell.ldapchai.provider.WireTraceWrapper: java.util.concurrent.atomic.AtomicLong operationCounter> = v2;
v0.<com.novell.ldapchai.provider.WireTraceWrapper: com.novell.ldapchai.provider.ChaiProviderImplementor realProvider> = v1;
return;
}
public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
{
java.lang.Throwable v10;
java.lang.Object[] v3;
com.novell.ldapchai.provider.WireTraceWrapper v0;
com.novell.ldapchai.provider.ChaiProviderImplementor v7;
java.lang.RuntimeException v12;
java.lang.Exception v11;
java.lang.reflect.InvocationTargetException v9;
java.lang.'annotation'.Annotation v4;
java.lang.Object v1, v6, v8;
java.lang.String v13, v14;
java.lang.reflect.Method v2;
boolean v5;
v0 := @this: com.novell.ldapchai.provider.WireTraceWrapper;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.reflect.Method;
v3 := @parameter2: java.lang.Object[];
v4 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/novell/ldapchai/provider/ChaiProvider$LdapOperation;");
if v4 == null goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
if v5 == 0 goto label4;
v6 = specialinvoke v0.<com.novell.ldapchai.provider.WireTraceWrapper: java.lang.Object traceInvocation(java.lang.reflect.Method,java.lang.Object[])>(v2, v3);
label3:
return v6;
label4:
v7 = v0.<com.novell.ldapchai.provider.WireTraceWrapper: com.novell.ldapchai.provider.ChaiProviderImplementor realProvider>;
v8 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v7, v3);
label5:
return v8;
label6:
v9 := @caughtexception;
v10 = virtualinvoke v9.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
throw v10;
label7:
v11 := @caughtexception;
v12 = new java.lang.RuntimeException;
v13 = virtualinvoke v11.<java.lang.Exception: java.lang.String getMessage()>();
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unexpected invocation exception: \u0001");
specialinvoke v12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v14, v11);
throw v12;
catch java.lang.reflect.InvocationTargetException from label2 to label3 with label6;
catch java.lang.reflect.InvocationTargetException from label4 to label5 with label6;
catch java.lang.Exception from label2 to label3 with label7;
catch java.lang.Exception from label4 to label5 with label7;
}
private java.lang.Object traceInvocation(java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
{
java.lang.Object[] v2;
com.novell.ldapchai.provider.WireTraceWrapper v0;
long v3;
com.novell.ldapchai.provider.ChaiProviderImplementor v10, v4;
java.util.function.Supplier v15, v8;
java.time.Duration v13;
java.lang.String v5, v6;
java.lang.reflect.Method v1;
java.time.Instant v12, v9;
java.lang.Object v11;
com.novell.ldapchai.util.internal.ChaiLogger v14, v7;
v0 := @this: com.novell.ldapchai.provider.WireTraceWrapper;
v1 := @parameter0: java.lang.reflect.Method;
v2 := @parameter1: java.lang.Object[];
v3 = specialinvoke v0.<com.novell.ldapchai.provider.WireTraceWrapper: long getNextCounter()>();
v4 = v0.<com.novell.ldapchai.provider.WireTraceWrapper: com.novell.ldapchai.provider.ChaiProviderImplementor realProvider>;
v5 = interfaceinvoke v4.<com.novell.ldapchai.provider.ChaiProviderImplementor: java.lang.String getIdentifier()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,long)>(v5, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("id=\u0001,op#\u0001");
v7 = <com.novell.ldapchai.provider.WireTraceWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v8 = staticinvoke <com.novell.ldapchai.provider.WireTraceWrapper$lambda_traceInvocation_2__210: java.util.function.Supplier bootstrap$(java.lang.String,java.lang.reflect.Method,java.lang.Object[])>(v6, v1, v2);
virtualinvoke v7.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v8);
v9 = staticinvoke <java.time.Instant: java.time.Instant now()>();
v10 = v0.<com.novell.ldapchai.provider.WireTraceWrapper: com.novell.ldapchai.provider.ChaiProviderImplementor realProvider>;
v11 = virtualinvoke v1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v10, v2);
v12 = staticinvoke <java.time.Instant: java.time.Instant now()>();
v13 = staticinvoke <java.time.Duration: java.time.Duration between(java.time.temporal.Temporal,java.time.temporal.Temporal)>(v9, v12);
v14 = <com.novell.ldapchai.provider.WireTraceWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v15 = staticinvoke <com.novell.ldapchai.provider.WireTraceWrapper$lambda_traceInvocation_3__211: java.util.function.Supplier bootstrap$(com.novell.ldapchai.provider.WireTraceWrapper,java.lang.String,java.lang.Object,java.time.Duration)>(v0, v6, v11, v13);
virtualinvoke v14.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v15);
return v11;
}
private long getNextCounter()
{
java.util.concurrent.atomic.AtomicLong v1;
long v2;
com.novell.ldapchai.provider.WireTraceWrapper v0;
v0 := @this: com.novell.ldapchai.provider.WireTraceWrapper;
v1 = v0.<com.novell.ldapchai.provider.WireTraceWrapper: java.util.concurrent.atomic.AtomicLong operationCounter>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();
return v2;
}
private java.lang.String objectToDebugString(java.lang.Object)
{
com.novell.ldapchai.provider.WireTraceWrapper v0;
java.util.function.Supplier v8;
com.google.gson.GsonBuilder v2, v3;
java.lang.Exception v6;
com.google.gson.Gson v4;
java.lang.Object v1;
java.lang.String v10, v5, v9;
com.novell.ldapchai.util.internal.ChaiLogger v7;
v0 := @this: com.novell.ldapchai.provider.WireTraceWrapper;
v1 := @parameter0: java.lang.Object;
if v1 != null goto label1;
return "[null]";
label1:
v2 = new com.google.gson.GsonBuilder;
specialinvoke v2.<com.google.gson.GsonBuilder: void <init>()>();
v3 = virtualinvoke v2.<com.google.gson.GsonBuilder: com.google.gson.GsonBuilder disableHtmlEscaping()>();
v4 = virtualinvoke v3.<com.google.gson.GsonBuilder: com.google.gson.Gson create()>();
v5 = virtualinvoke v4.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(v1);
label2:
return v5;
label3:
v6 := @caughtexception;
v7 = <com.novell.ldapchai.provider.WireTraceWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v8 = staticinvoke <com.novell.ldapchai.provider.WireTraceWrapper$lambda_objectToDebugString_4__212: java.util.function.Supplier bootstrap$(java.lang.Exception)>(v6);
virtualinvoke v7.<com.novell.ldapchai.util.internal.ChaiLogger: void debug(java.util.function.Supplier)>(v8);
v9 = virtualinvoke v6.<java.lang.Exception: java.lang.String getMessage()>();
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("[error:\u0001]");
return v10;
catch java.lang.Exception from label1 to label2 with label3;
}
static transient java.lang.String methodToDebugStr(java.lang.reflect.Method, java.lang.Object[])
{
java.lang.Throwable v9;
java.lang.Object[] v1;
java.util.Iterator v5;
java.util.List v4;
java.lang.Object v7;
java.lang.StringBuilder v2;
java.lang.String v11, v3, v8;
java.lang.reflect.Method v0;
boolean v10, v6;
v0 := @parameter0: java.lang.reflect.Method;
v1 := @parameter1: java.lang.Object[];
v2 = new java.lang.StringBuilder;
specialinvoke v2.<java.lang.StringBuilder: void <init>()>();
v3 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.String getName()>();
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v3);
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);
if v1 == null goto label6;
v4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v5 = interfaceinvoke v4.<java.util.List: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label6;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
label2:
v8 = staticinvoke <com.novell.ldapchai.provider.WireTraceWrapper: java.lang.String parameterToString(java.lang.Object)>(v7);
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v8);
label3:
goto label5;
label4:
v9 := @caughtexception;
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<binary>");
label5:
v10 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label1;
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);
goto label1;
label6:
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);
v11 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.String toString()>();
return v11;
catch java.lang.Throwable from label2 to label3 with label4;
}
private static java.lang.String parameterToString(java.lang.Object)
{
int v4, v5;
java.lang.Class v1;
java.lang.Object v0, v6;
java.lang.StringBuilder v3;
java.lang.String v7, v8, v9;
boolean v2;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
return "null";
label1:
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.Class: boolean isArray()>();
if v2 == 0 goto label4;
v3 = new java.lang.StringBuilder;
specialinvoke v3.<java.lang.StringBuilder: void <init>()>();
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");
v4 = lengthof v0;
v5 = 0;
label2:
if v5 >= v4 goto label3;
v6 = v0[v5];
v7 = staticinvoke <com.novell.ldapchai.provider.WireTraceWrapper: java.lang.String parameterToString(java.lang.Object)>(v6);
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v7);
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");
v5 = v5 + 1;
goto label2;
label3:
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
v8 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.String toString()>();
return v8;
label4:
v9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(v0);
return v9;
}
static void <clinit>()
{
com.novell.ldapchai.util.internal.ChaiLogger v0;
v0 = staticinvoke <com.novell.ldapchai.util.internal.ChaiLogger: com.novell.ldapchai.util.internal.ChaiLogger getLogger(java.lang.Class)>(class "Lcom/novell/ldapchai/provider/WireTraceWrapper;");
<com.novell.ldapchai.provider.WireTraceWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER> = v0;
return;
}
}