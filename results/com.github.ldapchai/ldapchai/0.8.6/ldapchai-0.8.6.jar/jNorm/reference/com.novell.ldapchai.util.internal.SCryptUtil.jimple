public class com.novell.ldapchai.util.internal.SCryptUtil extends java.lang.Object
{
private static final int SCRYPT_LENGTH;
private static final java.nio.charset.Charset CHARSET;
public void <init>()
{
com.novell.ldapchai.util.internal.SCryptUtil v0;
v0 := @this: com.novell.ldapchai.util.internal.SCryptUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static boolean check(java.lang.String, java.lang.String)
{
byte[] v11, v14, v22, v23;
java.lang.IllegalStateException v34, v36;
com.novell.ldapchai.util.internal.StringHelper$Base64Options[] v10, v13;
byte v26, v29, v30, v31;
boolean v32, v5;
java.io.UnsupportedEncodingException v33;
java.lang.String[] v2;
long v15, v16, v8;
java.nio.charset.Charset v21;
int v18, v19, v20, v24, v25, v27, v28, v3;
java.lang.String v0, v1, v12, v37, v38, v4, v7, v9;
double v17;
java.io.IOException v35;
java.lang.IllegalArgumentException v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
label01:
v2 = virtualinvoke v1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\$");
v3 = lengthof v2;
if v3 != 5 goto label02;
v4 = v2[1];
v5 = virtualinvoke v4.<java.lang.String: boolean equals(java.lang.Object)>("s0");
if v5 != 0 goto label03;
label02:
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid hashed value");
throw v6;
label03:
v7 = v2[2];
v8 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(v7, 16);
v9 = v2[3];
v10 = newarray (com.novell.ldapchai.util.internal.StringHelper$Base64Options)[0];
v11 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: byte[] base64Decode(java.lang.CharSequence,com.novell.ldapchai.util.internal.StringHelper$Base64Options[])>(v9, v10);
v12 = v2[4];
v13 = newarray (com.novell.ldapchai.util.internal.StringHelper$Base64Options)[0];
v14 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: byte[] base64Decode(java.lang.CharSequence,com.novell.ldapchai.util.internal.StringHelper$Base64Options[])>(v12, v13);
v15 = v8 >> 16;
v16 = v15 & 65535L;
v17 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, v16);
v18 = v8 >> 8;
v19 = v18 & 255;
v20 = v8 & 255;
v21 = <com.novell.ldapchai.util.internal.SCryptUtil: java.nio.charset.Charset CHARSET>;
v22 = virtualinvoke v0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v21);
v23 = staticinvoke <org.bouncycastle.crypto.generators.SCrypt: byte[] generate(byte[],byte[],int,int,int,int)>(v22, v11, v17, v19, v20, 64);
v24 = lengthof v14;
v25 = lengthof v23;
if v24 == v25 goto label05;
label04:
return 0;
label05:
v26 = 0;
v27 = 0;
label06:
v28 = lengthof v14;
if v27 >= v28 goto label07;
v29 = v14[v27];
v30 = v23[v27];
v31 = v29 ^ v30;
v26 = v26 | v31;
v27 = v27 + 1;
goto label06;
label07:
if v26 != 0 goto label08;
v32 = 1;
goto label09;
label08:
v32 = 0;
label09:
return v32;
label10:
v33 := @caughtexception;
v34 = new java.lang.IllegalStateException;
specialinvoke v34.<java.lang.IllegalStateException: void <init>(java.lang.String)>("JVM doesn\'t support UTF-8?");
throw v34;
label11:
v35 := @caughtexception;
v36 = new java.lang.IllegalStateException;
v37 = virtualinvoke v35.<java.io.IOException: java.lang.String getMessage()>();
v38 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v37) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Issue decoding base64 hash: \u0001");
specialinvoke v36.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v38);
throw v36;
catch java.io.UnsupportedEncodingException from label01 to label04 with label10;
catch java.io.UnsupportedEncodingException from label05 to label09 with label10;
catch java.io.IOException from label01 to label04 with label11;
catch java.io.IOException from label05 to label09 with label11;
}
public static java.lang.String scrypt(java.lang.String)
{
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <com.novell.ldapchai.util.internal.SCryptUtil: java.lang.String scrypt(java.lang.String,int,int)>(v0, 16, 16);
return v1;
}
public static java.lang.String scrypt(java.lang.String, int, int)
{
byte[] v4, v7, v8;
java.lang.IllegalStateException v20;
com.novell.ldapchai.util.internal.StringHelper$Base64Options[] v14, v16;
java.security.SecureRandom v5;
java.security.GeneralSecurityException v19;
java.nio.charset.Charset v6;
int v1, v10, v11, v12, v2, v3, v9;
java.lang.String v0, v13, v15, v17, v18;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: int;
label1:
v3 = staticinvoke <com.novell.ldapchai.util.internal.SCryptUtil: int nextPowerOf2(int)>(v2);
v4 = newarray (byte)[v1];
v5 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstanceStrong()>();
virtualinvoke v5.<java.security.SecureRandom: void nextBytes(byte[])>(v4);
v6 = <com.novell.ldapchai.util.internal.SCryptUtil: java.nio.charset.Charset CHARSET>;
v7 = virtualinvoke v0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v6);
v8 = staticinvoke <org.bouncycastle.crypto.generators.SCrypt: byte[] generate(byte[],byte[],int,int,int,int)>(v7, v4, v3, 16, 16, 64);
v9 = staticinvoke <com.novell.ldapchai.util.internal.SCryptUtil: int log2(int)>(v3);
v10 = v9 << 16;
v11 = v10 | 4096;
v12 = v11 | 16;
v13 = staticinvoke <java.lang.Long: java.lang.String toString(long,int)>(v12, 16);
v14 = newarray (com.novell.ldapchai.util.internal.StringHelper$Base64Options)[0];
v15 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: java.lang.String base64Encode(byte[],com.novell.ldapchai.util.internal.StringHelper$Base64Options[])>(v4, v14);
v16 = newarray (com.novell.ldapchai.util.internal.StringHelper$Base64Options)[0];
v17 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: java.lang.String base64Encode(byte[],com.novell.ldapchai.util.internal.StringHelper$Base64Options[])>(v8, v16);
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>(v13, v15, v17) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("$s0$\u0001$\u0001$\u0001");
label2:
return v18;
label3:
v19 := @caughtexception;
v20 = new java.lang.IllegalStateException;
specialinvoke v20.<java.lang.IllegalStateException: void <init>(java.lang.String)>("JVM doesn\'t support SHA1PRNG or HMAC_SHA256?");
throw v20;
catch java.security.GeneralSecurityException from label1 to label2 with label3;
}
private static int log2(int)
{
int v0, v1, v2, v3, v4, v5;
v0 := @parameter0: int;
v1 = 0;
v2 = v0;
v3 = v0 & -65536;
if v3 == 0 goto label1;
v2 = v0 >>> 16;
v1 = 16;
label1:
if v2 < 256 goto label2;
v2 = v2 >>> 8;
v1 = v1 + 8;
label2:
if v2 < 16 goto label3;
v2 = v2 >>> 4;
v1 = v1 + 4;
label3:
if v2 < 4 goto label4;
v2 = v2 >>> 2;
v1 = v1 + 2;
label4:
v4 = v2 >>> 1;
v5 = v1 + v4;
return v5;
}
private static int nextPowerOf2(int)
{
int v0, v1, v10, v11, v12, v13, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: int;
v1 = v0 - 1;
v2 = v1 >> 1;
v3 = v1 | v2;
v4 = v3 >> 2;
v5 = v3 | v4;
v6 = v5 >> 4;
v7 = v5 | v6;
v8 = v7 >> 8;
v9 = v7 | v8;
v10 = v9 >> 16;
v11 = v9 | v10;
v12 = v11 + 1;
v13 = staticinvoke <java.lang.Math: int max(int,int)>(16, v12);
return v13;
}
static void <clinit>()
{
java.nio.charset.Charset v0;
v0 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
<com.novell.ldapchai.util.internal.SCryptUtil: java.nio.charset.Charset CHARSET> = v0;
return;
}
}