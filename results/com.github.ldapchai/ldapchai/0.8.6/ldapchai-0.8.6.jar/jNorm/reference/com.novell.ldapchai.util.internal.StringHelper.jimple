public final class com.novell.ldapchai.util.internal.StringHelper extends java.lang.Object
{
private void <init>()
{
com.novell.ldapchai.util.internal.StringHelper v0;
v0 := @this: com.novell.ldapchai.util.internal.StringHelper;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static boolean convertStrToBoolean(java.lang.String)
{
java.lang.String v0, v2, v4, v6, v8;
boolean v1, v10, v3, v5, v7, v9;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: boolean isEmpty(java.lang.CharSequence)>(v0);
if v1 != 0 goto label2;
v2 = "true";
v3 = virtualinvoke v2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v0);
if v3 != 0 goto label1;
v4 = "1";
v5 = virtualinvoke v4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v0);
if v5 != 0 goto label1;
v6 = "yes";
v7 = virtualinvoke v6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v0);
if v7 != 0 goto label1;
v8 = "y";
v9 = virtualinvoke v8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v0);
if v9 == 0 goto label2;
label1:
v10 = 1;
goto label3;
label2:
v10 = 0;
label3:
return v10;
}
public static int convertStrToInt(java.lang.String, int)
{
int v1, v2;
java.lang.String v0;
java.lang.Exception v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
if v0 != null goto label1;
return v1;
label1:
v2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v0);
label2:
return v2;
label3:
v3 := @caughtexception;
return v1;
catch java.lang.Exception from label1 to label2 with label3;
}
public static long convertStrToLong(java.lang.String, long)
{
long v1, v2;
java.lang.String v0;
java.lang.Exception v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: long;
if v0 != null goto label1;
return v1;
label1:
v2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(v0);
label2:
return v2;
label3:
v3 := @caughtexception;
return v1;
catch java.lang.Exception from label1 to label2 with label3;
}
public static java.util.List tokenizeString(java.lang.String, java.lang.String)
{
java.lang.String[] v5;
java.util.ArrayList v4;
java.util.List v3, v6, v7;
int v2;
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
if v0 == null goto label1;
v2 = virtualinvoke v0.<java.lang.String: int length()>();
if v2 >= 1 goto label2;
label1:
v3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v3;
label2:
v4 = new java.util.ArrayList;
v5 = virtualinvoke v0.<java.lang.String: java.lang.String[] split(java.lang.String)>(v1);
v6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v5);
specialinvoke v4.<java.util.ArrayList: void <init>(java.util.Collection)>(v6);
v7 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v4);
return v7;
}
public static java.util.Map tokenizeString(java.lang.String, java.lang.String, java.lang.String)
{
java.util.HashMap v4;
java.util.LinkedHashMap v5;
int v10, v11, v12, v14, v3;
java.lang.String v0, v1, v13, v15, v2;
boolean v8;
java.util.Iterator v7;
java.util.List v6;
java.lang.Object v9;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
if v0 == null goto label1;
v3 = virtualinvoke v0.<java.lang.String: int length()>();
if v3 >= 1 goto label2;
label1:
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>()>();
return v4;
label2:
v5 = new java.util.LinkedHashMap;
specialinvoke v5.<java.util.LinkedHashMap: void <init>()>();
v6 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: java.util.List tokenizeString(java.lang.String,java.lang.String)>(v0, v1);
v7 = interfaceinvoke v6.<java.util.List: java.util.Iterator iterator()>();
label3:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label5;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
if v9 == null goto label3;
v10 = virtualinvoke v9.<java.lang.String: int length()>();
if v10 <= 0 goto label3;
v11 = virtualinvoke v9.<java.lang.String: int indexOf(java.lang.String)>(v2);
v12 = (int) -1;
if v11 == v12 goto label4;
v13 = virtualinvoke v9.<java.lang.String: java.lang.String substring(int,int)>(0, v11);
v14 = v11 + 1;
v15 = virtualinvoke v9.<java.lang.String: java.lang.String substring(int)>(v14);
interfaceinvoke v5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v13, v15);
goto label3;
label4:
interfaceinvoke v5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, "");
goto label3;
label5:
return v5;
}
public static java.lang.String stringCollectionToString(java.util.Collection, java.lang.String)
{
java.util.Iterator v6;
java.util.Collection v0;
int v10, v11, v12, v9;
java.lang.Object v8;
java.lang.StringBuilder v5;
java.lang.String v1, v13, v3, v4;
boolean v2, v7;
v0 := @parameter0: java.util.Collection;
v1 := @parameter1: java.lang.String;
if v0 == null goto label1;
v2 = interfaceinvoke v0.<java.util.Collection: boolean isEmpty()>();
if v2 == 0 goto label2;
label1:
return "";
label2:
if v1 != null goto label3;
v3 = ", ";
goto label4;
label3:
v3 = v1;
label4:
v4 = v3;
v5 = new java.lang.StringBuilder;
specialinvoke v5.<java.lang.StringBuilder: void <init>()>();
v6 = interfaceinvoke v0.<java.util.Collection: java.util.Iterator iterator()>();
label5:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label6;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v8);
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v4);
goto label5;
label6:
v9 = virtualinvoke v5.<java.lang.StringBuilder: int length()>();
v10 = virtualinvoke v4.<java.lang.String: int length()>();
v11 = v9 - v10;
v12 = virtualinvoke v5.<java.lang.StringBuilder: int length()>();
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(v11, v12);
v13 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.String toString()>();
return v13;
}
public static java.lang.String stringMapToString(java.util.Map, java.lang.String)
{
java.util.Iterator v5;
java.util.Set v4;
java.util.ArrayList v2;
java.util.Map v0;
int v3;
java.lang.Object v7, v8, v9;
java.lang.String v1, v10, v11;
boolean v6;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
return "";
label1:
v2 = new java.util.ArrayList;
v3 = interfaceinvoke v0.<java.util.Map: int size()>();
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v3);
v4 = interfaceinvoke v0.<java.util.Map: java.util.Set entrySet()>();
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label2:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label3;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getKey()>();
v9 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getValue()>();
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Object)>(v8, v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001=\u0001");
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v10);
goto label2;
label3:
v11 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: java.lang.String stringCollectionToString(java.util.Collection,java.lang.String)>(v2, v1);
return v11;
}
public static boolean isEmpty(java.lang.CharSequence)
{
int v1;
java.lang.CharSequence v0;
boolean v2;
v0 := @parameter0: java.lang.CharSequence;
if v0 == null goto label1;
v1 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v1 != 0 goto label2;
label1:
v2 = 1;
goto label3;
label2:
v2 = 0;
label3:
return v2;
}
public static boolean enumArrayContainsValue(java.lang.Enum[], java.lang.Enum)
{
java.lang.Enum v1, v5;
int v2, v3, v4;
java.lang.Enum[] v0;
v0 := @parameter0: java.lang.Enum[];
v1 := @parameter1: java.lang.Enum;
if v0 == null goto label1;
v2 = lengthof v0;
if v2 != 0 goto label2;
label1:
return 0;
label2:
v3 = lengthof v0;
v4 = 0;
label3:
if v4 >= v3 goto label5;
v5 = v0[v4];
if v5 != v1 goto label4;
return 1;
label4:
v4 = v4 + 1;
goto label3;
label5:
return 0;
}
public static transient byte[] base64Decode(java.lang.CharSequence, com.novell.ldapchai.util.internal.StringHelper$Base64Options[]) throws java.io.IOException
{
byte[] v13, v3, v8;
java.lang.CharSequence v0;
java.util.Base64$Decoder v6, v9;
com.novell.ldapchai.util.internal.StringHelper$Base64Options[] v1;
com.novell.ldapchai.util.internal.StringHelper$Base64Options v11, v4;
java.lang.String v10, v7;
boolean v12, v2, v5;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: com.novell.ldapchai.util.internal.StringHelper$Base64Options[];
v2 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 == 0 goto label1;
v3 = newarray (byte)[0];
return v3;
label1:
v4 = <com.novell.ldapchai.util.internal.StringHelper$Base64Options: com.novell.ldapchai.util.internal.StringHelper$Base64Options URL_SAFE>;
v5 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: boolean enumArrayContainsValue(java.lang.Enum[],java.lang.Enum)>(v1, v4);
if v5 == 0 goto label2;
v6 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getUrlDecoder()>();
v7 = virtualinvoke v0.<java.lang.Object: java.lang.String toString()>();
v8 = virtualinvoke v6.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>(v7);
goto label3;
label2:
v9 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getMimeDecoder()>();
v10 = virtualinvoke v0.<java.lang.Object: java.lang.String toString()>();
v8 = virtualinvoke v9.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>(v10);
label3:
v11 = <com.novell.ldapchai.util.internal.StringHelper$Base64Options: com.novell.ldapchai.util.internal.StringHelper$Base64Options GZIP>;
v12 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: boolean enumArrayContainsValue(java.lang.Enum[],java.lang.Enum)>(v1, v11);
if v12 == 0 goto label4;
v13 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: byte[] gunzip(byte[])>(v8);
return v13;
label4:
return v8;
}
public static transient java.lang.String base64Encode(byte[], com.novell.ldapchai.util.internal.StringHelper$Base64Options[])
{
byte[] v0, v12, v4;
com.novell.ldapchai.util.internal.StringHelper$Base64Options[] v1;
java.io.IOException v5;
java.util.Base64$Encoder v10, v13;
com.novell.ldapchai.exception.ChaiRuntimeException v6;
com.novell.ldapchai.util.internal.StringHelper$Base64Options v2, v8;
java.lang.String v11, v14, v7;
boolean v3, v9;
v0 := @parameter0: byte[];
v1 := @parameter1: com.novell.ldapchai.util.internal.StringHelper$Base64Options[];
v2 = <com.novell.ldapchai.util.internal.StringHelper$Base64Options: com.novell.ldapchai.util.internal.StringHelper$Base64Options GZIP>;
v3 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: boolean enumArrayContainsValue(java.lang.Enum[],java.lang.Enum)>(v1, v2);
if v3 == 0 goto label4;
label1:
v4 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: byte[] gzip(byte[])>(v0);
label2:
goto label5;
label3:
v5 := @caughtexception;
v6 = new com.novell.ldapchai.exception.ChaiRuntimeException;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.io.IOException)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unexpected error during base64 decoding: \u0001");
specialinvoke v6.<com.novell.ldapchai.exception.ChaiRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v7, v5);
throw v6;
label4:
v4 = v0;
label5:
v8 = <com.novell.ldapchai.util.internal.StringHelper$Base64Options: com.novell.ldapchai.util.internal.StringHelper$Base64Options URL_SAFE>;
v9 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: boolean enumArrayContainsValue(java.lang.Enum[],java.lang.Enum)>(v1, v8);
if v9 == 0 goto label6;
v10 = staticinvoke <java.util.Base64: java.util.Base64$Encoder getUrlEncoder()>();
v11 = virtualinvoke v10.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>(v4);
return v11;
label6:
v12 = newarray (byte)[0];
v13 = staticinvoke <java.util.Base64: java.util.Base64$Encoder getMimeEncoder(int,byte[])>(0, v12);
v14 = virtualinvoke v13.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>(v4);
return v14;
catch java.io.IOException from label1 to label2 with label3;
}
public static byte[] gunzip(byte[]) throws java.io.IOException
{
java.lang.Throwable v7, v8;
byte[] v0, v4, v6;
java.util.zip.GZIPInputStream v2;
java.io.ByteArrayOutputStream v1;
java.io.ByteArrayInputStream v3;
int v5;
v0 := @parameter0: byte[];
v1 = new java.io.ByteArrayOutputStream;
specialinvoke v1.<java.io.ByteArrayOutputStream: void <init>()>();
label1:
v2 = new java.util.zip.GZIPInputStream;
v3 = new java.io.ByteArrayInputStream;
specialinvoke v3.<java.io.ByteArrayInputStream: void <init>(byte[])>(v0);
specialinvoke v2.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>(v3);
label2:
v4 = newarray (byte)[128];
label3:
v5 = virtualinvoke v2.<java.util.zip.GZIPInputStream: int read(byte[])>(v4);
if v5 <= 0 goto label4;
virtualinvoke v1.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(v4, 0, v5);
goto label3;
label4:
v6 = virtualinvoke v1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
label5:
virtualinvoke v2.<java.util.zip.GZIPInputStream: void close()>();
label6:
virtualinvoke v1.<java.io.ByteArrayOutputStream: void close()>();
return v6;
label7:
v7 := @caughtexception;
throw v7;
label8:
v8 := @caughtexception;
throw v8;
catch java.lang.Throwable from label2 to label5 with label7;
catch java.lang.Throwable from label1 to label6 with label8;
}
public static byte[] gzip(byte[]) throws java.io.IOException
{
java.lang.Throwable v4, v5;
byte[] v0, v3;
java.io.ByteArrayOutputStream v1;
java.util.zip.GZIPOutputStream v2;
v0 := @parameter0: byte[];
v1 = new java.io.ByteArrayOutputStream;
specialinvoke v1.<java.io.ByteArrayOutputStream: void <init>()>();
label1:
v2 = new java.util.zip.GZIPOutputStream;
specialinvoke v2.<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>(v1);
label2:
virtualinvoke v2.<java.util.zip.GZIPOutputStream: void write(byte[])>(v0);
virtualinvoke v2.<java.util.zip.GZIPOutputStream: void close()>();
v3 = virtualinvoke v1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
label3:
virtualinvoke v2.<java.util.zip.GZIPOutputStream: void close()>();
label4:
virtualinvoke v1.<java.io.ByteArrayOutputStream: void close()>();
return v3;
label5:
v4 := @caughtexception;
throw v4;
label6:
v5 := @caughtexception;
throw v5;
catch java.lang.Throwable from label2 to label3 with label5;
catch java.lang.Throwable from label1 to label4 with label6;
}
public static boolean isEmpty(java.util.Collection)
{
boolean v1, v2;
java.util.Collection v0;
v0 := @parameter0: java.util.Collection;
if v0 == null goto label1;
v1 = interfaceinvoke v0.<java.util.Collection: boolean isEmpty()>();
if v1 == 0 goto label2;
label1:
v2 = 1;
goto label3;
label2:
v2 = 0;
label3:
return v2;
}
}