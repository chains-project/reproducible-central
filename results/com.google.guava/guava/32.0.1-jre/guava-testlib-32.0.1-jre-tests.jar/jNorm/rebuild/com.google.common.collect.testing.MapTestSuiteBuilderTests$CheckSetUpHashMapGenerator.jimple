class com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpHashMapGenerator extends com.google.common.collect.testing.MapTestSuiteBuilderTests$WrappedHashMapGenerator
{
private final java.util.concurrent.atomic.AtomicBoolean setUpRan;
void <init>(java.util.concurrent.atomic.AtomicBoolean)
{
com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpHashMapGenerator v0;
java.util.concurrent.atomic.AtomicBoolean v1;
v0 := @this: com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpHashMapGenerator;
v1 := @parameter0: java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v0.<com.google.common.collect.testing.MapTestSuiteBuilderTests$WrappedHashMapGenerator: void <init>()>();
v0.<com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpHashMapGenerator: java.util.concurrent.atomic.AtomicBoolean setUpRan> = v1;
return;
}
java.util.Map wrap(java.util.HashMap)
{
com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpHashMapGenerator v0;
java.util.concurrent.atomic.AtomicBoolean v3;
java.lang.Object v4;
java.util.HashMap v1;
com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpInvocationHandler v2;
v0 := @this: com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpHashMapGenerator;
v1 := @parameter0: java.util.HashMap;
v2 = new com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpInvocationHandler;
v3 = v0.<com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpHashMapGenerator: java.util.concurrent.atomic.AtomicBoolean setUpRan>;
specialinvoke v2.<com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpInvocationHandler: void <init>(java.util.Map,java.util.concurrent.atomic.AtomicBoolean)>(v1, v3);
v4 = staticinvoke <com.google.common.reflect.Reflection: java.lang.Object newProxy(java.lang.Class,java.lang.reflect.InvocationHandler)>(class "Ljava/util/Map;", v2);
return v4;
}
}