public class com.google.common.collect.testing.MinimalIterableTest extends junit.framework.TestCase
{
public void <init>()
{
com.google.common.collect.testing.MinimalIterableTest v0;
v0 := @this: com.google.common.collect.testing.MinimalIterableTest;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
return;
}
public void testOf_empty()
{
java.lang.IllegalStateException v6;
java.util.Iterator v3;
com.google.common.collect.testing.MinimalIterableTest v0;
com.google.common.collect.testing.MinimalIterable v2;
java.lang.String[] v1;
java.util.NoSuchElementException v5;
boolean v4;
v0 := @this: com.google.common.collect.testing.MinimalIterableTest;
v1 = newarray (java.lang.String)[0];
v2 = staticinvoke <com.google.common.collect.testing.MinimalIterable: com.google.common.collect.testing.MinimalIterable of(java.lang.Object[])>(v1);
v3 = interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
staticinvoke <com.google.common.collect.testing.MinimalIterableTest: void assertFalse(boolean)>(v4);
label1:
interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.MinimalIterableTest: void fail()>();
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
staticinvoke <com.google.common.collect.testing.MinimalIterableTest: void fail()>();
label5:
goto label7;
label6:
v6 := @caughtexception;
label7:
return;
catch java.util.NoSuchElementException from label1 to label2 with label3;
catch java.lang.IllegalStateException from label4 to label5 with label6;
}
public void testOf_one()
{
java.lang.IllegalStateException v8;
java.util.Iterator v3;
com.google.common.collect.testing.MinimalIterable v2;
java.lang.String[] v1;
com.google.common.collect.testing.MinimalIterableTest v0;
java.lang.Object v5;
java.util.NoSuchElementException v7;
boolean v4, v6;
v0 := @this: com.google.common.collect.testing.MinimalIterableTest;
v1 = newarray (java.lang.String)[1];
v1[0] = "a";
v2 = staticinvoke <com.google.common.collect.testing.MinimalIterable: com.google.common.collect.testing.MinimalIterable of(java.lang.Object[])>(v1);
v3 = interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
staticinvoke <com.google.common.collect.testing.MinimalIterableTest: void assertTrue(boolean)>(v4);
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.MinimalIterableTest: void assertEquals(java.lang.String,java.lang.String)>("a", v5);
v6 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
staticinvoke <com.google.common.collect.testing.MinimalIterableTest: void assertFalse(boolean)>(v6);
label1:
interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.MinimalIterableTest: void fail()>();
label2:
goto label4;
label3:
v7 := @caughtexception;
label4:
interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
staticinvoke <com.google.common.collect.testing.MinimalIterableTest: void fail()>();
label5:
goto label7;
label6:
v8 := @caughtexception;
label7:
return;
catch java.util.NoSuchElementException from label1 to label2 with label3;
catch java.lang.IllegalStateException from label4 to label5 with label6;
}
public void testFrom_empty()
{
java.lang.IllegalStateException v6;
java.util.Iterator v3;
com.google.common.collect.testing.MinimalIterableTest v0;
com.google.common.collect.testing.MinimalIterable v2;
java.util.Set v1;
java.util.NoSuchElementException v5;
boolean v4;
v0 := @this: com.google.common.collect.testing.MinimalIterableTest;
v1 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
v2 = staticinvoke <com.google.common.collect.testing.MinimalIterable: com.google.common.collect.testing.MinimalIterable 'from'(java.util.Collection)>(v1);
v3 = interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
staticinvoke <com.google.common.collect.testing.MinimalIterableTest: void assertFalse(boolean)>(v4);
label1:
interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.MinimalIterableTest: void fail()>();
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
staticinvoke <com.google.common.collect.testing.MinimalIterableTest: void fail()>();
label5:
goto label7;
label6:
v6 := @caughtexception;
label7:
return;
catch java.util.NoSuchElementException from label1 to label2 with label3;
catch java.lang.IllegalStateException from label4 to label5 with label6;
}
public void testFrom_one()
{
java.lang.IllegalStateException v9;
java.lang.UnsupportedOperationException v6;
java.util.Iterator v3;
com.google.common.collect.testing.MinimalIterable v2;
java.util.Set v1;
com.google.common.collect.testing.MinimalIterableTest v0;
java.lang.Object v5;
java.util.NoSuchElementException v8;
boolean v4, v7;
v0 := @this: com.google.common.collect.testing.MinimalIterableTest;
v1 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>("a");
v2 = staticinvoke <com.google.common.collect.testing.MinimalIterable: com.google.common.collect.testing.MinimalIterable 'from'(java.util.Collection)>(v1);
v3 = interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
staticinvoke <com.google.common.collect.testing.MinimalIterableTest: void assertTrue(boolean)>(v4);
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.MinimalIterableTest: void assertEquals(java.lang.String,java.lang.String)>("a", v5);
label01:
interfaceinvoke v3.<java.util.Iterator: void remove()>();
staticinvoke <com.google.common.collect.testing.MinimalIterableTest: void fail()>();
label02:
goto label04;
label03:
v6 := @caughtexception;
label04:
v7 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
staticinvoke <com.google.common.collect.testing.MinimalIterableTest: void assertFalse(boolean)>(v7);
label05:
interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.MinimalIterableTest: void fail()>();
label06:
goto label08;
label07:
v8 := @caughtexception;
label08:
interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
staticinvoke <com.google.common.collect.testing.MinimalIterableTest: void fail()>();
label09:
goto label11;
label10:
v9 := @caughtexception;
label11:
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.util.NoSuchElementException from label05 to label06 with label07;
catch java.lang.IllegalStateException from label08 to label09 with label10;
}
}