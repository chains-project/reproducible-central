class com.google.common.collect.testing.SafeTreeMapTest$2 extends com.google.common.collect.testing.TestStringSortedMapGenerator
{
void <init>()
{
com.google.common.collect.testing.SafeTreeMapTest$2 v0;
v0 := @this: com.google.common.collect.testing.SafeTreeMapTest$2;
specialinvoke v0.<com.google.common.collect.testing.TestStringSortedMapGenerator: void <init>()>();
return;
}
protected java.util.SortedMap create(java.util.Map$Entry[])
{
java.util.Map$Entry v6;
com.google.common.collect.testing.Helpers$NullsBeforeTwo v3;
com.google.common.collect.testing.SafeTreeMap v2;
com.google.common.collect.testing.SafeTreeMapTest$2 v0;
int v4, v5;
java.lang.Object v7, v8;
java.util.Map$Entry[] v1;
v0 := @this: com.google.common.collect.testing.SafeTreeMapTest$2;
v1 := @parameter0: java.util.Map$Entry[];
v2 = new com.google.common.collect.testing.SafeTreeMap;
v3 = <com.google.common.collect.testing.Helpers$NullsBeforeTwo: com.google.common.collect.testing.Helpers$NullsBeforeTwo INSTANCE>;
specialinvoke v2.<com.google.common.collect.testing.SafeTreeMap: void <init>(java.util.Comparator)>(v3);
v4 = lengthof v1;
v5 = 0;
label1:
if v5 >= v4 goto label2;
v6 = v1[v5];
v7 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getKey()>();
v8 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getValue()>();
interfaceinvoke v2.<java.util.NavigableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v7, v8);
v5 = v5 + 1;
goto label1;
label2:
return v2;
}
public java.lang.Iterable order(java.util.List)
{
java.util.List v1;
com.google.common.collect.testing.Helpers$NullsBeforeTwo v2;
com.google.common.collect.testing.SafeTreeMapTest$2 v0;
java.util.Comparator v3;
v0 := @this: com.google.common.collect.testing.SafeTreeMapTest$2;
v1 := @parameter0: java.util.List;
v2 = <com.google.common.collect.testing.Helpers$NullsBeforeTwo: com.google.common.collect.testing.Helpers$NullsBeforeTwo INSTANCE>;
v3 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Comparator entryComparator(java.util.Comparator)>(v2);
staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(v1, v3);
return v1;
}
}