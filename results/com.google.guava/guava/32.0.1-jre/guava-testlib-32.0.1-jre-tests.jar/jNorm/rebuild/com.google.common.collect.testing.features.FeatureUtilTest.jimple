public class com.google.common.collect.testing.features.FeatureUtilTest extends junit.framework.TestCase
{
public void <init>()
{
com.google.common.collect.testing.features.FeatureUtilTest v0;
v0 := @this: com.google.common.collect.testing.features.FeatureUtilTest;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
return;
}
public void testTestFeatureEnums() throws java.lang.Exception
{
com.google.common.collect.testing.features.FeatureUtilTest v0;
v0 := @this: com.google.common.collect.testing.features.FeatureUtilTest;
staticinvoke <com.google.common.collect.testing.features.FeatureEnumTest: void assertGoodFeatureEnum(java.lang.Class)>(class "Lcom/google/common/collect/testing/features/FeatureUtilTest$ExampleBaseFeature;");
staticinvoke <com.google.common.collect.testing.features.FeatureEnumTest: void assertGoodFeatureEnum(java.lang.Class)>(class "Lcom/google/common/collect/testing/features/FeatureUtilTest$ExampleDerivedFeature;");
return;
}
public void testAddImpliedFeatures_returnsSameSetInstance() throws java.lang.Exception
{
java.util.HashSet v3;
java.lang.Object[] v1;
com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature v2;
com.google.common.collect.testing.features.FeatureUtilTest v0;
java.util.Set v4;
v0 := @this: com.google.common.collect.testing.features.FeatureUtilTest;
v1 = newarray (com.google.common.collect.testing.features.Feature)[1];
v2 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature BASE_FEATURE_1>;
v1[0] = v2;
v3 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>(v1);
v4 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: java.util.Set addImpliedFeatures(java.util.Set)>(v3);
staticinvoke <com.google.common.collect.testing.features.FeatureUtilTest: void assertSame(java.lang.Object,java.lang.Object)>(v3, v4);
return;
}
public void testAddImpliedFeatures_addsImpliedFeatures() throws java.lang.Exception
{
java.lang.Object[] v1, v12, v15, v20, v7;
com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature v14, v24, v25;
java.util.HashSet v17, v3, v9;
com.google.common.truth.IterableSubject v11, v19, v5;
com.google.common.collect.testing.features.FeatureUtilTest v0;
java.util.Set v10, v18, v4;
com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature v13, v16, v2, v21, v22, v23, v6, v8;
v0 := @this: com.google.common.collect.testing.features.FeatureUtilTest;
v1 = newarray (com.google.common.collect.testing.features.Feature)[1];
v2 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature DERIVED_FEATURE_1>;
v1[0] = v2;
v3 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>(v1);
v4 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: java.util.Set addImpliedFeatures(java.util.Set)>(v3);
v5 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v4);
v6 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature DERIVED_FEATURE_1>;
virtualinvoke v5.<com.google.common.truth.IterableSubject: void contains(java.lang.Object)>(v6);
v7 = newarray (com.google.common.collect.testing.features.Feature)[1];
v8 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature DERIVED_FEATURE_2>;
v7[0] = v8;
v9 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>(v7);
v10 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: java.util.Set addImpliedFeatures(java.util.Set)>(v9);
v11 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v10);
v12 = newarray (java.lang.Object)[2];
v13 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature DERIVED_FEATURE_2>;
v12[0] = v13;
v14 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature BASE_FEATURE_1>;
v12[1] = v14;
virtualinvoke v11.<com.google.common.truth.IterableSubject: com.google.common.truth.Ordered containsExactly(java.lang.Object[])>(v12);
v15 = newarray (com.google.common.collect.testing.features.Feature)[1];
v16 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature COMPOUND_DERIVED_FEATURE>;
v15[0] = v16;
v17 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>(v15);
v18 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: java.util.Set addImpliedFeatures(java.util.Set)>(v17);
v19 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v18);
v20 = newarray (java.lang.Object)[5];
v21 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature COMPOUND_DERIVED_FEATURE>;
v20[0] = v21;
v22 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature DERIVED_FEATURE_1>;
v20[1] = v22;
v23 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature DERIVED_FEATURE_2>;
v20[2] = v23;
v24 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature BASE_FEATURE_1>;
v20[3] = v24;
v25 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature BASE_FEATURE_2>;
v20[4] = v25;
virtualinvoke v19.<com.google.common.truth.IterableSubject: com.google.common.truth.Ordered containsExactly(java.lang.Object[])>(v20);
return;
}
public void testImpliedFeatures_returnsNewSetInstance() throws java.lang.Exception
{
java.util.HashSet v3;
java.lang.Object[] v1;
com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature v2;
com.google.common.collect.testing.features.FeatureUtilTest v0;
java.util.Set v4;
v0 := @this: com.google.common.collect.testing.features.FeatureUtilTest;
v1 = newarray (com.google.common.collect.testing.features.Feature)[1];
v2 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature BASE_FEATURE_1>;
v1[0] = v2;
v3 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>(v1);
v4 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: java.util.Set impliedFeatures(java.util.Set)>(v3);
staticinvoke <com.google.common.collect.testing.features.FeatureUtilTest: void assertNotSame(java.lang.Object,java.lang.Object)>(v3, v4);
return;
}
public void testImpliedFeatures_returnsImpliedFeatures() throws java.lang.Exception
{
java.lang.Object[] v1, v12, v17, v6;
com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature v11, v20, v21;
java.util.HashSet v14, v3, v8;
com.google.common.truth.IterableSubject v10, v16;
boolean v5;
com.google.common.collect.testing.features.FeatureUtilTest v0;
java.util.Set v15, v4, v9;
com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature v13, v18, v19, v2, v7;
v0 := @this: com.google.common.collect.testing.features.FeatureUtilTest;
v1 = newarray (com.google.common.collect.testing.features.Feature)[1];
v2 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature DERIVED_FEATURE_1>;
v1[0] = v2;
v3 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>(v1);
v4 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: java.util.Set impliedFeatures(java.util.Set)>(v3);
v5 = interfaceinvoke v4.<java.util.Set: boolean isEmpty()>();
staticinvoke <com.google.common.collect.testing.features.FeatureUtilTest: void assertTrue(boolean)>(v5);
v6 = newarray (com.google.common.collect.testing.features.Feature)[1];
v7 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature DERIVED_FEATURE_2>;
v6[0] = v7;
v8 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>(v6);
v9 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: java.util.Set impliedFeatures(java.util.Set)>(v8);
v10 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v9);
v11 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature BASE_FEATURE_1>;
virtualinvoke v10.<com.google.common.truth.IterableSubject: void contains(java.lang.Object)>(v11);
v12 = newarray (com.google.common.collect.testing.features.Feature)[1];
v13 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature COMPOUND_DERIVED_FEATURE>;
v12[0] = v13;
v14 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>(v12);
v15 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: java.util.Set impliedFeatures(java.util.Set)>(v14);
v16 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v15);
v17 = newarray (java.lang.Object)[4];
v18 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature DERIVED_FEATURE_1>;
v17[0] = v18;
v19 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature DERIVED_FEATURE_2>;
v17[1] = v19;
v20 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature BASE_FEATURE_1>;
v17[2] = v20;
v21 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature BASE_FEATURE_2>;
v17[3] = v21;
virtualinvoke v16.<com.google.common.truth.IterableSubject: com.google.common.truth.Ordered containsExactly(java.lang.Object[])>(v17);
return;
}
public void testBuildTesterRequirements_class() throws java.lang.Exception
{
java.lang.Object[] v3, v9;
com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature v10, v4;
com.google.common.collect.testing.features.FeatureUtilTest v0;
java.util.Set v13, v6;
com.google.common.collect.testing.features.TesterRequirements v1, v2, v7, v8;
com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature v11;
java.util.HashSet v12, v5;
v0 := @this: com.google.common.collect.testing.features.FeatureUtilTest;
v1 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: com.google.common.collect.testing.features.TesterRequirements buildTesterRequirements(java.lang.Class)>(class "Lcom/google/common/collect/testing/features/FeatureUtilTest$ExampleBaseInterfaceTester;");
v2 = new com.google.common.collect.testing.features.TesterRequirements;
v3 = newarray (com.google.common.collect.testing.features.Feature)[1];
v4 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature BASE_FEATURE_1>;
v3[0] = v4;
v5 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>(v3);
v6 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
specialinvoke v2.<com.google.common.collect.testing.features.TesterRequirements: void <init>(java.util.Set,java.util.Set)>(v5, v6);
staticinvoke <com.google.common.collect.testing.features.FeatureUtilTest: void assertEquals(java.lang.Object,java.lang.Object)>(v1, v2);
v7 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: com.google.common.collect.testing.features.TesterRequirements buildTesterRequirements(java.lang.Class)>(class "Lcom/google/common/collect/testing/features/FeatureUtilTest$ExampleDerivedInterfaceTester;");
v8 = new com.google.common.collect.testing.features.TesterRequirements;
v9 = newarray (com.google.common.collect.testing.features.Feature)[2];
v10 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature BASE_FEATURE_1>;
v9[0] = v10;
v11 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature DERIVED_FEATURE_2>;
v9[1] = v11;
v12 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>(v9);
v13 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
specialinvoke v8.<com.google.common.collect.testing.features.TesterRequirements: void <init>(java.util.Set,java.util.Set)>(v12, v13);
staticinvoke <com.google.common.collect.testing.features.FeatureUtilTest: void assertEquals(java.lang.Object,java.lang.Object)>(v7, v8);
return;
}
public void testBuildTesterRequirements_method() throws java.lang.Exception
{
java.lang.Object[] v17, v6;
com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature v18, v7;
com.google.common.collect.testing.features.TesterRequirements v15, v16, v4, v5;
java.util.HashSet v10, v22;
java.lang.reflect.Method v14, v3;
com.google.common.collect.testing.features.FeatureUtilTest v0;
java.lang.Class[] v13, v2;
java.util.Set v11, v23;
com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature v19, v20, v21, v8, v9;
java.lang.Class v1, v12;
v0 := @this: com.google.common.collect.testing.features.FeatureUtilTest;
v1 = class "Lcom/google/common/collect/testing/features/FeatureUtilTest$ExampleDerivedInterfaceTester;";
v2 = newarray (java.lang.Class)[0];
v3 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("testRequiringTwoExplicitDerivedFeatures", v2);
v4 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: com.google.common.collect.testing.features.TesterRequirements buildTesterRequirements(java.lang.reflect.Method)>(v3);
v5 = new com.google.common.collect.testing.features.TesterRequirements;
v6 = newarray (com.google.common.collect.testing.features.Feature)[3];
v7 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature BASE_FEATURE_1>;
v6[0] = v7;
v8 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature DERIVED_FEATURE_1>;
v6[1] = v8;
v9 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature DERIVED_FEATURE_2>;
v6[2] = v9;
v10 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>(v6);
v11 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
specialinvoke v5.<com.google.common.collect.testing.features.TesterRequirements: void <init>(java.util.Set,java.util.Set)>(v10, v11);
staticinvoke <com.google.common.collect.testing.features.FeatureUtilTest: void assertEquals(java.lang.Object,java.lang.Object)>(v4, v5);
v12 = class "Lcom/google/common/collect/testing/features/FeatureUtilTest$ExampleDerivedInterfaceTester;";
v13 = newarray (java.lang.Class)[0];
v14 = virtualinvoke v12.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("testRequiringAllThreeDerivedFeatures", v13);
v15 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: com.google.common.collect.testing.features.TesterRequirements buildTesterRequirements(java.lang.reflect.Method)>(v14);
v16 = new com.google.common.collect.testing.features.TesterRequirements;
v17 = newarray (com.google.common.collect.testing.features.Feature)[4];
v18 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature BASE_FEATURE_1>;
v17[0] = v18;
v19 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature DERIVED_FEATURE_1>;
v17[1] = v19;
v20 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature DERIVED_FEATURE_2>;
v17[2] = v20;
v21 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature DERIVED_FEATURE_3>;
v17[3] = v21;
v22 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>(v17);
v23 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
specialinvoke v16.<com.google.common.collect.testing.features.TesterRequirements: void <init>(java.util.Set,java.util.Set)>(v22, v23);
staticinvoke <com.google.common.collect.testing.features.FeatureUtilTest: void assertEquals(java.lang.Object,java.lang.Object)>(v15, v16);
return;
}
public void testBuildTesterRequirements_classClassConflict() throws java.lang.Exception
{
java.lang.Throwable v1;
com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature v4;
com.google.common.truth.IterableSubject v3;
com.google.common.collect.testing.features.FeatureUtilTest v0;
java.util.Set v2;
java.lang.Object v5;
v0 := @this: com.google.common.collect.testing.features.FeatureUtilTest;
label1:
staticinvoke <com.google.common.collect.testing.features.FeatureUtil: com.google.common.collect.testing.features.TesterRequirements buildTesterRequirements(java.lang.Class)>(class "Lcom/google/common/collect/testing/features/FeatureUtilTest$ConflictingRequirementsExampleDerivedInterfaceTester;");
staticinvoke <com.google.common.collect.testing.features.FeatureUtilTest: void fail(java.lang.String)>("Expected ConflictingRequirementsException");
label2:
goto label4;
label3:
v1 := @caughtexception;
v2 = virtualinvoke v1.<com.google.common.collect.testing.features.ConflictingRequirementsException: java.util.Set getConflicts()>();
v3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v2);
v4 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature BASE_FEATURE_1>;
virtualinvoke v3.<com.google.common.truth.IterableSubject: void contains(java.lang.Object)>(v4);
v5 = virtualinvoke v1.<com.google.common.collect.testing.features.ConflictingRequirementsException: java.lang.Object getSource()>();
staticinvoke <com.google.common.collect.testing.features.FeatureUtilTest: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lcom/google/common/collect/testing/features/FeatureUtilTest$ConflictingRequirementsExampleDerivedInterfaceTester;", v5);
label4:
return;
catch com.google.common.collect.testing.features.ConflictingRequirementsException from label1 to label2 with label3;
}
public void testBuildTesterRequirements_methodClassConflict() throws java.lang.Exception
{
java.lang.Throwable v4;
com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature v7;
com.google.common.collect.testing.features.FeatureUtilTest v0;
java.lang.Class[] v2;
java.util.Set v5;
com.google.common.truth.IterableSubject v6;
java.lang.Class v1;
java.lang.Object v8;
java.lang.reflect.Method v3;
v0 := @this: com.google.common.collect.testing.features.FeatureUtilTest;
v1 = class "Lcom/google/common/collect/testing/features/FeatureUtilTest$ExampleDerivedInterfaceTester;";
v2 = newarray (java.lang.Class)[0];
v3 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("testRequiringConflictingFeatures", v2);
label1:
staticinvoke <com.google.common.collect.testing.features.FeatureUtil: com.google.common.collect.testing.features.TesterRequirements buildTesterRequirements(java.lang.reflect.Method)>(v3);
staticinvoke <com.google.common.collect.testing.features.FeatureUtilTest: void fail(java.lang.String)>("Expected ConflictingRequirementsException");
label2:
goto label4;
label3:
v4 := @caughtexception;
v5 = virtualinvoke v4.<com.google.common.collect.testing.features.ConflictingRequirementsException: java.util.Set getConflicts()>();
v6 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v5);
v7 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleBaseFeature BASE_FEATURE_1>;
virtualinvoke v6.<com.google.common.truth.IterableSubject: void contains(java.lang.Object)>(v7);
v8 = virtualinvoke v4.<com.google.common.collect.testing.features.ConflictingRequirementsException: java.lang.Object getSource()>();
staticinvoke <com.google.common.collect.testing.features.FeatureUtilTest: void assertEquals(java.lang.Object,java.lang.Object)>(v3, v8);
label4:
return;
catch com.google.common.collect.testing.features.ConflictingRequirementsException from label1 to label2 with label3;
}
public void testBuildDeclaredTesterRequirements() throws java.lang.Exception
{
java.lang.Object[] v6;
com.google.common.collect.testing.features.FeatureUtilTest v0;
java.lang.Class[] v2;
java.util.Set v10, v11;
com.google.common.collect.testing.features.TesterRequirements v4, v5;
com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature v7, v8;
java.util.HashSet v9;
java.lang.Class v1;
java.lang.reflect.Method v3;
v0 := @this: com.google.common.collect.testing.features.FeatureUtilTest;
v1 = class "Lcom/google/common/collect/testing/features/FeatureUtilTest$ExampleDerivedInterfaceTester;";
v2 = newarray (java.lang.Class)[0];
v3 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("testRequiringTwoExplicitDerivedFeatures", v2);
v4 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: com.google.common.collect.testing.features.TesterRequirements buildDeclaredTesterRequirements(java.lang.reflect.AnnotatedElement)>(v3);
v5 = new com.google.common.collect.testing.features.TesterRequirements;
v6 = newarray (com.google.common.collect.testing.features.Feature)[2];
v7 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature DERIVED_FEATURE_1>;
v6[0] = v7;
v8 = <com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature: com.google.common.collect.testing.features.FeatureUtilTest$ExampleDerivedFeature DERIVED_FEATURE_2>;
v6[1] = v8;
v9 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>(v6);
v10 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: java.util.Set addImpliedFeatures(java.util.Set)>(v9);
v11 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
specialinvoke v5.<com.google.common.collect.testing.features.TesterRequirements: void <init>(java.util.Set,java.util.Set)>(v10, v11);
staticinvoke <com.google.common.collect.testing.features.FeatureUtilTest: void assertEquals(java.lang.Object,java.lang.Object)>(v4, v5);
return;
}
}