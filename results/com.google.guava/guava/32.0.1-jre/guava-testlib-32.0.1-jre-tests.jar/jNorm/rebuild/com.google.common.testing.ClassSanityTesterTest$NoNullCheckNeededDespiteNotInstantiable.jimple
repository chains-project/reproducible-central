public class com.google.common.testing.ClassSanityTesterTest$NoNullCheckNeededDespiteNotInstantiable extends java.lang.Object
{
public void <init>(com.google.common.testing.ClassSanityTesterTest$NotInstantiable)
{
com.google.common.testing.ClassSanityTesterTest$NoNullCheckNeededDespiteNotInstantiable v0;
com.google.common.testing.ClassSanityTesterTest$NotInstantiable v1;
v0 := @this: com.google.common.testing.ClassSanityTesterTest$NoNullCheckNeededDespiteNotInstantiable;
v1 := @parameter0: com.google.common.testing.ClassSanityTesterTest$NotInstantiable;
specialinvoke v0.<java.lang.Object: void <init>()>();
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v1);
return;
}
void primitiveOnly(int)
{
int v1;
com.google.common.testing.ClassSanityTesterTest$NoNullCheckNeededDespiteNotInstantiable v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest$NoNullCheckNeededDespiteNotInstantiable;
v1 := @parameter0: int;
return;
}
void nullableOnly(java.lang.String)
{
java.lang.String v1;
com.google.common.testing.ClassSanityTesterTest$NoNullCheckNeededDespiteNotInstantiable v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest$NoNullCheckNeededDespiteNotInstantiable;
v1 := @parameter0: java.lang.String;
return;
}
public void noParameter()
{
com.google.common.testing.ClassSanityTesterTest$NoNullCheckNeededDespiteNotInstantiable v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest$NoNullCheckNeededDespiteNotInstantiable;
return;
}
void primitiveAndNullable(java.lang.String, int)
{
int v2;
java.lang.String v1;
com.google.common.testing.ClassSanityTesterTest$NoNullCheckNeededDespiteNotInstantiable v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest$NoNullCheckNeededDespiteNotInstantiable;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
return;
}
}