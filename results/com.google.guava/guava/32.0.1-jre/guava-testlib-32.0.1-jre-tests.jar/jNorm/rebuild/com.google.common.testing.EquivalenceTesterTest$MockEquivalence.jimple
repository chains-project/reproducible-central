final class com.google.common.testing.EquivalenceTesterTest$MockEquivalence extends com.google.common.base.Equivalence
{
final com.google.common.collect.ImmutableTable$Builder equivalentExpectationsBuilder;
final com.google.common.collect.ImmutableMap$Builder hashExpectationsBuilder;
com.google.common.collect.ImmutableTable equivalentExpectations;
com.google.common.collect.ImmutableMap hashExpectations;
private void <init>()
{
com.google.common.collect.ImmutableTable$Builder v1;
com.google.common.testing.EquivalenceTesterTest$MockEquivalence v0;
com.google.common.collect.ImmutableMap$Builder v2;
v0 := @this: com.google.common.testing.EquivalenceTesterTest$MockEquivalence;
specialinvoke v0.<com.google.common.base.Equivalence: void <init>()>();
v1 = staticinvoke <com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableTable$Builder builder()>();
v0.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: com.google.common.collect.ImmutableTable$Builder equivalentExpectationsBuilder> = v1;
v2 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>();
v0.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: com.google.common.collect.ImmutableMap$Builder hashExpectationsBuilder> = v2;
return;
}
void expectEquivalent(java.lang.Object, java.lang.Object)
{
com.google.common.collect.ImmutableTable$Builder v3;
java.lang.Boolean v4;
java.lang.Object v1, v2;
com.google.common.testing.EquivalenceTesterTest$MockEquivalence v0;
v0 := @this: com.google.common.testing.EquivalenceTesterTest$MockEquivalence;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
virtualinvoke v0.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void checkRecording()>();
v3 = v0.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: com.google.common.collect.ImmutableTable$Builder equivalentExpectationsBuilder>;
v4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
virtualinvoke v3.<com.google.common.collect.ImmutableTable$Builder: com.google.common.collect.ImmutableTable$Builder put(java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v2, v4);
return;
}
void expectDistinct(java.lang.Object, java.lang.Object)
{
com.google.common.collect.ImmutableTable$Builder v3;
java.lang.Boolean v4;
java.lang.Object v1, v2;
com.google.common.testing.EquivalenceTesterTest$MockEquivalence v0;
v0 := @this: com.google.common.testing.EquivalenceTesterTest$MockEquivalence;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
virtualinvoke v0.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void checkRecording()>();
v3 = v0.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: com.google.common.collect.ImmutableTable$Builder equivalentExpectationsBuilder>;
v4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
virtualinvoke v3.<com.google.common.collect.ImmutableTable$Builder: com.google.common.collect.ImmutableTable$Builder put(java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v2, v4);
return;
}
void expectHash(java.lang.Object, int)
{
int v2;
java.lang.Object v1;
com.google.common.testing.EquivalenceTesterTest$MockEquivalence v0;
com.google.common.collect.ImmutableMap$Builder v3;
java.lang.Integer v4;
v0 := @this: com.google.common.testing.EquivalenceTesterTest$MockEquivalence;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: int;
virtualinvoke v0.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void checkRecording()>();
v3 = v0.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: com.google.common.collect.ImmutableMap$Builder hashExpectationsBuilder>;
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
virtualinvoke v3.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(v1, v4);
return;
}
void replay()
{
com.google.common.collect.ImmutableTable$Builder v1;
com.google.common.collect.ImmutableMap v4;
com.google.common.collect.ImmutableTable v2;
com.google.common.testing.EquivalenceTesterTest$MockEquivalence v0;
com.google.common.collect.ImmutableMap$Builder v3;
v0 := @this: com.google.common.testing.EquivalenceTesterTest$MockEquivalence;
virtualinvoke v0.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void checkRecording()>();
v1 = v0.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: com.google.common.collect.ImmutableTable$Builder equivalentExpectationsBuilder>;
v2 = virtualinvoke v1.<com.google.common.collect.ImmutableTable$Builder: com.google.common.collect.ImmutableTable build()>();
v0.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: com.google.common.collect.ImmutableTable equivalentExpectations> = v2;
v3 = v0.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: com.google.common.collect.ImmutableMap$Builder hashExpectationsBuilder>;
v4 = virtualinvoke v3.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap buildOrThrow()>();
v0.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: com.google.common.collect.ImmutableMap hashExpectations> = v4;
return;
}
protected boolean doEquivalent(java.lang.Object, java.lang.Object)
{
com.google.common.collect.ImmutableTable v3;
java.lang.Object v1, v2, v4;
com.google.common.testing.EquivalenceTesterTest$MockEquivalence v0;
boolean v5;
v0 := @this: com.google.common.testing.EquivalenceTesterTest$MockEquivalence;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: com.google.common.collect.ImmutableTable equivalentExpectations>;
v4 = virtualinvoke v3.<com.google.common.collect.ImmutableTable: java.lang.Object get(java.lang.Object,java.lang.Object)>(v1, v2);
v5 = virtualinvoke v4.<java.lang.Boolean: boolean booleanValue()>();
return v5;
}
protected int doHash(java.lang.Object)
{
com.google.common.collect.ImmutableMap v2;
int v4;
java.lang.Object v1, v3;
com.google.common.testing.EquivalenceTesterTest$MockEquivalence v0;
v0 := @this: com.google.common.testing.EquivalenceTesterTest$MockEquivalence;
v1 := @parameter0: java.lang.Object;
v2 = v0.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: com.google.common.collect.ImmutableMap hashExpectations>;
v3 = virtualinvoke v2.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(v1);
v4 = virtualinvoke v3.<java.lang.Integer: int intValue()>();
return v4;
}
void checkRecording()
{
com.google.common.collect.ImmutableMap v2;
com.google.common.collect.ImmutableTable v1;
com.google.common.testing.EquivalenceTesterTest$MockEquivalence v0;
boolean v3;
v0 := @this: com.google.common.testing.EquivalenceTesterTest$MockEquivalence;
v1 = v0.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: com.google.common.collect.ImmutableTable equivalentExpectations>;
if v1 != null goto label1;
v2 = v0.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: com.google.common.collect.ImmutableMap hashExpectations>;
if v2 != null goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>(v3);
return;
}
}