public class com.google.common.testing.EquivalenceTesterTest extends junit.framework.TestCase
{
private com.google.common.testing.EquivalenceTester tester;
private com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock;
public void <init>()
{
com.google.common.testing.EquivalenceTesterTest v0;
v0 := @this: com.google.common.testing.EquivalenceTesterTest;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
return;
}
public void setUp() throws java.lang.Exception
{
com.google.common.testing.EquivalenceTesterTest v0;
com.google.common.testing.EquivalenceTesterTest$MockEquivalence v1, v2;
com.google.common.testing.EquivalenceTester v3;
v0 := @this: com.google.common.testing.EquivalenceTesterTest;
specialinvoke v0.<junit.framework.TestCase: void setUp()>();
v1 = new com.google.common.testing.EquivalenceTesterTest$MockEquivalence;
specialinvoke v1.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void <init>()>();
v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock> = v1;
v2 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
v3 = staticinvoke <com.google.common.testing.EquivalenceTester: com.google.common.testing.EquivalenceTester of(com.google.common.base.Equivalence)>(v2);
v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTester tester> = v3;
return;
}
public void testOf_NullPointerException()
{
com.google.common.testing.EquivalenceTesterTest v0;
java.lang.NullPointerException v1;
v0 := @this: com.google.common.testing.EquivalenceTesterTest;
label1:
staticinvoke <com.google.common.testing.EquivalenceTester: com.google.common.testing.EquivalenceTester of(com.google.common.base.Equivalence)>(null);
staticinvoke <com.google.common.testing.EquivalenceTesterTest: void fail(java.lang.String)>("Should fail on null reference");
label2:
goto label4;
label3:
v1 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testTest_NoData()
{
com.google.common.testing.EquivalenceTesterTest v0;
com.google.common.testing.EquivalenceTester v1;
v0 := @this: com.google.common.testing.EquivalenceTesterTest;
v1 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTester tester>;
virtualinvoke v1.<com.google.common.testing.EquivalenceTester: com.google.common.testing.EquivalenceTester test()>();
return;
}
public void testTest()
{
java.lang.Object[] v23, v25;
com.google.common.testing.EquivalenceTesterTest$MockEquivalence v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v5, v6, v7, v8, v9;
com.google.common.testing.EquivalenceTesterTest$TestObject v1, v2, v3, v4;
com.google.common.testing.EquivalenceTester v22, v24, v26;
com.google.common.testing.EquivalenceTesterTest v0;
v0 := @this: com.google.common.testing.EquivalenceTesterTest;
v1 = new com.google.common.testing.EquivalenceTesterTest$TestObject;
specialinvoke v1.<com.google.common.testing.EquivalenceTesterTest$TestObject: void <init>(int,int)>(1, 1);
v2 = new com.google.common.testing.EquivalenceTesterTest$TestObject;
specialinvoke v2.<com.google.common.testing.EquivalenceTesterTest$TestObject: void <init>(int,int)>(1, 2);
v3 = new com.google.common.testing.EquivalenceTesterTest$TestObject;
specialinvoke v3.<com.google.common.testing.EquivalenceTesterTest$TestObject: void <init>(int,int)>(2, 1);
v4 = new com.google.common.testing.EquivalenceTesterTest$TestObject;
specialinvoke v4.<com.google.common.testing.EquivalenceTesterTest$TestObject: void <init>(int,int)>(2, 2);
v5 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v5.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectEquivalent(java.lang.Object,java.lang.Object)>(v1, v2);
v6 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v6.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectDistinct(java.lang.Object,java.lang.Object)>(v1, v3);
v7 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v7.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectDistinct(java.lang.Object,java.lang.Object)>(v1, v4);
v8 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v8.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectEquivalent(java.lang.Object,java.lang.Object)>(v2, v1);
v9 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v9.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectDistinct(java.lang.Object,java.lang.Object)>(v2, v3);
v10 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v10.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectDistinct(java.lang.Object,java.lang.Object)>(v2, v4);
v11 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v11.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectDistinct(java.lang.Object,java.lang.Object)>(v3, v1);
v12 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v12.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectDistinct(java.lang.Object,java.lang.Object)>(v3, v2);
v13 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v13.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectEquivalent(java.lang.Object,java.lang.Object)>(v3, v4);
v14 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v14.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectDistinct(java.lang.Object,java.lang.Object)>(v4, v1);
v15 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v15.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectDistinct(java.lang.Object,java.lang.Object)>(v4, v2);
v16 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v16.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectEquivalent(java.lang.Object,java.lang.Object)>(v4, v3);
v17 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v17.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectHash(java.lang.Object,int)>(v1, 1);
v18 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v18.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectHash(java.lang.Object,int)>(v2, 1);
v19 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v19.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectHash(java.lang.Object,int)>(v3, 2);
v20 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v20.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectHash(java.lang.Object,int)>(v4, 2);
v21 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v21.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void replay()>();
v22 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTester tester>;
v23 = newarray (java.lang.Object)[1];
v23[0] = v2;
v24 = virtualinvoke v22.<com.google.common.testing.EquivalenceTester: com.google.common.testing.EquivalenceTester addEquivalenceGroup(java.lang.Object,java.lang.Object[])>(v1, v23);
v25 = newarray (java.lang.Object)[1];
v25[0] = v4;
v26 = virtualinvoke v24.<com.google.common.testing.EquivalenceTester: com.google.common.testing.EquivalenceTester addEquivalenceGroup(java.lang.Object,java.lang.Object[])>(v3, v25);
virtualinvoke v26.<com.google.common.testing.EquivalenceTester: com.google.common.testing.EquivalenceTester test()>();
return;
}
public void testTest_symmetric()
{
java.lang.Throwable v11;
java.lang.Object[] v9;
com.google.common.testing.EquivalenceTesterTest v0;
com.google.common.testing.EquivalenceTesterTest$MockEquivalence v3, v4, v5, v6, v7;
com.google.common.testing.EquivalenceTesterTest$TestObject v1, v2;
com.google.common.truth.StringSubject v13;
com.google.common.testing.EquivalenceTester v10, v8;
java.lang.String v12;
v0 := @this: com.google.common.testing.EquivalenceTesterTest;
v1 = new com.google.common.testing.EquivalenceTesterTest$TestObject;
specialinvoke v1.<com.google.common.testing.EquivalenceTesterTest$TestObject: void <init>(int,int)>(1, 1);
v2 = new com.google.common.testing.EquivalenceTesterTest$TestObject;
specialinvoke v2.<com.google.common.testing.EquivalenceTesterTest$TestObject: void <init>(int,int)>(1, 2);
v3 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v3.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectEquivalent(java.lang.Object,java.lang.Object)>(v1, v2);
v4 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v4.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectDistinct(java.lang.Object,java.lang.Object)>(v2, v1);
v5 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v5.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectHash(java.lang.Object,int)>(v1, 1);
v6 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v6.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectHash(java.lang.Object,int)>(v2, 1);
v7 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v7.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void replay()>();
label1:
v8 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTester tester>;
v9 = newarray (java.lang.Object)[1];
v9[0] = v2;
v10 = virtualinvoke v8.<com.google.common.testing.EquivalenceTester: com.google.common.testing.EquivalenceTester addEquivalenceGroup(java.lang.Object,java.lang.Object[])>(v1, v9);
virtualinvoke v10.<com.google.common.testing.EquivalenceTester: com.google.common.testing.EquivalenceTester test()>();
label2:
goto label4;
label3:
v11 := @caughtexception;
v12 = virtualinvoke v11.<junit.framework.AssertionFailedError: java.lang.String getMessage()>();
v13 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StringSubject assertThat(java.lang.String)>(v12);
virtualinvoke v13.<com.google.common.truth.StringSubject: void contains(java.lang.CharSequence)>("TestObject{group=1, item=2} [group 1, item 2] must be equivalent to TestObject{group=1, item=1} [group 1, item 1]");
return;
label4:
staticinvoke <com.google.common.testing.EquivalenceTesterTest: void fail()>();
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testTest_transitive()
{
java.lang.Throwable v17;
java.lang.Object[] v15;
com.google.common.testing.EquivalenceTesterTest$MockEquivalence v10, v11, v12, v13, v4, v5, v6, v7, v8, v9;
com.google.common.testing.EquivalenceTesterTest$TestObject v1, v2, v3;
com.google.common.testing.EquivalenceTester v14, v16;
java.lang.String v18;
com.google.common.testing.EquivalenceTesterTest v0;
com.google.common.truth.StringSubject v19;
v0 := @this: com.google.common.testing.EquivalenceTesterTest;
v1 = new com.google.common.testing.EquivalenceTesterTest$TestObject;
specialinvoke v1.<com.google.common.testing.EquivalenceTesterTest$TestObject: void <init>(int,int)>(1, 1);
v2 = new com.google.common.testing.EquivalenceTesterTest$TestObject;
specialinvoke v2.<com.google.common.testing.EquivalenceTesterTest$TestObject: void <init>(int,int)>(1, 2);
v3 = new com.google.common.testing.EquivalenceTesterTest$TestObject;
specialinvoke v3.<com.google.common.testing.EquivalenceTesterTest$TestObject: void <init>(int,int)>(1, 3);
v4 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v4.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectEquivalent(java.lang.Object,java.lang.Object)>(v1, v2);
v5 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v5.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectEquivalent(java.lang.Object,java.lang.Object)>(v1, v3);
v6 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v6.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectEquivalent(java.lang.Object,java.lang.Object)>(v2, v1);
v7 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v7.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectDistinct(java.lang.Object,java.lang.Object)>(v2, v3);
v8 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v8.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectEquivalent(java.lang.Object,java.lang.Object)>(v3, v1);
v9 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v9.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectEquivalent(java.lang.Object,java.lang.Object)>(v3, v2);
v10 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v10.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectHash(java.lang.Object,int)>(v1, 1);
v11 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v11.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectHash(java.lang.Object,int)>(v2, 1);
v12 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v12.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectHash(java.lang.Object,int)>(v3, 1);
v13 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v13.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void replay()>();
label1:
v14 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTester tester>;
v15 = newarray (java.lang.Object)[2];
v15[0] = v2;
v15[1] = v3;
v16 = virtualinvoke v14.<com.google.common.testing.EquivalenceTester: com.google.common.testing.EquivalenceTester addEquivalenceGroup(java.lang.Object,java.lang.Object[])>(v1, v15);
virtualinvoke v16.<com.google.common.testing.EquivalenceTester: com.google.common.testing.EquivalenceTester test()>();
label2:
goto label4;
label3:
v17 := @caughtexception;
v18 = virtualinvoke v17.<junit.framework.AssertionFailedError: java.lang.String getMessage()>();
v19 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StringSubject assertThat(java.lang.String)>(v18);
virtualinvoke v19.<com.google.common.truth.StringSubject: void contains(java.lang.CharSequence)>("TestObject{group=1, item=2} [group 1, item 2] must be equivalent to TestObject{group=1, item=3} [group 1, item 3]");
return;
label4:
staticinvoke <com.google.common.testing.EquivalenceTesterTest: void fail()>();
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testTest_inequivalence()
{
java.lang.Throwable v13;
java.lang.Object[] v11, v9;
com.google.common.testing.EquivalenceTesterTest$MockEquivalence v3, v4, v5, v6, v7;
com.google.common.testing.EquivalenceTesterTest$TestObject v1, v2;
com.google.common.testing.EquivalenceTester v10, v12, v8;
java.lang.String v14;
com.google.common.testing.EquivalenceTesterTest v0;
com.google.common.truth.StringSubject v15;
v0 := @this: com.google.common.testing.EquivalenceTesterTest;
v1 = new com.google.common.testing.EquivalenceTesterTest$TestObject;
specialinvoke v1.<com.google.common.testing.EquivalenceTesterTest$TestObject: void <init>(int,int)>(1, 1);
v2 = new com.google.common.testing.EquivalenceTesterTest$TestObject;
specialinvoke v2.<com.google.common.testing.EquivalenceTesterTest$TestObject: void <init>(int,int)>(2, 1);
v3 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v3.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectEquivalent(java.lang.Object,java.lang.Object)>(v1, v2);
v4 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v4.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectDistinct(java.lang.Object,java.lang.Object)>(v2, v1);
v5 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v5.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectHash(java.lang.Object,int)>(v1, 1);
v6 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v6.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectHash(java.lang.Object,int)>(v2, 2);
v7 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v7.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void replay()>();
label1:
v8 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTester tester>;
v9 = newarray (java.lang.Object)[0];
v10 = virtualinvoke v8.<com.google.common.testing.EquivalenceTester: com.google.common.testing.EquivalenceTester addEquivalenceGroup(java.lang.Object,java.lang.Object[])>(v1, v9);
v11 = newarray (java.lang.Object)[0];
v12 = virtualinvoke v10.<com.google.common.testing.EquivalenceTester: com.google.common.testing.EquivalenceTester addEquivalenceGroup(java.lang.Object,java.lang.Object[])>(v2, v11);
virtualinvoke v12.<com.google.common.testing.EquivalenceTester: com.google.common.testing.EquivalenceTester test()>();
label2:
goto label4;
label3:
v13 := @caughtexception;
v14 = virtualinvoke v13.<junit.framework.AssertionFailedError: java.lang.String getMessage()>();
v15 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StringSubject assertThat(java.lang.String)>(v14);
virtualinvoke v15.<com.google.common.truth.StringSubject: void contains(java.lang.CharSequence)>("TestObject{group=1, item=1} [group 1, item 1] must not be equivalent to TestObject{group=2, item=1} [group 2, item 1]");
return;
label4:
staticinvoke <com.google.common.testing.EquivalenceTesterTest: void fail()>();
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testTest_hash()
{
java.lang.Throwable v11;
java.lang.Object[] v9;
com.google.common.testing.EquivalenceTesterTest$MockEquivalence v3, v4, v5, v6, v7;
com.google.common.testing.EquivalenceTesterTest$TestObject v1, v2;
com.google.common.testing.EquivalenceTester v10, v8;
java.lang.String v12, v14, v15;
boolean v13;
com.google.common.testing.EquivalenceTesterTest v0;
v0 := @this: com.google.common.testing.EquivalenceTesterTest;
v1 = new com.google.common.testing.EquivalenceTesterTest$TestObject;
specialinvoke v1.<com.google.common.testing.EquivalenceTesterTest$TestObject: void <init>(int,int)>(1, 1);
v2 = new com.google.common.testing.EquivalenceTesterTest$TestObject;
specialinvoke v2.<com.google.common.testing.EquivalenceTesterTest$TestObject: void <init>(int,int)>(1, 2);
v3 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v3.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectEquivalent(java.lang.Object,java.lang.Object)>(v1, v2);
v4 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v4.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectEquivalent(java.lang.Object,java.lang.Object)>(v2, v1);
v5 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v5.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectHash(java.lang.Object,int)>(v1, 1);
v6 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v6.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void expectHash(java.lang.Object,int)>(v2, 2);
v7 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTesterTest$MockEquivalence equivalenceMock>;
virtualinvoke v7.<com.google.common.testing.EquivalenceTesterTest$MockEquivalence: void replay()>();
label1:
v8 = v0.<com.google.common.testing.EquivalenceTesterTest: com.google.common.testing.EquivalenceTester tester>;
v9 = newarray (java.lang.Object)[1];
v9[0] = v2;
v10 = virtualinvoke v8.<com.google.common.testing.EquivalenceTester: com.google.common.testing.EquivalenceTester addEquivalenceGroup(java.lang.Object,java.lang.Object[])>(v1, v9);
virtualinvoke v10.<com.google.common.testing.EquivalenceTester: com.google.common.testing.EquivalenceTester test()>();
label2:
goto label5;
label3:
v11 := @caughtexception;
v12 = virtualinvoke v11.<junit.framework.AssertionFailedError: java.lang.String getMessage()>();
v13 = virtualinvoke v12.<java.lang.String: boolean contains(java.lang.CharSequence)>("the hash (1) of TestObject{group=1, item=1} [group 1, item 1] must be equal to the hash (2) of TestObject{group=1, item=2} [group 1, item 2]");
if v13 != 0 goto label4;
v14 = virtualinvoke v11.<junit.framework.AssertionFailedError: java.lang.String getMessage()>();
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v14, "the hash (1) of TestObject{group=1, item=1} [group 1, item 1] must be equal to the hash (2) of TestObject{group=1, item=2} [group 1, item 2]") <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("<\u0001> expected to contain <\u0001>");
staticinvoke <com.google.common.testing.EquivalenceTesterTest: void fail(java.lang.String)>(v15);
label4:
return;
label5:
staticinvoke <com.google.common.testing.EquivalenceTesterTest: void fail()>();
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
}