public class com.google.common.testing.NullPointerTesterTest extends junit.framework.TestCase
{
private static final java.lang.String[] STATIC_ONE_ARG_METHODS_SHOULD_PASS;
private static final java.lang.String[] STATIC_ONE_ARG_METHODS_SHOULD_FAIL;
private static final java.lang.String[] NONSTATIC_ONE_ARG_METHODS_SHOULD_PASS;
private static final java.lang.String[] NONSTATIC_ONE_ARG_METHODS_SHOULD_FAIL;
public void <init>()
{
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
return;
}
public void testInterfaceStaticMethod()
{
java.lang.AssertionError v2;
com.google.common.testing.NullPointerTester v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTester;
specialinvoke v1.<com.google.common.testing.NullPointerTester: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTester: void testAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/NullPointerTesterTest$InterfaceStaticMethodChecksNull;");
label1:
virtualinvoke v1.<com.google.common.testing.NullPointerTester: void testAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/NullPointerTesterTest$InterfaceStaticMethodFailsToCheckNull;");
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
staticinvoke <com.google.common.testing.NullPointerTesterTest: void fail()>();
return;
catch java.lang.AssertionError from label1 to label2 with label3;
}
public void testInterfaceDefaultMethod()
{
com.google.common.testing.NullPointerTester v1;
com.google.common.testing.NullPointerTesterTest$InterfaceDefaultMethodChecksNull v2;
com.google.common.testing.NullPointerTesterTest$InterfaceDefaultMethodFailsToCheckNull v3;
java.lang.AssertionError v4;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTester;
specialinvoke v1.<com.google.common.testing.NullPointerTester: void <init>()>();
v2 = staticinvoke <com.google.common.testing.NullPointerTesterTest$InterfaceDefaultMethodChecksNull: com.google.common.testing.NullPointerTesterTest$InterfaceDefaultMethodChecksNull create()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTester: void testAllPublicInstanceMethods(java.lang.Object)>(v2);
label1:
v3 = staticinvoke <com.google.common.testing.NullPointerTesterTest$InterfaceDefaultMethodFailsToCheckNull: com.google.common.testing.NullPointerTesterTest$InterfaceDefaultMethodFailsToCheckNull create()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTester: void testAllPublicInstanceMethods(java.lang.Object)>(v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
return;
label4:
staticinvoke <com.google.common.testing.NullPointerTesterTest: void fail()>();
return;
catch java.lang.AssertionError from label1 to label2 with label3;
}
public void testDontAcceptIae()
{
java.lang.Throwable v2;
com.google.common.testing.NullPointerTester v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTester;
specialinvoke v1.<com.google.common.testing.NullPointerTester: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTester: void testAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/NullPointerTesterTest$ThrowsNpe;");
virtualinvoke v1.<com.google.common.testing.NullPointerTester: void testAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/NullPointerTesterTest$ThrowsUoe;");
label1:
virtualinvoke v1.<com.google.common.testing.NullPointerTester: void testAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/NullPointerTesterTest$ThrowsIae;");
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
staticinvoke <com.google.common.testing.NullPointerTesterTest: void fail()>();
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testStaticOneArgMethodsThatShouldPass() throws java.lang.Exception
{
java.lang.Throwable v10;
com.google.common.testing.NullPointerTester v8;
java.lang.Class[] v6;
java.lang.String[] v1;
int v2, v3;
java.lang.Class v5;
java.lang.String v11, v4;
com.google.common.testing.NullPointerTesterTest$OneArg v9;
java.lang.reflect.Method v7;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = <com.google.common.testing.NullPointerTesterTest: java.lang.String[] STATIC_ONE_ARG_METHODS_SHOULD_PASS>;
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label6;
v4 = v1[v3];
v5 = class "Lcom/google/common/testing/NullPointerTesterTest$OneArg;";
v6 = newarray (java.lang.Class)[1];
v6[0] = class "Ljava/lang/String;";
v7 = virtualinvoke v5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(v4, v6);
label2:
v8 = new com.google.common.testing.NullPointerTester;
specialinvoke v8.<com.google.common.testing.NullPointerTester: void <init>()>();
v9 = new com.google.common.testing.NullPointerTesterTest$OneArg;
specialinvoke v9.<com.google.common.testing.NullPointerTesterTest$OneArg: void <init>()>();
virtualinvoke v8.<com.google.common.testing.NullPointerTester: void testMethodParameter(java.lang.Object,java.lang.reflect.Method,int)>(v9, v7, 0);
label3:
goto label5;
label4:
v10 := @caughtexception;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Should not have flagged method \u0001");
staticinvoke <com.google.common.testing.NullPointerTesterTest: void fail(java.lang.String)>(v11);
label5:
v3 = v3 + 1;
goto label1;
label6:
return;
catch junit.framework.AssertionFailedError from label2 to label3 with label4;
}
public void testStaticOneArgMethodsThatShouldFail() throws java.lang.Exception
{
java.lang.Throwable v11;
com.google.common.testing.NullPointerTester v9;
java.lang.Class[] v6;
java.lang.String[] v1;
int v2, v3;
java.lang.Class v5;
java.lang.String v12, v4;
com.google.common.testing.NullPointerTesterTest$OneArg v10;
java.lang.reflect.Method v7;
boolean v8;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = <com.google.common.testing.NullPointerTesterTest: java.lang.String[] STATIC_ONE_ARG_METHODS_SHOULD_FAIL>;
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label6;
v4 = v1[v3];
v5 = class "Lcom/google/common/testing/NullPointerTesterTest$OneArg;";
v6 = newarray (java.lang.Class)[1];
v6[0] = class "Ljava/lang/String;";
v7 = virtualinvoke v5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(v4, v6);
v8 = 0;
label2:
v9 = new com.google.common.testing.NullPointerTester;
specialinvoke v9.<com.google.common.testing.NullPointerTester: void <init>()>();
v10 = new com.google.common.testing.NullPointerTesterTest$OneArg;
specialinvoke v10.<com.google.common.testing.NullPointerTesterTest$OneArg: void <init>()>();
virtualinvoke v9.<com.google.common.testing.NullPointerTester: void testMethodParameter(java.lang.Object,java.lang.reflect.Method,int)>(v10, v7, 0);
label3:
goto label5;
label4:
v11 := @caughtexception;
v8 = 1;
label5:
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Should report error in method \u0001");
staticinvoke <com.google.common.testing.NullPointerTesterTest: void assertTrue(java.lang.String,boolean)>(v12, v8);
v3 = v3 + 1;
goto label1;
label6:
return;
catch junit.framework.AssertionFailedError from label2 to label3 with label4;
}
public void testNonStaticOneArgMethodsThatShouldPass() throws java.lang.Exception
{
java.lang.Throwable v10;
com.google.common.testing.NullPointerTester v9;
java.lang.Class[] v7;
java.lang.String[] v2;
int v3, v4;
java.lang.Class v6;
java.lang.String v11, v5;
com.google.common.testing.NullPointerTesterTest$OneArg v1;
java.lang.reflect.Method v8;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$OneArg;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$OneArg: void <init>()>();
v2 = <com.google.common.testing.NullPointerTesterTest: java.lang.String[] NONSTATIC_ONE_ARG_METHODS_SHOULD_PASS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label6;
v5 = v2[v4];
v6 = class "Lcom/google/common/testing/NullPointerTesterTest$OneArg;";
v7 = newarray (java.lang.Class)[1];
v7[0] = class "Ljava/lang/String;";
v8 = virtualinvoke v6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(v5, v7);
label2:
v9 = new com.google.common.testing.NullPointerTester;
specialinvoke v9.<com.google.common.testing.NullPointerTester: void <init>()>();
virtualinvoke v9.<com.google.common.testing.NullPointerTester: void testMethodParameter(java.lang.Object,java.lang.reflect.Method,int)>(v1, v8, 0);
label3:
goto label5;
label4:
v10 := @caughtexception;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Should not have flagged method \u0001");
staticinvoke <com.google.common.testing.NullPointerTesterTest: void fail(java.lang.String)>(v11);
label5:
v4 = v4 + 1;
goto label1;
label6:
return;
catch junit.framework.AssertionFailedError from label2 to label3 with label4;
}
public void testNonStaticOneArgMethodsThatShouldFail() throws java.lang.Exception
{
java.lang.Throwable v11;
com.google.common.testing.NullPointerTester v10;
java.lang.Class[] v7;
java.lang.String[] v2;
int v3, v4;
java.lang.Class v6;
java.lang.String v12, v5;
com.google.common.testing.NullPointerTesterTest$OneArg v1;
java.lang.reflect.Method v8;
boolean v9;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$OneArg;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$OneArg: void <init>()>();
v2 = <com.google.common.testing.NullPointerTesterTest: java.lang.String[] NONSTATIC_ONE_ARG_METHODS_SHOULD_FAIL>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label6;
v5 = v2[v4];
v6 = class "Lcom/google/common/testing/NullPointerTesterTest$OneArg;";
v7 = newarray (java.lang.Class)[1];
v7[0] = class "Ljava/lang/String;";
v8 = virtualinvoke v6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(v5, v7);
v9 = 0;
label2:
v10 = new com.google.common.testing.NullPointerTester;
specialinvoke v10.<com.google.common.testing.NullPointerTester: void <init>()>();
virtualinvoke v10.<com.google.common.testing.NullPointerTester: void testMethodParameter(java.lang.Object,java.lang.reflect.Method,int)>(v1, v8, 0);
label3:
goto label5;
label4:
v11 := @caughtexception;
v9 = 1;
label5:
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Should report error in method \u0001");
staticinvoke <com.google.common.testing.NullPointerTesterTest: void assertTrue(java.lang.String,boolean)>(v12, v9);
v4 = v4 + 1;
goto label1;
label6:
return;
catch junit.framework.AssertionFailedError from label2 to label3 with label4;
}
public void testMessageOtherException() throws java.lang.Exception
{
java.lang.Throwable v7;
com.google.common.testing.NullPointerTester v5;
java.lang.Class[] v2;
com.google.common.truth.StringSubject v11, v9;
java.lang.Class v1;
java.lang.String v10, v8;
com.google.common.testing.NullPointerTesterTest$OneArg v6;
java.lang.reflect.Method v3;
boolean v4;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = class "Lcom/google/common/testing/NullPointerTesterTest$OneArg;";
v2 = newarray (java.lang.Class)[1];
v2[0] = class "Ljava/lang/String;";
v3 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("staticOneArgThrowsOtherThanNpe", v2);
v4 = 0;
label1:
v5 = new com.google.common.testing.NullPointerTester;
specialinvoke v5.<com.google.common.testing.NullPointerTester: void <init>()>();
v6 = new com.google.common.testing.NullPointerTesterTest$OneArg;
specialinvoke v6.<com.google.common.testing.NullPointerTesterTest$OneArg: void <init>()>();
virtualinvoke v5.<com.google.common.testing.NullPointerTester: void testMethodParameter(java.lang.Object,java.lang.reflect.Method,int)>(v6, v3, 0);
label2:
goto label4;
label3:
v7 := @caughtexception;
v8 = virtualinvoke v7.<junit.framework.AssertionFailedError: java.lang.String getMessage()>();
v9 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StringSubject assertThat(java.lang.String)>(v8);
virtualinvoke v9.<com.google.common.truth.StringSubject: void contains(java.lang.CharSequence)>("index 0");
v10 = virtualinvoke v7.<junit.framework.AssertionFailedError: java.lang.String getMessage()>();
v11 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StringSubject assertThat(java.lang.String)>(v10);
virtualinvoke v11.<com.google.common.truth.StringSubject: void contains(java.lang.CharSequence)>("[null]");
v4 = 1;
label4:
staticinvoke <com.google.common.testing.NullPointerTesterTest: void assertTrue(java.lang.String,boolean)>("Should report error when different exception is thrown", v4);
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testMessageNoException() throws java.lang.Exception
{
java.lang.Throwable v7;
com.google.common.testing.NullPointerTester v5;
java.lang.Class[] v2;
com.google.common.truth.StringSubject v11, v9;
java.lang.Class v1;
java.lang.String v10, v8;
com.google.common.testing.NullPointerTesterTest$OneArg v6;
java.lang.reflect.Method v3;
boolean v4;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = class "Lcom/google/common/testing/NullPointerTesterTest$OneArg;";
v2 = newarray (java.lang.Class)[1];
v2[0] = class "Ljava/lang/String;";
v3 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("staticOneArgShouldThrowNpeButDoesnt", v2);
v4 = 0;
label1:
v5 = new com.google.common.testing.NullPointerTester;
specialinvoke v5.<com.google.common.testing.NullPointerTester: void <init>()>();
v6 = new com.google.common.testing.NullPointerTesterTest$OneArg;
specialinvoke v6.<com.google.common.testing.NullPointerTesterTest$OneArg: void <init>()>();
virtualinvoke v5.<com.google.common.testing.NullPointerTester: void testMethodParameter(java.lang.Object,java.lang.reflect.Method,int)>(v6, v3, 0);
label2:
goto label4;
label3:
v7 := @caughtexception;
v8 = virtualinvoke v7.<junit.framework.AssertionFailedError: java.lang.String getMessage()>();
v9 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StringSubject assertThat(java.lang.String)>(v8);
virtualinvoke v9.<com.google.common.truth.StringSubject: void contains(java.lang.CharSequence)>("index 0");
v10 = virtualinvoke v7.<junit.framework.AssertionFailedError: java.lang.String getMessage()>();
v11 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StringSubject assertThat(java.lang.String)>(v10);
virtualinvoke v11.<com.google.common.truth.StringSubject: void contains(java.lang.CharSequence)>("[null]");
v4 = 1;
label4:
staticinvoke <com.google.common.testing.NullPointerTesterTest: void assertTrue(java.lang.String,boolean)>("Should report error when no exception is thrown", v4);
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void verifyBarPass(java.lang.reflect.Method, com.google.common.testing.NullPointerTesterTest$TwoArg)
{
java.lang.Throwable v4;
java.lang.Object[] v5;
com.google.common.testing.NullPointerTester v3;
com.google.common.testing.NullPointerTesterTest$TwoArg v2;
java.lang.String v6, v7;
java.lang.reflect.Method v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 := @parameter0: java.lang.reflect.Method;
v2 := @parameter1: com.google.common.testing.NullPointerTesterTest$TwoArg;
label1:
v3 = new com.google.common.testing.NullPointerTester;
specialinvoke v3.<com.google.common.testing.NullPointerTester: void <init>()>();
virtualinvoke v3.<com.google.common.testing.NullPointerTester: void testMethod(java.lang.Object,java.lang.reflect.Method)>(v2, v1);
label2:
goto label4;
label3:
v4 := @caughtexception;
v5 = newarray (java.lang.Object)[2];
v6 = virtualinvoke v1.<java.lang.reflect.Method: java.lang.String getName()>();
v5[0] = v6;
v5[1] = v2;
v7 = staticinvoke <com.google.common.testing.NullPointerTesterTest: java.lang.String rootLocaleFormat(java.lang.String,java.lang.Object[])>("Should not have flagged method %s for %s", v5);
staticinvoke <com.google.common.testing.NullPointerTesterTest: void assertNull(java.lang.String,java.lang.Object)>(v7, v4);
label4:
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void verifyBarFail(java.lang.reflect.Method, com.google.common.testing.NullPointerTesterTest$TwoArg)
{
java.lang.Throwable v4;
java.lang.Object[] v5;
com.google.common.testing.NullPointerTester v3;
com.google.common.testing.NullPointerTesterTest$TwoArg v2;
java.lang.String v6, v7;
java.lang.reflect.Method v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 := @parameter0: java.lang.reflect.Method;
v2 := @parameter1: com.google.common.testing.NullPointerTesterTest$TwoArg;
label1:
v3 = new com.google.common.testing.NullPointerTester;
specialinvoke v3.<com.google.common.testing.NullPointerTester: void <init>()>();
virtualinvoke v3.<com.google.common.testing.NullPointerTester: void testMethod(java.lang.Object,java.lang.reflect.Method)>(v2, v1);
label2:
goto label4;
label3:
v4 := @caughtexception;
return;
label4:
v5 = newarray (java.lang.Object)[2];
v6 = virtualinvoke v1.<java.lang.reflect.Method: java.lang.String getName()>();
v5[0] = v6;
v5[1] = v2;
v7 = staticinvoke <com.google.common.testing.NullPointerTesterTest: java.lang.String rootLocaleFormat(java.lang.String,java.lang.Object[])>("Should have flagged method %s for %s", v5);
staticinvoke <com.google.common.testing.NullPointerTesterTest: void fail(java.lang.String)>(v7);
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testTwoArgNormalNormal() throws java.lang.Exception
{
int v10, v5, v6, v9;
com.google.common.testing.NullPointerTesterTest$TwoArg$Action v11, v13, v15, v7;
java.lang.reflect.Method v3;
boolean v14, v16;
com.google.common.testing.NullPointerTesterTest v0;
com.google.common.testing.NullPointerTesterTest$TwoArg v12;
java.lang.Class[] v2;
com.google.common.testing.NullPointerTesterTest$TwoArg$Action[] v4, v8;
java.lang.Class v1;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = class "Lcom/google/common/testing/NullPointerTesterTest$TwoArg;";
v2 = newarray (java.lang.Class)[2];
v2[0] = class "Ljava/lang/String;";
v2[1] = class "Ljava/lang/Integer;";
v3 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("normalNormal", v2);
v4 = staticinvoke <com.google.common.testing.NullPointerTesterTest$TwoArg$Action: com.google.common.testing.NullPointerTesterTest$TwoArg$Action[] values()>();
v5 = lengthof v4;
v6 = 0;
label1:
if v6 >= v5 goto label6;
v7 = v4[v6];
v8 = staticinvoke <com.google.common.testing.NullPointerTesterTest$TwoArg$Action: com.google.common.testing.NullPointerTesterTest$TwoArg$Action[] values()>();
v9 = lengthof v8;
v10 = 0;
label2:
if v10 >= v9 goto label5;
v11 = v8[v10];
v12 = new com.google.common.testing.NullPointerTesterTest$TwoArg;
specialinvoke v12.<com.google.common.testing.NullPointerTesterTest$TwoArg: void <init>(com.google.common.testing.NullPointerTesterTest$TwoArg$Action,com.google.common.testing.NullPointerTesterTest$TwoArg$Action)>(v7, v11);
v13 = <com.google.common.testing.NullPointerTesterTest$TwoArg$Action: com.google.common.testing.NullPointerTesterTest$TwoArg$Action THROW_A_NPE>;
v14 = virtualinvoke v7.<com.google.common.testing.NullPointerTesterTest$TwoArg$Action: boolean equals(java.lang.Object)>(v13);
if v14 == 0 goto label3;
v15 = <com.google.common.testing.NullPointerTesterTest$TwoArg$Action: com.google.common.testing.NullPointerTesterTest$TwoArg$Action THROW_A_NPE>;
v16 = virtualinvoke v11.<com.google.common.testing.NullPointerTesterTest$TwoArg$Action: boolean equals(java.lang.Object)>(v15);
if v16 == 0 goto label3;
virtualinvoke v0.<com.google.common.testing.NullPointerTesterTest: void verifyBarPass(java.lang.reflect.Method,com.google.common.testing.NullPointerTesterTest$TwoArg)>(v3, v12);
goto label4;
label3:
virtualinvoke v0.<com.google.common.testing.NullPointerTesterTest: void verifyBarFail(java.lang.reflect.Method,com.google.common.testing.NullPointerTesterTest$TwoArg)>(v3, v12);
label4:
v10 = v10 + 1;
goto label2;
label5:
v6 = v6 + 1;
goto label1;
label6:
return;
}
public void testTwoArgNormalNullable() throws java.lang.Exception
{
com.google.common.testing.NullPointerTesterTest$TwoArg v12;
java.lang.Class[] v2;
com.google.common.testing.NullPointerTesterTest$TwoArg$Action[] v4, v8;
int v10, v5, v6, v9;
java.lang.Class v1;
com.google.common.testing.NullPointerTesterTest$TwoArg$Action v11, v13, v7;
java.lang.reflect.Method v3;
boolean v14;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = class "Lcom/google/common/testing/NullPointerTesterTest$TwoArg;";
v2 = newarray (java.lang.Class)[2];
v2[0] = class "Ljava/lang/String;";
v2[1] = class "Ljava/lang/Integer;";
v3 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("normalNullable", v2);
v4 = staticinvoke <com.google.common.testing.NullPointerTesterTest$TwoArg$Action: com.google.common.testing.NullPointerTesterTest$TwoArg$Action[] values()>();
v5 = lengthof v4;
v6 = 0;
label1:
if v6 >= v5 goto label6;
v7 = v4[v6];
v8 = staticinvoke <com.google.common.testing.NullPointerTesterTest$TwoArg$Action: com.google.common.testing.NullPointerTesterTest$TwoArg$Action[] values()>();
v9 = lengthof v8;
v10 = 0;
label2:
if v10 >= v9 goto label5;
v11 = v8[v10];
v12 = new com.google.common.testing.NullPointerTesterTest$TwoArg;
specialinvoke v12.<com.google.common.testing.NullPointerTesterTest$TwoArg: void <init>(com.google.common.testing.NullPointerTesterTest$TwoArg$Action,com.google.common.testing.NullPointerTesterTest$TwoArg$Action)>(v7, v11);
v13 = <com.google.common.testing.NullPointerTesterTest$TwoArg$Action: com.google.common.testing.NullPointerTesterTest$TwoArg$Action THROW_A_NPE>;
v14 = virtualinvoke v7.<com.google.common.testing.NullPointerTesterTest$TwoArg$Action: boolean equals(java.lang.Object)>(v13);
if v14 == 0 goto label3;
virtualinvoke v0.<com.google.common.testing.NullPointerTesterTest: void verifyBarPass(java.lang.reflect.Method,com.google.common.testing.NullPointerTesterTest$TwoArg)>(v3, v12);
goto label4;
label3:
virtualinvoke v0.<com.google.common.testing.NullPointerTesterTest: void verifyBarFail(java.lang.reflect.Method,com.google.common.testing.NullPointerTesterTest$TwoArg)>(v3, v12);
label4:
v10 = v10 + 1;
goto label2;
label5:
v6 = v6 + 1;
goto label1;
label6:
return;
}
public void testTwoArgNullableNormal() throws java.lang.Exception
{
com.google.common.testing.NullPointerTesterTest$TwoArg v12;
java.lang.Class[] v2;
com.google.common.testing.NullPointerTesterTest$TwoArg$Action[] v4, v8;
int v10, v5, v6, v9;
java.lang.Class v1;
com.google.common.testing.NullPointerTesterTest$TwoArg$Action v11, v13, v7;
java.lang.reflect.Method v3;
boolean v14;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = class "Lcom/google/common/testing/NullPointerTesterTest$TwoArg;";
v2 = newarray (java.lang.Class)[2];
v2[0] = class "Ljava/lang/String;";
v2[1] = class "Ljava/lang/Integer;";
v3 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("nullableNormal", v2);
v4 = staticinvoke <com.google.common.testing.NullPointerTesterTest$TwoArg$Action: com.google.common.testing.NullPointerTesterTest$TwoArg$Action[] values()>();
v5 = lengthof v4;
v6 = 0;
label1:
if v6 >= v5 goto label6;
v7 = v4[v6];
v8 = staticinvoke <com.google.common.testing.NullPointerTesterTest$TwoArg$Action: com.google.common.testing.NullPointerTesterTest$TwoArg$Action[] values()>();
v9 = lengthof v8;
v10 = 0;
label2:
if v10 >= v9 goto label5;
v11 = v8[v10];
v12 = new com.google.common.testing.NullPointerTesterTest$TwoArg;
specialinvoke v12.<com.google.common.testing.NullPointerTesterTest$TwoArg: void <init>(com.google.common.testing.NullPointerTesterTest$TwoArg$Action,com.google.common.testing.NullPointerTesterTest$TwoArg$Action)>(v7, v11);
v13 = <com.google.common.testing.NullPointerTesterTest$TwoArg$Action: com.google.common.testing.NullPointerTesterTest$TwoArg$Action THROW_A_NPE>;
v14 = virtualinvoke v11.<com.google.common.testing.NullPointerTesterTest$TwoArg$Action: boolean equals(java.lang.Object)>(v13);
if v14 == 0 goto label3;
virtualinvoke v0.<com.google.common.testing.NullPointerTesterTest: void verifyBarPass(java.lang.reflect.Method,com.google.common.testing.NullPointerTesterTest$TwoArg)>(v3, v12);
goto label4;
label3:
virtualinvoke v0.<com.google.common.testing.NullPointerTesterTest: void verifyBarFail(java.lang.reflect.Method,com.google.common.testing.NullPointerTesterTest$TwoArg)>(v3, v12);
label4:
v10 = v10 + 1;
goto label2;
label5:
v6 = v6 + 1;
goto label1;
label6:
return;
}
public void testTwoArgNullableNullable() throws java.lang.Exception
{
com.google.common.testing.NullPointerTesterTest$TwoArg v12;
java.lang.Class[] v2;
com.google.common.testing.NullPointerTesterTest$TwoArg$Action[] v4, v8;
int v10, v5, v6, v9;
java.lang.Class v1;
com.google.common.testing.NullPointerTesterTest$TwoArg$Action v11, v7;
java.lang.reflect.Method v3;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = class "Lcom/google/common/testing/NullPointerTesterTest$TwoArg;";
v2 = newarray (java.lang.Class)[2];
v2[0] = class "Ljava/lang/String;";
v2[1] = class "Ljava/lang/Integer;";
v3 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("nullableNullable", v2);
v4 = staticinvoke <com.google.common.testing.NullPointerTesterTest$TwoArg$Action: com.google.common.testing.NullPointerTesterTest$TwoArg$Action[] values()>();
v5 = lengthof v4;
v6 = 0;
label1:
if v6 >= v5 goto label4;
v7 = v4[v6];
v8 = staticinvoke <com.google.common.testing.NullPointerTesterTest$TwoArg$Action: com.google.common.testing.NullPointerTesterTest$TwoArg$Action[] values()>();
v9 = lengthof v8;
v10 = 0;
label2:
if v10 >= v9 goto label3;
v11 = v8[v10];
v12 = new com.google.common.testing.NullPointerTesterTest$TwoArg;
specialinvoke v12.<com.google.common.testing.NullPointerTesterTest$TwoArg: void <init>(com.google.common.testing.NullPointerTesterTest$TwoArg$Action,com.google.common.testing.NullPointerTesterTest$TwoArg$Action)>(v7, v11);
virtualinvoke v0.<com.google.common.testing.NullPointerTesterTest: void verifyBarPass(java.lang.reflect.Method,com.google.common.testing.NullPointerTesterTest$TwoArg)>(v3, v12);
v10 = v10 + 1;
goto label2;
label3:
v6 = v6 + 1;
goto label1;
label4:
return;
}
public void testGoodClass()
{
com.google.common.testing.NullPointerTesterTest$PassObject v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$PassObject;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$PassObject: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldPass(java.lang.Object)>(v1);
return;
}
public void testFailOneArgDoesntThrowNpe()
{
com.google.common.testing.NullPointerTesterTest$FailOneArgDoesntThrowNPE v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$FailOneArgDoesntThrowNPE;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$FailOneArgDoesntThrowNPE: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object)>(v1);
return;
}
public void testFailOneArgThrowsWrongType()
{
com.google.common.testing.NullPointerTesterTest$FailOneArgThrowsWrongType v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$FailOneArgThrowsWrongType;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$FailOneArgThrowsWrongType: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object)>(v1);
return;
}
public void testPassOneNullableArgThrowsNPE()
{
com.google.common.testing.NullPointerTesterTest$PassOneNullableArgThrowsNPE v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$PassOneNullableArgThrowsNPE;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$PassOneNullableArgThrowsNPE: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldPass(java.lang.Object)>(v1);
return;
}
public void testFailTwoArgsFirstArgDoesntThrowNPE()
{
com.google.common.testing.NullPointerTesterTest$FailTwoArgsFirstArgDoesntThrowNPE v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$FailTwoArgsFirstArgDoesntThrowNPE;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$FailTwoArgsFirstArgDoesntThrowNPE: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object)>(v1);
return;
}
public void testFailTwoArgsFirstArgThrowsWrongType()
{
com.google.common.testing.NullPointerTesterTest v0;
com.google.common.testing.NullPointerTesterTest$FailTwoArgsFirstArgThrowsWrongType v1;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$FailTwoArgsFirstArgThrowsWrongType;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$FailTwoArgsFirstArgThrowsWrongType: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object)>(v1);
return;
}
public void testFailTwoArgsSecondArgDoesntThrowNPE()
{
com.google.common.testing.NullPointerTesterTest$FailTwoArgsSecondArgDoesntThrowNPE v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$FailTwoArgsSecondArgDoesntThrowNPE;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$FailTwoArgsSecondArgDoesntThrowNPE: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object)>(v1);
return;
}
public void testFailTwoArgsSecondArgThrowsWrongType()
{
com.google.common.testing.NullPointerTesterTest$FailTwoArgsSecondArgThrowsWrongType v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$FailTwoArgsSecondArgThrowsWrongType;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$FailTwoArgsSecondArgThrowsWrongType: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object)>(v1);
return;
}
public void testFailTwoMixedArgsFirstArgDoesntThrowNPE()
{
com.google.common.testing.NullPointerTesterTest v0;
com.google.common.testing.NullPointerTesterTest$FailTwoMixedArgsFirstArgDoesntThrowNPE v1;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$FailTwoMixedArgsFirstArgDoesntThrowNPE;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$FailTwoMixedArgsFirstArgDoesntThrowNPE: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object)>(v1);
return;
}
public void testFailTwoMixedArgsFirstArgThrowsWrongType()
{
com.google.common.testing.NullPointerTesterTest$FailTwoMixedArgsFirstArgThrowsWrongType v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$FailTwoMixedArgsFirstArgThrowsWrongType;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$FailTwoMixedArgsFirstArgThrowsWrongType: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object)>(v1);
return;
}
public void testPassTwoMixedArgsNullableArgThrowsNPE()
{
com.google.common.testing.NullPointerTesterTest$PassTwoMixedArgsNullableArgThrowsNPE v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$PassTwoMixedArgsNullableArgThrowsNPE;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$PassTwoMixedArgsNullableArgThrowsNPE: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldPass(java.lang.Object)>(v1);
return;
}
public void testPassTwoMixedArgSecondNullableArgThrowsOther()
{
com.google.common.testing.NullPointerTesterTest$PassTwoMixedArgSecondNullableArgThrowsOther v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$PassTwoMixedArgSecondNullableArgThrowsOther;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$PassTwoMixedArgSecondNullableArgThrowsOther: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldPass(java.lang.Object)>(v1);
return;
}
public void testFailTwoMixedArgsSecondArgDoesntThrowNPE()
{
com.google.common.testing.NullPointerTesterTest$FailTwoMixedArgsSecondArgDoesntThrowNPE v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$FailTwoMixedArgsSecondArgDoesntThrowNPE;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$FailTwoMixedArgsSecondArgDoesntThrowNPE: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object)>(v1);
return;
}
public void testFailTwoMixedArgsSecondArgThrowsWrongType()
{
com.google.common.testing.NullPointerTesterTest$FailTwoMixedArgsSecondArgThrowsWrongType v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$FailTwoMixedArgsSecondArgThrowsWrongType;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$FailTwoMixedArgsSecondArgThrowsWrongType: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object)>(v1);
return;
}
public void testPassTwoNullableArgsFirstThrowsNPE()
{
com.google.common.testing.NullPointerTesterTest$PassTwoNullableArgsFirstThrowsNPE v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$PassTwoNullableArgsFirstThrowsNPE;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$PassTwoNullableArgsFirstThrowsNPE: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldPass(java.lang.Object)>(v1);
return;
}
public void testPassTwoNullableArgsFirstThrowsOther()
{
com.google.common.testing.NullPointerTesterTest$PassTwoNullableArgsFirstThrowsOther v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$PassTwoNullableArgsFirstThrowsOther;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$PassTwoNullableArgsFirstThrowsOther: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldPass(java.lang.Object)>(v1);
return;
}
public void testPassTwoNullableArgsSecondThrowsNPE()
{
com.google.common.testing.NullPointerTesterTest$PassTwoNullableArgsSecondThrowsNPE v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$PassTwoNullableArgsSecondThrowsNPE;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$PassTwoNullableArgsSecondThrowsNPE: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldPass(java.lang.Object)>(v1);
return;
}
public void testPassTwoNullableArgsSecondThrowsOther()
{
com.google.common.testing.NullPointerTesterTest$PassTwoNullableArgsSecondThrowsOther v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$PassTwoNullableArgsSecondThrowsOther;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$PassTwoNullableArgsSecondThrowsOther: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldPass(java.lang.Object)>(v1);
return;
}
public void testPassTwoNullableArgsNeitherThrowsAnything()
{
com.google.common.testing.NullPointerTesterTest$PassTwoNullableArgsNeitherThrowsAnything v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$PassTwoNullableArgsNeitherThrowsAnything;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$PassTwoNullableArgsNeitherThrowsAnything: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldPass(java.lang.Object)>(v1);
return;
}
public void testSubclassWithBadSuperclass()
{
com.google.common.testing.NullPointerTesterTest$SubclassWithBadSuperclass v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$SubclassWithBadSuperclass;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$SubclassWithBadSuperclass: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object)>(v1);
return;
}
public void testSubclassWithBadSuperclassForPackagePrivateMethod()
{
com.google.common.testing.NullPointerTesterTest$SubclassWithBadSuperclassForPackagePrivate v1;
com.google.common.testing.NullPointerTester$Visibility v2;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$SubclassWithBadSuperclassForPackagePrivate;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$SubclassWithBadSuperclassForPackagePrivate: void <init>()>();
v2 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PACKAGE>;
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object,com.google.common.testing.NullPointerTester$Visibility)>(v1, v2);
return;
}
public void testSubclassWithBadSuperclassForPackageProtectedMethod()
{
com.google.common.testing.NullPointerTester$Visibility v2;
com.google.common.testing.NullPointerTesterTest$SubclassWithBadSuperclassForProtected v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$SubclassWithBadSuperclassForProtected;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$SubclassWithBadSuperclassForProtected: void <init>()>();
v2 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PROTECTED>;
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object,com.google.common.testing.NullPointerTester$Visibility)>(v1, v2);
return;
}
public void testSubclassThatOverridesBadSuperclassMethod()
{
com.google.common.testing.NullPointerTesterTest$SubclassThatOverridesBadSuperclassMethod v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$SubclassThatOverridesBadSuperclassMethod;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$SubclassThatOverridesBadSuperclassMethod: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldPass(java.lang.Object)>(v1);
return;
}
public void testSubclassOverridesTheWrongMethod()
{
com.google.common.testing.NullPointerTesterTest$SubclassOverridesTheWrongMethod v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$SubclassOverridesTheWrongMethod;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$SubclassOverridesTheWrongMethod: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object)>(v1);
return;
}
public void testClassThatFailsToThrowForStatic()
{
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Class)>(class "Lcom/google/common/testing/NullPointerTesterTest$ClassThatFailsToThrowForStatic;");
return;
}
public void testSubclassThatFailsToThrowForStatic()
{
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Class)>(class "Lcom/google/common/testing/NullPointerTesterTest$SubclassThatFailsToThrowForStatic;");
return;
}
public void testSubclassThatTriesToOverrideBadStaticMethod()
{
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Class)>(class "Lcom/google/common/testing/NullPointerTesterTest$SubclassThatTriesToOverrideBadStaticMethod;");
return;
}
public void testCanCreateDefault()
{
com.google.common.testing.NullPointerTesterTest$CanCreateDefault v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$CanCreateDefault;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$CanCreateDefault: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldPass(java.lang.Object)>(v1);
return;
}
public void testCannotCreateDefault()
{
com.google.common.testing.NullPointerTesterTest$CannotCreateDefault v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$CannotCreateDefault;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$CannotCreateDefault: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object)>(v1);
return;
}
private static void shouldPass(java.lang.Object, com.google.common.testing.NullPointerTester$Visibility)
{
java.lang.Object v0;
com.google.common.testing.NullPointerTester v2;
com.google.common.testing.NullPointerTester$Visibility v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: com.google.common.testing.NullPointerTester$Visibility;
v2 = new com.google.common.testing.NullPointerTester;
specialinvoke v2.<com.google.common.testing.NullPointerTester: void <init>()>();
virtualinvoke v2.<com.google.common.testing.NullPointerTester: void testInstanceMethods(java.lang.Object,com.google.common.testing.NullPointerTester$Visibility)>(v0, v1);
return;
}
private static void shouldPass(java.lang.Object)
{
java.lang.Object v0;
com.google.common.testing.NullPointerTester$Visibility v1, v2, v3;
v0 := @parameter0: java.lang.Object;
v1 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PACKAGE>;
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldPass(java.lang.Object,com.google.common.testing.NullPointerTester$Visibility)>(v0, v1);
v2 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PROTECTED>;
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldPass(java.lang.Object,com.google.common.testing.NullPointerTester$Visibility)>(v0, v2);
v3 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PUBLIC>;
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldPass(java.lang.Object,com.google.common.testing.NullPointerTester$Visibility)>(v0, v3);
return;
}
private static void shouldFail(java.lang.Object, com.google.common.testing.NullPointerTester$Visibility)
{
java.lang.Throwable v3;
com.google.common.testing.NullPointerTester v2;
java.lang.Class v4;
java.lang.Object v0;
java.lang.String v5, v6;
com.google.common.testing.NullPointerTester$Visibility v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: com.google.common.testing.NullPointerTester$Visibility;
label1:
v2 = new com.google.common.testing.NullPointerTester;
specialinvoke v2.<com.google.common.testing.NullPointerTester: void <init>()>();
virtualinvoke v2.<com.google.common.testing.NullPointerTester: void testInstanceMethods(java.lang.Object,com.google.common.testing.NullPointerTester$Visibility)>(v0, v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
return;
label4:
v4 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v5 = virtualinvoke v4.<java.lang.Class: java.lang.String getSimpleName()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Should detect problem in \u0001");
staticinvoke <com.google.common.testing.NullPointerTesterTest: void fail(java.lang.String)>(v6);
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
private static void shouldFail(java.lang.Object)
{
java.lang.Object v0;
com.google.common.testing.NullPointerTester$Visibility v1, v2, v3;
v0 := @parameter0: java.lang.Object;
v1 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PACKAGE>;
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object,com.google.common.testing.NullPointerTester$Visibility)>(v0, v1);
v2 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PROTECTED>;
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object,com.google.common.testing.NullPointerTester$Visibility)>(v0, v2);
v3 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PUBLIC>;
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object,com.google.common.testing.NullPointerTester$Visibility)>(v0, v3);
return;
}
private static void shouldFail(java.lang.Class, com.google.common.testing.NullPointerTester$Visibility)
{
java.lang.Throwable v3;
com.google.common.testing.NullPointerTester v2;
java.lang.Class v0;
java.lang.String v4, v5;
com.google.common.testing.NullPointerTester$Visibility v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: com.google.common.testing.NullPointerTester$Visibility;
label1:
v2 = new com.google.common.testing.NullPointerTester;
specialinvoke v2.<com.google.common.testing.NullPointerTester: void <init>()>();
virtualinvoke v2.<com.google.common.testing.NullPointerTester: void testStaticMethods(java.lang.Class,com.google.common.testing.NullPointerTester$Visibility)>(v0, v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
return;
label4:
v4 = virtualinvoke v0.<java.lang.Class: java.lang.String getSimpleName()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Should detect problem in \u0001");
staticinvoke <com.google.common.testing.NullPointerTesterTest: void fail(java.lang.String)>(v5);
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
private static void shouldFail(java.lang.Class)
{
java.lang.Class v0;
com.google.common.testing.NullPointerTester$Visibility v1;
v0 := @parameter0: java.lang.Class;
v1 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PACKAGE>;
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Class,com.google.common.testing.NullPointerTester$Visibility)>(v0, v1);
return;
}
public void testPrivateClass()
{
java.lang.reflect.Constructor[] v3;
com.google.common.testing.NullPointerTester v1;
int v4, v5;
java.lang.Class v2;
java.lang.reflect.Constructor v6;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTester;
specialinvoke v1.<com.google.common.testing.NullPointerTester: void <init>()>();
v2 = class "Lcom/google/common/testing/NullPointerTesterTest$PrivateClassWithPrivateConstructor;";
v3 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label2;
v6 = v3[v5];
virtualinvoke v1.<com.google.common.testing.NullPointerTester: void testConstructor(java.lang.reflect.Constructor)>(v6);
v5 = v5 + 1;
goto label1;
label2:
return;
}
public void testBridgeMethodIgnored()
{
com.google.common.testing.NullPointerTesterTest$StringFoo v2;
com.google.common.testing.NullPointerTester v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTester;
specialinvoke v1.<com.google.common.testing.NullPointerTester: void <init>()>();
v2 = new com.google.common.testing.NullPointerTesterTest$StringFoo;
specialinvoke v2.<com.google.common.testing.NullPointerTesterTest$StringFoo: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTester: void testAllPublicInstanceMethods(java.lang.Object)>(v2);
return;
}
public void testDefaultValues()
{
com.google.common.testing.NullPointerTesterTest$AllDefaultValuesChecker v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$AllDefaultValuesChecker;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$AllDefaultValuesChecker: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTesterTest$AllDefaultValuesChecker: void check()>();
return;
}
public void testObjectArrayDefaultValue()
{
com.google.common.testing.NullPointerTesterTest$ObjectArrayDefaultValueChecker v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$ObjectArrayDefaultValueChecker;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$ObjectArrayDefaultValueChecker: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTesterTest$ObjectArrayDefaultValueChecker: void check()>();
return;
}
public void testStringArrayDefaultValue()
{
com.google.common.testing.NullPointerTesterTest$StringArrayDefaultValueChecker v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$StringArrayDefaultValueChecker;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$StringArrayDefaultValueChecker: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTesterTest$StringArrayDefaultValueChecker: void check()>();
return;
}
public void testIntArrayDefaultValue()
{
com.google.common.testing.NullPointerTesterTest$IntArrayDefaultValueChecker v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$IntArrayDefaultValueChecker;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$IntArrayDefaultValueChecker: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTesterTest$IntArrayDefaultValueChecker: void check()>();
return;
}
public void testEmptyEnumDefaultValue()
{
com.google.common.testing.NullPointerTesterTest$EmptyEnumDefaultValueChecker v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$EmptyEnumDefaultValueChecker;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$EmptyEnumDefaultValueChecker: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTesterTest$EmptyEnumDefaultValueChecker: void check()>();
return;
}
public void testGenericClassDefaultValue()
{
com.google.common.testing.NullPointerTesterTest$GenericClassTypeDefaultValueChecker v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$GenericClassTypeDefaultValueChecker;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$GenericClassTypeDefaultValueChecker: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTesterTest$GenericClassTypeDefaultValueChecker: void check()>();
return;
}
public void testNonGenericClassDefaultValue()
{
com.google.common.testing.NullPointerTesterTest$NonGenericClassTypeDefaultValueChecker v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$NonGenericClassTypeDefaultValueChecker;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$NonGenericClassTypeDefaultValueChecker: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTesterTest$NonGenericClassTypeDefaultValueChecker: void check()>();
return;
}
public void testGenericTypeTokenDefaultValue()
{
com.google.common.testing.NullPointerTesterTest$GenericTypeTokenDefaultValueChecker v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$GenericTypeTokenDefaultValueChecker;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$GenericTypeTokenDefaultValueChecker: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTesterTest$GenericTypeTokenDefaultValueChecker: void check()>();
return;
}
public void testNonGenericTypeTokenDefaultValue()
{
com.google.common.testing.NullPointerTesterTest$NonGenericTypeTokenDefaultValueChecker v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$NonGenericTypeTokenDefaultValueChecker;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$NonGenericTypeTokenDefaultValueChecker: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTesterTest$NonGenericTypeTokenDefaultValueChecker: void check()>();
return;
}
public void testGenericInterfaceDefaultValue()
{
com.google.common.testing.NullPointerTesterTest$GenericInterfaceDefaultValueChecker v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$GenericInterfaceDefaultValueChecker;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$GenericInterfaceDefaultValueChecker: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTesterTest$GenericInterfaceDefaultValueChecker: void check()>();
return;
}
public void testNullRejectingInterfaceDefaultValue()
{
com.google.common.testing.NullPointerTesterTest$NullRejectingInterfaceDefaultValueChecker v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$NullRejectingInterfaceDefaultValueChecker;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$NullRejectingInterfaceDefaultValueChecker: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTesterTest$NullRejectingInterfaceDefaultValueChecker: void check()>();
return;
}
public void testMultipleInterfacesDefaultValue()
{
com.google.common.testing.NullPointerTesterTest$MultipleInterfacesDefaultValueChecker v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$MultipleInterfacesDefaultValueChecker;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$MultipleInterfacesDefaultValueChecker: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTesterTest$MultipleInterfacesDefaultValueChecker: void check()>();
return;
}
public void testGenericInterfaceReturnedByGenericMethod()
{
com.google.common.testing.NullPointerTesterTest$GenericInterface2DefaultValueChecker v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$GenericInterface2DefaultValueChecker;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$GenericInterface2DefaultValueChecker: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTesterTest$GenericInterface2DefaultValueChecker: void check()>();
return;
}
public void testGenericTypeResolvedForDefaultValue()
{
com.google.common.testing.NullPointerTesterTest$GenericDefaultValueResolvedToStringChecker v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$GenericDefaultValueResolvedToStringChecker;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$GenericDefaultValueResolvedToStringChecker: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTesterTest$GenericDefaultValueResolvedToStringChecker: void check()>();
return;
}
public void testDefaultValueResolvedForPackagePrivateMethod()
{
com.google.common.testing.NullPointerTesterTest v0;
com.google.common.testing.NullPointerTesterTest$DefaultValueForPackagePrivateMethodResolvedToStringChecker v1;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$DefaultValueForPackagePrivateMethodResolvedToStringChecker;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$DefaultValueForPackagePrivateMethodResolvedToStringChecker: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTesterTest$DefaultValueForPackagePrivateMethodResolvedToStringChecker: void check()>();
return;
}
public void testConverterDefaultValue()
{
com.google.common.testing.NullPointerTesterTest$ConverterDefaultValueChecker v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$ConverterDefaultValueChecker;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$ConverterDefaultValueChecker: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTesterTest$ConverterDefaultValueChecker: void check()>();
return;
}
public void testVisibility_public() throws java.lang.Exception
{
com.google.common.testing.NullPointerTester$Visibility v1, v11, v16, v6;
java.lang.reflect.Method v14, v19, v4, v9;
boolean v10, v15, v20, v5;
com.google.common.testing.NullPointerTesterTest v0;
java.lang.Class[] v13, v18, v3, v8;
java.lang.Class v12, v17, v2, v7;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PUBLIC>;
v2 = class "Lcom/google/common/testing/NullPointerTesterTest$VisibilityMethods;";
v3 = newarray (java.lang.Class)[0];
v4 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("privateMethod", v3);
v5 = virtualinvoke v1.<com.google.common.testing.NullPointerTester$Visibility: boolean isVisible(java.lang.reflect.Member)>(v4);
staticinvoke <com.google.common.testing.NullPointerTesterTest: void assertFalse(boolean)>(v5);
v6 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PUBLIC>;
v7 = class "Lcom/google/common/testing/NullPointerTesterTest$VisibilityMethods;";
v8 = newarray (java.lang.Class)[0];
v9 = virtualinvoke v7.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("packagePrivateMethod", v8);
v10 = virtualinvoke v6.<com.google.common.testing.NullPointerTester$Visibility: boolean isVisible(java.lang.reflect.Member)>(v9);
staticinvoke <com.google.common.testing.NullPointerTesterTest: void assertFalse(boolean)>(v10);
v11 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PUBLIC>;
v12 = class "Lcom/google/common/testing/NullPointerTesterTest$VisibilityMethods;";
v13 = newarray (java.lang.Class)[0];
v14 = virtualinvoke v12.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("protectedMethod", v13);
v15 = virtualinvoke v11.<com.google.common.testing.NullPointerTester$Visibility: boolean isVisible(java.lang.reflect.Member)>(v14);
staticinvoke <com.google.common.testing.NullPointerTesterTest: void assertFalse(boolean)>(v15);
v16 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PUBLIC>;
v17 = class "Lcom/google/common/testing/NullPointerTesterTest$VisibilityMethods;";
v18 = newarray (java.lang.Class)[0];
v19 = virtualinvoke v17.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("publicMethod", v18);
v20 = virtualinvoke v16.<com.google.common.testing.NullPointerTester$Visibility: boolean isVisible(java.lang.reflect.Member)>(v19);
staticinvoke <com.google.common.testing.NullPointerTesterTest: void assertTrue(boolean)>(v20);
return;
}
public void testVisibility_protected() throws java.lang.Exception
{
com.google.common.testing.NullPointerTester$Visibility v1, v11, v16, v6;
java.lang.reflect.Method v14, v19, v4, v9;
boolean v10, v15, v20, v5;
com.google.common.testing.NullPointerTesterTest v0;
java.lang.Class[] v13, v18, v3, v8;
java.lang.Class v12, v17, v2, v7;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PROTECTED>;
v2 = class "Lcom/google/common/testing/NullPointerTesterTest$VisibilityMethods;";
v3 = newarray (java.lang.Class)[0];
v4 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("privateMethod", v3);
v5 = virtualinvoke v1.<com.google.common.testing.NullPointerTester$Visibility: boolean isVisible(java.lang.reflect.Member)>(v4);
staticinvoke <com.google.common.testing.NullPointerTesterTest: void assertFalse(boolean)>(v5);
v6 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PROTECTED>;
v7 = class "Lcom/google/common/testing/NullPointerTesterTest$VisibilityMethods;";
v8 = newarray (java.lang.Class)[0];
v9 = virtualinvoke v7.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("packagePrivateMethod", v8);
v10 = virtualinvoke v6.<com.google.common.testing.NullPointerTester$Visibility: boolean isVisible(java.lang.reflect.Member)>(v9);
staticinvoke <com.google.common.testing.NullPointerTesterTest: void assertFalse(boolean)>(v10);
v11 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PROTECTED>;
v12 = class "Lcom/google/common/testing/NullPointerTesterTest$VisibilityMethods;";
v13 = newarray (java.lang.Class)[0];
v14 = virtualinvoke v12.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("protectedMethod", v13);
v15 = virtualinvoke v11.<com.google.common.testing.NullPointerTester$Visibility: boolean isVisible(java.lang.reflect.Member)>(v14);
staticinvoke <com.google.common.testing.NullPointerTesterTest: void assertTrue(boolean)>(v15);
v16 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PROTECTED>;
v17 = class "Lcom/google/common/testing/NullPointerTesterTest$VisibilityMethods;";
v18 = newarray (java.lang.Class)[0];
v19 = virtualinvoke v17.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("publicMethod", v18);
v20 = virtualinvoke v16.<com.google.common.testing.NullPointerTester$Visibility: boolean isVisible(java.lang.reflect.Member)>(v19);
staticinvoke <com.google.common.testing.NullPointerTesterTest: void assertTrue(boolean)>(v20);
return;
}
public void testVisibility_package() throws java.lang.Exception
{
com.google.common.testing.NullPointerTester$Visibility v1, v11, v16, v6;
java.lang.reflect.Method v14, v19, v4, v9;
boolean v10, v15, v20, v5;
com.google.common.testing.NullPointerTesterTest v0;
java.lang.Class[] v13, v18, v3, v8;
java.lang.Class v12, v17, v2, v7;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PACKAGE>;
v2 = class "Lcom/google/common/testing/NullPointerTesterTest$VisibilityMethods;";
v3 = newarray (java.lang.Class)[0];
v4 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("privateMethod", v3);
v5 = virtualinvoke v1.<com.google.common.testing.NullPointerTester$Visibility: boolean isVisible(java.lang.reflect.Member)>(v4);
staticinvoke <com.google.common.testing.NullPointerTesterTest: void assertFalse(boolean)>(v5);
v6 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PACKAGE>;
v7 = class "Lcom/google/common/testing/NullPointerTesterTest$VisibilityMethods;";
v8 = newarray (java.lang.Class)[0];
v9 = virtualinvoke v7.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("packagePrivateMethod", v8);
v10 = virtualinvoke v6.<com.google.common.testing.NullPointerTester$Visibility: boolean isVisible(java.lang.reflect.Member)>(v9);
staticinvoke <com.google.common.testing.NullPointerTesterTest: void assertTrue(boolean)>(v10);
v11 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PACKAGE>;
v12 = class "Lcom/google/common/testing/NullPointerTesterTest$VisibilityMethods;";
v13 = newarray (java.lang.Class)[0];
v14 = virtualinvoke v12.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("protectedMethod", v13);
v15 = virtualinvoke v11.<com.google.common.testing.NullPointerTester$Visibility: boolean isVisible(java.lang.reflect.Member)>(v14);
staticinvoke <com.google.common.testing.NullPointerTesterTest: void assertTrue(boolean)>(v15);
v16 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PACKAGE>;
v17 = class "Lcom/google/common/testing/NullPointerTesterTest$VisibilityMethods;";
v18 = newarray (java.lang.Class)[0];
v19 = virtualinvoke v17.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("publicMethod", v18);
v20 = virtualinvoke v16.<com.google.common.testing.NullPointerTester$Visibility: boolean isVisible(java.lang.reflect.Member)>(v19);
staticinvoke <com.google.common.testing.NullPointerTesterTest: void assertTrue(boolean)>(v20);
return;
}
public void testNonStaticInnerClass()
{
com.google.common.testing.NullPointerTester v1;
java.lang.String v3;
java.lang.IllegalArgumentException v2;
com.google.common.truth.StringSubject v4;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
label1:
v1 = new com.google.common.testing.NullPointerTester;
specialinvoke v1.<com.google.common.testing.NullPointerTester: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTester: void testAllPublicConstructors(java.lang.Class)>(class "Lcom/google/common/testing/NullPointerTesterTest$Inner;");
staticinvoke <com.google.common.testing.NullPointerTesterTest: void fail()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = virtualinvoke v2.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
v4 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StringSubject assertThat(java.lang.String)>(v3);
virtualinvoke v4.<com.google.common.truth.StringSubject: void contains(java.lang.CharSequence)>("inner class");
label4:
return;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
}
private static transient java.lang.String rootLocaleFormat(java.lang.String, java.lang.Object[])
{
java.lang.Object[] v1;
java.util.Locale v2;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.Object[];
v2 = <java.util.Locale: java.util.Locale ROOT>;
v3 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v2, v0, v1);
return v3;
}
public void testEqualsMethod()
{
com.google.common.testing.NullPointerTesterTest$DoesNotOverrideEquals v2;
com.google.common.testing.NullPointerTesterTest$OverridesEquals v1;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$OverridesEquals;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$OverridesEquals: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldPass(java.lang.Object)>(v1);
v2 = new com.google.common.testing.NullPointerTesterTest$DoesNotOverrideEquals;
specialinvoke v2.<com.google.common.testing.NullPointerTesterTest$DoesNotOverrideEquals: void <init>()>();
staticinvoke <com.google.common.testing.NullPointerTesterTest: void shouldFail(java.lang.Object)>(v2);
return;
}
public void testConstructor_Ignored_ShouldPass() throws java.lang.Exception
{
com.google.common.testing.NullPointerTester v1, v5;
java.lang.Class[] v3;
java.lang.Class v2;
java.lang.reflect.Constructor v4;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTester;
specialinvoke v1.<com.google.common.testing.NullPointerTester: void <init>()>();
v2 = class "Lcom/google/common/testing/NullPointerTesterTest$FailOnOneOfTwoConstructors;";
v3 = newarray (java.lang.Class)[1];
v3[0] = class "Ljava/lang/String;";
v4 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(v3);
v5 = virtualinvoke v1.<com.google.common.testing.NullPointerTester: com.google.common.testing.NullPointerTester ignore(java.lang.reflect.Constructor)>(v4);
virtualinvoke v5.<com.google.common.testing.NullPointerTester: void testAllPublicConstructors(java.lang.Class)>(class "Lcom/google/common/testing/NullPointerTesterTest$FailOnOneOfTwoConstructors;");
return;
}
public void testConstructor_ShouldFail() throws java.lang.Exception
{
java.lang.Throwable v2;
com.google.common.testing.NullPointerTester v1;
java.lang.Class v3;
java.lang.String v4, v5;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
label1:
v1 = new com.google.common.testing.NullPointerTester;
specialinvoke v1.<com.google.common.testing.NullPointerTester: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTester: void testAllPublicConstructors(java.lang.Class)>(class "Lcom/google/common/testing/NullPointerTesterTest$FailOnOneOfTwoConstructors;");
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
v3 = class "Lcom/google/common/testing/NullPointerTesterTest$FailOnOneOfTwoConstructors;";
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getSimpleName()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Should detect problem in \u0001");
staticinvoke <com.google.common.testing.NullPointerTesterTest: void fail(java.lang.String)>(v5);
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testNullBounds()
{
com.google.common.testing.NullPointerTesterTest$NullBounds v1;
com.google.common.testing.NullPointerTester v2;
java.lang.Boolean v4;
com.google.common.truth.BooleanSubject v5;
boolean v3;
com.google.common.testing.NullPointerTesterTest v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest;
v1 = new com.google.common.testing.NullPointerTesterTest$NullBounds;
specialinvoke v1.<com.google.common.testing.NullPointerTesterTest$NullBounds: void <init>()>();
v2 = new com.google.common.testing.NullPointerTester;
specialinvoke v2.<com.google.common.testing.NullPointerTester: void <init>()>();
virtualinvoke v2.<com.google.common.testing.NullPointerTester: void testAllPublicInstanceMethods(java.lang.Object)>(v1);
v3 = v1.<com.google.common.testing.NullPointerTesterTest$NullBounds: boolean xWasCalled>;
v4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v3);
v5 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.BooleanSubject assertThat(java.lang.Boolean)>(v4);
virtualinvoke v5.<com.google.common.truth.BooleanSubject: void isTrue()>();
return;
}
static void <clinit>()
{
java.lang.String[] v0, v1, v2, v3;
v0 = newarray (java.lang.String)[7];
v0[0] = "staticOneArgCorrectlyThrowsNpe";
v0[1] = "staticOneArgCheckForNullCorrectlyDoesNotThrowNPE";
v0[2] = "staticOneArgCheckForNullCorrectlyThrowsOtherThanNPE";
v0[3] = "staticOneArgCheckForNullThrowsNPE";
v0[4] = "staticOneArgNullableCorrectlyDoesNotThrowNPE";
v0[5] = "staticOneArgNullableCorrectlyThrowsOtherThanNPE";
v0[6] = "staticOneArgNullableThrowsNPE";
<com.google.common.testing.NullPointerTesterTest: java.lang.String[] STATIC_ONE_ARG_METHODS_SHOULD_PASS> = v0;
v1 = newarray (java.lang.String)[2];
v1[0] = "staticOneArgThrowsOtherThanNpe";
v1[1] = "staticOneArgShouldThrowNpeButDoesnt";
<com.google.common.testing.NullPointerTesterTest: java.lang.String[] STATIC_ONE_ARG_METHODS_SHOULD_FAIL> = v1;
v2 = newarray (java.lang.String)[7];
v2[0] = "oneArgCorrectlyThrowsNpe";
v2[1] = "oneArgCheckForNullCorrectlyDoesNotThrowNPE";
v2[2] = "oneArgCheckForNullCorrectlyThrowsOtherThanNPE";
v2[3] = "oneArgCheckForNullThrowsNPE";
v2[4] = "oneArgNullableCorrectlyDoesNotThrowNPE";
v2[5] = "oneArgNullableCorrectlyThrowsOtherThanNPE";
v2[6] = "oneArgNullableThrowsNPE";
<com.google.common.testing.NullPointerTesterTest: java.lang.String[] NONSTATIC_ONE_ARG_METHODS_SHOULD_PASS> = v2;
v3 = newarray (java.lang.String)[2];
v3[0] = "oneArgThrowsOtherThanNpe";
v3[1] = "oneArgShouldThrowNpeButDoesnt";
<com.google.common.testing.NullPointerTesterTest: java.lang.String[] NONSTATIC_ONE_ARG_METHODS_SHOULD_FAIL> = v3;
return;
}
}