public class com.google.common.testing.TearDownStackTest extends junit.framework.TestCase
{
private com.google.common.testing.TearDownStack tearDownStack;
public void <init>()
{
com.google.common.testing.TearDownStackTest v0;
com.google.common.testing.TearDownStack v1;
v0 := @this: com.google.common.testing.TearDownStackTest;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
v1 = new com.google.common.testing.TearDownStack;
specialinvoke v1.<com.google.common.testing.TearDownStack: void <init>()>();
v0.<com.google.common.testing.TearDownStackTest: com.google.common.testing.TearDownStack tearDownStack> = v1;
return;
}
public void testSingleTearDown() throws java.lang.Exception
{
com.google.common.testing.TearDownStackTest v0;
com.google.common.testing.TearDownStack v1;
com.google.common.testing.TearDownStackTest$SimpleTearDown v2;
boolean v3, v4;
v0 := @this: com.google.common.testing.TearDownStackTest;
v1 = specialinvoke v0.<com.google.common.testing.TearDownStackTest: com.google.common.testing.TearDownStack buildTearDownStack()>();
v2 = new com.google.common.testing.TearDownStackTest$SimpleTearDown;
specialinvoke v2.<com.google.common.testing.TearDownStackTest$SimpleTearDown: void <init>()>();
virtualinvoke v1.<com.google.common.testing.TearDownStack: void addTearDown(com.google.common.testing.TearDown)>(v2);
v3 = v2.<com.google.common.testing.TearDownStackTest$SimpleTearDown: boolean ran>;
staticinvoke <com.google.common.testing.TearDownStackTest: void assertEquals(boolean,boolean)>(0, v3);
virtualinvoke v1.<com.google.common.testing.TearDownStack: void runTearDown()>();
v4 = v2.<com.google.common.testing.TearDownStackTest$SimpleTearDown: boolean ran>;
staticinvoke <com.google.common.testing.TearDownStackTest: void assertEquals(java.lang.String,boolean,boolean)>("tearDown should have run", 1, v4);
return;
}
public void testMultipleTearDownsHappenInOrder() throws java.lang.Exception
{
com.google.common.testing.TearDownStackTest$1 v3;
com.google.common.testing.TearDownStack v1;
com.google.common.testing.TearDownStackTest v0;
com.google.common.testing.TearDownStackTest$SimpleTearDown v2, v4;
boolean v5, v6, v7, v8;
v0 := @this: com.google.common.testing.TearDownStackTest;
v1 = specialinvoke v0.<com.google.common.testing.TearDownStackTest: com.google.common.testing.TearDownStack buildTearDownStack()>();
v2 = new com.google.common.testing.TearDownStackTest$SimpleTearDown;
specialinvoke v2.<com.google.common.testing.TearDownStackTest$SimpleTearDown: void <init>()>();
virtualinvoke v1.<com.google.common.testing.TearDownStack: void addTearDown(com.google.common.testing.TearDown)>(v2);
v3 = new com.google.common.testing.TearDownStackTest$1;
specialinvoke v3.<com.google.common.testing.TearDownStackTest$1: void <init>(com.google.common.testing.TearDownStackTest,com.google.common.testing.TearDownStackTest$SimpleTearDown)>(v0, v2);
v4 = new com.google.common.testing.TearDownStackTest$SimpleTearDown;
specialinvoke v4.<com.google.common.testing.TearDownStackTest$SimpleTearDown: void <init>(com.google.common.testing.TearDownStackTest$Callback)>(v3);
virtualinvoke v1.<com.google.common.testing.TearDownStack: void addTearDown(com.google.common.testing.TearDown)>(v4);
v5 = v2.<com.google.common.testing.TearDownStackTest$SimpleTearDown: boolean ran>;
staticinvoke <com.google.common.testing.TearDownStackTest: void assertEquals(boolean,boolean)>(0, v5);
v6 = v4.<com.google.common.testing.TearDownStackTest$SimpleTearDown: boolean ran>;
staticinvoke <com.google.common.testing.TearDownStackTest: void assertEquals(boolean,boolean)>(0, v6);
virtualinvoke v1.<com.google.common.testing.TearDownStack: void runTearDown()>();
v7 = v2.<com.google.common.testing.TearDownStackTest$SimpleTearDown: boolean ran>;
staticinvoke <com.google.common.testing.TearDownStackTest: void assertEquals(java.lang.String,boolean,boolean)>("tearDownOne should have run", 1, v7);
v8 = v4.<com.google.common.testing.TearDownStackTest$SimpleTearDown: boolean ran>;
staticinvoke <com.google.common.testing.TearDownStackTest: void assertEquals(java.lang.String,boolean,boolean)>("tearDownTwo should have run", 1, v8);
return;
}
public void testThrowingTearDown() throws java.lang.Exception
{
java.lang.Throwable v6;
com.google.common.testing.TearDownStackTest v0;
java.lang.String v13, v14;
com.google.common.truth.ThrowableSubject v7, v8;
boolean v15, v16, v4, v5;
java.lang.RuntimeException v10, v11;
com.google.common.testing.TearDownStack v1;
com.google.common.testing.TearDownStackTest$ThrowingTearDown v2, v3;
com.google.common.truth.StringSubject v9;
java.lang.Class v12;
v0 := @this: com.google.common.testing.TearDownStackTest;
v1 = specialinvoke v0.<com.google.common.testing.TearDownStackTest: com.google.common.testing.TearDownStack buildTearDownStack()>();
v2 = new com.google.common.testing.TearDownStackTest$ThrowingTearDown;
specialinvoke v2.<com.google.common.testing.TearDownStackTest$ThrowingTearDown: void <init>(java.lang.String)>("one");
virtualinvoke v1.<com.google.common.testing.TearDownStack: void addTearDown(com.google.common.testing.TearDown)>(v2);
v3 = new com.google.common.testing.TearDownStackTest$ThrowingTearDown;
specialinvoke v3.<com.google.common.testing.TearDownStackTest$ThrowingTearDown: void <init>(java.lang.String)>("two");
virtualinvoke v1.<com.google.common.testing.TearDownStack: void addTearDown(com.google.common.testing.TearDown)>(v3);
v4 = v2.<com.google.common.testing.TearDownStackTest$ThrowingTearDown: boolean ran>;
staticinvoke <com.google.common.testing.TearDownStackTest: void assertEquals(boolean,boolean)>(0, v4);
v5 = v3.<com.google.common.testing.TearDownStackTest$ThrowingTearDown: boolean ran>;
staticinvoke <com.google.common.testing.TearDownStackTest: void assertEquals(boolean,boolean)>(0, v5);
label1:
virtualinvoke v1.<com.google.common.testing.TearDownStack: void runTearDown()>();
staticinvoke <com.google.common.testing.TearDownStackTest: void fail(java.lang.String)>("runTearDown should have thrown an exception");
label2:
goto label5;
label3:
v6 := @caughtexception;
v7 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.ThrowableSubject assertThat(java.lang.Throwable)>(v6);
v8 = virtualinvoke v7.<com.google.common.truth.ThrowableSubject: com.google.common.truth.ThrowableSubject hasCauseThat()>();
v9 = virtualinvoke v8.<com.google.common.truth.ThrowableSubject: com.google.common.truth.StringSubject hasMessageThat()>();
virtualinvoke v9.<com.google.common.truth.StringSubject: void isEqualTo(java.lang.Object)>("two");
goto label5;
label4:
v10 := @caughtexception;
v11 = new java.lang.RuntimeException;
v12 = virtualinvoke v10.<java.lang.Object: java.lang.Class getClass()>();
v13 = virtualinvoke v12.<java.lang.Class: java.lang.String getName()>();
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("A ClusterException should have been thrown, rather than a \u0001");
specialinvoke v11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v14, v10);
throw v11;
label5:
v15 = v2.<com.google.common.testing.TearDownStackTest$ThrowingTearDown: boolean ran>;
staticinvoke <com.google.common.testing.TearDownStackTest: void assertEquals(boolean,boolean)>(1, v15);
v16 = v3.<com.google.common.testing.TearDownStackTest$ThrowingTearDown: boolean ran>;
staticinvoke <com.google.common.testing.TearDownStackTest: void assertEquals(boolean,boolean)>(1, v16);
return;
catch com.google.common.testing.ClusterException from label1 to label2 with label3;
catch java.lang.RuntimeException from label1 to label2 with label4;
}
public final void runBare() throws java.lang.Throwable
{
com.google.common.testing.TearDownStackTest v0;
java.lang.Throwable v1;
v0 := @this: com.google.common.testing.TearDownStackTest;
label1:
virtualinvoke v0.<com.google.common.testing.TearDownStackTest: void setUp()>();
virtualinvoke v0.<com.google.common.testing.TearDownStackTest: void runTest()>();
label2:
virtualinvoke v0.<com.google.common.testing.TearDownStackTest: void tearDown()>();
goto label4;
label3:
v1 := @caughtexception;
virtualinvoke v0.<com.google.common.testing.TearDownStackTest: void tearDown()>();
throw v1;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected void tearDown()
{
com.google.common.testing.TearDownStackTest v0;
com.google.common.testing.TearDownStack v1;
v0 := @this: com.google.common.testing.TearDownStackTest;
v1 = v0.<com.google.common.testing.TearDownStackTest: com.google.common.testing.TearDownStack tearDownStack>;
virtualinvoke v1.<com.google.common.testing.TearDownStack: void runTearDown()>();
return;
}
private com.google.common.testing.TearDownStack buildTearDownStack()
{
com.google.common.testing.TearDownStackTest v0;
com.google.common.testing.TearDownStackTest$2 v3;
com.google.common.testing.TearDownStack v1, v2;
v0 := @this: com.google.common.testing.TearDownStackTest;
v1 = new com.google.common.testing.TearDownStack;
specialinvoke v1.<com.google.common.testing.TearDownStack: void <init>()>();
v2 = v0.<com.google.common.testing.TearDownStackTest: com.google.common.testing.TearDownStack tearDownStack>;
v3 = new com.google.common.testing.TearDownStackTest$2;
specialinvoke v3.<com.google.common.testing.TearDownStackTest$2: void <init>(com.google.common.testing.TearDownStackTest,com.google.common.testing.TearDownStack)>(v0, v1);
virtualinvoke v2.<com.google.common.testing.TearDownStack: void addTearDown(com.google.common.testing.TearDown)>(v3);
return v1;
}
}