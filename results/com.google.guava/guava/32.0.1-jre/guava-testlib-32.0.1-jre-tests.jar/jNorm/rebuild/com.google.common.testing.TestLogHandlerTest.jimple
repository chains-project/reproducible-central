public class com.google.common.testing.TestLogHandlerTest extends junit.framework.TestCase
{
private com.google.common.testing.TestLogHandler handler;
private com.google.common.testing.TearDownStack stack;
static final java.lang.Exception EXCEPTION;
public void <init>()
{
com.google.common.testing.TearDownStack v1;
com.google.common.testing.TestLogHandlerTest v0;
v0 := @this: com.google.common.testing.TestLogHandlerTest;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
v1 = new com.google.common.testing.TearDownStack;
specialinvoke v1.<com.google.common.testing.TearDownStack: void <init>()>();
v0.<com.google.common.testing.TestLogHandlerTest: com.google.common.testing.TearDownStack stack> = v1;
return;
}
protected void setUp() throws java.lang.Exception
{
com.google.common.testing.TestLogHandlerTest v0;
com.google.common.testing.TestLogHandlerTest$1 v6;
com.google.common.testing.TestLogHandler v1, v3;
java.util.logging.Logger v2, v4;
com.google.common.testing.TearDownStack v5;
v0 := @this: com.google.common.testing.TestLogHandlerTest;
specialinvoke v0.<junit.framework.TestCase: void setUp()>();
v1 = new com.google.common.testing.TestLogHandler;
specialinvoke v1.<com.google.common.testing.TestLogHandler: void <init>()>();
v0.<com.google.common.testing.TestLogHandlerTest: com.google.common.testing.TestLogHandler handler> = v1;
v2 = <com.google.common.testing.TestLogHandlerTest$ExampleClassUnderTest: java.util.logging.Logger logger>;
v3 = v0.<com.google.common.testing.TestLogHandlerTest: com.google.common.testing.TestLogHandler handler>;
virtualinvoke v2.<java.util.logging.Logger: void addHandler(java.util.logging.Handler)>(v3);
v4 = <com.google.common.testing.TestLogHandlerTest$ExampleClassUnderTest: java.util.logging.Logger logger>;
virtualinvoke v4.<java.util.logging.Logger: void setUseParentHandlers(boolean)>(0);
v5 = v0.<com.google.common.testing.TestLogHandlerTest: com.google.common.testing.TearDownStack stack>;
v6 = new com.google.common.testing.TestLogHandlerTest$1;
specialinvoke v6.<com.google.common.testing.TestLogHandlerTest$1: void <init>(com.google.common.testing.TestLogHandlerTest)>(v0);
virtualinvoke v5.<com.google.common.testing.TearDownStack: void addTearDown(com.google.common.testing.TearDown)>(v6);
return;
}
public void test() throws java.lang.Exception
{
java.lang.Throwable v11;
com.google.common.testing.TestLogHandlerTest v0;
java.lang.Exception v10;
java.util.logging.Level v7, v8;
java.util.List v2, v5;
java.lang.Object v6;
com.google.common.testing.TestLogHandler v1, v4;
java.lang.String v9;
boolean v3;
v0 := @this: com.google.common.testing.TestLogHandlerTest;
v1 = v0.<com.google.common.testing.TestLogHandlerTest: com.google.common.testing.TestLogHandler handler>;
v2 = virtualinvoke v1.<com.google.common.testing.TestLogHandler: java.util.List getStoredLogRecords()>();
v3 = interfaceinvoke v2.<java.util.List: boolean isEmpty()>();
staticinvoke <com.google.common.testing.TestLogHandlerTest: void assertTrue(boolean)>(v3);
staticinvoke <com.google.common.testing.TestLogHandlerTest$ExampleClassUnderTest: void foo()>();
v4 = v0.<com.google.common.testing.TestLogHandlerTest: com.google.common.testing.TestLogHandler handler>;
v5 = virtualinvoke v4.<com.google.common.testing.TestLogHandler: java.util.List getStoredLogRecords()>();
v6 = interfaceinvoke v5.<java.util.List: java.lang.Object get(int)>(0);
v7 = <java.util.logging.Level: java.util.logging.Level INFO>;
v8 = virtualinvoke v6.<java.util.logging.LogRecord: java.util.logging.Level getLevel()>();
staticinvoke <com.google.common.testing.TestLogHandlerTest: void assertEquals(java.lang.Object,java.lang.Object)>(v7, v8);
v9 = virtualinvoke v6.<java.util.logging.LogRecord: java.lang.String getMessage()>();
staticinvoke <com.google.common.testing.TestLogHandlerTest: void assertEquals(java.lang.String,java.lang.String)>("message", v9);
v10 = <com.google.common.testing.TestLogHandlerTest: java.lang.Exception EXCEPTION>;
v11 = virtualinvoke v6.<java.util.logging.LogRecord: java.lang.Throwable getThrown()>();
staticinvoke <com.google.common.testing.TestLogHandlerTest: void assertSame(java.lang.Object,java.lang.Object)>(v10, v11);
return;
}
public void testConcurrentModification() throws java.lang.Exception
{
java.util.Iterator v6;
com.google.common.testing.TestLogHandlerTest v0;
java.util.List v2, v5;
com.google.common.testing.TestLogHandler v1, v4;
boolean v3, v7;
v0 := @this: com.google.common.testing.TestLogHandlerTest;
v1 = v0.<com.google.common.testing.TestLogHandlerTest: com.google.common.testing.TestLogHandler handler>;
v2 = virtualinvoke v1.<com.google.common.testing.TestLogHandler: java.util.List getStoredLogRecords()>();
v3 = interfaceinvoke v2.<java.util.List: boolean isEmpty()>();
staticinvoke <com.google.common.testing.TestLogHandlerTest: void assertTrue(boolean)>(v3);
staticinvoke <com.google.common.testing.TestLogHandlerTest$ExampleClassUnderTest: void foo()>();
staticinvoke <com.google.common.testing.TestLogHandlerTest$ExampleClassUnderTest: void foo()>();
v4 = v0.<com.google.common.testing.TestLogHandlerTest: com.google.common.testing.TestLogHandler handler>;
v5 = virtualinvoke v4.<com.google.common.testing.TestLogHandler: java.util.List getStoredLogRecords()>();
v6 = interfaceinvoke v5.<java.util.List: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.testing.TestLogHandlerTest$ExampleClassUnderTest: void foo()>();
goto label1;
label2:
return;
}
public final void runBare() throws java.lang.Throwable
{
java.lang.Throwable v1;
com.google.common.testing.TestLogHandlerTest v0;
v0 := @this: com.google.common.testing.TestLogHandlerTest;
label1:
virtualinvoke v0.<com.google.common.testing.TestLogHandlerTest: void setUp()>();
virtualinvoke v0.<com.google.common.testing.TestLogHandlerTest: void runTest()>();
label2:
virtualinvoke v0.<com.google.common.testing.TestLogHandlerTest: void tearDown()>();
goto label4;
label3:
v1 := @caughtexception;
virtualinvoke v0.<com.google.common.testing.TestLogHandlerTest: void tearDown()>();
throw v1;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected void tearDown()
{
com.google.common.testing.TearDownStack v1;
com.google.common.testing.TestLogHandlerTest v0;
v0 := @this: com.google.common.testing.TestLogHandlerTest;
v1 = v0.<com.google.common.testing.TestLogHandlerTest: com.google.common.testing.TearDownStack stack>;
virtualinvoke v1.<com.google.common.testing.TearDownStack: void runTearDown()>();
return;
}
static void <clinit>()
{
java.lang.Exception v0;
v0 = new java.lang.Exception;
specialinvoke v0.<java.lang.Exception: void <init>()>();
<com.google.common.testing.TestLogHandlerTest: java.lang.Exception EXCEPTION> = v0;
return;
}
}