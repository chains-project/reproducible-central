public class com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest extends junit.framework.TestCase
{
private final com.google.common.testing.ForwardingWrapperTester tester;
public void <init>()
{
com.google.common.testing.ForwardingWrapperTester v1;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
v1 = new com.google.common.testing.ForwardingWrapperTester;
specialinvoke v1.<com.google.common.testing.ForwardingWrapperTester: void <init>()>();
v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: com.google.common.testing.ForwardingWrapperTester tester> = v1;
return;
}
public void testGoodForwarder()
{
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$2 v4;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$1 v2;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
com.google.common.testing.ForwardingWrapperTester v1, v3;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v1 = v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: com.google.common.testing.ForwardingWrapperTester tester>;
v2 = new com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$1;
specialinvoke v2.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$1: void <init>(com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest)>(v0);
virtualinvoke v1.<com.google.common.testing.ForwardingWrapperTester: void testForwarding(java.lang.Class,com.google.common.base.Function)>(class "Lcom/google/common/testing/anotherpackage/ForwardingWrapperTesterTest$Arithmetic;", v2);
v3 = v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: com.google.common.testing.ForwardingWrapperTester tester>;
v4 = new com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$2;
specialinvoke v4.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$2: void <init>(com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest)>(v0);
virtualinvoke v3.<com.google.common.testing.ForwardingWrapperTester: void testForwarding(java.lang.Class,com.google.common.base.Function)>(class "Lcom/google/common/testing/anotherpackage/ForwardingWrapperTesterTest$ParameterTypesDifferent;", v4);
return;
}
public void testVoidMethodForwarding()
{
com.google.common.testing.ForwardingWrapperTester v1;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$3 v2;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v1 = v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: com.google.common.testing.ForwardingWrapperTester tester>;
v2 = new com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$3;
specialinvoke v2.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$3: void <init>(com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest)>(v0);
virtualinvoke v1.<com.google.common.testing.ForwardingWrapperTester: void testForwarding(java.lang.Class,com.google.common.base.Function)>(class "Ljava/lang/Runnable;", v2);
return;
}
public void testToStringForwarding()
{
com.google.common.testing.ForwardingWrapperTester v1;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$4 v2;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v1 = v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: com.google.common.testing.ForwardingWrapperTester tester>;
v2 = new com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$4;
specialinvoke v2.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$4: void <init>(com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest)>(v0);
virtualinvoke v1.<com.google.common.testing.ForwardingWrapperTester: void testForwarding(java.lang.Class,com.google.common.base.Function)>(class "Ljava/lang/Runnable;", v2);
return;
}
public void testFailsToForwardToString()
{
java.lang.String[] v2;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$5 v1;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v1 = new com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$5;
specialinvoke v1.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$5: void <init>(com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest)>(v0);
v2 = newarray (java.lang.String)[1];
v2[0] = "toString()";
specialinvoke v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: void assertFailure(java.lang.Class,com.google.common.base.Function,java.lang.String[])>(class "Ljava/lang/Runnable;", v1, v2);
return;
}
public void testFailsToForwardHashCode()
{
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$6 v2;
com.google.common.testing.ForwardingWrapperTester v1;
java.lang.String[] v3;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v1 = v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: com.google.common.testing.ForwardingWrapperTester tester>;
virtualinvoke v1.<com.google.common.testing.ForwardingWrapperTester: com.google.common.testing.ForwardingWrapperTester includingEquals()>();
v2 = new com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$6;
specialinvoke v2.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$6: void <init>(com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest)>(v0);
v3 = newarray (java.lang.String)[1];
v3[0] = "Runnable";
specialinvoke v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: void assertFailure(java.lang.Class,com.google.common.base.Function,java.lang.String[])>(class "Ljava/lang/Runnable;", v2, v3);
return;
}
public void testEqualsAndHashCodeForwarded()
{
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
com.google.common.testing.ForwardingWrapperTester v1, v2;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$7 v3;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v1 = v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: com.google.common.testing.ForwardingWrapperTester tester>;
virtualinvoke v1.<com.google.common.testing.ForwardingWrapperTester: com.google.common.testing.ForwardingWrapperTester includingEquals()>();
v2 = v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: com.google.common.testing.ForwardingWrapperTester tester>;
v3 = new com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$7;
specialinvoke v3.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$7: void <init>(com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest)>(v0);
virtualinvoke v2.<com.google.common.testing.ForwardingWrapperTester: void testForwarding(java.lang.Class,com.google.common.base.Function)>(class "Ljava/lang/Runnable;", v3);
return;
}
public void testFailsToForwardEquals()
{
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
com.google.common.testing.ForwardingWrapperTester v1;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$8 v2;
java.lang.String[] v3;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v1 = v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: com.google.common.testing.ForwardingWrapperTester tester>;
virtualinvoke v1.<com.google.common.testing.ForwardingWrapperTester: com.google.common.testing.ForwardingWrapperTester includingEquals()>();
v2 = new com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$8;
specialinvoke v2.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$8: void <init>(com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest)>(v0);
v3 = newarray (java.lang.String)[1];
v3[0] = "Runnable";
specialinvoke v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: void assertFailure(java.lang.Class,com.google.common.base.Function,java.lang.String[])>(class "Ljava/lang/Runnable;", v2, v3);
return;
}
public void testFailsToForward()
{
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$9 v1;
java.lang.String[] v2;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v1 = new com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$9;
specialinvoke v1.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$9: void <init>(com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest)>(v0);
v2 = newarray (java.lang.String)[2];
v2[0] = "run()";
v2[1] = "Failed to forward";
specialinvoke v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: void assertFailure(java.lang.Class,com.google.common.base.Function,java.lang.String[])>(class "Ljava/lang/Runnable;", v1, v2);
return;
}
public void testRedundantForwarding()
{
java.lang.String[] v2;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$10 v1;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v1 = new com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$10;
specialinvoke v1.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$10: void <init>(com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest)>(v0);
v2 = newarray (java.lang.String)[2];
v2[0] = "run()";
v2[1] = "invoked more than once";
specialinvoke v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: void assertFailure(java.lang.Class,com.google.common.base.Function,java.lang.String[])>(class "Ljava/lang/Runnable;", v1, v2);
return;
}
public void testFailsToForwardParameters()
{
java.lang.String[] v2;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$11 v1;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v1 = new com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$11;
specialinvoke v1.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$11: void <init>(com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest)>(v0);
v2 = newarray (java.lang.String)[2];
v2[0] = "add(";
v2[1] = "Parameter #0";
specialinvoke v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: void assertFailure(java.lang.Class,com.google.common.base.Function,java.lang.String[])>(class "Lcom/google/common/testing/anotherpackage/ForwardingWrapperTesterTest$Adder;", v1, v2);
return;
}
public void testForwardsToTheWrongMethod()
{
java.lang.String[] v2;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$12 v1;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v1 = new com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$12;
specialinvoke v1.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$12: void <init>(com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest)>(v0);
v2 = newarray (java.lang.String)[1];
v2[0] = "minus";
specialinvoke v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: void assertFailure(java.lang.Class,com.google.common.base.Function,java.lang.String[])>(class "Lcom/google/common/testing/anotherpackage/ForwardingWrapperTesterTest$Arithmetic;", v1, v2);
return;
}
public void testFailsToForwardReturnValue()
{
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$13 v1;
java.lang.String[] v2;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v1 = new com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$13;
specialinvoke v1.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$13: void <init>(com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest)>(v0);
v2 = newarray (java.lang.String)[2];
v2[0] = "add(";
v2[1] = "Return value";
specialinvoke v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: void assertFailure(java.lang.Class,com.google.common.base.Function,java.lang.String[])>(class "Lcom/google/common/testing/anotherpackage/ForwardingWrapperTesterTest$Adder;", v1, v2);
return;
}
public void testFailsToPropagateException()
{
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$14 v1;
java.lang.String[] v2;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v1 = new com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$14;
specialinvoke v1.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$14: void <init>(com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest)>(v0);
v2 = newarray (java.lang.String)[2];
v2[0] = "add(";
v2[1] = "exception";
specialinvoke v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: void assertFailure(java.lang.Class,com.google.common.base.Function,java.lang.String[])>(class "Lcom/google/common/testing/anotherpackage/ForwardingWrapperTesterTest$Adder;", v1, v2);
return;
}
public void testNotInterfaceType()
{
com.google.common.base.Function v2;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
com.google.common.testing.ForwardingWrapperTester v1;
java.lang.IllegalArgumentException v3;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
label1:
v1 = new com.google.common.testing.ForwardingWrapperTester;
specialinvoke v1.<com.google.common.testing.ForwardingWrapperTester: void <init>()>();
v2 = staticinvoke <com.google.common.base.Functions: com.google.common.base.Function identity()>();
virtualinvoke v1.<com.google.common.testing.ForwardingWrapperTester: void testForwarding(java.lang.Class,com.google.common.base.Function)>(class "Ljava/lang/String;", v2);
staticinvoke <com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: void fail()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
return;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
}
public void testNulls()
{
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
com.google.common.testing.NullPointerTester v1, v2;
com.google.common.testing.ForwardingWrapperTester v3;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v1 = new com.google.common.testing.NullPointerTester;
specialinvoke v1.<com.google.common.testing.NullPointerTester: void <init>()>();
v2 = virtualinvoke v1.<com.google.common.testing.NullPointerTester: com.google.common.testing.NullPointerTester setDefault(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Class;", class "Ljava/lang/Runnable;");
v3 = new com.google.common.testing.ForwardingWrapperTester;
specialinvoke v3.<com.google.common.testing.ForwardingWrapperTester: void <init>()>();
virtualinvoke v2.<com.google.common.testing.NullPointerTester: void testAllPublicInstanceMethods(java.lang.Object)>(v3);
return;
}
private transient void assertFailure(java.lang.Class, com.google.common.base.Function, java.lang.String[])
{
java.lang.Throwable v5;
com.google.common.base.Function v2;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
com.google.common.testing.ForwardingWrapperTester v4;
java.lang.String[] v3;
com.google.common.truth.StringSubject v10;
int v6, v7;
java.lang.Class v1;
java.lang.String v8, v9;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: com.google.common.base.Function;
v3 := @parameter2: java.lang.String[];
label1:
v4 = v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: com.google.common.testing.ForwardingWrapperTester tester>;
virtualinvoke v4.<com.google.common.testing.ForwardingWrapperTester: void testForwarding(java.lang.Class,com.google.common.base.Function)>(v1, v2);
label2:
goto label6;
label3:
v5 := @caughtexception;
v6 = lengthof v3;
v7 = 0;
label4:
if v7 >= v6 goto label5;
v8 = v3[v7];
v9 = virtualinvoke v5.<junit.framework.AssertionFailedError: java.lang.String getMessage()>();
v10 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StringSubject assertThat(java.lang.String)>(v9);
virtualinvoke v10.<com.google.common.truth.StringSubject: void contains(java.lang.CharSequence)>(v8);
v7 = v7 + 1;
goto label4;
label5:
return;
label6:
staticinvoke <com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: void fail(java.lang.String)>("expected failure not reported");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testCovariantReturn()
{
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$15 v2;
com.google.common.testing.ForwardingWrapperTester v1;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v1 = new com.google.common.testing.ForwardingWrapperTester;
specialinvoke v1.<com.google.common.testing.ForwardingWrapperTester: void <init>()>();
v2 = new com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$15;
specialinvoke v2.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$15: void <init>(com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest)>(v0);
virtualinvoke v1.<com.google.common.testing.ForwardingWrapperTester: void testForwarding(java.lang.Class,com.google.common.base.Function)>(class "Lcom/google/common/testing/anotherpackage/ForwardingWrapperTesterTest$Sub;", v2);
return;
}
public void testExplicitEqualsAndHashCodeNotDelegatedByDefault()
{
com.google.common.testing.ForwardingWrapperTester v1;
com.google.common.base.Function v2;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v1 = new com.google.common.testing.ForwardingWrapperTester;
specialinvoke v1.<com.google.common.testing.ForwardingWrapperTester: void <init>()>();
v2 = <com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$NoDelegateToEquals: com.google.common.base.Function WRAPPER>;
virtualinvoke v1.<com.google.common.testing.ForwardingWrapperTester: void testForwarding(java.lang.Class,com.google.common.base.Function)>(class "Lcom/google/common/testing/anotherpackage/ForwardingWrapperTesterTest$Equals;", v2);
return;
}
public void testExplicitEqualsAndHashCodeDelegatedWhenExplicitlyAsked()
{
java.lang.Throwable v4;
com.google.common.base.Function v3;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
com.google.common.testing.ForwardingWrapperTester v1, v2;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
label1:
v1 = new com.google.common.testing.ForwardingWrapperTester;
specialinvoke v1.<com.google.common.testing.ForwardingWrapperTester: void <init>()>();
v2 = virtualinvoke v1.<com.google.common.testing.ForwardingWrapperTester: com.google.common.testing.ForwardingWrapperTester includingEquals()>();
v3 = <com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$NoDelegateToEquals: com.google.common.base.Function WRAPPER>;
virtualinvoke v2.<com.google.common.testing.ForwardingWrapperTester: void testForwarding(java.lang.Class,com.google.common.base.Function)>(class "Lcom/google/common/testing/anotherpackage/ForwardingWrapperTesterTest$Equals;", v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
return;
label4:
staticinvoke <com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: void fail(java.lang.String)>("Should have failed");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testChainingCalls()
{
com.google.common.testing.ForwardingWrapperTester v1;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v0;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$16 v2;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v1 = v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest: com.google.common.testing.ForwardingWrapperTester tester>;
v2 = new com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$16;
specialinvoke v2.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$16: void <init>(com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest)>(v0);
virtualinvoke v1.<com.google.common.testing.ForwardingWrapperTester: void testForwarding(java.lang.Class,com.google.common.base.Function)>(class "Lcom/google/common/testing/anotherpackage/ForwardingWrapperTesterTest$ChainingCalls;", v2);
return;
}
}