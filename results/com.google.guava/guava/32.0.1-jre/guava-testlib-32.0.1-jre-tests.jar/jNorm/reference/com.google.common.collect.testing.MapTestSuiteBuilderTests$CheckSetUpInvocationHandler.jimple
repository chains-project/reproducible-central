class com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpInvocationHandler extends java.lang.Object implements java.lang.reflect.InvocationHandler, java.io.Serializable
{
private final java.util.Map map;
private final java.util.concurrent.atomic.AtomicBoolean setUpRan;
void <init>(java.util.Map, java.util.concurrent.atomic.AtomicBoolean)
{
java.util.concurrent.atomic.AtomicBoolean v2;
com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpInvocationHandler v0;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpInvocationHandler;
v1 := @parameter0: java.util.Map;
v2 := @parameter1: java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpInvocationHandler: java.util.Map map> = v1;
v0.<com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpInvocationHandler: java.util.concurrent.atomic.AtomicBoolean setUpRan> = v2;
return;
}
public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
{
java.lang.Throwable v9;
java.lang.IllegalAccessException v10;
java.lang.Object[] v3;
java.lang.LinkageError v11;
java.util.concurrent.atomic.AtomicBoolean v4;
java.lang.reflect.InvocationTargetException v8;
java.util.Map v6;
java.lang.Object v1, v7;
java.lang.reflect.Method v2;
boolean v5;
com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpInvocationHandler v0;
v0 := @this: com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpInvocationHandler;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.reflect.Method;
v3 := @parameter2: java.lang.Object[];
v4 = v0.<com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpInvocationHandler: java.util.concurrent.atomic.AtomicBoolean setUpRan>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
staticinvoke <junit.framework.TestCase: void assertTrue(java.lang.String,boolean)>("setUp should have run", v5);
label1:
v6 = v0.<com.google.common.collect.testing.MapTestSuiteBuilderTests$CheckSetUpInvocationHandler: java.util.Map map>;
v7 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v6, v3);
label2:
return v7;
label3:
v8 := @caughtexception;
v9 = virtualinvoke v8.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
throw v9;
label4:
v10 := @caughtexception;
v11 = staticinvoke <com.google.common.collect.testing.MapTestSuiteBuilderTests: java.lang.LinkageError newLinkageError(java.lang.Throwable)>(v10);
throw v11;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
catch java.lang.IllegalAccessException from label1 to label2 with label4;
}
}