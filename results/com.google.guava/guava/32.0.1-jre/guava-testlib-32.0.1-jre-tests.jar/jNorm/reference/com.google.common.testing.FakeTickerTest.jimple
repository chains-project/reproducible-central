public class com.google.common.testing.FakeTickerTest extends junit.framework.TestCase
{
public void <init>()
{
com.google.common.testing.FakeTickerTest v0;
v0 := @this: com.google.common.testing.FakeTickerTest;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
return;
}
public void testNullPointerExceptions()
{
com.google.common.testing.FakeTicker v2;
com.google.common.testing.NullPointerTester v1;
com.google.common.testing.FakeTickerTest v0;
v0 := @this: com.google.common.testing.FakeTickerTest;
v1 = new com.google.common.testing.NullPointerTester;
specialinvoke v1.<com.google.common.testing.NullPointerTester: void <init>()>();
v2 = new com.google.common.testing.FakeTicker;
specialinvoke v2.<com.google.common.testing.FakeTicker: void <init>()>();
virtualinvoke v1.<com.google.common.testing.NullPointerTester: void testAllPublicInstanceMethods(java.lang.Object)>(v2);
return;
}
public void testAdvance()
{
com.google.common.testing.FakeTicker v1, v3;
long v2, v4, v6, v8;
java.util.concurrent.TimeUnit v5;
java.time.Duration v7;
com.google.common.testing.FakeTickerTest v0;
v0 := @this: com.google.common.testing.FakeTickerTest;
v1 = new com.google.common.testing.FakeTicker;
specialinvoke v1.<com.google.common.testing.FakeTicker: void <init>()>();
v2 = virtualinvoke v1.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(0L, v2);
v3 = virtualinvoke v1.<com.google.common.testing.FakeTicker: com.google.common.testing.FakeTicker advance(long)>(10L);
staticinvoke <com.google.common.testing.FakeTickerTest: void assertSame(java.lang.Object,java.lang.Object)>(v1, v3);
v4 = virtualinvoke v1.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(10L, v4);
v5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
virtualinvoke v1.<com.google.common.testing.FakeTicker: com.google.common.testing.FakeTicker advance(long,java.util.concurrent.TimeUnit)>(1L, v5);
v6 = virtualinvoke v1.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(1000010L, v6);
v7 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(1L);
virtualinvoke v1.<com.google.common.testing.FakeTicker: com.google.common.testing.FakeTicker advance(java.time.Duration)>(v7);
v8 = virtualinvoke v1.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(2000010L, v8);
return;
}
public void testAutoIncrementStep_returnsSameInstance()
{
java.util.concurrent.TimeUnit v2;
com.google.common.testing.FakeTicker v1, v3;
com.google.common.testing.FakeTickerTest v0;
v0 := @this: com.google.common.testing.FakeTickerTest;
v1 = new com.google.common.testing.FakeTicker;
specialinvoke v1.<com.google.common.testing.FakeTicker: void <init>()>();
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
v3 = virtualinvoke v1.<com.google.common.testing.FakeTicker: com.google.common.testing.FakeTicker setAutoIncrementStep(long,java.util.concurrent.TimeUnit)>(10L, v2);
staticinvoke <com.google.common.testing.FakeTickerTest: void assertSame(java.lang.Object,java.lang.Object)>(v1, v3);
return;
}
public void testAutoIncrementStep_nanos()
{
java.util.concurrent.TimeUnit v2;
com.google.common.testing.FakeTicker v1, v3;
long v4, v5, v6;
com.google.common.testing.FakeTickerTest v0;
v0 := @this: com.google.common.testing.FakeTickerTest;
v1 = new com.google.common.testing.FakeTicker;
specialinvoke v1.<com.google.common.testing.FakeTicker: void <init>()>();
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
v3 = virtualinvoke v1.<com.google.common.testing.FakeTicker: com.google.common.testing.FakeTicker setAutoIncrementStep(long,java.util.concurrent.TimeUnit)>(10L, v2);
v4 = virtualinvoke v3.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(0L, v4);
v5 = virtualinvoke v3.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(10L, v5);
v6 = virtualinvoke v3.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(20L, v6);
return;
}
public void testAutoIncrementStep_millis()
{
java.util.concurrent.TimeUnit v2;
com.google.common.testing.FakeTicker v1, v3;
long v4, v5, v6;
com.google.common.testing.FakeTickerTest v0;
v0 := @this: com.google.common.testing.FakeTickerTest;
v1 = new com.google.common.testing.FakeTicker;
specialinvoke v1.<com.google.common.testing.FakeTicker: void <init>()>();
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v3 = virtualinvoke v1.<com.google.common.testing.FakeTicker: com.google.common.testing.FakeTicker setAutoIncrementStep(long,java.util.concurrent.TimeUnit)>(1L, v2);
v4 = virtualinvoke v3.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(0L, v4);
v5 = virtualinvoke v3.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(1000000L, v5);
v6 = virtualinvoke v3.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(2000000L, v6);
return;
}
public void testAutoIncrementStep_seconds()
{
java.util.concurrent.TimeUnit v2;
com.google.common.testing.FakeTicker v1, v3;
long v4, v5, v6;
com.google.common.testing.FakeTickerTest v0;
v0 := @this: com.google.common.testing.FakeTickerTest;
v1 = new com.google.common.testing.FakeTicker;
specialinvoke v1.<com.google.common.testing.FakeTicker: void <init>()>();
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v3 = virtualinvoke v1.<com.google.common.testing.FakeTicker: com.google.common.testing.FakeTicker setAutoIncrementStep(long,java.util.concurrent.TimeUnit)>(3L, v2);
v4 = virtualinvoke v3.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(0L, v4);
v5 = virtualinvoke v3.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(3000000000L, v5);
v6 = virtualinvoke v3.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(6000000000L, v6);
return;
}
public void testAutoIncrementStep_duration()
{
com.google.common.testing.FakeTicker v1, v3;
java.time.Duration v2;
long v4, v5, v6;
com.google.common.testing.FakeTickerTest v0;
v0 := @this: com.google.common.testing.FakeTickerTest;
v1 = new com.google.common.testing.FakeTicker;
specialinvoke v1.<com.google.common.testing.FakeTicker: void <init>()>();
v2 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(1L);
v3 = virtualinvoke v1.<com.google.common.testing.FakeTicker: com.google.common.testing.FakeTicker setAutoIncrementStep(java.time.Duration)>(v2);
v4 = virtualinvoke v3.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(0L, v4);
v5 = virtualinvoke v3.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(1000000L, v5);
v6 = virtualinvoke v3.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(2000000L, v6);
return;
}
public void testAutoIncrementStep_resetToZero()
{
com.google.common.testing.FakeTicker v1, v3;
java.util.Iterator v8;
long v12, v4, v5, v6;
java.util.concurrent.TimeUnit v2;
java.lang.Object v10;
java.lang.String v11;
com.google.common.testing.FakeTickerTest v0;
java.util.EnumSet v7;
boolean v9;
v0 := @this: com.google.common.testing.FakeTickerTest;
v1 = new com.google.common.testing.FakeTicker;
specialinvoke v1.<com.google.common.testing.FakeTicker: void <init>()>();
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
v3 = virtualinvoke v1.<com.google.common.testing.FakeTicker: com.google.common.testing.FakeTicker setAutoIncrementStep(long,java.util.concurrent.TimeUnit)>(10L, v2);
v4 = virtualinvoke v3.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(0L, v4);
v5 = virtualinvoke v3.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(10L, v5);
v6 = virtualinvoke v3.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(20L, v6);
v7 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "Ljava/util/concurrent/TimeUnit;");
v8 = virtualinvoke v7.<java.util.EnumSet: java.util.Iterator iterator()>();
label1:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label2;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v3.<com.google.common.testing.FakeTicker: com.google.common.testing.FakeTicker setAutoIncrementStep(long,java.util.concurrent.TimeUnit)>(0L, v10);
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.concurrent.TimeUnit)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected no auto-increment when setting autoIncrementStep to 0 \u0001");
v12 = virtualinvoke v3.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(java.lang.String,long,long)>(v11, 30L, v12);
goto label1;
label2:
return;
}
public void testAutoIncrement_negative()
{
java.util.concurrent.TimeUnit v2;
com.google.common.testing.FakeTicker v1;
java.lang.IllegalArgumentException v3;
com.google.common.testing.FakeTickerTest v0;
v0 := @this: com.google.common.testing.FakeTickerTest;
v1 = new com.google.common.testing.FakeTicker;
specialinvoke v1.<com.google.common.testing.FakeTicker: void <init>()>();
label1:
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
virtualinvoke v1.<com.google.common.testing.FakeTicker: com.google.common.testing.FakeTicker setAutoIncrementStep(long,java.util.concurrent.TimeUnit)>(-1L, v2);
staticinvoke <com.google.common.testing.FakeTickerTest: void fail(java.lang.String)>("Expected IllegalArgumentException");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
return;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
}
public void testConcurrentAdvance() throws java.lang.Exception
{
com.google.common.testing.FakeTicker v1;
com.google.common.testing.FakeTickerTest$1 v2;
long v3;
com.google.common.testing.FakeTickerTest v0;
v0 := @this: com.google.common.testing.FakeTickerTest;
v1 = new com.google.common.testing.FakeTicker;
specialinvoke v1.<com.google.common.testing.FakeTicker: void <init>()>();
v2 = new com.google.common.testing.FakeTickerTest$1;
specialinvoke v2.<com.google.common.testing.FakeTickerTest$1: void <init>(com.google.common.testing.FakeTickerTest,com.google.common.testing.FakeTicker)>(v0, v1);
specialinvoke v0.<com.google.common.testing.FakeTickerTest: void runConcurrentTest(int,java.util.concurrent.Callable)>(64, v2);
v3 = virtualinvoke v1.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(128, v3);
return;
}
public void testConcurrentAutoIncrementStep() throws java.lang.Exception
{
java.util.concurrent.TimeUnit v2;
com.google.common.testing.FakeTicker v1, v3;
long v5;
com.google.common.testing.FakeTickerTest$2 v4;
com.google.common.testing.FakeTickerTest v0;
v0 := @this: com.google.common.testing.FakeTickerTest;
v1 = new com.google.common.testing.FakeTicker;
specialinvoke v1.<com.google.common.testing.FakeTicker: void <init>()>();
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
v3 = virtualinvoke v1.<com.google.common.testing.FakeTicker: com.google.common.testing.FakeTicker setAutoIncrementStep(long,java.util.concurrent.TimeUnit)>(3, v2);
v4 = new com.google.common.testing.FakeTickerTest$2;
specialinvoke v4.<com.google.common.testing.FakeTickerTest$2: void <init>(com.google.common.testing.FakeTickerTest,com.google.common.testing.FakeTicker)>(v0, v3);
specialinvoke v0.<com.google.common.testing.FakeTickerTest: void runConcurrentTest(int,java.util.concurrent.Callable)>(64, v4);
v5 = virtualinvoke v3.<com.google.common.testing.FakeTicker: long read()>();
staticinvoke <com.google.common.testing.FakeTickerTest: void assertEquals(long,long)>(192, v5);
return;
}
private void runConcurrentTest(int, java.util.concurrent.Callable) throws java.lang.Exception
{
java.util.concurrent.Callable v2;
java.util.concurrent.CountDownLatch v4, v5;
int v1, v6;
com.google.common.testing.FakeTickerTest$3 v7;
com.google.common.testing.FakeTickerTest v0;
java.util.concurrent.ExecutorService v3;
v0 := @this: com.google.common.testing.FakeTickerTest;
v1 := @parameter0: int;
v2 := @parameter1: java.util.concurrent.Callable;
v3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(v1);
v4 = new java.util.concurrent.CountDownLatch;
specialinvoke v4.<java.util.concurrent.CountDownLatch: void <init>(int)>(v1);
v5 = new java.util.concurrent.CountDownLatch;
specialinvoke v5.<java.util.concurrent.CountDownLatch: void <init>(int)>(v1);
v6 = v1;
label1:
if v6 <= 0 goto label2;
v7 = new com.google.common.testing.FakeTickerTest$3;
specialinvoke v7.<com.google.common.testing.FakeTickerTest$3: void <init>(com.google.common.testing.FakeTickerTest,java.util.concurrent.CountDownLatch,java.util.concurrent.Callable,java.util.concurrent.CountDownLatch)>(v0, v4, v2, v5);
interfaceinvoke v3.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(v7);
v6 = v6 - 1;
goto label1;
label2:
virtualinvoke v5.<java.util.concurrent.CountDownLatch: void await()>();
return;
}
}