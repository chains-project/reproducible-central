class com.google.common.testing.GcFinalizationTest$Interruptenator$1 extends java.lang.Object implements java.lang.Runnable
{
final com.google.common.testing.GcFinalizationTest val$this$0;
final java.util.concurrent.atomic.AtomicBoolean val$shutdown;
final java.lang.Thread val$interruptee;
void <init>(com.google.common.testing.GcFinalizationTest, java.util.concurrent.atomic.AtomicBoolean, java.lang.Thread)
{
com.google.common.testing.GcFinalizationTest v1;
java.lang.Thread v3;
java.util.concurrent.atomic.AtomicBoolean v2;
com.google.common.testing.GcFinalizationTest$Interruptenator$1 v0;
v0 := @this: com.google.common.testing.GcFinalizationTest$Interruptenator$1;
v1 := @parameter0: com.google.common.testing.GcFinalizationTest;
v2 := @parameter1: java.util.concurrent.atomic.AtomicBoolean;
v3 := @parameter2: java.lang.Thread;
v0.<com.google.common.testing.GcFinalizationTest$Interruptenator$1: com.google.common.testing.GcFinalizationTest val$this$0> = v1;
v0.<com.google.common.testing.GcFinalizationTest$Interruptenator$1: java.util.concurrent.atomic.AtomicBoolean val$shutdown> = v2;
v0.<com.google.common.testing.GcFinalizationTest$Interruptenator$1: java.lang.Thread val$interruptee> = v3;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void run()
{
java.lang.Thread v3;
java.util.concurrent.atomic.AtomicBoolean v1;
com.google.common.testing.GcFinalizationTest$Interruptenator$1 v0;
boolean v2;
v0 := @this: com.google.common.testing.GcFinalizationTest$Interruptenator$1;
label1:
v1 = v0.<com.google.common.testing.GcFinalizationTest$Interruptenator$1: java.util.concurrent.atomic.AtomicBoolean val$shutdown>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v2 != 0 goto label2;
v3 = v0.<com.google.common.testing.GcFinalizationTest$Interruptenator$1: java.lang.Thread val$interruptee>;
virtualinvoke v3.<java.lang.Thread: void interrupt()>();
staticinvoke <java.lang.Thread: void yield()>();
goto label1;
label2:
return;
}
}