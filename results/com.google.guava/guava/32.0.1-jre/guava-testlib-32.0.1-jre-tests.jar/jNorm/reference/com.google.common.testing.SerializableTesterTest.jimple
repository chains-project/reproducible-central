public class com.google.common.testing.SerializableTesterTest extends junit.framework.TestCase
{
public void <init>()
{
com.google.common.testing.SerializableTesterTest v0;
v0 := @this: com.google.common.testing.SerializableTesterTest;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
return;
}
public void testStringAssertions()
{
java.lang.Object v1;
com.google.common.testing.SerializableTesterTest v0;
v0 := @this: com.google.common.testing.SerializableTesterTest;
v1 = staticinvoke <com.google.common.testing.SerializableTester: java.lang.Object reserializeAndAssert(java.lang.Object)>("hello world");
staticinvoke <com.google.common.testing.SerializableTesterTest: void assertEquals(java.lang.String,java.lang.String)>("hello world", v1);
staticinvoke <com.google.common.testing.SerializableTesterTest: void assertNotSame(java.lang.Object,java.lang.Object)>("hello world", v1);
return;
}
public void testClassWhichDoesNotImplementEquals()
{
java.lang.Throwable v3;
com.google.common.testing.SerializableTesterTest v0;
java.lang.String v4;
com.google.common.testing.SerializableTesterTest$ClassWhichDoesNotImplementEquals v1;
boolean v2;
v0 := @this: com.google.common.testing.SerializableTesterTest;
v1 = new com.google.common.testing.SerializableTesterTest$ClassWhichDoesNotImplementEquals;
specialinvoke v1.<com.google.common.testing.SerializableTesterTest$ClassWhichDoesNotImplementEquals: void <init>()>();
v2 = 0;
label1:
staticinvoke <com.google.common.testing.SerializableTester: java.lang.Object reserializeAndAssert(java.lang.Object)>(v1);
v2 = 1;
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = virtualinvoke v3.<junit.framework.AssertionFailedError: java.lang.String getMessage()>();
staticinvoke <com.google.common.testing.SerializableTesterTest: void assertContains(java.lang.String,java.lang.String)>("must be Object#equals to", v4);
label4:
staticinvoke <com.google.common.testing.SerializableTesterTest: void assertFalse(boolean)>(v2);
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testClassWhichIsAlwaysEqualButHasDifferentHashcodes()
{
java.lang.Throwable v3;
com.google.common.testing.SerializableTesterTest v0;
com.google.common.testing.SerializableTesterTest$ClassWhichIsAlwaysEqualButHasDifferentHashcodes v1;
java.lang.String v4;
boolean v2;
v0 := @this: com.google.common.testing.SerializableTesterTest;
v1 = new com.google.common.testing.SerializableTesterTest$ClassWhichIsAlwaysEqualButHasDifferentHashcodes;
specialinvoke v1.<com.google.common.testing.SerializableTesterTest$ClassWhichIsAlwaysEqualButHasDifferentHashcodes: void <init>()>();
v2 = 0;
label1:
staticinvoke <com.google.common.testing.SerializableTester: java.lang.Object reserializeAndAssert(java.lang.Object)>(v1);
v2 = 1;
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = virtualinvoke v3.<junit.framework.AssertionFailedError: java.lang.String getMessage()>();
staticinvoke <com.google.common.testing.SerializableTesterTest: void assertContains(java.lang.String,java.lang.String)>("must be equal to the Object#hashCode", v4);
label4:
staticinvoke <com.google.common.testing.SerializableTesterTest: void assertFalse(boolean)>(v2);
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testObjectWhichIsEqualButChangesClass()
{
java.lang.Throwable v3;
com.google.common.testing.SerializableTesterTest v0;
java.lang.String v4;
com.google.common.testing.SerializableTesterTest$ObjectWhichIsEqualButChangesClass v1;
boolean v2;
v0 := @this: com.google.common.testing.SerializableTesterTest;
v1 = new com.google.common.testing.SerializableTesterTest$ObjectWhichIsEqualButChangesClass;
specialinvoke v1.<com.google.common.testing.SerializableTesterTest$ObjectWhichIsEqualButChangesClass: void <init>()>();
v2 = 0;
label1:
staticinvoke <com.google.common.testing.SerializableTester: java.lang.Object reserializeAndAssert(java.lang.Object)>(v1);
v2 = 1;
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = virtualinvoke v3.<junit.framework.AssertionFailedError: java.lang.String getMessage()>();
staticinvoke <com.google.common.testing.SerializableTesterTest: void assertContains(java.lang.String,java.lang.String)>("expected:<class ", v4);
label4:
staticinvoke <com.google.common.testing.SerializableTesterTest: void assertFalse(boolean)>(v2);
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
private static void assertContains(java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v3;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: boolean contains(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v1, v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected <\u0001> to contain <\u0001>");
staticinvoke <com.google.common.testing.SerializableTesterTest: void fail(java.lang.String)>(v3);
label1:
return;
}
}