public final class com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator extends java.lang.Object implements java.util.ListIterator
{
final java.util.Stack nextElements;
final java.util.Stack previousElements;
java.util.Stack stackWithLastReturnedElementAtTop;
final com.google.common.collect.testing.AbstractIteratorTester this$0;
void <init>(com.google.common.collect.testing.AbstractIteratorTester, java.util.List)
{
com.google.common.collect.testing.AbstractIteratorTester v1;
com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator v0;
java.lang.Iterable v6;
java.util.Stack v10, v3, v4, v5, v9;
java.util.List v2;
int v7, v8;
java.lang.Object v11;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator;
v1 := @parameter0: com.google.common.collect.testing.AbstractIteratorTester;
v2 := @parameter1: java.util.List;
v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: com.google.common.collect.testing.AbstractIteratorTester this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.Stack;
specialinvoke v3.<java.util.Stack: void <init>()>();
v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack nextElements> = v3;
v4 = new java.util.Stack;
specialinvoke v4.<java.util.Stack: void <init>()>();
v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack previousElements> = v4;
v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack stackWithLastReturnedElementAtTop> = null;
v5 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack nextElements>;
v6 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.Iterable reverse(java.util.List)>(v2);
staticinvoke <com.google.common.collect.testing.Helpers: boolean addAll(java.util.Collection,java.lang.Iterable)>(v5, v6);
v7 = 0;
label1:
v8 = v1.<com.google.common.collect.testing.AbstractIteratorTester: int startIndex>;
if v7 >= v8 goto label2;
v9 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack previousElements>;
v10 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack nextElements>;
v11 = virtualinvoke v10.<java.util.Stack: java.lang.Object pop()>();
virtualinvoke v9.<java.util.Stack: java.lang.Object push(java.lang.Object)>(v11);
v7 = v7 + 1;
goto label1;
label2:
return;
}
public void add(java.lang.Object)
{
com.google.common.collect.testing.AbstractIteratorTester v2;
java.util.Set v3;
com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator v0;
java.util.Stack v7;
com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException v6;
java.lang.Object v1;
com.google.common.collect.testing.IteratorFeature v4;
boolean v5;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator;
v1 := @parameter0: java.lang.Object;
v2 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: com.google.common.collect.testing.AbstractIteratorTester this$0>;
v3 = v2.<com.google.common.collect.testing.AbstractIteratorTester: java.util.Set features>;
v4 = <com.google.common.collect.testing.IteratorFeature: com.google.common.collect.testing.IteratorFeature SUPPORTS_ADD>;
v5 = interfaceinvoke v3.<java.util.Set: boolean contains(java.lang.Object)>(v4);
if v5 != 0 goto label1;
v6 = <com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException: com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException UOE>;
throw v6;
label1:
v7 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack previousElements>;
virtualinvoke v7.<java.util.Stack: java.lang.Object push(java.lang.Object)>(v1);
v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack stackWithLastReturnedElementAtTop> = null;
return;
}
public boolean hasNext()
{
com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator v0;
java.util.Stack v1;
boolean v2, v3;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator;
v1 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack nextElements>;
v2 = virtualinvoke v1.<java.util.Stack: boolean isEmpty()>();
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean hasPrevious()
{
com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator v0;
java.util.Stack v1;
boolean v2, v3;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator;
v1 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack previousElements>;
v2 = virtualinvoke v1.<java.util.Stack: boolean isEmpty()>();
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public java.lang.Object next()
{
com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator v0;
java.lang.Object v3;
java.util.Stack v1, v2;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator;
v1 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack nextElements>;
v2 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack previousElements>;
v3 = specialinvoke v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.lang.Object transferElement(java.util.Stack,java.util.Stack)>(v1, v2);
return v3;
}
public int nextIndex()
{
int v2;
com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator v0;
java.util.Stack v1;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator;
v1 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack previousElements>;
v2 = virtualinvoke v1.<java.util.Stack: int size()>();
return v2;
}
public java.lang.Object previous()
{
com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator v0;
java.lang.Object v3;
java.util.Stack v1, v2;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator;
v1 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack previousElements>;
v2 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack nextElements>;
v3 = specialinvoke v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.lang.Object transferElement(java.util.Stack,java.util.Stack)>(v1, v2);
return v3;
}
public int previousIndex()
{
int v1, v2;
com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator v0;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: int nextIndex()>();
v2 = v1 - 1;
return v2;
}
public void remove()
{
com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator v0;
com.google.common.collect.testing.IteratorFeature v1;
java.util.Stack v2;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator;
v1 = <com.google.common.collect.testing.IteratorFeature: com.google.common.collect.testing.IteratorFeature SUPPORTS_REMOVE>;
specialinvoke v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: void throwIfInvalid(com.google.common.collect.testing.IteratorFeature)>(v1);
v2 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack stackWithLastReturnedElementAtTop>;
virtualinvoke v2.<java.util.Stack: java.lang.Object pop()>();
v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack stackWithLastReturnedElementAtTop> = null;
return;
}
public void set(java.lang.Object)
{
com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator v0;
java.lang.Object v1;
com.google.common.collect.testing.IteratorFeature v2;
java.util.Stack v3, v4;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator;
v1 := @parameter0: java.lang.Object;
v2 = <com.google.common.collect.testing.IteratorFeature: com.google.common.collect.testing.IteratorFeature SUPPORTS_SET>;
specialinvoke v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: void throwIfInvalid(com.google.common.collect.testing.IteratorFeature)>(v2);
v3 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack stackWithLastReturnedElementAtTop>;
virtualinvoke v3.<java.util.Stack: java.lang.Object pop()>();
v4 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack stackWithLastReturnedElementAtTop>;
virtualinvoke v4.<java.util.Stack: java.lang.Object push(java.lang.Object)>(v1);
return;
}
void promoteToNext(java.lang.Object)
{
com.google.common.collect.testing.AbstractIteratorTester$UnknownElementException v5;
com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator v0;
java.lang.Object v1;
java.util.Stack v2, v4, v6;
boolean v3;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator;
v1 := @parameter0: java.lang.Object;
v2 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack nextElements>;
v3 = virtualinvoke v2.<java.util.Stack: boolean remove(java.lang.Object)>(v1);
if v3 == 0 goto label1;
v4 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack nextElements>;
virtualinvoke v4.<java.util.Stack: java.lang.Object push(java.lang.Object)>(v1);
goto label2;
label1:
v5 = new com.google.common.collect.testing.AbstractIteratorTester$UnknownElementException;
v6 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack nextElements>;
specialinvoke v5.<com.google.common.collect.testing.AbstractIteratorTester$UnknownElementException: void <init>(java.util.Collection,java.lang.Object)>(v6, v1);
throw v5;
label2:
return;
}
private java.lang.Object transferElement(java.util.Stack, java.util.Stack)
{
com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException v4;
com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator v0;
java.lang.Object v5, v6;
java.util.Stack v1, v2;
boolean v3;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator;
v1 := @parameter0: java.util.Stack;
v2 := @parameter1: java.util.Stack;
v3 = virtualinvoke v1.<java.util.Stack: boolean isEmpty()>();
if v3 == 0 goto label1;
v4 = <com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException: com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException NSEE>;
throw v4;
label1:
v5 = virtualinvoke v1.<java.util.Stack: java.lang.Object pop()>();
virtualinvoke v2.<java.util.Stack: java.lang.Object push(java.lang.Object)>(v5);
v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack stackWithLastReturnedElementAtTop> = v2;
v6 = virtualinvoke v2.<java.util.Stack: java.lang.Object peek()>();
return v6;
}
private void throwIfInvalid(com.google.common.collect.testing.IteratorFeature)
{
com.google.common.collect.testing.AbstractIteratorTester v2;
java.util.Set v3;
com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator v0;
java.util.Stack v5, v8;
com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException v6, v7, v9;
com.google.common.collect.testing.IteratorFeature v1;
boolean v4;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator;
v1 := @parameter0: com.google.common.collect.testing.IteratorFeature;
v2 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: com.google.common.collect.testing.AbstractIteratorTester this$0>;
v3 = v2.<com.google.common.collect.testing.AbstractIteratorTester: java.util.Set features>;
v4 = interfaceinvoke v3.<java.util.Set: boolean contains(java.lang.Object)>(v1);
if v4 != 0 goto label2;
v5 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack stackWithLastReturnedElementAtTop>;
if v5 != null goto label1;
v6 = <com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException: com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException UOE_OR_ISE>;
throw v6;
label1:
v7 = <com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException: com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException UOE>;
throw v7;
label2:
v8 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack stackWithLastReturnedElementAtTop>;
if v8 != null goto label3;
v9 = <com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException: com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException ISE>;
throw v9;
label3:
return;
}
private java.util.List getElements()
{
com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator v0;
java.lang.Iterable v4;
java.util.Stack v2, v3;
java.util.ArrayList v1;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack previousElements>;
staticinvoke <com.google.common.collect.testing.Helpers: boolean addAll(java.util.Collection,java.lang.Iterable)>(v1, v2);
v3 = v0.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.Stack nextElements>;
v4 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.Iterable reverse(java.util.List)>(v3);
staticinvoke <com.google.common.collect.testing.Helpers: boolean addAll(java.util.Collection,java.lang.Iterable)>(v1, v4);
return v1;
}
}