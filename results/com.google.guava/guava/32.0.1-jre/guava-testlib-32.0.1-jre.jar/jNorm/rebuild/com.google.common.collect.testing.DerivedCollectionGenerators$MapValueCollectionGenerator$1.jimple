class com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1 extends java.lang.Object implements java.util.Comparator
{
final java.util.List val$orderedEntries;
final com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator this$0;
void <init>(com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator, java.util.List)
{
com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1 v0;
java.util.List v2;
com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator v1;
v0 := @this: com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1;
v1 := @parameter0: com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator;
v2 := @parameter1: java.util.List;
v0.<com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1: com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator this$0> = v1;
v0.<com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1: java.util.List val$orderedEntries> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public int compare(java.lang.Object, java.lang.Object)
{
com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1 v0;
int v3, v4, v5;
java.lang.Object v1, v2;
v0 := @this: com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v0.<com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1: int indexOfEntryWithValue(java.lang.Object)>(v1);
v4 = virtualinvoke v0.<com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1: int indexOfEntryWithValue(java.lang.Object)>(v2);
v5 = v3 - v4;
return v5;
}
int indexOfEntryWithValue(java.lang.Object)
{
com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1 v0;
java.lang.IllegalArgumentException v9;
java.util.List v3, v5;
int v2, v4;
java.lang.Object v1, v6, v7;
boolean v8;
v0 := @this: com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1;
v1 := @parameter0: java.lang.Object;
v2 = 0;
label1:
v3 = v0.<com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1: java.util.List val$orderedEntries>;
v4 = interfaceinvoke v3.<java.util.List: int size()>();
if v2 >= v4 goto label3;
v5 = v0.<com.google.common.collect.testing.DerivedCollectionGenerators$MapValueCollectionGenerator$1: java.util.List val$orderedEntries>;
v6 = interfaceinvoke v5.<java.util.List: java.lang.Object get(int)>(v2);
v7 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getValue()>();
v8 = staticinvoke <com.google.common.collect.testing.Helpers: boolean equal(java.lang.Object,java.lang.Object)>(v7, v1);
if v8 == 0 goto label2;
return v2;
label2:
v2 = v2 + 1;
goto label1;
label3:
v9 = new java.lang.IllegalArgumentException;
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Map.values generator can order only sample values");
throw v9;
}
}