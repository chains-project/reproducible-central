public class com.google.common.collect.testing.google.BiMapRemoveTester extends com.google.common.collect.testing.google.AbstractBiMapTester
{
public void <init>()
{
com.google.common.collect.testing.google.BiMapRemoveTester v0;
v0 := @this: com.google.common.collect.testing.google.BiMapRemoveTester;
specialinvoke v0.<com.google.common.collect.testing.google.AbstractBiMapTester: void <init>()>();
return;
}
public void testRemoveKeyRemovesFromInverse()
{
com.google.common.collect.BiMap v1;
com.google.common.collect.testing.google.BiMapRemoveTester v0;
java.lang.Object v2, v4;
java.util.Map$Entry[] v3;
v0 := @this: com.google.common.collect.testing.google.BiMapRemoveTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: com.google.common.collect.BiMap getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: java.lang.Object k0()>();
interfaceinvoke v1.<com.google.common.collect.BiMap: java.lang.Object remove(java.lang.Object)>(v2);
v3 = newarray (java.util.Map$Entry)[1];
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: java.lang.Object e0()>();
v3[0] = v4;
virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: void expectMissing(java.util.Map$Entry[])>(v3);
return;
}
public void testRemoveKeyFromKeySetRemovesFromInverse()
{
com.google.common.collect.BiMap v1;
com.google.common.collect.testing.google.BiMapRemoveTester v0;
java.util.Set v2;
java.lang.Object v3, v5;
java.util.Map$Entry[] v4;
v0 := @this: com.google.common.collect.testing.google.BiMapRemoveTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: com.google.common.collect.BiMap getMap()>();
v2 = interfaceinvoke v1.<com.google.common.collect.BiMap: java.util.Set keySet()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: java.lang.Object k0()>();
interfaceinvoke v2.<java.util.Set: boolean remove(java.lang.Object)>(v3);
v4 = newarray (java.util.Map$Entry)[1];
v5 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: java.lang.Object e0()>();
v4[0] = v5;
virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: void expectMissing(java.util.Map$Entry[])>(v4);
return;
}
public void testRemoveFromValuesRemovesFromInverse()
{
com.google.common.collect.BiMap v1;
com.google.common.collect.testing.google.BiMapRemoveTester v0;
java.util.Set v2;
java.lang.Object v3, v5;
java.util.Map$Entry[] v4;
v0 := @this: com.google.common.collect.testing.google.BiMapRemoveTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: com.google.common.collect.BiMap getMap()>();
v2 = interfaceinvoke v1.<com.google.common.collect.BiMap: java.util.Set values()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: java.lang.Object v0()>();
interfaceinvoke v2.<java.util.Set: boolean remove(java.lang.Object)>(v3);
v4 = newarray (java.util.Map$Entry)[1];
v5 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: java.lang.Object e0()>();
v4[0] = v5;
virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: void expectMissing(java.util.Map$Entry[])>(v4);
return;
}
public void testRemoveFromInverseRemovesFromForward()
{
com.google.common.collect.BiMap v1, v2;
com.google.common.collect.testing.google.BiMapRemoveTester v0;
java.lang.Object v3, v5;
java.util.Map$Entry[] v4;
v0 := @this: com.google.common.collect.testing.google.BiMapRemoveTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: com.google.common.collect.BiMap getMap()>();
v2 = interfaceinvoke v1.<com.google.common.collect.BiMap: com.google.common.collect.BiMap inverse()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: java.lang.Object v0()>();
interfaceinvoke v2.<com.google.common.collect.BiMap: java.lang.Object remove(java.lang.Object)>(v3);
v4 = newarray (java.util.Map$Entry)[1];
v5 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: java.lang.Object e0()>();
v4[0] = v5;
virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: void expectMissing(java.util.Map$Entry[])>(v4);
return;
}
public void testRemoveFromInverseKeySetRemovesFromForward()
{
com.google.common.collect.BiMap v1, v2;
com.google.common.collect.testing.google.BiMapRemoveTester v0;
java.util.Set v3;
java.lang.Object v4, v6;
java.util.Map$Entry[] v5;
v0 := @this: com.google.common.collect.testing.google.BiMapRemoveTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: com.google.common.collect.BiMap getMap()>();
v2 = interfaceinvoke v1.<com.google.common.collect.BiMap: com.google.common.collect.BiMap inverse()>();
v3 = interfaceinvoke v2.<com.google.common.collect.BiMap: java.util.Set keySet()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: java.lang.Object v0()>();
interfaceinvoke v3.<java.util.Set: boolean remove(java.lang.Object)>(v4);
v5 = newarray (java.util.Map$Entry)[1];
v6 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: java.lang.Object e0()>();
v5[0] = v6;
virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: void expectMissing(java.util.Map$Entry[])>(v5);
return;
}
public void testRemoveFromInverseValuesRemovesFromInverse()
{
com.google.common.collect.BiMap v1, v2;
com.google.common.collect.testing.google.BiMapRemoveTester v0;
java.util.Set v3;
java.lang.Object v4, v6;
java.util.Map$Entry[] v5;
v0 := @this: com.google.common.collect.testing.google.BiMapRemoveTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: com.google.common.collect.BiMap getMap()>();
v2 = interfaceinvoke v1.<com.google.common.collect.BiMap: com.google.common.collect.BiMap inverse()>();
v3 = interfaceinvoke v2.<com.google.common.collect.BiMap: java.util.Set values()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: java.lang.Object k0()>();
interfaceinvoke v3.<java.util.Set: boolean remove(java.lang.Object)>(v4);
v5 = newarray (java.util.Map$Entry)[1];
v6 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: java.lang.Object e0()>();
v5[0] = v6;
virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: void expectMissing(java.util.Map$Entry[])>(v5);
return;
}
public void testKeySetIteratorRemove()
{
com.google.common.collect.BiMap v10, v2, v6, v9;
java.util.Iterator v4;
com.google.common.collect.testing.google.BiMapRemoveTester v0;
java.util.Set v3;
int v1, v11, v5, v7, v8;
v0 := @this: com.google.common.collect.testing.google.BiMapRemoveTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: int getNumElements()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: com.google.common.collect.BiMap getMap()>();
v3 = interfaceinvoke v2.<com.google.common.collect.BiMap: java.util.Set keySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v4.<java.util.Iterator: void remove()>();
v5 = v1 - 1;
v6 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: com.google.common.collect.BiMap getMap()>();
v7 = interfaceinvoke v6.<com.google.common.collect.BiMap: int size()>();
staticinvoke <com.google.common.collect.testing.google.BiMapRemoveTester: void assertEquals(int,int)>(v5, v7);
v8 = v1 - 1;
v9 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapRemoveTester: com.google.common.collect.BiMap getMap()>();
v10 = interfaceinvoke v9.<com.google.common.collect.BiMap: com.google.common.collect.BiMap inverse()>();
v11 = interfaceinvoke v10.<com.google.common.collect.BiMap: int size()>();
staticinvoke <com.google.common.collect.testing.google.BiMapRemoveTester: void assertEquals(int,int)>(v8, v11);
return;
}
}