class com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator extends java.lang.Object implements com.google.common.collect.testing.google.TestMultisetGenerator, com.google.common.collect.testing.DerivedGenerator
{
private final com.google.common.collect.testing.OneSizeTestContainerGenerator multimapGenerator;
public void <init>(com.google.common.collect.testing.OneSizeTestContainerGenerator)
{
com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator v0;
com.google.common.collect.testing.OneSizeTestContainerGenerator v1;
v0 := @this: com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator;
v1 := @parameter0: com.google.common.collect.testing.OneSizeTestContainerGenerator;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator: com.google.common.collect.testing.OneSizeTestContainerGenerator multimapGenerator> = v1;
return;
}
public com.google.common.collect.testing.TestSubjectGenerator getInnerGenerator()
{
com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator v0;
com.google.common.collect.testing.OneSizeTestContainerGenerator v1;
v0 := @this: com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator;
v1 = v0.<com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator: com.google.common.collect.testing.OneSizeTestContainerGenerator multimapGenerator>;
return v1;
}
public com.google.common.collect.testing.SampleElements samples()
{
com.google.common.collect.testing.TestContainerGenerator v2;
com.google.common.collect.testing.OneSizeTestContainerGenerator v1;
com.google.common.collect.testing.SampleElements v3;
com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator v0;
v0 := @this: com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator;
v1 = v0.<com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator: com.google.common.collect.testing.OneSizeTestContainerGenerator multimapGenerator>;
v2 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: com.google.common.collect.testing.TestContainerGenerator getInnerGenerator()>();
v3 = interfaceinvoke v2.<com.google.common.collect.testing.google.TestMultimapGenerator: com.google.common.collect.testing.SampleElements sampleKeys()>();
return v3;
}
public transient com.google.common.collect.Multiset create(java.lang.Object[])
{
java.lang.Object[] v1;
com.google.common.collect.Multiset v15;
java.util.HashMap v4;
int v2, v5, v6;
java.util.Map$Entry[] v3;
java.util.Map$Entry v12;
java.util.Iterator v9;
com.google.common.collect.testing.OneSizeTestContainerGenerator v13;
java.lang.Object v10, v11, v14, v7, v8;
com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator v0;
v0 := @this: com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator;
v1 := @parameter0: java.lang.Object[];
v2 = lengthof v1;
v3 = newarray (java.util.Map$Entry)[v2];
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>()>();
v5 = 0;
label1:
v6 = lengthof v1;
if v5 >= v6 goto label3;
v7 = v1[v5];
v8 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(v7);
if v8 != null goto label2;
v9 = specialinvoke v0.<com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator: java.util.Iterator sampleValuesIterator()>();
v8 = v9;
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v7, v9);
label2:
v10 = v1[v5];
v11 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v12 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v10, v11);
v3[v5] = v12;
v5 = v5 + 1;
goto label1;
label3:
v13 = v0.<com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator: com.google.common.collect.testing.OneSizeTestContainerGenerator multimapGenerator>;
v14 = interfaceinvoke v13.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v3);
v15 = interfaceinvoke v14.<com.google.common.collect.Multimap: com.google.common.collect.Multiset keys()>();
return v15;
}
private java.util.Iterator sampleValuesIterator()
{
java.util.Iterator v4;
com.google.common.collect.testing.TestContainerGenerator v2;
com.google.common.collect.testing.OneSizeTestContainerGenerator v1;
com.google.common.collect.testing.SampleElements v3;
com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator v0;
v0 := @this: com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator;
v1 = v0.<com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator: com.google.common.collect.testing.OneSizeTestContainerGenerator multimapGenerator>;
v2 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: com.google.common.collect.testing.TestContainerGenerator getInnerGenerator()>();
v3 = interfaceinvoke v2.<com.google.common.collect.testing.google.TestMultimapGenerator: com.google.common.collect.testing.SampleElements sampleValues()>();
v4 = virtualinvoke v3.<com.google.common.collect.testing.SampleElements: java.util.Iterator iterator()>();
return v4;
}
public java.lang.Object[] createArray(int)
{
java.lang.Object[] v4;
com.google.common.collect.testing.TestContainerGenerator v3;
com.google.common.collect.testing.OneSizeTestContainerGenerator v2;
int v1;
com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator v0;
v0 := @this: com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator;
v1 := @parameter0: int;
v2 = v0.<com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator: com.google.common.collect.testing.OneSizeTestContainerGenerator multimapGenerator>;
v3 = interfaceinvoke v2.<com.google.common.collect.testing.OneSizeTestContainerGenerator: com.google.common.collect.testing.TestContainerGenerator getInnerGenerator()>();
v4 = interfaceinvoke v3.<com.google.common.collect.testing.google.TestMultimapGenerator: java.lang.Object[] createKeyArray(int)>(v1);
return v4;
}
public java.lang.Iterable order(java.util.List)
{
java.lang.Iterable v10;
java.util.ArrayList v11, v3;
boolean v13, v5;
java.util.Map$Entry v8;
java.util.Iterator v12, v2, v4;
com.google.common.collect.testing.OneSizeTestContainerGenerator v9;
java.util.List v1;
java.lang.Object v14, v15, v6, v7;
com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator v0;
v0 := @this: com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator;
v1 := @parameter0: java.util.List;
v2 = specialinvoke v0.<com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator: java.util.Iterator sampleValuesIterator()>();
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v4 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v8 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v6, v7);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v8);
goto label1;
label2:
v9 = v0.<com.google.common.collect.testing.google.MultimapTestSuiteBuilder$KeysGenerator: com.google.common.collect.testing.OneSizeTestContainerGenerator multimapGenerator>;
v10 = interfaceinvoke v9.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Iterable order(java.util.List)>(v3);
v11 = new java.util.ArrayList;
specialinvoke v11.<java.util.ArrayList: void <init>()>();
v12 = interfaceinvoke v10.<java.lang.Iterable: java.util.Iterator iterator()>();
label3:
v13 = interfaceinvoke v12.<java.util.Iterator: boolean hasNext()>();
if v13 == 0 goto label4;
v14 = interfaceinvoke v12.<java.util.Iterator: java.lang.Object next()>();
v15 = interfaceinvoke v14.<java.util.Map$Entry: java.lang.Object getKey()>();
interfaceinvoke v11.<java.util.List: boolean add(java.lang.Object)>(v15);
goto label3;
label4:
return v11;
}
}