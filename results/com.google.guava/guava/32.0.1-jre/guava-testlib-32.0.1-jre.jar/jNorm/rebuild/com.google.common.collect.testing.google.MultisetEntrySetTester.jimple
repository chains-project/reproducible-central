public class com.google.common.collect.testing.google.MultisetEntrySetTester extends com.google.common.collect.testing.google.AbstractMultisetTester
{
public void <init>()
{
com.google.common.collect.testing.google.MultisetEntrySetTester v0;
v0 := @this: com.google.common.collect.testing.google.MultisetEntrySetTester;
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetTester: void <init>()>();
return;
}
public void testEntrySet_clear()
{
com.google.common.collect.Multiset v1, v3;
java.util.Set v2;
com.google.common.collect.testing.google.MultisetEntrySetTester v0;
boolean v4;
v0 := @this: com.google.common.collect.testing.google.MultisetEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
interfaceinvoke v2.<java.util.Set: void clear()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v4 = interfaceinvoke v3.<com.google.common.collect.Multiset: boolean isEmpty()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertTrue(java.lang.String,boolean)>("multiset not empty after entrySet().clear()", v4);
return;
}
public void testEntrySet_iteratorRemovePropagates()
{
java.util.Iterator v3;
com.google.common.collect.Multiset v1, v9;
java.util.Set v2;
com.google.common.collect.Multiset$Entry v6;
java.lang.Object v5, v7;
com.google.common.collect.testing.google.MultisetEntrySetTester v0;
boolean v10, v4, v8;
v0 := @this: com.google.common.collect.testing.google.MultisetEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertTrue(java.lang.String,boolean)>("non-empty multiset.entrySet() iterator.hasNext() returned false", v4);
v5 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v6 = staticinvoke <com.google.common.collect.Multisets: com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>(v5, 1);
v7 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("multiset.entrySet() iterator.next() returned incorrect entry", v6, v7);
v8 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertFalse(java.lang.String,boolean)>("size 1 multiset.entrySet() iterator.hasNext() returned true after next()", v8);
interfaceinvoke v3.<java.util.Iterator: void remove()>();
v9 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v10 = interfaceinvoke v9.<com.google.common.collect.Multiset: boolean isEmpty()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertTrue(java.lang.String,boolean)>("multiset isn\'t empty after multiset.entrySet() iterator.remove()", v10);
return;
}
public void testEntrySet_removePresent()
{
com.google.common.collect.Multiset v1, v6;
java.util.Set v2;
com.google.common.collect.Multiset$Entry v4;
java.lang.Object v3, v7;
com.google.common.collect.testing.google.MultisetEntrySetTester v0;
boolean v5, v8;
v0 := @this: com.google.common.collect.testing.google.MultisetEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v4 = staticinvoke <com.google.common.collect.Multisets: com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>(v3, 1);
v5 = interfaceinvoke v2.<java.util.Set: boolean remove(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertTrue(java.lang.String,boolean)>("multiset.entrySet.remove(presentEntry) returned false", v5);
v6 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v7 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v8 = interfaceinvoke v6.<com.google.common.collect.Multiset: boolean contains(java.lang.Object)>(v7);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertFalse(java.lang.String,boolean)>("multiset contains element after removing its entry", v8);
return;
}
public void testEntrySet_removeAbsent()
{
com.google.common.collect.Multiset v1, v6;
java.util.Set v2;
com.google.common.collect.Multiset$Entry v4;
java.lang.Object v3, v7;
com.google.common.collect.testing.google.MultisetEntrySetTester v0;
boolean v5, v8;
v0 := @this: com.google.common.collect.testing.google.MultisetEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v4 = staticinvoke <com.google.common.collect.Multisets: com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>(v3, 2);
v5 = interfaceinvoke v2.<java.util.Set: boolean remove(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertFalse(java.lang.String,boolean)>("multiset.entrySet.remove(missingEntry) returned true", v5);
v6 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v7 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v8 = interfaceinvoke v6.<com.google.common.collect.Multiset: boolean contains(java.lang.Object)>(v7);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertTrue(java.lang.String,boolean)>("multiset didn\'t contain element after removing a missing entry", v8);
return;
}
public void testEntrySet_removeAllPresent()
{
com.google.common.collect.Multiset v1, v7;
java.util.Set v2, v5;
com.google.common.collect.Multiset$Entry v4;
java.lang.Object v3, v8;
com.google.common.collect.testing.google.MultisetEntrySetTester v0;
boolean v6, v9;
v0 := @this: com.google.common.collect.testing.google.MultisetEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v4 = staticinvoke <com.google.common.collect.Multisets: com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>(v3, 1);
v5 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v4);
v6 = interfaceinvoke v2.<java.util.Set: boolean removeAll(java.util.Collection)>(v5);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertTrue(java.lang.String,boolean)>("multiset.entrySet.removeAll(presentEntry) returned false", v6);
v7 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v8 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v9 = interfaceinvoke v7.<com.google.common.collect.Multiset: boolean contains(java.lang.Object)>(v8);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertFalse(java.lang.String,boolean)>("multiset contains element after removing its entry", v9);
return;
}
public void testEntrySet_removeAllAbsent()
{
com.google.common.collect.Multiset v1, v7;
java.util.Set v2, v5;
com.google.common.collect.Multiset$Entry v4;
java.lang.Object v3, v8;
com.google.common.collect.testing.google.MultisetEntrySetTester v0;
boolean v6, v9;
v0 := @this: com.google.common.collect.testing.google.MultisetEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v4 = staticinvoke <com.google.common.collect.Multisets: com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>(v3, 2);
v5 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v4);
v6 = interfaceinvoke v2.<java.util.Set: boolean removeAll(java.util.Collection)>(v5);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertFalse(java.lang.String,boolean)>("multiset.entrySet.remove(missingEntry) returned true", v6);
v7 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v8 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v9 = interfaceinvoke v7.<com.google.common.collect.Multiset: boolean contains(java.lang.Object)>(v8);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertTrue(java.lang.String,boolean)>("multiset didn\'t contain element after removing a missing entry", v9);
return;
}
public void testEntrySet_retainAllPresent()
{
com.google.common.collect.Multiset v1, v7;
java.util.Set v2, v5;
com.google.common.collect.Multiset$Entry v4;
java.lang.Object v3, v8;
com.google.common.collect.testing.google.MultisetEntrySetTester v0;
boolean v6, v9;
v0 := @this: com.google.common.collect.testing.google.MultisetEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v4 = staticinvoke <com.google.common.collect.Multisets: com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>(v3, 1);
v5 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v4);
v6 = interfaceinvoke v2.<java.util.Set: boolean retainAll(java.util.Collection)>(v5);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertFalse(java.lang.String,boolean)>("multiset.entrySet.retainAll(presentEntry) returned false", v6);
v7 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v8 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v9 = interfaceinvoke v7.<com.google.common.collect.Multiset: boolean contains(java.lang.Object)>(v8);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertTrue(java.lang.String,boolean)>("multiset doesn\'t contains element after retaining its entry", v9);
return;
}
public void testEntrySet_retainAllAbsent()
{
com.google.common.collect.Multiset v1, v7;
java.util.Set v2, v5;
com.google.common.collect.Multiset$Entry v4;
java.lang.Object v3, v8;
com.google.common.collect.testing.google.MultisetEntrySetTester v0;
boolean v6, v9;
v0 := @this: com.google.common.collect.testing.google.MultisetEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v4 = staticinvoke <com.google.common.collect.Multisets: com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>(v3, 2);
v5 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v4);
v6 = interfaceinvoke v2.<java.util.Set: boolean retainAll(java.util.Collection)>(v5);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertTrue(java.lang.String,boolean)>("multiset.entrySet.retainAll(missingEntry) returned true", v6);
v7 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v8 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v9 = interfaceinvoke v7.<com.google.common.collect.Multiset: boolean contains(java.lang.Object)>(v8);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertFalse(java.lang.String,boolean)>("multiset contains element after retaining a different entry", v9);
return;
}
public void testEntryViewReflectsRemove()
{
com.google.common.collect.Multiset v1, v12, v4, v8;
int v11, v16, v3, v7;
com.google.common.collect.testing.google.MultisetEntrySetTester v0;
boolean v10, v15;
java.util.Set v13, v5;
java.lang.Object v14, v2, v6, v9;
v0 := @this: com.google.common.collect.testing.google.MultisetEntrySetTester;
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: void initThreeCopies()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: int count(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(3, v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v5 = interfaceinvoke v4.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v6 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getOnlyElement(java.lang.Iterable)>(v5);
v7 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(3, v7);
v8 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v9 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v10 = interfaceinvoke v8.<com.google.common.collect.Multiset: boolean remove(java.lang.Object)>(v9);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertTrue(boolean)>(v10);
v11 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(2, v11);
v12 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v13 = interfaceinvoke v12.<com.google.common.collect.Multiset: java.util.Set elementSet()>();
v14 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v15 = interfaceinvoke v13.<java.util.Set: boolean remove(java.lang.Object)>(v14);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertTrue(boolean)>(v15);
v16 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(0, v16);
return;
}
public void testEntryReflectsIteratorRemove()
{
java.util.Iterator v9;
com.google.common.collect.Multiset v1, v4, v8;
java.util.Set v5;
int v10, v11, v3, v7;
java.lang.Object v2, v6;
com.google.common.collect.testing.google.MultisetEntrySetTester v0;
v0 := @this: com.google.common.collect.testing.google.MultisetEntrySetTester;
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: void initThreeCopies()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: int count(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(3, v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v5 = interfaceinvoke v4.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v6 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getOnlyElement(java.lang.Iterable)>(v5);
v7 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(3, v7);
v8 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v9 = interfaceinvoke v8.<com.google.common.collect.Multiset: java.util.Iterator iterator()>();
interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v9.<java.util.Iterator: void remove()>();
v10 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(2, v10);
interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v9.<java.util.Iterator: void remove()>();
interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v9.<java.util.Iterator: void remove()>();
v11 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(0, v11);
return;
}
public void testEntryReflectsClear()
{
com.google.common.collect.Multiset v1, v4, v8;
java.util.Set v5;
int v3, v7, v9;
java.lang.Object v2, v6;
com.google.common.collect.testing.google.MultisetEntrySetTester v0;
v0 := @this: com.google.common.collect.testing.google.MultisetEntrySetTester;
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: void initThreeCopies()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: int count(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(3, v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v5 = interfaceinvoke v4.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v6 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getOnlyElement(java.lang.Iterable)>(v5);
v7 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(3, v7);
v8 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
interfaceinvoke v8.<com.google.common.collect.Multiset: void clear()>();
v9 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(0, v9);
return;
}
public void testEntryReflectsEntrySetClear()
{
com.google.common.collect.Multiset v1, v4, v8;
java.util.Set v5, v9;
int v10, v3, v7;
java.lang.Object v2, v6;
com.google.common.collect.testing.google.MultisetEntrySetTester v0;
v0 := @this: com.google.common.collect.testing.google.MultisetEntrySetTester;
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: void initThreeCopies()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: int count(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(3, v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v5 = interfaceinvoke v4.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v6 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getOnlyElement(java.lang.Iterable)>(v5);
v7 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(3, v7);
v8 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v9 = interfaceinvoke v8.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
interfaceinvoke v9.<java.util.Set: void clear()>();
v10 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(0, v10);
return;
}
public void testEntryReflectsEntrySetIteratorRemove()
{
java.util.Iterator v6;
com.google.common.collect.Multiset v1, v4;
java.util.Set v5;
int v3, v8;
java.lang.Object v2, v7;
com.google.common.collect.testing.google.MultisetEntrySetTester v0;
v0 := @this: com.google.common.collect.testing.google.MultisetEntrySetTester;
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: void initThreeCopies()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: int count(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(3, v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v5 = interfaceinvoke v4.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v6 = interfaceinvoke v5.<java.util.Set: java.util.Iterator iterator()>();
v7 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v6.<java.util.Iterator: void remove()>();
v8 = interfaceinvoke v7.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(0, v8);
return;
}
public void testEntryReflectsElementSetClear()
{
com.google.common.collect.Multiset v1, v4, v8;
java.util.Set v5, v9;
int v10, v3, v7;
java.lang.Object v2, v6;
com.google.common.collect.testing.google.MultisetEntrySetTester v0;
v0 := @this: com.google.common.collect.testing.google.MultisetEntrySetTester;
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: void initThreeCopies()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: int count(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(3, v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v5 = interfaceinvoke v4.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v6 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getOnlyElement(java.lang.Iterable)>(v5);
v7 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(3, v7);
v8 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v9 = interfaceinvoke v8.<com.google.common.collect.Multiset: java.util.Set elementSet()>();
interfaceinvoke v9.<java.util.Set: void clear()>();
v10 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(0, v10);
return;
}
public void testEntryReflectsElementSetIteratorRemove()
{
java.util.Iterator v10;
com.google.common.collect.Multiset v1, v4, v8;
java.util.Set v5, v9;
int v11, v3, v7;
java.lang.Object v2, v6;
com.google.common.collect.testing.google.MultisetEntrySetTester v0;
v0 := @this: com.google.common.collect.testing.google.MultisetEntrySetTester;
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: void initThreeCopies()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: int count(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(3, v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v5 = interfaceinvoke v4.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v6 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getOnlyElement(java.lang.Iterable)>(v5);
v7 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(3, v7);
v8 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v9 = interfaceinvoke v8.<com.google.common.collect.Multiset: java.util.Set elementSet()>();
v10 = interfaceinvoke v9.<java.util.Set: java.util.Iterator iterator()>();
interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v10.<java.util.Iterator: void remove()>();
v11 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(0, v11);
return;
}
public void testEntryReflectsRemoveThenAdd()
{
com.google.common.collect.Multiset v1, v12, v17, v4, v8;
int v11, v16, v19, v3, v7;
com.google.common.collect.testing.google.MultisetEntrySetTester v0;
boolean v10, v15;
java.util.Set v13, v5;
java.lang.Object v14, v18, v2, v6, v9;
v0 := @this: com.google.common.collect.testing.google.MultisetEntrySetTester;
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: void initThreeCopies()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: int count(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(3, v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v5 = interfaceinvoke v4.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v6 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getOnlyElement(java.lang.Iterable)>(v5);
v7 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(3, v7);
v8 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v9 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v10 = interfaceinvoke v8.<com.google.common.collect.Multiset: boolean remove(java.lang.Object)>(v9);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertTrue(boolean)>(v10);
v11 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(2, v11);
v12 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v13 = interfaceinvoke v12.<com.google.common.collect.Multiset: java.util.Set elementSet()>();
v14 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
v15 = interfaceinvoke v13.<java.util.Set: boolean remove(java.lang.Object)>(v14);
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertTrue(boolean)>(v15);
v16 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(0, v16);
v17 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v18 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: java.lang.Object e0()>();
interfaceinvoke v17.<com.google.common.collect.Multiset: int add(java.lang.Object,int)>(v18, 2);
v19 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(int,int)>(2, v19);
return;
}
public void testToString()
{
com.google.common.collect.Multiset v1, v4;
java.util.Set v2;
java.lang.String v3, v5;
com.google.common.collect.testing.google.MultisetEntrySetTester v0;
v0 := @this: com.google.common.collect.testing.google.MultisetEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v3 = virtualinvoke v2.<java.lang.Object: java.lang.String toString()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetEntrySetTester: com.google.common.collect.Multiset getMultiset()>();
v5 = interfaceinvoke v4.<com.google.common.collect.Multiset: java.lang.String toString()>();
staticinvoke <com.google.common.collect.testing.google.MultisetEntrySetTester: void assertEquals(java.lang.String,java.lang.String)>(v3, v5);
return;
}
}