class com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator extends java.lang.Object implements com.google.common.collect.testing.TestSetGenerator
{
final com.google.common.collect.testing.OneSizeTestContainerGenerator gen;
private void <init>(com.google.common.collect.testing.OneSizeTestContainerGenerator)
{
com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator v0;
com.google.common.collect.testing.OneSizeTestContainerGenerator v1;
v0 := @this: com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator;
v1 := @parameter0: com.google.common.collect.testing.OneSizeTestContainerGenerator;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator: com.google.common.collect.testing.OneSizeTestContainerGenerator gen> = v1;
return;
}
public com.google.common.collect.testing.SampleElements samples()
{
com.google.common.collect.testing.OneSizeTestContainerGenerator v1;
com.google.common.collect.testing.SampleElements v2, v3;
com.google.common.collect.Multiset$Entry v11, v13, v5, v7, v9;
com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator v0;
java.lang.Object v10, v12, v4, v6, v8;
v0 := @this: com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator;
v1 = v0.<com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator: com.google.common.collect.testing.OneSizeTestContainerGenerator gen>;
v2 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: com.google.common.collect.testing.SampleElements samples()>();
v3 = new com.google.common.collect.testing.SampleElements;
v4 = virtualinvoke v2.<com.google.common.collect.testing.SampleElements: java.lang.Object e0()>();
v5 = staticinvoke <com.google.common.collect.Multisets: com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>(v4, 3);
v6 = virtualinvoke v2.<com.google.common.collect.testing.SampleElements: java.lang.Object e1()>();
v7 = staticinvoke <com.google.common.collect.Multisets: com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>(v6, 4);
v8 = virtualinvoke v2.<com.google.common.collect.testing.SampleElements: java.lang.Object e2()>();
v9 = staticinvoke <com.google.common.collect.Multisets: com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>(v8, 1);
v10 = virtualinvoke v2.<com.google.common.collect.testing.SampleElements: java.lang.Object e3()>();
v11 = staticinvoke <com.google.common.collect.Multisets: com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>(v10, 5);
v12 = virtualinvoke v2.<com.google.common.collect.testing.SampleElements: java.lang.Object e4()>();
v13 = staticinvoke <com.google.common.collect.Multisets: com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>(v12, 2);
specialinvoke v3.<com.google.common.collect.testing.SampleElements: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(v5, v7, v9, v11, v13);
return v3;
}
public transient java.util.Set create(java.lang.Object[])
{
java.lang.Object[] v1, v13;
java.util.ArrayList v2;
java.util.HashSet v3;
com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator v0;
int v10, v4, v5, v9;
boolean v8;
com.google.common.collect.testing.OneSizeTestContainerGenerator v12;
java.util.Set v15;
java.lang.Object v11, v14, v6, v7;
v0 := @this: com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator;
v1 := @parameter0: java.lang.Object[];
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = new java.util.HashSet;
specialinvoke v3.<java.util.HashSet: void <init>()>();
v4 = lengthof v1;
v5 = 0;
label1:
if v5 >= v4 goto label4;
v6 = v1[v5];
v7 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();
v8 = interfaceinvoke v3.<java.util.Set: boolean add(java.lang.Object)>(v7);
staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>(v8, "Duplicate keys not allowed in EntrySetGenerator");
v9 = 0;
label2:
v10 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: int getCount()>();
if v9 >= v10 goto label3;
v11 = interfaceinvoke v6.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v11);
v9 = v9 + 1;
goto label2;
label3:
v5 = v5 + 1;
goto label1;
label4:
v12 = v0.<com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator: com.google.common.collect.testing.OneSizeTestContainerGenerator gen>;
v13 = interfaceinvoke v2.<java.util.List: java.lang.Object[] toArray()>();
v14 = interfaceinvoke v12.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v13);
v15 = interfaceinvoke v14.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
return v15;
}
public com.google.common.collect.Multiset$Entry[] createArray(int)
{
int v1;
com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator v0;
com.google.common.collect.Multiset$Entry[] v2;
v0 := @this: com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator;
v1 := @parameter0: int;
v2 = newarray (com.google.common.collect.Multiset$Entry)[v1];
return v2;
}
public java.lang.Iterable order(java.util.List)
{
java.lang.Iterable v12;
java.util.ArrayList v10, v8;
java.util.HashSet v7;
java.util.LinkedHashMap v2;
com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator v0;
boolean v14, v16, v4;
java.util.Iterator v13, v3;
com.google.common.collect.testing.OneSizeTestContainerGenerator v9;
java.util.Set v11;
java.util.List v1;
java.lang.Object v15, v17, v5, v6;
v0 := @this: com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator;
v1 := @parameter0: java.util.List;
v2 = new java.util.LinkedHashMap;
specialinvoke v2.<java.util.LinkedHashMap: void <init>()>();
v3 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v5);
goto label1;
label2:
v7 = new java.util.HashSet;
specialinvoke v7.<java.util.HashSet: void <init>()>();
v8 = new java.util.ArrayList;
specialinvoke v8.<java.util.ArrayList: void <init>()>();
v9 = v0.<com.google.common.collect.testing.google.MultisetTestSuiteBuilder$EntrySetGenerator: com.google.common.collect.testing.OneSizeTestContainerGenerator gen>;
v10 = new java.util.ArrayList;
v11 = interfaceinvoke v2.<java.util.Map: java.util.Set keySet()>();
specialinvoke v10.<java.util.ArrayList: void <init>(java.util.Collection)>(v11);
v12 = interfaceinvoke v9.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Iterable order(java.util.List)>(v10);
v13 = interfaceinvoke v12.<java.lang.Iterable: java.util.Iterator iterator()>();
label3:
v14 = interfaceinvoke v13.<java.util.Iterator: boolean hasNext()>();
if v14 == 0 goto label4;
v15 = interfaceinvoke v13.<java.util.Iterator: java.lang.Object next()>();
v16 = interfaceinvoke v7.<java.util.Set: boolean add(java.lang.Object)>(v15);
if v16 == 0 goto label3;
v17 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v15);
interfaceinvoke v8.<java.util.List: boolean add(java.lang.Object)>(v17);
goto label3;
label4:
return v8;
}
}