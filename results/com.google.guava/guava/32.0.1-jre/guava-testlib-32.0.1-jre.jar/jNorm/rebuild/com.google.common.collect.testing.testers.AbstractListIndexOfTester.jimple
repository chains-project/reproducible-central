public abstract class com.google.common.collect.testing.testers.AbstractListIndexOfTester extends com.google.common.collect.testing.testers.AbstractListTester
{
public void <init>()
{
com.google.common.collect.testing.testers.AbstractListIndexOfTester v0;
v0 := @this: com.google.common.collect.testing.testers.AbstractListIndexOfTester;
specialinvoke v0.<com.google.common.collect.testing.testers.AbstractListTester: void <init>()>();
return;
}
protected abstract int find(java.lang.Object);
protected abstract java.lang.String getMethodName();
public void testFind_yes()
{
java.util.List v3;
int v5;
java.lang.Object v4;
java.lang.String v1, v2;
com.google.common.collect.testing.testers.AbstractListIndexOfTester v0;
v0 := @this: com.google.common.collect.testing.testers.AbstractListIndexOfTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: java.lang.String getMethodName()>();
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001(firstElement) should return 0");
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: java.util.List getOrderedElements()>();
v4 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(0);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: int find(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.testers.AbstractListIndexOfTester: void assertEquals(java.lang.String,int,int)>(v2, 0, v5);
return;
}
public void testFind_no()
{
int v4, v5;
java.lang.Object v3;
java.lang.String v1, v2;
com.google.common.collect.testing.testers.AbstractListIndexOfTester v0;
v0 := @this: com.google.common.collect.testing.testers.AbstractListIndexOfTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: java.lang.String getMethodName()>();
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001(notPresent) should return -1");
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: java.lang.Object e3()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: int find(java.lang.Object)>(v3);
v5 = (int) -1;
staticinvoke <com.google.common.collect.testing.testers.AbstractListIndexOfTester: void assertEquals(java.lang.String,int,int)>(v2, v5, v4);
return;
}
public void testFind_nullNotContainedButSupported()
{
int v3, v4;
java.lang.String v1, v2;
com.google.common.collect.testing.testers.AbstractListIndexOfTester v0;
v0 := @this: com.google.common.collect.testing.testers.AbstractListIndexOfTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: java.lang.String getMethodName()>();
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001(nullNotPresent) should return -1");
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: int find(java.lang.Object)>(null);
v4 = (int) -1;
staticinvoke <com.google.common.collect.testing.testers.AbstractListIndexOfTester: void assertEquals(java.lang.String,int,int)>(v2, v4, v3);
return;
}
public void testFind_nullNotContainedAndUnsupported()
{
int v3, v4;
java.lang.String v1, v2;
com.google.common.collect.testing.testers.AbstractListIndexOfTester v0;
java.lang.NullPointerException v5;
v0 := @this: com.google.common.collect.testing.testers.AbstractListIndexOfTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: java.lang.String getMethodName()>();
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001(nullNotPresent) should return -1 or throw");
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: int find(java.lang.Object)>(null);
v4 = (int) -1;
staticinvoke <com.google.common.collect.testing.testers.AbstractListIndexOfTester: void assertEquals(java.lang.String,int,int)>(v2, v4, v3);
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testFind_nonNullWhenNullContained()
{
int v4, v5;
java.lang.Object v3;
java.lang.String v1, v2;
com.google.common.collect.testing.testers.AbstractListIndexOfTester v0;
v0 := @this: com.google.common.collect.testing.testers.AbstractListIndexOfTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: void initCollectionWithNullElement()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: java.lang.String getMethodName()>();
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001(notPresent) should return -1");
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: java.lang.Object e3()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: int find(java.lang.Object)>(v3);
v5 = (int) -1;
staticinvoke <com.google.common.collect.testing.testers.AbstractListIndexOfTester: void assertEquals(java.lang.String,int,int)>(v2, v5, v4);
return;
}
public void testFind_nullContained()
{
int v2, v4, v5;
java.lang.String v1, v3;
com.google.common.collect.testing.testers.AbstractListIndexOfTester v0;
v0 := @this: com.google.common.collect.testing.testers.AbstractListIndexOfTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: void initCollectionWithNullElement()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: java.lang.String getMethodName()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: int getNullLocation()>();
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001(null) should return \u0001");
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: int getNullLocation()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: int find(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.AbstractListIndexOfTester: void assertEquals(java.lang.String,int,int)>(v3, v4, v5);
return;
}
public void testFind_wrongType()
{
com.google.common.collect.testing.WrongType v3;
int v4, v5;
java.lang.String v1, v2;
com.google.common.collect.testing.testers.AbstractListIndexOfTester v0;
java.lang.ClassCastException v6;
v0 := @this: com.google.common.collect.testing.testers.AbstractListIndexOfTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: java.lang.String getMethodName()>();
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001(wrongType) should return -1 or throw");
v3 = <com.google.common.collect.testing.WrongType: com.google.common.collect.testing.WrongType VALUE>;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.AbstractListIndexOfTester: int find(java.lang.Object)>(v3);
v5 = (int) -1;
staticinvoke <com.google.common.collect.testing.testers.AbstractListIndexOfTester: void assertEquals(java.lang.String,int,int)>(v2, v5, v4);
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
return;
catch java.lang.ClassCastException from label1 to label2 with label3;
}
}