public class com.google.common.collect.testing.testers.CollectionContainsAllTester extends com.google.common.collect.testing.AbstractCollectionTester
{
public void <init>()
{
com.google.common.collect.testing.testers.CollectionContainsAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionContainsAllTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractCollectionTester: void <init>()>();
return;
}
public void testContainsAll_empty()
{
java.lang.Object[] v2;
java.util.Collection v1;
com.google.common.collect.testing.testers.CollectionContainsAllTester v0;
com.google.common.collect.testing.MinimalCollection v3;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionContainsAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionContainsAllTester: java.util.Collection collection>;
v2 = newarray (java.lang.Object)[0];
v3 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v4 = interfaceinvoke v1.<java.util.Collection: boolean containsAll(java.util.Collection)>(v3);
staticinvoke <com.google.common.collect.testing.testers.CollectionContainsAllTester: void assertTrue(java.lang.String,boolean)>("containsAll(empty) should return true", v4);
return;
}
public void testContainsAll_subset()
{
java.lang.Object[] v2;
java.util.Collection v1;
com.google.common.collect.testing.testers.CollectionContainsAllTester v0;
java.lang.Object v3;
com.google.common.collect.testing.MinimalCollection v4;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.CollectionContainsAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionContainsAllTester: java.util.Collection collection>;
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionContainsAllTester: java.lang.Object e0()>();
v2[0] = v3;
v4 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v5 = interfaceinvoke v1.<java.util.Collection: boolean containsAll(java.util.Collection)>(v4);
staticinvoke <com.google.common.collect.testing.testers.CollectionContainsAllTester: void assertTrue(java.lang.String,boolean)>("containsAll(subset) should return true", v5);
return;
}
public void testContainsAll_sameElements()
{
java.lang.Object[] v2;
java.util.Collection v1;
com.google.common.collect.testing.testers.CollectionContainsAllTester v0;
com.google.common.collect.testing.MinimalCollection v3;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionContainsAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionContainsAllTester: java.util.Collection collection>;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionContainsAllTester: java.lang.Object[] createSamplesArray()>();
v3 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v4 = interfaceinvoke v1.<java.util.Collection: boolean containsAll(java.util.Collection)>(v3);
staticinvoke <com.google.common.collect.testing.testers.CollectionContainsAllTester: void assertTrue(java.lang.String,boolean)>("containsAll(sameElements) should return true", v4);
return;
}
public void testContainsAll_self()
{
java.util.Collection v1, v2;
com.google.common.collect.testing.testers.CollectionContainsAllTester v0;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionContainsAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionContainsAllTester: java.util.Collection collection>;
v2 = v0.<com.google.common.collect.testing.testers.CollectionContainsAllTester: java.util.Collection collection>;
v3 = interfaceinvoke v1.<java.util.Collection: boolean containsAll(java.util.Collection)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionContainsAllTester: void assertTrue(java.lang.String,boolean)>("containsAll(this) should return true", v3);
return;
}
public void testContainsAll_partialOverlap()
{
java.lang.Object[] v2;
java.util.Collection v1;
com.google.common.collect.testing.testers.CollectionContainsAllTester v0;
java.lang.Object v3, v4;
com.google.common.collect.testing.MinimalCollection v5;
boolean v6;
v0 := @this: com.google.common.collect.testing.testers.CollectionContainsAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionContainsAllTester: java.util.Collection collection>;
v2 = newarray (java.lang.Object)[2];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionContainsAllTester: java.lang.Object e0()>();
v2[0] = v3;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionContainsAllTester: java.lang.Object e3()>();
v2[1] = v4;
v5 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v6 = interfaceinvoke v1.<java.util.Collection: boolean containsAll(java.util.Collection)>(v5);
staticinvoke <com.google.common.collect.testing.testers.CollectionContainsAllTester: void assertFalse(java.lang.String,boolean)>("containsAll(partialOverlap) should return false", v6);
return;
}
public void testContainsAll_disjoint()
{
java.lang.Object[] v2;
java.util.Collection v1;
com.google.common.collect.testing.testers.CollectionContainsAllTester v0;
java.lang.Object v3;
com.google.common.collect.testing.MinimalCollection v4;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.CollectionContainsAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionContainsAllTester: java.util.Collection collection>;
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionContainsAllTester: java.lang.Object e3()>();
v2[0] = v3;
v4 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v5 = interfaceinvoke v1.<java.util.Collection: boolean containsAll(java.util.Collection)>(v4);
staticinvoke <com.google.common.collect.testing.testers.CollectionContainsAllTester: void assertFalse(java.lang.String,boolean)>("containsAll(disjoint) should return false", v5);
return;
}
public void testContainsAll_nullNotAllowed()
{
java.lang.Object[] v2;
java.util.Collection v1;
com.google.common.collect.testing.testers.CollectionContainsAllTester v0;
com.google.common.collect.testing.MinimalCollection v3;
java.lang.NullPointerException v5;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionContainsAllTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionContainsAllTester: java.util.Collection collection>;
v2 = newarray (java.lang.Object)[1];
v2[0] = null;
v3 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v4 = interfaceinvoke v1.<java.util.Collection: boolean containsAll(java.util.Collection)>(v3);
staticinvoke <com.google.common.collect.testing.testers.CollectionContainsAllTester: void assertFalse(boolean)>(v4);
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testContainsAll_nullAllowed()
{
java.lang.Object[] v2;
java.util.Collection v1;
com.google.common.collect.testing.testers.CollectionContainsAllTester v0;
com.google.common.collect.testing.MinimalCollection v3;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionContainsAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionContainsAllTester: java.util.Collection collection>;
v2 = newarray (java.lang.Object)[1];
v2[0] = null;
v3 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v4 = interfaceinvoke v1.<java.util.Collection: boolean containsAll(java.util.Collection)>(v3);
staticinvoke <com.google.common.collect.testing.testers.CollectionContainsAllTester: void assertFalse(boolean)>(v4);
return;
}
public void testContainsAll_nullPresent()
{
java.lang.Object[] v2;
java.util.Collection v1;
com.google.common.collect.testing.testers.CollectionContainsAllTester v0;
com.google.common.collect.testing.MinimalCollection v3;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionContainsAllTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionContainsAllTester: void initCollectionWithNullElement()>();
v1 = v0.<com.google.common.collect.testing.testers.CollectionContainsAllTester: java.util.Collection collection>;
v2 = newarray (java.lang.Object)[1];
v2[0] = null;
v3 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v4 = interfaceinvoke v1.<java.util.Collection: boolean containsAll(java.util.Collection)>(v3);
staticinvoke <com.google.common.collect.testing.testers.CollectionContainsAllTester: void assertTrue(boolean)>(v4);
return;
}
public void testContainsAll_wrongType()
{
com.google.common.collect.testing.WrongType[] v1;
com.google.common.collect.testing.WrongType v2;
java.util.Collection v4;
com.google.common.collect.testing.testers.CollectionContainsAllTester v0;
com.google.common.collect.testing.MinimalCollection v3;
java.lang.ClassCastException v6;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.CollectionContainsAllTester;
v1 = newarray (com.google.common.collect.testing.WrongType)[1];
v2 = <com.google.common.collect.testing.WrongType: com.google.common.collect.testing.WrongType VALUE>;
v1[0] = v2;
v3 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v1);
label1:
v4 = v0.<com.google.common.collect.testing.testers.CollectionContainsAllTester: java.util.Collection collection>;
v5 = interfaceinvoke v4.<java.util.Collection: boolean containsAll(java.util.Collection)>(v3);
staticinvoke <com.google.common.collect.testing.testers.CollectionContainsAllTester: void assertFalse(java.lang.String,boolean)>("containsAll(wrongType) should return false or throw", v5);
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
return;
catch java.lang.ClassCastException from label1 to label2 with label3;
}
}