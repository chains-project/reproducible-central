public class com.google.common.collect.testing.testers.CollectionIteratorTester extends com.google.common.collect.testing.AbstractCollectionTester
{
public void <init>()
{
com.google.common.collect.testing.testers.CollectionIteratorTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionIteratorTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractCollectionTester: void <init>()>();
return;
}
public void testIterator()
{
java.lang.Object[] v6;
java.util.Iterator v3;
java.util.Collection v2;
java.util.ArrayList v1;
com.google.common.collect.testing.testers.CollectionIteratorTester v0;
java.util.List v7;
java.lang.Object v5;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionIteratorTester;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: java.util.Collection collection>;
v3 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v5);
goto label1;
label2:
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: java.lang.Object[] createSamplesArray()>();
v7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v6);
staticinvoke <com.google.common.collect.testing.Helpers: void assertEqualIgnoringOrder(java.lang.Iterable,java.lang.Iterable)>(v7, v1);
return;
}
public void testIterationOrdering()
{
java.util.Iterator v3;
java.util.Collection v2;
java.util.ArrayList v1;
com.google.common.collect.testing.testers.CollectionIteratorTester v0;
java.util.List v6, v7;
java.lang.Object v5;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionIteratorTester;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: java.util.Collection collection>;
v3 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v5);
goto label1;
label2:
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: java.util.List getOrderedElements()>();
v7 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.List copyToList(java.lang.Iterable)>(v6);
staticinvoke <com.google.common.collect.testing.testers.CollectionIteratorTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Different ordered iteration", v7, v1);
return;
}
public void testIterator_nullElement()
{
java.lang.Object[] v6;
java.util.Iterator v3;
java.util.Collection v2;
java.util.ArrayList v1;
com.google.common.collect.testing.testers.CollectionIteratorTester v0;
java.util.List v7;
java.lang.Object v5;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionIteratorTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: void initCollectionWithNullElement()>();
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: java.util.Collection collection>;
v3 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v5);
goto label1;
label2:
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: java.lang.Object[] createArrayWithNullElement()>();
v7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v6);
staticinvoke <com.google.common.collect.testing.Helpers: void assertEqualIgnoringOrder(java.lang.Iterable,java.lang.Iterable)>(v7, v1);
return;
}
public void testIterator_removeAffectsBackingCollection()
{
com.google.common.collect.testing.testers.CollectionIteratorTester v0;
int v13, v15, v2;
boolean v10, v12, v6;
java.util.Iterator v4;
java.util.Collection v1, v11, v14, v3, v9;
java.lang.Object v5, v7, v8;
v0 := @this: com.google.common.collect.testing.testers.CollectionIteratorTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: int size()>();
v3 = v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: java.util.Collection collection>;
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
v5 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v6 = v5 instanceof java.util.Map$Entry;
if v6 == 0 goto label1;
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v8 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
v5 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v7, v8);
label1:
v9 = v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: java.util.Collection collection>;
v10 = interfaceinvoke v9.<java.util.Collection: boolean contains(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.testers.CollectionIteratorTester: void assertTrue(boolean)>(v10);
interfaceinvoke v4.<java.util.Iterator: void remove()>();
v11 = v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: java.util.Collection collection>;
v12 = interfaceinvoke v11.<java.util.Collection: boolean contains(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.testers.CollectionIteratorTester: void assertFalse(boolean)>(v12);
v13 = v2 - 1;
v14 = v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: java.util.Collection collection>;
v15 = interfaceinvoke v14.<java.util.Collection: int size()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionIteratorTester: void assertEquals(int,int)>(v13, v15);
return;
}
public void testIterator_knownOrderRemoveSupported()
{
com.google.common.collect.testing.testers.CollectionIteratorTester v0;
java.util.List v3;
com.google.common.collect.testing.AbstractIteratorTester$KnownOrder v2;
java.util.Set v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionIteratorTester;
v1 = <com.google.common.collect.testing.IteratorFeature: java.util.Set MODIFIABLE>;
v2 = <com.google.common.collect.testing.AbstractIteratorTester$KnownOrder: com.google.common.collect.testing.AbstractIteratorTester$KnownOrder KNOWN_ORDER>;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: java.util.List getOrderedElements()>();
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: void runIteratorTest(java.util.Set,com.google.common.collect.testing.AbstractIteratorTester$KnownOrder,java.lang.Iterable)>(v1, v2, v3);
return;
}
public void testIterator_knownOrderRemoveUnsupported()
{
com.google.common.collect.testing.testers.CollectionIteratorTester v0;
java.util.List v3;
com.google.common.collect.testing.AbstractIteratorTester$KnownOrder v2;
java.util.Set v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionIteratorTester;
v1 = <com.google.common.collect.testing.IteratorFeature: java.util.Set UNMODIFIABLE>;
v2 = <com.google.common.collect.testing.AbstractIteratorTester$KnownOrder: com.google.common.collect.testing.AbstractIteratorTester$KnownOrder KNOWN_ORDER>;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: java.util.List getOrderedElements()>();
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: void runIteratorTest(java.util.Set,com.google.common.collect.testing.AbstractIteratorTester$KnownOrder,java.lang.Iterable)>(v1, v2, v3);
return;
}
public void testIterator_unknownOrderRemoveSupported()
{
com.google.common.collect.testing.testers.CollectionIteratorTester v0;
com.google.common.collect.testing.AbstractIteratorTester$KnownOrder v2;
java.util.Collection v3;
java.util.Set v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionIteratorTester;
v1 = <com.google.common.collect.testing.IteratorFeature: java.util.Set MODIFIABLE>;
v2 = <com.google.common.collect.testing.AbstractIteratorTester$KnownOrder: com.google.common.collect.testing.AbstractIteratorTester$KnownOrder UNKNOWN_ORDER>;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: java.util.Collection getSampleElements()>();
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: void runIteratorTest(java.util.Set,com.google.common.collect.testing.AbstractIteratorTester$KnownOrder,java.lang.Iterable)>(v1, v2, v3);
return;
}
public void testIterator_unknownOrderRemoveUnsupported()
{
com.google.common.collect.testing.testers.CollectionIteratorTester v0;
com.google.common.collect.testing.AbstractIteratorTester$KnownOrder v2;
java.util.Collection v3;
java.util.Set v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionIteratorTester;
v1 = <com.google.common.collect.testing.IteratorFeature: java.util.Set UNMODIFIABLE>;
v2 = <com.google.common.collect.testing.AbstractIteratorTester$KnownOrder: com.google.common.collect.testing.AbstractIteratorTester$KnownOrder UNKNOWN_ORDER>;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: java.util.Collection getSampleElements()>();
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: void runIteratorTest(java.util.Set,com.google.common.collect.testing.AbstractIteratorTester$KnownOrder,java.lang.Iterable)>(v1, v2, v3);
return;
}
private void runIteratorTest(java.util.Set, com.google.common.collect.testing.AbstractIteratorTester$KnownOrder, java.lang.Iterable)
{
com.google.common.collect.testing.testers.CollectionIteratorTester v0;
com.google.common.collect.testing.testers.CollectionIteratorTester$1 v4;
com.google.common.collect.testing.AbstractIteratorTester$KnownOrder v2;
int v5;
java.util.Set v1;
java.lang.Iterable v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionIteratorTester;
v1 := @parameter0: java.util.Set;
v2 := @parameter1: com.google.common.collect.testing.AbstractIteratorTester$KnownOrder;
v3 := @parameter2: java.lang.Iterable;
v4 = new com.google.common.collect.testing.testers.CollectionIteratorTester$1;
v5 = staticinvoke <com.google.common.collect.testing.testers.Platform: int collectionIteratorTesterNumIterations()>();
specialinvoke v4.<com.google.common.collect.testing.testers.CollectionIteratorTester$1: void <init>(com.google.common.collect.testing.testers.CollectionIteratorTester,int,java.lang.Iterable,java.lang.Iterable,com.google.common.collect.testing.AbstractIteratorTester$KnownOrder)>(v0, v5, v1, v3, v2);
virtualinvoke v4.<com.google.common.collect.testing.testers.CollectionIteratorTester$1: void test()>();
return;
}
public void testIteratorNoSuchElementException()
{
com.google.common.collect.testing.testers.CollectionIteratorTester v0;
java.util.Iterator v2;
java.util.Collection v1;
java.util.NoSuchElementException v4;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionIteratorTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionIteratorTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
goto label1;
label2:
interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionIteratorTester: void fail(java.lang.String)>("iterator.next() should throw NoSuchElementException");
label3:
goto label5;
label4:
v4 := @caughtexception;
label5:
return;
catch java.util.NoSuchElementException from label2 to label3 with label4;
}
}