public class com.google.common.collect.testing.testers.CollectionRemoveIfTester extends com.google.common.collect.testing.AbstractCollectionTester
{
public void <init>()
{
com.google.common.collect.testing.testers.CollectionRemoveIfTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveIfTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractCollectionTester: void <init>()>();
return;
}
public void testRemoveIf_alwaysFalse()
{
java.util.function.Predicate v2;
java.util.Collection v1;
com.google.common.collect.testing.testers.CollectionRemoveIfTester v0;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveIfTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveIfTester: java.util.Collection collection>;
v2 = staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveIfTester$lambda_testRemoveIf_alwaysFalse_0__24: java.util.function.Predicate bootstrap$()>();
v3 = interfaceinvoke v1.<java.util.Collection: boolean removeIf(java.util.function.Predicate)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveIfTester: void assertFalse(java.lang.String,boolean)>("removeIf(x -> false) should return false", v3);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveIfTester: void expectUnchanged()>();
return;
}
public void testRemoveIf_sometimesTrue()
{
java.lang.Object[] v6;
java.util.function.Predicate v4;
com.google.common.collect.testing.SampleElements v2, v7;
java.util.Collection v1;
com.google.common.collect.testing.testers.CollectionRemoveIfTester v0;
java.lang.Object v3, v8;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveIfTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveIfTester: java.util.Collection collection>;
v2 = v0.<com.google.common.collect.testing.testers.CollectionRemoveIfTester: com.google.common.collect.testing.SampleElements samples>;
v3 = virtualinvoke v2.<com.google.common.collect.testing.SampleElements: java.lang.Object e0()>();
v4 = staticinvoke <java.util.function.Predicate: java.util.function.Predicate isEqual(java.lang.Object)>(v3);
v5 = interfaceinvoke v1.<java.util.Collection: boolean removeIf(java.util.function.Predicate)>(v4);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveIfTester: void assertTrue(java.lang.String,boolean)>("removeIf(isEqual(present)) should return true", v5);
v6 = newarray (java.lang.Object)[1];
v7 = v0.<com.google.common.collect.testing.testers.CollectionRemoveIfTester: com.google.common.collect.testing.SampleElements samples>;
v8 = virtualinvoke v7.<com.google.common.collect.testing.SampleElements: java.lang.Object e0()>();
v6[0] = v8;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveIfTester: void expectMissing(java.lang.Object[])>(v6);
return;
}
public void testRemoveIf_allPresent()
{
java.lang.Object[] v4;
java.util.function.Predicate v2;
java.util.Collection v1;
com.google.common.collect.testing.testers.CollectionRemoveIfTester v0;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveIfTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveIfTester: java.util.Collection collection>;
v2 = staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveIfTester$lambda_testRemoveIf_allPresent_1__25: java.util.function.Predicate bootstrap$()>();
v3 = interfaceinvoke v1.<java.util.Collection: boolean removeIf(java.util.function.Predicate)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveIfTester: void assertTrue(java.lang.String,boolean)>("removeIf(x -> true) should return true", v3);
v4 = newarray (java.lang.Object)[0];
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveIfTester: void expectContents(java.lang.Object[])>(v4);
return;
}
public void testRemoveIfSomeMatchesConcurrentWithIteration()
{
java.util.Iterator v2;
java.util.function.Predicate v6;
com.google.common.collect.testing.SampleElements v4;
java.util.Collection v1, v3;
com.google.common.collect.testing.testers.CollectionRemoveIfTester v0;
java.lang.Object v5;
java.util.ConcurrentModificationException v8;
boolean v7;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveIfTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveIfTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
v3 = v0.<com.google.common.collect.testing.testers.CollectionRemoveIfTester: java.util.Collection collection>;
v4 = v0.<com.google.common.collect.testing.testers.CollectionRemoveIfTester: com.google.common.collect.testing.SampleElements samples>;
v5 = virtualinvoke v4.<com.google.common.collect.testing.SampleElements: java.lang.Object e0()>();
v6 = staticinvoke <java.util.function.Predicate: java.util.function.Predicate isEqual(java.lang.Object)>(v5);
v7 = interfaceinvoke v3.<java.util.Collection: boolean removeIf(java.util.function.Predicate)>(v6);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveIfTester: void assertTrue(boolean)>(v7);
interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveIfTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v8 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testRemoveIf_unsupportedEmptyCollection()
{
java.lang.UnsupportedOperationException v4;
java.util.function.Predicate v2;
java.util.Collection v1;
com.google.common.collect.testing.testers.CollectionRemoveIfTester v0;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveIfTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveIfTester: java.util.Collection collection>;
v2 = staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveIfTester$lambda_testRemoveIf_unsupportedEmptyCollection_2__26: java.util.function.Predicate bootstrap$()>();
v3 = interfaceinvoke v1.<java.util.Collection: boolean removeIf(java.util.function.Predicate)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveIfTester: void assertFalse(java.lang.String,boolean)>("removeIf(Predicate) should return false or throw UnsupportedOperationException", v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveIfTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testRemoveIf_alwaysTrueUnsupported()
{
java.lang.UnsupportedOperationException v3;
java.util.function.Predicate v2;
com.google.common.collect.testing.SampleElements v5;
java.util.Collection v1, v4;
com.google.common.collect.testing.testers.CollectionRemoveIfTester v0;
java.lang.Object v6;
boolean v7;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveIfTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveIfTester: java.util.Collection collection>;
v2 = staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveIfTester$lambda_testRemoveIf_alwaysTrueUnsupported_3__27: java.util.function.Predicate bootstrap$()>();
interfaceinvoke v1.<java.util.Collection: boolean removeIf(java.util.function.Predicate)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveIfTester: void fail(java.lang.String)>("removeIf(x -> true) should throw UnsupportedOperationException");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveIfTester: void expectUnchanged()>();
v4 = v0.<com.google.common.collect.testing.testers.CollectionRemoveIfTester: java.util.Collection collection>;
v5 = v0.<com.google.common.collect.testing.testers.CollectionRemoveIfTester: com.google.common.collect.testing.SampleElements samples>;
v6 = virtualinvoke v5.<com.google.common.collect.testing.SampleElements: java.lang.Object e0()>();
v7 = interfaceinvoke v4.<java.util.Collection: boolean contains(java.lang.Object)>(v6);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveIfTester: void assertTrue(boolean)>(v7);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
}