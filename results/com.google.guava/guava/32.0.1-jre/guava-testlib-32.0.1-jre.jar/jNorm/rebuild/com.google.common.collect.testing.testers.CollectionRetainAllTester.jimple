public class com.google.common.collect.testing.testers.CollectionRetainAllTester extends com.google.common.collect.testing.AbstractCollectionTester
{
private com.google.common.collect.testing.testers.CollectionRetainAllTester$Target empty;
private com.google.common.collect.testing.testers.CollectionRetainAllTester$Target disjoint;
private com.google.common.collect.testing.testers.CollectionRetainAllTester$Target superset;
private com.google.common.collect.testing.testers.CollectionRetainAllTester$Target nonEmptyProperSubset;
private com.google.common.collect.testing.testers.CollectionRetainAllTester$Target sameElements;
private com.google.common.collect.testing.testers.CollectionRetainAllTester$Target partialOverlap;
private com.google.common.collect.testing.testers.CollectionRetainAllTester$Target containsDuplicates;
private com.google.common.collect.testing.testers.CollectionRetainAllTester$Target nullSingleton;
public void <init>()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractCollectionTester: void <init>()>();
return;
}
public void setUp() throws java.lang.Exception
{
java.util.Set v36;
java.util.List v22, v6;
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1, v16, v20, v23, v30, v35, v7, v8;
java.lang.Object[] v17, v21, v24, v3, v31, v9;
com.google.common.collect.testing.MinimalCollection v15, v19, v2, v29, v34;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
java.lang.Object v10, v11, v12, v13, v14, v18, v25, v26, v27, v28, v32, v33, v4, v5;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractCollectionTester: void setUp()>();
v1 = new com.google.common.collect.testing.testers.CollectionRetainAllTester$Target;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.MinimalCollection emptyCollection()>();
specialinvoke v1.<com.google.common.collect.testing.testers.CollectionRetainAllTester$Target: void <init>(com.google.common.collect.testing.testers.CollectionRetainAllTester,java.util.Collection,java.lang.String)>(v0, v2, "empty");
v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target empty> = v1;
v3 = newarray (java.lang.Object)[2];
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e3()>();
v3[0] = v4;
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e4()>();
v3[1] = v5;
v6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v3);
v7 = new com.google.common.collect.testing.testers.CollectionRetainAllTester$Target;
specialinvoke v7.<com.google.common.collect.testing.testers.CollectionRetainAllTester$Target: void <init>(com.google.common.collect.testing.testers.CollectionRetainAllTester,java.util.Collection,java.lang.String)>(v0, v6, "disjoint");
v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target disjoint> = v7;
v8 = new com.google.common.collect.testing.testers.CollectionRetainAllTester$Target;
v9 = newarray (java.lang.Object)[5];
v10 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e0()>();
v9[0] = v10;
v11 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e1()>();
v9[1] = v11;
v12 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e2()>();
v9[2] = v12;
v13 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e3()>();
v9[3] = v13;
v14 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e4()>();
v9[4] = v14;
v15 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v9);
specialinvoke v8.<com.google.common.collect.testing.testers.CollectionRetainAllTester$Target: void <init>(com.google.common.collect.testing.testers.CollectionRetainAllTester,java.util.Collection,java.lang.String)>(v0, v15, "superset");
v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target superset> = v8;
v16 = new com.google.common.collect.testing.testers.CollectionRetainAllTester$Target;
v17 = newarray (java.lang.Object)[1];
v18 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e1()>();
v17[0] = v18;
v19 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v17);
specialinvoke v16.<com.google.common.collect.testing.testers.CollectionRetainAllTester$Target: void <init>(com.google.common.collect.testing.testers.CollectionRetainAllTester,java.util.Collection,java.lang.String)>(v0, v19, "subset");
v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target nonEmptyProperSubset> = v16;
v20 = new com.google.common.collect.testing.testers.CollectionRetainAllTester$Target;
v21 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object[] createSamplesArray()>();
v22 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v21);
specialinvoke v20.<com.google.common.collect.testing.testers.CollectionRetainAllTester$Target: void <init>(com.google.common.collect.testing.testers.CollectionRetainAllTester,java.util.Collection,java.lang.String)>(v0, v22, "sameElements");
v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target sameElements> = v20;
v23 = new com.google.common.collect.testing.testers.CollectionRetainAllTester$Target;
v24 = newarray (java.lang.Object)[4];
v25 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e0()>();
v24[0] = v25;
v26 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e0()>();
v24[1] = v26;
v27 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e3()>();
v24[2] = v27;
v28 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e3()>();
v24[3] = v28;
v29 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v24);
specialinvoke v23.<com.google.common.collect.testing.testers.CollectionRetainAllTester$Target: void <init>(com.google.common.collect.testing.testers.CollectionRetainAllTester,java.util.Collection,java.lang.String)>(v0, v29, "containsDuplicates");
v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target containsDuplicates> = v23;
v30 = new com.google.common.collect.testing.testers.CollectionRetainAllTester$Target;
v31 = newarray (java.lang.Object)[2];
v32 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e2()>();
v31[0] = v32;
v33 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e3()>();
v31[1] = v33;
v34 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v31);
specialinvoke v30.<com.google.common.collect.testing.testers.CollectionRetainAllTester$Target: void <init>(com.google.common.collect.testing.testers.CollectionRetainAllTester,java.util.Collection,java.lang.String)>(v0, v34, "partialOverlap");
v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target partialOverlap> = v30;
v35 = new com.google.common.collect.testing.testers.CollectionRetainAllTester$Target;
v36 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(null);
specialinvoke v35.<com.google.common.collect.testing.testers.CollectionRetainAllTester$Target: void <init>(com.google.common.collect.testing.testers.CollectionRetainAllTester,java.util.Collection,java.lang.String)>(v0, v36, "nullSingleton");
v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target nullSingleton> = v35;
return;
}
public void testRetainAll_emptyPreviouslyEmpty()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target empty>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsFalse(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectUnchanged()>();
return;
}
public void testRetainAll_emptyPreviouslyEmptyUnsupported()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target empty>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsFalseOrThrows(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectUnchanged()>();
return;
}
public void testRetainAll_emptyPreviouslyNonEmpty()
{
java.lang.Object[] v2, v3;
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
java.lang.Object v4, v5, v6;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target empty>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsTrue(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
v2 = newarray (java.lang.Object)[0];
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectContents(java.lang.Object[])>(v2);
v3 = newarray (java.lang.Object)[3];
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e0()>();
v3[0] = v4;
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e1()>();
v3[1] = v5;
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e2()>();
v3[2] = v6;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectMissing(java.lang.Object[])>(v3);
return;
}
public void testRetainAll_emptyPreviouslyNonEmptyUnsupported()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target empty>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectThrows(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectUnchanged()>();
return;
}
public void testRetainAll_disjointPreviouslyEmpty()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target disjoint>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsFalse(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectUnchanged()>();
return;
}
public void testRetainAll_disjointPreviouslyEmptyUnsupported()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target disjoint>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsFalseOrThrows(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectUnchanged()>();
return;
}
public void testRetainAll_disjointPreviouslyNonEmpty()
{
java.lang.Object[] v2, v3;
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
java.lang.Object v4, v5, v6;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target disjoint>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsTrue(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
v2 = newarray (java.lang.Object)[0];
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectContents(java.lang.Object[])>(v2);
v3 = newarray (java.lang.Object)[3];
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e0()>();
v3[0] = v4;
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e1()>();
v3[1] = v5;
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e2()>();
v3[2] = v6;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectMissing(java.lang.Object[])>(v3);
return;
}
public void testRetainAll_disjointPreviouslyNonEmptyUnsupported()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target disjoint>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectThrows(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectUnchanged()>();
return;
}
public void testRetainAll_superset()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target superset>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsFalse(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectUnchanged()>();
return;
}
public void testRetainAll_supersetUnsupported()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target superset>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsFalseOrThrows(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectUnchanged()>();
return;
}
public void testRetainAll_subset()
{
java.util.Collection v3;
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1, v2;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target nonEmptyProperSubset>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsTrue(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
v2 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target nonEmptyProperSubset>;
v3 = v2.<com.google.common.collect.testing.testers.CollectionRetainAllTester$Target: java.util.Collection toRetain>;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectContents(java.util.Collection)>(v3);
return;
}
public void testRetainAll_subsetUnsupported()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target nonEmptyProperSubset>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectThrows(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectUnchanged()>();
return;
}
public void testRetainAll_sameElements()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target sameElements>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsFalse(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectUnchanged()>();
return;
}
public void testRetainAll_sameElementsUnsupported()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target sameElements>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsFalseOrThrows(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectUnchanged()>();
return;
}
public void testRetainAll_partialOverlap()
{
java.lang.Object[] v2;
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
java.lang.Object v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target partialOverlap>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsTrue(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e2()>();
v2[0] = v3;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectContents(java.lang.Object[])>(v2);
return;
}
public void testRetainAll_partialOverlapUnsupported()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target partialOverlap>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectThrows(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectUnchanged()>();
return;
}
public void testRetainAll_containsDuplicatesSizeOne()
{
java.lang.Object[] v2;
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
java.lang.Object v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target containsDuplicates>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsFalse(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e0()>();
v2[0] = v3;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectContents(java.lang.Object[])>(v2);
return;
}
public void testRetainAll_containsDuplicatesSizeSeveral()
{
java.lang.Object[] v2;
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
java.lang.Object v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target containsDuplicates>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsTrue(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object e0()>();
v2[0] = v3;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectContents(java.lang.Object[])>(v2);
return;
}
public void testRetainAll_nullSingletonPreviouslyEmpty()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target nullSingleton>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsFalse(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectUnchanged()>();
return;
}
public void testRetainAll_nullSingletonPreviouslyNonEmpty()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
java.lang.Object[] v2;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target nullSingleton>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsTrue(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
v2 = newarray (java.lang.Object)[0];
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectContents(java.lang.Object[])>(v2);
return;
}
public void testRetainAll_nullSingletonPreviouslySingletonWithNull()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
java.lang.Object[] v2;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void initCollectionWithNullElement()>();
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target nullSingleton>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsFalse(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.lang.Object[] createArrayWithNullElement()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectContents(java.lang.Object[])>(v2);
return;
}
public void testRetainAll_nullSingletonPreviouslySeveralWithNull()
{
java.util.Collection v3;
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1, v2;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void initCollectionWithNullElement()>();
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target nullSingleton>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsTrue(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
v2 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target nullSingleton>;
v3 = v2.<com.google.common.collect.testing.testers.CollectionRetainAllTester$Target: java.util.Collection toRetain>;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectContents(java.util.Collection)>(v3);
return;
}
public void testRetainAll_containsNonNullWithNull()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
java.lang.Object[] v2;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void initCollectionWithNullElement()>();
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target disjoint>;
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectReturnsTrue(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)>(v1);
v2 = newarray (java.lang.Object)[0];
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: void expectContents(java.lang.Object[])>(v2);
return;
}
public void testRetainAll_nullCollectionReferenceEmptySubject()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
java.lang.NullPointerException v2;
java.util.Collection v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.util.Collection collection>;
interfaceinvoke v1.<java.util.Collection: boolean retainAll(java.util.Collection)>(null);
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testRetainAll_nullCollectionReferenceNonEmptySubject()
{
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
java.lang.NullPointerException v2;
java.util.Collection v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.util.Collection collection>;
interfaceinvoke v1.<java.util.Collection: boolean retainAll(java.util.Collection)>(null);
staticinvoke <com.google.common.collect.testing.testers.CollectionRetainAllTester: void fail(java.lang.String)>("retainAll(null) should throw NullPointerException");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
private void expectReturnsTrue(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)
{
java.lang.Object[] v2;
java.util.Collection v4, v5;
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
java.lang.String v3;
boolean v6;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 := @parameter0: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target;
v2 = newarray (java.lang.Object)[1];
v2[0] = v1;
v3 = staticinvoke <com.google.common.collect.testing.testers.Platform: java.lang.String format(java.lang.String,java.lang.Object[])>("retainAll(%s) should return true", v2);
v4 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.util.Collection collection>;
v5 = v1.<com.google.common.collect.testing.testers.CollectionRetainAllTester$Target: java.util.Collection toRetain>;
v6 = interfaceinvoke v4.<java.util.Collection: boolean retainAll(java.util.Collection)>(v5);
staticinvoke <com.google.common.collect.testing.testers.CollectionRetainAllTester: void assertTrue(java.lang.String,boolean)>(v3, v6);
return;
}
private void expectReturnsFalse(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)
{
java.lang.Object[] v2;
java.util.Collection v4, v5;
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
java.lang.String v3;
boolean v6;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 := @parameter0: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target;
v2 = newarray (java.lang.Object)[1];
v2[0] = v1;
v3 = staticinvoke <com.google.common.collect.testing.testers.Platform: java.lang.String format(java.lang.String,java.lang.Object[])>("retainAll(%s) should return false", v2);
v4 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.util.Collection collection>;
v5 = v1.<com.google.common.collect.testing.testers.CollectionRetainAllTester$Target: java.util.Collection toRetain>;
v6 = interfaceinvoke v4.<java.util.Collection: boolean retainAll(java.util.Collection)>(v5);
staticinvoke <com.google.common.collect.testing.testers.CollectionRetainAllTester: void assertFalse(java.lang.String,boolean)>(v3, v6);
return;
}
private void expectThrows(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)
{
java.lang.UnsupportedOperationException v6;
java.lang.Object[] v4;
java.util.Collection v2, v3;
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
java.lang.String v5;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 := @parameter0: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target;
label1:
v2 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.util.Collection collection>;
v3 = v1.<com.google.common.collect.testing.testers.CollectionRetainAllTester$Target: java.util.Collection toRetain>;
interfaceinvoke v2.<java.util.Collection: boolean retainAll(java.util.Collection)>(v3);
v4 = newarray (java.lang.Object)[1];
v4[0] = v1;
v5 = staticinvoke <com.google.common.collect.testing.testers.Platform: java.lang.String format(java.lang.String,java.lang.Object[])>("retainAll(%s) should throw", v4);
staticinvoke <com.google.common.collect.testing.testers.CollectionRetainAllTester: void fail(java.lang.String)>(v5);
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
private void expectReturnsFalseOrThrows(com.google.common.collect.testing.testers.CollectionRetainAllTester$Target)
{
java.lang.UnsupportedOperationException v7;
java.lang.Object[] v2;
java.util.Collection v4, v5;
com.google.common.collect.testing.testers.CollectionRetainAllTester$Target v1;
com.google.common.collect.testing.testers.CollectionRetainAllTester v0;
java.lang.String v3;
boolean v6;
v0 := @this: com.google.common.collect.testing.testers.CollectionRetainAllTester;
v1 := @parameter0: com.google.common.collect.testing.testers.CollectionRetainAllTester$Target;
v2 = newarray (java.lang.Object)[1];
v2[0] = v1;
v3 = staticinvoke <com.google.common.collect.testing.testers.Platform: java.lang.String format(java.lang.String,java.lang.Object[])>("retainAll(%s) should return false or throw", v2);
label1:
v4 = v0.<com.google.common.collect.testing.testers.CollectionRetainAllTester: java.util.Collection collection>;
v5 = v1.<com.google.common.collect.testing.testers.CollectionRetainAllTester$Target: java.util.Collection toRetain>;
v6 = interfaceinvoke v4.<java.util.Collection: boolean retainAll(java.util.Collection)>(v5);
staticinvoke <com.google.common.collect.testing.testers.CollectionRetainAllTester: void assertFalse(java.lang.String,boolean)>(v3, v6);
label2:
goto label4;
label3:
v7 := @caughtexception;
label4:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
}