public class com.google.common.collect.testing.testers.CollectionSpliteratorTester extends com.google.common.collect.testing.AbstractCollectionTester
{
public void <init>()
{
com.google.common.collect.testing.testers.CollectionSpliteratorTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionSpliteratorTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractCollectionTester: void <init>()>();
return;
}
public void testSpliteratorUnknownOrder()
{
java.lang.Throwable v6;
java.util.Collection v1, v2, v5;
com.google.common.collect.testing.SpliteratorTester v4;
com.google.common.collect.testing.testers.CollectionSpliteratorTester v0;
java.util.function.Supplier v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionSpliteratorTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionSpliteratorTester: java.util.Collection collection>;
entermonitor v1;
label1:
v2 = v0.<com.google.common.collect.testing.testers.CollectionSpliteratorTester: java.util.Collection collection>;
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.CollectionSpliteratorTester$spliterator__28: java.util.function.Supplier bootstrap$(java.util.Collection)>(v2);
v4 = staticinvoke <com.google.common.collect.testing.SpliteratorTester: com.google.common.collect.testing.SpliteratorTester of(java.util.function.Supplier)>(v3);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionSpliteratorTester: java.util.Collection getSampleElements()>();
virtualinvoke v4.<com.google.common.collect.testing.SpliteratorTester: com.google.common.collect.testing.SpliteratorTester$Ordered expect(java.lang.Iterable)>(v5);
exitmonitor v1;
label2:
goto label4;
label3:
v6 := @caughtexception;
exitmonitor v1;
throw v6;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void testSpliteratorKnownOrder()
{
java.lang.Throwable v7;
com.google.common.collect.testing.SpliteratorTester$Ordered v6;
java.util.Collection v1, v2;
com.google.common.collect.testing.testers.CollectionSpliteratorTester v0;
java.util.function.Supplier v3;
java.util.List v5;
com.google.common.collect.testing.SpliteratorTester v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionSpliteratorTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionSpliteratorTester: java.util.Collection collection>;
entermonitor v1;
label1:
v2 = v0.<com.google.common.collect.testing.testers.CollectionSpliteratorTester: java.util.Collection collection>;
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.CollectionSpliteratorTester$spliterator__29: java.util.function.Supplier bootstrap$(java.util.Collection)>(v2);
v4 = staticinvoke <com.google.common.collect.testing.SpliteratorTester: com.google.common.collect.testing.SpliteratorTester of(java.util.function.Supplier)>(v3);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionSpliteratorTester: java.util.List getOrderedElements()>();
v6 = virtualinvoke v4.<com.google.common.collect.testing.SpliteratorTester: com.google.common.collect.testing.SpliteratorTester$Ordered expect(java.lang.Iterable)>(v5);
interfaceinvoke v6.<com.google.common.collect.testing.SpliteratorTester$Ordered: void inOrder()>();
exitmonitor v1;
label2:
goto label4;
label3:
v7 := @caughtexception;
exitmonitor v1;
throw v7;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void testSpliteratorNullable()
{
java.lang.Throwable v5;
java.util.Collection v1, v2;
com.google.common.collect.testing.testers.CollectionSpliteratorTester v0;
java.util.Spliterator v3;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionSpliteratorTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionSpliteratorTester: void initCollectionWithNullElement()>();
v1 = v0.<com.google.common.collect.testing.testers.CollectionSpliteratorTester: java.util.Collection collection>;
entermonitor v1;
label1:
v2 = v0.<com.google.common.collect.testing.testers.CollectionSpliteratorTester: java.util.Collection collection>;
v3 = interfaceinvoke v2.<java.util.Collection: java.util.Spliterator spliterator()>();
v4 = interfaceinvoke v3.<java.util.Spliterator: boolean hasCharacteristics(int)>(256);
staticinvoke <com.google.common.collect.testing.testers.CollectionSpliteratorTester: void assertFalse(boolean)>(v4);
exitmonitor v1;
label2:
goto label4;
label3:
v5 := @caughtexception;
exitmonitor v1;
throw v5;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void testSpliteratorNotImmutable_CollectionAllowsAdd()
{
java.lang.Throwable v5;
java.util.Collection v1, v2;
com.google.common.collect.testing.testers.CollectionSpliteratorTester v0;
java.util.Spliterator v3;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionSpliteratorTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionSpliteratorTester: java.util.Collection collection>;
entermonitor v1;
label1:
v2 = v0.<com.google.common.collect.testing.testers.CollectionSpliteratorTester: java.util.Collection collection>;
v3 = interfaceinvoke v2.<java.util.Collection: java.util.Spliterator spliterator()>();
v4 = interfaceinvoke v3.<java.util.Spliterator: boolean hasCharacteristics(int)>(1024);
staticinvoke <com.google.common.collect.testing.testers.CollectionSpliteratorTester: void assertFalse(boolean)>(v4);
exitmonitor v1;
label2:
goto label4;
label3:
v5 := @caughtexception;
exitmonitor v1;
throw v5;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void testSpliteratorNotImmutable_CollectionAllowsRemove()
{
java.lang.Throwable v5;
java.util.Collection v1, v2;
com.google.common.collect.testing.testers.CollectionSpliteratorTester v0;
java.util.Spliterator v3;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionSpliteratorTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionSpliteratorTester: java.util.Collection collection>;
entermonitor v1;
label1:
v2 = v0.<com.google.common.collect.testing.testers.CollectionSpliteratorTester: java.util.Collection collection>;
v3 = interfaceinvoke v2.<java.util.Collection: java.util.Spliterator spliterator()>();
v4 = interfaceinvoke v3.<java.util.Spliterator: boolean hasCharacteristics(int)>(1024);
staticinvoke <com.google.common.collect.testing.testers.CollectionSpliteratorTester: void assertFalse(boolean)>(v4);
exitmonitor v1;
label2:
goto label4;
label3:
v5 := @caughtexception;
exitmonitor v1;
throw v5;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static java.lang.reflect.Method getSpliteratorNotImmutableCollectionAllowsAddMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/CollectionSpliteratorTester;", "testSpliteratorNotImmutable_CollectionAllowsAdd");
return v0;
}
public static java.lang.reflect.Method getSpliteratorNotImmutableCollectionAllowsRemoveMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/CollectionSpliteratorTester;", "testSpliteratorNotImmutable_CollectionAllowsRemove");
return v0;
}
}