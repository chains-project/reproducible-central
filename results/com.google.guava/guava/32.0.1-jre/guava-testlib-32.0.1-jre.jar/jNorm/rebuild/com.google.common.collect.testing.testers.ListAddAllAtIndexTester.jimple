public class com.google.common.collect.testing.testers.ListAddAllAtIndexTester extends com.google.common.collect.testing.testers.AbstractListTester
{
public void <init>()
{
com.google.common.collect.testing.testers.ListAddAllAtIndexTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllAtIndexTester;
specialinvoke v0.<com.google.common.collect.testing.testers.AbstractListTester: void <init>()>();
return;
}
public void testAddAllAtIndex_supportedAllPresent()
{
java.lang.Object[] v2, v6;
com.google.common.collect.testing.testers.ListAddAllAtIndexTester v0;
java.util.List v1;
java.lang.Object v3, v7;
com.google.common.collect.testing.MinimalCollection v4;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllAtIndexTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.util.List getList()>();
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e0()>();
v2[0] = v3;
v4 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v5 = interfaceinvoke v1.<java.util.List: boolean addAll(int,java.util.Collection)>(0, v4);
staticinvoke <com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void assertTrue(java.lang.String,boolean)>("addAll(n, allPresent) should return true", v5);
v6 = newarray (java.lang.Object)[1];
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e0()>();
v6[0] = v7;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void expectAdded(int,java.lang.Object[])>(0, v6);
return;
}
public void testAddAllAtIndex_unsupportedAllPresent()
{
java.lang.UnsupportedOperationException v5;
java.util.List v1;
java.lang.Object[] v2;
java.lang.Object v3;
com.google.common.collect.testing.MinimalCollection v4;
com.google.common.collect.testing.testers.ListAddAllAtIndexTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllAtIndexTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.util.List getList()>();
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e0()>();
v2[0] = v3;
v4 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
interfaceinvoke v1.<java.util.List: boolean addAll(int,java.util.Collection)>(0, v4);
staticinvoke <com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void fail(java.lang.String)>("addAll(n, allPresent) should throw");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testAddAllAtIndex_supportedSomePresent()
{
java.lang.Object[] v2, v7;
com.google.common.collect.testing.testers.ListAddAllAtIndexTester v0;
java.util.List v1;
java.lang.Object v3, v4, v8, v9;
com.google.common.collect.testing.MinimalCollection v5;
boolean v6;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllAtIndexTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.util.List getList()>();
v2 = newarray (java.lang.Object)[2];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e0()>();
v2[0] = v3;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e3()>();
v2[1] = v4;
v5 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v6 = interfaceinvoke v1.<java.util.List: boolean addAll(int,java.util.Collection)>(0, v5);
staticinvoke <com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void assertTrue(java.lang.String,boolean)>("addAll(n, allPresent) should return true", v6);
v7 = newarray (java.lang.Object)[2];
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e0()>();
v7[0] = v8;
v9 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e3()>();
v7[1] = v9;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void expectAdded(int,java.lang.Object[])>(0, v7);
return;
}
public void testAddAllAtIndex_unsupportedSomePresent()
{
java.lang.UnsupportedOperationException v6;
java.lang.Object[] v2, v7;
com.google.common.collect.testing.testers.ListAddAllAtIndexTester v0;
java.util.List v1;
java.lang.Object v3, v4, v8;
com.google.common.collect.testing.MinimalCollection v5;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllAtIndexTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.util.List getList()>();
v2 = newarray (java.lang.Object)[2];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e0()>();
v2[0] = v3;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e3()>();
v2[1] = v4;
v5 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
interfaceinvoke v1.<java.util.List: boolean addAll(int,java.util.Collection)>(0, v5);
staticinvoke <com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void fail(java.lang.String)>("addAll(n, allPresent) should throw");
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void expectUnchanged()>();
v7 = newarray (java.lang.Object)[1];
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e3()>();
v7[0] = v8;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void expectMissing(java.lang.Object[])>(v7);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testAddAllAtIndex_supportedNothing()
{
java.util.List v1;
com.google.common.collect.testing.MinimalCollection v2;
com.google.common.collect.testing.testers.ListAddAllAtIndexTester v0;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllAtIndexTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: com.google.common.collect.testing.MinimalCollection emptyCollection()>();
v3 = interfaceinvoke v1.<java.util.List: boolean addAll(int,java.util.Collection)>(0, v2);
staticinvoke <com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void assertFalse(java.lang.String,boolean)>("addAll(n, nothing) should return false", v3);
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void expectUnchanged()>();
return;
}
public void testAddAllAtIndex_unsupportedNothing()
{
java.lang.UnsupportedOperationException v4;
java.util.List v1;
com.google.common.collect.testing.MinimalCollection v2;
com.google.common.collect.testing.testers.ListAddAllAtIndexTester v0;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllAtIndexTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: com.google.common.collect.testing.MinimalCollection emptyCollection()>();
v3 = interfaceinvoke v1.<java.util.List: boolean addAll(int,java.util.Collection)>(0, v2);
staticinvoke <com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void assertFalse(java.lang.String,boolean)>("addAll(n, nothing) should return false or throw", v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testAddAllAtIndex_withDuplicates()
{
java.lang.Object[] v1, v9;
com.google.common.collect.testing.testers.ListAddAllAtIndexTester v0;
java.util.List v7;
java.lang.Object v10, v11, v12, v13, v2, v3, v4, v5;
com.google.common.collect.testing.MinimalCollection v6;
boolean v8;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllAtIndexTester;
v1 = newarray (java.lang.Object)[4];
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e0()>();
v1[0] = v2;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e1()>();
v1[1] = v3;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e0()>();
v1[2] = v4;
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e1()>();
v1[3] = v5;
v6 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v1);
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.util.List getList()>();
v8 = interfaceinvoke v7.<java.util.List: boolean addAll(int,java.util.Collection)>(0, v6);
staticinvoke <com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void assertTrue(java.lang.String,boolean)>("addAll(n, hasDuplicates) should return true", v8);
v9 = newarray (java.lang.Object)[4];
v10 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e0()>();
v9[0] = v10;
v11 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e1()>();
v9[1] = v11;
v12 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e0()>();
v9[2] = v12;
v13 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e1()>();
v9[3] = v13;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void expectAdded(int,java.lang.Object[])>(0, v9);
return;
}
public void testAddAllAtIndex_nullSupported()
{
java.util.List v1, v2;
java.lang.Object[] v4;
com.google.common.collect.testing.testers.ListAddAllAtIndexTester v0;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllAtIndexTester;
v1 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(null);
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.util.List getList()>();
v3 = interfaceinvoke v2.<java.util.List: boolean addAll(int,java.util.Collection)>(0, v1);
staticinvoke <com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void assertTrue(java.lang.String,boolean)>("addAll(n, containsNull) should return true", v3);
v4 = newarray (java.lang.Object)[1];
v4[0] = null;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void expectAdded(int,java.lang.Object[])>(0, v4);
return;
}
public void testAddAllAtIndex_nullUnsupported()
{
java.util.List v1, v2;
com.google.common.collect.testing.testers.ListAddAllAtIndexTester v0;
java.lang.NullPointerException v3;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllAtIndexTester;
v1 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(null);
label1:
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.util.List getList()>();
interfaceinvoke v2.<java.util.List: boolean addAll(int,java.util.Collection)>(0, v1);
staticinvoke <com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void fail(java.lang.String)>("addAll(n, containsNull) should throw");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void expectUnchanged()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void expectNullMissingWhenNullUnsupported(java.lang.String)>("Should not contain null after unsupported addAll(n, containsNull)");
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testAddAllAtIndex_middle()
{
com.google.common.collect.testing.testers.ListAddAllAtIndexTester v0;
java.util.List v1;
int v2, v3, v6, v7;
com.google.common.collect.testing.MinimalCollection v4, v8;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllAtIndexTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: int getNumElements()>();
v3 = v2 / 2;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: com.google.common.collect.testing.MinimalCollection createDisjointCollection()>();
v5 = interfaceinvoke v1.<java.util.List: boolean addAll(int,java.util.Collection)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void assertTrue(java.lang.String,boolean)>("addAll(middle, disjoint) should return true", v5);
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: int getNumElements()>();
v7 = v6 / 2;
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: com.google.common.collect.testing.MinimalCollection createDisjointCollection()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void expectAdded(int,java.util.Collection)>(v7, v8);
return;
}
public void testAddAllAtIndex_end()
{
java.util.List v1;
int v2, v5;
com.google.common.collect.testing.MinimalCollection v3, v6;
com.google.common.collect.testing.testers.ListAddAllAtIndexTester v0;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllAtIndexTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: int getNumElements()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: com.google.common.collect.testing.MinimalCollection createDisjointCollection()>();
v4 = interfaceinvoke v1.<java.util.List: boolean addAll(int,java.util.Collection)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void assertTrue(java.lang.String,boolean)>("addAll(end, disjoint) should return true", v4);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: int getNumElements()>();
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: com.google.common.collect.testing.MinimalCollection createDisjointCollection()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void expectAdded(int,java.util.Collection)>(v5, v6);
return;
}
public void testAddAllAtIndex_nullCollectionReference()
{
java.util.List v1;
com.google.common.collect.testing.testers.ListAddAllAtIndexTester v0;
java.lang.NullPointerException v2;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllAtIndexTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.util.List getList()>();
interfaceinvoke v1.<java.util.List: boolean addAll(int,java.util.Collection)>(0, null);
staticinvoke <com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void fail(java.lang.String)>("addAll(n, null) should throw");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void expectUnchanged()>();
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testAddAllAtIndex_negative()
{
java.lang.IndexOutOfBoundsException v6;
java.lang.Object[] v2, v7;
com.google.common.collect.testing.testers.ListAddAllAtIndexTester v0;
java.util.List v1;
int v5;
java.lang.Object v3, v8;
com.google.common.collect.testing.MinimalCollection v4;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllAtIndexTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.util.List getList()>();
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e3()>();
v2[0] = v3;
v4 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v5 = (int) -1;
interfaceinvoke v1.<java.util.List: boolean addAll(int,java.util.Collection)>(v5, v4);
staticinvoke <com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void fail(java.lang.String)>("addAll(-1, e) should throw");
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void expectUnchanged()>();
v7 = newarray (java.lang.Object)[1];
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e3()>();
v7[0] = v8;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void expectMissing(java.lang.Object[])>(v7);
return;
catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
}
public void testAddAllAtIndex_tooLarge()
{
java.lang.IndexOutOfBoundsException v7;
java.lang.Object[] v4, v8;
com.google.common.collect.testing.testers.ListAddAllAtIndexTester v0;
java.util.List v1;
int v2, v3;
java.lang.Object v5, v9;
com.google.common.collect.testing.MinimalCollection v6;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllAtIndexTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: int getNumElements()>();
v3 = v2 + 1;
v4 = newarray (java.lang.Object)[1];
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e3()>();
v4[0] = v5;
v6 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v4);
interfaceinvoke v1.<java.util.List: boolean addAll(int,java.util.Collection)>(v3, v6);
staticinvoke <com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void fail(java.lang.String)>("addAll(size + 1, e) should throw");
label2:
goto label4;
label3:
v7 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void expectUnchanged()>();
v8 = newarray (java.lang.Object)[1];
v9 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: java.lang.Object e3()>();
v8[0] = v9;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllAtIndexTester: void expectMissing(java.lang.Object[])>(v8);
return;
catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
}
}