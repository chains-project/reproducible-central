public class com.google.common.collect.testing.testers.ListAddAllTester extends com.google.common.collect.testing.testers.AbstractListTester
{
public void <init>()
{
com.google.common.collect.testing.testers.ListAddAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllTester;
specialinvoke v0.<com.google.common.collect.testing.testers.AbstractListTester: void <init>()>();
return;
}
public void testAddAll_supportedAllPresent()
{
java.lang.Object[] v2, v6;
com.google.common.collect.testing.testers.ListAddAllTester v0;
java.util.List v1;
java.lang.Object v3, v7;
com.google.common.collect.testing.MinimalCollection v4;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllTester: java.util.List getList()>();
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllTester: java.lang.Object e0()>();
v2[0] = v3;
v4 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v5 = interfaceinvoke v1.<java.util.List: boolean addAll(java.util.Collection)>(v4);
staticinvoke <com.google.common.collect.testing.testers.ListAddAllTester: void assertTrue(java.lang.String,boolean)>("addAll(allPresent) should return true", v5);
v6 = newarray (java.lang.Object)[1];
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllTester: java.lang.Object e0()>();
v6[0] = v7;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllTester: void expectAdded(java.lang.Object[])>(v6);
return;
}
public void testAddAll_unsupportedAllPresent()
{
java.lang.UnsupportedOperationException v5;
java.util.List v1;
java.lang.Object[] v2;
java.lang.Object v3;
com.google.common.collect.testing.MinimalCollection v4;
com.google.common.collect.testing.testers.ListAddAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllTester: java.util.List getList()>();
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllTester: java.lang.Object e0()>();
v2[0] = v3;
v4 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
interfaceinvoke v1.<java.util.List: boolean addAll(java.util.Collection)>(v4);
staticinvoke <com.google.common.collect.testing.testers.ListAddAllTester: void fail(java.lang.String)>("addAll(allPresent) should throw");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testAddAll_withDuplicates()
{
java.lang.Object[] v1, v9;
com.google.common.collect.testing.testers.ListAddAllTester v0;
java.util.List v7;
java.lang.Object v10, v11, v12, v13, v2, v3, v4, v5;
com.google.common.collect.testing.MinimalCollection v6;
boolean v8;
v0 := @this: com.google.common.collect.testing.testers.ListAddAllTester;
v1 = newarray (java.lang.Object)[4];
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllTester: java.lang.Object e0()>();
v1[0] = v2;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllTester: java.lang.Object e1()>();
v1[1] = v3;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllTester: java.lang.Object e0()>();
v1[2] = v4;
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllTester: java.lang.Object e1()>();
v1[3] = v5;
v6 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v1);
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllTester: java.util.List getList()>();
v8 = interfaceinvoke v7.<java.util.List: boolean addAll(java.util.Collection)>(v6);
staticinvoke <com.google.common.collect.testing.testers.ListAddAllTester: void assertTrue(java.lang.String,boolean)>("addAll(hasDuplicates) should return true", v8);
v9 = newarray (java.lang.Object)[4];
v10 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllTester: java.lang.Object e0()>();
v9[0] = v10;
v11 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllTester: java.lang.Object e1()>();
v9[1] = v11;
v12 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllTester: java.lang.Object e0()>();
v9[2] = v12;
v13 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllTester: java.lang.Object e1()>();
v9[3] = v13;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAllTester: void expectAdded(java.lang.Object[])>(v9);
return;
}
}