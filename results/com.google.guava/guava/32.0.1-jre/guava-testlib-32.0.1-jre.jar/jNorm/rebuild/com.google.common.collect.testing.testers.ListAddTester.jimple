public class com.google.common.collect.testing.testers.ListAddTester extends com.google.common.collect.testing.testers.AbstractListTester
{
public void <init>()
{
com.google.common.collect.testing.testers.ListAddTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListAddTester;
specialinvoke v0.<com.google.common.collect.testing.testers.AbstractListTester: void <init>()>();
return;
}
public void testAdd_supportedPresent()
{
java.util.List v1;
java.lang.Object[] v4;
com.google.common.collect.testing.testers.ListAddTester v0;
java.lang.Object v2, v5;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.ListAddTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.ListAddTester: void assertTrue(java.lang.String,boolean)>("add(present) should return true", v3);
v4 = newarray (java.lang.Object)[1];
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddTester: java.lang.Object e0()>();
v4[0] = v5;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddTester: void expectAdded(java.lang.Object[])>(v4);
return;
}
public void testAdd_unsupportedPresent()
{
java.lang.UnsupportedOperationException v3;
java.util.List v1;
com.google.common.collect.testing.testers.ListAddTester v0;
java.lang.Object v2;
v0 := @this: com.google.common.collect.testing.testers.ListAddTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddTester: java.lang.Object e0()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.ListAddTester: void fail(java.lang.String)>("add(present) should throw");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testAdd_supportedNullPresent()
{
java.util.List v4, v6;
java.lang.Object[] v1;
com.google.common.collect.testing.testers.ListAddTester v0;
java.lang.Object v2, v3;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.ListAddTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddTester: java.lang.Object[] createArrayWithNullElement()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddTester: java.lang.Object getSubjectGenerator()>();
v3 = interfaceinvoke v2.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v1);
v0.<com.google.common.collect.testing.testers.ListAddTester: java.util.Collection collection> = v3;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddTester: java.util.List getList()>();
v5 = interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.ListAddTester: void assertTrue(java.lang.String,boolean)>("add(nullPresent) should return true", v5);
v6 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.List copyToList(java.lang.Object[])>(v1);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(null);
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddTester: void expectContents(java.util.Collection)>(v6);
return;
}
public static java.lang.reflect.Method getAddSupportedNullPresentMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/ListAddTester;", "testAdd_supportedNullPresent");
return v0;
}
}