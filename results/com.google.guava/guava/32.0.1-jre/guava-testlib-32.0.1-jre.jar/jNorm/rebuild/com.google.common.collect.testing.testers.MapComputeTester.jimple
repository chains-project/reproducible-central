public class com.google.common.collect.testing.testers.MapComputeTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.MapComputeTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapComputeTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void testCompute_absentToPresent()
{
com.google.common.collect.testing.testers.MapComputeTester v0;
java.util.function.BiFunction v4;
java.util.Map v10, v2;
int v11, v8, v9;
java.lang.Object v1, v3, v5, v7;
java.util.Map$Entry[] v6;
v0 := @this: com.google.common.collect.testing.testers.MapComputeTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object v3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object k3()>();
v4 = staticinvoke <com.google.common.collect.testing.testers.MapComputeTester$lambda_testCompute_absentToPresent_0__52: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapComputeTester)>(v0);
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapComputeTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Map.compute(absent, functionReturningValue) should return value", v1, v5);
v6 = newarray (java.util.Map$Entry)[1];
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object e3()>();
v6[0] = v7;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: void expectAdded(java.lang.Object[])>(v6);
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: int getNumElements()>();
v9 = v8 + 1;
v10 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.util.Map getMap()>();
v11 = interfaceinvoke v10.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.testers.MapComputeTester: void assertEquals(int,int)>(v9, v11);
return;
}
public void testCompute_absentToAbsent()
{
com.google.common.collect.testing.testers.MapComputeTester v0;
java.util.function.BiFunction v3;
java.util.Map v1, v6;
int v5, v7;
java.lang.Object v2, v4;
v0 := @this: com.google.common.collect.testing.testers.MapComputeTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object k3()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapComputeTester$lambda_testCompute_absentToAbsent_1__53: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapComputeTester)>(v0);
v4 = interfaceinvoke v1.<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapComputeTester: void assertNull(java.lang.String,java.lang.Object)>("Map.compute(absent, functionReturningNull) should return null", v4);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: void expectUnchanged()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: int getNumElements()>();
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.util.Map getMap()>();
v7 = interfaceinvoke v6.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.testers.MapComputeTester: void assertEquals(int,int)>(v5, v7);
return;
}
public void testCompute_presentToPresent()
{
com.google.common.collect.testing.testers.MapComputeTester v0;
java.util.Map$Entry v8;
java.util.function.BiFunction v4;
java.util.Map v10, v2;
int v11, v9;
java.lang.Object v1, v3, v5, v6, v7;
v0 := @this: com.google.common.collect.testing.testers.MapComputeTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object v3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object k0()>();
v4 = staticinvoke <com.google.common.collect.testing.testers.MapComputeTester$lambda_testCompute_presentToPresent_2__54: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapComputeTester)>(v0);
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapComputeTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Map.compute(present, functionReturningValue) should return new value", v1, v5);
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object k0()>();
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object v3()>();
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v6, v7);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: void expectReplacement(java.util.Map$Entry)>(v8);
v9 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: int getNumElements()>();
v10 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.util.Map getMap()>();
v11 = interfaceinvoke v10.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.testers.MapComputeTester: void assertEquals(int,int)>(v9, v11);
return;
}
public void testCompute_presentToAbsent()
{
com.google.common.collect.testing.testers.MapComputeTester v0;
java.lang.Object[] v7;
java.util.function.BiFunction v3;
java.util.Map v1, v11;
int v10, v12, v9;
java.lang.Object v2, v4, v6, v8;
java.util.Map$Entry[] v5;
v0 := @this: com.google.common.collect.testing.testers.MapComputeTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object k0()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapComputeTester$lambda_testCompute_presentToAbsent_3__55: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapComputeTester)>(v0);
v4 = interfaceinvoke v1.<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapComputeTester: void assertNull(java.lang.String,java.lang.Object)>("Map.compute(present, functionReturningNull) should return null", v4);
v5 = newarray (java.util.Map$Entry)[1];
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object e0()>();
v5[0] = v6;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: void expectMissing(java.util.Map$Entry[])>(v5);
v7 = newarray (java.lang.Object)[1];
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object k0()>();
v7[0] = v8;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: void expectMissingKeys(java.lang.Object[])>(v7);
v9 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: int getNumElements()>();
v10 = v9 - 1;
v11 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.util.Map getMap()>();
v12 = interfaceinvoke v11.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.testers.MapComputeTester: void assertEquals(int,int)>(v10, v12);
return;
}
public void testCompute_presentNullToPresentNonnull()
{
com.google.common.collect.testing.testers.MapComputeTester v0;
java.util.Map$Entry v7;
java.util.function.BiFunction v4;
java.util.Map v2, v9;
int v10, v8;
java.lang.Object v1, v3, v5, v6;
v0 := @this: com.google.common.collect.testing.testers.MapComputeTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: void initMapWithNullValue()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object getValueForNullKey()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object getKeyForNullValue()>();
v4 = staticinvoke <com.google.common.collect.testing.testers.MapComputeTester$lambda_testCompute_presentNullToPresentNonnull_4__56: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapComputeTester,java.lang.Object)>(v0, v1);
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapComputeTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Map.compute(presentMappedToNull, functionReturningValue) should return new value", v1, v5);
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object getKeyForNullValue()>();
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v6, v1);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: void expectReplacement(java.util.Map$Entry)>(v7);
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: int getNumElements()>();
v9 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.util.Map getMap()>();
v10 = interfaceinvoke v9.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.testers.MapComputeTester: void assertEquals(int,int)>(v8, v10);
return;
}
public void testCompute_presentNullToNull()
{
com.google.common.collect.testing.testers.MapComputeTester v0;
java.lang.Object[] v5;
java.util.function.BiFunction v3;
java.util.Map v1, v9;
int v10, v7, v8;
java.lang.Object v2, v4, v6;
v0 := @this: com.google.common.collect.testing.testers.MapComputeTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: void initMapWithNullValue()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object getKeyForNullValue()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapComputeTester$lambda_testCompute_presentNullToNull_5__57: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapComputeTester)>(v0);
v4 = interfaceinvoke v1.<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapComputeTester: void assertNull(java.lang.String,java.lang.Object)>("Map.compute(presentMappedToNull, functionReturningNull) should return null", v4);
v5 = newarray (java.lang.Object)[1];
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object getKeyForNullValue()>();
v5[0] = v6;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: void expectMissingKeys(java.lang.Object[])>(v5);
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: int getNumElements()>();
v8 = v7 - 1;
v9 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.util.Map getMap()>();
v10 = interfaceinvoke v9.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.testers.MapComputeTester: void assertEquals(int,int)>(v8, v10);
return;
}
public void testCompute_nullKeyPresentToPresent()
{
com.google.common.collect.testing.testers.MapComputeTester v0;
java.util.function.BiFunction v3;
java.util.Map v2, v6;
int v5, v7;
java.lang.Object v1, v4;
v0 := @this: com.google.common.collect.testing.testers.MapComputeTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: void initMapWithNullKey()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object v3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.util.Map getMap()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapComputeTester$lambda_testCompute_nullKeyPresentToPresent_6__58: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapComputeTester)>(v0);
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(null, v3);
staticinvoke <com.google.common.collect.testing.testers.MapComputeTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Map.compute(present, functionReturningValue) should return new value", v1, v4);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: int getNumElements()>();
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.util.Map getMap()>();
v7 = interfaceinvoke v6.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.testers.MapComputeTester: void assertEquals(int,int)>(v5, v7);
return;
}
public void testCompute_presentFunctionThrows()
{
com.google.common.collect.testing.testers.MapComputeTester v0;
java.util.Map v1;
java.util.function.BiFunction v3;
java.lang.Object v2;
com.google.common.collect.testing.testers.MapComputeTester$ExpectedException v4;
v0 := @this: com.google.common.collect.testing.testers.MapComputeTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object k0()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapComputeTester$lambda_testCompute_presentFunctionThrows_7__59: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapComputeTester)>(v0);
interfaceinvoke v1.<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapComputeTester: void fail(java.lang.String)>("Expected ExpectedException");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: void expectUnchanged()>();
return;
catch com.google.common.collect.testing.testers.MapComputeTester$ExpectedException from label1 to label2 with label3;
}
public void testCompute_absentFunctionThrows()
{
com.google.common.collect.testing.testers.MapComputeTester v0;
java.util.Map v1;
java.util.function.BiFunction v3;
java.lang.Object v2;
com.google.common.collect.testing.testers.MapComputeTester$ExpectedException v4;
v0 := @this: com.google.common.collect.testing.testers.MapComputeTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: java.lang.Object k3()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapComputeTester$lambda_testCompute_absentFunctionThrows_8__60: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapComputeTester)>(v0);
interfaceinvoke v1.<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapComputeTester: void fail(java.lang.String)>("Expected ExpectedException");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeTester: void expectUnchanged()>();
return;
catch com.google.common.collect.testing.testers.MapComputeTester$ExpectedException from label1 to label2 with label3;
}
}