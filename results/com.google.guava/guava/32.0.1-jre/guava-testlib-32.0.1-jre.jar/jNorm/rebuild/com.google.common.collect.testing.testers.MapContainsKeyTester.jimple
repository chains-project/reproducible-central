public class com.google.common.collect.testing.testers.MapContainsKeyTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.MapContainsKeyTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapContainsKeyTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void testContains_yes()
{
java.util.Map v1;
com.google.common.collect.testing.testers.MapContainsKeyTester v0;
java.lang.Object v2;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.MapContainsKeyTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapContainsKeyTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapContainsKeyTester: java.lang.Object k0()>();
v3 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.MapContainsKeyTester: void assertTrue(java.lang.String,boolean)>("containsKey(present) should return true", v3);
return;
}
public void testContains_no()
{
java.util.Map v1;
com.google.common.collect.testing.testers.MapContainsKeyTester v0;
java.lang.Object v2;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.MapContainsKeyTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapContainsKeyTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapContainsKeyTester: java.lang.Object k3()>();
v3 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.MapContainsKeyTester: void assertFalse(java.lang.String,boolean)>("containsKey(notPresent) should return false", v3);
return;
}
public void testContains_nullNotContainedButAllowed()
{
com.google.common.collect.testing.testers.MapContainsKeyTester v0;
boolean v2;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.testers.MapContainsKeyTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapContainsKeyTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.MapContainsKeyTester: void assertFalse(java.lang.String,boolean)>("containsKey(null) should return false", v2);
return;
}
public void testContains_nullNotContainedAndUnsupported()
{
com.google.common.collect.testing.testers.MapContainsKeyTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapContainsKeyTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapContainsKeyTester: void expectNullKeyMissingWhenNullKeysUnsupported(java.lang.String)>("containsKey(null) should return false or throw");
return;
}
public void testContains_nonNullWhenNullContained()
{
java.util.Map v1;
com.google.common.collect.testing.testers.MapContainsKeyTester v0;
java.lang.Object v2;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.MapContainsKeyTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapContainsKeyTester: void initMapWithNullKey()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapContainsKeyTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapContainsKeyTester: java.lang.Object k3()>();
v3 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.MapContainsKeyTester: void assertFalse(java.lang.String,boolean)>("containsKey(notPresent) should return false", v3);
return;
}
public void testContains_nullContained()
{
com.google.common.collect.testing.testers.MapContainsKeyTester v0;
boolean v2;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.testers.MapContainsKeyTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapContainsKeyTester: void initMapWithNullKey()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapContainsKeyTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.MapContainsKeyTester: void assertTrue(java.lang.String,boolean)>("containsKey(null) should return true", v2);
return;
}
public void testContains_wrongType()
{
com.google.common.collect.testing.WrongType v2;
java.util.Map v1;
com.google.common.collect.testing.testers.MapContainsKeyTester v0;
java.lang.ClassCastException v4;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.MapContainsKeyTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapContainsKeyTester: java.util.Map getMap()>();
v2 = <com.google.common.collect.testing.WrongType: com.google.common.collect.testing.WrongType VALUE>;
v3 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.MapContainsKeyTester: void assertFalse(java.lang.String,boolean)>("containsKey(wrongType) should return false or throw", v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
return;
catch java.lang.ClassCastException from label1 to label2 with label3;
}
}