public class com.google.common.collect.testing.testers.MapEntrySetTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.MapEntrySetTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapEntrySetTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void testEntrySetIteratorRemove()
{
java.util.Iterator v3;
java.util.Set v2;
java.util.Map v1, v6;
java.lang.Object v4, v5, v8;
com.google.common.collect.testing.testers.MapEntrySetTester v0;
boolean v7, v9;
v0 := @this: com.google.common.collect.testing.testers.MapEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.lang.Object e0()>();
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.MapEntrySetTester: void assertEquals(java.lang.Object,java.lang.Object)>(v4, v5);
interfaceinvoke v3.<java.util.Iterator: void remove()>();
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.util.Map getMap()>();
v7 = interfaceinvoke v6.<java.util.Map: boolean isEmpty()>();
staticinvoke <com.google.common.collect.testing.testers.MapEntrySetTester: void assertTrue(boolean)>(v7);
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.lang.Object e0()>();
v9 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v8);
staticinvoke <com.google.common.collect.testing.testers.MapEntrySetTester: void assertFalse(boolean)>(v9);
return;
}
public void testContainsEntryWithIncomparableKey()
{
java.util.Map$Entry v5;
java.util.Set v2;
com.google.common.collect.testing.testers.MapEntrySetTester$IncomparableType v3;
java.lang.ClassCastException v7;
java.util.Map v1;
java.lang.Object v4;
com.google.common.collect.testing.testers.MapEntrySetTester v0;
boolean v6;
v0 := @this: com.google.common.collect.testing.testers.MapEntrySetTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = <com.google.common.collect.testing.testers.MapEntrySetTester$IncomparableType: com.google.common.collect.testing.testers.MapEntrySetTester$IncomparableType INSTANCE>;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.lang.Object v0()>();
v5 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v3, v4);
v6 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.testers.MapEntrySetTester: void assertFalse(boolean)>(v6);
label2:
goto label4;
label3:
v7 := @caughtexception;
label4:
return;
catch java.lang.ClassCastException from label1 to label2 with label3;
}
public void testContainsEntryWithIncomparableValue()
{
java.util.Map$Entry v5;
java.util.Set v2;
com.google.common.collect.testing.testers.MapEntrySetTester$IncomparableType v4;
java.lang.ClassCastException v7;
java.util.Map v1;
java.lang.Object v3;
com.google.common.collect.testing.testers.MapEntrySetTester v0;
boolean v6;
v0 := @this: com.google.common.collect.testing.testers.MapEntrySetTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.lang.Object k0()>();
v4 = <com.google.common.collect.testing.testers.MapEntrySetTester$IncomparableType: com.google.common.collect.testing.testers.MapEntrySetTester$IncomparableType INSTANCE>;
v5 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v3, v4);
v6 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.testers.MapEntrySetTester: void assertFalse(boolean)>(v6);
label2:
goto label4;
label3:
v7 := @caughtexception;
label4:
return;
catch java.lang.ClassCastException from label1 to label2 with label3;
}
public void testContainsEntryWithNullKeyAbsent()
{
java.util.Map$Entry v4;
java.util.Map v1;
java.util.Set v2;
java.lang.Object v3;
com.google.common.collect.testing.testers.MapEntrySetTester v0;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.MapEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.lang.Object v0()>();
v4 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(null, v3);
v5 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.testers.MapEntrySetTester: void assertFalse(boolean)>(v5);
return;
}
public void testContainsEntryWithNullKeyPresent()
{
java.util.Map$Entry v4;
java.util.Map v1;
java.util.Set v2;
java.lang.Object v3;
com.google.common.collect.testing.testers.MapEntrySetTester v0;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.MapEntrySetTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: void initMapWithNullKey()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.lang.Object getValueForNullKey()>();
v4 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(null, v3);
v5 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.testers.MapEntrySetTester: void assertTrue(boolean)>(v5);
return;
}
public void testContainsEntryWithNullValueAbsent()
{
java.util.Map$Entry v4;
java.util.Map v1;
java.util.Set v2;
java.lang.Object v3;
com.google.common.collect.testing.testers.MapEntrySetTester v0;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.MapEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.lang.Object k0()>();
v4 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v3, null);
v5 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.testers.MapEntrySetTester: void assertFalse(boolean)>(v5);
return;
}
public void testContainsEntryWithNullValuePresent()
{
java.util.Map$Entry v4;
java.util.Map v1;
java.util.Set v2;
java.lang.Object v3;
com.google.common.collect.testing.testers.MapEntrySetTester v0;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.MapEntrySetTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: void initMapWithNullValue()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.lang.Object getKeyForNullValue()>();
v4 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v3, null);
v5 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.testers.MapEntrySetTester: void assertTrue(boolean)>(v5);
return;
}
public void testSetValue()
{
java.util.Map$Entry v14;
java.util.Iterator v3;
java.util.Set v2;
java.util.Map v1;
java.lang.Object v10, v11, v12, v13, v5, v6, v7, v9;
com.google.common.collect.testing.testers.MapEntrySetTester v0;
boolean v4, v8;
v0 := @this: com.google.common.collect.testing.testers.MapEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.lang.Object k0()>();
v8 = virtualinvoke v6.<java.lang.Object: boolean equals(java.lang.Object)>(v7);
if v8 == 0 goto label1;
v9 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.lang.Object v0()>();
v10 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.lang.Object v3()>();
v11 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(v10);
staticinvoke <com.google.common.collect.testing.testers.MapEntrySetTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("entry.setValue() should return the old value", v9, v11);
label2:
v12 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.lang.Object k0()>();
v13 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.lang.Object v3()>();
v14 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v12, v13);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: void expectReplacement(java.util.Map$Entry)>(v14);
return;
}
public void testSetValueWithNullValuesPresent()
{
java.util.Map$Entry v12;
java.util.Iterator v3;
java.util.Set v2;
java.util.Map v1;
java.lang.Object v10, v11, v5, v6, v7, v9;
com.google.common.collect.testing.testers.MapEntrySetTester v0;
boolean v4, v8;
v0 := @this: com.google.common.collect.testing.testers.MapEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.lang.Object k0()>();
v8 = virtualinvoke v6.<java.lang.Object: boolean equals(java.lang.Object)>(v7);
if v8 == 0 goto label1;
v9 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.lang.Object v0()>();
v10 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.MapEntrySetTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("entry.setValue() should return the old value", v9, v10);
label2:
v11 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.lang.Object k0()>();
v12 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v11, null);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: void expectReplacement(java.util.Map$Entry)>(v12);
return;
}
public void testSetValueWithNullValuesAbsent()
{
java.util.Iterator v3;
java.util.Map v1;
java.util.Set v2;
java.lang.Object v5;
com.google.common.collect.testing.testers.MapEntrySetTester v0;
java.lang.NullPointerException v6;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.MapEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label5;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
label2:
interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.MapEntrySetTester: void fail(java.lang.String)>("Expected NullPointerException");
label3:
goto label1;
label4:
v6 := @caughtexception;
label5:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapEntrySetTester: void expectUnchanged()>();
return;
catch java.lang.NullPointerException from label2 to label3 with label4;
}
public static java.lang.reflect.Method getContainsEntryWithIncomparableKeyMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/MapEntrySetTester;", "testContainsEntryWithIncomparableKey");
return v0;
}
public static java.lang.reflect.Method getContainsEntryWithIncomparableValueMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/MapEntrySetTester;", "testContainsEntryWithIncomparableValue");
return v0;
}
public static java.lang.reflect.Method getSetValueMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/MapEntrySetTester;", "testSetValue");
return v0;
}
public static java.lang.reflect.Method getSetValueWithNullValuesPresentMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/MapEntrySetTester;", "testSetValueWithNullValuesPresent");
return v0;
}
public static java.lang.reflect.Method getSetValueWithNullValuesAbsentMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/MapEntrySetTester;", "testSetValueWithNullValuesAbsent");
return v0;
}
}