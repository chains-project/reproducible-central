public class com.google.common.collect.testing.testers.MapHashCodeTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.MapHashCodeTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapHashCodeTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void testHashCode()
{
com.google.common.collect.testing.testers.MapHashCodeTester v0;
java.util.Iterator v3;
java.util.Collection v2;
java.util.Map v7;
int v1, v6, v8;
java.lang.Object v5;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.MapHashCodeTester;
v1 = 0;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapHashCodeTester: java.util.Collection getSampleEntries()>();
v3 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = staticinvoke <com.google.common.collect.testing.testers.MapHashCodeTester: int hash(java.util.Map$Entry)>(v5);
v1 = v1 + v6;
goto label1;
label2:
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapHashCodeTester: java.util.Map getMap()>();
v8 = interfaceinvoke v7.<java.util.Map: int hashCode()>();
staticinvoke <com.google.common.collect.testing.testers.MapHashCodeTester: void assertEquals(java.lang.String,int,int)>("A Map\'s hashCode() should be the sum of those of its entries.", v1, v8);
return;
}
public void testHashCode_containingNullKey()
{
java.lang.Object v1;
java.util.Map$Entry v2;
com.google.common.collect.testing.testers.MapHashCodeTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapHashCodeTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapHashCodeTester: java.lang.Object v3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapHashCodeTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(null, v1);
specialinvoke v0.<com.google.common.collect.testing.testers.MapHashCodeTester: void runEntryWithNullTest(java.util.Map$Entry)>(v2);
return;
}
public void testHashCode_containingNullValue()
{
java.lang.Object v1;
java.util.Map$Entry v2;
com.google.common.collect.testing.testers.MapHashCodeTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapHashCodeTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapHashCodeTester: java.lang.Object k3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapHashCodeTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v1, null);
specialinvoke v0.<com.google.common.collect.testing.testers.MapHashCodeTester: void runEntryWithNullTest(java.util.Map$Entry)>(v2);
return;
}
private void runEntryWithNullTest(java.util.Map$Entry)
{
java.util.Map$Entry v1;
java.lang.Object[] v11;
com.google.common.collect.testing.testers.MapHashCodeTester v0;
java.util.Iterator v6;
java.util.Collection v4;
java.util.Map v13;
int v14, v2, v3, v5, v9;
java.lang.Object v10, v12, v8;
boolean v7;
v0 := @this: com.google.common.collect.testing.testers.MapHashCodeTester;
v1 := @parameter0: java.util.Map$Entry;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapHashCodeTester: int getNumEntries()>();
v3 = v2 - 1;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapHashCodeTester: java.util.Collection getSampleEntries(int)>(v3);
interfaceinvoke v4.<java.util.Collection: boolean add(java.lang.Object)>(v1);
v5 = 0;
v6 = interfaceinvoke v4.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = staticinvoke <com.google.common.collect.testing.testers.MapHashCodeTester: int hash(java.util.Map$Entry)>(v8);
v5 = v5 + v9;
goto label1;
label2:
v10 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapHashCodeTester: java.lang.Object getSubjectGenerator()>();
v11 = interfaceinvoke v4.<java.util.Collection: java.lang.Object[] toArray()>();
v12 = interfaceinvoke v10.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v11);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapHashCodeTester: java.lang.Object resetContainer(java.lang.Object)>(v12);
v13 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapHashCodeTester: java.util.Map getMap()>();
v14 = interfaceinvoke v13.<java.util.Map: int hashCode()>();
staticinvoke <com.google.common.collect.testing.testers.MapHashCodeTester: void assertEquals(java.lang.String,int,int)>("A Map\'s hashCode() should be the sum of those of its entries (where a null element in an entry counts as having a hash of zero).", v5, v14);
return;
}
private static int hash(java.util.Map$Entry)
{
java.util.Map$Entry v0;
int v2, v5, v7;
java.lang.Object v1, v3, v4, v6;
v0 := @parameter0: java.util.Map$Entry;
v1 = interfaceinvoke v0.<java.util.Map$Entry: java.lang.Object getKey()>();
if v1 != null goto label1;
v2 = 0;
goto label2;
label1:
v3 = interfaceinvoke v0.<java.util.Map$Entry: java.lang.Object getKey()>();
v2 = virtualinvoke v3.<java.lang.Object: int hashCode()>();
label2:
v4 = interfaceinvoke v0.<java.util.Map$Entry: java.lang.Object getValue()>();
if v4 != null goto label3;
v5 = 0;
goto label4;
label3:
v6 = interfaceinvoke v0.<java.util.Map$Entry: java.lang.Object getValue()>();
v5 = virtualinvoke v6.<java.lang.Object: int hashCode()>();
label4:
v7 = v2 ^ v5;
return v7;
}
}