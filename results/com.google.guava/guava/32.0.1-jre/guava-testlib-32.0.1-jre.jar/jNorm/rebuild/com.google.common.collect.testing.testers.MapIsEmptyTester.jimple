public class com.google.common.collect.testing.testers.MapIsEmptyTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.MapIsEmptyTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapIsEmptyTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void testIsEmpty_yes()
{
com.google.common.collect.testing.testers.MapIsEmptyTester v0;
boolean v2;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.testers.MapIsEmptyTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapIsEmptyTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: boolean isEmpty()>();
staticinvoke <com.google.common.collect.testing.testers.MapIsEmptyTester: void assertTrue(java.lang.String,boolean)>("isEmpty() should return true", v2);
return;
}
public void testIsEmpty_no()
{
com.google.common.collect.testing.testers.MapIsEmptyTester v0;
boolean v2;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.testers.MapIsEmptyTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapIsEmptyTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: boolean isEmpty()>();
staticinvoke <com.google.common.collect.testing.testers.MapIsEmptyTester: void assertFalse(java.lang.String,boolean)>("isEmpty() should return false", v2);
return;
}
}