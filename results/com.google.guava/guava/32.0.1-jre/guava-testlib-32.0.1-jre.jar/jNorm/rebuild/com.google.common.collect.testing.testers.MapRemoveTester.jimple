public class com.google.common.collect.testing.testers.MapRemoveTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.MapRemoveTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void testRemove_present()
{
java.util.Map v1, v4, v8;
int v2, v7, v9;
java.lang.Object v11, v3, v5, v6;
java.util.Map$Entry[] v10;
com.google.common.collect.testing.testers.MapRemoveTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: int size()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.lang.Object v0()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map getMap()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.lang.Object k0()>();
v6 = interfaceinvoke v4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.testers.MapRemoveTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("remove(present) should return the associated value", v3, v6);
v7 = v2 - 1;
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map getMap()>();
v9 = interfaceinvoke v8.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.testers.MapRemoveTester: void assertEquals(java.lang.String,int,int)>("remove(present) should decrease a map\'s size by one.", v7, v9);
v10 = newarray (java.util.Map$Entry)[1];
v11 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.lang.Object e0()>();
v10[0] = v11;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: void expectMissing(java.util.Map$Entry[])>(v10);
return;
}
public void testRemovePresentConcurrentWithEntrySetIteration()
{
java.util.Iterator v3;
java.util.Map v1, v4;
java.util.Set v2;
java.lang.Object v5;
java.util.ConcurrentModificationException v6;
com.google.common.collect.testing.testers.MapRemoveTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map getMap()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.lang.Object k0()>();
interfaceinvoke v4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v5);
interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.MapRemoveTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testRemovePresentConcurrentWithKeySetIteration()
{
java.util.Iterator v3;
java.util.Map v1, v4;
java.util.Set v2;
java.lang.Object v5;
java.util.ConcurrentModificationException v6;
com.google.common.collect.testing.testers.MapRemoveTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map getMap()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.lang.Object k0()>();
interfaceinvoke v4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v5);
interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.MapRemoveTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testRemovePresentConcurrentWithValuesIteration()
{
java.util.Iterator v3;
java.util.Collection v2;
java.util.Map v1, v4;
java.lang.Object v5;
java.util.ConcurrentModificationException v6;
com.google.common.collect.testing.testers.MapRemoveTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v3 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map getMap()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.lang.Object k0()>();
interfaceinvoke v4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v5);
interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.MapRemoveTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testRemove_notPresent()
{
java.util.Map v1;
java.lang.Object v2, v3;
com.google.common.collect.testing.testers.MapRemoveTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.lang.Object k3()>();
v3 = interfaceinvoke v1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.MapRemoveTester: void assertNull(java.lang.String,java.lang.Object)>("remove(notPresent) should return null", v3);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: void expectUnchanged()>();
return;
}
public void testRemove_nullPresent()
{
java.util.Map$Entry v11;
java.util.Map v1, v4, v7;
int v2, v6, v8;
java.lang.Object v10, v3, v5;
java.util.Map$Entry[] v9;
com.google.common.collect.testing.testers.MapRemoveTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: void initMapWithNullKey()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: int size()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.lang.Object getValueForNullKey()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map getMap()>();
v5 = interfaceinvoke v4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.MapRemoveTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("remove(null) should return the associated value", v3, v5);
v6 = v2 - 1;
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map getMap()>();
v8 = interfaceinvoke v7.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.testers.MapRemoveTester: void assertEquals(java.lang.String,int,int)>("remove(present) should decrease a map\'s size by one.", v6, v8);
v9 = newarray (java.util.Map$Entry)[1];
v10 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.lang.Object getValueForNullKey()>();
v11 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(null, v10);
v9[0] = v11;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: void expectMissing(java.util.Map$Entry[])>(v9);
return;
}
public void testRemove_unsupported()
{
java.lang.UnsupportedOperationException v3;
java.util.Map v1;
java.lang.Object v2, v4, v5, v6;
com.google.common.collect.testing.testers.MapRemoveTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.lang.Object k0()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.MapRemoveTester: void fail(java.lang.String)>("remove(present) should throw UnsupportedOperationException");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: void expectUnchanged()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.lang.Object v0()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.lang.Object k0()>();
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.lang.Object get(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.testers.MapRemoveTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("remove(present) should not remove the element", v4, v6);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testRemove_unsupportedNotPresent()
{
java.lang.UnsupportedOperationException v4;
java.util.Map v1;
java.lang.Object v2, v3, v6;
java.util.Map$Entry[] v5;
com.google.common.collect.testing.testers.MapRemoveTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.lang.Object k3()>();
v3 = interfaceinvoke v1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.MapRemoveTester: void assertNull(java.lang.String,java.lang.Object)>("remove(notPresent) should return null or throw UnsupportedOperationException", v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: void expectUnchanged()>();
v5 = newarray (java.util.Map$Entry)[1];
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.lang.Object e3()>();
v5[0] = v6;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: void expectMissing(java.util.Map$Entry[])>(v5);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testRemove_nullQueriesNotSupported()
{
java.util.Map v1;
java.lang.Object v2;
com.google.common.collect.testing.testers.MapRemoveTester v0;
java.lang.NullPointerException v3;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.MapRemoveTester: void assertNull(java.lang.String,java.lang.Object)>("remove(null) should return null or throw NullPointerException", v2);
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: void expectUnchanged()>();
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testRemove_nullSupportedMissing()
{
java.lang.Object v2;
com.google.common.collect.testing.testers.MapRemoveTester v0;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.MapRemoveTester: void assertNull(java.lang.String,java.lang.Object)>("remove(null) should return null", v2);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: void expectUnchanged()>();
return;
}
public void testRemove_wrongType()
{
com.google.common.collect.testing.WrongType v2;
java.util.Map v1;
java.lang.Object v3;
java.lang.ClassCastException v4;
com.google.common.collect.testing.testers.MapRemoveTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: java.util.Map getMap()>();
v2 = <com.google.common.collect.testing.WrongType: com.google.common.collect.testing.WrongType VALUE>;
v3 = interfaceinvoke v1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.MapRemoveTester: void assertNull(java.lang.Object)>(v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveTester: void expectUnchanged()>();
return;
catch java.lang.ClassCastException from label1 to label2 with label3;
}
}