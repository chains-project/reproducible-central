public class com.google.common.collect.testing.testers.MapReplaceAllTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.MapReplaceAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapReplaceAllTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
private com.google.common.collect.testing.SampleElements keys()
{
com.google.common.collect.testing.testers.MapReplaceAllTester v0;
com.google.common.collect.testing.SampleElements v1;
java.lang.Object v2, v3, v4, v5, v6;
v0 := @this: com.google.common.collect.testing.testers.MapReplaceAllTester;
v1 = new com.google.common.collect.testing.SampleElements;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: java.lang.Object k0()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: java.lang.Object k1()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: java.lang.Object k2()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: java.lang.Object k3()>();
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: java.lang.Object k4()>();
specialinvoke v1.<com.google.common.collect.testing.SampleElements: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(v2, v3, v4, v5, v6);
return v1;
}
private com.google.common.collect.testing.SampleElements values()
{
com.google.common.collect.testing.testers.MapReplaceAllTester v0;
com.google.common.collect.testing.SampleElements v1;
java.lang.Object v2, v3, v4, v5, v6;
v0 := @this: com.google.common.collect.testing.testers.MapReplaceAllTester;
v1 = new com.google.common.collect.testing.SampleElements;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: java.lang.Object v0()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: java.lang.Object v1()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: java.lang.Object v2()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: java.lang.Object v3()>();
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: java.lang.Object v4()>();
specialinvoke v1.<com.google.common.collect.testing.SampleElements: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(v2, v3, v4, v5, v6);
return v1;
}
public void testReplaceAllRotate()
{
com.google.common.collect.testing.SampleElements v13, v8;
java.util.function.BiFunction v2;
java.util.ArrayList v3;
com.google.common.collect.testing.testers.MapReplaceAllTester v0;
java.util.Map v1;
int v11, v15;
boolean v6;
java.util.Map$Entry v17;
java.util.Iterator v5;
java.util.Collection v4;
java.util.List v14, v9;
java.lang.Object v10, v12, v16, v7;
v0 := @this: com.google.common.collect.testing.testers.MapReplaceAllTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: java.util.Map getMap()>();
v2 = staticinvoke <com.google.common.collect.testing.testers.MapReplaceAllTester$lambda_testReplaceAllRotate_0__73: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapReplaceAllTester)>(v0);
interfaceinvoke v1.<java.util.Map: void replaceAll(java.util.function.BiFunction)>(v2);
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: java.util.Collection getSampleEntries()>();
v5 = interfaceinvoke v4.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = specialinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: com.google.common.collect.testing.SampleElements keys()>();
v9 = virtualinvoke v8.<com.google.common.collect.testing.SampleElements: java.util.List asList()>();
v10 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getKey()>();
v11 = interfaceinvoke v9.<java.util.List: int indexOf(java.lang.Object)>(v10);
v12 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getKey()>();
v13 = specialinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: com.google.common.collect.testing.SampleElements values()>();
v14 = virtualinvoke v13.<com.google.common.collect.testing.SampleElements: java.util.List asList()>();
v15 = v11 + 1;
v16 = interfaceinvoke v14.<java.util.List: java.lang.Object get(int)>(v15);
v17 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v12, v16);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v17);
goto label1;
label2:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: void expectContents(java.util.Collection)>(v3);
return;
}
public void testReplaceAllPreservesOrder()
{
java.util.Iterator v7;
java.util.function.BiFunction v2;
java.util.Set v6;
com.google.common.collect.testing.testers.MapReplaceAllTester v0;
java.util.List v3;
java.util.Map v1, v5;
int v4;
java.lang.Object v10, v11, v9;
boolean v8;
v0 := @this: com.google.common.collect.testing.testers.MapReplaceAllTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: java.util.Map getMap()>();
v2 = staticinvoke <com.google.common.collect.testing.testers.MapReplaceAllTester$lambda_testReplaceAllPreservesOrder_1__74: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapReplaceAllTester)>(v0);
interfaceinvoke v1.<java.util.Map: void replaceAll(java.util.function.BiFunction)>(v2);
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: java.util.List getOrderedElements()>();
v4 = 0;
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: java.util.Map getMap()>();
v6 = interfaceinvoke v5.<java.util.Map: java.util.Set keySet()>();
v7 = interfaceinvoke v6.<java.util.Set: java.util.Iterator iterator()>();
label1:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label2;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(v4);
v11 = interfaceinvoke v10.<java.util.Map$Entry: java.lang.Object getKey()>();
staticinvoke <com.google.common.collect.testing.testers.MapReplaceAllTester: void assertEquals(java.lang.Object,java.lang.Object)>(v11, v9);
v4 = v4 + 1;
goto label1;
label2:
return;
}
public void testReplaceAll_unsupported()
{
java.lang.UnsupportedOperationException v3;
com.google.common.collect.testing.testers.MapReplaceAllTester v0;
java.util.Map v1;
java.util.function.BiFunction v2;
v0 := @this: com.google.common.collect.testing.testers.MapReplaceAllTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: java.util.Map getMap()>();
v2 = staticinvoke <com.google.common.collect.testing.testers.MapReplaceAllTester$lambda_testReplaceAll_unsupported_2__75: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapReplaceAllTester)>(v0);
interfaceinvoke v1.<java.util.Map: void replaceAll(java.util.function.BiFunction)>(v2);
staticinvoke <com.google.common.collect.testing.testers.MapReplaceAllTester: void fail(java.lang.String)>("replaceAll() should throw UnsupportedOperation if a map does not support it and is not empty.");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testReplaceAll_unsupportedByEmptyCollection()
{
java.lang.UnsupportedOperationException v3;
com.google.common.collect.testing.testers.MapReplaceAllTester v0;
java.util.Map v1;
java.util.function.BiFunction v2;
v0 := @this: com.google.common.collect.testing.testers.MapReplaceAllTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: java.util.Map getMap()>();
v2 = staticinvoke <com.google.common.collect.testing.testers.MapReplaceAllTester$lambda_testReplaceAll_unsupportedByEmptyCollection_3__76: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapReplaceAllTester)>(v0);
interfaceinvoke v1.<java.util.Map: void replaceAll(java.util.function.BiFunction)>(v2);
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testReplaceAll_unsupportedNoOpFunction()
{
java.lang.UnsupportedOperationException v3;
com.google.common.collect.testing.testers.MapReplaceAllTester v0;
java.util.Map v1;
java.util.function.BiFunction v2;
v0 := @this: com.google.common.collect.testing.testers.MapReplaceAllTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: java.util.Map getMap()>();
v2 = staticinvoke <com.google.common.collect.testing.testers.MapReplaceAllTester$lambda_testReplaceAll_unsupportedNoOpFunction_4__77: java.util.function.BiFunction bootstrap$()>();
interfaceinvoke v1.<java.util.Map: void replaceAll(java.util.function.BiFunction)>(v2);
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapReplaceAllTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
}