public class com.google.common.collect.testing.testers.SetEqualsTester extends com.google.common.collect.testing.testers.AbstractSetTester
{
public void <init>()
{
com.google.common.collect.testing.testers.SetEqualsTester v0;
v0 := @this: com.google.common.collect.testing.testers.SetEqualsTester;
specialinvoke v0.<com.google.common.collect.testing.testers.AbstractSetTester: void <init>()>();
return;
}
public void testEquals_otherSetWithSameElements()
{
com.google.common.collect.testing.testers.SetEqualsTester v0;
com.google.common.collect.testing.MinimalSet v3;
java.util.Collection v2;
java.util.Set v1;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.SetEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: java.util.Set getSet()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: java.util.Collection getSampleElements()>();
v3 = staticinvoke <com.google.common.collect.testing.MinimalSet: com.google.common.collect.testing.MinimalSet 'from'(java.util.Collection)>(v2);
v4 = interfaceinvoke v1.<java.util.Set: boolean equals(java.lang.Object)>(v3);
staticinvoke <com.google.common.collect.testing.testers.SetEqualsTester: void assertTrue(java.lang.String,boolean)>("A Set should equal any other Set containing the same elements.", v4);
return;
}
public void testEquals_otherSetWithDifferentElements()
{
com.google.common.collect.testing.testers.SetEqualsTester v0;
com.google.common.collect.testing.MinimalSet v8;
com.google.common.collect.testing.SampleElements v5;
java.util.Collection v3;
java.util.Set v7;
int v1, v2;
java.lang.Object v4, v6;
boolean v9;
v0 := @this: com.google.common.collect.testing.testers.SetEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: int getNumElements()>();
v2 = v1 - 1;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: java.util.Collection getSampleElements(int)>(v2);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: java.lang.Object getSubjectGenerator()>();
v5 = interfaceinvoke v4.<com.google.common.collect.testing.OneSizeTestContainerGenerator: com.google.common.collect.testing.SampleElements samples()>();
v6 = virtualinvoke v5.<com.google.common.collect.testing.SampleElements: java.lang.Object e3()>();
interfaceinvoke v3.<java.util.Collection: boolean add(java.lang.Object)>(v6);
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: java.util.Set getSet()>();
v8 = staticinvoke <com.google.common.collect.testing.MinimalSet: com.google.common.collect.testing.MinimalSet 'from'(java.util.Collection)>(v3);
v9 = interfaceinvoke v7.<java.util.Set: boolean equals(java.lang.Object)>(v8);
staticinvoke <com.google.common.collect.testing.testers.SetEqualsTester: void assertFalse(java.lang.String,boolean)>("A Set should not equal another Set containing different elements.", v9);
return;
}
public void testEquals_containingNull()
{
com.google.common.collect.testing.testers.SetEqualsTester v0;
java.lang.Object[] v5;
com.google.common.collect.testing.MinimalSet v8;
java.util.Collection v3;
java.util.Set v7;
int v1, v2;
java.lang.Object v4, v6;
boolean v9;
v0 := @this: com.google.common.collect.testing.testers.SetEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: int getNumElements()>();
v2 = v1 - 1;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: java.util.Collection getSampleElements(int)>(v2);
interfaceinvoke v3.<java.util.Collection: boolean add(java.lang.Object)>(null);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: java.lang.Object getSubjectGenerator()>();
v5 = interfaceinvoke v3.<java.util.Collection: java.lang.Object[] toArray()>();
v6 = interfaceinvoke v4.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v5);
v0.<com.google.common.collect.testing.testers.SetEqualsTester: java.util.Collection collection> = v6;
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: java.util.Set getSet()>();
v8 = staticinvoke <com.google.common.collect.testing.MinimalSet: com.google.common.collect.testing.MinimalSet 'from'(java.util.Collection)>(v3);
v9 = interfaceinvoke v7.<java.util.Set: boolean equals(java.lang.Object)>(v8);
staticinvoke <com.google.common.collect.testing.testers.SetEqualsTester: void assertTrue(java.lang.String,boolean)>("A Set should equal any other Set containing the same elements, even if some elements are null.", v9);
return;
}
public void testEquals_otherContainsNull()
{
com.google.common.collect.testing.testers.SetEqualsTester v0;
com.google.common.collect.testing.MinimalSet v4;
java.util.Collection v3;
int v1, v2;
java.util.Set v5;
boolean v6;
v0 := @this: com.google.common.collect.testing.testers.SetEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: int getNumElements()>();
v2 = v1 - 1;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: java.util.Collection getSampleElements(int)>(v2);
interfaceinvoke v3.<java.util.Collection: boolean add(java.lang.Object)>(null);
v4 = staticinvoke <com.google.common.collect.testing.MinimalSet: com.google.common.collect.testing.MinimalSet 'from'(java.util.Collection)>(v3);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: java.util.Set getSet()>();
v6 = interfaceinvoke v5.<java.util.Set: boolean equals(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.testers.SetEqualsTester: void assertFalse(java.lang.String,boolean)>("Two Sets should not be equal if exactly one of them contains null.", v6);
return;
}
public void testEquals_smallerSet()
{
com.google.common.collect.testing.testers.SetEqualsTester v0;
com.google.common.collect.testing.MinimalSet v5;
java.util.Collection v3;
int v1, v2;
java.util.Set v4;
boolean v6;
v0 := @this: com.google.common.collect.testing.testers.SetEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: int getNumElements()>();
v2 = v1 - 1;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: java.util.Collection getSampleElements(int)>(v2);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: java.util.Set getSet()>();
v5 = staticinvoke <com.google.common.collect.testing.MinimalSet: com.google.common.collect.testing.MinimalSet 'from'(java.util.Collection)>(v3);
v6 = interfaceinvoke v4.<java.util.Set: boolean equals(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.testers.SetEqualsTester: void assertFalse(java.lang.String,boolean)>("Sets of different sizes should not be equal.", v6);
return;
}
public void testEquals_largerSet()
{
com.google.common.collect.testing.testers.SetEqualsTester v0;
com.google.common.collect.testing.MinimalSet v5;
java.util.Collection v3;
int v1, v2;
java.util.Set v4;
boolean v6;
v0 := @this: com.google.common.collect.testing.testers.SetEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: int getNumElements()>();
v2 = v1 + 1;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: java.util.Collection getSampleElements(int)>(v2);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: java.util.Set getSet()>();
v5 = staticinvoke <com.google.common.collect.testing.MinimalSet: com.google.common.collect.testing.MinimalSet 'from'(java.util.Collection)>(v3);
v6 = interfaceinvoke v4.<java.util.Set: boolean equals(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.testers.SetEqualsTester: void assertFalse(java.lang.String,boolean)>("Sets of different sizes should not be equal.", v6);
return;
}
public void testEquals_list()
{
java.util.List v3;
com.google.common.collect.testing.testers.SetEqualsTester v0;
java.util.Set v1, v2;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.SetEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: java.util.Set getSet()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetEqualsTester: java.util.Set getSet()>();
v3 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.List copyToList(java.lang.Iterable)>(v2);
v4 = interfaceinvoke v1.<java.util.Set: boolean equals(java.lang.Object)>(v3);
staticinvoke <com.google.common.collect.testing.testers.SetEqualsTester: void assertFalse(java.lang.String,boolean)>("A List should never equal a Set.", v4);
return;
}
}