public abstract class com.google.common.testing.AbstractPackageSanityTests extends junit.framework.TestCase
{
public static final com.google.common.base.Predicate UNDERSCORE_IN_NAME;
private static final com.google.common.collect.ImmutableList NULL_TEST_METHOD_NAMES;
private static final com.google.common.collect.ImmutableList SERIALIZABLE_TEST_METHOD_NAMES;
private static final com.google.common.collect.ImmutableList EQUALS_TEST_METHOD_NAMES;
private static final com.google.common.testing.AbstractPackageSanityTests$Chopper TEST_SUFFIX;
private final java.util.logging.Logger logger;
private final com.google.common.testing.ClassSanityTester tester;
private com.google.common.testing.NullPointerTester$Visibility visibility;
private com.google.common.base.Predicate classFilter;
public void <init>()
{
com.google.common.base.Predicate v6;
com.google.common.testing.AbstractPackageSanityTests v0;
java.lang.Class v1;
java.lang.String v2;
java.util.logging.Logger v3;
com.google.common.testing.ClassSanityTester v4;
com.google.common.testing.NullPointerTester$Visibility v5;
v0 := @this: com.google.common.testing.AbstractPackageSanityTests;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(v2);
v0.<com.google.common.testing.AbstractPackageSanityTests: java.util.logging.Logger logger> = v3;
v4 = new com.google.common.testing.ClassSanityTester;
specialinvoke v4.<com.google.common.testing.ClassSanityTester: void <init>()>();
v0.<com.google.common.testing.AbstractPackageSanityTests: com.google.common.testing.ClassSanityTester tester> = v4;
v5 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PACKAGE>;
v0.<com.google.common.testing.AbstractPackageSanityTests: com.google.common.testing.NullPointerTester$Visibility visibility> = v5;
v6 = staticinvoke <com.google.common.testing.AbstractPackageSanityTests$lambda_new_1__78: com.google.common.base.Predicate bootstrap$(com.google.common.testing.AbstractPackageSanityTests)>(v0);
v0.<com.google.common.testing.AbstractPackageSanityTests: com.google.common.base.Predicate classFilter> = v6;
return;
}
protected final void publicApiOnly()
{
com.google.common.testing.NullPointerTester$Visibility v1;
com.google.common.testing.AbstractPackageSanityTests v0;
v0 := @this: com.google.common.testing.AbstractPackageSanityTests;
v1 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PUBLIC>;
v0.<com.google.common.testing.AbstractPackageSanityTests: com.google.common.testing.NullPointerTester$Visibility visibility> = v1;
return;
}
public void testSerializable() throws java.lang.Exception
{
java.lang.Throwable v12;
java.util.Iterator v4;
com.google.common.testing.AbstractPackageSanityTests v0;
junit.framework.AssertionFailedError v14;
java.util.List v1, v3;
com.google.common.collect.ImmutableList v13, v2;
java.lang.Class v7;
java.lang.Object v10, v6;
com.google.common.testing.ClassSanityTester v9;
boolean v11, v5, v8;
v0 := @this: com.google.common.testing.AbstractPackageSanityTests;
v1 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTests: java.util.List loadClassesInPackage()>();
v2 = <com.google.common.testing.AbstractPackageSanityTests: com.google.common.collect.ImmutableList SERIALIZABLE_TEST_METHOD_NAMES>;
v3 = virtualinvoke v0.<com.google.common.testing.AbstractPackageSanityTests: java.util.List findClassesToTest(java.lang.Iterable,java.lang.Iterable)>(v1, v2);
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label6;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = class "Ljava/io/Serializable;";
v8 = virtualinvoke v7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v6);
if v8 == 0 goto label1;
label2:
v9 = v0.<com.google.common.testing.AbstractPackageSanityTests: com.google.common.testing.ClassSanityTester tester>;
v10 = virtualinvoke v9.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(v6);
if v10 == null goto label1;
v11 = staticinvoke <com.google.common.testing.AbstractPackageSanityTests: boolean isEqualsDefined(java.lang.Class)>(v6);
if v11 == 0 goto label3;
staticinvoke <com.google.common.testing.SerializableTester: java.lang.Object reserializeAndAssert(java.lang.Object)>(v10);
goto label1;
label3:
staticinvoke <com.google.common.testing.SerializableTester: java.lang.Object reserialize(java.lang.Object)>(v10);
label4:
goto label1;
label5:
v12 := @caughtexception;
v13 = <com.google.common.testing.AbstractPackageSanityTests: com.google.common.collect.ImmutableList SERIALIZABLE_TEST_METHOD_NAMES>;
v14 = staticinvoke <com.google.common.testing.AbstractPackageSanityTests: junit.framework.AssertionFailedError sanityError(java.lang.Class,java.util.List,java.lang.String,java.lang.Throwable)>(v6, v13, "serializable test", v12);
throw v14;
label6:
return;
catch java.lang.Throwable from label2 to label4 with label5;
}
public void testNulls() throws java.lang.Exception
{
java.lang.Throwable v9;
java.util.Iterator v4;
com.google.common.testing.AbstractPackageSanityTests v0;
junit.framework.AssertionFailedError v11;
com.google.common.testing.NullPointerTester$Visibility v8;
java.util.List v1, v3;
com.google.common.collect.ImmutableList v10, v2;
java.lang.Object v6;
com.google.common.testing.ClassSanityTester v7;
boolean v5;
v0 := @this: com.google.common.testing.AbstractPackageSanityTests;
v1 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTests: java.util.List loadClassesInPackage()>();
v2 = <com.google.common.testing.AbstractPackageSanityTests: com.google.common.collect.ImmutableList NULL_TEST_METHOD_NAMES>;
v3 = virtualinvoke v0.<com.google.common.testing.AbstractPackageSanityTests: java.util.List findClassesToTest(java.lang.Iterable,java.lang.Iterable)>(v1, v2);
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label5;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
label2:
v7 = v0.<com.google.common.testing.AbstractPackageSanityTests: com.google.common.testing.ClassSanityTester tester>;
v8 = v0.<com.google.common.testing.AbstractPackageSanityTests: com.google.common.testing.NullPointerTester$Visibility visibility>;
virtualinvoke v7.<com.google.common.testing.ClassSanityTester: void doTestNulls(java.lang.Class,com.google.common.testing.NullPointerTester$Visibility)>(v6, v8);
label3:
goto label1;
label4:
v9 := @caughtexception;
v10 = <com.google.common.testing.AbstractPackageSanityTests: com.google.common.collect.ImmutableList NULL_TEST_METHOD_NAMES>;
v11 = staticinvoke <com.google.common.testing.AbstractPackageSanityTests: junit.framework.AssertionFailedError sanityError(java.lang.Class,java.util.List,java.lang.String,java.lang.Throwable)>(v6, v10, "nulls test", v9);
throw v11;
label5:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
public void testEquals() throws java.lang.Exception
{
java.lang.Throwable v10;
java.util.Iterator v4;
com.google.common.testing.AbstractPackageSanityTests v0;
junit.framework.AssertionFailedError v12;
java.util.List v1, v3;
com.google.common.collect.ImmutableList v11, v2;
java.lang.Object v6;
com.google.common.testing.ClassSanityTester v9;
boolean v5, v7, v8;
v0 := @this: com.google.common.testing.AbstractPackageSanityTests;
v1 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTests: java.util.List loadClassesInPackage()>();
v2 = <com.google.common.testing.AbstractPackageSanityTests: com.google.common.collect.ImmutableList EQUALS_TEST_METHOD_NAMES>;
v3 = virtualinvoke v0.<com.google.common.testing.AbstractPackageSanityTests: java.util.List findClassesToTest(java.lang.Iterable,java.lang.Iterable)>(v1, v2);
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label5;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<java.lang.Class: boolean isEnum()>();
if v7 != 0 goto label1;
v8 = staticinvoke <com.google.common.testing.AbstractPackageSanityTests: boolean isEqualsDefined(java.lang.Class)>(v6);
if v8 == 0 goto label1;
label2:
v9 = v0.<com.google.common.testing.AbstractPackageSanityTests: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v9.<com.google.common.testing.ClassSanityTester: void doTestEquals(java.lang.Class)>(v6);
label3:
goto label1;
label4:
v10 := @caughtexception;
v11 = <com.google.common.testing.AbstractPackageSanityTests: com.google.common.collect.ImmutableList EQUALS_TEST_METHOD_NAMES>;
v12 = staticinvoke <com.google.common.testing.AbstractPackageSanityTests: junit.framework.AssertionFailedError sanityError(java.lang.Class,java.util.List,java.lang.String,java.lang.Throwable)>(v6, v11, "equals test", v10);
throw v12;
label5:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
protected final void setDefault(java.lang.Class, java.lang.Object)
{
com.google.common.testing.AbstractPackageSanityTests v0;
java.lang.Class v1;
java.lang.Object v2;
com.google.common.testing.ClassSanityTester v3;
v0 := @this: com.google.common.testing.AbstractPackageSanityTests;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.Object;
v3 = v0.<com.google.common.testing.AbstractPackageSanityTests: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v3.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDefault(java.lang.Class,java.lang.Object)>(v1, v2);
return;
}
protected final void setDistinctValues(java.lang.Class, java.lang.Object, java.lang.Object)
{
com.google.common.testing.AbstractPackageSanityTests v0;
java.lang.Class v1;
java.lang.Object v2, v3;
com.google.common.testing.ClassSanityTester v4;
v0 := @this: com.google.common.testing.AbstractPackageSanityTests;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 = v0.<com.google.common.testing.AbstractPackageSanityTests: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v4.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDistinctValues(java.lang.Class,java.lang.Object,java.lang.Object)>(v1, v2, v3);
return;
}
protected final void ignoreClasses(com.google.common.base.Predicate)
{
com.google.common.base.Predicate v1, v2, v3, v4;
com.google.common.testing.AbstractPackageSanityTests v0;
v0 := @this: com.google.common.testing.AbstractPackageSanityTests;
v1 := @parameter0: com.google.common.base.Predicate;
v2 = v0.<com.google.common.testing.AbstractPackageSanityTests: com.google.common.base.Predicate classFilter>;
v3 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate not(com.google.common.base.Predicate)>(v1);
v4 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate and(com.google.common.base.Predicate,com.google.common.base.Predicate)>(v2, v3);
v0.<com.google.common.testing.AbstractPackageSanityTests: com.google.common.base.Predicate classFilter> = v4;
return;
}
private static junit.framework.AssertionFailedError sanityError(java.lang.Class, java.util.List, java.lang.String, java.lang.Throwable)
{
java.lang.Throwable v3;
java.lang.Object[] v5;
junit.framework.AssertionFailedError v9;
java.util.List v1;
java.util.Locale v4;
java.lang.Class v0;
java.lang.Object v6;
java.lang.String v2, v7, v8;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.util.List;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: java.lang.Throwable;
v4 = <java.util.Locale: java.util.Locale ROOT>;
v5 = newarray (java.lang.Object)[4];
v5[0] = v2;
v5[1] = v0;
v6 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(0);
v5[2] = v6;
v7 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v5[3] = v7;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v4, "Error in automated %s of %s\nIf the class is better tested explicitly, you can add %s() to %sTest", v5);
v9 = new junit.framework.AssertionFailedError;
specialinvoke v9.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>(v8);
virtualinvoke v9.<junit.framework.AssertionFailedError: java.lang.Throwable initCause(java.lang.Throwable)>(v3);
return v9;
}
java.util.List findClassesToTest(java.lang.Iterable, java.lang.Iterable)
{
com.google.common.testing.AbstractPackageSanityTests v0;
java.lang.Iterable v1, v2, v21;
java.util.ArrayList v19;
com.google.common.collect.HashMultimap v8;
com.google.common.base.Optional v15;
java.lang.String v14, v7;
java.util.LinkedHashSet v9;
boolean v11, v16, v23, v27, v29, v5;
java.util.Iterator v10, v22, v26, v4;
java.util.Collection v25;
java.util.TreeMap v3;
com.google.common.base.Predicate v20;
com.google.common.testing.AbstractPackageSanityTests$Chopper v13;
java.lang.Object v12, v17, v18, v24, v28, v6;
v0 := @this: com.google.common.testing.AbstractPackageSanityTests;
v1 := @parameter0: java.lang.Iterable;
v2 := @parameter1: java.lang.Iterable;
v3 = staticinvoke <com.google.common.collect.Maps: java.util.TreeMap newTreeMap()>();
v4 = interfaceinvoke v1.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<java.lang.Class: java.lang.String getName()>();
virtualinvoke v3.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v7, v6);
goto label1;
label2:
v8 = staticinvoke <com.google.common.collect.HashMultimap: com.google.common.collect.HashMultimap create()>();
v9 = staticinvoke <com.google.common.collect.Sets: java.util.LinkedHashSet newLinkedHashSet()>();
v10 = interfaceinvoke v1.<java.lang.Iterable: java.util.Iterator iterator()>();
label3:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label5;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
v13 = <com.google.common.testing.AbstractPackageSanityTests: com.google.common.testing.AbstractPackageSanityTests$Chopper TEST_SUFFIX>;
v14 = virtualinvoke v12.<java.lang.Class: java.lang.String getName()>();
v15 = virtualinvoke v13.<com.google.common.testing.AbstractPackageSanityTests$Chopper: com.google.common.base.Optional chop(java.lang.String)>(v14);
v16 = virtualinvoke v15.<com.google.common.base.Optional: boolean isPresent()>();
if v16 == 0 goto label4;
v17 = virtualinvoke v15.<com.google.common.base.Optional: java.lang.Object get()>();
v18 = virtualinvoke v3.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(v17);
if v18 == null goto label3;
interfaceinvoke v8.<com.google.common.collect.Multimap: boolean put(java.lang.Object,java.lang.Object)>(v18, v12);
goto label3;
label4:
virtualinvoke v9.<java.util.LinkedHashSet: boolean add(java.lang.Object)>(v12);
goto label3;
label5:
v19 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();
v20 = v0.<com.google.common.testing.AbstractPackageSanityTests: com.google.common.base.Predicate classFilter>;
v21 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable filter(java.lang.Iterable,com.google.common.base.Predicate)>(v9, v20);
v22 = interfaceinvoke v21.<java.lang.Iterable: java.util.Iterator iterator()>();
label6:
v23 = interfaceinvoke v22.<java.util.Iterator: boolean hasNext()>();
if v23 == 0 goto label9;
v24 = interfaceinvoke v22.<java.util.Iterator: java.lang.Object next()>();
v25 = interfaceinvoke v8.<com.google.common.collect.Multimap: java.util.Collection get(java.lang.Object)>(v24);
v26 = interfaceinvoke v25.<java.util.Collection: java.util.Iterator iterator()>();
label7:
v27 = interfaceinvoke v26.<java.util.Iterator: boolean hasNext()>();
if v27 == 0 goto label8;
v28 = interfaceinvoke v26.<java.util.Iterator: java.lang.Object next()>();
v29 = staticinvoke <com.google.common.testing.AbstractPackageSanityTests: boolean hasTest(java.lang.Class,java.lang.Iterable)>(v28, v2);
if v29 != 0 goto label6;
goto label7;
label8:
interfaceinvoke v19.<java.util.List: boolean add(java.lang.Object)>(v24);
goto label6;
label9:
return v19;
}
private java.util.List loadClassesInPackage() throws java.io.IOException
{
com.google.common.testing.AbstractPackageSanityTests v0;
java.util.ArrayList v1;
java.util.logging.Level v15;
com.google.common.reflect.ClassPath v7;
java.lang.String v16, v4;
java.lang.NoClassDefFoundError v13;
boolean v10, v17;
com.google.common.collect.ImmutableSet v8;
java.lang.Package v3;
java.util.logging.Logger v14;
java.lang.Class v12, v2, v5;
java.lang.Object v11;
com.google.common.collect.UnmodifiableIterator v9;
java.lang.ClassLoader v6;
v0 := @this: com.google.common.testing.AbstractPackageSanityTests;
v1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v2.<java.lang.Class: java.lang.Package getPackage()>();
v4 = virtualinvoke v3.<java.lang.Package: java.lang.String getName()>();
v5 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v7 = staticinvoke <com.google.common.reflect.ClassPath: com.google.common.reflect.ClassPath 'from'(java.lang.ClassLoader)>(v6);
v8 = virtualinvoke v7.<com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableSet getTopLevelClasses(java.lang.String)>(v4);
v9 = virtualinvoke v8.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();
label1:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label6;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
label2:
v12 = virtualinvoke v11.<com.google.common.reflect.ClassPath$ClassInfo: java.lang.Class load()>();
label3:
goto label5;
label4:
v13 := @caughtexception;
v14 = v0.<com.google.common.testing.AbstractPackageSanityTests: java.util.logging.Logger logger>;
v15 = <java.util.logging.Level: java.util.logging.Level SEVERE>;
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.google.common.reflect.ClassPath$ClassInfo)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot load class \u0001, skipping...");
virtualinvoke v14.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>(v15, v16, v13);
goto label1;
label5:
v17 = virtualinvoke v12.<java.lang.Class: boolean isInterface()>();
if v17 != 0 goto label1;
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v12);
goto label1;
label6:
return v1;
catch java.lang.NoClassDefFoundError from label2 to label3 with label4;
}
private static boolean hasTest(java.lang.Class, java.lang.Iterable)
{
java.util.Iterator v2;
java.lang.NoSuchMethodException v6;
java.lang.Class[] v5;
java.lang.Class v0;
java.lang.Object v4;
java.lang.Iterable v1;
boolean v3;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Iterable;
v2 = interfaceinvoke v1.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label5;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
label2:
v5 = newarray (java.lang.Class)[0];
virtualinvoke v0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(v4, v5);
label3:
return 1;
label4:
v6 := @caughtexception;
goto label1;
label5:
return 0;
catch java.lang.NoSuchMethodException from label2 to label3 with label4;
}
private static boolean isEqualsDefined(java.lang.Class)
{
java.lang.NoSuchMethodException v5;
java.lang.Class[] v1;
java.lang.Class v0;
java.lang.reflect.Method v2;
boolean v3, v4;
v0 := @parameter0: java.lang.Class;
label1:
v1 = newarray (java.lang.Class)[1];
v1[0] = class "Ljava/lang/Object;";
v2 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("equals", v1);
v3 = virtualinvoke v2.<java.lang.reflect.Method: boolean isSynthetic()>();
if v3 != 0 goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
label4:
v5 := @caughtexception;
return 0;
catch java.lang.NoSuchMethodException from label1 to label3 with label4;
}
static void <clinit>()
{
com.google.common.collect.ImmutableList v1, v2, v3;
com.google.common.base.Predicate v0;
com.google.common.testing.AbstractPackageSanityTests$Chopper v10, v4, v5, v6, v7, v8, v9;
v0 = staticinvoke <com.google.common.testing.AbstractPackageSanityTests$lambda_static_0__79: com.google.common.base.Predicate bootstrap$()>();
<com.google.common.testing.AbstractPackageSanityTests: com.google.common.base.Predicate UNDERSCORE_IN_NAME> = v0;
v1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>("testNulls", "testNull", "testNullPointers", "testNullPointer", "testNullPointerExceptions", "testNullPointerException");
<com.google.common.testing.AbstractPackageSanityTests: com.google.common.collect.ImmutableList NULL_TEST_METHOD_NAMES> = v1;
v2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>("testSerializable", "testSerialization", "testEqualsAndSerializable", "testEqualsAndSerialization");
<com.google.common.testing.AbstractPackageSanityTests: com.google.common.collect.ImmutableList SERIALIZABLE_TEST_METHOD_NAMES> = v2;
v3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>("testEquals", "testEqualsAndHashCode", "testEqualsAndSerializable", "testEqualsAndSerialization", "testEquality");
<com.google.common.testing.AbstractPackageSanityTests: com.google.common.collect.ImmutableList EQUALS_TEST_METHOD_NAMES> = v3;
v4 = staticinvoke <com.google.common.testing.AbstractPackageSanityTests$Chopper: com.google.common.testing.AbstractPackageSanityTests$Chopper suffix(java.lang.String)>("Test");
v5 = staticinvoke <com.google.common.testing.AbstractPackageSanityTests$Chopper: com.google.common.testing.AbstractPackageSanityTests$Chopper suffix(java.lang.String)>("Tests");
v6 = virtualinvoke v4.<com.google.common.testing.AbstractPackageSanityTests$Chopper: com.google.common.testing.AbstractPackageSanityTests$Chopper or(com.google.common.testing.AbstractPackageSanityTests$Chopper)>(v5);
v7 = staticinvoke <com.google.common.testing.AbstractPackageSanityTests$Chopper: com.google.common.testing.AbstractPackageSanityTests$Chopper suffix(java.lang.String)>("TestCase");
v8 = virtualinvoke v6.<com.google.common.testing.AbstractPackageSanityTests$Chopper: com.google.common.testing.AbstractPackageSanityTests$Chopper or(com.google.common.testing.AbstractPackageSanityTests$Chopper)>(v7);
v9 = staticinvoke <com.google.common.testing.AbstractPackageSanityTests$Chopper: com.google.common.testing.AbstractPackageSanityTests$Chopper suffix(java.lang.String)>("TestSuite");
v10 = virtualinvoke v8.<com.google.common.testing.AbstractPackageSanityTests$Chopper: com.google.common.testing.AbstractPackageSanityTests$Chopper or(com.google.common.testing.AbstractPackageSanityTests$Chopper)>(v9);
<com.google.common.testing.AbstractPackageSanityTests: com.google.common.testing.AbstractPackageSanityTests$Chopper TEST_SUFFIX> = v10;
return;
}
}