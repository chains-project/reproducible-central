enum class com.google.common.testing.CollectorTester$CollectStrategy$2 extends com.google.common.testing.CollectorTester$CollectStrategy
{
private void <init>(java.lang.String, int)
{
com.google.common.testing.CollectorTester$CollectStrategy$2 v0;
int v2;
java.lang.String v1;
v0 := @this: com.google.common.testing.CollectorTester$CollectStrategy$2;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
specialinvoke v0.<com.google.common.testing.CollectorTester$CollectStrategy: void <init>(java.lang.String,int)>(v1, v2);
return;
}
final java.lang.Object result(java.util.stream.Collector, java.lang.Iterable)
{
java.util.Iterator v5;
com.google.common.testing.CollectorTester$CollectStrategy$2 v0;
java.util.function.Supplier v3, v8;
java.lang.Iterable v2;
java.util.function.BinaryOperator v11;
java.util.function.BiConsumer v10;
java.lang.Object v4, v7, v9;
java.util.stream.Collector v1;
boolean v6;
v0 := @this: com.google.common.testing.CollectorTester$CollectStrategy$2;
v1 := @parameter0: java.util.stream.Collector;
v2 := @parameter1: java.lang.Iterable;
v3 = interfaceinvoke v1.<java.util.stream.Collector: java.util.function.Supplier supplier()>();
v4 = interfaceinvoke v3.<java.util.function.Supplier: java.lang.Object get()>();
v5 = interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v1.<java.util.stream.Collector: java.util.function.Supplier supplier()>();
v9 = interfaceinvoke v8.<java.util.function.Supplier: java.lang.Object get()>();
v10 = interfaceinvoke v1.<java.util.stream.Collector: java.util.function.BiConsumer accumulator()>();
interfaceinvoke v10.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(v9, v7);
v11 = interfaceinvoke v1.<java.util.stream.Collector: java.util.function.BinaryOperator combiner()>();
v4 = interfaceinvoke v11.<java.util.function.BinaryOperator: java.lang.Object apply(java.lang.Object,java.lang.Object)>(v4, v9);
goto label1;
label2:
return v4;
}
}