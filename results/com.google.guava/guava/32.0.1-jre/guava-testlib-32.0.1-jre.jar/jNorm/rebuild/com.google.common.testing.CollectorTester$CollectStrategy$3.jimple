enum class com.google.common.testing.CollectorTester$CollectStrategy$3 extends com.google.common.testing.CollectorTester$CollectStrategy
{
private void <init>(java.lang.String, int)
{
int v2;
com.google.common.testing.CollectorTester$CollectStrategy$3 v0;
java.lang.String v1;
v0 := @this: com.google.common.testing.CollectorTester$CollectStrategy$3;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
specialinvoke v0.<com.google.common.testing.CollectorTester$CollectStrategy: void <init>(java.lang.String,int)>(v1, v2);
return;
}
final java.lang.Object result(java.util.stream.Collector, java.lang.Iterable)
{
java.util.function.Supplier v10, v7;
java.lang.Iterable v2;
java.util.ArrayList v3;
int v12;
java.util.function.BiConsumer v9;
java.util.stream.Collector v1;
boolean v5;
java.util.Iterator v4;
com.google.common.testing.CollectorTester$CollectStrategy$3 v0;
java.util.function.BinaryOperator v15;
java.lang.Object v11, v13, v14, v16, v17, v6, v8;
v0 := @this: com.google.common.testing.CollectorTester$CollectStrategy$3;
v1 := @parameter0: java.util.stream.Collector;
v2 := @parameter1: java.lang.Iterable;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v4 = interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v1.<java.util.stream.Collector: java.util.function.Supplier supplier()>();
v8 = interfaceinvoke v7.<java.util.function.Supplier: java.lang.Object get()>();
v9 = interfaceinvoke v1.<java.util.stream.Collector: java.util.function.BiConsumer accumulator()>();
interfaceinvoke v9.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(v8, v6);
virtualinvoke v0.<com.google.common.testing.CollectorTester$CollectStrategy$3: void push(java.util.List,java.lang.Object)>(v3, v8);
goto label1;
label2:
v10 = interfaceinvoke v1.<java.util.stream.Collector: java.util.function.Supplier supplier()>();
v11 = interfaceinvoke v10.<java.util.function.Supplier: java.lang.Object get()>();
virtualinvoke v0.<com.google.common.testing.CollectorTester$CollectStrategy$3: void push(java.util.List,java.lang.Object)>(v3, v11);
label3:
v12 = interfaceinvoke v3.<java.util.List: int size()>();
if v12 <= 1 goto label4;
v13 = virtualinvoke v0.<com.google.common.testing.CollectorTester$CollectStrategy$3: java.lang.Object pop(java.util.List)>(v3);
v14 = virtualinvoke v0.<com.google.common.testing.CollectorTester$CollectStrategy$3: java.lang.Object pop(java.util.List)>(v3);
v15 = interfaceinvoke v1.<java.util.stream.Collector: java.util.function.BinaryOperator combiner()>();
v16 = interfaceinvoke v15.<java.util.function.BinaryOperator: java.lang.Object apply(java.lang.Object,java.lang.Object)>(v14, v13);
virtualinvoke v0.<com.google.common.testing.CollectorTester$CollectStrategy$3: void push(java.util.List,java.lang.Object)>(v3, v16);
goto label3;
label4:
v17 = virtualinvoke v0.<com.google.common.testing.CollectorTester$CollectStrategy$3: java.lang.Object pop(java.util.List)>(v3);
return v17;
}
void push(java.util.List, java.lang.Object)
{
com.google.common.testing.CollectorTester$CollectStrategy$3 v0;
java.lang.Object v2;
java.util.List v1;
v0 := @this: com.google.common.testing.CollectorTester$CollectStrategy$3;
v1 := @parameter0: java.util.List;
v2 := @parameter1: java.lang.Object;
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v2);
return;
}
java.lang.Object pop(java.util.List)
{
java.util.List v1;
int v2, v3;
com.google.common.testing.CollectorTester$CollectStrategy$3 v0;
java.lang.Object v4;
v0 := @this: com.google.common.testing.CollectorTester$CollectStrategy$3;
v1 := @parameter0: java.util.List;
v2 = interfaceinvoke v1.<java.util.List: int size()>();
v3 = v2 - 1;
v4 = interfaceinvoke v1.<java.util.List: java.lang.Object remove(int)>(v3);
return v4;
}
}