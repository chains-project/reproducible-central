class com.google.common.testing.ForwardingWrapperTester$1 extends com.google.common.reflect.AbstractInvocationHandler
{
final java.lang.RuntimeException val$exception;
void <init>(java.lang.RuntimeException)
{
java.lang.RuntimeException v1;
com.google.common.testing.ForwardingWrapperTester$1 v0;
v0 := @this: com.google.common.testing.ForwardingWrapperTester$1;
v1 := @parameter0: java.lang.RuntimeException;
v0.<com.google.common.testing.ForwardingWrapperTester$1: java.lang.RuntimeException val$exception> = v1;
specialinvoke v0.<com.google.common.reflect.AbstractInvocationHandler: void <init>()>();
return;
}
protected java.lang.Object handleInvocation(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
{
java.lang.Object[] v3;
com.google.common.testing.ForwardingWrapperTester$1 v0;
java.lang.Object v1;
java.lang.RuntimeException v4;
java.lang.reflect.Method v2;
v0 := @this: com.google.common.testing.ForwardingWrapperTester$1;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.reflect.Method;
v3 := @parameter2: java.lang.Object[];
v4 = v0.<com.google.common.testing.ForwardingWrapperTester$1: java.lang.RuntimeException val$exception>;
throw v4;
}
}