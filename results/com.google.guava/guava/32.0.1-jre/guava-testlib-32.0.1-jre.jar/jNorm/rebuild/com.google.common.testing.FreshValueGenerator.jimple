class com.google.common.testing.FreshValueGenerator extends java.lang.Object
{
private static final com.google.common.collect.ImmutableMap GENERATORS;
private static final com.google.common.collect.ImmutableMap EMPTY_GENERATORS;
private final java.util.concurrent.atomic.AtomicInteger freshness;
private final com.google.common.collect.ListMultimap sampleInstances;
private final java.util.Map emptyInstanceGenerated;
void <init>()
{
com.google.common.collect.ArrayListMultimap v2;
java.util.concurrent.atomic.AtomicInteger v1;
java.util.HashMap v3;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);
v0.<com.google.common.testing.FreshValueGenerator: java.util.concurrent.atomic.AtomicInteger freshness> = v1;
v2 = staticinvoke <com.google.common.collect.ArrayListMultimap: com.google.common.collect.ArrayListMultimap create()>();
v0.<com.google.common.testing.FreshValueGenerator: com.google.common.collect.ListMultimap sampleInstances> = v2;
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>()>();
v0.<com.google.common.testing.FreshValueGenerator: java.util.Map emptyInstanceGenerated> = v3;
return;
}
final void addSampleInstances(java.lang.Class, java.lang.Iterable)
{
com.google.common.collect.ListMultimap v3;
java.lang.Class v1;
java.lang.Object v4, v5;
com.google.common.testing.FreshValueGenerator v0;
java.lang.Iterable v2;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.Iterable;
v3 = v0.<com.google.common.testing.FreshValueGenerator: com.google.common.collect.ListMultimap sampleInstances>;
v4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v1);
v5 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v2);
interfaceinvoke v3.<com.google.common.collect.ListMultimap: boolean putAll(java.lang.Object,java.lang.Iterable)>(v4, v5);
return;
}
final java.lang.Object generateFresh(com.google.common.reflect.TypeToken)
{
java.util.concurrent.atomic.AtomicInteger v3;
java.lang.Object v2;
com.google.common.reflect.TypeToken v1;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 := @parameter0: com.google.common.reflect.TypeToken;
v2 = specialinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.Object generate(com.google.common.reflect.TypeToken)>(v1);
if v2 == null goto label1;
v3 = v0.<com.google.common.testing.FreshValueGenerator: java.util.concurrent.atomic.AtomicInteger freshness>;
virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
label1:
return v2;
}
final java.lang.Object generateFresh(java.lang.Class)
{
java.lang.Class v1, v2;
java.lang.Object v4, v5;
com.google.common.reflect.TypeToken v3;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 := @parameter0: java.lang.Class;
v2 = staticinvoke <com.google.common.primitives.Primitives: java.lang.Class wrap(java.lang.Class)>(v1);
v3 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.Class)>(v1);
v4 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(com.google.common.reflect.TypeToken)>(v3);
v5 = virtualinvoke v2.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v4);
return v5;
}
final java.lang.Object newFreshProxy(java.lang.Class)
{
java.util.concurrent.atomic.AtomicInteger v3;
java.lang.Class v1;
java.lang.Object v2;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 := @parameter0: java.lang.Class;
v2 = specialinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.Object newProxy(java.lang.Class)>(v1);
v3 = v0.<com.google.common.testing.FreshValueGenerator: java.util.concurrent.atomic.AtomicInteger freshness>;
virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
return v2;
}
private java.lang.Object generate(com.google.common.reflect.TypeToken)
{
com.google.common.collect.ListMultimap v3;
java.lang.Integer v34;
java.util.concurrent.atomic.AtomicInteger v24, v32;
java.util.Map v17, v20, v30;
boolean v19, v6, v9;
com.google.common.collect.ImmutableMap v15, v35;
java.util.List v4;
java.lang.reflect.Type v18, v21, v31;
com.google.common.reflect.Invokable v37;
com.google.common.testing.FreshValueGenerator v0;
java.lang.Object[] v26, v28, v47, v7;
com.google.common.reflect.TypeToken v1, v10, v45;
java.util.ArrayList v40;
com.google.common.collect.ImmutableList v38;
int v23, v25, v33, v39, v42, v43;
java.lang.reflect.TypeVariable v44;
java.lang.reflect.TypeVariable[] v41;
java.lang.Class v12, v2;
java.lang.Object v11, v13, v14, v16, v22, v27, v29, v36, v46, v48, v49, v5, v8;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 := @parameter0: com.google.common.reflect.TypeToken;
v2 = virtualinvoke v1.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();
v3 = v0.<com.google.common.testing.FreshValueGenerator: com.google.common.collect.ListMultimap sampleInstances>;
v4 = interfaceinvoke v3.<com.google.common.collect.ListMultimap: java.util.List get(java.lang.Object)>(v2);
v5 = specialinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.Object pickInstance(java.util.Collection,java.lang.Object)>(v4, null);
if v5 == null goto label1;
return v5;
label1:
v6 = virtualinvoke v2.<java.lang.Class: boolean isEnum()>();
if v6 == 0 goto label2;
v7 = virtualinvoke v2.<java.lang.Class: java.lang.Object[] getEnumConstants()>();
v8 = specialinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.Object pickInstance(java.lang.Object[],java.lang.Object)>(v7, null);
return v8;
label2:
v9 = virtualinvoke v1.<com.google.common.reflect.TypeToken: boolean isArray()>();
if v9 == 0 goto label3;
v10 = virtualinvoke v1.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken getComponentType()>();
v11 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v10);
v12 = virtualinvoke v11.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();
v13 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v12, 1);
v14 = specialinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.Object generate(com.google.common.reflect.TypeToken)>(v11);
staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(v13, 0, v14);
return v13;
label3:
v15 = <com.google.common.testing.FreshValueGenerator: com.google.common.collect.ImmutableMap EMPTY_GENERATORS>;
v16 = virtualinvoke v15.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(v2);
if v16 == null goto label5;
v17 = v0.<com.google.common.testing.FreshValueGenerator: java.util.Map emptyInstanceGenerated>;
v18 = virtualinvoke v1.<com.google.common.reflect.TypeToken: java.lang.reflect.Type getType()>();
v19 = interfaceinvoke v17.<java.util.Map: boolean containsKey(java.lang.Object)>(v18);
if v19 == 0 goto label4;
v20 = v0.<com.google.common.testing.FreshValueGenerator: java.util.Map emptyInstanceGenerated>;
v21 = virtualinvoke v1.<com.google.common.reflect.TypeToken: java.lang.reflect.Type getType()>();
v22 = interfaceinvoke v20.<java.util.Map: java.lang.Object get(java.lang.Object)>(v21);
v23 = virtualinvoke v22.<java.lang.Integer: int intValue()>();
v24 = v0.<com.google.common.testing.FreshValueGenerator: java.util.concurrent.atomic.AtomicInteger freshness>;
v25 = virtualinvoke v24.<java.util.concurrent.atomic.AtomicInteger: int get()>();
if v23 != v25 goto label5;
v26 = newarray (java.lang.Object)[0];
v27 = specialinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.Object invokeGeneratorMethod(java.lang.reflect.Method,java.lang.Object[])>(v16, v26);
return v27;
label4:
v28 = newarray (java.lang.Object)[0];
v29 = specialinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.Object invokeGeneratorMethod(java.lang.reflect.Method,java.lang.Object[])>(v16, v28);
v30 = v0.<com.google.common.testing.FreshValueGenerator: java.util.Map emptyInstanceGenerated>;
v31 = virtualinvoke v1.<com.google.common.reflect.TypeToken: java.lang.reflect.Type getType()>();
v32 = v0.<com.google.common.testing.FreshValueGenerator: java.util.concurrent.atomic.AtomicInteger freshness>;
v33 = virtualinvoke v32.<java.util.concurrent.atomic.AtomicInteger: int get()>();
v34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v33);
interfaceinvoke v30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v31, v34);
return v29;
label5:
v35 = <com.google.common.testing.FreshValueGenerator: com.google.common.collect.ImmutableMap GENERATORS>;
v36 = virtualinvoke v35.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(v2);
if v36 == null goto label9;
v37 = staticinvoke <com.google.common.reflect.Invokable: com.google.common.reflect.Invokable 'from'(java.lang.reflect.Method)>(v36);
v38 = virtualinvoke v37.<com.google.common.reflect.Invokable: com.google.common.collect.ImmutableList getParameters()>();
v39 = virtualinvoke v38.<com.google.common.collect.ImmutableList: int size()>();
v40 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>(v39);
v41 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v42 = 0;
label6:
v43 = virtualinvoke v38.<com.google.common.collect.ImmutableList: int size()>();
if v42 >= v43 goto label8;
v44 = v41[v42];
v45 = virtualinvoke v1.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken resolveType(java.lang.reflect.Type)>(v44);
v46 = specialinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.Object generate(com.google.common.reflect.TypeToken)>(v45);
if v46 != null goto label7;
return null;
label7:
interfaceinvoke v40.<java.util.List: boolean add(java.lang.Object)>(v46);
v42 = v42 + 1;
goto label6;
label8:
v47 = interfaceinvoke v40.<java.util.List: java.lang.Object[] toArray()>();
v48 = specialinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.Object invokeGeneratorMethod(java.lang.reflect.Method,java.lang.Object[])>(v36, v47);
return v48;
label9:
v49 = specialinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.Object defaultGenerate(java.lang.Class)>(v2);
return v49;
}
private java.lang.Object defaultGenerate(java.lang.Class)
{
java.lang.Class v1;
java.lang.Object v3, v4;
com.google.common.testing.FreshValueGenerator v0;
boolean v2;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v1.<java.lang.Class: boolean isInterface()>();
if v2 == 0 goto label1;
v3 = specialinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.Object newProxy(java.lang.Class)>(v1);
return v3;
label1:
v4 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(v1);
return v4;
}
private java.lang.Object newProxy(java.lang.Class)
{
java.lang.Class v1;
java.lang.Object v3;
com.google.common.testing.FreshValueGenerator v0;
com.google.common.testing.FreshValueGenerator$FreshInvocationHandler v2;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 := @parameter0: java.lang.Class;
v2 = new com.google.common.testing.FreshValueGenerator$FreshInvocationHandler;
specialinvoke v2.<com.google.common.testing.FreshValueGenerator$FreshInvocationHandler: void <init>(com.google.common.testing.FreshValueGenerator,java.lang.Class)>(v0, v1);
v3 = staticinvoke <com.google.common.reflect.Reflection: java.lang.Object newProxy(java.lang.Class,java.lang.reflect.InvocationHandler)>(v1, v2);
return v3;
}
private transient java.lang.Object invokeGeneratorMethod(java.lang.reflect.Method, java.lang.Object[])
{
java.lang.Throwable v5, v7;
java.lang.Object[] v2;
java.lang.RuntimeException v6, v9;
java.lang.Exception v8;
java.lang.reflect.InvocationTargetException v4;
java.lang.Object v3;
com.google.common.testing.FreshValueGenerator v0;
java.lang.reflect.Method v1;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 := @parameter0: java.lang.reflect.Method;
v2 := @parameter1: java.lang.Object[];
label1:
v3 = virtualinvoke v1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v0, v2);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = virtualinvoke v4.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
staticinvoke <com.google.common.base.Throwables: void throwIfUnchecked(java.lang.Throwable)>(v5);
v6 = new java.lang.RuntimeException;
v7 = virtualinvoke v4.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
specialinvoke v6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v7);
throw v6;
label4:
v8 := @caughtexception;
staticinvoke <com.google.common.base.Throwables: void throwIfUnchecked(java.lang.Throwable)>(v8);
v9 = new java.lang.RuntimeException;
specialinvoke v9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v8);
throw v9;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
java.lang.Object interfaceMethodCalled(java.lang.Class, java.lang.reflect.Method)
{
java.lang.UnsupportedOperationException v3;
java.lang.Class v1;
com.google.common.testing.FreshValueGenerator v0;
java.lang.reflect.Method v2;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.reflect.Method;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
private java.lang.Object pickInstance(java.lang.Object[], java.lang.Object)
{
java.util.List v3;
java.lang.Object[] v1;
java.lang.Object v2, v4;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 := @parameter0: java.lang.Object[];
v2 := @parameter1: java.lang.Object;
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v4 = specialinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.Object pickInstance(java.util.Collection,java.lang.Object)>(v3, v2);
return v4;
}
private java.lang.Object pickInstance(java.util.Collection, java.lang.Object)
{
java.util.Collection v1;
int v4, v5, v6, v7;
java.lang.Object v2, v8;
com.google.common.testing.FreshValueGenerator v0;
boolean v3;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 := @parameter0: java.util.Collection;
v2 := @parameter1: java.lang.Object;
v3 = interfaceinvoke v1.<java.util.Collection: boolean isEmpty()>();
if v3 == 0 goto label1;
return v2;
label1:
v4 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
v5 = v4 - 1;
v6 = interfaceinvoke v1.<java.util.Collection: int size()>();
v7 = v5 % v6;
v8 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object get(java.lang.Iterable,int)>(v1, v7);
return v8;
}
private static java.lang.String paramString(java.lang.Class, int)
{
int v1;
java.lang.Class v0;
java.lang.String v2, v3;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: int;
v2 = virtualinvoke v0.<java.lang.Class: java.lang.String getSimpleName()>();
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v2, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001@\u0001");
return v3;
}
java.lang.Class generateClass()
{
com.google.common.collect.ImmutableList v4;
java.lang.Class v1, v2, v3;
java.lang.Object v5;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = <java.lang.Integer: java.lang.Class TYPE>;
v2 = <java.lang.Long: java.lang.Class TYPE>;
v3 = <java.lang.Void: java.lang.Class TYPE>;
v4 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v2, v3, class "Ljava/lang/Object;", class "[Ljava/lang/Object;", class "Ljava/lang/Iterable;");
v5 = specialinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.Object pickInstance(java.util.Collection,java.lang.Object)>(v4, class "Ljava/lang/Object;");
return v5;
}
java.lang.Object generateObject()
{
java.lang.String v1;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.String generateString()>();
return v1;
}
java.lang.Number generateNumber()
{
int v1;
com.google.common.testing.FreshValueGenerator v0;
java.lang.Integer v2;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
v2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
return v2;
}
int generateInt()
{
int v2;
com.google.common.testing.FreshValueGenerator v0;
java.util.concurrent.atomic.AtomicInteger v1;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = v0.<com.google.common.testing.FreshValueGenerator: java.util.concurrent.atomic.AtomicInteger freshness>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
return v2;
}
java.lang.Integer generateInteger()
{
int v2;
com.google.common.testing.FreshValueGenerator v0;
java.lang.Integer v1;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = new java.lang.Integer;
v2 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
specialinvoke v1.<java.lang.Integer: void <init>(int)>(v2);
return v1;
}
long generateLong()
{
int v1;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
return v1;
}
java.lang.Long generateLongObject()
{
long v2;
com.google.common.testing.FreshValueGenerator v0;
java.lang.Long v1;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = new java.lang.Long;
v2 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: long generateLong()>();
specialinvoke v1.<java.lang.Long: void <init>(long)>(v2);
return v1;
}
float generateFloat()
{
int v1;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
return v1;
}
java.lang.Float generateFloatObject()
{
float v2;
java.lang.Float v1;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = new java.lang.Float;
v2 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: float generateFloat()>();
specialinvoke v1.<java.lang.Float: void <init>(float)>(v2);
return v1;
}
double generateDouble()
{
int v1;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
return v1;
}
java.lang.Double generateDoubleObject()
{
com.google.common.testing.FreshValueGenerator v0;
java.lang.Double v1;
double v2;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = new java.lang.Double;
v2 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: double generateDouble()>();
specialinvoke v1.<java.lang.Double: void <init>(double)>(v2);
return v1;
}
short generateShort()
{
int v1;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
return v1;
}
java.lang.Short generateShortObject()
{
short v2;
com.google.common.testing.FreshValueGenerator v0;
java.lang.Short v1;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = new java.lang.Short;
v2 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: short generateShort()>();
specialinvoke v1.<java.lang.Short: void <init>(short)>(v2);
return v1;
}
byte generateByte()
{
int v1;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
return v1;
}
java.lang.Byte generateByteObject()
{
byte v2;
com.google.common.testing.FreshValueGenerator v0;
java.lang.Byte v1;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = new java.lang.Byte;
v2 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: byte generateByte()>();
specialinvoke v1.<java.lang.Byte: void <init>(byte)>(v2);
return v1;
}
char generateChar()
{
char v2;
java.lang.String v1;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.String generateString()>();
v2 = virtualinvoke v1.<java.lang.String: char charAt(int)>(0);
return v2;
}
java.lang.Character generateCharacter()
{
char v2;
com.google.common.testing.FreshValueGenerator v0;
java.lang.Character v1;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = new java.lang.Character;
v2 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: char generateChar()>();
specialinvoke v1.<java.lang.Character: void <init>(char)>(v2);
return v1;
}
boolean generateBoolean()
{
int v1, v2;
com.google.common.testing.FreshValueGenerator v0;
boolean v3;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
v2 = v1 % 2;
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
java.lang.Boolean generateBooleanObject()
{
java.lang.Boolean v1;
com.google.common.testing.FreshValueGenerator v0;
boolean v2;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = new java.lang.Boolean;
v2 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: boolean generateBoolean()>();
specialinvoke v1.<java.lang.Boolean: void <init>(boolean)>(v2);
return v1;
}
com.google.common.primitives.UnsignedInteger generateUnsignedInteger()
{
int v1;
com.google.common.testing.FreshValueGenerator v0;
com.google.common.primitives.UnsignedInteger v2;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
v2 = staticinvoke <com.google.common.primitives.UnsignedInteger: com.google.common.primitives.UnsignedInteger fromIntBits(int)>(v1);
return v2;
}
com.google.common.primitives.UnsignedLong generateUnsignedLong()
{
com.google.common.primitives.UnsignedLong v2;
long v1;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: long generateLong()>();
v2 = staticinvoke <com.google.common.primitives.UnsignedLong: com.google.common.primitives.UnsignedLong fromLongBits(long)>(v1);
return v2;
}
java.math.BigInteger generateBigInteger()
{
int v1;
java.math.BigInteger v2;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
v2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(v1);
return v2;
}
java.math.BigDecimal generateBigDecimal()
{
int v1;
java.math.BigDecimal v2;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
v2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(v1);
return v2;
}
java.lang.CharSequence generateCharSequence()
{
java.lang.String v1;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.String generateString()>();
return v1;
}
java.lang.String generateString()
{
int v1;
java.lang.String v2;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
v2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(v1);
return v2;
}
java.lang.Comparable generateComparable()
{
java.lang.String v1;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.String generateString()>();
return v1;
}
java.util.regex.Pattern generatePattern()
{
java.lang.String v1;
java.util.regex.Pattern v2;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.String generateString()>();
v2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(v1);
return v2;
}
java.nio.charset.Charset generateCharset()
{
java.nio.charset.Charset v3;
java.util.Collection v2;
java.lang.Object v4;
com.google.common.testing.FreshValueGenerator v0;
java.util.SortedMap v1;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = staticinvoke <java.nio.charset.Charset: java.util.SortedMap availableCharsets()>();
v2 = interfaceinvoke v1.<java.util.SortedMap: java.util.Collection values()>();
v3 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>;
v4 = specialinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.Object pickInstance(java.util.Collection,java.lang.Object)>(v2, v3);
return v4;
}
java.util.Locale generateLocale()
{
java.util.Locale[] v1;
java.util.Locale v2;
java.lang.Object v3;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = staticinvoke <java.util.Locale: java.util.Locale[] getAvailableLocales()>();
v2 = <java.util.Locale: java.util.Locale US>;
v3 = specialinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.Object pickInstance(java.lang.Object[],java.lang.Object)>(v1, v2);
return v3;
}
java.util.Currency generateCurrency()
{
java.lang.IllegalAccessException v13;
java.lang.Object[] v4;
java.lang.NoSuchMethodException v9;
java.lang.Class[] v2;
java.lang.AssertionError v14;
java.util.Currency v10, v12, v7;
java.lang.reflect.InvocationTargetException v11;
java.util.Locale v6;
java.lang.Class v1;
java.lang.Object v5, v8;
com.google.common.testing.FreshValueGenerator v0;
java.lang.reflect.Method v3;
v0 := @this: com.google.common.testing.FreshValueGenerator;
label1:
v1 = class "Ljava/util/Currency;";
v2 = newarray (java.lang.Class)[0];
v3 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getAvailableCurrencies", v2);
v4 = newarray (java.lang.Object)[0];
v5 = virtualinvoke v3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, v4);
v6 = <java.util.Locale: java.util.Locale US>;
v7 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.util.Locale)>(v6);
v8 = specialinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.Object pickInstance(java.util.Collection,java.lang.Object)>(v5, v7);
label2:
return v8;
label3:
v9 := @caughtexception;
v10 = specialinvoke v0.<com.google.common.testing.FreshValueGenerator: java.util.Currency preJava7FreshCurrency()>();
return v10;
label4:
v11 := @caughtexception;
v12 = specialinvoke v0.<com.google.common.testing.FreshValueGenerator: java.util.Currency preJava7FreshCurrency()>();
return v12;
label5:
v13 := @caughtexception;
v14 = new java.lang.AssertionError;
specialinvoke v14.<java.lang.AssertionError: void <init>(java.lang.Object)>(v13);
throw v14;
catch java.lang.NoSuchMethodException from label1 to label2 with label3;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
catch java.lang.IllegalAccessException from label1 to label2 with label5;
}
private java.util.Currency preJava7FreshCurrency()
{
java.util.Currency v5, v6;
java.lang.IllegalArgumentException v7;
java.util.HashSet v1;
java.util.Locale v2, v4;
com.google.common.testing.FreshValueGenerator v0;
boolean v3;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>();
label1:
v2 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: java.util.Locale generateLocale()>();
v3 = interfaceinvoke v1.<java.util.Set: boolean contains(java.lang.Object)>(v2);
if v3 == 0 goto label2;
v4 = <java.util.Locale: java.util.Locale US>;
v5 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.util.Locale)>(v4);
return v5;
label2:
v6 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.util.Locale)>(v2);
label3:
return v6;
label4:
v7 := @caughtexception;
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>(v2);
goto label1;
catch java.lang.IllegalArgumentException from label2 to label3 with label4;
}
java.util.Optional generateJavaOptional()
{
java.util.Optional v1;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
return v1;
}
java.util.Optional generateJavaOptional(java.lang.Object)
{
java.util.Optional v2;
java.lang.Object v1;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(v1);
return v2;
}
java.util.OptionalInt generateOptionalInt()
{
int v1;
com.google.common.testing.FreshValueGenerator v0;
java.util.OptionalInt v2;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
v2 = staticinvoke <java.util.OptionalInt: java.util.OptionalInt of(int)>(v1);
return v2;
}
java.util.OptionalLong generateOptionalLong()
{
java.util.OptionalLong v2;
long v1;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: long generateLong()>();
v2 = staticinvoke <java.util.OptionalLong: java.util.OptionalLong of(long)>(v1);
return v2;
}
java.util.OptionalDouble generateOptionalDouble()
{
java.util.OptionalDouble v2;
com.google.common.testing.FreshValueGenerator v0;
double v1;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: double generateDouble()>();
v2 = staticinvoke <java.util.OptionalDouble: java.util.OptionalDouble of(double)>(v1);
return v2;
}
com.google.common.base.Optional generateGoogleOptional()
{
com.google.common.testing.FreshValueGenerator v0;
com.google.common.base.Optional v1;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>();
return v1;
}
com.google.common.base.Optional generateGoogleOptional(java.lang.Object)
{
java.lang.Object v1;
com.google.common.testing.FreshValueGenerator v0;
com.google.common.base.Optional v2;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>(v1);
return v2;
}
com.google.common.base.Joiner generateJoiner()
{
java.lang.String v1;
com.google.common.testing.FreshValueGenerator v0;
com.google.common.base.Joiner v2;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.String generateString()>();
v2 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)>(v1);
return v2;
}
com.google.common.base.Splitter generateSplitter()
{
java.lang.String v1;
com.google.common.testing.FreshValueGenerator v0;
com.google.common.base.Splitter v2;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.String generateString()>();
v2 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(java.lang.String)>(v1);
return v2;
}
com.google.common.base.Equivalence generateEquivalence()
{
com.google.common.testing.FreshValueGenerator v0;
com.google.common.testing.FreshValueGenerator$1 v1;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = new com.google.common.testing.FreshValueGenerator$1;
specialinvoke v1.<com.google.common.testing.FreshValueGenerator$1: void <init>(com.google.common.testing.FreshValueGenerator)>(v0);
return v1;
}
com.google.common.base.CharMatcher generateCharMatcher()
{
com.google.common.testing.FreshValueGenerator v0;
com.google.common.testing.FreshValueGenerator$2 v1;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = new com.google.common.testing.FreshValueGenerator$2;
specialinvoke v1.<com.google.common.testing.FreshValueGenerator$2: void <init>(com.google.common.testing.FreshValueGenerator)>(v0);
return v1;
}
com.google.common.base.Ticker generateTicker()
{
com.google.common.testing.FreshValueGenerator v0;
com.google.common.testing.FreshValueGenerator$3 v1;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = new com.google.common.testing.FreshValueGenerator$3;
specialinvoke v1.<com.google.common.testing.FreshValueGenerator$3: void <init>(com.google.common.testing.FreshValueGenerator)>(v0);
return v1;
}
java.util.Comparator generateComparator()
{
com.google.common.collect.Ordering v1;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: com.google.common.collect.Ordering generateOrdering()>();
return v1;
}
com.google.common.collect.Ordering generateOrdering()
{
com.google.common.testing.FreshValueGenerator v0;
com.google.common.testing.FreshValueGenerator$4 v1;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = new com.google.common.testing.FreshValueGenerator$4;
specialinvoke v1.<com.google.common.testing.FreshValueGenerator$4: void <init>(com.google.common.testing.FreshValueGenerator)>(v0);
return v1;
}
static com.google.common.collect.Range generateRange()
{
com.google.common.collect.Range v0;
v0 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range all()>();
return v0;
}
static com.google.common.collect.Range generateRange(java.lang.Comparable)
{
com.google.common.collect.Range v1;
java.lang.Comparable v0;
v0 := @parameter0: java.lang.Comparable;
v1 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range singleton(java.lang.Comparable)>(v0);
return v1;
}
static java.lang.Iterable generateIterable(java.lang.Object)
{
java.lang.Object v0;
java.util.List v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <com.google.common.testing.FreshValueGenerator: java.util.List generateList(java.lang.Object)>(v0);
return v1;
}
static java.util.Collection generateCollection(java.lang.Object)
{
java.lang.Object v0;
java.util.List v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <com.google.common.testing.FreshValueGenerator: java.util.List generateList(java.lang.Object)>(v0);
return v1;
}
static java.util.List generateList(java.lang.Object)
{
java.lang.Object v0;
java.util.ArrayList v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <com.google.common.testing.FreshValueGenerator: java.util.ArrayList generateArrayList(java.lang.Object)>(v0);
return v1;
}
static java.util.ArrayList generateArrayList(java.lang.Object)
{
java.lang.Object v0;
java.util.ArrayList v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();
virtualinvoke v1.<java.util.ArrayList: boolean add(java.lang.Object)>(v0);
return v1;
}
static java.util.LinkedList generateLinkedList(java.lang.Object)
{
java.lang.Object v0;
java.util.LinkedList v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <com.google.common.collect.Lists: java.util.LinkedList newLinkedList()>();
virtualinvoke v1.<java.util.LinkedList: boolean add(java.lang.Object)>(v0);
return v1;
}
static com.google.common.collect.ImmutableList generateImmutableList(java.lang.Object)
{
java.lang.Object v0;
com.google.common.collect.ImmutableList v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>(v0);
return v1;
}
static com.google.common.collect.ImmutableCollection generateImmutableCollection(java.lang.Object)
{
java.lang.Object v0;
com.google.common.collect.ImmutableList v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <com.google.common.testing.FreshValueGenerator: com.google.common.collect.ImmutableList generateImmutableList(java.lang.Object)>(v0);
return v1;
}
static java.util.Set generateSet(java.lang.Object)
{
java.util.HashSet v1;
java.lang.Object v0;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <com.google.common.testing.FreshValueGenerator: java.util.HashSet generateHashSet(java.lang.Object)>(v0);
return v1;
}
static java.util.HashSet generateHashSet(java.lang.Object)
{
java.lang.Object v0;
java.util.LinkedHashSet v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <com.google.common.testing.FreshValueGenerator: java.util.LinkedHashSet generateLinkedHashSet(java.lang.Object)>(v0);
return v1;
}
static java.util.LinkedHashSet generateLinkedHashSet(java.lang.Object)
{
java.lang.Object v0;
java.util.LinkedHashSet v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <com.google.common.collect.Sets: java.util.LinkedHashSet newLinkedHashSet()>();
virtualinvoke v1.<java.util.LinkedHashSet: boolean add(java.lang.Object)>(v0);
return v1;
}
static com.google.common.collect.ImmutableSet generateImmutableSet(java.lang.Object)
{
java.lang.Object v0;
com.google.common.collect.ImmutableSet v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object)>(v0);
return v1;
}
static java.util.SortedSet generateSortedSet(java.lang.Comparable)
{
java.lang.Comparable v0;
java.util.NavigableSet v1;
v0 := @parameter0: java.lang.Comparable;
v1 = staticinvoke <com.google.common.testing.FreshValueGenerator: java.util.NavigableSet generateNavigableSet(java.lang.Comparable)>(v0);
return v1;
}
static java.util.NavigableSet generateNavigableSet(java.lang.Comparable)
{
java.lang.Comparable v0;
java.util.TreeSet v1;
v0 := @parameter0: java.lang.Comparable;
v1 = staticinvoke <com.google.common.testing.FreshValueGenerator: java.util.TreeSet generateTreeSet(java.lang.Comparable)>(v0);
return v1;
}
static java.util.TreeSet generateTreeSet(java.lang.Comparable)
{
java.lang.Comparable v0;
java.util.TreeSet v1;
v0 := @parameter0: java.lang.Comparable;
v1 = staticinvoke <com.google.common.collect.Sets: java.util.TreeSet newTreeSet()>();
virtualinvoke v1.<java.util.TreeSet: boolean add(java.lang.Object)>(v0);
return v1;
}
static com.google.common.collect.ImmutableSortedSet generateImmutableSortedSet(java.lang.Comparable)
{
com.google.common.collect.ImmutableSortedSet v1;
java.lang.Comparable v0;
v0 := @parameter0: java.lang.Comparable;
v1 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet of(java.lang.Comparable)>(v0);
return v1;
}
static com.google.common.collect.Multiset generateMultiset(java.lang.Object)
{
java.lang.Object v0;
com.google.common.collect.HashMultiset v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <com.google.common.testing.FreshValueGenerator: com.google.common.collect.HashMultiset generateHashMultiset(java.lang.Object)>(v0);
return v1;
}
static com.google.common.collect.HashMultiset generateHashMultiset(java.lang.Object)
{
java.lang.Object v0;
com.google.common.collect.HashMultiset v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <com.google.common.collect.HashMultiset: com.google.common.collect.HashMultiset create()>();
virtualinvoke v1.<com.google.common.collect.HashMultiset: boolean add(java.lang.Object)>(v0);
return v1;
}
static com.google.common.collect.LinkedHashMultiset generateLinkedHashMultiset(java.lang.Object)
{
com.google.common.collect.LinkedHashMultiset v1;
java.lang.Object v0;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <com.google.common.collect.LinkedHashMultiset: com.google.common.collect.LinkedHashMultiset create()>();
virtualinvoke v1.<com.google.common.collect.LinkedHashMultiset: boolean add(java.lang.Object)>(v0);
return v1;
}
static com.google.common.collect.ImmutableMultiset generateImmutableMultiset(java.lang.Object)
{
java.lang.Object v0;
com.google.common.collect.ImmutableMultiset v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <com.google.common.collect.ImmutableMultiset: com.google.common.collect.ImmutableMultiset of(java.lang.Object)>(v0);
return v1;
}
static com.google.common.collect.SortedMultiset generateSortedMultiset(java.lang.Comparable)
{
com.google.common.collect.TreeMultiset v1;
java.lang.Comparable v0;
v0 := @parameter0: java.lang.Comparable;
v1 = staticinvoke <com.google.common.testing.FreshValueGenerator: com.google.common.collect.TreeMultiset generateTreeMultiset(java.lang.Comparable)>(v0);
return v1;
}
static com.google.common.collect.TreeMultiset generateTreeMultiset(java.lang.Comparable)
{
com.google.common.collect.TreeMultiset v1;
java.lang.Comparable v0;
v0 := @parameter0: java.lang.Comparable;
v1 = staticinvoke <com.google.common.collect.TreeMultiset: com.google.common.collect.TreeMultiset create()>();
virtualinvoke v1.<com.google.common.collect.TreeMultiset: boolean add(java.lang.Object)>(v0);
return v1;
}
static com.google.common.collect.ImmutableSortedMultiset generateImmutableSortedMultiset(java.lang.Comparable)
{
java.lang.Comparable v0;
com.google.common.collect.ImmutableSortedMultiset v1;
v0 := @parameter0: java.lang.Comparable;
v1 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable)>(v0);
return v1;
}
static java.util.Map generateMap(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
java.util.HashMap v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.testing.FreshValueGenerator: java.util.HashMap generateHashdMap(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static java.util.HashMap generateHashdMap(java.lang.Object, java.lang.Object)
{
java.util.LinkedHashMap v2;
java.lang.Object v0, v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.testing.FreshValueGenerator: java.util.LinkedHashMap generateLinkedHashMap(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static java.util.LinkedHashMap generateLinkedHashMap(java.lang.Object, java.lang.Object)
{
java.util.LinkedHashMap v2;
java.lang.Object v0, v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.collect.Maps: java.util.LinkedHashMap newLinkedHashMap()>();
virtualinvoke v2.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static com.google.common.collect.ImmutableMap generateImmutableMap(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
com.google.common.collect.ImmutableMap v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static java.util.concurrent.ConcurrentMap generateConcurrentMap()
{
java.util.concurrent.ConcurrentMap v0;
v0 = staticinvoke <com.google.common.collect.Maps: java.util.concurrent.ConcurrentMap newConcurrentMap()>();
return v0;
}
static java.util.concurrent.ConcurrentMap generateConcurrentMap(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
java.util.concurrent.ConcurrentMap v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.collect.Maps: java.util.concurrent.ConcurrentMap newConcurrentMap()>();
interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static java.util.SortedMap generateSortedMap(java.lang.Comparable, java.lang.Object)
{
java.lang.Comparable v0;
java.lang.Object v1;
java.util.NavigableMap v2;
v0 := @parameter0: java.lang.Comparable;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.testing.FreshValueGenerator: java.util.NavigableMap generateNavigableMap(java.lang.Comparable,java.lang.Object)>(v0, v1);
return v2;
}
static java.util.NavigableMap generateNavigableMap(java.lang.Comparable, java.lang.Object)
{
java.lang.Comparable v0;
java.lang.Object v1;
java.util.TreeMap v2;
v0 := @parameter0: java.lang.Comparable;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.testing.FreshValueGenerator: java.util.TreeMap generateTreeMap(java.lang.Comparable,java.lang.Object)>(v0, v1);
return v2;
}
static java.util.TreeMap generateTreeMap(java.lang.Comparable, java.lang.Object)
{
java.lang.Comparable v0;
java.lang.Object v1;
java.util.TreeMap v2;
v0 := @parameter0: java.lang.Comparable;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.collect.Maps: java.util.TreeMap newTreeMap()>();
virtualinvoke v2.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static com.google.common.collect.ImmutableSortedMap generateImmutableSortedMap(java.lang.Comparable, java.lang.Object)
{
java.lang.Comparable v0;
java.lang.Object v1;
com.google.common.collect.ImmutableSortedMap v2;
v0 := @parameter0: java.lang.Comparable;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap of(java.lang.Comparable,java.lang.Object)>(v0, v1);
return v2;
}
static com.google.common.collect.Multimap generateMultimap(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
com.google.common.collect.ListMultimap v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.testing.FreshValueGenerator: com.google.common.collect.ListMultimap generateListMultimap(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static com.google.common.collect.ImmutableMultimap generateImmutableMultimap(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
com.google.common.collect.ImmutableMultimap v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.collect.ImmutableMultimap: com.google.common.collect.ImmutableMultimap of(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static com.google.common.collect.ListMultimap generateListMultimap(java.lang.Object, java.lang.Object)
{
com.google.common.collect.ArrayListMultimap v2;
java.lang.Object v0, v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.testing.FreshValueGenerator: com.google.common.collect.ArrayListMultimap generateArrayListMultimap(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static com.google.common.collect.ArrayListMultimap generateArrayListMultimap(java.lang.Object, java.lang.Object)
{
com.google.common.collect.ArrayListMultimap v2;
java.lang.Object v0, v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.collect.ArrayListMultimap: com.google.common.collect.ArrayListMultimap create()>();
virtualinvoke v2.<com.google.common.collect.ArrayListMultimap: boolean put(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static com.google.common.collect.ImmutableListMultimap generateImmutableListMultimap(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
com.google.common.collect.ImmutableListMultimap v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static com.google.common.collect.SetMultimap generateSetMultimap(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
com.google.common.collect.LinkedHashMultimap v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.testing.FreshValueGenerator: com.google.common.collect.LinkedHashMultimap generateLinkedHashMultimap(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static com.google.common.collect.HashMultimap generateHashMultimap(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
com.google.common.collect.HashMultimap v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.collect.HashMultimap: com.google.common.collect.HashMultimap create()>();
virtualinvoke v2.<com.google.common.collect.HashMultimap: boolean put(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static com.google.common.collect.LinkedHashMultimap generateLinkedHashMultimap(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
com.google.common.collect.LinkedHashMultimap v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.collect.LinkedHashMultimap: com.google.common.collect.LinkedHashMultimap create()>();
virtualinvoke v2.<com.google.common.collect.LinkedHashMultimap: boolean put(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static com.google.common.collect.ImmutableSetMultimap generateImmutableSetMultimap(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
com.google.common.collect.ImmutableSetMultimap v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap of(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static com.google.common.collect.BiMap generateBimap(java.lang.Object, java.lang.Object)
{
com.google.common.collect.HashBiMap v2;
java.lang.Object v0, v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.testing.FreshValueGenerator: com.google.common.collect.HashBiMap generateHashBiMap(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static com.google.common.collect.HashBiMap generateHashBiMap(java.lang.Object, java.lang.Object)
{
com.google.common.collect.HashBiMap v2;
java.lang.Object v0, v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.collect.HashBiMap: com.google.common.collect.HashBiMap create()>();
virtualinvoke v2.<com.google.common.collect.HashBiMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static com.google.common.collect.ImmutableBiMap generateImmutableBimap(java.lang.Object, java.lang.Object)
{
com.google.common.collect.ImmutableBiMap v2;
java.lang.Object v0, v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.collect.ImmutableBiMap: com.google.common.collect.ImmutableBiMap of(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static com.google.common.collect.Table generateTable(java.lang.Object, java.lang.Object, java.lang.Object)
{
com.google.common.collect.HashBasedTable v3;
java.lang.Object v0, v1, v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Object;
v3 = staticinvoke <com.google.common.testing.FreshValueGenerator: com.google.common.collect.HashBasedTable generateHashBasedTable(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v1, v2);
return v3;
}
static com.google.common.collect.HashBasedTable generateHashBasedTable(java.lang.Object, java.lang.Object, java.lang.Object)
{
com.google.common.collect.HashBasedTable v3;
java.lang.Object v0, v1, v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Object;
v3 = staticinvoke <com.google.common.collect.HashBasedTable: com.google.common.collect.HashBasedTable create()>();
virtualinvoke v3.<com.google.common.collect.HashBasedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v1, v2);
return v3;
}
static com.google.common.collect.RowSortedTable generateRowSortedTable(java.lang.Comparable, java.lang.Comparable, java.lang.Object)
{
java.lang.Comparable v0, v1;
java.lang.Object v2;
com.google.common.collect.TreeBasedTable v3;
v0 := @parameter0: java.lang.Comparable;
v1 := @parameter1: java.lang.Comparable;
v2 := @parameter2: java.lang.Object;
v3 = staticinvoke <com.google.common.testing.FreshValueGenerator: com.google.common.collect.TreeBasedTable generateTreeBasedTable(java.lang.Comparable,java.lang.Comparable,java.lang.Object)>(v0, v1, v2);
return v3;
}
static com.google.common.collect.TreeBasedTable generateTreeBasedTable(java.lang.Comparable, java.lang.Comparable, java.lang.Object)
{
java.lang.Comparable v0, v1;
java.lang.Object v2;
com.google.common.collect.TreeBasedTable v3;
v0 := @parameter0: java.lang.Comparable;
v1 := @parameter1: java.lang.Comparable;
v2 := @parameter2: java.lang.Object;
v3 = staticinvoke <com.google.common.collect.TreeBasedTable: com.google.common.collect.TreeBasedTable create()>();
virtualinvoke v3.<com.google.common.collect.TreeBasedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v1, v2);
return v3;
}
static com.google.common.collect.ImmutableTable generateImmutableTable(java.lang.Object, java.lang.Object, java.lang.Object)
{
com.google.common.collect.ImmutableTable v3;
java.lang.Object v0, v1, v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Object;
v3 = staticinvoke <com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableTable of(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v1, v2);
return v3;
}
com.google.common.reflect.TypeToken generateTypeToken()
{
java.lang.Class v1;
com.google.common.reflect.TypeToken v2;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.Class generateClass()>();
v2 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.Class)>(v1);
return v2;
}
java.io.File generateFile()
{
java.lang.String v2;
com.google.common.testing.FreshValueGenerator v0;
java.io.File v1;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = new java.io.File;
v2 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.String generateString()>();
specialinvoke v1.<java.io.File: void <init>(java.lang.String)>(v2);
return v1;
}
static java.io.ByteArrayInputStream generateByteArrayInputStream()
{
byte[] v1;
java.io.ByteArrayInputStream v0;
v0 = new java.io.ByteArrayInputStream;
v1 = newarray (byte)[0];
specialinvoke v0.<java.io.ByteArrayInputStream: void <init>(byte[])>(v1);
return v0;
}
static java.io.InputStream generateInputStream()
{
java.io.ByteArrayInputStream v0;
v0 = staticinvoke <com.google.common.testing.FreshValueGenerator: java.io.ByteArrayInputStream generateByteArrayInputStream()>();
return v0;
}
java.io.StringReader generateStringReader()
{
java.lang.String v2;
com.google.common.testing.FreshValueGenerator v0;
java.io.StringReader v1;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = new java.io.StringReader;
v2 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: java.lang.String generateString()>();
specialinvoke v1.<java.io.StringReader: void <init>(java.lang.String)>(v2);
return v1;
}
java.io.Reader generateReader()
{
com.google.common.testing.FreshValueGenerator v0;
java.io.StringReader v1;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: java.io.StringReader generateStringReader()>();
return v1;
}
java.lang.Readable generateReadable()
{
java.io.Reader v1;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: java.io.Reader generateReader()>();
return v1;
}
java.nio.Buffer generateBuffer()
{
com.google.common.testing.FreshValueGenerator v0;
java.nio.CharBuffer v1;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: java.nio.CharBuffer generateCharBuffer()>();
return v1;
}
java.nio.CharBuffer generateCharBuffer()
{
int v1;
com.google.common.testing.FreshValueGenerator v0;
java.nio.CharBuffer v2;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
v2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(v1);
return v2;
}
java.nio.ByteBuffer generateByteBuffer()
{
int v1;
com.google.common.testing.FreshValueGenerator v0;
java.nio.ByteBuffer v2;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
v2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(v1);
return v2;
}
java.nio.ShortBuffer generateShortBuffer()
{
int v1;
java.nio.ShortBuffer v2;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
v2 = staticinvoke <java.nio.ShortBuffer: java.nio.ShortBuffer allocate(int)>(v1);
return v2;
}
java.nio.IntBuffer generateIntBuffer()
{
int v1;
com.google.common.testing.FreshValueGenerator v0;
java.nio.IntBuffer v2;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
v2 = staticinvoke <java.nio.IntBuffer: java.nio.IntBuffer allocate(int)>(v1);
return v2;
}
java.nio.LongBuffer generateLongBuffer()
{
int v1;
java.nio.LongBuffer v2;
com.google.common.testing.FreshValueGenerator v0;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
v2 = staticinvoke <java.nio.LongBuffer: java.nio.LongBuffer allocate(int)>(v1);
return v2;
}
java.nio.FloatBuffer generateFloatBuffer()
{
int v1;
com.google.common.testing.FreshValueGenerator v0;
java.nio.FloatBuffer v2;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
v2 = staticinvoke <java.nio.FloatBuffer: java.nio.FloatBuffer allocate(int)>(v1);
return v2;
}
java.nio.DoubleBuffer generateDoubleBuffer()
{
int v1;
com.google.common.testing.FreshValueGenerator v0;
java.nio.DoubleBuffer v2;
v0 := @this: com.google.common.testing.FreshValueGenerator;
v1 = virtualinvoke v0.<com.google.common.testing.FreshValueGenerator: int generateInt()>();
v2 = staticinvoke <java.nio.DoubleBuffer: java.nio.DoubleBuffer allocate(int)>(v1);
return v2;
}
static void <clinit>()
{
java.lang.reflect.Method[] v11, v2;
int v12, v13, v3, v4;
java.lang.reflect.Method v14, v5;
boolean v15, v6;
com.google.common.collect.ImmutableMap v17, v8;
com.google.common.collect.ImmutableMap$Builder v0, v9;
java.lang.Class v1, v10, v16, v7;
v0 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>();
v1 = class "Lcom/google/common/testing/FreshValueGenerator;";
v2 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label3;
v5 = v2[v4];
v6 = virtualinvoke v5.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lcom/google/common/testing/FreshValueGenerator$Generates;");
if v6 == 0 goto label2;
v7 = virtualinvoke v5.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
virtualinvoke v0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(v7, v5);
label2:
v4 = v4 + 1;
goto label1;
label3:
v8 = virtualinvoke v0.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap buildOrThrow()>();
<com.google.common.testing.FreshValueGenerator: com.google.common.collect.ImmutableMap GENERATORS> = v8;
v9 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>();
v10 = class "Lcom/google/common/testing/FreshValueGenerator;";
v11 = virtualinvoke v10.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();
v12 = lengthof v11;
v13 = 0;
label4:
if v13 >= v12 goto label6;
v14 = v11[v13];
v15 = virtualinvoke v14.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lcom/google/common/testing/FreshValueGenerator$Empty;");
if v15 == 0 goto label5;
v16 = virtualinvoke v14.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
virtualinvoke v9.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(v16, v14);
label5:
v13 = v13 + 1;
goto label4;
label6:
v17 = virtualinvoke v9.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap buildOrThrow()>();
<com.google.common.testing.FreshValueGenerator: com.google.common.collect.ImmutableMap EMPTY_GENERATORS> = v17;
return;
}
}