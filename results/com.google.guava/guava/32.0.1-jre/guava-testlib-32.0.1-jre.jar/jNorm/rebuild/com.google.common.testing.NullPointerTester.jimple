public final class com.google.common.testing.NullPointerTester extends java.lang.Object
{
private final com.google.common.collect.ClassToInstanceMap defaults;
private final java.util.List ignoredMembers;
private com.google.common.testing.NullPointerTester$ExceptionTypePolicy policy;
private static final com.google.common.collect.ImmutableSet NULLABLE_ANNOTATION_SIMPLE_NAMES;
private static final com.google.common.testing.NullPointerTester$NullnessAnnotationReader NULLNESS_ANNOTATION_READER;
public void <init>()
{
com.google.common.testing.NullPointerTester v0;
java.lang.NoSuchMethodException v8;
com.google.common.testing.NullPointerTester$ExceptionTypePolicy v3;
java.lang.Class[] v6;
java.util.ArrayList v2;
com.google.common.collect.MutableClassToInstanceMap v1;
java.util.List v4;
java.lang.Class v5;
java.lang.reflect.Method v7;
v0 := @this: com.google.common.testing.NullPointerTester;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = staticinvoke <com.google.common.collect.MutableClassToInstanceMap: com.google.common.collect.MutableClassToInstanceMap create()>();
v0.<com.google.common.testing.NullPointerTester: com.google.common.collect.ClassToInstanceMap defaults> = v1;
v2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();
v0.<com.google.common.testing.NullPointerTester: java.util.List ignoredMembers> = v2;
v3 = <com.google.common.testing.NullPointerTester$ExceptionTypePolicy: com.google.common.testing.NullPointerTester$ExceptionTypePolicy NPE_OR_UOE>;
v0.<com.google.common.testing.NullPointerTester: com.google.common.testing.NullPointerTester$ExceptionTypePolicy policy> = v3;
label1:
v4 = v0.<com.google.common.testing.NullPointerTester: java.util.List ignoredMembers>;
v5 = class "Lcom/google/common/base/Converter;";
v6 = newarray (java.lang.Class)[1];
v6[0] = class "Ljava/lang/Object;";
v7 = virtualinvoke v5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("apply", v6);
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v7);
label2:
goto label4;
label3:
v8 := @caughtexception;
label4:
return;
catch java.lang.NoSuchMethodException from label1 to label2 with label3;
}
public com.google.common.testing.NullPointerTester setDefault(java.lang.Class, java.lang.Object)
{
com.google.common.collect.ClassToInstanceMap v3;
com.google.common.testing.NullPointerTester v0;
java.lang.Class v1;
java.lang.Object v2, v4;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.Object;
v3 = v0.<com.google.common.testing.NullPointerTester: com.google.common.collect.ClassToInstanceMap defaults>;
v4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v2);
interfaceinvoke v3.<com.google.common.collect.ClassToInstanceMap: java.lang.Object putInstance(java.lang.Class,java.lang.Object)>(v1, v4);
return v0;
}
public com.google.common.testing.NullPointerTester ignore(java.lang.reflect.Method)
{
java.util.List v2;
com.google.common.testing.NullPointerTester v0;
java.lang.Object v3;
java.lang.reflect.Method v1;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: java.lang.reflect.Method;
v2 = v0.<com.google.common.testing.NullPointerTester: java.util.List ignoredMembers>;
v3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v1);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v3);
return v0;
}
public com.google.common.testing.NullPointerTester ignore(java.lang.reflect.Constructor)
{
java.util.List v2;
com.google.common.testing.NullPointerTester v0;
java.lang.Object v3;
java.lang.reflect.Constructor v1;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: java.lang.reflect.Constructor;
v2 = v0.<com.google.common.testing.NullPointerTester: java.util.List ignoredMembers>;
v3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v1);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v3);
return v0;
}
public void testConstructors(java.lang.Class, com.google.common.testing.NullPointerTester$Visibility)
{
com.google.common.testing.NullPointerTester v0;
java.lang.reflect.Constructor v6;
com.google.common.testing.NullPointerTester$Visibility v2;
java.lang.reflect.Constructor[] v3;
int v4, v5;
java.lang.Class v1;
boolean v7, v8;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: com.google.common.testing.NullPointerTester$Visibility;
v3 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label3;
v6 = v3[v5];
v7 = virtualinvoke v2.<com.google.common.testing.NullPointerTester$Visibility: boolean isVisible(java.lang.reflect.Member)>(v6);
if v7 == 0 goto label2;
v8 = specialinvoke v0.<com.google.common.testing.NullPointerTester: boolean isIgnored(java.lang.reflect.Member)>(v6);
if v8 != 0 goto label2;
virtualinvoke v0.<com.google.common.testing.NullPointerTester: void testConstructor(java.lang.reflect.Constructor)>(v6);
label2:
v5 = v5 + 1;
goto label1;
label3:
return;
}
public void testAllPublicConstructors(java.lang.Class)
{
java.lang.Class v1;
com.google.common.testing.NullPointerTester v0;
com.google.common.testing.NullPointerTester$Visibility v2;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: java.lang.Class;
v2 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PUBLIC>;
virtualinvoke v0.<com.google.common.testing.NullPointerTester: void testConstructors(java.lang.Class,com.google.common.testing.NullPointerTester$Visibility)>(v1, v2);
return;
}
public void testStaticMethods(java.lang.Class, com.google.common.testing.NullPointerTester$Visibility)
{
java.util.Iterator v4;
com.google.common.testing.NullPointerTester v0;
com.google.common.testing.NullPointerTester$Visibility v2;
java.lang.Iterable v3;
java.lang.Class v1;
java.lang.Object v6;
boolean v5, v7;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: com.google.common.testing.NullPointerTester$Visibility;
v3 = virtualinvoke v2.<com.google.common.testing.NullPointerTester$Visibility: java.lang.Iterable getStaticMethods(java.lang.Class)>(v1);
v4 = interfaceinvoke v3.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = specialinvoke v0.<com.google.common.testing.NullPointerTester: boolean isIgnored(java.lang.reflect.Member)>(v6);
if v7 != 0 goto label1;
virtualinvoke v0.<com.google.common.testing.NullPointerTester: void testMethod(java.lang.Object,java.lang.reflect.Method)>(null, v6);
goto label1;
label2:
return;
}
public void testAllPublicStaticMethods(java.lang.Class)
{
java.lang.Class v1;
com.google.common.testing.NullPointerTester v0;
com.google.common.testing.NullPointerTester$Visibility v2;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: java.lang.Class;
v2 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PUBLIC>;
virtualinvoke v0.<com.google.common.testing.NullPointerTester: void testStaticMethods(java.lang.Class,com.google.common.testing.NullPointerTester$Visibility)>(v1, v2);
return;
}
public void testInstanceMethods(java.lang.Object, com.google.common.testing.NullPointerTester$Visibility)
{
com.google.common.testing.NullPointerTester v0;
com.google.common.testing.NullPointerTester$Visibility v2;
com.google.common.collect.ImmutableList v4;
java.lang.Class v3;
java.lang.Object v1, v7;
com.google.common.collect.UnmodifiableIterator v5;
boolean v6;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: com.google.common.testing.NullPointerTester$Visibility;
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v0.<com.google.common.testing.NullPointerTester: com.google.common.collect.ImmutableList getInstanceMethodsToTest(java.lang.Class,com.google.common.testing.NullPointerTester$Visibility)>(v3, v2);
v5 = virtualinvoke v4.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v0.<com.google.common.testing.NullPointerTester: void testMethod(java.lang.Object,java.lang.reflect.Method)>(v1, v7);
goto label1;
label2:
return;
}
com.google.common.collect.ImmutableList getInstanceMethodsToTest(java.lang.Class, com.google.common.testing.NullPointerTester$Visibility)
{
java.util.Iterator v5;
com.google.common.testing.NullPointerTester v0;
com.google.common.testing.NullPointerTester$Visibility v2;
java.lang.Iterable v4;
com.google.common.collect.ImmutableList v9;
java.lang.Class v1;
java.lang.Object v7;
boolean v6, v8;
com.google.common.collect.ImmutableList$Builder v3;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: com.google.common.testing.NullPointerTester$Visibility;
v3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();
v4 = virtualinvoke v2.<com.google.common.testing.NullPointerTester$Visibility: java.lang.Iterable getInstanceMethods(java.lang.Class)>(v1);
v5 = interfaceinvoke v4.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = specialinvoke v0.<com.google.common.testing.NullPointerTester: boolean isIgnored(java.lang.reflect.Member)>(v7);
if v8 != 0 goto label1;
virtualinvoke v3.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>(v7);
goto label1;
label2:
v9 = virtualinvoke v3.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();
return v9;
}
public void testAllPublicInstanceMethods(java.lang.Object)
{
java.lang.Object v1;
com.google.common.testing.NullPointerTester v0;
com.google.common.testing.NullPointerTester$Visibility v2;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: java.lang.Object;
v2 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PUBLIC>;
virtualinvoke v0.<com.google.common.testing.NullPointerTester: void testInstanceMethods(java.lang.Object,com.google.common.testing.NullPointerTester$Visibility)>(v1, v2);
return;
}
public void testMethod(java.lang.Object, java.lang.reflect.Method)
{
com.google.common.testing.NullPointerTester v0;
int v4, v5;
java.lang.Class[] v3;
java.lang.Object v1;
java.lang.reflect.Method v2;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.reflect.Method;
v3 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
v4 = 0;
label1:
v5 = lengthof v3;
if v4 >= v5 goto label2;
virtualinvoke v0.<com.google.common.testing.NullPointerTester: void testMethodParameter(java.lang.Object,java.lang.reflect.Method,int)>(v1, v2, v4);
v4 = v4 + 1;
goto label1;
label2:
return;
}
public void testConstructor(java.lang.reflect.Constructor)
{
com.google.common.testing.NullPointerTester v0;
java.lang.Class[] v8;
java.lang.reflect.Constructor v1;
int v10, v3, v9;
java.lang.Class v2, v5;
java.lang.String v7;
boolean v4, v6;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: java.lang.reflect.Constructor;
v2 = virtualinvoke v1.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
v3 = virtualinvoke v2.<java.lang.Class: int getModifiers()>();
v4 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(v3);
if v4 != 0 goto label1;
v5 = virtualinvoke v2.<java.lang.Class: java.lang.Class getEnclosingClass()>();
if v5 != null goto label2;
label1:
v6 = 1;
goto label3;
label2:
v6 = 0;
label3:
v7 = virtualinvoke v2.<java.lang.Class: java.lang.String getName()>();
staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>(v6, "Cannot test constructor of non-static inner class: %s", v7);
v8 = virtualinvoke v1.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();
v9 = 0;
label4:
v10 = lengthof v8;
if v9 >= v10 goto label5;
virtualinvoke v0.<com.google.common.testing.NullPointerTester: void testConstructorParameter(java.lang.reflect.Constructor,int)>(v1, v9);
v9 = v9 + 1;
goto label4;
label5:
return;
}
public void testMethodParameter(java.lang.Object, java.lang.reflect.Method, int)
{
com.google.common.testing.NullPointerTester v0;
com.google.common.reflect.Invokable v4;
int v3;
java.lang.Class v5;
java.lang.Object v1;
java.lang.reflect.Method v2;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.reflect.Method;
v3 := @parameter2: int;
virtualinvoke v2.<java.lang.reflect.Method: void setAccessible(boolean)>(1);
v4 = staticinvoke <com.google.common.testing.NullPointerTester: com.google.common.reflect.Invokable invokable(java.lang.Object,java.lang.reflect.Method)>(v1, v2);
v5 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
specialinvoke v0.<com.google.common.testing.NullPointerTester: void testParameter(java.lang.Object,com.google.common.reflect.Invokable,int,java.lang.Class)>(v1, v4, v3, v5);
return;
}
public void testConstructorParameter(java.lang.reflect.Constructor, int)
{
com.google.common.testing.NullPointerTester v0;
com.google.common.reflect.Invokable v3;
int v2;
java.lang.Class v4;
java.lang.reflect.Constructor v1;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: java.lang.reflect.Constructor;
v2 := @parameter1: int;
virtualinvoke v1.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);
v3 = staticinvoke <com.google.common.reflect.Invokable: com.google.common.reflect.Invokable 'from'(java.lang.reflect.Constructor)>(v1);
v4 = virtualinvoke v1.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
specialinvoke v0.<com.google.common.testing.NullPointerTester: void testParameter(java.lang.Object,com.google.common.reflect.Invokable,int,java.lang.Class)>(null, v3, v2, v4);
return;
}
private void testParameter(java.lang.Object, com.google.common.reflect.Invokable, int, java.lang.Class)
{
java.lang.Throwable v15;
java.lang.Object[] v11, v19;
com.google.common.testing.NullPointerTester$ExceptionTypePolicy v16;
com.google.common.reflect.TypeToken v22;
java.lang.Integer v23;
com.google.common.collect.ImmutableList v20, v8;
int v3;
java.lang.String v12, v13, v24, v25, v6;
boolean v10, v17, v5, v7;
java.lang.IllegalAccessException v26;
com.google.common.testing.NullPointerTester v0;
junit.framework.AssertionFailedError v18;
java.lang.RuntimeException v27;
java.lang.reflect.InvocationTargetException v14;
com.google.common.reflect.Invokable v2;
java.lang.Class v4;
java.lang.Object v1, v21, v9;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: com.google.common.reflect.Invokable;
v3 := @parameter2: int;
v4 := @parameter3: java.lang.Class;
v5 = staticinvoke <com.google.common.testing.NullPointerTester: boolean isAndroid()>();
if v5 == 0 goto label1;
v6 = staticinvoke <com.google.common.reflect.Reflection: java.lang.String getPackageName(java.lang.Class)>(v4);
v7 = virtualinvoke v6.<java.lang.String: boolean startsWith(java.lang.String)>("com.google.common");
if v7 == 0 goto label1;
return;
label1:
v8 = virtualinvoke v2.<com.google.common.reflect.Invokable: com.google.common.collect.ImmutableList getParameters()>();
v9 = virtualinvoke v8.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(v3);
v10 = staticinvoke <com.google.common.testing.NullPointerTester: boolean isPrimitiveOrNullable(com.google.common.reflect.Parameter)>(v9);
if v10 == 0 goto label2;
return;
label2:
v11 = specialinvoke v0.<com.google.common.testing.NullPointerTester: java.lang.Object[] buildParamList(com.google.common.reflect.Invokable,int)>(v2, v3);
label3:
virtualinvoke v2.<com.google.common.reflect.Invokable: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v1, v11);
v12 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(v11);
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,com.google.common.reflect.Invokable,java.lang.String,java.lang.Class)>(v3, v2, v12, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No exception thrown for parameter at index \u0001 from \u0001\u0001 for \u0001");
staticinvoke <junit.framework.Assert: void fail(java.lang.String)>(v13);
label4:
goto label8;
label5:
v14 := @caughtexception;
v15 = virtualinvoke v14.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
v16 = v0.<com.google.common.testing.NullPointerTester: com.google.common.testing.NullPointerTester$ExceptionTypePolicy policy>;
v17 = virtualinvoke v16.<com.google.common.testing.NullPointerTester$ExceptionTypePolicy: boolean isExpectedType(java.lang.Throwable)>(v15);
if v17 == 0 goto label6;
return;
label6:
v18 = new junit.framework.AssertionFailedError;
v19 = newarray (java.lang.Object)[5];
v19[0] = v2;
v20 = virtualinvoke v2.<com.google.common.reflect.Invokable: com.google.common.collect.ImmutableList getParameters()>();
v21 = virtualinvoke v20.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(v3);
v22 = virtualinvoke v21.<com.google.common.reflect.Parameter: com.google.common.reflect.TypeToken getType()>();
v19[1] = v22;
v23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v19[2] = v23;
v24 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(v11);
v19[3] = v24;
v19[4] = v15;
v25 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("wrong exception thrown from %s when passing null to %s parameter at index %s.%nFull parameters: %s%nActual exception message: %s", v19);
specialinvoke v18.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>(v25);
virtualinvoke v18.<junit.framework.AssertionFailedError: java.lang.Throwable initCause(java.lang.Throwable)>(v15);
throw v18;
label7:
v26 := @caughtexception;
v27 = new java.lang.RuntimeException;
specialinvoke v27.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v26);
throw v27;
label8:
return;
catch java.lang.reflect.InvocationTargetException from label3 to label4 with label5;
catch java.lang.IllegalAccessException from label3 to label4 with label7;
}
private java.lang.Object[] buildParamList(com.google.common.reflect.Invokable, int)
{
java.lang.Object[] v5;
com.google.common.reflect.TypeToken v11, v9;
com.google.common.collect.ImmutableList v3;
int v2, v4, v6, v7;
java.lang.String v12;
boolean v14, v15;
com.google.common.testing.NullPointerTester v0;
com.google.common.reflect.Invokable v1;
java.lang.Object v10, v13, v8;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: com.google.common.reflect.Invokable;
v2 := @parameter1: int;
v3 = virtualinvoke v1.<com.google.common.reflect.Invokable: com.google.common.collect.ImmutableList getParameters()>();
v4 = virtualinvoke v3.<com.google.common.collect.ImmutableList: int size()>();
v5 = newarray (java.lang.Object)[v4];
v6 = 0;
label1:
v7 = lengthof v5;
if v6 >= v7 goto label6;
v8 = virtualinvoke v3.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(v6);
if v6 == v2 goto label5;
v9 = virtualinvoke v8.<com.google.common.reflect.Parameter: com.google.common.reflect.TypeToken getType()>();
v10 = specialinvoke v0.<com.google.common.testing.NullPointerTester: java.lang.Object getDefaultValue(com.google.common.reflect.TypeToken)>(v9);
v5[v6] = v10;
v11 = virtualinvoke v8.<com.google.common.reflect.Parameter: com.google.common.reflect.TypeToken getType()>();
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.google.common.reflect.TypeToken)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Can\'t find or create a sample instance for type \'\u0001\'; please provide one using NullPointerTester.setDefault()");
v13 = v5[v6];
if v13 != null goto label2;
v14 = staticinvoke <com.google.common.testing.NullPointerTester: boolean isNullable(com.google.common.reflect.Parameter)>(v8);
if v14 == 0 goto label3;
label2:
v15 = 1;
goto label4;
label3:
v15 = 0;
label4:
staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(v12, v15);
label5:
v6 = v6 + 1;
goto label1;
label6:
return v5;
}
private java.lang.Object getDefaultValue(com.google.common.reflect.TypeToken)
{
com.google.common.reflect.TypeToken v1, v13, v18, v22, v9;
com.google.common.collect.ClassToInstanceMap v2;
boolean v25;
com.google.common.base.Converter v23;
com.google.common.testing.NullPointerTester v0;
java.lang.reflect.TypeVariable v17, v21;
java.lang.reflect.Type v12, v8;
java.lang.reflect.TypeVariable[] v16, v20;
java.lang.Class v10, v11, v14, v15, v19, v24, v3, v5, v7;
java.lang.Object v26, v4, v6;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: com.google.common.reflect.TypeToken;
v2 = v0.<com.google.common.testing.NullPointerTester: com.google.common.collect.ClassToInstanceMap defaults>;
v3 = virtualinvoke v1.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();
v4 = interfaceinvoke v2.<com.google.common.collect.ClassToInstanceMap: java.lang.Object getInstance(java.lang.Class)>(v3);
if v4 == null goto label1;
return v4;
label1:
v5 = virtualinvoke v1.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();
v6 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(v5);
if v6 == null goto label2;
return v6;
label2:
v7 = virtualinvoke v1.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();
if v7 != class "Ljava/lang/Class;" goto label3;
v8 = virtualinvoke v1.<com.google.common.reflect.TypeToken: java.lang.reflect.Type getType()>();
v9 = staticinvoke <com.google.common.testing.NullPointerTester: com.google.common.reflect.TypeToken getFirstTypeParameter(java.lang.reflect.Type)>(v8);
v10 = virtualinvoke v9.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();
return v10;
label3:
v11 = virtualinvoke v1.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();
if v11 != class "Lcom/google/common/reflect/TypeToken;" goto label4;
v12 = virtualinvoke v1.<com.google.common.reflect.TypeToken: java.lang.reflect.Type getType()>();
v13 = staticinvoke <com.google.common.testing.NullPointerTester: com.google.common.reflect.TypeToken getFirstTypeParameter(java.lang.reflect.Type)>(v12);
return v13;
label4:
v14 = virtualinvoke v1.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();
if v14 != class "Lcom/google/common/base/Converter;" goto label5;
v15 = class "Lcom/google/common/base/Converter;";
v16 = virtualinvoke v15.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v17 = v16[0];
v18 = virtualinvoke v1.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken resolveType(java.lang.reflect.Type)>(v17);
v19 = class "Lcom/google/common/base/Converter;";
v20 = virtualinvoke v19.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v21 = v20[1];
v22 = virtualinvoke v1.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken resolveType(java.lang.reflect.Type)>(v21);
v23 = specialinvoke v0.<com.google.common.testing.NullPointerTester: com.google.common.base.Converter defaultConverter(com.google.common.reflect.TypeToken,com.google.common.reflect.TypeToken)>(v18, v22);
return v23;
label5:
v24 = virtualinvoke v1.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();
v25 = virtualinvoke v24.<java.lang.Class: boolean isInterface()>();
if v25 == 0 goto label6;
v26 = specialinvoke v0.<com.google.common.testing.NullPointerTester: java.lang.Object newDefaultReturningProxy(com.google.common.reflect.TypeToken)>(v1);
return v26;
label6:
return null;
}
private com.google.common.base.Converter defaultConverter(com.google.common.reflect.TypeToken, com.google.common.reflect.TypeToken)
{
com.google.common.testing.NullPointerTester$1 v3;
com.google.common.testing.NullPointerTester v0;
com.google.common.reflect.TypeToken v1, v2;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: com.google.common.reflect.TypeToken;
v2 := @parameter1: com.google.common.reflect.TypeToken;
v3 = new com.google.common.testing.NullPointerTester$1;
specialinvoke v3.<com.google.common.testing.NullPointerTester$1: void <init>(com.google.common.testing.NullPointerTester,com.google.common.reflect.TypeToken,com.google.common.reflect.TypeToken)>(v0, v2, v1);
return v3;
}
private static com.google.common.reflect.TypeToken getFirstTypeParameter(java.lang.reflect.Type)
{
java.lang.reflect.Type v0, v3;
java.lang.reflect.Type[] v2;
com.google.common.reflect.TypeToken v4, v5;
boolean v1;
v0 := @parameter0: java.lang.reflect.Type;
v1 = v0 instanceof java.lang.reflect.ParameterizedType;
if v1 == 0 goto label1;
v2 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v3 = v2[0];
v4 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)>(v3);
return v4;
label1:
v5 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.Class)>(class "Ljava/lang/Object;");
return v5;
}
private java.lang.Object newDefaultReturningProxy(com.google.common.reflect.TypeToken)
{
com.google.common.testing.NullPointerTester v0;
com.google.common.testing.NullPointerTester$2 v2;
java.lang.Object v3;
com.google.common.reflect.TypeToken v1;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: com.google.common.reflect.TypeToken;
v2 = new com.google.common.testing.NullPointerTester$2;
specialinvoke v2.<com.google.common.testing.NullPointerTester$2: void <init>(com.google.common.testing.NullPointerTester)>(v0);
v3 = virtualinvoke v2.<com.google.common.testing.NullPointerTester$2: java.lang.Object newProxy(com.google.common.reflect.TypeToken)>(v1);
return v3;
}
private static com.google.common.reflect.Invokable invokable(java.lang.Object, java.lang.reflect.Method)
{
com.google.common.reflect.Invokable v2, v5;
java.lang.Class v3;
java.lang.Object v0;
com.google.common.reflect.TypeToken v4;
java.lang.reflect.Method v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.reflect.Method;
if v0 != null goto label1;
v2 = staticinvoke <com.google.common.reflect.Invokable: com.google.common.reflect.Invokable 'from'(java.lang.reflect.Method)>(v1);
return v2;
label1:
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.Class)>(v3);
v5 = virtualinvoke v4.<com.google.common.reflect.TypeToken: com.google.common.reflect.Invokable method(java.lang.reflect.Method)>(v1);
return v5;
}
static boolean isPrimitiveOrNullable(com.google.common.reflect.Parameter)
{
com.google.common.reflect.Parameter v0;
java.lang.Class v2;
com.google.common.reflect.TypeToken v1;
boolean v3, v4, v5;
v0 := @parameter0: com.google.common.reflect.Parameter;
v1 = virtualinvoke v0.<com.google.common.reflect.Parameter: com.google.common.reflect.TypeToken getType()>();
v2 = virtualinvoke v1.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();
v3 = virtualinvoke v2.<java.lang.Class: boolean isPrimitive()>();
if v3 != 0 goto label1;
v4 = staticinvoke <com.google.common.testing.NullPointerTester: boolean isNullable(com.google.common.reflect.Parameter)>(v0);
if v4 == 0 goto label2;
label1:
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
return v5;
}
static boolean isNullable(com.google.common.reflect.Invokable)
{
com.google.common.reflect.Invokable v0;
boolean v2;
com.google.common.testing.NullPointerTester$NullnessAnnotationReader v1;
v0 := @parameter0: com.google.common.reflect.Invokable;
v1 = <com.google.common.testing.NullPointerTester: com.google.common.testing.NullPointerTester$NullnessAnnotationReader NULLNESS_ANNOTATION_READER>;
v2 = virtualinvoke v1.<com.google.common.testing.NullPointerTester$NullnessAnnotationReader: boolean isNullable(com.google.common.reflect.Invokable)>(v0);
return v2;
}
static boolean isNullable(com.google.common.reflect.Parameter)
{
com.google.common.reflect.Parameter v0;
boolean v2;
com.google.common.testing.NullPointerTester$NullnessAnnotationReader v1;
v0 := @parameter0: com.google.common.reflect.Parameter;
v1 = <com.google.common.testing.NullPointerTester: com.google.common.testing.NullPointerTester$NullnessAnnotationReader NULLNESS_ANNOTATION_READER>;
v2 = virtualinvoke v1.<com.google.common.testing.NullPointerTester$NullnessAnnotationReader: boolean isNullable(com.google.common.reflect.Parameter)>(v0);
return v2;
}
private static boolean containsNullable(java.lang.'annotation'.Annotation[])
{
com.google.common.collect.ImmutableSet v4;
java.lang.'annotation'.Annotation[] v0;
int v1, v2;
java.lang.'annotation'.Annotation v3;
java.lang.Class v5;
java.lang.String v6;
boolean v7;
v0 := @parameter0: java.lang.'annotation'.Annotation[];
v1 = lengthof v0;
v2 = 0;
label1:
if v2 >= v1 goto label3;
v3 = v0[v2];
v4 = <com.google.common.testing.NullPointerTester: com.google.common.collect.ImmutableSet NULLABLE_ANNOTATION_SIMPLE_NAMES>;
v5 = interfaceinvoke v3.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getSimpleName()>();
v7 = virtualinvoke v4.<com.google.common.collect.ImmutableSet: boolean contains(java.lang.Object)>(v6);
if v7 == 0 goto label2;
return 1;
label2:
v2 = v2 + 1;
goto label1;
label3:
return 0;
}
private boolean isIgnored(java.lang.reflect.Member)
{
java.util.List v3;
com.google.common.testing.NullPointerTester v0;
java.lang.reflect.Member v1;
boolean v2, v4, v5, v6;
v0 := @this: com.google.common.testing.NullPointerTester;
v1 := @parameter0: java.lang.reflect.Member;
v2 = interfaceinvoke v1.<java.lang.reflect.Member: boolean isSynthetic()>();
if v2 != 0 goto label1;
v3 = v0.<com.google.common.testing.NullPointerTester: java.util.List ignoredMembers>;
v4 = interfaceinvoke v3.<java.util.List: boolean contains(java.lang.Object)>(v1);
if v4 != 0 goto label1;
v5 = staticinvoke <com.google.common.testing.NullPointerTester: boolean isEquals(java.lang.reflect.Member)>(v1);
if v5 == 0 goto label2;
label1:
v6 = 1;
goto label3;
label2:
v6 = 0;
label3:
return v6;
}
private static boolean isEquals(java.lang.reflect.Member)
{
java.lang.reflect.Member v0;
java.lang.Class[] v4;
int v5;
java.lang.Class v6;
java.lang.String v2;
boolean v1, v3, v7;
v0 := @parameter0: java.lang.reflect.Member;
v1 = v0 instanceof java.lang.reflect.Method;
if v1 != 0 goto label1;
return 0;
label1:
v2 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.String getName()>();
v3 = virtualinvoke v2.<java.lang.String: boolean contentEquals(java.lang.CharSequence)>("equals");
if v3 != 0 goto label2;
return 0;
label2:
v4 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
v5 = lengthof v4;
if v5 == 1 goto label3;
return 0;
label3:
v6 = v4[0];
v7 = virtualinvoke v6.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Object;");
if v7 != 0 goto label4;
return 0;
label4:
return 1;
}
private static boolean annotatedTypeExists()
{
java.lang.ClassNotFoundException v0;
label1:
staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.lang.reflect.AnnotatedType");
label2:
goto label4;
label3:
v0 := @caughtexception;
return 0;
label4:
return 1;
catch java.lang.ClassNotFoundException from label1 to label2 with label3;
}
private static boolean isAndroid()
{
java.lang.Object v1;
java.lang.String v0;
boolean v2;
v0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.runtime.name", "");
v1 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v0);
v2 = virtualinvoke v1.<java.lang.String: boolean contains(java.lang.CharSequence)>("Android");
return v2;
}
static void <clinit>()
{
com.google.common.collect.ImmutableSet v0;
boolean v1;
com.google.common.testing.NullPointerTester$NullnessAnnotationReader v2;
v0 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>("CheckForNull", "Nullable", "NullableDecl", "NullableType");
<com.google.common.testing.NullPointerTester: com.google.common.collect.ImmutableSet NULLABLE_ANNOTATION_SIMPLE_NAMES> = v0;
v1 = staticinvoke <com.google.common.testing.NullPointerTester: boolean annotatedTypeExists()>();
if v1 == 0 goto label1;
v2 = <com.google.common.testing.NullPointerTester$NullnessAnnotationReader: com.google.common.testing.NullPointerTester$NullnessAnnotationReader FROM_DECLARATION_AND_TYPE_USE_ANNOTATIONS>;
goto label2;
label1:
v2 = <com.google.common.testing.NullPointerTester$NullnessAnnotationReader: com.google.common.testing.NullPointerTester$NullnessAnnotationReader FROM_DECLARATION_ANNOTATIONS_ONLY>;
label2:
<com.google.common.testing.NullPointerTester: com.google.common.testing.NullPointerTester$NullnessAnnotationReader NULLNESS_ANNOTATION_READER> = v2;
return;
}
}