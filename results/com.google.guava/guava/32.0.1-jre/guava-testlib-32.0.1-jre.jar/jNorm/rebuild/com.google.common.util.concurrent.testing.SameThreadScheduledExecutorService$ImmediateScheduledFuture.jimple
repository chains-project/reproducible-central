class com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture extends com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture implements com.google.common.util.concurrent.ListenableScheduledFuture
{
private java.util.concurrent.ExecutionException exception;
protected void <init>(com.google.common.util.concurrent.ListenableFuture)
{
com.google.common.util.concurrent.ListenableFuture v1;
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture v0;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture;
v1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;
specialinvoke v0.<com.google.common.util.concurrent.ForwardingListenableFuture$SimpleForwardingListenableFuture: void <init>(com.google.common.util.concurrent.ListenableFuture)>(v1);
return;
}
public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
{
java.util.concurrent.TimeUnit v2;
java.lang.Object v3;
long v1;
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture v0;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v2, "unit must not be null!");
v3 = virtualinvoke v0.<com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture: java.lang.Object get()>();
return v3;
}
public long getDelay(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture v0;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture;
v1 := @parameter0: java.util.concurrent.TimeUnit;
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v1, "unit must not be null!");
return 0L;
}
public int compareTo(java.util.concurrent.Delayed)
{
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture v0;
java.util.concurrent.Delayed v1;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture;
v1 := @parameter0: java.util.concurrent.Delayed;
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v1, "other must not be null!");
return 0;
}
}