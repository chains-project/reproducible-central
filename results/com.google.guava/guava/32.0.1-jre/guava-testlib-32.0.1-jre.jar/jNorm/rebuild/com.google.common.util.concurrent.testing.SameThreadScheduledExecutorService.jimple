class com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService extends java.util.concurrent.AbstractExecutorService implements com.google.common.util.concurrent.ListeningScheduledExecutorService
{
private final com.google.common.util.concurrent.ListeningExecutorService delegate;
void <init>()
{
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService v0;
com.google.common.util.concurrent.ListeningExecutorService v1;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService;
specialinvoke v0.<java.util.concurrent.AbstractExecutorService: void <init>()>();
v1 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService newDirectExecutorService()>();
v0.<com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService: com.google.common.util.concurrent.ListeningExecutorService delegate> = v1;
return;
}
public void shutdown()
{
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService v0;
com.google.common.util.concurrent.ListeningExecutorService v1;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService;
v1 = v0.<com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService: com.google.common.util.concurrent.ListeningExecutorService delegate>;
interfaceinvoke v1.<com.google.common.util.concurrent.ListeningExecutorService: void shutdown()>();
return;
}
public java.util.List shutdownNow()
{
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService v0;
java.util.List v2;
com.google.common.util.concurrent.ListeningExecutorService v1;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService;
v1 = v0.<com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService: com.google.common.util.concurrent.ListeningExecutorService delegate>;
v2 = interfaceinvoke v1.<com.google.common.util.concurrent.ListeningExecutorService: java.util.List shutdownNow()>();
return v2;
}
public boolean isShutdown()
{
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService v0;
boolean v2;
com.google.common.util.concurrent.ListeningExecutorService v1;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService;
v1 = v0.<com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService: com.google.common.util.concurrent.ListeningExecutorService delegate>;
v2 = interfaceinvoke v1.<com.google.common.util.concurrent.ListeningExecutorService: boolean isShutdown()>();
return v2;
}
public boolean isTerminated()
{
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService v0;
boolean v2;
com.google.common.util.concurrent.ListeningExecutorService v1;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService;
v1 = v0.<com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService: com.google.common.util.concurrent.ListeningExecutorService delegate>;
v2 = interfaceinvoke v1.<com.google.common.util.concurrent.ListeningExecutorService: boolean isTerminated()>();
return v2;
}
public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
{
java.util.concurrent.TimeUnit v2;
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService v0;
long v1;
boolean v4;
com.google.common.util.concurrent.ListeningExecutorService v3;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v2, "unit must not be null!");
v3 = v0.<com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService: com.google.common.util.concurrent.ListeningExecutorService delegate>;
v4 = interfaceinvoke v3.<com.google.common.util.concurrent.ListeningExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(v1, v2);
return v4;
}
public com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable)
{
com.google.common.util.concurrent.ListenableFuture v3;
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService v0;
java.util.concurrent.Callable v1;
com.google.common.util.concurrent.ListeningExecutorService v2;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService;
v1 := @parameter0: java.util.concurrent.Callable;
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v1, "task must not be null!");
v2 = v0.<com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService: com.google.common.util.concurrent.ListeningExecutorService delegate>;
v3 = interfaceinvoke v2.<com.google.common.util.concurrent.ListeningExecutorService: com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable)>(v1);
return v3;
}
public com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable, java.lang.Object)
{
com.google.common.util.concurrent.ListenableFuture v4;
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService v0;
java.lang.Object v2;
java.lang.Runnable v1;
com.google.common.util.concurrent.ListeningExecutorService v3;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: java.lang.Object;
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v1, "task must not be null!");
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v2, "result must not be null!");
v3 = v0.<com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService: com.google.common.util.concurrent.ListeningExecutorService delegate>;
v4 = interfaceinvoke v3.<com.google.common.util.concurrent.ListeningExecutorService: com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable,java.lang.Object)>(v1, v2);
return v4;
}
public com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable)
{
com.google.common.util.concurrent.ListenableFuture v3;
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService v0;
java.lang.Runnable v1;
com.google.common.util.concurrent.ListeningExecutorService v2;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService;
v1 := @parameter0: java.lang.Runnable;
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v1, "task must not be null!");
v2 = v0.<com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService: com.google.common.util.concurrent.ListeningExecutorService delegate>;
v3 = interfaceinvoke v2.<com.google.common.util.concurrent.ListeningExecutorService: com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable)>(v1);
return v3;
}
public java.util.List invokeAll(java.util.Collection) throws java.lang.InterruptedException
{
java.util.List v3;
java.util.Collection v1;
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService v0;
com.google.common.util.concurrent.ListeningExecutorService v2;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService;
v1 := @parameter0: java.util.Collection;
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v1, "tasks must not be null!");
v2 = v0.<com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService: com.google.common.util.concurrent.ListeningExecutorService delegate>;
v3 = interfaceinvoke v2.<com.google.common.util.concurrent.ListeningExecutorService: java.util.List invokeAll(java.util.Collection)>(v1);
return v3;
}
public java.util.List invokeAll(java.util.Collection, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
{
java.util.concurrent.TimeUnit v3;
java.util.List v5;
java.util.Collection v1;
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService v0;
long v2;
com.google.common.util.concurrent.ListeningExecutorService v4;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService;
v1 := @parameter0: java.util.Collection;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v1, "tasks must not be null!");
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v3, "unit must not be null!");
v4 = v0.<com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService: com.google.common.util.concurrent.ListeningExecutorService delegate>;
v5 = interfaceinvoke v4.<com.google.common.util.concurrent.ListeningExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>(v1, v2, v3);
return v5;
}
public java.lang.Object invokeAny(java.util.Collection) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
{
java.util.Collection v1;
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService v0;
java.lang.Object v3;
com.google.common.util.concurrent.ListeningExecutorService v2;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService;
v1 := @parameter0: java.util.Collection;
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v1, "tasks must not be null!");
v2 = v0.<com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService: com.google.common.util.concurrent.ListeningExecutorService delegate>;
v3 = interfaceinvoke v2.<com.google.common.util.concurrent.ListeningExecutorService: java.lang.Object invokeAny(java.util.Collection)>(v1);
return v3;
}
public java.lang.Object invokeAny(java.util.Collection, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
{
java.util.concurrent.TimeUnit v3;
java.util.Collection v1;
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService v0;
java.lang.Object v5;
long v2;
com.google.common.util.concurrent.ListeningExecutorService v4;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService;
v1 := @parameter0: java.util.Collection;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v1, "tasks must not be null!");
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v3, "unit must not be null!");
v4 = v0.<com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService: com.google.common.util.concurrent.ListeningExecutorService delegate>;
v5 = interfaceinvoke v4.<com.google.common.util.concurrent.ListeningExecutorService: java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>(v1, v2, v3);
return v5;
}
public void execute(java.lang.Runnable)
{
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService v0;
java.lang.Runnable v1;
com.google.common.util.concurrent.ListeningExecutorService v2;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService;
v1 := @parameter0: java.lang.Runnable;
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v1, "command must not be null!");
v2 = v0.<com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService: com.google.common.util.concurrent.ListeningExecutorService delegate>;
interfaceinvoke v2.<com.google.common.util.concurrent.ListeningExecutorService: void execute(java.lang.Runnable)>(v1);
return;
}
public com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v3;
com.google.common.util.concurrent.ListenableScheduledFuture v5;
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService v0;
java.util.concurrent.Callable v4;
long v2;
java.lang.Runnable v1;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v1, "command must not be null");
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v3, "unit must not be null!");
v4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.lang.Runnable)>(v1);
v5 = virtualinvoke v0.<com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService: com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)>(v4, v2, v3);
return v5;
}
public com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v3;
com.google.common.util.concurrent.ListenableFuture v4;
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService v0;
java.util.concurrent.Callable v1;
long v2;
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture v5;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService;
v1 := @parameter0: java.util.concurrent.Callable;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v1, "callable must not be null!");
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(v3, "unit must not be null!");
v4 = virtualinvoke v0.<com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService: com.google.common.util.concurrent.ListenableFuture submit(java.util.concurrent.Callable)>(v1);
v5 = new com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture;
specialinvoke v5.<com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService$ImmediateScheduledFuture: void <init>(com.google.common.util.concurrent.ListenableFuture)>(v4);
return v5;
}
public com.google.common.util.concurrent.ListenableScheduledFuture scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v4;
java.lang.UnsupportedOperationException v5;
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService v0;
long v2, v3;
java.lang.Runnable v1;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: java.util.concurrent.TimeUnit;
v5 = new java.lang.UnsupportedOperationException;
specialinvoke v5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("scheduleAtFixedRate is not supported.");
throw v5;
}
public com.google.common.util.concurrent.ListenableScheduledFuture scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v4;
java.lang.UnsupportedOperationException v5;
com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService v0;
long v2, v3;
java.lang.Runnable v1;
v0 := @this: com.google.common.util.concurrent.testing.SameThreadScheduledExecutorService;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: java.util.concurrent.TimeUnit;
v5 = new java.lang.UnsupportedOperationException;
specialinvoke v5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("scheduleWithFixedDelay is not supported.");
throw v5;
}
}