public abstract class com.google.common.collect.testing.AbstractMapTester extends com.google.common.collect.testing.AbstractContainerTester
{
public void <init>()
{
com.google.common.collect.testing.AbstractMapTester v0;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: void <init>()>();
return;
}
protected java.util.Map getMap()
{
java.lang.Object v1;
com.google.common.collect.testing.AbstractMapTester v0;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = v0.<com.google.common.collect.testing.AbstractMapTester: java.lang.Object container>;
return v1;
}
protected java.util.Collection actualContents()
{
java.util.Set v2;
com.google.common.collect.testing.AbstractMapTester v0;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
return v2;
}
protected final void resetMap()
{
com.google.common.collect.testing.AbstractMapTester v0;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.lang.Object resetContainer()>();
return;
}
protected void resetMap(java.util.Map$Entry[])
{
com.google.common.collect.testing.AbstractMapTester v0;
java.lang.Object v2, v3;
java.util.Map$Entry[] v1;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 := @parameter0: java.util.Map$Entry[];
v2 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.lang.Object getSubjectGenerator()>();
v3 = interfaceinvoke v2.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v1);
virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.lang.Object resetContainer(java.lang.Object)>(v3);
return;
}
protected transient void expectMissingKeys(java.lang.Object[])
{
java.lang.Object[] v1;
com.google.common.collect.testing.AbstractMapTester v0;
java.util.Map v6;
int v2, v3;
java.lang.Object v4;
java.lang.String v5;
boolean v7;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 := @parameter0: java.lang.Object[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Should not contain key \u0001");
v6 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Map getMap()>();
v7 = interfaceinvoke v6.<java.util.Map: boolean containsKey(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.AbstractMapTester: void assertFalse(java.lang.String,boolean)>(v5, v7);
v3 = v3 + 1;
goto label1;
label2:
return;
}
protected transient void expectMissingValues(java.lang.Object[])
{
java.lang.Object[] v1;
com.google.common.collect.testing.AbstractMapTester v0;
java.util.Map v6;
int v2, v3;
java.lang.Object v4;
java.lang.String v5;
boolean v7;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 := @parameter0: java.lang.Object[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Should not contain value \u0001");
v6 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Map getMap()>();
v7 = interfaceinvoke v6.<java.util.Map: boolean containsValue(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.AbstractMapTester: void assertFalse(java.lang.String,boolean)>(v5, v7);
v3 = v3 + 1;
goto label1;
label2:
return;
}
protected java.util.Map$Entry[] createArrayWithNullKey()
{
java.util.Map$Entry v3, v5;
java.lang.Object[] v1;
com.google.common.collect.testing.AbstractMapTester v0;
int v2;
java.lang.Object v4;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.lang.Object[] createSamplesArray()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: int getNullLocation()>();
v3 = v1[v2];
v4 = interfaceinvoke v3.<java.util.Map$Entry: java.lang.Object getValue()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(null, v4);
v1[v2] = v5;
return v1;
}
protected java.lang.Object getValueForNullKey()
{
java.lang.Object v2;
java.util.Map$Entry v1;
com.google.common.collect.testing.AbstractMapTester v0;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Map$Entry getEntryNullReplaces()>();
v2 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getValue()>();
return v2;
}
protected java.lang.Object getKeyForNullValue()
{
java.lang.Object v2;
java.util.Map$Entry v1;
com.google.common.collect.testing.AbstractMapTester v0;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Map$Entry getEntryNullReplaces()>();
v2 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getKey()>();
return v2;
}
private java.util.Map$Entry getEntryNullReplaces()
{
com.google.common.collect.testing.AbstractMapTester v0;
java.util.Iterator v2;
java.util.Collection v1;
int v3, v4;
java.lang.Object v5;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Collection getSampleElements()>();
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
v3 = 0;
label1:
v4 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: int getNullLocation()>();
if v3 >= v4 goto label2;
interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v3 = v3 + 1;
goto label1;
label2:
v5 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
return v5;
}
protected java.util.Map$Entry[] createArrayWithNullValue()
{
java.util.Map$Entry v3, v5;
java.lang.Object[] v1;
com.google.common.collect.testing.AbstractMapTester v0;
int v2;
java.lang.Object v4;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.lang.Object[] createSamplesArray()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: int getNullLocation()>();
v3 = v1[v2];
v4 = interfaceinvoke v3.<java.util.Map$Entry: java.lang.Object getKey()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v4, null);
v1[v2] = v5;
return v1;
}
protected void initMapWithNullKey()
{
com.google.common.collect.testing.AbstractMapTester v0;
java.util.Map$Entry[] v1;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Map$Entry[] createArrayWithNullKey()>();
virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void resetMap(java.util.Map$Entry[])>(v1);
return;
}
protected void initMapWithNullValue()
{
com.google.common.collect.testing.AbstractMapTester v0;
java.util.Map$Entry[] v1;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Map$Entry[] createArrayWithNullValue()>();
virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void resetMap(java.util.Map$Entry[])>(v1);
return;
}
protected void expectNullKeyMissingWhenNullKeysUnsupported(java.lang.String)
{
com.google.common.collect.testing.AbstractMapTester v0;
java.util.Map v2;
java.lang.String v1;
java.lang.NullPointerException v4;
boolean v3;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 := @parameter0: java.lang.String;
label1:
v2 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Map getMap()>();
v3 = interfaceinvoke v2.<java.util.Map: boolean containsKey(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.AbstractMapTester: void assertFalse(java.lang.String,boolean)>(v1, v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
protected void expectNullValueMissingWhenNullValuesUnsupported(java.lang.String)
{
com.google.common.collect.testing.AbstractMapTester v0;
java.util.Map v2;
java.lang.String v1;
java.lang.NullPointerException v4;
boolean v3;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 := @parameter0: java.lang.String;
label1:
v2 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Map getMap()>();
v3 = interfaceinvoke v2.<java.util.Map: boolean containsValue(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.AbstractMapTester: void assertFalse(java.lang.String,boolean)>(v1, v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
protected com.google.common.collect.testing.MinimalCollection createDisjointCollection()
{
com.google.common.collect.testing.AbstractMapTester v0;
java.lang.Object v2, v3;
com.google.common.collect.testing.MinimalCollection v4;
java.util.Map$Entry[] v1;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = newarray (java.util.Map$Entry)[2];
v2 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.lang.Object e3()>();
v1[0] = v2;
v3 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.lang.Object e4()>();
v1[1] = v3;
v4 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v1);
return v4;
}
protected int getNumEntries()
{
int v1;
com.google.common.collect.testing.AbstractMapTester v0;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: int getNumElements()>();
return v1;
}
protected java.util.Collection getSampleEntries(int)
{
int v1;
com.google.common.collect.testing.AbstractMapTester v0;
java.util.Collection v2;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Collection getSampleElements(int)>(v1);
return v2;
}
protected java.util.Collection getSampleEntries()
{
com.google.common.collect.testing.AbstractMapTester v0;
java.util.Collection v1;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Collection getSampleElements()>();
return v1;
}
protected transient void expectMissing(java.util.Map$Entry[])
{
java.util.Map v11;
int v2, v3;
java.lang.String v10, v5;
java.util.Map$Entry[] v1;
boolean v15, v7;
java.util.Map$Entry v4;
com.google.common.collect.testing.AbstractMapTester v0;
java.util.Collection v6;
java.lang.Object v12, v13, v14, v8, v9;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 := @parameter0: java.util.Map$Entry[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.Map$Entry)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Should not contain entry \u0001");
v6 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Collection actualContents()>();
v7 = interfaceinvoke v6.<java.util.Collection: boolean contains(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.AbstractMapTester: void assertFalse(java.lang.String,boolean)>(v5, v7);
v8 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v9 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object,java.lang.Object)>(v8, v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Should not contain key \u0001 mapped to value \u0001");
v11 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Map getMap()>();
v12 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v13 = interfaceinvoke v11.<java.util.Map: java.lang.Object get(java.lang.Object)>(v12);
v14 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v15 = staticinvoke <com.google.common.collect.testing.AbstractMapTester: boolean equal(java.lang.Object,java.lang.Object)>(v13, v14);
staticinvoke <com.google.common.collect.testing.AbstractMapTester: void assertFalse(java.lang.String,boolean)>(v10, v15);
v3 = v3 + 1;
goto label1;
label2:
return;
}
private static boolean equal(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
boolean v2, v3;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
if v0 == v1 goto label1;
if v0 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v2 == 0 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
protected java.util.Map$Entry entry(java.lang.Object, java.lang.Object)
{
java.util.Map$Entry v3;
com.google.common.collect.testing.AbstractMapTester v0;
java.lang.Object v1, v2;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v1, v2);
return v3;
}
protected void expectContents(java.util.Collection)
{
com.google.common.collect.testing.AbstractMapTester v0;
java.util.Iterator v2;
java.util.Collection v1;
java.util.Map v8;
java.lang.Object v10, v4, v5, v7, v9;
java.lang.String v6;
boolean v3;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 := @parameter0: java.util.Collection;
specialinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: void expectContents(java.util.Collection)>(v1);
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Wrong value for key \u0001");
v7 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v8 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Map getMap()>();
v9 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v10 = interfaceinvoke v8.<java.util.Map: java.lang.Object get(java.lang.Object)>(v9);
staticinvoke <com.google.common.collect.testing.AbstractMapTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(v6, v7, v10);
goto label1;
label2:
return;
}
protected final void expectReplacement(java.util.Map$Entry)
{
java.util.List v3;
java.util.Map$Entry v1;
com.google.common.collect.testing.AbstractMapTester v0;
java.util.Collection v2;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 := @parameter0: java.util.Map$Entry;
v2 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Collection getSampleElements()>();
v3 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.List copyToList(java.lang.Iterable)>(v2);
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void replaceValue(java.util.List,java.util.Map$Entry)>(v3, v1);
virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void expectContents(java.util.Collection)>(v3);
return;
}
private void replaceValue(java.util.List, java.util.Map$Entry)
{
java.util.Map$Entry v2;
java.lang.Object[] v10;
com.google.common.collect.testing.AbstractMapTester v0;
java.util.ListIterator v3;
java.lang.IllegalArgumentException v9;
java.util.List v1;
java.lang.Object v11, v5, v6, v7;
java.lang.String v12;
boolean v4, v8;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 := @parameter0: java.util.List;
v2 := @parameter1: java.util.Map$Entry;
v3 = interfaceinvoke v1.<java.util.List: java.util.ListIterator listIterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.ListIterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.ListIterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = interfaceinvoke v2.<java.util.Map$Entry: java.lang.Object getKey()>();
v8 = staticinvoke <com.google.common.collect.testing.Helpers: boolean equal(java.lang.Object,java.lang.Object)>(v6, v7);
if v8 == 0 goto label1;
interfaceinvoke v3.<java.util.ListIterator: void set(java.lang.Object)>(v2);
return;
label2:
v9 = new java.lang.IllegalArgumentException;
v10 = newarray (java.lang.Object)[2];
v11 = interfaceinvoke v2.<java.util.Map$Entry: java.lang.Object getKey()>();
v10[0] = v11;
v10[1] = v1;
v12 = staticinvoke <com.google.common.collect.testing.Platform: java.lang.String format(java.lang.String,java.lang.Object[])>("key %s not found in entries %s", v10);
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v12);
throw v9;
}
protected java.lang.Object get(java.lang.Object)
{
com.google.common.collect.testing.AbstractMapTester v0;
java.util.Map v2;
java.lang.Object v1, v3;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Map getMap()>();
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v3;
}
protected final java.lang.Object k0()
{
java.lang.Object v1, v2;
com.google.common.collect.testing.AbstractMapTester v0;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.lang.Object e0()>();
v2 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getKey()>();
return v2;
}
protected final java.lang.Object v0()
{
java.lang.Object v1, v2;
com.google.common.collect.testing.AbstractMapTester v0;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.lang.Object e0()>();
v2 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getValue()>();
return v2;
}
protected final java.lang.Object k1()
{
java.lang.Object v1, v2;
com.google.common.collect.testing.AbstractMapTester v0;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.lang.Object e1()>();
v2 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getKey()>();
return v2;
}
protected final java.lang.Object v1()
{
java.lang.Object v1, v2;
com.google.common.collect.testing.AbstractMapTester v0;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.lang.Object e1()>();
v2 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getValue()>();
return v2;
}
protected final java.lang.Object k2()
{
java.lang.Object v1, v2;
com.google.common.collect.testing.AbstractMapTester v0;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.lang.Object e2()>();
v2 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getKey()>();
return v2;
}
protected final java.lang.Object v2()
{
java.lang.Object v1, v2;
com.google.common.collect.testing.AbstractMapTester v0;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.lang.Object e2()>();
v2 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getValue()>();
return v2;
}
protected final java.lang.Object k3()
{
java.lang.Object v1, v2;
com.google.common.collect.testing.AbstractMapTester v0;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.lang.Object e3()>();
v2 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getKey()>();
return v2;
}
protected final java.lang.Object v3()
{
java.lang.Object v1, v2;
com.google.common.collect.testing.AbstractMapTester v0;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.lang.Object e3()>();
v2 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getValue()>();
return v2;
}
protected final java.lang.Object k4()
{
java.lang.Object v1, v2;
com.google.common.collect.testing.AbstractMapTester v0;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.lang.Object e4()>();
v2 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getKey()>();
return v2;
}
protected final java.lang.Object v4()
{
java.lang.Object v1, v2;
com.google.common.collect.testing.AbstractMapTester v0;
v0 := @this: com.google.common.collect.testing.AbstractMapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.lang.Object e4()>();
v2 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getValue()>();
return v2;
}
}