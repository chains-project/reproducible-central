public abstract class com.google.common.collect.testing.MapInterfaceTest extends junit.framework.TestCase
{
protected final boolean supportsPut;
protected final boolean supportsRemove;
protected final boolean supportsClear;
protected final boolean allowsNullKeys;
protected final boolean allowsNullValues;
protected final boolean supportsIteratorRemove;
protected abstract java.util.Map makeEmptyMap() throws java.lang.UnsupportedOperationException;
protected abstract java.util.Map makePopulatedMap() throws java.lang.UnsupportedOperationException;
protected abstract java.lang.Object getKeyNotInPopulatedMap() throws java.lang.UnsupportedOperationException;
protected abstract java.lang.Object getValueNotInPopulatedMap() throws java.lang.UnsupportedOperationException;
protected void <init>(boolean, boolean, boolean, boolean, boolean)
{
com.google.common.collect.testing.MapInterfaceTest v0;
boolean v1, v2, v3, v4, v5;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 := @parameter0: boolean;
v2 := @parameter1: boolean;
v3 := @parameter2: boolean;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
specialinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void <init>(boolean,boolean,boolean,boolean,boolean,boolean)>(v1, v2, v3, v4, v5, v4);
return;
}
protected void <init>(boolean, boolean, boolean, boolean, boolean, boolean)
{
com.google.common.collect.testing.MapInterfaceTest v0;
boolean v1, v2, v3, v4, v5, v6;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 := @parameter0: boolean;
v2 := @parameter1: boolean;
v3 := @parameter2: boolean;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
v6 := @parameter5: boolean;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsPut> = v3;
v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove> = v4;
v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsClear> = v5;
v0.<com.google.common.collect.testing.MapInterfaceTest: boolean allowsNullKeys> = v1;
v0.<com.google.common.collect.testing.MapInterfaceTest: boolean allowsNullValues> = v2;
v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsIteratorRemove> = v6;
return;
}
protected java.util.Map makeEitherMap()
{
java.lang.UnsupportedOperationException v2;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1, v3;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEmptyMap()>();
return v3;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
protected final boolean supportsValuesHashCode(java.util.Map)
{
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Iterator v3;
java.util.Collection v2;
java.util.Map v1;
java.lang.Object v5;
java.lang.Exception v6;
boolean v4;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 := @parameter0: java.util.Map;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v3 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label6;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
if v5 == null goto label1;
label2:
virtualinvoke v5.<java.lang.Object: int hashCode()>();
label3:
goto label5;
label4:
v6 := @caughtexception;
return 0;
label5:
return 1;
label6:
return 1;
catch java.lang.Exception from label2 to label3 with label4;
}
protected final void assertInvariants(java.util.Map)
{
java.lang.Integer v89;
java.util.Map v1;
java.util.Set v2, v27, v4;
java.lang.Object[] v103, v105, v80, v91, v96;
java.util.Map$Entry v29, v90, v93;
boolean v100, v109, v11, v112, v12, v13, v14, v16, v19, v24, v25, v26, v28, v30, v31, v32, v37, v38, v39, v40, v42, v44, v46, v47, v48, v52, v53, v54, v55, v57, v58, v6, v61, v64, v66, v7, v77, v79, v84, v95;
java.util.Collection v3;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.List v108, v83, v94, v99;
java.util.HashSet v76, v78;
int v10, v101, v102, v104, v106, v110, v114, v115, v17, v22, v23, v33, v34, v35, v36, v49, v5, v50, v51, v59, v68, v71, v73, v74, v75, v8, v81, v82, v85, v86, v88, v9, v92, v97, v98;
java.util.Map$Entry[] v87;
java.util.Iterator v111, v15, v18, v41, v43, v56, v60;
java.lang.Object v107, v113, v20, v21, v45, v62, v63, v65, v67, v69, v70, v72;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 := @parameter0: java.util.Map;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v3 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v4 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v5 = interfaceinvoke v1.<java.util.Map: int size()>();
if v5 != 0 goto label01;
v6 = 1;
goto label02;
label01:
v6 = 0;
label02:
v7 = interfaceinvoke v1.<java.util.Map: boolean isEmpty()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(boolean,boolean)>(v6, v7);
v8 = interfaceinvoke v1.<java.util.Map: int size()>();
v9 = interfaceinvoke v2.<java.util.Set: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v8, v9);
v10 = interfaceinvoke v2.<java.util.Set: int size()>();
if v10 != 0 goto label03;
v11 = 1;
goto label04;
label03:
v11 = 0;
label04:
v12 = interfaceinvoke v2.<java.util.Set: boolean isEmpty()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(boolean,boolean)>(v11, v12);
v13 = interfaceinvoke v2.<java.util.Set: boolean isEmpty()>();
if v13 != 0 goto label05;
v14 = 1;
goto label06;
label05:
v14 = 0;
label06:
v15 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
v16 = interfaceinvoke v15.<java.util.Iterator: boolean hasNext()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(boolean,boolean)>(v14, v16);
v17 = 0;
v18 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label07:
v19 = interfaceinvoke v18.<java.util.Iterator: boolean hasNext()>();
if v19 == 0 goto label13;
v20 = interfaceinvoke v18.<java.util.Iterator: java.lang.Object next()>();
v21 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v20);
v22 = v17;
if v20 == null goto label08;
v23 = virtualinvoke v20.<java.lang.Object: int hashCode()>();
goto label09;
label08:
v23 = 0;
label09:
v17 = v22 + v23;
v24 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v20);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v24);
v25 = interfaceinvoke v1.<java.util.Map: boolean containsValue(java.lang.Object)>(v21);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v25);
v26 = interfaceinvoke v3.<java.util.Collection: boolean contains(java.lang.Object)>(v21);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v26);
v27 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v21);
v28 = interfaceinvoke v3.<java.util.Collection: boolean containsAll(java.util.Collection)>(v27);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v28);
v29 = staticinvoke <com.google.common.collect.testing.MapInterfaceTest: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v20, v21);
v30 = interfaceinvoke v4.<java.util.Set: boolean contains(java.lang.Object)>(v29);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v30);
v31 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean allowsNullKeys>;
if v31 != 0 goto label10;
if v20 == null goto label11;
label10:
v32 = 1;
goto label12;
label11:
v32 = 0;
label12:
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v32);
goto label07;
label13:
v33 = interfaceinvoke v2.<java.util.Set: int hashCode()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v17, v33);
v34 = interfaceinvoke v1.<java.util.Map: int size()>();
v35 = interfaceinvoke v3.<java.util.Collection: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v34, v35);
v36 = interfaceinvoke v3.<java.util.Collection: int size()>();
if v36 != 0 goto label14;
v37 = 1;
goto label15;
label14:
v37 = 0;
label15:
v38 = interfaceinvoke v3.<java.util.Collection: boolean isEmpty()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(boolean,boolean)>(v37, v38);
v39 = interfaceinvoke v3.<java.util.Collection: boolean isEmpty()>();
if v39 != 0 goto label16;
v40 = 1;
goto label17;
label16:
v40 = 0;
label17:
v41 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
v42 = interfaceinvoke v41.<java.util.Iterator: boolean hasNext()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(boolean,boolean)>(v40, v42);
v43 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
label18:
v44 = interfaceinvoke v43.<java.util.Iterator: boolean hasNext()>();
if v44 == 0 goto label22;
v45 = interfaceinvoke v43.<java.util.Iterator: java.lang.Object next()>();
v46 = interfaceinvoke v1.<java.util.Map: boolean containsValue(java.lang.Object)>(v45);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v46);
v47 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean allowsNullValues>;
if v47 != 0 goto label19;
if v45 == null goto label20;
label19:
v48 = 1;
goto label21;
label20:
v48 = 0;
label21:
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v48);
goto label18;
label22:
v49 = interfaceinvoke v1.<java.util.Map: int size()>();
v50 = interfaceinvoke v4.<java.util.Set: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v49, v50);
v51 = interfaceinvoke v4.<java.util.Set: int size()>();
if v51 != 0 goto label23;
v52 = 1;
goto label24;
label23:
v52 = 0;
label24:
v53 = interfaceinvoke v4.<java.util.Set: boolean isEmpty()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(boolean,boolean)>(v52, v53);
v54 = interfaceinvoke v4.<java.util.Set: boolean isEmpty()>();
if v54 != 0 goto label25;
v55 = 1;
goto label26;
label25:
v55 = 0;
label26:
v56 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
v57 = interfaceinvoke v56.<java.util.Iterator: boolean hasNext()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(boolean,boolean)>(v55, v57);
specialinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertEntrySetNotContainsString(java.util.Set)>(v4);
v58 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsValuesHashCode(java.util.Map)>(v1);
if v58 == 0 goto label33;
v59 = 0;
v60 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label27:
v61 = interfaceinvoke v60.<java.util.Iterator: boolean hasNext()>();
if v61 == 0 goto label32;
v62 = interfaceinvoke v60.<java.util.Iterator: java.lang.Object next()>();
v63 = interfaceinvoke v62.<java.util.Map$Entry: java.lang.Object getKey()>();
v64 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v63);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v64);
v65 = interfaceinvoke v62.<java.util.Map$Entry: java.lang.Object getValue()>();
v66 = interfaceinvoke v1.<java.util.Map: boolean containsValue(java.lang.Object)>(v65);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v66);
v67 = interfaceinvoke v62.<java.util.Map$Entry: java.lang.Object getKey()>();
if v67 != null goto label28;
v68 = 0;
goto label29;
label28:
v69 = interfaceinvoke v62.<java.util.Map$Entry: java.lang.Object getKey()>();
v68 = virtualinvoke v69.<java.lang.Object: int hashCode()>();
label29:
v70 = interfaceinvoke v62.<java.util.Map$Entry: java.lang.Object getValue()>();
if v70 != null goto label30;
v71 = 0;
goto label31;
label30:
v72 = interfaceinvoke v62.<java.util.Map$Entry: java.lang.Object getValue()>();
v71 = virtualinvoke v72.<java.lang.Object: int hashCode()>();
label31:
v73 = v68 ^ v71;
v74 = interfaceinvoke v62.<java.util.Map$Entry: int hashCode()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v73, v74);
v59 = v59 + v73;
goto label27;
label32:
v75 = interfaceinvoke v4.<java.util.Set: int hashCode()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v59, v75);
v76 = new java.util.HashSet;
specialinvoke v76.<java.util.HashSet: void <init>(java.util.Collection)>(v4);
v77 = interfaceinvoke v4.<java.util.Set: boolean containsAll(java.util.Collection)>(v76);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v77);
v78 = new java.util.HashSet;
specialinvoke v78.<java.util.HashSet: void <init>(java.util.Collection)>(v4);
v79 = interfaceinvoke v4.<java.util.Set: boolean equals(java.lang.Object)>(v78);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v79);
label33:
v80 = interfaceinvoke v4.<java.util.Set: java.lang.Object[] toArray()>();
v81 = interfaceinvoke v1.<java.util.Map: int size()>();
v82 = lengthof v80;
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v81, v82);
v83 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v80);
v84 = interfaceinvoke v83.<java.util.List: boolean containsAll(java.util.Collection)>(v4);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v84);
v85 = interfaceinvoke v1.<java.util.Map: int size()>();
v86 = v85 + 2;
v87 = newarray (java.util.Map$Entry)[v86];
v88 = interfaceinvoke v1.<java.util.Map: int size()>();
v89 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
v90 = staticinvoke <com.google.common.collect.testing.MapInterfaceTest: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>("foo", v89);
v87[v88] = v90;
v91 = interfaceinvoke v4.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(v87);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertSame(java.lang.Object,java.lang.Object)>(v87, v91);
v92 = interfaceinvoke v1.<java.util.Map: int size()>();
v93 = v87[v92];
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertNull(java.lang.Object)>(v93);
v94 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v87);
v95 = interfaceinvoke v94.<java.util.List: boolean containsAll(java.util.Collection)>(v4);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v95);
v96 = interfaceinvoke v3.<java.util.Collection: java.lang.Object[] toArray()>();
v97 = interfaceinvoke v1.<java.util.Map: int size()>();
v98 = lengthof v96;
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v97, v98);
v99 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v96);
v100 = interfaceinvoke v99.<java.util.List: boolean containsAll(java.util.Collection)>(v3);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v100);
v101 = interfaceinvoke v1.<java.util.Map: int size()>();
v102 = v101 + 2;
v103 = newarray (java.lang.Object)[v102];
v104 = interfaceinvoke v1.<java.util.Map: int size()>();
v103[v104] = "foo";
v105 = interfaceinvoke v3.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(v103);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertSame(java.lang.Object,java.lang.Object)>(v103, v105);
v106 = interfaceinvoke v1.<java.util.Map: int size()>();
v107 = v103[v106];
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertNull(java.lang.Object)>(v107);
v108 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v103);
v109 = interfaceinvoke v108.<java.util.List: boolean containsAll(java.util.Collection)>(v3);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v109);
if v58 == 0 goto label36;
v110 = 0;
v111 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label34:
v112 = interfaceinvoke v111.<java.util.Iterator: boolean hasNext()>();
if v112 == 0 goto label35;
v113 = interfaceinvoke v111.<java.util.Iterator: java.lang.Object next()>();
v114 = interfaceinvoke v113.<java.util.Map$Entry: int hashCode()>();
v110 = v110 + v114;
goto label34;
label35:
v115 = interfaceinvoke v1.<java.util.Map: int hashCode()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v110, v115);
label36:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertMoreInvariants(java.util.Map)>(v1);
return;
}
private void assertEntrySetNotContainsString(java.util.Set)
{
java.util.Set v1;
com.google.common.collect.testing.MapInterfaceTest v0;
boolean v2;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 := @parameter0: java.util.Set;
v2 = interfaceinvoke v1.<java.util.Set: boolean contains(java.lang.Object)>("foo");
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v2);
return;
}
protected void assertMoreInvariants(java.util.Map)
{
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 := @parameter0: java.util.Map;
return;
}
public void testClear()
{
java.lang.UnsupportedOperationException v2, v5;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
boolean v3, v4;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
v3 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsClear>;
if v3 == 0 goto label5;
interfaceinvoke v1.<java.util.Map: void clear()>();
v4 = interfaceinvoke v1.<java.util.Map: boolean isEmpty()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v4);
goto label8;
label5:
interfaceinvoke v1.<java.util.Map: void clear()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label6:
goto label8;
label7:
v5 := @caughtexception;
label8:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public void testContainsKey()
{
com.google.common.collect.testing.MapInterfaceTest$IncompatibleKeyType v5;
java.lang.UnsupportedOperationException v3;
java.util.Iterator v9;
java.util.Set v8;
java.lang.ClassCastException v7;
java.lang.NullPointerException v13;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
java.lang.Object v10, v2;
boolean v11, v12, v4, v6;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label01:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getKeyNotInPopulatedMap()>();
label02:
goto label04;
label03:
v3 := @caughtexception;
return;
label04:
v4 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v4);
label05:
v5 = new com.google.common.collect.testing.MapInterfaceTest$IncompatibleKeyType;
specialinvoke v5.<com.google.common.collect.testing.MapInterfaceTest$IncompatibleKeyType: void <init>()>();
v6 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v6);
label06:
goto label08;
label07:
v7 := @caughtexception;
label08:
v8 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v9 = interfaceinvoke v8.<java.util.Set: java.util.Iterator iterator()>();
v10 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
v11 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v10);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v11);
v12 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean allowsNullKeys>;
if v12 == 0 goto label09;
interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(null);
goto label12;
label09:
interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(null);
label10:
goto label12;
label11:
v13 := @caughtexception;
label12:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.ClassCastException from label05 to label06 with label07;
catch java.lang.NullPointerException from label09 to label10 with label11;
}
public void testContainsValue()
{
java.lang.UnsupportedOperationException v3;
java.util.Iterator v6;
java.util.Collection v5;
java.lang.NullPointerException v10;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
java.lang.Object v2, v7;
boolean v4, v8, v9;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
return;
label4:
v4 = interfaceinvoke v1.<java.util.Map: boolean containsValue(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v4);
v5 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v6 = interfaceinvoke v5.<java.util.Collection: java.util.Iterator iterator()>();
v7 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v1.<java.util.Map: boolean containsValue(java.lang.Object)>(v7);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v8);
v9 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean allowsNullValues>;
if v9 == 0 goto label5;
interfaceinvoke v1.<java.util.Map: boolean containsValue(java.lang.Object)>(null);
goto label8;
label5:
interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(null);
label6:
goto label8;
label7:
v10 := @caughtexception;
label8:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.NullPointerException from label5 to label6 with label7;
}
public void testEntrySet()
{
java.lang.UnsupportedOperationException v2, v6;
java.util.Iterator v7;
java.util.Set v3;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
java.lang.Object v10, v12, v4, v5, v9;
boolean v11, v13, v8;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label01:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label02:
goto label04;
label03:
v2 := @caughtexception;
return;
label04:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
label05:
v4 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getKeyNotInPopulatedMap()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
label06:
goto label08;
label07:
v6 := @caughtexception;
return;
label08:
v7 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
label09:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label10;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = interfaceinvoke v9.<java.util.Map$Entry: java.lang.Object getKey()>();
v11 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v10);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v11);
v12 = interfaceinvoke v9.<java.util.Map$Entry: java.lang.Object getValue()>();
v13 = virtualinvoke v5.<java.lang.Object: boolean equals(java.lang.Object)>(v12);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v13);
goto label09;
label10:
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.UnsupportedOperationException from label05 to label06 with label07;
}
public void testEntrySetForEmptyMap()
{
java.lang.UnsupportedOperationException v2;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEmptyMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testEntrySetContainsEntryIncompatibleKey()
{
com.google.common.collect.testing.MapInterfaceTest$IncompatibleKeyType v6;
java.lang.UnsupportedOperationException v2, v5;
java.util.Map$Entry v7;
java.util.Set v3;
java.lang.ClassCastException v9;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
java.lang.Object v4;
boolean v8;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label01:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEitherMap()>();
label02:
goto label04;
label03:
v2 := @caughtexception;
return;
label04:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
label05:
v4 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
label06:
goto label08;
label07:
v5 := @caughtexception;
return;
label08:
v6 = new com.google.common.collect.testing.MapInterfaceTest$IncompatibleKeyType;
specialinvoke v6.<com.google.common.collect.testing.MapInterfaceTest$IncompatibleKeyType: void <init>()>();
v7 = staticinvoke <com.google.common.collect.testing.MapInterfaceTest: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v6, v4);
label09:
v8 = interfaceinvoke v3.<java.util.Set: boolean contains(java.lang.Object)>(v7);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v8);
label10:
goto label12;
label11:
v9 := @caughtexception;
label12:
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.UnsupportedOperationException from label05 to label06 with label07;
catch java.lang.ClassCastException from label09 to label10 with label11;
}
public void testEntrySetContainsEntryNullKeyPresent()
{
java.lang.UnsupportedOperationException v4, v7;
java.util.Map$Entry v10, v8;
java.util.Set v5;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v3;
java.lang.Object v6;
boolean v1, v11, v2, v9;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean allowsNullKeys>;
if v1 == 0 goto label1;
v2 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsPut>;
if v2 != 0 goto label2;
label1:
return;
label2:
v3 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEitherMap()>();
label3:
goto label5;
label4:
v4 := @caughtexception;
return;
label5:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v3);
v5 = interfaceinvoke v3.<java.util.Map: java.util.Set entrySet()>();
label6:
v6 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
label7:
goto label9;
label8:
v7 := @caughtexception;
return;
label9:
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, v6);
v8 = staticinvoke <com.google.common.collect.testing.MapInterfaceTest: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(null, v6);
v9 = interfaceinvoke v5.<java.util.Set: boolean contains(java.lang.Object)>(v8);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v9);
v10 = staticinvoke <com.google.common.collect.testing.MapInterfaceTest: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(null, null);
v11 = interfaceinvoke v5.<java.util.Set: boolean contains(java.lang.Object)>(v10);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v11);
return;
catch java.lang.UnsupportedOperationException from label2 to label3 with label4;
catch java.lang.UnsupportedOperationException from label6 to label7 with label8;
}
public void testEntrySetContainsEntryNullKeyMissing()
{
java.lang.NullPointerException v12, v8;
java.util.Map v1;
boolean v11, v13, v14, v15, v7, v9;
java.lang.UnsupportedOperationException v2, v5;
java.util.Map$Entry v10, v6;
java.util.Set v3;
com.google.common.collect.testing.MapInterfaceTest v0;
java.lang.Object v4;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label01:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEitherMap()>();
label02:
goto label04;
label03:
v2 := @caughtexception;
return;
label04:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
label05:
v4 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
label06:
goto label08;
label07:
v5 := @caughtexception;
return;
label08:
v6 = staticinvoke <com.google.common.collect.testing.MapInterfaceTest: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(null, v4);
label09:
v7 = interfaceinvoke v3.<java.util.Set: boolean contains(java.lang.Object)>(v6);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v7);
label10:
goto label12;
label11:
v8 := @caughtexception;
v9 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean allowsNullKeys>;
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v9);
label12:
v10 = staticinvoke <com.google.common.collect.testing.MapInterfaceTest: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(null, null);
v11 = interfaceinvoke v3.<java.util.Set: boolean contains(java.lang.Object)>(v10);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v11);
label13:
goto label17;
label14:
v12 := @caughtexception;
v13 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean allowsNullKeys>;
if v13 == 0 goto label15;
v14 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean allowsNullValues>;
if v14 == 0 goto label15;
v15 = 1;
goto label16;
label15:
v15 = 0;
label16:
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v15);
label17:
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.UnsupportedOperationException from label05 to label06 with label07;
catch java.lang.NullPointerException from label09 to label10 with label11;
catch java.lang.NullPointerException from label12 to label13 with label14;
}
public void testEntrySetIteratorRemove()
{
java.lang.IllegalStateException v14;
java.util.Map v1;
int v11, v12, v6;
boolean v13, v5;
java.lang.UnsupportedOperationException v15, v2;
java.util.Map$Entry v10;
java.util.Iterator v4;
java.util.Set v3;
com.google.common.collect.testing.MapInterfaceTest v0;
java.lang.Object v7, v8, v9;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label01:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label02:
goto label04;
label03:
v2 := @caughtexception;
return;
label04:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
v5 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsIteratorRemove>;
if v5 == 0 goto label08;
v6 = interfaceinvoke v1.<java.util.Map: int size()>();
v7 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getKey()>();
v9 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getValue()>();
v10 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v8, v9);
interfaceinvoke v4.<java.util.Iterator: void remove()>();
v11 = v6 - 1;
v12 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v11, v12);
v13 = interfaceinvoke v3.<java.util.Set: boolean contains(java.lang.Object)>(v10);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v13);
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
label05:
interfaceinvoke v4.<java.util.Iterator: void remove()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected IllegalStateException.");
label06:
goto label11;
label07:
v14 := @caughtexception;
goto label11;
label08:
interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v4.<java.util.Iterator: void remove()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label09:
goto label11;
label10:
v15 := @caughtexception;
label11:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.IllegalStateException from label05 to label06 with label07;
catch java.lang.UnsupportedOperationException from label08 to label09 with label10;
}
public void testEntrySetRemove()
{
java.lang.UnsupportedOperationException v13, v2;
java.util.Iterator v11, v6;
java.util.Set v3;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
int v10, v5, v9;
java.lang.Object v12, v7;
boolean v4, v8;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v4 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v4 == 0 goto label5;
v5 = interfaceinvoke v1.<java.util.Map: int size()>();
v6 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
v7 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v3.<java.util.Set: boolean remove(java.lang.Object)>(v7);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v8);
v9 = v5 - 1;
v10 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v9, v10);
goto label8;
label5:
v11 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
v12 = interfaceinvoke v11.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v3.<java.util.Set: boolean remove(java.lang.Object)>(v12);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label6:
goto label8;
label7:
v13 := @caughtexception;
label8:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public void testEntrySetRemoveMissingKey()
{
java.lang.UnsupportedOperationException v11, v3;
java.util.Map$Entry v6;
java.util.Set v4;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
int v12, v7;
java.lang.Object v2, v5;
boolean v10, v13, v8, v9;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEitherMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getKeyNotInPopulatedMap()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
return;
label4:
v4 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
v6 = staticinvoke <com.google.common.collect.testing.MapInterfaceTest: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v2, v5);
v7 = interfaceinvoke v1.<java.util.Map: int size()>();
v8 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v8 == 0 goto label5;
v9 = interfaceinvoke v4.<java.util.Set: boolean remove(java.lang.Object)>(v6);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v9);
goto label8;
label5:
v10 = interfaceinvoke v4.<java.util.Set: boolean remove(java.lang.Object)>(v6);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v10);
label6:
goto label8;
label7:
v11 := @caughtexception;
label8:
v12 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v7, v12);
v13 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v13);
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public void testEntrySetRemoveDifferentValue()
{
java.util.Map v1;
int v14, v9;
boolean v10, v11, v12, v15;
java.lang.UnsupportedOperationException v13, v2;
java.util.Map$Entry v8;
java.util.Iterator v5;
java.util.Set v3, v4;
com.google.common.collect.testing.MapInterfaceTest v0;
java.lang.Object v6, v7;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v4 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
v6 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
v8 = staticinvoke <com.google.common.collect.testing.MapInterfaceTest: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v6, v7);
v9 = interfaceinvoke v1.<java.util.Map: int size()>();
v10 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v10 == 0 goto label5;
v11 = interfaceinvoke v3.<java.util.Set: boolean remove(java.lang.Object)>(v8);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v11);
goto label8;
label5:
v12 = interfaceinvoke v3.<java.util.Set: boolean remove(java.lang.Object)>(v8);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v12);
label6:
goto label8;
label7:
v13 := @caughtexception;
label8:
v14 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v9, v14);
v15 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v6);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v15);
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public void testEntrySetRemoveNullKeyPresent()
{
java.lang.UnsupportedOperationException v5, v8;
java.util.Map$Entry v11;
java.util.Set v6;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v4;
java.lang.Object v13, v7, v9;
boolean v1, v10, v12, v14, v2, v3;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean allowsNullKeys>;
if v1 == 0 goto label1;
v2 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsPut>;
if v2 == 0 goto label1;
v3 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v3 != 0 goto label2;
label1:
return;
label2:
v4 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEitherMap()>();
label3:
goto label5;
label4:
v5 := @caughtexception;
return;
label5:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v4);
v6 = interfaceinvoke v4.<java.util.Map: java.util.Set entrySet()>();
label6:
v7 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
label7:
goto label9;
label8:
v8 := @caughtexception;
return;
label9:
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, v7);
v9 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(java.lang.Object,java.lang.Object)>(v7, v9);
v10 = interfaceinvoke v4.<java.util.Map: boolean containsKey(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v10);
v11 = staticinvoke <com.google.common.collect.testing.MapInterfaceTest: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(null, v7);
v12 = interfaceinvoke v6.<java.util.Set: boolean remove(java.lang.Object)>(v11);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v12);
v13 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertNull(java.lang.Object)>(v13);
v14 = interfaceinvoke v4.<java.util.Map: boolean containsKey(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v14);
return;
catch java.lang.UnsupportedOperationException from label2 to label3 with label4;
catch java.lang.UnsupportedOperationException from label6 to label7 with label8;
}
public void testEntrySetRemoveNullKeyMissing()
{
java.lang.UnsupportedOperationException v12, v2;
java.util.Map$Entry v5;
java.util.Set v3;
java.lang.NullPointerException v9;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
int v13, v6;
java.lang.Object v4;
boolean v10, v11, v7, v8;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label01:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEitherMap()>();
label02:
goto label04;
label03:
v2 := @caughtexception;
return;
label04:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
v5 = staticinvoke <com.google.common.collect.testing.MapInterfaceTest: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(null, v4);
v6 = interfaceinvoke v1.<java.util.Map: int size()>();
v7 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v7 == 0 goto label08;
label05:
v8 = interfaceinvoke v3.<java.util.Set: boolean remove(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v8);
label06:
goto label11;
label07:
v9 := @caughtexception;
v10 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean allowsNullKeys>;
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v10);
goto label11;
label08:
v11 = interfaceinvoke v3.<java.util.Set: boolean remove(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v11);
label09:
goto label11;
label10:
v12 := @caughtexception;
label11:
v13 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v6, v13);
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.NullPointerException from label05 to label06 with label07;
catch java.lang.UnsupportedOperationException from label08 to label09 with label10;
}
public void testEntrySetRemoveAll()
{
java.util.Map v1;
int v11, v13, v14, v15;
boolean v12, v16, v7;
java.lang.UnsupportedOperationException v17, v2;
java.util.Map$Entry v10;
java.util.Iterator v4;
java.util.Set v3, v6;
com.google.common.collect.testing.MapInterfaceTest v0;
java.lang.Object v5, v8, v9;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
v5 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v6 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v5);
v7 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v7 == 0 goto label5;
v8 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v9 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
v10 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v8, v9);
v11 = interfaceinvoke v1.<java.util.Map: int size()>();
v12 = interfaceinvoke v3.<java.util.Set: boolean removeAll(java.util.Collection)>(v6);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v12);
v13 = interfaceinvoke v6.<java.util.Set: int size()>();
v14 = v11 - v13;
v15 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v14, v15);
v16 = interfaceinvoke v3.<java.util.Set: boolean contains(java.lang.Object)>(v10);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v16);
goto label8;
label5:
interfaceinvoke v3.<java.util.Set: boolean removeAll(java.util.Collection)>(v6);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label6:
goto label8;
label7:
v17 := @caughtexception;
label8:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public void testEntrySetRemoveAllNullFromEmpty()
{
java.lang.UnsupportedOperationException v2;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
java.util.Set v3;
java.lang.RuntimeException v6;
java.lang.NullPointerException v5;
boolean v4;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label01:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEmptyMap()>();
label02:
goto label04;
label03:
v2 := @caughtexception;
return;
label04:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v4 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v4 == 0 goto label08;
label05:
interfaceinvoke v3.<java.util.Set: boolean removeAll(java.util.Collection)>(null);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected NullPointerException.");
label06:
goto label11;
label07:
v5 := @caughtexception;
goto label11;
label08:
interfaceinvoke v3.<java.util.Set: boolean removeAll(java.util.Collection)>(null);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException or NullPointerException.");
label09:
goto label11;
label10:
v6 := @caughtexception;
label11:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.NullPointerException from label05 to label06 with label07;
catch java.lang.UnsupportedOperationException from label08 to label09 with label10;
catch java.lang.NullPointerException from label08 to label09 with label10;
}
public void testEntrySetRetainAll()
{
java.util.Map v1;
int v12, v13, v8, v9;
boolean v10, v11, v15, v17, v7;
java.lang.UnsupportedOperationException v18, v2;
java.util.Iterator v14, v4;
java.util.Set v3, v6;
com.google.common.collect.testing.MapInterfaceTest v0;
java.lang.Object v16, v5;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label01:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label02:
goto label04;
label03:
v2 := @caughtexception;
return;
label04:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
v5 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v6 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v5);
v7 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v7 == 0 goto label08;
v8 = interfaceinvoke v3.<java.util.Set: int size()>();
v9 = interfaceinvoke v6.<java.util.Set: int size()>();
if v8 <= v9 goto label05;
v10 = 1;
goto label06;
label05:
v10 = 0;
label06:
v11 = interfaceinvoke v3.<java.util.Set: boolean retainAll(java.util.Collection)>(v6);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(boolean,boolean)>(v10, v11);
v12 = interfaceinvoke v6.<java.util.Set: int size()>();
v13 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v12, v13);
v14 = interfaceinvoke v6.<java.util.Set: java.util.Iterator iterator()>();
label07:
v15 = interfaceinvoke v14.<java.util.Iterator: boolean hasNext()>();
if v15 == 0 goto label11;
v16 = interfaceinvoke v14.<java.util.Iterator: java.lang.Object next()>();
v17 = interfaceinvoke v3.<java.util.Set: boolean contains(java.lang.Object)>(v16);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v17);
goto label07;
label08:
interfaceinvoke v3.<java.util.Set: boolean retainAll(java.util.Collection)>(v6);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label09:
goto label11;
label10:
v18 := @caughtexception;
label11:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.UnsupportedOperationException from label08 to label09 with label10;
}
public void testEntrySetRetainAllNullFromEmpty()
{
java.lang.UnsupportedOperationException v2;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
java.util.Set v3;
java.lang.RuntimeException v6;
java.lang.NullPointerException v5;
boolean v4;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label01:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEmptyMap()>();
label02:
goto label04;
label03:
v2 := @caughtexception;
return;
label04:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v4 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v4 == 0 goto label08;
label05:
interfaceinvoke v3.<java.util.Set: boolean retainAll(java.util.Collection)>(null);
label06:
goto label11;
label07:
v5 := @caughtexception;
goto label11;
label08:
interfaceinvoke v3.<java.util.Set: boolean retainAll(java.util.Collection)>(null);
label09:
goto label11;
label10:
v6 := @caughtexception;
label11:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.NullPointerException from label05 to label06 with label07;
catch java.lang.UnsupportedOperationException from label08 to label09 with label10;
catch java.lang.NullPointerException from label08 to label09 with label10;
}
public void testEntrySetClear()
{
java.lang.UnsupportedOperationException v2, v6;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
java.util.Set v3;
boolean v4, v5;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v4 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsClear>;
if v4 == 0 goto label5;
interfaceinvoke v3.<java.util.Set: void clear()>();
v5 = interfaceinvoke v3.<java.util.Set: boolean isEmpty()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v5);
goto label8;
label5:
interfaceinvoke v3.<java.util.Set: void clear()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label6:
goto label8;
label7:
v6 := @caughtexception;
label8:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public void testEntrySetAddAndAddAll()
{
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map$Entry v3;
java.util.Map v1;
java.util.Set v2, v5;
java.lang.RuntimeException v4, v6;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEitherMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = staticinvoke <com.google.common.collect.testing.MapInterfaceTest: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(null, null);
label1:
interfaceinvoke v2.<java.util.Set: boolean add(java.lang.Object)>(v3);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException or NullPointerException.");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
label5:
v5 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v3);
interfaceinvoke v2.<java.util.Set: boolean addAll(java.util.Collection)>(v5);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException or NullPointerException.");
label6:
goto label8;
label7:
v6 := @caughtexception;
label8:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.NullPointerException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
catch java.lang.NullPointerException from label5 to label6 with label7;
}
public void testEntrySetSetValue()
{
java.lang.UnsupportedOperationException v4;
java.util.Map$Entry v11;
java.util.Iterator v6;
java.util.Set v5;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v2;
java.lang.Object v10, v13, v14, v3, v7, v8, v9;
boolean v1, v12;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsPut>;
if v1 != 0 goto label1;
return;
label1:
v2 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
label2:
goto label4;
label3:
v4 := @caughtexception;
return;
label4:
v5 = interfaceinvoke v2.<java.util.Map: java.util.Set entrySet()>();
v6 = interfaceinvoke v5.<java.util.Set: java.util.Iterator iterator()>();
v7 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getValue()>();
v9 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(v3);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(java.lang.Object,java.lang.Object)>(v8, v9);
v10 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getKey()>();
v11 = staticinvoke <com.google.common.collect.testing.MapInterfaceTest: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v10, v3);
v12 = interfaceinvoke v5.<java.util.Set: boolean contains(java.lang.Object)>(v11);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v12);
v13 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getKey()>();
v14 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v13);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(java.lang.Object,java.lang.Object)>(v3, v14);
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v2);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testEntrySetSetValueSameValue()
{
java.lang.UnsupportedOperationException v3;
java.util.Map$Entry v10;
java.util.Iterator v5;
java.util.Set v4;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v2;
java.lang.Object v12, v13, v6, v7, v8, v9;
boolean v1, v11;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsPut>;
if v1 != 0 goto label1;
return;
label1:
v2 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
return;
label4:
v4 = interfaceinvoke v2.<java.util.Map: java.util.Set entrySet()>();
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
v6 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getValue()>();
v8 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(v7);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(java.lang.Object,java.lang.Object)>(v7, v8);
v9 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getKey()>();
v10 = staticinvoke <com.google.common.collect.testing.MapInterfaceTest: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v9, v7);
v11 = interfaceinvoke v4.<java.util.Set: boolean contains(java.lang.Object)>(v10);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v11);
v12 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getKey()>();
v13 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v12);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(java.lang.Object,java.lang.Object)>(v7, v13);
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v2);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testEqualsForEqualMap()
{
java.lang.UnsupportedOperationException v2;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1, v4, v6;
boolean v3, v5, v7, v8;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
v3 = interfaceinvoke v1.<java.util.Map: boolean equals(java.lang.Object)>(v1);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
v5 = interfaceinvoke v4.<java.util.Map: boolean equals(java.lang.Object)>(v1);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v5);
v6 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
v7 = interfaceinvoke v1.<java.util.Map: boolean equals(java.lang.Object)>(v6);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v7);
v8 = interfaceinvoke v1.<java.util.Map: boolean equals(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v8);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testEqualsForLargerMap()
{
java.lang.UnsupportedOperationException v6;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v2, v3;
java.lang.Object v4, v5;
boolean v1, v7;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsPut>;
if v1 != 0 goto label1;
return;
label1:
v2 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getKeyNotInPopulatedMap()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v4, v5);
label2:
goto label4;
label3:
v6 := @caughtexception;
return;
label4:
v7 = interfaceinvoke v2.<java.util.Map: boolean equals(java.lang.Object)>(v3);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v7);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testEqualsForSmallerMap()
{
java.lang.UnsupportedOperationException v7;
java.util.Iterator v5;
java.util.Set v4;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v2, v3;
java.lang.Object v6;
boolean v1, v8;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v1 != 0 goto label1;
return;
label1:
v2 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
v4 = interfaceinvoke v3.<java.util.Map: java.util.Set keySet()>();
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
v6 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v6);
label2:
goto label4;
label3:
v7 := @caughtexception;
return;
label4:
v8 = interfaceinvoke v2.<java.util.Map: boolean equals(java.lang.Object)>(v3);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v8);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testEqualsForEmptyMap()
{
java.lang.UnsupportedOperationException v2;
java.util.Set v7;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1, v4, v6;
boolean v3, v5, v8, v9;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEmptyMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
v3 = interfaceinvoke v1.<java.util.Map: boolean equals(java.lang.Object)>(v1);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEmptyMap()>();
v5 = interfaceinvoke v4.<java.util.Map: boolean equals(java.lang.Object)>(v1);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v5);
v6 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(java.lang.Object,java.lang.Object)>(v6, v1);
v7 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
v8 = interfaceinvoke v1.<java.util.Map: boolean equals(java.lang.Object)>(v7);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v8);
v9 = interfaceinvoke v1.<java.util.Map: boolean equals(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v9);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testGet()
{
java.lang.UnsupportedOperationException v11, v2;
java.util.Iterator v4;
java.util.Set v3;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
java.lang.Object v10, v12, v6, v7, v8, v9;
boolean v5;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
label5:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label6;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getValue()>();
v8 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getKey()>();
v9 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v8);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(java.lang.Object,java.lang.Object)>(v7, v9);
goto label5;
label6:
v10 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getKeyNotInPopulatedMap()>();
label7:
goto label9;
label8:
v11 := @caughtexception;
return;
label9:
v12 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v10);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertNull(java.lang.Object)>(v12);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label6 to label7 with label8;
}
public void testGetForEmptyMap()
{
java.lang.UnsupportedOperationException v3;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
java.lang.Object v2, v4;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEmptyMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getKeyNotInPopulatedMap()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
return;
label4:
v4 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertNull(java.lang.Object)>(v4);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testGetNull()
{
java.lang.NullPointerException v7;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
java.lang.Object v5;
boolean v2, v3, v4, v6;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEitherMap()>();
v2 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean allowsNullKeys>;
if v2 == 0 goto label3;
v3 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean allowsNullValues>;
if v3 != 0 goto label6;
v4 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(null);
v5 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);
if v5 == null goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(boolean,boolean)>(v4, v6);
goto label6;
label3:
interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);
label4:
goto label6;
label5:
v7 := @caughtexception;
label6:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.NullPointerException from label3 to label4 with label5;
}
public void testHashCode()
{
java.lang.UnsupportedOperationException v2;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testHashCodeForEmptyMap()
{
java.lang.UnsupportedOperationException v2;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEmptyMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testPutNewKey()
{
java.lang.UnsupportedOperationException v13, v4;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
int v11, v12, v6;
java.lang.Object v2, v3, v7, v8;
boolean v10, v5, v9;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEitherMap()>();
label1:
v2 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getKeyNotInPopulatedMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
label2:
goto label4;
label3:
v4 := @caughtexception;
return;
label4:
v5 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsPut>;
if v5 == 0 goto label5;
v6 = interfaceinvoke v1.<java.util.Map: int size()>();
v7 = interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v2, v3);
v8 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(java.lang.Object,java.lang.Object)>(v3, v8);
v9 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v9);
v10 = interfaceinvoke v1.<java.util.Map: boolean containsValue(java.lang.Object)>(v3);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v10);
v11 = v6 + 1;
v12 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v11, v12);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertNull(java.lang.Object)>(v7);
goto label8;
label5:
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v2, v3);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label6:
goto label8;
label7:
v13 := @caughtexception;
label8:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public void testPutExistingKey()
{
java.lang.UnsupportedOperationException v13, v3;
java.util.Iterator v5;
java.util.Set v4;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
int v12, v8;
java.lang.Object v2, v6, v9;
boolean v10, v11, v7;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
return;
label4:
v4 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
v6 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v7 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsPut>;
if v7 == 0 goto label5;
v8 = interfaceinvoke v1.<java.util.Map: int size()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v2);
v9 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v6);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(java.lang.Object,java.lang.Object)>(v2, v9);
v10 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v6);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v10);
v11 = interfaceinvoke v1.<java.util.Map: boolean containsValue(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v11);
v12 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v8, v12);
goto label8;
label5:
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v2);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label6:
goto label8;
label7:
v13 := @caughtexception;
label8:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public void testPutNullKey()
{
java.lang.UnsupportedOperationException v4;
java.lang.RuntimeException v11;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v2;
java.lang.Object v3, v6, v7, v8;
boolean v1, v10, v5, v9;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsPut>;
if v1 != 0 goto label1;
return;
label1:
v2 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEitherMap()>();
label2:
v3 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
label3:
goto label5;
label4:
v4 := @caughtexception;
return;
label5:
v5 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean allowsNullKeys>;
if v5 == 0 goto label6;
v6 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);
v7 = interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, v3);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(java.lang.Object,java.lang.Object)>(v6, v7);
v8 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(java.lang.Object,java.lang.Object)>(v3, v8);
v9 = interfaceinvoke v2.<java.util.Map: boolean containsKey(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v9);
v10 = interfaceinvoke v2.<java.util.Map: boolean containsValue(java.lang.Object)>(v3);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v10);
goto label9;
label6:
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, v3);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected RuntimeException");
label7:
goto label9;
label8:
v11 := @caughtexception;
label9:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v2);
return;
catch java.lang.UnsupportedOperationException from label2 to label3 with label4;
catch java.lang.RuntimeException from label6 to label7 with label8;
}
public void testPutNullValue()
{
java.lang.UnsupportedOperationException v4;
java.lang.RuntimeException v14;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v2;
int v12, v13, v6;
java.lang.Object v3, v7, v8, v9;
boolean v1, v10, v11, v5;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsPut>;
if v1 != 0 goto label1;
return;
label1:
v2 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEitherMap()>();
label2:
v3 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getKeyNotInPopulatedMap()>();
label3:
goto label5;
label4:
v4 := @caughtexception;
return;
label5:
v5 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean allowsNullValues>;
if v5 == 0 goto label6;
v6 = interfaceinvoke v2.<java.util.Map: int size()>();
v7 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
v8 = interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, null);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(java.lang.Object,java.lang.Object)>(v7, v8);
v9 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertNull(java.lang.Object)>(v9);
v10 = interfaceinvoke v2.<java.util.Map: boolean containsKey(java.lang.Object)>(v3);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v10);
v11 = interfaceinvoke v2.<java.util.Map: boolean containsValue(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v11);
v12 = v6 + 1;
v13 = interfaceinvoke v2.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v12, v13);
goto label9;
label6:
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, null);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected RuntimeException");
label7:
goto label9;
label8:
v14 := @caughtexception;
label9:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v2);
return;
catch java.lang.UnsupportedOperationException from label2 to label3 with label4;
catch java.lang.RuntimeException from label6 to label7 with label8;
}
public void testPutNullValueForExistingKey()
{
java.util.Map v2;
int v14, v8;
boolean v1, v12, v13, v7;
java.lang.UnsupportedOperationException v6;
java.util.Iterator v4;
java.util.Set v3;
java.lang.RuntimeException v15;
com.google.common.collect.testing.MapInterfaceTest v0;
java.lang.Object v10, v11, v5, v9;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsPut>;
if v1 != 0 goto label1;
return;
label1:
v2 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
v3 = interfaceinvoke v2.<java.util.Map: java.util.Set keySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
v5 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
label2:
goto label4;
label3:
v6 := @caughtexception;
return;
label4:
v7 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean allowsNullValues>;
if v7 == 0 goto label5;
v8 = interfaceinvoke v2.<java.util.Map: int size()>();
v9 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v5);
v10 = interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v5, null);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(java.lang.Object,java.lang.Object)>(v9, v10);
v11 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertNull(java.lang.Object)>(v11);
v12 = interfaceinvoke v2.<java.util.Map: boolean containsKey(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v12);
v13 = interfaceinvoke v2.<java.util.Map: boolean containsValue(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v13);
v14 = interfaceinvoke v2.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v8, v14);
goto label8;
label5:
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v5, null);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected RuntimeException");
label6:
goto label8;
label7:
v15 := @caughtexception;
label8:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v2);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.RuntimeException from label5 to label6 with label7;
}
public void testPutAllNewKey()
{
java.lang.UnsupportedOperationException v13, v4;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1, v5;
int v11, v12, v7;
java.lang.Object v2, v3, v8;
boolean v10, v6, v9;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEitherMap()>();
label1:
v2 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getKeyNotInPopulatedMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
label2:
goto label4;
label3:
v4 := @caughtexception;
return;
label4:
v5 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>(v2, v3);
v6 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsPut>;
if v6 == 0 goto label5;
v7 = interfaceinvoke v1.<java.util.Map: int size()>();
interfaceinvoke v1.<java.util.Map: void putAll(java.util.Map)>(v5);
v8 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(java.lang.Object,java.lang.Object)>(v3, v8);
v9 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v9);
v10 = interfaceinvoke v1.<java.util.Map: boolean containsValue(java.lang.Object)>(v3);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v10);
v11 = v7 + 1;
v12 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v11, v12);
goto label8;
label5:
interfaceinvoke v1.<java.util.Map: void putAll(java.util.Map)>(v5);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label6:
goto label8;
label7:
v13 := @caughtexception;
label8:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public void testPutAllExistingKey()
{
java.lang.UnsupportedOperationException v13, v3;
java.util.Iterator v5;
java.util.Set v4;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1, v7;
int v14, v8;
java.lang.Object v10, v2, v6;
boolean v11, v12, v9;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
return;
label4:
v4 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
v6 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v7 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>(v6, v2);
v8 = interfaceinvoke v1.<java.util.Map: int size()>();
v9 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsPut>;
if v9 == 0 goto label5;
interfaceinvoke v1.<java.util.Map: void putAll(java.util.Map)>(v7);
v10 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v6);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(java.lang.Object,java.lang.Object)>(v2, v10);
v11 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v6);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v11);
v12 = interfaceinvoke v1.<java.util.Map: boolean containsValue(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v12);
goto label8;
label5:
interfaceinvoke v1.<java.util.Map: void putAll(java.util.Map)>(v7);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label6:
goto label8;
label7:
v13 := @caughtexception;
label8:
v14 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v8, v14);
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public void testRemove()
{
java.lang.UnsupportedOperationException v13, v2;
java.util.Iterator v4;
java.util.Set v3;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
int v11, v12, v7;
java.lang.Object v5, v8, v9;
boolean v10, v6;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
v5 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v6 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v6 == 0 goto label5;
v7 = interfaceinvoke v1.<java.util.Map: int size()>();
v8 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v5);
v9 = interfaceinvoke v1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(java.lang.Object,java.lang.Object)>(v8, v9);
v10 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v10);
v11 = v7 - 1;
v12 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v11, v12);
goto label8;
label5:
interfaceinvoke v1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label6:
goto label8;
label7:
v13 := @caughtexception;
label8:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public void testRemoveMissingKey()
{
java.lang.UnsupportedOperationException v3, v8;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
int v5, v7;
java.lang.Object v2, v6;
boolean v4;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getKeyNotInPopulatedMap()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
return;
label4:
v4 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v4 == 0 goto label5;
v5 = interfaceinvoke v1.<java.util.Map: int size()>();
v6 = interfaceinvoke v1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertNull(java.lang.Object)>(v6);
v7 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v5, v7);
goto label8;
label5:
interfaceinvoke v1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label6:
goto label8;
label7:
v8 := @caughtexception;
label8:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public void testSize()
{
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEitherMap()>();
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
}
public void testKeySetRemove()
{
java.lang.UnsupportedOperationException v11, v2;
java.util.Iterator v4;
java.util.Set v3;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
int v7, v8, v9;
java.lang.Object v5;
boolean v10, v6;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
v5 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v6 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v6 == 0 goto label5;
v7 = interfaceinvoke v1.<java.util.Map: int size()>();
interfaceinvoke v3.<java.util.Set: boolean remove(java.lang.Object)>(v5);
v8 = v7 - 1;
v9 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v8, v9);
v10 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v10);
goto label8;
label5:
interfaceinvoke v3.<java.util.Set: boolean remove(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label6:
goto label8;
label7:
v11 := @caughtexception;
label8:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public void testKeySetRemoveAll()
{
java.lang.UnsupportedOperationException v14, v2;
java.util.Iterator v4;
java.util.Set v13, v3, v8;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
int v10, v11, v7;
java.lang.Object v5;
boolean v12, v6, v9;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
v5 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v6 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v6 == 0 goto label5;
v7 = interfaceinvoke v1.<java.util.Map: int size()>();
v8 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v5);
v9 = interfaceinvoke v3.<java.util.Set: boolean removeAll(java.util.Collection)>(v8);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v9);
v10 = v7 - 1;
v11 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v10, v11);
v12 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v12);
goto label8;
label5:
v13 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v5);
interfaceinvoke v3.<java.util.Set: boolean removeAll(java.util.Collection)>(v13);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label6:
goto label8;
label7:
v14 := @caughtexception;
label8:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public void testKeySetRetainAll()
{
java.lang.UnsupportedOperationException v11, v2;
java.util.Iterator v4;
java.util.Set v10, v3, v7;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
int v8;
java.lang.Object v5;
boolean v6, v9;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
v5 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v6 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v6 == 0 goto label5;
v7 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v5);
interfaceinvoke v3.<java.util.Set: boolean retainAll(java.util.Collection)>(v7);
v8 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(1, v8);
v9 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v9);
goto label8;
label5:
v10 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v5);
interfaceinvoke v3.<java.util.Set: boolean retainAll(java.util.Collection)>(v10);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label6:
goto label8;
label7:
v11 := @caughtexception;
label8:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public void testKeySetClear()
{
java.lang.UnsupportedOperationException v2, v6;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
java.util.Set v3;
boolean v4, v5;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEitherMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v4 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsClear>;
if v4 == 0 goto label5;
interfaceinvoke v3.<java.util.Set: void clear()>();
v5 = interfaceinvoke v3.<java.util.Set: boolean isEmpty()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v5);
goto label8;
label5:
interfaceinvoke v3.<java.util.Set: void clear()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label6:
goto label8;
label7:
v6 := @caughtexception;
label8:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public void testKeySetRemoveAllNullFromEmpty()
{
java.lang.UnsupportedOperationException v2;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
java.util.Set v3;
java.lang.RuntimeException v6;
java.lang.NullPointerException v5;
boolean v4;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label01:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEmptyMap()>();
label02:
goto label04;
label03:
v2 := @caughtexception;
return;
label04:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v4 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v4 == 0 goto label08;
label05:
interfaceinvoke v3.<java.util.Set: boolean removeAll(java.util.Collection)>(null);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected NullPointerException.");
label06:
goto label11;
label07:
v5 := @caughtexception;
goto label11;
label08:
interfaceinvoke v3.<java.util.Set: boolean removeAll(java.util.Collection)>(null);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException or NullPointerException.");
label09:
goto label11;
label10:
v6 := @caughtexception;
label11:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.NullPointerException from label05 to label06 with label07;
catch java.lang.UnsupportedOperationException from label08 to label09 with label10;
catch java.lang.NullPointerException from label08 to label09 with label10;
}
public void testKeySetRetainAllNullFromEmpty()
{
java.lang.UnsupportedOperationException v2;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
java.util.Set v3;
java.lang.RuntimeException v6;
java.lang.NullPointerException v5;
boolean v4;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label01:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEmptyMap()>();
label02:
goto label04;
label03:
v2 := @caughtexception;
return;
label04:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v4 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v4 == 0 goto label08;
label05:
interfaceinvoke v3.<java.util.Set: boolean retainAll(java.util.Collection)>(null);
label06:
goto label11;
label07:
v5 := @caughtexception;
goto label11;
label08:
interfaceinvoke v3.<java.util.Set: boolean retainAll(java.util.Collection)>(null);
label09:
goto label11;
label10:
v6 := @caughtexception;
label11:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.NullPointerException from label05 to label06 with label07;
catch java.lang.UnsupportedOperationException from label08 to label09 with label10;
catch java.lang.NullPointerException from label08 to label09 with label10;
}
public void testValues()
{
java.lang.UnsupportedOperationException v2, v5;
java.util.Iterator v6;
java.util.Collection v3;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
java.lang.Object v4, v8;
boolean v7, v9;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label01:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label02:
goto label04;
label03:
v2 := @caughtexception;
return;
label04:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
v3 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
label05:
v4 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
label06:
goto label08;
label07:
v5 := @caughtexception;
return;
label08:
v6 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
label09:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label10;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v8);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v9);
goto label09;
label10:
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.UnsupportedOperationException from label05 to label06 with label07;
}
public void testValuesIteratorRemove()
{
java.lang.IllegalStateException v9;
java.lang.UnsupportedOperationException v10, v2;
java.util.Iterator v4;
java.util.Collection v3;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
int v6, v7, v8;
boolean v5;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label01:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label02:
goto label04;
label03:
v2 := @caughtexception;
return;
label04:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
v5 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsIteratorRemove>;
if v5 == 0 goto label08;
v6 = interfaceinvoke v1.<java.util.Map: int size()>();
interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v4.<java.util.Iterator: void remove()>();
v7 = v6 - 1;
v8 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v7, v8);
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
label05:
interfaceinvoke v4.<java.util.Iterator: void remove()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected IllegalStateException.");
label06:
goto label11;
label07:
v9 := @caughtexception;
goto label11;
label08:
interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v4.<java.util.Iterator: void remove()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label09:
goto label11;
label10:
v10 := @caughtexception;
label11:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.IllegalStateException from label05 to label06 with label07;
catch java.lang.UnsupportedOperationException from label08 to label09 with label10;
}
public void testValuesRemove()
{
java.lang.UnsupportedOperationException v12, v2;
java.util.Iterator v10, v6;
java.util.Collection v3;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
int v5, v8, v9;
java.lang.Object v11, v7;
boolean v4;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v4 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v4 == 0 goto label5;
v5 = interfaceinvoke v1.<java.util.Map: int size()>();
v6 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
v7 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v3.<java.util.Collection: boolean remove(java.lang.Object)>(v7);
v8 = v5 - 1;
v9 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v8, v9);
goto label8;
label5:
v10 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
v11 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v3.<java.util.Collection: boolean remove(java.lang.Object)>(v11);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label6:
goto label8;
label7:
v12 := @caughtexception;
label8:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public void testValuesRemoveMissing()
{
java.lang.UnsupportedOperationException v3, v9;
java.util.Collection v4;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Map v1;
int v10, v5;
java.lang.Object v2;
boolean v6, v7, v8;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEitherMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
return;
label4:
v4 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v5 = interfaceinvoke v1.<java.util.Map: int size()>();
v6 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v6 == 0 goto label5;
v7 = interfaceinvoke v4.<java.util.Collection: boolean remove(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v7);
goto label8;
label5:
v8 = interfaceinvoke v4.<java.util.Collection: boolean remove(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v8);
label6:
goto label8;
label7:
v9 := @caughtexception;
label8:
v10 = interfaceinvoke v1.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertEquals(int,int)>(v5, v10);
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public void testValuesRemoveAll()
{
java.util.Map v1;
boolean v11, v13, v15, v7, v9;
java.lang.UnsupportedOperationException v16, v2;
java.util.Iterator v12, v4, v8;
java.util.Collection v3;
java.util.Set v6;
com.google.common.collect.testing.MapInterfaceTest v0;
java.lang.Object v10, v14, v5;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label01:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label02:
goto label04;
label03:
v2 := @caughtexception;
return;
label04:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
v5 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v6 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v5);
v7 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v7 == 0 goto label08;
interfaceinvoke v3.<java.util.Collection: boolean removeAll(java.util.Collection)>(v6);
v8 = interfaceinvoke v6.<java.util.Set: java.util.Iterator iterator()>();
label05:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label06;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = interfaceinvoke v3.<java.util.Collection: boolean contains(java.lang.Object)>(v10);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v11);
goto label05;
label06:
v12 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
label07:
v13 = interfaceinvoke v12.<java.util.Iterator: boolean hasNext()>();
if v13 == 0 goto label11;
v14 = interfaceinvoke v12.<java.util.Iterator: java.lang.Object next()>();
v15 = interfaceinvoke v6.<java.util.Set: boolean contains(java.lang.Object)>(v14);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertFalse(boolean)>(v15);
goto label07;
label08:
interfaceinvoke v3.<java.util.Collection: boolean removeAll(java.util.Collection)>(v6);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label09:
goto label11;
label10:
v16 := @caughtexception;
label11:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.UnsupportedOperationException from label08 to label09 with label10;
}
public void testValuesRemoveAllNullFromEmpty()
{
java.lang.UnsupportedOperationException v2;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Collection v3;
java.util.Map v1;
java.lang.RuntimeException v6;
java.lang.NullPointerException v5;
boolean v4;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label01:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEmptyMap()>();
label02:
goto label04;
label03:
v2 := @caughtexception;
return;
label04:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v4 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v4 == 0 goto label08;
label05:
interfaceinvoke v3.<java.util.Collection: boolean removeAll(java.util.Collection)>(null);
label06:
goto label11;
label07:
v5 := @caughtexception;
goto label11;
label08:
interfaceinvoke v3.<java.util.Collection: boolean removeAll(java.util.Collection)>(null);
label09:
goto label11;
label10:
v6 := @caughtexception;
label11:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.NullPointerException from label05 to label06 with label07;
catch java.lang.UnsupportedOperationException from label08 to label09 with label10;
catch java.lang.NullPointerException from label08 to label09 with label10;
}
public void testValuesRetainAll()
{
java.util.Map v1;
boolean v11, v13, v15, v7, v9;
java.lang.UnsupportedOperationException v16, v2;
java.util.Iterator v12, v4, v8;
java.util.Collection v3;
java.util.Set v6;
com.google.common.collect.testing.MapInterfaceTest v0;
java.lang.Object v10, v14, v5;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label01:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label02:
goto label04;
label03:
v2 := @caughtexception;
return;
label04:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
v5 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v6 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v5);
v7 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v7 == 0 goto label08;
interfaceinvoke v3.<java.util.Collection: boolean retainAll(java.util.Collection)>(v6);
v8 = interfaceinvoke v6.<java.util.Set: java.util.Iterator iterator()>();
label05:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label06;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = interfaceinvoke v3.<java.util.Collection: boolean contains(java.lang.Object)>(v10);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v11);
goto label05;
label06:
v12 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
label07:
v13 = interfaceinvoke v12.<java.util.Iterator: boolean hasNext()>();
if v13 == 0 goto label11;
v14 = interfaceinvoke v12.<java.util.Iterator: java.lang.Object next()>();
v15 = interfaceinvoke v6.<java.util.Set: boolean contains(java.lang.Object)>(v14);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v15);
goto label07;
label08:
interfaceinvoke v3.<java.util.Collection: boolean retainAll(java.util.Collection)>(v6);
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label09:
goto label11;
label10:
v16 := @caughtexception;
label11:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.UnsupportedOperationException from label08 to label09 with label10;
}
public void testValuesRetainAllNullFromEmpty()
{
java.lang.UnsupportedOperationException v2;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Collection v3;
java.util.Map v1;
java.lang.RuntimeException v6;
java.lang.NullPointerException v5;
boolean v4;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label01:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makeEmptyMap()>();
label02:
goto label04;
label03:
v2 := @caughtexception;
return;
label04:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v4 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsRemove>;
if v4 == 0 goto label08;
label05:
interfaceinvoke v3.<java.util.Collection: boolean retainAll(java.util.Collection)>(null);
label06:
goto label11;
label07:
v5 := @caughtexception;
goto label11;
label08:
interfaceinvoke v3.<java.util.Collection: boolean retainAll(java.util.Collection)>(null);
label09:
goto label11;
label10:
v6 := @caughtexception;
label11:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.NullPointerException from label05 to label06 with label07;
catch java.lang.UnsupportedOperationException from label08 to label09 with label10;
catch java.lang.NullPointerException from label08 to label09 with label10;
}
public void testValuesClear()
{
java.lang.UnsupportedOperationException v2, v6;
com.google.common.collect.testing.MapInterfaceTest v0;
java.util.Collection v3;
java.util.Map v1;
boolean v4, v5;
v0 := @this: com.google.common.collect.testing.MapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: java.util.Map makePopulatedMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
v3 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v4 = v0.<com.google.common.collect.testing.MapInterfaceTest: boolean supportsClear>;
if v4 == 0 goto label5;
interfaceinvoke v3.<java.util.Collection: void clear()>();
v5 = interfaceinvoke v3.<java.util.Collection: boolean isEmpty()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void assertTrue(boolean)>(v5);
goto label8;
label5:
interfaceinvoke v3.<java.util.Collection: void clear()>();
staticinvoke <com.google.common.collect.testing.MapInterfaceTest: void fail(java.lang.String)>("Expected UnsupportedOperationException.");
label6:
goto label8;
label7:
v6 := @caughtexception;
label8:
virtualinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void assertInvariants(java.util.Map)>(v1);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
static java.util.Map$Entry mapEntry(java.lang.Object, java.lang.Object)
{
java.util.Iterator v4;
java.util.Map v2;
java.util.Set v3;
java.lang.Object v0, v1, v5;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>(v0, v1);
v3 = interfaceinvoke v2.<java.util.Map: java.util.Set entrySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
v5 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
return v5;
}
}