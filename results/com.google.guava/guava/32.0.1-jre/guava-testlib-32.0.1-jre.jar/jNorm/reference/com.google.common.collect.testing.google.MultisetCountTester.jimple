public class com.google.common.collect.testing.google.MultisetCountTester extends com.google.common.collect.testing.google.AbstractMultisetTester
{
public void <init>()
{
com.google.common.collect.testing.google.MultisetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.MultisetCountTester;
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetTester: void <init>()>();
return;
}
public void testCount_0()
{
com.google.common.collect.Multiset v1;
com.google.common.collect.testing.google.MultisetCountTester v0;
int v3;
java.lang.Object v2;
v0 := @this: com.google.common.collect.testing.google.MultisetCountTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetCountTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetCountTester: java.lang.Object e3()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: int count(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.google.MultisetCountTester: void assertEquals(java.lang.String,int,int)>("multiset.count(missing) didn\'t return 0", 0, v3);
return;
}
public void testCount_1()
{
com.google.common.collect.Multiset v1;
com.google.common.collect.testing.google.MultisetCountTester v0;
int v3;
java.lang.Object v2;
v0 := @this: com.google.common.collect.testing.google.MultisetCountTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetCountTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetCountTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: int count(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.google.MultisetCountTester: void assertEquals(java.lang.String,int,int)>("multiset.count(present) didn\'t return 1", 1, v3);
return;
}
public void testCount_3()
{
com.google.common.collect.Multiset v1;
com.google.common.collect.testing.google.MultisetCountTester v0;
int v3;
java.lang.Object v2;
v0 := @this: com.google.common.collect.testing.google.MultisetCountTester;
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetCountTester: void initThreeCopies()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetCountTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetCountTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: int count(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.google.MultisetCountTester: void assertEquals(java.lang.String,int,int)>("multiset.count(thriceContained) didn\'t return 3", 3, v3);
return;
}
public void testCount_nullAbsent()
{
int v2;
com.google.common.collect.Multiset v1;
com.google.common.collect.testing.google.MultisetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.MultisetCountTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetCountTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: int count(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.google.MultisetCountTester: void assertEquals(java.lang.String,int,int)>("multiset.count(null) didn\'t return 0", 0, v2);
return;
}
public void testCount_null_forbidden()
{
com.google.common.collect.Multiset v1;
com.google.common.collect.testing.google.MultisetCountTester v0;
java.lang.NullPointerException v2;
v0 := @this: com.google.common.collect.testing.google.MultisetCountTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetCountTester: com.google.common.collect.Multiset getMultiset()>();
interfaceinvoke v1.<com.google.common.collect.Multiset: int count(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.google.MultisetCountTester: void fail(java.lang.String)>("Expected NullPointerException");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testCount_nullPresent()
{
int v2;
com.google.common.collect.Multiset v1;
com.google.common.collect.testing.google.MultisetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.MultisetCountTester;
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetCountTester: void initCollectionWithNullElement()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetCountTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: int count(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.google.MultisetCountTester: void assertEquals(int,int)>(1, v2);
return;
}
public void testCount_wrongType()
{
com.google.common.collect.Multiset v1;
com.google.common.collect.testing.google.MultisetCountTester v0;
com.google.common.collect.testing.WrongType v2;
int v3;
v0 := @this: com.google.common.collect.testing.google.MultisetCountTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetCountTester: com.google.common.collect.Multiset getMultiset()>();
v2 = <com.google.common.collect.testing.WrongType: com.google.common.collect.testing.WrongType VALUE>;
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: int count(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.google.MultisetCountTester: void assertEquals(java.lang.String,int,int)>("multiset.count(wrongType) didn\'t return 0", 0, v3);
return;
}
public static java.util.List getCountDuplicateInitializingMethods()
{
java.util.List v2;
java.lang.reflect.Method v1;
java.lang.reflect.Method[] v0;
v0 = newarray (java.lang.reflect.Method)[1];
v1 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/google/MultisetCountTester;", "testCount_3");
v0[0] = v1;
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v0);
return v2;
}
}