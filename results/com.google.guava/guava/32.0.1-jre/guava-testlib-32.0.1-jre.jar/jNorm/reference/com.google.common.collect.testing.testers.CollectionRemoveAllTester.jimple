public class com.google.common.collect.testing.testers.CollectionRemoveAllTester extends com.google.common.collect.testing.AbstractCollectionTester
{
public void <init>()
{
com.google.common.collect.testing.testers.CollectionRemoveAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveAllTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractCollectionTester: void <init>()>();
return;
}
public void testRemoveAll_emptyCollection()
{
com.google.common.collect.testing.testers.CollectionRemoveAllTester v0;
java.lang.Object[] v2;
java.util.Collection v1;
com.google.common.collect.testing.MinimalCollection v3;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.util.Collection collection>;
v2 = newarray (java.lang.Object)[0];
v3 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v4 = interfaceinvoke v1.<java.util.Collection: boolean removeAll(java.util.Collection)>(v3);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveAllTester: void assertFalse(java.lang.String,boolean)>("removeAll(emptyCollection) should return false", v4);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: void expectUnchanged()>();
return;
}
public void testRemoveAll_nonePresent()
{
com.google.common.collect.testing.testers.CollectionRemoveAllTester v0;
java.lang.Object[] v2;
java.util.Collection v1;
java.lang.Object v3;
com.google.common.collect.testing.MinimalCollection v4;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.util.Collection collection>;
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.lang.Object e3()>();
v2[0] = v3;
v4 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v5 = interfaceinvoke v1.<java.util.Collection: boolean removeAll(java.util.Collection)>(v4);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveAllTester: void assertFalse(java.lang.String,boolean)>("removeAll(disjointCollection) should return false", v5);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: void expectUnchanged()>();
return;
}
public void testRemoveAll_allPresent()
{
com.google.common.collect.testing.testers.CollectionRemoveAllTester v0;
java.lang.Object[] v2, v6;
java.util.Collection v1;
java.lang.Object v3, v7;
com.google.common.collect.testing.MinimalCollection v4;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.util.Collection collection>;
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.lang.Object e0()>();
v2[0] = v3;
v4 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v5 = interfaceinvoke v1.<java.util.Collection: boolean removeAll(java.util.Collection)>(v4);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveAllTester: void assertTrue(java.lang.String,boolean)>("removeAll(intersectingCollection) should return true", v5);
v6 = newarray (java.lang.Object)[1];
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.lang.Object e0()>();
v6[0] = v7;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: void expectMissing(java.lang.Object[])>(v6);
return;
}
public void testRemoveAll_somePresent()
{
com.google.common.collect.testing.testers.CollectionRemoveAllTester v0;
java.lang.Object[] v2, v7;
java.util.Collection v1;
java.lang.Object v3, v4, v8;
com.google.common.collect.testing.MinimalCollection v5;
boolean v6;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.util.Collection collection>;
v2 = newarray (java.lang.Object)[2];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.lang.Object e0()>();
v2[0] = v3;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.lang.Object e3()>();
v2[1] = v4;
v5 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v6 = interfaceinvoke v1.<java.util.Collection: boolean removeAll(java.util.Collection)>(v5);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveAllTester: void assertTrue(java.lang.String,boolean)>("removeAll(intersectingCollection) should return true", v6);
v7 = newarray (java.lang.Object)[1];
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.lang.Object e0()>();
v7[0] = v8;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: void expectMissing(java.lang.Object[])>(v7);
return;
}
public void testRemoveAllSomePresentConcurrentWithIteration()
{
com.google.common.collect.testing.testers.CollectionRemoveAllTester v0;
java.lang.Object[] v4;
java.util.Iterator v2;
java.util.Collection v1, v3;
java.lang.Object v5, v6;
com.google.common.collect.testing.MinimalCollection v7;
java.util.ConcurrentModificationException v9;
boolean v8;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveAllTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
v3 = v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.util.Collection collection>;
v4 = newarray (java.lang.Object)[2];
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.lang.Object e0()>();
v4[0] = v5;
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.lang.Object e3()>();
v4[1] = v6;
v7 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v4);
v8 = interfaceinvoke v3.<java.util.Collection: boolean removeAll(java.util.Collection)>(v7);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveAllTester: void assertTrue(boolean)>(v8);
interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveAllTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v9 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testRemoveAll_somePresentLargeCollectionToRemove()
{
com.google.common.collect.testing.testers.CollectionRemoveAllTester v0;
java.lang.Object[] v11, v2;
java.util.Collection v1;
java.lang.Object v12, v3, v4, v5, v6, v7, v8;
com.google.common.collect.testing.MinimalCollection v9;
boolean v10;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.util.Collection collection>;
v2 = newarray (java.lang.Object)[6];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.lang.Object e0()>();
v2[0] = v3;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.lang.Object e0()>();
v2[1] = v4;
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.lang.Object e0()>();
v2[2] = v5;
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.lang.Object e3()>();
v2[3] = v6;
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.lang.Object e3()>();
v2[4] = v7;
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.lang.Object e3()>();
v2[5] = v8;
v9 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v10 = interfaceinvoke v1.<java.util.Collection: boolean removeAll(java.util.Collection)>(v9);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveAllTester: void assertTrue(java.lang.String,boolean)>("removeAll(largeIntersectingCollection) should return true", v10);
v11 = newarray (java.lang.Object)[1];
v12 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.lang.Object e0()>();
v11[0] = v12;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: void expectMissing(java.lang.Object[])>(v11);
return;
}
public void testRemoveAll_unsupportedEmptyCollection()
{
com.google.common.collect.testing.testers.CollectionRemoveAllTester v0;
java.lang.UnsupportedOperationException v5;
java.lang.Object[] v2;
java.util.Collection v1;
com.google.common.collect.testing.MinimalCollection v3;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveAllTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.util.Collection collection>;
v2 = newarray (java.lang.Object)[0];
v3 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v4 = interfaceinvoke v1.<java.util.Collection: boolean removeAll(java.util.Collection)>(v3);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveAllTester: void assertFalse(java.lang.String,boolean)>("removeAll(emptyCollection) should return false or throw UnsupportedOperationException", v4);
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testRemoveAll_unsupportedNonePresent()
{
com.google.common.collect.testing.testers.CollectionRemoveAllTester v0;
java.lang.UnsupportedOperationException v6;
java.lang.Object[] v2;
java.util.Collection v1;
java.lang.Object v3;
com.google.common.collect.testing.MinimalCollection v4;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveAllTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.util.Collection collection>;
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.lang.Object e3()>();
v2[0] = v3;
v4 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v5 = interfaceinvoke v1.<java.util.Collection: boolean removeAll(java.util.Collection)>(v4);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveAllTester: void assertFalse(java.lang.String,boolean)>("removeAll(disjointCollection) should return false or throw UnsupportedOperationException", v5);
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testRemoveAll_unsupportedPresent()
{
com.google.common.collect.testing.testers.CollectionRemoveAllTester v0;
java.lang.UnsupportedOperationException v5;
java.lang.Object[] v2;
java.util.Collection v1, v6;
java.lang.Object v3, v7;
com.google.common.collect.testing.MinimalCollection v4;
boolean v8;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveAllTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.util.Collection collection>;
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.lang.Object e0()>();
v2[0] = v3;
v4 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
interfaceinvoke v1.<java.util.Collection: boolean removeAll(java.util.Collection)>(v4);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveAllTester: void fail(java.lang.String)>("removeAll(intersectingCollection) should throw UnsupportedOperationException");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: void expectUnchanged()>();
v6 = v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.util.Collection collection>;
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.lang.Object e0()>();
v8 = interfaceinvoke v6.<java.util.Collection: boolean contains(java.lang.Object)>(v7);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveAllTester: void assertTrue(boolean)>(v8);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testRemoveAll_nullCollectionReferenceEmptySubject()
{
com.google.common.collect.testing.testers.CollectionRemoveAllTester v0;
java.lang.NullPointerException v2;
java.util.Collection v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveAllTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.util.Collection collection>;
interfaceinvoke v1.<java.util.Collection: boolean removeAll(java.util.Collection)>(null);
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testRemoveAll_nullCollectionReferenceNonEmptySubject()
{
com.google.common.collect.testing.testers.CollectionRemoveAllTester v0;
java.lang.NullPointerException v2;
java.util.Collection v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveAllTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.util.Collection collection>;
interfaceinvoke v1.<java.util.Collection: boolean removeAll(java.util.Collection)>(null);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveAllTester: void fail(java.lang.String)>("removeAll(null) should throw NullPointerException");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testRemoveAll_containsNullNo()
{
com.google.common.collect.testing.testers.CollectionRemoveAllTester v0;
java.lang.Object[] v1;
java.util.Collection v3;
com.google.common.collect.testing.MinimalCollection v2;
java.lang.NullPointerException v5;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveAllTester;
v1 = newarray (java.lang.Object)[1];
v1[0] = null;
v2 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v1);
label1:
v3 = v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.util.Collection collection>;
v4 = interfaceinvoke v3.<java.util.Collection: boolean removeAll(java.util.Collection)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveAllTester: void assertFalse(java.lang.String,boolean)>("removeAll(containsNull) should return false or throw", v4);
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: void expectUnchanged()>();
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testRemoveAll_containsNullNoButAllowed()
{
com.google.common.collect.testing.testers.CollectionRemoveAllTester v0;
java.lang.Object[] v1;
java.util.Collection v3;
com.google.common.collect.testing.MinimalCollection v2;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveAllTester;
v1 = newarray (java.lang.Object)[1];
v1[0] = null;
v2 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v1);
v3 = v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.util.Collection collection>;
v4 = interfaceinvoke v3.<java.util.Collection: boolean removeAll(java.util.Collection)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveAllTester: void assertFalse(java.lang.String,boolean)>("removeAll(containsNull) should return false", v4);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: void expectUnchanged()>();
return;
}
public void testRemoveAll_containsNullYes()
{
com.google.common.collect.testing.testers.CollectionRemoveAllTester v0;
java.util.Collection v1;
java.util.Set v2;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveAllTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: void initCollectionWithNullElement()>();
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.util.Collection collection>;
v2 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(null);
v3 = interfaceinvoke v1.<java.util.Collection: boolean removeAll(java.util.Collection)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveAllTester: void assertTrue(java.lang.String,boolean)>("removeAll(containsNull) should return true", v3);
return;
}
public void testRemoveAll_containsWrongType()
{
com.google.common.collect.testing.WrongType[] v2;
com.google.common.collect.testing.testers.CollectionRemoveAllTester v0;
com.google.common.collect.testing.WrongType v3;
java.util.Collection v1;
com.google.common.collect.testing.MinimalCollection v4;
java.lang.ClassCastException v6;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveAllTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: java.util.Collection collection>;
v2 = newarray (com.google.common.collect.testing.WrongType)[1];
v3 = <com.google.common.collect.testing.WrongType: com.google.common.collect.testing.WrongType VALUE>;
v2[0] = v3;
v4 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v5 = interfaceinvoke v1.<java.util.Collection: boolean removeAll(java.util.Collection)>(v4);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveAllTester: void assertFalse(java.lang.String,boolean)>("removeAll(containsWrongType) should return false or throw", v5);
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveAllTester: void expectUnchanged()>();
return;
catch java.lang.ClassCastException from label1 to label2 with label3;
}
}