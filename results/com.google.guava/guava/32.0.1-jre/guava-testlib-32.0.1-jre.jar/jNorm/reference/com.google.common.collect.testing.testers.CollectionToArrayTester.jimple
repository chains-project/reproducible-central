public class com.google.common.collect.testing.testers.CollectionToArrayTester extends com.google.common.collect.testing.AbstractCollectionTester
{
public void <init>()
{
com.google.common.collect.testing.testers.CollectionToArrayTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionToArrayTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractCollectionTester: void <init>()>();
return;
}
public void testToArray_noArgs()
{
com.google.common.collect.testing.testers.CollectionToArrayTester v0;
java.lang.Object[] v2, v3;
java.util.Collection v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionToArrayTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: java.lang.Object[] toArray()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.lang.Object[] createSamplesArray()>();
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: void expectArrayContentsAnyOrder(java.lang.Object[],java.lang.Object[])>(v3, v2);
return;
}
public void testToArray_isPlainObjectArray()
{
com.google.common.collect.testing.testers.CollectionToArrayTester v0;
java.lang.Object[] v2;
java.util.Collection v1;
java.lang.Class v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionToArrayTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: java.lang.Object[] toArray()>();
v3 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertEquals(java.lang.Object,java.lang.Object)>(class "[Ljava/lang/Object;", v3);
return;
}
public void testToArray_emptyArray()
{
com.google.common.collect.testing.testers.CollectionToArrayTester v0;
java.lang.Object[] v2, v4, v9;
java.util.Collection v3;
int v7, v8;
java.lang.Class v5, v6;
java.lang.Object v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionToArrayTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.lang.Object getSubjectGenerator()>();
v2 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object[] createArray(int)>(0);
v3 = v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.util.Collection collection>;
v4 = interfaceinvoke v3.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(v2);
v5 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v4.<java.lang.Object: java.lang.Class getClass()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("toArray(emptyT[]) should return an array of type T", v5, v6);
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: int getNumElements()>();
v8 = lengthof v4;
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertEquals(java.lang.String,int,int)>("toArray(emptyT[]).length:", v7, v8);
v9 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.lang.Object[] createSamplesArray()>();
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: void expectArrayContentsAnyOrder(java.lang.Object[],java.lang.Object[])>(v9, v4);
return;
}
public void testToArray_emptyArray_ordered()
{
com.google.common.collect.testing.testers.CollectionToArrayTester v0;
java.lang.Object[] v2, v4;
java.util.Collection v3;
java.util.List v9;
int v7, v8;
java.lang.Class v5, v6;
java.lang.Object v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionToArrayTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.lang.Object getSubjectGenerator()>();
v2 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object[] createArray(int)>(0);
v3 = v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.util.Collection collection>;
v4 = interfaceinvoke v3.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(v2);
v5 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v4.<java.lang.Object: java.lang.Class getClass()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("toArray(emptyT[]) should return an array of type T", v5, v6);
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: int getNumElements()>();
v8 = lengthof v4;
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertEquals(java.lang.String,int,int)>("toArray(emptyT[]).length:", v7, v8);
v9 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.util.List getOrderedElements()>();
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: void expectArrayContentsInOrder(java.util.List,java.lang.Object[])>(v9, v4);
return;
}
public void testToArray_emptyArrayOfObject()
{
com.google.common.collect.testing.testers.CollectionToArrayTester v0;
java.lang.Object[] v1, v3, v7;
java.util.Collection v2;
int v5, v6;
java.lang.Class v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionToArrayTester;
v1 = newarray (java.lang.Object)[0];
v2 = v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.util.Collection collection>;
v3 = interfaceinvoke v2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(v1);
v4 = virtualinvoke v3.<java.lang.Object: java.lang.Class getClass()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("toArray(emptyObject[]) should return an array of type Object", class "[Ljava/lang/Object;", v4);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: int getNumElements()>();
v6 = lengthof v3;
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertEquals(java.lang.String,int,int)>("toArray(emptyObject[]).length", v5, v6);
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.lang.Object[] createSamplesArray()>();
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: void expectArrayContentsAnyOrder(java.lang.Object[],java.lang.Object[])>(v7, v3);
return;
}
public void testToArray_rightSizedArray()
{
com.google.common.collect.testing.testers.CollectionToArrayTester v0;
java.lang.Object[] v3, v5, v6;
java.util.Collection v4;
int v2;
java.lang.Object v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionToArrayTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.lang.Object getSubjectGenerator()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: int getNumElements()>();
v3 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object[] createArray(int)>(v2);
v4 = v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.util.Collection collection>;
v5 = interfaceinvoke v4.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(v3);
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("toArray(sameSizeE[]) should return the given array", v3, v5);
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.lang.Object[] createSamplesArray()>();
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: void expectArrayContentsAnyOrder(java.lang.Object[],java.lang.Object[])>(v6, v3);
return;
}
public void testToArray_rightSizedArray_ordered()
{
com.google.common.collect.testing.testers.CollectionToArrayTester v0;
java.util.List v6;
java.lang.Object[] v3, v5;
java.util.Collection v4;
int v2;
java.lang.Object v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionToArrayTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.lang.Object getSubjectGenerator()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: int getNumElements()>();
v3 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object[] createArray(int)>(v2);
v4 = v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.util.Collection collection>;
v5 = interfaceinvoke v4.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(v3);
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("toArray(sameSizeE[]) should return the given array", v3, v5);
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.util.List getOrderedElements()>();
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: void expectArrayContentsInOrder(java.util.List,java.lang.Object[])>(v6, v3);
return;
}
public void testToArray_rightSizedArrayOfObject()
{
com.google.common.collect.testing.testers.CollectionToArrayTester v0;
java.lang.Object[] v2, v4, v5;
java.util.Collection v3;
int v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionToArrayTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: int getNumElements()>();
v2 = newarray (java.lang.Object)[v1];
v3 = v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.util.Collection collection>;
v4 = interfaceinvoke v3.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("toArray(sameSizeObject[]) should return the given array", v2, v4);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.lang.Object[] createSamplesArray()>();
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: void expectArrayContentsAnyOrder(java.lang.Object[],java.lang.Object[])>(v5, v2);
return;
}
public void testToArray_rightSizedArrayOfObject_ordered()
{
com.google.common.collect.testing.testers.CollectionToArrayTester v0;
java.util.List v5;
java.lang.Object[] v2, v4;
java.util.Collection v3;
int v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionToArrayTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: int getNumElements()>();
v2 = newarray (java.lang.Object)[v1];
v3 = v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.util.Collection collection>;
v4 = interfaceinvoke v3.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("toArray(sameSizeObject[]) should return the given array", v2, v4);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.util.List getOrderedElements()>();
specialinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: void expectArrayContentsInOrder(java.util.List,java.lang.Object[])>(v5, v2);
return;
}
public void testToArray_oversizedArray()
{
com.google.common.collect.testing.testers.CollectionToArrayTester v0;
java.lang.Object[] v11, v15, v4;
int v13, v16, v17, v2, v22, v3, v5, v7, v8;
java.lang.String v19;
boolean v21;
java.util.Collection v10;
java.util.List v12, v14;
java.lang.Object v1, v18, v20, v23, v6, v9;
v0 := @this: com.google.common.collect.testing.testers.CollectionToArrayTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.lang.Object getSubjectGenerator()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: int getNumElements()>();
v3 = v2 + 2;
v4 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object[] createArray(int)>(v3);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: int getNumElements()>();
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.lang.Object e3()>();
v4[v5] = v6;
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: int getNumElements()>();
v8 = v7 + 1;
v9 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.lang.Object e3()>();
v4[v8] = v9;
v10 = v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.util.Collection collection>;
v11 = interfaceinvoke v10.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(v4);
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("toArray(overSizedE[]) should return the given array", v4, v11);
v12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v4);
v13 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: int getNumElements()>();
v14 = interfaceinvoke v12.<java.util.List: java.util.List subList(int,int)>(0, v13);
v15 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.lang.Object[] createSamplesArray()>();
v16 = 0;
label1:
v17 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: int getNumElements()>();
if v16 >= v17 goto label2;
v18 = v15[v16];
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v18) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("toArray(overSizedE[]) should contain element \u0001");
v20 = v15[v16];
v21 = interfaceinvoke v14.<java.util.List: boolean contains(java.lang.Object)>(v20);
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertTrue(java.lang.String,boolean)>(v19, v21);
v16 = v16 + 1;
goto label1;
label2:
v22 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: int getNumElements()>();
v23 = v4[v22];
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertNull(java.lang.String,java.lang.Object)>("The array element immediately following the end of the collection should be nulled", v23);
return;
}
public void testToArray_oversizedArray_ordered()
{
com.google.common.collect.testing.testers.CollectionToArrayTester v0;
java.lang.Object[] v11, v4;
int v13, v14, v17, v2, v3, v5, v7, v8;
java.util.Collection v10;
java.util.List v12;
java.lang.Object v1, v15, v16, v18, v6, v9;
v0 := @this: com.google.common.collect.testing.testers.CollectionToArrayTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.lang.Object getSubjectGenerator()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: int getNumElements()>();
v3 = v2 + 2;
v4 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object[] createArray(int)>(v3);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: int getNumElements()>();
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.lang.Object e3()>();
v4[v5] = v6;
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: int getNumElements()>();
v8 = v7 + 1;
v9 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.lang.Object e3()>();
v4[v8] = v9;
v10 = v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.util.Collection collection>;
v11 = interfaceinvoke v10.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(v4);
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("toArray(overSizedE[]) should return the given array", v4, v11);
v12 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.util.List getOrderedElements()>();
v13 = 0;
label1:
v14 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: int getNumElements()>();
if v13 >= v14 goto label2;
v15 = interfaceinvoke v12.<java.util.List: java.lang.Object get(int)>(v13);
v16 = v4[v13];
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertEquals(java.lang.Object,java.lang.Object)>(v15, v16);
v13 = v13 + 1;
goto label1;
label2:
v17 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: int getNumElements()>();
v18 = v4[v17];
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertNull(java.lang.String,java.lang.Object)>("The array element immediately following the end of the collection should be nulled", v18);
return;
}
public void testToArray_emptyArrayOfWrongTypeForNonEmptyCollection()
{
com.google.common.collect.testing.WrongType[] v1;
com.google.common.collect.testing.testers.CollectionToArrayTester v0;
java.util.Collection v2;
java.lang.ArrayStoreException v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionToArrayTester;
label1:
v1 = newarray (com.google.common.collect.testing.WrongType)[0];
v2 = v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.util.Collection collection>;
interfaceinvoke v2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(v1);
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void fail(java.lang.String)>("toArray(notAssignableTo[]) should throw");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
return;
catch java.lang.ArrayStoreException from label1 to label2 with label3;
}
public void testToArray_emptyArrayOfWrongTypeForEmptyCollection()
{
com.google.common.collect.testing.WrongType[] v1;
com.google.common.collect.testing.testers.CollectionToArrayTester v0;
java.lang.Object[] v3;
java.util.Collection v2;
v0 := @this: com.google.common.collect.testing.testers.CollectionToArrayTester;
v1 = newarray (com.google.common.collect.testing.WrongType)[0];
v2 = v0.<com.google.common.collect.testing.testers.CollectionToArrayTester: java.util.Collection collection>;
v3 = interfaceinvoke v2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(v1);
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>("toArray(sameSizeNotAssignableTo[]) should return the given array", v1, v3);
return;
}
private void expectArrayContentsAnyOrder(java.lang.Object[], java.lang.Object[])
{
com.google.common.collect.testing.testers.CollectionToArrayTester v0;
java.util.List v3, v4;
java.lang.Object[] v1, v2;
v0 := @this: com.google.common.collect.testing.testers.CollectionToArrayTester;
v1 := @parameter0: java.lang.Object[];
v2 := @parameter1: java.lang.Object[];
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
staticinvoke <com.google.common.collect.testing.Helpers: void assertEqualIgnoringOrder(java.lang.Iterable,java.lang.Iterable)>(v3, v4);
return;
}
private void expectArrayContentsInOrder(java.util.List, java.lang.Object[])
{
com.google.common.collect.testing.testers.CollectionToArrayTester v0;
java.util.List v1, v3;
java.lang.Object[] v2;
v0 := @this: com.google.common.collect.testing.testers.CollectionToArrayTester;
v1 := @parameter0: java.util.List;
v2 := @parameter1: java.lang.Object[];
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionToArrayTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("toArray() ordered contents: ", v1, v3);
return;
}
public static java.lang.reflect.Method getToArrayIsPlainObjectArrayMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/CollectionToArrayTester;", "testToArray_isPlainObjectArray");
return v0;
}
}