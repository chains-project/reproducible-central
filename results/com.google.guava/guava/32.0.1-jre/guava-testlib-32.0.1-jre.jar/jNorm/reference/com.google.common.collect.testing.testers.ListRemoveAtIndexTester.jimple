public class com.google.common.collect.testing.testers.ListRemoveAtIndexTester extends com.google.common.collect.testing.testers.AbstractListTester
{
public void <init>()
{
com.google.common.collect.testing.testers.ListRemoveAtIndexTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListRemoveAtIndexTester;
specialinvoke v0.<com.google.common.collect.testing.testers.AbstractListTester: void <init>()>();
return;
}
public void testRemoveAtIndex_unsupported()
{
java.lang.UnsupportedOperationException v2;
java.util.List v1;
com.google.common.collect.testing.testers.ListRemoveAtIndexTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListRemoveAtIndexTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: java.util.List getList()>();
interfaceinvoke v1.<java.util.List: java.lang.Object remove(int)>(0);
staticinvoke <com.google.common.collect.testing.testers.ListRemoveAtIndexTester: void fail(java.lang.String)>("remove(i) should throw");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testRemoveAtIndex_negative()
{
java.lang.IndexOutOfBoundsException v3;
java.util.List v1;
int v2;
com.google.common.collect.testing.testers.ListRemoveAtIndexTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListRemoveAtIndexTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: java.util.List getList()>();
v2 = (int) -1;
interfaceinvoke v1.<java.util.List: java.lang.Object remove(int)>(v2);
staticinvoke <com.google.common.collect.testing.testers.ListRemoveAtIndexTester: void fail(java.lang.String)>("remove(-1) should throw");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: void expectUnchanged()>();
return;
catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
}
public void testRemoveAtIndex_tooLarge()
{
java.lang.IndexOutOfBoundsException v3;
java.util.List v1;
int v2;
com.google.common.collect.testing.testers.ListRemoveAtIndexTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListRemoveAtIndexTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: int getNumElements()>();
interfaceinvoke v1.<java.util.List: java.lang.Object remove(int)>(v2);
staticinvoke <com.google.common.collect.testing.testers.ListRemoveAtIndexTester: void fail(java.lang.String)>("remove(size) should throw");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: void expectUnchanged()>();
return;
catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
}
public void testRemoveAtIndex_first()
{
com.google.common.collect.testing.testers.ListRemoveAtIndexTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListRemoveAtIndexTester;
specialinvoke v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: void runRemoveTest(int)>(0);
return;
}
public void testRemoveAtIndex_middle()
{
int v1, v2;
com.google.common.collect.testing.testers.ListRemoveAtIndexTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListRemoveAtIndexTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: int getNumElements()>();
v2 = v1 / 2;
specialinvoke v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: void runRemoveTest(int)>(v2);
return;
}
public void testRemoveAtIndexConcurrentWithIteration()
{
java.util.List v3;
java.util.Iterator v2;
java.util.Collection v1;
int v4, v5;
com.google.common.collect.testing.testers.ListRemoveAtIndexTester v0;
java.util.ConcurrentModificationException v6;
v0 := @this: com.google.common.collect.testing.testers.ListRemoveAtIndexTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: java.util.List getList()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: int getNumElements()>();
v5 = v4 / 2;
interfaceinvoke v3.<java.util.List: java.lang.Object remove(int)>(v5);
interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.ListRemoveAtIndexTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testRemoveAtIndex_last()
{
int v1, v2;
com.google.common.collect.testing.testers.ListRemoveAtIndexTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListRemoveAtIndexTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: int getNumElements()>();
v2 = v1 - 1;
specialinvoke v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: void runRemoveTest(int)>(v2);
return;
}
private void runRemoveTest(int)
{
java.lang.Object[] v10, v2;
java.lang.Integer v3, v4;
java.util.List v11, v6, v8;
int v1;
java.lang.Object v7, v9;
java.lang.String v5;
com.google.common.collect.testing.testers.ListRemoveAtIndexTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListRemoveAtIndexTester;
v1 := @parameter0: int;
v2 = newarray (java.lang.Object)[2];
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v2[0] = v3;
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v2[1] = v4;
v5 = staticinvoke <com.google.common.collect.testing.testers.Platform: java.lang.String format(java.lang.String,java.lang.Object[])>("remove(%d) should return the element at index %d", v2);
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: java.util.List getList()>();
v7 = interfaceinvoke v6.<java.util.List: java.lang.Object get(int)>(v1);
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: java.util.List getList()>();
v9 = interfaceinvoke v8.<java.util.List: java.lang.Object remove(int)>(v1);
staticinvoke <com.google.common.collect.testing.testers.ListRemoveAtIndexTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(v5, v7, v9);
v10 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: java.lang.Object[] createSamplesArray()>();
v11 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.List copyToList(java.lang.Object[])>(v10);
interfaceinvoke v11.<java.util.List: java.lang.Object remove(int)>(v1);
virtualinvoke v0.<com.google.common.collect.testing.testers.ListRemoveAtIndexTester: void expectContents(java.util.Collection)>(v11);
return;
}
}