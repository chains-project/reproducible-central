public class com.google.common.collect.testing.testers.MapComputeIfAbsentTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.MapComputeIfAbsentTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfAbsentTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void testComputeIfAbsent_supportedAbsent()
{
java.util.function.Function v4;
com.google.common.collect.testing.testers.MapComputeIfAbsentTester v0;
java.util.Map v2;
java.lang.Object v1, v3, v5, v7;
java.util.Map$Entry[] v6;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfAbsentTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.lang.Object v3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.lang.Object k3()>();
v4 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester$lambda_testComputeIfAbsent_supportedAbsent_0__33: java.util.function.Function bootstrap$(com.google.common.collect.testing.testers.MapComputeIfAbsentTester)>(v0);
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("computeIfAbsent(notPresent, function) should return new value", v1, v5);
v6 = newarray (java.util.Map$Entry)[1];
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.lang.Object e3()>();
v6[0] = v7;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void expectAdded(java.lang.Object[])>(v6);
return;
}
public void testComputeIfAbsent_supportedPresent()
{
com.google.common.collect.testing.testers.MapComputeIfAbsentTester v0;
java.util.Map v2;
java.lang.Object v1, v3, v5;
java.util.function.Function v4;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfAbsentTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.lang.Object v0()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.lang.Object k0()>();
v4 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester$lambda_testComputeIfAbsent_supportedPresent_1__34: java.util.function.Function bootstrap$()>();
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("computeIfAbsent(present, function) should return existing value", v1, v5);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void expectUnchanged()>();
return;
}
public void testComputeIfAbsent_functionReturnsNullNotInserted()
{
com.google.common.collect.testing.testers.MapComputeIfAbsentTester v0;
java.util.Map v1;
java.lang.Object v2, v4;
java.util.function.Function v3;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfAbsentTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.lang.Object k3()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester$lambda_testComputeIfAbsent_functionReturnsNullNotInserted_2__35: java.util.function.Function bootstrap$(com.google.common.collect.testing.testers.MapComputeIfAbsentTester)>(v0);
v4 = interfaceinvoke v1.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void assertNull(java.lang.String,java.lang.Object)>("computeIfAbsent(absent, returnsNull) should return null", v4);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void expectUnchanged()>();
return;
}
public void testComputeIfAbsent_nullTreatedAsAbsent()
{
java.util.Map$Entry v8;
java.util.function.Function v4;
com.google.common.collect.testing.testers.MapComputeIfAbsentTester v0;
java.util.Map v2;
java.lang.Object v1, v3, v5, v6, v7;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfAbsentTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void initMapWithNullValue()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.lang.Object getValueForNullKey()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.lang.Object getKeyForNullValue()>();
v4 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester$lambda_testComputeIfAbsent_nullTreatedAsAbsent_3__36: java.util.function.Function bootstrap$(com.google.common.collect.testing.testers.MapComputeIfAbsentTester)>(v0);
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("computeIfAbsent(presentAssignedToNull, function) should return newValue", v1, v5);
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.lang.Object getKeyForNullValue()>();
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.lang.Object getValueForNullKey()>();
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v6, v7);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void expectReplacement(java.util.Map$Entry)>(v8);
return;
}
public void testComputeIfAbsent_nullKeySupported()
{
java.util.Map$Entry v5;
com.google.common.collect.testing.testers.MapComputeIfAbsentTester v0;
java.util.Map v1;
java.lang.Object v4;
java.util.Map$Entry[] v3;
java.util.function.Function v2;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfAbsentTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.util.Map getMap()>();
v2 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester$lambda_testComputeIfAbsent_nullKeySupported_4__37: java.util.function.Function bootstrap$(com.google.common.collect.testing.testers.MapComputeIfAbsentTester)>(v0);
interfaceinvoke v1.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(null, v2);
v3 = newarray (java.util.Map$Entry)[1];
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.lang.Object v3()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(null, v4);
v3[0] = v5;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void expectAdded(java.lang.Object[])>(v3);
return;
}
public void testComputeIfAbsent_functionThrows()
{
com.google.common.collect.testing.testers.MapComputeIfAbsentTester v0;
com.google.common.collect.testing.testers.MapComputeIfAbsentTester$ExpectedException v4;
java.util.Map v1;
java.lang.Object v2;
java.util.function.Function v3;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfAbsentTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.lang.Object k3()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester$lambda_testComputeIfAbsent_functionThrows_5__38: java.util.function.Function bootstrap$(com.google.common.collect.testing.testers.MapComputeIfAbsentTester)>(v0);
interfaceinvoke v1.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void fail(java.lang.String)>("Expected ExpectedException");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void expectUnchanged()>();
return;
catch com.google.common.collect.testing.testers.MapComputeIfAbsentTester$ExpectedException from label1 to label2 with label3;
}
public void testComputeIfAbsent_unsupportedAbsent()
{
java.lang.UnsupportedOperationException v4;
com.google.common.collect.testing.testers.MapComputeIfAbsentTester v0;
java.util.Map v1;
java.lang.Object v2;
java.util.function.Function v3;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfAbsentTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.lang.Object k3()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester$lambda_testComputeIfAbsent_unsupportedAbsent_6__39: java.util.function.Function bootstrap$(com.google.common.collect.testing.testers.MapComputeIfAbsentTester)>(v0);
interfaceinvoke v1.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void fail(java.lang.String)>("computeIfAbsent(notPresent, function) should throw");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testComputeIfAbsent_unsupportedPresentExistingValue()
{
java.lang.UnsupportedOperationException v6;
com.google.common.collect.testing.testers.MapComputeIfAbsentTester v0;
java.util.Map v2;
java.lang.Object v1, v3, v5;
java.util.function.Function v4;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfAbsentTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.lang.Object v0()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.lang.Object k0()>();
v4 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester$lambda_testComputeIfAbsent_unsupportedPresentExistingValue_7__40: java.util.function.Function bootstrap$(com.google.common.collect.testing.testers.MapComputeIfAbsentTester)>(v0);
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("computeIfAbsent(present, returnsCurrentValue) should return present or throw", v1, v5);
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testComputeIfAbsent_unsupportedPresentDifferentValue()
{
java.lang.UnsupportedOperationException v6;
com.google.common.collect.testing.testers.MapComputeIfAbsentTester v0;
java.util.Map v2;
java.lang.Object v1, v3, v5;
java.util.function.Function v4;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfAbsentTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.lang.Object v0()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.lang.Object k0()>();
v4 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester$lambda_testComputeIfAbsent_unsupportedPresentDifferentValue_8__41: java.util.function.Function bootstrap$(com.google.common.collect.testing.testers.MapComputeIfAbsentTester)>(v0);
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("computeIfAbsent(present, returnsDifferentValue) should return present or throw", v1, v5);
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testComputeIfAbsent_nullKeyUnsupported()
{
com.google.common.collect.testing.testers.MapComputeIfAbsentTester v0;
java.util.Map v1;
java.util.function.Function v2;
java.lang.NullPointerException v3;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfAbsentTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: java.util.Map getMap()>();
v2 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester$lambda_testComputeIfAbsent_nullKeyUnsupported_9__42: java.util.function.Function bootstrap$(com.google.common.collect.testing.testers.MapComputeIfAbsentTester)>(v0);
interfaceinvoke v1.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(null, v2);
staticinvoke <com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void fail(java.lang.String)>("computeIfAbsent(null, function) should throw");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void expectUnchanged()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfAbsentTester: void expectNullKeyMissingWhenNullKeysUnsupported(java.lang.String)>("Should not contain null key after unsupported computeIfAbsent(null, function)");
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
}