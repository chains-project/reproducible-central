public class com.google.common.collect.testing.testers.MapGetOrDefaultTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.MapGetOrDefaultTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapGetOrDefaultTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void testGetOrDefault_present()
{
com.google.common.collect.testing.testers.MapGetOrDefaultTester v0;
java.util.Map v2;
java.lang.Object v1, v3, v4, v5;
v0 := @this: com.google.common.collect.testing.testers.MapGetOrDefaultTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object v0()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object k0()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object v3()>();
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapGetOrDefaultTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("getOrDefault(present, def) should return the associated value", v1, v5);
return;
}
public void testGetOrDefault_presentNullDefault()
{
com.google.common.collect.testing.testers.MapGetOrDefaultTester v0;
java.util.Map v2;
java.lang.Object v1, v3, v4;
v0 := @this: com.google.common.collect.testing.testers.MapGetOrDefaultTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object v0()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object k0()>();
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(v3, null);
staticinvoke <com.google.common.collect.testing.testers.MapGetOrDefaultTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("getOrDefault(present, null) should return the associated value", v1, v4);
return;
}
public void testGetOrDefault_absent()
{
com.google.common.collect.testing.testers.MapGetOrDefaultTester v0;
java.util.Map v2;
java.lang.Object v1, v3, v4, v5;
v0 := @this: com.google.common.collect.testing.testers.MapGetOrDefaultTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object v3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object k3()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object v3()>();
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapGetOrDefaultTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("getOrDefault(absent, def) should return the default value", v1, v5);
return;
}
public void testGetOrDefault_absentNullDefault()
{
com.google.common.collect.testing.testers.MapGetOrDefaultTester v0;
java.util.Map v1;
java.lang.Object v2, v3;
v0 := @this: com.google.common.collect.testing.testers.MapGetOrDefaultTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object k3()>();
v3 = interfaceinvoke v1.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(v2, null);
staticinvoke <com.google.common.collect.testing.testers.MapGetOrDefaultTester: void assertNull(java.lang.String,java.lang.Object)>("getOrDefault(absent, null) should return null", v3);
return;
}
public void testGetOrDefault_absentNull()
{
com.google.common.collect.testing.testers.MapGetOrDefaultTester v0;
java.util.Map v2;
java.lang.Object v1, v3, v4;
v0 := @this: com.google.common.collect.testing.testers.MapGetOrDefaultTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object v3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object v3()>();
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(null, v3);
staticinvoke <com.google.common.collect.testing.testers.MapGetOrDefaultTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("getOrDefault(null, def) should return the default value", v1, v4);
return;
}
public void testGetOrDefault_nullAbsentAndUnsupported()
{
com.google.common.collect.testing.testers.MapGetOrDefaultTester v0;
java.util.Map v2;
java.lang.Object v1, v3, v4;
java.lang.NullPointerException v5;
v0 := @this: com.google.common.collect.testing.testers.MapGetOrDefaultTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object v3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object v3()>();
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(null, v3);
staticinvoke <com.google.common.collect.testing.testers.MapGetOrDefaultTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("getOrDefault(null, def) should return default or throw", v1, v4);
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testGetOrDefault_nonNullWhenNullContained()
{
com.google.common.collect.testing.testers.MapGetOrDefaultTester v0;
java.util.Map v2;
java.lang.Object v1, v3, v4, v5;
v0 := @this: com.google.common.collect.testing.testers.MapGetOrDefaultTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: void initMapWithNullKey()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object v3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object k3()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object v3()>();
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapGetOrDefaultTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("getOrDefault(absent, default) should return default", v1, v5);
return;
}
public void testGetOrDefault_presentNull()
{
com.google.common.collect.testing.testers.MapGetOrDefaultTester v0;
java.util.Map v2;
java.lang.Object v1, v3, v4;
v0 := @this: com.google.common.collect.testing.testers.MapGetOrDefaultTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: void initMapWithNullKey()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object getValueForNullKey()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object v3()>();
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(null, v3);
staticinvoke <com.google.common.collect.testing.testers.MapGetOrDefaultTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("getOrDefault(null, default) should return the associated value", v1, v4);
return;
}
public void testGetOrDefault_presentMappedToNull()
{
com.google.common.collect.testing.testers.MapGetOrDefaultTester v0;
java.util.Map v1;
java.lang.Object v2, v3, v4;
v0 := @this: com.google.common.collect.testing.testers.MapGetOrDefaultTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: void initMapWithNullValue()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object getKeyForNullValue()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object v3()>();
v4 = interfaceinvoke v1.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapGetOrDefaultTester: void assertNull(java.lang.String,java.lang.Object)>("getOrDefault(mappedToNull, default) should return null", v4);
return;
}
public void testGet_wrongType()
{
com.google.common.collect.testing.testers.MapGetOrDefaultTester v0;
com.google.common.collect.testing.WrongType v3;
java.util.Map v2;
java.lang.Object v1, v4, v5;
java.lang.ClassCastException v6;
v0 := @this: com.google.common.collect.testing.testers.MapGetOrDefaultTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object v3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.util.Map getMap()>();
v3 = <com.google.common.collect.testing.WrongType: com.google.common.collect.testing.WrongType VALUE>;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetOrDefaultTester: java.lang.Object v3()>();
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapGetOrDefaultTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("getOrDefault(wrongType, default) should return default or throw", v1, v5);
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
return;
catch java.lang.ClassCastException from label1 to label2 with label3;
}
}