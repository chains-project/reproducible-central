public final class com.google.common.testing.ClassSanityTester extends java.lang.Object
{
private static final com.google.common.collect.Ordering BY_METHOD_NAME;
private static final com.google.common.collect.Ordering BY_PARAMETERS;
private static final com.google.common.collect.Ordering BY_NUMBER_OF_PARAMETERS;
private final com.google.common.collect.MutableClassToInstanceMap defaultValues;
private final com.google.common.collect.ListMultimap distinctValues;
private final com.google.common.testing.NullPointerTester nullPointerTester;
public void <init>()
{
com.google.common.collect.ArrayListMultimap v2;
java.lang.Float v17, v18;
java.lang.Double v20, v21;
java.lang.Integer v11, v12;
java.lang.Long v14, v15;
java.lang.Short v8, v9;
java.lang.Byte v5, v6;
com.google.common.testing.ClassSanityTester v0;
com.google.common.testing.NullPointerTester v3;
com.google.common.collect.MutableClassToInstanceMap v1;
java.lang.Class v10, v13, v16, v19, v4, v7;
v0 := @this: com.google.common.testing.ClassSanityTester;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = staticinvoke <com.google.common.collect.MutableClassToInstanceMap: com.google.common.collect.MutableClassToInstanceMap create()>();
v0.<com.google.common.testing.ClassSanityTester: com.google.common.collect.MutableClassToInstanceMap defaultValues> = v1;
v2 = staticinvoke <com.google.common.collect.ArrayListMultimap: com.google.common.collect.ArrayListMultimap create()>();
v0.<com.google.common.testing.ClassSanityTester: com.google.common.collect.ListMultimap distinctValues> = v2;
v3 = new com.google.common.testing.NullPointerTester;
specialinvoke v3.<com.google.common.testing.NullPointerTester: void <init>()>();
v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.NullPointerTester nullPointerTester> = v3;
v4 = <java.lang.Byte: java.lang.Class TYPE>;
v5 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(1);
virtualinvoke v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDefault(java.lang.Class,java.lang.Object)>(v4, v5);
v6 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(1);
virtualinvoke v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDefault(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Byte;", v6);
v7 = <java.lang.Short: java.lang.Class TYPE>;
v8 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(1);
virtualinvoke v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDefault(java.lang.Class,java.lang.Object)>(v7, v8);
v9 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(1);
virtualinvoke v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDefault(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Short;", v9);
v10 = <java.lang.Integer: java.lang.Class TYPE>;
v11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
virtualinvoke v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDefault(java.lang.Class,java.lang.Object)>(v10, v11);
v12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
virtualinvoke v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDefault(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Integer;", v12);
v13 = <java.lang.Long: java.lang.Class TYPE>;
v14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);
virtualinvoke v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDefault(java.lang.Class,java.lang.Object)>(v13, v14);
v15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);
virtualinvoke v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDefault(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Long;", v15);
v16 = <java.lang.Float: java.lang.Class TYPE>;
v17 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.0F);
virtualinvoke v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDefault(java.lang.Class,java.lang.Object)>(v16, v17);
v18 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.0F);
virtualinvoke v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDefault(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Float;", v18);
v19 = <java.lang.Double: java.lang.Class TYPE>;
v20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);
virtualinvoke v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDefault(java.lang.Class,java.lang.Object)>(v19, v20);
v21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);
virtualinvoke v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDefault(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Double;", v21);
virtualinvoke v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDefault(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Class;", class "Ljava/lang/Class;");
return;
}
public com.google.common.testing.ClassSanityTester setDefault(java.lang.Class, java.lang.Object)
{
com.google.common.collect.MutableClassToInstanceMap v4;
com.google.common.testing.NullPointerTester v3;
java.lang.Class v1;
java.lang.Object v2;
com.google.common.testing.ClassSanityTester v0;
v0 := @this: com.google.common.testing.ClassSanityTester;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.Object;
v3 = v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.NullPointerTester nullPointerTester>;
virtualinvoke v3.<com.google.common.testing.NullPointerTester: com.google.common.testing.NullPointerTester setDefault(java.lang.Class,java.lang.Object)>(v1, v2);
v4 = v0.<com.google.common.testing.ClassSanityTester: com.google.common.collect.MutableClassToInstanceMap defaultValues>;
virtualinvoke v4.<com.google.common.collect.MutableClassToInstanceMap: java.lang.Object putInstance(java.lang.Class,java.lang.Object)>(v1, v2);
return v0;
}
public com.google.common.testing.ClassSanityTester setDistinctValues(java.lang.Class, java.lang.Object, java.lang.Object)
{
com.google.common.collect.ListMultimap v6;
com.google.common.collect.ImmutableList v7;
java.lang.Class v1;
java.lang.Object v2, v3;
com.google.common.testing.ClassSanityTester v0;
boolean v4, v5;
v0 := @this: com.google.common.testing.ClassSanityTester;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v1);
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v2);
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v3);
v4 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>(v2, v3);
if v4 != 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>(v5, "Duplicate value provided.");
v6 = v0.<com.google.common.testing.ClassSanityTester: com.google.common.collect.ListMultimap distinctValues>;
v7 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(v2, v3);
interfaceinvoke v6.<com.google.common.collect.ListMultimap: java.util.List replaceValues(java.lang.Object,java.lang.Iterable)>(v1, v7);
virtualinvoke v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDefault(java.lang.Class,java.lang.Object)>(v1, v2);
return v0;
}
public void testNulls(java.lang.Class)
{
java.lang.Class v1;
java.lang.RuntimeException v4;
com.google.common.testing.ClassSanityTester v0;
com.google.common.testing.NullPointerTester$Visibility v2;
java.lang.Exception v3;
v0 := @this: com.google.common.testing.ClassSanityTester;
v1 := @parameter0: java.lang.Class;
label1:
v2 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PACKAGE>;
virtualinvoke v0.<com.google.common.testing.ClassSanityTester: void doTestNulls(java.lang.Class,com.google.common.testing.NullPointerTester$Visibility)>(v1, v2);
label2:
goto label4;
label3:
v3 := @caughtexception;
staticinvoke <com.google.common.base.Throwables: void throwIfUnchecked(java.lang.Throwable)>(v3);
v4 = new java.lang.RuntimeException;
specialinvoke v4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v3);
throw v4;
label4:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
void doTestNulls(java.lang.Class, com.google.common.testing.NullPointerTester$Visibility) throws com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException
{
com.google.common.testing.NullPointerTester v5, v6, v9;
com.google.common.testing.NullPointerTester$Visibility v2;
int v3;
java.lang.Class v1;
java.lang.Object v8;
com.google.common.testing.ClassSanityTester v0;
boolean v4, v7;
v0 := @this: com.google.common.testing.ClassSanityTester;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: com.google.common.testing.NullPointerTester$Visibility;
v3 = virtualinvoke v1.<java.lang.Class: int getModifiers()>();
v4 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>(v3);
if v4 != 0 goto label1;
v5 = v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.NullPointerTester nullPointerTester>;
virtualinvoke v5.<com.google.common.testing.NullPointerTester: void testConstructors(java.lang.Class,com.google.common.testing.NullPointerTester$Visibility)>(v1, v2);
label1:
v6 = v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.NullPointerTester nullPointerTester>;
virtualinvoke v6.<com.google.common.testing.NullPointerTester: void testStaticMethods(java.lang.Class,com.google.common.testing.NullPointerTester$Visibility)>(v1, v2);
v7 = specialinvoke v0.<com.google.common.testing.ClassSanityTester: boolean hasInstanceMethodToTestNulls(java.lang.Class,com.google.common.testing.NullPointerTester$Visibility)>(v1, v2);
if v7 == 0 goto label2;
v8 = virtualinvoke v0.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(v1);
if v8 == null goto label2;
v9 = v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.NullPointerTester nullPointerTester>;
virtualinvoke v9.<com.google.common.testing.NullPointerTester: void testInstanceMethods(java.lang.Object,com.google.common.testing.NullPointerTester$Visibility)>(v8, v2);
label2:
return;
}
private boolean hasInstanceMethodToTestNulls(java.lang.Class, com.google.common.testing.NullPointerTester$Visibility)
{
com.google.common.testing.NullPointerTester v3;
com.google.common.testing.NullPointerTester$Visibility v2;
com.google.common.collect.ImmutableList v4, v9;
com.google.common.reflect.Invokable v8;
java.lang.Class v1;
java.lang.Object v12, v7;
com.google.common.collect.UnmodifiableIterator v10, v5;
com.google.common.testing.ClassSanityTester v0;
boolean v11, v13, v6;
v0 := @this: com.google.common.testing.ClassSanityTester;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: com.google.common.testing.NullPointerTester$Visibility;
v3 = v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.NullPointerTester nullPointerTester>;
v4 = virtualinvoke v3.<com.google.common.testing.NullPointerTester: com.google.common.collect.ImmutableList getInstanceMethodsToTest(java.lang.Class,com.google.common.testing.NullPointerTester$Visibility)>(v1, v2);
v5 = virtualinvoke v4.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label3;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = staticinvoke <com.google.common.reflect.Invokable: com.google.common.reflect.Invokable 'from'(java.lang.reflect.Method)>(v7);
v9 = virtualinvoke v8.<com.google.common.reflect.Invokable: com.google.common.collect.ImmutableList getParameters()>();
v10 = virtualinvoke v9.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();
label2:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label1;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
v13 = staticinvoke <com.google.common.testing.NullPointerTester: boolean isPrimitiveOrNullable(com.google.common.reflect.Parameter)>(v12);
if v13 != 0 goto label2;
return 1;
label3:
return 0;
}
public void testEquals(java.lang.Class)
{
java.lang.Class v1;
java.lang.RuntimeException v3;
com.google.common.testing.ClassSanityTester v0;
java.lang.Exception v2;
v0 := @this: com.google.common.testing.ClassSanityTester;
v1 := @parameter0: java.lang.Class;
label1:
virtualinvoke v0.<com.google.common.testing.ClassSanityTester: void doTestEquals(java.lang.Class)>(v1);
label2:
goto label4;
label3:
v2 := @caughtexception;
staticinvoke <com.google.common.base.Throwables: void throwIfUnchecked(java.lang.Throwable)>(v2);
v3 = new java.lang.RuntimeException;
specialinvoke v3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v2);
throw v3;
label4:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
void doTestEquals(java.lang.Class) throws com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException, com.google.common.testing.ClassSanityTester$ParameterHasNoDistinctValueException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException
{
com.google.common.reflect.TypeToken v3;
java.util.ArrayList v10, v11, v12, v13;
com.google.common.collect.ImmutableList v17, v4, v8;
int v18, v9;
com.google.common.testing.ClassSanityTester$ParameterHasNoDistinctValueException v20;
com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException v19;
com.google.common.testing.ClassSanityTester v0;
boolean v15, v2, v6;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException v22;
java.util.Iterator v14;
java.lang.reflect.InvocationTargetException v21;
java.util.List v5;
java.lang.Class v1;
java.lang.Object v16, v7;
v0 := @this: com.google.common.testing.ClassSanityTester;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v1.<java.lang.Class: boolean isEnum()>();
if v2 == 0 goto label01;
return;
label01:
v3 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.Class)>(v1);
v4 = staticinvoke <com.google.common.testing.ClassSanityTester: com.google.common.collect.ImmutableList getFactories(com.google.common.reflect.TypeToken)>(v3);
v5 = staticinvoke <com.google.common.collect.Lists: java.util.List reverse(java.util.List)>(v4);
v6 = interfaceinvoke v5.<java.util.List: boolean isEmpty()>();
if v6 == 0 goto label02;
return;
label02:
v7 = interfaceinvoke v5.<java.util.List: java.lang.Object get(int)>(0);
v8 = virtualinvoke v7.<com.google.common.reflect.Invokable: com.google.common.collect.ImmutableList getParameters()>();
v9 = virtualinvoke v8.<com.google.common.collect.ImmutableList: int size()>();
v10 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();
v11 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();
v12 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();
v13 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();
v14 = interfaceinvoke v5.<java.util.List: java.util.Iterator iterator()>();
label03:
v15 = interfaceinvoke v14.<java.util.Iterator: boolean hasNext()>();
if v15 == 0 goto label10;
v16 = interfaceinvoke v14.<java.util.Iterator: java.lang.Object next()>();
v17 = virtualinvoke v16.<com.google.common.reflect.Invokable: com.google.common.collect.ImmutableList getParameters()>();
v18 = virtualinvoke v17.<com.google.common.collect.ImmutableList: int size()>();
if v18 != v9 goto label03;
label04:
specialinvoke v0.<com.google.common.testing.ClassSanityTester: void testEqualsUsing(com.google.common.reflect.Invokable)>(v16);
label05:
return;
label06:
v19 := @caughtexception;
interfaceinvoke v10.<java.util.List: boolean add(java.lang.Object)>(v19);
goto label03;
label07:
v20 := @caughtexception;
interfaceinvoke v11.<java.util.List: boolean add(java.lang.Object)>(v20);
goto label03;
label08:
v21 := @caughtexception;
interfaceinvoke v12.<java.util.List: boolean add(java.lang.Object)>(v21);
goto label03;
label09:
v22 := @caughtexception;
interfaceinvoke v13.<java.util.List: boolean add(java.lang.Object)>(v22);
goto label03;
label10:
staticinvoke <com.google.common.testing.ClassSanityTester: void throwFirst(java.util.List)>(v10);
staticinvoke <com.google.common.testing.ClassSanityTester: void throwFirst(java.util.List)>(v11);
staticinvoke <com.google.common.testing.ClassSanityTester: void throwFirst(java.util.List)>(v12);
staticinvoke <com.google.common.testing.ClassSanityTester: void throwFirst(java.util.List)>(v13);
return;
catch com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException from label04 to label05 with label06;
catch com.google.common.testing.ClassSanityTester$ParameterHasNoDistinctValueException from label04 to label05 with label07;
catch java.lang.reflect.InvocationTargetException from label04 to label05 with label08;
catch com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException from label04 to label05 with label09;
}
java.lang.Object instantiate(java.lang.Class) throws com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException
{
java.lang.Object[] v3;
com.google.common.reflect.TypeToken v6;
java.util.ArrayList v7, v8, v9;
com.google.common.collect.ImmutableList v10;
int v4;
com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException v15;
com.google.common.testing.ClassSanityTester v0;
boolean v12, v2;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException v17;
java.lang.reflect.InvocationTargetException v16;
java.lang.Class v1;
java.lang.Object v13, v14, v5;
com.google.common.collect.UnmodifiableIterator v11;
v0 := @this: com.google.common.testing.ClassSanityTester;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v1.<java.lang.Class: boolean isEnum()>();
if v2 == 0 goto label02;
v3 = virtualinvoke v1.<java.lang.Class: java.lang.Object[] getEnumConstants()>();
if v3 == null goto label01;
v4 = lengthof v3;
if v4 <= 0 goto label01;
v5 = v3[0];
return v5;
label01:
return null;
label02:
v6 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.Class)>(v1);
v7 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();
v8 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();
v9 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();
v10 = staticinvoke <com.google.common.testing.ClassSanityTester: com.google.common.collect.ImmutableList getFactories(com.google.common.reflect.TypeToken)>(v6);
v11 = virtualinvoke v10.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();
label03:
v12 = interfaceinvoke v11.<java.util.Iterator: boolean hasNext()>();
if v12 == 0 goto label10;
v13 = interfaceinvoke v11.<java.util.Iterator: java.lang.Object next()>();
label04:
v14 = specialinvoke v0.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(com.google.common.reflect.Invokable)>(v13);
label05:
goto label08;
label06:
v15 := @caughtexception;
interfaceinvoke v7.<java.util.List: boolean add(java.lang.Object)>(v15);
goto label03;
label07:
v16 := @caughtexception;
interfaceinvoke v8.<java.util.List: boolean add(java.lang.Object)>(v16);
goto label03;
label08:
if v14 != null goto label09;
v17 = new com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException;
specialinvoke v17.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException: void <init>(com.google.common.reflect.Invokable)>(v13);
interfaceinvoke v9.<java.util.List: boolean add(java.lang.Object)>(v17);
goto label03;
label09:
return v14;
label10:
staticinvoke <com.google.common.testing.ClassSanityTester: void throwFirst(java.util.List)>(v7);
staticinvoke <com.google.common.testing.ClassSanityTester: void throwFirst(java.util.List)>(v8);
staticinvoke <com.google.common.testing.ClassSanityTester: void throwFirst(java.util.List)>(v9);
return null;
catch com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException from label04 to label05 with label06;
catch java.lang.reflect.InvocationTargetException from label04 to label05 with label07;
}
private java.lang.Object instantiate(com.google.common.reflect.Invokable) throws com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException, java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException
{
java.util.List v2;
com.google.common.reflect.Invokable v1;
java.lang.Object v3;
com.google.common.testing.ClassSanityTester v0;
v0 := @this: com.google.common.testing.ClassSanityTester;
v1 := @parameter0: com.google.common.reflect.Invokable;
v2 = specialinvoke v0.<com.google.common.testing.ClassSanityTester: java.util.List getDummyArguments(com.google.common.reflect.Invokable)>(v1);
v3 = staticinvoke <com.google.common.testing.ClassSanityTester: java.lang.Object invoke(com.google.common.reflect.Invokable,java.util.List)>(v1, v2);
return v3;
}
public com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)
{
java.lang.reflect.Method[] v3;
com.google.common.collect.ImmutableList v12;
com.google.common.reflect.Invokable v7;
int v4, v5;
java.lang.Class v1;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v11;
com.google.common.testing.ClassSanityTester v0;
java.lang.reflect.Method v6;
boolean v10, v8, v9;
com.google.common.collect.ImmutableList$Builder v2;
v0 := @this: com.google.common.testing.ClassSanityTester;
v1 := @parameter0: java.lang.Class;
v2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();
v3 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label3;
v6 = v3[v5];
v7 = staticinvoke <com.google.common.reflect.Invokable: com.google.common.reflect.Invokable 'from'(java.lang.reflect.Method)>(v6);
virtualinvoke v7.<com.google.common.reflect.Invokable: void setAccessible(boolean)>(1);
v8 = virtualinvoke v7.<com.google.common.reflect.Invokable: boolean isPublic()>();
if v8 == 0 goto label2;
v9 = virtualinvoke v7.<com.google.common.reflect.Invokable: boolean isStatic()>();
if v9 == 0 goto label2;
v10 = virtualinvoke v7.<com.google.common.reflect.Invokable: boolean isSynthetic()>();
if v10 != 0 goto label2;
virtualinvoke v2.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>(v7);
label2:
v5 = v5 + 1;
goto label1;
label3:
v11 = new com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester;
v12 = virtualinvoke v2.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();
specialinvoke v11.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: void <init>(com.google.common.testing.ClassSanityTester,java.lang.Class,com.google.common.collect.ImmutableList,java.lang.String)>(v0, v1, v12, "public static methods");
return v11;
}
private void testEqualsUsing(com.google.common.reflect.Invokable) throws com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException, com.google.common.testing.ClassSanityTester$ParameterHasNoDistinctValueException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException
{
com.google.common.testing.ClassSanityTester$ParameterHasNoDistinctValueException v33;
boolean v28, v32, v8;
java.util.List v13;
com.google.common.reflect.Invokable v1;
com.google.common.testing.FreshValueGenerator v10;
java.lang.Object[] v18, v35;
com.google.common.testing.ClassSanityTester$4 v17;
com.google.common.reflect.TypeToken v25, v30;
java.util.ArrayList v14, v22, v4, v6;
com.google.common.collect.ImmutableList v15, v2, v37;
int v20, v21, v3, v5;
com.google.common.testing.ClassSanityTester v0;
java.util.Iterator v7;
com.google.common.testing.EqualsTester v16;
java.lang.Class v31;
java.lang.Object v11, v12, v19, v23, v24, v26, v27, v29, v34, v36, v9;
v0 := @this: com.google.common.testing.ClassSanityTester;
v1 := @parameter0: com.google.common.reflect.Invokable;
v2 = virtualinvoke v1.<com.google.common.reflect.Invokable: com.google.common.collect.ImmutableList getParameters()>();
v3 = interfaceinvoke v2.<java.util.List: int size()>();
v4 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>(v3);
v5 = interfaceinvoke v2.<java.util.List: int size()>();
v6 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>(v5);
v7 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label2;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = specialinvoke v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.FreshValueGenerator newFreshValueGenerator()>();
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v10);
v11 = staticinvoke <com.google.common.testing.ClassSanityTester: java.lang.Object generateDummyArg(com.google.common.reflect.Parameter,com.google.common.testing.FreshValueGenerator)>(v9, v10);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v11);
goto label1;
label2:
v12 = staticinvoke <com.google.common.testing.ClassSanityTester: java.lang.Object createInstance(com.google.common.reflect.Invokable,java.util.List)>(v1, v6);
v13 = specialinvoke v0.<com.google.common.testing.ClassSanityTester: java.util.List generateEqualFactoryArguments(com.google.common.reflect.Invokable,java.util.List,java.util.List)>(v1, v2, v6);
v14 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();
v15 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(v6, v13);
interfaceinvoke v14.<java.util.List: boolean add(java.lang.Object)>(v15);
v16 = new com.google.common.testing.EqualsTester;
v17 = new com.google.common.testing.ClassSanityTester$4;
specialinvoke v17.<com.google.common.testing.ClassSanityTester$4: void <init>(com.google.common.testing.ClassSanityTester,java.util.List,com.google.common.reflect.Invokable)>(v0, v14, v1);
specialinvoke v16.<com.google.common.testing.EqualsTester: void <init>(com.google.common.testing.RelationshipTester$ItemReporter)>(v17);
v18 = newarray (java.lang.Object)[2];
v18[0] = v12;
v19 = staticinvoke <com.google.common.testing.ClassSanityTester: java.lang.Object createInstance(com.google.common.reflect.Invokable,java.util.List)>(v1, v13);
v18[1] = v19;
virtualinvoke v16.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v18);
v20 = 0;
label3:
v21 = interfaceinvoke v2.<java.util.List: int size()>();
if v20 >= v21 goto label7;
v22 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(v6);
v23 = interfaceinvoke v4.<java.util.List: java.lang.Object get(int)>(v20);
v24 = interfaceinvoke v2.<java.util.List: java.lang.Object get(int)>(v20);
v25 = virtualinvoke v24.<com.google.common.reflect.Parameter: com.google.common.reflect.TypeToken getType()>();
v26 = virtualinvoke v23.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(com.google.common.reflect.TypeToken)>(v25);
if v26 == null goto label4;
v27 = interfaceinvoke v6.<java.util.List: java.lang.Object get(int)>(v20);
v28 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>(v27, v26);
if v28 == 0 goto label5;
label4:
v29 = interfaceinvoke v2.<java.util.List: java.lang.Object get(int)>(v20);
v30 = virtualinvoke v29.<com.google.common.reflect.Parameter: com.google.common.reflect.TypeToken getType()>();
v31 = virtualinvoke v30.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();
v32 = virtualinvoke v31.<java.lang.Class: boolean isEnum()>();
if v32 != 0 goto label6;
v33 = new com.google.common.testing.ClassSanityTester$ParameterHasNoDistinctValueException;
v34 = interfaceinvoke v2.<java.util.List: java.lang.Object get(int)>(v20);
specialinvoke v33.<com.google.common.testing.ClassSanityTester$ParameterHasNoDistinctValueException: void <init>(com.google.common.reflect.Parameter)>(v34);
throw v33;
label5:
interfaceinvoke v22.<java.util.List: java.lang.Object set(int,java.lang.Object)>(v20, v26);
v35 = newarray (java.lang.Object)[1];
v36 = staticinvoke <com.google.common.testing.ClassSanityTester: java.lang.Object createInstance(com.google.common.reflect.Invokable,java.util.List)>(v1, v22);
v35[0] = v36;
virtualinvoke v16.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v35);
v37 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>(v22);
interfaceinvoke v14.<java.util.List: boolean add(java.lang.Object)>(v37);
label6:
v20 = v20 + 1;
goto label3;
label7:
virtualinvoke v16.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester testEquals()>();
return;
}
private java.util.List generateEqualFactoryArguments(com.google.common.reflect.Invokable, java.util.List, java.util.List) throws com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException, com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException, java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException
{
java.util.ArrayList v4;
int v5, v6;
com.google.common.testing.ClassSanityTester v0;
boolean v11, v12, v15;
java.util.List v2, v3;
com.google.common.reflect.Invokable v1;
java.lang.Object v10, v14, v7, v8;
com.google.common.testing.FreshValueGenerator v13, v9;
v0 := @this: com.google.common.testing.ClassSanityTester;
v1 := @parameter0: com.google.common.reflect.Invokable;
v2 := @parameter1: java.util.List;
v3 := @parameter2: java.util.List;
v4 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(v3);
v5 = 0;
label1:
v6 = interfaceinvoke v3.<java.util.List: int size()>();
if v5 >= v6 goto label3;
v7 = interfaceinvoke v2.<java.util.List: java.lang.Object get(int)>(v5);
v8 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(v5);
v9 = specialinvoke v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.FreshValueGenerator newFreshValueGenerator()>();
v10 = staticinvoke <com.google.common.testing.ClassSanityTester: java.lang.Object generateDummyArg(com.google.common.reflect.Parameter,com.google.common.testing.FreshValueGenerator)>(v7, v9);
if v8 == v10 goto label2;
v11 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>(v8, v10);
if v11 == 0 goto label2;
v12 = staticinvoke <com.google.common.testing.ClassSanityTester: boolean hashCodeInsensitiveToArgReference(com.google.common.reflect.Invokable,java.util.List,int,java.lang.Object)>(v1, v3, v5, v10);
if v12 == 0 goto label2;
v13 = specialinvoke v0.<com.google.common.testing.ClassSanityTester: com.google.common.testing.FreshValueGenerator newFreshValueGenerator()>();
v14 = staticinvoke <com.google.common.testing.ClassSanityTester: java.lang.Object generateDummyArg(com.google.common.reflect.Parameter,com.google.common.testing.FreshValueGenerator)>(v7, v13);
v15 = staticinvoke <com.google.common.testing.ClassSanityTester: boolean hashCodeInsensitiveToArgReference(com.google.common.reflect.Invokable,java.util.List,int,java.lang.Object)>(v1, v3, v5, v14);
if v15 == 0 goto label2;
interfaceinvoke v4.<java.util.List: java.lang.Object set(int,java.lang.Object)>(v5, v10);
label2:
v5 = v5 + 1;
goto label1;
label3:
return v4;
}
private static boolean hashCodeInsensitiveToArgReference(com.google.common.reflect.Invokable, java.util.List, int, java.lang.Object) throws com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException, java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException
{
java.util.ArrayList v4;
java.util.List v1;
com.google.common.reflect.Invokable v0;
int v2, v6, v8;
java.lang.Object v3, v5, v7;
boolean v9;
v0 := @parameter0: com.google.common.reflect.Invokable;
v1 := @parameter1: java.util.List;
v2 := @parameter2: int;
v3 := @parameter3: java.lang.Object;
v4 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(v1);
interfaceinvoke v4.<java.util.List: java.lang.Object set(int,java.lang.Object)>(v2, v3);
v5 = staticinvoke <com.google.common.testing.ClassSanityTester: java.lang.Object createInstance(com.google.common.reflect.Invokable,java.util.List)>(v0, v4);
v6 = virtualinvoke v5.<java.lang.Object: int hashCode()>();
v7 = staticinvoke <com.google.common.testing.ClassSanityTester: java.lang.Object createInstance(com.google.common.reflect.Invokable,java.util.List)>(v0, v1);
v8 = virtualinvoke v7.<java.lang.Object: int hashCode()>();
if v6 != v8 goto label1;
v9 = 1;
goto label2;
label1:
v9 = 0;
label2:
return v9;
}
private com.google.common.testing.FreshValueGenerator newFreshValueGenerator()
{
com.google.common.testing.ClassSanityTester$5 v1;
java.util.Iterator v5;
com.google.common.collect.ListMultimap v2;
java.util.Set v4;
java.util.Map v3;
java.lang.Object v7, v8, v9;
com.google.common.testing.ClassSanityTester v0;
boolean v6;
v0 := @this: com.google.common.testing.ClassSanityTester;
v1 = new com.google.common.testing.ClassSanityTester$5;
specialinvoke v1.<com.google.common.testing.ClassSanityTester$5: void <init>(com.google.common.testing.ClassSanityTester)>(v0);
v2 = v0.<com.google.common.testing.ClassSanityTester: com.google.common.collect.ListMultimap distinctValues>;
v3 = interfaceinvoke v2.<com.google.common.collect.ListMultimap: java.util.Map asMap()>();
v4 = interfaceinvoke v3.<java.util.Map: java.util.Set entrySet()>();
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getKey()>();
v9 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: void addSampleInstances(java.lang.Class,java.lang.Iterable)>(v8, v9);
goto label1;
label2:
return v1;
}
private static java.lang.Object generateDummyArg(com.google.common.reflect.Parameter, com.google.common.testing.FreshValueGenerator) throws com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException
{
com.google.common.reflect.Parameter v0;
java.lang.Object v4;
com.google.common.reflect.TypeToken v3;
com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException v5;
com.google.common.testing.FreshValueGenerator v1;
boolean v2;
v0 := @parameter0: com.google.common.reflect.Parameter;
v1 := @parameter1: com.google.common.testing.FreshValueGenerator;
v2 = staticinvoke <com.google.common.testing.NullPointerTester: boolean isNullable(com.google.common.reflect.Parameter)>(v0);
if v2 == 0 goto label1;
return null;
label1:
v3 = virtualinvoke v0.<com.google.common.reflect.Parameter: com.google.common.reflect.TypeToken getType()>();
v4 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(com.google.common.reflect.TypeToken)>(v3);
if v4 != null goto label2;
v5 = new com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException;
specialinvoke v5.<com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException: void <init>(com.google.common.reflect.Parameter)>(v0);
throw v5;
label2:
return v4;
}
private static void throwFirst(java.util.List) throws java.lang.Throwable
{
java.lang.Object v2;
java.util.List v0;
boolean v1;
v0 := @parameter0: java.util.List;
v1 = interfaceinvoke v0.<java.util.List: boolean isEmpty()>();
if v1 != 0 goto label1;
v2 = interfaceinvoke v0.<java.util.List: java.lang.Object get(int)>(0);
throw v2;
label1:
return;
}
private static com.google.common.collect.ImmutableList getFactories(com.google.common.reflect.TypeToken)
{
java.lang.reflect.Method[] v3;
java.lang.reflect.Method v6;
boolean v10, v12, v15, v22, v23, v25, v8, v9;
com.google.common.reflect.Invokable v21, v7;
com.google.common.reflect.TypeToken v0, v11;
java.lang.reflect.Constructor v20;
java.util.ArrayList v1;
java.lang.reflect.Constructor[] v17;
com.google.common.collect.ImmutableList v32;
int v14, v18, v19, v4, v5;
java.util.Iterator v24;
com.google.common.collect.Ordering v27, v28, v29, v30, v31;
java.lang.Class v13, v16, v2;
java.lang.Object v26;
v0 := @parameter0: com.google.common.reflect.TypeToken;
v1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();
v2 = virtualinvoke v0.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();
v3 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label3;
v6 = v3[v5];
v7 = virtualinvoke v0.<com.google.common.reflect.TypeToken: com.google.common.reflect.Invokable method(java.lang.reflect.Method)>(v6);
v8 = virtualinvoke v7.<com.google.common.reflect.Invokable: boolean isPrivate()>();
if v8 != 0 goto label2;
v9 = virtualinvoke v7.<com.google.common.reflect.Invokable: boolean isSynthetic()>();
if v9 != 0 goto label2;
v10 = virtualinvoke v7.<com.google.common.reflect.Invokable: boolean isStatic()>();
if v10 == 0 goto label2;
v11 = virtualinvoke v7.<com.google.common.reflect.Invokable: com.google.common.reflect.TypeToken getReturnType()>();
v12 = virtualinvoke v0.<com.google.common.reflect.TypeToken: boolean isSupertypeOf(com.google.common.reflect.TypeToken)>(v11);
if v12 == 0 goto label2;
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v7);
label2:
v5 = v5 + 1;
goto label1;
label3:
v13 = virtualinvoke v0.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();
v14 = virtualinvoke v13.<java.lang.Class: int getModifiers()>();
v15 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>(v14);
if v15 != 0 goto label6;
v16 = virtualinvoke v0.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();
v17 = virtualinvoke v16.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();
v18 = lengthof v17;
v19 = 0;
label4:
if v19 >= v18 goto label6;
v20 = v17[v19];
v21 = virtualinvoke v0.<com.google.common.reflect.TypeToken: com.google.common.reflect.Invokable constructor(java.lang.reflect.Constructor)>(v20);
v22 = virtualinvoke v21.<com.google.common.reflect.Invokable: boolean isPrivate()>();
if v22 != 0 goto label5;
v23 = virtualinvoke v21.<com.google.common.reflect.Invokable: boolean isSynthetic()>();
if v23 != 0 goto label5;
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v21);
label5:
v19 = v19 + 1;
goto label4;
label6:
v24 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label7:
v25 = interfaceinvoke v24.<java.util.Iterator: boolean hasNext()>();
if v25 == 0 goto label8;
v26 = interfaceinvoke v24.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v26.<com.google.common.reflect.Invokable: void setAccessible(boolean)>(1);
goto label7;
label8:
v27 = <com.google.common.testing.ClassSanityTester: com.google.common.collect.Ordering BY_NUMBER_OF_PARAMETERS>;
v28 = <com.google.common.testing.ClassSanityTester: com.google.common.collect.Ordering BY_METHOD_NAME>;
v29 = virtualinvoke v27.<com.google.common.collect.Ordering: com.google.common.collect.Ordering compound(java.util.Comparator)>(v28);
v30 = <com.google.common.testing.ClassSanityTester: com.google.common.collect.Ordering BY_PARAMETERS>;
v31 = virtualinvoke v29.<com.google.common.collect.Ordering: com.google.common.collect.Ordering compound(java.util.Comparator)>(v30);
v32 = virtualinvoke v31.<com.google.common.collect.Ordering: com.google.common.collect.ImmutableList immutableSortedCopy(java.lang.Iterable)>(v1);
return v32;
}
private java.util.List getDummyArguments(com.google.common.reflect.Invokable) throws com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException
{
com.google.common.reflect.TypeToken v8;
java.util.ArrayList v2;
com.google.common.collect.ImmutableList v3;
com.google.common.reflect.Invokable v1;
java.lang.Object v6, v9;
com.google.common.collect.UnmodifiableIterator v4;
com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException v10;
com.google.common.testing.ClassSanityTester v0;
boolean v5, v7;
v0 := @this: com.google.common.testing.ClassSanityTester;
v1 := @parameter0: com.google.common.reflect.Invokable;
v2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();
v3 = virtualinvoke v1.<com.google.common.reflect.Invokable: com.google.common.collect.ImmutableList getParameters()>();
v4 = virtualinvoke v3.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label4;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = staticinvoke <com.google.common.testing.NullPointerTester: boolean isNullable(com.google.common.reflect.Parameter)>(v6);
if v7 == 0 goto label2;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(null);
goto label1;
label2:
v8 = virtualinvoke v6.<com.google.common.reflect.Parameter: com.google.common.reflect.TypeToken getType()>();
v9 = specialinvoke v0.<com.google.common.testing.ClassSanityTester: java.lang.Object getDummyValue(com.google.common.reflect.TypeToken)>(v8);
if v9 != null goto label3;
v10 = new com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException;
specialinvoke v10.<com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException: void <init>(com.google.common.reflect.Parameter)>(v6);
throw v10;
label3:
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v9);
goto label1;
label4:
return v2;
}
private java.lang.Object getDummyValue(com.google.common.reflect.TypeToken)
{
com.google.common.testing.ClassSanityTester$SerializableDummyProxy v7;
com.google.common.reflect.TypeToken v1;
com.google.common.collect.MutableClassToInstanceMap v3;
java.lang.Class v2;
java.lang.Object v4, v5, v8;
com.google.common.testing.ClassSanityTester v0;
boolean v6;
v0 := @this: com.google.common.testing.ClassSanityTester;
v1 := @parameter0: com.google.common.reflect.TypeToken;
v2 = virtualinvoke v1.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();
v3 = v0.<com.google.common.testing.ClassSanityTester: com.google.common.collect.MutableClassToInstanceMap defaultValues>;
v4 = virtualinvoke v3.<com.google.common.collect.MutableClassToInstanceMap: java.lang.Object getInstance(java.lang.Class)>(v2);
if v4 == null goto label1;
return v4;
label1:
v5 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(v2);
if v5 == null goto label2;
return v5;
label2:
v6 = virtualinvoke v2.<java.lang.Class: boolean isInterface()>();
if v6 == 0 goto label3;
v7 = new com.google.common.testing.ClassSanityTester$SerializableDummyProxy;
specialinvoke v7.<com.google.common.testing.ClassSanityTester$SerializableDummyProxy: void <init>(com.google.common.testing.ClassSanityTester)>(v0);
v8 = virtualinvoke v7.<com.google.common.testing.ClassSanityTester$SerializableDummyProxy: java.lang.Object newProxy(com.google.common.reflect.TypeToken)>(v1);
return v8;
label3:
return null;
}
private static java.lang.Object createInstance(com.google.common.reflect.Invokable, java.util.List) throws com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException, java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException
{
com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException v3;
java.util.List v1;
com.google.common.reflect.Invokable v0;
java.lang.Object v2;
v0 := @parameter0: com.google.common.reflect.Invokable;
v1 := @parameter1: java.util.List;
v2 = staticinvoke <com.google.common.testing.ClassSanityTester: java.lang.Object invoke(com.google.common.reflect.Invokable,java.util.List)>(v0, v1);
if v2 != null goto label1;
v3 = new com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException;
specialinvoke v3.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException: void <init>(com.google.common.reflect.Invokable)>(v0);
throw v3;
label1:
return v2;
}
private static java.lang.Object invoke(com.google.common.reflect.Invokable, java.util.List) throws java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException
{
java.util.List v1;
java.lang.Object[] v2;
com.google.common.reflect.Invokable v0;
java.lang.Object v3;
java.lang.String v4;
boolean v5;
v0 := @parameter0: com.google.common.reflect.Invokable;
v1 := @parameter1: java.util.List;
v2 = interfaceinvoke v1.<java.util.List: java.lang.Object[] toArray()>();
v3 = virtualinvoke v0.<com.google.common.reflect.Invokable: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, v2);
if v3 != null goto label1;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.google.common.reflect.Invokable)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 returns null but it\'s not annotated with @Nullable");
v5 = staticinvoke <com.google.common.testing.NullPointerTester: boolean isNullable(com.google.common.reflect.Invokable)>(v0);
staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(v4, v5);
label1:
return v3;
}
static void <clinit>()
{
com.google.common.testing.ClassSanityTester$1 v0;
com.google.common.testing.ClassSanityTester$3 v2;
com.google.common.testing.ClassSanityTester$2 v1;
v0 = new com.google.common.testing.ClassSanityTester$1;
specialinvoke v0.<com.google.common.testing.ClassSanityTester$1: void <init>()>();
<com.google.common.testing.ClassSanityTester: com.google.common.collect.Ordering BY_METHOD_NAME> = v0;
v1 = new com.google.common.testing.ClassSanityTester$2;
specialinvoke v1.<com.google.common.testing.ClassSanityTester$2: void <init>()>();
<com.google.common.testing.ClassSanityTester: com.google.common.collect.Ordering BY_PARAMETERS> = v1;
v2 = new com.google.common.testing.ClassSanityTester$3;
specialinvoke v2.<com.google.common.testing.ClassSanityTester$3: void <init>()>();
<com.google.common.testing.ClassSanityTester: com.google.common.collect.Ordering BY_NUMBER_OF_PARAMETERS> = v2;
return;
}
}