public final class com.google.common.testing.CollectorTester extends java.lang.Object
{
private final java.util.stream.Collector collector;
private final java.util.function.BiPredicate equivalence;
public static com.google.common.testing.CollectorTester of(java.util.stream.Collector)
{
com.google.common.testing.CollectorTester v2;
java.util.function.BiPredicate v1;
java.util.stream.Collector v0;
v0 := @parameter0: java.util.stream.Collector;
v1 = staticinvoke <com.google.common.testing.CollectorTester$equals__80: java.util.function.BiPredicate bootstrap$()>();
v2 = staticinvoke <com.google.common.testing.CollectorTester: com.google.common.testing.CollectorTester of(java.util.stream.Collector,java.util.function.BiPredicate)>(v0, v1);
return v2;
}
public static com.google.common.testing.CollectorTester of(java.util.stream.Collector, java.util.function.BiPredicate)
{
com.google.common.testing.CollectorTester v2;
java.util.function.BiPredicate v1;
java.util.stream.Collector v0;
v0 := @parameter0: java.util.stream.Collector;
v1 := @parameter1: java.util.function.BiPredicate;
v2 = new com.google.common.testing.CollectorTester;
specialinvoke v2.<com.google.common.testing.CollectorTester: void <init>(java.util.stream.Collector,java.util.function.BiPredicate)>(v0, v1);
return v2;
}
private void <init>(java.util.stream.Collector, java.util.function.BiPredicate)
{
com.google.common.testing.CollectorTester v0;
java.util.function.BiPredicate v2;
java.lang.Object v3, v4;
java.util.stream.Collector v1;
v0 := @this: com.google.common.testing.CollectorTester;
v1 := @parameter0: java.util.stream.Collector;
v2 := @parameter1: java.util.function.BiPredicate;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v1);
v0.<com.google.common.testing.CollectorTester: java.util.stream.Collector collector> = v3;
v4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v2);
v0.<com.google.common.testing.CollectorTester: java.util.function.BiPredicate equivalence> = v4;
return;
}
public final transient com.google.common.testing.CollectorTester expectCollects(java.lang.Object, java.lang.Object[])
{
com.google.common.testing.CollectorTester v0;
java.lang.Object[] v2;
java.util.Set v5;
java.util.stream.Collector$Characteristics v6;
java.util.List v3;
java.lang.Object v1;
java.util.stream.Collector v4;
boolean v7;
v0 := @this: com.google.common.testing.CollectorTester;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object[];
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
specialinvoke v0.<com.google.common.testing.CollectorTester: void doExpectCollects(java.lang.Object,java.util.List)>(v1, v3);
v4 = v0.<com.google.common.testing.CollectorTester: java.util.stream.Collector collector>;
v5 = interfaceinvoke v4.<java.util.stream.Collector: java.util.Set characteristics()>();
v6 = <java.util.stream.Collector$Characteristics: java.util.stream.Collector$Characteristics UNORDERED>;
v7 = interfaceinvoke v5.<java.util.Set: boolean contains(java.lang.Object)>(v6);
if v7 == 0 goto label1;
staticinvoke <java.util.Collections: void reverse(java.util.List)>(v3);
specialinvoke v0.<com.google.common.testing.CollectorTester: void doExpectCollects(java.lang.Object,java.util.List)>(v1, v3);
label1:
return v0;
}
private void doExpectCollects(java.lang.Object, java.util.List)
{
com.google.common.testing.CollectorTester v0;
java.util.function.Function v14;
int v4, v5;
com.google.common.testing.CollectorTester$CollectStrategy[] v3;
java.util.stream.Collector v13, v7, v9;
boolean v12;
java.util.Set v10;
com.google.common.testing.CollectorTester$CollectStrategy v6;
java.util.stream.Collector$Characteristics v11;
java.util.List v2;
java.lang.Object v1, v15, v8;
v0 := @this: com.google.common.testing.CollectorTester;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.util.List;
v3 = staticinvoke <com.google.common.testing.CollectorTester$CollectStrategy: com.google.common.testing.CollectorTester$CollectStrategy[] values()>();
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label3;
v6 = v3[v5];
v7 = v0.<com.google.common.testing.CollectorTester: java.util.stream.Collector collector>;
v8 = virtualinvoke v6.<com.google.common.testing.CollectorTester$CollectStrategy: java.lang.Object result(java.util.stream.Collector,java.lang.Iterable)>(v7, v2);
v9 = v0.<com.google.common.testing.CollectorTester: java.util.stream.Collector collector>;
v10 = interfaceinvoke v9.<java.util.stream.Collector: java.util.Set characteristics()>();
v11 = <java.util.stream.Collector$Characteristics: java.util.stream.Collector$Characteristics IDENTITY_FINISH>;
v12 = interfaceinvoke v10.<java.util.Set: boolean contains(java.lang.Object)>(v11);
if v12 == 0 goto label2;
specialinvoke v0.<com.google.common.testing.CollectorTester: void assertEquivalent(java.lang.Object,java.lang.Object)>(v1, v8);
label2:
v13 = v0.<com.google.common.testing.CollectorTester: java.util.stream.Collector collector>;
v14 = interfaceinvoke v13.<java.util.stream.Collector: java.util.function.Function finisher()>();
v15 = interfaceinvoke v14.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v8);
specialinvoke v0.<com.google.common.testing.CollectorTester: void assertEquivalent(java.lang.Object,java.lang.Object)>(v1, v15);
v5 = v5 + 1;
goto label1;
label3:
return;
}
private void assertEquivalent(java.lang.Object, java.lang.Object)
{
com.google.common.testing.CollectorTester v0;
java.util.function.BiPredicate v3, v5;
java.lang.Object v1, v2;
java.lang.String v4;
boolean v6;
v0 := @this: com.google.common.testing.CollectorTester;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<com.google.common.testing.CollectorTester: java.util.function.BiPredicate equivalence>;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object,java.lang.Object,java.util.function.BiPredicate)>(v1, v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected \u0001 got \u0001 modulo equivalence \u0001");
v5 = v0.<com.google.common.testing.CollectorTester: java.util.function.BiPredicate equivalence>;
v6 = interfaceinvoke v5.<java.util.function.BiPredicate: boolean test(java.lang.Object,java.lang.Object)>(v1, v2);
staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(v4, v6);
return;
}
}