abstract class com.google.common.testing.DummyProxy extends java.lang.Object
{
void <init>()
{
com.google.common.testing.DummyProxy v0;
v0 := @this: com.google.common.testing.DummyProxy;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
final java.lang.Object newProxy(com.google.common.reflect.TypeToken)
{
com.google.common.testing.DummyProxy v0;
com.google.common.testing.DummyProxy$DummyHandler v12;
java.lang.Object[] v11;
java.util.Iterator v6;
java.lang.Class[] v10;
java.util.Set v5;
com.google.common.reflect.TypeToken v1;
int v9;
java.lang.Object v13, v7;
java.lang.ClassLoader v8;
com.google.common.reflect.TypeToken$TypeSet v3, v4;
java.util.LinkedHashSet v2;
v0 := @this: com.google.common.testing.DummyProxy;
v1 := @parameter0: com.google.common.reflect.TypeToken;
v2 = staticinvoke <com.google.common.collect.Sets: java.util.LinkedHashSet newLinkedHashSet()>();
v3 = virtualinvoke v1.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken$TypeSet getTypes()>();
v4 = virtualinvoke v3.<com.google.common.reflect.TypeToken$TypeSet: com.google.common.reflect.TypeToken$TypeSet interfaces()>();
v5 = virtualinvoke v4.<com.google.common.reflect.TypeToken$TypeSet: java.util.Set rawTypes()>();
interfaceinvoke v2.<java.util.Set: boolean addAll(java.util.Collection)>(v5);
interfaceinvoke v2.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/io/Serializable;");
v6 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
v7 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v8 = virtualinvoke v7.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v9 = interfaceinvoke v2.<java.util.Set: int size()>();
v10 = newarray (java.lang.Class)[v9];
v11 = interfaceinvoke v2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(v10);
v12 = new com.google.common.testing.DummyProxy$DummyHandler;
specialinvoke v12.<com.google.common.testing.DummyProxy$DummyHandler: void <init>(com.google.common.testing.DummyProxy,com.google.common.reflect.TypeToken)>(v0, v1);
v13 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>(v8, v11, v12);
return v13;
}
abstract java.lang.Object dummyReturnValue(com.google.common.reflect.TypeToken);
}