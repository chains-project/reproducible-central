public final class com.google.common.testing.EquivalenceTester extends java.lang.Object
{
private static final int REPETITIONS;
private final com.google.common.base.Equivalence equivalence;
private final com.google.common.testing.RelationshipTester delegate;
private final java.util.List items;
private void <init>(com.google.common.base.Equivalence)
{
com.google.common.testing.RelationshipTester$ItemReporter v5;
com.google.common.base.Equivalence v1;
com.google.common.testing.RelationshipTester v4;
java.lang.Object v3;
com.google.common.testing.EquivalenceTester v0;
java.util.ArrayList v2;
v0 := @this: com.google.common.testing.EquivalenceTester;
v1 := @parameter0: com.google.common.base.Equivalence;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();
v0.<com.google.common.testing.EquivalenceTester: java.util.List items> = v2;
v3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v1);
v0.<com.google.common.testing.EquivalenceTester: com.google.common.base.Equivalence equivalence> = v3;
v4 = new com.google.common.testing.RelationshipTester;
v5 = new com.google.common.testing.RelationshipTester$ItemReporter;
specialinvoke v5.<com.google.common.testing.RelationshipTester$ItemReporter: void <init>()>();
specialinvoke v4.<com.google.common.testing.RelationshipTester: void <init>(com.google.common.base.Equivalence,java.lang.String,java.lang.String,com.google.common.testing.RelationshipTester$ItemReporter)>(v1, "equivalent", "hash", v5);
v0.<com.google.common.testing.EquivalenceTester: com.google.common.testing.RelationshipTester delegate> = v4;
return;
}
public static com.google.common.testing.EquivalenceTester of(com.google.common.base.Equivalence)
{
com.google.common.base.Equivalence v0;
com.google.common.testing.EquivalenceTester v1;
v0 := @parameter0: com.google.common.base.Equivalence;
v1 = new com.google.common.testing.EquivalenceTester;
specialinvoke v1.<com.google.common.testing.EquivalenceTester: void <init>(com.google.common.base.Equivalence)>(v0);
return v1;
}
public transient com.google.common.testing.EquivalenceTester addEquivalenceGroup(java.lang.Object, java.lang.Object[])
{
java.util.List v3;
java.lang.Object[] v2;
java.lang.Object v1;
com.google.common.testing.EquivalenceTester v0;
v0 := @this: com.google.common.testing.EquivalenceTester;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object[];
v3 = staticinvoke <com.google.common.collect.Lists: java.util.List asList(java.lang.Object,java.lang.Object[])>(v1, v2);
virtualinvoke v0.<com.google.common.testing.EquivalenceTester: com.google.common.testing.EquivalenceTester addEquivalenceGroup(java.lang.Iterable)>(v3);
return v0;
}
public com.google.common.testing.EquivalenceTester addEquivalenceGroup(java.lang.Iterable)
{
java.util.List v3;
com.google.common.collect.ImmutableList v4;
com.google.common.testing.RelationshipTester v2;
java.lang.Iterable v1;
com.google.common.testing.EquivalenceTester v0;
v0 := @this: com.google.common.testing.EquivalenceTester;
v1 := @parameter0: java.lang.Iterable;
v2 = v0.<com.google.common.testing.EquivalenceTester: com.google.common.testing.RelationshipTester delegate>;
virtualinvoke v2.<com.google.common.testing.RelationshipTester: com.google.common.testing.RelationshipTester addRelatedGroup(java.lang.Iterable)>(v1);
v3 = v0.<com.google.common.testing.EquivalenceTester: java.util.List items>;
v4 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>(v1);
interfaceinvoke v3.<java.util.List: boolean addAll(java.util.Collection)>(v4);
return v0;
}
public com.google.common.testing.EquivalenceTester test()
{
int v1;
com.google.common.testing.RelationshipTester v2;
com.google.common.testing.EquivalenceTester v0;
v0 := @this: com.google.common.testing.EquivalenceTester;
v1 = 0;
label1:
if v1 >= 3 goto label2;
specialinvoke v0.<com.google.common.testing.EquivalenceTester: void testItems()>();
v2 = v0.<com.google.common.testing.EquivalenceTester: com.google.common.testing.RelationshipTester delegate>;
virtualinvoke v2.<com.google.common.testing.RelationshipTester: void test()>();
v1 = v1 + 1;
goto label1;
label2:
return v0;
}
private void testItems()
{
com.google.common.testing.EquivalenceTester v0;
int v18, v20;
java.lang.String v13, v16, v5, v9;
boolean v11, v12, v15, v3, v7, v8;
com.google.common.base.Equivalence v10, v14, v17, v19, v6;
java.util.Iterator v2;
java.util.List v1;
java.lang.Object v4;
v0 := @this: com.google.common.testing.EquivalenceTester;
v1 = v0.<com.google.common.testing.EquivalenceTester: java.util.List items>;
v2 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label6;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 must be inequivalent to null");
v6 = v0.<com.google.common.testing.EquivalenceTester: com.google.common.base.Equivalence equivalence>;
v7 = virtualinvoke v6.<com.google.common.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(v4, null);
if v7 != 0 goto label2;
v8 = 1;
goto label3;
label2:
v8 = 0;
label3:
staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(v5, v8);
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("null must be inequivalent to \u0001");
v10 = v0.<com.google.common.testing.EquivalenceTester: com.google.common.base.Equivalence equivalence>;
v11 = virtualinvoke v10.<com.google.common.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(null, v4);
if v11 != 0 goto label4;
v12 = 1;
goto label5;
label4:
v12 = 0;
label5:
staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(v9, v12);
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 must be equivalent to itself");
v14 = v0.<com.google.common.testing.EquivalenceTester: com.google.common.base.Equivalence equivalence>;
v15 = virtualinvoke v14.<com.google.common.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(v4, v4);
staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(v13, v15);
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("the hash of \u0001 must be consistent");
v17 = v0.<com.google.common.testing.EquivalenceTester: com.google.common.base.Equivalence equivalence>;
v18 = virtualinvoke v17.<com.google.common.base.Equivalence: int hash(java.lang.Object)>(v4);
v19 = v0.<com.google.common.testing.EquivalenceTester: com.google.common.base.Equivalence equivalence>;
v20 = virtualinvoke v19.<com.google.common.base.Equivalence: int hash(java.lang.Object)>(v4);
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>(v16, v18, v20);
goto label1;
label6:
return;
}
}