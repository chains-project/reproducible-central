final class com.google.common.testing.ForwardingWrapperTester$InteractionTester extends com.google.common.reflect.AbstractInvocationHandler
{
private final java.lang.Class interfaceType;
private final java.lang.reflect.Method method;
private final java.lang.Object[] passedArgs;
private final java.lang.Object returnValue;
private final java.util.concurrent.atomic.AtomicInteger called;
void <init>(java.lang.Class, java.lang.reflect.Method)
{
java.lang.Object[] v4;
com.google.common.testing.ForwardingWrapperTester$InteractionTester v0;
java.util.concurrent.atomic.AtomicInteger v3;
java.lang.Class v1, v6;
java.lang.Object v7;
com.google.common.testing.FreshValueGenerator v5;
java.lang.reflect.Method v2;
v0 := @this: com.google.common.testing.ForwardingWrapperTester$InteractionTester;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.reflect.Method;
specialinvoke v0.<com.google.common.reflect.AbstractInvocationHandler: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.util.concurrent.atomic.AtomicInteger called> = v3;
v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.Class interfaceType> = v1;
v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.reflect.Method method> = v2;
v4 = staticinvoke <com.google.common.testing.ForwardingWrapperTester: java.lang.Object[] getParameterValues(java.lang.reflect.Method)>(v2);
v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.Object[] passedArgs> = v4;
v5 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v5.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v6 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
v7 = virtualinvoke v5.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(v6);
v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.Object returnValue> = v7;
return;
}
protected java.lang.Object handleInvocation(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
{
java.lang.Object[] v10, v14, v3;
com.google.common.testing.ForwardingWrapperTester$InteractionTester v0;
java.util.concurrent.atomic.AtomicInteger v17, v7;
int v11, v8, v9;
java.lang.String v13, v6;
java.lang.reflect.Method v12, v2, v4, v5;
java.lang.Object v1, v15, v16, v18;
v0 := @this: com.google.common.testing.ForwardingWrapperTester$InteractionTester;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.reflect.Method;
v3 := @parameter2: java.lang.Object[];
v4 = v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.reflect.Method method>;
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(v4, v2);
v5 = v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.reflect.Method method>;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Method)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 invoked more than once.");
v7 = v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.util.concurrent.atomic.AtomicInteger called>;
v8 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicInteger: int get()>();
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>(v6, 0, v8);
v9 = 0;
label1:
v10 = v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.Object[] passedArgs>;
v11 = lengthof v10;
if v9 >= v11 goto label2;
v12 = v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.reflect.Method method>;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,java.lang.reflect.Method)>(v9, v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Parameter #\u0001 of \u0001 not forwarded");
v14 = v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.Object[] passedArgs>;
v15 = v14[v9];
v16 = v3[v9];
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(v13, v15, v16);
v9 = v9 + 1;
goto label1;
label2:
v17 = v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.util.concurrent.atomic.AtomicInteger called>;
virtualinvoke v17.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
v18 = v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.Object returnValue>;
return v18;
}
void testInteraction(com.google.common.base.Function)
{
java.lang.Throwable v18;
java.lang.Object[] v10;
com.google.common.testing.ForwardingWrapperTester$InteractionTester v0;
java.util.concurrent.atomic.AtomicInteger v22;
int v23;
java.lang.String v13, v21;
java.lang.reflect.Method v12, v20, v6, v9;
boolean v8;
java.lang.IllegalAccessException v15;
com.google.common.base.Function v1;
java.lang.RuntimeException v16, v19;
java.lang.reflect.InvocationTargetException v17;
java.lang.Class v2, v5, v7;
java.lang.Object v11, v14, v3, v4;
v0 := @this: com.google.common.testing.ForwardingWrapperTester$InteractionTester;
v1 := @parameter0: com.google.common.base.Function;
v2 = v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.Class interfaceType>;
v3 = staticinvoke <com.google.common.reflect.Reflection: java.lang.Object newProxy(java.lang.Class,java.lang.reflect.InvocationHandler)>(v2, v0);
v4 = interfaceinvoke v1.<com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>(v3);
v5 = v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.Class interfaceType>;
v6 = v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.reflect.Method method>;
v7 = virtualinvoke v6.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
v8 = virtualinvoke v5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v7);
label1:
v9 = v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.reflect.Method method>;
v10 = v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.Object[] passedArgs>;
v11 = virtualinvoke v9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v4, v10);
if v8 == 0 goto label2;
if v4 == v11 goto label6;
label2:
v12 = v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.reflect.Method method>;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Method)>(v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Return value of \u0001 not forwarded");
v14 = v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.Object returnValue>;
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(v13, v14, v11);
label3:
goto label6;
label4:
v15 := @caughtexception;
v16 = new java.lang.RuntimeException;
specialinvoke v16.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v15);
throw v16;
label5:
v17 := @caughtexception;
v18 = virtualinvoke v17.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
v19 = staticinvoke <com.google.common.base.Throwables: java.lang.RuntimeException propagate(java.lang.Throwable)>(v18);
throw v19;
label6:
v20 = v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.reflect.Method method>;
v21 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Method)>(v20) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to forward to \u0001");
v22 = v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.util.concurrent.atomic.AtomicInteger called>;
v23 = virtualinvoke v22.<java.util.concurrent.atomic.AtomicInteger: int get()>();
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>(v21, 1, v23);
return;
catch java.lang.IllegalAccessException from label1 to label3 with label4;
catch java.lang.reflect.InvocationTargetException from label1 to label3 with label5;
}
public java.lang.String toString()
{
com.google.common.testing.ForwardingWrapperTester$InteractionTester v0;
java.lang.Class v1;
java.lang.String v2, v3;
v0 := @this: com.google.common.testing.ForwardingWrapperTester$InteractionTester;
v1 = v0.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: java.lang.Class interfaceType>;
v2 = virtualinvoke v1.<java.lang.Class: java.lang.String getSimpleName()>();
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("dummy \u0001");
return v3;
}
}