public class com.fasterxml.jackson.core.StreamReadConstraints extends java.lang.Object implements java.io.Serializable
{
private static final long serialVersionUID;
public static final int DEFAULT_MAX_DEPTH;
public static final int DEFAULT_MAX_NUM_LEN;
public static final int DEFAULT_MAX_STRING_LEN;
private static final int MAX_BIGINT_SCALE_MAGNITUDE;
protected final int _maxNestingDepth;
protected final int _maxNumLen;
protected final int _maxStringLen;
private static com.fasterxml.jackson.core.StreamReadConstraints DEFAULT;
public static void overrideDefaultStreamReadConstraints(com.fasterxml.jackson.core.StreamReadConstraints)
{
com.fasterxml.jackson.core.StreamReadConstraints v0, v1;
v0 := @parameter0: com.fasterxml.jackson.core.StreamReadConstraints;
if v0 != null goto label1;
v1 = new com.fasterxml.jackson.core.StreamReadConstraints;
specialinvoke v1.<com.fasterxml.jackson.core.StreamReadConstraints: void <init>(int,int,int)>(1000, 1000, 20000000);
<com.fasterxml.jackson.core.StreamReadConstraints: com.fasterxml.jackson.core.StreamReadConstraints DEFAULT> = v1;
goto label2;
label1:
<com.fasterxml.jackson.core.StreamReadConstraints: com.fasterxml.jackson.core.StreamReadConstraints DEFAULT> = v0;
label2:
return;
}
protected void <init>(int, int, int)
{
int v1, v2, v3;
com.fasterxml.jackson.core.StreamReadConstraints v0;
v0 := @this: com.fasterxml.jackson.core.StreamReadConstraints;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.fasterxml.jackson.core.StreamReadConstraints: int _maxNestingDepth> = v1;
v0.<com.fasterxml.jackson.core.StreamReadConstraints: int _maxNumLen> = v2;
v0.<com.fasterxml.jackson.core.StreamReadConstraints: int _maxStringLen> = v3;
return;
}
public static com.fasterxml.jackson.core.StreamReadConstraints$Builder builder()
{
com.fasterxml.jackson.core.StreamReadConstraints$Builder v0;
v0 = new com.fasterxml.jackson.core.StreamReadConstraints$Builder;
specialinvoke v0.<com.fasterxml.jackson.core.StreamReadConstraints$Builder: void <init>()>();
return v0;
}
public static com.fasterxml.jackson.core.StreamReadConstraints defaults()
{
com.fasterxml.jackson.core.StreamReadConstraints v0;
v0 = <com.fasterxml.jackson.core.StreamReadConstraints: com.fasterxml.jackson.core.StreamReadConstraints DEFAULT>;
return v0;
}
public com.fasterxml.jackson.core.StreamReadConstraints$Builder rebuild()
{
com.fasterxml.jackson.core.StreamReadConstraints v0;
com.fasterxml.jackson.core.StreamReadConstraints$Builder v1;
v0 := @this: com.fasterxml.jackson.core.StreamReadConstraints;
v1 = new com.fasterxml.jackson.core.StreamReadConstraints$Builder;
specialinvoke v1.<com.fasterxml.jackson.core.StreamReadConstraints$Builder: void <init>(com.fasterxml.jackson.core.StreamReadConstraints)>(v0);
return v1;
}
public int getMaxNestingDepth()
{
int v1;
com.fasterxml.jackson.core.StreamReadConstraints v0;
v0 := @this: com.fasterxml.jackson.core.StreamReadConstraints;
v1 = v0.<com.fasterxml.jackson.core.StreamReadConstraints: int _maxNestingDepth>;
return v1;
}
public int getMaxNumberLength()
{
int v1;
com.fasterxml.jackson.core.StreamReadConstraints v0;
v0 := @this: com.fasterxml.jackson.core.StreamReadConstraints;
v1 = v0.<com.fasterxml.jackson.core.StreamReadConstraints: int _maxNumLen>;
return v1;
}
public int getMaxStringLength()
{
int v1;
com.fasterxml.jackson.core.StreamReadConstraints v0;
v0 := @this: com.fasterxml.jackson.core.StreamReadConstraints;
v1 = v0.<com.fasterxml.jackson.core.StreamReadConstraints: int _maxStringLen>;
return v1;
}
public void validateNestingDepth(int) throws com.fasterxml.jackson.core.exc.StreamConstraintsException
{
java.lang.Object[] v4;
com.fasterxml.jackson.core.StreamReadConstraints v0;
java.lang.Integer v5, v7;
int v1, v2, v6;
java.lang.String v8;
com.fasterxml.jackson.core.exc.StreamConstraintsException v3;
v0 := @this: com.fasterxml.jackson.core.StreamReadConstraints;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.StreamReadConstraints: int _maxNestingDepth>;
if v1 <= v2 goto label1;
v3 = new com.fasterxml.jackson.core.exc.StreamConstraintsException;
v4 = newarray (java.lang.Object)[2];
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v4[0] = v5;
v6 = v0.<com.fasterxml.jackson.core.StreamReadConstraints: int _maxNestingDepth>;
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
v4[1] = v7;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Depth (%d) exceeds the maximum allowed nesting depth (%d)", v4);
specialinvoke v3.<com.fasterxml.jackson.core.exc.StreamConstraintsException: void <init>(java.lang.String)>(v8);
throw v3;
label1:
return;
}
public void validateFPLength(int) throws com.fasterxml.jackson.core.exc.StreamConstraintsException
{
java.lang.Object[] v4;
com.fasterxml.jackson.core.StreamReadConstraints v0;
java.lang.Integer v5, v7;
int v1, v2, v6;
java.lang.String v8;
com.fasterxml.jackson.core.exc.StreamConstraintsException v3;
v0 := @this: com.fasterxml.jackson.core.StreamReadConstraints;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.StreamReadConstraints: int _maxNumLen>;
if v1 <= v2 goto label1;
v3 = new com.fasterxml.jackson.core.exc.StreamConstraintsException;
v4 = newarray (java.lang.Object)[2];
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v4[0] = v5;
v6 = v0.<com.fasterxml.jackson.core.StreamReadConstraints: int _maxNumLen>;
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
v4[1] = v7;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Number length (%d) exceeds the maximum length (%d)", v4);
specialinvoke v3.<com.fasterxml.jackson.core.exc.StreamConstraintsException: void <init>(java.lang.String)>(v8);
throw v3;
label1:
return;
}
public void validateIntegerLength(int) throws com.fasterxml.jackson.core.exc.StreamConstraintsException
{
java.lang.Object[] v4;
com.fasterxml.jackson.core.StreamReadConstraints v0;
java.lang.Integer v5, v7;
int v1, v2, v6;
java.lang.String v8;
com.fasterxml.jackson.core.exc.StreamConstraintsException v3;
v0 := @this: com.fasterxml.jackson.core.StreamReadConstraints;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.StreamReadConstraints: int _maxNumLen>;
if v1 <= v2 goto label1;
v3 = new com.fasterxml.jackson.core.exc.StreamConstraintsException;
v4 = newarray (java.lang.Object)[2];
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v4[0] = v5;
v6 = v0.<com.fasterxml.jackson.core.StreamReadConstraints: int _maxNumLen>;
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
v4[1] = v7;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Number length (%d) exceeds the maximum length (%d)", v4);
specialinvoke v3.<com.fasterxml.jackson.core.exc.StreamConstraintsException: void <init>(java.lang.String)>(v8);
throw v3;
label1:
return;
}
public void validateStringLength(int) throws com.fasterxml.jackson.core.exc.StreamConstraintsException
{
java.lang.Object[] v4;
com.fasterxml.jackson.core.StreamReadConstraints v0;
java.lang.Integer v5, v7;
int v1, v2, v6;
java.lang.String v8;
com.fasterxml.jackson.core.exc.StreamConstraintsException v3;
v0 := @this: com.fasterxml.jackson.core.StreamReadConstraints;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.StreamReadConstraints: int _maxStringLen>;
if v1 <= v2 goto label1;
v3 = new com.fasterxml.jackson.core.exc.StreamConstraintsException;
v4 = newarray (java.lang.Object)[2];
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v4[0] = v5;
v6 = v0.<com.fasterxml.jackson.core.StreamReadConstraints: int _maxStringLen>;
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
v4[1] = v7;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("String length (%d) exceeds the maximum length (%d)", v4);
specialinvoke v3.<com.fasterxml.jackson.core.exc.StreamConstraintsException: void <init>(java.lang.String)>(v8);
throw v3;
label1:
return;
}
public void validateBigIntegerScale(int) throws com.fasterxml.jackson.core.exc.StreamConstraintsException
{
java.lang.Object[] v4;
com.fasterxml.jackson.core.StreamReadConstraints v0;
java.lang.Integer v5, v6;
int v1, v2;
java.lang.String v7;
com.fasterxml.jackson.core.exc.StreamConstraintsException v3;
v0 := @this: com.fasterxml.jackson.core.StreamReadConstraints;
v1 := @parameter0: int;
v2 = staticinvoke <java.lang.Math: int abs(int)>(v1);
if v2 <= 100000 goto label1;
v3 = new com.fasterxml.jackson.core.exc.StreamConstraintsException;
v4 = newarray (java.lang.Object)[2];
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v4[0] = v5;
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100000);
v4[1] = v6;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("BigDecimal scale (%d) magnitude exceeds maximum allowed (%d)", v4);
specialinvoke v3.<com.fasterxml.jackson.core.exc.StreamConstraintsException: void <init>(java.lang.String)>(v7);
throw v3;
label1:
return;
}
static void <clinit>()
{
com.fasterxml.jackson.core.StreamReadConstraints v0;
v0 = new com.fasterxml.jackson.core.StreamReadConstraints;
specialinvoke v0.<com.fasterxml.jackson.core.StreamReadConstraints: void <init>(int,int,int)>(1000, 1000, 20000000);
<com.fasterxml.jackson.core.StreamReadConstraints: com.fasterxml.jackson.core.StreamReadConstraints DEFAULT> = v0;
return;
}
}