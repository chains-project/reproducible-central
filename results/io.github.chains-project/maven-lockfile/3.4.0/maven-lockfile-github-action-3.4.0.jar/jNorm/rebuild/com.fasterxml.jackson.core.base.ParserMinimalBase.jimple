public abstract class com.fasterxml.jackson.core.base.ParserMinimalBase extends com.fasterxml.jackson.core.JsonParser
{
protected static final int INT_TAB;
protected static final int INT_LF;
protected static final int INT_CR;
protected static final int INT_SPACE;
protected static final int INT_LBRACKET;
protected static final int INT_RBRACKET;
protected static final int INT_LCURLY;
protected static final int INT_RCURLY;
protected static final int INT_QUOTE;
protected static final int INT_APOS;
protected static final int INT_BACKSLASH;
protected static final int INT_SLASH;
protected static final int INT_ASTERISK;
protected static final int INT_COLON;
protected static final int INT_COMMA;
protected static final int INT_HASH;
protected static final int INT_0;
protected static final int INT_9;
protected static final int INT_MINUS;
protected static final int INT_PLUS;
protected static final int INT_PERIOD;
protected static final int INT_e;
protected static final int INT_E;
protected static final char CHAR_NULL;
protected static final byte[] NO_BYTES;
protected static final int[] NO_INTS;
protected static final int NR_UNKNOWN;
protected static final int NR_INT;
protected static final int NR_LONG;
protected static final int NR_BIGINT;
protected static final int NR_DOUBLE;
protected static final int NR_BIGDECIMAL;
protected static final int NR_FLOAT;
protected static final java.math.BigInteger BI_MIN_INT;
protected static final java.math.BigInteger BI_MAX_INT;
protected static final java.math.BigInteger BI_MIN_LONG;
protected static final java.math.BigInteger BI_MAX_LONG;
protected static final java.math.BigDecimal BD_MIN_LONG;
protected static final java.math.BigDecimal BD_MAX_LONG;
protected static final java.math.BigDecimal BD_MIN_INT;
protected static final java.math.BigDecimal BD_MAX_INT;
protected static final long MIN_INT_L;
protected static final long MAX_INT_L;
protected static final double MIN_LONG_D;
protected static final double MAX_LONG_D;
protected static final double MIN_INT_D;
protected static final double MAX_INT_D;
protected static final int MAX_ERROR_TOKEN_LENGTH;
protected com.fasterxml.jackson.core.JsonToken _currToken;
protected com.fasterxml.jackson.core.JsonToken _lastClearedToken;
protected void <init>()
{
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
specialinvoke v0.<com.fasterxml.jackson.core.JsonParser: void <init>()>();
return;
}
protected void <init>(int)
{
int v1;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: int;
specialinvoke v0.<com.fasterxml.jackson.core.JsonParser: void <init>(int)>(v1);
return;
}
public abstract com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException;
public com.fasterxml.jackson.core.JsonToken currentToken()
{
com.fasterxml.jackson.core.JsonToken v1;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
return v1;
}
public int currentTokenId()
{
int v2;
com.fasterxml.jackson.core.JsonToken v1;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
if v1 != null goto label1;
v2 = 0;
goto label2;
label1:
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonToken: int id()>();
label2:
return v2;
}
public com.fasterxml.jackson.core.JsonToken getCurrentToken()
{
com.fasterxml.jackson.core.JsonToken v1;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
return v1;
}
public int getCurrentTokenId()
{
int v2;
com.fasterxml.jackson.core.JsonToken v1;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
if v1 != null goto label1;
v2 = 0;
goto label2;
label1:
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonToken: int id()>();
label2:
return v2;
}
public boolean hasCurrentToken()
{
com.fasterxml.jackson.core.JsonToken v1;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public boolean hasTokenId(int)
{
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
int v1, v4;
com.fasterxml.jackson.core.JsonToken v2;
boolean v3, v5;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
if v2 != null goto label3;
if 0 != v1 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
label3:
v4 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
if v4 != v1 goto label4;
v5 = 1;
goto label5;
label4:
v5 = 0;
label5:
return v5;
}
public boolean hasToken(com.fasterxml.jackson.core.JsonToken)
{
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
com.fasterxml.jackson.core.JsonToken v1, v2;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: com.fasterxml.jackson.core.JsonToken;
v2 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
if v2 != v1 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isExpectedStartArrayToken()
{
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
com.fasterxml.jackson.core.JsonToken v1, v2;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isExpectedStartObjectToken()
{
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
com.fasterxml.jackson.core.JsonToken v1, v2;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isExpectedNumberIntToken()
{
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
com.fasterxml.jackson.core.JsonToken v1, v2;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public com.fasterxml.jackson.core.JsonToken nextValue() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonToken v1, v2;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken nextToken()>();
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v1 != v2 goto label1;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken nextToken()>();
label1:
return v1;
}
public com.fasterxml.jackson.core.JsonParser skipChildren() throws java.io.IOException
{
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
int v5;
java.lang.Class v10;
com.fasterxml.jackson.core.JsonToken v1, v2, v3, v4, v6, v9;
java.lang.String v11;
boolean v7, v8;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v1 == v2 goto label1;
v3 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v3 == v4 goto label1;
return v0;
label1:
v5 = 1;
label2:
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken nextToken()>();
if v6 != null goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _handleEOF()>();
return v0;
label3:
v7 = virtualinvoke v6.<com.fasterxml.jackson.core.JsonToken: boolean isStructStart()>();
if v7 == 0 goto label4;
v5 = v5 + 1;
goto label2;
label4:
v8 = virtualinvoke v6.<com.fasterxml.jackson.core.JsonToken: boolean isStructEnd()>();
if v8 == 0 goto label5;
v5 = v5 - 1;
if v5 != 0 goto label2;
return v0;
label5:
v9 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
if v6 != v9 goto label2;
v10 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v11 = virtualinvoke v10.<java.lang.Class: java.lang.String getName()>();
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportError(java.lang.String,java.lang.Object)>("Not enough content available for `skipChildren()`: non-blocking parser? (%s)", v11);
goto label2;
}
protected abstract void _handleEOF() throws com.fasterxml.jackson.core.JsonParseException;
public abstract java.lang.String getCurrentName() throws java.io.IOException;
public abstract void close() throws java.io.IOException;
public abstract boolean isClosed();
public abstract com.fasterxml.jackson.core.JsonStreamContext getParsingContext();
public void clearCurrentToken()
{
com.fasterxml.jackson.core.JsonToken v1, v2;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
if v1 == null goto label1;
v2 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _lastClearedToken> = v2;
v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken> = null;
label1:
return;
}
public com.fasterxml.jackson.core.JsonToken getLastClearedToken()
{
com.fasterxml.jackson.core.JsonToken v1;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _lastClearedToken>;
return v1;
}
public abstract void overrideCurrentName(java.lang.String);
public abstract java.lang.String getText() throws java.io.IOException;
public abstract char[] getTextCharacters() throws java.io.IOException;
public abstract boolean hasTextCharacters();
public abstract int getTextLength() throws java.io.IOException;
public abstract int getTextOffset() throws java.io.IOException;
public abstract byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException;
public boolean getValueAsBoolean(boolean) throws java.io.IOException
{
int v11, v3;
com.fasterxml.jackson.core.JsonToken v2;
java.lang.String v4, v5, v6, v8;
boolean v1, v10, v12, v14, v15, v7, v9;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
java.lang.Object v13;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: boolean;
v2 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
if v2 == null goto label10;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v3)
{
case 6: goto label01;
case 7: goto label04;
case 8: goto label10;
case 9: goto label07;
case 10: goto label08;
case 11: goto label08;
case 12: goto label09;
default: goto label10;
};
label01:
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getText()>();
v5 = virtualinvoke v4.<java.lang.String: java.lang.String trim()>();
v6 = "true";
v7 = virtualinvoke v6.<java.lang.String: boolean equals(java.lang.Object)>(v5);
if v7 == 0 goto label02;
return 1;
label02:
v8 = "false";
v9 = virtualinvoke v8.<java.lang.String: boolean equals(java.lang.Object)>(v5);
if v9 == 0 goto label03;
return 0;
label03:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: boolean _hasTextualNull(java.lang.String)>(v5);
if v10 == 0 goto label10;
return 0;
label04:
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: int getIntValue()>();
if v11 == 0 goto label05;
v12 = 1;
goto label06;
label05:
v12 = 0;
label06:
return v12;
label07:
return 1;
label08:
return 0;
label09:
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.Object getEmbeddedObject()>();
v14 = v13 instanceof java.lang.Boolean;
if v14 == 0 goto label10;
v15 = virtualinvoke v13.<java.lang.Boolean: boolean booleanValue()>();
return v15;
label10:
return v1;
}
public int getValueAsInt() throws java.io.IOException
{
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
int v4, v5;
com.fasterxml.jackson.core.JsonToken v1, v2, v3;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v1 == v2 goto label1;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
if v1 != v3 goto label2;
label1:
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: int getIntValue()>();
return v4;
label2:
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: int getValueAsInt(int)>(0);
return v5;
}
public int getValueAsInt(int) throws java.io.IOException
{
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
int v1, v12, v5, v6, v9;
java.lang.Object v10;
com.fasterxml.jackson.core.JsonToken v2, v3, v4;
java.lang.String v7;
boolean v11, v8;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v2 == v3 goto label1;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
if v2 != v4 goto label2;
label1:
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: int getIntValue()>();
return v5;
label2:
if v2 == null goto label9;
v6 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v6)
{
case 6: goto label3;
case 7: goto label9;
case 8: goto label9;
case 9: goto label5;
case 10: goto label6;
case 11: goto label7;
case 12: goto label8;
default: goto label9;
};
label3:
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getText()>();
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: boolean _hasTextualNull(java.lang.String)>(v7);
if v8 == 0 goto label4;
return 0;
label4:
v9 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: int parseAsInt(java.lang.String,int)>(v7, v1);
return v9;
label5:
return 1;
label6:
return 0;
label7:
return 0;
label8:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.Object getEmbeddedObject()>();
v11 = v10 instanceof java.lang.Number;
if v11 == 0 goto label9;
v12 = virtualinvoke v10.<java.lang.Number: int intValue()>();
return v12;
label9:
return v1;
}
public long getValueAsLong() throws java.io.IOException
{
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
long v4, v5;
com.fasterxml.jackson.core.JsonToken v1, v2, v3;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v1 == v2 goto label1;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
if v1 != v3 goto label2;
label1:
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: long getLongValue()>();
return v4;
label2:
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: long getValueAsLong(long)>(0L);
return v5;
}
public long getValueAsLong(long) throws java.io.IOException
{
long v1, v12, v5, v9;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
int v6;
java.lang.Object v10;
com.fasterxml.jackson.core.JsonToken v2, v3, v4;
java.lang.String v7;
boolean v11, v8;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: long;
v2 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v2 == v3 goto label1;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
if v2 != v4 goto label2;
label1:
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: long getLongValue()>();
return v5;
label2:
if v2 == null goto label8;
v6 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v6)
{
case 6: goto label3;
case 7: goto label8;
case 8: goto label8;
case 9: goto label5;
case 10: goto label6;
case 11: goto label6;
case 12: goto label7;
default: goto label8;
};
label3:
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getText()>();
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: boolean _hasTextualNull(java.lang.String)>(v7);
if v8 == 0 goto label4;
return 0L;
label4:
v9 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: long parseAsLong(java.lang.String,long)>(v7, v1);
return v9;
label5:
return 1L;
label6:
return 0L;
label7:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.Object getEmbeddedObject()>();
v11 = v10 instanceof java.lang.Number;
if v11 == 0 goto label8;
v12 = virtualinvoke v10.<java.lang.Number: long longValue()>();
return v12;
label8:
return v1;
}
public double getValueAsDouble(double) throws java.io.IOException
{
com.fasterxml.jackson.core.StreamReadConstraints v6;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
int v3, v7;
java.lang.Object v10;
com.fasterxml.jackson.core.JsonToken v2;
java.lang.String v4;
boolean v11, v5;
double v1, v12, v8, v9;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: double;
v2 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
if v2 == null goto label7;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v3)
{
case 6: goto label1;
case 7: goto label3;
case 8: goto label3;
case 9: goto label4;
case 10: goto label5;
case 11: goto label5;
case 12: goto label6;
default: goto label7;
};
label1:
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getText()>();
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: boolean _hasTextualNull(java.lang.String)>(v4);
if v5 == 0 goto label2;
return 0.0;
label2:
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.StreamReadConstraints streamReadConstraints()>();
v7 = virtualinvoke v4.<java.lang.String: int length()>();
virtualinvoke v6.<com.fasterxml.jackson.core.StreamReadConstraints: void validateFPLength(int)>(v7);
v8 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: double parseAsDouble(java.lang.String,double)>(v4, v1);
return v8;
label3:
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: double getDoubleValue()>();
return v9;
label4:
return 1.0;
label5:
return 0.0;
label6:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.Object getEmbeddedObject()>();
v11 = v10 instanceof java.lang.Number;
if v11 == 0 goto label7;
v12 = virtualinvoke v10.<java.lang.Number: double doubleValue()>();
return v12;
label7:
return v1;
}
public java.lang.String getValueAsString() throws java.io.IOException
{
java.lang.String v1;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getValueAsString(java.lang.String)>(null);
return v1;
}
public java.lang.String getValueAsString(java.lang.String) throws java.io.IOException
{
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
com.fasterxml.jackson.core.JsonToken v10, v11, v2, v3, v5, v6, v8, v9;
java.lang.String v1, v13, v4, v7;
boolean v12;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v2 != v3 goto label1;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getText()>();
return v4;
label1:
v5 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v5 != v6 goto label2;
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getCurrentName()>();
return v7;
label2:
v8 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
if v8 == null goto label3;
v9 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
if v9 == v10 goto label3;
v11 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v12 = virtualinvoke v11.<com.fasterxml.jackson.core.JsonToken: boolean isScalarValue()>();
if v12 != 0 goto label4;
label3:
return v1;
label4:
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getText()>();
return v13;
}
protected void _decodeBase64(java.lang.String, com.fasterxml.jackson.core.util.ByteArrayBuilder, com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException
{
com.fasterxml.jackson.core.Base64Variant v3;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
com.fasterxml.jackson.core.util.ByteArrayBuilder v2;
java.lang.String v1, v5;
java.lang.IllegalArgumentException v4;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.fasterxml.jackson.core.util.ByteArrayBuilder;
v3 := @parameter2: com.fasterxml.jackson.core.Base64Variant;
label1:
virtualinvoke v3.<com.fasterxml.jackson.core.Base64Variant: void decode(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder)>(v1, v2);
label2:
goto label4;
label3:
v4 := @caughtexception;
v5 = virtualinvoke v4.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportError(java.lang.String)>(v5);
label4:
return;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
}
protected boolean _hasTextualNull(java.lang.String)
{
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
java.lang.String v1, v2;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: java.lang.String;
v2 = "null";
v3 = virtualinvoke v2.<java.lang.String: boolean equals(java.lang.Object)>(v1);
return v3;
}
protected java.lang.Object _reportUnexpectedNumberChar(int, java.lang.String) throws com.fasterxml.jackson.core.JsonParseException
{
java.lang.Object[] v3;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
int v1;
java.lang.String v2, v4, v5;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 = newarray (java.lang.Object)[1];
v4 = staticinvoke <com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String _getCharDesc(int)>(v1);
v3[0] = v4;
v5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected character (%s) in numeric value", v3);
if v2 == null goto label1;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v5, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001: \u0001");
label1:
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportError(java.lang.String)>(v5);
return null;
}
protected void reportUnexpectedNumberChar(int, java.lang.String) throws com.fasterxml.jackson.core.JsonParseException
{
int v1;
java.lang.String v2;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v1, v2);
return;
}
protected void reportInvalidNumber(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException
{
java.lang.String v1, v2;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: java.lang.String;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid numeric value: \u0001");
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportError(java.lang.String)>(v2);
return;
}
protected void reportOverflowInt() throws java.io.IOException
{
java.lang.String v1;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getText()>();
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void reportOverflowInt(java.lang.String)>(v1);
return;
}
protected void reportOverflowInt(java.lang.String) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonToken v2;
java.lang.String v1;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken currentToken()>();
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void reportOverflowInt(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(v1, v2);
return;
}
protected void reportOverflowInt(java.lang.String, com.fasterxml.jackson.core.JsonToken) throws java.io.IOException
{
java.lang.Object[] v3;
java.lang.Integer v5, v6;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
java.lang.Class v8;
com.fasterxml.jackson.core.JsonToken v2;
java.lang.String v1, v4, v7;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.fasterxml.jackson.core.JsonToken;
v3 = newarray (java.lang.Object)[3];
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String _longIntegerDesc(java.lang.String)>(v1);
v3[0] = v4;
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-2147483648);
v3[1] = v5;
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2147483647);
v3[2] = v6;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Numeric value (%s) out of range of int (%d - %s)", v3);
v8 = <java.lang.Integer: java.lang.Class TYPE>;
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class)>(v7, v2, v8);
return;
}
protected void reportOverflowLong() throws java.io.IOException
{
java.lang.String v1;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String getText()>();
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void reportOverflowLong(java.lang.String)>(v1);
return;
}
protected void reportOverflowLong(java.lang.String) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonToken v2;
java.lang.String v1;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken currentToken()>();
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void reportOverflowLong(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(v1, v2);
return;
}
protected void reportOverflowLong(java.lang.String, com.fasterxml.jackson.core.JsonToken) throws java.io.IOException
{
java.lang.Object[] v3;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
java.lang.Long v5, v6;
java.lang.Class v8;
com.fasterxml.jackson.core.JsonToken v2;
java.lang.String v1, v4, v7;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.fasterxml.jackson.core.JsonToken;
v3 = newarray (java.lang.Object)[3];
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String _longIntegerDesc(java.lang.String)>(v1);
v3[0] = v4;
v5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-9223372036854775808L);
v3[1] = v5;
v6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9223372036854775807L);
v3[2] = v6;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Numeric value (%s) out of range of long (%d - %s)", v3);
v8 = <java.lang.Long: java.lang.Class TYPE>;
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class)>(v7, v2, v8);
return;
}
protected void _reportInputCoercion(java.lang.String, com.fasterxml.jackson.core.JsonToken, java.lang.Class) throws com.fasterxml.jackson.core.exc.InputCoercionException
{
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
java.lang.Class v3;
com.fasterxml.jackson.core.JsonToken v2;
java.lang.String v1;
com.fasterxml.jackson.core.exc.InputCoercionException v4;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.fasterxml.jackson.core.JsonToken;
v3 := @parameter2: java.lang.Class;
v4 = new com.fasterxml.jackson.core.exc.InputCoercionException;
specialinvoke v4.<com.fasterxml.jackson.core.exc.InputCoercionException: void <init>(com.fasterxml.jackson.core.JsonParser,java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class)>(v0, v1, v2, v3);
throw v4;
}
protected java.lang.String _longIntegerDesc(java.lang.String)
{
java.lang.Object[] v4;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
int v2;
java.lang.String v1, v6;
java.lang.Integer v5;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: int length()>();
if v2 >= 1000 goto label1;
return v1;
label1:
v3 = virtualinvoke v1.<java.lang.String: boolean startsWith(java.lang.String)>("-");
if v3 == 0 goto label2;
v2 = v2 - 1;
label2:
v4 = newarray (java.lang.Object)[1];
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v4[0] = v5;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("[Integer with %d digits]", v4);
return v6;
}
protected java.lang.String _longNumberDesc(java.lang.String)
{
java.lang.Object[] v4;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
int v2;
java.lang.String v1, v6;
java.lang.Integer v5;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: int length()>();
if v2 >= 1000 goto label1;
return v1;
label1:
v3 = virtualinvoke v1.<java.lang.String: boolean startsWith(java.lang.String)>("-");
if v3 == 0 goto label2;
v2 = v2 - 1;
label2:
v4 = newarray (java.lang.Object)[1];
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v4[0] = v5;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("[number with %d characters]", v4);
return v6;
}
protected void _reportUnexpectedChar(int, java.lang.String) throws com.fasterxml.jackson.core.JsonParseException
{
java.lang.Object[] v3;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
int v1;
java.lang.String v2, v4, v5;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
if v1 >= 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInvalidEOF()>();
label1:
v3 = newarray (java.lang.Object)[1];
v4 = staticinvoke <com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String _getCharDesc(int)>(v1);
v3[0] = v4;
v5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected character (%s)", v3);
if v2 == null goto label2;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v5, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001: \u0001");
label2:
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportError(java.lang.String)>(v5);
return;
}
protected void _reportInvalidEOF() throws com.fasterxml.jackson.core.JsonParseException
{
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
com.fasterxml.jackson.core.JsonToken v1, v3;
java.lang.String v2;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.fasterxml.jackson.core.JsonToken)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(" in \u0001");
v3 = v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(v2, v3);
return;
}
protected void _reportInvalidEOFInValue(com.fasterxml.jackson.core.JsonToken) throws com.fasterxml.jackson.core.JsonParseException
{
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
com.fasterxml.jackson.core.JsonToken v1, v2, v4, v5;
java.lang.String v3;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: com.fasterxml.jackson.core.JsonToken;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v1 != v2 goto label1;
v3 = " in a String value";
goto label4;
label1:
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v1 == v4 goto label2;
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
if v1 != v5 goto label3;
label2:
v3 = " in a Number value";
goto label4;
label3:
v3 = " in a value";
label4:
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(v3, v1);
return;
}
protected void _reportInvalidEOF(java.lang.String, com.fasterxml.jackson.core.JsonToken) throws com.fasterxml.jackson.core.JsonParseException
{
com.fasterxml.jackson.core.io.JsonEOFException v3;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
com.fasterxml.jackson.core.JsonToken v2;
java.lang.String v1, v4;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.fasterxml.jackson.core.JsonToken;
v3 = new com.fasterxml.jackson.core.io.JsonEOFException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected end-of-input\u0001");
specialinvoke v3.<com.fasterxml.jackson.core.io.JsonEOFException: void <init>(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.JsonToken,java.lang.String)>(v0, v2, v4);
throw v3;
}
protected void _reportInvalidEOFInValue() throws com.fasterxml.jackson.core.JsonParseException
{
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInvalidEOF(java.lang.String)>(" in a value");
return;
}
protected void _reportInvalidEOF(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException
{
com.fasterxml.jackson.core.io.JsonEOFException v2;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
java.lang.String v1, v3;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: java.lang.String;
v2 = new com.fasterxml.jackson.core.io.JsonEOFException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected end-of-input\u0001");
specialinvoke v2.<com.fasterxml.jackson.core.io.JsonEOFException: void <init>(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.JsonToken,java.lang.String)>(v0, null, v3);
throw v2;
}
protected void _reportMissingRootWS(int) throws com.fasterxml.jackson.core.JsonParseException
{
int v1;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: int;
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportUnexpectedChar(int,java.lang.String)>(v1, "Expected space separating root-level values");
return;
}
protected void _throwInvalidSpace(int) throws com.fasterxml.jackson.core.JsonParseException
{
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
int v1;
char v4;
java.lang.String v2, v3;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: int;
v2 = staticinvoke <com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String _getCharDesc(int)>(v4);
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Illegal character (\u0001): only regular white space (\\r, \\n, \\t) is allowed between tokens");
virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportError(java.lang.String)>(v3);
return;
}
protected static final java.lang.String _getCharDesc(int)
{
int v0;
java.lang.String v2, v3, v4, v5;
boolean v1;
v0 := @parameter0: int;
v1 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(v0);
if v1 == 0 goto label1;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(CTRL-CHAR, code \u0001)");
return v2;
label1:
if v0 <= 255 goto label2;
v3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v0);
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char,int,java.lang.String)>(v0, v0, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\'\u0001\' (code \u0001 / 0x\u0001)");
return v4;
label2:
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char,int)>(v0, v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\'\u0001\' (code \u0001)");
return v5;
}
protected final void _reportError(java.lang.String) throws com.fasterxml.jackson.core.JsonParseException
{
java.lang.String v1;
com.fasterxml.jackson.core.JsonParseException v2;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>(v1);
throw v2;
}
protected final void _reportError(java.lang.String, java.lang.Object) throws com.fasterxml.jackson.core.JsonParseException
{
java.lang.Object[] v3;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
java.lang.Object v2;
java.lang.String v1, v4;
com.fasterxml.jackson.core.JsonParseException v5;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = newarray (java.lang.Object)[1];
v3[0] = v2;
v4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v3);
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>(v4);
throw v5;
}
protected final void _reportError(java.lang.String, java.lang.Object, java.lang.Object) throws com.fasterxml.jackson.core.JsonParseException
{
java.lang.Object[] v4;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
java.lang.Object v2, v3;
java.lang.String v1, v5;
com.fasterxml.jackson.core.JsonParseException v6;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 = newarray (java.lang.Object)[2];
v4[0] = v2;
v4[1] = v3;
v5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v4);
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>(v5);
throw v6;
}
protected final void _wrapError(java.lang.String, java.lang.Throwable) throws com.fasterxml.jackson.core.JsonParseException
{
java.lang.Throwable v2;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
java.lang.String v1;
com.fasterxml.jackson.core.JsonParseException v3;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Throwable;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String,java.lang.Throwable)>(v1, v2);
throw v3;
}
protected final void _throwInternal()
{
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
staticinvoke <com.fasterxml.jackson.core.util.VersionUtil: void throwInternal()>();
return;
}
protected final com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String, java.lang.Throwable)
{
java.lang.Throwable v2;
com.fasterxml.jackson.core.base.ParserMinimalBase v0;
java.lang.String v1;
com.fasterxml.jackson.core.JsonParseException v3;
v0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Throwable;
v3 = new com.fasterxml.jackson.core.JsonParseException;
specialinvoke v3.<com.fasterxml.jackson.core.JsonParseException: void <init>(com.fasterxml.jackson.core.JsonParser,java.lang.String,java.lang.Throwable)>(v0, v1, v2);
return v3;
}
protected static byte[] _asciiBytes(java.lang.String)
{
byte[] v2;
int v1, v3, v4;
char v5;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: int length()>();
v2 = newarray (byte)[v1];
v3 = 0;
v4 = virtualinvoke v0.<java.lang.String: int length()>();
label1:
if v3 >= v4 goto label2;
v5 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v3);
v2[v3] = v5;
v3 = v3 + 1;
goto label1;
label2:
return v2;
}
protected static java.lang.String _ascii(byte[])
{
byte[] v0;
java.io.IOException v2;
java.lang.RuntimeException v3;
java.lang.String v1;
v0 := @parameter0: byte[];
label1:
v1 = new java.lang.String;
specialinvoke v1.<java.lang.String: void <init>(byte[],java.lang.String)>(v0, "US-ASCII");
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = new java.lang.RuntimeException;
specialinvoke v3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v2);
throw v3;
catch java.io.IOException from label1 to label2 with label3;
}
static void <clinit>()
{
byte[] v0;
java.math.BigDecimal v10, v12, v6, v8;
int[] v1;
java.math.BigInteger v11, v13, v2, v3, v4, v5, v7, v9;
v0 = newarray (byte)[0];
<com.fasterxml.jackson.core.base.ParserMinimalBase: byte[] NO_BYTES> = v0;
v1 = newarray (int)[0];
<com.fasterxml.jackson.core.base.ParserMinimalBase: int[] NO_INTS> = v1;
v2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-2147483648L);
<com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigInteger BI_MIN_INT> = v2;
v3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2147483647L);
<com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigInteger BI_MAX_INT> = v3;
v4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-9223372036854775808L);
<com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigInteger BI_MIN_LONG> = v4;
v5 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(9223372036854775807L);
<com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigInteger BI_MAX_LONG> = v5;
v6 = new java.math.BigDecimal;
v7 = <com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigInteger BI_MIN_LONG>;
specialinvoke v6.<java.math.BigDecimal: void <init>(java.math.BigInteger)>(v7);
<com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigDecimal BD_MIN_LONG> = v6;
v8 = new java.math.BigDecimal;
v9 = <com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigInteger BI_MAX_LONG>;
specialinvoke v8.<java.math.BigDecimal: void <init>(java.math.BigInteger)>(v9);
<com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigDecimal BD_MAX_LONG> = v8;
v10 = new java.math.BigDecimal;
v11 = <com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigInteger BI_MIN_INT>;
specialinvoke v10.<java.math.BigDecimal: void <init>(java.math.BigInteger)>(v11);
<com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigDecimal BD_MIN_INT> = v10;
v12 = new java.math.BigDecimal;
v13 = <com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigInteger BI_MAX_INT>;
specialinvoke v12.<java.math.BigDecimal: void <init>(java.math.BigInteger)>(v13);
<com.fasterxml.jackson.core.base.ParserMinimalBase: java.math.BigDecimal BD_MAX_INT> = v12;
return;
}
}