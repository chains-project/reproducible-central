public final enum class com.fasterxml.jackson.core.filter.TokenFilter$Inclusion extends java.lang.Enum
{
public static final enum com.fasterxml.jackson.core.filter.TokenFilter$Inclusion ONLY_INCLUDE_ALL;
public static final enum com.fasterxml.jackson.core.filter.TokenFilter$Inclusion INCLUDE_ALL_AND_PATH;
public static final enum com.fasterxml.jackson.core.filter.TokenFilter$Inclusion INCLUDE_NON_NULL;
private static final com.fasterxml.jackson.core.filter.TokenFilter$Inclusion[] $VALUES;
public static com.fasterxml.jackson.core.filter.TokenFilter$Inclusion[] values()
{
java.lang.Object v1;
com.fasterxml.jackson.core.filter.TokenFilter$Inclusion[] v0;
v0 = <com.fasterxml.jackson.core.filter.TokenFilter$Inclusion: com.fasterxml.jackson.core.filter.TokenFilter$Inclusion[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static com.fasterxml.jackson.core.filter.TokenFilter$Inclusion valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/fasterxml/jackson/core/filter/TokenFilter$Inclusion;", v0);
return v1;
}
private void <init>(java.lang.String, int)
{
int v2;
com.fasterxml.jackson.core.filter.TokenFilter$Inclusion v0;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.core.filter.TokenFilter$Inclusion;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
return;
}
private static com.fasterxml.jackson.core.filter.TokenFilter$Inclusion[] $values()
{
com.fasterxml.jackson.core.filter.TokenFilter$Inclusion[] v0;
com.fasterxml.jackson.core.filter.TokenFilter$Inclusion v1, v2, v3;
v0 = newarray (com.fasterxml.jackson.core.filter.TokenFilter$Inclusion)[3];
v1 = <com.fasterxml.jackson.core.filter.TokenFilter$Inclusion: com.fasterxml.jackson.core.filter.TokenFilter$Inclusion ONLY_INCLUDE_ALL>;
v0[0] = v1;
v2 = <com.fasterxml.jackson.core.filter.TokenFilter$Inclusion: com.fasterxml.jackson.core.filter.TokenFilter$Inclusion INCLUDE_ALL_AND_PATH>;
v0[1] = v2;
v3 = <com.fasterxml.jackson.core.filter.TokenFilter$Inclusion: com.fasterxml.jackson.core.filter.TokenFilter$Inclusion INCLUDE_NON_NULL>;
v0[2] = v3;
return v0;
}
static void <clinit>()
{
com.fasterxml.jackson.core.filter.TokenFilter$Inclusion[] v3;
com.fasterxml.jackson.core.filter.TokenFilter$Inclusion v0, v1, v2;
v0 = new com.fasterxml.jackson.core.filter.TokenFilter$Inclusion;
specialinvoke v0.<com.fasterxml.jackson.core.filter.TokenFilter$Inclusion: void <init>(java.lang.String,int)>("ONLY_INCLUDE_ALL", 0);
<com.fasterxml.jackson.core.filter.TokenFilter$Inclusion: com.fasterxml.jackson.core.filter.TokenFilter$Inclusion ONLY_INCLUDE_ALL> = v0;
v1 = new com.fasterxml.jackson.core.filter.TokenFilter$Inclusion;
specialinvoke v1.<com.fasterxml.jackson.core.filter.TokenFilter$Inclusion: void <init>(java.lang.String,int)>("INCLUDE_ALL_AND_PATH", 1);
<com.fasterxml.jackson.core.filter.TokenFilter$Inclusion: com.fasterxml.jackson.core.filter.TokenFilter$Inclusion INCLUDE_ALL_AND_PATH> = v1;
v2 = new com.fasterxml.jackson.core.filter.TokenFilter$Inclusion;
specialinvoke v2.<com.fasterxml.jackson.core.filter.TokenFilter$Inclusion: void <init>(java.lang.String,int)>("INCLUDE_NON_NULL", 2);
<com.fasterxml.jackson.core.filter.TokenFilter$Inclusion: com.fasterxml.jackson.core.filter.TokenFilter$Inclusion INCLUDE_NON_NULL> = v2;
v3 = staticinvoke <com.fasterxml.jackson.core.filter.TokenFilter$Inclusion: com.fasterxml.jackson.core.filter.TokenFilter$Inclusion[] $values()>();
<com.fasterxml.jackson.core.filter.TokenFilter$Inclusion: com.fasterxml.jackson.core.filter.TokenFilter$Inclusion[] $VALUES> = v3;
return;
}
}