class com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath extends java.lang.Object
{
public static final java.math.BigInteger FIVE;
static final java.math.BigInteger TEN_POW_16;
static final java.math.BigInteger FIVE_POW_16;
private static final java.math.BigInteger[] SMALL_POWERS_OF_TEN;
private void <init>()
{
com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static java.math.BigInteger computePowerOfTen(java.util.NavigableMap, int)
{
java.lang.Integer v6;
int v1, v12, v13, v3, v9;
java.math.BigInteger v14, v15, v16, v17, v18, v5;
java.util.Map$Entry v7;
java.math.BigInteger[] v2, v4;
java.util.NavigableMap v0;
java.lang.Object v10, v11, v8;
v0 := @parameter0: java.util.NavigableMap;
v1 := @parameter1: int;
v2 = <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: java.math.BigInteger[] SMALL_POWERS_OF_TEN>;
v3 = lengthof v2;
if v1 >= v3 goto label1;
v4 = <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: java.math.BigInteger[] SMALL_POWERS_OF_TEN>;
v5 = v4[v1];
return v5;
label1:
if v0 == null goto label3;
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v7 = interfaceinvoke v0.<java.util.NavigableMap: java.util.Map$Entry floorEntry(java.lang.Object)>(v6);
v8 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getKey()>();
v9 = virtualinvoke v8.<java.lang.Integer: int intValue()>();
if v9 != v1 goto label2;
v10 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getValue()>();
return v10;
label2:
v11 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getValue()>();
v12 = virtualinvoke v8.<java.lang.Integer: int intValue()>();
v13 = v1 - v12;
v14 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: java.math.BigInteger computePowerOfTen(java.util.NavigableMap,int)>(v0, v13);
v15 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: java.math.BigInteger multiply(java.math.BigInteger,java.math.BigInteger)>(v11, v14);
return v15;
label3:
v16 = <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: java.math.BigInteger FIVE>;
v17 = virtualinvoke v16.<java.math.BigInteger: java.math.BigInteger pow(int)>(v1);
v18 = virtualinvoke v17.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(v1);
return v18;
}
static java.math.BigInteger computeTenRaisedByNFloor16Recursive(java.util.NavigableMap, int)
{
java.util.Map$Entry v5;
java.util.NavigableMap v0;
java.lang.Integer v10, v12, v4;
int v1, v2, v3, v7, v9;
java.lang.Object v11, v6, v8;
java.math.BigInteger v13;
v0 := @parameter0: java.util.NavigableMap;
v1 := @parameter1: int;
v2 = (int) -16;
v3 = v1 & v2;
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v5 = interfaceinvoke v0.<java.util.NavigableMap: java.util.Map$Entry floorEntry(java.lang.Object)>(v4);
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = virtualinvoke v6.<java.lang.Integer: int intValue()>();
v8 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
if v7 != v3 goto label1;
return v8;
label1:
v9 = v3 - v7;
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v9);
v11 = interfaceinvoke v0.<java.util.NavigableMap: java.lang.Object get(java.lang.Object)>(v10);
if v11 != null goto label2;
v11 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: java.math.BigInteger computeTenRaisedByNFloor16Recursive(java.util.NavigableMap,int)>(v0, v9);
v12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v9);
interfaceinvoke v0.<java.util.NavigableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v12, v11);
label2:
v13 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: java.math.BigInteger multiply(java.math.BigInteger,java.math.BigInteger)>(v8, v11);
return v13;
}
static java.util.NavigableMap createPowersOfTenFloor16Map()
{
java.util.TreeMap v0;
java.math.BigInteger v2, v4;
java.lang.Integer v1, v3;
v0 = new java.util.TreeMap;
specialinvoke v0.<java.util.TreeMap: void <init>()>();
v1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
v2 = <java.math.BigInteger: java.math.BigInteger ONE>;
interfaceinvoke v0.<java.util.NavigableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16);
v4 = <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: java.math.BigInteger TEN_POW_16>;
interfaceinvoke v0.<java.util.NavigableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, v4);
return v0;
}
public static long estimateNumBits(long)
{
long v0, v1, v2, v3;
v0 := @parameter0: long;
v1 = v0 * 3402L;
v2 = v1 >>> 10;
v3 = v2 + 1L;
return v3;
}
static java.util.NavigableMap fillPowersOf10Floor16(int, int)
{
java.util.Iterator v8;
java.util.Set v7;
java.lang.Integer v3, v5;
java.util.TreeMap v2;
int v0, v1, v13;
java.lang.Object v10, v11, v12;
java.math.BigInteger v14, v4, v6;
boolean v9;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 = new java.util.TreeMap;
specialinvoke v2.<java.util.TreeMap: void <init>()>();
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
v4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(5L);
interfaceinvoke v2.<java.util.NavigableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, v4);
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16);
v6 = <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: java.math.BigInteger FIVE_POW_16>;
interfaceinvoke v2.<java.util.NavigableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v5, v6);
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: void fillPowersOfNFloor16Recursive(java.util.NavigableMap,int,int)>(v2, v0, v1);
v7 = interfaceinvoke v2.<java.util.NavigableMap: java.util.Set entrySet()>();
v8 = interfaceinvoke v7.<java.util.Set: java.util.Iterator iterator()>();
label1:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label2;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = interfaceinvoke v10.<java.util.Map$Entry: java.lang.Object getValue()>();
v12 = interfaceinvoke v10.<java.util.Map$Entry: java.lang.Object getKey()>();
v13 = virtualinvoke v12.<java.lang.Integer: int intValue()>();
v14 = virtualinvoke v11.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(v13);
interfaceinvoke v10.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(v14);
goto label1;
label2:
return v2;
}
static void fillPowersOfNFloor16Recursive(java.util.NavigableMap, int, int)
{
java.util.NavigableMap v0;
java.lang.Integer v6, v8;
int v1, v2, v3, v4, v5;
java.math.BigInteger v9;
boolean v7;
v0 := @parameter0: java.util.NavigableMap;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = v2 - v1;
if v3 > 18 goto label1;
return;
label1:
v4 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: int splitFloor16(int,int)>(v1, v2);
v5 = v2 - v4;
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v5);
v7 = interfaceinvoke v0.<java.util.NavigableMap: boolean containsKey(java.lang.Object)>(v6);
if v7 != 0 goto label2;
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: void fillPowersOfNFloor16Recursive(java.util.NavigableMap,int,int)>(v0, v1, v4);
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: void fillPowersOfNFloor16Recursive(java.util.NavigableMap,int,int)>(v0, v4, v2);
v8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v5);
v9 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: java.math.BigInteger computeTenRaisedByNFloor16Recursive(java.util.NavigableMap,int)>(v0, v5);
interfaceinvoke v0.<java.util.NavigableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v8, v9);
label2:
return;
}
static com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath$UInt128 fullMultiplication(long, long)
{
long v0, v1, v10, v11, v12, v13, v15, v16, v17, v18, v19, v2, v20, v21, v3, v4, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath$UInt128 v14;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 = v0 & 4294967295L;
v3 = v0 >>> 32;
v4 = v1 & 4294967295L;
v5 = v1 >>> 32;
v6 = v3 * v5;
v7 = v2 * v5;
v8 = v3 * v4;
v9 = v2 * v4;
v10 = v9 >>> 32;
v11 = v8 + v10;
v12 = v7 & 4294967295L;
v13 = v11 + v12;
v14 = new com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath$UInt128;
v15 = v13 >>> 32;
v16 = v6 + v15;
v17 = v7 >>> 32;
v18 = v16 + v17;
v19 = v13 << 32;
v20 = v9 & 4294967295L;
v21 = v19 | v20;
specialinvoke v14.<com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath$UInt128: void <init>(long,long)>(v18, v21);
return v14;
}
static int splitFloor16(int, int)
{
int v0, v1, v2, v3, v4, v5, v6, v7, v8;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 = v0 + v1;
v3 = v2 >>> 1;
v4 = v1 - v3;
v5 = v4 + 15;
v6 = v5 >> 4;
v7 = v6 << 4;
v8 = v1 - v7;
return v8;
}
static void <clinit>()
{
java.math.BigInteger v0, v1, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v2, v4, v5, v6, v7, v8, v9;
java.math.BigInteger[] v3;
v0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(5L);
<com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: java.math.BigInteger FIVE> = v0;
v1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(10000000000000000L);
<com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: java.math.BigInteger TEN_POW_16> = v1;
v2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(152587890625L);
<com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: java.math.BigInteger FIVE_POW_16> = v2;
v3 = newarray (java.math.BigInteger)[16];
v4 = <java.math.BigInteger: java.math.BigInteger ONE>;
v3[0] = v4;
v5 = <java.math.BigInteger: java.math.BigInteger TEN>;
v3[1] = v5;
v6 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(100L);
v3[2] = v6;
v7 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1000L);
v3[3] = v7;
v8 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(10000L);
v3[4] = v8;
v9 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(100000L);
v3[5] = v9;
v10 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1000000L);
v3[6] = v10;
v11 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(10000000L);
v3[7] = v11;
v12 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(100000000L);
v3[8] = v12;
v13 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1000000000L);
v3[9] = v13;
v14 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(10000000000L);
v3[10] = v14;
v15 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(100000000000L);
v3[11] = v15;
v16 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1000000000000L);
v3[12] = v16;
v17 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(10000000000000L);
v3[13] = v17;
v18 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(100000000000000L);
v3[14] = v18;
v19 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1000000000000000L);
v3[15] = v19;
<com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: java.math.BigInteger[] SMALL_POWERS_OF_TEN> = v3;
return;
}
}