final class com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray extends com.fasterxml.jackson.core.io.doubleparser.AbstractNumberParser
{
public static final int MAX_INPUT_LENGTH;
public static final int MANY_DIGITS_THRESHOLD;
private static final long MAX_EXPONENT_NUMBER;
private static final int MAX_DIGIT_COUNT;
public void <init>()
{
com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray;
specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractNumberParser: void <init>()>();
return;
}
public java.math.BigDecimal parseBigDecimalString(byte[], int, int)
{
byte[] v1;
java.math.BigDecimal v4, v46, v48, v50;
byte v10, v30, v32, v38, v43, v44;
java.lang.ArithmeticException v51;
boolean v11, v12, v13, v16, v19, v20, v33, v34, v35, v36, v37, v41;
long v17, v18, v24, v29, v39, v40, v47, v5;
com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray v0;
int v15, v2, v21, v22, v23, v25, v26, v27, v28, v3, v31, v49, v6, v7, v8, v9;
java.lang.NumberFormatException v14, v42, v45, v52;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
label01:
if v3 < 32 goto label03;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray: java.math.BigDecimal parseBigDecimalStringWithManyDigits(byte[],int,int)>(v1, v2, v3);
label02:
return v4;
label03:
v5 = 0L;
v6 = (int) -1;
v7 = v6;
v8 = v2 + v3;
v9 = v2;
v10 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray: byte charAt(byte[],int,int)>(v1, v2, v8);
v11 = 0;
if v10 != 45 goto label04;
v12 = 1;
goto label05;
label04:
v12 = 0;
label05:
v13 = v12;
if v12 != 0 goto label06;
if v10 != 43 goto label07;
label06:
v9 = v2 + 1;
v10 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray: byte charAt(byte[],int,int)>(v1, v9, v8);
if v10 != 0 goto label07;
v14 = new java.lang.NumberFormatException;
specialinvoke v14.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v14;
label07:
v15 = v9;
label08:
if v9 >= v8 goto label14;
v10 = v1[v9];
v16 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(byte)>(v10);
if v16 == 0 goto label09;
v17 = 10L * v5;
v18 = v17 + v10;
v5 = v18 - 48L;
goto label13;
label09:
if v10 != 46 goto label14;
v19 = v11;
if v7 < 0 goto label10;
v20 = 1;
goto label11;
label10:
v20 = 0;
label11:
v11 = v19 | v20;
v7 = v9;
label12:
v21 = v8 - 4;
if v9 >= v21 goto label13;
v22 = v9 + 1;
v23 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: int tryToParseFourDigits(byte[],int)>(v1, v22);
if v23 < 0 goto label13;
v24 = 10000L * v5;
v5 = v24 + v23;
v9 = v9 + 4;
goto label12;
label13:
v9 = v9 + 1;
goto label08;
label14:
if v7 >= 0 goto label15;
v25 = v9 - v15;
v7 = v9;
goto label16;
label15:
v26 = v9 - v15;
v25 = v26 - 1;
v27 = v7 - v9;
v28 = v27 + 1;
label16:
v29 = 0L;
v30 = v10 | 32;
if v30 != 101 goto label26;
v31 = v9;
v9 = v9 + 1;
v32 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray: byte charAt(byte[],int,int)>(v1, v9, v8);
if v32 != 45 goto label17;
v33 = 1;
goto label18;
label17:
v33 = 0;
label18:
v34 = v33;
if v33 != 0 goto label19;
if v32 != 43 goto label20;
label19:
v9 = v9 + 1;
v32 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray: byte charAt(byte[],int,int)>(v1, v9, v8);
label20:
v35 = v11;
v36 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(byte)>(v32);
if v36 != 0 goto label21;
v37 = 1;
goto label22;
label21:
v37 = 0;
label22:
v11 = v35 | v37;
label23:
v38 = v29 cmp 2147483647L;
if v38 >= 0 goto label24;
v39 = 10L * v29;
v40 = v39 + v32;
v29 = v40 - 48L;
label24:
v9 = v9 + 1;
v32 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray: byte charAt(byte[],int,int)>(v1, v9, v8);
v41 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(byte)>(v32);
if v41 != 0 goto label23;
if v34 == 0 goto label25;
v29 = neg v29;
label25:
v28 = v28 + v29;
goto label27;
label26:
v31 = v8;
label27:
if v11 != 0 goto label28;
if v9 < v8 goto label28;
if v25 == 0 goto label28;
if v25 <= 1292782621 goto label29;
label28:
v42 = new java.lang.NumberFormatException;
specialinvoke v42.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v42;
label29:
v43 = v28 cmp -2147483648L;
if v43 <= 0 goto label30;
v44 = v28 cmp 2147483647L;
if v44 <= 0 goto label31;
label30:
v45 = new java.lang.NumberFormatException;
specialinvoke v45.<java.lang.NumberFormatException: void <init>(java.lang.String)>("value exceeds limits");
throw v45;
label31:
if v25 > 18 goto label35;
v46 = new java.math.BigDecimal;
if v13 == 0 goto label32;
v47 = neg v5;
goto label33;
label32:
v47 = v5;
label33:
specialinvoke v46.<java.math.BigDecimal: void <init>(long)>(v47);
v48 = virtualinvoke v46.<java.math.BigDecimal: java.math.BigDecimal scaleByPowerOfTen(int)>(0L);
label34:
return v48;
label35:
v49 = v7 + 1;
v50 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray: java.math.BigDecimal valueOfBigDecimalString(byte[],int,int,int,int,boolean,int)>(v1, v15, v7, v49, v31, v13, 0L);
label36:
return v50;
label37:
v51 := @caughtexception;
v52 = new java.lang.NumberFormatException;
specialinvoke v52.<java.lang.NumberFormatException: void <init>(java.lang.String)>("value exceeds limits");
virtualinvoke v52.<java.lang.NumberFormatException: java.lang.Throwable initCause(java.lang.Throwable)>(v51);
throw v52;
catch java.lang.ArithmeticException from label01 to label02 with label37;
catch java.lang.ArithmeticException from label03 to label34 with label37;
catch java.lang.ArithmeticException from label35 to label36 with label37;
}
java.math.BigDecimal parseBigDecimalStringWithManyDigits(byte[], int, int)
{
byte[] v1;
java.math.BigDecimal v57;
byte v11, v19, v23, v28, v31, v40, v42, v47, v54, v55;
boolean v12, v13, v14, v18, v22, v24, v27, v30, v32, v43, v44, v45, v46, v50;
long v39, v48, v49;
com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray v0;
int v10, v16, v17, v2, v20, v21, v25, v26, v29, v3, v33, v34, v35, v36, v37, v38, v41, v5, v52, v6, v7, v8, v9;
java.lang.NumberFormatException v15, v4, v51, v53, v56;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
if v3 <= 1292782635 goto label01;
v4 = new java.lang.NumberFormatException;
specialinvoke v4.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v4;
label01:
v5 = (int) -1;
v6 = v5;
v7 = (int) -1;
v8 = v7;
v9 = v2 + v3;
v10 = v2;
v11 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray: byte charAt(byte[],int,int)>(v1, v2, v9);
v12 = 0;
if v11 != 45 goto label02;
v13 = 1;
goto label03;
label02:
v13 = 0;
label03:
v14 = v13;
if v13 != 0 goto label04;
if v11 != 43 goto label05;
label04:
v10 = v2 + 1;
v11 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray: byte charAt(byte[],int,int)>(v1, v10, v9);
if v11 != 0 goto label05;
v15 = new java.lang.NumberFormatException;
specialinvoke v15.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v15;
label05:
v16 = v10;
label06:
v17 = v9 - 8;
if v10 >= v17 goto label07;
v18 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isEightZeroes(byte[],int)>(v1, v10);
if v18 == 0 goto label07;
v10 = v10 + 8;
goto label06;
label07:
if v10 >= v9 goto label08;
v19 = v1[v10];
if v19 != 48 goto label08;
v10 = v10 + 1;
goto label07;
label08:
v20 = v10;
label09:
v21 = v9 - 8;
if v10 >= v21 goto label10;
v22 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isEightDigits(byte[],int)>(v1, v10);
if v22 == 0 goto label10;
v10 = v10 + 8;
goto label09;
label10:
if v10 >= v9 goto label11;
v23 = v1[v10];
v11 = v23;
v24 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(byte)>(v23);
if v24 == 0 goto label11;
v10 = v10 + 1;
goto label10;
label11:
if v11 != 46 goto label17;
v25 = v10;
v10 = v10 + 1;
v6 = v25;
label12:
v26 = v9 - 8;
if v10 >= v26 goto label13;
v27 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isEightZeroes(byte[],int)>(v1, v10);
if v27 == 0 goto label13;
v10 = v10 + 8;
goto label12;
label13:
if v10 >= v9 goto label14;
v28 = v1[v10];
if v28 != 48 goto label14;
v10 = v10 + 1;
goto label13;
label14:
v8 = v10;
label15:
v29 = v9 - 8;
if v10 >= v29 goto label16;
v30 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isEightDigits(byte[],int)>(v1, v10);
if v30 == 0 goto label16;
v10 = v10 + 8;
goto label15;
label16:
if v10 >= v9 goto label17;
v31 = v1[v10];
v11 = v31;
v32 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(byte)>(v31);
if v32 == 0 goto label17;
v10 = v10 + 1;
goto label16;
label17:
v33 = v10;
if v6 >= 0 goto label18;
v34 = v10 - v20;
v6 = v10;
v8 = v10;
goto label21;
label18:
if v20 != v6 goto label19;
v35 = v10 - v8;
goto label20;
label19:
v36 = v10 - v20;
v35 = v36 - 1;
label20:
v34 = v35;
v37 = v6 - v33;
v38 = v37 + 1;
label21:
v39 = 0L;
v40 = v11 | 32;
if v40 != 101 goto label31;
v41 = v10;
v10 = v10 + 1;
v42 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray: byte charAt(byte[],int,int)>(v1, v10, v9);
if v42 != 45 goto label22;
v43 = 1;
goto label23;
label22:
v43 = 0;
label23:
v44 = v43;
if v43 != 0 goto label24;
if v42 != 43 goto label25;
label24:
v10 = v10 + 1;
v42 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray: byte charAt(byte[],int,int)>(v1, v10, v9);
label25:
v45 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(byte)>(v42);
if v45 != 0 goto label26;
v46 = 1;
goto label27;
label26:
v46 = 0;
label27:
v12 = v46;
label28:
v47 = v39 cmp 2147483647L;
if v47 >= 0 goto label29;
v48 = 10L * v39;
v49 = v48 + v42;
v39 = v49 - 48L;
label29:
v10 = v10 + 1;
v42 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray: byte charAt(byte[],int,int)>(v1, v10, v9);
v50 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(byte)>(v42);
if v50 != 0 goto label28;
if v44 == 0 goto label30;
v39 = neg v39;
label30:
v38 = v38 + v39;
goto label32;
label31:
v41 = v9;
label32:
if v12 != 0 goto label33;
if v10 >= v9 goto label34;
label33:
v51 = new java.lang.NumberFormatException;
specialinvoke v51.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v51;
label34:
v52 = v41 - v16;
if v52 != 0 goto label35;
v53 = new java.lang.NumberFormatException;
specialinvoke v53.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v53;
label35:
v54 = v38 cmp -2147483648L;
if v54 < 0 goto label36;
v55 = v38 cmp 2147483647L;
if v55 > 0 goto label36;
if v34 <= 1292782621 goto label37;
label36:
v56 = new java.lang.NumberFormatException;
specialinvoke v56.<java.lang.NumberFormatException: void <init>(java.lang.String)>("value exceeds limits");
throw v56;
label37:
v57 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray: java.math.BigDecimal valueOfBigDecimalString(byte[],int,int,int,int,boolean,int)>(v1, v20, v6, v8, v41, v14, 0L);
return v57;
}
private java.math.BigDecimal valueOfBigDecimalString(byte[], int, int, int, int, boolean, int)
{
byte[] v1;
java.math.BigDecimal v19;
com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray v0;
int v10, v11, v15, v2, v21, v3, v4, v5, v7, v8, v9;
java.math.BigInteger v13, v14, v16, v17, v18, v20;
boolean v6;
java.util.NavigableMap v12;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalFromByteArray;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 := @parameter5: boolean;
v7 := @parameter6: int;
v8 = v5 - v3;
v9 = v8 - 1;
v10 = v5 - v4;
v11 = v3 - v2;
v12 = null;
if v11 <= 0 goto label02;
if v11 <= 400 goto label01;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: java.util.NavigableMap createPowersOfTenFloor16Map()>();
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: void fillPowersOfNFloor16Recursive(java.util.NavigableMap,int,int)>(v12, v2, v3);
v13 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.ParseDigitsTaskByteArray: java.math.BigInteger parseDigitsRecursive(byte[],int,int,java.util.Map)>(v1, v2, v3, v12);
goto label03;
label01:
v13 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.ParseDigitsTaskByteArray: java.math.BigInteger parseDigitsRecursive(byte[],int,int,java.util.Map)>(v1, v2, v3, null);
goto label03;
label02:
v13 = <java.math.BigInteger: java.math.BigInteger ZERO>;
label03:
if v9 <= 0 goto label08;
if v10 <= 400 goto label05;
if v12 != null goto label04;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: java.util.NavigableMap createPowersOfTenFloor16Map()>();
label04:
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: void fillPowersOfNFloor16Recursive(java.util.NavigableMap,int,int)>(v12, v4, v5);
v14 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.ParseDigitsTaskByteArray: java.math.BigInteger parseDigitsRecursive(byte[],int,int,java.util.Map)>(v1, v4, v5, v12);
goto label06;
label05:
v14 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.ParseDigitsTaskByteArray: java.math.BigInteger parseDigitsRecursive(byte[],int,int,java.util.Map)>(v1, v4, v5, null);
label06:
v15 = virtualinvoke v13.<java.math.BigInteger: int signum()>();
if v15 != 0 goto label07;
v16 = v14;
goto label09;
label07:
v17 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: java.math.BigInteger computePowerOfTen(java.util.NavigableMap,int)>(v12, v9);
v18 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: java.math.BigInteger multiply(java.math.BigInteger,java.math.BigInteger)>(v13, v17);
v16 = virtualinvoke v18.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(v14);
goto label09;
label08:
v16 = v13;
label09:
v19 = new java.math.BigDecimal;
if v6 == 0 goto label10;
v20 = virtualinvoke v16.<java.math.BigInteger: java.math.BigInteger negate()>();
goto label11;
label10:
v20 = v16;
label11:
v21 = neg v7;
specialinvoke v19.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>(v20, v21);
return v19;
}
}