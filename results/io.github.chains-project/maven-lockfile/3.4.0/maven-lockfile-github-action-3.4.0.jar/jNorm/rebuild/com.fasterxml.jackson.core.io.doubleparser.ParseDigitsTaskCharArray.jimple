class com.fasterxml.jackson.core.io.doubleparser.ParseDigitsTaskCharArray extends java.lang.Object
{
static final int RECURSION_THRESHOLD;
private void <init>()
{
com.fasterxml.jackson.core.io.doubleparser.ParseDigitsTaskCharArray v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.ParseDigitsTaskCharArray;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static java.math.BigInteger parseDigitsIterative(char[], int, int)
{
long v5;
com.fasterxml.jackson.core.io.doubleparser.BigSignificand v4;
int v1, v11, v12, v2, v3, v6, v7, v8;
java.math.BigInteger v16;
boolean v10, v13, v14, v9;
java.lang.NumberFormatException v15;
char[] v0;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = v2 - v1;
v4 = new com.fasterxml.jackson.core.io.doubleparser.BigSignificand;
v5 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: long estimateNumBits(long)>(v3);
specialinvoke v4.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: void <init>(long)>(v5);
v6 = v3 & 7;
v7 = v1 + v6;
v8 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: int tryToParseUpTo7Digits(char[],int,int)>(v0, v1, v7);
if v8 < 0 goto label1;
v9 = 1;
goto label2;
label1:
v9 = 0;
label2:
v10 = v9;
virtualinvoke v4.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: void add(int)>(v8);
v11 = v7;
label3:
if v11 >= v2 goto label6;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: int tryToParseEightDigits(char[],int)>(v0, v11);
v13 = v10;
if v12 < 0 goto label4;
v14 = 1;
goto label5;
label4:
v14 = 0;
label5:
v10 = v13 & v14;
virtualinvoke v4.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: void fma(int,int)>(100000000, v12);
v11 = v11 + 8;
goto label3;
label6:
if v10 != 0 goto label7;
v15 = new java.lang.NumberFormatException;
specialinvoke v15.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v15;
label7:
v16 = virtualinvoke v4.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: java.math.BigInteger toBigInteger()>();
return v16;
}
static java.math.BigInteger parseDigitsRecursive(char[], int, int, java.util.Map)
{
java.lang.Integer v10;
java.util.Map v3;
int v1, v2, v4, v6, v9;
char[] v0;
java.lang.Object v11;
java.math.BigInteger v12, v13, v5, v7, v8;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: java.util.Map;
v4 = v2 - v1;
if v4 > 400 goto label1;
v5 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.ParseDigitsTaskCharArray: java.math.BigInteger parseDigitsIterative(char[],int,int)>(v0, v1, v2);
return v5;
label1:
v6 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: int splitFloor16(int,int)>(v1, v2);
v7 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.ParseDigitsTaskCharArray: java.math.BigInteger parseDigitsRecursive(char[],int,int,java.util.Map)>(v0, v1, v6, v3);
v8 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.ParseDigitsTaskCharArray: java.math.BigInteger parseDigitsRecursive(char[],int,int,java.util.Map)>(v0, v6, v2, v3);
v9 = v2 - v6;
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v9);
v11 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v10);
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: java.math.BigInteger multiply(java.math.BigInteger,java.math.BigInteger)>(v7, v11);
v13 = virtualinvoke v8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(v12);
return v13;
}
}