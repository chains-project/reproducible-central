public class com.fasterxml.jackson.core.json.UTF8DataInputJsonParser extends com.fasterxml.jackson.core.base.ParserBase
{
private static final int FEAT_MASK_TRAILING_COMMA;
private static final int FEAT_MASK_LEADING_ZEROS;
private static final int FEAT_MASK_NON_NUM_NUMBERS;
private static final int FEAT_MASK_ALLOW_MISSING;
private static final int FEAT_MASK_ALLOW_SINGLE_QUOTES;
private static final int FEAT_MASK_ALLOW_UNQUOTED_NAMES;
private static final int FEAT_MASK_ALLOW_JAVA_COMMENTS;
private static final int FEAT_MASK_ALLOW_YAML_COMMENTS;
private static final int[] _icUTF8;
protected static final int[] _icLatin1;
protected com.fasterxml.jackson.core.ObjectCodec _objectCodec;
protected final com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols;
protected int[] _quadBuffer;
protected boolean _tokenIncomplete;
private int _quad1;
protected java.io.DataInput _inputData;
protected int _nextByte;
public void <init>(com.fasterxml.jackson.core.io.IOContext, int, java.io.DataInput, com.fasterxml.jackson.core.ObjectCodec, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer, int)
{
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v5;
com.fasterxml.jackson.core.ObjectCodec v4;
int[] v7;
com.fasterxml.jackson.core.io.IOContext v1;
int v2, v6, v8;
java.io.DataInput v3;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.io.IOContext;
v2 := @parameter1: int;
v3 := @parameter2: java.io.DataInput;
v4 := @parameter3: com.fasterxml.jackson.core.ObjectCodec;
v5 := @parameter4: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
v6 := @parameter5: int;
specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: void <init>(com.fasterxml.jackson.core.io.IOContext,int)>(v1, v2);
v7 = newarray (int)[16];
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = v7;
v8 = (int) -1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = v8;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.ObjectCodec _objectCodec> = v4;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols> = v5;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData> = v3;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = v6;
return;
}
public com.fasterxml.jackson.core.ObjectCodec getCodec()
{
com.fasterxml.jackson.core.ObjectCodec v1;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.ObjectCodec _objectCodec>;
return v1;
}
public void setCodec(com.fasterxml.jackson.core.ObjectCodec)
{
com.fasterxml.jackson.core.ObjectCodec v1;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.ObjectCodec;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.ObjectCodec _objectCodec> = v1;
return;
}
public com.fasterxml.jackson.core.util.JacksonFeatureSet getReadCapabilities()
{
com.fasterxml.jackson.core.util.JacksonFeatureSet v1;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.JacksonFeatureSet JSON_READ_CAPABILITIES>;
return v1;
}
public int releaseBuffered(java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v1;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: java.io.OutputStream;
return 0;
}
public java.lang.Object getInputSource()
{
java.io.DataInput v1;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
return v1;
}
protected void _closeInput() throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
return;
}
protected void _releaseBuffers() throws java.io.IOException
{
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v1;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: void _releaseBuffers()>();
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
virtualinvoke v1.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void release()>();
return;
}
public java.lang.String getText() throws java.io.IOException
{
com.fasterxml.jackson.core.util.TextBuffer v5;
com.fasterxml.jackson.core.JsonToken v1, v2, v7;
java.lang.String v4, v6, v8;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v1 != v2 goto label2;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;
if v3 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _finishAndReturnString()>();
return v4;
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v6;
label2:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _getText2(com.fasterxml.jackson.core.JsonToken)>(v7);
return v8;
}
public int getText(java.io.Writer) throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadContext v8;
int v10, v13, v15, v6;
com.fasterxml.jackson.core.JsonToken v2, v3, v7;
java.lang.String v9;
boolean v11, v4;
com.fasterxml.jackson.core.util.TextBuffer v12, v5;
java.io.Writer v1;
char[] v14;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: java.io.Writer;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v2 != v3 goto label2;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;
if v4 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _finishString()>();
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.util.TextBuffer: int contentsToWriter(java.io.Writer)>(v1);
return v6;
label2:
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v2 != v7 goto label3;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();
virtualinvoke v1.<java.io.Writer: void write(java.lang.String)>(v9);
v10 = virtualinvoke v9.<java.lang.String: int length()>();
return v10;
label3:
if v2 == null goto label5;
v11 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: boolean isNumeric()>();
if v11 == 0 goto label4;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v13 = virtualinvoke v12.<com.fasterxml.jackson.core.util.TextBuffer: int contentsToWriter(java.io.Writer)>(v1);
return v13;
label4:
v14 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>();
virtualinvoke v1.<java.io.Writer: void write(char[])>(v14);
v15 = lengthof v14;
return v15;
label5:
return 0;
}
public java.lang.String getValueAsString() throws java.io.IOException
{
com.fasterxml.jackson.core.util.TextBuffer v5;
com.fasterxml.jackson.core.JsonToken v1, v2, v7, v8;
java.lang.String v10, v4, v6, v9;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v1 != v2 goto label2;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;
if v3 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _finishAndReturnString()>();
return v4;
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v6;
label2:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v7 != v8 goto label3;
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String getCurrentName()>();
return v9;
label3:
v10 = specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: java.lang.String getValueAsString(java.lang.String)>(null);
return v10;
}
public java.lang.String getValueAsString(java.lang.String) throws java.io.IOException
{
com.fasterxml.jackson.core.util.TextBuffer v6;
com.fasterxml.jackson.core.JsonToken v2, v3, v8, v9;
java.lang.String v1, v10, v11, v5, v7;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
boolean v4;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v2 != v3 goto label2;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;
if v4 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _finishAndReturnString()>();
return v5;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v7 = virtualinvoke v6.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v7;
label2:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v9 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v8 != v9 goto label3;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String getCurrentName()>();
return v10;
label3:
v11 = specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: java.lang.String getValueAsString(java.lang.String)>(v1);
return v11;
}
public int getValueAsInt() throws java.io.IOException
{
int v10, v11, v4, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v1, v2, v3;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v1 == v2 goto label1;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
if v1 != v3 goto label4;
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numTypesValid>;
v5 = v4 & 1;
if v5 != 0 goto label3;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numTypesValid>;
if v6 != 0 goto label2;
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _parseIntValue()>();
return v7;
label2:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numTypesValid>;
v9 = v8 & 1;
if v9 != 0 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void convertNumberToInt()>();
label3:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numberInt>;
return v10;
label4:
v11 = specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: int getValueAsInt(int)>(0);
return v11;
}
public int getValueAsInt(int) throws java.io.IOException
{
int v1, v10, v11, v12, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v2, v3, v4;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v2 == v3 goto label1;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
if v2 != v4 goto label4;
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numTypesValid>;
v6 = v5 & 1;
if v6 != 0 goto label3;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numTypesValid>;
if v7 != 0 goto label2;
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _parseIntValue()>();
return v8;
label2:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numTypesValid>;
v10 = v9 & 1;
if v10 != 0 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void convertNumberToInt()>();
label3:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numberInt>;
return v11;
label4:
v12 = specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: int getValueAsInt(int)>(v1);
return v12;
}
protected final java.lang.String _getText2(com.fasterxml.jackson.core.JsonToken) throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadContext v3;
com.fasterxml.jackson.core.util.TextBuffer v5;
int v2;
com.fasterxml.jackson.core.JsonToken v1;
java.lang.String v4, v6, v7;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.JsonToken;
if v1 != null goto label1;
return null;
label1:
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v2)
{
case 5: goto label2;
case 6: goto label3;
case 7: goto label3;
case 8: goto label3;
default: goto label4;
};
label2:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();
return v4;
label3:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v6;
label4:
v7 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonToken: java.lang.String asString()>();
return v7;
}
public char[] getTextCharacters() throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadContext v5;
int v12, v3, v7;
com.fasterxml.jackson.core.JsonToken v1, v19, v2;
java.lang.String v6;
boolean v16, v4;
com.fasterxml.jackson.core.util.TextBuffer v17;
com.fasterxml.jackson.core.io.IOContext v9;
char[] v10, v11, v13, v14, v15, v18, v20, v8;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
if v1 == null goto label8;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v3)
{
case 5: goto label1;
case 6: goto label5;
case 7: goto label6;
case 8: goto label6;
default: goto label7;
};
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _nameCopied>;
if v4 != 0 goto label4;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();
v7 = virtualinvoke v6.<java.lang.String: int length()>();
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char[] _nameCopyBuffer>;
if v8 != null goto label2;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
v10 = virtualinvoke v9.<com.fasterxml.jackson.core.io.IOContext: char[] allocNameCopyBuffer(int)>(v7);
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char[] _nameCopyBuffer> = v10;
goto label3;
label2:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char[] _nameCopyBuffer>;
v12 = lengthof v11;
if v12 >= v7 goto label3;
v13 = newarray (char)[v7];
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char[] _nameCopyBuffer> = v13;
label3:
v14 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char[] _nameCopyBuffer>;
virtualinvoke v6.<java.lang.String: void getChars(int,int,char[],int)>(0, v7, v14, 0);
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _nameCopied> = 1;
label4:
v15 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char[] _nameCopyBuffer>;
return v15;
label5:
v16 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;
if v16 == 0 goto label6;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _finishString()>();
label6:
v17 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v18 = virtualinvoke v17.<com.fasterxml.jackson.core.util.TextBuffer: char[] getTextBuffer()>();
return v18;
label7:
v19 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v20 = virtualinvoke v19.<com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>();
return v20;
label8:
return null;
}
public int getTextLength() throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadContext v8;
int v10, v15, v18, v5;
com.fasterxml.jackson.core.JsonToken v1, v11, v12, v16, v2, v6, v7;
java.lang.String v9;
boolean v13, v3;
com.fasterxml.jackson.core.util.TextBuffer v14, v4;
char[] v17;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v1 != v2 goto label2;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;
if v3 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _finishString()>();
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.util.TextBuffer: int size()>();
return v5;
label2:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v6 != v7 goto label3;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();
v10 = virtualinvoke v9.<java.lang.String: int length()>();
return v10;
label3:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
if v11 == null goto label5;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v13 = virtualinvoke v12.<com.fasterxml.jackson.core.JsonToken: boolean isNumeric()>();
if v13 == 0 goto label4;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v15 = virtualinvoke v14.<com.fasterxml.jackson.core.util.TextBuffer: int size()>();
return v15;
label4:
v16 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v17 = virtualinvoke v16.<com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>();
v18 = lengthof v17;
return v18;
label5:
return 0;
}
public int getTextOffset() throws java.io.IOException
{
int v3, v6;
com.fasterxml.jackson.core.JsonToken v1, v2;
com.fasterxml.jackson.core.util.TextBuffer v5;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
boolean v4;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
if v1 == null goto label4;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v3)
{
case 5: goto label1;
case 6: goto label2;
case 7: goto label3;
case 8: goto label3;
default: goto label4;
};
label1:
return 0;
label2:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;
if v4 == 0 goto label3;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _finishString()>();
label3:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.util.TextBuffer: int getTextOffset()>();
return v6;
label4:
return 0;
}
public byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException
{
byte[] v10, v15, v18, v19, v6;
com.fasterxml.jackson.core.JsonToken v2, v3, v4, v5, v7;
java.lang.String v12, v13, v17, v8;
com.fasterxml.jackson.core.JsonParseException v14;
boolean v9;
java.lang.IllegalArgumentException v11;
com.fasterxml.jackson.core.Base64Variant v1;
com.fasterxml.jackson.core.util.ByteArrayBuilder v16;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v2 == v3 goto label2;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_EMBEDDED_OBJECT>;
if v4 != v5 goto label1;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte[] _binaryValue>;
if v6 != null goto label2;
label1:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.fasterxml.jackson.core.JsonToken)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Current token (\u0001) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportError(java.lang.String)>(v8);
label2:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;
if v9 == 0 goto label7;
label3:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte[] _decodeBase64(com.fasterxml.jackson.core.Base64Variant)>(v1);
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte[] _binaryValue> = v10;
label4:
goto label6;
label5:
v11 := @caughtexception;
v12 = virtualinvoke v11.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.fasterxml.jackson.core.Base64Variant,java.lang.String)>(v1, v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to decode VALUE_STRING as base64 (\u0001): \u0001");
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>(v13);
throw v14;
label6:
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;
goto label8;
label7:
v15 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte[] _binaryValue>;
if v15 != null goto label8;
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.ByteArrayBuilder _getByteArrayBuilder()>();
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String getText()>();
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)>(v17, v16, v1);
v18 = virtualinvoke v16.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte[] _binaryValue> = v18;
label8:
v19 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte[] _binaryValue>;
return v19;
catch java.lang.IllegalArgumentException from label3 to label4 with label5;
}
public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v2;
java.lang.Throwable v12;
byte[] v6, v9;
com.fasterxml.jackson.core.Base64Variant v1;
com.fasterxml.jackson.core.io.IOContext v11, v13, v8;
int v10, v7;
com.fasterxml.jackson.core.JsonToken v4, v5;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: java.io.OutputStream;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;
if v3 == 0 goto label1;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v4 == v5 goto label2;
label1:
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant)>(v1);
virtualinvoke v2.<java.io.OutputStream: void write(byte[])>(v6);
v7 = lengthof v6;
return v7;
label2:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.io.IOContext: byte[] allocBase64Buffer()>();
label3:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _readBinary(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream,byte[])>(v1, v2, v9);
label4:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
virtualinvoke v11.<com.fasterxml.jackson.core.io.IOContext: void releaseBase64Buffer(byte[])>(v9);
return v10;
label5:
v12 := @caughtexception;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
virtualinvoke v13.<com.fasterxml.jackson.core.io.IOContext: void releaseBase64Buffer(byte[])>(v9);
throw v12;
catch java.lang.Throwable from label3 to label4 with label5;
}
protected int _readBinary(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream, byte[]) throws java.io.IOException
{
byte[] v3;
boolean v23, v27, v44;
com.fasterxml.jackson.core.Base64Variant v1;
java.io.DataInput v12, v17, v25, v37, v8;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
int v10, v11, v13, v14, v15, v16, v18, v19, v20, v21, v22, v24, v26, v28, v29, v33, v34, v35, v36, v38, v39, v4, v40, v41, v42, v43, v45, v46, v47, v48, v49, v5, v50, v51, v52, v53, v54, v6, v7, v9;
java.lang.String v31;
java.io.OutputStream v2;
char v30;
java.lang.IllegalArgumentException v32;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: java.io.OutputStream;
v3 := @parameter2: byte[];
v4 = 0;
v5 = lengthof v3;
v6 = v5 - 3;
v7 = 0;
label01:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v9 = interfaceinvoke v8.<java.io.DataInput: int readUnsignedByte()>();
if v9 <= 32 goto label01;
v10 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(v9);
if v10 >= 0 goto label02;
if v9 == 34 goto label13;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v9, 0);
if v10 < 0 goto label01;
label02:
if v4 <= v6 goto label03;
v7 = v7 + v4;
virtualinvoke v2.<java.io.OutputStream: void write(byte[],int,int)>(v3, 0, v4);
v4 = 0;
label03:
v11 = v10;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v13 = interfaceinvoke v12.<java.io.DataInput: int readUnsignedByte()>();
v14 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(v13);
if v14 >= 0 goto label04;
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v13, 1);
label04:
v15 = v11 << 6;
v16 = v15 | v14;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v18 = interfaceinvoke v17.<java.io.DataInput: int readUnsignedByte()>();
v19 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(v18);
if v19 >= 0 goto label09;
v20 = (int) -2;
if v19 == v20 goto label06;
if v18 != 34 goto label05;
v21 = v16 >> 4;
v22 = v4;
v4 = v4 + 1;
v3[v22] = v21;
v23 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: boolean requiresPaddingOnRead()>();
if v23 == 0 goto label13;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)>(v1);
goto label13;
label05:
v19 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v18, 2);
label06:
v24 = (int) -2;
if v19 != v24 goto label09;
v25 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v26 = interfaceinvoke v25.<java.io.DataInput: int readUnsignedByte()>();
v27 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: boolean usesPaddingChar(int)>(v26);
if v27 != 0 goto label08;
if v26 != 92 goto label07;
v28 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v26, 3);
v29 = (int) -2;
if v28 == v29 goto label08;
label07:
v30 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>();
v31 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v30) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected padding character \'\u0001\'");
v32 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.IllegalArgumentException reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int,java.lang.String)>(v1, v26, 3, v31);
throw v32;
label08:
v33 = v16 >> 4;
v34 = v4;
v4 = v4 + 1;
v3[v34] = v33;
goto label01;
label09:
v35 = v16 << 6;
v36 = v35 | v19;
v37 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v38 = interfaceinvoke v37.<java.io.DataInput: int readUnsignedByte()>();
v39 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(v38);
if v39 >= 0 goto label12;
v40 = (int) -2;
if v39 == v40 goto label11;
if v38 != 34 goto label10;
v41 = v36 >> 2;
v42 = v4 + 1;
v43 = v41 >> 8;
v3[v4] = v43;
v4 = v42 + 1;
v3[v42] = v41;
v44 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: boolean requiresPaddingOnRead()>();
if v44 == 0 goto label13;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)>(v1);
goto label13;
label10:
v39 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v38, 3);
label11:
v45 = (int) -2;
if v39 != v45 goto label12;
v46 = v36 >> 2;
v47 = v4 + 1;
v48 = v46 >> 8;
v3[v4] = v48;
v4 = v47 + 1;
v3[v47] = v46;
goto label01;
label12:
v49 = v36 << 6;
v50 = v49 | v39;
v51 = v4 + 1;
v52 = v50 >> 16;
v3[v4] = v52;
v53 = v51 + 1;
v54 = v50 >> 8;
v3[v51] = v54;
v4 = v53 + 1;
v3[v53] = v50;
goto label01;
label13:
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;
if v4 <= 0 goto label14;
v7 = v7 + v4;
virtualinvoke v2.<java.io.OutputStream: void write(byte[],int,int)>(v3, 0, v4);
label14:
return v7;
}
public com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadFeature v28;
boolean v1, v10, v19, v30, v5;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v11, v18, v22, v9;
com.fasterxml.jackson.core.JsonParser$Feature v29;
int v14, v15, v16, v24, v6, v7;
com.fasterxml.jackson.core.JsonToken v17, v2, v20, v23, v25, v26, v27, v3, v31, v4, v8;
java.lang.String v12, v13, v21;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _closed>;
if v1 == 0 goto label01;
return null;
label01:
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v2 != v3 goto label02;
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _nextAfterName()>();
return v4;
label02:
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numTypesValid> = 0;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;
if v5 == 0 goto label03;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipString()>();
label03:
v6 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipWSOrEnd()>();
if v6 >= 0 goto label04;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void close()>();
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = null;
return null;
label04:
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte[] _binaryValue> = null;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow> = v7;
if v6 == 93 goto label05;
if v6 != 125 goto label06;
label05:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _closeScope(int)>(v6);
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
return v8;
label06:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v10 = virtualinvoke v9.<com.fasterxml.jackson.core.json.JsonReadContext: boolean expectComma()>();
if v10 == 0 goto label09;
if v6 == 44 goto label07;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v12 = virtualinvoke v11.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String typeDesc()>();
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("was expecting comma to separate \u0001 entries");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v6, v13);
label07:
v6 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipWS()>();
v14 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;
v15 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_TRAILING_COMMA>;
v16 = v14 & v15;
if v16 == 0 goto label09;
if v6 == 93 goto label08;
if v6 != 125 goto label09;
label08:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _closeScope(int)>(v6);
v17 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
return v17;
label09:
v18 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v19 = virtualinvoke v18.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();
if v19 != 0 goto label10;
v20 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _nextTokenNotInObject(int)>(v6);
return v20;
label10:
v21 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _parseName(int)>(v6);
v22 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
virtualinvoke v22.<com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentName(java.lang.String)>(v21);
v23 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v23;
v24 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipColon()>();
if v24 != 34 goto label11;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 1;
v25 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v25;
v26 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
return v26;
label11:
lookupswitch(v24)
{
case 43: goto label13;
case 45: goto label12;
case 46: goto label15;
case 48: goto label16;
case 49: goto label16;
case 50: goto label16;
case 51: goto label16;
case 52: goto label16;
case 53: goto label16;
case 54: goto label16;
case 55: goto label16;
case 56: goto label16;
case 57: goto label16;
case 91: goto label20;
case 102: goto label17;
case 110: goto label18;
case 116: goto label19;
case 123: goto label21;
default: goto label22;
};
label12:
v27 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parseNegNumber()>();
goto label23;
label13:
v28 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v29 = virtualinvoke v28.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v30 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v29);
if v30 == 0 goto label14;
v27 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parsePosNumber()>();
goto label23;
label14:
v27 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(v24);
goto label23;
label15:
v27 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean,boolean)>(0, 0);
goto label23;
label16:
v27 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parseUnsignedNumber(int)>(v24);
goto label23;
label17:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("false", 1);
v27 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
goto label23;
label18:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("null", 1);
v27 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
goto label23;
label19:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("true", 1);
v27 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
goto label23;
label20:
v27 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
goto label23;
label21:
v27 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
goto label23;
label22:
v27 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(v24);
label23:
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v27;
v31 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
return v31;
}
private final com.fasterxml.jackson.core.JsonToken _nextTokenNotInObject(int) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser$Feature v14;
com.fasterxml.jackson.core.json.JsonReadFeature v13;
int v1, v3, v4, v6, v7;
com.fasterxml.jackson.core.JsonToken v10, v11, v12, v16, v17, v18, v19, v2, v20, v5, v8, v9;
boolean v15;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
if v1 != 34 goto label01;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 1;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v2;
return v2;
label01:
lookupswitch(v1)
{
case 43: goto label08;
case 45: goto label07;
case 46: goto label10;
case 48: goto label11;
case 49: goto label11;
case 50: goto label11;
case 51: goto label11;
case 52: goto label11;
case 53: goto label11;
case 54: goto label11;
case 55: goto label11;
case 56: goto label11;
case 57: goto label11;
case 91: goto label02;
case 102: goto label05;
case 110: goto label06;
case 116: goto label04;
case 123: goto label03;
default: goto label12;
};
label02:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void createChildArrayContext(int,int)>(v3, v4);
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v5;
return v5;
label03:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void createChildObjectContext(int,int)>(v6, v7);
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v8;
return v8;
label04:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("true", 1);
v9 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v9;
return v9;
label05:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("false", 1);
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v10;
return v10;
label06:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("null", 1);
v11 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v11;
return v11;
label07:
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parseNegNumber()>();
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v12;
return v12;
label08:
v13 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v14 = virtualinvoke v13.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v14);
if v15 == 0 goto label09;
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parsePosNumber()>();
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v16;
return v16;
label09:
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(v1);
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v17;
return v17;
label10:
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean,boolean)>(0, 0);
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v18;
return v18;
label11:
v19 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parseUnsignedNumber(int)>(v1);
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v19;
return v19;
label12:
v20 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(v1);
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v20;
return v20;
}
private final com.fasterxml.jackson.core.JsonToken _nextAfterName() throws java.io.IOException
{
int v3, v4, v6, v7;
com.fasterxml.jackson.core.JsonToken v1, v2, v5;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _nameCopied> = 0;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = null;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v1 != v2 goto label1;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void createChildArrayContext(int,int)>(v3, v4);
goto label2;
label1:
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v1 != v5 goto label2;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void createChildObjectContext(int,int)>(v6, v7);
label2:
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v1;
return v1;
}
public void finishToken() throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;
if v1 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _finishString()>();
label1:
return;
}
public java.lang.String nextFieldName() throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadContext v14, v17, v6, v8;
com.fasterxml.jackson.core.JsonParser$Feature v23;
com.fasterxml.jackson.core.json.JsonReadFeature v22;
int v11, v12, v13, v19, v4, v5;
com.fasterxml.jackson.core.JsonToken v1, v18, v2, v20, v21;
java.lang.String v10, v16, v9;
boolean v15, v24, v3, v7;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _numTypesValid> = 0;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v1 != v2 goto label01;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _nextAfterName()>();
return null;
label01:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;
if v3 == 0 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipString()>();
label02:
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipWS()>();
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: byte[] _binaryValue> = null;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow> = v5;
if v4 == 93 goto label03;
if v4 != 125 goto label04;
label03:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _closeScope(int)>(v4);
return null;
label04:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v7 = virtualinvoke v6.<com.fasterxml.jackson.core.json.JsonReadContext: boolean expectComma()>();
if v7 == 0 goto label07;
if v4 == 44 goto label05;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String typeDesc()>();
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("was expecting comma to separate \u0001 entries");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v4, v10);
label05:
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipWS()>();
v11 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;
v12 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_TRAILING_COMMA>;
v13 = v11 & v12;
if v13 == 0 goto label07;
if v4 == 93 goto label06;
if v4 != 125 goto label07;
label06:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _closeScope(int)>(v4);
return null;
label07:
v14 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v15 = virtualinvoke v14.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();
if v15 != 0 goto label08;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _nextTokenNotInObject(int)>(v4);
return null;
label08:
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _parseName(int)>(v4);
v17 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
virtualinvoke v17.<com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentName(java.lang.String)>(v16);
v18 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v18;
v19 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipColon()>();
if v19 != 34 goto label09;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 1;
v20 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v20;
return v16;
label09:
lookupswitch(v19)
{
case 43: goto label11;
case 45: goto label10;
case 46: goto label13;
case 48: goto label14;
case 49: goto label14;
case 50: goto label14;
case 51: goto label14;
case 52: goto label14;
case 53: goto label14;
case 54: goto label14;
case 55: goto label14;
case 56: goto label14;
case 57: goto label14;
case 91: goto label18;
case 102: goto label15;
case 110: goto label16;
case 116: goto label17;
case 123: goto label19;
default: goto label20;
};
label10:
v21 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parseNegNumber()>();
goto label21;
label11:
v22 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v23 = virtualinvoke v22.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v24 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v23);
if v24 == 0 goto label12;
v21 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parsePosNumber()>();
goto label21;
label12:
v21 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(v19);
goto label21;
label13:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean,boolean)>(0, 0);
label14:
v21 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parseUnsignedNumber(int)>(v19);
goto label21;
label15:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("false", 1);
v21 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
goto label21;
label16:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("null", 1);
v21 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
goto label21;
label17:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("true", 1);
v21 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
goto label21;
label18:
v21 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
goto label21;
label19:
v21 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
goto label21;
label20:
v21 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(v19);
label21:
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v21;
return v16;
}
public java.lang.String nextTextValue() throws java.io.IOException
{
int v10, v11, v13, v14;
com.fasterxml.jackson.core.JsonToken v1, v12, v15, v16, v2, v3, v4, v9;
java.lang.String v17, v6, v8;
boolean v5;
com.fasterxml.jackson.core.util.TextBuffer v7;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v1 != v2 goto label5;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _nameCopied> = 0;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = null;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v3;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v3 != v4 goto label2;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete>;
if v5 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;
v6 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _finishAndReturnString()>();
return v6;
label1:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v8 = virtualinvoke v7.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v8;
label2:
v9 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v3 != v9 goto label3;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void createChildArrayContext(int,int)>(v10, v11);
goto label4;
label3:
v12 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v3 != v12 goto label4;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void createChildObjectContext(int,int)>(v13, v14);
label4:
return null;
label5:
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v16 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v15 != v16 goto label6;
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String getText()>();
goto label7;
label6:
v17 = null;
label7:
return v17;
}
public int nextIntValue(int) throws java.io.IOException
{
int v1, v11, v12, v15, v6, v8, v9;
com.fasterxml.jackson.core.JsonToken v10, v13, v14, v2, v3, v4, v5, v7;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v2 != v3 goto label4;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _nameCopied> = 0;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = null;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v4;
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v4 != v5 goto label1;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int getIntValue()>();
return v6;
label1:
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v4 != v7 goto label2;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void createChildArrayContext(int,int)>(v8, v9);
goto label3;
label2:
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v4 != v10 goto label3;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void createChildObjectContext(int,int)>(v11, v12);
label3:
return v1;
label4:
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v14 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v13 != v14 goto label5;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int getIntValue()>();
goto label6;
label5:
v15 = v1;
label6:
return v15;
}
public long nextLongValue(long) throws java.io.IOException
{
long v1, v15, v6;
int v11, v12, v8, v9;
com.fasterxml.jackson.core.JsonToken v10, v13, v14, v2, v3, v4, v5, v7;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: long;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v2 != v3 goto label4;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _nameCopied> = 0;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = null;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v4;
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v4 != v5 goto label1;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: long getLongValue()>();
return v6;
label1:
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v4 != v7 goto label2;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void createChildArrayContext(int,int)>(v8, v9);
goto label3;
label2:
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v4 != v10 goto label3;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void createChildObjectContext(int,int)>(v11, v12);
label3:
return v1;
label4:
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v14 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v13 != v14 goto label5;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: long getLongValue()>();
goto label6;
label5:
v15 = v1;
label6:
return v15;
}
public java.lang.Boolean nextBooleanValue() throws java.io.IOException
{
int v10, v12, v13, v9;
java.lang.Boolean v16, v18, v5, v7;
com.fasterxml.jackson.core.JsonToken v1, v11, v14, v15, v17, v2, v3, v4, v6, v8;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v1 != v2 goto label5;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _nameCopied> = 0;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = null;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v3;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
if v3 != v4 goto label1;
v5 = <java.lang.Boolean: java.lang.Boolean TRUE>;
return v5;
label1:
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
if v3 != v6 goto label2;
v7 = <java.lang.Boolean: java.lang.Boolean FALSE>;
return v7;
label2:
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v3 != v8 goto label3;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void createChildArrayContext(int,int)>(v9, v10);
goto label4;
label3:
v11 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v3 != v11 goto label4;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void createChildObjectContext(int,int)>(v12, v13);
label4:
return null;
label5:
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v15 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
if v14 != v15 goto label6;
v16 = <java.lang.Boolean: java.lang.Boolean TRUE>;
return v16;
label6:
v17 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
if v14 != v17 goto label7;
v18 = <java.lang.Boolean: java.lang.Boolean FALSE>;
return v18;
label7:
return null;
}
protected final com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonToken v1;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean,boolean)>(0, 0);
return v1;
}
protected final com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean, boolean) throws java.io.IOException
{
com.fasterxml.jackson.core.util.TextBuffer v7;
com.fasterxml.jackson.core.JsonParser$Feature v4;
com.fasterxml.jackson.core.json.JsonReadFeature v3;
int v9;
char[] v8;
com.fasterxml.jackson.core.JsonToken v10, v6;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
boolean v1, v2, v5;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: boolean;
v2 := @parameter1: boolean;
v3 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v4);
if v5 != 0 goto label1;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(46);
return v6;
label1:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v8 = virtualinvoke v7.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v9 = 0;
if v1 == 0 goto label2;
v9 = 1;
v8[0] = 45;
label2:
v10 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloat(char[],int,int,boolean,int)>(v8, v9, 46, v1, 0);
return v10;
}
protected com.fasterxml.jackson.core.JsonToken _parseUnsignedNumber(int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadContext v15;
int v1, v11, v4, v5, v8, v9;
com.fasterxml.jackson.core.JsonToken v13, v17, v6;
boolean v16;
com.fasterxml.jackson.core.util.TextBuffer v10, v14, v2;
java.io.DataInput v12, v7;
char[] v3;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
if v1 != 48 goto label04;
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _handleLeadingZeroes()>();
if v4 > 57 goto label01;
if v4 < 48 goto label01;
v5 = 0;
goto label05;
label01:
if v4 == 120 goto label02;
if v4 != 88 goto label03;
label02:
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int,boolean)>(v4, 0);
return v6;
label03:
v3[0] = 48;
v5 = 1;
goto label05;
label04:
v3[0] = v1;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v4 = interfaceinvoke v7.<java.io.DataInput: int readUnsignedByte()>();
v5 = 1;
label05:
v8 = v5;
label06:
if v4 > 57 goto label08;
if v4 < 48 goto label08;
v8 = v8 + 1;
v9 = lengthof v3;
if v5 < v9 goto label07;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v10.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v5 = 0;
label07:
v11 = v5;
v5 = v5 + 1;
v3[v11] = v4;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v4 = interfaceinvoke v12.<java.io.DataInput: int readUnsignedByte()>();
goto label06;
label08:
if v4 == 46 goto label09;
if v4 == 101 goto label09;
if v4 != 69 goto label10;
label09:
v13 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloat(char[],int,int,boolean,int)>(v3, v5, v4, 0, v8);
return v13;
label10:
v14 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v14.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v5);
v15 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v16 = virtualinvoke v15.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();
if v16 == 0 goto label11;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _verifyRootSpace()>();
goto label12;
label11:
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = v4;
label12:
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken resetInt(boolean,int)>(0, v8);
return v17;
}
protected final com.fasterxml.jackson.core.JsonToken _parsePosNumber() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonToken v1;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(0);
return v1;
}
protected final com.fasterxml.jackson.core.JsonToken _parseNegNumber() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonToken v1;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(1);
return v1;
}
private final com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean) throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadContext v20;
int v13, v14, v16, v4, v6, v7, v8;
com.fasterxml.jackson.core.JsonToken v10, v11, v18, v22, v9;
boolean v1, v21;
com.fasterxml.jackson.core.util.TextBuffer v15, v19, v2;
java.io.DataInput v12, v17, v5;
char[] v3;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: boolean;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v4 = 0;
if v1 == 0 goto label01;
v4 = 1;
v3[0] = 45;
label01:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v6 = interfaceinvoke v5.<java.io.DataInput: int readUnsignedByte()>();
v7 = v4 + 1;
v3[v4] = v6;
if v6 > 48 goto label04;
if v6 != 48 goto label02;
v8 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _handleLeadingZeroes()>();
goto label06;
label02:
if v6 != 46 goto label03;
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean,boolean)>(v1, 1);
return v9;
label03:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int,boolean,boolean)>(v6, v1, 1);
return v10;
label04:
if v6 <= 57 goto label05;
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int,boolean,boolean)>(v6, v1, 1);
return v11;
label05:
v12 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v8 = interfaceinvoke v12.<java.io.DataInput: int readUnsignedByte()>();
label06:
v13 = 1;
label07:
if v8 > 57 goto label09;
if v8 < 48 goto label09;
v13 = v13 + 1;
v14 = lengthof v3;
if v7 < v14 goto label08;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v15.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v7 = 0;
label08:
v16 = v7;
v7 = v7 + 1;
v3[v16] = v8;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v8 = interfaceinvoke v17.<java.io.DataInput: int readUnsignedByte()>();
goto label07;
label09:
if v8 == 46 goto label10;
if v8 == 101 goto label10;
if v8 != 69 goto label11;
label10:
v18 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloat(char[],int,int,boolean,int)>(v3, v7, v8, v1, v13);
return v18;
label11:
v19 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v19.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v7);
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = v8;
v20 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v21 = virtualinvoke v20.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();
if v21 == 0 goto label12;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _verifyRootSpace()>();
label12:
v22 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken resetInt(boolean,int)>(v1, v13);
return v22;
}
private final int _handleLeadingZeroes() throws java.io.IOException
{
int v2, v3, v4, v5;
java.io.DataInput v1, v6;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v2 = interfaceinvoke v1.<java.io.DataInput: int readUnsignedByte()>();
if v2 < 48 goto label1;
if v2 <= 57 goto label2;
label1:
return v2;
label2:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;
v4 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_LEADING_ZEROS>;
v5 = v3 & v4;
if v5 != 0 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void reportInvalidNumber(java.lang.String)>("Leading zeroes not allowed");
label3:
if v2 != 48 goto label4;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v2 = interfaceinvoke v6.<java.io.DataInput: int readUnsignedByte()>();
goto label3;
label4:
return v2;
}
private final com.fasterxml.jackson.core.JsonToken _parseFloat(char[], int, int, boolean, int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadFeature v14;
boolean v16, v31, v4;
java.io.DataInput v10, v21, v25, v29;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v30;
com.fasterxml.jackson.core.JsonParser$Feature v15;
int v11, v13, v17, v18, v2, v20, v22, v24, v26, v28, v3, v5, v6, v7, v9;
com.fasterxml.jackson.core.JsonToken v33;
com.fasterxml.jackson.core.util.TextBuffer v12, v19, v23, v27, v32, v8;
char[] v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: int;
v6 = 0;
if v3 != 46 goto label05;
v7 = lengthof v1;
if v2 < v7 goto label01;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v8.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v2 = 0;
label01:
v9 = v2;
v2 = v2 + 1;
v1[v9] = v3;
label02:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v3 = interfaceinvoke v10.<java.io.DataInput: int readUnsignedByte()>();
if v3 < 48 goto label04;
if v3 > 57 goto label04;
v6 = v6 + 1;
v11 = lengthof v1;
if v2 < v11 goto label03;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v12.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v2 = 0;
label03:
v13 = v2;
v2 = v2 + 1;
v1[v13] = v3;
goto label02;
label04:
if v6 != 0 goto label05;
v14 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS>;
v15 = virtualinvoke v14.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v15);
if v16 != 0 goto label05;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v3, "Decimal point not followed by a digit");
label05:
v17 = 0;
if v3 == 101 goto label06;
if v3 != 69 goto label13;
label06:
v18 = lengthof v1;
if v2 < v18 goto label07;
v19 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v19.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v2 = 0;
label07:
v20 = v2;
v2 = v2 + 1;
v1[v20] = v3;
v21 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v3 = interfaceinvoke v21.<java.io.DataInput: int readUnsignedByte()>();
if v3 == 45 goto label08;
if v3 != 43 goto label10;
label08:
v22 = lengthof v1;
if v2 < v22 goto label09;
v23 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v23.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v2 = 0;
label09:
v24 = v2;
v2 = v2 + 1;
v1[v24] = v3;
v25 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v3 = interfaceinvoke v25.<java.io.DataInput: int readUnsignedByte()>();
label10:
if v3 > 57 goto label12;
if v3 < 48 goto label12;
v17 = v17 + 1;
v26 = lengthof v1;
if v2 < v26 goto label11;
v27 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v27.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v2 = 0;
label11:
v28 = v2;
v2 = v2 + 1;
v1[v28] = v3;
v29 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v3 = interfaceinvoke v29.<java.io.DataInput: int readUnsignedByte()>();
goto label10;
label12:
if v17 != 0 goto label13;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v3, "Exponent indicator not followed by a digit");
label13:
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = v3;
v30 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v31 = virtualinvoke v30.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();
if v31 == 0 goto label14;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _verifyRootSpace()>();
label14:
v32 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v32.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v2);
v33 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken resetFloat(boolean,int,int,int)>(v4, v5, v6, v17);
return v33;
}
private final void _verifyRootSpace() throws java.io.IOException
{
int v1, v2, v3, v4;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte>;
if v1 > 32 goto label3;
v2 = (int) -1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = v2;
if v1 == 13 goto label1;
if v1 != 10 goto label2;
label1:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;
v4 = v3 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow> = v4;
label2:
return;
label3:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportMissingRootWS(int)>(v1);
return;
}
protected final java.lang.String _parseName(int) throws java.io.IOException
{
int[] v3;
java.io.DataInput v12, v17, v22, v4, v7;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
int v1, v10, v11, v13, v14, v15, v16, v18, v19, v20, v21, v23, v24, v5, v6, v8, v9;
java.lang.String v2, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
if v1 == 34 goto label01;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _handleOddName(int)>(v1);
return v2;
label01:
v3 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icLatin1>;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v5 = interfaceinvoke v4.<java.io.DataInput: int readUnsignedByte()>();
v6 = v3[v5];
if v6 != 0 goto label10;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v8 = interfaceinvoke v7.<java.io.DataInput: int readUnsignedByte()>();
v9 = v3[v8];
if v9 != 0 goto label08;
v10 = v5 << 8;
v11 = v10 | v8;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v13 = interfaceinvoke v12.<java.io.DataInput: int readUnsignedByte()>();
v14 = v3[v13];
if v14 != 0 goto label06;
v15 = v11 << 8;
v16 = v15 | v13;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v18 = interfaceinvoke v17.<java.io.DataInput: int readUnsignedByte()>();
v19 = v3[v18];
if v19 != 0 goto label04;
v20 = v16 << 8;
v21 = v20 | v18;
v22 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v23 = interfaceinvoke v22.<java.io.DataInput: int readUnsignedByte()>();
v24 = v3[v23];
if v24 != 0 goto label02;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1> = v21;
v25 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _parseMediumName(int)>(v23);
return v25;
label02:
if v23 != 34 goto label03;
v26 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int)>(v21, 4);
return v26;
label03:
v27 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int)>(v21, v23, 4);
return v27;
label04:
if v18 != 34 goto label05;
v28 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int)>(v16, 3);
return v28;
label05:
v29 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int)>(v16, v18, 3);
return v29;
label06:
if v13 != 34 goto label07;
v30 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int)>(v11, 2);
return v30;
label07:
v31 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int)>(v11, v13, 2);
return v31;
label08:
if v8 != 34 goto label09;
v32 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int)>(v5, 1);
return v32;
label09:
v33 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int)>(v5, v8, 1);
return v33;
label10:
if v5 != 34 goto label11;
return "";
label11:
v34 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int)>(0, v5, 0);
return v34;
}
private final java.lang.String _parseMediumName(int) throws java.io.IOException
{
int[] v2;
java.io.DataInput v12, v21, v3, v30;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
int v1, v10, v11, v13, v14, v15, v17, v19, v20, v22, v23, v24, v26, v28, v29, v31, v32, v33, v35, v4, v5, v6, v8;
java.lang.String v16, v18, v25, v27, v34, v36, v37, v7, v9;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icLatin1>;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v4 = interfaceinvoke v3.<java.io.DataInput: int readUnsignedByte()>();
v5 = v2[v4];
if v5 == 0 goto label2;
if v4 != 34 goto label1;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;
v7 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int,int)>(v6, v1, 1);
return v7;
label1:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int,int)>(v8, v1, v4, 1);
return v9;
label2:
v10 = v1 << 8;
v11 = v10 | v4;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v13 = interfaceinvoke v12.<java.io.DataInput: int readUnsignedByte()>();
v14 = v2[v13];
if v14 == 0 goto label4;
if v13 != 34 goto label3;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;
v16 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int,int)>(v15, v11, 2);
return v16;
label3:
v17 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;
v18 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int,int)>(v17, v11, v13, 2);
return v18;
label4:
v19 = v11 << 8;
v20 = v19 | v13;
v21 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v22 = interfaceinvoke v21.<java.io.DataInput: int readUnsignedByte()>();
v23 = v2[v22];
if v23 == 0 goto label6;
if v22 != 34 goto label5;
v24 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;
v25 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int,int)>(v24, v20, 3);
return v25;
label5:
v26 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;
v27 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int,int)>(v26, v20, v22, 3);
return v27;
label6:
v28 = v20 << 8;
v29 = v28 | v22;
v30 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v31 = interfaceinvoke v30.<java.io.DataInput: int readUnsignedByte()>();
v32 = v2[v31];
if v32 == 0 goto label8;
if v31 != 34 goto label7;
v33 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;
v34 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int,int)>(v33, v29, 4);
return v34;
label7:
v35 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;
v36 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int,int)>(v35, v29, v31, 4);
return v36;
label8:
v37 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _parseMediumName2(int,int)>(v31, v29);
return v37;
}
private final java.lang.String _parseMediumName2(int, int) throws java.io.IOException
{
int[] v3;
java.io.DataInput v13, v22, v31, v4;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
int v1, v11, v12, v14, v15, v16, v18, v2, v20, v21, v23, v24, v25, v27, v29, v30, v32, v33, v34, v36, v5, v6, v7, v9;
java.lang.String v10, v17, v19, v26, v28, v35, v37, v38, v8;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icLatin1>;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v5 = interfaceinvoke v4.<java.io.DataInput: int readUnsignedByte()>();
v6 = v3[v5];
if v6 == 0 goto label2;
if v5 != 34 goto label1;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;
v8 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int,int,int)>(v7, v2, v1, 1);
return v8;
label1:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;
v10 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int,int,int)>(v9, v2, v1, v5, 1);
return v10;
label2:
v11 = v1 << 8;
v12 = v11 | v5;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v14 = interfaceinvoke v13.<java.io.DataInput: int readUnsignedByte()>();
v15 = v3[v14];
if v15 == 0 goto label4;
if v14 != 34 goto label3;
v16 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;
v17 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int,int,int)>(v16, v2, v12, 2);
return v17;
label3:
v18 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;
v19 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int,int,int)>(v18, v2, v12, v14, 2);
return v19;
label4:
v20 = v12 << 8;
v21 = v20 | v14;
v22 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v23 = interfaceinvoke v22.<java.io.DataInput: int readUnsignedByte()>();
v24 = v3[v23];
if v24 == 0 goto label6;
if v23 != 34 goto label5;
v25 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;
v26 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int,int,int)>(v25, v2, v21, 3);
return v26;
label5:
v27 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;
v28 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int,int,int)>(v27, v2, v21, v23, 3);
return v28;
label6:
v29 = v21 << 8;
v30 = v29 | v23;
v31 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v32 = interfaceinvoke v31.<java.io.DataInput: int readUnsignedByte()>();
v33 = v3[v32];
if v33 == 0 goto label8;
if v32 != 34 goto label7;
v34 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;
v35 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int,int,int,int)>(v34, v2, v30, 4);
return v35;
label7:
v36 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;
v37 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseName(int,int,int,int,int)>(v36, v2, v30, v32, 4);
return v37;
label8:
v38 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _parseLongName(int,int,int)>(v32, v2, v30);
return v38;
}
private final java.lang.String _parseLongName(int, int, int) throws java.io.IOException
{
int[] v13, v15, v22, v24, v31, v33, v4, v40, v42, v44, v46, v47, v48, v6, v7, v8;
java.io.DataInput v10, v19, v28, v37;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
int v1, v11, v12, v17, v18, v2, v20, v21, v26, v27, v29, v3, v30, v35, v36, v38, v39, v45, v49, v5, v9;
java.lang.String v14, v16, v23, v25, v32, v34, v41, v43;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _quad1>;
v4[0] = v5;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v6[1] = v2;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v7[2] = v3;
v8 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icLatin1>;
v9 = 3;
label01:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v11 = interfaceinvoke v10.<java.io.DataInput: int readUnsignedByte()>();
v12 = v8[v11];
if v12 == 0 goto label03;
if v11 != 34 goto label02;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v14 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int[],int,int,int)>(v13, v9, v1, 1);
return v14;
label02:
v15 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>(v15, v9, v1, v11, 1);
return v16;
label03:
v17 = v1 << 8;
v18 = v17 | v11;
v19 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v20 = interfaceinvoke v19.<java.io.DataInput: int readUnsignedByte()>();
v21 = v8[v20];
if v21 == 0 goto label05;
if v20 != 34 goto label04;
v22 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v23 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int[],int,int,int)>(v22, v9, v18, 2);
return v23;
label04:
v24 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v25 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>(v24, v9, v18, v20, 2);
return v25;
label05:
v26 = v18 << 8;
v27 = v26 | v20;
v28 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v29 = interfaceinvoke v28.<java.io.DataInput: int readUnsignedByte()>();
v30 = v8[v29];
if v30 == 0 goto label07;
if v29 != 34 goto label06;
v31 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v32 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int[],int,int,int)>(v31, v9, v27, 3);
return v32;
label06:
v33 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v34 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>(v33, v9, v27, v29, 3);
return v34;
label07:
v35 = v27 << 8;
v36 = v35 | v29;
v37 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v38 = interfaceinvoke v37.<java.io.DataInput: int readUnsignedByte()>();
v39 = v8[v38];
if v39 == 0 goto label09;
if v38 != 34 goto label08;
v40 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v41 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String findName(int[],int,int,int)>(v40, v9, v36, 4);
return v41;
label08:
v42 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v43 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>(v42, v9, v36, v38, 4);
return v43;
label09:
v44 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v45 = lengthof v44;
if v9 < v45 goto label10;
v46 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v47 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(v46, v9);
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = v47;
label10:
v48 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v49 = v9;
v9 = v9 + 1;
v48[v49] = v36;
v1 = v38;
goto label01;
}
private final java.lang.String parseName(int, int, int) throws java.io.IOException
{
int[] v4;
int v1, v2, v3;
java.lang.String v5;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>(v4, 0, v1, v2, v3);
return v5;
}
private final java.lang.String parseName(int, int, int, int) throws java.io.IOException
{
int[] v5, v6;
int v1, v2, v3, v4;
java.lang.String v7;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v5[0] = v1;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>(v6, 1, v2, v3, v4);
return v7;
}
private final java.lang.String parseName(int, int, int, int, int) throws java.io.IOException
{
int[] v6, v7, v8;
int v1, v2, v3, v4, v5;
java.lang.String v9;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v6[0] = v1;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v7[1] = v2;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>(v8, 2, v3, v4, v5);
return v9;
}
protected final java.lang.String parseEscapedName(int[], int, int, int, int) throws java.io.IOException
{
int[] v1, v11, v23, v33, v38, v6;
java.io.DataInput v35;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v41;
int v10, v12, v13, v14, v15, v16, v17, v18, v19, v2, v20, v21, v22, v24, v25, v26, v27, v28, v29, v3, v30, v31, v32, v34, v36, v37, v39, v4, v40, v5, v7, v9;
java.lang.String v42;
char v8;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icLatin1>;
label01:
v7 = v6[v4];
if v7 == 0 goto label10;
if v4 == 34 goto label14;
if v4 == 92 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(v4, "name");
goto label03;
label02:
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char _decodeEscaped()>();
v4 = v8;
label03:
if v4 <= 127 goto label10;
if v5 < 4 goto label05;
v9 = lengthof v1;
if v2 < v9 goto label04;
v10 = lengthof v1;
v11 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(v1, v10);
v1 = v11;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = v11;
label04:
v12 = v2;
v2 = v2 + 1;
v1[v12] = v3;
v3 = 0;
v5 = 0;
label05:
if v4 >= 2048 goto label06;
v13 = v3 << 8;
v14 = v4 >> 6;
v15 = 192 | v14;
v3 = v13 | v15;
v5 = v5 + 1;
goto label09;
label06:
v16 = v3 << 8;
v17 = v4 >> 12;
v18 = 224 | v17;
v19 = v16 | v18;
v20 = v5 + 1;
if v20 < 4 goto label08;
v21 = lengthof v1;
if v2 < v21 goto label07;
v22 = lengthof v1;
v23 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(v1, v22);
v1 = v23;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = v23;
label07:
v24 = v2;
v2 = v2 + 1;
v1[v24] = v19;
v19 = 0;
v20 = 0;
label08:
v25 = v19 << 8;
v26 = v4 >> 6;
v27 = v26 & 63;
v28 = 128 | v27;
v3 = v25 | v28;
v5 = v20 + 1;
label09:
v29 = v4 & 63;
v4 = 128 | v29;
label10:
if v5 >= 4 goto label11;
v5 = v5 + 1;
v30 = v3 << 8;
v3 = v30 | v4;
goto label13;
label11:
v31 = lengthof v1;
if v2 < v31 goto label12;
v32 = lengthof v1;
v33 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(v1, v32);
v1 = v33;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = v33;
label12:
v34 = v2;
v2 = v2 + 1;
v1[v34] = v3;
v3 = v4;
v5 = 1;
label13:
v35 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v4 = interfaceinvoke v35.<java.io.DataInput: int readUnsignedByte()>();
goto label01;
label14:
if v5 <= 0 goto label16;
v36 = lengthof v1;
if v2 < v36 goto label15;
v37 = lengthof v1;
v38 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(v1, v37);
v1 = v38;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = v38;
label15:
v39 = v2;
v2 = v2 + 1;
v40 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int pad(int,int)>(v3, v5);
v1[v39] = v40;
label16:
v41 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v42 = virtualinvoke v41.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int[],int)>(v1, v2);
if v42 != null goto label17;
v42 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String addName(int[],int,int)>(v1, v2, v5);
label17:
return v42;
}
protected java.lang.String _handleOddName(int) throws java.io.IOException
{
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v26;
int[] v11, v18, v24, v9;
int v1, v10, v12, v13, v14, v15, v16, v17, v19, v2, v21, v22, v23, v25, v3, v4, v6, v7, v8;
java.lang.String v27, v5;
char v28;
java.io.DataInput v20;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
if v1 != 39 goto label01;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;
v3 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_SINGLE_QUOTES>;
v4 = v2 & v3;
if v4 == 0 goto label01;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _parseAposName()>();
return v5;
label01:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;
v7 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_UNQUOTED_NAMES>;
v8 = v6 & v7;
if v8 != 0 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeCharForError(int)>(v1);
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v28, "was expecting double-quote to start field name");
label02:
v9 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeUtf8JsNames()>();
v10 = v9[v1];
if v10 == 0 goto label03;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v1, "was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name");
label03:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v12 = 0;
v13 = 0;
v14 = 0;
label04:
if v14 >= 4 goto label05;
v14 = v14 + 1;
v15 = v13 << 8;
v13 = v15 | v1;
goto label07;
label05:
v16 = lengthof v11;
if v12 < v16 goto label06;
v17 = lengthof v11;
v18 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(v11, v17);
v11 = v18;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = v18;
label06:
v19 = v12;
v12 = v12 + 1;
v11[v19] = v13;
v13 = v1;
v14 = 1;
label07:
v20 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v1 = interfaceinvoke v20.<java.io.DataInput: int readUnsignedByte()>();
v21 = v9[v1];
if v21 == 0 goto label04;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = v1;
if v14 <= 0 goto label09;
v22 = lengthof v11;
if v12 < v22 goto label08;
v23 = lengthof v11;
v24 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(v11, v23);
v11 = v24;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = v24;
label08:
v25 = v12;
v12 = v12 + 1;
v11[v25] = v13;
label09:
v26 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v27 = virtualinvoke v26.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int[],int)>(v11, v12);
if v27 != null goto label10;
v27 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String addName(int[],int,int)>(v11, v12, v14);
label10:
return v27;
}
protected java.lang.String _parseAposName() throws java.io.IOException
{
int[] v12, v24, v3, v34, v39, v7;
java.io.DataInput v1, v36;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v42;
int v10, v11, v13, v14, v15, v16, v17, v18, v19, v2, v20, v21, v22, v23, v25, v26, v27, v28, v29, v30, v31, v32, v33, v35, v37, v38, v4, v40, v41, v5, v6, v8;
java.lang.String v43;
char v9;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v2 = interfaceinvoke v1.<java.io.DataInput: int readUnsignedByte()>();
if v2 != 39 goto label01;
return "";
label01:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v4 = 0;
v5 = 0;
v6 = 0;
v7 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icLatin1>;
label02:
if v2 == 39 goto label15;
if v2 == 34 goto label11;
v8 = v7[v2];
if v8 == 0 goto label11;
if v2 == 92 goto label03;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(v2, "name");
goto label04;
label03:
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char _decodeEscaped()>();
v2 = v9;
label04:
if v2 <= 127 goto label11;
if v6 < 4 goto label06;
v10 = lengthof v3;
if v4 < v10 goto label05;
v11 = lengthof v3;
v12 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(v3, v11);
v3 = v12;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = v12;
label05:
v13 = v4;
v4 = v4 + 1;
v3[v13] = v5;
v5 = 0;
v6 = 0;
label06:
if v2 >= 2048 goto label07;
v14 = v5 << 8;
v15 = v2 >> 6;
v16 = 192 | v15;
v5 = v14 | v16;
v6 = v6 + 1;
goto label10;
label07:
v17 = v5 << 8;
v18 = v2 >> 12;
v19 = 224 | v18;
v20 = v17 | v19;
v21 = v6 + 1;
if v21 < 4 goto label09;
v22 = lengthof v3;
if v4 < v22 goto label08;
v23 = lengthof v3;
v24 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(v3, v23);
v3 = v24;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = v24;
label08:
v25 = v4;
v4 = v4 + 1;
v3[v25] = v20;
v20 = 0;
v21 = 0;
label09:
v26 = v20 << 8;
v27 = v2 >> 6;
v28 = v27 & 63;
v29 = 128 | v28;
v5 = v26 | v29;
v6 = v21 + 1;
label10:
v30 = v2 & 63;
v2 = 128 | v30;
label11:
if v6 >= 4 goto label12;
v6 = v6 + 1;
v31 = v5 << 8;
v5 = v31 | v2;
goto label14;
label12:
v32 = lengthof v3;
if v4 < v32 goto label13;
v33 = lengthof v3;
v34 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(v3, v33);
v3 = v34;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = v34;
label13:
v35 = v4;
v4 = v4 + 1;
v3[v35] = v5;
v5 = v2;
v6 = 1;
label14:
v36 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v2 = interfaceinvoke v36.<java.io.DataInput: int readUnsignedByte()>();
goto label02;
label15:
if v6 <= 0 goto label17;
v37 = lengthof v3;
if v4 < v37 goto label16;
v38 = lengthof v3;
v39 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(v3, v38);
v3 = v39;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = v39;
label16:
v40 = v4;
v4 = v4 + 1;
v41 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int pad(int,int)>(v5, v6);
v3[v40] = v41;
label17:
v42 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v43 = virtualinvoke v42.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int[],int)>(v3, v4);
if v43 != null goto label18;
v43 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String addName(int[],int,int)>(v3, v4, v6);
label18:
return v43;
}
private final java.lang.String findName(int, int) throws com.fasterxml.jackson.core.JsonParseException, com.fasterxml.jackson.core.exc.StreamConstraintsException
{
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v4;
int[] v6, v7;
int v1, v2, v3;
java.lang.String v5, v8;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int pad(int,int)>(v1, v2);
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int)>(v3);
if v5 == null goto label1;
return v5;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v6[0] = v3;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v8 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String addName(int[],int,int)>(v7, 1, v2);
return v8;
}
private final java.lang.String findName(int, int, int) throws com.fasterxml.jackson.core.JsonParseException, com.fasterxml.jackson.core.exc.StreamConstraintsException
{
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v5;
int[] v7, v8, v9;
int v1, v2, v3, v4;
java.lang.String v10, v6;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int pad(int,int)>(v2, v3);
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int,int)>(v1, v4);
if v6 == null goto label1;
return v6;
label1:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v7[0] = v1;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v8[1] = v4;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v10 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String addName(int[],int,int)>(v9, 2, v3);
return v10;
}
private final java.lang.String findName(int, int, int, int) throws com.fasterxml.jackson.core.JsonParseException, com.fasterxml.jackson.core.exc.StreamConstraintsException
{
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v6;
int[] v8;
int v1, v2, v3, v4, v5, v9;
java.lang.String v10, v7;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int pad(int,int)>(v3, v4);
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v7 = virtualinvoke v6.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int,int,int)>(v1, v2, v5);
if v7 == null goto label1;
return v7;
label1:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer>;
v8[0] = v1;
v8[1] = v2;
v9 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int pad(int,int)>(v5, v4);
v8[2] = v9;
v10 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String addName(int[],int,int)>(v8, 3, v4);
return v10;
}
private final java.lang.String findName(int[], int, int, int) throws com.fasterxml.jackson.core.JsonParseException, com.fasterxml.jackson.core.exc.StreamConstraintsException
{
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v10;
int[] v1, v7;
int v2, v3, v4, v5, v6, v8, v9;
java.lang.String v11, v12;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = lengthof v1;
if v2 < v5 goto label1;
v6 = lengthof v1;
v7 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _growArrayBy(int[],int)>(v1, v6);
v1 = v7;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _quadBuffer> = v7;
label1:
v8 = v2 + 1;
v9 = staticinvoke <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int pad(int,int)>(v3, v4);
v1[v2] = v9;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int[],int)>(v1, v8);
if v11 != null goto label2;
v12 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String addName(int[],int,int)>(v1, v8, v4);
return v12;
label2:
return v11;
}
private final java.lang.String addName(int[], int, int) throws com.fasterxml.jackson.core.JsonParseException, com.fasterxml.jackson.core.exc.StreamConstraintsException
{
byte v26;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
java.lang.String v71, v74;
com.fasterxml.jackson.core.util.TextBuffer v13, v61, v69;
char[] v14;
int[] v1;
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v73;
int v10, v11, v12, v15, v16, v17, v18, v19, v2, v20, v21, v22, v23, v24, v25, v27, v28, v29, v3, v31, v32, v33, v34, v35, v36, v37, v38, v39, v4, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v5, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v6, v60, v62, v63, v64, v65, v66, v67, v68, v7, v70, v72, v8, v9;
com.fasterxml.jackson.core.JsonToken v30;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v2 << 2;
v5 = v4 - 4;
v6 = v5 + v3;
if v3 >= 4 goto label01;
v7 = v2 - 1;
v8 = v1[v7];
v9 = v2 - 1;
v10 = 4 - v3;
v11 = v10 << 3;
v12 = v8 << v11;
v1[v9] = v12;
goto label02;
label01:
v8 = 0;
label02:
v13 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v14 = virtualinvoke v13.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v15 = 0;
v16 = 0;
label03:
if v16 >= v6 goto label16;
v17 = v16 >> 2;
v18 = v1[v17];
v19 = v16 & 3;
v20 = 3 - v19;
v21 = v20 << 3;
v22 = v18 >> v21;
v23 = v22 & 255;
v16 = v16 + 1;
if v23 <= 127 goto label14;
v24 = v23 & 224;
if v24 != 192 goto label04;
v25 = v23 & 31;
v26 = 1;
goto label07;
label04:
v27 = v23 & 240;
if v27 != 224 goto label05;
v25 = v23 & 15;
v26 = 2;
goto label07;
label05:
v28 = v23 & 248;
if v28 != 240 goto label06;
v25 = v23 & 7;
v26 = 3;
goto label07;
label06:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidInitial(int)>(v23);
v25 = 1;
v26 = 1;
label07:
v29 = v16 + v26;
if v29 <= v6 goto label08;
v30 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(" in field name", v30);
label08:
v31 = v16 >> 2;
v32 = v1[v31];
v33 = v16 & 3;
v34 = 3 - v33;
v35 = v34 << 3;
v36 = v32 >> v35;
v16 = v16 + 1;
v37 = v36 & 192;
if v37 == 128 goto label09;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(v36);
label09:
v38 = v25 << 6;
v39 = v36 & 63;
v23 = v38 | v39;
if v26 <= 1 goto label12;
v40 = v16 >> 2;
v41 = v1[v40];
v42 = v16 & 3;
v43 = 3 - v42;
v44 = v43 << 3;
v45 = v41 >> v44;
v16 = v16 + 1;
v46 = v45 & 192;
if v46 == 128 goto label10;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(v45);
label10:
v47 = v23 << 6;
v48 = v45 & 63;
v23 = v47 | v48;
if v26 <= 2 goto label14;
v49 = v16 >> 2;
v50 = v1[v49];
v51 = v16 & 3;
v52 = 3 - v51;
v53 = v52 << 3;
v54 = v50 >> v53;
v16 = v16 + 1;
v55 = v54 & 192;
if v55 == 128 goto label11;
v56 = v54 & 255;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(v56);
label11:
v57 = v23 << 6;
v58 = v54 & 63;
v23 = v57 | v58;
label12:
if v26 <= 2 goto label14;
v59 = v23 - 65536;
v60 = lengthof v14;
if v15 < v60 goto label13;
v61 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v14 = virtualinvoke v61.<com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();
label13:
v62 = v15;
v15 = v15 + 1;
v63 = v59 >> 10;
v64 = (int) 55296;
v65 = v64 + v63;
v14[v62] = v65;
v66 = v59 & 1023;
v67 = (int) 56320;
v23 = v67 | v66;
label14:
v68 = lengthof v14;
if v15 < v68 goto label15;
v69 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v14 = virtualinvoke v69.<com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();
label15:
v70 = v15;
v15 = v15 + 1;
v14[v70] = v23;
goto label03;
label16:
v71 = new java.lang.String;
specialinvoke v71.<java.lang.String: void <init>(char[],int,int)>(v14, 0, v15);
if v3 >= 4 goto label17;
v72 = v2 - 1;
v1[v72] = v8;
label17:
v73 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v74 = virtualinvoke v73.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String addName(java.lang.String,int[],int)>(v71, v1, v2);
return v74;
}
protected void _finishString() throws java.io.IOException
{
com.fasterxml.jackson.core.util.TextBuffer v2, v9;
int[] v4;
int v1, v10, v12, v5, v7, v8;
java.io.DataInput v11, v6;
char[] v3;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = 0;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v4 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icUTF8>;
v5 = lengthof v3;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v7 = interfaceinvoke v6.<java.io.DataInput: int readUnsignedByte()>();
v8 = v4[v7];
if v8 == 0 goto label3;
if v7 != 34 goto label2;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v9.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v1);
return;
label2:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _finishString2(char[],int,int)>(v3, v1, v7);
return;
label3:
v10 = v1;
v1 = v1 + 1;
v3[v10] = v7;
if v1 < v5 goto label1;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v12 = interfaceinvoke v11.<java.io.DataInput: int readUnsignedByte()>();
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _finishString2(char[],int,int)>(v3, v1, v12);
return;
}
private java.lang.String _finishAndReturnString() throws java.io.IOException
{
int[] v4;
int v1, v13, v15, v5, v7, v8;
java.lang.String v10, v12, v17;
com.fasterxml.jackson.core.util.TextBuffer v11, v16, v2, v9;
java.io.DataInput v14, v6;
char[] v3;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = 0;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v4 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icUTF8>;
v5 = lengthof v3;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v7 = interfaceinvoke v6.<java.io.DataInput: int readUnsignedByte()>();
v8 = v4[v7];
if v8 == 0 goto label3;
if v7 != 34 goto label2;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v10 = virtualinvoke v9.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String setCurrentAndReturn(int)>(v1);
return v10;
label2:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _finishString2(char[],int,int)>(v3, v1, v7);
v11 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v12 = virtualinvoke v11.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v12;
label3:
v13 = v1;
v1 = v1 + 1;
v3[v13] = v7;
if v1 < v5 goto label1;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v15 = interfaceinvoke v14.<java.io.DataInput: int readUnsignedByte()>();
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _finishString2(char[],int,int)>(v3, v1, v15);
v16 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v17 = virtualinvoke v16.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v17;
}
private final void _finishString2(char[], int, int) throws java.io.IOException
{
int[] v4;
int v10, v12, v13, v15, v16, v17, v18, v19, v2, v20, v21, v23, v3, v5, v6, v8;
char v11;
com.fasterxml.jackson.core.util.TextBuffer v14, v22, v25, v7;
java.io.DataInput v24, v9;
char[] v1;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icUTF8>;
v5 = lengthof v1;
label01:
v6 = v4[v3];
if v6 != 0 goto label03;
if v2 < v5 goto label02;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v7.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v2 = 0;
v5 = lengthof v1;
label02:
v8 = v2;
v2 = v2 + 1;
v1[v8] = v3;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v3 = interfaceinvoke v9.<java.io.DataInput: int readUnsignedByte()>();
goto label01;
label03:
if v3 == 34 goto label13;
v10 = v4[v3];
tableswitch(v10)
{
case 1: goto label04;
case 2: goto label05;
case 3: goto label06;
case 4: goto label07;
default: goto label09;
};
label04:
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char _decodeEscaped()>();
v3 = v11;
goto label11;
label05:
v3 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeUtf8_2(int)>(v3);
goto label11;
label06:
v3 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeUtf8_3(int)>(v3);
goto label11;
label07:
v12 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeUtf8_4(int)>(v3);
v13 = lengthof v1;
if v2 < v13 goto label08;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v14.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v2 = 0;
v5 = lengthof v1;
label08:
v15 = v2;
v2 = v2 + 1;
v16 = v12 >> 10;
v17 = (int) 55296;
v18 = v17 | v16;
v1[v15] = v18;
v19 = v12 & 1023;
v20 = (int) 56320;
v3 = v20 | v19;
goto label11;
label09:
if v3 >= 32 goto label10;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(v3, "string value");
goto label11;
label10:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidChar(int)>(v3);
label11:
v21 = lengthof v1;
if v2 < v21 goto label12;
v22 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v22.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v2 = 0;
v5 = lengthof v1;
label12:
v23 = v2;
v2 = v2 + 1;
v1[v23] = v3;
v24 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v3 = interfaceinvoke v24.<java.io.DataInput: int readUnsignedByte()>();
goto label01;
label13:
v25 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v25.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v2);
return;
}
protected void _skipString() throws java.io.IOException
{
int[] v1;
int v3, v4, v5;
java.io.DataInput v2;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _tokenIncomplete> = 0;
v1 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icUTF8>;
label1:
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v3 = interfaceinvoke v2.<java.io.DataInput: int readUnsignedByte()>();
v4 = v1[v3];
if v4 == 0 goto label1;
if v3 == 34 goto label8;
v5 = v1[v3];
tableswitch(v5)
{
case 1: goto label2;
case 2: goto label3;
case 3: goto label4;
case 4: goto label5;
default: goto label6;
};
label2:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char _decodeEscaped()>();
goto label1;
label3:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipUtf8_2()>();
goto label1;
label4:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipUtf8_3()>();
goto label1;
label5:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipUtf8_4()>();
goto label1;
label6:
if v3 >= 32 goto label7;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(v3, "string value");
goto label1;
label7:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidChar(int)>(v3);
goto label1;
label8:
return;
}
protected com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadContext v2, v4;
int v1, v10, v11, v12, v14, v15, v16, v18, v19, v20, v23, v6, v7, v8;
com.fasterxml.jackson.core.JsonToken v13, v17, v21, v24, v9;
java.lang.String v26, v27, v28, v29;
boolean v25, v3, v5;
java.io.DataInput v22;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
lookupswitch(v1)
{
case 39: goto label04;
case 43: goto label09;
case 44: goto label02;
case 73: goto label07;
case 78: goto label05;
case 93: goto label01;
case 125: goto label03;
default: goto label10;
};
label01:
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inArray()>();
if v3 == 0 goto label10;
label02:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();
if v5 != 0 goto label03;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;
v7 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_MISSING>;
v8 = v6 & v7;
if v8 == 0 goto label03;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = v1;
v9 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
return v9;
label03:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v1, "expected a value");
label04:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;
v11 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_SINGLE_QUOTES>;
v12 = v10 & v11;
if v12 == 0 goto label10;
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _handleApos()>();
return v13;
label05:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("NaN", 1);
v14 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;
v15 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_NON_NUM_NUMBERS>;
v16 = v14 & v15;
if v16 == 0 goto label06;
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken resetAsNaN(java.lang.String,double)>("NaN", #NaN);
return v17;
label06:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportError(java.lang.String)>("Non-standard token \'NaN\': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow");
goto label10;
label07:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>("Infinity", 1);
v18 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;
v19 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_NON_NUM_NUMBERS>;
v20 = v18 & v19;
if v20 == 0 goto label08;
v21 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken resetAsNaN(java.lang.String,double)>("Infinity", #Infinity);
return v21;
label08:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportError(java.lang.String)>("Non-standard token \'Infinity\': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow");
goto label10;
label09:
v22 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v23 = interfaceinvoke v22.<java.io.DataInput: int readUnsignedByte()>();
v24 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int,boolean,boolean)>(v23, 0, 1);
return v24;
label10:
v25 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(int)>(v1);
if v25 == 0 goto label11;
v26 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001");
v27 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _validJsonTokenList()>();
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidToken(int,java.lang.String,java.lang.String)>(v1, v26, v27);
label11:
v28 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _validJsonValueList()>();
v29 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v28) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected a valid value \u0001");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v1, v29);
return null;
}
protected com.fasterxml.jackson.core.JsonToken _handleApos() throws java.io.IOException
{
int[] v4;
int v1, v10, v11, v12, v14, v15, v16, v17, v18, v19, v21, v22, v23, v25, v5, v6, v9;
com.fasterxml.jackson.core.JsonToken v27;
char v13;
com.fasterxml.jackson.core.util.TextBuffer v2, v20, v24, v26, v7;
java.io.DataInput v8;
char[] v3;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = 0;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v4 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icUTF8>;
label01:
v5 = lengthof v3;
v6 = lengthof v3;
if v1 < v6 goto label02;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v7.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v1 = 0;
v5 = lengthof v3;
label02:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v9 = interfaceinvoke v8.<java.io.DataInput: int readUnsignedByte()>();
if v9 == 39 goto label14;
v10 = v4[v9];
if v10 == 0 goto label03;
if v9 != 34 goto label04;
label03:
v11 = v1;
v1 = v1 + 1;
v3[v11] = v9;
if v1 < v5 goto label02;
goto label01;
label04:
v12 = v4[v9];
tableswitch(v12)
{
case 1: goto label05;
case 2: goto label06;
case 3: goto label07;
case 4: goto label08;
default: goto label10;
};
label05:
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char _decodeEscaped()>();
v9 = v13;
goto label12;
label06:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeUtf8_2(int)>(v9);
goto label12;
label07:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeUtf8_3(int)>(v9);
goto label12;
label08:
v14 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeUtf8_4(int)>(v9);
v15 = v1;
v1 = v1 + 1;
v16 = v14 >> 10;
v17 = (int) 55296;
v18 = v17 | v16;
v3[v15] = v18;
v19 = lengthof v3;
if v1 < v19 goto label09;
v20 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v20.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v1 = 0;
label09:
v21 = v14 & 1023;
v22 = (int) 56320;
v9 = v22 | v21;
goto label12;
label10:
if v9 >= 32 goto label11;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(v9, "string value");
label11:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidChar(int)>(v9);
label12:
v23 = lengthof v3;
if v1 < v23 goto label13;
v24 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v24.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v1 = 0;
label13:
v25 = v1;
v1 = v1 + 1;
v3[v25] = v9;
goto label01;
label14:
v26 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v26.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v1);
v27 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
return v27;
}
protected com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int, boolean) throws java.io.IOException
{
int v1;
com.fasterxml.jackson.core.JsonToken v3;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int,boolean,boolean)>(v1, v2, 0);
return v3;
}
protected com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int, boolean, boolean) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser$Feature v16;
com.fasterxml.jackson.core.json.JsonReadFeature v15;
int v1, v10, v8, v9;
com.fasterxml.jackson.core.JsonToken v13;
java.lang.String v11, v14, v18, v5, v6, v7;
boolean v17, v2, v3;
double v12;
java.io.DataInput v4;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
v3 := @parameter2: boolean;
label01:
if v1 != 73 goto label11;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v1 = interfaceinvoke v4.<java.io.DataInput: int readUnsignedByte()>();
if v1 != 78 goto label04;
if v2 == 0 goto label02;
v5 = "-INF";
goto label03;
label02:
v5 = "+INF";
label03:
v6 = v5;
goto label07;
label04:
if v1 != 110 goto label11;
if v2 == 0 goto label05;
v7 = "-Infinity";
goto label06;
label05:
v7 = "+Infinity";
label06:
v6 = v7;
label07:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _matchToken(java.lang.String,int)>(v6, 3);
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;
v9 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_NON_NUM_NUMBERS>;
v10 = v8 & v9;
if v10 == 0 goto label10;
v11 = v6;
if v2 == 0 goto label08;
v12 = #-Infinity;
goto label09;
label08:
v12 = #Infinity;
label09:
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken resetAsNaN(java.lang.String,double)>(v11, v12);
return v13;
label10:
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Non-standard token \'\u0001\': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportError(java.lang.String)>(v14);
goto label01;
label11:
v15 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v16 = virtualinvoke v15.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v16);
if v17 != 0 goto label12;
if v3 == 0 goto label12;
if v2 != 0 goto label12;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(43, "JSON spec does not allow numbers to have plus signs: enable `JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS` to allow");
label12:
if v2 == 0 goto label13;
v18 = "expected digit (0-9) to follow minus sign, for valid numeric value";
goto label14;
label13:
v18 = "expected digit (0-9) for valid numeric value";
label14:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v1, v18);
return null;
}
protected final void _matchToken(java.lang.String, int) throws java.io.IOException
{
char v6;
int v2, v3, v5, v9;
java.io.DataInput v4, v8;
java.lang.String v1, v7;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = virtualinvoke v1.<java.lang.String: int length()>();
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v5 = interfaceinvoke v4.<java.io.DataInput: int readUnsignedByte()>();
v6 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v2);
if v5 == v6 goto label2;
v7 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, v2);
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidToken(int,java.lang.String)>(v5, v7);
label2:
v2 = v2 + 1;
if v2 < v3 goto label1;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v9 = interfaceinvoke v8.<java.io.DataInput: int readUnsignedByte()>();
if v9 < 48 goto label3;
if v9 == 93 goto label3;
if v9 == 125 goto label3;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _checkMatchEnd(java.lang.String,int,int)>(v1, v2, v9);
label3:
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = v9;
return;
}
private final void _checkMatchEnd(java.lang.String, int, int) throws java.io.IOException
{
char v7;
int v2, v3, v4;
java.lang.String v1, v6;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
boolean v5;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeCharForError(int)>(v3);
v5 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>(v4);
if v5 == 0 goto label1;
v6 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, v2);
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidToken(int,java.lang.String)>(v7, v6);
label1:
return;
}
private final int _skipWS() throws java.io.IOException
{
int v1, v3, v4, v5, v6;
java.io.DataInput v2, v7;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte>;
if v1 >= 0 goto label1;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v1 = interfaceinvoke v2.<java.io.DataInput: int readUnsignedByte()>();
goto label2;
label1:
v3 = (int) -1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = v3;
label2:
if v1 <= 32 goto label5;
if v1 == 47 goto label3;
if v1 != 35 goto label4;
label3:
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipWSComment(int)>(v1);
return v4;
label4:
return v1;
label5:
if v1 == 13 goto label6;
if v1 != 10 goto label7;
label6:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;
v6 = v5 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow> = v6;
label7:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v1 = interfaceinvoke v7.<java.io.DataInput: int readUnsignedByte()>();
goto label2;
}
private final int _skipWSOrEnd() throws java.io.IOException
{
java.io.EOFException v10, v3;
int v1, v11, v4, v5, v6, v7, v8;
java.io.DataInput v2, v9;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte>;
if v1 >= 0 goto label04;
label01:
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v1 = interfaceinvoke v2.<java.io.DataInput: int readUnsignedByte()>();
label02:
goto label05;
label03:
v3 := @caughtexception;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _eofAsNextChar()>();
return v4;
label04:
v5 = (int) -1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = v5;
label05:
if v1 <= 32 goto label08;
if v1 == 47 goto label06;
if v1 != 35 goto label07;
label06:
v6 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipWSComment(int)>(v1);
return v6;
label07:
return v1;
label08:
if v1 == 13 goto label09;
if v1 != 10 goto label10;
label09:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;
v8 = v7 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow> = v8;
label10:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v1 = interfaceinvoke v9.<java.io.DataInput: int readUnsignedByte()>();
label11:
goto label05;
label12:
v10 := @caughtexception;
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _eofAsNextChar()>();
return v11;
catch java.io.EOFException from label01 to label02 with label03;
catch java.io.EOFException from label10 to label11 with label12;
}
private final int _skipWSComment(int) throws java.io.IOException
{
int v1, v3, v4;
java.io.DataInput v5;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
label1:
if v1 <= 32 goto label4;
if v1 != 47 goto label2;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipComment()>();
goto label6;
label2:
if v1 != 35 goto label3;
v2 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _skipYAMLComment()>();
if v2 != 0 goto label6;
return v1;
label3:
return v1;
label4:
if v1 == 13 goto label5;
if v1 != 10 goto label6;
label5:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;
v4 = v3 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow> = v4;
label6:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v1 = interfaceinvoke v5.<java.io.DataInput: int readUnsignedByte()>();
goto label1;
}
private final int _skipColon() throws java.io.IOException
{
int v1, v12, v13, v15, v16, v17, v3, v5, v6, v8, v9;
java.io.DataInput v10, v11, v14, v2, v4, v7;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte>;
if v1 >= 0 goto label01;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v1 = interfaceinvoke v2.<java.io.DataInput: int readUnsignedByte()>();
goto label02;
label01:
v3 = (int) -1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _nextByte> = v3;
label02:
if v1 != 58 goto label10;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v5 = interfaceinvoke v4.<java.io.DataInput: int readUnsignedByte()>();
if v5 <= 32 goto label05;
if v5 == 47 goto label03;
if v5 != 35 goto label04;
label03:
v6 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipColon2(int,boolean)>(v5, 1);
return v6;
label04:
return v5;
label05:
if v5 == 32 goto label06;
if v5 != 9 goto label09;
label06:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v5 = interfaceinvoke v7.<java.io.DataInput: int readUnsignedByte()>();
if v5 <= 32 goto label09;
if v5 == 47 goto label07;
if v5 != 35 goto label08;
label07:
v8 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipColon2(int,boolean)>(v5, 1);
return v8;
label08:
return v5;
label09:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipColon2(int,boolean)>(v5, 1);
return v9;
label10:
if v1 == 32 goto label11;
if v1 != 9 goto label12;
label11:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v1 = interfaceinvoke v10.<java.io.DataInput: int readUnsignedByte()>();
label12:
if v1 != 58 goto label20;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v12 = interfaceinvoke v11.<java.io.DataInput: int readUnsignedByte()>();
if v12 <= 32 goto label15;
if v12 == 47 goto label13;
if v12 != 35 goto label14;
label13:
v13 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipColon2(int,boolean)>(v12, 1);
return v13;
label14:
return v12;
label15:
if v12 == 32 goto label16;
if v12 != 9 goto label19;
label16:
v14 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v12 = interfaceinvoke v14.<java.io.DataInput: int readUnsignedByte()>();
if v12 <= 32 goto label19;
if v12 == 47 goto label17;
if v12 != 35 goto label18;
label17:
v15 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipColon2(int,boolean)>(v12, 1);
return v15;
label18:
return v12;
label19:
v16 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipColon2(int,boolean)>(v12, 1);
return v16;
label20:
v17 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _skipColon2(int,boolean)>(v1, 0);
return v17;
}
private final int _skipColon2(int, boolean) throws java.io.IOException
{
int v1, v4, v5;
java.io.DataInput v6;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
boolean v2, v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
label1:
if v1 <= 32 goto label6;
if v1 != 47 goto label2;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipComment()>();
goto label8;
label2:
if v1 != 35 goto label3;
v3 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: boolean _skipYAMLComment()>();
if v3 != 0 goto label8;
label3:
if v2 == 0 goto label4;
return v1;
label4:
if v1 == 58 goto label5;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v1, "was expecting a colon to separate field name and value");
label5:
v2 = 1;
goto label8;
label6:
if v1 == 13 goto label7;
if v1 != 10 goto label8;
label7:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;
v5 = v4 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow> = v5;
label8:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v1 = interfaceinvoke v6.<java.io.DataInput: int readUnsignedByte()>();
goto label1;
}
private final void _skipComment() throws java.io.IOException
{
int v1, v2, v3, v5;
java.io.DataInput v4;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;
v2 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_JAVA_COMMENTS>;
v3 = v1 & v2;
if v3 != 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(47, "maybe a (non-standard) comment? (not recognized as one since Feature \'ALLOW_COMMENTS\' not enabled for parser)");
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v5 = interfaceinvoke v4.<java.io.DataInput: int readUnsignedByte()>();
if v5 != 47 goto label2;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipLine()>();
goto label4;
label2:
if v5 != 42 goto label3;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipCComment()>();
goto label4;
label3:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v5, "was expecting either \'*\' or \'/\' for a comment");
label4:
return;
}
private final void _skipCComment() throws java.io.IOException
{
int[] v1;
int v3, v4, v6, v7;
java.io.DataInput v2, v5, v8;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeComment()>();
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v3 = interfaceinvoke v2.<java.io.DataInput: int readUnsignedByte()>();
label1:
v4 = v1[v3];
if v4 == 0 goto label8;
lookupswitch(v4)
{
case 2: goto label4;
case 3: goto label5;
case 4: goto label6;
case 10: goto label3;
case 13: goto label3;
case 42: goto label2;
default: goto label7;
};
label2:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v3 = interfaceinvoke v5.<java.io.DataInput: int readUnsignedByte()>();
if v3 != 47 goto label1;
return;
label3:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow> = v7;
goto label8;
label4:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipUtf8_2()>();
goto label8;
label5:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipUtf8_3()>();
goto label8;
label6:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipUtf8_4()>();
goto label8;
label7:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidChar(int)>(v3);
label8:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v3 = interfaceinvoke v8.<java.io.DataInput: int readUnsignedByte()>();
goto label1;
}
private final boolean _skipYAMLComment() throws java.io.IOException
{
int v1, v2, v3;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _features>;
v2 = <com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_YAML_COMMENTS>;
v3 = v1 & v2;
if v3 != 0 goto label1;
return 0;
label1:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipLine()>();
return 1;
}
private final void _skipLine() throws java.io.IOException
{
int[] v1;
int v3, v4, v5, v6;
java.io.DataInput v2;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeComment()>();
label1:
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v3 = interfaceinvoke v2.<java.io.DataInput: int readUnsignedByte()>();
v4 = v1[v3];
if v4 == 0 goto label1;
lookupswitch(v4)
{
case 2: goto label3;
case 3: goto label4;
case 4: goto label5;
case 10: goto label2;
case 13: goto label2;
case 42: goto label1;
default: goto label6;
};
label2:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;
v6 = v5 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow> = v6;
return;
label3:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipUtf8_2()>();
goto label1;
label4:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipUtf8_3()>();
goto label1;
label5:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _skipUtf8_4()>();
goto label1;
label6:
if v4 >= 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidChar(int)>(v3);
goto label1;
}
protected char _decodeEscaped() throws java.io.IOException
{
char v4;
int v10, v2, v3, v5, v6, v8, v9;
java.io.DataInput v1, v7;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v2 = interfaceinvoke v1.<java.io.DataInput: int readUnsignedByte()>();
lookupswitch(v2)
{
case 34: goto label06;
case 47: goto label06;
case 92: goto label06;
case 98: goto label01;
case 102: goto label04;
case 110: goto label03;
case 114: goto label05;
case 116: goto label02;
case 117: goto label08;
default: goto label07;
};
label01:
return 8;
label02:
return 9;
label03:
return 10;
label04:
return 12;
label05:
return 13;
label06:
return v2;
label07:
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeCharForError(int)>(v2);
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: char _handleUnrecognizedCharacterEscape(char)>(v3);
return v4;
label08:
v5 = 0;
v6 = 0;
label09:
if v6 >= 4 goto label11;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v8 = interfaceinvoke v7.<java.io.DataInput: int readUnsignedByte()>();
v9 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int charToHex(int)>(v8);
if v9 >= 0 goto label10;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v8, "expected a hex-digit for character escape sequence");
label10:
v10 = v5 << 4;
v5 = v10 | v9;
v6 = v6 + 1;
goto label09;
label11:
return v5;
}
protected int _decodeCharForError(int) throws java.io.IOException
{
byte v4;
int v1, v10, v11, v12, v13, v15, v16, v17, v18, v19, v2, v21, v22, v23, v24, v25, v3, v5, v6, v7, v9;
java.io.DataInput v14, v20, v8;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 = v1 & 255;
if v2 <= 127 goto label8;
v3 = v2 & 224;
if v3 != 192 goto label1;
v2 = v2 & 31;
v4 = 1;
goto label4;
label1:
v5 = v2 & 240;
if v5 != 224 goto label2;
v2 = v2 & 15;
v4 = 2;
goto label4;
label2:
v6 = v2 & 248;
if v6 != 240 goto label3;
v2 = v2 & 7;
v4 = 3;
goto label4;
label3:
v7 = v2 & 255;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidInitial(int)>(v7);
v4 = 1;
label4:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v9 = interfaceinvoke v8.<java.io.DataInput: int readUnsignedByte()>();
v10 = v9 & 192;
if v10 == 128 goto label5;
v11 = v9 & 255;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(v11);
label5:
v12 = v2 << 6;
v13 = v9 & 63;
v2 = v12 | v13;
if v4 <= 1 goto label8;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v15 = interfaceinvoke v14.<java.io.DataInput: int readUnsignedByte()>();
v16 = v15 & 192;
if v16 == 128 goto label6;
v17 = v15 & 255;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(v17);
label6:
v18 = v2 << 6;
v19 = v15 & 63;
v2 = v18 | v19;
if v4 <= 2 goto label8;
v20 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v21 = interfaceinvoke v20.<java.io.DataInput: int readUnsignedByte()>();
v22 = v21 & 192;
if v22 == 128 goto label7;
v23 = v21 & 255;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(v23);
label7:
v24 = v2 << 6;
v25 = v21 & 63;
v2 = v24 | v25;
label8:
return v2;
}
private final int _decodeUtf8_2(int) throws java.io.IOException
{
int v1, v3, v4, v5, v6, v7, v8, v9;
java.io.DataInput v2;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v3 = interfaceinvoke v2.<java.io.DataInput: int readUnsignedByte()>();
v4 = v3 & 192;
if v4 == 128 goto label1;
v5 = v3 & 255;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(v5);
label1:
v6 = v1 & 31;
v7 = v6 << 6;
v8 = v3 & 63;
v9 = v7 | v8;
return v9;
}
private final int _decodeUtf8_3(int) throws java.io.IOException
{
int v1, v11, v12, v13, v14, v15, v16, v2, v4, v5, v6, v7, v8, v9;
java.io.DataInput v10, v3;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 = v1 & 15;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v4 = interfaceinvoke v3.<java.io.DataInput: int readUnsignedByte()>();
v5 = v4 & 192;
if v5 == 128 goto label1;
v6 = v4 & 255;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(v6);
label1:
v7 = v2 << 6;
v8 = v4 & 63;
v9 = v7 | v8;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v11 = interfaceinvoke v10.<java.io.DataInput: int readUnsignedByte()>();
v12 = v11 & 192;
if v12 == 128 goto label2;
v13 = v11 & 255;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(v13);
label2:
v14 = v9 << 6;
v15 = v11 & 63;
v16 = v14 | v15;
return v16;
}
private final int _decodeUtf8_4(int) throws java.io.IOException
{
int v1, v11, v12, v13, v14, v15, v16, v18, v19, v20, v21, v22, v23, v24, v3, v4, v5, v6, v7, v8, v9;
java.io.DataInput v10, v17, v2;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v3 = interfaceinvoke v2.<java.io.DataInput: int readUnsignedByte()>();
v4 = v3 & 192;
if v4 == 128 goto label1;
v5 = v3 & 255;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(v5);
label1:
v6 = v1 & 7;
v7 = v6 << 6;
v8 = v3 & 63;
v9 = v7 | v8;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v11 = interfaceinvoke v10.<java.io.DataInput: int readUnsignedByte()>();
v12 = v11 & 192;
if v12 == 128 goto label2;
v13 = v11 & 255;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(v13);
label2:
v14 = v9 << 6;
v15 = v11 & 63;
v16 = v14 | v15;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v18 = interfaceinvoke v17.<java.io.DataInput: int readUnsignedByte()>();
v19 = v18 & 192;
if v19 == 128 goto label3;
v20 = v18 & 255;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(v20);
label3:
v21 = v16 << 6;
v22 = v18 & 63;
v23 = v21 | v22;
v24 = v23 - 65536;
return v24;
}
private final void _skipUtf8_2() throws java.io.IOException
{
int v2, v3, v4;
java.io.DataInput v1;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v2 = interfaceinvoke v1.<java.io.DataInput: int readUnsignedByte()>();
v3 = v2 & 192;
if v3 == 128 goto label1;
v4 = v2 & 255;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(v4);
label1:
return;
}
private final void _skipUtf8_3() throws java.io.IOException
{
int v2, v3, v4, v6, v7, v8;
java.io.DataInput v1, v5;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v2 = interfaceinvoke v1.<java.io.DataInput: int readUnsignedByte()>();
v3 = v2 & 192;
if v3 == 128 goto label1;
v4 = v2 & 255;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(v4);
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v6 = interfaceinvoke v5.<java.io.DataInput: int readUnsignedByte()>();
v7 = v6 & 192;
if v7 == 128 goto label2;
v8 = v6 & 255;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(v8);
label2:
return;
}
private final void _skipUtf8_4() throws java.io.IOException
{
int v10, v11, v12, v2, v3, v4, v6, v7, v8;
java.io.DataInput v1, v5, v9;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v2 = interfaceinvoke v1.<java.io.DataInput: int readUnsignedByte()>();
v3 = v2 & 192;
if v3 == 128 goto label1;
v4 = v2 & 255;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(v4);
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v6 = interfaceinvoke v5.<java.io.DataInput: int readUnsignedByte()>();
v7 = v6 & 192;
if v7 == 128 goto label2;
v8 = v6 & 255;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(v8);
label2:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v10 = interfaceinvoke v9.<java.io.DataInput: int readUnsignedByte()>();
v11 = v10 & 192;
if v11 == 128 goto label3;
v12 = v10 & 255;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidOther(int)>(v12);
label3:
return;
}
protected void _reportInvalidToken(int, java.lang.String) throws java.io.IOException
{
int v1;
java.lang.String v2, v3;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.String _validJsonTokenList()>();
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidToken(int,java.lang.String,java.lang.String)>(v1, v2, v3);
return;
}
protected void _reportInvalidToken(int, java.lang.String, java.lang.String) throws java.io.IOException
{
int v1, v5;
java.io.DataInput v7;
java.lang.StringBuilder v4;
java.lang.String v2, v3, v8, v9;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
boolean v6;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = new java.lang.StringBuilder;
specialinvoke v4.<java.lang.StringBuilder: void <init>(java.lang.String)>(v2);
label1:
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeCharForError(int)>(v1);
v6 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>(v5);
if v6 == 0 goto label2;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v5);
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v1 = interfaceinvoke v7.<java.io.DataInput: int readUnsignedByte()>();
goto label1;
label2:
v8 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.String toString()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v8, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unrecognized token \'\u0001\': was expecting \u0001");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportError(java.lang.String)>(v9);
return;
}
protected void _reportInvalidChar(int) throws com.fasterxml.jackson.core.JsonParseException
{
int v1;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
if v1 >= 32 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _throwInvalidSpace(int)>(v1);
label1:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportInvalidInitial(int)>(v1);
return;
}
protected void _reportInvalidInitial(int) throws com.fasterxml.jackson.core.JsonParseException
{
int v1;
java.lang.String v2, v3;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v1);
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid UTF-8 start byte 0x\u0001");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportError(java.lang.String)>(v3);
return;
}
private void _reportInvalidOther(int) throws com.fasterxml.jackson.core.JsonParseException
{
int v1;
java.lang.String v2, v3;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
v2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v1);
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid UTF-8 middle byte 0x\u0001");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportError(java.lang.String)>(v3);
return;
}
private static int[] _growArrayBy(int[], int)
{
int[] v0, v2, v5;
int v1, v3, v4;
v0 := @parameter0: int[];
v1 := @parameter1: int;
if v0 != null goto label1;
v2 = newarray (int)[v1];
return v2;
label1:
v3 = lengthof v0;
v4 = v3 + v1;
v5 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(v0, v4);
return v5;
}
protected final byte[] _decodeBase64(com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException
{
byte[] v19, v38, v6;
boolean v18, v23, v37;
com.fasterxml.jackson.core.Base64Variant v1;
java.io.DataInput v13, v21, v3, v32, v8;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
int v10, v11, v12, v14, v15, v16, v17, v20, v22, v24, v25, v29, v30, v31, v33, v34, v35, v36, v39, v4, v40, v41, v42, v5, v7, v9;
java.lang.String v27;
char v26;
java.lang.IllegalArgumentException v28;
com.fasterxml.jackson.core.util.ByteArrayBuilder v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.util.ByteArrayBuilder _getByteArrayBuilder()>();
label01:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v4 = interfaceinvoke v3.<java.io.DataInput: int readUnsignedByte()>();
if v4 <= 32 goto label01;
v5 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(v4);
if v5 >= 0 goto label03;
if v4 != 34 goto label02;
v6 = virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();
return v6;
label02:
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v4, 0);
if v5 < 0 goto label01;
label03:
v7 = v5;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v9 = interfaceinvoke v8.<java.io.DataInput: int readUnsignedByte()>();
v10 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(v9);
if v10 >= 0 goto label04;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v9, 1);
label04:
v11 = v7 << 6;
v12 = v11 | v10;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v14 = interfaceinvoke v13.<java.io.DataInput: int readUnsignedByte()>();
v15 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(v14);
if v15 >= 0 goto label10;
v16 = (int) -2;
if v15 == v16 goto label07;
if v14 != 34 goto label06;
v17 = v12 >> 4;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void append(int)>(v17);
v18 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: boolean requiresPaddingOnRead()>();
if v18 == 0 goto label05;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)>(v1);
label05:
v19 = virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();
return v19;
label06:
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v14, 2);
label07:
v20 = (int) -2;
if v15 != v20 goto label10;
v21 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v22 = interfaceinvoke v21.<java.io.DataInput: int readUnsignedByte()>();
v23 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: boolean usesPaddingChar(int)>(v22);
if v23 != 0 goto label09;
if v22 != 92 goto label08;
v24 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v22, 3);
v25 = (int) -2;
if v24 == v25 goto label09;
label08:
v26 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>();
v27 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v26) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected padding character \'\u0001\'");
v28 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.lang.IllegalArgumentException reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int,java.lang.String)>(v1, v22, 3, v27);
throw v28;
label09:
v29 = v12 >> 4;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void append(int)>(v29);
goto label01;
label10:
v30 = v12 << 6;
v31 = v30 | v15;
v32 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: java.io.DataInput _inputData>;
v33 = interfaceinvoke v32.<java.io.DataInput: int readUnsignedByte()>();
v34 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(v33);
if v34 >= 0 goto label14;
v35 = (int) -2;
if v34 == v35 goto label13;
if v33 != 34 goto label12;
v36 = v31 >> 2;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendTwoBytes(int)>(v36);
v37 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: boolean requiresPaddingOnRead()>();
if v37 == 0 goto label11;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)>(v1);
label11:
v38 = virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();
return v38;
label12:
v34 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v33, 3);
label13:
v39 = (int) -2;
if v34 != v39 goto label14;
v40 = v31 >> 2;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendTwoBytes(int)>(v40);
goto label01;
label14:
v41 = v31 << 6;
v42 = v41 | v34;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendThreeBytes(int)>(v42);
goto label01;
}
public com.fasterxml.jackson.core.JsonLocation getTokenLocation()
{
com.fasterxml.jackson.core.JsonLocation v1;
int v3, v4;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
com.fasterxml.jackson.core.io.ContentReference v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = new com.fasterxml.jackson.core.JsonLocation;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.io.ContentReference _contentReference()>();
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _tokenInputRow>;
v4 = (int) -1;
specialinvoke v1.<com.fasterxml.jackson.core.JsonLocation: void <init>(com.fasterxml.jackson.core.io.ContentReference,long,long,int,int)>(v2, -1L, -1L, v3, v4);
return v1;
}
public com.fasterxml.jackson.core.JsonLocation getCurrentLocation()
{
com.fasterxml.jackson.core.JsonLocation v1;
int v3, v4;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
com.fasterxml.jackson.core.io.ContentReference v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 = new com.fasterxml.jackson.core.JsonLocation;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.io.ContentReference _contentReference()>();
v3 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int _currInputRow>;
v4 = (int) -1;
specialinvoke v1.<com.fasterxml.jackson.core.JsonLocation: void <init>(com.fasterxml.jackson.core.io.ContentReference,long,long,int,int)>(v2, -1L, -1L, v3, v4);
return v1;
}
private void _closeScope(int) throws com.fasterxml.jackson.core.JsonParseException
{
com.fasterxml.jackson.core.json.JsonReadContext v10, v2, v4, v5, v7, v9;
int v1;
com.fasterxml.jackson.core.JsonToken v11, v6;
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser v0;
boolean v3, v8;
v0 := @this: com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
v1 := @parameter0: int;
if v1 != 93 goto label2;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inArray()>();
if v3 != 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportMismatchedEndMarker(int,char)>(v1, 125);
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext clearAndGetParent()>();
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = v5;
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_ARRAY>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v6;
label2:
if v1 != 125 goto label4;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v8 = virtualinvoke v7.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();
if v8 != 0 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: void _reportMismatchedEndMarker(int,char)>(v1, 93);
label3:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v10 = virtualinvoke v9.<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext clearAndGetParent()>();
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = v10;
v11 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_OBJECT>;
v0.<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v11;
label4:
return;
}
private static final int pad(int, int)
{
int v0, v1, v2, v3, v4, v5;
v0 := @parameter0: int;
v1 := @parameter1: int;
if v1 != 4 goto label1;
v2 = v0;
goto label2;
label1:
v3 = v1 << 3;
v4 = (int) -1;
v5 = v4 << v3;
v2 = v0 | v5;
label2:
return v2;
}
static void <clinit>()
{
com.fasterxml.jackson.core.JsonParser$Feature v0, v10, v12, v14, v2, v4, v6, v8;
int[] v16, v17;
int v1, v11, v13, v15, v3, v5, v7, v9;
v0 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_TRAILING_COMMA>;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_TRAILING_COMMA> = v1;
v2 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_NUMERIC_LEADING_ZEROS>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_LEADING_ZEROS> = v3;
v4 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_NON_NUMERIC_NUMBERS>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_NON_NUM_NUMBERS> = v5;
v6 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_MISSING_VALUES>;
v7 = virtualinvoke v6.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_MISSING> = v7;
v8 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_SINGLE_QUOTES>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_SINGLE_QUOTES> = v9;
v10 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_UNQUOTED_FIELD_NAMES>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_UNQUOTED_NAMES> = v11;
v12 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_COMMENTS>;
v13 = virtualinvoke v12.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_JAVA_COMMENTS> = v13;
v14 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_YAML_COMMENTS>;
v15 = virtualinvoke v14.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int FEAT_MASK_ALLOW_YAML_COMMENTS> = v15;
v16 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeUtf8()>();
<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icUTF8> = v16;
v17 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeLatin1()>();
<com.fasterxml.jackson.core.json.UTF8DataInputJsonParser: int[] _icLatin1> = v17;
return;
}
}