public class com.fasterxml.jackson.core.json.UTF8StreamJsonParser extends com.fasterxml.jackson.core.base.ParserBase
{
static final byte BYTE_LF;
private static final int FEAT_MASK_TRAILING_COMMA;
private static final int FEAT_MASK_LEADING_ZEROS;
private static final int FEAT_MASK_NON_NUM_NUMBERS;
private static final int FEAT_MASK_ALLOW_MISSING;
private static final int FEAT_MASK_ALLOW_SINGLE_QUOTES;
private static final int FEAT_MASK_ALLOW_UNQUOTED_NAMES;
private static final int FEAT_MASK_ALLOW_JAVA_COMMENTS;
private static final int FEAT_MASK_ALLOW_YAML_COMMENTS;
private static final int[] _icUTF8;
protected static final int[] _icLatin1;
protected com.fasterxml.jackson.core.ObjectCodec _objectCodec;
protected final com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols;
protected int[] _quadBuffer;
protected boolean _tokenIncomplete;
private int _quad1;
protected int _nameStartOffset;
protected int _nameStartRow;
protected int _nameStartCol;
protected java.io.InputStream _inputStream;
protected byte[] _inputBuffer;
protected boolean _bufferRecyclable;
public void <init>(com.fasterxml.jackson.core.io.IOContext, int, java.io.InputStream, com.fasterxml.jackson.core.ObjectCodec, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer, byte[], int, int, boolean)
{
byte[] v6;
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v5;
com.fasterxml.jackson.core.ObjectCodec v4;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
com.fasterxml.jackson.core.io.IOContext v1;
int v2, v7, v8;
boolean v9;
java.io.InputStream v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.io.IOContext;
v2 := @parameter1: int;
v3 := @parameter2: java.io.InputStream;
v4 := @parameter3: com.fasterxml.jackson.core.ObjectCodec;
v5 := @parameter4: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
v6 := @parameter5: byte[];
v7 := @parameter6: int;
v8 := @parameter7: int;
v9 := @parameter8: boolean;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void <init>(com.fasterxml.jackson.core.io.IOContext,int,java.io.InputStream,com.fasterxml.jackson.core.ObjectCodec,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer,byte[],int,int,int,boolean)>(v1, v2, v3, v4, v5, v6, v7, v8, 0, v9);
return;
}
public void <init>(com.fasterxml.jackson.core.io.IOContext, int, java.io.InputStream, com.fasterxml.jackson.core.ObjectCodec, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer, byte[], int, int, int, boolean)
{
byte[] v6;
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v5;
com.fasterxml.jackson.core.ObjectCodec v4;
int[] v11;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
com.fasterxml.jackson.core.io.IOContext v1;
int v12, v13, v14, v2, v7, v8, v9;
boolean v10;
java.io.InputStream v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.io.IOContext;
v2 := @parameter1: int;
v3 := @parameter2: java.io.InputStream;
v4 := @parameter3: com.fasterxml.jackson.core.ObjectCodec;
v5 := @parameter4: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
v6 := @parameter5: byte[];
v7 := @parameter6: int;
v8 := @parameter7: int;
v9 := @parameter8: int;
v10 := @parameter9: boolean;
specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: void <init>(com.fasterxml.jackson.core.io.IOContext,int)>(v1, v2);
v11 = newarray (int)[16];
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer> = v11;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.io.InputStream _inputStream> = v3;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.ObjectCodec _objectCodec> = v4;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols> = v5;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer> = v6;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v7;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd> = v8;
v12 = v7 - v9;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRowStart> = v12;
v13 = neg v7;
v14 = v13 + v9;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: long _currInputProcessed> = v14;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _bufferRecyclable> = v10;
return;
}
public com.fasterxml.jackson.core.ObjectCodec getCodec()
{
com.fasterxml.jackson.core.ObjectCodec v1;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.ObjectCodec _objectCodec>;
return v1;
}
public void setCodec(com.fasterxml.jackson.core.ObjectCodec)
{
com.fasterxml.jackson.core.ObjectCodec v1;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.ObjectCodec;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.ObjectCodec _objectCodec> = v1;
return;
}
public com.fasterxml.jackson.core.util.JacksonFeatureSet getReadCapabilities()
{
com.fasterxml.jackson.core.util.JacksonFeatureSet v1;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.JacksonFeatureSet JSON_READ_CAPABILITIES>;
return v1;
}
public int releaseBuffered(java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v1;
byte[] v8;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v2, v3, v4, v5, v6, v7;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: java.io.OutputStream;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v4 = v2 - v3;
if v4 >= 1 goto label1;
return 0;
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v7 = v6 + v4;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v7;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
virtualinvoke v1.<java.io.OutputStream: void write(byte[],int,int)>(v8, v5, v4);
return v4;
}
public java.lang.Object getInputSource()
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
java.io.InputStream v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.io.InputStream _inputStream>;
return v1;
}
protected final boolean _loadMore() throws java.io.IOException
{
byte[] v15, v2, v5;
long v8, v9;
int v10, v11, v12, v13, v16, v3, v6, v7;
java.lang.String v17;
java.io.IOException v14;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
java.io.InputStream v1, v4;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.io.InputStream _inputStream>;
if v1 == null goto label3;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v3 = lengthof v2;
if v3 != 0 goto label1;
return 0;
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.io.InputStream _inputStream>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v6 = virtualinvoke v4.<java.io.InputStream: int read(byte[],int,int)>(v5, 0, v3);
if v6 <= 0 goto label2;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: long _currInputProcessed>;
v9 = v8 + v7;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: long _currInputProcessed> = v9;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRowStart>;
v11 = v10 - v7;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRowStart> = v11;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _nameStartOffset>;
v13 = v12 - v7;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _nameStartOffset> = v13;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = 0;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd> = v6;
return 1;
label2:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _closeInput()>();
if v6 != 0 goto label3;
v14 = new java.io.IOException;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v16 = lengthof v15;
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("InputStream.read() returned 0 characters when trying to read \u0001 bytes");
specialinvoke v14.<java.io.IOException: void <init>(java.lang.String)>(v17);
throw v14;
label3:
return 0;
}
protected void _closeInput() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser$Feature v4;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
com.fasterxml.jackson.core.io.IOContext v2;
boolean v3, v5;
java.io.InputStream v1, v6;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.io.InputStream _inputStream>;
if v1 == null goto label3;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.io.IOContext: boolean isResourceManaged()>();
if v3 != 0 goto label1;
v4 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature AUTO_CLOSE_SOURCE>;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v4);
if v5 == 0 goto label2;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.io.InputStream _inputStream>;
virtualinvoke v6.<java.io.InputStream: void close()>();
label2:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.io.InputStream _inputStream> = null;
label3:
return;
}
protected void _releaseBuffers() throws java.io.IOException
{
byte[] v3, v4, v5;
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v1;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
com.fasterxml.jackson.core.io.IOContext v6;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: void _releaseBuffers()>();
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
virtualinvoke v1.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void release()>();
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _bufferRecyclable>;
if v2 == 0 goto label1;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
if v3 == null goto label1;
v4 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] NO_BYTES>;
if v3 == v4 goto label1;
v5 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] NO_BYTES>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer> = v5;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
virtualinvoke v6.<com.fasterxml.jackson.core.io.IOContext: void releaseReadIOBuffer(byte[])>(v3);
label1:
return;
}
public java.lang.String getText() throws java.io.IOException
{
com.fasterxml.jackson.core.util.TextBuffer v5;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
com.fasterxml.jackson.core.JsonToken v1, v2, v7;
java.lang.String v4, v6, v8;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v1 != v2 goto label2;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete>;
if v3 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete> = 0;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String _finishAndReturnString()>();
return v4;
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v6;
label2:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String _getText2(com.fasterxml.jackson.core.JsonToken)>(v7);
return v8;
}
public int getText(java.io.Writer) throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadContext v8;
int v10, v13, v15, v6;
com.fasterxml.jackson.core.JsonToken v2, v3, v7;
java.lang.String v9;
boolean v11, v4;
com.fasterxml.jackson.core.util.TextBuffer v12, v5;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
java.io.Writer v1;
char[] v14;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: java.io.Writer;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v2 != v3 goto label2;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete>;
if v4 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _finishString()>();
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.util.TextBuffer: int contentsToWriter(java.io.Writer)>(v1);
return v6;
label2:
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v2 != v7 goto label3;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();
virtualinvoke v1.<java.io.Writer: void write(java.lang.String)>(v9);
v10 = virtualinvoke v9.<java.lang.String: int length()>();
return v10;
label3:
if v2 == null goto label5;
v11 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: boolean isNumeric()>();
if v11 == 0 goto label4;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v13 = virtualinvoke v12.<com.fasterxml.jackson.core.util.TextBuffer: int contentsToWriter(java.io.Writer)>(v1);
return v13;
label4:
v14 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>();
virtualinvoke v1.<java.io.Writer: void write(char[])>(v14);
v15 = lengthof v14;
return v15;
label5:
return 0;
}
public java.lang.String getValueAsString() throws java.io.IOException
{
com.fasterxml.jackson.core.util.TextBuffer v5;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
com.fasterxml.jackson.core.JsonToken v1, v2, v7, v8;
java.lang.String v10, v4, v6, v9;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v1 != v2 goto label2;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete>;
if v3 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete> = 0;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String _finishAndReturnString()>();
return v4;
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v6;
label2:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v7 != v8 goto label3;
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String getCurrentName()>();
return v9;
label3:
v10 = specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: java.lang.String getValueAsString(java.lang.String)>(null);
return v10;
}
public java.lang.String getValueAsString(java.lang.String) throws java.io.IOException
{
com.fasterxml.jackson.core.util.TextBuffer v6;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
com.fasterxml.jackson.core.JsonToken v2, v3, v8, v9;
java.lang.String v1, v10, v11, v5, v7;
boolean v4;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v2 != v3 goto label2;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete>;
if v4 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete> = 0;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String _finishAndReturnString()>();
return v5;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v7 = virtualinvoke v6.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v7;
label2:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v9 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v8 != v9 goto label3;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String getCurrentName()>();
return v10;
label3:
v11 = specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: java.lang.String getValueAsString(java.lang.String)>(v1);
return v11;
}
public int getValueAsInt() throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v10, v11, v4, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v1, v2, v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v1 == v2 goto label1;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
if v1 != v3 goto label4;
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _numTypesValid>;
v5 = v4 & 1;
if v5 != 0 goto label3;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _numTypesValid>;
if v6 != 0 goto label2;
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _parseIntValue()>();
return v7;
label2:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _numTypesValid>;
v9 = v8 & 1;
if v9 != 0 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void convertNumberToInt()>();
label3:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _numberInt>;
return v10;
label4:
v11 = specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: int getValueAsInt(int)>(0);
return v11;
}
public int getValueAsInt(int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v10, v11, v12, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v2, v3, v4;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v2 == v3 goto label1;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
if v2 != v4 goto label4;
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _numTypesValid>;
v6 = v5 & 1;
if v6 != 0 goto label3;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _numTypesValid>;
if v7 != 0 goto label2;
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _parseIntValue()>();
return v8;
label2:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _numTypesValid>;
v10 = v9 & 1;
if v10 != 0 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void convertNumberToInt()>();
label3:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _numberInt>;
return v11;
label4:
v12 = specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: int getValueAsInt(int)>(v1);
return v12;
}
protected final java.lang.String _getText2(com.fasterxml.jackson.core.JsonToken) throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadContext v3;
com.fasterxml.jackson.core.util.TextBuffer v5;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v2;
com.fasterxml.jackson.core.JsonToken v1;
java.lang.String v4, v6, v7;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.JsonToken;
if v1 != null goto label1;
return null;
label1:
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v2)
{
case 5: goto label2;
case 6: goto label3;
case 7: goto label3;
case 8: goto label3;
default: goto label4;
};
label2:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();
return v4;
label3:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v6;
label4:
v7 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonToken: java.lang.String asString()>();
return v7;
}
public char[] getTextCharacters() throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadContext v5;
int v12, v3, v7;
com.fasterxml.jackson.core.JsonToken v1, v19, v2;
java.lang.String v6;
boolean v16, v4;
com.fasterxml.jackson.core.util.TextBuffer v17;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
com.fasterxml.jackson.core.io.IOContext v9;
char[] v10, v11, v13, v14, v15, v18, v20, v8;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
if v1 == null goto label8;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v3)
{
case 5: goto label1;
case 6: goto label5;
case 7: goto label6;
case 8: goto label6;
default: goto label7;
};
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _nameCopied>;
if v4 != 0 goto label4;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();
v7 = virtualinvoke v6.<java.lang.String: int length()>();
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: char[] _nameCopyBuffer>;
if v8 != null goto label2;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
v10 = virtualinvoke v9.<com.fasterxml.jackson.core.io.IOContext: char[] allocNameCopyBuffer(int)>(v7);
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: char[] _nameCopyBuffer> = v10;
goto label3;
label2:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: char[] _nameCopyBuffer>;
v12 = lengthof v11;
if v12 >= v7 goto label3;
v13 = newarray (char)[v7];
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: char[] _nameCopyBuffer> = v13;
label3:
v14 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: char[] _nameCopyBuffer>;
virtualinvoke v6.<java.lang.String: void getChars(int,int,char[],int)>(0, v7, v14, 0);
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _nameCopied> = 1;
label4:
v15 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: char[] _nameCopyBuffer>;
return v15;
label5:
v16 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete>;
if v16 == 0 goto label6;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _finishString()>();
label6:
v17 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v18 = virtualinvoke v17.<com.fasterxml.jackson.core.util.TextBuffer: char[] getTextBuffer()>();
return v18;
label7:
v19 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v20 = virtualinvoke v19.<com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>();
return v20;
label8:
return null;
}
public int getTextLength() throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadContext v4;
com.fasterxml.jackson.core.util.TextBuffer v8;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v12, v3, v6, v9;
char[] v11;
com.fasterxml.jackson.core.JsonToken v1, v10, v2;
java.lang.String v5;
boolean v7;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
if v1 == null goto label5;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v3)
{
case 5: goto label1;
case 6: goto label2;
case 7: goto label3;
case 8: goto label3;
default: goto label4;
};
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();
v6 = virtualinvoke v5.<java.lang.String: int length()>();
return v6;
label2:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete>;
if v7 == 0 goto label3;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _finishString()>();
label3:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.util.TextBuffer: int size()>();
return v9;
label4:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>();
v12 = lengthof v11;
return v12;
label5:
return 0;
}
public int getTextOffset() throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v3, v6;
com.fasterxml.jackson.core.JsonToken v1, v2;
com.fasterxml.jackson.core.util.TextBuffer v5;
boolean v4;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
if v1 == null goto label4;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v3)
{
case 5: goto label1;
case 6: goto label2;
case 7: goto label3;
case 8: goto label3;
default: goto label4;
};
label1:
return 0;
label2:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete>;
if v4 == 0 goto label3;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _finishString()>();
label3:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.util.TextBuffer: int getTextOffset()>();
return v6;
label4:
return 0;
}
public byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException
{
byte[] v10, v15, v18, v19, v6;
com.fasterxml.jackson.core.JsonToken v2, v3, v4, v5, v7;
java.lang.String v12, v13, v17, v8;
com.fasterxml.jackson.core.JsonParseException v14;
boolean v9;
java.lang.IllegalArgumentException v11;
com.fasterxml.jackson.core.Base64Variant v1;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
com.fasterxml.jackson.core.util.ByteArrayBuilder v16;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v2 == v3 goto label2;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_EMBEDDED_OBJECT>;
if v4 != v5 goto label1;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _binaryValue>;
if v6 != null goto label2;
label1:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.fasterxml.jackson.core.JsonToken)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Current token (\u0001) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportError(java.lang.String)>(v8);
label2:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete>;
if v9 == 0 goto label7;
label3:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _decodeBase64(com.fasterxml.jackson.core.Base64Variant)>(v1);
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _binaryValue> = v10;
label4:
goto label6;
label5:
v11 := @caughtexception;
v12 = virtualinvoke v11.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.fasterxml.jackson.core.Base64Variant,java.lang.String)>(v1, v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to decode VALUE_STRING as base64 (\u0001): \u0001");
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>(v13);
throw v14;
label6:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete> = 0;
goto label8;
label7:
v15 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _binaryValue>;
if v15 != null goto label8;
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.ByteArrayBuilder _getByteArrayBuilder()>();
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String getText()>();
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)>(v17, v16, v1);
v18 = virtualinvoke v16.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _binaryValue> = v18;
label8:
v19 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _binaryValue>;
return v19;
catch java.lang.IllegalArgumentException from label3 to label4 with label5;
}
public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v2;
java.lang.Throwable v12;
byte[] v6, v9;
com.fasterxml.jackson.core.Base64Variant v1;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
com.fasterxml.jackson.core.io.IOContext v11, v13, v8;
int v10, v7;
com.fasterxml.jackson.core.JsonToken v4, v5;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: java.io.OutputStream;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete>;
if v3 == 0 goto label1;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v4 == v5 goto label2;
label1:
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant)>(v1);
virtualinvoke v2.<java.io.OutputStream: void write(byte[])>(v6);
v7 = lengthof v6;
return v7;
label2:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.io.IOContext: byte[] allocBase64Buffer()>();
label3:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _readBinary(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream,byte[])>(v1, v2, v9);
label4:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
virtualinvoke v11.<com.fasterxml.jackson.core.io.IOContext: void releaseBase64Buffer(byte[])>(v9);
return v10;
label5:
v12 := @caughtexception;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
virtualinvoke v13.<com.fasterxml.jackson.core.io.IOContext: void releaseBase64Buffer(byte[])>(v9);
throw v12;
catch java.lang.Throwable from label3 to label4 with label5;
}
protected int _readBinary(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream, byte[]) throws java.io.IOException
{
byte[] v10, v19, v29, v3, v44, v61;
byte v13, v22, v32, v47, v64;
short v14, v23, v33, v48, v65;
java.lang.String v53;
boolean v38, v49, v71;
com.fasterxml.jackson.core.Base64Variant v1;
int v11, v12, v15, v16, v17, v18, v20, v21, v24, v25, v26, v27, v28, v30, v31, v34, v35, v36, v37, v39, v4, v40, v41, v42, v43, v45, v46, v5, v50, v51, v55, v56, v57, v58, v59, v6, v60, v62, v63, v66, v67, v68, v69, v7, v70, v72, v73, v74, v75, v76, v77, v78, v79, v8, v80, v81, v82, v83, v9;
java.io.OutputStream v2;
char v52;
java.lang.IllegalArgumentException v54;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: java.io.OutputStream;
v3 := @parameter2: byte[];
v4 = 0;
v5 = lengthof v3;
v6 = v5 - 3;
v7 = 0;
label01:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v8 < v9 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label02:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v12 = v11 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v12;
v13 = v10[v11];
v14 = v13 & 255;
if v14 <= 32 goto label01;
v15 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(v14);
if v15 >= 0 goto label03;
if v14 == 34 goto label17;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v14, 0);
if v15 < 0 goto label01;
label03:
if v4 <= v6 goto label04;
v7 = v7 + v4;
virtualinvoke v2.<java.io.OutputStream: void write(byte[],int,int)>(v3, 0, v4);
v4 = 0;
label04:
v16 = v15;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v18 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v17 < v18 goto label05;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label05:
v19 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v20 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v21 = v20 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v21;
v22 = v19[v20];
v23 = v22 & 255;
v24 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(v23);
if v24 >= 0 goto label06;
v24 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v23, 1);
label06:
v25 = v16 << 6;
v26 = v25 | v24;
v27 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v28 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v27 < v28 goto label07;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label07:
v29 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v30 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v31 = v30 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v31;
v32 = v29[v30];
v33 = v32 & 255;
v34 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(v33);
if v34 >= 0 goto label12;
v35 = (int) -2;
if v34 == v35 goto label09;
if v33 != 34 goto label08;
v36 = v26 >> 4;
v37 = v4;
v4 = v4 + 1;
v3[v37] = v36;
v38 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: boolean requiresPaddingOnRead()>();
if v38 == 0 goto label17;
v39 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v40 = v39 - 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v40;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)>(v1);
goto label17;
label08:
v34 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v33, 2);
label09:
v41 = (int) -2;
if v34 != v41 goto label12;
v42 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v43 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v42 < v43 goto label10;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label10:
v44 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v45 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v46 = v45 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v46;
v47 = v44[v45];
v48 = v47 & 255;
v49 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: boolean usesPaddingChar(int)>(v48);
if v49 != 0 goto label11;
v50 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v48, 3);
v51 = (int) -2;
if v50 == v51 goto label11;
v52 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>();
v53 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v52) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected padding character \'\u0001\'");
v54 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.IllegalArgumentException reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int,java.lang.String)>(v1, v48, 3, v53);
throw v54;
label11:
v55 = v26 >> 4;
v56 = v4;
v4 = v4 + 1;
v3[v56] = v55;
goto label01;
label12:
v57 = v26 << 6;
v58 = v57 | v34;
v59 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v60 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v59 < v60 goto label13;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label13:
v61 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v62 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v63 = v62 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v63;
v64 = v61[v62];
v65 = v64 & 255;
v66 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(v65);
if v66 >= 0 goto label16;
v67 = (int) -2;
if v66 == v67 goto label15;
if v65 != 34 goto label14;
v68 = v58 >> 2;
v69 = v4 + 1;
v70 = v68 >> 8;
v3[v4] = v70;
v4 = v69 + 1;
v3[v69] = v68;
v71 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: boolean requiresPaddingOnRead()>();
if v71 == 0 goto label17;
v72 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v73 = v72 - 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v73;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)>(v1);
goto label17;
label14:
v66 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v65, 3);
label15:
v74 = (int) -2;
if v66 != v74 goto label16;
v75 = v58 >> 2;
v76 = v4 + 1;
v77 = v75 >> 8;
v3[v4] = v77;
v4 = v76 + 1;
v3[v76] = v75;
goto label01;
label16:
v78 = v58 << 6;
v79 = v78 | v66;
v80 = v4 + 1;
v81 = v79 >> 16;
v3[v4] = v81;
v82 = v80 + 1;
v83 = v79 >> 8;
v3[v80] = v83;
v4 = v82 + 1;
v3[v82] = v79;
goto label01;
label17:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete> = 0;
if v4 <= 0 goto label18;
v7 = v7 + v4;
virtualinvoke v2.<java.io.OutputStream: void write(byte[],int,int)>(v3, 0, v4);
label18:
return v7;
}
public com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadContext v10, v17, v21, v8;
com.fasterxml.jackson.core.JsonParser$Feature v28;
com.fasterxml.jackson.core.json.JsonReadFeature v27;
int v13, v14, v15, v23, v5;
com.fasterxml.jackson.core.JsonToken v1, v16, v19, v2, v22, v24, v25, v26, v3, v30, v6, v7;
java.lang.String v11, v12, v20;
boolean v18, v29, v4, v9;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v1 != v2 goto label01;
v3 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextAfterName()>();
return v3;
label01:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _numTypesValid> = 0;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete>;
if v4 == 0 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipString()>();
label02:
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipWSOrEnd()>();
if v5 >= 0 goto label03;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void close()>();
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = null;
return null;
label03:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _binaryValue> = null;
if v5 != 93 goto label04;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _closeArrayScope()>();
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_ARRAY>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v6;
return v6;
label04:
if v5 != 125 goto label05;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _closeObjectScope()>();
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_OBJECT>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v7;
return v7;
label05:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.json.JsonReadContext: boolean expectComma()>();
if v9 == 0 goto label08;
if v5 == 44 goto label06;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String typeDesc()>();
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("was expecting comma to separate \u0001 entries");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v5, v12);
label06:
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipWS()>();
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _features>;
v14 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_TRAILING_COMMA>;
v15 = v13 & v14;
if v15 == 0 goto label08;
if v5 == 93 goto label07;
if v5 != 125 goto label08;
label07:
v16 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _closeScope(int)>(v5);
return v16;
label08:
v17 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v18 = virtualinvoke v17.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();
if v18 != 0 goto label09;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _updateLocation()>();
v19 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextTokenNotInObject(int)>(v5);
return v19;
label09:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _updateNameLocation()>();
v20 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String _parseName(int)>(v5);
v21 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
virtualinvoke v21.<com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentName(java.lang.String)>(v20);
v22 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v22;
v23 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipColon()>();
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _updateLocation()>();
if v23 != 34 goto label10;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete> = 1;
v24 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v24;
v25 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
return v25;
label10:
lookupswitch(v23)
{
case 43: goto label12;
case 45: goto label11;
case 46: goto label14;
case 48: goto label15;
case 49: goto label15;
case 50: goto label15;
case 51: goto label15;
case 52: goto label15;
case 53: goto label15;
case 54: goto label15;
case 55: goto label15;
case 56: goto label15;
case 57: goto label15;
case 91: goto label19;
case 102: goto label16;
case 110: goto label17;
case 116: goto label18;
case 123: goto label20;
default: goto label21;
};
label11:
v26 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(1);
goto label22;
label12:
v27 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v28 = virtualinvoke v27.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v29 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v28);
if v29 == 0 goto label13;
v26 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(0);
goto label22;
label13:
v26 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(v23);
goto label22;
label14:
v26 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean,boolean)>(0, 0);
goto label22;
label15:
v26 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseUnsignedNumber(int)>(v23);
goto label22;
label16:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchFalse()>();
v26 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
goto label22;
label17:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchNull()>();
v26 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
goto label22;
label18:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchTrue()>();
v26 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
goto label22;
label19:
v26 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
goto label22;
label20:
v26 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
goto label22;
label21:
v26 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(v23);
label22:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v26;
v30 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
return v30;
}
private final com.fasterxml.jackson.core.JsonToken _nextTokenNotInObject(int) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser$Feature v14;
com.fasterxml.jackson.core.json.JsonReadFeature v13;
int v1, v3, v4, v6, v7;
com.fasterxml.jackson.core.JsonToken v10, v11, v12, v16, v17, v18, v19, v2, v20, v5, v8, v9;
boolean v15;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
if v1 != 34 goto label01;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete> = 1;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v2;
return v2;
label01:
lookupswitch(v1)
{
case 43: goto label08;
case 45: goto label07;
case 46: goto label10;
case 48: goto label11;
case 49: goto label11;
case 50: goto label11;
case 51: goto label11;
case 52: goto label11;
case 53: goto label11;
case 54: goto label11;
case 55: goto label11;
case 56: goto label11;
case 57: goto label11;
case 91: goto label02;
case 102: goto label05;
case 110: goto label06;
case 116: goto label04;
case 123: goto label03;
default: goto label12;
};
label02:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputRow>;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void createChildArrayContext(int,int)>(v3, v4);
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v5;
return v5;
label03:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputRow>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void createChildObjectContext(int,int)>(v6, v7);
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v8;
return v8;
label04:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchTrue()>();
v9 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v9;
return v9;
label05:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchFalse()>();
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v10;
return v10;
label06:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchNull()>();
v11 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v11;
return v11;
label07:
v12 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(1);
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v12;
return v12;
label08:
v13 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v14 = virtualinvoke v13.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v14);
if v15 != 0 goto label09;
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(v1);
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v16;
return v16;
label09:
v17 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(0);
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v17;
return v17;
label10:
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean,boolean)>(0, 0);
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v18;
return v18;
label11:
v19 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseUnsignedNumber(int)>(v1);
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v19;
return v19;
label12:
v20 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(v1);
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v20;
return v20;
}
private final com.fasterxml.jackson.core.JsonToken _nextAfterName() throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v3, v4, v6, v7;
com.fasterxml.jackson.core.JsonToken v1, v2, v5;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _nameCopied> = 0;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = null;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v1 != v2 goto label1;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputRow>;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void createChildArrayContext(int,int)>(v3, v4);
goto label2;
label1:
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v1 != v5 goto label2;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputRow>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void createChildObjectContext(int,int)>(v6, v7);
label2:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v1;
return v1;
}
public void finishToken() throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete>;
if v1 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _finishString()>();
label1:
return;
}
public boolean nextFieldName(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException
{
byte[] v18, v26, v35;
com.fasterxml.jackson.core.SerializableString v1;
byte v27, v34, v36;
boolean v17, v37, v4, v9;
com.fasterxml.jackson.core.json.JsonReadContext v10, v16, v30, v8;
int v13, v14, v15, v19, v20, v21, v22, v23, v24, v25, v28, v29, v32, v33, v5;
com.fasterxml.jackson.core.JsonToken v2, v3, v6, v7;
java.lang.String v11, v12, v31;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.SerializableString;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _numTypesValid> = 0;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v2 != v3 goto label01;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextAfterName()>();
return 0;
label01:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete>;
if v4 == 0 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipString()>();
label02:
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipWSOrEnd()>();
if v5 >= 0 goto label03;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void close()>();
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = null;
return 0;
label03:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _binaryValue> = null;
if v5 != 93 goto label04;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _closeArrayScope()>();
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_ARRAY>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v6;
return 0;
label04:
if v5 != 125 goto label05;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _closeObjectScope()>();
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_OBJECT>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v7;
return 0;
label05:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.json.JsonReadContext: boolean expectComma()>();
if v9 == 0 goto label08;
if v5 == 44 goto label06;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String typeDesc()>();
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("was expecting comma to separate \u0001 entries");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v5, v12);
label06:
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipWS()>();
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _features>;
v14 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_TRAILING_COMMA>;
v15 = v13 & v14;
if v15 == 0 goto label08;
if v5 == 93 goto label07;
if v5 != 125 goto label08;
label07:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _closeScope(int)>(v5);
return 0;
label08:
v16 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v17 = virtualinvoke v16.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();
if v17 != 0 goto label09;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _updateLocation()>();
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextTokenNotInObject(int)>(v5);
return 0;
label09:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _updateNameLocation()>();
if v5 != 34 goto label12;
v18 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: byte[] asQuotedUTF8()>();
v19 = lengthof v18;
v20 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v21 = v20 + v19;
v22 = v21 + 4;
v23 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v22 >= v23 goto label12;
v24 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v25 = v24 + v19;
v26 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v27 = v26[v25];
if v27 != 34 goto label12;
v28 = 0;
v29 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
label10:
if v29 != v25 goto label11;
v30 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v31 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: java.lang.String getValue()>();
virtualinvoke v30.<com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentName(java.lang.String)>(v31);
v32 = v29 + 1;
v33 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipColonFast(int)>(v32);
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _isNextTokenNameYes(int)>(v33);
return 1;
label11:
v34 = v18[v28];
v35 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v36 = v35[v29];
if v34 != v36 goto label12;
v28 = v28 + 1;
v29 = v29 + 1;
goto label10;
label12:
v37 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _isNextTokenNameMaybe(int,com.fasterxml.jackson.core.SerializableString)>(v5, v1);
return v37;
}
public java.lang.String nextFieldName() throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadContext v15, v18, v7, v9;
com.fasterxml.jackson.core.JsonParser$Feature v24;
com.fasterxml.jackson.core.json.JsonReadFeature v23;
int v12, v13, v14, v20, v4;
com.fasterxml.jackson.core.JsonToken v1, v19, v2, v21, v22, v5, v6;
java.lang.String v10, v11, v17;
boolean v16, v25, v3, v8;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _numTypesValid> = 0;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v1 != v2 goto label01;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextAfterName()>();
return null;
label01:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete>;
if v3 == 0 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipString()>();
label02:
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipWSOrEnd()>();
if v4 >= 0 goto label03;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void close()>();
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = null;
return null;
label03:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _binaryValue> = null;
if v4 != 93 goto label04;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _closeArrayScope()>();
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_ARRAY>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v5;
return null;
label04:
if v4 != 125 goto label05;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _closeObjectScope()>();
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_OBJECT>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v6;
return null;
label05:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v8 = virtualinvoke v7.<com.fasterxml.jackson.core.json.JsonReadContext: boolean expectComma()>();
if v8 == 0 goto label08;
if v4 == 44 goto label06;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v10 = virtualinvoke v9.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String typeDesc()>();
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("was expecting comma to separate \u0001 entries");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v4, v11);
label06:
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipWS()>();
v12 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _features>;
v13 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_TRAILING_COMMA>;
v14 = v12 & v13;
if v14 == 0 goto label08;
if v4 == 93 goto label07;
if v4 != 125 goto label08;
label07:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _closeScope(int)>(v4);
return null;
label08:
v15 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v16 = virtualinvoke v15.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();
if v16 != 0 goto label09;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _updateLocation()>();
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextTokenNotInObject(int)>(v4);
return null;
label09:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _updateNameLocation()>();
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String _parseName(int)>(v4);
v18 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
virtualinvoke v18.<com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentName(java.lang.String)>(v17);
v19 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v19;
v20 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipColon()>();
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _updateLocation()>();
if v20 != 34 goto label10;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete> = 1;
v21 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v21;
return v17;
label10:
lookupswitch(v20)
{
case 43: goto label12;
case 45: goto label11;
case 46: goto label14;
case 48: goto label15;
case 49: goto label15;
case 50: goto label15;
case 51: goto label15;
case 52: goto label15;
case 53: goto label15;
case 54: goto label15;
case 55: goto label15;
case 56: goto label15;
case 57: goto label15;
case 91: goto label19;
case 102: goto label16;
case 110: goto label17;
case 116: goto label18;
case 123: goto label20;
default: goto label21;
};
label11:
v22 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(1);
goto label22;
label12:
v23 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v24 = virtualinvoke v23.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v25 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v24);
if v25 == 0 goto label13;
v22 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(0);
goto label22;
label13:
v22 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(v20);
goto label22;
label14:
v22 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean,boolean)>(0, 0);
goto label22;
label15:
v22 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseUnsignedNumber(int)>(v20);
goto label22;
label16:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchFalse()>();
v22 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
goto label22;
label17:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchNull()>();
v22 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
goto label22;
label18:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchTrue()>();
v22 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
goto label22;
label19:
v22 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
goto label22;
label20:
v22 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
goto label22;
label21:
v22 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(v20);
label22:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v22;
return v17;
}
private final int _skipColonFast(int) throws java.io.IOException
{
byte[] v13, v15, v18, v2, v5, v8;
byte v10, v17, v20, v4, v7;
int v1, v11, v12, v14, v16, v19, v21, v22, v23, v24, v3, v6, v9;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v3 = v1 + 1;
v4 = v2[v1];
if v4 != 58 goto label04;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v6 = v3 + 1;
v7 = v5[v3];
if v7 <= 32 goto label01;
if v7 == 47 goto label03;
if v7 == 35 goto label03;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v6;
return v7;
label01:
if v7 == 32 goto label02;
if v7 != 9 goto label03;
label02:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v9 = v6;
v6 = v6 + 1;
v10 = v8[v9];
if v10 <= 32 goto label03;
if v10 == 47 goto label03;
if v10 == 35 goto label03;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v6;
return v10;
label03:
v11 = v6 - 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v11;
v12 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipColon2(boolean)>(1);
return v12;
label04:
if v4 == 32 goto label05;
if v4 != 9 goto label06;
label05:
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v14 = v3;
v3 = v3 + 1;
v4 = v13[v14];
label06:
if v4 != 58 goto label10;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v16 = v3 + 1;
v17 = v15[v3];
if v17 <= 32 goto label07;
if v17 == 47 goto label09;
if v17 == 35 goto label09;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v16;
return v17;
label07:
if v17 == 32 goto label08;
if v17 != 9 goto label09;
label08:
v18 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v19 = v16;
v16 = v16 + 1;
v20 = v18[v19];
if v20 <= 32 goto label09;
if v20 == 47 goto label09;
if v20 == 35 goto label09;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v16;
return v20;
label09:
v21 = v16 - 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v21;
v22 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipColon2(boolean)>(1);
return v22;
label10:
v23 = v3 - 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v23;
v24 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipColon2(boolean)>(0);
return v24;
}
private final void _isNextTokenNameYes(int) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser$Feature v11;
com.fasterxml.jackson.core.json.JsonReadFeature v10;
int v1;
com.fasterxml.jackson.core.JsonToken v13, v14, v15, v16, v17, v2, v3, v4, v5, v6, v7, v8, v9;
boolean v12;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v2;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _updateLocation()>();
lookupswitch(v1)
{
case 34: goto label01;
case 43: goto label08;
case 45: goto label07;
case 46: goto label11;
case 48: goto label12;
case 49: goto label12;
case 50: goto label12;
case 51: goto label12;
case 52: goto label12;
case 53: goto label12;
case 54: goto label12;
case 55: goto label12;
case 56: goto label12;
case 57: goto label12;
case 91: goto label02;
case 102: goto label05;
case 110: goto label06;
case 116: goto label04;
case 123: goto label03;
default: goto label13;
};
label01:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete> = 1;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v3;
return;
label02:
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v4;
return;
label03:
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v5;
return;
label04:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchTrue()>();
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v6;
return;
label05:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchFalse()>();
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v7;
return;
label06:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchNull()>();
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v8;
return;
label07:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(1);
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v9;
return;
label08:
v10 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v11);
if v12 == 0 goto label09;
v13 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(0);
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v13;
goto label10;
label09:
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(v1);
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v14;
label10:
return;
label11:
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean,boolean)>(0, 0);
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v15;
return;
label12:
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseUnsignedNumber(int)>(v1);
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v16;
return;
label13:
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(v1);
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v17;
return;
}
private final boolean _isNextTokenNameMaybe(int, com.fasterxml.jackson.core.SerializableString) throws java.io.IOException
{
com.fasterxml.jackson.core.SerializableString v2;
com.fasterxml.jackson.core.json.JsonReadContext v4;
com.fasterxml.jackson.core.JsonParser$Feature v12;
com.fasterxml.jackson.core.json.JsonReadFeature v11;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v8;
com.fasterxml.jackson.core.JsonToken v10, v7, v9;
java.lang.String v3, v5;
boolean v13, v6;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: com.fasterxml.jackson.core.SerializableString;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String _parseName(int)>(v1);
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
virtualinvoke v4.<com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentName(java.lang.String)>(v3);
v5 = interfaceinvoke v2.<com.fasterxml.jackson.core.SerializableString: java.lang.String getValue()>();
v6 = virtualinvoke v3.<java.lang.String: boolean equals(java.lang.Object)>(v5);
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v7;
v8 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipColon()>();
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _updateLocation()>();
if v8 != 34 goto label01;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete> = 1;
v9 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v9;
return v6;
label01:
lookupswitch(v8)
{
case 43: goto label08;
case 45: goto label07;
case 46: goto label10;
case 48: goto label11;
case 49: goto label11;
case 50: goto label11;
case 51: goto label11;
case 52: goto label11;
case 53: goto label11;
case 54: goto label11;
case 55: goto label11;
case 56: goto label11;
case 57: goto label11;
case 91: goto label02;
case 102: goto label05;
case 110: goto label06;
case 116: goto label04;
case 123: goto label03;
default: goto label12;
};
label02:
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
goto label13;
label03:
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
goto label13;
label04:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchTrue()>();
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
goto label13;
label05:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchFalse()>();
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
goto label13;
label06:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchNull()>();
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
goto label13;
label07:
v10 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(1);
goto label13;
label08:
v11 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v12 = virtualinvoke v11.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v12);
if v13 == 0 goto label09;
v10 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(0);
goto label13;
label09:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(v8);
goto label13;
label10:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean,boolean)>(0, 0);
goto label13;
label11:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseUnsignedNumber(int)>(v8);
goto label13;
label12:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(v8);
label13:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v10;
return v6;
}
public java.lang.String nextTextValue() throws java.io.IOException
{
int v10, v11, v13, v14;
com.fasterxml.jackson.core.JsonToken v1, v12, v15, v16, v2, v3, v4, v9;
java.lang.String v17, v6, v8;
boolean v5;
com.fasterxml.jackson.core.util.TextBuffer v7;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v1 != v2 goto label5;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _nameCopied> = 0;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = null;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v3;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v3 != v4 goto label2;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete>;
if v5 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete> = 0;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String _finishAndReturnString()>();
return v6;
label1:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v8 = virtualinvoke v7.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v8;
label2:
v9 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v3 != v9 goto label3;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputRow>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void createChildArrayContext(int,int)>(v10, v11);
goto label4;
label3:
v12 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v3 != v12 goto label4;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputRow>;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void createChildObjectContext(int,int)>(v13, v14);
label4:
return null;
label5:
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v16 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v15 != v16 goto label6;
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String getText()>();
goto label7;
label6:
v17 = null;
label7:
return v17;
}
public int nextIntValue(int) throws java.io.IOException
{
int v1, v11, v12, v15, v6, v8, v9;
com.fasterxml.jackson.core.JsonToken v10, v13, v14, v2, v3, v4, v5, v7;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v2 != v3 goto label4;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _nameCopied> = 0;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = null;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v4;
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v4 != v5 goto label1;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int getIntValue()>();
return v6;
label1:
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v4 != v7 goto label2;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputRow>;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void createChildArrayContext(int,int)>(v8, v9);
goto label3;
label2:
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v4 != v10 goto label3;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputRow>;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void createChildObjectContext(int,int)>(v11, v12);
label3:
return v1;
label4:
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v14 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v13 != v14 goto label5;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int getIntValue()>();
goto label6;
label5:
v15 = v1;
label6:
return v15;
}
public long nextLongValue(long) throws java.io.IOException
{
long v1, v15, v6;
int v11, v12, v8, v9;
com.fasterxml.jackson.core.JsonToken v10, v13, v14, v2, v3, v4, v5, v7;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: long;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v2 != v3 goto label4;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _nameCopied> = 0;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = null;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v4;
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v4 != v5 goto label1;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: long getLongValue()>();
return v6;
label1:
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v4 != v7 goto label2;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputRow>;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void createChildArrayContext(int,int)>(v8, v9);
goto label3;
label2:
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v4 != v10 goto label3;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputRow>;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void createChildObjectContext(int,int)>(v11, v12);
label3:
return v1;
label4:
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v14 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v13 != v14 goto label5;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: long getLongValue()>();
goto label6;
label5:
v15 = v1;
label6:
return v15;
}
public java.lang.Boolean nextBooleanValue() throws java.io.IOException
{
int v10, v12, v13, v9;
java.lang.Boolean v16, v18, v5, v7;
com.fasterxml.jackson.core.JsonToken v1, v11, v14, v15, v17, v2, v3, v4, v6, v8;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v1 != v2 goto label5;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _nameCopied> = 0;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = null;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v3;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
if v3 != v4 goto label1;
v5 = <java.lang.Boolean: java.lang.Boolean TRUE>;
return v5;
label1:
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
if v3 != v6 goto label2;
v7 = <java.lang.Boolean: java.lang.Boolean FALSE>;
return v7;
label2:
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v3 != v8 goto label3;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputRow>;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void createChildArrayContext(int,int)>(v9, v10);
goto label4;
label3:
v11 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v3 != v11 goto label4;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputRow>;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void createChildObjectContext(int,int)>(v12, v13);
label4:
return null;
label5:
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v15 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
if v14 != v15 goto label6;
v16 = <java.lang.Boolean: java.lang.Boolean TRUE>;
return v16;
label6:
v17 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
if v14 != v17 goto label7;
v18 = <java.lang.Boolean: java.lang.Boolean FALSE>;
return v18;
label7:
return null;
}
protected final com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonToken v1;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean,boolean)>(0, 0);
return v1;
}
protected final com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean, boolean) throws java.io.IOException
{
com.fasterxml.jackson.core.util.TextBuffer v7;
com.fasterxml.jackson.core.JsonParser$Feature v4;
com.fasterxml.jackson.core.json.JsonReadFeature v3;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v9;
char[] v8;
com.fasterxml.jackson.core.JsonToken v10, v6;
boolean v1, v2, v5;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: boolean;
v2 := @parameter1: boolean;
v3 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v4);
if v5 != 0 goto label1;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int)>(46);
return v6;
label1:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v8 = virtualinvoke v7.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v9 = 0;
if v1 == 0 goto label2;
v9 = 1;
v8[0] = 45;
label2:
v10 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloat(char[],int,int,boolean,int)>(v8, v9, 46, v1, 0);
return v10;
}
protected com.fasterxml.jackson.core.JsonToken _parseUnsignedNumber(int) throws java.io.IOException
{
byte[] v14;
com.fasterxml.jackson.core.json.JsonReadContext v24;
short v18;
byte v17;
int v1, v10, v11, v12, v15, v16, v19, v21, v22, v4, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v13, v20, v26;
boolean v25;
com.fasterxml.jackson.core.util.TextBuffer v2, v23;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
char[] v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
if v1 != 48 goto label1;
v1 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _verifyNoLeadingZeroes()>();
label1:
v3[0] = v1;
v4 = 1;
v5 = 1;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v8 = lengthof v3;
v9 = v7 + v8;
v10 = v9 - 1;
v11 = staticinvoke <java.lang.Math: int min(int,int)>(v6, v10);
label2:
v12 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
if v12 < v11 goto label3;
v13 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseNumber2(char[],int,boolean,int)>(v3, v5, 0, v4);
return v13;
label3:
v14 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v16 = v15 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v16;
v17 = v14[v15];
v18 = v17 & 255;
if v18 < 48 goto label4;
if v18 > 57 goto label4;
v4 = v4 + 1;
v19 = v5;
v5 = v5 + 1;
v3[v19] = v18;
goto label2;
label4:
if v18 == 46 goto label5;
if v18 == 101 goto label5;
if v18 != 69 goto label6;
label5:
v20 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloat(char[],int,int,boolean,int)>(v3, v5, v18, 0, v4);
return v20;
label6:
v21 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v22 = v21 - 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v22;
v23 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v23.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v5);
v24 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v25 = virtualinvoke v24.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();
if v25 == 0 goto label7;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _verifyRootSpace(int)>(v18);
label7:
v26 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken resetInt(boolean,int)>(0, v4);
return v26;
}
private final com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean) throws java.io.IOException
{
byte[] v25, v7;
byte v10, v28;
boolean v1, v36;
com.fasterxml.jackson.core.json.JsonReadContext v35;
short v29;
int v11, v15, v16, v17, v18, v19, v20, v21, v22, v23, v26, v27, v30, v32, v33, v4, v5, v6, v8, v9;
com.fasterxml.jackson.core.JsonToken v12, v13, v14, v24, v31, v37;
com.fasterxml.jackson.core.util.TextBuffer v2, v34;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
char[] v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: boolean;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v4 = 0;
if v1 == 0 goto label01;
v4 = 1;
v3[0] = 45;
label01:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v5 < v6 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label02:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v9 = v8 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v9;
v10 = v7[v8];
v11 = v10 & 255;
if v11 > 48 goto label05;
if v11 == 48 goto label04;
if v11 != 46 goto label03;
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean,boolean)>(v1, 1);
return v12;
label03:
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int,boolean,boolean)>(v11, v1, 1);
return v13;
label04:
v11 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _verifyNoLeadingZeroes()>();
goto label06;
label05:
if v11 <= 57 goto label06;
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int,boolean,boolean)>(v11, v1, 1);
return v14;
label06:
v15 = v4 + 1;
v3[v4] = v11;
v16 = 1;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
v18 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v19 = lengthof v3;
v20 = v18 + v19;
v21 = v20 - v15;
v22 = staticinvoke <java.lang.Math: int min(int,int)>(v17, v21);
label07:
v23 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
if v23 < v22 goto label08;
v24 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseNumber2(char[],int,boolean,int)>(v3, v15, v1, v16);
return v24;
label08:
v25 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v26 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v27 = v26 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v27;
v28 = v25[v26];
v29 = v28 & 255;
if v29 < 48 goto label09;
if v29 > 57 goto label09;
v16 = v16 + 1;
v30 = v15;
v15 = v15 + 1;
v3[v30] = v29;
goto label07;
label09:
if v29 == 46 goto label10;
if v29 == 101 goto label10;
if v29 != 69 goto label11;
label10:
v31 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloat(char[],int,int,boolean,int)>(v3, v15, v29, v1, v16);
return v31;
label11:
v32 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v33 = v32 - 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v33;
v34 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v34.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v15);
v35 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v36 = virtualinvoke v35.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();
if v36 == 0 goto label12;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _verifyRootSpace(int)>(v29);
label12:
v37 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken resetInt(boolean,int)>(v1, v16);
return v37;
}
private final com.fasterxml.jackson.core.JsonToken _parseNumber2(char[], int, boolean, int) throws java.io.IOException
{
byte[] v10, v24;
com.fasterxml.jackson.core.json.JsonReadContext v22;
short v14, v27;
byte v13, v26;
int v11, v12, v16, v18, v19, v2, v20, v25, v4, v5, v6;
com.fasterxml.jackson.core.JsonToken v15, v28, v9;
boolean v23, v3, v7;
com.fasterxml.jackson.core.util.TextBuffer v17, v21, v8;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
char[] v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: boolean;
v4 := @parameter3: int;
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v5 < v6 goto label2;
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v7 != 0 goto label2;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v8.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v2);
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken resetInt(boolean,int)>(v3, v4);
return v9;
label2:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v12 = v11 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v12;
v13 = v10[v11];
v14 = v13 & 255;
if v14 > 57 goto label3;
if v14 >= 48 goto label5;
label3:
if v14 == 46 goto label4;
if v14 == 101 goto label4;
if v14 != 69 goto label7;
label4:
v15 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloat(char[],int,int,boolean,int)>(v1, v2, v14, v3, v4);
return v15;
label5:
v16 = lengthof v1;
if v2 < v16 goto label6;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v17.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v2 = 0;
label6:
v18 = v2;
v2 = v2 + 1;
v1[v18] = v14;
v4 = v4 + 1;
goto label1;
label7:
v19 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v20 = v19 - 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v20;
v21 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v21.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v2);
v22 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v23 = virtualinvoke v22.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();
if v23 == 0 goto label8;
v24 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v25 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v26 = v24[v25];
v27 = v26 & 255;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _verifyRootSpace(int)>(v27);
label8:
v28 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken resetInt(boolean,int)>(v3, v4);
return v28;
}
private final int _verifyNoLeadingZeroes() throws java.io.IOException
{
byte[] v16, v4;
short v7;
byte v18, v6;
int v1, v10, v11, v12, v13, v14, v17, v19, v2, v20, v5, v8, v9;
boolean v15, v3;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v1 < v2 goto label1;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v3 != 0 goto label1;
return 48;
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v6 = v4[v5];
v7 = v6 & 255;
if v7 < 48 goto label2;
if v7 <= 57 goto label3;
label2:
return 48;
label3:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _features>;
v9 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_LEADING_ZEROS>;
v10 = v8 & v9;
if v10 != 0 goto label4;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void reportInvalidNumber(java.lang.String)>("Leading zeroes not allowed");
label4:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v12 = v11 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v12;
if v7 != 48 goto label9;
label5:
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v13 < v14 goto label6;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v15 == 0 goto label9;
label6:
v16 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v18 = v16[v17];
v7 = v18 & 255;
if v7 < 48 goto label7;
if v7 <= 57 goto label8;
label7:
return 48;
label8:
v19 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v20 = v19 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v20;
if v7 == 48 goto label5;
label9:
return v7;
}
private final com.fasterxml.jackson.core.JsonToken _parseFloat(char[], int, int, boolean, int) throws java.io.IOException
{
byte[] v14, v30, v39, v49;
com.fasterxml.jackson.core.json.JsonReadFeature v21;
byte v17, v33, v42, v52;
boolean v13, v23, v4, v48, v56, v7;
com.fasterxml.jackson.core.json.JsonReadContext v55;
com.fasterxml.jackson.core.JsonParser$Feature v22;
int v10, v11, v12, v15, v16, v18, v2, v20, v24, v25, v27, v28, v29, v3, v31, v32, v34, v36, v37, v38, v40, v41, v43, v45, v46, v47, v5, v50, v51, v53, v54, v6, v8;
com.fasterxml.jackson.core.JsonToken v58;
com.fasterxml.jackson.core.util.TextBuffer v19, v26, v35, v44, v57, v9;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
char[] v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: int;
v6 = 0;
v7 = 0;
if v3 != 46 goto label06;
v8 = lengthof v1;
if v2 < v8 goto label01;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v9.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v2 = 0;
label01:
v10 = v2;
v2 = v2 + 1;
v1[v10] = v3;
label02:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v11 < v12 goto label03;
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v13 != 0 goto label03;
v7 = 1;
goto label05;
label03:
v14 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v16 = v15 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v16;
v17 = v14[v15];
v3 = v17 & 255;
if v3 < 48 goto label05;
if v3 > 57 goto label05;
v6 = v6 + 1;
v18 = lengthof v1;
if v2 < v18 goto label04;
v19 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v19.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v2 = 0;
label04:
v20 = v2;
v2 = v2 + 1;
v1[v20] = v3;
goto label02;
label05:
if v6 != 0 goto label06;
v21 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS>;
v22 = virtualinvoke v21.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v23 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v22);
if v23 != 0 goto label06;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v3, "Decimal point not followed by a digit");
label06:
v24 = 0;
if v3 == 101 goto label07;
if v3 != 69 goto label17;
label07:
v25 = lengthof v1;
if v2 < v25 goto label08;
v26 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v26.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v2 = 0;
label08:
v27 = v2;
v2 = v2 + 1;
v1[v27] = v3;
v28 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v29 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v28 < v29 goto label09;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label09:
v30 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v31 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v32 = v31 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v32;
v33 = v30[v31];
v3 = v33 & 255;
if v3 == 45 goto label10;
if v3 != 43 goto label13;
label10:
v34 = lengthof v1;
if v2 < v34 goto label11;
v35 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v35.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v2 = 0;
label11:
v36 = v2;
v2 = v2 + 1;
v1[v36] = v3;
v37 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v38 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v37 < v38 goto label12;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label12:
v39 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v40 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v41 = v40 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v41;
v42 = v39[v40];
v3 = v42 & 255;
label13:
if v3 < 48 goto label16;
if v3 > 57 goto label16;
v24 = v24 + 1;
v43 = lengthof v1;
if v2 < v43 goto label14;
v44 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v44.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v2 = 0;
label14:
v45 = v2;
v2 = v2 + 1;
v1[v45] = v3;
v46 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v47 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v46 < v47 goto label15;
v48 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v48 != 0 goto label15;
v7 = 1;
goto label16;
label15:
v49 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v50 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v51 = v50 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v51;
v52 = v49[v50];
v3 = v52 & 255;
goto label13;
label16:
if v24 != 0 goto label17;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v3, "Exponent indicator not followed by a digit");
label17:
if v7 != 0 goto label18;
v53 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v54 = v53 - 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v54;
v55 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v56 = virtualinvoke v55.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();
if v56 == 0 goto label18;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _verifyRootSpace(int)>(v3);
label18:
v57 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v57.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v2);
v58 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken resetFloat(boolean,int,int,int)>(v4, v5, v6, v24);
return v58;
}
private final void _verifyRootSpace(int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v2, v3, v4, v5, v6, v7, v8;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v3 = v2 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v3;
lookupswitch(v1)
{
case 9: goto label1;
case 10: goto label3;
case 13: goto label2;
case 32: goto label1;
default: goto label4;
};
label1:
return;
label2:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v5 = v4 - 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v5;
return;
label3:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow> = v7;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRowStart> = v8;
return;
label4:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportMissingRootWS(int)>(v1);
return;
}
protected final java.lang.String _parseName(int) throws java.io.IOException
{
byte[] v7;
byte v11, v16, v23, v30, v37;
int[] v8;
short v12, v17, v24, v31, v38;
int v1, v10, v13, v14, v15, v18, v19, v20, v21, v22, v25, v26, v27, v28, v29, v3, v32, v33, v34, v35, v36, v39, v4, v5, v9;
java.lang.String v2, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v6;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
if v1 == 34 goto label01;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String _handleOddName(int)>(v1);
return v2;
label01:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v4 = v3 + 13;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v4 <= v5 goto label02;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String slowParseName()>();
return v6;
label02:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v8 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _icLatin1>;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v10 = v9 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v10;
v11 = v7[v9];
v12 = v11 & 255;
v13 = v8[v12];
if v13 != 0 goto label11;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v15 = v14 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v15;
v16 = v7[v14];
v17 = v16 & 255;
v18 = v8[v17];
if v18 != 0 goto label09;
v19 = v12 << 8;
v20 = v19 | v17;
v21 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v22 = v21 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v22;
v23 = v7[v21];
v24 = v23 & 255;
v25 = v8[v24];
if v25 != 0 goto label07;
v26 = v20 << 8;
v27 = v26 | v24;
v28 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v29 = v28 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v29;
v30 = v7[v28];
v31 = v30 & 255;
v32 = v8[v31];
if v32 != 0 goto label05;
v33 = v27 << 8;
v34 = v33 | v31;
v35 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v36 = v35 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v36;
v37 = v7[v35];
v38 = v37 & 255;
v39 = v8[v38];
if v39 != 0 goto label03;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _quad1> = v34;
v40 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseMediumName(int)>(v38);
return v40;
label03:
if v38 != 34 goto label04;
v41 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String findName(int,int)>(v34, 4);
return v41;
label04:
v42 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseName(int,int,int)>(v34, v38, 4);
return v42;
label05:
if v31 != 34 goto label06;
v43 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String findName(int,int)>(v27, 3);
return v43;
label06:
v44 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseName(int,int,int)>(v27, v31, 3);
return v44;
label07:
if v24 != 34 goto label08;
v45 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String findName(int,int)>(v20, 2);
return v45;
label08:
v46 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseName(int,int,int)>(v20, v24, 2);
return v46;
label09:
if v17 != 34 goto label10;
v47 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String findName(int,int)>(v12, 1);
return v47;
label10:
v48 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseName(int,int,int)>(v12, v17, 1);
return v48;
label11:
if v12 != 34 goto label12;
return "";
label12:
v49 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseName(int,int,int)>(0, v12, 0);
return v49;
}
protected final java.lang.String parseMediumName(int) throws java.io.IOException
{
byte[] v2;
byte v17, v28, v39, v6;
int[] v3;
short v18, v29, v40, v7;
int v1, v11, v13, v14, v15, v16, v19, v20, v22, v24, v25, v26, v27, v30, v31, v33, v35, v36, v37, v38, v4, v41, v42, v44, v5, v8, v9;
java.lang.String v10, v12, v21, v23, v32, v34, v43, v45, v46;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v3 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _icLatin1>;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v5 = v4 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v5;
v6 = v2[v4];
v7 = v6 & 255;
v8 = v3[v7];
if v8 == 0 goto label2;
if v7 != 34 goto label1;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _quad1>;
v10 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String findName(int,int,int)>(v9, v1, 1);
return v10;
label1:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _quad1>;
v12 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseName(int,int,int,int)>(v11, v1, v7, 1);
return v12;
label2:
v13 = v1 << 8;
v14 = v13 | v7;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v16 = v15 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v16;
v17 = v2[v15];
v18 = v17 & 255;
v19 = v3[v18];
if v19 == 0 goto label4;
if v18 != 34 goto label3;
v20 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _quad1>;
v21 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String findName(int,int,int)>(v20, v14, 2);
return v21;
label3:
v22 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _quad1>;
v23 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseName(int,int,int,int)>(v22, v14, v18, 2);
return v23;
label4:
v24 = v14 << 8;
v25 = v24 | v18;
v26 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v27 = v26 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v27;
v28 = v2[v26];
v29 = v28 & 255;
v30 = v3[v29];
if v30 == 0 goto label6;
if v29 != 34 goto label5;
v31 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _quad1>;
v32 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String findName(int,int,int)>(v31, v25, 3);
return v32;
label5:
v33 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _quad1>;
v34 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseName(int,int,int,int)>(v33, v25, v29, 3);
return v34;
label6:
v35 = v25 << 8;
v36 = v35 | v29;
v37 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v38 = v37 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v38;
v39 = v2[v37];
v40 = v39 & 255;
v41 = v3[v40];
if v41 == 0 goto label8;
if v40 != 34 goto label7;
v42 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _quad1>;
v43 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String findName(int,int,int)>(v42, v36, 4);
return v43;
label7:
v44 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _quad1>;
v45 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseName(int,int,int,int)>(v44, v36, v40, 4);
return v45;
label8:
v46 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseMediumName2(int,int)>(v40, v36);
return v46;
}
protected final java.lang.String parseMediumName2(int, int) throws java.io.IOException
{
byte[] v3;
byte v18, v29, v40, v7;
int[] v4;
short v19, v30, v41, v8;
int v1, v10, v12, v14, v15, v16, v17, v2, v20, v21, v23, v25, v26, v27, v28, v31, v32, v34, v36, v37, v38, v39, v42, v43, v45, v5, v6, v9;
java.lang.String v11, v13, v22, v24, v33, v35, v44, v46, v47;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v4 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _icLatin1>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v6 = v5 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v6;
v7 = v3[v5];
v8 = v7 & 255;
v9 = v4[v8];
if v9 == 0 goto label2;
if v8 != 34 goto label1;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _quad1>;
v11 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String findName(int,int,int,int)>(v10, v2, v1, 1);
return v11;
label1:
v12 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _quad1>;
v13 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseName(int,int,int,int,int)>(v12, v2, v1, v8, 1);
return v13;
label2:
v14 = v1 << 8;
v15 = v14 | v8;
v16 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v17 = v16 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v17;
v18 = v3[v16];
v19 = v18 & 255;
v20 = v4[v19];
if v20 == 0 goto label4;
if v19 != 34 goto label3;
v21 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _quad1>;
v22 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String findName(int,int,int,int)>(v21, v2, v15, 2);
return v22;
label3:
v23 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _quad1>;
v24 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseName(int,int,int,int,int)>(v23, v2, v15, v19, 2);
return v24;
label4:
v25 = v15 << 8;
v26 = v25 | v19;
v27 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v28 = v27 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v28;
v29 = v3[v27];
v30 = v29 & 255;
v31 = v4[v30];
if v31 == 0 goto label6;
if v30 != 34 goto label5;
v32 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _quad1>;
v33 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String findName(int,int,int,int)>(v32, v2, v26, 3);
return v33;
label5:
v34 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _quad1>;
v35 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseName(int,int,int,int,int)>(v34, v2, v26, v30, 3);
return v35;
label6:
v36 = v26 << 8;
v37 = v36 | v30;
v38 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v39 = v38 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v39;
v40 = v3[v38];
v41 = v40 & 255;
v42 = v4[v41];
if v42 == 0 goto label8;
if v41 != 34 goto label7;
v43 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _quad1>;
v44 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String findName(int,int,int,int)>(v43, v2, v37, 4);
return v44;
label7:
v45 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _quad1>;
v46 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseName(int,int,int,int,int)>(v45, v2, v37, v41, 4);
return v46;
label8:
v47 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseLongName(int,int,int)>(v41, v2, v37);
return v47;
}
protected final java.lang.String parseLongName(int, int, int) throws java.io.IOException
{
byte[] v8;
byte v16, v27, v38, v49;
short v17, v28, v39, v50;
java.lang.String v20, v22, v31, v33, v42, v44, v53, v55, v63;
int[] v19, v21, v30, v32, v4, v41, v43, v52, v54, v56, v58, v59, v6, v60, v62, v7, v9;
int v1, v10, v11, v12, v13, v14, v15, v18, v2, v23, v24, v25, v26, v29, v3, v34, v35, v36, v37, v40, v45, v46, v47, v48, v5, v51, v57, v61;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _quad1>;
v4[0] = v5;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v6[1] = v2;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v7[2] = v3;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v9 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _icLatin1>;
v10 = 3;
label01:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v12 = v11 + 4;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v12 > v13 goto label11;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v15 = v14 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v15;
v16 = v8[v14];
v17 = v16 & 255;
v18 = v9[v17];
if v18 == 0 goto label03;
if v17 != 34 goto label02;
v19 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v20 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String findName(int[],int,int,int)>(v19, v10, v1, 1);
return v20;
label02:
v21 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v22 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>(v21, v10, v1, v17, 1);
return v22;
label03:
v23 = v1 << 8;
v24 = v23 | v17;
v25 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v26 = v25 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v26;
v27 = v8[v25];
v28 = v27 & 255;
v29 = v9[v28];
if v29 == 0 goto label05;
if v28 != 34 goto label04;
v30 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v31 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String findName(int[],int,int,int)>(v30, v10, v24, 2);
return v31;
label04:
v32 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v33 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>(v32, v10, v24, v28, 2);
return v33;
label05:
v34 = v24 << 8;
v35 = v34 | v28;
v36 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v37 = v36 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v37;
v38 = v8[v36];
v39 = v38 & 255;
v40 = v9[v39];
if v40 == 0 goto label07;
if v39 != 34 goto label06;
v41 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v42 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String findName(int[],int,int,int)>(v41, v10, v35, 3);
return v42;
label06:
v43 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v44 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>(v43, v10, v35, v39, 3);
return v44;
label07:
v45 = v35 << 8;
v46 = v45 | v39;
v47 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v48 = v47 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v48;
v49 = v8[v47];
v50 = v49 & 255;
v51 = v9[v50];
if v51 == 0 goto label09;
if v50 != 34 goto label08;
v52 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v53 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String findName(int[],int,int,int)>(v52, v10, v46, 4);
return v53;
label08:
v54 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v55 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>(v54, v10, v46, v50, 4);
return v55;
label09:
v56 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v57 = lengthof v56;
if v10 < v57 goto label10;
v58 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v59 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] growArrayBy(int[],int)>(v58, v10);
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer> = v59;
label10:
v60 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v61 = v10;
v10 = v10 + 1;
v60[v61] = v46;
v1 = v50;
goto label01;
label11:
v62 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v63 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>(v62, v10, 0, v1, 0);
return v63;
}
protected java.lang.String slowParseName() throws java.io.IOException
{
byte[] v5;
short v9;
byte v8;
int[] v10;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v2, v6, v7;
com.fasterxml.jackson.core.JsonToken v4;
java.lang.String v11;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v1 < v2 goto label1;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v3 != 0 goto label1;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(": was expecting closing \'\"\' for name", v4);
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v7;
v8 = v5[v6];
v9 = v8 & 255;
if v9 != 34 goto label2;
return "";
label2:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>(v10, 0, 0, v9, 0);
return v11;
}
private final java.lang.String parseName(int, int, int) throws java.io.IOException
{
int[] v4;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v2, v3;
java.lang.String v5;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>(v4, 0, v1, v2, v3);
return v5;
}
private final java.lang.String parseName(int, int, int, int) throws java.io.IOException
{
int[] v5, v6;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v2, v3, v4;
java.lang.String v7;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v5[0] = v1;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>(v6, 1, v2, v3, v4);
return v7;
}
private final java.lang.String parseName(int, int, int, int, int) throws java.io.IOException
{
int[] v6, v7, v8;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v2, v3, v4, v5;
java.lang.String v9;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v6[0] = v1;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v7[1] = v2;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String parseEscapedName(int[],int,int,int,int)>(v8, 2, v3, v4, v5);
return v9;
}
protected final java.lang.String parseEscapedName(int[], int, int, int, int) throws java.io.IOException
{
byte[] v39;
byte v42;
int[] v1, v11, v23, v33, v45, v6;
boolean v37;
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v48;
int v10, v12, v13, v14, v15, v16, v17, v18, v19, v2, v20, v21, v22, v24, v25, v26, v27, v28, v29, v3, v30, v31, v32, v34, v35, v36, v4, v40, v41, v43, v44, v46, v47, v5, v7, v9;
com.fasterxml.jackson.core.JsonToken v38;
java.lang.String v49;
char v8;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _icLatin1>;
label01:
v7 = v6[v4];
if v7 == 0 goto label10;
if v4 == 34 goto label15;
if v4 == 92 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(v4, "name");
goto label03;
label02:
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: char _decodeEscaped()>();
v4 = v8;
label03:
if v4 <= 127 goto label10;
if v5 < 4 goto label05;
v9 = lengthof v1;
if v2 < v9 goto label04;
v10 = lengthof v1;
v11 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] growArrayBy(int[],int)>(v1, v10);
v1 = v11;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer> = v11;
label04:
v12 = v2;
v2 = v2 + 1;
v1[v12] = v3;
v3 = 0;
v5 = 0;
label05:
if v4 >= 2048 goto label06;
v13 = v3 << 8;
v14 = v4 >> 6;
v15 = 192 | v14;
v3 = v13 | v15;
v5 = v5 + 1;
goto label09;
label06:
v16 = v3 << 8;
v17 = v4 >> 12;
v18 = 224 | v17;
v19 = v16 | v18;
v20 = v5 + 1;
if v20 < 4 goto label08;
v21 = lengthof v1;
if v2 < v21 goto label07;
v22 = lengthof v1;
v23 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] growArrayBy(int[],int)>(v1, v22);
v1 = v23;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer> = v23;
label07:
v24 = v2;
v2 = v2 + 1;
v1[v24] = v19;
v19 = 0;
v20 = 0;
label08:
v25 = v19 << 8;
v26 = v4 >> 6;
v27 = v26 & 63;
v28 = 128 | v27;
v3 = v25 | v28;
v5 = v20 + 1;
label09:
v29 = v4 & 63;
v4 = 128 | v29;
label10:
if v5 >= 4 goto label11;
v5 = v5 + 1;
v30 = v3 << 8;
v3 = v30 | v4;
goto label13;
label11:
v31 = lengthof v1;
if v2 < v31 goto label12;
v32 = lengthof v1;
v33 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] growArrayBy(int[],int)>(v1, v32);
v1 = v33;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer> = v33;
label12:
v34 = v2;
v2 = v2 + 1;
v1[v34] = v3;
v3 = v4;
v5 = 1;
label13:
v35 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v36 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v35 < v36 goto label14;
v37 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v37 != 0 goto label14;
v38 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(" in field name", v38);
label14:
v39 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v40 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v41 = v40 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v41;
v42 = v39[v40];
v4 = v42 & 255;
goto label01;
label15:
if v5 <= 0 goto label17;
v43 = lengthof v1;
if v2 < v43 goto label16;
v44 = lengthof v1;
v45 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] growArrayBy(int[],int)>(v1, v44);
v1 = v45;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer> = v45;
label16:
v46 = v2;
v2 = v2 + 1;
v47 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _padLastQuad(int,int)>(v3, v5);
v1[v46] = v47;
label17:
v48 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v49 = virtualinvoke v48.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int[],int)>(v1, v2);
if v49 != null goto label18;
v49 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String addName(int[],int,int)>(v1, v2, v5);
label18:
return v49;
}
protected java.lang.String _handleOddName(int) throws java.io.IOException
{
byte[] v24;
byte v26;
int[] v11, v18, v32, v9;
boolean v22;
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v34;
int v1, v10, v12, v13, v14, v15, v16, v17, v19, v2, v20, v21, v25, v27, v28, v29, v3, v30, v31, v33, v4, v6, v7, v8;
com.fasterxml.jackson.core.JsonToken v23;
java.lang.String v35, v5;
char v36;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
if v1 != 39 goto label01;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _features>;
v3 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_ALLOW_SINGLE_QUOTES>;
v4 = v2 & v3;
if v4 == 0 goto label01;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String _parseAposName()>();
return v5;
label01:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _features>;
v7 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_ALLOW_UNQUOTED_NAMES>;
v8 = v6 & v7;
if v8 != 0 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeCharForError(int)>(v1);
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v36, "was expecting double-quote to start field name");
label02:
v9 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeUtf8JsNames()>();
v10 = v9[v1];
if v10 == 0 goto label03;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v1, "was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name");
label03:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v12 = 0;
v13 = 0;
v14 = 0;
label04:
if v14 >= 4 goto label05;
v14 = v14 + 1;
v15 = v13 << 8;
v13 = v15 | v1;
goto label07;
label05:
v16 = lengthof v11;
if v12 < v16 goto label06;
v17 = lengthof v11;
v18 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] growArrayBy(int[],int)>(v11, v17);
v11 = v18;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer> = v18;
label06:
v19 = v12;
v12 = v12 + 1;
v11[v19] = v13;
v13 = v1;
v14 = 1;
label07:
v20 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v21 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v20 < v21 goto label08;
v22 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v22 != 0 goto label08;
v23 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(" in field name", v23);
label08:
v24 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v25 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v26 = v24[v25];
v1 = v26 & 255;
v27 = v9[v1];
if v27 != 0 goto label09;
v28 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v29 = v28 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v29;
goto label04;
label09:
if v14 <= 0 goto label11;
v30 = lengthof v11;
if v12 < v30 goto label10;
v31 = lengthof v11;
v32 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] growArrayBy(int[],int)>(v11, v31);
v11 = v32;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer> = v32;
label10:
v33 = v12;
v12 = v12 + 1;
v11[v33] = v13;
label11:
v34 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v35 = virtualinvoke v34.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int[],int)>(v11, v12);
if v35 != null goto label12;
v35 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String addName(int[],int,int)>(v11, v12, v14);
label12:
return v35;
}
protected java.lang.String _parseAposName() throws java.io.IOException
{
byte[] v46, v5;
byte v49, v8;
int[] v10, v14, v18, v30, v40, v52;
boolean v3, v44;
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v55;
int v1, v11, v12, v13, v15, v16, v17, v19, v2, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v31, v32, v33, v34, v35, v36, v37, v38, v39, v41, v42, v43, v47, v48, v50, v51, v53, v54, v6, v7, v9;
com.fasterxml.jackson.core.JsonToken v4, v45;
java.lang.String v56;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v1 < v2 goto label01;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v3 != 0 goto label01;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(": was expecting closing \'\'\' for field name", v4);
label01:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v7;
v8 = v5[v6];
v9 = v8 & 255;
if v9 != 39 goto label02;
return "";
label02:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v11 = 0;
v12 = 0;
v13 = 0;
v14 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _icLatin1>;
label03:
if v9 == 39 goto label17;
v15 = v14[v9];
if v15 == 0 goto label12;
if v9 == 34 goto label12;
if v9 == 92 goto label04;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(v9, "name");
goto label05;
label04:
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: char _decodeEscaped()>();
label05:
if v9 <= 127 goto label12;
if v13 < 4 goto label07;
v16 = lengthof v10;
if v11 < v16 goto label06;
v17 = lengthof v10;
v18 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] growArrayBy(int[],int)>(v10, v17);
v10 = v18;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer> = v18;
label06:
v19 = v11;
v11 = v11 + 1;
v10[v19] = v12;
v12 = 0;
v13 = 0;
label07:
if v9 >= 2048 goto label08;
v20 = v12 << 8;
v21 = v9 >> 6;
v22 = 192 | v21;
v12 = v20 | v22;
v13 = v13 + 1;
goto label11;
label08:
v23 = v12 << 8;
v24 = v9 >> 12;
v25 = 224 | v24;
v26 = v23 | v25;
v27 = v13 + 1;
if v27 < 4 goto label10;
v28 = lengthof v10;
if v11 < v28 goto label09;
v29 = lengthof v10;
v30 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] growArrayBy(int[],int)>(v10, v29);
v10 = v30;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer> = v30;
label09:
v31 = v11;
v11 = v11 + 1;
v10[v31] = v26;
v26 = 0;
v27 = 0;
label10:
v32 = v26 << 8;
v33 = v9 >> 6;
v34 = v33 & 63;
v35 = 128 | v34;
v12 = v32 | v35;
v13 = v27 + 1;
label11:
v36 = v9 & 63;
v9 = 128 | v36;
label12:
if v13 >= 4 goto label13;
v13 = v13 + 1;
v37 = v12 << 8;
v12 = v37 | v9;
goto label15;
label13:
v38 = lengthof v10;
if v11 < v38 goto label14;
v39 = lengthof v10;
v40 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] growArrayBy(int[],int)>(v10, v39);
v10 = v40;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer> = v40;
label14:
v41 = v11;
v11 = v11 + 1;
v10[v41] = v12;
v12 = v9;
v13 = 1;
label15:
v42 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v43 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v42 < v43 goto label16;
v44 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v44 != 0 goto label16;
v45 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(" in field name", v45);
label16:
v46 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v47 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v48 = v47 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v48;
v49 = v46[v47];
v9 = v49 & 255;
goto label03;
label17:
if v13 <= 0 goto label19;
v50 = lengthof v10;
if v11 < v50 goto label18;
v51 = lengthof v10;
v52 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] growArrayBy(int[],int)>(v10, v51);
v10 = v52;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer> = v52;
label18:
v53 = v11;
v11 = v11 + 1;
v54 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _padLastQuad(int,int)>(v12, v13);
v10[v53] = v54;
label19:
v55 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v56 = virtualinvoke v55.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int[],int)>(v10, v11);
if v56 != null goto label20;
v56 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String addName(int[],int,int)>(v10, v11, v13);
label20:
return v56;
}
private final java.lang.String findName(int, int) throws com.fasterxml.jackson.core.JsonParseException, com.fasterxml.jackson.core.exc.StreamConstraintsException
{
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v4;
int[] v6, v7;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v2, v3;
java.lang.String v5, v8;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _padLastQuad(int,int)>(v1, v2);
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int)>(v3);
if v5 == null goto label1;
return v5;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v6[0] = v3;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v8 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String addName(int[],int,int)>(v7, 1, v2);
return v8;
}
private final java.lang.String findName(int, int, int) throws com.fasterxml.jackson.core.JsonParseException, com.fasterxml.jackson.core.exc.StreamConstraintsException
{
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v5;
int[] v7, v8, v9;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v2, v3, v4;
java.lang.String v10, v6;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _padLastQuad(int,int)>(v2, v3);
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int,int)>(v1, v4);
if v6 == null goto label1;
return v6;
label1:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v7[0] = v1;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v8[1] = v4;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v10 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String addName(int[],int,int)>(v9, 2, v3);
return v10;
}
private final java.lang.String findName(int, int, int, int) throws com.fasterxml.jackson.core.JsonParseException, com.fasterxml.jackson.core.exc.StreamConstraintsException
{
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v6;
int[] v8;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v2, v3, v4, v5, v9;
java.lang.String v10, v7;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _padLastQuad(int,int)>(v3, v4);
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v7 = virtualinvoke v6.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int,int,int)>(v1, v2, v5);
if v7 == null goto label1;
return v7;
label1:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer>;
v8[0] = v1;
v8[1] = v2;
v9 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _padLastQuad(int,int)>(v5, v4);
v8[2] = v9;
v10 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String addName(int[],int,int)>(v8, 3, v4);
return v10;
}
private final java.lang.String findName(int[], int, int, int) throws com.fasterxml.jackson.core.JsonParseException, com.fasterxml.jackson.core.exc.StreamConstraintsException
{
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v10;
int[] v1, v7;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v2, v3, v4, v5, v6, v8, v9;
java.lang.String v11, v12;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = lengthof v1;
if v2 < v5 goto label1;
v6 = lengthof v1;
v7 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] growArrayBy(int[],int)>(v1, v6);
v1 = v7;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _quadBuffer> = v7;
label1:
v8 = v2 + 1;
v9 = staticinvoke <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _padLastQuad(int,int)>(v3, v4);
v1[v2] = v9;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int[],int)>(v1, v8);
if v11 != null goto label2;
v12 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String addName(int[],int,int)>(v1, v8, v4);
return v12;
label2:
return v11;
}
private final java.lang.String addName(int[], int, int) throws com.fasterxml.jackson.core.JsonParseException, com.fasterxml.jackson.core.exc.StreamConstraintsException
{
byte v26;
java.lang.String v71, v74;
com.fasterxml.jackson.core.util.TextBuffer v13, v61, v69;
char[] v14;
int[] v1;
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v73;
int v10, v11, v12, v15, v16, v17, v18, v19, v2, v20, v21, v22, v23, v24, v25, v27, v28, v29, v3, v31, v32, v33, v34, v35, v36, v37, v38, v39, v4, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v5, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v6, v60, v62, v63, v64, v65, v66, v67, v68, v7, v70, v72, v8, v9;
com.fasterxml.jackson.core.JsonToken v30;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v2 << 2;
v5 = v4 - 4;
v6 = v5 + v3;
if v3 >= 4 goto label01;
v7 = v2 - 1;
v8 = v1[v7];
v9 = v2 - 1;
v10 = 4 - v3;
v11 = v10 << 3;
v12 = v8 << v11;
v1[v9] = v12;
goto label02;
label01:
v8 = 0;
label02:
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v14 = virtualinvoke v13.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v15 = 0;
v16 = 0;
label03:
if v16 >= v6 goto label16;
v17 = v16 >> 2;
v18 = v1[v17];
v19 = v16 & 3;
v20 = 3 - v19;
v21 = v20 << 3;
v22 = v18 >> v21;
v23 = v22 & 255;
v16 = v16 + 1;
if v23 <= 127 goto label14;
v24 = v23 & 224;
if v24 != 192 goto label04;
v25 = v23 & 31;
v26 = 1;
goto label07;
label04:
v27 = v23 & 240;
if v27 != 224 goto label05;
v25 = v23 & 15;
v26 = 2;
goto label07;
label05:
v28 = v23 & 248;
if v28 != 240 goto label06;
v25 = v23 & 7;
v26 = 3;
goto label07;
label06:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidInitial(int)>(v23);
v25 = 1;
v26 = 1;
label07:
v29 = v16 + v26;
if v29 <= v6 goto label08;
v30 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(" in field name", v30);
label08:
v31 = v16 >> 2;
v32 = v1[v31];
v33 = v16 & 3;
v34 = 3 - v33;
v35 = v34 << 3;
v36 = v32 >> v35;
v16 = v16 + 1;
v37 = v36 & 192;
if v37 == 128 goto label09;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int)>(v36);
label09:
v38 = v25 << 6;
v39 = v36 & 63;
v23 = v38 | v39;
if v26 <= 1 goto label12;
v40 = v16 >> 2;
v41 = v1[v40];
v42 = v16 & 3;
v43 = 3 - v42;
v44 = v43 << 3;
v45 = v41 >> v44;
v16 = v16 + 1;
v46 = v45 & 192;
if v46 == 128 goto label10;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int)>(v45);
label10:
v47 = v23 << 6;
v48 = v45 & 63;
v23 = v47 | v48;
if v26 <= 2 goto label14;
v49 = v16 >> 2;
v50 = v1[v49];
v51 = v16 & 3;
v52 = 3 - v51;
v53 = v52 << 3;
v54 = v50 >> v53;
v16 = v16 + 1;
v55 = v54 & 192;
if v55 == 128 goto label11;
v56 = v54 & 255;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int)>(v56);
label11:
v57 = v23 << 6;
v58 = v54 & 63;
v23 = v57 | v58;
label12:
if v26 <= 2 goto label14;
v59 = v23 - 65536;
v60 = lengthof v14;
if v15 < v60 goto label13;
v61 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v14 = virtualinvoke v61.<com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();
label13:
v62 = v15;
v15 = v15 + 1;
v63 = v59 >> 10;
v64 = (int) 55296;
v65 = v64 + v63;
v14[v62] = v65;
v66 = v59 & 1023;
v67 = (int) 56320;
v23 = v67 | v66;
label14:
v68 = lengthof v14;
if v15 < v68 goto label15;
v69 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v14 = virtualinvoke v69.<com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();
label15:
v70 = v15;
v15 = v15 + 1;
v14[v70] = v23;
goto label03;
label16:
v71 = new java.lang.String;
specialinvoke v71.<java.lang.String: void <init>(char[],int,int)>(v14, 0, v15);
if v3 >= 4 goto label17;
v72 = v2 - 1;
v1[v72] = v8;
label17:
v73 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v74 = virtualinvoke v73.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String addName(java.lang.String,int[],int)>(v71, v1, v2);
return v74;
}
private static final int _padLastQuad(int, int)
{
int v0, v1, v2, v3, v4, v5;
v0 := @parameter0: int;
v1 := @parameter1: int;
if v1 != 4 goto label1;
v2 = v0;
goto label2;
label1:
v3 = v1 << 3;
v4 = (int) -1;
v5 = v4 << v3;
v2 = v0 | v5;
label2:
return v2;
}
protected void _loadMoreGuaranteed() throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v1 != 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidEOF()>();
label1:
return;
}
protected void _finishString() throws java.io.IOException
{
byte[] v11;
short v13;
byte v12;
int[] v6;
int v1, v10, v14, v15, v17, v2, v3, v7, v8, v9;
com.fasterxml.jackson.core.util.TextBuffer v16, v4;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
char[] v5;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v1 < v2 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
label1:
v3 = 0;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v6 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _icUTF8>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
v8 = lengthof v5;
v9 = v1 + v8;
v10 = staticinvoke <java.lang.Math: int min(int,int)>(v7, v9);
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
label2:
if v1 >= v10 goto label4;
v12 = v11[v1];
v13 = v12 & 255;
v14 = v6[v13];
if v14 == 0 goto label3;
if v13 != 34 goto label4;
v15 = v1 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v15;
v16 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v16.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v3);
return;
label3:
v1 = v1 + 1;
v17 = v3;
v3 = v3 + 1;
v5[v17] = v13;
goto label2;
label4:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v1;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _finishString2(char[],int)>(v5, v3);
return;
}
protected java.lang.String _finishAndReturnString() throws java.io.IOException
{
byte[] v11;
short v13;
byte v12;
int[] v6;
int v1, v10, v14, v15, v18, v2, v3, v7, v8, v9;
java.lang.String v17, v20;
com.fasterxml.jackson.core.util.TextBuffer v16, v19, v4;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
char[] v5;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v1 < v2 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
label1:
v3 = 0;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v6 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _icUTF8>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
v8 = lengthof v5;
v9 = v1 + v8;
v10 = staticinvoke <java.lang.Math: int min(int,int)>(v7, v9);
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
label2:
if v1 >= v10 goto label4;
v12 = v11[v1];
v13 = v12 & 255;
v14 = v6[v13];
if v14 == 0 goto label3;
if v13 != 34 goto label4;
v15 = v1 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v15;
v16 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v17 = virtualinvoke v16.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String setCurrentAndReturn(int)>(v3);
return v17;
label3:
v1 = v1 + 1;
v18 = v3;
v3 = v3 + 1;
v5[v18] = v13;
goto label2;
label4:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v1;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _finishString2(char[],int)>(v5, v3);
v19 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v20 = virtualinvoke v19.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v20;
}
private final void _finishString2(char[], int) throws java.io.IOException
{
byte[] v4;
byte v15;
int[] v3;
int v10, v11, v12, v13, v14, v16, v17, v18, v19, v2, v21, v22, v23, v24, v25, v26, v27, v28, v29, v31, v32, v33, v35, v5, v6, v7, v9;
char v20;
com.fasterxml.jackson.core.util.TextBuffer v30, v34, v36, v8;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
char[] v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _icUTF8>;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
label01:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v5 < v6 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
label02:
v7 = lengthof v1;
if v2 < v7 goto label03;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v8.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v2 = 0;
label03:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
v10 = lengthof v1;
v11 = v10 - v2;
v12 = v5 + v11;
v13 = staticinvoke <java.lang.Math: int min(int,int)>(v9, v12);
label04:
if v5 >= v13 goto label06;
v14 = v5;
v5 = v5 + 1;
v15 = v4[v14];
v16 = v15 & 255;
v17 = v3[v16];
if v17 == 0 goto label05;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v5;
goto label07;
label05:
v18 = v2;
v2 = v2 + 1;
v1[v18] = v16;
goto label04;
label06:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v5;
goto label01;
label07:
if v16 == 34 goto label18;
v19 = v3[v16];
tableswitch(v19)
{
case 1: goto label08;
case 2: goto label09;
case 3: goto label10;
case 4: goto label12;
default: goto label14;
};
label08:
v20 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: char _decodeEscaped()>();
v16 = v20;
goto label16;
label09:
v16 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeUtf8_2(int)>(v16);
goto label16;
label10:
v21 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
v22 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v23 = v21 - v22;
if v23 < 2 goto label11;
v16 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeUtf8_3fast(int)>(v16);
goto label16;
label11:
v16 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeUtf8_3(int)>(v16);
goto label16;
label12:
v24 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeUtf8_4(int)>(v16);
v25 = v2;
v2 = v2 + 1;
v26 = v24 >> 10;
v27 = (int) 55296;
v28 = v27 | v26;
v1[v25] = v28;
v29 = lengthof v1;
if v2 < v29 goto label13;
v30 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v30.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v2 = 0;
label13:
v31 = v24 & 1023;
v32 = (int) 56320;
v16 = v32 | v31;
goto label16;
label14:
if v16 >= 32 goto label15;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(v16, "string value");
goto label16;
label15:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidChar(int)>(v16);
label16:
v33 = lengthof v1;
if v2 < v33 goto label17;
v34 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v34.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v2 = 0;
label17:
v35 = v2;
v2 = v2 + 1;
v1[v35] = v16;
goto label01;
label18:
v36 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v36.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v2);
return;
}
protected void _skipString() throws java.io.IOException
{
byte[] v2;
short v7;
byte v6;
int[] v1;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v3, v4, v5, v8, v9;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _tokenIncomplete> = 0;
v1 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _icUTF8>;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
label01:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v3 < v4 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
label02:
if v3 >= v4 goto label03;
v5 = v3;
v3 = v3 + 1;
v6 = v2[v5];
v7 = v6 & 255;
v8 = v1[v7];
if v8 == 0 goto label02;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v3;
goto label04;
label03:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v3;
goto label01;
label04:
if v7 == 34 goto label11;
v9 = v1[v7];
tableswitch(v9)
{
case 1: goto label05;
case 2: goto label06;
case 3: goto label07;
case 4: goto label08;
default: goto label09;
};
label05:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: char _decodeEscaped()>();
goto label01;
label06:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipUtf8_2()>();
goto label01;
label07:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipUtf8_3()>();
goto label01;
label08:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipUtf8_4(int)>(v7);
goto label01;
label09:
if v7 >= 32 goto label10;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(v7, "string value");
goto label01;
label10:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidChar(int)>(v7);
goto label01;
label11:
return;
}
protected com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int) throws java.io.IOException
{
byte[] v28;
byte v31;
boolean v26, v3, v34, v5;
com.fasterxml.jackson.core.json.JsonReadContext v2, v4;
short v32;
int v1, v10, v12, v13, v14, v16, v17, v18, v20, v21, v22, v24, v25, v29, v30, v6, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v11, v15, v19, v23, v27, v33;
java.lang.String v35, v36, v37, v38;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
lookupswitch(v1)
{
case 39: goto label04;
case 43: goto label09;
case 44: goto label02;
case 73: goto label07;
case 78: goto label05;
case 93: goto label01;
case 125: goto label03;
default: goto label11;
};
label01:
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inArray()>();
if v3 == 0 goto label11;
label02:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();
if v5 != 0 goto label03;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _features>;
v7 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_ALLOW_MISSING>;
v8 = v6 & v7;
if v8 == 0 goto label03;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v10 = v9 - 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v10;
v11 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
return v11;
label03:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v1, "expected a value");
label04:
v12 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _features>;
v13 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_ALLOW_SINGLE_QUOTES>;
v14 = v12 & v13;
if v14 == 0 goto label11;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _handleApos()>();
return v15;
label05:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchToken(java.lang.String,int)>("NaN", 1);
v16 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _features>;
v17 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_NON_NUM_NUMBERS>;
v18 = v16 & v17;
if v18 == 0 goto label06;
v19 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken resetAsNaN(java.lang.String,double)>("NaN", #NaN);
return v19;
label06:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportError(java.lang.String)>("Non-standard token \'NaN\': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow");
goto label11;
label07:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchToken(java.lang.String,int)>("Infinity", 1);
v20 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _features>;
v21 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_NON_NUM_NUMBERS>;
v22 = v20 & v21;
if v22 == 0 goto label08;
v23 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken resetAsNaN(java.lang.String,double)>("Infinity", #Infinity);
return v23;
label08:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportError(java.lang.String)>("Non-standard token \'Infinity\': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow");
goto label11;
label09:
v24 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v25 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v24 < v25 goto label10;
v26 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v26 != 0 goto label10;
v27 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidEOFInValue(com.fasterxml.jackson.core.JsonToken)>(v27);
label10:
v28 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v29 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v30 = v29 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v30;
v31 = v28[v29];
v32 = v31 & 255;
v33 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int,boolean,boolean)>(v32, 0, 1);
return v33;
label11:
v34 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(int)>(v1);
if v34 == 0 goto label12;
v35 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001");
v36 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String _validJsonTokenList()>();
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidToken(java.lang.String,java.lang.String)>(v35, v36);
label12:
v37 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String _validJsonValueList()>();
v38 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v37) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected a valid value \u0001");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v1, v38);
return null;
}
protected com.fasterxml.jackson.core.JsonToken _handleApos() throws java.io.IOException
{
byte[] v5;
byte v18;
int[] v4;
int v1, v10, v11, v12, v13, v14, v15, v16, v17, v19, v20, v21, v22, v24, v25, v26, v27, v28, v29, v30, v31, v32, v34, v35, v36, v38, v6, v7, v8;
com.fasterxml.jackson.core.JsonToken v40;
char v23;
com.fasterxml.jackson.core.util.TextBuffer v2, v33, v37, v39, v9;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
char[] v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = 0;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v4 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _icUTF8>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
label01:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v6 < v7 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label02:
v8 = lengthof v3;
if v1 < v8 goto label03;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v9.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v1 = 0;
label03:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v12 = lengthof v3;
v13 = v12 - v1;
v14 = v11 + v13;
if v14 >= v10 goto label04;
v10 = v14;
label04:
v15 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
if v15 >= v10 goto label01;
v16 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v17 = v16 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v17;
v18 = v5[v16];
v19 = v18 & 255;
if v19 == 39 goto label17;
v20 = v4[v19];
if v20 == 0 goto label05;
if v19 != 34 goto label06;
label05:
v21 = v1;
v1 = v1 + 1;
v3[v21] = v19;
goto label04;
label06:
v22 = v4[v19];
tableswitch(v22)
{
case 1: goto label07;
case 2: goto label08;
case 3: goto label09;
case 4: goto label11;
default: goto label13;
};
label07:
v23 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: char _decodeEscaped()>();
v19 = v23;
goto label15;
label08:
v19 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeUtf8_2(int)>(v19);
goto label15;
label09:
v24 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
v25 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v26 = v24 - v25;
if v26 < 2 goto label10;
v19 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeUtf8_3fast(int)>(v19);
goto label15;
label10:
v19 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeUtf8_3(int)>(v19);
goto label15;
label11:
v27 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeUtf8_4(int)>(v19);
v28 = v1;
v1 = v1 + 1;
v29 = v27 >> 10;
v30 = (int) 55296;
v31 = v30 | v29;
v3[v28] = v31;
v32 = lengthof v3;
if v1 < v32 goto label12;
v33 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v33.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v1 = 0;
label12:
v34 = v27 & 1023;
v35 = (int) 56320;
v19 = v35 | v34;
goto label15;
label13:
if v19 >= 32 goto label14;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(v19, "string value");
label14:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidChar(int)>(v19);
label15:
v36 = lengthof v3;
if v1 < v36 goto label16;
v37 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v37.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v1 = 0;
label16:
v38 = v1;
v1 = v1 + 1;
v3[v38] = v19;
goto label01;
label17:
v39 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v39.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v1);
v40 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
return v40;
}
protected com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int, boolean) throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1;
com.fasterxml.jackson.core.JsonToken v3;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int,boolean,boolean)>(v1, v2, 0);
return v3;
}
protected com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int, boolean, boolean) throws java.io.IOException
{
byte[] v8;
com.fasterxml.jackson.core.JsonParser$Feature v21;
com.fasterxml.jackson.core.json.JsonReadFeature v20;
int v1, v10, v14, v15, v16, v4, v5, v9;
com.fasterxml.jackson.core.JsonToken v19, v7;
java.lang.String v11, v12, v13, v17, v23;
boolean v2, v22, v3, v6;
double v18;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
v3 := @parameter2: boolean;
label01:
if v1 != 73 goto label12;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v4 < v5 goto label02;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v6 != 0 goto label02;
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidEOFInValue(com.fasterxml.jackson.core.JsonToken)>(v7);
label02:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v10 = v9 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v10;
v1 = v8[v9];
if v1 != 78 goto label05;
if v2 == 0 goto label03;
v11 = "-INF";
goto label04;
label03:
v11 = "+INF";
label04:
v12 = v11;
goto label08;
label05:
if v1 != 110 goto label12;
if v2 == 0 goto label06;
v13 = "-Infinity";
goto label07;
label06:
v13 = "+Infinity";
label07:
v12 = v13;
label08:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchToken(java.lang.String,int)>(v12, 3);
v14 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _features>;
v15 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_NON_NUM_NUMBERS>;
v16 = v14 & v15;
if v16 == 0 goto label11;
v17 = v12;
if v2 == 0 goto label09;
v18 = #-Infinity;
goto label10;
label09:
v18 = #Infinity;
label10:
v19 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken resetAsNaN(java.lang.String,double)>(v17, v18);
return v19;
label11:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportError(java.lang.String,java.lang.Object)>("Non-standard token \'%s\': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow", v12);
goto label01;
label12:
v20 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v21 = virtualinvoke v20.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v22 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v21);
if v22 != 0 goto label13;
if v3 == 0 goto label13;
if v2 != 0 goto label13;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(43, "JSON spec does not allow numbers to have plus signs: enable `JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS` to allow");
label13:
if v2 == 0 goto label14;
v23 = "expected digit (0-9) to follow minus sign, for valid numeric value";
goto label15;
label14:
v23 = "expected digit (0-9) for valid numeric value";
label15:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v1, v23);
return null;
}
protected final void _matchTrue() throws java.io.IOException
{
byte[] v4;
short v12;
byte v10, v11, v6, v8;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v2, v3, v5, v7, v9;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v1 + 3;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v2 >= v3 goto label2;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v5 = v1 + 1;
v6 = v4[v1];
if v6 != 114 goto label2;
v7 = v5 + 1;
v8 = v4[v5];
if v8 != 117 goto label2;
v9 = v7 + 1;
v10 = v4[v7];
if v10 != 101 goto label2;
v11 = v4[v9];
v12 = v11 & 255;
if v12 < 48 goto label1;
if v12 == 93 goto label1;
if v12 != 125 goto label2;
label1:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v9;
return;
label2:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchToken2(java.lang.String,int)>("true", 1);
return;
}
protected final void _matchFalse() throws java.io.IOException
{
byte[] v4;
short v14;
byte v10, v12, v13, v6, v8;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v11, v2, v3, v5, v7, v9;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v1 + 4;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v2 >= v3 goto label2;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v5 = v1 + 1;
v6 = v4[v1];
if v6 != 97 goto label2;
v7 = v5 + 1;
v8 = v4[v5];
if v8 != 108 goto label2;
v9 = v7 + 1;
v10 = v4[v7];
if v10 != 115 goto label2;
v11 = v9 + 1;
v12 = v4[v9];
if v12 != 101 goto label2;
v13 = v4[v11];
v14 = v13 & 255;
if v14 < 48 goto label1;
if v14 == 93 goto label1;
if v14 != 125 goto label2;
label1:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v11;
return;
label2:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchToken2(java.lang.String,int)>("false", 1);
return;
}
protected final void _matchNull() throws java.io.IOException
{
byte[] v4;
short v12;
byte v10, v11, v6, v8;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v2, v3, v5, v7, v9;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v1 + 3;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v2 >= v3 goto label2;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v5 = v1 + 1;
v6 = v4[v1];
if v6 != 117 goto label2;
v7 = v5 + 1;
v8 = v4[v5];
if v8 != 108 goto label2;
v9 = v7 + 1;
v10 = v4[v7];
if v10 != 108 goto label2;
v11 = v4[v9];
v12 = v11 & 255;
if v12 < 48 goto label1;
if v12 == 93 goto label1;
if v12 != 125 goto label2;
label1:
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v9;
return;
label2:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchToken2(java.lang.String,int)>("null", 1);
return;
}
protected final void _matchToken(java.lang.String, int) throws java.io.IOException
{
byte[] v14, v7;
short v17;
byte v16, v9;
int v12, v13, v15, v2, v3, v4, v5, v6, v8;
java.lang.String v1, v11;
char v10;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = virtualinvoke v1.<java.lang.String: int length()>();
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v5 = v4 + v3;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v5 < v6 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _matchToken2(java.lang.String,int)>(v1, v2);
return;
label1:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v9 = v7[v8];
v10 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v2);
if v9 == v10 goto label2;
v11 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, v2);
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidToken(java.lang.String)>(v11);
label2:
v12 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v13 = v12 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v13;
v2 = v2 + 1;
if v2 < v3 goto label1;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v16 = v14[v15];
v17 = v16 & 255;
if v17 < 48 goto label3;
if v17 == 93 goto label3;
if v17 == 125 goto label3;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _checkMatchEnd(java.lang.String,int,int)>(v1, v2, v17);
label3:
return;
}
private final void _matchToken2(java.lang.String, int) throws java.io.IOException
{
byte[] v17, v7;
short v20;
byte v19, v9;
int v12, v13, v14, v15, v18, v2, v3, v4, v5, v8;
java.lang.String v1, v11;
boolean v16, v6;
char v10;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = virtualinvoke v1.<java.lang.String: int length()>();
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v4 < v5 goto label2;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v6 == 0 goto label3;
label2:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v9 = v7[v8];
v10 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v2);
if v9 == v10 goto label4;
label3:
v11 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, v2);
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidToken(java.lang.String)>(v11);
label4:
v12 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v13 = v12 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v13;
v2 = v2 + 1;
if v2 < v3 goto label1;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v14 < v15 goto label5;
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v16 != 0 goto label5;
return;
label5:
v17 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v18 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v19 = v17[v18];
v20 = v19 & 255;
if v20 < 48 goto label6;
if v20 == 93 goto label6;
if v20 == 125 goto label6;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _checkMatchEnd(java.lang.String,int,int)>(v1, v2, v20);
label6:
return;
}
private final void _checkMatchEnd(java.lang.String, int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v2, v3, v4;
java.lang.String v1, v6;
boolean v5;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeCharForError(int)>(v3);
v5 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>(v4);
if v5 == 0 goto label1;
v6 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, v2);
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidToken(java.lang.String)>(v6);
label1:
return;
}
private final int _skipWS() throws java.io.IOException
{
byte[] v3;
short v7;
byte v6;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v10, v11, v12, v13, v14, v2, v4, v5, v8, v9;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
label1:
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v1 >= v2 goto label7;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v5 = v4 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v5;
v6 = v3[v4];
v7 = v6 & 255;
if v7 <= 32 goto label4;
if v7 == 47 goto label2;
if v7 != 35 goto label3;
label2:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v9 = v8 - 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v9;
v10 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipWS2()>();
return v10;
label3:
return v7;
label4:
if v7 == 32 goto label1;
if v7 != 10 goto label5;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow>;
v12 = v11 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow> = v12;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRowStart> = v13;
goto label1;
label5:
if v7 != 13 goto label6;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipCR()>();
goto label1;
label6:
if v7 == 9 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _throwInvalidSpace(int)>(v7);
goto label1;
label7:
v14 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipWS2()>();
return v14;
}
private final int _skipWS2() throws java.io.IOException
{
byte[] v4;
com.fasterxml.jackson.core.json.JsonReadContext v13;
short v8;
byte v7;
int v1, v10, v11, v12, v2, v5, v6;
java.lang.String v14, v15;
com.fasterxml.jackson.core.JsonParseException v16;
boolean v3, v9;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
label1:
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v1 < v2 goto label2;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v3 == 0 goto label8;
label2:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v6 = v5 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v6;
v7 = v4[v5];
v8 = v7 & 255;
if v8 <= 32 goto label5;
if v8 != 47 goto label3;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipComment()>();
goto label1;
label3:
if v8 != 35 goto label4;
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _skipYAMLComment()>();
if v9 != 0 goto label1;
label4:
return v8;
label5:
if v8 == 32 goto label1;
if v8 != 10 goto label6;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow>;
v11 = v10 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow> = v11;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRowStart> = v12;
goto label1;
label6:
if v8 != 13 goto label7;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipCR()>();
goto label1;
label7:
if v8 == 9 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _throwInvalidSpace(int)>(v8);
goto label1;
label8:
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v14 = virtualinvoke v13.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String typeDesc()>();
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected end-of-input within/between \u0001 entries");
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>(v15);
throw v16;
}
private final int _skipWSOrEnd() throws java.io.IOException
{
byte[] v18, v5;
short v22, v9;
byte v21, v8;
int v1, v10, v11, v12, v13, v14, v15, v16, v17, v19, v2, v20, v23, v24, v25, v26, v27, v28, v29, v4, v6, v7;
boolean v3;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v1 < v2 goto label01;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v3 != 0 goto label01;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _eofAsNextChar()>();
return v4;
label01:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v7;
v8 = v5[v6];
v9 = v8 & 255;
if v9 <= 32 goto label04;
if v9 == 47 goto label02;
if v9 != 35 goto label03;
label02:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v11 = v10 - 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v11;
v12 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipWSOrEnd2()>();
return v12;
label03:
return v9;
label04:
if v9 == 32 goto label07;
if v9 != 10 goto label05;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow>;
v14 = v13 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow> = v14;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRowStart> = v15;
goto label07;
label05:
if v9 != 13 goto label06;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipCR()>();
goto label07;
label06:
if v9 == 9 goto label07;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _throwInvalidSpace(int)>(v9);
label07:
v16 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v16 >= v17 goto label13;
v18 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v19 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v20 = v19 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v20;
v21 = v18[v19];
v22 = v21 & 255;
if v22 <= 32 goto label10;
if v22 == 47 goto label08;
if v22 != 35 goto label09;
label08:
v23 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v24 = v23 - 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v24;
v25 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipWSOrEnd2()>();
return v25;
label09:
return v22;
label10:
if v22 == 32 goto label07;
if v22 != 10 goto label11;
v26 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow>;
v27 = v26 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow> = v27;
v28 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRowStart> = v28;
goto label07;
label11:
if v22 != 13 goto label12;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipCR()>();
goto label07;
label12:
if v22 == 9 goto label07;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _throwInvalidSpace(int)>(v22);
goto label07;
label13:
v29 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipWSOrEnd2()>();
return v29;
}
private final int _skipWSOrEnd2() throws java.io.IOException
{
byte[] v4;
short v8;
byte v7;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v10, v11, v12, v13, v2, v5, v6;
boolean v3, v9;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
label1:
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v1 < v2 goto label2;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v3 == 0 goto label8;
label2:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v6 = v5 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v6;
v7 = v4[v5];
v8 = v7 & 255;
if v8 <= 32 goto label5;
if v8 != 47 goto label3;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipComment()>();
goto label1;
label3:
if v8 != 35 goto label4;
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _skipYAMLComment()>();
if v9 != 0 goto label1;
label4:
return v8;
label5:
if v8 == 32 goto label1;
if v8 != 10 goto label6;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow>;
v11 = v10 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow> = v11;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRowStart> = v12;
goto label1;
label6:
if v8 != 13 goto label7;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipCR()>();
goto label1;
label7:
if v8 == 9 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _throwInvalidSpace(int)>(v8);
goto label1;
label8:
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _eofAsNextChar()>();
return v13;
}
private final int _skipColon() throws java.io.IOException
{
byte[] v15, v23, v26, v33, v5, v8;
byte v11, v18, v29, v36, v7;
int v1, v10, v12, v13, v14, v16, v17, v19, v2, v20, v21, v22, v24, v25, v27, v28, v3, v30, v31, v32, v34, v35, v37, v38, v39, v4, v40, v41, v6, v9;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v1 + 4;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v2 < v3 goto label01;
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipColon2(boolean)>(0);
return v4;
label01:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v7 = v5[v6];
if v7 != 58 goto label09;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v10 = v9 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v10;
v11 = v8[v10];
if v11 <= 32 goto label04;
if v11 == 47 goto label02;
if v11 != 35 goto label03;
label02:
v12 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipColon2(boolean)>(1);
return v12;
label03:
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v14 = v13 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v14;
return v11;
label04:
if v11 == 32 goto label05;
if v11 != 9 goto label08;
label05:
v15 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v16 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v17 = v16 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v17;
v18 = v15[v17];
if v18 <= 32 goto label08;
if v18 == 47 goto label06;
if v18 != 35 goto label07;
label06:
v19 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipColon2(boolean)>(1);
return v19;
label07:
v20 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v21 = v20 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v21;
return v18;
label08:
v22 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipColon2(boolean)>(1);
return v22;
label09:
if v7 == 32 goto label10;
if v7 != 9 goto label11;
label10:
v23 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v24 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v25 = v24 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v25;
v7 = v23[v25];
label11:
if v7 != 58 goto label19;
v26 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v27 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v28 = v27 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v28;
v29 = v26[v28];
if v29 <= 32 goto label14;
if v29 == 47 goto label12;
if v29 != 35 goto label13;
label12:
v30 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipColon2(boolean)>(1);
return v30;
label13:
v31 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v32 = v31 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v32;
return v29;
label14:
if v29 == 32 goto label15;
if v29 != 9 goto label18;
label15:
v33 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v34 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v35 = v34 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v35;
v36 = v33[v35];
if v36 <= 32 goto label18;
if v36 == 47 goto label16;
if v36 != 35 goto label17;
label16:
v37 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipColon2(boolean)>(1);
return v37;
label17:
v38 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v39 = v38 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v39;
return v36;
label18:
v40 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipColon2(boolean)>(1);
return v40;
label19:
v41 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _skipColon2(boolean)>(0);
return v41;
}
private final int _skipColon2(boolean) throws java.io.IOException
{
byte[] v5;
com.fasterxml.jackson.core.json.JsonReadContext v14;
short v9;
byte v8;
int v11, v12, v13, v17, v2, v3, v6, v7;
java.lang.String v15, v16;
boolean v1, v10, v4;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: boolean;
label01:
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v2 < v3 goto label02;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v4 == 0 goto label10;
label02:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v7;
v8 = v5[v6];
v9 = v8 & 255;
if v9 <= 32 goto label07;
if v9 != 47 goto label03;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipComment()>();
goto label01;
label03:
if v9 != 35 goto label04;
v10 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _skipYAMLComment()>();
if v10 != 0 goto label01;
label04:
if v1 == 0 goto label05;
return v9;
label05:
if v9 == 58 goto label06;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v9, "was expecting a colon to separate field name and value");
label06:
v1 = 1;
goto label01;
label07:
if v9 == 32 goto label01;
if v9 != 10 goto label08;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow>;
v12 = v11 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow> = v12;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRowStart> = v13;
goto label01;
label08:
if v9 != 13 goto label09;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipCR()>();
goto label01;
label09:
if v9 == 9 goto label01;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _throwInvalidSpace(int)>(v9);
goto label01;
label10:
v14 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v15 = virtualinvoke v14.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String typeDesc()>();
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(" within/between \u0001 entries");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(v16, null);
v17 = (int) -1;
return v17;
}
private final void _skipComment() throws java.io.IOException
{
byte[] v7;
short v11;
byte v10;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v2, v3, v4, v5, v8, v9;
boolean v6;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _features>;
v2 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_ALLOW_JAVA_COMMENTS>;
v3 = v1 & v2;
if v3 != 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(47, "maybe a (non-standard) comment? (not recognized as one since Feature \'ALLOW_COMMENTS\' not enabled for parser)");
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v4 < v5 goto label2;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v6 != 0 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(" in a comment", null);
label2:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v9 = v8 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v9;
v10 = v7[v8];
v11 = v10 & 255;
if v11 != 47 goto label3;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipLine()>();
goto label5;
label3:
if v11 != 42 goto label4;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipCComment()>();
goto label5;
label4:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v11, "was expecting either \'*\' or \'/\' for a comment");
label5:
return;
}
private final void _skipCComment() throws java.io.IOException
{
byte[] v14, v5;
short v9;
byte v16, v8;
int[] v1;
int v10, v11, v12, v15, v17, v18, v19, v2, v20, v21, v3, v6, v7;
boolean v13, v4;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeComment()>();
label01:
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v2 < v3 goto label02;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v4 == 0 goto label11;
label02:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v7;
v8 = v5[v6];
v9 = v8 & 255;
v10 = v1[v9];
if v10 == 0 goto label01;
lookupswitch(v10)
{
case 2: goto label07;
case 3: goto label08;
case 4: goto label09;
case 10: goto label05;
case 13: goto label06;
case 42: goto label03;
default: goto label10;
};
label03:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v11 < v12 goto label04;
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v13 == 0 goto label11;
label04:
v14 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v16 = v14[v15];
if v16 != 47 goto label01;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v18 = v17 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v18;
return;
label05:
v19 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow>;
v20 = v19 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow> = v20;
v21 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRowStart> = v21;
goto label01;
label06:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipCR()>();
goto label01;
label07:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipUtf8_2()>();
goto label01;
label08:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipUtf8_3()>();
goto label01;
label09:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipUtf8_4(int)>(v9);
goto label01;
label10:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidChar(int)>(v9);
goto label01;
label11:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(" in a comment", null);
return;
}
private final boolean _skipYAMLComment() throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v2, v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _features>;
v2 = <com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_ALLOW_YAML_COMMENTS>;
v3 = v1 & v2;
if v3 != 0 goto label1;
return 0;
label1:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipLine()>();
return 1;
}
private final void _skipLine() throws java.io.IOException
{
byte[] v5;
short v9;
byte v8;
int[] v1;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v10, v11, v12, v13, v2, v3, v6, v7;
boolean v4;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeComment()>();
label1:
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v2 < v3 goto label2;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v4 == 0 goto label9;
label2:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v7;
v8 = v5[v6];
v9 = v8 & 255;
v10 = v1[v9];
if v10 == 0 goto label1;
lookupswitch(v10)
{
case 2: goto label5;
case 3: goto label6;
case 4: goto label7;
case 10: goto label3;
case 13: goto label4;
case 42: goto label1;
default: goto label8;
};
label3:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow>;
v12 = v11 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow> = v12;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRowStart> = v13;
return;
label4:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipCR()>();
return;
label5:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipUtf8_2()>();
goto label1;
label6:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipUtf8_3()>();
goto label1;
label7:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _skipUtf8_4(int)>(v9);
goto label1;
label8:
if v10 >= 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidChar(int)>(v9);
goto label1;
label9:
return;
}
protected char _decodeEscaped() throws java.io.IOException
{
byte[] v17, v5;
short v22;
byte v20, v8;
int v1, v11, v12, v13, v14, v18, v19, v2, v21, v23, v6, v7, v9;
com.fasterxml.jackson.core.JsonToken v16, v4;
boolean v15, v3;
char v10;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v1 < v2 goto label01;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v3 != 0 goto label01;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(" in character escape sequence", v4);
label01:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v7;
v8 = v5[v6];
lookupswitch(v8)
{
case 34: goto label07;
case 47: goto label07;
case 92: goto label07;
case 98: goto label02;
case 102: goto label05;
case 110: goto label04;
case 114: goto label06;
case 116: goto label03;
case 117: goto label09;
default: goto label08;
};
label02:
return 8;
label03:
return 9;
label04:
return 10;
label05:
return 12;
label06:
return 13;
label07:
return v8;
label08:
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeCharForError(int)>(v8);
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: char _handleUnrecognizedCharacterEscape(char)>(v9);
return v10;
label09:
v11 = 0;
v12 = 0;
label10:
if v12 >= 4 goto label13;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v13 < v14 goto label11;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v15 != 0 goto label11;
v16 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(" in character escape sequence", v16);
label11:
v17 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v18 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v19 = v18 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v19;
v20 = v17[v18];
v21 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int charToHex(int)>(v20);
if v21 >= 0 goto label12;
v22 = v20 & 255;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v22, "expected a hex-digit for character escape sequence");
label12:
v23 = v11 << 4;
v11 = v23 | v21;
v12 = v12 + 1;
goto label10;
label13:
return v11;
}
protected int _decodeCharForError(int) throws java.io.IOException
{
byte v4;
int v1, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v2, v20, v21, v22, v3, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 = v1 & 255;
if v2 <= 127 goto label8;
v3 = v2 & 224;
if v3 != 192 goto label1;
v2 = v2 & 31;
v4 = 1;
goto label4;
label1:
v5 = v2 & 240;
if v5 != 224 goto label2;
v2 = v2 & 15;
v4 = 2;
goto label4;
label2:
v6 = v2 & 248;
if v6 != 240 goto label3;
v2 = v2 & 7;
v4 = 3;
goto label4;
label3:
v7 = v2 & 255;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidInitial(int)>(v7);
v4 = 1;
label4:
v8 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int nextByte()>();
v9 = v8 & 192;
if v9 == 128 goto label5;
v10 = v8 & 255;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int)>(v10);
label5:
v11 = v2 << 6;
v12 = v8 & 63;
v2 = v11 | v12;
if v4 <= 1 goto label8;
v13 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int nextByte()>();
v14 = v13 & 192;
if v14 == 128 goto label6;
v15 = v13 & 255;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int)>(v15);
label6:
v16 = v2 << 6;
v17 = v13 & 63;
v2 = v16 | v17;
if v4 <= 2 goto label8;
v18 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int nextByte()>();
v19 = v18 & 192;
if v19 == 128 goto label7;
v20 = v18 & 255;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int)>(v20);
label7:
v21 = v2 << 6;
v22 = v18 & 63;
v2 = v21 | v22;
label8:
return v2;
}
private final int _decodeUtf8_2(int) throws java.io.IOException
{
byte[] v4;
short v8, v9;
byte v13, v7;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v10, v11, v12, v14, v2, v3, v5, v6;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v2 < v3 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v6 = v5 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v6;
v7 = v4[v5];
v8 = v7 & 192;
if v8 == 128 goto label2;
v9 = v7 & 255;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int,int)>(v9, v10);
label2:
v11 = v1 & 31;
v12 = v11 << 6;
v13 = v7 & 63;
v14 = v12 | v13;
return v14;
}
private final int _decodeUtf8_3(int) throws java.io.IOException
{
byte[] v17, v5;
short v10, v21, v22, v9;
byte v13, v20, v25, v8;
int v1, v11, v12, v14, v15, v16, v18, v19, v2, v23, v24, v26, v3, v4, v6, v7;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v2 < v3 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label1:
v4 = v1 & 15;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v7;
v8 = v5[v6];
v9 = v8 & 192;
if v9 == 128 goto label2;
v10 = v8 & 255;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int,int)>(v10, v11);
label2:
v12 = v4 << 6;
v13 = v8 & 63;
v14 = v12 | v13;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v16 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v15 < v16 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label3:
v17 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v18 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v19 = v18 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v19;
v20 = v17[v18];
v21 = v20 & 192;
if v21 == 128 goto label4;
v22 = v20 & 255;
v23 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int,int)>(v22, v23);
label4:
v24 = v14 << 6;
v25 = v20 & 63;
v26 = v24 | v25;
return v26;
}
private final int _decodeUtf8_3fast(int) throws java.io.IOException
{
byte[] v13, v3;
short v17, v18, v7, v8;
byte v11, v16, v21, v6;
int v1, v10, v12, v14, v15, v19, v2, v20, v22, v4, v5, v9;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 = v1 & 15;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v5 = v4 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v5;
v6 = v3[v4];
v7 = v6 & 192;
if v7 == 128 goto label1;
v8 = v6 & 255;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int,int)>(v8, v9);
label1:
v10 = v2 << 6;
v11 = v6 & 63;
v12 = v10 | v11;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v15 = v14 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v15;
v16 = v13[v14];
v17 = v16 & 192;
if v17 == 128 goto label2;
v18 = v16 & 255;
v19 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int,int)>(v18, v19);
label2:
v20 = v12 << 6;
v21 = v16 & 63;
v22 = v20 | v21;
return v22;
}
private final int _decodeUtf8_4(int) throws java.io.IOException
{
byte[] v17, v29, v4;
byte v13, v20, v25, v32, v37, v7;
short v21, v22, v33, v34, v8, v9;
int v1, v10, v11, v12, v14, v15, v16, v18, v19, v2, v23, v24, v26, v27, v28, v3, v30, v31, v35, v36, v38, v39, v5, v6;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v2 < v3 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v6 = v5 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v6;
v7 = v4[v5];
v8 = v7 & 192;
if v8 == 128 goto label2;
v9 = v7 & 255;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int,int)>(v9, v10);
label2:
v11 = v1 & 7;
v12 = v11 << 6;
v13 = v7 & 63;
v14 = v12 | v13;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v16 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v15 < v16 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label3:
v17 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v18 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v19 = v18 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v19;
v20 = v17[v18];
v21 = v20 & 192;
if v21 == 128 goto label4;
v22 = v20 & 255;
v23 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int,int)>(v22, v23);
label4:
v24 = v14 << 6;
v25 = v20 & 63;
v26 = v24 | v25;
v27 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v28 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v27 < v28 goto label5;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label5:
v29 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v30 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v31 = v30 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v31;
v32 = v29[v30];
v33 = v32 & 192;
if v33 == 128 goto label6;
v34 = v32 & 255;
v35 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int,int)>(v34, v35);
label6:
v36 = v26 << 6;
v37 = v32 & 63;
v38 = v36 | v37;
v39 = v38 - 65536;
return v39;
}
private final void _skipUtf8_2() throws java.io.IOException
{
byte[] v3;
short v7, v8;
byte v6;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v2, v4, v5, v9;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v1 < v2 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label1:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v5 = v4 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v5;
v6 = v3[v4];
v7 = v6 & 192;
if v7 == 128 goto label2;
v8 = v6 & 255;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int,int)>(v8, v9);
label2:
return;
}
private final void _skipUtf8_3() throws java.io.IOException
{
byte[] v12, v3;
short v16, v17, v7, v8;
byte v15, v6;
int v1, v10, v11, v13, v14, v18, v2, v4, v5, v9;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v1 < v2 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label1:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v5 = v4 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v5;
v6 = v3[v4];
v7 = v6 & 192;
if v7 == 128 goto label2;
v8 = v6 & 255;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int,int)>(v8, v9);
label2:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v10 < v11 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label3:
v12 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v14 = v13 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v14;
v15 = v12[v13];
v16 = v15 & 192;
if v16 == 128 goto label4;
v17 = v15 & 255;
v18 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int,int)>(v17, v18);
label4:
return;
}
private final void _skipUtf8_4(int) throws java.io.IOException
{
byte[] v13, v22, v4;
short v17, v18, v26, v27, v8, v9;
byte v16, v25, v7;
int v1, v10, v11, v12, v14, v15, v19, v2, v20, v21, v23, v24, v28, v3, v5, v6;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v2 < v3 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v6 = v5 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v6;
v7 = v4[v5];
v8 = v7 & 192;
if v8 == 128 goto label2;
v9 = v7 & 255;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int,int)>(v9, v10);
label2:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v11 < v12 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label3:
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v15 = v14 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v15;
v16 = v13[v14];
v17 = v16 & 192;
if v17 == 128 goto label4;
v18 = v16 & 255;
v19 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int,int)>(v18, v19);
label4:
v20 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v21 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v20 < v21 goto label5;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label5:
v22 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v23 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v24 = v23 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v24;
v25 = v22[v23];
v26 = v25 & 192;
if v26 == 128 goto label6;
v27 = v25 & 255;
v28 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int,int)>(v27, v28);
label6:
return;
}
protected final void _skipCR() throws java.io.IOException
{
byte[] v4;
byte v6;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v10, v11, v2, v5, v7, v8, v9;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v1 < v2 goto label1;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v3 == 0 goto label2;
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v6 = v4[v5];
if v6 != 10 goto label2;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v8 = v7 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v8;
label2:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow>;
v10 = v9 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow> = v10;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRowStart> = v11;
return;
}
private int nextByte() throws java.io.IOException
{
byte[] v3;
short v7;
byte v6;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v2, v4, v5;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v1 < v2 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label1:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v5 = v4 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v5;
v6 = v3[v4];
v7 = v6 & 255;
return v7;
}
protected void _reportInvalidToken(java.lang.String, int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v2;
java.lang.String v1, v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v2;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String _validJsonTokenList()>();
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidToken(java.lang.String,java.lang.String)>(v1, v3);
return;
}
protected void _reportInvalidToken(java.lang.String) throws java.io.IOException
{
java.lang.String v1, v2;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.String _validJsonTokenList()>();
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidToken(java.lang.String,java.lang.String)>(v1, v2);
return;
}
protected void _reportInvalidToken(java.lang.String, java.lang.String) throws java.io.IOException
{
byte[] v7;
byte v10;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v11, v13, v4, v5, v8, v9;
java.lang.StringBuilder v3;
java.lang.String v1, v2;
boolean v12, v6;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = new java.lang.StringBuilder;
specialinvoke v3.<java.lang.StringBuilder: void <init>(java.lang.String)>(v1);
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v4 < v5 goto label2;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: boolean _loadMore()>();
if v6 == 0 goto label3;
label2:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v9 = v8 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v9;
v10 = v7[v8];
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeCharForError(int)>(v10);
v12 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>(v11);
if v12 == 0 goto label3;
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v11);
v13 = virtualinvoke v3.<java.lang.StringBuilder: int length()>();
if v13 < 256 goto label1;
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");
label3:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportError(java.lang.String,java.lang.Object,java.lang.Object)>("Unrecognized token \'%s\': was expecting %s", v3, v2);
return;
}
protected void _reportInvalidChar(int) throws com.fasterxml.jackson.core.JsonParseException
{
int v1;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
if v1 >= 32 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _throwInvalidSpace(int)>(v1);
label1:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidInitial(int)>(v1);
return;
}
protected void _reportInvalidInitial(int) throws com.fasterxml.jackson.core.JsonParseException
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1;
java.lang.String v2, v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v1);
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid UTF-8 start byte 0x\u0001");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportError(java.lang.String)>(v3);
return;
}
protected void _reportInvalidOther(int) throws com.fasterxml.jackson.core.JsonParseException
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1;
java.lang.String v2, v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v1);
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid UTF-8 middle byte 0x\u0001");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportError(java.lang.String)>(v3);
return;
}
protected void _reportInvalidOther(int, int) throws com.fasterxml.jackson.core.JsonParseException
{
int v1, v2;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportInvalidOther(int)>(v1);
return;
}
protected final byte[] _decodeBase64(com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException
{
byte[] v11, v15, v25, v36, v40, v5, v56, v67;
byte v18, v28, v43, v59, v8;
short v19, v29, v44, v60, v9;
java.lang.String v49;
com.fasterxml.jackson.core.util.ByteArrayBuilder v2;
boolean v33, v45, v64;
com.fasterxml.jackson.core.Base64Variant v1;
int v10, v12, v13, v14, v16, v17, v20, v21, v22, v23, v24, v26, v27, v3, v30, v31, v32, v34, v35, v37, v38, v39, v4, v41, v42, v46, v47, v51, v52, v53, v54, v55, v57, v58, v6, v61, v62, v63, v65, v66, v68, v69, v7, v70, v71;
char v48;
java.lang.IllegalArgumentException v50;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.util.ByteArrayBuilder _getByteArrayBuilder()>();
label01:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v3 < v4 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label02:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v7;
v8 = v5[v6];
v9 = v8 & 255;
if v9 <= 32 goto label01;
v10 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(v9);
if v10 >= 0 goto label04;
if v9 != 34 goto label03;
v11 = virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();
return v11;
label03:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v9, 0);
if v10 < 0 goto label01;
label04:
v12 = v10;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v13 < v14 goto label05;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label05:
v15 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v16 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v17 = v16 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v17;
v18 = v15[v16];
v19 = v18 & 255;
v20 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(v19);
if v20 >= 0 goto label06;
v20 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v19, 1);
label06:
v21 = v12 << 6;
v22 = v21 | v20;
v23 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v24 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v23 < v24 goto label07;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label07:
v25 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v26 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v27 = v26 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v27;
v28 = v25[v26];
v29 = v28 & 255;
v30 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(v29);
if v30 >= 0 goto label13;
v31 = (int) -2;
if v30 == v31 goto label10;
if v29 != 34 goto label09;
v32 = v22 >> 4;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void append(int)>(v32);
v33 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: boolean requiresPaddingOnRead()>();
if v33 == 0 goto label08;
v34 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v35 = v34 - 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v35;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)>(v1);
label08:
v36 = virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();
return v36;
label09:
v30 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v29, 2);
label10:
v37 = (int) -2;
if v30 != v37 goto label13;
v38 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v39 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v38 < v39 goto label11;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label11:
v40 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v41 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v42 = v41 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v42;
v43 = v40[v41];
v44 = v43 & 255;
v45 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: boolean usesPaddingChar(int)>(v44);
if v45 != 0 goto label12;
v46 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v44, 3);
v47 = (int) -2;
if v46 == v47 goto label12;
v48 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>();
v49 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v48) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected padding character \'\u0001\'");
v50 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: java.lang.IllegalArgumentException reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int,java.lang.String)>(v1, v44, 3, v49);
throw v50;
label12:
v51 = v22 >> 4;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void append(int)>(v51);
goto label01;
label13:
v52 = v22 << 6;
v53 = v52 | v30;
v54 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v55 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputEnd>;
if v54 < v55 goto label14;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _loadMoreGuaranteed()>();
label14:
v56 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: byte[] _inputBuffer>;
v57 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v58 = v57 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v58;
v59 = v56[v57];
v60 = v59 & 255;
v61 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>(v60);
if v61 >= 0 goto label18;
v62 = (int) -2;
if v61 == v62 goto label17;
if v60 != 34 goto label16;
v63 = v53 >> 2;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendTwoBytes(int)>(v63);
v64 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: boolean requiresPaddingOnRead()>();
if v64 == 0 goto label15;
v65 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v66 = v65 - 1;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr> = v66;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)>(v1);
label15:
v67 = virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();
return v67;
label16:
v61 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)>(v1, v60, 3);
label17:
v68 = (int) -2;
if v61 != v68 goto label18;
v69 = v53 >> 2;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendTwoBytes(int)>(v69);
goto label01;
label18:
v70 = v53 << 6;
v71 = v70 | v61;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendThreeBytes(int)>(v71);
goto label01;
}
public com.fasterxml.jackson.core.JsonLocation getTokenLocation()
{
com.fasterxml.jackson.core.JsonLocation v11, v7;
long v13, v14, v3, v6;
int v10, v15, v16, v4, v5, v9;
com.fasterxml.jackson.core.JsonToken v1, v2;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
com.fasterxml.jackson.core.io.ContentReference v12, v8;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v1 != v2 goto label1;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: long _currInputProcessed>;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _nameStartOffset>;
v5 = v4 - 1;
v6 = v3 + v5;
v7 = new com.fasterxml.jackson.core.JsonLocation;
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.io.ContentReference _contentReference()>();
v9 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _nameStartRow>;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _nameStartCol>;
specialinvoke v7.<com.fasterxml.jackson.core.JsonLocation: void <init>(com.fasterxml.jackson.core.io.ContentReference,long,long,int,int)>(v8, v6, -1L, v9, v10);
return v7;
label1:
v11 = new com.fasterxml.jackson.core.JsonLocation;
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.io.ContentReference _contentReference()>();
v13 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: long _tokenInputTotal>;
v14 = v13 - 1L;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputRow>;
v16 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputCol>;
specialinvoke v11.<com.fasterxml.jackson.core.JsonLocation: void <init>(com.fasterxml.jackson.core.io.ContentReference,long,long,int,int)>(v12, v14, -1L, v15, v16);
return v11;
}
public com.fasterxml.jackson.core.JsonLocation getCurrentLocation()
{
com.fasterxml.jackson.core.JsonLocation v5;
long v7, v9;
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v10, v2, v3, v4, v8;
com.fasterxml.jackson.core.io.ContentReference v6;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRowStart>;
v3 = v1 - v2;
v4 = v3 + 1;
v5 = new com.fasterxml.jackson.core.JsonLocation;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.io.ContentReference _contentReference()>();
v7 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: long _currInputProcessed>;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v9 = v7 + v8;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow>;
specialinvoke v5.<com.fasterxml.jackson.core.JsonLocation: void <init>(com.fasterxml.jackson.core.io.ContentReference,long,long,int,int)>(v6, v9, -1L, v10, v4);
return v5;
}
private final void _updateLocation()
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v2, v5, v6;
long v3, v4;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputRow> = v1;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: long _currInputProcessed>;
v4 = v3 + v2;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: long _tokenInputTotal> = v4;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRowStart>;
v6 = v2 - v5;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _tokenInputCol> = v6;
return;
}
private final void _updateNameLocation()
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1, v2, v3, v4;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRow>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _nameStartRow> = v1;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _nameStartOffset> = v2;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _currInputRowStart>;
v4 = v2 - v3;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int _nameStartCol> = v4;
return;
}
private final com.fasterxml.jackson.core.JsonToken _closeScope(int) throws com.fasterxml.jackson.core.JsonParseException
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
int v1;
com.fasterxml.jackson.core.JsonToken v2, v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
v1 := @parameter0: int;
if v1 != 125 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _closeObjectScope()>();
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_OBJECT>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v2;
return v2;
label1:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _closeArrayScope()>();
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_ARRAY>;
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v3;
return v3;
}
private final void _closeArrayScope() throws com.fasterxml.jackson.core.JsonParseException
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v1, v3, v4;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _updateLocation()>();
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inArray()>();
if v2 != 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportMismatchedEndMarker(int,char)>(93, 125);
label1:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext clearAndGetParent()>();
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = v4;
return;
}
private final void _closeObjectScope() throws com.fasterxml.jackson.core.JsonParseException
{
com.fasterxml.jackson.core.json.UTF8StreamJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v1, v3, v4;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _updateLocation()>();
v1 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();
if v2 != 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: void _reportMismatchedEndMarker(int,char)>(125, 93);
label1:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext clearAndGetParent()>();
v0.<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = v4;
return;
}
static void <clinit>()
{
com.fasterxml.jackson.core.JsonParser$Feature v0, v10, v12, v14, v2, v4, v6, v8;
int[] v16, v17;
int v1, v11, v13, v15, v3, v5, v7, v9;
v0 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_TRAILING_COMMA>;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_TRAILING_COMMA> = v1;
v2 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_NUMERIC_LEADING_ZEROS>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_LEADING_ZEROS> = v3;
v4 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_NON_NUMERIC_NUMBERS>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_NON_NUM_NUMBERS> = v5;
v6 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_MISSING_VALUES>;
v7 = virtualinvoke v6.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_ALLOW_MISSING> = v7;
v8 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_SINGLE_QUOTES>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_ALLOW_SINGLE_QUOTES> = v9;
v10 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_UNQUOTED_FIELD_NAMES>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_ALLOW_UNQUOTED_NAMES> = v11;
v12 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_COMMENTS>;
v13 = virtualinvoke v12.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_ALLOW_JAVA_COMMENTS> = v13;
v14 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_YAML_COMMENTS>;
v15 = virtualinvoke v14.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int FEAT_MASK_ALLOW_YAML_COMMENTS> = v15;
v16 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeUtf8()>();
<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _icUTF8> = v16;
v17 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeLatin1()>();
<com.fasterxml.jackson.core.json.UTF8StreamJsonParser: int[] _icLatin1> = v17;
return;
}
}