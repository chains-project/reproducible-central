public abstract class com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase extends com.fasterxml.jackson.core.base.ParserBase
{
protected static final int MAJOR_INITIAL;
protected static final int MAJOR_ROOT;
protected static final int MAJOR_OBJECT_FIELD_FIRST;
protected static final int MAJOR_OBJECT_FIELD_NEXT;
protected static final int MAJOR_OBJECT_VALUE;
protected static final int MAJOR_ARRAY_ELEMENT_FIRST;
protected static final int MAJOR_ARRAY_ELEMENT_NEXT;
protected static final int MAJOR_CLOSED;
protected static final int MINOR_ROOT_BOM;
protected static final int MINOR_ROOT_NEED_SEPARATOR;
protected static final int MINOR_ROOT_GOT_SEPARATOR;
protected static final int MINOR_FIELD_LEADING_WS;
protected static final int MINOR_FIELD_LEADING_COMMA;
protected static final int MINOR_FIELD_NAME;
protected static final int MINOR_FIELD_NAME_ESCAPE;
protected static final int MINOR_FIELD_APOS_NAME;
protected static final int MINOR_FIELD_UNQUOTED_NAME;
protected static final int MINOR_VALUE_LEADING_WS;
protected static final int MINOR_VALUE_EXPECTING_COMMA;
protected static final int MINOR_VALUE_EXPECTING_COLON;
protected static final int MINOR_VALUE_WS_AFTER_COMMA;
protected static final int MINOR_VALUE_TOKEN_NULL;
protected static final int MINOR_VALUE_TOKEN_TRUE;
protected static final int MINOR_VALUE_TOKEN_FALSE;
protected static final int MINOR_VALUE_TOKEN_NON_STD;
protected static final int MINOR_NUMBER_PLUS;
protected static final int MINOR_NUMBER_MINUS;
protected static final int MINOR_NUMBER_ZERO;
protected static final int MINOR_NUMBER_MINUSZERO;
protected static final int MINOR_NUMBER_INTEGER_DIGITS;
protected static final int MINOR_NUMBER_FRACTION_DIGITS;
protected static final int MINOR_NUMBER_EXPONENT_MARKER;
protected static final int MINOR_NUMBER_EXPONENT_DIGITS;
protected static final int MINOR_VALUE_STRING;
protected static final int MINOR_VALUE_STRING_ESCAPE;
protected static final int MINOR_VALUE_STRING_UTF8_2;
protected static final int MINOR_VALUE_STRING_UTF8_3;
protected static final int MINOR_VALUE_STRING_UTF8_4;
protected static final int MINOR_VALUE_APOS_STRING;
protected static final int MINOR_VALUE_TOKEN_ERROR;
protected static final int MINOR_COMMENT_LEADING_SLASH;
protected static final int MINOR_COMMENT_CLOSING_ASTERISK;
protected static final int MINOR_COMMENT_C;
protected static final int MINOR_COMMENT_CPP;
protected static final int MINOR_COMMENT_YAML;
protected final com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols;
protected int[] _quadBuffer;
protected int _quadLength;
protected int _quad1;
protected int _pending32;
protected int _pendingBytes;
protected int _quoted32;
protected int _quotedDigits;
protected int _majorState;
protected int _majorStateAfterValue;
protected int _minorState;
protected int _minorStateAfterSplit;
protected boolean _endOfInput;
protected static final int NON_STD_TOKEN_NAN;
protected static final int NON_STD_TOKEN_INFINITY;
protected static final int NON_STD_TOKEN_PLUS_INFINITY;
protected static final int NON_STD_TOKEN_MINUS_INFINITY;
protected static final java.lang.String[] NON_STD_TOKENS;
protected static final double[] NON_STD_TOKEN_VALUES;
protected int _nonStdTokenType;
protected int _currBufferStart;
protected int _currInputRowAlt;
public void <init>(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)
{
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v3;
int[] v4;
com.fasterxml.jackson.core.io.IOContext v1;
int v2;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: com.fasterxml.jackson.core.io.IOContext;
v2 := @parameter1: int;
v3 := @parameter2: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: void <init>(com.fasterxml.jackson.core.io.IOContext,int)>(v1, v2);
v4 = newarray (int)[8];
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int[] _quadBuffer> = v4;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: boolean _endOfInput> = 0;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currBufferStart> = 0;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currInputRowAlt> = 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols> = v3;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = null;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = 0;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorStateAfterValue> = 1;
return;
}
public com.fasterxml.jackson.core.ObjectCodec getCodec()
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
return null;
}
public void setCodec(com.fasterxml.jackson.core.ObjectCodec)
{
java.lang.UnsupportedOperationException v2;
com.fasterxml.jackson.core.ObjectCodec v1;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: com.fasterxml.jackson.core.ObjectCodec;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Can not use ObjectMapper with non-blocking parser");
throw v2;
}
public boolean canParseAsync()
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
return 1;
}
public com.fasterxml.jackson.core.util.JacksonFeatureSet getReadCapabilities()
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.util.JacksonFeatureSet v1;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 = <com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.util.JacksonFeatureSet JSON_READ_CAPABILITIES>;
return v1;
}
protected com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer symbolTableForTests()
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v1;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
return v1;
}
public abstract int releaseBuffered(java.io.OutputStream) throws java.io.IOException;
protected void _releaseBuffers() throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v1;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: void _releaseBuffers()>();
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
virtualinvoke v1.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void release()>();
return;
}
public java.lang.Object getInputSource()
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
return null;
}
protected void _closeInput() throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currBufferStart> = 0;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _inputEnd> = 0;
return;
}
public boolean hasTextCharacters()
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.util.TextBuffer v3;
com.fasterxml.jackson.core.JsonToken v1, v2, v5, v6;
boolean v4, v7;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v1 != v2 goto label1;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.util.TextBuffer: boolean hasTextAsCharacters()>();
return v4;
label1:
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v5 != v6 goto label2;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: boolean _nameCopied>;
return v7;
label2:
return 0;
}
public com.fasterxml.jackson.core.JsonLocation getCurrentLocation()
{
com.fasterxml.jackson.core.JsonLocation v8;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
long v10, v14;
int v1, v11, v12, v13, v2, v3, v4, v5, v6, v7;
com.fasterxml.jackson.core.io.ContentReference v9;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currInputRowStart>;
v3 = v1 - v2;
v4 = v3 + 1;
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currInputRow>;
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currInputRowAlt>;
v7 = staticinvoke <java.lang.Math: int max(int,int)>(v5, v6);
v8 = new com.fasterxml.jackson.core.JsonLocation;
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.io.ContentReference _contentReference()>();
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: long _currInputProcessed>;
v11 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _inputPtr>;
v12 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currBufferStart>;
v13 = v11 - v12;
v14 = v10 + v13;
specialinvoke v8.<com.fasterxml.jackson.core.JsonLocation: void <init>(com.fasterxml.jackson.core.io.ContentReference,long,long,int,int)>(v9, v14, -1L, v7, v4);
return v8;
}
public com.fasterxml.jackson.core.JsonLocation getTokenLocation()
{
com.fasterxml.jackson.core.JsonLocation v1;
int v4, v5;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
long v3;
com.fasterxml.jackson.core.io.ContentReference v2;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 = new com.fasterxml.jackson.core.JsonLocation;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.io.ContentReference _contentReference()>();
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: long _tokenInputTotal>;
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _tokenInputRow>;
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _tokenInputCol>;
specialinvoke v1.<com.fasterxml.jackson.core.JsonLocation: void <init>(com.fasterxml.jackson.core.io.ContentReference,long,long,int,int)>(v2, v3, -1L, v4, v5);
return v1;
}
public java.lang.String getText() throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.JsonToken v1, v2, v5;
java.lang.String v4, v6;
com.fasterxml.jackson.core.util.TextBuffer v3;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v1 != v2 goto label1;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v4;
label1:
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String _getText2(com.fasterxml.jackson.core.JsonToken)>(v5);
return v6;
}
protected final java.lang.String _getText2(com.fasterxml.jackson.core.JsonToken) throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.json.JsonReadContext v3;
com.fasterxml.jackson.core.util.TextBuffer v5;
int v2;
com.fasterxml.jackson.core.JsonToken v1;
java.lang.String v4, v6, v7;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: com.fasterxml.jackson.core.JsonToken;
if v1 != null goto label1;
return null;
label1:
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v2)
{
case -1: goto label2;
case 0: goto label5;
case 1: goto label5;
case 2: goto label5;
case 3: goto label5;
case 4: goto label5;
case 5: goto label3;
case 6: goto label4;
case 7: goto label4;
case 8: goto label4;
default: goto label5;
};
label2:
return null;
label3:
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();
return v4;
label4:
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v6;
label5:
v7 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonToken: java.lang.String asString()>();
return v7;
}
public int getText(java.io.Writer) throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.json.JsonReadContext v7;
int v12, v15, v5, v9;
com.fasterxml.jackson.core.JsonToken v13, v2, v3, v6;
java.lang.String v8;
boolean v10;
com.fasterxml.jackson.core.util.TextBuffer v11, v4;
java.io.Writer v1;
char[] v14;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: java.io.Writer;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v2 != v3 goto label1;
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.util.TextBuffer: int contentsToWriter(java.io.Writer)>(v1);
return v5;
label1:
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v2 != v6 goto label2;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v8 = virtualinvoke v7.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();
virtualinvoke v1.<java.io.Writer: void write(java.lang.String)>(v8);
v9 = virtualinvoke v8.<java.lang.String: int length()>();
return v9;
label2:
if v2 == null goto label5;
v10 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: boolean isNumeric()>();
if v10 == 0 goto label3;
v11 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v12 = virtualinvoke v11.<com.fasterxml.jackson.core.util.TextBuffer: int contentsToWriter(java.io.Writer)>(v1);
return v12;
label3:
v13 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
if v2 != v13 goto label4;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportError(java.lang.String)>("Current token not available: can not call this method");
label4:
v14 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>();
virtualinvoke v1.<java.io.Writer: void write(char[])>(v14);
v15 = lengthof v14;
return v15;
label5:
return 0;
}
public java.lang.String getValueAsString() throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.util.TextBuffer v3;
com.fasterxml.jackson.core.JsonToken v1, v2, v5, v6;
java.lang.String v4, v7, v8;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v1 != v2 goto label1;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v4;
label1:
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v5 != v6 goto label2;
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String getCurrentName()>();
return v7;
label2:
v8 = specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: java.lang.String getValueAsString(java.lang.String)>(null);
return v8;
}
public java.lang.String getValueAsString(java.lang.String) throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.util.TextBuffer v4;
com.fasterxml.jackson.core.JsonToken v2, v3, v6, v7;
java.lang.String v1, v5, v8, v9;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v2 != v3 goto label1;
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v5;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v6 != v7 goto label2;
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String getCurrentName()>();
return v8;
label2:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: java.lang.String getValueAsString(java.lang.String)>(v1);
return v9;
}
public char[] getTextCharacters() throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.json.JsonReadContext v5;
int v12, v3, v7;
com.fasterxml.jackson.core.JsonToken v1, v18, v2;
java.lang.String v6;
boolean v4;
com.fasterxml.jackson.core.util.TextBuffer v16;
com.fasterxml.jackson.core.io.IOContext v9;
char[] v10, v11, v13, v14, v15, v17, v19, v8;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
if v1 == null goto label7;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v3)
{
case 5: goto label1;
case 6: goto label5;
case 7: goto label5;
case 8: goto label5;
default: goto label6;
};
label1:
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: boolean _nameCopied>;
if v4 != 0 goto label4;
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();
v7 = virtualinvoke v6.<java.lang.String: int length()>();
v8 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: char[] _nameCopyBuffer>;
if v8 != null goto label2;
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.io.IOContext _ioContext>;
v10 = virtualinvoke v9.<com.fasterxml.jackson.core.io.IOContext: char[] allocNameCopyBuffer(int)>(v7);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: char[] _nameCopyBuffer> = v10;
goto label3;
label2:
v11 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: char[] _nameCopyBuffer>;
v12 = lengthof v11;
if v12 >= v7 goto label3;
v13 = newarray (char)[v7];
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: char[] _nameCopyBuffer> = v13;
label3:
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: char[] _nameCopyBuffer>;
virtualinvoke v6.<java.lang.String: void getChars(int,int,char[],int)>(0, v7, v14, 0);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: boolean _nameCopied> = 1;
label4:
v15 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: char[] _nameCopyBuffer>;
return v15;
label5:
v16 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v17 = virtualinvoke v16.<com.fasterxml.jackson.core.util.TextBuffer: char[] getTextBuffer()>();
return v17;
label6:
v18 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v19 = virtualinvoke v18.<com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>();
return v19;
label7:
return null;
}
public int getTextLength() throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.json.JsonReadContext v4;
com.fasterxml.jackson.core.util.TextBuffer v7;
int v11, v3, v6, v8;
char[] v10;
com.fasterxml.jackson.core.JsonToken v1, v2, v9;
java.lang.String v5;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
if v1 == null goto label4;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v3)
{
case 5: goto label1;
case 6: goto label2;
case 7: goto label2;
case 8: goto label2;
default: goto label3;
};
label1:
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();
v6 = virtualinvoke v5.<java.lang.String: int length()>();
return v6;
label2:
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v8 = virtualinvoke v7.<com.fasterxml.jackson.core.util.TextBuffer: int size()>();
return v8;
label3:
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v10 = virtualinvoke v9.<com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>();
v11 = lengthof v10;
return v11;
label4:
return 0;
}
public int getTextOffset() throws java.io.IOException
{
int v3, v5;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.JsonToken v1, v2;
com.fasterxml.jackson.core.util.TextBuffer v4;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
if v1 == null goto label3;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v3)
{
case 5: goto label1;
case 6: goto label2;
case 7: goto label2;
case 8: goto label2;
default: goto label3;
};
label1:
return 0;
label2:
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.util.TextBuffer: int getTextOffset()>();
return v5;
label3:
return 0;
}
public byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException
{
byte[] v5, v8, v9;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.Base64Variant v1;
com.fasterxml.jackson.core.util.ByteArrayBuilder v6;
com.fasterxml.jackson.core.JsonToken v2, v3, v4;
java.lang.String v7;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v2 == v3 goto label1;
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportError(java.lang.String,java.lang.Object)>("Current token (%s) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary", v4);
label1:
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: byte[] _binaryValue>;
if v5 != null goto label2;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.util.ByteArrayBuilder _getByteArrayBuilder()>();
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String getText()>();
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)>(v7, v6, v1);
v8 = virtualinvoke v6.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: byte[] _binaryValue> = v8;
label2:
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: byte[] _binaryValue>;
return v9;
}
public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream) throws java.io.IOException
{
com.fasterxml.jackson.core.Base64Variant v1;
java.io.OutputStream v2;
byte[] v3;
int v4;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: java.io.OutputStream;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant)>(v1);
virtualinvoke v2.<java.io.OutputStream: void write(byte[])>(v3);
v4 = lengthof v3;
return v4;
}
public java.lang.Object getEmbeddedObject() throws java.io.IOException
{
byte[] v3;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.JsonToken v1, v2;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_EMBEDDED_OBJECT>;
if v1 != v2 goto label1;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: byte[] _binaryValue>;
return v3;
label1:
return null;
}
protected final com.fasterxml.jackson.core.JsonToken _startArrayScope() throws java.io.IOException
{
int v1, v2;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.JsonToken v3;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 = (int) -1;
v2 = (int) -1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void createChildArrayContext(int,int)>(v1, v2);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = 5;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorStateAfterValue> = 6;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v3;
return v3;
}
protected final com.fasterxml.jackson.core.JsonToken _startObjectScope() throws java.io.IOException
{
int v1, v2;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.JsonToken v3;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 = (int) -1;
v2 = (int) -1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void createChildObjectContext(int,int)>(v1, v2);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = 2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorStateAfterValue> = 3;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v3;
return v3;
}
protected final com.fasterxml.jackson.core.JsonToken _closeArrayScope() throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.json.JsonReadContext v1, v3, v4;
byte v6;
com.fasterxml.jackson.core.JsonToken v8;
boolean v2, v5, v7;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inArray()>();
if v2 != 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportMismatchedEndMarker(int,char)>(93, 125);
label1:
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext getParent()>();
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = v4;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();
if v5 == 0 goto label2;
v6 = 3;
goto label4;
label2:
v7 = virtualinvoke v4.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inArray()>();
if v7 == 0 goto label3;
v6 = 6;
goto label4;
label3:
v6 = 1;
label4:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = v6;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorStateAfterValue> = v6;
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_ARRAY>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v8;
return v8;
}
protected final com.fasterxml.jackson.core.JsonToken _closeObjectScope() throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.json.JsonReadContext v1, v3, v4;
byte v6;
com.fasterxml.jackson.core.JsonToken v8;
boolean v2, v5, v7;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();
if v2 != 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportMismatchedEndMarker(int,char)>(125, 93);
label1:
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext getParent()>();
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = v4;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();
if v5 == 0 goto label2;
v6 = 3;
goto label4;
label2:
v7 = virtualinvoke v4.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inArray()>();
if v7 == 0 goto label3;
v6 = 6;
goto label4;
label3:
v6 = 1;
label4:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = v6;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorStateAfterValue> = v6;
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_OBJECT>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v8;
return v8;
}
protected final java.lang.String _findName(int, int) throws com.fasterxml.jackson.core.JsonParseException, com.fasterxml.jackson.core.exc.StreamConstraintsException
{
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v4;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
int[] v6, v7;
int v1, v2, v3;
java.lang.String v5, v8;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = staticinvoke <com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _padLastQuad(int,int)>(v1, v2);
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int)>(v3);
if v5 == null goto label1;
return v5;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int[] _quadBuffer>;
v6[0] = v3;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int[] _quadBuffer>;
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String _addName(int[],int,int)>(v7, 1, v2);
return v8;
}
protected final java.lang.String _findName(int, int, int) throws com.fasterxml.jackson.core.JsonParseException, com.fasterxml.jackson.core.exc.StreamConstraintsException
{
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v5;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
int[] v7, v8, v9;
int v1, v2, v3, v4;
java.lang.String v10, v6;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = staticinvoke <com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _padLastQuad(int,int)>(v2, v3);
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int,int)>(v1, v4);
if v6 == null goto label1;
return v6;
label1:
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int[] _quadBuffer>;
v7[0] = v1;
v8 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int[] _quadBuffer>;
v8[1] = v4;
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int[] _quadBuffer>;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String _addName(int[],int,int)>(v9, 2, v3);
return v10;
}
protected final java.lang.String _findName(int, int, int, int) throws com.fasterxml.jackson.core.JsonParseException, com.fasterxml.jackson.core.exc.StreamConstraintsException
{
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v6;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
int[] v8;
int v1, v2, v3, v4, v5, v9;
java.lang.String v10, v7;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = staticinvoke <com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _padLastQuad(int,int)>(v3, v4);
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v7 = virtualinvoke v6.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int,int,int)>(v1, v2, v5);
if v7 == null goto label1;
return v7;
label1:
v8 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int[] _quadBuffer>;
v8[0] = v1;
v8[1] = v2;
v9 = staticinvoke <com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _padLastQuad(int,int)>(v5, v4);
v8[2] = v9;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String _addName(int[],int,int)>(v8, 3, v4);
return v10;
}
protected final java.lang.String _addName(int[], int, int) throws com.fasterxml.jackson.core.JsonParseException, com.fasterxml.jackson.core.exc.StreamConstraintsException
{
byte v26;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
java.lang.String v71, v74;
com.fasterxml.jackson.core.util.TextBuffer v13, v61, v69;
char[] v14;
int[] v1;
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v73;
int v10, v11, v12, v15, v16, v17, v18, v19, v2, v20, v21, v22, v23, v24, v25, v27, v28, v29, v3, v31, v32, v33, v34, v35, v36, v37, v38, v39, v4, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v5, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v6, v60, v62, v63, v64, v65, v66, v67, v68, v7, v70, v72, v8, v9;
com.fasterxml.jackson.core.JsonToken v30;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: int[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v2 << 2;
v5 = v4 - 4;
v6 = v5 + v3;
if v3 >= 4 goto label01;
v7 = v2 - 1;
v8 = v1[v7];
v9 = v2 - 1;
v10 = 4 - v3;
v11 = v10 << 3;
v12 = v8 << v11;
v1[v9] = v12;
goto label02;
label01:
v8 = 0;
label02:
v13 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v14 = virtualinvoke v13.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v15 = 0;
v16 = 0;
label03:
if v16 >= v6 goto label16;
v17 = v16 >> 2;
v18 = v1[v17];
v19 = v16 & 3;
v20 = 3 - v19;
v21 = v20 << 3;
v22 = v18 >> v21;
v23 = v22 & 255;
v16 = v16 + 1;
if v23 <= 127 goto label14;
v24 = v23 & 224;
if v24 != 192 goto label04;
v25 = v23 & 31;
v26 = 1;
goto label07;
label04:
v27 = v23 & 240;
if v27 != 224 goto label05;
v25 = v23 & 15;
v26 = 2;
goto label07;
label05:
v28 = v23 & 248;
if v28 != 240 goto label06;
v25 = v23 & 7;
v26 = 3;
goto label07;
label06:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportInvalidInitial(int)>(v23);
v25 = 1;
v26 = 1;
label07:
v29 = v16 + v26;
if v29 <= v6 goto label08;
v30 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(" in field name", v30);
label08:
v31 = v16 >> 2;
v32 = v1[v31];
v33 = v16 & 3;
v34 = 3 - v33;
v35 = v34 << 3;
v36 = v32 >> v35;
v16 = v16 + 1;
v37 = v36 & 192;
if v37 == 128 goto label09;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportInvalidOther(int)>(v36);
label09:
v38 = v25 << 6;
v39 = v36 & 63;
v23 = v38 | v39;
if v26 <= 1 goto label12;
v40 = v16 >> 2;
v41 = v1[v40];
v42 = v16 & 3;
v43 = 3 - v42;
v44 = v43 << 3;
v45 = v41 >> v44;
v16 = v16 + 1;
v46 = v45 & 192;
if v46 == 128 goto label10;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportInvalidOther(int)>(v45);
label10:
v47 = v23 << 6;
v48 = v45 & 63;
v23 = v47 | v48;
if v26 <= 2 goto label14;
v49 = v16 >> 2;
v50 = v1[v49];
v51 = v16 & 3;
v52 = 3 - v51;
v53 = v52 << 3;
v54 = v50 >> v53;
v16 = v16 + 1;
v55 = v54 & 192;
if v55 == 128 goto label11;
v56 = v54 & 255;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportInvalidOther(int)>(v56);
label11:
v57 = v23 << 6;
v58 = v54 & 63;
v23 = v57 | v58;
label12:
if v26 <= 2 goto label14;
v59 = v23 - 65536;
v60 = lengthof v14;
if v15 < v60 goto label13;
v61 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v14 = virtualinvoke v61.<com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();
label13:
v62 = v15;
v15 = v15 + 1;
v63 = v59 >> 10;
v64 = (int) 55296;
v65 = v64 + v63;
v14[v62] = v65;
v66 = v59 & 1023;
v67 = (int) 56320;
v23 = v67 | v66;
label14:
v68 = lengthof v14;
if v15 < v68 goto label15;
v69 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v14 = virtualinvoke v69.<com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();
label15:
v70 = v15;
v15 = v15 + 1;
v14[v70] = v23;
goto label03;
label16:
v71 = new java.lang.String;
specialinvoke v71.<java.lang.String: void <init>(char[],int,int)>(v14, 0, v15);
if v3 >= 4 goto label17;
v72 = v2 - 1;
v1[v72] = v8;
label17:
v73 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v74 = virtualinvoke v73.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String addName(java.lang.String,int[],int)>(v71, v1, v2);
return v74;
}
protected static final int _padLastQuad(int, int)
{
int v0, v1, v2, v3, v4, v5;
v0 := @parameter0: int;
v1 := @parameter1: int;
if v1 != 4 goto label1;
v2 = v0;
goto label2;
label1:
v3 = v1 << 3;
v4 = (int) -1;
v5 = v4 << v3;
v2 = v0 | v5;
label2:
return v2;
}
protected final com.fasterxml.jackson.core.JsonToken _eofAsNextToken() throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.json.JsonReadContext v1;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = 7;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();
if v2 != 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _handleEOF()>();
label1:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void close()>();
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = null;
return null;
}
protected final com.fasterxml.jackson.core.JsonToken _fieldComplete(java.lang.String) throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.JsonToken v3;
java.lang.String v1;
com.fasterxml.jackson.core.json.JsonReadContext v2;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: java.lang.String;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = 4;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
virtualinvoke v2.<com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentName(java.lang.String)>(v1);
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v3;
return v3;
}
protected final com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken) throws java.io.IOException
{
int v2;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.JsonToken v1;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: com.fasterxml.jackson.core.JsonToken;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorStateAfterValue>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = v2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v1;
return v1;
}
protected final com.fasterxml.jackson.core.JsonToken _valueCompleteInt(int, java.lang.String) throws java.io.IOException
{
int v1, v4, v5;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
com.fasterxml.jackson.core.JsonToken v6;
java.lang.String v2;
com.fasterxml.jackson.core.util.TextBuffer v3;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v3.<com.fasterxml.jackson.core.util.TextBuffer: void resetWithString(java.lang.String)>(v2);
v4 = virtualinvoke v2.<java.lang.String: int length()>();
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _intLength> = v4;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _numTypesValid> = 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _numberInt> = v1;
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorStateAfterValue>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = v5;
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v6;
return v6;
}
protected final com.fasterxml.jackson.core.JsonToken _valueNonStdNumberComplete(int) throws java.io.IOException
{
double[] v7;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
java.lang.String[] v2;
com.fasterxml.jackson.core.util.TextBuffer v4;
com.fasterxml.jackson.core.JsonParser$Feature v5;
int v1, v9;
com.fasterxml.jackson.core.JsonToken v10;
java.lang.String v3;
boolean v6;
double v8;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: int;
v2 = <com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String[] NON_STD_TOKENS>;
v3 = v2[v1];
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v4.<com.fasterxml.jackson.core.util.TextBuffer: void resetWithString(java.lang.String)>(v3);
v5 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_NON_NUMERIC_NUMBERS>;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v5);
if v6 != 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportError(java.lang.String,java.lang.Object)>("Non-standard token \'%s\': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow", v3);
label1:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _intLength> = 0;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _numTypesValid> = 8;
v7 = <com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: double[] NON_STD_TOKEN_VALUES>;
v8 = v7[v1];
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: double _numberDouble> = v8;
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorStateAfterValue>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = v9;
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v10;
return v10;
}
protected final java.lang.String _nonStdToken(int)
{
int v1;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
java.lang.String[] v2;
java.lang.String v3;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: int;
v2 = <com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String[] NON_STD_TOKENS>;
v3 = v2[v1];
return v3;
}
protected final void _updateTokenLocation()
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
long v10, v7;
int v1, v2, v3, v4, v5, v6, v8, v9;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currInputRow>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currInputRowAlt>;
v3 = staticinvoke <java.lang.Math: int max(int,int)>(v1, v2);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _tokenInputRow> = v3;
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _inputPtr>;
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currInputRowStart>;
v6 = v4 - v5;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _tokenInputCol> = v6;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: long _currInputProcessed>;
v8 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currBufferStart>;
v9 = v4 - v8;
v10 = v7 + v9;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: long _tokenInputTotal> = v10;
return;
}
protected void _reportInvalidChar(int) throws com.fasterxml.jackson.core.JsonParseException
{
int v1;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: int;
if v1 >= 32 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _throwInvalidSpace(int)>(v1);
label1:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportInvalidInitial(int)>(v1);
return;
}
protected void _reportInvalidInitial(int) throws com.fasterxml.jackson.core.JsonParseException
{
int v1;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
java.lang.String v2, v3;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: int;
v2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v1);
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid UTF-8 start byte 0x\u0001");
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportError(java.lang.String)>(v3);
return;
}
protected void _reportInvalidOther(int, int) throws com.fasterxml.jackson.core.JsonParseException
{
int v1, v2;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: int;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _inputPtr> = v2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportInvalidOther(int)>(v1);
return;
}
protected void _reportInvalidOther(int) throws com.fasterxml.jackson.core.JsonParseException
{
int v1;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase v0;
java.lang.String v2, v3;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;
v1 := @parameter0: int;
v2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v1);
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid UTF-8 middle byte 0x\u0001");
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportError(java.lang.String)>(v3);
return;
}
static void <clinit>()
{
double[] v1;
java.lang.String[] v0;
v0 = newarray (java.lang.String)[4];
v0[0] = "NaN";
v0[1] = "Infinity";
v0[2] = "+Infinity";
v0[3] = "-Infinity";
<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String[] NON_STD_TOKENS> = v0;
v1 = newarray (double)[4];
v1[0] = #NaN;
v1[1] = #Infinity;
v1[2] = #Infinity;
v1[3] = #-Infinity;
<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: double[] NON_STD_TOKEN_VALUES> = v1;
return;
}
}