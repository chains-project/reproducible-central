public final class com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer extends java.lang.Object
{
public static final int HASH_MULT;
private static final int DEFAULT_T_SIZE;
private static final int MAX_T_SIZE;
static final int MAX_ENTRIES_FOR_REUSE;
static final int MAX_COLL_CHAIN_LENGTH;
protected final com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _parent;
protected final java.util.concurrent.atomic.AtomicReference _tableInfo;
protected final int _seed;
protected final int _flags;
protected boolean _canonicalize;
protected java.lang.String[] _symbols;
protected com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets;
protected int _size;
protected int _sizeThreshold;
protected int _indexMask;
protected int _longestCollisionList;
protected boolean _hashShared;
protected java.util.BitSet _overflows;
private void <init>(int)
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
int v1, v2;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo v4;
java.util.concurrent.atomic.AtomicReference v3;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 := @parameter0: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _parent> = null;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _seed> = v1;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _canonicalize> = 1;
v2 = (int) -1;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _flags> = v2;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _hashShared> = 0;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _longestCollisionList> = 0;
v3 = new java.util.concurrent.atomic.AtomicReference;
v4 = staticinvoke <com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo createInitial(int)>(64);
specialinvoke v3.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(v4);
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo> = v3;
return;
}
private void <init>(com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer, int, int, com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo)
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0, v1;
java.lang.String[] v11, v7;
com.fasterxml.jackson.core.JsonFactory$Feature v5;
int v10, v12, v13, v14, v2, v3, v9;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo v4;
boolean v6;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] v8;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 := @parameter0: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _parent> = v1;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _seed> = v3;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo> = null;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _flags> = v2;
v5 = <com.fasterxml.jackson.core.JsonFactory$Feature: com.fasterxml.jackson.core.JsonFactory$Feature CANONICALIZE_FIELD_NAMES>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.JsonFactory$Feature: boolean enabledIn(int)>(v2);
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _canonicalize> = v6;
v7 = v4.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: java.lang.String[] symbols>;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols> = v7;
v8 = v4.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] buckets>;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets> = v8;
v9 = v4.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: int size>;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size> = v9;
v10 = v4.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: int longestCollisionList>;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _longestCollisionList> = v10;
v11 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;
v12 = lengthof v11;
v13 = staticinvoke <com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _thresholdSize(int)>(v12);
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _sizeThreshold> = v13;
v14 = v12 - 1;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _indexMask> = v14;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _hashShared> = 1;
return;
}
private static int _thresholdSize(int)
{
int v0, v1, v2;
v0 := @parameter0: int;
v1 = v0 >> 2;
v2 = v0 - v1;
return v2;
}
public static com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer createRoot()
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v4;
int v2, v3;
long v0, v1;
v0 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v1 = v0 >>> 32;
v2 = v0 + v1;
v3 = v2 | 1;
v4 = staticinvoke <com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer createRoot(int)>(v3);
return v4;
}
protected static com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer createRoot(int)
{
int v0;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v1;
v0 := @parameter0: int;
v1 = new com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
specialinvoke v1.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: void <init>(int)>(v0);
return v1;
}
public com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer makeChild(int)
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0, v2;
int v1, v3;
java.lang.Object v5;
java.util.concurrent.atomic.AtomicReference v4;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 := @parameter0: int;
v2 = new com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v3 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _seed>;
v4 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
specialinvoke v2.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: void <init>(com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer,int,int,com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo)>(v0, v1, v3, v5);
return v2;
}
public void release()
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0, v2, v4;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo v5;
boolean v1, v3;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean maybeDirty()>();
if v1 != 0 goto label1;
return;
label1:
v2 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _parent>;
if v2 == null goto label2;
v3 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _canonicalize>;
if v3 == 0 goto label2;
v4 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _parent>;
v5 = new com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo;
specialinvoke v5.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: void <init>(com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer)>(v0);
specialinvoke v4.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: void mergeChild(com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo)>(v5);
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _hashShared> = 1;
label2:
return;
}
private void mergeChild(com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo)
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
int v2, v5;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo v1;
java.lang.Object v4;
java.util.concurrent.atomic.AtomicReference v3, v6;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 := @parameter0: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo;
v2 = v1.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: int size>;
v3 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v5 = v4.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: int size>;
if v2 != v5 goto label1;
return;
label1:
if v2 <= 12000 goto label2;
v1 = staticinvoke <com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo createInitial(int)>(64);
label2:
v6 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo>;
virtualinvoke v6.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v4, v1);
return;
}
public int size()
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
int v4, v5;
java.lang.Object v3;
java.util.concurrent.atomic.AtomicReference v1, v2;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo>;
if v1 == null goto label1;
v2 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.concurrent.atomic.AtomicReference _tableInfo>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v4 = v3.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo: int size>;
return v4;
label1:
v5 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size>;
return v5;
}
public int bucketCount()
{
int v2;
java.lang.String[] v1;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;
v2 = lengthof v1;
return v2;
}
public boolean maybeDirty()
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
boolean v1, v2;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _hashShared>;
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public int hashSeed()
{
int v1;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _seed>;
return v1;
}
public int collisionCount()
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
int v1, v3, v4, v6;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket v5;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] v2;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 = 0;
v2 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label3;
v5 = v2[v4];
if v5 == null goto label2;
v6 = v5.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: int length>;
v1 = v1 + v6;
label2:
v4 = v4 + 1;
goto label1;
label3:
return v1;
}
public int maxCollisionLength()
{
int v1;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _longestCollisionList>;
return v1;
}
public java.lang.String findSymbol(char[], int, int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
java.lang.String[] v8;
int v10, v11, v13, v16, v2, v3, v4, v7;
java.lang.String v18, v20, v21, v6, v9;
boolean v5;
char v12, v14;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket v17, v19;
char[] v1;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] v15;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
if v3 >= 1 goto label1;
return "";
label1:
v5 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _canonicalize>;
if v5 != 0 goto label2;
v6 = new java.lang.String;
specialinvoke v6.<java.lang.String: void <init>(char[],int,int)>(v1, v2, v3);
return v6;
label2:
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _hashToIndex(int)>(v4);
v8 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;
v9 = v8[v7];
if v9 == null goto label6;
v10 = virtualinvoke v9.<java.lang.String: int length()>();
if v10 != v3 goto label4;
v11 = 0;
label3:
v12 = virtualinvoke v9.<java.lang.String: char charAt(int)>(v11);
v13 = v2 + v11;
v14 = v1[v13];
if v12 != v14 goto label4;
v11 = v11 + 1;
if v11 != v3 goto label3;
return v9;
label4:
v15 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;
v16 = v7 >> 1;
v17 = v15[v16];
if v17 == null goto label6;
v18 = virtualinvoke v17.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: java.lang.String has(char[],int,int)>(v1, v2, v3);
if v18 == null goto label5;
return v18;
label5:
v19 = v17.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket next>;
v20 = specialinvoke v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String _findSymbol2(char[],int,int,com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket)>(v1, v2, v3, v19);
if v20 == null goto label6;
return v20;
label6:
v21 = specialinvoke v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String _addSymbol(char[],int,int,int,int)>(v1, v2, v3, v4, v7);
return v21;
}
private java.lang.String _findSymbol2(char[], int, int, com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket)
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
int v2, v3;
char[] v1;
java.lang.String v5;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket v4;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket;
label1:
if v4 == null goto label3;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: java.lang.String has(char[],int,int)>(v1, v2, v3);
if v5 == null goto label2;
return v5;
label2:
v4 = v4.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket next>;
goto label1;
label3:
return null;
}
private java.lang.String _addSymbol(char[], int, int, int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
java.lang.String[] v18, v20;
com.fasterxml.jackson.core.JsonFactory$Feature v12;
com.fasterxml.jackson.core.util.InternCache v15;
int v13, v16, v17, v2, v21, v25, v27, v28, v3, v4, v5, v7, v8, v9;
java.lang.String v10, v11, v19;
boolean v14, v6;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket v22, v24;
char[] v1;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] v23, v26;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _hashShared>;
if v6 == 0 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: void copyArrays()>();
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _hashShared> = 0;
goto label2;
label1:
v7 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size>;
v8 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _sizeThreshold>;
if v7 < v8 goto label2;
specialinvoke v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: void rehash()>();
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int calcHash(char[],int,int)>(v1, v2, v3);
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _hashToIndex(int)>(v9);
label2:
v10 = new java.lang.String;
specialinvoke v10.<java.lang.String: void <init>(char[],int,int)>(v1, v2, v3);
v11 = v10;
v12 = <com.fasterxml.jackson.core.JsonFactory$Feature: com.fasterxml.jackson.core.JsonFactory$Feature INTERN_FIELD_NAMES>;
v13 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _flags>;
v14 = virtualinvoke v12.<com.fasterxml.jackson.core.JsonFactory$Feature: boolean enabledIn(int)>(v13);
if v14 == 0 goto label3;
v15 = <com.fasterxml.jackson.core.util.InternCache: com.fasterxml.jackson.core.util.InternCache instance>;
v11 = virtualinvoke v15.<com.fasterxml.jackson.core.util.InternCache: java.lang.String intern(java.lang.String)>(v10);
label3:
v16 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size>;
v17 = v16 + 1;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size> = v17;
v18 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;
v19 = v18[v5];
if v19 != null goto label4;
v20 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;
v20[v5] = v11;
goto label6;
label4:
v21 = v5 >> 1;
v22 = new com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket;
v23 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;
v24 = v23[v21];
specialinvoke v22.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: void <init>(java.lang.String,com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket)>(v11, v24);
v25 = v22.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: int length>;
if v25 <= 150 goto label5;
specialinvoke v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: void _handleSpillOverflow(int,com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket,int)>(v21, v22, v5);
goto label6;
label5:
v26 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;
v26[v21] = v22;
v27 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _longestCollisionList>;
v28 = staticinvoke <java.lang.Math: int max(int,int)>(v25, v27);
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _longestCollisionList> = v28;
label6:
return v11;
}
private void _handleSpillOverflow(int, com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket, int) throws java.io.IOException
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
java.lang.String[] v13;
com.fasterxml.jackson.core.JsonFactory$Feature v9;
int v1, v10, v16, v17, v18, v19, v3;
java.lang.String v14;
boolean v11, v8;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket v2;
java.util.BitSet v12, v4, v5, v6, v7;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] v15;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 := @parameter0: int;
v2 := @parameter1: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.BitSet _overflows>;
if v4 != null goto label1;
v5 = new java.util.BitSet;
specialinvoke v5.<java.util.BitSet: void <init>()>();
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.BitSet _overflows> = v5;
v6 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.BitSet _overflows>;
virtualinvoke v6.<java.util.BitSet: void set(int)>(v1);
goto label4;
label1:
v7 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.BitSet _overflows>;
v8 = virtualinvoke v7.<java.util.BitSet: boolean get(int)>(v1);
if v8 == 0 goto label3;
v9 = <com.fasterxml.jackson.core.JsonFactory$Feature: com.fasterxml.jackson.core.JsonFactory$Feature FAIL_ON_SYMBOL_HASH_OVERFLOW>;
v10 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _flags>;
v11 = virtualinvoke v9.<com.fasterxml.jackson.core.JsonFactory$Feature: boolean enabledIn(int)>(v10);
if v11 == 0 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: void _reportTooManyCollisions(int)>(150);
label2:
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _canonicalize> = 0;
goto label4;
label3:
v12 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.BitSet _overflows>;
virtualinvoke v12.<java.util.BitSet: void set(int)>(v1);
label4:
v13 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;
v14 = v2.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: java.lang.String symbol>;
v13[v3] = v14;
v15 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;
v15[v1] = null;
v16 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size>;
v17 = v2.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: int length>;
v18 = v16 - v17;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size> = v18;
v19 = (int) -1;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _longestCollisionList> = v19;
return;
}
public int _hashToIndex(int)
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
int v1, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 := @parameter0: int;
v2 = v1 >>> 15;
v3 = v1 + v2;
v4 = v3 << 7;
v5 = v3 ^ v4;
v6 = v5 >>> 3;
v7 = v5 + v6;
v8 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _indexMask>;
v9 = v7 & v8;
return v9;
}
public int calcHash(char[], int, int)
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
char v8;
int v2, v3, v4, v5, v6, v7, v9;
char[] v1;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _seed>;
v5 = v2;
v6 = v2 + v3;
label1:
if v5 >= v6 goto label2;
v7 = v4 * 33;
v8 = v1[v5];
v4 = v7 + v8;
v5 = v5 + 1;
goto label1;
label2:
if v4 != 0 goto label3;
v9 = 1;
goto label4;
label3:
v9 = v4;
label4:
return v9;
}
public int calcHash(java.lang.String)
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
char v6;
int v2, v3, v4, v5, v7;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: int length()>();
v3 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _seed>;
v4 = 0;
label1:
if v4 >= v2 goto label2;
v5 = v3 * 33;
v6 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v4);
v3 = v5 + v6;
v4 = v4 + 1;
goto label1;
label2:
if v3 != 0 goto label3;
v7 = 1;
goto label4;
label3:
v7 = v3;
label4:
return v7;
}
private void copyArrays()
{
java.lang.Object[] v3, v6;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
int v2, v5;
java.lang.String[] v1;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] v4;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;
v2 = lengthof v1;
v3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(v1, v2);
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols> = v3;
v4 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;
v5 = lengthof v4;
v6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(v4, v5);
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets> = v6;
return;
}
private void rehash() throws java.io.IOException
{
java.lang.IllegalStateException v44;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
java.lang.Integer v47, v48;
java.lang.Object[] v45;
java.lang.String[] v1, v19, v21, v34, v36, v4, v6, v8;
int v11, v12, v13, v14, v15, v17, v18, v2, v22, v27, v28, v29, v3, v32, v33, v37, v42, v43, v46, v9;
java.lang.String v16, v20, v31, v35, v49;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket v23, v25, v30, v38, v40;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] v10, v24, v26, v39, v41, v5, v7;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;
v2 = lengthof v1;
v3 = v2 + v2;
if v3 <= 65536 goto label01;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size> = 0;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _canonicalize> = 0;
v4 = newarray (java.lang.String)[64];
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols> = v4;
v5 = newarray (com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket)[32];
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets> = v5;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _indexMask> = 63;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: boolean _hashShared> = 0;
return;
label01:
v6 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;
v7 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;
v8 = newarray (java.lang.String)[v3];
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols> = v8;
v9 = v3 >> 1;
v10 = newarray (com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket)[v9];
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets> = v10;
v11 = v3 - 1;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _indexMask> = v11;
v12 = staticinvoke <com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _thresholdSize(int)>(v3);
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _sizeThreshold> = v12;
v13 = 0;
v14 = 0;
v15 = 0;
label02:
if v15 >= v2 goto label05;
v16 = v6[v15];
if v16 == null goto label04;
v13 = v13 + 1;
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int calcHash(java.lang.String)>(v16);
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _hashToIndex(int)>(v17);
v19 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;
v20 = v19[v18];
if v20 != null goto label03;
v21 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;
v21[v18] = v16;
goto label04;
label03:
v22 = v18 >> 1;
v23 = new com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket;
v24 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;
v25 = v24[v22];
specialinvoke v23.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: void <init>(java.lang.String,com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket)>(v16, v25);
v26 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;
v26[v22] = v23;
v27 = v23.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: int length>;
v14 = staticinvoke <java.lang.Math: int max(int,int)>(v14, v27);
label04:
v15 = v15 + 1;
goto label02;
label05:
v28 = v2 >> 1;
v29 = 0;
label06:
if v29 >= v28 goto label11;
v30 = v7[v29];
label07:
if v30 == null goto label10;
v13 = v13 + 1;
v31 = v30.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: java.lang.String symbol>;
v32 = virtualinvoke v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int calcHash(java.lang.String)>(v31);
v33 = virtualinvoke v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _hashToIndex(int)>(v32);
v34 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;
v35 = v34[v33];
if v35 != null goto label08;
v36 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;
v36[v33] = v31;
goto label09;
label08:
v37 = v33 >> 1;
v38 = new com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket;
v39 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;
v40 = v39[v37];
specialinvoke v38.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: void <init>(java.lang.String,com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket)>(v31, v40);
v41 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;
v41[v37] = v38;
v42 = v38.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: int length>;
v14 = staticinvoke <java.lang.Math: int max(int,int)>(v14, v42);
label09:
v30 = v30.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket next>;
goto label07;
label10:
v29 = v29 + 1;
goto label06;
label11:
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _longestCollisionList> = v14;
v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.util.BitSet _overflows> = null;
v43 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size>;
if v13 == v43 goto label12;
v44 = new java.lang.IllegalStateException;
v45 = newarray (java.lang.Object)[2];
v46 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size>;
v47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v46);
v45[0] = v47;
v48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v13);
v45[1] = v48;
v49 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Internal error on SymbolTable.rehash(): had %d entries; now have %d", v45);
specialinvoke v44.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v49);
throw v44;
label12:
return;
}
protected void _reportTooManyCollisions(int) throws com.fasterxml.jackson.core.exc.StreamConstraintsException
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
int v1, v3;
java.lang.String v4;
com.fasterxml.jackson.core.exc.StreamConstraintsException v2;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 := @parameter0: int;
v2 = new com.fasterxml.jackson.core.exc.StreamConstraintsException;
v3 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size>;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v3, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Longest collision chain in symbol table (of size \u0001) now exceeds maximum, \u0001 -- suspect a DoS attack based on hash collisions");
specialinvoke v2.<com.fasterxml.jackson.core.exc.StreamConstraintsException: void <init>(java.lang.String)>(v4);
throw v2;
}
protected void verifyInternalConsistency()
{
java.lang.IllegalStateException v12;
java.lang.Object[] v13;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v0;
java.lang.String[] v2, v5;
java.lang.Integer v15, v16;
int v1, v11, v14, v3, v4, v7, v8;
java.lang.String v17, v6;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket v10;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] v9;
v0 := @this: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v1 = 0;
v2 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label3;
v5 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String[] _symbols>;
v6 = v5[v4];
if v6 == null goto label2;
v1 = v1 + 1;
label2:
v4 = v4 + 1;
goto label1;
label3:
v7 = v3 >> 1;
v8 = 0;
label4:
if v8 >= v7 goto label7;
v9 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets>;
v10 = v9[v8];
label5:
if v10 == null goto label6;
v1 = v1 + 1;
v10 = v10.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket next>;
goto label5;
label6:
v8 = v8 + 1;
goto label4;
label7:
v11 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size>;
if v1 == v11 goto label8;
v12 = new java.lang.IllegalStateException;
v13 = newarray (java.lang.Object)[2];
v14 = v0.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int _size>;
v15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v14);
v13[0] = v15;
v16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v13[1] = v16;
v17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Internal error: expected internal size %d vs calculated count %d", v13);
specialinvoke v12.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v17);
throw v12;
label8:
return;
}
}