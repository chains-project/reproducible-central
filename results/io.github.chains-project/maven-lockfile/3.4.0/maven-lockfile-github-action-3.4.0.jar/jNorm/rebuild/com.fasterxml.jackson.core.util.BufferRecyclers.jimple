public class com.fasterxml.jackson.core.util.BufferRecyclers extends java.lang.Object
{
public static final java.lang.String SYSTEM_PROPERTY_TRACK_REUSABLE_BUFFERS;
private static final com.fasterxml.jackson.core.util.ThreadLocalBufferManager _bufferRecyclerTracker;
protected static final java.lang.ThreadLocal _recyclerRef;
public void <init>()
{
com.fasterxml.jackson.core.util.BufferRecyclers v0;
v0 := @this: com.fasterxml.jackson.core.util.BufferRecyclers;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static com.fasterxml.jackson.core.util.BufferRecycler getBufferRecycler()
{
java.lang.ThreadLocal v0, v9;
com.fasterxml.jackson.core.util.ThreadLocalBufferManager v5, v6;
java.lang.Object v1, v2;
java.lang.ref.SoftReference v7, v8;
com.fasterxml.jackson.core.util.BufferRecycler v3, v4;
v0 = <com.fasterxml.jackson.core.util.BufferRecyclers: java.lang.ThreadLocal _recyclerRef>;
v1 = virtualinvoke v0.<java.lang.ThreadLocal: java.lang.Object get()>();
if v1 == null goto label1;
v2 = virtualinvoke v1.<java.lang.ref.SoftReference: java.lang.Object get()>();
label1:
v3 = v2;
if v2 != null goto label4;
v4 = new com.fasterxml.jackson.core.util.BufferRecycler;
specialinvoke v4.<com.fasterxml.jackson.core.util.BufferRecycler: void <init>()>();
v3 = v4;
v5 = <com.fasterxml.jackson.core.util.BufferRecyclers: com.fasterxml.jackson.core.util.ThreadLocalBufferManager _bufferRecyclerTracker>;
if v5 == null goto label2;
v6 = <com.fasterxml.jackson.core.util.BufferRecyclers: com.fasterxml.jackson.core.util.ThreadLocalBufferManager _bufferRecyclerTracker>;
v7 = virtualinvoke v6.<com.fasterxml.jackson.core.util.ThreadLocalBufferManager: java.lang.ref.SoftReference wrapAndTrack(com.fasterxml.jackson.core.util.BufferRecycler)>(v4);
goto label3;
label2:
v8 = new java.lang.ref.SoftReference;
specialinvoke v8.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(v4);
v7 = v8;
label3:
v9 = <com.fasterxml.jackson.core.util.BufferRecyclers: java.lang.ThreadLocal _recyclerRef>;
virtualinvoke v9.<java.lang.ThreadLocal: void set(java.lang.Object)>(v7);
label4:
return v3;
}
public static int releaseBuffers()
{
com.fasterxml.jackson.core.util.ThreadLocalBufferManager v0, v1;
int v2, v3;
v0 = <com.fasterxml.jackson.core.util.BufferRecyclers: com.fasterxml.jackson.core.util.ThreadLocalBufferManager _bufferRecyclerTracker>;
if v0 == null goto label1;
v1 = <com.fasterxml.jackson.core.util.BufferRecyclers: com.fasterxml.jackson.core.util.ThreadLocalBufferManager _bufferRecyclerTracker>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.util.ThreadLocalBufferManager: int releaseBuffers()>();
return v2;
label1:
v3 = (int) -1;
return v3;
}
public static com.fasterxml.jackson.core.io.JsonStringEncoder getJsonStringEncoder()
{
com.fasterxml.jackson.core.io.JsonStringEncoder v0;
v0 = staticinvoke <com.fasterxml.jackson.core.io.JsonStringEncoder: com.fasterxml.jackson.core.io.JsonStringEncoder getInstance()>();
return v0;
}
public static byte[] encodeAsUTF8(java.lang.String)
{
byte[] v2;
com.fasterxml.jackson.core.io.JsonStringEncoder v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <com.fasterxml.jackson.core.io.JsonStringEncoder: com.fasterxml.jackson.core.io.JsonStringEncoder getInstance()>();
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.io.JsonStringEncoder: byte[] encodeAsUTF8(java.lang.String)>(v0);
return v2;
}
public static char[] quoteAsJsonText(java.lang.String)
{
char[] v2;
com.fasterxml.jackson.core.io.JsonStringEncoder v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <com.fasterxml.jackson.core.io.JsonStringEncoder: com.fasterxml.jackson.core.io.JsonStringEncoder getInstance()>();
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.io.JsonStringEncoder: char[] quoteAsString(java.lang.String)>(v0);
return v2;
}
public static void quoteAsJsonText(java.lang.CharSequence, java.lang.StringBuilder)
{
java.lang.StringBuilder v1;
com.fasterxml.jackson.core.io.JsonStringEncoder v2;
java.lang.CharSequence v0;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.StringBuilder;
v2 = staticinvoke <com.fasterxml.jackson.core.io.JsonStringEncoder: com.fasterxml.jackson.core.io.JsonStringEncoder getInstance()>();
virtualinvoke v2.<com.fasterxml.jackson.core.io.JsonStringEncoder: void quoteAsString(java.lang.CharSequence,java.lang.StringBuilder)>(v0, v1);
return;
}
public static byte[] quoteAsJsonUTF8(java.lang.String)
{
byte[] v2;
com.fasterxml.jackson.core.io.JsonStringEncoder v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <com.fasterxml.jackson.core.io.JsonStringEncoder: com.fasterxml.jackson.core.io.JsonStringEncoder getInstance()>();
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.io.JsonStringEncoder: byte[] quoteAsUTF8(java.lang.String)>(v0);
return v2;
}
static void <clinit>()
{
java.lang.ThreadLocal v5;
com.fasterxml.jackson.core.util.ThreadLocalBufferManager v4;
java.lang.SecurityException v3;
java.lang.String v1, v2;
boolean v0;
v0 = 0;
label1:
v1 = "true";
v2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("com.fasterxml.jackson.core.util.BufferRecyclers.trackReusableBuffers");
v0 = virtualinvoke v1.<java.lang.String: boolean equals(java.lang.Object)>(v2);
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
if v0 == 0 goto label5;
v4 = staticinvoke <com.fasterxml.jackson.core.util.ThreadLocalBufferManager: com.fasterxml.jackson.core.util.ThreadLocalBufferManager instance()>();
goto label6;
label5:
v4 = null;
label6:
<com.fasterxml.jackson.core.util.BufferRecyclers: com.fasterxml.jackson.core.util.ThreadLocalBufferManager _bufferRecyclerTracker> = v4;
v5 = new java.lang.ThreadLocal;
specialinvoke v5.<java.lang.ThreadLocal: void <init>()>();
<com.fasterxml.jackson.core.util.BufferRecyclers: java.lang.ThreadLocal _recyclerRef> = v5;
return;
catch java.lang.SecurityException from label1 to label2 with label3;
}
}