public class com.fasterxml.jackson.core.util.VersionUtil extends java.lang.Object
{
private static final java.util.regex.Pattern V_SEP;
protected void <init>()
{
com.fasterxml.jackson.core.util.VersionUtil v0;
v0 := @this: com.fasterxml.jackson.core.util.VersionUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public com.fasterxml.jackson.core.Version version()
{
com.fasterxml.jackson.core.Version v1;
com.fasterxml.jackson.core.util.VersionUtil v0;
v0 := @this: com.fasterxml.jackson.core.util.VersionUtil;
v1 = staticinvoke <com.fasterxml.jackson.core.Version: com.fasterxml.jackson.core.Version unknownVersion()>();
return v1;
}
public static com.fasterxml.jackson.core.Version versionFor(java.lang.Class)
{
java.lang.Object[] v9;
java.lang.reflect.Constructor v8;
java.lang.String v13, v3, v4;
java.lang.Package v2;
com.fasterxml.jackson.core.Version v1, v15;
java.lang.Class[] v7;
java.lang.IllegalArgumentException v12;
java.lang.Exception v11, v14;
java.lang.Class v0, v6;
java.lang.Object v10;
java.lang.ClassLoader v5;
v0 := @parameter0: java.lang.Class;
v1 = null;
label1:
v2 = virtualinvoke v0.<java.lang.Class: java.lang.Package getPackage()>();
v3 = virtualinvoke v2.<java.lang.Package: java.lang.String getName()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.PackageVersion");
v5 = virtualinvoke v0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(v4, 1, v5);
label2:
v7 = newarray (java.lang.Class)[0];
v8 = virtualinvoke v6.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(v7);
v9 = newarray (java.lang.Object)[0];
v10 = virtualinvoke v8.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v9);
v1 = interfaceinvoke v10.<com.fasterxml.jackson.core.Versioned: com.fasterxml.jackson.core.Version version()>();
label3:
goto label6;
label4:
v11 := @caughtexception;
v12 = new java.lang.IllegalArgumentException;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to get Versioned out of \u0001");
specialinvoke v12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v13);
throw v12;
label5:
v14 := @caughtexception;
label6:
if v1 != null goto label7;
v15 = staticinvoke <com.fasterxml.jackson.core.Version: com.fasterxml.jackson.core.Version unknownVersion()>();
goto label8;
label7:
v15 = v1;
label8:
return v15;
catch java.lang.Exception from label2 to label3 with label4;
catch java.lang.Exception from label1 to label5 with label5;
}
public static com.fasterxml.jackson.core.Version packageVersionFor(java.lang.Class)
{
com.fasterxml.jackson.core.Version v1;
java.lang.Class v0;
v0 := @parameter0: java.lang.Class;
v1 = staticinvoke <com.fasterxml.jackson.core.util.VersionUtil: com.fasterxml.jackson.core.Version versionFor(java.lang.Class)>(v0);
return v1;
}
public static com.fasterxml.jackson.core.Version mavenVersionFor(java.lang.ClassLoader, java.lang.String, java.lang.String)
{
java.lang.Throwable v12;
java.util.Properties v6;
com.fasterxml.jackson.core.Version v10, v13;
java.io.IOException v11;
java.lang.ClassLoader v0;
java.lang.String v1, v2, v3, v4, v7, v8, v9;
java.io.InputStream v5;
v0 := @parameter0: java.lang.ClassLoader;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
v3 = virtualinvoke v1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\.", "/");
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v3, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("META-INF/maven/\u0001/\u0001/pom.properties");
v5 = virtualinvoke v0.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(v4);
if v5 == null goto label6;
label1:
v6 = new java.util.Properties;
specialinvoke v6.<java.util.Properties: void <init>()>();
virtualinvoke v6.<java.util.Properties: void load(java.io.InputStream)>(v5);
v7 = virtualinvoke v6.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("version");
v8 = virtualinvoke v6.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("artifactId");
v9 = virtualinvoke v6.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("groupId");
v10 = staticinvoke <com.fasterxml.jackson.core.util.VersionUtil: com.fasterxml.jackson.core.Version parseVersion(java.lang.String,java.lang.String,java.lang.String)>(v7, v9, v8);
label2:
staticinvoke <com.fasterxml.jackson.core.util.VersionUtil: void _close(java.io.Closeable)>(v5);
return v10;
label3:
v11 := @caughtexception;
label4:
staticinvoke <com.fasterxml.jackson.core.util.VersionUtil: void _close(java.io.Closeable)>(v5);
goto label6;
label5:
v12 := @caughtexception;
staticinvoke <com.fasterxml.jackson.core.util.VersionUtil: void _close(java.io.Closeable)>(v5);
throw v12;
label6:
v13 = staticinvoke <com.fasterxml.jackson.core.Version: com.fasterxml.jackson.core.Version unknownVersion()>();
return v13;
catch java.io.IOException from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
public static com.fasterxml.jackson.core.Version parseVersion(java.lang.String, java.lang.String, java.lang.String)
{
java.lang.String[] v6;
int v10, v12, v13, v15, v16, v4, v9;
java.lang.String v0, v1, v11, v14, v17, v2, v3, v8;
com.fasterxml.jackson.core.Version v18, v7;
java.util.regex.Pattern v5;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
if v0 == null goto label7;
v3 = virtualinvoke v0.<java.lang.String: java.lang.String trim()>();
v4 = virtualinvoke v3.<java.lang.String: int length()>();
if v4 <= 0 goto label7;
v5 = <com.fasterxml.jackson.core.util.VersionUtil: java.util.regex.Pattern V_SEP>;
v6 = virtualinvoke v5.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>(v3);
v7 = new com.fasterxml.jackson.core.Version;
v8 = v6[0];
v9 = staticinvoke <com.fasterxml.jackson.core.util.VersionUtil: int parseVersionPart(java.lang.String)>(v8);
v10 = lengthof v6;
if v10 <= 1 goto label1;
v11 = v6[1];
v12 = staticinvoke <com.fasterxml.jackson.core.util.VersionUtil: int parseVersionPart(java.lang.String)>(v11);
goto label2;
label1:
v12 = 0;
label2:
v13 = lengthof v6;
if v13 <= 2 goto label3;
v14 = v6[2];
v15 = staticinvoke <com.fasterxml.jackson.core.util.VersionUtil: int parseVersionPart(java.lang.String)>(v14);
goto label4;
label3:
v15 = 0;
label4:
v16 = lengthof v6;
if v16 <= 3 goto label5;
v17 = v6[3];
goto label6;
label5:
v17 = null;
label6:
specialinvoke v7.<com.fasterxml.jackson.core.Version: void <init>(int,int,int,java.lang.String,java.lang.String,java.lang.String)>(v9, v12, v15, v17, v1, v2);
return v7;
label7:
v18 = staticinvoke <com.fasterxml.jackson.core.Version: com.fasterxml.jackson.core.Version unknownVersion()>();
return v18;
}
protected static int parseVersionPart(java.lang.String)
{
int v1, v2, v3, v5, v6;
char v4;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = 0;
v2 = 0;
v3 = virtualinvoke v0.<java.lang.String: int length()>();
label1:
if v2 >= v3 goto label2;
v4 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v2);
if v4 > 57 goto label2;
if v4 < 48 goto label2;
v5 = v1 * 10;
v6 = v4 - 48;
v1 = v5 + v6;
v2 = v2 + 1;
goto label1;
label2:
return v1;
}
private static final void _close(java.io.Closeable)
{
java.io.Closeable v0;
v0 := @parameter0: java.io.Closeable;
return;
}
public static final void throwInternal()
{
java.lang.RuntimeException v0;
v0 = new java.lang.RuntimeException;
specialinvoke v0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Internal error: this code path should never get executed");
throw v0;
}
static void <clinit>()
{
java.util.regex.Pattern v0;
v0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[-_./;:]");
<com.fasterxml.jackson.core.util.VersionUtil: java.util.regex.Pattern V_SEP> = v0;
return;
}
}