public abstract class com.fasterxml.jackson.databind.cfg.MapperConfig extends java.lang.Object implements com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver, java.io.Serializable
{
private static final long serialVersionUID;
protected static final com.fasterxml.jackson.'annotation'.JsonInclude$Value EMPTY_INCLUDE;
protected static final com.fasterxml.jackson.'annotation'.JsonFormat$Value EMPTY_FORMAT;
protected final long _mapperFeatures;
protected final com.fasterxml.jackson.databind.cfg.BaseSettings _base;
protected void <init>(com.fasterxml.jackson.databind.cfg.BaseSettings, long)
{
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
long v2;
com.fasterxml.jackson.databind.cfg.BaseSettings v1;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: com.fasterxml.jackson.databind.cfg.BaseSettings;
v2 := @parameter1: long;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base> = v1;
v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: long _mapperFeatures> = v2;
return;
}
protected void <init>(com.fasterxml.jackson.databind.cfg.MapperConfig, long)
{
com.fasterxml.jackson.databind.cfg.BaseSettings v3;
com.fasterxml.jackson.databind.cfg.MapperConfig v0, v1;
long v2;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: com.fasterxml.jackson.databind.cfg.MapperConfig;
v2 := @parameter1: long;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = v1.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base>;
v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base> = v3;
v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: long _mapperFeatures> = v2;
return;
}
protected void <init>(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.cfg.BaseSettings)
{
com.fasterxml.jackson.databind.cfg.BaseSettings v2;
com.fasterxml.jackson.databind.cfg.MapperConfig v0, v1;
long v3;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: com.fasterxml.jackson.databind.cfg.MapperConfig;
v2 := @parameter1: com.fasterxml.jackson.databind.cfg.BaseSettings;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base> = v2;
v3 = v1.<com.fasterxml.jackson.databind.cfg.MapperConfig: long _mapperFeatures>;
v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: long _mapperFeatures> = v3;
return;
}
protected void <init>(com.fasterxml.jackson.databind.cfg.MapperConfig)
{
com.fasterxml.jackson.databind.cfg.BaseSettings v2;
com.fasterxml.jackson.databind.cfg.MapperConfig v0, v1;
long v3;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: com.fasterxml.jackson.databind.cfg.MapperConfig;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = v1.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base>;
v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base> = v2;
v3 = v1.<com.fasterxml.jackson.databind.cfg.MapperConfig: long _mapperFeatures>;
v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: long _mapperFeatures> = v3;
return;
}
public static int collectFeatureDefaults(java.lang.Class)
{
java.lang.Object[] v2;
java.lang.Enum v5;
int v1, v3, v4, v7;
java.lang.Class v0;
boolean v6;
v0 := @parameter0: java.lang.Class;
v1 = 0;
v2 = virtualinvoke v0.<java.lang.Class: java.lang.Object[] getEnumConstants()>();
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label3;
v5 = v2[v4];
v6 = interfaceinvoke v5.<com.fasterxml.jackson.databind.cfg.ConfigFeature: boolean enabledByDefault()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<com.fasterxml.jackson.databind.cfg.ConfigFeature: int getMask()>();
v1 = v1 | v7;
label2:
v4 = v4 + 1;
goto label1;
label3:
return v1;
}
public abstract transient com.fasterxml.jackson.databind.cfg.MapperConfig 'with'(com.fasterxml.jackson.databind.MapperFeature[]);
public abstract transient com.fasterxml.jackson.databind.cfg.MapperConfig without(com.fasterxml.jackson.databind.MapperFeature[]);
public abstract com.fasterxml.jackson.databind.cfg.MapperConfig 'with'(com.fasterxml.jackson.databind.MapperFeature, boolean);
public final boolean isEnabled(com.fasterxml.jackson.databind.MapperFeature)
{
com.fasterxml.jackson.databind.MapperFeature v1;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
long v2;
boolean v3;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: com.fasterxml.jackson.databind.MapperFeature;
v2 = v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: long _mapperFeatures>;
v3 = virtualinvoke v1.<com.fasterxml.jackson.databind.MapperFeature: boolean enabledIn(long)>(v2);
return v3;
}
public final boolean hasMapperFeatures(int)
{
byte v4;
int v1;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
long v2, v3;
boolean v5;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: long _mapperFeatures>;
v3 = v2 & v1;
v4 = v3 cmp v1;
if v4 != 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public abstract boolean isEnabled(com.fasterxml.jackson.databind.cfg.DatatypeFeature);
public abstract com.fasterxml.jackson.databind.cfg.DatatypeFeatures getDatatypeFeatures();
public final boolean isAnnotationProcessingEnabled()
{
com.fasterxml.jackson.databind.MapperFeature v1;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
boolean v2;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 = <com.fasterxml.jackson.databind.MapperFeature: com.fasterxml.jackson.databind.MapperFeature USE_ANNOTATIONS>;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean isEnabled(com.fasterxml.jackson.databind.MapperFeature)>(v1);
return v2;
}
public final boolean canOverrideAccessModifiers()
{
com.fasterxml.jackson.databind.MapperFeature v1;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
boolean v2;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 = <com.fasterxml.jackson.databind.MapperFeature: com.fasterxml.jackson.databind.MapperFeature CAN_OVERRIDE_ACCESS_MODIFIERS>;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean isEnabled(com.fasterxml.jackson.databind.MapperFeature)>(v1);
return v2;
}
public final boolean shouldSortPropertiesAlphabetically()
{
com.fasterxml.jackson.databind.MapperFeature v1;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
boolean v2;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 = <com.fasterxml.jackson.databind.MapperFeature: com.fasterxml.jackson.databind.MapperFeature SORT_PROPERTIES_ALPHABETICALLY>;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean isEnabled(com.fasterxml.jackson.databind.MapperFeature)>(v1);
return v2;
}
public abstract boolean useRootWrapping();
public com.fasterxml.jackson.core.SerializableString compileString(java.lang.String)
{
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
com.fasterxml.jackson.core.io.SerializedString v2;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: java.lang.String;
v2 = new com.fasterxml.jackson.core.io.SerializedString;
specialinvoke v2.<com.fasterxml.jackson.core.io.SerializedString: void <init>(java.lang.String)>(v1);
return v2;
}
public com.fasterxml.jackson.databind.introspect.ClassIntrospector getClassIntrospector()
{
com.fasterxml.jackson.databind.introspect.ClassIntrospector v2;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
com.fasterxml.jackson.databind.cfg.BaseSettings v1;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 = v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.introspect.ClassIntrospector getClassIntrospector()>();
return v2;
}
public com.fasterxml.jackson.databind.AnnotationIntrospector getAnnotationIntrospector()
{
com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector v5;
com.fasterxml.jackson.databind.MapperFeature v1;
com.fasterxml.jackson.databind.AnnotationIntrospector v4;
com.fasterxml.jackson.databind.cfg.BaseSettings v3;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
boolean v2;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 = <com.fasterxml.jackson.databind.MapperFeature: com.fasterxml.jackson.databind.MapperFeature USE_ANNOTATIONS>;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean isEnabled(com.fasterxml.jackson.databind.MapperFeature)>(v1);
if v2 == 0 goto label1;
v3 = v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.AnnotationIntrospector getAnnotationIntrospector()>();
return v4;
label1:
v5 = <com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector: com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector instance>;
return v5;
}
public final com.fasterxml.jackson.databind.PropertyNamingStrategy getPropertyNamingStrategy()
{
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
com.fasterxml.jackson.databind.PropertyNamingStrategy v2;
com.fasterxml.jackson.databind.cfg.BaseSettings v1;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 = v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.PropertyNamingStrategy getPropertyNamingStrategy()>();
return v2;
}
public final com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy$Provider getAccessorNaming()
{
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy$Provider v2;
com.fasterxml.jackson.databind.cfg.BaseSettings v1;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 = v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy$Provider getAccessorNaming()>();
return v2;
}
public final com.fasterxml.jackson.databind.cfg.HandlerInstantiator getHandlerInstantiator()
{
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
com.fasterxml.jackson.databind.cfg.HandlerInstantiator v2;
com.fasterxml.jackson.databind.cfg.BaseSettings v1;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 = v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.cfg.HandlerInstantiator getHandlerInstantiator()>();
return v2;
}
public final com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder getDefaultTyper(com.fasterxml.jackson.databind.JavaType)
{
com.fasterxml.jackson.databind.cfg.BaseSettings v2;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
com.fasterxml.jackson.databind.JavaType v1;
com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder v3;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: com.fasterxml.jackson.databind.JavaType;
v2 = v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder getTypeResolverBuilder()>();
return v3;
}
public abstract com.fasterxml.jackson.databind.jsontype.SubtypeResolver getSubtypeResolver();
public com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator getPolymorphicTypeValidator()
{
com.fasterxml.jackson.databind.MapperFeature v4;
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator v2;
com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator v6;
com.fasterxml.jackson.databind.cfg.BaseSettings v1;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator v3;
boolean v5;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 = v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator getPolymorphicTypeValidator()>();
v3 = <com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator: com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator instance>;
if v2 != v3 goto label1;
v4 = <com.fasterxml.jackson.databind.MapperFeature: com.fasterxml.jackson.databind.MapperFeature BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES>;
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean isEnabled(com.fasterxml.jackson.databind.MapperFeature)>(v4);
if v5 == 0 goto label1;
v6 = new com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator;
specialinvoke v6.<com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator: void <init>()>();
v2 = v6;
label1:
return v2;
}
public final com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()
{
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
com.fasterxml.jackson.databind.type.TypeFactory v2;
com.fasterxml.jackson.databind.cfg.BaseSettings v1;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 = v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>();
return v2;
}
public final com.fasterxml.jackson.databind.JavaType constructType(java.lang.Class)
{
com.fasterxml.jackson.databind.type.TypeFactory v2;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
java.lang.Class v1;
com.fasterxml.jackson.databind.JavaType v3;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>();
v3 = virtualinvoke v2.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type)>(v1);
return v3;
}
public final com.fasterxml.jackson.databind.JavaType constructType(com.fasterxml.jackson.core.type.TypeReference)
{
com.fasterxml.jackson.databind.type.TypeFactory v2;
java.lang.reflect.Type v3;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
com.fasterxml.jackson.databind.JavaType v4;
com.fasterxml.jackson.core.type.TypeReference v1;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: com.fasterxml.jackson.core.type.TypeReference;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>();
v3 = virtualinvoke v1.<com.fasterxml.jackson.core.type.TypeReference: java.lang.reflect.Type getType()>();
v4 = virtualinvoke v2.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type)>(v3);
return v4;
}
public com.fasterxml.jackson.databind.JavaType constructSpecializedType(com.fasterxml.jackson.databind.JavaType, java.lang.Class)
{
com.fasterxml.jackson.databind.type.TypeFactory v3;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
java.lang.Class v2;
com.fasterxml.jackson.databind.JavaType v1, v4;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: com.fasterxml.jackson.databind.JavaType;
v2 := @parameter1: java.lang.Class;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>();
v4 = virtualinvoke v3.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class,boolean)>(v1, v2, 1);
return v4;
}
public com.fasterxml.jackson.databind.BeanDescription introspectClassAnnotations(java.lang.Class)
{
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
com.fasterxml.jackson.databind.BeanDescription v3;
java.lang.Class v1;
com.fasterxml.jackson.databind.JavaType v2;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.JavaType constructType(java.lang.Class)>(v1);
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.BeanDescription introspectClassAnnotations(com.fasterxml.jackson.databind.JavaType)>(v2);
return v3;
}
public com.fasterxml.jackson.databind.BeanDescription introspectClassAnnotations(com.fasterxml.jackson.databind.JavaType)
{
com.fasterxml.jackson.databind.introspect.ClassIntrospector v2;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
com.fasterxml.jackson.databind.BeanDescription v3;
com.fasterxml.jackson.databind.JavaType v1;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: com.fasterxml.jackson.databind.JavaType;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.introspect.ClassIntrospector getClassIntrospector()>();
v3 = virtualinvoke v2.<com.fasterxml.jackson.databind.introspect.ClassIntrospector: com.fasterxml.jackson.databind.BeanDescription forClassAnnotations(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)>(v0, v1, v0);
return v3;
}
public com.fasterxml.jackson.databind.BeanDescription introspectDirectClassAnnotations(java.lang.Class)
{
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
com.fasterxml.jackson.databind.BeanDescription v3;
java.lang.Class v1;
com.fasterxml.jackson.databind.JavaType v2;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.JavaType constructType(java.lang.Class)>(v1);
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.BeanDescription introspectDirectClassAnnotations(com.fasterxml.jackson.databind.JavaType)>(v2);
return v3;
}
public final com.fasterxml.jackson.databind.BeanDescription introspectDirectClassAnnotations(com.fasterxml.jackson.databind.JavaType)
{
com.fasterxml.jackson.databind.introspect.ClassIntrospector v2;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
com.fasterxml.jackson.databind.BeanDescription v3;
com.fasterxml.jackson.databind.JavaType v1;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: com.fasterxml.jackson.databind.JavaType;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.introspect.ClassIntrospector getClassIntrospector()>();
v3 = virtualinvoke v2.<com.fasterxml.jackson.databind.introspect.ClassIntrospector: com.fasterxml.jackson.databind.BeanDescription forDirectClassAnnotations(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver)>(v0, v1, v0);
return v3;
}
public abstract com.fasterxml.jackson.databind.cfg.ConfigOverride findConfigOverride(java.lang.Class);
public abstract com.fasterxml.jackson.databind.cfg.ConfigOverride getConfigOverride(java.lang.Class);
public abstract com.fasterxml.jackson.'annotation'.JsonInclude$Value getDefaultPropertyInclusion();
public abstract com.fasterxml.jackson.'annotation'.JsonInclude$Value getDefaultPropertyInclusion(java.lang.Class);
public com.fasterxml.jackson.'annotation'.JsonInclude$Value getDefaultPropertyInclusion(java.lang.Class, com.fasterxml.jackson.'annotation'.JsonInclude$Value)
{
com.fasterxml.jackson.'annotation'.JsonInclude$Value v2, v4;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
java.lang.Class v1;
com.fasterxml.jackson.databind.cfg.ConfigOverride v3;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: com.fasterxml.jackson.'annotation'.JsonInclude$Value;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.ConfigOverride getConfigOverride(java.lang.Class)>(v1);
v4 = virtualinvoke v3.<com.fasterxml.jackson.databind.cfg.ConfigOverride: com.fasterxml.jackson.'annotation'.JsonInclude$Value getInclude()>();
if v4 == null goto label1;
return v4;
label1:
return v2;
}
public abstract com.fasterxml.jackson.'annotation'.JsonInclude$Value getDefaultInclusion(java.lang.Class, java.lang.Class);
public com.fasterxml.jackson.'annotation'.JsonInclude$Value getDefaultInclusion(java.lang.Class, java.lang.Class, com.fasterxml.jackson.'annotation'.JsonInclude$Value)
{
com.fasterxml.jackson.'annotation'.JsonInclude$Value[] v8;
com.fasterxml.jackson.databind.cfg.ConfigOverride v4, v6;
com.fasterxml.jackson.'annotation'.JsonInclude$Value v3, v5, v7, v9;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
java.lang.Class v1, v2;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.Class;
v3 := @parameter2: com.fasterxml.jackson.'annotation'.JsonInclude$Value;
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.ConfigOverride getConfigOverride(java.lang.Class)>(v1);
v5 = virtualinvoke v4.<com.fasterxml.jackson.databind.cfg.ConfigOverride: com.fasterxml.jackson.'annotation'.JsonInclude$Value getInclude()>();
v6 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.ConfigOverride getConfigOverride(java.lang.Class)>(v2);
v7 = virtualinvoke v6.<com.fasterxml.jackson.databind.cfg.ConfigOverride: com.fasterxml.jackson.'annotation'.JsonInclude$Value getIncludeAsProperty()>();
v8 = newarray (com.fasterxml.jackson.'annotation'.JsonInclude$Value)[3];
v8[0] = v3;
v8[1] = v5;
v8[2] = v7;
v9 = staticinvoke <com.fasterxml.jackson.'annotation'.JsonInclude$Value: com.fasterxml.jackson.'annotation'.JsonInclude$Value mergeAll(com.fasterxml.jackson.'annotation'.JsonInclude$Value[])>(v8);
return v9;
}
public abstract com.fasterxml.jackson.'annotation'.JsonFormat$Value getDefaultPropertyFormat(java.lang.Class);
public abstract com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value getDefaultPropertyIgnorals(java.lang.Class);
public abstract com.fasterxml.jackson.'annotation'.JsonIgnoreProperties$Value getDefaultPropertyIgnorals(java.lang.Class, com.fasterxml.jackson.databind.introspect.AnnotatedClass);
public abstract com.fasterxml.jackson.'annotation'.JsonIncludeProperties$Value getDefaultPropertyInclusions(java.lang.Class, com.fasterxml.jackson.databind.introspect.AnnotatedClass);
public abstract com.fasterxml.jackson.databind.introspect.VisibilityChecker getDefaultVisibilityChecker();
public abstract com.fasterxml.jackson.databind.introspect.VisibilityChecker getDefaultVisibilityChecker(java.lang.Class, com.fasterxml.jackson.databind.introspect.AnnotatedClass);
public abstract com.fasterxml.jackson.'annotation'.JsonSetter$Value getDefaultSetterInfo();
public abstract java.lang.Boolean getDefaultMergeable();
public abstract java.lang.Boolean getDefaultMergeable(java.lang.Class);
public final java.text.DateFormat getDateFormat()
{
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
java.text.DateFormat v2;
com.fasterxml.jackson.databind.cfg.BaseSettings v1;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 = v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.cfg.BaseSettings: java.text.DateFormat getDateFormat()>();
return v2;
}
public final java.util.Locale getLocale()
{
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
java.util.Locale v2;
com.fasterxml.jackson.databind.cfg.BaseSettings v1;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 = v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.cfg.BaseSettings: java.util.Locale getLocale()>();
return v2;
}
public final java.util.TimeZone getTimeZone()
{
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
java.util.TimeZone v2;
com.fasterxml.jackson.databind.cfg.BaseSettings v1;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 = v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.cfg.BaseSettings: java.util.TimeZone getTimeZone()>();
return v2;
}
public boolean hasExplicitTimeZone()
{
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
boolean v2;
com.fasterxml.jackson.databind.cfg.BaseSettings v1;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 = v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.cfg.BaseSettings: boolean hasExplicitTimeZone()>();
return v2;
}
public abstract java.lang.Class getActiveView();
public com.fasterxml.jackson.core.Base64Variant getBase64Variant()
{
com.fasterxml.jackson.core.Base64Variant v2;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
com.fasterxml.jackson.databind.cfg.BaseSettings v1;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 = v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.BaseSettings _base>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.cfg.BaseSettings: com.fasterxml.jackson.core.Base64Variant getBase64Variant()>();
return v2;
}
public abstract com.fasterxml.jackson.databind.cfg.ContextAttributes getAttributes();
public abstract com.fasterxml.jackson.databind.PropertyName findRootName(com.fasterxml.jackson.databind.JavaType);
public abstract com.fasterxml.jackson.databind.PropertyName findRootName(java.lang.Class);
public com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder typeResolverBuilderInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class)
{
com.fasterxml.jackson.databind.introspect.Annotated v1;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
java.lang.Class v2;
java.lang.Object v6;
com.fasterxml.jackson.databind.cfg.HandlerInstantiator v3;
com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder v4;
boolean v5;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: com.fasterxml.jackson.databind.introspect.Annotated;
v2 := @parameter1: java.lang.Class;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.HandlerInstantiator getHandlerInstantiator()>();
if v3 == null goto label1;
v4 = virtualinvoke v3.<com.fasterxml.jackson.databind.cfg.HandlerInstantiator: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder typeResolverBuilderInstance(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class)>(v0, v1, v2);
if v4 == null goto label1;
return v4;
label1:
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean canOverrideAccessModifiers()>();
v6 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Object createInstance(java.lang.Class,boolean)>(v2, v5);
return v6;
}
public com.fasterxml.jackson.databind.jsontype.TypeIdResolver typeIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class)
{
com.fasterxml.jackson.databind.introspect.Annotated v1;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
java.lang.Class v2;
java.lang.Object v6;
com.fasterxml.jackson.databind.cfg.HandlerInstantiator v3;
boolean v5;
com.fasterxml.jackson.databind.jsontype.TypeIdResolver v4;
v0 := @this: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter0: com.fasterxml.jackson.databind.introspect.Annotated;
v2 := @parameter1: java.lang.Class;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.HandlerInstantiator getHandlerInstantiator()>();
if v3 == null goto label1;
v4 = virtualinvoke v3.<com.fasterxml.jackson.databind.cfg.HandlerInstantiator: com.fasterxml.jackson.databind.jsontype.TypeIdResolver typeIdResolverInstance(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class)>(v0, v1, v2);
if v4 == null goto label1;
return v4;
label1:
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean canOverrideAccessModifiers()>();
v6 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Object createInstance(java.lang.Class,boolean)>(v2, v5);
return v6;
}
static void <clinit>()
{
com.fasterxml.jackson.'annotation'.JsonInclude$Value v0;
com.fasterxml.jackson.'annotation'.JsonFormat$Value v1;
v0 = staticinvoke <com.fasterxml.jackson.'annotation'.JsonInclude$Value: com.fasterxml.jackson.'annotation'.JsonInclude$Value empty()>();
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.'annotation'.JsonInclude$Value EMPTY_INCLUDE> = v0;
v1 = staticinvoke <com.fasterxml.jackson.'annotation'.JsonFormat$Value: com.fasterxml.jackson.'annotation'.JsonFormat$Value empty()>();
<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.'annotation'.JsonFormat$Value EMPTY_FORMAT> = v1;
return;
}
}