public class com.fasterxml.jackson.databind.node.BigIntegerNode extends com.fasterxml.jackson.databind.node.NumericNode
{
private static final java.math.BigInteger MIN_INTEGER;
private static final java.math.BigInteger MAX_INTEGER;
private static final java.math.BigInteger MIN_LONG;
private static final java.math.BigInteger MAX_LONG;
protected final java.math.BigInteger _value;
public void <init>(java.math.BigInteger)
{
java.math.BigInteger v1;
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
v1 := @parameter0: java.math.BigInteger;
specialinvoke v0.<com.fasterxml.jackson.databind.node.NumericNode: void <init>()>();
v0.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value> = v1;
return;
}
public static com.fasterxml.jackson.databind.node.BigIntegerNode valueOf(java.math.BigInteger)
{
java.math.BigInteger v0;
com.fasterxml.jackson.databind.node.BigIntegerNode v1;
v0 := @parameter0: java.math.BigInteger;
v1 = new com.fasterxml.jackson.databind.node.BigIntegerNode;
specialinvoke v1.<com.fasterxml.jackson.databind.node.BigIntegerNode: void <init>(java.math.BigInteger)>(v0);
return v1;
}
public com.fasterxml.jackson.core.JsonToken asToken()
{
com.fasterxml.jackson.core.JsonToken v1;
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
v1 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
return v1;
}
public com.fasterxml.jackson.core.JsonParser$NumberType numberType()
{
com.fasterxml.jackson.core.JsonParser$NumberType v1;
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
v1 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType BIG_INTEGER>;
return v1;
}
public boolean isIntegralNumber()
{
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
return 1;
}
public boolean isBigInteger()
{
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
return 1;
}
public boolean canConvertToInt()
{
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
int v3, v6;
java.math.BigInteger v1, v2, v4, v5;
boolean v7;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
v1 = v0.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value>;
v2 = <com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger MIN_INTEGER>;
v3 = virtualinvoke v1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(v2);
if v3 < 0 goto label1;
v4 = v0.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value>;
v5 = <com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger MAX_INTEGER>;
v6 = virtualinvoke v4.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(v5);
if v6 > 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
return v7;
}
public boolean canConvertToLong()
{
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
int v3, v6;
java.math.BigInteger v1, v2, v4, v5;
boolean v7;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
v1 = v0.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value>;
v2 = <com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger MIN_LONG>;
v3 = virtualinvoke v1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(v2);
if v3 < 0 goto label1;
v4 = v0.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value>;
v5 = <com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger MAX_LONG>;
v6 = virtualinvoke v4.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(v5);
if v6 > 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
return v7;
}
public java.lang.Number numberValue()
{
java.math.BigInteger v1;
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
v1 = v0.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value>;
return v1;
}
public short shortValue()
{
java.math.BigInteger v1;
short v2;
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
v1 = v0.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value>;
v2 = virtualinvoke v1.<java.math.BigInteger: short shortValue()>();
return v2;
}
public int intValue()
{
int v2;
java.math.BigInteger v1;
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
v1 = v0.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value>;
v2 = virtualinvoke v1.<java.math.BigInteger: int intValue()>();
return v2;
}
public long longValue()
{
java.math.BigInteger v1;
long v2;
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
v1 = v0.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value>;
v2 = virtualinvoke v1.<java.math.BigInteger: long longValue()>();
return v2;
}
public java.math.BigInteger bigIntegerValue()
{
java.math.BigInteger v1;
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
v1 = v0.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value>;
return v1;
}
public float floatValue()
{
float v2;
java.math.BigInteger v1;
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
v1 = v0.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value>;
v2 = virtualinvoke v1.<java.math.BigInteger: float floatValue()>();
return v2;
}
public double doubleValue()
{
java.math.BigInteger v1;
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
double v2;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
v1 = v0.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value>;
v2 = virtualinvoke v1.<java.math.BigInteger: double doubleValue()>();
return v2;
}
public java.math.BigDecimal decimalValue()
{
java.math.BigDecimal v1;
java.math.BigInteger v2;
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
v1 = new java.math.BigDecimal;
v2 = v0.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value>;
specialinvoke v1.<java.math.BigDecimal: void <init>(java.math.BigInteger)>(v2);
return v1;
}
public java.lang.String asText()
{
java.math.BigInteger v1;
java.lang.String v2;
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
v1 = v0.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value>;
v2 = virtualinvoke v1.<java.math.BigInteger: java.lang.String toString()>();
return v2;
}
public boolean asBoolean(boolean)
{
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
java.math.BigInteger v2, v3;
boolean v1, v4, v5;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
v1 := @parameter0: boolean;
v2 = <java.math.BigInteger: java.math.BigInteger ZERO>;
v3 = v0.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value>;
v4 = virtualinvoke v2.<java.math.BigInteger: boolean equals(java.lang.Object)>(v3);
if v4 != 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public final void serialize(com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerator v1;
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
java.math.BigInteger v3;
com.fasterxml.jackson.databind.SerializerProvider v2;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
v1 := @parameter0: com.fasterxml.jackson.core.JsonGenerator;
v2 := @parameter1: com.fasterxml.jackson.databind.SerializerProvider;
v3 = v0.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value>;
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigInteger)>(v3);
return;
}
public boolean equals(java.lang.Object)
{
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
java.lang.Object v1;
java.math.BigInteger v3, v4;
boolean v2, v5;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
v1 := @parameter0: java.lang.Object;
if v1 != v0 goto label1;
return 1;
label1:
if v1 != null goto label2;
return 0;
label2:
v2 = v1 instanceof com.fasterxml.jackson.databind.node.BigIntegerNode;
if v2 != 0 goto label3;
return 0;
label3:
v3 = v1.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value>;
v4 = v0.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value>;
v5 = virtualinvoke v3.<java.math.BigInteger: boolean equals(java.lang.Object)>(v4);
return v5;
}
public int hashCode()
{
int v2;
java.math.BigInteger v1;
com.fasterxml.jackson.databind.node.BigIntegerNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BigIntegerNode;
v1 = v0.<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger _value>;
v2 = virtualinvoke v1.<java.math.BigInteger: int hashCode()>();
return v2;
}
static void <clinit>()
{
java.math.BigInteger v0, v1, v2, v3;
v0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-2147483648L);
<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger MIN_INTEGER> = v0;
v1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2147483647L);
<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger MAX_INTEGER> = v1;
v2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-9223372036854775808L);
<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger MIN_LONG> = v2;
v3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(9223372036854775807L);
<com.fasterxml.jackson.databind.node.BigIntegerNode: java.math.BigInteger MAX_LONG> = v3;
return;
}
}