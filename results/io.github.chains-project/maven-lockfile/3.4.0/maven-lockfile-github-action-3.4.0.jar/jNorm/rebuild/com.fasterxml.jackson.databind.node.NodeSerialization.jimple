class com.fasterxml.jackson.databind.node.NodeSerialization extends java.lang.Object implements java.io.Serializable, java.io.Externalizable
{
protected static final int LONGEST_EAGER_ALLOC;
private static final long serialVersionUID;
public byte[] json;
public void <init>()
{
com.fasterxml.jackson.databind.node.NodeSerialization v0;
v0 := @this: com.fasterxml.jackson.databind.node.NodeSerialization;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void <init>(byte[])
{
byte[] v1;
com.fasterxml.jackson.databind.node.NodeSerialization v0;
v0 := @this: com.fasterxml.jackson.databind.node.NodeSerialization;
v1 := @parameter0: byte[];
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.fasterxml.jackson.databind.node.NodeSerialization: byte[] json> = v1;
return;
}
protected java.lang.Object readResolve()
{
byte[] v1;
com.fasterxml.jackson.databind.JsonNode v2;
java.io.IOException v3;
com.fasterxml.jackson.databind.node.NodeSerialization v0;
java.lang.String v5, v6;
java.lang.IllegalArgumentException v4;
v0 := @this: com.fasterxml.jackson.databind.node.NodeSerialization;
label1:
v1 = v0.<com.fasterxml.jackson.databind.node.NodeSerialization: byte[] json>;
v2 = staticinvoke <com.fasterxml.jackson.databind.node.InternalNodeMapper: com.fasterxml.jackson.databind.JsonNode bytesToNode(byte[])>(v1);
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new java.lang.IllegalArgumentException;
v5 = virtualinvoke v3.<java.io.IOException: java.lang.String getMessage()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to JDK deserialize `JsonNode` value: \u0001");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(v6, v3);
throw v4;
catch java.io.IOException from label1 to label2 with label3;
}
public static com.fasterxml.jackson.databind.node.NodeSerialization 'from'(java.lang.Object)
{
byte[] v2;
java.io.IOException v3;
com.fasterxml.jackson.databind.node.NodeSerialization v1;
java.lang.IllegalArgumentException v4;
java.lang.Class v5;
java.lang.Object v0;
java.lang.String v6, v7, v8;
v0 := @parameter0: java.lang.Object;
label1:
v1 = new com.fasterxml.jackson.databind.node.NodeSerialization;
v2 = staticinvoke <com.fasterxml.jackson.databind.node.InternalNodeMapper: byte[] valueToBytes(java.lang.Object)>(v0);
specialinvoke v1.<com.fasterxml.jackson.databind.node.NodeSerialization: void <init>(byte[])>(v2);
label2:
return v1;
label3:
v3 := @caughtexception;
v4 = new java.lang.IllegalArgumentException;
v5 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getSimpleName()>();
v7 = virtualinvoke v3.<java.io.IOException: java.lang.String getMessage()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v6, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to JDK serialize `\u0001` value: \u0001");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(v8, v3);
throw v4;
catch java.io.IOException from label1 to label2 with label3;
}
public void writeExternal(java.io.ObjectOutput) throws java.io.IOException
{
byte[] v2, v4;
java.io.ObjectOutput v1;
int v3;
com.fasterxml.jackson.databind.node.NodeSerialization v0;
v0 := @this: com.fasterxml.jackson.databind.node.NodeSerialization;
v1 := @parameter0: java.io.ObjectOutput;
v2 = v0.<com.fasterxml.jackson.databind.node.NodeSerialization: byte[] json>;
v3 = lengthof v2;
interfaceinvoke v1.<java.io.ObjectOutput: void writeInt(int)>(v3);
v4 = v0.<com.fasterxml.jackson.databind.node.NodeSerialization: byte[] json>;
interfaceinvoke v1.<java.io.ObjectOutput: void write(byte[])>(v4);
return;
}
public void readExternal(java.io.ObjectInput) throws java.io.IOException
{
byte[] v3;
int v2;
java.io.ObjectInput v1;
com.fasterxml.jackson.databind.node.NodeSerialization v0;
v0 := @this: com.fasterxml.jackson.databind.node.NodeSerialization;
v1 := @parameter0: java.io.ObjectInput;
v2 = interfaceinvoke v1.<java.io.ObjectInput: int readInt()>();
v3 = specialinvoke v0.<com.fasterxml.jackson.databind.node.NodeSerialization: byte[] _read(java.io.ObjectInput,int)>(v1, v2);
v0.<com.fasterxml.jackson.databind.node.NodeSerialization: byte[] json> = v3;
return;
}
private byte[] _read(java.io.ObjectInput, int) throws java.io.IOException
{
java.lang.Throwable v12;
byte[] v10, v3, v5;
com.fasterxml.jackson.databind.node.NodeSerialization v0;
com.fasterxml.jackson.core.util.ByteArrayBuilder v4;
int v11, v2, v6, v7, v8, v9;
java.io.ObjectInput v1;
v0 := @this: com.fasterxml.jackson.databind.node.NodeSerialization;
v1 := @parameter0: java.io.ObjectInput;
v2 := @parameter1: int;
if v2 > 100000 goto label1;
v3 = newarray (byte)[v2];
interfaceinvoke v1.<java.io.ObjectInput: void readFully(byte[],int,int)>(v3, 0, v2);
return v3;
label1:
v4 = new com.fasterxml.jackson.core.util.ByteArrayBuilder;
specialinvoke v4.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void <init>(int)>(100000);
label2:
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] resetAndGetFirstSegment()>();
v6 = 0;
label3:
v7 = lengthof v5;
v8 = v7 - v6;
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v8, v2);
interfaceinvoke v1.<java.io.ObjectInput: void readFully(byte[],int,int)>(v5, 0, v9);
v2 = v2 - v9;
v6 = v6 + v9;
if v2 != 0 goto label5;
v10 = virtualinvoke v4.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] completeAndCoalesce(int)>(v6);
label4:
virtualinvoke v4.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void close()>();
return v10;
label5:
v11 = lengthof v5;
if v6 != v11 goto label3;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] finishCurrentSegment()>();
v6 = 0;
goto label3;
label6:
v12 := @caughtexception;
throw v12;
catch java.lang.Throwable from label2 to label4 with label6;
}
}