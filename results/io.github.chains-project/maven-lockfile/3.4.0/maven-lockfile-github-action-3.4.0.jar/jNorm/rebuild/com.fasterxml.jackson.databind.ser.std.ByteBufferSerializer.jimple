public class com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer
{
public void <init>()
{
com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer;
specialinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdScalarSerializer: void <init>(java.lang.Class)>(class "Ljava/nio/ByteBuffer;");
return;
}
public void serialize(java.nio.ByteBuffer, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
{
byte[] v6;
com.fasterxml.jackson.core.JsonGenerator v2;
com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream v13;
java.nio.ByteBuffer v1, v11;
com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer v0;
int v10, v12, v14, v5, v7, v8, v9;
com.fasterxml.jackson.databind.SerializerProvider v3;
boolean v4;
v0 := @this: com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer;
v1 := @parameter0: java.nio.ByteBuffer;
v2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;
v3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;
v4 = virtualinvoke v1.<java.nio.ByteBuffer: boolean hasArray()>();
if v4 == 0 goto label1;
v5 = virtualinvoke v1.<java.nio.ByteBuffer: int position()>();
v6 = virtualinvoke v1.<java.nio.ByteBuffer: byte[] array()>();
v7 = virtualinvoke v1.<java.nio.ByteBuffer: int arrayOffset()>();
v8 = v7 + v5;
v9 = virtualinvoke v1.<java.nio.ByteBuffer: int limit()>();
v10 = v9 - v5;
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeBinary(byte[],int,int)>(v6, v8, v10);
return;
label1:
v11 = virtualinvoke v1.<java.nio.ByteBuffer: java.nio.ByteBuffer asReadOnlyBuffer()>();
v12 = virtualinvoke v11.<java.nio.ByteBuffer: int position()>();
if v12 <= 0 goto label2;
virtualinvoke v11.<java.nio.ByteBuffer: java.nio.ByteBuffer rewind()>();
label2:
v13 = new com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;
specialinvoke v13.<com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream: void <init>(java.nio.ByteBuffer)>(v11);
v14 = virtualinvoke v11.<java.nio.ByteBuffer: int remaining()>();
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: int writeBinary(java.io.InputStream,int)>(v13, v14);
virtualinvoke v13.<java.io.InputStream: void close()>();
return;
}
public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor v3;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes v4;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 = interfaceinvoke v1.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor expectArrayFormat(com.fasterxml.jackson.databind.JavaType)>(v2);
if v3 == null goto label1;
v4 = <com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes INTEGER>;
interfaceinvoke v3.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor: void itemsFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)>(v4);
label1:
return;
}
}