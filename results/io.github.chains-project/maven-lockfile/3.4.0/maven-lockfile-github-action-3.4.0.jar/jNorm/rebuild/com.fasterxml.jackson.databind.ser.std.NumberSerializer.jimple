public class com.fasterxml.jackson.databind.ser.std.NumberSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer implements com.fasterxml.jackson.databind.ser.ContextualSerializer
{
public static final com.fasterxml.jackson.databind.ser.std.NumberSerializer instance;
protected static final int MAX_BIG_DECIMAL_SCALE;
protected final boolean _isInt;
public void <init>(java.lang.Class)
{
java.lang.Class v1;
com.fasterxml.jackson.databind.ser.std.NumberSerializer v0;
boolean v2;
v0 := @this: com.fasterxml.jackson.databind.ser.std.NumberSerializer;
v1 := @parameter0: java.lang.Class;
specialinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdScalarSerializer: void <init>(java.lang.Class,boolean)>(v1, 0);
if v1 != class "Ljava/math/BigInteger;" goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializer: boolean _isInt> = v2;
return;
}
public com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.ser.std.ToStringSerializer v11;
com.fasterxml.jackson.databind.BeanProperty v2;
com.fasterxml.jackson.'annotation'.JsonFormat$Value v4;
int[] v5;
com.fasterxml.jackson.'annotation'.JsonFormat$Shape v6;
int v7, v8;
com.fasterxml.jackson.databind.JsonSerializer v10;
java.lang.Class v3, v9;
com.fasterxml.jackson.databind.SerializerProvider v1;
com.fasterxml.jackson.databind.ser.std.NumberSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.NumberSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializer: java.lang.Class handledType()>();
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializer: com.fasterxml.jackson.'annotation'.JsonFormat$Value findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class)>(v1, v2, v3);
if v4 == null goto label3;
v5 = <com.fasterxml.jackson.databind.ser.std.NumberSerializer$1: int[] $SwitchMap$com$fasterxml$jackson$annotation$JsonFormat$Shape>;
v6 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: com.fasterxml.jackson.'annotation'.JsonFormat$Shape getShape()>();
v7 = virtualinvoke v6.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: int ordinal()>();
v8 = v5[v7];
lookupswitch(v8)
{
case 1: goto label1;
default: goto label3;
};
label1:
v9 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializer: java.lang.Class handledType()>();
if v9 != class "Ljava/math/BigDecimal;" goto label2;
v10 = staticinvoke <com.fasterxml.jackson.databind.ser.std.NumberSerializer: com.fasterxml.jackson.databind.JsonSerializer bigDecimalAsStringSerializer()>();
return v10;
label2:
v11 = <com.fasterxml.jackson.databind.ser.std.ToStringSerializer: com.fasterxml.jackson.databind.ser.std.ToStringSerializer instance>;
return v11;
label3:
return v0;
}
public void serialize(java.lang.Number, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerator v2;
long v7;
int v15;
com.fasterxml.jackson.databind.SerializerProvider v3;
java.lang.String v16;
java.lang.Number v1;
boolean v10, v12, v13, v14, v4, v5, v6, v8;
double v9;
float v11;
com.fasterxml.jackson.databind.ser.std.NumberSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.NumberSerializer;
v1 := @parameter0: java.lang.Number;
v2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;
v3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;
v4 = v1 instanceof java.math.BigDecimal;
if v4 == 0 goto label1;
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigDecimal)>(v1);
goto label8;
label1:
v5 = v1 instanceof java.math.BigInteger;
if v5 == 0 goto label2;
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigInteger)>(v1);
goto label8;
label2:
v6 = v1 instanceof java.lang.Long;
if v6 == 0 goto label3;
v7 = virtualinvoke v1.<java.lang.Number: long longValue()>();
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(long)>(v7);
goto label8;
label3:
v8 = v1 instanceof java.lang.Double;
if v8 == 0 goto label4;
v9 = virtualinvoke v1.<java.lang.Number: double doubleValue()>();
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(double)>(v9);
goto label8;
label4:
v10 = v1 instanceof java.lang.Float;
if v10 == 0 goto label5;
v11 = virtualinvoke v1.<java.lang.Number: float floatValue()>();
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(float)>(v11);
goto label8;
label5:
v12 = v1 instanceof java.lang.Integer;
if v12 != 0 goto label6;
v13 = v1 instanceof java.lang.Byte;
if v13 != 0 goto label6;
v14 = v1 instanceof java.lang.Short;
if v14 == 0 goto label7;
label6:
v15 = virtualinvoke v1.<java.lang.Number: int intValue()>();
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>(v15);
goto label8;
label7:
v16 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.lang.String)>(v16);
label8:
return;
}
public com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)
{
java.lang.reflect.Type v2;
com.fasterxml.jackson.databind.SerializerProvider v1;
java.lang.String v4;
com.fasterxml.jackson.databind.node.ObjectNode v5;
com.fasterxml.jackson.databind.ser.std.NumberSerializer v0;
boolean v3;
v0 := @this: com.fasterxml.jackson.databind.ser.std.NumberSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: java.lang.reflect.Type;
v3 = v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializer: boolean _isInt>;
if v3 == 0 goto label1;
v4 = "integer";
goto label2;
label1:
v4 = "number";
label2:
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializer: com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String,boolean)>(v4, 1);
return v5;
}
public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.core.JsonParser$NumberType v4, v6;
java.lang.Class v5;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.ser.std.NumberSerializer v0;
boolean v3;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
v0 := @this: com.fasterxml.jackson.databind.ser.std.NumberSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 = v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializer: boolean _isInt>;
if v3 == 0 goto label1;
v4 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType BIG_INTEGER>;
virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializer: void visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser$NumberType)>(v1, v2, v4);
goto label3;
label1:
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializer: java.lang.Class handledType()>();
if v5 != class "Ljava/math/BigDecimal;" goto label2;
v6 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType BIG_DECIMAL>;
virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializer: void visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser$NumberType)>(v1, v2, v6);
goto label3;
label2:
interfaceinvoke v1.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor expectNumberFormat(com.fasterxml.jackson.databind.JavaType)>(v2);
label3:
return;
}
public static com.fasterxml.jackson.databind.JsonSerializer bigDecimalAsStringSerializer()
{
com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer v0;
v0 = <com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer BD_INSTANCE>;
return v0;
}
static void <clinit>()
{
com.fasterxml.jackson.databind.ser.std.NumberSerializer v0;
v0 = new com.fasterxml.jackson.databind.ser.std.NumberSerializer;
specialinvoke v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializer: void <init>(java.lang.Class)>(class "Ljava/lang/Number;");
<com.fasterxml.jackson.databind.ser.std.NumberSerializer: com.fasterxml.jackson.databind.ser.std.NumberSerializer instance> = v0;
return;
}
}