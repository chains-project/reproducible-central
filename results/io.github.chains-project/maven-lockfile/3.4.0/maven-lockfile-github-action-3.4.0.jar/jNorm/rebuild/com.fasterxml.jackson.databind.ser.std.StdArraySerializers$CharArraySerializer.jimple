public class com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer
{
public void <init>()
{
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer;
specialinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdSerializer: void <init>(java.lang.Class)>(class "[C");
return;
}
public boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider, char[])
{
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer v0;
int v3;
char[] v2;
com.fasterxml.jackson.databind.SerializerProvider v1;
boolean v4;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: char[];
v3 = lengthof v2;
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public void serialize(char[], com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
{
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer v0;
com.fasterxml.jackson.core.JsonGenerator v2;
int v6, v7;
char[] v1;
com.fasterxml.jackson.databind.SerializationFeature v4;
com.fasterxml.jackson.databind.SerializerProvider v3;
boolean v5;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer;
v1 := @parameter0: char[];
v2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;
v3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;
v4 = <com.fasterxml.jackson.databind.SerializationFeature: com.fasterxml.jackson.databind.SerializationFeature WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS>;
v5 = virtualinvoke v3.<com.fasterxml.jackson.databind.SerializerProvider: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>(v4);
if v5 == 0 goto label1;
v6 = lengthof v1;
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray(java.lang.Object,int)>(v1, v6);
specialinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer: void _writeArrayContents(com.fasterxml.jackson.core.JsonGenerator,char[])>(v2, v1);
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();
goto label2;
label1:
v7 = lengthof v1;
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeString(char[],int,int)>(v1, 0, v7);
label2:
return;
}
public void serializeWithType(char[], com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer) throws java.io.IOException
{
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer v0;
com.fasterxml.jackson.core.JsonGenerator v2;
com.fasterxml.jackson.databind.jsontype.TypeSerializer v4;
com.fasterxml.jackson.core.type.WritableTypeId v11, v8, v9;
int v12;
char[] v1;
com.fasterxml.jackson.databind.SerializationFeature v5;
com.fasterxml.jackson.core.JsonToken v10, v7;
com.fasterxml.jackson.databind.SerializerProvider v3;
boolean v6;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer;
v1 := @parameter0: char[];
v2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;
v3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;
v4 := @parameter3: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
v5 = <com.fasterxml.jackson.databind.SerializationFeature: com.fasterxml.jackson.databind.SerializationFeature WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS>;
v6 = virtualinvoke v3.<com.fasterxml.jackson.databind.SerializerProvider: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>(v5);
if v6 == 0 goto label1;
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
v8 = virtualinvoke v4.<com.fasterxml.jackson.databind.jsontype.TypeSerializer: com.fasterxml.jackson.core.type.WritableTypeId typeId(java.lang.Object,com.fasterxml.jackson.core.JsonToken)>(v1, v7);
v9 = virtualinvoke v4.<com.fasterxml.jackson.databind.jsontype.TypeSerializer: com.fasterxml.jackson.core.type.WritableTypeId writeTypePrefix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)>(v2, v8);
specialinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer: void _writeArrayContents(com.fasterxml.jackson.core.JsonGenerator,char[])>(v2, v1);
goto label2;
label1:
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v11 = virtualinvoke v4.<com.fasterxml.jackson.databind.jsontype.TypeSerializer: com.fasterxml.jackson.core.type.WritableTypeId typeId(java.lang.Object,com.fasterxml.jackson.core.JsonToken)>(v1, v10);
v9 = virtualinvoke v4.<com.fasterxml.jackson.databind.jsontype.TypeSerializer: com.fasterxml.jackson.core.type.WritableTypeId writeTypePrefix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)>(v2, v11);
v12 = lengthof v1;
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeString(char[],int,int)>(v1, 0, v12);
label2:
virtualinvoke v4.<com.fasterxml.jackson.databind.jsontype.TypeSerializer: com.fasterxml.jackson.core.type.WritableTypeId writeTypeSuffix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)>(v2, v9);
return;
}
private final void _writeArrayContents(com.fasterxml.jackson.core.JsonGenerator, char[]) throws java.io.IOException
{
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer v0;
com.fasterxml.jackson.core.JsonGenerator v1;
int v3, v4;
char[] v2;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer;
v1 := @parameter0: com.fasterxml.jackson.core.JsonGenerator;
v2 := @parameter1: char[];
v3 = 0;
v4 = lengthof v2;
label1:
if v3 >= v4 goto label2;
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeString(char[],int,int)>(v2, v3, 1);
v3 = v3 + 1;
goto label1;
label2:
return;
}
public com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)
{
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer v0;
java.lang.reflect.Type v2;
com.fasterxml.jackson.databind.JsonNode v5;
com.fasterxml.jackson.databind.SerializerProvider v1;
com.fasterxml.jackson.databind.node.ObjectNode v3, v4;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: java.lang.reflect.Type;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer: com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("array", 1);
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer: com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String)>("string");
virtualinvoke v4.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.ObjectNode put(java.lang.String,java.lang.String)>("type", "string");
v5 = virtualinvoke v3.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>("items", v4);
return v5;
}
public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer v0;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes v3;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 = <com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes STRING>;
virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer: void visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)>(v1, v2, v3);
return;
}
}