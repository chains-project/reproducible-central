public class com.fasterxml.jackson.databind.type.TypeParser extends java.lang.Object implements java.io.Serializable
{
private static final long serialVersionUID;
protected final com.fasterxml.jackson.databind.type.TypeFactory _factory;
public void <init>(com.fasterxml.jackson.databind.type.TypeFactory)
{
com.fasterxml.jackson.databind.type.TypeFactory v1;
com.fasterxml.jackson.databind.type.TypeParser v0;
v0 := @this: com.fasterxml.jackson.databind.type.TypeParser;
v1 := @parameter0: com.fasterxml.jackson.databind.type.TypeFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.fasterxml.jackson.databind.type.TypeParser: com.fasterxml.jackson.databind.type.TypeFactory _factory> = v1;
return;
}
public com.fasterxml.jackson.databind.type.TypeParser withFactory(com.fasterxml.jackson.databind.type.TypeFactory)
{
com.fasterxml.jackson.databind.type.TypeFactory v1, v2;
com.fasterxml.jackson.databind.type.TypeParser v0, v3;
v0 := @this: com.fasterxml.jackson.databind.type.TypeParser;
v1 := @parameter0: com.fasterxml.jackson.databind.type.TypeFactory;
v2 = v0.<com.fasterxml.jackson.databind.type.TypeParser: com.fasterxml.jackson.databind.type.TypeFactory _factory>;
if v1 != v2 goto label1;
v3 = v0;
goto label2;
label1:
v3 = new com.fasterxml.jackson.databind.type.TypeParser;
specialinvoke v3.<com.fasterxml.jackson.databind.type.TypeParser: void <init>(com.fasterxml.jackson.databind.type.TypeFactory)>(v1);
label2:
return v3;
}
public com.fasterxml.jackson.databind.JavaType parse(java.lang.String) throws java.lang.IllegalArgumentException
{
com.fasterxml.jackson.databind.type.TypeParser v0;
com.fasterxml.jackson.databind.JavaType v4;
java.lang.String v1, v3;
java.lang.IllegalArgumentException v6;
com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer v2;
boolean v5;
v0 := @this: com.fasterxml.jackson.databind.type.TypeParser;
v1 := @parameter0: java.lang.String;
v2 = new com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer;
v3 = virtualinvoke v1.<java.lang.String: java.lang.String trim()>();
specialinvoke v2.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: void <init>(java.lang.String)>(v3);
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.type.TypeParser: com.fasterxml.jackson.databind.JavaType parseType(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)>(v2);
v5 = virtualinvoke v2.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();
if v5 == 0 goto label1;
v6 = virtualinvoke v0.<com.fasterxml.jackson.databind.type.TypeParser: java.lang.IllegalArgumentException _problem(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer,java.lang.String)>(v2, "Unexpected tokens after complete type");
throw v6;
label1:
return v4;
}
protected com.fasterxml.jackson.databind.JavaType parseType(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer) throws java.lang.IllegalArgumentException
{
com.fasterxml.jackson.databind.type.TypeParser v0;
com.fasterxml.jackson.databind.type.TypeFactory v12, v14;
com.fasterxml.jackson.databind.type.TypeBindings v11, v15;
com.fasterxml.jackson.databind.JavaType v13, v16;
java.lang.String v4, v7, v8;
boolean v2, v6, v9;
java.lang.IllegalArgumentException v3;
java.util.List v10;
java.lang.Class v5;
com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer v1;
v0 := @this: com.fasterxml.jackson.databind.type.TypeParser;
v1 := @parameter0: com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();
if v2 != 0 goto label1;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.type.TypeParser: java.lang.IllegalArgumentException _problem(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer,java.lang.String)>(v1, "Unexpected end-of-string");
throw v3;
label1:
v4 = virtualinvoke v1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: java.lang.String nextToken()>();
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.type.TypeParser: java.lang.Class findClass(java.lang.String,com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)>(v4, v1);
v6 = virtualinvoke v1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();
if v6 == 0 goto label3;
v7 = virtualinvoke v1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: java.lang.String nextToken()>();
v8 = "<";
v9 = virtualinvoke v8.<java.lang.String: boolean equals(java.lang.Object)>(v7);
if v9 == 0 goto label2;
v10 = virtualinvoke v0.<com.fasterxml.jackson.databind.type.TypeParser: java.util.List parseTypes(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)>(v1);
v11 = staticinvoke <com.fasterxml.jackson.databind.type.TypeBindings: com.fasterxml.jackson.databind.type.TypeBindings create(java.lang.Class,java.util.List)>(v5, v10);
v12 = v0.<com.fasterxml.jackson.databind.type.TypeParser: com.fasterxml.jackson.databind.type.TypeFactory _factory>;
v13 = virtualinvoke v12.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromClass(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings)>(null, v5, v11);
return v13;
label2:
virtualinvoke v1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: void pushBack(java.lang.String)>(v7);
label3:
v14 = v0.<com.fasterxml.jackson.databind.type.TypeParser: com.fasterxml.jackson.databind.type.TypeFactory _factory>;
v15 = staticinvoke <com.fasterxml.jackson.databind.type.TypeBindings: com.fasterxml.jackson.databind.type.TypeBindings emptyBindings()>();
v16 = virtualinvoke v14.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromClass(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings)>(null, v5, v15);
return v16;
}
protected java.util.List parseTypes(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer) throws java.lang.IllegalArgumentException
{
com.fasterxml.jackson.databind.type.TypeParser v0;
java.lang.IllegalArgumentException v12, v13;
java.util.ArrayList v2;
com.fasterxml.jackson.databind.JavaType v4;
java.lang.String v11, v6, v7, v9;
com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer v1;
boolean v10, v3, v5, v8;
v0 := @this: com.fasterxml.jackson.databind.type.TypeParser;
v1 := @parameter0: com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
label1:
v3 = virtualinvoke v1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();
if v3 == 0 goto label3;
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.type.TypeParser: com.fasterxml.jackson.databind.JavaType parseType(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)>(v1);
virtualinvoke v2.<java.util.ArrayList: boolean add(java.lang.Object)>(v4);
v5 = virtualinvoke v1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();
if v5 == 0 goto label3;
v6 = virtualinvoke v1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: java.lang.String nextToken()>();
v7 = ">";
v8 = virtualinvoke v7.<java.lang.String: boolean equals(java.lang.Object)>(v6);
if v8 == 0 goto label2;
return v2;
label2:
v9 = ",";
v10 = virtualinvoke v9.<java.lang.String: boolean equals(java.lang.Object)>(v6);
if v10 != 0 goto label1;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected token \'\u0001\', expected \',\' or \'>\')");
v12 = virtualinvoke v0.<com.fasterxml.jackson.databind.type.TypeParser: java.lang.IllegalArgumentException _problem(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer,java.lang.String)>(v1, v11);
throw v12;
label3:
v13 = virtualinvoke v0.<com.fasterxml.jackson.databind.type.TypeParser: java.lang.IllegalArgumentException _problem(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer,java.lang.String)>(v1, "Unexpected end-of-string");
throw v13;
}
protected java.lang.Class findClass(java.lang.String, com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)
{
com.fasterxml.jackson.databind.type.TypeParser v0;
java.lang.IllegalArgumentException v8;
java.lang.Exception v5;
com.fasterxml.jackson.databind.type.TypeFactory v3;
java.lang.Class v4;
java.lang.String v1, v6, v7;
com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer v2;
v0 := @this: com.fasterxml.jackson.databind.type.TypeParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer;
label1:
v3 = v0.<com.fasterxml.jackson.databind.type.TypeParser: com.fasterxml.jackson.databind.type.TypeFactory _factory>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.databind.type.TypeFactory: java.lang.Class findClass(java.lang.String)>(v1);
label2:
return v4;
label3:
v5 := @caughtexception;
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfRTE(java.lang.Throwable)>(v5);
v6 = virtualinvoke v5.<java.lang.Exception: java.lang.String getMessage()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v1, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot locate class \'\u0001\', problem: \u0001");
v8 = virtualinvoke v0.<com.fasterxml.jackson.databind.type.TypeParser: java.lang.IllegalArgumentException _problem(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer,java.lang.String)>(v2, v7);
throw v8;
catch java.lang.Exception from label1 to label2 with label3;
}
protected java.lang.IllegalArgumentException _problem(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer, java.lang.String)
{
java.lang.Object[] v4;
com.fasterxml.jackson.databind.type.TypeParser v0;
java.lang.IllegalArgumentException v3;
java.lang.String v2, v5, v6, v7;
com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer v1;
v0 := @this: com.fasterxml.jackson.databind.type.TypeParser;
v1 := @parameter0: com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer;
v2 := @parameter1: java.lang.String;
v3 = new java.lang.IllegalArgumentException;
v4 = newarray (java.lang.Object)[3];
v5 = virtualinvoke v1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: java.lang.String getAllInput()>();
v4[0] = v5;
v6 = virtualinvoke v1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: java.lang.String getRemainingInput()>();
v4[1] = v6;
v4[2] = v2;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to parse type \'%s\' (remaining: \'%s\'): %s", v4);
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v7);
return v3;
}
}