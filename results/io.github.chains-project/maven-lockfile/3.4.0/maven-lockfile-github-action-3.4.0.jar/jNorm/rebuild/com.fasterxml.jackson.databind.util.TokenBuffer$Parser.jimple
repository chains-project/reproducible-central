public final class com.fasterxml.jackson.databind.util.TokenBuffer$Parser extends com.fasterxml.jackson.core.base.ParserMinimalBase
{
protected com.fasterxml.jackson.core.ObjectCodec _codec;
protected com.fasterxml.jackson.core.StreamReadConstraints _streamReadConstraints;
protected final boolean _hasNativeTypeIds;
protected final boolean _hasNativeObjectIds;
protected final boolean _hasNativeIds;
protected com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment;
protected int _segmentPtr;
protected com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext;
protected boolean _closed;
protected transient com.fasterxml.jackson.core.util.ByteArrayBuilder _byteBuilder;
protected com.fasterxml.jackson.core.JsonLocation _location;
public void <init>(com.fasterxml.jackson.databind.util.TokenBuffer$Segment, com.fasterxml.jackson.core.ObjectCodec, boolean, boolean)
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
com.fasterxml.jackson.databind.util.TokenBuffer$Segment v1;
com.fasterxml.jackson.core.ObjectCodec v2;
boolean v3, v4;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 := @parameter0: com.fasterxml.jackson.databind.util.TokenBuffer$Segment;
v2 := @parameter1: com.fasterxml.jackson.core.ObjectCodec;
v3 := @parameter2: boolean;
v4 := @parameter3: boolean;
specialinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void <init>(com.fasterxml.jackson.databind.util.TokenBuffer$Segment,com.fasterxml.jackson.core.ObjectCodec,boolean,boolean,com.fasterxml.jackson.core.JsonStreamContext)>(v1, v2, v3, v4, null);
return;
}
public void <init>(com.fasterxml.jackson.databind.util.TokenBuffer$Segment, com.fasterxml.jackson.core.ObjectCodec, boolean, boolean, com.fasterxml.jackson.core.JsonStreamContext)
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
com.fasterxml.jackson.databind.util.TokenBuffer$Segment v1;
com.fasterxml.jackson.core.JsonStreamContext v5;
com.fasterxml.jackson.core.ObjectCodec v2;
com.fasterxml.jackson.core.StreamReadConstraints v6;
boolean v3, v4;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 := @parameter0: com.fasterxml.jackson.databind.util.TokenBuffer$Segment;
v2 := @parameter1: com.fasterxml.jackson.core.ObjectCodec;
v3 := @parameter2: boolean;
v4 := @parameter3: boolean;
v5 := @parameter4: com.fasterxml.jackson.core.JsonStreamContext;
v6 = staticinvoke <com.fasterxml.jackson.core.StreamReadConstraints: com.fasterxml.jackson.core.StreamReadConstraints defaults()>();
specialinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void <init>(com.fasterxml.jackson.databind.util.TokenBuffer$Segment,com.fasterxml.jackson.core.ObjectCodec,boolean,boolean,com.fasterxml.jackson.core.JsonStreamContext,com.fasterxml.jackson.core.StreamReadConstraints)>(v1, v2, v3, v4, v5, v6);
return;
}
public void <init>(com.fasterxml.jackson.databind.util.TokenBuffer$Segment, com.fasterxml.jackson.core.ObjectCodec, boolean, boolean, com.fasterxml.jackson.core.JsonStreamContext, com.fasterxml.jackson.core.StreamReadConstraints)
{
com.fasterxml.jackson.databind.util.TokenBuffer$Segment v1;
com.fasterxml.jackson.core.JsonStreamContext v5;
com.fasterxml.jackson.core.ObjectCodec v2;
com.fasterxml.jackson.core.StreamReadConstraints v6;
com.fasterxml.jackson.databind.util.TokenBufferReadContext v8;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
int v7;
boolean v3, v4, v9;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 := @parameter0: com.fasterxml.jackson.databind.util.TokenBuffer$Segment;
v2 := @parameter1: com.fasterxml.jackson.core.ObjectCodec;
v3 := @parameter2: boolean;
v4 := @parameter3: boolean;
v5 := @parameter4: com.fasterxml.jackson.core.JsonStreamContext;
v6 := @parameter5: com.fasterxml.jackson.core.StreamReadConstraints;
specialinvoke v0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void <init>()>();
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonLocation _location> = null;
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment> = v1;
v7 = (int) -1;
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr> = v7;
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.ObjectCodec _codec> = v2;
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.StreamReadConstraints _streamReadConstraints> = v6;
v8 = staticinvoke <com.fasterxml.jackson.databind.util.TokenBufferReadContext: com.fasterxml.jackson.databind.util.TokenBufferReadContext createRootContext(com.fasterxml.jackson.core.JsonStreamContext)>(v5);
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext> = v8;
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _hasNativeTypeIds> = v3;
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _hasNativeObjectIds> = v4;
if v3 != 0 goto label1;
if v4 == 0 goto label2;
label1:
v9 = 1;
goto label3;
label2:
v9 = 0;
label3:
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _hasNativeIds> = v9;
return;
}
public void setLocation(com.fasterxml.jackson.core.JsonLocation)
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
com.fasterxml.jackson.core.JsonLocation v1;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 := @parameter0: com.fasterxml.jackson.core.JsonLocation;
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonLocation _location> = v1;
return;
}
public com.fasterxml.jackson.core.ObjectCodec getCodec()
{
com.fasterxml.jackson.core.ObjectCodec v1;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.ObjectCodec _codec>;
return v1;
}
public void setCodec(com.fasterxml.jackson.core.ObjectCodec)
{
com.fasterxml.jackson.core.ObjectCodec v1;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 := @parameter0: com.fasterxml.jackson.core.ObjectCodec;
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.ObjectCodec _codec> = v1;
return;
}
public com.fasterxml.jackson.core.Version version()
{
com.fasterxml.jackson.core.Version v1;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = <com.fasterxml.jackson.databind.cfg.PackageVersion: com.fasterxml.jackson.core.Version VERSION>;
return v1;
}
public com.fasterxml.jackson.core.util.JacksonFeatureSet getReadCapabilities()
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
com.fasterxml.jackson.core.util.JacksonFeatureSet v1;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = <com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_READ_CAPABILITIES>;
return v1;
}
public com.fasterxml.jackson.core.StreamReadConstraints streamReadConstraints()
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
com.fasterxml.jackson.core.StreamReadConstraints v1;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.StreamReadConstraints _streamReadConstraints>;
return v1;
}
public com.fasterxml.jackson.core.JsonToken peekNextToken() throws java.io.IOException
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
com.fasterxml.jackson.databind.util.TokenBuffer$Segment v2, v5;
int v3, v4;
com.fasterxml.jackson.core.JsonToken v6;
boolean v1;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _closed>;
if v1 == 0 goto label1;
return null;
label1:
v2 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;
v3 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr>;
v4 = v3 + 1;
if v4 < 16 goto label4;
v4 = 0;
if v2 != null goto label2;
v5 = null;
goto label3;
label2:
v5 = virtualinvoke v2.<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: com.fasterxml.jackson.databind.util.TokenBuffer$Segment next()>();
label3:
v2 = v5;
label4:
if v2 != null goto label5;
v6 = null;
goto label6;
label5:
v6 = virtualinvoke v2.<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: com.fasterxml.jackson.core.JsonToken type(int)>(v4);
label6:
return v6;
}
public void close() throws java.io.IOException
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _closed>;
if v1 != 0 goto label1;
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _closed> = 1;
label1:
return;
}
public com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException
{
com.fasterxml.jackson.databind.util.TokenBufferReadContext v15, v18, v19, v22, v23, v28, v29, v30;
boolean v1, v14;
com.fasterxml.jackson.databind.util.TokenBuffer$Segment v2, v5, v6, v7, v8;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
int v3, v4, v9;
com.fasterxml.jackson.core.JsonToken v10, v11, v12, v16, v17, v20, v21, v24, v25, v26, v27, v31;
java.lang.Object v13;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _closed>;
if v1 != 0 goto label01;
v2 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;
if v2 != null goto label02;
label01:
return null;
label02:
v3 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr>;
v4 = v3 + 1;
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr> = v4;
if v4 < 16 goto label03;
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr> = 0;
v5 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: com.fasterxml.jackson.databind.util.TokenBuffer$Segment next()>();
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment> = v6;
v7 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;
if v7 != null goto label03;
return null;
label03:
v8 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;
v9 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr>;
v10 = virtualinvoke v8.<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: com.fasterxml.jackson.core.JsonToken type(int)>(v9);
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken> = v10;
v11 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v12 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v11 != v12 goto label05;
v13 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();
v14 = v13 instanceof java.lang.String;
if v14 != 0 goto label04;
v13 = virtualinvoke v13.<java.lang.Object: java.lang.String toString()>();
label04:
v15 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;
virtualinvoke v15.<com.fasterxml.jackson.databind.util.TokenBufferReadContext: void setCurrentName(java.lang.String)>(v13);
goto label10;
label05:
v16 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v17 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v16 != v17 goto label06;
v18 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;
v19 = virtualinvoke v18.<com.fasterxml.jackson.databind.util.TokenBufferReadContext: com.fasterxml.jackson.databind.util.TokenBufferReadContext createChildObjectContext()>();
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext> = v19;
goto label10;
label06:
v20 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v21 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v20 != v21 goto label07;
v22 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;
v23 = virtualinvoke v22.<com.fasterxml.jackson.databind.util.TokenBufferReadContext: com.fasterxml.jackson.databind.util.TokenBufferReadContext createChildArrayContext()>();
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext> = v23;
goto label10;
label07:
v24 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v25 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_OBJECT>;
if v24 == v25 goto label08;
v26 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v27 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_ARRAY>;
if v26 != v27 goto label09;
label08:
v28 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;
v29 = virtualinvoke v28.<com.fasterxml.jackson.databind.util.TokenBufferReadContext: com.fasterxml.jackson.databind.util.TokenBufferReadContext parentOrCopy()>();
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext> = v29;
goto label10;
label09:
v30 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;
virtualinvoke v30.<com.fasterxml.jackson.databind.util.TokenBufferReadContext: void updateForValue()>();
label10:
v31 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
return v31;
}
public java.lang.String nextFieldName() throws java.io.IOException
{
com.fasterxml.jackson.databind.util.TokenBufferReadContext v12;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
int v3, v4;
com.fasterxml.jackson.core.JsonToken v13, v14, v6, v7, v8;
java.lang.String v15;
boolean v1, v11;
com.fasterxml.jackson.databind.util.TokenBuffer$Segment v2, v5, v9;
java.lang.Object v10;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _closed>;
if v1 != 0 goto label1;
v2 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;
if v2 != null goto label2;
label1:
return null;
label2:
v3 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr>;
v4 = v3 + 1;
if v4 >= 16 goto label4;
v5 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: com.fasterxml.jackson.core.JsonToken type(int)>(v4);
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v6 != v7 goto label4;
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr> = v4;
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken> = v8;
v9 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;
v10 = virtualinvoke v9.<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: java.lang.Object get(int)>(v4);
v11 = v10 instanceof java.lang.String;
if v11 != 0 goto label3;
v10 = virtualinvoke v10.<java.lang.Object: java.lang.String toString()>();
label3:
v12 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;
virtualinvoke v12.<com.fasterxml.jackson.databind.util.TokenBufferReadContext: void setCurrentName(java.lang.String)>(v10);
return v10;
label4:
v13 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v14 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v13 != v14 goto label5;
v15 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String currentName()>();
goto label6;
label5:
v15 = null;
label6:
return v15;
}
public boolean isClosed()
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _closed>;
return v1;
}
public com.fasterxml.jackson.core.JsonStreamContext getParsingContext()
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
com.fasterxml.jackson.databind.util.TokenBufferReadContext v1;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;
return v1;
}
public com.fasterxml.jackson.core.JsonLocation getTokenLocation()
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
com.fasterxml.jackson.core.JsonLocation v1;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonLocation getCurrentLocation()>();
return v1;
}
public com.fasterxml.jackson.core.JsonLocation getCurrentLocation()
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
com.fasterxml.jackson.core.JsonLocation v1, v2;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonLocation _location>;
if v1 != null goto label1;
v2 = <com.fasterxml.jackson.core.JsonLocation: com.fasterxml.jackson.core.JsonLocation NA>;
goto label2;
label1:
v2 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonLocation _location>;
label2:
return v2;
}
public java.lang.String currentName()
{
com.fasterxml.jackson.core.JsonStreamContext v6;
com.fasterxml.jackson.databind.util.TokenBufferReadContext v5, v8;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
com.fasterxml.jackson.core.JsonToken v1, v2, v3, v4;
java.lang.String v7, v9;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v1 == v2 goto label1;
v3 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v3 != v4 goto label2;
label1:
v5 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.databind.util.TokenBufferReadContext: com.fasterxml.jackson.core.JsonStreamContext getParent()>();
v7 = virtualinvoke v6.<com.fasterxml.jackson.core.JsonStreamContext: java.lang.String getCurrentName()>();
return v7;
label2:
v8 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.databind.util.TokenBufferReadContext: java.lang.String getCurrentName()>();
return v9;
}
public java.lang.String getCurrentName()
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String currentName()>();
return v1;
}
public void overrideCurrentName(java.lang.String)
{
com.fasterxml.jackson.core.JsonStreamContext v2;
java.io.IOException v8;
java.lang.RuntimeException v9;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
com.fasterxml.jackson.core.JsonToken v3, v4, v5, v6;
java.lang.String v1;
boolean v7;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;
v3 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v3 == v4 goto label1;
v5 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v5 != v6 goto label2;
label1:
v2 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonStreamContext: com.fasterxml.jackson.core.JsonStreamContext getParent()>();
label2:
v7 = v2 instanceof com.fasterxml.jackson.databind.util.TokenBufferReadContext;
if v7 == 0 goto label6;
label3:
virtualinvoke v2.<com.fasterxml.jackson.databind.util.TokenBufferReadContext: void setCurrentName(java.lang.String)>(v1);
label4:
goto label6;
label5:
v8 := @caughtexception;
v9 = new java.lang.RuntimeException;
specialinvoke v9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v8);
throw v9;
label6:
return;
catch java.io.IOException from label3 to label4 with label5;
}
public java.lang.String getText()
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
int[] v9;
int v11, v12;
com.fasterxml.jackson.core.JsonToken v1, v10, v15, v2, v3, v4, v8;
java.lang.String v14, v16, v7;
boolean v6;
java.lang.Object v13, v5;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v1 == v2 goto label1;
v3 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v3 != v4 goto label3;
label1:
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();
v6 = v5 instanceof java.lang.String;
if v6 == 0 goto label2;
return v5;
label2:
v7 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>(v5);
return v7;
label3:
v8 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
if v8 != null goto label4;
return null;
label4:
v9 = <com.fasterxml.jackson.databind.util.TokenBuffer$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken>;
v10 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.JsonToken: int ordinal()>();
v12 = v9[v11];
lookupswitch(v12)
{
case 7: goto label5;
case 8: goto label5;
default: goto label6;
};
label5:
v13 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();
v14 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>(v13);
return v14;
label6:
v15 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v16 = virtualinvoke v15.<com.fasterxml.jackson.core.JsonToken: java.lang.String asString()>();
return v16;
}
public char[] getTextCharacters()
{
char[] v2;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String getText()>();
if v1 != null goto label1;
v2 = null;
goto label2;
label1:
v2 = virtualinvoke v1.<java.lang.String: char[] toCharArray()>();
label2:
return v2;
}
public int getTextLength()
{
int v2;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String getText()>();
if v1 != null goto label1;
v2 = 0;
goto label2;
label1:
v2 = virtualinvoke v1.<java.lang.String: int length()>();
label2:
return v2;
}
public int getTextOffset()
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
return 0;
}
public boolean hasTextCharacters()
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
return 0;
}
public boolean isNaN()
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
java.lang.Object v3;
com.fasterxml.jackson.core.JsonToken v1, v2;
boolean v10, v11, v4, v5, v6, v7, v8, v9;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
if v1 != v2 goto label8;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();
v4 = v3 instanceof java.lang.Double;
if v4 == 0 goto label4;
v5 = virtualinvoke v3.<java.lang.Double: boolean isNaN()>();
if v5 != 0 goto label1;
v6 = virtualinvoke v3.<java.lang.Double: boolean isInfinite()>();
if v6 == 0 goto label2;
label1:
v7 = 1;
goto label3;
label2:
v7 = 0;
label3:
return v7;
label4:
v8 = v3 instanceof java.lang.Float;
if v8 == 0 goto label8;
v9 = virtualinvoke v3.<java.lang.Float: boolean isNaN()>();
if v9 != 0 goto label5;
v10 = virtualinvoke v3.<java.lang.Float: boolean isInfinite()>();
if v10 == 0 goto label6;
label5:
v11 = 1;
goto label7;
label6:
v11 = 0;
label7:
return v11;
label8:
return 0;
}
public java.math.BigInteger getBigIntegerValue() throws java.io.IOException
{
long v7;
com.fasterxml.jackson.core.StreamReadConstraints v4;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
int v5;
java.math.BigInteger v6, v8;
java.lang.Number v1;
boolean v2, v3;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = specialinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Number getNumberValue(boolean)>(1);
v2 = v1 instanceof java.math.BigInteger;
if v2 == 0 goto label1;
return v1;
label1:
v3 = v1 instanceof java.math.BigDecimal;
if v3 == 0 goto label2;
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.StreamReadConstraints streamReadConstraints()>();
v5 = virtualinvoke v1.<java.math.BigDecimal: int scale()>();
virtualinvoke v4.<com.fasterxml.jackson.core.StreamReadConstraints: void validateBigIntegerScale(int)>(v5);
v6 = virtualinvoke v1.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();
return v6;
label2:
v7 = virtualinvoke v1.<java.lang.Number: long longValue()>();
v8 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(v7);
return v8;
}
public java.math.BigDecimal getDecimalValue() throws java.io.IOException
{
long v7;
java.math.BigDecimal v10, v12, v5, v8;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
int v4;
java.lang.Number v1;
boolean v2, v3, v6, v9;
double v11;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = specialinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Number getNumberValue(boolean)>(1);
v2 = v1 instanceof java.math.BigDecimal;
if v2 == 0 goto label1;
return v1;
label1:
v3 = v1 instanceof java.lang.Integer;
if v3 == 0 goto label2;
v4 = virtualinvoke v1.<java.lang.Number: int intValue()>();
v5 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(v4);
return v5;
label2:
v6 = v1 instanceof java.lang.Long;
if v6 == 0 goto label3;
v7 = virtualinvoke v1.<java.lang.Number: long longValue()>();
v8 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(v7);
return v8;
label3:
v9 = v1 instanceof java.math.BigInteger;
if v9 == 0 goto label4;
v10 = new java.math.BigDecimal;
specialinvoke v10.<java.math.BigDecimal: void <init>(java.math.BigInteger)>(v1);
return v10;
label4:
v11 = virtualinvoke v1.<java.lang.Number: double doubleValue()>();
v12 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>(v11);
return v12;
}
public double getDoubleValue() throws java.io.IOException
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
java.lang.Number v1;
double v2;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();
v2 = virtualinvoke v1.<java.lang.Number: double doubleValue()>();
return v2;
}
public float getFloatValue() throws java.io.IOException
{
float v2;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
java.lang.Number v1;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();
v2 = virtualinvoke v1.<java.lang.Number: float floatValue()>();
return v2;
}
public int getIntValue() throws java.io.IOException
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
int v7, v8;
java.lang.Object v3;
com.fasterxml.jackson.core.JsonToken v1, v2;
java.lang.Number v4;
boolean v5, v6;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v1 != v2 goto label1;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();
goto label2;
label1:
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();
label2:
v4 = v3;
v5 = v3 instanceof java.lang.Integer;
if v5 != 0 goto label3;
v6 = specialinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _smallerThanInt(java.lang.Number)>(v3);
if v6 == 0 goto label4;
label3:
v7 = virtualinvoke v4.<java.lang.Number: int intValue()>();
return v7;
label4:
v8 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _convertNumberToInt(java.lang.Number)>(v3);
return v8;
}
public long getLongValue() throws java.io.IOException
{
long v7, v8;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
java.lang.Object v3;
com.fasterxml.jackson.core.JsonToken v1, v2;
java.lang.Number v4;
boolean v5, v6;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v1 != v2 goto label1;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();
goto label2;
label1:
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();
label2:
v4 = v3;
v5 = v3 instanceof java.lang.Long;
if v5 != 0 goto label3;
v6 = specialinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _smallerThanLong(java.lang.Number)>(v3);
if v6 == 0 goto label4;
label3:
v7 = virtualinvoke v4.<java.lang.Number: long longValue()>();
return v7;
label4:
v8 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: long _convertNumberToLong(java.lang.Number)>(v3);
return v8;
}
public com.fasterxml.jackson.core.JsonParser$NumberType getNumberType() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser$NumberType v11, v13, v15, v19, v3, v5, v7, v9;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
com.fasterxml.jackson.core.JsonToken v17, v18;
boolean v10, v12, v14, v16, v2, v4, v6, v8;
java.lang.Object v1;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object getNumberValueDeferred()>();
v2 = v1 instanceof java.lang.Integer;
if v2 == 0 goto label01;
v3 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType INT>;
return v3;
label01:
v4 = v1 instanceof java.lang.Long;
if v4 == 0 goto label02;
v5 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType LONG>;
return v5;
label02:
v6 = v1 instanceof java.lang.Double;
if v6 == 0 goto label03;
v7 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType DOUBLE>;
return v7;
label03:
v8 = v1 instanceof java.math.BigDecimal;
if v8 == 0 goto label04;
v9 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType BIG_DECIMAL>;
return v9;
label04:
v10 = v1 instanceof java.math.BigInteger;
if v10 == 0 goto label05;
v11 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType BIG_INTEGER>;
return v11;
label05:
v12 = v1 instanceof java.lang.Float;
if v12 == 0 goto label06;
v13 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType FLOAT>;
return v13;
label06:
v14 = v1 instanceof java.lang.Short;
if v14 == 0 goto label07;
v15 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType INT>;
return v15;
label07:
v16 = v1 instanceof java.lang.String;
if v16 == 0 goto label10;
v17 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v18 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
if v17 != v18 goto label08;
v19 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType BIG_DECIMAL>;
goto label09;
label08:
v19 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType BIG_INTEGER>;
label09:
return v19;
label10:
return null;
}
public final java.lang.Number getNumberValue() throws java.io.IOException
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
java.lang.Number v1;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = specialinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Number getNumberValue(boolean)>(0);
return v1;
}
public java.lang.Object getNumberValueDeferred() throws java.io.IOException
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
java.lang.Object v1;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void _checkIsNumber()>();
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();
return v1;
}
private java.lang.Number getNumberValue(boolean) throws java.io.IOException
{
java.lang.IllegalStateException v18, v24;
java.lang.Double v23;
long v11;
java.lang.Integer v14;
java.math.BigDecimal v17;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
java.lang.Long v12;
int v13, v5;
java.math.BigInteger v10;
com.fasterxml.jackson.core.JsonToken v6, v7;
java.lang.String v19, v25, v26;
boolean v1, v16, v21, v3, v4, v9;
double v22;
com.fasterxml.jackson.core.StreamReadFeature v15, v20, v8;
java.lang.Object v2;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 := @parameter0: boolean;
virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void _checkIsNumber()>();
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();
v3 = v2 instanceof java.lang.Number;
if v3 == 0 goto label1;
return v2;
label1:
v4 = v2 instanceof java.lang.String;
if v4 == 0 goto label8;
v5 = virtualinvoke v2.<java.lang.String: int length()>();
v6 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v6 != v7 goto label5;
if v1 != 0 goto label2;
if v5 < 19 goto label3;
label2:
v8 = <com.fasterxml.jackson.core.StreamReadFeature: com.fasterxml.jackson.core.StreamReadFeature USE_FAST_BIG_NUMBER_PARSER>;
v9 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean isEnabled(com.fasterxml.jackson.core.StreamReadFeature)>(v8);
v10 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: java.math.BigInteger parseBigInteger(java.lang.String,boolean)>(v2, v9);
return v10;
label3:
if v5 < 10 goto label4;
v11 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: long parseLong(java.lang.String)>(v2);
v12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v11);
return v12;
label4:
v13 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: int parseInt(java.lang.String)>(v2);
v14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v13);
return v14;
label5:
if v1 == 0 goto label7;
v15 = <com.fasterxml.jackson.core.StreamReadFeature: com.fasterxml.jackson.core.StreamReadFeature USE_FAST_BIG_NUMBER_PARSER>;
v16 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean isEnabled(com.fasterxml.jackson.core.StreamReadFeature)>(v15);
v17 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: java.math.BigDecimal parseBigDecimal(java.lang.String,boolean)>(v2, v16);
if v17 != null goto label6;
v18 = new java.lang.IllegalStateException;
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Internal error: failed to parse number \'\u0001\'");
specialinvoke v18.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v19);
throw v18;
label6:
return v17;
label7:
v20 = <com.fasterxml.jackson.core.StreamReadFeature: com.fasterxml.jackson.core.StreamReadFeature USE_FAST_DOUBLE_PARSER>;
v21 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean isEnabled(com.fasterxml.jackson.core.StreamReadFeature)>(v20);
v22 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: double parseDouble(java.lang.String,boolean)>(v2, v21);
v23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v22);
return v23;
label8:
v24 = new java.lang.IllegalStateException;
v25 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String classNameOf(java.lang.Object)>(v2);
v26 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v25) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Internal error: entry should be a Number, but is of type \u0001");
specialinvoke v24.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v26);
throw v24;
}
private final boolean _smallerThanInt(java.lang.Number)
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
java.lang.Number v1;
boolean v2, v3, v4;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 := @parameter0: java.lang.Number;
v2 = v1 instanceof java.lang.Short;
if v2 != 0 goto label1;
v3 = v1 instanceof java.lang.Byte;
if v3 == 0 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
private final boolean _smallerThanLong(java.lang.Number)
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
java.lang.Number v1;
boolean v2, v3, v4, v5;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 := @parameter0: java.lang.Number;
v2 = v1 instanceof java.lang.Integer;
if v2 != 0 goto label1;
v3 = v1 instanceof java.lang.Short;
if v3 != 0 goto label1;
v4 = v1 instanceof java.lang.Byte;
if v4 == 0 goto label2;
label1:
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
return v5;
}
protected int _convertNumberToInt(java.lang.Number) throws java.io.IOException
{
long v3;
java.math.BigDecimal v16, v18;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
byte v13, v14, v4;
int v17, v19, v20, v21, v7, v9;
java.math.BigInteger v6, v8;
java.lang.Number v1;
boolean v10, v11, v15, v2, v5;
double v12;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 := @parameter0: java.lang.Number;
v2 = v1 instanceof java.lang.Long;
if v2 == 0 goto label02;
v3 = virtualinvoke v1.<java.lang.Number: long longValue()>();
v4 = v21 cmp v3;
if v4 == 0 goto label01;
virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void reportOverflowInt()>();
label01:
return v3;
label02:
v5 = v1 instanceof java.math.BigInteger;
if v5 == 0 goto label04;
v6 = <com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigInteger BI_MIN_INT>;
v7 = virtualinvoke v6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(v1);
if v7 > 0 goto label03;
v8 = <com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigInteger BI_MAX_INT>;
v9 = virtualinvoke v8.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(v1);
if v9 >= 0 goto label11;
label03:
virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void reportOverflowInt()>();
goto label11;
label04:
v10 = v1 instanceof java.lang.Double;
if v10 != 0 goto label05;
v11 = v1 instanceof java.lang.Float;
if v11 == 0 goto label08;
label05:
v12 = virtualinvoke v1.<java.lang.Number: double doubleValue()>();
v13 = v12 cmpg -2.147483648E9;
if v13 < 0 goto label06;
v14 = v12 cmpl 2.147483647E9;
if v14 <= 0 goto label07;
label06:
virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void reportOverflowInt()>();
label07:
return v12;
label08:
v15 = v1 instanceof java.math.BigDecimal;
if v15 == 0 goto label10;
v16 = <com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigDecimal BD_MIN_INT>;
v17 = virtualinvoke v16.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(v1);
if v17 > 0 goto label09;
v18 = <com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigDecimal BD_MAX_INT>;
v19 = virtualinvoke v18.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(v1);
if v19 >= 0 goto label11;
label09:
virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void reportOverflowInt()>();
goto label11;
label10:
virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void _throwInternal()>();
label11:
v20 = virtualinvoke v1.<java.lang.Number: int intValue()>();
return v20;
}
protected long _convertNumberToLong(java.lang.Number) throws java.io.IOException
{
long v17;
java.math.BigDecimal v13, v15;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
byte v10, v11;
int v14, v16, v4, v6;
java.math.BigInteger v3, v5;
java.lang.Number v1;
boolean v12, v2, v7, v8;
double v9;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 := @parameter0: java.lang.Number;
v2 = v1 instanceof java.math.BigInteger;
if v2 == 0 goto label2;
v3 = <com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigInteger BI_MIN_LONG>;
v4 = virtualinvoke v3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(v1);
if v4 > 0 goto label1;
v5 = <com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigInteger BI_MAX_LONG>;
v6 = virtualinvoke v5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(v1);
if v6 >= 0 goto label9;
label1:
virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void reportOverflowLong()>();
goto label9;
label2:
v7 = v1 instanceof java.lang.Double;
if v7 != 0 goto label3;
v8 = v1 instanceof java.lang.Float;
if v8 == 0 goto label6;
label3:
v9 = virtualinvoke v1.<java.lang.Number: double doubleValue()>();
v10 = v9 cmpg -9.223372036854776E18;
if v10 < 0 goto label4;
v11 = v9 cmpl 9.223372036854776E18;
if v11 <= 0 goto label5;
label4:
virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void reportOverflowLong()>();
label5:
return v9;
label6:
v12 = v1 instanceof java.math.BigDecimal;
if v12 == 0 goto label8;
v13 = <com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigDecimal BD_MIN_LONG>;
v14 = virtualinvoke v13.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(v1);
if v14 > 0 goto label7;
v15 = <com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigDecimal BD_MAX_LONG>;
v16 = virtualinvoke v15.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(v1);
if v16 >= 0 goto label9;
label7:
virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void reportOverflowLong()>();
goto label9;
label8:
virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void _throwInternal()>();
label9:
v17 = virtualinvoke v1.<java.lang.Number: long longValue()>();
return v17;
}
public java.lang.Object getEmbeddedObject()
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
java.lang.Object v3;
com.fasterxml.jackson.core.JsonToken v1, v2;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_EMBEDDED_OBJECT>;
if v1 != v2 goto label1;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();
return v3;
label1:
return null;
}
public byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException
{
byte[] v15;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
com.fasterxml.jackson.core.JsonToken v2, v3, v6, v7, v8;
java.lang.String v11, v9;
com.fasterxml.jackson.core.JsonParseException v10;
boolean v5;
com.fasterxml.jackson.core.Base64Variant v1;
com.fasterxml.jackson.core.util.ByteArrayBuilder v12, v13, v14;
java.lang.Object v4;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_EMBEDDED_OBJECT>;
if v2 != v3 goto label1;
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();
v5 = v4 instanceof byte[];
if v5 == 0 goto label1;
return v4;
label1:
v6 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v6 == v7 goto label2;
v8 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.fasterxml.jackson.core.JsonToken)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Current token (\u0001) not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), cannot access as binary");
v10 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>(v9);
throw v10;
label2:
v11 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String getText()>();
if v11 != null goto label3;
return null;
label3:
v12 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.util.ByteArrayBuilder _byteBuilder>;
if v12 != null goto label4;
v13 = new com.fasterxml.jackson.core.util.ByteArrayBuilder;
specialinvoke v13.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void <init>(int)>(100);
v12 = v13;
v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.util.ByteArrayBuilder _byteBuilder> = v13;
goto label5;
label4:
v14 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.util.ByteArrayBuilder _byteBuilder>;
virtualinvoke v14.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void reset()>();
label5:
virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void _decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)>(v11, v12, v1);
v15 = virtualinvoke v12.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();
return v15;
}
public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream) throws java.io.IOException
{
com.fasterxml.jackson.core.Base64Variant v1;
java.io.OutputStream v2;
byte[] v3;
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
int v4, v5;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: java.io.OutputStream;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant)>(v1);
if v3 == null goto label1;
v4 = lengthof v3;
virtualinvoke v2.<java.io.OutputStream: void write(byte[],int,int)>(v3, 0, v4);
v5 = lengthof v3;
return v5;
label1:
return 0;
}
public boolean canReadObjectId()
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _hasNativeObjectIds>;
return v1;
}
public boolean canReadTypeId()
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _hasNativeTypeIds>;
return v1;
}
public java.lang.Object getTypeId()
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
com.fasterxml.jackson.databind.util.TokenBuffer$Segment v1;
int v2;
java.lang.Object v3;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;
v2 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr>;
v3 = virtualinvoke v1.<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: java.lang.Object findTypeId(int)>(v2);
return v3;
}
public java.lang.Object getObjectId()
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
com.fasterxml.jackson.databind.util.TokenBuffer$Segment v1;
int v2;
java.lang.Object v3;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;
v2 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr>;
v3 = virtualinvoke v1.<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: java.lang.Object findObjectId(int)>(v2);
return v3;
}
protected final java.lang.Object _currentObject()
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
com.fasterxml.jackson.databind.util.TokenBuffer$Segment v1;
int v2;
java.lang.Object v3;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;
v2 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr>;
v3 = virtualinvoke v1.<com.fasterxml.jackson.databind.util.TokenBuffer$Segment: java.lang.Object get(int)>(v2);
return v3;
}
protected final void _checkIsNumber() throws com.fasterxml.jackson.core.JacksonException
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
com.fasterxml.jackson.core.JsonToken v1, v2, v4;
java.lang.String v5;
com.fasterxml.jackson.core.JsonParseException v6;
boolean v3;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
v1 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
if v1 == null goto label1;
v2 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: boolean isNumeric()>();
if v3 != 0 goto label2;
label1:
v4 = v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonToken _currToken>;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.fasterxml.jackson.core.JsonToken)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Current token (\u0001) not numeric, cannot use numeric value accessors");
v6 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>(v5);
throw v6;
label2:
return;
}
protected void _handleEOF()
{
com.fasterxml.jackson.databind.util.TokenBuffer$Parser v0;
v0 := @this: com.fasterxml.jackson.databind.util.TokenBuffer$Parser;
virtualinvoke v0.<com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void _throwInternal()>();
return;
}
}