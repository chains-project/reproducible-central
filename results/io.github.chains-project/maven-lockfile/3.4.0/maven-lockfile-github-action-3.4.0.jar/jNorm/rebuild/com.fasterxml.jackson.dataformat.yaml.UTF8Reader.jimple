public final class com.fasterxml.jackson.dataformat.yaml.UTF8Reader extends java.io.Reader
{
private static final int DEFAULT_BUFFER_SIZE;
protected static final java.lang.ThreadLocal _bufferRecycler;
protected final byte[][] _bufferHolder;
private java.io.InputStream _inputSource;
private final boolean _autoClose;
protected byte[] _inputBuffer;
protected int _inputPtr;
protected int _inputEnd;
protected int _surrogate;
int _charCount;
int _byteCount;
private char[] _tmpBuffer;
public void <init>(java.io.InputStream, boolean)
{
byte[] v8;
byte[][] v6, v7, v9;
com.fasterxml.jackson.dataformat.yaml.UTF8Reader v0;
int v5;
java.lang.Object v3, v4;
boolean v2;
java.io.InputStream v1;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.UTF8Reader;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: boolean;
if v1 != null goto label1;
v3 = new java.lang.Object;
v4 = v3;
specialinvoke v3.<java.lang.Object: void <init>()>();
goto label2;
label1:
v4 = v1;
label2:
specialinvoke v0.<java.io.Reader: void <init>(java.lang.Object)>(v4);
v5 = (int) -1;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _surrogate> = v5;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _charCount> = 0;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _byteCount> = 0;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: char[] _tmpBuffer> = null;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: java.io.InputStream _inputSource> = v1;
v6 = staticinvoke <com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[][] _findBufferHolder()>();
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[][] _bufferHolder> = v6;
v7 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[][] _bufferHolder>;
v8 = v7[0];
if v8 != null goto label3;
v8 = newarray (byte)[8000];
goto label4;
label3:
v9 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[][] _bufferHolder>;
v9[0] = null;
label4:
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[] _inputBuffer> = v8;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputPtr> = 0;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputEnd> = 0;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: boolean _autoClose> = v2;
return;
}
public void <init>(byte[], int, int, boolean)
{
byte[] v1;
byte[][] v8;
com.fasterxml.jackson.dataformat.yaml.UTF8Reader v0;
int v2, v3, v6, v7;
java.lang.Object v5;
boolean v4;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.UTF8Reader;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 = new java.lang.Object;
specialinvoke v5.<java.lang.Object: void <init>()>();
specialinvoke v0.<java.io.Reader: void <init>(java.lang.Object)>(v5);
v6 = (int) -1;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _surrogate> = v6;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _charCount> = 0;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _byteCount> = 0;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: char[] _tmpBuffer> = null;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: java.io.InputStream _inputSource> = null;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[] _inputBuffer> = v1;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputPtr> = v2;
v7 = v2 + v3;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputEnd> = v7;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: boolean _autoClose> = v4;
v8 = (byte[][]) null;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[][] _bufferHolder> = v8;
return;
}
private static byte[][] _findBufferHolder()
{
java.lang.ThreadLocal v0, v3;
java.lang.Object v1, v2;
java.lang.ref.SoftReference v4;
v0 = <com.fasterxml.jackson.dataformat.yaml.UTF8Reader: java.lang.ThreadLocal _bufferRecycler>;
v1 = virtualinvoke v0.<java.lang.ThreadLocal: java.lang.Object get()>();
if v1 == null goto label1;
v2 = virtualinvoke v1.<java.lang.ref.SoftReference: java.lang.Object get()>();
label1:
if v2 != null goto label2;
v2 = newarray (byte[])[1];
v3 = <com.fasterxml.jackson.dataformat.yaml.UTF8Reader: java.lang.ThreadLocal _bufferRecycler>;
v4 = new java.lang.ref.SoftReference;
specialinvoke v4.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(v2);
virtualinvoke v3.<java.lang.ThreadLocal: void set(java.lang.Object)>(v4);
label2:
return v2;
}
protected final boolean canModifyBuffer()
{
byte[][] v1;
com.fasterxml.jackson.dataformat.yaml.UTF8Reader v0;
boolean v2;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.UTF8Reader;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[][] _bufferHolder>;
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public void close() throws java.io.IOException
{
com.fasterxml.jackson.dataformat.yaml.UTF8Reader v0;
boolean v2;
java.io.InputStream v1;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.UTF8Reader;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: java.io.InputStream _inputSource>;
if v1 == null goto label1;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: java.io.InputStream _inputSource> = null;
v2 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: boolean _autoClose>;
if v2 == 0 goto label1;
virtualinvoke v1.<java.io.InputStream: void close()>();
label1:
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: void freeBuffers()>();
return;
}
public int read() throws java.io.IOException
{
char v7;
com.fasterxml.jackson.dataformat.yaml.UTF8Reader v0;
int v4, v5;
char[] v1, v2, v3, v6;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.UTF8Reader;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: char[] _tmpBuffer>;
if v1 != null goto label1;
v2 = newarray (char)[1];
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: char[] _tmpBuffer> = v2;
label1:
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: char[] _tmpBuffer>;
v4 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int read(char[],int,int)>(v3, 0, 1);
if v4 >= 1 goto label2;
v5 = (int) -1;
return v5;
label2:
v6 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: char[] _tmpBuffer>;
v7 = v6[0];
return v7;
}
public int read(char[]) throws java.io.IOException
{
com.fasterxml.jackson.dataformat.yaml.UTF8Reader v0;
int v2, v3;
char[] v1;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.UTF8Reader;
v1 := @parameter0: char[];
v2 = lengthof v1;
v3 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int read(char[],int,int)>(v1, 0, v2);
return v3;
}
public int read(char[], int, int) throws java.io.IOException
{
byte[] v18, v23, v4;
byte v20, v27, v37, v44, v49, v52, v57, v59, v64;
short v36, v38, v39, v40, v45, v46, v53, v54, v60, v61;
char[] v1;
boolean v21;
com.fasterxml.jackson.dataformat.yaml.UTF8Reader v0;
int v10, v11, v12, v13, v14, v15, v16, v17, v19, v2, v22, v24, v25, v26, v28, v29, v3, v30, v31, v32, v33, v34, v35, v41, v42, v43, v47, v48, v5, v50, v51, v55, v56, v58, v6, v62, v63, v65, v66, v67, v68, v69, v7, v70, v71, v72, v73, v74, v75, v76, v8, v9;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.UTF8Reader;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[] _inputBuffer>;
if v4 != null goto label01;
v5 = (int) -1;
return v5;
label01:
v6 = v3 + v2;
v7 = v2;
v8 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _surrogate>;
if v8 < 0 goto label02;
v7 = v2 + 1;
v9 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _surrogate>;
v1[v2] = v9;
v10 = (int) -1;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _surrogate> = v10;
v11 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputPtr>;
v12 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputEnd>;
if v11 < v12 goto label04;
v13 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _charCount>;
v14 = v13 + 1;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _charCount> = v14;
return 1;
label02:
v15 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputEnd>;
v16 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputPtr>;
v17 = v15 - v16;
if v17 >= 4 goto label04;
if v17 < 1 goto label03;
v18 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[] _inputBuffer>;
v19 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputPtr>;
v20 = v18[v19];
if v20 >= 0 goto label04;
label03:
v21 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: boolean loadMore(int)>(v17);
if v21 != 0 goto label04;
v22 = (int) -1;
return v22;
label04:
v23 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[] _inputBuffer>;
v24 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputPtr>;
v25 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputEnd>;
label05:
if v7 >= v6 goto label19;
v26 = v24;
v24 = v24 + 1;
v27 = v23[v26];
if v27 < 0 goto label09;
v28 = v7;
v7 = v7 + 1;
v1[v28] = v27;
v29 = v6 - v7;
v30 = v25 - v24;
v31 = v24;
if v30 >= v29 goto label06;
v32 = v30;
goto label07;
label06:
v32 = v29;
label07:
v33 = v31 + v32;
label08:
if v24 >= v33 goto label19;
v34 = v24;
v24 = v24 + 1;
v27 = v23[v34];
if v27 < 0 goto label09;
v35 = v7;
v7 = v7 + 1;
v1[v35] = v27;
goto label08;
label09:
v36 = v27 & 224;
if v36 != 192 goto label10;
v27 = v27 & 31;
v37 = 1;
goto label13;
label10:
v38 = v27 & 240;
if v38 != 224 goto label11;
v27 = v27 & 15;
v37 = 2;
goto label13;
label11:
v39 = v27 & 248;
if v39 != 240 goto label12;
v27 = v27 & 15;
v37 = 3;
goto label13;
label12:
v40 = v27 & 255;
v41 = v7 - v2;
specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: void reportInvalidInitial(int,int)>(v40, v41);
v37 = 1;
label13:
v42 = v25 - v24;
if v42 >= v37 goto label14;
v24 = v24 - 1;
goto label19;
label14:
v43 = v24;
v24 = v24 + 1;
v44 = v23[v43];
v45 = v44 & 192;
if v45 == 128 goto label15;
v46 = v44 & 255;
v47 = v7 - v2;
specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: void reportInvalidOther(int,int)>(v46, v47);
label15:
v48 = v27 << 6;
v49 = v44 & 63;
v50 = v48 | v49;
if v37 <= 1 goto label18;
v51 = v24;
v24 = v24 + 1;
v52 = v23[v51];
v53 = v52 & 192;
if v53 == 128 goto label16;
v54 = v52 & 255;
v55 = v7 - v2;
specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: void reportInvalidOther(int,int)>(v54, v55);
label16:
v56 = v50 << 6;
v57 = v52 & 63;
v50 = v56 | v57;
if v37 <= 2 goto label18;
v58 = v24;
v24 = v24 + 1;
v59 = v23[v58];
v60 = v59 & 192;
if v60 == 128 goto label17;
v61 = v59 & 255;
v62 = v7 - v2;
specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: void reportInvalidOther(int,int)>(v61, v62);
label17:
v63 = v50 << 6;
v64 = v59 & 63;
v65 = v63 | v64;
v66 = v65 - 65536;
v67 = v7;
v7 = v7 + 1;
v68 = v66 >> 10;
v69 = (int) 55296;
v70 = v69 + v68;
v1[v67] = v70;
v71 = v66 & 1023;
v72 = (int) 56320;
v50 = v72 | v71;
if v7 < v6 goto label18;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _surrogate> = v50;
goto label19;
label18:
v73 = v7;
v7 = v7 + 1;
v1[v73] = v50;
if v24 < v25 goto label05;
label19:
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputPtr> = v24;
v74 = v7 - v2;
v75 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _charCount>;
v76 = v75 + v74;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _charCount> = v76;
return v74;
}
protected final java.io.InputStream getStream()
{
com.fasterxml.jackson.dataformat.yaml.UTF8Reader v0;
java.io.InputStream v1;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.UTF8Reader;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: java.io.InputStream _inputSource>;
return v1;
}
protected final int readBytes() throws java.io.IOException
{
byte[] v3, v4;
com.fasterxml.jackson.dataformat.yaml.UTF8Reader v0;
int v5, v6, v7;
java.io.InputStream v1, v2;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.UTF8Reader;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputPtr> = 0;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputEnd> = 0;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: java.io.InputStream _inputSource>;
if v1 == null goto label2;
v2 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: java.io.InputStream _inputSource>;
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[] _inputBuffer>;
v4 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[] _inputBuffer>;
v5 = lengthof v4;
v6 = virtualinvoke v2.<java.io.InputStream: int read(byte[],int,int)>(v3, 0, v5);
if v6 <= 0 goto label1;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputEnd> = v6;
label1:
return v6;
label2:
v7 = (int) -1;
return v7;
}
protected final int readBytesAt(int) throws java.io.IOException
{
byte[] v4, v5;
com.fasterxml.jackson.dataformat.yaml.UTF8Reader v0;
int v1, v10, v11, v6, v7, v8, v9;
java.io.InputStream v2, v3;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.UTF8Reader;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: java.io.InputStream _inputSource>;
if v2 == null goto label2;
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: java.io.InputStream _inputSource>;
v4 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[] _inputBuffer>;
v5 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[] _inputBuffer>;
v6 = lengthof v5;
v7 = v6 - v1;
v8 = virtualinvoke v3.<java.io.InputStream: int read(byte[],int,int)>(v4, v1, v7);
if v8 <= 0 goto label1;
v9 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputEnd>;
v10 = v9 + v8;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputEnd> = v10;
label1:
return v8;
label2:
v11 = (int) -1;
return v11;
}
public final void freeBuffers()
{
byte[] v2;
byte[][] v1, v3;
com.fasterxml.jackson.dataformat.yaml.UTF8Reader v0;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.UTF8Reader;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[][] _bufferHolder>;
if v1 == null goto label1;
v2 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[] _inputBuffer>;
if v2 == null goto label1;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[] _inputBuffer> = null;
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[][] _bufferHolder>;
v3[0] = v2;
label1:
return;
}
private void reportInvalidInitial(int, int) throws java.io.IOException
{
com.fasterxml.jackson.dataformat.yaml.UTF8Reader v0;
java.io.CharConversionException v10;
int v1, v2, v3, v4, v5, v6, v7, v8, v9;
java.lang.String v11, v12;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.UTF8Reader;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _byteCount>;
v4 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputPtr>;
v5 = v3 + v4;
v6 = v5 - 1;
v7 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _charCount>;
v8 = v7 + v2;
v9 = v8 + 1;
v10 = new java.io.CharConversionException;
v11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v1);
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int,int)>(v11, v9, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid UTF-8 start byte 0x\u0001 (at char #\u0001, byte #\u0001)");
specialinvoke v10.<java.io.CharConversionException: void <init>(java.lang.String)>(v12);
throw v10;
}
private void reportInvalidOther(int, int) throws java.io.IOException
{
com.fasterxml.jackson.dataformat.yaml.UTF8Reader v0;
java.io.CharConversionException v9;
int v1, v2, v3, v4, v5, v6, v7, v8;
java.lang.String v10, v11;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.UTF8Reader;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _byteCount>;
v4 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputPtr>;
v5 = v3 + v4;
v6 = v5 - 1;
v7 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _charCount>;
v8 = v7 + v2;
v9 = new java.io.CharConversionException;
v10 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v1);
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int,int)>(v10, v8, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid UTF-8 middle byte 0x\u0001 (at char #\u0001, byte #\u0001)");
specialinvoke v9.<java.io.CharConversionException: void <init>(java.lang.String)>(v11);
throw v9;
}
private void reportUnexpectedEOF(int, int) throws java.io.IOException
{
com.fasterxml.jackson.dataformat.yaml.UTF8Reader v0;
java.io.CharConversionException v6;
int v1, v2, v3, v4, v5;
java.lang.String v7;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.UTF8Reader;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _byteCount>;
v4 = v3 + v1;
v5 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _charCount>;
v6 = new java.io.CharConversionException;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int,int)>(v1, v2, v5, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected EOF in the middle of a multi-byte char: got \u0001, needed \u0001, at char #\u0001, byte #\u0001)");
specialinvoke v6.<java.io.CharConversionException: void <init>(java.lang.String)>(v7);
throw v6;
}
private boolean loadMore(int) throws java.io.IOException
{
byte[] v14, v15, v20;
java.lang.Integer v11;
byte v18, v22, v24;
boolean v7;
java.lang.Object[] v10;
short v23, v25, v26;
com.fasterxml.jackson.dataformat.yaml.UTF8Reader v0;
int v1, v13, v16, v17, v19, v2, v21, v27, v28, v29, v3, v30, v31, v32, v4, v5, v6;
java.lang.String v12;
java.io.IOException v9;
java.io.InputStream v8;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.UTF8Reader;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _byteCount>;
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputEnd>;
v4 = v3 - v1;
v5 = v2 + v4;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _byteCount> = v5;
if v1 <= 0 goto label04;
v6 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputPtr>;
if v6 <= 0 goto label06;
v7 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: boolean canModifyBuffer()>();
if v7 != 0 goto label01;
v8 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: java.io.InputStream _inputSource>;
if v8 != null goto label01;
v9 = new java.io.IOException;
v10 = newarray (java.lang.Object)[1];
v11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v10[0] = v11;
v12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("End-of-input after first %d byte(s) of a UTF-8 character: needed at least one more", v10);
specialinvoke v9.<java.io.IOException: void <init>(java.lang.String)>(v12);
throw v9;
label01:
v13 = 0;
label02:
if v13 >= v1 goto label03;
v14 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[] _inputBuffer>;
v15 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[] _inputBuffer>;
v16 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputPtr>;
v17 = v16 + v13;
v18 = v15[v17];
v14[v13] = v18;
v13 = v13 + 1;
goto label02;
label03:
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputPtr> = 0;
v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputEnd> = v1;
goto label06;
label04:
v19 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int readBytes()>();
if v19 >= 1 goto label06;
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: void freeBuffers()>();
if v19 >= 0 goto label05;
return 0;
label05:
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: void reportStrangeStream()>();
label06:
v20 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: byte[] _inputBuffer>;
v21 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputPtr>;
v22 = v20[v21];
if v22 < 0 goto label07;
return 1;
label07:
v23 = v22 & 224;
if v23 != 192 goto label08;
v24 = 2;
goto label11;
label08:
v25 = v22 & 240;
if v25 != 224 goto label09;
v24 = 3;
goto label11;
label09:
v26 = v22 & 248;
if v26 != 240 goto label10;
v24 = 4;
goto label11;
label10:
return 1;
label11:
v27 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputPtr>;
v28 = v27 + v24;
v29 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputEnd>;
if v28 <= v29 goto label13;
v30 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputEnd>;
v31 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int readBytesAt(int)>(v30);
if v31 >= 1 goto label11;
if v31 >= 0 goto label12;
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: void freeBuffers()>();
v32 = v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: int _inputEnd>;
specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: void reportUnexpectedEOF(int,int)>(v32, v24);
label12:
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: void reportStrangeStream()>();
goto label11;
label13:
return 1;
}
protected void reportBounds(char[], int, int) throws java.io.IOException
{
com.fasterxml.jackson.dataformat.yaml.UTF8Reader v0;
int v2, v3, v5;
char[] v1;
java.lang.ArrayIndexOutOfBoundsException v4;
java.lang.String v6;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.UTF8Reader;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = new java.lang.ArrayIndexOutOfBoundsException;
v5 = lengthof v1;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v2, v3, v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("read(buf,\u0001,\u0001), cbuf[\u0001]");
specialinvoke v4.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>(v6);
throw v4;
}
protected void reportStrangeStream() throws java.io.IOException
{
java.io.IOException v1;
com.fasterxml.jackson.dataformat.yaml.UTF8Reader v0;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.UTF8Reader;
v1 = new java.io.IOException;
specialinvoke v1.<java.io.IOException: void <init>(java.lang.String)>("Strange I/O stream, returned 0 bytes on read");
throw v1;
}
static void <clinit>()
{
java.lang.ThreadLocal v0;
v0 = new java.lang.ThreadLocal;
specialinvoke v0.<java.lang.ThreadLocal: void <init>()>();
<com.fasterxml.jackson.dataformat.yaml.UTF8Reader: java.lang.ThreadLocal _bufferRecycler> = v0;
return;
}
}