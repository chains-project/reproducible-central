final class io.netty.buffer.ReadOnlyUnsafeDirectByteBuf extends io.netty.buffer.ReadOnlyByteBufferBuf
{
private final long memoryAddress;
void <init>(io.netty.buffer.ByteBufAllocator, java.nio.ByteBuffer)
{
io.netty.buffer.ByteBufAllocator v1;
io.netty.buffer.ReadOnlyUnsafeDirectByteBuf v0;
long v4;
java.nio.ByteBuffer v2, v3;
v0 := @this: io.netty.buffer.ReadOnlyUnsafeDirectByteBuf;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 := @parameter1: java.nio.ByteBuffer;
specialinvoke v0.<io.netty.buffer.ReadOnlyByteBufferBuf: void <init>(io.netty.buffer.ByteBufAllocator,java.nio.ByteBuffer)>(v1, v2);
v3 = v0.<io.netty.buffer.ReadOnlyUnsafeDirectByteBuf: java.nio.ByteBuffer buffer>;
v4 = staticinvoke <io.netty.util.internal.PlatformDependent: long directBufferAddress(java.nio.ByteBuffer)>(v3);
v0.<io.netty.buffer.ReadOnlyUnsafeDirectByteBuf: long memoryAddress> = v4;
return;
}
protected byte _getByte(int)
{
byte v3;
int v1;
io.netty.buffer.ReadOnlyUnsafeDirectByteBuf v0;
long v2;
v0 := @this: io.netty.buffer.ReadOnlyUnsafeDirectByteBuf;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.netty.buffer.ReadOnlyUnsafeDirectByteBuf: long addr(int)>(v1);
v3 = staticinvoke <io.netty.buffer.UnsafeByteBufUtil: byte getByte(long)>(v2);
return v3;
}
protected short _getShort(int)
{
short v3;
int v1;
io.netty.buffer.ReadOnlyUnsafeDirectByteBuf v0;
long v2;
v0 := @this: io.netty.buffer.ReadOnlyUnsafeDirectByteBuf;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.netty.buffer.ReadOnlyUnsafeDirectByteBuf: long addr(int)>(v1);
v3 = staticinvoke <io.netty.buffer.UnsafeByteBufUtil: short getShort(long)>(v2);
return v3;
}
protected int _getUnsignedMedium(int)
{
int v1, v3;
io.netty.buffer.ReadOnlyUnsafeDirectByteBuf v0;
long v2;
v0 := @this: io.netty.buffer.ReadOnlyUnsafeDirectByteBuf;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.netty.buffer.ReadOnlyUnsafeDirectByteBuf: long addr(int)>(v1);
v3 = staticinvoke <io.netty.buffer.UnsafeByteBufUtil: int getUnsignedMedium(long)>(v2);
return v3;
}
protected int _getInt(int)
{
int v1, v3;
io.netty.buffer.ReadOnlyUnsafeDirectByteBuf v0;
long v2;
v0 := @this: io.netty.buffer.ReadOnlyUnsafeDirectByteBuf;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.netty.buffer.ReadOnlyUnsafeDirectByteBuf: long addr(int)>(v1);
v3 = staticinvoke <io.netty.buffer.UnsafeByteBufUtil: int getInt(long)>(v2);
return v3;
}
protected long _getLong(int)
{
int v1;
io.netty.buffer.ReadOnlyUnsafeDirectByteBuf v0;
long v2, v3;
v0 := @this: io.netty.buffer.ReadOnlyUnsafeDirectByteBuf;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.netty.buffer.ReadOnlyUnsafeDirectByteBuf: long addr(int)>(v1);
v3 = staticinvoke <io.netty.buffer.UnsafeByteBufUtil: long getLong(long)>(v2);
return v3;
}
public io.netty.buffer.ByteBuf getBytes(int, io.netty.buffer.ByteBuf, int, int)
{
byte[] v15;
java.lang.IndexOutOfBoundsException v7;
long v10, v11, v12, v14;
io.netty.buffer.ByteBuf v2;
int v1, v16, v17, v3, v4, v5, v6;
java.lang.String v8;
boolean v13, v9;
io.netty.buffer.ReadOnlyUnsafeDirectByteBuf v0;
v0 := @this: io.netty.buffer.ReadOnlyUnsafeDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: int;
v4 := @parameter3: int;
virtualinvoke v0.<io.netty.buffer.ReadOnlyUnsafeDirectByteBuf: void checkIndex(int,int)>(v1, v4);
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "dst");
if v3 < 0 goto label1;
v5 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int capacity()>();
v6 = v5 - v4;
if v3 <= v6 goto label2;
label1:
v7 = new java.lang.IndexOutOfBoundsException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("dstIndex: \u0001");
specialinvoke v7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v7;
label2:
v9 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean hasMemoryAddress()>();
if v9 == 0 goto label3;
v10 = specialinvoke v0.<io.netty.buffer.ReadOnlyUnsafeDirectByteBuf: long addr(int)>(v1);
v11 = virtualinvoke v2.<io.netty.buffer.ByteBuf: long memoryAddress()>();
v12 = v11 + v3;
staticinvoke <io.netty.util.internal.PlatformDependent: void copyMemory(long,long,long)>(v10, v12, v4);
goto label5;
label3:
v13 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean hasArray()>();
if v13 == 0 goto label4;
v14 = specialinvoke v0.<io.netty.buffer.ReadOnlyUnsafeDirectByteBuf: long addr(int)>(v1);
v15 = virtualinvoke v2.<io.netty.buffer.ByteBuf: byte[] array()>();
v16 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v17 = v16 + v3;
staticinvoke <io.netty.util.internal.PlatformDependent: void copyMemory(long,byte[],int,long)>(v14, v15, v17, v4);
goto label5;
label4:
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)>(v3, v0, v1, v4);
label5:
return v0;
}
public io.netty.buffer.ByteBuf getBytes(int, byte[], int, int)
{
byte[] v2;
java.lang.IndexOutOfBoundsException v7;
java.lang.Object[] v8;
long v14;
java.lang.Integer v10, v12, v9;
int v1, v11, v3, v4, v5, v6;
io.netty.buffer.ReadOnlyUnsafeDirectByteBuf v0;
java.lang.String v13;
v0 := @this: io.netty.buffer.ReadOnlyUnsafeDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: byte[];
v3 := @parameter2: int;
v4 := @parameter3: int;
virtualinvoke v0.<io.netty.buffer.ReadOnlyUnsafeDirectByteBuf: void checkIndex(int,int)>(v1, v4);
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "dst");
if v3 < 0 goto label1;
v5 = lengthof v2;
v6 = v5 - v4;
if v3 <= v6 goto label2;
label1:
v7 = new java.lang.IndexOutOfBoundsException;
v8 = newarray (java.lang.Object)[3];
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v8[0] = v9;
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
v8[1] = v10;
v11 = lengthof v2;
v12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v11);
v8[2] = v12;
v13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("dstIndex: %d, length: %d (expected: range(0, %d))", v8);
specialinvoke v7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v13);
throw v7;
label2:
if v4 == 0 goto label3;
v14 = specialinvoke v0.<io.netty.buffer.ReadOnlyUnsafeDirectByteBuf: long addr(int)>(v1);
staticinvoke <io.netty.util.internal.PlatformDependent: void copyMemory(long,byte[],int,long)>(v14, v2, v3, v4);
label3:
return v0;
}
public io.netty.buffer.ByteBuf copy(int, int)
{
io.netty.buffer.ByteBufAllocator v3;
long v7, v8;
io.netty.buffer.ByteBuf v5;
int v1, v2, v4;
io.netty.buffer.ReadOnlyUnsafeDirectByteBuf v0;
boolean v6;
v0 := @this: io.netty.buffer.ReadOnlyUnsafeDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.ReadOnlyUnsafeDirectByteBuf: void checkIndex(int,int)>(v1, v2);
v3 = virtualinvoke v0.<io.netty.buffer.ReadOnlyUnsafeDirectByteBuf: io.netty.buffer.ByteBufAllocator alloc()>();
v4 = virtualinvoke v0.<io.netty.buffer.ReadOnlyUnsafeDirectByteBuf: int maxCapacity()>();
v5 = interfaceinvoke v3.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf directBuffer(int,int)>(v2, v4);
if v2 == 0 goto label2;
v6 = virtualinvoke v5.<io.netty.buffer.ByteBuf: boolean hasMemoryAddress()>();
if v6 == 0 goto label1;
v7 = specialinvoke v0.<io.netty.buffer.ReadOnlyUnsafeDirectByteBuf: long addr(int)>(v1);
v8 = virtualinvoke v5.<io.netty.buffer.ByteBuf: long memoryAddress()>();
staticinvoke <io.netty.util.internal.PlatformDependent: void copyMemory(long,long,long)>(v7, v8, v2);
virtualinvoke v5.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setIndex(int,int)>(0, v2);
goto label2;
label1:
virtualinvoke v5.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)>(v0, v1, v2);
label2:
return v5;
}
public boolean hasMemoryAddress()
{
io.netty.buffer.ReadOnlyUnsafeDirectByteBuf v0;
v0 := @this: io.netty.buffer.ReadOnlyUnsafeDirectByteBuf;
return 1;
}
public long memoryAddress()
{
io.netty.buffer.ReadOnlyUnsafeDirectByteBuf v0;
long v1;
v0 := @this: io.netty.buffer.ReadOnlyUnsafeDirectByteBuf;
v1 = v0.<io.netty.buffer.ReadOnlyUnsafeDirectByteBuf: long memoryAddress>;
return v1;
}
private long addr(int)
{
int v1;
io.netty.buffer.ReadOnlyUnsafeDirectByteBuf v0;
long v2, v3;
v0 := @this: io.netty.buffer.ReadOnlyUnsafeDirectByteBuf;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.ReadOnlyUnsafeDirectByteBuf: long memoryAddress>;
v3 = v2 + v1;
return v3;
}
}