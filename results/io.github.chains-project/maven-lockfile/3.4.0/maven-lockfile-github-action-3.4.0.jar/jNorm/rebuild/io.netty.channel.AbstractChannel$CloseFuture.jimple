final class io.netty.channel.AbstractChannel$CloseFuture extends io.netty.channel.DefaultChannelPromise
{
void <init>(io.netty.channel.AbstractChannel)
{
io.netty.channel.AbstractChannel$CloseFuture v0;
io.netty.channel.AbstractChannel v1;
v0 := @this: io.netty.channel.AbstractChannel$CloseFuture;
v1 := @parameter0: io.netty.channel.AbstractChannel;
specialinvoke v0.<io.netty.channel.DefaultChannelPromise: void <init>(io.netty.channel.Channel)>(v1);
return;
}
public io.netty.channel.ChannelPromise setSuccess()
{
io.netty.channel.AbstractChannel$CloseFuture v0;
java.lang.IllegalStateException v1;
v0 := @this: io.netty.channel.AbstractChannel$CloseFuture;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>()>();
throw v1;
}
public io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)
{
io.netty.channel.AbstractChannel$CloseFuture v0;
java.lang.Throwable v1;
java.lang.IllegalStateException v2;
v0 := @this: io.netty.channel.AbstractChannel$CloseFuture;
v1 := @parameter0: java.lang.Throwable;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
public boolean trySuccess()
{
io.netty.channel.AbstractChannel$CloseFuture v0;
java.lang.IllegalStateException v1;
v0 := @this: io.netty.channel.AbstractChannel$CloseFuture;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>()>();
throw v1;
}
public boolean tryFailure(java.lang.Throwable)
{
io.netty.channel.AbstractChannel$CloseFuture v0;
java.lang.Throwable v1;
java.lang.IllegalStateException v2;
v0 := @this: io.netty.channel.AbstractChannel$CloseFuture;
v1 := @parameter0: java.lang.Throwable;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
boolean setClosed()
{
io.netty.channel.AbstractChannel$CloseFuture v0;
boolean v1;
v0 := @this: io.netty.channel.AbstractChannel$CloseFuture;
v1 = specialinvoke v0.<io.netty.channel.DefaultChannelPromise: boolean trySuccess()>();
return v1;
}
}