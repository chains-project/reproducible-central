final class io.netty.channel.AbstractChannelHandlerContext$WriteTask extends java.lang.Object implements java.lang.Runnable
{
private static final io.netty.util.internal.ObjectPool RECYCLER;
private static final boolean ESTIMATE_TASK_SIZE_ON_SUBMIT;
private static final int WRITE_TASK_OVERHEAD;
private final io.netty.util.internal.ObjectPool$Handle handle;
private io.netty.channel.AbstractChannelHandlerContext ctx;
private java.lang.Object msg;
private io.netty.channel.ChannelPromise promise;
private int size;
static io.netty.channel.AbstractChannelHandlerContext$WriteTask newInstance(io.netty.channel.AbstractChannelHandlerContext, java.lang.Object, io.netty.channel.ChannelPromise, boolean)
{
io.netty.channel.ChannelPromise v2;
io.netty.channel.AbstractChannelHandlerContext v0;
java.lang.Object v1, v5;
io.netty.util.internal.ObjectPool v4;
boolean v3;
v0 := @parameter0: io.netty.channel.AbstractChannelHandlerContext;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: io.netty.channel.ChannelPromise;
v3 := @parameter3: boolean;
v4 = <io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.util.internal.ObjectPool RECYCLER>;
v5 = virtualinvoke v4.<io.netty.util.internal.ObjectPool: java.lang.Object get()>();
staticinvoke <io.netty.channel.AbstractChannelHandlerContext$WriteTask: void init(io.netty.channel.AbstractChannelHandlerContext$WriteTask,io.netty.channel.AbstractChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise,boolean)>(v5, v0, v1, v2, v3);
return v5;
}
private void <init>(io.netty.util.internal.ObjectPool$Handle)
{
io.netty.util.internal.ObjectPool$Handle v1;
io.netty.channel.AbstractChannelHandlerContext$WriteTask v0;
v0 := @this: io.netty.channel.AbstractChannelHandlerContext$WriteTask;
v1 := @parameter0: io.netty.util.internal.ObjectPool$Handle;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.util.internal.ObjectPool$Handle handle> = v1;
return;
}
protected static void init(io.netty.channel.AbstractChannelHandlerContext$WriteTask, io.netty.channel.AbstractChannelHandlerContext, java.lang.Object, io.netty.channel.ChannelPromise, boolean)
{
io.netty.channel.AbstractChannelHandlerContext$WriteTask v0;
io.netty.channel.MessageSizeEstimator$Handle v7;
io.netty.channel.ChannelPromise v3;
int v10, v12, v13, v14, v8, v9;
io.netty.channel.AbstractChannelHandlerContext v1;
java.lang.Object v2;
io.netty.channel.DefaultChannelPipeline v11, v6;
boolean v4, v5;
v0 := @parameter0: io.netty.channel.AbstractChannelHandlerContext$WriteTask;
v1 := @parameter1: io.netty.channel.AbstractChannelHandlerContext;
v2 := @parameter2: java.lang.Object;
v3 := @parameter3: io.netty.channel.ChannelPromise;
v4 := @parameter4: boolean;
v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.channel.AbstractChannelHandlerContext ctx> = v1;
v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: java.lang.Object msg> = v2;
v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.channel.ChannelPromise promise> = v3;
v5 = <io.netty.channel.AbstractChannelHandlerContext$WriteTask: boolean ESTIMATE_TASK_SIZE_ON_SUBMIT>;
if v5 == 0 goto label1;
v6 = v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.DefaultChannelPipeline pipeline>;
v7 = virtualinvoke v6.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.MessageSizeEstimator$Handle estimatorHandle()>();
v8 = interfaceinvoke v7.<io.netty.channel.MessageSizeEstimator$Handle: int size(java.lang.Object)>(v2);
v9 = <io.netty.channel.AbstractChannelHandlerContext$WriteTask: int WRITE_TASK_OVERHEAD>;
v10 = v8 + v9;
v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: int size> = v10;
v11 = v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.DefaultChannelPipeline pipeline>;
v12 = v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: int size>;
virtualinvoke v11.<io.netty.channel.DefaultChannelPipeline: void incrementPendingOutboundBytes(long)>(v12);
goto label2;
label1:
v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: int size> = 0;
label2:
if v4 == 0 goto label3;
v13 = v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: int size>;
v14 = v13 | -2147483648;
v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: int size> = v14;
label3:
return;
}
public void run()
{
java.lang.Throwable v8;
io.netty.channel.AbstractChannelHandlerContext$WriteTask v0;
io.netty.channel.ChannelPromise v4, v7;
int v1;
io.netty.channel.AbstractChannelHandlerContext v2, v5;
java.lang.Object v3, v6;
v0 := @this: io.netty.channel.AbstractChannelHandlerContext$WriteTask;
label1:
specialinvoke v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: void decrementPendingOutboundBytes()>();
v1 = v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: int size>;
if v1 < 0 goto label2;
v2 = v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.channel.AbstractChannelHandlerContext ctx>;
v3 = v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: java.lang.Object msg>;
v4 = v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.channel.ChannelPromise promise>;
virtualinvoke v2.<io.netty.channel.AbstractChannelHandlerContext: void invokeWrite(java.lang.Object,io.netty.channel.ChannelPromise)>(v3, v4);
goto label3;
label2:
v5 = v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.channel.AbstractChannelHandlerContext ctx>;
v6 = v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: java.lang.Object msg>;
v7 = v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.channel.ChannelPromise promise>;
virtualinvoke v5.<io.netty.channel.AbstractChannelHandlerContext: void invokeWriteAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)>(v6, v7);
label3:
specialinvoke v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: void recycle()>();
goto label5;
label4:
v8 := @caughtexception;
specialinvoke v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: void recycle()>();
throw v8;
label5:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
void cancel()
{
java.lang.Throwable v1;
io.netty.channel.AbstractChannelHandlerContext$WriteTask v0;
v0 := @this: io.netty.channel.AbstractChannelHandlerContext$WriteTask;
label1:
specialinvoke v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: void decrementPendingOutboundBytes()>();
label2:
specialinvoke v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: void recycle()>();
goto label4;
label3:
v1 := @caughtexception;
specialinvoke v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: void recycle()>();
throw v1;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void decrementPendingOutboundBytes()
{
int v4, v5;
io.netty.channel.AbstractChannelHandlerContext v2;
io.netty.channel.AbstractChannelHandlerContext$WriteTask v0;
io.netty.channel.DefaultChannelPipeline v3;
boolean v1;
v0 := @this: io.netty.channel.AbstractChannelHandlerContext$WriteTask;
v1 = <io.netty.channel.AbstractChannelHandlerContext$WriteTask: boolean ESTIMATE_TASK_SIZE_ON_SUBMIT>;
if v1 == 0 goto label1;
v2 = v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.channel.AbstractChannelHandlerContext ctx>;
v3 = v2.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.DefaultChannelPipeline pipeline>;
v4 = v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: int size>;
v5 = v4 & 2147483647;
virtualinvoke v3.<io.netty.channel.DefaultChannelPipeline: void decrementPendingOutboundBytes(long)>(v5);
label1:
return;
}
private void recycle()
{
io.netty.util.internal.ObjectPool$Handle v1;
io.netty.channel.AbstractChannelHandlerContext$WriteTask v0;
v0 := @this: io.netty.channel.AbstractChannelHandlerContext$WriteTask;
v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.channel.AbstractChannelHandlerContext ctx> = null;
v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: java.lang.Object msg> = null;
v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.channel.ChannelPromise promise> = null;
v1 = v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.util.internal.ObjectPool$Handle handle>;
interfaceinvoke v1.<io.netty.util.internal.ObjectPool$Handle: void recycle(java.lang.Object)>(v0);
return;
}
static void <clinit>()
{
int v3;
io.netty.channel.AbstractChannelHandlerContext$WriteTask$1 v0;
io.netty.util.internal.ObjectPool v1;
boolean v2;
v0 = new io.netty.channel.AbstractChannelHandlerContext$WriteTask$1;
specialinvoke v0.<io.netty.channel.AbstractChannelHandlerContext$WriteTask$1: void <init>()>();
v1 = staticinvoke <io.netty.util.internal.ObjectPool: io.netty.util.internal.ObjectPool newPool(io.netty.util.internal.ObjectPool$ObjectCreator)>(v0);
<io.netty.channel.AbstractChannelHandlerContext$WriteTask: io.netty.util.internal.ObjectPool RECYCLER> = v1;
v2 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>("io.netty.transport.estimateSizeOnSubmit", 1);
<io.netty.channel.AbstractChannelHandlerContext$WriteTask: boolean ESTIMATE_TASK_SIZE_ON_SUBMIT> = v2;
v3 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>("io.netty.transport.writeTaskSizeOverhead", 32);
<io.netty.channel.AbstractChannelHandlerContext$WriteTask: int WRITE_TASK_OVERHEAD> = v3;
return;
}
}