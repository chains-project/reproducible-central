public abstract class io.netty.channel.ChannelInitializer extends io.netty.channel.ChannelInboundHandlerAdapter
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private final java.util.Set initMap;
public void <init>()
{
java.util.concurrent.ConcurrentHashMap v1;
java.util.Set v2;
io.netty.channel.ChannelInitializer v0;
v0 := @this: io.netty.channel.ChannelInitializer;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void <init>()>();
v1 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v2 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>(v1);
v0.<io.netty.channel.ChannelInitializer: java.util.Set initMap> = v2;
return;
}
protected abstract void initChannel(io.netty.channel.Channel) throws java.lang.Exception;
public final void channelRegistered(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelInitializer v0;
io.netty.channel.ChannelPipeline v3;
boolean v2;
v0 := @this: io.netty.channel.ChannelInitializer;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = specialinvoke v0.<io.netty.channel.ChannelInitializer: boolean initChannel(io.netty.channel.ChannelHandlerContext)>(v1);
if v2 == 0 goto label1;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v3.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelRegistered()>();
specialinvoke v0.<io.netty.channel.ChannelInitializer: void removeState(io.netty.channel.ChannelHandlerContext)>(v1);
goto label2;
label1:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRegistered()>();
label2:
return;
}
public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable) throws java.lang.Exception
{
java.lang.Throwable v2;
io.netty.channel.ChannelInitializer v0;
io.netty.channel.Channel v6;
io.netty.channel.ChannelHandlerContext v1;
io.netty.util.internal.logging.InternalLogger v3, v5;
java.lang.String v7;
boolean v4;
v0 := @this: io.netty.channel.ChannelInitializer;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Throwable;
v3 = <io.netty.channel.ChannelInitializer: io.netty.util.internal.logging.InternalLogger logger>;
v4 = interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: boolean isWarnEnabled()>();
if v4 == 0 goto label1;
v5 = <io.netty.channel.ChannelInitializer: io.netty.util.internal.logging.InternalLogger logger>;
v6 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.channel.Channel)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to initialize a channel. Closing: \u0001");
interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Throwable)>(v7, v2);
label1:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close()>();
return;
}
public void handlerAdded(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.Channel v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelInitializer v0;
boolean v3, v4;
v0 := @this: io.netty.channel.ChannelInitializer;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel: boolean isRegistered()>();
if v3 == 0 goto label1;
v4 = specialinvoke v0.<io.netty.channel.ChannelInitializer: boolean initChannel(io.netty.channel.ChannelHandlerContext)>(v1);
if v4 == 0 goto label1;
specialinvoke v0.<io.netty.channel.ChannelInitializer: void removeState(io.netty.channel.ChannelHandlerContext)>(v1);
label1:
return;
}
public void handlerRemoved(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
java.util.Set v2;
io.netty.channel.ChannelInitializer v0;
v0 := @this: io.netty.channel.ChannelInitializer;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = v0.<io.netty.channel.ChannelInitializer: java.util.Set initMap>;
interfaceinvoke v2.<java.util.Set: boolean remove(java.lang.Object)>(v1);
return;
}
private boolean initChannel(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
java.lang.Throwable v10, v7;
io.netty.channel.ChannelInitializer v0;
java.util.Set v2;
io.netty.channel.ChannelPipeline v12, v6, v9;
io.netty.channel.Channel v4;
io.netty.channel.ChannelHandlerContext v1;
boolean v11, v3, v5, v8;
v0 := @this: io.netty.channel.ChannelInitializer;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = v0.<io.netty.channel.ChannelInitializer: java.util.Set initMap>;
v3 = interfaceinvoke v2.<java.util.Set: boolean add(java.lang.Object)>(v1);
if v3 == 0 goto label8;
label1:
v4 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
virtualinvoke v0.<io.netty.channel.ChannelInitializer: void initChannel(io.netty.channel.Channel)>(v4);
label2:
v5 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: boolean isRemoved()>();
if v5 != 0 goto label7;
v6 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v6.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
goto label7;
label3:
v7 := @caughtexception;
virtualinvoke v0.<io.netty.channel.ChannelInitializer: void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)>(v1, v7);
label4:
v8 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: boolean isRemoved()>();
if v8 != 0 goto label7;
v9 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v9.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
goto label7;
label5:
v10 := @caughtexception;
v11 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: boolean isRemoved()>();
if v11 != 0 goto label6;
v12 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v12.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
label6:
throw v10;
label7:
return 1;
label8:
return 0;
catch java.lang.Throwable from label1 to label2 with label3;
catch java.lang.Throwable from label3 to label4 with label5;
}
private void removeState(io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.ChannelInitializer$1 v5;
io.netty.util.concurrent.EventExecutor v4;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelInitializer v0;
java.util.Set v3;
boolean v2;
v0 := @this: io.netty.channel.ChannelInitializer;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: boolean isRemoved()>();
if v2 == 0 goto label1;
v3 = v0.<io.netty.channel.ChannelInitializer: java.util.Set initMap>;
interfaceinvoke v3.<java.util.Set: boolean remove(java.lang.Object)>(v1);
goto label2;
label1:
v4 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v5 = new io.netty.channel.ChannelInitializer$1;
specialinvoke v5.<io.netty.channel.ChannelInitializer$1: void <init>(io.netty.channel.ChannelInitializer,io.netty.channel.ChannelHandlerContext)>(v0, v1);
interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v5);
label2:
return;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/channel/ChannelInitializer;");
<io.netty.channel.ChannelInitializer: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}