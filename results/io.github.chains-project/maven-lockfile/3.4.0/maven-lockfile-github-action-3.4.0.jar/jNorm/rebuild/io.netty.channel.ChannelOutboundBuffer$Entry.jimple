final class io.netty.channel.ChannelOutboundBuffer$Entry extends java.lang.Object
{
private static final io.netty.util.internal.ObjectPool RECYCLER;
private final io.netty.util.Recycler$EnhancedHandle handle;
io.netty.channel.ChannelOutboundBuffer$Entry next;
java.lang.Object msg;
java.nio.ByteBuffer[] bufs;
java.nio.ByteBuffer buf;
io.netty.channel.ChannelPromise promise;
long progress;
long total;
int pendingSize;
int count;
boolean cancelled;
private void <init>(io.netty.util.internal.ObjectPool$Handle)
{
int v2;
io.netty.util.internal.ObjectPool$Handle v1;
io.netty.channel.ChannelOutboundBuffer$Entry v0;
v0 := @this: io.netty.channel.ChannelOutboundBuffer$Entry;
v1 := @parameter0: io.netty.util.internal.ObjectPool$Handle;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = (int) -1;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: int count> = v2;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: io.netty.util.Recycler$EnhancedHandle handle> = v1;
return;
}
static io.netty.channel.ChannelOutboundBuffer$Entry newInstance(java.lang.Object, int, long, io.netty.channel.ChannelPromise)
{
long v2;
io.netty.util.internal.ObjectPool v4;
io.netty.channel.ChannelPromise v3;
int v1, v6, v7;
java.lang.Object v0, v5;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: int;
v2 := @parameter2: long;
v3 := @parameter3: io.netty.channel.ChannelPromise;
v4 = <io.netty.channel.ChannelOutboundBuffer$Entry: io.netty.util.internal.ObjectPool RECYCLER>;
v5 = virtualinvoke v4.<io.netty.util.internal.ObjectPool: java.lang.Object get()>();
v5.<io.netty.channel.ChannelOutboundBuffer$Entry: java.lang.Object msg> = v0;
v6 = <io.netty.channel.ChannelOutboundBuffer: int CHANNEL_OUTBOUND_BUFFER_ENTRY_OVERHEAD>;
v7 = v1 + v6;
v5.<io.netty.channel.ChannelOutboundBuffer$Entry: int pendingSize> = v7;
v5.<io.netty.channel.ChannelOutboundBuffer$Entry: long total> = v2;
v5.<io.netty.channel.ChannelOutboundBuffer$Entry: io.netty.channel.ChannelPromise promise> = v3;
return v5;
}
int cancel()
{
io.netty.buffer.ByteBuf v4;
int v2;
java.lang.Object v3;
io.netty.channel.ChannelOutboundBuffer$Entry v0;
boolean v1;
v0 := @this: io.netty.channel.ChannelOutboundBuffer$Entry;
v1 = v0.<io.netty.channel.ChannelOutboundBuffer$Entry: boolean cancelled>;
if v1 != 0 goto label1;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: boolean cancelled> = 1;
v2 = v0.<io.netty.channel.ChannelOutboundBuffer$Entry: int pendingSize>;
v3 = v0.<io.netty.channel.ChannelOutboundBuffer$Entry: java.lang.Object msg>;
staticinvoke <io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>(v3);
v4 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: java.lang.Object msg> = v4;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: int pendingSize> = 0;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: long total> = 0L;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: long progress> = 0L;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: java.nio.ByteBuffer[] bufs> = null;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: java.nio.ByteBuffer buf> = null;
return v2;
label1:
return 0;
}
void unguardedRecycle()
{
int v1;
io.netty.channel.ChannelOutboundBuffer$Entry v0;
io.netty.util.Recycler$EnhancedHandle v2;
v0 := @this: io.netty.channel.ChannelOutboundBuffer$Entry;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: io.netty.channel.ChannelOutboundBuffer$Entry next> = null;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: java.nio.ByteBuffer[] bufs> = null;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: java.nio.ByteBuffer buf> = null;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: java.lang.Object msg> = null;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: io.netty.channel.ChannelPromise promise> = null;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: long progress> = 0L;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: long total> = 0L;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: int pendingSize> = 0;
v1 = (int) -1;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: int count> = v1;
v0.<io.netty.channel.ChannelOutboundBuffer$Entry: boolean cancelled> = 0;
v2 = v0.<io.netty.channel.ChannelOutboundBuffer$Entry: io.netty.util.Recycler$EnhancedHandle handle>;
virtualinvoke v2.<io.netty.util.Recycler$EnhancedHandle: void unguardedRecycle(java.lang.Object)>(v0);
return;
}
io.netty.channel.ChannelOutboundBuffer$Entry unguardedRecycleAndGetNext()
{
io.netty.channel.ChannelOutboundBuffer$Entry v0, v1;
v0 := @this: io.netty.channel.ChannelOutboundBuffer$Entry;
v1 = v0.<io.netty.channel.ChannelOutboundBuffer$Entry: io.netty.channel.ChannelOutboundBuffer$Entry next>;
virtualinvoke v0.<io.netty.channel.ChannelOutboundBuffer$Entry: void unguardedRecycle()>();
return v1;
}
static void <clinit>()
{
io.netty.util.internal.ObjectPool v1;
io.netty.channel.ChannelOutboundBuffer$Entry$1 v0;
v0 = new io.netty.channel.ChannelOutboundBuffer$Entry$1;
specialinvoke v0.<io.netty.channel.ChannelOutboundBuffer$Entry$1: void <init>()>();
v1 = staticinvoke <io.netty.util.internal.ObjectPool: io.netty.util.internal.ObjectPool newPool(io.netty.util.internal.ObjectPool$ObjectCreator)>(v0);
<io.netty.channel.ChannelOutboundBuffer$Entry: io.netty.util.internal.ObjectPool RECYCLER> = v1;
return;
}
}