class io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext extends java.lang.Object implements io.netty.channel.ChannelHandlerContext
{
private final io.netty.channel.ChannelHandlerContext ctx;
private final io.netty.channel.ChannelHandler handler;
boolean removed;
void <init>(io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelHandler)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelHandler v2;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.channel.ChannelHandler;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx> = v1;
v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandler handler> = v2;
return;
}
public io.netty.channel.Channel channel()
{
io.netty.channel.Channel v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
return v2;
}
public io.netty.util.concurrent.EventExecutor executor()
{
io.netty.util.concurrent.EventExecutor v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
return v2;
}
public java.lang.String name()
{
io.netty.channel.ChannelHandlerContext v1;
java.lang.String v2;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: java.lang.String name()>();
return v2;
}
public io.netty.channel.ChannelHandler handler()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelHandler v2;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
return v2;
}
public boolean isRemoved()
{
io.netty.channel.ChannelHandlerContext v2;
boolean v1, v3, v4;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: boolean isRemoved()>();
if v3 == 0 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
public io.netty.channel.ChannelHandlerContext fireChannelRegistered()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRegistered()>();
return v0;
}
public io.netty.channel.ChannelHandlerContext fireChannelUnregistered()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelUnregistered()>();
return v0;
}
public io.netty.channel.ChannelHandlerContext fireChannelActive()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelActive()>();
return v0;
}
public io.netty.channel.ChannelHandlerContext fireChannelInactive()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelInactive()>();
return v0;
}
public io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.channel.ChannelHandlerContext v2;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)>(v1);
return v0;
}
public io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)
{
io.netty.channel.ChannelHandlerContext v2;
java.lang.Object v1;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)>(v1);
return v0;
}
public io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)
{
io.netty.channel.ChannelHandlerContext v2;
java.lang.Object v1;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>(v1);
return v0;
}
public io.netty.channel.ChannelHandlerContext fireChannelReadComplete()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelReadComplete()>();
return v0;
}
public io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()>();
return v0;
}
public io.netty.channel.ChannelFuture bind(java.net.SocketAddress)
{
io.netty.channel.ChannelHandlerContext v2;
java.net.SocketAddress v1;
io.netty.channel.ChannelFuture v3;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: java.net.SocketAddress;
v2 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture bind(java.net.SocketAddress)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture connect(java.net.SocketAddress)
{
io.netty.channel.ChannelHandlerContext v2;
java.net.SocketAddress v1;
io.netty.channel.ChannelFuture v3;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: java.net.SocketAddress;
v2 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture connect(java.net.SocketAddress)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture connect(java.net.SocketAddress, java.net.SocketAddress)
{
io.netty.channel.ChannelHandlerContext v3;
java.net.SocketAddress v1, v2;
io.netty.channel.ChannelFuture v4;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
v3 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v4 = interfaceinvoke v3.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)>(v1, v2);
return v4;
}
public io.netty.channel.ChannelFuture disconnect()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelFuture v2;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture disconnect()>();
return v2;
}
public io.netty.channel.ChannelFuture close()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelFuture v2;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close()>();
return v2;
}
public io.netty.channel.ChannelFuture deregister()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelFuture v2;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture deregister()>();
return v2;
}
public io.netty.channel.ChannelFuture bind(java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelHandlerContext v3;
io.netty.channel.ChannelPromise v2;
java.net.SocketAddress v1;
io.netty.channel.ChannelFuture v4;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v4 = interfaceinvoke v3.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v1, v2);
return v4;
}
public io.netty.channel.ChannelFuture connect(java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelHandlerContext v3;
io.netty.channel.ChannelPromise v2;
java.net.SocketAddress v1;
io.netty.channel.ChannelFuture v4;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v4 = interfaceinvoke v3.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture connect(java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v1, v2);
return v4;
}
public io.netty.channel.ChannelFuture connect(java.net.SocketAddress, java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelHandlerContext v4;
io.netty.channel.ChannelPromise v3;
java.net.SocketAddress v1, v2;
io.netty.channel.ChannelFuture v5;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v5 = interfaceinvoke v4.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v1, v2, v3);
return v5;
}
public io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelHandlerContext v2;
io.netty.channel.ChannelPromise v1;
io.netty.channel.ChannelFuture v3;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelHandlerContext v2;
io.netty.channel.ChannelPromise v1;
io.netty.channel.ChannelFuture v3;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelHandlerContext v2;
io.netty.channel.ChannelPromise v1;
io.netty.channel.ChannelFuture v3;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)>(v1);
return v3;
}
public io.netty.channel.ChannelHandlerContext read()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext read()>();
return v0;
}
public io.netty.channel.ChannelFuture write(java.lang.Object)
{
io.netty.channel.ChannelHandlerContext v2;
java.lang.Object v1;
io.netty.channel.ChannelFuture v3;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture write(java.lang.Object, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelHandlerContext v3;
io.netty.channel.ChannelPromise v2;
java.lang.Object v1;
io.netty.channel.ChannelFuture v4;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v4 = interfaceinvoke v3.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v1, v2);
return v4;
}
public io.netty.channel.ChannelHandlerContext flush()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>();
return v0;
}
public io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelHandlerContext v3;
io.netty.channel.ChannelPromise v2;
java.lang.Object v1;
io.netty.channel.ChannelFuture v4;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v4 = interfaceinvoke v3.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)>(v1, v2);
return v4;
}
public io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)
{
io.netty.channel.ChannelHandlerContext v2;
java.lang.Object v1;
io.netty.channel.ChannelFuture v3;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)>(v1);
return v3;
}
public io.netty.channel.ChannelPipeline pipeline()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPipeline v2;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
return v2;
}
public io.netty.buffer.ByteBufAllocator alloc()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBufAllocator v2;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.buffer.ByteBufAllocator alloc()>();
return v2;
}
public io.netty.channel.ChannelPromise newPromise()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v2;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
return v2;
}
public io.netty.channel.ChannelProgressivePromise newProgressivePromise()
{
io.netty.channel.ChannelProgressivePromise v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelProgressivePromise newProgressivePromise()>();
return v2;
}
public io.netty.channel.ChannelFuture newSucceededFuture()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelFuture v2;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture newSucceededFuture()>();
return v2;
}
public io.netty.channel.ChannelFuture newFailedFuture(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.channel.ChannelHandlerContext v2;
io.netty.channel.ChannelFuture v3;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture newFailedFuture(java.lang.Throwable)>(v1);
return v3;
}
public io.netty.channel.ChannelPromise voidPromise()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v2;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise voidPromise()>();
return v2;
}
public io.netty.util.Attribute attr(io.netty.util.AttributeKey)
{
io.netty.channel.Channel v3;
io.netty.util.AttributeKey v1;
io.netty.channel.ChannelHandlerContext v2;
io.netty.util.Attribute v4;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: io.netty.util.AttributeKey;
v2 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v4 = interfaceinvoke v3.<io.netty.channel.Channel: io.netty.util.Attribute attr(io.netty.util.AttributeKey)>(v1);
return v4;
}
public boolean hasAttr(io.netty.util.AttributeKey)
{
io.netty.channel.Channel v3;
io.netty.util.AttributeKey v1;
io.netty.channel.ChannelHandlerContext v2;
boolean v4;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 := @parameter0: io.netty.util.AttributeKey;
v2 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v4 = interfaceinvoke v3.<io.netty.channel.Channel: boolean hasAttr(io.netty.util.AttributeKey)>(v1);
return v4;
}
final void remove()
{
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext$1 v3;
io.netty.util.concurrent.EventExecutor v1;
boolean v2;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = virtualinvoke v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v2 = interfaceinvoke v1.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v2 == 0 goto label1;
specialinvoke v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: void remove0()>();
goto label2;
label1:
v3 = new io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext$1;
specialinvoke v3.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext$1: void <init>(io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext)>(v0);
interfaceinvoke v1.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v3);
label2:
return;
}
private void remove0()
{
java.lang.Throwable v3;
io.netty.channel.ChannelPipelineException v4;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v0;
io.netty.channel.ChannelHandler v2, v5;
java.lang.Class v6;
java.lang.String v7, v8;
boolean v1;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v1 != 0 goto label4;
v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed> = 1;
label1:
v2 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandler handler>;
interfaceinvoke v2.<io.netty.channel.ChannelHandler: void handlerRemoved(io.netty.channel.ChannelHandlerContext)>(v0);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelPipelineException;
v5 = v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandler handler>;
v6 = virtualinvoke v5.<java.lang.Object: java.lang.Class getClass()>();
v7 = virtualinvoke v6.<java.lang.Class: java.lang.String getName()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.handlerRemoved() has thrown an exception.");
specialinvoke v4.<io.netty.channel.ChannelPipelineException: void <init>(java.lang.String,java.lang.Throwable)>(v8, v3);
virtualinvoke v0.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)>(v4);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}