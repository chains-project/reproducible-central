final class io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask extends io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback
{
final io.netty.channel.DefaultChannelPipeline this$0;
void <init>(io.netty.channel.DefaultChannelPipeline, io.netty.channel.AbstractChannelHandlerContext)
{
io.netty.channel.AbstractChannelHandlerContext v2;
io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask v0;
io.netty.channel.DefaultChannelPipeline v1;
v0 := @this: io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask;
v1 := @parameter0: io.netty.channel.DefaultChannelPipeline;
v2 := @parameter1: io.netty.channel.AbstractChannelHandlerContext;
v0.<io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask: io.netty.channel.DefaultChannelPipeline this$0> = v1;
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback: void <init>(io.netty.channel.AbstractChannelHandlerContext)>(v2);
return;
}
public void run()
{
io.netty.channel.AbstractChannelHandlerContext v2;
io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask v0;
io.netty.channel.DefaultChannelPipeline v1;
v0 := @this: io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask;
v1 = v0.<io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask: io.netty.channel.DefaultChannelPipeline this$0>;
v2 = v0.<io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask: io.netty.channel.AbstractChannelHandlerContext ctx>;
specialinvoke v1.<io.netty.channel.DefaultChannelPipeline: void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)>(v2);
return;
}
void execute()
{
io.netty.util.concurrent.EventExecutor v2;
java.lang.Object[] v10;
java.util.concurrent.RejectedExecutionException v6;
io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask v0;
io.netty.util.internal.logging.InternalLogger v7, v9;
io.netty.channel.AbstractChannelHandlerContext v1, v11, v13, v5;
java.lang.String v12;
io.netty.channel.DefaultChannelPipeline v4;
boolean v3, v8;
v0 := @this: io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask;
v1 = v0.<io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask: io.netty.channel.AbstractChannelHandlerContext ctx>;
v2 = virtualinvoke v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v3 = interfaceinvoke v2.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v3 == 0 goto label1;
v4 = v0.<io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask: io.netty.channel.DefaultChannelPipeline this$0>;
v5 = v0.<io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask: io.netty.channel.AbstractChannelHandlerContext ctx>;
specialinvoke v4.<io.netty.channel.DefaultChannelPipeline: void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)>(v5);
goto label5;
label1:
interfaceinvoke v2.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v0);
label2:
goto label5;
label3:
v6 := @caughtexception;
v7 = <io.netty.channel.DefaultChannelPipeline: io.netty.util.internal.logging.InternalLogger logger>;
v8 = interfaceinvoke v7.<io.netty.util.internal.logging.InternalLogger: boolean isWarnEnabled()>();
if v8 == 0 goto label4;
v9 = <io.netty.channel.DefaultChannelPipeline: io.netty.util.internal.logging.InternalLogger logger>;
v10 = newarray (java.lang.Object)[3];
v10[0] = v2;
v11 = v0.<io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask: io.netty.channel.AbstractChannelHandlerContext ctx>;
v12 = virtualinvoke v11.<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name()>();
v10[1] = v12;
v10[2] = v6;
interfaceinvoke v9.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object[])>("Can\'t invoke handlerRemoved() as the EventExecutor {} rejected it, removing handler {}.", v10);
label4:
v13 = v0.<io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask: io.netty.channel.AbstractChannelHandlerContext ctx>;
virtualinvoke v13.<io.netty.channel.AbstractChannelHandlerContext: void setRemoved()>();
label5:
return;
catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
}
}