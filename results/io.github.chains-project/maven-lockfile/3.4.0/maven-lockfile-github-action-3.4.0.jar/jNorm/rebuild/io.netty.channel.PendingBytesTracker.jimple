abstract class io.netty.channel.PendingBytesTracker extends java.lang.Object implements io.netty.channel.MessageSizeEstimator$Handle
{
private final io.netty.channel.MessageSizeEstimator$Handle estimatorHandle;
private void <init>(io.netty.channel.MessageSizeEstimator$Handle)
{
io.netty.channel.PendingBytesTracker v0;
java.lang.Object v2;
io.netty.channel.MessageSizeEstimator$Handle v1;
v0 := @this: io.netty.channel.PendingBytesTracker;
v1 := @parameter0: io.netty.channel.MessageSizeEstimator$Handle;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "estimatorHandle");
v0.<io.netty.channel.PendingBytesTracker: io.netty.channel.MessageSizeEstimator$Handle estimatorHandle> = v2;
return;
}
public final int size(java.lang.Object)
{
io.netty.channel.PendingBytesTracker v0;
int v3;
java.lang.Object v1;
io.netty.channel.MessageSizeEstimator$Handle v2;
v0 := @this: io.netty.channel.PendingBytesTracker;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.channel.PendingBytesTracker: io.netty.channel.MessageSizeEstimator$Handle estimatorHandle>;
v3 = interfaceinvoke v2.<io.netty.channel.MessageSizeEstimator$Handle: int size(java.lang.Object)>(v1);
return v3;
}
public abstract void incrementPendingOutboundBytes(long);
public abstract void decrementPendingOutboundBytes(long);
static io.netty.channel.PendingBytesTracker newTracker(io.netty.channel.Channel)
{
io.netty.channel.PendingBytesTracker v11;
io.netty.channel.PendingBytesTracker$NoopPendingBytesTracker v10;
io.netty.channel.ChannelPipeline v1, v4;
io.netty.channel.Channel$Unsafe v5;
io.netty.channel.MessageSizeEstimator$Handle v9;
io.netty.channel.Channel v0;
io.netty.channel.ChannelOutboundBuffer v6;
io.netty.channel.MessageSizeEstimator v8;
io.netty.channel.ChannelConfig v7;
io.netty.channel.PendingBytesTracker$DefaultChannelPipelinePendingBytesTracker v3;
io.netty.channel.PendingBytesTracker$ChannelOutboundBufferPendingBytesTracker v12;
boolean v2;
v0 := @parameter0: io.netty.channel.Channel;
v1 = interfaceinvoke v0.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v2 = v1 instanceof io.netty.channel.DefaultChannelPipeline;
if v2 == 0 goto label1;
v3 = new io.netty.channel.PendingBytesTracker$DefaultChannelPipelinePendingBytesTracker;
v4 = interfaceinvoke v0.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
specialinvoke v3.<io.netty.channel.PendingBytesTracker$DefaultChannelPipelinePendingBytesTracker: void <init>(io.netty.channel.DefaultChannelPipeline)>(v4);
return v3;
label1:
v5 = interfaceinvoke v0.<io.netty.channel.Channel: io.netty.channel.Channel$Unsafe unsafe()>();
v6 = interfaceinvoke v5.<io.netty.channel.Channel$Unsafe: io.netty.channel.ChannelOutboundBuffer outboundBuffer()>();
v7 = interfaceinvoke v0.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v8 = interfaceinvoke v7.<io.netty.channel.ChannelConfig: io.netty.channel.MessageSizeEstimator getMessageSizeEstimator()>();
v9 = interfaceinvoke v8.<io.netty.channel.MessageSizeEstimator: io.netty.channel.MessageSizeEstimator$Handle newHandle()>();
if v6 != null goto label2;
v10 = new io.netty.channel.PendingBytesTracker$NoopPendingBytesTracker;
v11 = v10;
specialinvoke v10.<io.netty.channel.PendingBytesTracker$NoopPendingBytesTracker: void <init>(io.netty.channel.MessageSizeEstimator$Handle)>(v9);
goto label3;
label2:
v12 = new io.netty.channel.PendingBytesTracker$ChannelOutboundBufferPendingBytesTracker;
v11 = v12;
specialinvoke v12.<io.netty.channel.PendingBytesTracker$ChannelOutboundBufferPendingBytesTracker: void <init>(io.netty.channel.ChannelOutboundBuffer,io.netty.channel.MessageSizeEstimator$Handle)>(v6, v9);
label3:
return v11;
}
}