public final class io.netty.channel.PendingWriteQueue extends java.lang.Object
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final int PENDING_WRITE_OVERHEAD;
private final io.netty.channel.ChannelOutboundInvoker invoker;
private final io.netty.util.concurrent.EventExecutor executor;
private final io.netty.channel.PendingBytesTracker tracker;
private io.netty.channel.PendingWriteQueue$PendingWrite head;
private io.netty.channel.PendingWriteQueue$PendingWrite tail;
private int size;
private long bytes;
static final boolean $assertionsDisabled;
public void <init>(io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.Channel v2;
io.netty.util.concurrent.EventExecutor v4;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.PendingBytesTracker v3;
io.netty.channel.PendingWriteQueue v0;
v0 := @this: io.netty.channel.PendingWriteQueue;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v3 = staticinvoke <io.netty.channel.PendingBytesTracker: io.netty.channel.PendingBytesTracker newTracker(io.netty.channel.Channel)>(v2);
v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingBytesTracker tracker> = v3;
v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.ChannelOutboundInvoker invoker> = v1;
v4 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v0.<io.netty.channel.PendingWriteQueue: io.netty.util.concurrent.EventExecutor executor> = v4;
return;
}
public void <init>(io.netty.channel.Channel)
{
io.netty.channel.Channel v1;
io.netty.channel.PendingBytesTracker v2;
io.netty.channel.PendingWriteQueue v0;
io.netty.channel.EventLoop v3;
v0 := @this: io.netty.channel.PendingWriteQueue;
v1 := @parameter0: io.netty.channel.Channel;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.netty.channel.PendingBytesTracker: io.netty.channel.PendingBytesTracker newTracker(io.netty.channel.Channel)>(v1);
v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingBytesTracker tracker> = v2;
v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.ChannelOutboundInvoker invoker> = v1;
v3 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v0.<io.netty.channel.PendingWriteQueue: io.netty.util.concurrent.EventExecutor executor> = v3;
return;
}
public boolean isEmpty()
{
io.netty.util.concurrent.EventExecutor v2;
io.netty.channel.PendingWriteQueue$PendingWrite v5;
io.netty.channel.PendingWriteQueue v0;
java.lang.AssertionError v4;
boolean v1, v3, v6;
v0 := @this: io.netty.channel.PendingWriteQueue;
v1 = <io.netty.channel.PendingWriteQueue: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.channel.PendingWriteQueue: io.netty.util.concurrent.EventExecutor executor>;
v3 = interfaceinvoke v2.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v3 != 0 goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
v5 = v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite head>;
if v5 != null goto label2;
v6 = 1;
goto label3;
label2:
v6 = 0;
label3:
return v6;
}
public int size()
{
io.netty.util.concurrent.EventExecutor v2;
io.netty.channel.PendingWriteQueue v0;
int v5;
java.lang.AssertionError v4;
boolean v1, v3;
v0 := @this: io.netty.channel.PendingWriteQueue;
v1 = <io.netty.channel.PendingWriteQueue: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.channel.PendingWriteQueue: io.netty.util.concurrent.EventExecutor executor>;
v3 = interfaceinvoke v2.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v3 != 0 goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
v5 = v0.<io.netty.channel.PendingWriteQueue: int size>;
return v5;
}
public long bytes()
{
io.netty.util.concurrent.EventExecutor v2;
io.netty.channel.PendingWriteQueue v0;
long v5;
java.lang.AssertionError v4;
boolean v1, v3;
v0 := @this: io.netty.channel.PendingWriteQueue;
v1 = <io.netty.channel.PendingWriteQueue: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.channel.PendingWriteQueue: io.netty.util.concurrent.EventExecutor executor>;
v3 = interfaceinvoke v2.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v3 != 0 goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
v5 = v0.<io.netty.channel.PendingWriteQueue: long bytes>;
return v5;
}
private int size(java.lang.Object)
{
io.netty.channel.PendingBytesTracker v2;
io.netty.channel.PendingWriteQueue v0;
int v3, v4, v5;
java.lang.Object v1;
v0 := @this: io.netty.channel.PendingWriteQueue;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingBytesTracker tracker>;
v3 = virtualinvoke v2.<io.netty.channel.PendingBytesTracker: int size(java.lang.Object)>(v1);
if v3 >= 0 goto label1;
v3 = 0;
label1:
v4 = <io.netty.channel.PendingWriteQueue: int PENDING_WRITE_OVERHEAD>;
v5 = v3 + v4;
return v5;
}
public void add(java.lang.Object, io.netty.channel.ChannelPromise)
{
io.netty.util.concurrent.EventExecutor v4;
io.netty.channel.PendingBytesTracker v14;
long v12, v13, v15;
java.lang.AssertionError v6;
io.netty.channel.ChannelPromise v2;
int v10, v11, v7;
boolean v3, v5;
io.netty.channel.PendingWriteQueue v0;
io.netty.channel.PendingWriteQueue$PendingWrite v8, v9;
java.lang.Object v1;
v0 := @this: io.netty.channel.PendingWriteQueue;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = <io.netty.channel.PendingWriteQueue: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
v4 = v0.<io.netty.channel.PendingWriteQueue: io.netty.util.concurrent.EventExecutor executor>;
v5 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v5 != 0 goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "msg");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "promise");
v7 = specialinvoke v0.<io.netty.channel.PendingWriteQueue: int size(java.lang.Object)>(v1);
v8 = staticinvoke <io.netty.channel.PendingWriteQueue$PendingWrite: io.netty.channel.PendingWriteQueue$PendingWrite newInstance(java.lang.Object,int,io.netty.channel.ChannelPromise)>(v1, v7, v2);
v9 = v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite tail>;
if v9 != null goto label2;
v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite head> = v8;
v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite tail> = v8;
goto label3;
label2:
v9.<io.netty.channel.PendingWriteQueue$PendingWrite: io.netty.channel.PendingWriteQueue$PendingWrite next> = v8;
v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite tail> = v8;
label3:
v10 = v0.<io.netty.channel.PendingWriteQueue: int size>;
v11 = v10 + 1;
v0.<io.netty.channel.PendingWriteQueue: int size> = v11;
v12 = v0.<io.netty.channel.PendingWriteQueue: long bytes>;
v13 = v12 + v7;
v0.<io.netty.channel.PendingWriteQueue: long bytes> = v13;
v14 = v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingBytesTracker tracker>;
v15 = v8.<io.netty.channel.PendingWriteQueue$PendingWrite: long size>;
virtualinvoke v14.<io.netty.channel.PendingBytesTracker: void incrementPendingOutboundBytes(long)>(v15);
return;
}
public io.netty.channel.ChannelFuture removeAndWriteAll()
{
io.netty.util.concurrent.EventExecutor v2, v9;
java.lang.Throwable v16;
java.lang.AssertionError v4;
io.netty.channel.ChannelPromise v13, v7;
boolean v1, v14, v3, v5;
io.netty.channel.PendingWriteQueue v0;
io.netty.util.concurrent.PromiseCombiner v8;
io.netty.channel.PendingWriteQueue$PendingWrite v10, v11;
io.netty.channel.ChannelOutboundInvoker v15, v6;
java.lang.Object v12;
v0 := @this: io.netty.channel.PendingWriteQueue;
v1 = <io.netty.channel.PendingWriteQueue: boolean $assertionsDisabled>;
if v1 != 0 goto label01;
v2 = v0.<io.netty.channel.PendingWriteQueue: io.netty.util.concurrent.EventExecutor executor>;
v3 = interfaceinvoke v2.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v3 != 0 goto label01;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label01:
v5 = virtualinvoke v0.<io.netty.channel.PendingWriteQueue: boolean isEmpty()>();
if v5 == 0 goto label02;
return null;
label02:
v6 = v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.ChannelOutboundInvoker invoker>;
v7 = interfaceinvoke v6.<io.netty.channel.ChannelOutboundInvoker: io.netty.channel.ChannelPromise newPromise()>();
v8 = new io.netty.util.concurrent.PromiseCombiner;
v9 = v0.<io.netty.channel.PendingWriteQueue: io.netty.util.concurrent.EventExecutor executor>;
specialinvoke v8.<io.netty.util.concurrent.PromiseCombiner: void <init>(io.netty.util.concurrent.EventExecutor)>(v9);
label03:
v10 = v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite head>;
label04:
if v10 == null goto label08;
v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite tail> = null;
v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite head> = null;
v0.<io.netty.channel.PendingWriteQueue: int size> = 0;
v0.<io.netty.channel.PendingWriteQueue: long bytes> = 0L;
label05:
if v10 == null goto label07;
v11 = v10.<io.netty.channel.PendingWriteQueue$PendingWrite: io.netty.channel.PendingWriteQueue$PendingWrite next>;
v12 = v10.<io.netty.channel.PendingWriteQueue$PendingWrite: java.lang.Object msg>;
v13 = v10.<io.netty.channel.PendingWriteQueue$PendingWrite: io.netty.channel.ChannelPromise promise>;
specialinvoke v0.<io.netty.channel.PendingWriteQueue: void recycle(io.netty.channel.PendingWriteQueue$PendingWrite,boolean)>(v10, 0);
v14 = v13 instanceof io.netty.channel.VoidChannelPromise;
if v14 != 0 goto label06;
virtualinvoke v8.<io.netty.util.concurrent.PromiseCombiner: void add(io.netty.util.concurrent.Promise)>(v13);
label06:
v15 = v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.ChannelOutboundInvoker invoker>;
interfaceinvoke v15.<io.netty.channel.ChannelOutboundInvoker: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v12, v13);
v10 = v11;
goto label05;
label07:
v10 = v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite head>;
goto label04;
label08:
virtualinvoke v8.<io.netty.util.concurrent.PromiseCombiner: void finish(io.netty.util.concurrent.Promise)>(v7);
label09:
goto label11;
label10:
v16 := @caughtexception;
interfaceinvoke v7.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v16);
label11:
specialinvoke v0.<io.netty.channel.PendingWriteQueue: void assertEmpty()>();
return v7;
catch java.lang.Throwable from label03 to label09 with label10;
}
public void removeAndFailAll(java.lang.Throwable)
{
io.netty.util.concurrent.EventExecutor v3;
java.lang.Throwable v1;
io.netty.channel.PendingWriteQueue v0;
java.lang.AssertionError v5;
io.netty.channel.PendingWriteQueue$PendingWrite v6, v7;
io.netty.channel.ChannelPromise v9;
java.lang.Object v8;
boolean v2, v4;
v0 := @this: io.netty.channel.PendingWriteQueue;
v1 := @parameter0: java.lang.Throwable;
v2 = <io.netty.channel.PendingWriteQueue: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.channel.PendingWriteQueue: io.netty.util.concurrent.EventExecutor executor>;
v4 = interfaceinvoke v3.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v4 != 0 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "cause");
v6 = v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite head>;
label2:
if v6 == null goto label5;
v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite tail> = null;
v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite head> = null;
v0.<io.netty.channel.PendingWriteQueue: int size> = 0;
v0.<io.netty.channel.PendingWriteQueue: long bytes> = 0L;
label3:
if v6 == null goto label4;
v7 = v6.<io.netty.channel.PendingWriteQueue$PendingWrite: io.netty.channel.PendingWriteQueue$PendingWrite next>;
v8 = v6.<io.netty.channel.PendingWriteQueue$PendingWrite: java.lang.Object msg>;
staticinvoke <io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>(v8);
v9 = v6.<io.netty.channel.PendingWriteQueue$PendingWrite: io.netty.channel.ChannelPromise promise>;
specialinvoke v0.<io.netty.channel.PendingWriteQueue: void recycle(io.netty.channel.PendingWriteQueue$PendingWrite,boolean)>(v6, 0);
staticinvoke <io.netty.channel.PendingWriteQueue: void safeFail(io.netty.channel.ChannelPromise,java.lang.Throwable)>(v9, v1);
v6 = v7;
goto label3;
label4:
v6 = v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite head>;
goto label2;
label5:
specialinvoke v0.<io.netty.channel.PendingWriteQueue: void assertEmpty()>();
return;
}
public void removeAndFail(java.lang.Throwable)
{
io.netty.util.concurrent.EventExecutor v3;
java.lang.Throwable v1;
io.netty.channel.PendingWriteQueue v0;
java.lang.AssertionError v5;
io.netty.channel.PendingWriteQueue$PendingWrite v6;
io.netty.channel.ChannelPromise v8;
java.lang.Object v7;
boolean v2, v4;
v0 := @this: io.netty.channel.PendingWriteQueue;
v1 := @parameter0: java.lang.Throwable;
v2 = <io.netty.channel.PendingWriteQueue: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.channel.PendingWriteQueue: io.netty.util.concurrent.EventExecutor executor>;
v4 = interfaceinvoke v3.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v4 != 0 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "cause");
v6 = v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite head>;
if v6 != null goto label2;
return;
label2:
v7 = v6.<io.netty.channel.PendingWriteQueue$PendingWrite: java.lang.Object msg>;
staticinvoke <io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>(v7);
v8 = v6.<io.netty.channel.PendingWriteQueue$PendingWrite: io.netty.channel.ChannelPromise promise>;
staticinvoke <io.netty.channel.PendingWriteQueue: void safeFail(io.netty.channel.ChannelPromise,java.lang.Throwable)>(v8, v1);
specialinvoke v0.<io.netty.channel.PendingWriteQueue: void recycle(io.netty.channel.PendingWriteQueue$PendingWrite,boolean)>(v6, 1);
return;
}
private void assertEmpty()
{
io.netty.channel.PendingWriteQueue$PendingWrite v2, v3;
io.netty.channel.PendingWriteQueue v0;
int v4;
java.lang.AssertionError v5;
boolean v1;
v0 := @this: io.netty.channel.PendingWriteQueue;
v1 = <io.netty.channel.PendingWriteQueue: boolean $assertionsDisabled>;
if v1 != 0 goto label2;
v2 = v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite tail>;
if v2 != null goto label1;
v3 = v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite head>;
if v3 != null goto label1;
v4 = v0.<io.netty.channel.PendingWriteQueue: int size>;
if v4 == 0 goto label2;
label1:
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label2:
return;
}
public io.netty.channel.ChannelFuture removeAndWrite()
{
io.netty.util.concurrent.EventExecutor v2;
io.netty.channel.PendingWriteQueue v0;
java.lang.AssertionError v4;
io.netty.channel.ChannelFuture v9;
io.netty.channel.PendingWriteQueue$PendingWrite v5;
io.netty.channel.ChannelPromise v7;
io.netty.channel.ChannelOutboundInvoker v8;
java.lang.Object v6;
boolean v1, v3;
v0 := @this: io.netty.channel.PendingWriteQueue;
v1 = <io.netty.channel.PendingWriteQueue: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.channel.PendingWriteQueue: io.netty.util.concurrent.EventExecutor executor>;
v3 = interfaceinvoke v2.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v3 != 0 goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
v5 = v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite head>;
if v5 != null goto label2;
return null;
label2:
v6 = v5.<io.netty.channel.PendingWriteQueue$PendingWrite: java.lang.Object msg>;
v7 = v5.<io.netty.channel.PendingWriteQueue$PendingWrite: io.netty.channel.ChannelPromise promise>;
specialinvoke v0.<io.netty.channel.PendingWriteQueue: void recycle(io.netty.channel.PendingWriteQueue$PendingWrite,boolean)>(v5, 1);
v8 = v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.ChannelOutboundInvoker invoker>;
v9 = interfaceinvoke v8.<io.netty.channel.ChannelOutboundInvoker: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v6, v7);
return v9;
}
public io.netty.channel.ChannelPromise remove()
{
io.netty.util.concurrent.EventExecutor v2;
io.netty.channel.PendingWriteQueue v0;
java.lang.AssertionError v4;
io.netty.channel.PendingWriteQueue$PendingWrite v5;
io.netty.channel.ChannelPromise v6;
java.lang.Object v7;
boolean v1, v3;
v0 := @this: io.netty.channel.PendingWriteQueue;
v1 = <io.netty.channel.PendingWriteQueue: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.channel.PendingWriteQueue: io.netty.util.concurrent.EventExecutor executor>;
v3 = interfaceinvoke v2.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v3 != 0 goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
v5 = v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite head>;
if v5 != null goto label2;
return null;
label2:
v6 = v5.<io.netty.channel.PendingWriteQueue$PendingWrite: io.netty.channel.ChannelPromise promise>;
v7 = v5.<io.netty.channel.PendingWriteQueue$PendingWrite: java.lang.Object msg>;
staticinvoke <io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>(v7);
specialinvoke v0.<io.netty.channel.PendingWriteQueue: void recycle(io.netty.channel.PendingWriteQueue$PendingWrite,boolean)>(v5, 1);
return v6;
}
public java.lang.Object current()
{
io.netty.util.concurrent.EventExecutor v2;
io.netty.channel.PendingWriteQueue$PendingWrite v5;
io.netty.channel.PendingWriteQueue v0;
java.lang.Object v6;
java.lang.AssertionError v4;
boolean v1, v3;
v0 := @this: io.netty.channel.PendingWriteQueue;
v1 = <io.netty.channel.PendingWriteQueue: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.channel.PendingWriteQueue: io.netty.util.concurrent.EventExecutor executor>;
v3 = interfaceinvoke v2.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v3 != 0 goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
v5 = v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite head>;
if v5 != null goto label2;
return null;
label2:
v6 = v5.<io.netty.channel.PendingWriteQueue$PendingWrite: java.lang.Object msg>;
return v6;
}
private void recycle(io.netty.channel.PendingWriteQueue$PendingWrite, boolean)
{
io.netty.channel.PendingBytesTracker v14;
io.netty.channel.PendingWriteQueue v0;
long v11, v4, v7, v8;
java.lang.AssertionError v13;
io.netty.channel.PendingWriteQueue$PendingWrite v1, v3;
byte v12;
int v10, v5, v6;
boolean v2, v9;
v0 := @this: io.netty.channel.PendingWriteQueue;
v1 := @parameter0: io.netty.channel.PendingWriteQueue$PendingWrite;
v2 := @parameter1: boolean;
v3 = v1.<io.netty.channel.PendingWriteQueue$PendingWrite: io.netty.channel.PendingWriteQueue$PendingWrite next>;
v4 = v1.<io.netty.channel.PendingWriteQueue$PendingWrite: long size>;
if v2 == 0 goto label3;
if v3 != null goto label1;
v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite tail> = null;
v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite head> = null;
v0.<io.netty.channel.PendingWriteQueue: int size> = 0;
v0.<io.netty.channel.PendingWriteQueue: long bytes> = 0L;
goto label3;
label1:
v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingWriteQueue$PendingWrite head> = v3;
v5 = v0.<io.netty.channel.PendingWriteQueue: int size>;
v6 = v5 - 1;
v0.<io.netty.channel.PendingWriteQueue: int size> = v6;
v7 = v0.<io.netty.channel.PendingWriteQueue: long bytes>;
v8 = v7 - v4;
v0.<io.netty.channel.PendingWriteQueue: long bytes> = v8;
v9 = <io.netty.channel.PendingWriteQueue: boolean $assertionsDisabled>;
if v9 != 0 goto label3;
v10 = v0.<io.netty.channel.PendingWriteQueue: int size>;
if v10 <= 0 goto label2;
v11 = v0.<io.netty.channel.PendingWriteQueue: long bytes>;
v12 = v11 cmp 0L;
if v12 >= 0 goto label3;
label2:
v13 = new java.lang.AssertionError;
specialinvoke v13.<java.lang.AssertionError: void <init>()>();
throw v13;
label3:
specialinvoke v1.<io.netty.channel.PendingWriteQueue$PendingWrite: void recycle()>();
v14 = v0.<io.netty.channel.PendingWriteQueue: io.netty.channel.PendingBytesTracker tracker>;
virtualinvoke v14.<io.netty.channel.PendingBytesTracker: void decrementPendingOutboundBytes(long)>(v4);
return;
}
private static void safeFail(io.netty.channel.ChannelPromise, java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.channel.ChannelPromise v0;
io.netty.util.internal.logging.InternalLogger v4;
boolean v2, v3;
v0 := @parameter0: io.netty.channel.ChannelPromise;
v1 := @parameter1: java.lang.Throwable;
v2 = v0 instanceof io.netty.channel.VoidChannelPromise;
if v2 != 0 goto label1;
v3 = interfaceinvoke v0.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v1);
if v3 != 0 goto label1;
v4 = <io.netty.channel.PendingWriteQueue: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v4.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Failed to mark a promise as failure because it\'s done already: {}", v0, v1);
label1:
return;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v3;
int v4;
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/channel/PendingWriteQueue;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.channel.PendingWriteQueue: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/channel/PendingWriteQueue;");
<io.netty.channel.PendingWriteQueue: io.netty.util.internal.logging.InternalLogger logger> = v3;
v4 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>("io.netty.transport.pendingWriteSizeOverhead", 64);
<io.netty.channel.PendingWriteQueue: int PENDING_WRITE_OVERHEAD> = v4;
return;
}
}