public class io.netty.channel.ThreadPerChannelEventLoop extends io.netty.channel.SingleThreadEventLoop
{
private final io.netty.channel.ThreadPerChannelEventLoopGroup parent;
private io.netty.channel.Channel ch;
public void <init>(io.netty.channel.ThreadPerChannelEventLoopGroup)
{
io.netty.channel.ThreadPerChannelEventLoopGroup v1;
io.netty.channel.ThreadPerChannelEventLoop v0;
java.util.concurrent.Executor v2;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoop;
v1 := @parameter0: io.netty.channel.ThreadPerChannelEventLoopGroup;
v2 = v1.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.concurrent.Executor executor>;
specialinvoke v0.<io.netty.channel.SingleThreadEventLoop: void <init>(io.netty.channel.EventLoopGroup,java.util.concurrent.Executor,boolean)>(v1, v2, 1);
v0.<io.netty.channel.ThreadPerChannelEventLoop: io.netty.channel.ThreadPerChannelEventLoopGroup parent> = v1;
return;
}
public io.netty.channel.ChannelFuture register(io.netty.channel.ChannelPromise)
{
io.netty.channel.ThreadPerChannelEventLoop v0;
io.netty.channel.ChannelPromise v1;
io.netty.channel.ThreadPerChannelEventLoop$1 v3;
io.netty.channel.ChannelFuture v2, v4;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoop;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = specialinvoke v0.<io.netty.channel.SingleThreadEventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.ChannelPromise)>(v1);
v3 = new io.netty.channel.ThreadPerChannelEventLoop$1;
specialinvoke v3.<io.netty.channel.ThreadPerChannelEventLoop$1: void <init>(io.netty.channel.ThreadPerChannelEventLoop)>(v0);
v4 = interfaceinvoke v2.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v3);
return v4;
}
public io.netty.channel.ChannelFuture register(io.netty.channel.Channel, io.netty.channel.ChannelPromise)
{
io.netty.channel.Channel v1;
io.netty.channel.ThreadPerChannelEventLoop v0;
io.netty.channel.ChannelPromise v2;
io.netty.channel.ThreadPerChannelEventLoop$2 v4;
io.netty.channel.ChannelFuture v3, v5;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoop;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = specialinvoke v0.<io.netty.channel.SingleThreadEventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)>(v1, v2);
v4 = new io.netty.channel.ThreadPerChannelEventLoop$2;
specialinvoke v4.<io.netty.channel.ThreadPerChannelEventLoop$2: void <init>(io.netty.channel.ThreadPerChannelEventLoop)>(v0);
v5 = interfaceinvoke v3.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v4);
return v5;
}
protected void run()
{
java.lang.Runnable v1;
io.netty.channel.Channel$Unsafe v4, v5;
io.netty.channel.Channel v2;
io.netty.channel.ThreadPerChannelEventLoop v0;
io.netty.channel.ChannelPromise v6;
boolean v3, v7, v8;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoop;
label1:
v1 = virtualinvoke v0.<io.netty.channel.ThreadPerChannelEventLoop: java.lang.Runnable takeTask()>();
if v1 == null goto label2;
interfaceinvoke v1.<java.lang.Runnable: void run()>();
virtualinvoke v0.<io.netty.channel.ThreadPerChannelEventLoop: void updateLastExecutionTime()>();
label2:
v2 = v0.<io.netty.channel.ThreadPerChannelEventLoop: io.netty.channel.Channel ch>;
v3 = virtualinvoke v0.<io.netty.channel.ThreadPerChannelEventLoop: boolean isShuttingDown()>();
if v3 == 0 goto label4;
if v2 == null goto label3;
v4 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.Channel$Unsafe unsafe()>();
v5 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.Channel$Unsafe unsafe()>();
v6 = interfaceinvoke v5.<io.netty.channel.Channel$Unsafe: io.netty.channel.ChannelPromise voidPromise()>();
interfaceinvoke v4.<io.netty.channel.Channel$Unsafe: void close(io.netty.channel.ChannelPromise)>(v6);
label3:
v7 = virtualinvoke v0.<io.netty.channel.ThreadPerChannelEventLoop: boolean confirmShutdown()>();
if v7 == 0 goto label1;
goto label5;
label4:
if v2 == null goto label1;
v8 = interfaceinvoke v2.<io.netty.channel.Channel: boolean isRegistered()>();
if v8 != 0 goto label1;
virtualinvoke v0.<io.netty.channel.ThreadPerChannelEventLoop: boolean runAllTasks()>();
virtualinvoke v0.<io.netty.channel.ThreadPerChannelEventLoop: void deregister()>();
goto label1;
label5:
return;
}
protected void deregister()
{
io.netty.channel.ThreadPerChannelEventLoop v0;
io.netty.channel.ThreadPerChannelEventLoopGroup v1, v3;
java.util.Set v2;
java.util.Queue v4;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoop;
v0.<io.netty.channel.ThreadPerChannelEventLoop: io.netty.channel.Channel ch> = null;
v1 = v0.<io.netty.channel.ThreadPerChannelEventLoop: io.netty.channel.ThreadPerChannelEventLoopGroup parent>;
v2 = v1.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Set activeChildren>;
interfaceinvoke v2.<java.util.Set: boolean remove(java.lang.Object)>(v0);
v3 = v0.<io.netty.channel.ThreadPerChannelEventLoop: io.netty.channel.ThreadPerChannelEventLoopGroup parent>;
v4 = v3.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Queue idleChildren>;
interfaceinvoke v4.<java.util.Queue: boolean add(java.lang.Object)>(v0);
return;
}
public int registeredChannels()
{
io.netty.channel.ThreadPerChannelEventLoop v0;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoop;
return 1;
}
}