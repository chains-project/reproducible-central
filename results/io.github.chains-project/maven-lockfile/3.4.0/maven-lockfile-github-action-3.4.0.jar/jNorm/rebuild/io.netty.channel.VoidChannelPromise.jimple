public final class io.netty.channel.VoidChannelPromise extends io.netty.util.concurrent.AbstractFuture implements io.netty.channel.ChannelPromise
{
private final io.netty.channel.Channel channel;
private final io.netty.channel.ChannelFutureListener fireExceptionListener;
public void <init>(io.netty.channel.Channel, boolean)
{
io.netty.channel.Channel v1;
io.netty.channel.VoidChannelPromise v0;
io.netty.channel.VoidChannelPromise$1 v3;
boolean v2;
v0 := @this: io.netty.channel.VoidChannelPromise;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: boolean;
specialinvoke v0.<io.netty.util.concurrent.AbstractFuture: void <init>()>();
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "channel");
v0.<io.netty.channel.VoidChannelPromise: io.netty.channel.Channel channel> = v1;
if v2 == 0 goto label1;
v3 = new io.netty.channel.VoidChannelPromise$1;
specialinvoke v3.<io.netty.channel.VoidChannelPromise$1: void <init>(io.netty.channel.VoidChannelPromise)>(v0);
v0.<io.netty.channel.VoidChannelPromise: io.netty.channel.ChannelFutureListener fireExceptionListener> = v3;
goto label2;
label1:
v0.<io.netty.channel.VoidChannelPromise: io.netty.channel.ChannelFutureListener fireExceptionListener> = null;
label2:
return;
}
public io.netty.channel.VoidChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)
{
io.netty.channel.VoidChannelPromise v0;
io.netty.util.concurrent.GenericFutureListener v1;
v0 := @this: io.netty.channel.VoidChannelPromise;
v1 := @parameter0: io.netty.util.concurrent.GenericFutureListener;
staticinvoke <io.netty.channel.VoidChannelPromise: void fail()>();
return v0;
}
public transient io.netty.channel.VoidChannelPromise addListeners(io.netty.util.concurrent.GenericFutureListener[])
{
io.netty.channel.VoidChannelPromise v0;
io.netty.util.concurrent.GenericFutureListener[] v1;
v0 := @this: io.netty.channel.VoidChannelPromise;
v1 := @parameter0: io.netty.util.concurrent.GenericFutureListener[];
staticinvoke <io.netty.channel.VoidChannelPromise: void fail()>();
return v0;
}
public io.netty.channel.VoidChannelPromise removeListener(io.netty.util.concurrent.GenericFutureListener)
{
io.netty.channel.VoidChannelPromise v0;
io.netty.util.concurrent.GenericFutureListener v1;
v0 := @this: io.netty.channel.VoidChannelPromise;
v1 := @parameter0: io.netty.util.concurrent.GenericFutureListener;
return v0;
}
public transient io.netty.channel.VoidChannelPromise removeListeners(io.netty.util.concurrent.GenericFutureListener[])
{
io.netty.channel.VoidChannelPromise v0;
io.netty.util.concurrent.GenericFutureListener[] v1;
v0 := @this: io.netty.channel.VoidChannelPromise;
v1 := @parameter0: io.netty.util.concurrent.GenericFutureListener[];
return v0;
}
public io.netty.channel.VoidChannelPromise await() throws java.lang.InterruptedException
{
io.netty.channel.VoidChannelPromise v0;
java.lang.InterruptedException v2;
boolean v1;
v0 := @this: io.netty.channel.VoidChannelPromise;
v1 = staticinvoke <java.lang.Thread: boolean interrupted()>();
if v1 == 0 goto label1;
v2 = new java.lang.InterruptedException;
specialinvoke v2.<java.lang.InterruptedException: void <init>()>();
throw v2;
label1:
return v0;
}
public boolean await(long, java.util.concurrent.TimeUnit)
{
io.netty.channel.VoidChannelPromise v0;
java.util.concurrent.TimeUnit v2;
long v1;
v0 := @this: io.netty.channel.VoidChannelPromise;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
staticinvoke <io.netty.channel.VoidChannelPromise: void fail()>();
return 0;
}
public boolean await(long)
{
io.netty.channel.VoidChannelPromise v0;
long v1;
v0 := @this: io.netty.channel.VoidChannelPromise;
v1 := @parameter0: long;
staticinvoke <io.netty.channel.VoidChannelPromise: void fail()>();
return 0;
}
public io.netty.channel.VoidChannelPromise awaitUninterruptibly()
{
io.netty.channel.VoidChannelPromise v0;
v0 := @this: io.netty.channel.VoidChannelPromise;
staticinvoke <io.netty.channel.VoidChannelPromise: void fail()>();
return v0;
}
public boolean awaitUninterruptibly(long, java.util.concurrent.TimeUnit)
{
io.netty.channel.VoidChannelPromise v0;
java.util.concurrent.TimeUnit v2;
long v1;
v0 := @this: io.netty.channel.VoidChannelPromise;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
staticinvoke <io.netty.channel.VoidChannelPromise: void fail()>();
return 0;
}
public boolean awaitUninterruptibly(long)
{
io.netty.channel.VoidChannelPromise v0;
long v1;
v0 := @this: io.netty.channel.VoidChannelPromise;
v1 := @parameter0: long;
staticinvoke <io.netty.channel.VoidChannelPromise: void fail()>();
return 0;
}
public io.netty.channel.Channel channel()
{
io.netty.channel.Channel v1;
io.netty.channel.VoidChannelPromise v0;
v0 := @this: io.netty.channel.VoidChannelPromise;
v1 = v0.<io.netty.channel.VoidChannelPromise: io.netty.channel.Channel channel>;
return v1;
}
public boolean isDone()
{
io.netty.channel.VoidChannelPromise v0;
v0 := @this: io.netty.channel.VoidChannelPromise;
return 0;
}
public boolean isSuccess()
{
io.netty.channel.VoidChannelPromise v0;
v0 := @this: io.netty.channel.VoidChannelPromise;
return 0;
}
public boolean setUncancellable()
{
io.netty.channel.VoidChannelPromise v0;
v0 := @this: io.netty.channel.VoidChannelPromise;
return 1;
}
public boolean isCancellable()
{
io.netty.channel.VoidChannelPromise v0;
v0 := @this: io.netty.channel.VoidChannelPromise;
return 0;
}
public boolean isCancelled()
{
io.netty.channel.VoidChannelPromise v0;
v0 := @this: io.netty.channel.VoidChannelPromise;
return 0;
}
public java.lang.Throwable cause()
{
io.netty.channel.VoidChannelPromise v0;
v0 := @this: io.netty.channel.VoidChannelPromise;
return null;
}
public io.netty.channel.VoidChannelPromise sync()
{
io.netty.channel.VoidChannelPromise v0;
v0 := @this: io.netty.channel.VoidChannelPromise;
staticinvoke <io.netty.channel.VoidChannelPromise: void fail()>();
return v0;
}
public io.netty.channel.VoidChannelPromise syncUninterruptibly()
{
io.netty.channel.VoidChannelPromise v0;
v0 := @this: io.netty.channel.VoidChannelPromise;
staticinvoke <io.netty.channel.VoidChannelPromise: void fail()>();
return v0;
}
public io.netty.channel.VoidChannelPromise setFailure(java.lang.Throwable)
{
io.netty.channel.VoidChannelPromise v0;
java.lang.Throwable v1;
v0 := @this: io.netty.channel.VoidChannelPromise;
v1 := @parameter0: java.lang.Throwable;
specialinvoke v0.<io.netty.channel.VoidChannelPromise: void fireException0(java.lang.Throwable)>(v1);
return v0;
}
public io.netty.channel.VoidChannelPromise setSuccess()
{
io.netty.channel.VoidChannelPromise v0;
v0 := @this: io.netty.channel.VoidChannelPromise;
return v0;
}
public boolean tryFailure(java.lang.Throwable)
{
io.netty.channel.VoidChannelPromise v0;
java.lang.Throwable v1;
v0 := @this: io.netty.channel.VoidChannelPromise;
v1 := @parameter0: java.lang.Throwable;
specialinvoke v0.<io.netty.channel.VoidChannelPromise: void fireException0(java.lang.Throwable)>(v1);
return 0;
}
public boolean cancel(boolean)
{
io.netty.channel.VoidChannelPromise v0;
boolean v1;
v0 := @this: io.netty.channel.VoidChannelPromise;
v1 := @parameter0: boolean;
return 0;
}
public boolean trySuccess()
{
io.netty.channel.VoidChannelPromise v0;
v0 := @this: io.netty.channel.VoidChannelPromise;
return 0;
}
private static void fail()
{
java.lang.IllegalStateException v0;
v0 = new java.lang.IllegalStateException;
specialinvoke v0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("void future");
throw v0;
}
public io.netty.channel.VoidChannelPromise setSuccess(java.lang.Void)
{
io.netty.channel.VoidChannelPromise v0;
java.lang.Void v1;
v0 := @this: io.netty.channel.VoidChannelPromise;
v1 := @parameter0: java.lang.Void;
return v0;
}
public boolean trySuccess(java.lang.Void)
{
io.netty.channel.VoidChannelPromise v0;
java.lang.Void v1;
v0 := @this: io.netty.channel.VoidChannelPromise;
v1 := @parameter0: java.lang.Void;
return 0;
}
public java.lang.Void getNow()
{
io.netty.channel.VoidChannelPromise v0;
v0 := @this: io.netty.channel.VoidChannelPromise;
return null;
}
public io.netty.channel.ChannelPromise unvoid()
{
io.netty.channel.Channel v2;
io.netty.channel.VoidChannelPromise v0;
io.netty.channel.ChannelFutureListener v3, v4;
io.netty.channel.DefaultChannelPromise v1;
v0 := @this: io.netty.channel.VoidChannelPromise;
v1 = new io.netty.channel.DefaultChannelPromise;
v2 = v0.<io.netty.channel.VoidChannelPromise: io.netty.channel.Channel channel>;
specialinvoke v1.<io.netty.channel.DefaultChannelPromise: void <init>(io.netty.channel.Channel)>(v2);
v3 = v0.<io.netty.channel.VoidChannelPromise: io.netty.channel.ChannelFutureListener fireExceptionListener>;
if v3 == null goto label1;
v4 = v0.<io.netty.channel.VoidChannelPromise: io.netty.channel.ChannelFutureListener fireExceptionListener>;
interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)>(v4);
label1:
return v1;
}
public boolean isVoid()
{
io.netty.channel.VoidChannelPromise v0;
v0 := @this: io.netty.channel.VoidChannelPromise;
return 1;
}
private void fireException0(java.lang.Throwable)
{
io.netty.channel.Channel v3, v5;
io.netty.channel.VoidChannelPromise v0;
java.lang.Throwable v1;
io.netty.channel.ChannelFutureListener v2;
io.netty.channel.ChannelPipeline v6;
boolean v4;
v0 := @this: io.netty.channel.VoidChannelPromise;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.netty.channel.VoidChannelPromise: io.netty.channel.ChannelFutureListener fireExceptionListener>;
if v2 == null goto label1;
v3 = v0.<io.netty.channel.VoidChannelPromise: io.netty.channel.Channel channel>;
v4 = interfaceinvoke v3.<io.netty.channel.Channel: boolean isRegistered()>();
if v4 == 0 goto label1;
v5 = v0.<io.netty.channel.VoidChannelPromise: io.netty.channel.Channel channel>;
v6 = interfaceinvoke v5.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v6.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireExceptionCaught(java.lang.Throwable)>(v1);
label1:
return;
}
}