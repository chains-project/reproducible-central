final class io.netty.channel.embedded.EmbeddedEventLoop extends io.netty.util.concurrent.AbstractScheduledEventExecutor implements io.netty.channel.EventLoop
{
private long startTime;
private long frozenTimestamp;
private boolean timeFrozen;
private final java.util.Queue tasks;
void <init>()
{
long v1;
io.netty.channel.embedded.EmbeddedEventLoop v0;
java.util.ArrayDeque v2;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
specialinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: void <init>()>();
v1 = staticinvoke <io.netty.channel.embedded.EmbeddedEventLoop: long initialNanoTime()>();
v0.<io.netty.channel.embedded.EmbeddedEventLoop: long startTime> = v1;
v2 = new java.util.ArrayDeque;
specialinvoke v2.<java.util.ArrayDeque: void <init>(int)>(2);
v0.<io.netty.channel.embedded.EmbeddedEventLoop: java.util.Queue tasks> = v2;
return;
}
public io.netty.channel.EventLoopGroup parent()
{
io.netty.channel.embedded.EmbeddedEventLoop v0;
io.netty.util.concurrent.EventExecutorGroup v1;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
v1 = specialinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: io.netty.util.concurrent.EventExecutorGroup parent()>();
return v1;
}
public io.netty.channel.EventLoop next()
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.channel.embedded.EmbeddedEventLoop v0;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
v1 = specialinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: io.netty.util.concurrent.EventExecutor next()>();
return v1;
}
public void execute(java.lang.Runnable)
{
java.lang.Object v3;
java.util.Queue v2;
io.netty.channel.embedded.EmbeddedEventLoop v0;
java.lang.Runnable v1;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
v1 := @parameter0: java.lang.Runnable;
v2 = v0.<io.netty.channel.embedded.EmbeddedEventLoop: java.util.Queue tasks>;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "command");
interfaceinvoke v2.<java.util.Queue: boolean add(java.lang.Object)>(v3);
return;
}
void runTasks()
{
java.lang.Object v2;
java.util.Queue v1;
io.netty.channel.embedded.EmbeddedEventLoop v0;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
label1:
v1 = v0.<io.netty.channel.embedded.EmbeddedEventLoop: java.util.Queue tasks>;
v2 = interfaceinvoke v1.<java.util.Queue: java.lang.Object poll()>();
if v2 == null goto label2;
interfaceinvoke v2.<java.lang.Runnable: void run()>();
goto label1;
label2:
return;
}
boolean hasPendingNormalTasks()
{
java.util.Queue v1;
io.netty.channel.embedded.EmbeddedEventLoop v0;
boolean v2, v3;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
v1 = v0.<io.netty.channel.embedded.EmbeddedEventLoop: java.util.Queue tasks>;
v2 = interfaceinvoke v1.<java.util.Queue: boolean isEmpty()>();
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
long runScheduledTasks()
{
long v1, v3;
io.netty.channel.embedded.EmbeddedEventLoop v0;
java.lang.Runnable v2;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
v1 = virtualinvoke v0.<io.netty.channel.embedded.EmbeddedEventLoop: long getCurrentTimeNanos()>();
label1:
v2 = virtualinvoke v0.<io.netty.channel.embedded.EmbeddedEventLoop: java.lang.Runnable pollScheduledTask(long)>(v1);
if v2 != null goto label2;
v3 = virtualinvoke v0.<io.netty.channel.embedded.EmbeddedEventLoop: long nextScheduledTaskNano()>();
return v3;
label2:
interfaceinvoke v2.<java.lang.Runnable: void run()>();
goto label1;
}
long nextScheduledTask()
{
long v1;
io.netty.channel.embedded.EmbeddedEventLoop v0;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
v1 = virtualinvoke v0.<io.netty.channel.embedded.EmbeddedEventLoop: long nextScheduledTaskNano()>();
return v1;
}
protected long getCurrentTimeNanos()
{
long v2, v3, v4, v5;
io.netty.channel.embedded.EmbeddedEventLoop v0;
boolean v1;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
v1 = v0.<io.netty.channel.embedded.EmbeddedEventLoop: boolean timeFrozen>;
if v1 == 0 goto label1;
v2 = v0.<io.netty.channel.embedded.EmbeddedEventLoop: long frozenTimestamp>;
return v2;
label1:
v3 = staticinvoke <java.lang.System: long nanoTime()>();
v4 = v0.<io.netty.channel.embedded.EmbeddedEventLoop: long startTime>;
v5 = v3 - v4;
return v5;
}
void advanceTimeBy(long)
{
long v1, v3, v4, v5, v6;
io.netty.channel.embedded.EmbeddedEventLoop v0;
boolean v2;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
v1 := @parameter0: long;
v2 = v0.<io.netty.channel.embedded.EmbeddedEventLoop: boolean timeFrozen>;
if v2 == 0 goto label1;
v3 = v0.<io.netty.channel.embedded.EmbeddedEventLoop: long frozenTimestamp>;
v4 = v3 + v1;
v0.<io.netty.channel.embedded.EmbeddedEventLoop: long frozenTimestamp> = v4;
goto label2;
label1:
v5 = v0.<io.netty.channel.embedded.EmbeddedEventLoop: long startTime>;
v6 = v5 - v1;
v0.<io.netty.channel.embedded.EmbeddedEventLoop: long startTime> = v6;
label2:
return;
}
void freezeTime()
{
long v2;
io.netty.channel.embedded.EmbeddedEventLoop v0;
boolean v1;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
v1 = v0.<io.netty.channel.embedded.EmbeddedEventLoop: boolean timeFrozen>;
if v1 != 0 goto label1;
v2 = virtualinvoke v0.<io.netty.channel.embedded.EmbeddedEventLoop: long getCurrentTimeNanos()>();
v0.<io.netty.channel.embedded.EmbeddedEventLoop: long frozenTimestamp> = v2;
v0.<io.netty.channel.embedded.EmbeddedEventLoop: boolean timeFrozen> = 1;
label1:
return;
}
void unfreezeTime()
{
long v2, v3, v4;
io.netty.channel.embedded.EmbeddedEventLoop v0;
boolean v1;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
v1 = v0.<io.netty.channel.embedded.EmbeddedEventLoop: boolean timeFrozen>;
if v1 == 0 goto label1;
v2 = staticinvoke <java.lang.System: long nanoTime()>();
v3 = v0.<io.netty.channel.embedded.EmbeddedEventLoop: long frozenTimestamp>;
v4 = v2 - v3;
v0.<io.netty.channel.embedded.EmbeddedEventLoop: long startTime> = v4;
v0.<io.netty.channel.embedded.EmbeddedEventLoop: boolean timeFrozen> = 0;
label1:
return;
}
protected void cancelScheduledTasks()
{
io.netty.channel.embedded.EmbeddedEventLoop v0;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
specialinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: void cancelScheduledTasks()>();
return;
}
public io.netty.util.concurrent.Future shutdownGracefully(long, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v3;
java.lang.UnsupportedOperationException v4;
long v1, v2;
io.netty.channel.embedded.EmbeddedEventLoop v0;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 = new java.lang.UnsupportedOperationException;
specialinvoke v4.<java.lang.UnsupportedOperationException: void <init>()>();
throw v4;
}
public io.netty.util.concurrent.Future terminationFuture()
{
java.lang.UnsupportedOperationException v1;
io.netty.channel.embedded.EmbeddedEventLoop v0;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public void shutdown()
{
java.lang.UnsupportedOperationException v1;
io.netty.channel.embedded.EmbeddedEventLoop v0;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public boolean isShuttingDown()
{
io.netty.channel.embedded.EmbeddedEventLoop v0;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
return 0;
}
public boolean isShutdown()
{
io.netty.channel.embedded.EmbeddedEventLoop v0;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
return 0;
}
public boolean isTerminated()
{
io.netty.channel.embedded.EmbeddedEventLoop v0;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
return 0;
}
public boolean awaitTermination(long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v2;
long v1;
io.netty.channel.embedded.EmbeddedEventLoop v0;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
return 0;
}
public io.netty.channel.ChannelFuture register(io.netty.channel.Channel)
{
io.netty.channel.Channel v1;
io.netty.channel.embedded.EmbeddedEventLoop v0;
io.netty.channel.DefaultChannelPromise v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
v1 := @parameter0: io.netty.channel.Channel;
v2 = new io.netty.channel.DefaultChannelPromise;
specialinvoke v2.<io.netty.channel.DefaultChannelPromise: void <init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)>(v1, v0);
v3 = virtualinvoke v0.<io.netty.channel.embedded.EmbeddedEventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.ChannelPromise)>(v2);
return v3;
}
public io.netty.channel.ChannelFuture register(io.netty.channel.ChannelPromise)
{
io.netty.channel.Channel v2;
io.netty.channel.ChannelPromise v1;
io.netty.channel.embedded.EmbeddedEventLoop v0;
io.netty.channel.Channel$Unsafe v3;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
v1 := @parameter0: io.netty.channel.ChannelPromise;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "promise");
v2 = interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.Channel channel()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.Channel$Unsafe unsafe()>();
interfaceinvoke v3.<io.netty.channel.Channel$Unsafe: void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)>(v0, v1);
return v1;
}
public io.netty.channel.ChannelFuture register(io.netty.channel.Channel, io.netty.channel.ChannelPromise)
{
io.netty.channel.Channel v1;
io.netty.channel.ChannelPromise v2;
io.netty.channel.embedded.EmbeddedEventLoop v0;
io.netty.channel.Channel$Unsafe v3;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.Channel$Unsafe unsafe()>();
interfaceinvoke v3.<io.netty.channel.Channel$Unsafe: void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)>(v0, v2);
return v2;
}
public boolean inEventLoop()
{
io.netty.channel.embedded.EmbeddedEventLoop v0;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
return 1;
}
public boolean inEventLoop(java.lang.Thread)
{
io.netty.channel.embedded.EmbeddedEventLoop v0;
java.lang.Thread v1;
v0 := @this: io.netty.channel.embedded.EmbeddedEventLoop;
v1 := @parameter0: java.lang.Thread;
return 1;
}
}