public final class io.netty.channel.group.ChannelMatchers extends java.lang.Object
{
private static final io.netty.channel.group.ChannelMatcher ALL_MATCHER;
private static final io.netty.channel.group.ChannelMatcher SERVER_CHANNEL_MATCHER;
private static final io.netty.channel.group.ChannelMatcher NON_SERVER_CHANNEL_MATCHER;
private void <init>()
{
io.netty.channel.group.ChannelMatchers v0;
v0 := @this: io.netty.channel.group.ChannelMatchers;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static io.netty.channel.group.ChannelMatcher all()
{
io.netty.channel.group.ChannelMatcher v0;
v0 = <io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher ALL_MATCHER>;
return v0;
}
public static io.netty.channel.group.ChannelMatcher isNot(io.netty.channel.Channel)
{
io.netty.channel.Channel v0;
io.netty.channel.group.ChannelMatcher v1, v2;
v0 := @parameter0: io.netty.channel.Channel;
v1 = staticinvoke <io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher is(io.netty.channel.Channel)>(v0);
v2 = staticinvoke <io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher invert(io.netty.channel.group.ChannelMatcher)>(v1);
return v2;
}
public static io.netty.channel.group.ChannelMatcher is(io.netty.channel.Channel)
{
io.netty.channel.Channel v0;
io.netty.channel.group.ChannelMatchers$InstanceMatcher v1;
v0 := @parameter0: io.netty.channel.Channel;
v1 = new io.netty.channel.group.ChannelMatchers$InstanceMatcher;
specialinvoke v1.<io.netty.channel.group.ChannelMatchers$InstanceMatcher: void <init>(io.netty.channel.Channel)>(v0);
return v1;
}
public static io.netty.channel.group.ChannelMatcher isInstanceOf(java.lang.Class)
{
java.lang.Class v0;
io.netty.channel.group.ChannelMatchers$ClassMatcher v1;
v0 := @parameter0: java.lang.Class;
v1 = new io.netty.channel.group.ChannelMatchers$ClassMatcher;
specialinvoke v1.<io.netty.channel.group.ChannelMatchers$ClassMatcher: void <init>(java.lang.Class)>(v0);
return v1;
}
public static io.netty.channel.group.ChannelMatcher isNotInstanceOf(java.lang.Class)
{
io.netty.channel.group.ChannelMatcher v1, v2;
java.lang.Class v0;
v0 := @parameter0: java.lang.Class;
v1 = staticinvoke <io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher isInstanceOf(java.lang.Class)>(v0);
v2 = staticinvoke <io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher invert(io.netty.channel.group.ChannelMatcher)>(v1);
return v2;
}
public static io.netty.channel.group.ChannelMatcher isServerChannel()
{
io.netty.channel.group.ChannelMatcher v0;
v0 = <io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher SERVER_CHANNEL_MATCHER>;
return v0;
}
public static io.netty.channel.group.ChannelMatcher isNonServerChannel()
{
io.netty.channel.group.ChannelMatcher v0;
v0 = <io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher NON_SERVER_CHANNEL_MATCHER>;
return v0;
}
public static io.netty.channel.group.ChannelMatcher invert(io.netty.channel.group.ChannelMatcher)
{
io.netty.channel.group.ChannelMatcher v0;
io.netty.channel.group.ChannelMatchers$InvertMatcher v1;
v0 := @parameter0: io.netty.channel.group.ChannelMatcher;
v1 = new io.netty.channel.group.ChannelMatchers$InvertMatcher;
specialinvoke v1.<io.netty.channel.group.ChannelMatchers$InvertMatcher: void <init>(io.netty.channel.group.ChannelMatcher)>(v0);
return v1;
}
public static transient io.netty.channel.group.ChannelMatcher compose(io.netty.channel.group.ChannelMatcher[])
{
int v1, v3;
io.netty.channel.group.ChannelMatcher v4;
io.netty.channel.group.ChannelMatcher[] v0;
io.netty.channel.group.ChannelMatchers$CompositeMatcher v5;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: io.netty.channel.group.ChannelMatcher[];
v1 = lengthof v0;
if v1 >= 1 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("matchers must at least contain one element");
throw v2;
label1:
v3 = lengthof v0;
if v3 != 1 goto label2;
v4 = v0[0];
return v4;
label2:
v5 = new io.netty.channel.group.ChannelMatchers$CompositeMatcher;
specialinvoke v5.<io.netty.channel.group.ChannelMatchers$CompositeMatcher: void <init>(io.netty.channel.group.ChannelMatcher[])>(v0);
return v5;
}
static void <clinit>()
{
io.netty.channel.group.ChannelMatcher v1, v2;
io.netty.channel.group.ChannelMatchers$1 v0;
v0 = new io.netty.channel.group.ChannelMatchers$1;
specialinvoke v0.<io.netty.channel.group.ChannelMatchers$1: void <init>()>();
<io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher ALL_MATCHER> = v0;
v1 = staticinvoke <io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher isInstanceOf(java.lang.Class)>(class "Lio/netty/channel/ServerChannel;");
<io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher SERVER_CHANNEL_MATCHER> = v1;
v2 = staticinvoke <io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher isNotInstanceOf(java.lang.Class)>(class "Lio/netty/channel/ServerChannel;");
<io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher NON_SERVER_CHANNEL_MATCHER> = v2;
return;
}
}