public abstract class io.netty.channel.oio.AbstractOioChannel extends io.netty.channel.AbstractChannel
{
protected static final int SO_TIMEOUT;
boolean readPending;
boolean readWhenInactive;
final java.lang.Runnable readTask;
private final java.lang.Runnable clearReadPendingRunnable;
protected void <init>(io.netty.channel.Channel)
{
io.netty.channel.Channel v1;
io.netty.channel.oio.AbstractOioChannel v0;
io.netty.channel.oio.AbstractOioChannel$1 v2;
io.netty.channel.oio.AbstractOioChannel$2 v3;
v0 := @this: io.netty.channel.oio.AbstractOioChannel;
v1 := @parameter0: io.netty.channel.Channel;
specialinvoke v0.<io.netty.channel.AbstractChannel: void <init>(io.netty.channel.Channel)>(v1);
v2 = new io.netty.channel.oio.AbstractOioChannel$1;
specialinvoke v2.<io.netty.channel.oio.AbstractOioChannel$1: void <init>(io.netty.channel.oio.AbstractOioChannel)>(v0);
v0.<io.netty.channel.oio.AbstractOioChannel: java.lang.Runnable readTask> = v2;
v3 = new io.netty.channel.oio.AbstractOioChannel$2;
specialinvoke v3.<io.netty.channel.oio.AbstractOioChannel$2: void <init>(io.netty.channel.oio.AbstractOioChannel)>(v0);
v0.<io.netty.channel.oio.AbstractOioChannel: java.lang.Runnable clearReadPendingRunnable> = v3;
return;
}
protected io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()
{
io.netty.channel.oio.AbstractOioChannel v0;
io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe v1;
v0 := @this: io.netty.channel.oio.AbstractOioChannel;
v1 = new io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe;
specialinvoke v1.<io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe: void <init>(io.netty.channel.oio.AbstractOioChannel)>(v0);
return v1;
}
protected boolean isCompatible(io.netty.channel.EventLoop)
{
io.netty.channel.oio.AbstractOioChannel v0;
io.netty.channel.EventLoop v1;
boolean v2;
v0 := @this: io.netty.channel.oio.AbstractOioChannel;
v1 := @parameter0: io.netty.channel.EventLoop;
v2 = v1 instanceof io.netty.channel.ThreadPerChannelEventLoop;
return v2;
}
protected abstract void doConnect(java.net.SocketAddress, java.net.SocketAddress) throws java.lang.Exception;
protected void doBeginRead() throws java.lang.Exception
{
io.netty.channel.oio.AbstractOioChannel v0;
io.netty.channel.EventLoop v3;
java.lang.Runnable v4;
boolean v1, v2;
v0 := @this: io.netty.channel.oio.AbstractOioChannel;
v1 = v0.<io.netty.channel.oio.AbstractOioChannel: boolean readPending>;
if v1 == 0 goto label1;
return;
label1:
v2 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioChannel: boolean isActive()>();
if v2 != 0 goto label2;
v0.<io.netty.channel.oio.AbstractOioChannel: boolean readWhenInactive> = 1;
return;
label2:
v0.<io.netty.channel.oio.AbstractOioChannel: boolean readPending> = 1;
v3 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioChannel: io.netty.channel.EventLoop eventLoop()>();
v4 = v0.<io.netty.channel.oio.AbstractOioChannel: java.lang.Runnable readTask>;
interfaceinvoke v3.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v4);
return;
}
protected abstract void doRead();
protected boolean isReadPending()
{
io.netty.channel.oio.AbstractOioChannel v0;
boolean v1;
v0 := @this: io.netty.channel.oio.AbstractOioChannel;
v1 = v0.<io.netty.channel.oio.AbstractOioChannel: boolean readPending>;
return v1;
}
protected void setReadPending(boolean)
{
io.netty.channel.oio.AbstractOioChannel v0;
io.netty.channel.oio.AbstractOioChannel$3 v5;
io.netty.channel.EventLoop v3;
boolean v1, v2, v4;
v0 := @this: io.netty.channel.oio.AbstractOioChannel;
v1 := @parameter0: boolean;
v2 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioChannel: boolean isRegistered()>();
if v2 == 0 goto label2;
v3 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioChannel: io.netty.channel.EventLoop eventLoop()>();
v4 = interfaceinvoke v3.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v4 == 0 goto label1;
v0.<io.netty.channel.oio.AbstractOioChannel: boolean readPending> = v1;
goto label3;
label1:
v5 = new io.netty.channel.oio.AbstractOioChannel$3;
specialinvoke v5.<io.netty.channel.oio.AbstractOioChannel$3: void <init>(io.netty.channel.oio.AbstractOioChannel,boolean)>(v0, v1);
interfaceinvoke v3.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v5);
goto label3;
label2:
v0.<io.netty.channel.oio.AbstractOioChannel: boolean readPending> = v1;
label3:
return;
}
protected final void clearReadPending()
{
io.netty.channel.oio.AbstractOioChannel v0;
io.netty.channel.EventLoop v2;
java.lang.Runnable v4;
boolean v1, v3;
v0 := @this: io.netty.channel.oio.AbstractOioChannel;
v1 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioChannel: boolean isRegistered()>();
if v1 == 0 goto label2;
v2 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioChannel: io.netty.channel.EventLoop eventLoop()>();
v3 = interfaceinvoke v2.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v3 == 0 goto label1;
v0.<io.netty.channel.oio.AbstractOioChannel: boolean readPending> = 0;
goto label3;
label1:
v4 = v0.<io.netty.channel.oio.AbstractOioChannel: java.lang.Runnable clearReadPendingRunnable>;
interfaceinvoke v2.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v4);
goto label3;
label2:
v0.<io.netty.channel.oio.AbstractOioChannel: boolean readPending> = 0;
label3:
return;
}
}