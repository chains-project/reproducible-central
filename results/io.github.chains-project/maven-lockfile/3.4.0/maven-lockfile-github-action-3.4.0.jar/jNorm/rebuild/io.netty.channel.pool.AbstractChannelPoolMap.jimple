public abstract class io.netty.channel.pool.AbstractChannelPoolMap extends java.lang.Object implements io.netty.channel.pool.ChannelPoolMap, java.lang.Iterable, java.io.Closeable
{
private final java.util.concurrent.ConcurrentMap map;
public void <init>()
{
io.netty.channel.pool.AbstractChannelPoolMap v0;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.netty.channel.pool.AbstractChannelPoolMap;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v0.<io.netty.channel.pool.AbstractChannelPoolMap: java.util.concurrent.ConcurrentMap map> = v1;
return;
}
public final io.netty.channel.pool.ChannelPool get(java.lang.Object)
{
java.lang.Object v1, v3, v4, v6;
io.netty.channel.pool.AbstractChannelPoolMap v0;
java.util.concurrent.ConcurrentMap v2, v5;
v0 := @this: io.netty.channel.pool.AbstractChannelPoolMap;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.channel.pool.AbstractChannelPoolMap: java.util.concurrent.ConcurrentMap map>;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "key");
v4 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v3);
if v4 != null goto label1;
v4 = virtualinvoke v0.<io.netty.channel.pool.AbstractChannelPoolMap: io.netty.channel.pool.ChannelPool newPool(java.lang.Object)>(v1);
v5 = v0.<io.netty.channel.pool.AbstractChannelPoolMap: java.util.concurrent.ConcurrentMap map>;
v6 = interfaceinvoke v5.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v1, v4);
if v6 == null goto label1;
staticinvoke <io.netty.channel.pool.AbstractChannelPoolMap: io.netty.util.concurrent.Future poolCloseAsyncIfSupported(io.netty.channel.pool.ChannelPool)>(v4);
v4 = v6;
label1:
return v4;
}
public final boolean remove(java.lang.Object)
{
java.lang.Object v1, v3, v4;
io.netty.channel.pool.AbstractChannelPoolMap v0;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.netty.channel.pool.AbstractChannelPoolMap;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.channel.pool.AbstractChannelPoolMap: java.util.concurrent.ConcurrentMap map>;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "key");
v4 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v3);
if v4 == null goto label1;
staticinvoke <io.netty.channel.pool.AbstractChannelPoolMap: io.netty.util.concurrent.Future poolCloseAsyncIfSupported(io.netty.channel.pool.ChannelPool)>(v4);
return 1;
label1:
return 0;
}
private io.netty.util.concurrent.Future removeAsyncIfSupported(java.lang.Object)
{
io.netty.util.concurrent.Promise v6;
java.util.concurrent.ConcurrentMap v2;
io.netty.util.concurrent.GlobalEventExecutor v5, v9;
io.netty.channel.pool.AbstractChannelPoolMap$1 v8;
java.lang.Boolean v10;
java.lang.Object v1, v3, v4;
io.netty.channel.pool.AbstractChannelPoolMap v0;
io.netty.util.concurrent.Future v11, v7;
v0 := @this: io.netty.channel.pool.AbstractChannelPoolMap;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.channel.pool.AbstractChannelPoolMap: java.util.concurrent.ConcurrentMap map>;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "key");
v4 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v3);
if v4 == null goto label1;
v5 = <io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.GlobalEventExecutor INSTANCE>;
v6 = virtualinvoke v5.<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.Promise newPromise()>();
v7 = staticinvoke <io.netty.channel.pool.AbstractChannelPoolMap: io.netty.util.concurrent.Future poolCloseAsyncIfSupported(io.netty.channel.pool.ChannelPool)>(v4);
v8 = new io.netty.channel.pool.AbstractChannelPoolMap$1;
specialinvoke v8.<io.netty.channel.pool.AbstractChannelPoolMap$1: void <init>(io.netty.channel.pool.AbstractChannelPoolMap,io.netty.util.concurrent.Promise)>(v0, v6);
interfaceinvoke v7.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v8);
return v6;
label1:
v9 = <io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.GlobalEventExecutor INSTANCE>;
v10 = <java.lang.Boolean: java.lang.Boolean FALSE>;
v11 = virtualinvoke v9.<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.Future newSucceededFuture(java.lang.Object)>(v10);
return v11;
}
private static io.netty.util.concurrent.Future poolCloseAsyncIfSupported(io.netty.channel.pool.ChannelPool)
{
java.lang.Exception v5;
io.netty.util.concurrent.GlobalEventExecutor v3, v6;
io.netty.channel.pool.ChannelPool v0;
io.netty.util.concurrent.Future v2, v4, v7;
boolean v1;
v0 := @parameter0: io.netty.channel.pool.ChannelPool;
v1 = v0 instanceof io.netty.channel.pool.SimpleChannelPool;
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.util.concurrent.Future closeAsync()>();
return v2;
label1:
interfaceinvoke v0.<io.netty.channel.pool.ChannelPool: void close()>();
v3 = <io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.GlobalEventExecutor INSTANCE>;
v4 = virtualinvoke v3.<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.Future newSucceededFuture(java.lang.Object)>(null);
label2:
return v4;
label3:
v5 := @caughtexception;
v6 = <io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.GlobalEventExecutor INSTANCE>;
v7 = virtualinvoke v6.<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.Future newFailedFuture(java.lang.Throwable)>(v5);
return v7;
catch java.lang.Exception from label1 to label2 with label3;
}
public final java.util.Iterator iterator()
{
java.util.Iterator v4;
io.netty.util.internal.ReadOnlyIterator v1;
java.util.Set v3;
io.netty.channel.pool.AbstractChannelPoolMap v0;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.netty.channel.pool.AbstractChannelPoolMap;
v1 = new io.netty.util.internal.ReadOnlyIterator;
v2 = v0.<io.netty.channel.pool.AbstractChannelPoolMap: java.util.concurrent.ConcurrentMap map>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
specialinvoke v1.<io.netty.util.internal.ReadOnlyIterator: void <init>(java.util.Iterator)>(v4);
return v1;
}
public final int size()
{
int v2;
io.netty.channel.pool.AbstractChannelPoolMap v0;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.netty.channel.pool.AbstractChannelPoolMap;
v1 = v0.<io.netty.channel.pool.AbstractChannelPoolMap: java.util.concurrent.ConcurrentMap map>;
v2 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: int size()>();
return v2;
}
public final boolean isEmpty()
{
io.netty.channel.pool.AbstractChannelPoolMap v0;
boolean v2;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.netty.channel.pool.AbstractChannelPoolMap;
v1 = v0.<io.netty.channel.pool.AbstractChannelPoolMap: java.util.concurrent.ConcurrentMap map>;
v2 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();
return v2;
}
public final boolean contains(java.lang.Object)
{
java.lang.Object v1, v3;
io.netty.channel.pool.AbstractChannelPoolMap v0;
boolean v4;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.netty.channel.pool.AbstractChannelPoolMap;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.channel.pool.AbstractChannelPoolMap: java.util.concurrent.ConcurrentMap map>;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "key");
v4 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(v3);
return v4;
}
protected abstract io.netty.channel.pool.ChannelPool newPool(java.lang.Object);
public final void close()
{
java.util.Iterator v3;
java.util.Set v2;
java.lang.Object v5;
io.netty.channel.pool.AbstractChannelPoolMap v0;
io.netty.util.concurrent.Future v6;
boolean v4;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.netty.channel.pool.AbstractChannelPoolMap;
v1 = v0.<io.netty.channel.pool.AbstractChannelPoolMap: java.util.concurrent.ConcurrentMap map>;
v2 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = specialinvoke v0.<io.netty.channel.pool.AbstractChannelPoolMap: io.netty.util.concurrent.Future removeAsyncIfSupported(java.lang.Object)>(v5);
interfaceinvoke v6.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future syncUninterruptibly()>();
goto label1;
label2:
return;
}
}