final class io.netty.channel.pool.FixedChannelPool$AcquireTask extends io.netty.channel.pool.FixedChannelPool$AcquireListener
{
final io.netty.util.concurrent.Promise promise;
final long expireNanoTime;
java.util.concurrent.ScheduledFuture timeoutFuture;
final io.netty.channel.pool.FixedChannelPool this$0;
void <init>(io.netty.channel.pool.FixedChannelPool, io.netty.util.concurrent.Promise)
{
io.netty.util.concurrent.EventExecutor v7;
io.netty.channel.pool.FixedChannelPool$AcquireTask v0;
io.netty.util.concurrent.Promise v2, v8, v9;
long v3, v5, v6;
io.netty.channel.pool.FixedChannelPool v1, v4;
v0 := @this: io.netty.channel.pool.FixedChannelPool$AcquireTask;
v1 := @parameter0: io.netty.channel.pool.FixedChannelPool;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v0.<io.netty.channel.pool.FixedChannelPool$AcquireTask: io.netty.channel.pool.FixedChannelPool this$0> = v1;
specialinvoke v0.<io.netty.channel.pool.FixedChannelPool$AcquireListener: void <init>(io.netty.channel.pool.FixedChannelPool,io.netty.util.concurrent.Promise)>(v1, v2);
v3 = staticinvoke <java.lang.System: long nanoTime()>();
v4 = v0.<io.netty.channel.pool.FixedChannelPool$AcquireTask: io.netty.channel.pool.FixedChannelPool this$0>;
v5 = v4.<io.netty.channel.pool.FixedChannelPool: long acquireTimeoutNanos>;
v6 = v3 + v5;
v0.<io.netty.channel.pool.FixedChannelPool$AcquireTask: long expireNanoTime> = v6;
v7 = v1.<io.netty.channel.pool.FixedChannelPool: io.netty.util.concurrent.EventExecutor executor>;
v8 = interfaceinvoke v7.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Promise newPromise()>();
v9 = interfaceinvoke v8.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)>(v0);
v0.<io.netty.channel.pool.FixedChannelPool$AcquireTask: io.netty.util.concurrent.Promise promise> = v9;
return;
}
}