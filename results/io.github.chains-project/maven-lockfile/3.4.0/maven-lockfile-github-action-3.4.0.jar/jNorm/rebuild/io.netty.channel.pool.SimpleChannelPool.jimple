public class io.netty.channel.pool.SimpleChannelPool extends java.lang.Object implements io.netty.channel.pool.ChannelPool
{
private static final io.netty.util.AttributeKey POOL_KEY;
private final java.util.Deque deque;
private final io.netty.channel.pool.ChannelPoolHandler handler;
private final io.netty.channel.pool.ChannelHealthChecker healthCheck;
private final io.netty.bootstrap.Bootstrap bootstrap;
private final boolean releaseHealthCheck;
private final boolean lastRecentUsed;
static final boolean $assertionsDisabled;
public void <init>(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler)
{
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.bootstrap.Bootstrap v1;
io.netty.channel.pool.ChannelHealthChecker v3;
io.netty.channel.pool.ChannelPoolHandler v2;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.bootstrap.Bootstrap;
v2 := @parameter1: io.netty.channel.pool.ChannelPoolHandler;
v3 = <io.netty.channel.pool.ChannelHealthChecker: io.netty.channel.pool.ChannelHealthChecker ACTIVE>;
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,io.netty.channel.pool.ChannelHealthChecker)>(v1, v2, v3);
return;
}
public void <init>(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, io.netty.channel.pool.ChannelHealthChecker)
{
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.bootstrap.Bootstrap v1;
io.netty.channel.pool.ChannelHealthChecker v3;
io.netty.channel.pool.ChannelPoolHandler v2;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.bootstrap.Bootstrap;
v2 := @parameter1: io.netty.channel.pool.ChannelPoolHandler;
v3 := @parameter2: io.netty.channel.pool.ChannelHealthChecker;
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,io.netty.channel.pool.ChannelHealthChecker,boolean)>(v1, v2, v3, 1);
return;
}
public void <init>(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, io.netty.channel.pool.ChannelHealthChecker, boolean)
{
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.bootstrap.Bootstrap v1;
io.netty.channel.pool.ChannelHealthChecker v3;
io.netty.channel.pool.ChannelPoolHandler v2;
boolean v4;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.bootstrap.Bootstrap;
v2 := @parameter1: io.netty.channel.pool.ChannelPoolHandler;
v3 := @parameter2: io.netty.channel.pool.ChannelHealthChecker;
v4 := @parameter3: boolean;
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,io.netty.channel.pool.ChannelHealthChecker,boolean,boolean)>(v1, v2, v3, v4, 1);
return;
}
public void <init>(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, io.netty.channel.pool.ChannelHealthChecker, boolean, boolean)
{
io.netty.channel.pool.ChannelHealthChecker v3;
java.util.Deque v6;
io.netty.channel.pool.SimpleChannelPool$1 v12;
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.bootstrap.Bootstrap v1, v10, v11;
io.netty.channel.pool.ChannelPoolHandler v2;
java.lang.Object v7, v8, v9;
boolean v4, v5;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.bootstrap.Bootstrap;
v2 := @parameter1: io.netty.channel.pool.ChannelPoolHandler;
v3 := @parameter2: io.netty.channel.pool.ChannelHealthChecker;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v6 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.Deque newConcurrentDeque()>();
v0.<io.netty.channel.pool.SimpleChannelPool: java.util.Deque deque> = v6;
v7 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "handler");
v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.channel.pool.ChannelPoolHandler handler> = v7;
v8 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v3, "healthCheck");
v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.channel.pool.ChannelHealthChecker healthCheck> = v8;
v0.<io.netty.channel.pool.SimpleChannelPool: boolean releaseHealthCheck> = v4;
v9 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "bootstrap");
v10 = virtualinvoke v9.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.Bootstrap clone()>();
v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.bootstrap.Bootstrap bootstrap> = v10;
v11 = v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.bootstrap.Bootstrap bootstrap>;
v12 = new io.netty.channel.pool.SimpleChannelPool$1;
specialinvoke v12.<io.netty.channel.pool.SimpleChannelPool$1: void <init>(io.netty.channel.pool.SimpleChannelPool,io.netty.channel.pool.ChannelPoolHandler)>(v0, v2);
virtualinvoke v11.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap handler(io.netty.channel.ChannelHandler)>(v12);
v0.<io.netty.channel.pool.SimpleChannelPool: boolean lastRecentUsed> = v5;
return;
}
protected io.netty.bootstrap.Bootstrap bootstrap()
{
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.bootstrap.Bootstrap v1;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 = v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.bootstrap.Bootstrap bootstrap>;
return v1;
}
protected io.netty.channel.pool.ChannelPoolHandler handler()
{
io.netty.channel.pool.ChannelPoolHandler v1;
io.netty.channel.pool.SimpleChannelPool v0;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 = v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.channel.pool.ChannelPoolHandler handler>;
return v1;
}
protected io.netty.channel.pool.ChannelHealthChecker healthChecker()
{
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.channel.pool.ChannelHealthChecker v1;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 = v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.channel.pool.ChannelHealthChecker healthCheck>;
return v1;
}
protected boolean releaseHealthCheck()
{
io.netty.channel.pool.SimpleChannelPool v0;
boolean v1;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 = v0.<io.netty.channel.pool.SimpleChannelPool: boolean releaseHealthCheck>;
return v1;
}
public final io.netty.util.concurrent.Future acquire()
{
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.bootstrap.Bootstrap v1;
io.netty.channel.EventLoopGroup v3;
io.netty.util.concurrent.Promise v5;
io.netty.bootstrap.BootstrapConfig v2;
io.netty.channel.EventLoop v4;
io.netty.util.concurrent.Future v6;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 = v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.bootstrap.Bootstrap bootstrap>;
v2 = virtualinvoke v1.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.BootstrapConfig config()>();
v3 = virtualinvoke v2.<io.netty.bootstrap.BootstrapConfig: io.netty.channel.EventLoopGroup group()>();
v4 = interfaceinvoke v3.<io.netty.channel.EventLoopGroup: io.netty.channel.EventLoop next()>();
v5 = interfaceinvoke v4.<io.netty.channel.EventLoop: io.netty.util.concurrent.Promise newPromise()>();
v6 = virtualinvoke v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)>(v5);
return v6;
}
public io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)
{
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.util.concurrent.Promise v1;
java.lang.Object v2;
io.netty.util.concurrent.Future v3;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.util.concurrent.Promise;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "promise");
v3 = specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.util.concurrent.Future acquireHealthyFromPoolOrNew(io.netty.util.concurrent.Promise)>(v2);
return v3;
}
private io.netty.util.concurrent.Future acquireHealthyFromPoolOrNew(io.netty.util.concurrent.Promise)
{
io.netty.channel.pool.SimpleChannelPool$3 v11;
io.netty.util.AttributeKey v5;
java.lang.Throwable v12;
io.netty.channel.pool.SimpleChannelPool$2 v8;
io.netty.util.concurrent.Promise v1;
io.netty.channel.EventLoop v9;
io.netty.channel.ChannelFuture v6;
io.netty.channel.Channel v2;
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.bootstrap.Bootstrap v3, v4;
boolean v10, v7;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.util.concurrent.Promise;
label1:
v2 = virtualinvoke v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.channel.Channel pollChannel()>();
if v2 != null goto label3;
v3 = v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.bootstrap.Bootstrap bootstrap>;
v4 = virtualinvoke v3.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.Bootstrap clone()>();
v5 = <io.netty.channel.pool.SimpleChannelPool: io.netty.util.AttributeKey POOL_KEY>;
virtualinvoke v4.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap attr(io.netty.util.AttributeKey,java.lang.Object)>(v5, v0);
v6 = virtualinvoke v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.channel.ChannelFuture connectChannel(io.netty.bootstrap.Bootstrap)>(v4);
v7 = interfaceinvoke v6.<io.netty.channel.ChannelFuture: boolean isDone()>();
if v7 == 0 goto label2;
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void notifyConnect(io.netty.channel.ChannelFuture,io.netty.util.concurrent.Promise)>(v6, v1);
goto label7;
label2:
v8 = new io.netty.channel.pool.SimpleChannelPool$2;
specialinvoke v8.<io.netty.channel.pool.SimpleChannelPool$2: void <init>(io.netty.channel.pool.SimpleChannelPool,io.netty.util.concurrent.Promise)>(v0, v1);
interfaceinvoke v6.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v8);
goto label7;
label3:
v9 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v10 = interfaceinvoke v9.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v10 == 0 goto label4;
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void doHealthCheck(io.netty.channel.Channel,io.netty.util.concurrent.Promise)>(v2, v1);
goto label7;
label4:
v11 = new io.netty.channel.pool.SimpleChannelPool$3;
specialinvoke v11.<io.netty.channel.pool.SimpleChannelPool$3: void <init>(io.netty.channel.pool.SimpleChannelPool,io.netty.channel.Channel,io.netty.util.concurrent.Promise)>(v0, v2, v1);
interfaceinvoke v9.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v11);
label5:
goto label7;
label6:
v12 := @caughtexception;
interfaceinvoke v1.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v12);
label7:
return v1;
catch java.lang.Throwable from label1 to label5 with label6;
}
private void notifyConnect(io.netty.channel.ChannelFuture, io.netty.util.concurrent.Promise)
{
java.lang.Throwable v7, v8;
io.netty.util.concurrent.Promise v2;
io.netty.channel.ChannelFuture v1;
io.netty.channel.Channel v3;
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.channel.pool.ChannelPoolHandler v5;
boolean v4, v6;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.channel.ChannelFuture;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 = null;
label1:
v4 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: boolean isSuccess()>();
if v4 == 0 goto label2;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: io.netty.channel.Channel channel()>();
v5 = v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.channel.pool.ChannelPoolHandler handler>;
interfaceinvoke v5.<io.netty.channel.pool.ChannelPoolHandler: void channelAcquired(io.netty.channel.Channel)>(v3);
v6 = interfaceinvoke v2.<io.netty.util.concurrent.Promise: boolean trySuccess(java.lang.Object)>(v3);
if v6 != 0 goto label5;
virtualinvoke v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.util.concurrent.Future release(io.netty.channel.Channel)>(v3);
goto label5;
label2:
v7 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: java.lang.Throwable cause()>();
interfaceinvoke v2.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v7);
label3:
goto label5;
label4:
v8 := @caughtexception;
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void closeAndFail(io.netty.channel.Channel,java.lang.Throwable,io.netty.util.concurrent.Promise)>(v3, v8, v2);
label5:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
private void doHealthCheck(io.netty.channel.Channel, io.netty.util.concurrent.Promise)
{
java.lang.Throwable v11;
io.netty.channel.pool.SimpleChannelPool$4 v10;
io.netty.util.concurrent.Promise v2;
io.netty.channel.pool.ChannelHealthChecker v7;
java.lang.AssertionError v6;
io.netty.channel.EventLoop v4;
io.netty.channel.Channel v1;
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.util.concurrent.Future v8;
boolean v3, v5, v9;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.util.concurrent.Promise;
label1:
v3 = <io.netty.channel.pool.SimpleChannelPool: boolean $assertionsDisabled>;
if v3 != 0 goto label2;
v4 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v5 = interfaceinvoke v4.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v5 != 0 goto label2;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label2:
v7 = v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.channel.pool.ChannelHealthChecker healthCheck>;
v8 = interfaceinvoke v7.<io.netty.channel.pool.ChannelHealthChecker: io.netty.util.concurrent.Future isHealthy(io.netty.channel.Channel)>(v1);
v9 = interfaceinvoke v8.<io.netty.util.concurrent.Future: boolean isDone()>();
if v9 == 0 goto label3;
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void notifyHealthCheck(io.netty.util.concurrent.Future,io.netty.channel.Channel,io.netty.util.concurrent.Promise)>(v8, v1, v2);
goto label6;
label3:
v10 = new io.netty.channel.pool.SimpleChannelPool$4;
specialinvoke v10.<io.netty.channel.pool.SimpleChannelPool$4: void <init>(io.netty.channel.pool.SimpleChannelPool,io.netty.channel.Channel,io.netty.util.concurrent.Promise)>(v0, v1, v2);
interfaceinvoke v8.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v10);
label4:
goto label6;
label5:
v11 := @caughtexception;
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void closeAndFail(io.netty.channel.Channel,java.lang.Throwable,io.netty.util.concurrent.Promise)>(v1, v11, v2);
label6:
return;
catch java.lang.Throwable from label1 to label4 with label5;
}
private void notifyHealthCheck(io.netty.util.concurrent.Future, io.netty.channel.Channel, io.netty.util.concurrent.Promise)
{
io.netty.util.AttributeKey v11;
java.lang.Throwable v14;
io.netty.util.Attribute v12;
io.netty.util.concurrent.Promise v3;
java.lang.AssertionError v7;
io.netty.channel.EventLoop v5;
io.netty.channel.Channel v2;
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.channel.pool.ChannelPoolHandler v13;
java.lang.Object v9;
io.netty.util.concurrent.Future v1;
boolean v10, v4, v6, v8;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.util.concurrent.Future;
v2 := @parameter1: io.netty.channel.Channel;
v3 := @parameter2: io.netty.util.concurrent.Promise;
label1:
v4 = <io.netty.channel.pool.SimpleChannelPool: boolean $assertionsDisabled>;
if v4 != 0 goto label2;
v5 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v6 = interfaceinvoke v5.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v6 != 0 goto label2;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label2:
v8 = interfaceinvoke v1.<io.netty.util.concurrent.Future: boolean isSuccess()>();
if v8 == 0 goto label3;
v9 = interfaceinvoke v1.<io.netty.util.concurrent.Future: java.lang.Object getNow()>();
v10 = virtualinvoke v9.<java.lang.Boolean: boolean booleanValue()>();
if v10 == 0 goto label3;
v11 = <io.netty.channel.pool.SimpleChannelPool: io.netty.util.AttributeKey POOL_KEY>;
v12 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.util.Attribute attr(io.netty.util.AttributeKey)>(v11);
interfaceinvoke v12.<io.netty.util.Attribute: void set(java.lang.Object)>(v0);
v13 = v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.channel.pool.ChannelPoolHandler handler>;
interfaceinvoke v13.<io.netty.channel.pool.ChannelPoolHandler: void channelAcquired(io.netty.channel.Channel)>(v2);
interfaceinvoke v3.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(v2);
goto label6;
label3:
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void closeChannel(io.netty.channel.Channel)>(v2);
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.util.concurrent.Future acquireHealthyFromPoolOrNew(io.netty.util.concurrent.Promise)>(v3);
label4:
goto label6;
label5:
v14 := @caughtexception;
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void closeAndFail(io.netty.channel.Channel,java.lang.Throwable,io.netty.util.concurrent.Promise)>(v2, v14, v3);
label6:
return;
catch java.lang.Throwable from label1 to label4 with label5;
}
protected io.netty.channel.ChannelFuture connectChannel(io.netty.bootstrap.Bootstrap)
{
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.bootstrap.Bootstrap v1;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.bootstrap.Bootstrap;
v2 = virtualinvoke v1.<io.netty.bootstrap.Bootstrap: io.netty.channel.ChannelFuture connect()>();
return v2;
}
public final io.netty.util.concurrent.Future release(io.netty.channel.Channel)
{
io.netty.channel.Channel v1;
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.util.concurrent.Promise v3;
io.netty.channel.EventLoop v2;
io.netty.util.concurrent.Future v4;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.channel.Channel;
v2 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v3 = interfaceinvoke v2.<io.netty.channel.EventLoop: io.netty.util.concurrent.Promise newPromise()>();
v4 = virtualinvoke v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.util.concurrent.Future release(io.netty.channel.Channel,io.netty.util.concurrent.Promise)>(v1, v3);
return v4;
}
public io.netty.util.concurrent.Future release(io.netty.channel.Channel, io.netty.util.concurrent.Promise)
{
io.netty.channel.Channel v1;
io.netty.channel.pool.SimpleChannelPool v0;
java.lang.Throwable v6;
io.netty.channel.pool.SimpleChannelPool$5 v5;
io.netty.util.concurrent.Promise v2;
io.netty.channel.EventLoop v3;
boolean v4;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.util.concurrent.Promise;
label1:
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "channel");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "promise");
v3 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v4 = interfaceinvoke v3.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v4 == 0 goto label2;
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void doReleaseChannel(io.netty.channel.Channel,io.netty.util.concurrent.Promise)>(v1, v2);
goto label5;
label2:
v5 = new io.netty.channel.pool.SimpleChannelPool$5;
specialinvoke v5.<io.netty.channel.pool.SimpleChannelPool$5: void <init>(io.netty.channel.pool.SimpleChannelPool,io.netty.channel.Channel,io.netty.util.concurrent.Promise)>(v0, v1, v2);
interfaceinvoke v3.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v5);
label3:
goto label5;
label4:
v6 := @caughtexception;
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void closeAndFail(io.netty.channel.Channel,java.lang.Throwable,io.netty.util.concurrent.Promise)>(v1, v6, v2);
label5:
return v2;
catch java.lang.Throwable from label1 to label3 with label4;
}
private void doReleaseChannel(io.netty.channel.Channel, io.netty.util.concurrent.Promise)
{
io.netty.util.AttributeKey v7;
java.lang.Throwable v13;
io.netty.util.Attribute v8;
io.netty.util.concurrent.Promise v2;
java.lang.AssertionError v6;
io.netty.channel.EventLoop v4;
java.lang.IllegalArgumentException v10;
io.netty.channel.Channel v1;
io.netty.channel.pool.SimpleChannelPool v0;
java.lang.Object v9;
java.lang.String v11;
boolean v12, v3, v5;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.util.concurrent.Promise;
label1:
v3 = <io.netty.channel.pool.SimpleChannelPool: boolean $assertionsDisabled>;
if v3 != 0 goto label2;
v4 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v5 = interfaceinvoke v4.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v5 != 0 goto label2;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label2:
v7 = <io.netty.channel.pool.SimpleChannelPool: io.netty.util.AttributeKey POOL_KEY>;
v8 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.util.Attribute attr(io.netty.util.AttributeKey)>(v7);
v9 = interfaceinvoke v8.<io.netty.util.Attribute: java.lang.Object getAndSet(java.lang.Object)>(null);
if v9 == v0 goto label3;
v10 = new java.lang.IllegalArgumentException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.channel.Channel)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Channel \u0001 was not acquired from this ChannelPool");
specialinvoke v10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v11);
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void closeAndFail(io.netty.channel.Channel,java.lang.Throwable,io.netty.util.concurrent.Promise)>(v1, v10, v2);
goto label7;
label3:
v12 = v0.<io.netty.channel.pool.SimpleChannelPool: boolean releaseHealthCheck>;
if v12 == 0 goto label4;
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void doHealthCheckOnRelease(io.netty.channel.Channel,io.netty.util.concurrent.Promise)>(v1, v2);
goto label7;
label4:
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void releaseAndOffer(io.netty.channel.Channel,io.netty.util.concurrent.Promise)>(v1, v2);
label5:
goto label7;
label6:
v13 := @caughtexception;
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void closeAndFail(io.netty.channel.Channel,java.lang.Throwable,io.netty.util.concurrent.Promise)>(v1, v13, v2);
label7:
return;
catch java.lang.Throwable from label1 to label5 with label6;
}
private void doHealthCheckOnRelease(io.netty.channel.Channel, io.netty.util.concurrent.Promise) throws java.lang.Exception
{
io.netty.channel.Channel v1;
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.util.concurrent.Promise v2;
io.netty.channel.pool.SimpleChannelPool$6 v6;
io.netty.channel.pool.ChannelHealthChecker v3;
io.netty.util.concurrent.Future v4;
boolean v5;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 = v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.channel.pool.ChannelHealthChecker healthCheck>;
v4 = interfaceinvoke v3.<io.netty.channel.pool.ChannelHealthChecker: io.netty.util.concurrent.Future isHealthy(io.netty.channel.Channel)>(v1);
v5 = interfaceinvoke v4.<io.netty.util.concurrent.Future: boolean isDone()>();
if v5 == 0 goto label1;
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void releaseAndOfferIfHealthy(io.netty.channel.Channel,io.netty.util.concurrent.Promise,io.netty.util.concurrent.Future)>(v1, v2, v4);
goto label2;
label1:
v6 = new io.netty.channel.pool.SimpleChannelPool$6;
specialinvoke v6.<io.netty.channel.pool.SimpleChannelPool$6: void <init>(io.netty.channel.pool.SimpleChannelPool,io.netty.channel.Channel,io.netty.util.concurrent.Promise,io.netty.util.concurrent.Future)>(v0, v1, v2, v4);
interfaceinvoke v4.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v6);
label2:
return;
}
private void releaseAndOfferIfHealthy(io.netty.channel.Channel, io.netty.util.concurrent.Promise, io.netty.util.concurrent.Future)
{
java.lang.Throwable v7;
io.netty.util.concurrent.Promise v2;
io.netty.channel.Channel v1;
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.channel.pool.ChannelPoolHandler v6;
java.lang.Object v4;
io.netty.util.concurrent.Future v3;
boolean v5;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 := @parameter2: io.netty.util.concurrent.Future;
label1:
v4 = interfaceinvoke v3.<io.netty.util.concurrent.Future: java.lang.Object getNow()>();
v5 = virtualinvoke v4.<java.lang.Boolean: boolean booleanValue()>();
if v5 == 0 goto label2;
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void releaseAndOffer(io.netty.channel.Channel,io.netty.util.concurrent.Promise)>(v1, v2);
goto label5;
label2:
v6 = v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.channel.pool.ChannelPoolHandler handler>;
interfaceinvoke v6.<io.netty.channel.pool.ChannelPoolHandler: void channelReleased(io.netty.channel.Channel)>(v1);
interfaceinvoke v2.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(null);
label3:
goto label5;
label4:
v7 := @caughtexception;
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void closeAndFail(io.netty.channel.Channel,java.lang.Throwable,io.netty.util.concurrent.Promise)>(v1, v7, v2);
label5:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
private void releaseAndOffer(io.netty.channel.Channel, io.netty.util.concurrent.Promise) throws java.lang.Exception
{
io.netty.channel.Channel v1;
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.channel.pool.SimpleChannelPool$ChannelPoolFullException v5;
io.netty.util.concurrent.Promise v2;
io.netty.channel.pool.ChannelPoolHandler v4;
boolean v3;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 = virtualinvoke v0.<io.netty.channel.pool.SimpleChannelPool: boolean offerChannel(io.netty.channel.Channel)>(v1);
if v3 == 0 goto label1;
v4 = v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.channel.pool.ChannelPoolHandler handler>;
interfaceinvoke v4.<io.netty.channel.pool.ChannelPoolHandler: void channelReleased(io.netty.channel.Channel)>(v1);
interfaceinvoke v2.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(null);
goto label2;
label1:
v5 = new io.netty.channel.pool.SimpleChannelPool$ChannelPoolFullException;
specialinvoke v5.<io.netty.channel.pool.SimpleChannelPool$ChannelPoolFullException: void <init>()>();
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void closeAndFail(io.netty.channel.Channel,java.lang.Throwable,io.netty.util.concurrent.Promise)>(v1, v5, v2);
label2:
return;
}
private void closeChannel(io.netty.channel.Channel) throws java.lang.Exception
{
io.netty.channel.Channel v1;
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.util.AttributeKey v2;
io.netty.util.Attribute v3;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.channel.Channel;
v2 = <io.netty.channel.pool.SimpleChannelPool: io.netty.util.AttributeKey POOL_KEY>;
v3 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.util.Attribute attr(io.netty.util.AttributeKey)>(v2);
interfaceinvoke v3.<io.netty.util.Attribute: java.lang.Object getAndSet(java.lang.Object)>(null);
interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelFuture close()>();
return;
}
private void closeAndFail(io.netty.channel.Channel, java.lang.Throwable, io.netty.util.concurrent.Promise)
{
io.netty.channel.Channel v1;
io.netty.channel.pool.SimpleChannelPool v0;
java.lang.Throwable v2, v4;
io.netty.util.concurrent.Promise v3;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: java.lang.Throwable;
v3 := @parameter2: io.netty.util.concurrent.Promise;
if v1 == null goto label4;
label1:
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void closeChannel(io.netty.channel.Channel)>(v1);
label2:
goto label4;
label3:
v4 := @caughtexception;
interfaceinvoke v3.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v4);
label4:
interfaceinvoke v3.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v2);
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected io.netty.channel.Channel pollChannel()
{
io.netty.channel.pool.SimpleChannelPool v0;
java.lang.Object v3;
java.util.Deque v2, v4;
boolean v1;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 = v0.<io.netty.channel.pool.SimpleChannelPool: boolean lastRecentUsed>;
if v1 == 0 goto label1;
v2 = v0.<io.netty.channel.pool.SimpleChannelPool: java.util.Deque deque>;
v3 = interfaceinvoke v2.<java.util.Deque: java.lang.Object pollLast()>();
goto label2;
label1:
v4 = v0.<io.netty.channel.pool.SimpleChannelPool: java.util.Deque deque>;
interfaceinvoke v4.<java.util.Deque: java.lang.Object pollFirst()>();
label2:
return v3;
}
protected boolean offerChannel(io.netty.channel.Channel)
{
io.netty.channel.Channel v1;
io.netty.channel.pool.SimpleChannelPool v0;
java.util.Deque v2;
boolean v3;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 := @parameter0: io.netty.channel.Channel;
v2 = v0.<io.netty.channel.pool.SimpleChannelPool: java.util.Deque deque>;
v3 = interfaceinvoke v2.<java.util.Deque: boolean offer(java.lang.Object)>(v1);
return v3;
}
public void close()
{
io.netty.channel.Channel v1;
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
label1:
v1 = virtualinvoke v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.channel.Channel pollChannel()>();
if v1 == null goto label2;
v2 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelFuture close()>();
interfaceinvoke v2.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture awaitUninterruptibly()>();
goto label1;
label2:
return;
}
public io.netty.util.concurrent.Future closeAsync()
{
io.netty.channel.pool.SimpleChannelPool v0;
io.netty.util.concurrent.GlobalEventExecutor v1;
io.netty.channel.pool.SimpleChannelPool$7 v2;
io.netty.util.concurrent.Future v3;
v0 := @this: io.netty.channel.pool.SimpleChannelPool;
v1 = <io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.GlobalEventExecutor INSTANCE>;
v2 = new io.netty.channel.pool.SimpleChannelPool$7;
specialinvoke v2.<io.netty.channel.pool.SimpleChannelPool$7: void <init>(io.netty.channel.pool.SimpleChannelPool)>(v0);
v3 = virtualinvoke v1.<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.Future submit(java.util.concurrent.Callable)>(v2);
return v3;
}
static void <clinit>()
{
io.netty.util.AttributeKey v3;
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/channel/pool/SimpleChannelPool;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.channel.pool.SimpleChannelPool: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <io.netty.util.AttributeKey: io.netty.util.AttributeKey newInstance(java.lang.String)>("io.netty.channel.pool.SimpleChannelPool");
<io.netty.channel.pool.SimpleChannelPool: io.netty.util.AttributeKey POOL_KEY> = v3;
return;
}
}