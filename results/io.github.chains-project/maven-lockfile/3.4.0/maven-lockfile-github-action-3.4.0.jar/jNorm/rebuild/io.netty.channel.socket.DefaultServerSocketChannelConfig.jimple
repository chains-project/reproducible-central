public class io.netty.channel.socket.DefaultServerSocketChannelConfig extends io.netty.channel.DefaultChannelConfig implements io.netty.channel.socket.ServerSocketChannelConfig
{
protected final java.net.ServerSocket javaSocket;
private volatile int backlog;
public void <init>(io.netty.channel.socket.ServerSocketChannel, java.net.ServerSocket)
{
io.netty.channel.socket.ServerSocketChannel v1;
java.net.ServerSocket v2;
io.netty.channel.ServerChannelRecvByteBufAllocator v3;
int v4;
java.lang.Object v5;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 := @parameter0: io.netty.channel.socket.ServerSocketChannel;
v2 := @parameter1: java.net.ServerSocket;
v3 = new io.netty.channel.ServerChannelRecvByteBufAllocator;
specialinvoke v3.<io.netty.channel.ServerChannelRecvByteBufAllocator: void <init>()>();
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: void <init>(io.netty.channel.Channel,io.netty.channel.RecvByteBufAllocator)>(v1, v3);
v4 = <io.netty.util.NetUtil: int SOMAXCONN>;
v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: int backlog> = v4;
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "javaSocket");
v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: java.net.ServerSocket javaSocket> = v5;
return;
}
public java.util.Map getOptions()
{
io.netty.channel.ChannelOption[] v2;
io.netty.channel.ChannelOption v3, v4, v5;
java.util.Map v1, v6;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 = specialinvoke v0.<io.netty.channel.DefaultChannelConfig: java.util.Map getOptions()>();
v2 = newarray (io.netty.channel.ChannelOption)[3];
v3 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_RCVBUF>;
v2[0] = v3;
v4 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_REUSEADDR>;
v2[1] = v4;
v5 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_BACKLOG>;
v2[2] = v5;
v6 = virtualinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])>(v1, v2);
return v6;
}
public java.lang.Object getOption(io.netty.channel.ChannelOption)
{
io.netty.channel.ChannelOption v1, v2, v5, v8;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
java.lang.Integer v10, v4;
int v3, v9;
java.lang.Boolean v7;
java.lang.Object v11;
boolean v6;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 := @parameter0: io.netty.channel.ChannelOption;
v2 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_RCVBUF>;
if v1 != v2 goto label1;
v3 = virtualinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: int getReceiveBufferSize()>();
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
return v4;
label1:
v5 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_REUSEADDR>;
if v1 != v5 goto label2;
v6 = virtualinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: boolean isReuseAddress()>();
v7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v6);
return v7;
label2:
v8 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_BACKLOG>;
if v1 != v8 goto label3;
v9 = virtualinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: int getBacklog()>();
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v9);
return v10;
label3:
v11 = specialinvoke v0.<io.netty.channel.DefaultChannelConfig: java.lang.Object getOption(io.netty.channel.ChannelOption)>(v1);
return v11;
}
public boolean setOption(io.netty.channel.ChannelOption, java.lang.Object)
{
io.netty.channel.ChannelOption v1, v3, v5, v7;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
int v4, v8;
java.lang.Object v2;
boolean v6, v9;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 := @parameter0: io.netty.channel.ChannelOption;
v2 := @parameter1: java.lang.Object;
virtualinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: void validate(io.netty.channel.ChannelOption,java.lang.Object)>(v1, v2);
v3 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_RCVBUF>;
if v1 != v3 goto label1;
v4 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
virtualinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: io.netty.channel.socket.ServerSocketChannelConfig setReceiveBufferSize(int)>(v4);
goto label4;
label1:
v5 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_REUSEADDR>;
if v1 != v5 goto label2;
v6 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: io.netty.channel.socket.ServerSocketChannelConfig setReuseAddress(boolean)>(v6);
goto label4;
label2:
v7 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_BACKLOG>;
if v1 != v7 goto label3;
v8 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
virtualinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: io.netty.channel.socket.ServerSocketChannelConfig setBacklog(int)>(v8);
goto label4;
label3:
v9 = specialinvoke v0.<io.netty.channel.DefaultChannelConfig: boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)>(v1, v2);
return v9;
label4:
return 1;
}
public boolean isReuseAddress()
{
java.net.ServerSocket v1;
io.netty.channel.ChannelException v4;
java.net.SocketException v3;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
boolean v2;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
label1:
v1 = v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: java.net.ServerSocket javaSocket>;
v2 = virtualinvoke v1.<java.net.ServerSocket: boolean getReuseAddress()>();
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.socket.ServerSocketChannelConfig setReuseAddress(boolean)
{
java.net.ServerSocket v2;
io.netty.channel.ChannelException v4;
java.net.SocketException v3;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
boolean v1;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 := @parameter0: boolean;
label1:
v2 = v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: java.net.ServerSocket javaSocket>;
virtualinvoke v2.<java.net.ServerSocket: void setReuseAddress(boolean)>(v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
label4:
return v0;
catch java.net.SocketException from label1 to label2 with label3;
}
public int getReceiveBufferSize()
{
java.net.ServerSocket v1;
io.netty.channel.ChannelException v4;
java.net.SocketException v3;
int v2;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
label1:
v1 = v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: java.net.ServerSocket javaSocket>;
v2 = virtualinvoke v1.<java.net.ServerSocket: int getReceiveBufferSize()>();
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.socket.ServerSocketChannelConfig setReceiveBufferSize(int)
{
java.net.ServerSocket v2;
io.netty.channel.ChannelException v4;
java.net.SocketException v3;
int v1;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 := @parameter0: int;
label1:
v2 = v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: java.net.ServerSocket javaSocket>;
virtualinvoke v2.<java.net.ServerSocket: void setReceiveBufferSize(int)>(v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
label4:
return v0;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.socket.ServerSocketChannelConfig setPerformancePreferences(int, int, int)
{
java.net.ServerSocket v4;
int v1, v2, v3;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: java.net.ServerSocket javaSocket>;
virtualinvoke v4.<java.net.ServerSocket: void setPerformancePreferences(int,int,int)>(v1, v2, v3);
return v0;
}
public int getBacklog()
{
int v1;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 = v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: int backlog>;
return v1;
}
public io.netty.channel.socket.ServerSocketChannelConfig setBacklog(int)
{
int v1;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 := @parameter0: int;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v1, "backlog");
v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: int backlog> = v1;
return v0;
}
public io.netty.channel.socket.ServerSocketChannelConfig setConnectTimeoutMillis(int)
{
int v1;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setConnectTimeoutMillis(int)>(v1);
return v0;
}
public io.netty.channel.socket.ServerSocketChannelConfig setMaxMessagesPerRead(int)
{
int v1;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setMaxMessagesPerRead(int)>(v1);
return v0;
}
public io.netty.channel.socket.ServerSocketChannelConfig setWriteSpinCount(int)
{
int v1;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setWriteSpinCount(int)>(v1);
return v0;
}
public io.netty.channel.socket.ServerSocketChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator)
{
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
io.netty.buffer.ByteBufAllocator v1;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator)>(v1);
return v0;
}
public io.netty.channel.socket.ServerSocketChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator)
{
io.netty.channel.RecvByteBufAllocator v1;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 := @parameter0: io.netty.channel.RecvByteBufAllocator;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator)>(v1);
return v0;
}
public io.netty.channel.socket.ServerSocketChannelConfig setAutoRead(boolean)
{
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
boolean v1;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setAutoRead(boolean)>(v1);
return v0;
}
public io.netty.channel.socket.ServerSocketChannelConfig setWriteBufferHighWaterMark(int)
{
int v1;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setWriteBufferHighWaterMark(int)>(v1);
return v0;
}
public io.netty.channel.socket.ServerSocketChannelConfig setWriteBufferLowWaterMark(int)
{
int v1;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setWriteBufferLowWaterMark(int)>(v1);
return v0;
}
public io.netty.channel.socket.ServerSocketChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark)
{
io.netty.channel.WriteBufferWaterMark v1;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 := @parameter0: io.netty.channel.WriteBufferWaterMark;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark)>(v1);
return v0;
}
public io.netty.channel.socket.ServerSocketChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator)
{
io.netty.channel.MessageSizeEstimator v1;
io.netty.channel.socket.DefaultServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultServerSocketChannelConfig;
v1 := @parameter0: io.netty.channel.MessageSizeEstimator;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator)>(v1);
return v0;
}
}