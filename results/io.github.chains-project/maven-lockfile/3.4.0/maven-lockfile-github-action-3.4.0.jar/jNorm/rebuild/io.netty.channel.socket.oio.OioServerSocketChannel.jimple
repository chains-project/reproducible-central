public class io.netty.channel.socket.oio.OioServerSocketChannel extends io.netty.channel.oio.AbstractOioMessageChannel implements io.netty.channel.socket.ServerSocketChannel
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final io.netty.channel.ChannelMetadata METADATA;
final java.net.ServerSocket socket;
private final io.netty.channel.socket.oio.OioServerSocketChannelConfig config;
private static java.net.ServerSocket newServerSocket()
{
java.net.ServerSocket v0;
io.netty.channel.ChannelException v2;
java.io.IOException v1;
label1:
v0 = new java.net.ServerSocket;
specialinvoke v0.<java.net.ServerSocket: void <init>()>();
label2:
return v0;
label3:
v1 := @caughtexception;
v2 = new io.netty.channel.ChannelException;
specialinvoke v2.<io.netty.channel.ChannelException: void <init>(java.lang.String,java.lang.Throwable)>("failed to create a server socket", v1);
throw v2;
catch java.io.IOException from label1 to label2 with label3;
}
public void <init>()
{
io.netty.channel.socket.oio.OioServerSocketChannel v0;
java.net.ServerSocket v1;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
v1 = staticinvoke <io.netty.channel.socket.oio.OioServerSocketChannel: java.net.ServerSocket newServerSocket()>();
specialinvoke v0.<io.netty.channel.socket.oio.OioServerSocketChannel: void <init>(java.net.ServerSocket)>(v1);
return;
}
public void <init>(java.net.ServerSocket)
{
java.lang.Throwable v4;
java.net.ServerSocket v1;
io.netty.channel.ChannelException v3;
io.netty.channel.socket.oio.OioServerSocketChannel v0;
java.io.IOException v2;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v5;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
v1 := @parameter0: java.net.ServerSocket;
specialinvoke v0.<io.netty.channel.oio.AbstractOioMessageChannel: void <init>(io.netty.channel.Channel)>(null);
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "socket");
label1:
virtualinvoke v1.<java.net.ServerSocket: void setSoTimeout(int)>(1000);
label2:
goto label5;
label3:
v2 := @caughtexception;
v3 = new io.netty.channel.ChannelException;
specialinvoke v3.<io.netty.channel.ChannelException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to set the server socket timeout.", v2);
throw v3;
label4:
v4 := @caughtexception;
throw v4;
label5:
v0.<io.netty.channel.socket.oio.OioServerSocketChannel: java.net.ServerSocket socket> = v1;
v5 = new io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
specialinvoke v5.<io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig: void <init>(io.netty.channel.socket.oio.OioServerSocketChannel,java.net.ServerSocket)>(v0, v1);
v0.<io.netty.channel.socket.oio.OioServerSocketChannel: io.netty.channel.socket.oio.OioServerSocketChannelConfig config> = v5;
return;
catch java.io.IOException from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
public java.net.InetSocketAddress localAddress()
{
io.netty.channel.socket.oio.OioServerSocketChannel v0;
java.net.SocketAddress v1;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
v1 = specialinvoke v0.<io.netty.channel.oio.AbstractOioMessageChannel: java.net.SocketAddress localAddress()>();
return v1;
}
public io.netty.channel.ChannelMetadata metadata()
{
io.netty.channel.socket.oio.OioServerSocketChannel v0;
io.netty.channel.ChannelMetadata v1;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
v1 = <io.netty.channel.socket.oio.OioServerSocketChannel: io.netty.channel.ChannelMetadata METADATA>;
return v1;
}
public io.netty.channel.socket.oio.OioServerSocketChannelConfig config()
{
io.netty.channel.socket.oio.OioServerSocketChannel v0;
io.netty.channel.socket.oio.OioServerSocketChannelConfig v1;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
v1 = v0.<io.netty.channel.socket.oio.OioServerSocketChannel: io.netty.channel.socket.oio.OioServerSocketChannelConfig config>;
return v1;
}
public java.net.InetSocketAddress remoteAddress()
{
io.netty.channel.socket.oio.OioServerSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
return null;
}
public boolean isOpen()
{
java.net.ServerSocket v1;
io.netty.channel.socket.oio.OioServerSocketChannel v0;
boolean v2, v3;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
v1 = v0.<io.netty.channel.socket.oio.OioServerSocketChannel: java.net.ServerSocket socket>;
v2 = virtualinvoke v1.<java.net.ServerSocket: boolean isClosed()>();
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isActive()
{
java.net.ServerSocket v2;
io.netty.channel.socket.oio.OioServerSocketChannel v0;
boolean v1, v3, v4;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.oio.OioServerSocketChannel: boolean isOpen()>();
if v1 == 0 goto label1;
v2 = v0.<io.netty.channel.socket.oio.OioServerSocketChannel: java.net.ServerSocket socket>;
v3 = virtualinvoke v2.<java.net.ServerSocket: boolean isBound()>();
if v3 == 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
protected java.net.SocketAddress localAddress0()
{
io.netty.channel.socket.oio.OioServerSocketChannel v0;
java.net.ServerSocket v1;
java.net.SocketAddress v2;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
v1 = v0.<io.netty.channel.socket.oio.OioServerSocketChannel: java.net.ServerSocket socket>;
v2 = staticinvoke <io.netty.util.internal.SocketUtils: java.net.SocketAddress localSocketAddress(java.net.ServerSocket)>(v1);
return v2;
}
protected void doBind(java.net.SocketAddress) throws java.lang.Exception
{
java.net.ServerSocket v2;
io.netty.channel.socket.oio.OioServerSocketChannelConfig v3;
java.net.SocketAddress v1;
int v4;
io.netty.channel.socket.oio.OioServerSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 = v0.<io.netty.channel.socket.oio.OioServerSocketChannel: java.net.ServerSocket socket>;
v3 = v0.<io.netty.channel.socket.oio.OioServerSocketChannel: io.netty.channel.socket.oio.OioServerSocketChannelConfig config>;
v4 = interfaceinvoke v3.<io.netty.channel.socket.oio.OioServerSocketChannelConfig: int getBacklog()>();
virtualinvoke v2.<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>(v1, v4);
return;
}
protected void doClose() throws java.lang.Exception
{
io.netty.channel.socket.oio.OioServerSocketChannel v0;
java.net.ServerSocket v1;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
v1 = v0.<io.netty.channel.socket.oio.OioServerSocketChannel: java.net.ServerSocket socket>;
virtualinvoke v1.<java.net.ServerSocket: void close()>();
return;
}
protected int doReadMessages(java.util.List) throws java.lang.Exception
{
java.lang.Throwable v8;
java.net.Socket v6;
io.netty.channel.socket.oio.OioServerSocketChannel v0;
java.net.ServerSocket v2, v5;
java.util.List v1;
io.netty.channel.socket.oio.OioSocketChannel v7;
io.netty.util.internal.logging.InternalLogger v9;
java.net.SocketTimeoutException v10;
int v4;
boolean v3;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
v1 := @parameter0: java.util.List;
v2 = v0.<io.netty.channel.socket.oio.OioServerSocketChannel: java.net.ServerSocket socket>;
v3 = virtualinvoke v2.<java.net.ServerSocket: boolean isClosed()>();
if v3 == 0 goto label1;
v4 = (int) -1;
return v4;
label1:
v5 = v0.<io.netty.channel.socket.oio.OioServerSocketChannel: java.net.ServerSocket socket>;
v6 = virtualinvoke v5.<java.net.ServerSocket: java.net.Socket accept()>();
label2:
v7 = new io.netty.channel.socket.oio.OioSocketChannel;
specialinvoke v7.<io.netty.channel.socket.oio.OioSocketChannel: void <init>(io.netty.channel.Channel,java.net.Socket)>(v0, v6);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v7);
label3:
return 1;
label4:
v8 := @caughtexception;
v9 = <io.netty.channel.socket.oio.OioServerSocketChannel: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v9.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Throwable)>("Failed to create a new channel from an accepted socket.", v8);
label5:
goto label7;
label6:
v10 := @caughtexception;
label7:
return 0;
catch java.lang.Throwable from label2 to label3 with label4;
catch java.net.SocketTimeoutException from label1 to label3 with label6;
catch java.net.SocketTimeoutException from label4 to label5 with label6;
}
protected void doWrite(io.netty.channel.ChannelOutboundBuffer) throws java.lang.Exception
{
io.netty.channel.ChannelOutboundBuffer v1;
io.netty.channel.socket.oio.OioServerSocketChannel v0;
java.lang.UnsupportedOperationException v2;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
v1 := @parameter0: io.netty.channel.ChannelOutboundBuffer;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
protected java.lang.Object filterOutboundMessage(java.lang.Object) throws java.lang.Exception
{
io.netty.channel.socket.oio.OioServerSocketChannel v0;
java.lang.UnsupportedOperationException v2;
java.lang.Object v1;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
v1 := @parameter0: java.lang.Object;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
protected void doConnect(java.net.SocketAddress, java.net.SocketAddress) throws java.lang.Exception
{
java.lang.UnsupportedOperationException v3;
java.net.SocketAddress v1, v2;
io.netty.channel.socket.oio.OioServerSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
protected java.net.SocketAddress remoteAddress0()
{
io.netty.channel.socket.oio.OioServerSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
return null;
}
protected void doDisconnect() throws java.lang.Exception
{
io.netty.channel.socket.oio.OioServerSocketChannel v0;
java.lang.UnsupportedOperationException v1;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
protected void setReadPending(boolean)
{
io.netty.channel.socket.oio.OioServerSocketChannel v0;
boolean v1;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.channel.oio.AbstractOioMessageChannel: void setReadPending(boolean)>(v1);
return;
}
final void clearReadPending0()
{
io.netty.channel.socket.oio.OioServerSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioServerSocketChannel;
specialinvoke v0.<io.netty.channel.oio.AbstractOioMessageChannel: void clearReadPending()>();
return;
}
static void <clinit>()
{
io.netty.channel.ChannelMetadata v1;
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/channel/socket/oio/OioServerSocketChannel;");
<io.netty.channel.socket.oio.OioServerSocketChannel: io.netty.util.internal.logging.InternalLogger logger> = v0;
v1 = new io.netty.channel.ChannelMetadata;
specialinvoke v1.<io.netty.channel.ChannelMetadata: void <init>(boolean,int)>(0, 1);
<io.netty.channel.socket.oio.OioServerSocketChannel: io.netty.channel.ChannelMetadata METADATA> = v1;
return;
}
}