public class io.netty.channel.socket.oio.OioSocketChannel extends io.netty.channel.oio.OioByteStreamChannel implements io.netty.channel.socket.SocketChannel
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private final java.net.Socket socket;
private final io.netty.channel.socket.oio.OioSocketChannelConfig config;
public void <init>()
{
java.net.Socket v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 = new java.net.Socket;
specialinvoke v1.<java.net.Socket: void <init>()>();
specialinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: void <init>(java.net.Socket)>(v1);
return;
}
public void <init>(java.net.Socket)
{
java.net.Socket v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 := @parameter0: java.net.Socket;
specialinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: void <init>(io.netty.channel.Channel,java.net.Socket)>(null, v1);
return;
}
public void <init>(io.netty.channel.Channel, java.net.Socket)
{
java.io.OutputStream v6;
java.lang.Throwable v9;
java.net.Socket v2;
java.lang.Exception v7;
io.netty.channel.Channel v1;
io.netty.channel.socket.oio.DefaultOioSocketChannelConfig v3;
io.netty.channel.ChannelException v8;
io.netty.channel.socket.oio.OioSocketChannel v0;
boolean v4;
java.io.InputStream v5;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: java.net.Socket;
specialinvoke v0.<io.netty.channel.oio.OioByteStreamChannel: void <init>(io.netty.channel.Channel)>(v1);
v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket> = v2;
v3 = new io.netty.channel.socket.oio.DefaultOioSocketChannelConfig;
specialinvoke v3.<io.netty.channel.socket.oio.DefaultOioSocketChannelConfig: void <init>(io.netty.channel.socket.oio.OioSocketChannel,java.net.Socket)>(v0, v2);
v0.<io.netty.channel.socket.oio.OioSocketChannel: io.netty.channel.socket.oio.OioSocketChannelConfig config> = v3;
label1:
v4 = virtualinvoke v2.<java.net.Socket: boolean isConnected()>();
if v4 == 0 goto label2;
v5 = virtualinvoke v2.<java.net.Socket: java.io.InputStream getInputStream()>();
v6 = virtualinvoke v2.<java.net.Socket: java.io.OutputStream getOutputStream()>();
virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: void activate(java.io.InputStream,java.io.OutputStream)>(v5, v6);
label2:
virtualinvoke v2.<java.net.Socket: void setSoTimeout(int)>(1000);
label3:
goto label6;
label4:
v7 := @caughtexception;
v8 = new io.netty.channel.ChannelException;
specialinvoke v8.<io.netty.channel.ChannelException: void <init>(java.lang.String,java.lang.Throwable)>("failed to initialize a socket", v7);
throw v8;
label5:
v9 := @caughtexception;
throw v9;
label6:
return;
catch java.lang.Exception from label1 to label3 with label4;
catch java.lang.Throwable from label1 to label3 with label5;
}
public io.netty.channel.socket.ServerSocketChannel parent()
{
io.netty.channel.Channel v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 = specialinvoke v0.<io.netty.channel.oio.OioByteStreamChannel: io.netty.channel.Channel parent()>();
return v1;
}
public io.netty.channel.socket.oio.OioSocketChannelConfig config()
{
io.netty.channel.socket.oio.OioSocketChannelConfig v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 = v0.<io.netty.channel.socket.oio.OioSocketChannel: io.netty.channel.socket.oio.OioSocketChannelConfig config>;
return v1;
}
public boolean isOpen()
{
java.net.Socket v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
boolean v2, v3;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 = v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket>;
v2 = virtualinvoke v1.<java.net.Socket: boolean isClosed()>();
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isActive()
{
java.net.Socket v1, v3;
io.netty.channel.socket.oio.OioSocketChannel v0;
boolean v2, v4, v5;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 = v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket>;
v2 = virtualinvoke v1.<java.net.Socket: boolean isClosed()>();
if v2 != 0 goto label1;
v3 = v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket>;
v4 = virtualinvoke v3.<java.net.Socket: boolean isConnected()>();
if v4 == 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public boolean isOutputShutdown()
{
java.net.Socket v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
boolean v2, v3, v4;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 = v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket>;
v2 = virtualinvoke v1.<java.net.Socket: boolean isOutputShutdown()>();
if v2 != 0 goto label1;
v3 = virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: boolean isActive()>();
if v3 != 0 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
public boolean isInputShutdown()
{
java.net.Socket v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
boolean v2, v3, v4;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 = v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket>;
v2 = virtualinvoke v1.<java.net.Socket: boolean isInputShutdown()>();
if v2 != 0 goto label1;
v3 = virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: boolean isActive()>();
if v3 != 0 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
public boolean isShutdown()
{
java.net.Socket v1, v3;
io.netty.channel.socket.oio.OioSocketChannel v0;
boolean v2, v4, v5, v6;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 = v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket>;
v2 = virtualinvoke v1.<java.net.Socket: boolean isInputShutdown()>();
if v2 == 0 goto label1;
v3 = v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket>;
v4 = virtualinvoke v3.<java.net.Socket: boolean isOutputShutdown()>();
if v4 != 0 goto label2;
label1:
v5 = virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: boolean isActive()>();
if v5 != 0 goto label3;
label2:
v6 = 1;
goto label4;
label3:
v6 = 0;
label4:
return v6;
}
protected final void doShutdownOutput() throws java.lang.Exception
{
io.netty.channel.socket.oio.OioSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
specialinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: void shutdownOutput0()>();
return;
}
public io.netty.channel.ChannelFuture shutdownOutput()
{
io.netty.channel.ChannelPromise v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: io.netty.channel.ChannelPromise newPromise()>();
v2 = virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)>(v1);
return v2;
}
public io.netty.channel.ChannelFuture shutdownInput()
{
io.netty.channel.ChannelPromise v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: io.netty.channel.ChannelPromise newPromise()>();
v2 = virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: io.netty.channel.ChannelFuture shutdownInput(io.netty.channel.ChannelPromise)>(v1);
return v2;
}
public io.netty.channel.ChannelFuture shutdown()
{
io.netty.channel.ChannelPromise v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: io.netty.channel.ChannelPromise newPromise()>();
v2 = virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: io.netty.channel.ChannelFuture shutdown(io.netty.channel.ChannelPromise)>(v1);
return v2;
}
protected int doReadBytes(io.netty.buffer.ByteBuf) throws java.lang.Exception
{
java.net.Socket v2;
io.netty.buffer.ByteBuf v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
java.net.SocketTimeoutException v6;
int v4, v5;
boolean v3;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket>;
v3 = virtualinvoke v2.<java.net.Socket: boolean isClosed()>();
if v3 == 0 goto label1;
v4 = (int) -1;
return v4;
label1:
v5 = specialinvoke v0.<io.netty.channel.oio.OioByteStreamChannel: int doReadBytes(io.netty.buffer.ByteBuf)>(v1);
label2:
return v5;
label3:
v6 := @caughtexception;
return 0;
catch java.net.SocketTimeoutException from label1 to label2 with label3;
}
public io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
io.netty.channel.socket.oio.OioSocketChannel$1 v4;
io.netty.channel.EventLoop v2;
boolean v3;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: io.netty.channel.EventLoop eventLoop()>();
v3 = interfaceinvoke v2.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v3 == 0 goto label1;
specialinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: void shutdownOutput0(io.netty.channel.ChannelPromise)>(v1);
goto label2;
label1:
v4 = new io.netty.channel.socket.oio.OioSocketChannel$1;
specialinvoke v4.<io.netty.channel.socket.oio.OioSocketChannel$1: void <init>(io.netty.channel.socket.oio.OioSocketChannel,io.netty.channel.ChannelPromise)>(v0, v1);
interfaceinvoke v2.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v4);
label2:
return v1;
}
private void shutdownOutput0(io.netty.channel.ChannelPromise)
{
java.lang.Throwable v2;
io.netty.channel.ChannelPromise v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 := @parameter0: io.netty.channel.ChannelPromise;
label1:
specialinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: void shutdownOutput0()>();
interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v2);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void shutdownOutput0() throws java.io.IOException
{
java.net.Socket v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 = v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket>;
virtualinvoke v1.<java.net.Socket: void shutdownOutput()>();
return;
}
public io.netty.channel.ChannelFuture shutdownInput(io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v1;
io.netty.channel.socket.oio.OioSocketChannel$2 v4;
io.netty.channel.socket.oio.OioSocketChannel v0;
io.netty.channel.EventLoop v2;
boolean v3;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: io.netty.channel.EventLoop eventLoop()>();
v3 = interfaceinvoke v2.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v3 == 0 goto label1;
specialinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: void shutdownInput0(io.netty.channel.ChannelPromise)>(v1);
goto label2;
label1:
v4 = new io.netty.channel.socket.oio.OioSocketChannel$2;
specialinvoke v4.<io.netty.channel.socket.oio.OioSocketChannel$2: void <init>(io.netty.channel.socket.oio.OioSocketChannel,io.netty.channel.ChannelPromise)>(v0, v1);
interfaceinvoke v2.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v4);
label2:
return v1;
}
private void shutdownInput0(io.netty.channel.ChannelPromise)
{
java.lang.Throwable v3;
java.net.Socket v2;
io.netty.channel.ChannelPromise v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 := @parameter0: io.netty.channel.ChannelPromise;
label1:
v2 = v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket>;
virtualinvoke v2.<java.net.Socket: void shutdownInput()>();
interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v3);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.netty.channel.ChannelFuture shutdown(io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v1;
io.netty.channel.socket.oio.OioSocketChannel$3 v4;
io.netty.channel.socket.oio.OioSocketChannel v0;
boolean v3;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: io.netty.channel.ChannelFuture shutdownOutput()>();
v3 = interfaceinvoke v2.<io.netty.channel.ChannelFuture: boolean isDone()>();
if v3 == 0 goto label1;
specialinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: void shutdownOutputDone(io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)>(v2, v1);
goto label2;
label1:
v4 = new io.netty.channel.socket.oio.OioSocketChannel$3;
specialinvoke v4.<io.netty.channel.socket.oio.OioSocketChannel$3: void <init>(io.netty.channel.socket.oio.OioSocketChannel,io.netty.channel.ChannelPromise)>(v0, v1);
interfaceinvoke v2.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v4);
label2:
return v1;
}
private void shutdownOutputDone(io.netty.channel.ChannelFuture, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v2;
io.netty.channel.socket.oio.OioSocketChannel v0;
io.netty.channel.socket.oio.OioSocketChannel$4 v5;
boolean v4;
io.netty.channel.ChannelFuture v1, v3;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 := @parameter0: io.netty.channel.ChannelFuture;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: io.netty.channel.ChannelFuture shutdownInput()>();
v4 = interfaceinvoke v3.<io.netty.channel.ChannelFuture: boolean isDone()>();
if v4 == 0 goto label1;
staticinvoke <io.netty.channel.socket.oio.OioSocketChannel: void shutdownDone(io.netty.channel.ChannelFuture,io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)>(v1, v3, v2);
goto label2;
label1:
v5 = new io.netty.channel.socket.oio.OioSocketChannel$4;
specialinvoke v5.<io.netty.channel.socket.oio.OioSocketChannel$4: void <init>(io.netty.channel.socket.oio.OioSocketChannel,io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)>(v0, v1, v2);
interfaceinvoke v3.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v5);
label2:
return;
}
private static void shutdownDone(io.netty.channel.ChannelFuture, io.netty.channel.ChannelFuture, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v3, v4;
io.netty.channel.ChannelPromise v2;
io.netty.util.internal.logging.InternalLogger v5;
io.netty.channel.ChannelFuture v0, v1;
v0 := @parameter0: io.netty.channel.ChannelFuture;
v1 := @parameter1: io.netty.channel.ChannelFuture;
v2 := @parameter2: io.netty.channel.ChannelPromise;
v3 = interfaceinvoke v0.<io.netty.channel.ChannelFuture: java.lang.Throwable cause()>();
v4 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: java.lang.Throwable cause()>();
if v3 == null goto label2;
if v4 == null goto label1;
v5 = <io.netty.channel.socket.oio.OioSocketChannel: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Throwable)>("Exception suppressed because a previous exception occurred.", v4);
label1:
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v3);
goto label4;
label2:
if v4 == null goto label3;
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v4);
goto label4;
label3:
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
label4:
return;
}
public java.net.InetSocketAddress localAddress()
{
java.net.SocketAddress v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 = specialinvoke v0.<io.netty.channel.oio.OioByteStreamChannel: java.net.SocketAddress localAddress()>();
return v1;
}
public java.net.InetSocketAddress remoteAddress()
{
java.net.SocketAddress v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 = specialinvoke v0.<io.netty.channel.oio.OioByteStreamChannel: java.net.SocketAddress remoteAddress()>();
return v1;
}
protected java.net.SocketAddress localAddress0()
{
java.net.Socket v1;
java.net.SocketAddress v2;
io.netty.channel.socket.oio.OioSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 = v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket>;
v2 = virtualinvoke v1.<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()>();
return v2;
}
protected java.net.SocketAddress remoteAddress0()
{
java.net.Socket v1;
java.net.SocketAddress v2;
io.netty.channel.socket.oio.OioSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 = v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket>;
v2 = virtualinvoke v1.<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>();
return v2;
}
protected void doBind(java.net.SocketAddress) throws java.lang.Exception
{
java.net.Socket v2;
java.net.SocketAddress v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 = v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket>;
staticinvoke <io.netty.util.internal.SocketUtils: void bind(java.net.Socket,java.net.SocketAddress)>(v2, v1);
return;
}
protected void doConnect(java.net.SocketAddress, java.net.SocketAddress) throws java.lang.Exception
{
java.lang.Throwable v15;
java.net.Socket v3, v4, v7, v9;
java.net.SocketAddress v1, v2;
io.netty.channel.socket.oio.OioSocketChannelConfig v5;
io.netty.channel.socket.oio.OioSocketChannel v0;
java.net.SocketTimeoutException v11;
int v6;
java.lang.String v13;
java.io.OutputStream v10;
io.netty.channel.ConnectTimeoutException v12;
java.lang.StackTraceElement[] v14;
java.io.InputStream v8;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
if v2 == null goto label1;
v3 = v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket>;
staticinvoke <io.netty.util.internal.SocketUtils: void bind(java.net.Socket,java.net.SocketAddress)>(v3, v2);
label1:
v4 = v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket>;
v5 = virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: io.netty.channel.socket.oio.OioSocketChannelConfig config()>();
v6 = interfaceinvoke v5.<io.netty.channel.socket.oio.OioSocketChannelConfig: int getConnectTimeoutMillis()>();
staticinvoke <io.netty.util.internal.SocketUtils: void connect(java.net.Socket,java.net.SocketAddress,int)>(v4, v1, v6);
v7 = v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket>;
v8 = virtualinvoke v7.<java.net.Socket: java.io.InputStream getInputStream()>();
v9 = v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket>;
v10 = virtualinvoke v9.<java.net.Socket: java.io.OutputStream getOutputStream()>();
virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: void activate(java.io.InputStream,java.io.OutputStream)>(v8, v10);
label2:
goto label5;
label3:
v11 := @caughtexception;
v12 = new io.netty.channel.ConnectTimeoutException;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.net.SocketAddress)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("connection timed out: \u0001");
specialinvoke v12.<io.netty.channel.ConnectTimeoutException: void <init>(java.lang.String)>(v13);
v14 = virtualinvoke v11.<java.net.SocketTimeoutException: java.lang.StackTraceElement[] getStackTrace()>();
virtualinvoke v12.<io.netty.channel.ConnectTimeoutException: void setStackTrace(java.lang.StackTraceElement[])>(v14);
throw v12;
label4:
v15 := @caughtexception;
virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: void doClose()>();
throw v15;
label5:
return;
catch java.net.SocketTimeoutException from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
protected void doDisconnect() throws java.lang.Exception
{
io.netty.channel.socket.oio.OioSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: void doClose()>();
return;
}
protected void doClose() throws java.lang.Exception
{
java.net.Socket v1;
io.netty.channel.socket.oio.OioSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 = v0.<io.netty.channel.socket.oio.OioSocketChannel: java.net.Socket socket>;
virtualinvoke v1.<java.net.Socket: void close()>();
return;
}
protected boolean checkInputShutdown()
{
java.lang.Throwable v4;
io.netty.channel.socket.oio.OioSocketChannel v0;
int v3;
io.netty.channel.socket.oio.OioSocketChannelConfig v2;
boolean v1;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: boolean isInputShutdown()>();
if v1 == 0 goto label5;
label1:
v2 = virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: io.netty.channel.socket.oio.OioSocketChannelConfig config()>();
v3 = interfaceinvoke v2.<io.netty.channel.socket.oio.OioSocketChannelConfig: int getSoTimeout()>();
staticinvoke <java.lang.Thread: void sleep(long)>(v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
return 1;
label5:
return 0;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected void setReadPending(boolean)
{
io.netty.channel.socket.oio.OioSocketChannel v0;
boolean v1;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.channel.oio.OioByteStreamChannel: void setReadPending(boolean)>(v1);
return;
}
final void clearReadPending0()
{
io.netty.channel.socket.oio.OioSocketChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioSocketChannel;
virtualinvoke v0.<io.netty.channel.socket.oio.OioSocketChannel: void clearReadPending()>();
return;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/channel/socket/oio/OioSocketChannel;");
<io.netty.channel.socket.oio.OioSocketChannel: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}