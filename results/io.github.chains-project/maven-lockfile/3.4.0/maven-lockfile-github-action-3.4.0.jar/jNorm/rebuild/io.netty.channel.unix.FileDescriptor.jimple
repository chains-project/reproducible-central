public class io.netty.channel.unix.FileDescriptor extends java.lang.Object
{
private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater stateUpdater;
private static final int STATE_CLOSED_MASK;
private static final int STATE_INPUT_SHUTDOWN_MASK;
private static final int STATE_OUTPUT_SHUTDOWN_MASK;
private static final int STATE_ALL_MASK;
volatile int state;
final int fd;
public void <init>(int)
{
int v1;
io.netty.channel.unix.FileDescriptor v0;
v0 := @this: io.netty.channel.unix.FileDescriptor;
v1 := @parameter0: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v1, "fd");
v0.<io.netty.channel.unix.FileDescriptor: int fd> = v1;
return;
}
public final int intValue()
{
int v1;
io.netty.channel.unix.FileDescriptor v0;
v0 := @this: io.netty.channel.unix.FileDescriptor;
v1 = v0.<io.netty.channel.unix.FileDescriptor: int fd>;
return v1;
}
protected boolean markClosed()
{
int v1, v3;
io.netty.channel.unix.FileDescriptor v0;
boolean v2, v4;
v0 := @this: io.netty.channel.unix.FileDescriptor;
label1:
v1 = v0.<io.netty.channel.unix.FileDescriptor: int state>;
v2 = staticinvoke <io.netty.channel.unix.FileDescriptor: boolean isClosed(int)>(v1);
if v2 == 0 goto label2;
return 0;
label2:
v3 = v1 | 7;
v4 = virtualinvoke v0.<io.netty.channel.unix.FileDescriptor: boolean casState(int,int)>(v1, v3);
if v4 == 0 goto label1;
return 1;
}
public void close() throws java.io.IOException
{
io.netty.channel.unix.Errors$NativeIoException v4;
int v2, v3;
io.netty.channel.unix.FileDescriptor v0;
boolean v1;
v0 := @this: io.netty.channel.unix.FileDescriptor;
v1 = virtualinvoke v0.<io.netty.channel.unix.FileDescriptor: boolean markClosed()>();
if v1 == 0 goto label1;
v2 = v0.<io.netty.channel.unix.FileDescriptor: int fd>;
v3 = staticinvoke <io.netty.channel.unix.FileDescriptor: int close(int)>(v2);
if v3 >= 0 goto label1;
v4 = staticinvoke <io.netty.channel.unix.Errors: io.netty.channel.unix.Errors$NativeIoException newIOException(java.lang.String,int)>("close", v3);
throw v4;
label1:
return;
}
public boolean isOpen()
{
int v1;
io.netty.channel.unix.FileDescriptor v0;
boolean v2, v3;
v0 := @this: io.netty.channel.unix.FileDescriptor;
v1 = v0.<io.netty.channel.unix.FileDescriptor: int state>;
v2 = staticinvoke <io.netty.channel.unix.FileDescriptor: boolean isClosed(int)>(v1);
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public final int write(java.nio.ByteBuffer, int, int) throws java.io.IOException
{
int v2, v3, v4, v5, v6;
io.netty.channel.unix.FileDescriptor v0;
java.nio.ByteBuffer v1;
v0 := @this: io.netty.channel.unix.FileDescriptor;
v1 := @parameter0: java.nio.ByteBuffer;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<io.netty.channel.unix.FileDescriptor: int fd>;
v5 = staticinvoke <io.netty.channel.unix.FileDescriptor: int write(int,java.nio.ByteBuffer,int,int)>(v4, v1, v2, v3);
if v5 < 0 goto label1;
return v5;
label1:
v6 = staticinvoke <io.netty.channel.unix.Errors: int ioResult(java.lang.String,int)>("write", v5);
return v6;
}
public final int writeAddress(long, int, int) throws java.io.IOException
{
int v2, v3, v4, v5, v6;
long v1;
io.netty.channel.unix.FileDescriptor v0;
v0 := @this: io.netty.channel.unix.FileDescriptor;
v1 := @parameter0: long;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<io.netty.channel.unix.FileDescriptor: int fd>;
v5 = staticinvoke <io.netty.channel.unix.FileDescriptor: int writeAddress(int,long,int,int)>(v4, v1, v2, v3);
if v5 < 0 goto label1;
return v5;
label1:
v6 = staticinvoke <io.netty.channel.unix.Errors: int ioResult(java.lang.String,int)>("writeAddress", v5);
return v6;
}
public final long writev(java.nio.ByteBuffer[], int, int, long) throws java.io.IOException
{
java.nio.ByteBuffer[] v1;
long v4, v8;
io.netty.channel.unix.FileDescriptor v0;
byte v9;
int v10, v2, v3, v5, v6, v7;
v0 := @this: io.netty.channel.unix.FileDescriptor;
v1 := @parameter0: java.nio.ByteBuffer[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: long;
v5 = v0.<io.netty.channel.unix.FileDescriptor: int fd>;
v6 = <io.netty.channel.unix.Limits: int IOV_MAX>;
v7 = staticinvoke <java.lang.Math: int min(int,int)>(v6, v3);
v8 = staticinvoke <io.netty.channel.unix.FileDescriptor: long writev(int,java.nio.ByteBuffer[],int,int,long)>(v5, v1, v2, v7, v4);
v9 = v8 cmp 0L;
if v9 < 0 goto label1;
return v8;
label1:
v10 = staticinvoke <io.netty.channel.unix.Errors: int ioResult(java.lang.String,int)>("writev", v8);
return v10;
}
public final long writevAddresses(long, int) throws java.io.IOException
{
byte v5;
int v2, v3, v6;
long v1, v4;
io.netty.channel.unix.FileDescriptor v0;
v0 := @this: io.netty.channel.unix.FileDescriptor;
v1 := @parameter0: long;
v2 := @parameter1: int;
v3 = v0.<io.netty.channel.unix.FileDescriptor: int fd>;
v4 = staticinvoke <io.netty.channel.unix.FileDescriptor: long writevAddresses(int,long,int)>(v3, v1, v2);
v5 = v4 cmp 0L;
if v5 < 0 goto label1;
return v4;
label1:
v6 = staticinvoke <io.netty.channel.unix.Errors: int ioResult(java.lang.String,int)>("writevAddresses", v4);
return v6;
}
public final int read(java.nio.ByteBuffer, int, int) throws java.io.IOException
{
io.netty.channel.unix.FileDescriptor v0;
java.nio.ByteBuffer v1;
int v2, v3, v4, v5, v6, v7;
v0 := @this: io.netty.channel.unix.FileDescriptor;
v1 := @parameter0: java.nio.ByteBuffer;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<io.netty.channel.unix.FileDescriptor: int fd>;
v5 = staticinvoke <io.netty.channel.unix.FileDescriptor: int read(int,java.nio.ByteBuffer,int,int)>(v4, v1, v2, v3);
if v5 <= 0 goto label1;
return v5;
label1:
if v5 != 0 goto label2;
v6 = (int) -1;
return v6;
label2:
v7 = staticinvoke <io.netty.channel.unix.Errors: int ioResult(java.lang.String,int)>("read", v5);
return v7;
}
public final int readAddress(long, int, int) throws java.io.IOException
{
long v1;
io.netty.channel.unix.FileDescriptor v0;
int v2, v3, v4, v5, v6, v7;
v0 := @this: io.netty.channel.unix.FileDescriptor;
v1 := @parameter0: long;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<io.netty.channel.unix.FileDescriptor: int fd>;
v5 = staticinvoke <io.netty.channel.unix.FileDescriptor: int readAddress(int,long,int,int)>(v4, v1, v2, v3);
if v5 <= 0 goto label1;
return v5;
label1:
if v5 != 0 goto label2;
v6 = (int) -1;
return v6;
label2:
v7 = staticinvoke <io.netty.channel.unix.Errors: int ioResult(java.lang.String,int)>("readAddress", v5);
return v7;
}
public java.lang.String toString()
{
int v1;
java.lang.String v2;
io.netty.channel.unix.FileDescriptor v0;
v0 := @this: io.netty.channel.unix.FileDescriptor;
v1 = v0.<io.netty.channel.unix.FileDescriptor: int fd>;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("FileDescriptor{fd=\u0001}");
return v2;
}
public boolean equals(java.lang.Object)
{
int v3, v4;
java.lang.Object v1;
io.netty.channel.unix.FileDescriptor v0;
boolean v2, v5;
v0 := @this: io.netty.channel.unix.FileDescriptor;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
v2 = v1 instanceof io.netty.channel.unix.FileDescriptor;
if v2 != 0 goto label2;
return 0;
label2:
v3 = v0.<io.netty.channel.unix.FileDescriptor: int fd>;
v4 = v1.<io.netty.channel.unix.FileDescriptor: int fd>;
if v3 != v4 goto label3;
v5 = 1;
goto label4;
label3:
v5 = 0;
label4:
return v5;
}
public int hashCode()
{
int v1;
io.netty.channel.unix.FileDescriptor v0;
v0 := @this: io.netty.channel.unix.FileDescriptor;
v1 = v0.<io.netty.channel.unix.FileDescriptor: int fd>;
return v1;
}
public static io.netty.channel.unix.FileDescriptor 'from'(java.lang.String) throws java.io.IOException
{
io.netty.channel.unix.Errors$NativeIoException v3;
int v2;
java.lang.Object v1;
java.lang.String v0;
io.netty.channel.unix.FileDescriptor v4;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "path");
v2 = staticinvoke <io.netty.channel.unix.FileDescriptor: int open(java.lang.String)>(v1);
if v2 >= 0 goto label1;
v3 = staticinvoke <io.netty.channel.unix.Errors: io.netty.channel.unix.Errors$NativeIoException newIOException(java.lang.String,int)>("open", v2);
throw v3;
label1:
v4 = new io.netty.channel.unix.FileDescriptor;
specialinvoke v4.<io.netty.channel.unix.FileDescriptor: void <init>(int)>(v2);
return v4;
}
public static io.netty.channel.unix.FileDescriptor 'from'(java.io.File) throws java.io.IOException
{
java.lang.Object v1;
java.lang.String v2;
io.netty.channel.unix.FileDescriptor v3;
java.io.File v0;
v0 := @parameter0: java.io.File;
v1 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "file");
v2 = virtualinvoke v1.<java.io.File: java.lang.String getPath()>();
v3 = staticinvoke <io.netty.channel.unix.FileDescriptor: io.netty.channel.unix.FileDescriptor 'from'(java.lang.String)>(v2);
return v3;
}
public static io.netty.channel.unix.FileDescriptor[] pipe() throws java.io.IOException
{
io.netty.channel.unix.Errors$NativeIoException v2;
byte v1;
io.netty.channel.unix.FileDescriptor[] v3;
long v0, v5;
io.netty.channel.unix.FileDescriptor v4, v6;
v0 = staticinvoke <io.netty.channel.unix.FileDescriptor: long newPipe()>();
v1 = v0 cmp 0L;
if v1 >= 0 goto label1;
v2 = staticinvoke <io.netty.channel.unix.Errors: io.netty.channel.unix.Errors$NativeIoException newIOException(java.lang.String,int)>("newPipe", v0);
throw v2;
label1:
v3 = newarray (io.netty.channel.unix.FileDescriptor)[2];
v4 = new io.netty.channel.unix.FileDescriptor;
v5 = v0 >>> 32;
specialinvoke v4.<io.netty.channel.unix.FileDescriptor: void <init>(int)>(v5);
v3[0] = v4;
v6 = new io.netty.channel.unix.FileDescriptor;
specialinvoke v6.<io.netty.channel.unix.FileDescriptor: void <init>(int)>(v0);
v3[1] = v6;
return v3;
}
final boolean casState(int, int)
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v3;
int v1, v2;
io.netty.channel.unix.FileDescriptor v0;
boolean v4;
v0 := @this: io.netty.channel.unix.FileDescriptor;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = <io.netty.channel.unix.FileDescriptor: java.util.concurrent.atomic.AtomicIntegerFieldUpdater stateUpdater>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(v0, v1, v2);
return v4;
}
static boolean isClosed(int)
{
int v0, v1;
boolean v2;
v0 := @parameter0: int;
v1 = v0 & 1;
if v1 == 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
static boolean isInputShutdown(int)
{
int v0, v1;
boolean v2;
v0 := @parameter0: int;
v1 = v0 & 2;
if v1 == 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
static boolean isOutputShutdown(int)
{
int v0, v1;
boolean v2;
v0 := @parameter0: int;
v1 = v0 & 4;
if v1 == 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
static int inputShutdown(int)
{
int v0, v1;
v0 := @parameter0: int;
v1 = v0 | 2;
return v1;
}
static int outputShutdown(int)
{
int v0, v1;
v0 := @parameter0: int;
v1 = v0 | 4;
return v1;
}
private static native int open(java.lang.String);
private static native int close(int);
private static native int write(int, java.nio.ByteBuffer, int, int);
private static native int writeAddress(int, long, int, int);
private static native long writev(int, java.nio.ByteBuffer[], int, int, long);
private static native long writevAddresses(int, long, int);
private static native int read(int, java.nio.ByteBuffer, int, int);
private static native int readAddress(int, long, int, int);
private static native long newPipe();
static void <clinit>()
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v0;
v0 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lio/netty/channel/unix/FileDescriptor;", "state");
<io.netty.channel.unix.FileDescriptor: java.util.concurrent.atomic.AtomicIntegerFieldUpdater stateUpdater> = v0;
return;
}
}