public class io.netty.handler.codec.CharSequenceValueConverter extends java.lang.Object implements io.netty.handler.codec.ValueConverter
{
public static final io.netty.handler.codec.CharSequenceValueConverter INSTANCE;
private static final io.netty.util.AsciiString TRUE_ASCII;
public void <init>()
{
io.netty.handler.codec.CharSequenceValueConverter v0;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.lang.CharSequence convertObject(java.lang.Object)
{
java.lang.Object v1;
java.lang.String v3;
io.netty.handler.codec.CharSequenceValueConverter v0;
boolean v2;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof java.lang.CharSequence;
if v2 == 0 goto label1;
return v1;
label1:
v3 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v3;
}
public java.lang.CharSequence convertInt(int)
{
int v1;
java.lang.String v2;
io.netty.handler.codec.CharSequenceValueConverter v0;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: int;
v2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v1);
return v2;
}
public java.lang.CharSequence convertLong(long)
{
long v1;
java.lang.String v2;
io.netty.handler.codec.CharSequenceValueConverter v0;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: long;
v2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(v1);
return v2;
}
public java.lang.CharSequence convertDouble(double)
{
java.lang.String v2;
io.netty.handler.codec.CharSequenceValueConverter v0;
double v1;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: double;
v2 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(v1);
return v2;
}
public java.lang.CharSequence convertChar(char)
{
char v1;
java.lang.String v2;
io.netty.handler.codec.CharSequenceValueConverter v0;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: char;
v2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(v1);
return v2;
}
public java.lang.CharSequence convertBoolean(boolean)
{
java.lang.String v2;
io.netty.handler.codec.CharSequenceValueConverter v0;
boolean v1;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: boolean;
v2 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(v1);
return v2;
}
public java.lang.CharSequence convertFloat(float)
{
float v1;
java.lang.String v2;
io.netty.handler.codec.CharSequenceValueConverter v0;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: float;
v2 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(v1);
return v2;
}
public boolean convertToBoolean(java.lang.CharSequence)
{
java.lang.CharSequence v1;
io.netty.util.AsciiString v2;
io.netty.handler.codec.CharSequenceValueConverter v0;
boolean v3;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: java.lang.CharSequence;
v2 = <io.netty.handler.codec.CharSequenceValueConverter: io.netty.util.AsciiString TRUE_ASCII>;
v3 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
return v3;
}
public java.lang.CharSequence convertByte(byte)
{
java.lang.String v2;
byte v1;
io.netty.handler.codec.CharSequenceValueConverter v0;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: byte;
v2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v1);
return v2;
}
public byte convertToByte(java.lang.CharSequence)
{
byte v4, v6;
java.lang.CharSequence v1;
int v3;
java.lang.String v5;
io.netty.handler.codec.CharSequenceValueConverter v0;
boolean v2;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: java.lang.CharSequence;
v2 = v1 instanceof io.netty.util.AsciiString;
if v2 == 0 goto label1;
v3 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v3 != 1 goto label1;
v4 = virtualinvoke v1.<io.netty.util.AsciiString: byte byteAt(int)>(0);
return v4;
label1:
v5 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
v6 = staticinvoke <java.lang.Byte: byte parseByte(java.lang.String)>(v5);
return v6;
}
public char convertToChar(java.lang.CharSequence)
{
char v2;
io.netty.handler.codec.CharSequenceValueConverter v0;
java.lang.CharSequence v1;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: java.lang.CharSequence;
v2 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(0);
return v2;
}
public java.lang.CharSequence convertShort(short)
{
short v1;
java.lang.String v2;
io.netty.handler.codec.CharSequenceValueConverter v0;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: short;
v2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v1);
return v2;
}
public short convertToShort(java.lang.CharSequence)
{
short v3, v5;
java.lang.CharSequence v1;
java.lang.String v4;
io.netty.handler.codec.CharSequenceValueConverter v0;
boolean v2;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: java.lang.CharSequence;
v2 = v1 instanceof io.netty.util.AsciiString;
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<io.netty.util.AsciiString: short parseShort()>();
return v3;
label1:
v4 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
v5 = staticinvoke <java.lang.Short: short parseShort(java.lang.String)>(v4);
return v5;
}
public int convertToInt(java.lang.CharSequence)
{
java.lang.CharSequence v1;
int v3, v5;
java.lang.String v4;
io.netty.handler.codec.CharSequenceValueConverter v0;
boolean v2;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: java.lang.CharSequence;
v2 = v1 instanceof io.netty.util.AsciiString;
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<io.netty.util.AsciiString: int parseInt()>();
return v3;
label1:
v4 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
v5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v4);
return v5;
}
public long convertToLong(java.lang.CharSequence)
{
java.lang.CharSequence v1;
long v3, v5;
java.lang.String v4;
io.netty.handler.codec.CharSequenceValueConverter v0;
boolean v2;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: java.lang.CharSequence;
v2 = v1 instanceof io.netty.util.AsciiString;
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<io.netty.util.AsciiString: long parseLong()>();
return v3;
label1:
v4 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
v5 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(v4);
return v5;
}
public java.lang.CharSequence convertTimeMillis(long)
{
java.util.Date v2;
long v1;
java.lang.String v3;
io.netty.handler.codec.CharSequenceValueConverter v0;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: long;
v2 = new java.util.Date;
specialinvoke v2.<java.util.Date: void <init>(long)>(v1);
v3 = staticinvoke <io.netty.handler.codec.DateFormatter: java.lang.String format(java.util.Date)>(v2);
return v3;
}
public long convertToTimeMillis(java.lang.CharSequence)
{
java.lang.CharSequence v1;
java.util.Date v2;
long v5;
java.lang.String v4;
io.netty.handler.codec.CharSequenceValueConverter v0;
java.text.ParseException v3;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: java.lang.CharSequence;
v2 = staticinvoke <io.netty.handler.codec.DateFormatter: java.util.Date parseHttpDate(java.lang.CharSequence)>(v1);
if v2 != null goto label1;
v3 = new java.text.ParseException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.CharSequence)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("header can\'t be parsed into a Date: \u0001");
specialinvoke v3.<java.text.ParseException: void <init>(java.lang.String,int)>(v4, 0);
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v3);
return 0L;
label1:
v5 = virtualinvoke v2.<java.util.Date: long getTime()>();
return v5;
}
public float convertToFloat(java.lang.CharSequence)
{
java.lang.CharSequence v1;
float v3, v5;
java.lang.String v4;
io.netty.handler.codec.CharSequenceValueConverter v0;
boolean v2;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: java.lang.CharSequence;
v2 = v1 instanceof io.netty.util.AsciiString;
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<io.netty.util.AsciiString: float parseFloat()>();
return v3;
label1:
v4 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
v5 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(v4);
return v5;
}
public double convertToDouble(java.lang.CharSequence)
{
java.lang.CharSequence v1;
java.lang.String v4;
io.netty.handler.codec.CharSequenceValueConverter v0;
boolean v2;
double v3, v5;
v0 := @this: io.netty.handler.codec.CharSequenceValueConverter;
v1 := @parameter0: java.lang.CharSequence;
v2 = v1 instanceof io.netty.util.AsciiString;
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<io.netty.util.AsciiString: double parseDouble()>();
return v3;
label1:
v4 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
v5 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(v4);
return v5;
}
static void <clinit>()
{
io.netty.util.AsciiString v1;
io.netty.handler.codec.CharSequenceValueConverter v0;
v0 = new io.netty.handler.codec.CharSequenceValueConverter;
specialinvoke v0.<io.netty.handler.codec.CharSequenceValueConverter: void <init>()>();
<io.netty.handler.codec.CharSequenceValueConverter: io.netty.handler.codec.CharSequenceValueConverter INSTANCE> = v0;
v1 = new io.netty.util.AsciiString;
specialinvoke v1.<io.netty.util.AsciiString: void <init>(java.lang.CharSequence)>("true");
<io.netty.handler.codec.CharSequenceValueConverter: io.netty.util.AsciiString TRUE_ASCII> = v1;
return;
}
}