final class io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder extends java.lang.Object
{
private static final int HUFFMAN_HIGH_SYMBOL_COST;
private final io.netty.handler.codec.compression.Bzip2BitWriter writer;
private final char[] mtfBlock;
private final int mtfLength;
private final int mtfAlphabetSize;
private final int[] mtfSymbolFrequencies;
private final int[][] huffmanCodeLengths;
private final int[][] huffmanMergedCodeSymbols;
private final byte[] selectors;
void <init>(io.netty.handler.codec.compression.Bzip2BitWriter, char[], int, int, int[])
{
byte[] v12;
int[][] v7, v8;
io.netty.handler.codec.compression.Bzip2BitWriter v1;
io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder v0;
int[] v5;
int v10, v11, v3, v4, v6, v9;
char[] v2;
v0 := @this: io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder;
v1 := @parameter0: io.netty.handler.codec.compression.Bzip2BitWriter;
v2 := @parameter1: char[];
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: int[];
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: io.netty.handler.codec.compression.Bzip2BitWriter writer> = v1;
v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: char[] mtfBlock> = v2;
v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int mtfLength> = v3;
v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int mtfAlphabetSize> = v4;
v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int[] mtfSymbolFrequencies> = v5;
v6 = staticinvoke <io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int selectTableCount(int)>(v3);
v7 = newmultiarray (int)[v6][v4];
v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int[][] huffmanCodeLengths> = v7;
v8 = newmultiarray (int)[v6][v4];
v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int[][] huffmanMergedCodeSymbols> = v8;
v9 = v3 + 50;
v10 = v9 - 1;
v11 = v10 / 50;
v12 = newarray (byte)[v11];
v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: byte[] selectors> = v12;
return;
}
private static int selectTableCount(int)
{
int v0;
v0 := @parameter0: int;
if v0 < 2400 goto label1;
return 6;
label1:
if v0 < 1200 goto label2;
return 5;
label2:
if v0 < 600 goto label3;
return 4;
label3:
if v0 < 200 goto label4;
return 3;
label4:
return 2;
}
private static void generateHuffmanCodeLengths(int, int[], int[])
{
int[] v1, v2, v3, v4;
int v0, v10, v11, v12, v13, v14, v15, v5, v6, v7, v8, v9;
v0 := @parameter0: int;
v1 := @parameter1: int[];
v2 := @parameter2: int[];
v3 = newarray (int)[v0];
v4 = newarray (int)[v0];
v5 = 0;
label1:
if v5 >= v0 goto label2;
v6 = v1[v5];
v7 = v6 << 9;
v8 = v7 | v5;
v3[v5] = v8;
v5 = v5 + 1;
goto label1;
label2:
staticinvoke <java.util.Arrays: void sort(int[])>(v3);
v9 = 0;
label3:
if v9 >= v0 goto label4;
v10 = v3[v9];
v11 = v10 >>> 9;
v4[v9] = v11;
v9 = v9 + 1;
goto label3;
label4:
staticinvoke <io.netty.handler.codec.compression.Bzip2HuffmanAllocator: void allocateHuffmanCodeLengths(int[],int)>(v4, 20);
v12 = 0;
label5:
if v12 >= v0 goto label6;
v13 = v3[v12];
v14 = v13 & 511;
v15 = v4[v12];
v2[v14] = v15;
v12 = v12 + 1;
goto label5;
label6:
return;
}
private void generateHuffmanOptimisationSeeds()
{
int[][] v1;
io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder v0;
int[] v2, v20;
int v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v21, v3, v4, v5, v6, v7, v8, v9;
v0 := @this: io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder;
v1 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int[][] huffmanCodeLengths>;
v2 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int[] mtfSymbolFrequencies>;
v3 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int mtfAlphabetSize>;
v4 = lengthof v1;
v5 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int mtfLength>;
v6 = (int) -1;
v7 = v6;
v8 = 0;
label1:
if v8 >= v4 goto label9;
v9 = v4 - v8;
v10 = v5 / v9;
v11 = v7 + 1;
v12 = 0;
label2:
if v12 >= v10 goto label3;
v13 = v3 - 1;
if v7 >= v13 goto label3;
v7 = v7 + 1;
v14 = v2[v7];
v12 = v12 + v14;
goto label2;
label3:
if v7 <= v11 goto label4;
if v8 == 0 goto label4;
v15 = v4 - 1;
if v8 == v15 goto label4;
v16 = v4 - v8;
v17 = v16 & 1;
if v17 != 0 goto label4;
v18 = v7;
v7 = v7 - 1;
v19 = v2[v18];
v12 = v12 - v19;
label4:
v20 = v1[v8];
v21 = 0;
label5:
if v21 >= v3 goto label8;
if v21 < v11 goto label6;
if v21 <= v7 goto label7;
label6:
v20[v21] = 15;
label7:
v21 = v21 + 1;
goto label5;
label8:
v5 = v5 - v12;
v8 = v8 + 1;
goto label1;
label9:
return;
}
private void optimiseSelectorsAndHuffmanTables(boolean)
{
byte[] v3;
int[][] v4, v8;
io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder v0;
byte v22;
int[] v14, v19, v25, v32, v33;
boolean v1;
int v10, v11, v12, v13, v15, v17, v18, v20, v21, v23, v24, v26, v28, v29, v30, v31, v5, v6, v7, v9;
char v16, v27;
char[] v2;
v0 := @this: io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder;
v1 := @parameter0: boolean;
v2 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: char[] mtfBlock>;
v3 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: byte[] selectors>;
v4 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int[][] huffmanCodeLengths>;
v5 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int mtfLength>;
v6 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int mtfAlphabetSize>;
v7 = lengthof v4;
v8 = newmultiarray (int)[v7][v6];
v9 = 0;
v10 = 0;
label01:
if v10 >= v5 goto label11;
v11 = v10 + 50;
v12 = staticinvoke <java.lang.Math: int min(int,int)>(v11, v5);
v13 = v12 - 1;
v14 = newarray (int)[v7];
v15 = v10;
label02:
if v15 > v13 goto label05;
v16 = v2[v15];
v17 = 0;
label03:
if v17 >= v7 goto label04;
v18 = v14[v17];
v19 = v4[v17];
v20 = v19[v16];
v21 = v18 + v20;
v14[v17] = v21;
v17 = v17 + 1;
goto label03;
label04:
v15 = v15 + 1;
goto label02;
label05:
v22 = 0;
v23 = v14[0];
label06:
if 1 >= v7 goto label07;
v24 = v14[1];
if v24 >= v23 goto label06;
v23 = v24;
v22 = 1;
goto label06;
label07:
v25 = v8[v22];
v26 = v10;
label08:
if v26 > v13 goto label09;
v27 = v2[v26];
v28 = v25[v27];
v29 = v28 + 1;
v25[v27] = v29;
v26 = v26 + 1;
goto label08;
label09:
if v1 == 0 goto label10;
v30 = v9;
v9 = v9 + 1;
v3[v30] = v22;
label10:
v10 = v13 + 1;
goto label01;
label11:
v31 = 0;
label12:
if v31 >= v7 goto label13;
v32 = v8[v31];
v33 = v4[v31];
staticinvoke <io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: void generateHuffmanCodeLengths(int,int[],int[])>(v6, v32, v33);
v31 = v31 + 1;
goto label12;
label13:
return;
}
private void assignHuffmanCodeSymbols()
{
int[][] v1, v2;
io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder v0;
int[] v14, v17, v6;
int v10, v11, v12, v13, v15, v16, v18, v19, v3, v4, v5, v7, v8, v9;
v0 := @this: io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder;
v1 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int[][] huffmanMergedCodeSymbols>;
v2 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int[][] huffmanCodeLengths>;
v3 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int mtfAlphabetSize>;
v4 = lengthof v2;
v5 = 0;
label01:
if v5 >= v4 goto label11;
v6 = v2[v5];
v7 = 32;
v8 = 0;
v9 = 0;
label02:
if v9 >= v3 goto label05;
v10 = v6[v9];
if v10 <= v8 goto label03;
v8 = v10;
label03:
if v10 >= v7 goto label04;
v7 = v10;
label04:
v9 = v9 + 1;
goto label02;
label05:
v11 = 0;
v12 = v7;
label06:
if v12 > v8 goto label10;
v13 = 0;
label07:
if v13 >= v3 goto label09;
v14 = v2[v5];
v15 = v14[v13];
v16 = v15 & 255;
if v16 != v12 goto label08;
v17 = v1[v5];
v18 = v12 << 24;
v19 = v18 | v11;
v17[v13] = v19;
v11 = v11 + 1;
label08:
v13 = v13 + 1;
goto label07;
label09:
v11 = v11 << 1;
v12 = v12 + 1;
goto label06;
label10:
v5 = v5 + 1;
goto label01;
label11:
return;
}
private void writeSelectorsAndHuffmanTables(io.netty.buffer.ByteBuf)
{
byte[] v3;
int[][] v5;
io.netty.handler.codec.compression.Bzip2BitWriter v2;
io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder v0;
byte v11, v19, v20;
io.netty.buffer.ByteBuf v1;
int[] v15;
int v10, v12, v13, v14, v16, v17, v18, v21, v22, v23, v4, v6, v7, v9;
io.netty.handler.codec.compression.Bzip2MoveToFrontTable v8;
v0 := @this: io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: io.netty.handler.codec.compression.Bzip2BitWriter writer>;
v3 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: byte[] selectors>;
v4 = lengthof v3;
v5 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int[][] huffmanCodeLengths>;
v6 = lengthof v5;
v7 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int mtfAlphabetSize>;
virtualinvoke v2.<io.netty.handler.codec.compression.Bzip2BitWriter: void writeBits(io.netty.buffer.ByteBuf,int,long)>(v1, 3, v6);
virtualinvoke v2.<io.netty.handler.codec.compression.Bzip2BitWriter: void writeBits(io.netty.buffer.ByteBuf,int,long)>(v1, 15, v4);
v8 = new io.netty.handler.codec.compression.Bzip2MoveToFrontTable;
specialinvoke v8.<io.netty.handler.codec.compression.Bzip2MoveToFrontTable: void <init>()>();
v9 = lengthof v3;
v10 = 0;
label01:
if v10 >= v9 goto label02;
v11 = v3[v10];
v12 = virtualinvoke v8.<io.netty.handler.codec.compression.Bzip2MoveToFrontTable: int valueToFront(byte)>(v11);
virtualinvoke v2.<io.netty.handler.codec.compression.Bzip2BitWriter: void writeUnary(io.netty.buffer.ByteBuf,int)>(v1, v12);
v10 = v10 + 1;
goto label01;
label02:
v13 = lengthof v5;
v14 = 0;
label03:
if v14 >= v13 goto label10;
v15 = v5[v14];
v16 = v15[0];
virtualinvoke v2.<io.netty.handler.codec.compression.Bzip2BitWriter: void writeBits(io.netty.buffer.ByteBuf,int,long)>(v1, 5, v16);
v17 = 0;
label04:
if v17 >= v7 goto label09;
v18 = v15[v17];
if v16 >= v18 goto label05;
v19 = 2;
goto label06;
label05:
v19 = 3;
label06:
v20 = v19;
v21 = v18 - v16;
v22 = staticinvoke <java.lang.Math: int abs(int)>(v21);
label07:
v23 = v22;
v22 = v22 - 1;
if v23 <= 0 goto label08;
virtualinvoke v2.<io.netty.handler.codec.compression.Bzip2BitWriter: void writeBits(io.netty.buffer.ByteBuf,int,long)>(v1, 2, v20);
goto label07;
label08:
virtualinvoke v2.<io.netty.handler.codec.compression.Bzip2BitWriter: void writeBoolean(io.netty.buffer.ByteBuf,boolean)>(v1, 0);
v16 = v18;
v17 = v17 + 1;
goto label04;
label09:
v14 = v14 + 1;
goto label03;
label10:
return;
}
private void writeBlockData(io.netty.buffer.ByteBuf)
{
byte[] v4;
int[][] v3;
io.netty.handler.codec.compression.Bzip2BitWriter v2;
io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder v0;
byte v12;
io.netty.buffer.ByteBuf v1;
int[] v13;
int v10, v11, v15, v17, v18, v5, v6, v7, v8, v9;
char v16;
char[] v14;
v0 := @this: io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: io.netty.handler.codec.compression.Bzip2BitWriter writer>;
v3 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int[][] huffmanMergedCodeSymbols>;
v4 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: byte[] selectors>;
v5 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: int mtfLength>;
v6 = 0;
v7 = 0;
label1:
if v7 >= v5 goto label3;
v8 = v7 + 50;
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v8, v5);
v10 = v9 - 1;
v11 = v6;
v6 = v6 + 1;
v12 = v4[v11];
v13 = v3[v12];
label2:
if v7 > v10 goto label1;
v14 = v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: char[] mtfBlock>;
v15 = v7;
v7 = v7 + 1;
v16 = v14[v15];
v17 = v13[v16];
v18 = v17 >>> 24;
virtualinvoke v2.<io.netty.handler.codec.compression.Bzip2BitWriter: void writeBits(io.netty.buffer.ByteBuf,int,long)>(v1, v18, v17);
goto label2;
label3:
return;
}
void encode(io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v1;
int v2;
io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder v0;
boolean v3;
v0 := @this: io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
specialinvoke v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: void generateHuffmanOptimisationSeeds()>();
v2 = 3;
label1:
if v2 < 0 goto label4;
if v2 != 0 goto label2;
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
specialinvoke v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: void optimiseSelectorsAndHuffmanTables(boolean)>(v3);
v2 = v2 - 1;
goto label1;
label4:
specialinvoke v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: void assignHuffmanCodeSymbols()>();
specialinvoke v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: void writeSelectorsAndHuffmanTables(io.netty.buffer.ByteBuf)>(v1);
specialinvoke v0.<io.netty.handler.codec.compression.Bzip2HuffmanStageEncoder: void writeBlockData(io.netty.buffer.ByteBuf)>(v1);
return;
}
}