final class io.netty.handler.codec.compression.EncoderUtil extends java.lang.Object
{
private static final int THREAD_POOL_DELAY_SECONDS;
static void closeAfterFinishEncode(io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelFuture, io.netty.channel.ChannelPromise)
{
io.netty.util.concurrent.EventExecutor v4;
io.netty.util.concurrent.ScheduledFuture v7;
io.netty.channel.ChannelFuture v1;
java.util.concurrent.TimeUnit v6;
io.netty.channel.ChannelHandlerContext v0;
io.netty.handler.codec.compression.EncoderUtil$2 v8;
io.netty.channel.ChannelPromise v2;
io.netty.handler.codec.compression.EncoderUtil$1 v5;
boolean v3;
v0 := @parameter0: io.netty.channel.ChannelHandlerContext;
v1 := @parameter1: io.netty.channel.ChannelFuture;
v2 := @parameter2: io.netty.channel.ChannelPromise;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: boolean isDone()>();
if v3 != 0 goto label1;
v4 = interfaceinvoke v0.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v5 = new io.netty.handler.codec.compression.EncoderUtil$1;
specialinvoke v5.<io.netty.handler.codec.compression.EncoderUtil$1: void <init>(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)>(v0, v2);
v6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v7 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v5, 10L, v6);
v8 = new io.netty.handler.codec.compression.EncoderUtil$2;
specialinvoke v8.<io.netty.handler.codec.compression.EncoderUtil$2: void <init>(io.netty.util.concurrent.Future,io.netty.channel.ChannelPromise,io.netty.channel.ChannelHandlerContext)>(v7, v2, v0);
interfaceinvoke v1.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v8);
goto label2;
label1:
interfaceinvoke v0.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)>(v2);
label2:
return;
}
private void <init>()
{
io.netty.handler.codec.compression.EncoderUtil v0;
v0 := @this: io.netty.handler.codec.compression.EncoderUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
}