final class io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl extends io.netty.handler.codec.DefaultHeaders
{
private static final int VALUE_LENGTH_ESTIMATE;
private io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper objectEscaper;
private io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper charSequenceEscaper;
private io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper objectEscaper()
{
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper v1, v3;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$1 v2;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 = v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper objectEscaper>;
if v1 != null goto label1;
v2 = new io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$1;
specialinvoke v2.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$1: void <init>(io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl)>(v0);
v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper objectEscaper> = v2;
label1:
v3 = v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper objectEscaper>;
return v3;
}
private io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper charSequenceEscaper()
{
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$2 v2;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper v1, v3;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 = v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper charSequenceEscaper>;
if v1 != null goto label1;
v2 = new io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$2;
specialinvoke v2.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$2: void <init>(io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl)>(v0);
v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper charSequenceEscaper> = v2;
label1:
v3 = v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper charSequenceEscaper>;
return v3;
}
void <init>(io.netty.util.HashingStrategy, io.netty.handler.codec.ValueConverter, io.netty.handler.codec.DefaultHeaders$NameValidator, io.netty.handler.codec.DefaultHeaders$ValueValidator)
{
io.netty.util.HashingStrategy v1;
io.netty.handler.codec.ValueConverter v2;
io.netty.handler.codec.DefaultHeaders$NameValidator v3;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0;
io.netty.handler.codec.DefaultHeaders$ValueValidator v4;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 := @parameter0: io.netty.util.HashingStrategy;
v2 := @parameter1: io.netty.handler.codec.ValueConverter;
v3 := @parameter2: io.netty.handler.codec.DefaultHeaders$NameValidator;
v4 := @parameter3: io.netty.handler.codec.DefaultHeaders$ValueValidator;
specialinvoke v0.<io.netty.handler.codec.DefaultHeaders: void <init>(io.netty.util.HashingStrategy,io.netty.handler.codec.ValueConverter,io.netty.handler.codec.DefaultHeaders$NameValidator,int,io.netty.handler.codec.DefaultHeaders$ValueValidator)>(v1, v2, v3, 16, v4);
return;
}
public java.util.Iterator valueIterator(java.lang.CharSequence)
{
java.lang.IllegalStateException v9;
java.lang.CharSequence v1;
java.util.Iterator v2, v7;
java.util.List v6;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0;
java.lang.Object v5;
boolean v3, v4, v8;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 = specialinvoke v0.<io.netty.handler.codec.DefaultHeaders: java.util.Iterator valueIterator(java.lang.Object)>(v1);
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label1;
v4 = staticinvoke <io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: boolean cannotBeCombined(java.lang.CharSequence)>(v1);
if v4 == 0 goto label2;
label1:
return v2;
label2:
v5 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v6 = staticinvoke <io.netty.util.internal.StringUtil: java.util.List unescapeCsvFields(java.lang.CharSequence)>(v5);
v7 = interfaceinvoke v6.<java.util.List: java.util.Iterator iterator()>();
v8 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label3;
v9 = new java.lang.IllegalStateException;
specialinvoke v9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CombinedHttpHeaders should only have one value");
throw v9;
label3:
return v7;
}
public java.util.List getAll(java.lang.CharSequence)
{
java.lang.IllegalStateException v6;
java.lang.CharSequence v1;
java.util.List v2, v8;
int v5;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0;
java.lang.Object v7;
boolean v3, v4;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 = specialinvoke v0.<io.netty.handler.codec.DefaultHeaders: java.util.List getAll(java.lang.Object)>(v1);
v3 = interfaceinvoke v2.<java.util.List: boolean isEmpty()>();
if v3 != 0 goto label1;
v4 = staticinvoke <io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: boolean cannotBeCombined(java.lang.CharSequence)>(v1);
if v4 == 0 goto label2;
label1:
return v2;
label2:
v5 = interfaceinvoke v2.<java.util.List: int size()>();
if v5 == 1 goto label3;
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CombinedHttpHeaders should only have one value");
throw v6;
label3:
v7 = interfaceinvoke v2.<java.util.List: java.lang.Object get(int)>(0);
v8 = staticinvoke <io.netty.util.internal.StringUtil: java.util.List unescapeCsvFields(java.lang.CharSequence)>(v7);
return v8;
}
public io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl add(io.netty.handler.codec.Headers)
{
java.util.Iterator v10, v5;
java.lang.IllegalArgumentException v2;
io.netty.handler.codec.Headers v1;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0;
java.lang.Object v12, v13, v14, v7, v8, v9;
boolean v11, v3, v4, v6;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 := @parameter0: io.netty.handler.codec.Headers;
if v1 != v0 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("can\'t add to itself.");
throw v2;
label1:
v3 = v1 instanceof io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
if v3 == 0 goto label4;
v4 = virtualinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: boolean isEmpty()>();
if v4 == 0 goto label2;
virtualinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: void addImpl(io.netty.handler.codec.Headers)>(v1);
goto label6;
label2:
v5 = interfaceinvoke v1.<io.netty.handler.codec.Headers: java.util.Iterator iterator()>();
label3:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label6;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getKey()>();
v9 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getValue()>();
specialinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl addEscapedValue(java.lang.CharSequence,java.lang.CharSequence)>(v8, v9);
goto label3;
label4:
v10 = interfaceinvoke v1.<io.netty.handler.codec.Headers: java.util.Iterator iterator()>();
label5:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label6;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
v13 = interfaceinvoke v12.<java.util.Map$Entry: java.lang.Object getKey()>();
v14 = interfaceinvoke v12.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl add(java.lang.CharSequence,java.lang.CharSequence)>(v13, v14);
goto label5;
label6:
return v0;
}
public io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl set(io.netty.handler.codec.Headers)
{
io.netty.handler.codec.Headers v1;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0, v2;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 := @parameter0: io.netty.handler.codec.Headers;
if v1 != v0 goto label1;
return v0;
label1:
virtualinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.Headers clear()>();
v2 = virtualinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl add(io.netty.handler.codec.Headers)>(v1);
return v2;
}
public io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl setAll(io.netty.handler.codec.Headers)
{
io.netty.handler.codec.Headers v1;
java.util.Iterator v3;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0, v6;
java.util.Set v2;
java.lang.Object v5;
boolean v4;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 := @parameter0: io.netty.handler.codec.Headers;
if v1 != v0 goto label1;
return v0;
label1:
v2 = interfaceinvoke v1.<io.netty.handler.codec.Headers: java.util.Set names()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label2:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label3;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: boolean remove(java.lang.Object)>(v5);
goto label2;
label3:
v6 = virtualinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl add(io.netty.handler.codec.Headers)>(v1);
return v6;
}
public io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl add(java.lang.CharSequence, java.lang.CharSequence)
{
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper v3;
java.lang.CharSequence v1, v2, v4;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0, v5;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = specialinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper charSequenceEscaper()>();
v4 = interfaceinvoke v3.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper: java.lang.CharSequence escape(java.lang.CharSequence,java.lang.Object)>(v1, v2);
v5 = specialinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl addEscapedValue(java.lang.CharSequence,java.lang.CharSequence)>(v1, v4);
return v5;
}
public transient io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl add(java.lang.CharSequence, java.lang.CharSequence[])
{
java.lang.CharSequence[] v2;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper v3;
java.lang.CharSequence v1, v4;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0, v5;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence[];
v3 = specialinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper charSequenceEscaper()>();
v4 = staticinvoke <io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: java.lang.CharSequence commaSeparate(java.lang.CharSequence,io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper,java.lang.Object[])>(v1, v3, v2);
v5 = specialinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl addEscapedValue(java.lang.CharSequence,java.lang.CharSequence)>(v1, v4);
return v5;
}
public io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl add(java.lang.CharSequence, java.lang.Iterable)
{
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper v3;
java.lang.CharSequence v1, v4;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0, v5;
java.lang.Iterable v2;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = specialinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper charSequenceEscaper()>();
v4 = staticinvoke <io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: java.lang.CharSequence commaSeparate(java.lang.CharSequence,io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper,java.lang.Iterable)>(v1, v3, v2);
v5 = specialinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl addEscapedValue(java.lang.CharSequence,java.lang.CharSequence)>(v1, v4);
return v5;
}
public io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl addObject(java.lang.CharSequence, java.lang.Object)
{
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper v3;
java.lang.Object[] v4;
java.lang.CharSequence v1, v5;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0, v6;
java.lang.Object v2;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Object;
v3 = specialinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper objectEscaper()>();
v4 = newarray (java.lang.Object)[1];
v4[0] = v2;
v5 = staticinvoke <io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: java.lang.CharSequence commaSeparate(java.lang.CharSequence,io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper,java.lang.Object[])>(v1, v3, v4);
v6 = specialinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl addEscapedValue(java.lang.CharSequence,java.lang.CharSequence)>(v1, v5);
return v6;
}
public io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl addObject(java.lang.CharSequence, java.lang.Iterable)
{
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper v3;
java.lang.CharSequence v1, v4;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0, v5;
java.lang.Iterable v2;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = specialinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper objectEscaper()>();
v4 = staticinvoke <io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: java.lang.CharSequence commaSeparate(java.lang.CharSequence,io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper,java.lang.Iterable)>(v1, v3, v2);
v5 = specialinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl addEscapedValue(java.lang.CharSequence,java.lang.CharSequence)>(v1, v4);
return v5;
}
public transient io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl addObject(java.lang.CharSequence, java.lang.Object[])
{
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper v3;
java.lang.Object[] v2;
java.lang.CharSequence v1, v4;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0, v5;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Object[];
v3 = specialinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper objectEscaper()>();
v4 = staticinvoke <io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: java.lang.CharSequence commaSeparate(java.lang.CharSequence,io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper,java.lang.Object[])>(v1, v3, v2);
v5 = specialinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl addEscapedValue(java.lang.CharSequence,java.lang.CharSequence)>(v1, v4);
return v5;
}
public transient io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl set(java.lang.CharSequence, java.lang.CharSequence[])
{
java.lang.CharSequence[] v2;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper v3;
java.lang.CharSequence v1, v4;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence[];
v3 = specialinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper charSequenceEscaper()>();
v4 = staticinvoke <io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: java.lang.CharSequence commaSeparate(java.lang.CharSequence,io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper,java.lang.Object[])>(v1, v3, v2);
virtualinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.Headers set(java.lang.Object,java.lang.Object)>(v1, v4);
return v0;
}
public io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl set(java.lang.CharSequence, java.lang.Iterable)
{
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper v3;
java.lang.CharSequence v1, v4;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0;
java.lang.Iterable v2;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = specialinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper charSequenceEscaper()>();
v4 = staticinvoke <io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: java.lang.CharSequence commaSeparate(java.lang.CharSequence,io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper,java.lang.Iterable)>(v1, v3, v2);
virtualinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.Headers set(java.lang.Object,java.lang.Object)>(v1, v4);
return v0;
}
public io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl setObject(java.lang.CharSequence, java.lang.Object)
{
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper v3;
java.lang.Object[] v4;
java.lang.CharSequence v1, v5;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0;
java.lang.Object v2;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Object;
v3 = specialinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper objectEscaper()>();
v4 = newarray (java.lang.Object)[1];
v4[0] = v2;
v5 = staticinvoke <io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: java.lang.CharSequence commaSeparate(java.lang.CharSequence,io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper,java.lang.Object[])>(v1, v3, v4);
virtualinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.Headers set(java.lang.Object,java.lang.Object)>(v1, v5);
return v0;
}
public transient io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl setObject(java.lang.CharSequence, java.lang.Object[])
{
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper v3;
java.lang.Object[] v2;
java.lang.CharSequence v1, v4;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Object[];
v3 = specialinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper objectEscaper()>();
v4 = staticinvoke <io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: java.lang.CharSequence commaSeparate(java.lang.CharSequence,io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper,java.lang.Object[])>(v1, v3, v2);
virtualinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.Headers set(java.lang.Object,java.lang.Object)>(v1, v4);
return v0;
}
public io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl setObject(java.lang.CharSequence, java.lang.Iterable)
{
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper v3;
java.lang.CharSequence v1, v4;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0;
java.lang.Iterable v2;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = specialinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper objectEscaper()>();
v4 = staticinvoke <io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: java.lang.CharSequence commaSeparate(java.lang.CharSequence,io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper,java.lang.Iterable)>(v1, v3, v2);
virtualinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.Headers set(java.lang.Object,java.lang.Object)>(v1, v4);
return v0;
}
private static boolean cannotBeCombined(java.lang.CharSequence)
{
io.netty.util.AsciiString v1;
java.lang.CharSequence v0;
boolean v2;
v0 := @parameter0: java.lang.CharSequence;
v1 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString SET_COOKIE>;
v2 = virtualinvoke v1.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v0);
return v2;
}
private io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl addEscapedValue(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v1, v2, v5;
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl v0;
java.lang.Object v3;
boolean v4;
v0 := @this: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = virtualinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: java.lang.Object get(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = staticinvoke <io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: boolean cannotBeCombined(java.lang.CharSequence)>(v1);
if v4 == 0 goto label2;
label1:
specialinvoke v0.<io.netty.handler.codec.DefaultHeaders: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v1, v2);
goto label3;
label2:
v5 = staticinvoke <io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: java.lang.CharSequence commaSeparateEscapedValues(java.lang.CharSequence,java.lang.CharSequence)>(v3, v2);
virtualinvoke v0.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl: io.netty.handler.codec.Headers set(java.lang.Object,java.lang.Object)>(v1, v5);
label3:
return v0;
}
private static transient java.lang.CharSequence commaSeparate(java.lang.CharSequence, io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper, java.lang.Object[])
{
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper v1;
java.lang.Object[] v2;
java.lang.CharSequence v0, v11, v14;
int v4, v5, v6, v7, v8, v9;
java.lang.Object v10, v13;
java.lang.StringBuilder v12, v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper;
v2 := @parameter2: java.lang.Object[];
v3 = new java.lang.StringBuilder;
v4 = lengthof v2;
v5 = v4 * 10;
specialinvoke v3.<java.lang.StringBuilder: void <init>(int)>(v5);
v6 = lengthof v2;
if v6 <= 0 goto label3;
v7 = lengthof v2;
v8 = v7 - 1;
v9 = 0;
label1:
if v9 >= v8 goto label2;
v10 = v2[v9];
v11 = interfaceinvoke v1.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper: java.lang.CharSequence escape(java.lang.CharSequence,java.lang.Object)>(v0, v10);
v12 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(v11);
virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);
v9 = v9 + 1;
goto label1;
label2:
v13 = v2[v8];
v14 = interfaceinvoke v1.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper: java.lang.CharSequence escape(java.lang.CharSequence,java.lang.Object)>(v0, v13);
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(v14);
label3:
return v3;
}
private static java.lang.CharSequence commaSeparate(java.lang.CharSequence, io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper, java.lang.Iterable)
{
io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper v1;
java.lang.CharSequence v0, v12, v14;
java.util.Iterator v8;
java.lang.Iterable v2;
int v5, v6;
java.lang.Object v10;
java.lang.StringBuilder v13, v4, v7;
boolean v11, v3, v9;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper;
v2 := @parameter2: java.lang.Iterable;
v3 = v2 instanceof java.util.Collection;
if v3 == 0 goto label1;
v4 = new java.lang.StringBuilder;
v5 = interfaceinvoke v2.<java.util.Collection: int size()>();
v6 = v5 * 10;
specialinvoke v4.<java.lang.StringBuilder: void <init>(int)>(v6);
goto label2;
label1:
v4 = new java.lang.StringBuilder;
specialinvoke v4.<java.lang.StringBuilder: void <init>()>();
label2:
v7 = v4;
v8 = interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label5;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
label3:
v11 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label4;
v12 = interfaceinvoke v1.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper: java.lang.CharSequence escape(java.lang.CharSequence,java.lang.Object)>(v0, v10);
v13 = virtualinvoke v7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(v12);
virtualinvoke v13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
goto label3;
label4:
v14 = interfaceinvoke v1.<io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl$CsvValueEscaper: java.lang.CharSequence escape(java.lang.CharSequence,java.lang.Object)>(v0, v10);
virtualinvoke v7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(v14);
label5:
return v7;
}
private static java.lang.CharSequence commaSeparateEscapedValues(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
int v3, v4, v5, v6;
java.lang.StringBuilder v2, v7, v8, v9;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 = new java.lang.StringBuilder;
v3 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v4 = v3 + 1;
v5 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v6 = v4 + v5;
specialinvoke v2.<java.lang.StringBuilder: void <init>(int)>(v6);
v7 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(v0);
v8 = virtualinvoke v7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);
v9 = virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(v1);
return v9;
}
}