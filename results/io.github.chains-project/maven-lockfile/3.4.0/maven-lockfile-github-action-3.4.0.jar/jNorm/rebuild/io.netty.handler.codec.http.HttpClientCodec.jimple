public final class io.netty.handler.codec.http.HttpClientCodec extends io.netty.channel.CombinedChannelDuplexHandler implements io.netty.handler.codec.http.HttpClientUpgradeHandler$SourceCodec
{
public static final boolean DEFAULT_FAIL_ON_MISSING_RESPONSE;
public static final boolean DEFAULT_PARSE_HTTP_AFTER_CONNECT_REQUEST;
private final java.util.Queue queue;
private final boolean parseHttpAfterConnectRequest;
private boolean done;
private final java.util.concurrent.atomic.AtomicLong requestResponseCounter;
private final boolean failOnMissingResponse;
public void <init>()
{
io.netty.handler.codec.http.HttpClientCodec v0;
v0 := @this: io.netty.handler.codec.http.HttpClientCodec;
specialinvoke v0.<io.netty.handler.codec.http.HttpClientCodec: void <init>(int,int,int,boolean)>(4096, 8192, 8192, 0);
return;
}
public void <init>(int, int, int)
{
int v1, v2, v3;
io.netty.handler.codec.http.HttpClientCodec v0;
v0 := @this: io.netty.handler.codec.http.HttpClientCodec;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<io.netty.handler.codec.http.HttpClientCodec: void <init>(int,int,int,boolean)>(v1, v2, v3, 0);
return;
}
public void <init>(int, int, int, boolean)
{
int v1, v2, v3;
boolean v4;
io.netty.handler.codec.http.HttpClientCodec v0;
v0 := @this: io.netty.handler.codec.http.HttpClientCodec;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
specialinvoke v0.<io.netty.handler.codec.http.HttpClientCodec: void <init>(int,int,int,boolean,boolean)>(v1, v2, v3, v4, 1);
return;
}
public void <init>(int, int, int, boolean, boolean)
{
int v1, v2, v3;
boolean v4, v5;
io.netty.handler.codec.http.HttpClientCodec v0;
v0 := @this: io.netty.handler.codec.http.HttpClientCodec;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
specialinvoke v0.<io.netty.handler.codec.http.HttpClientCodec: void <init>(int,int,int,boolean,boolean,boolean)>(v1, v2, v3, v4, v5, 0);
return;
}
public void <init>(int, int, int, boolean, boolean, boolean)
{
io.netty.handler.codec.http.HttpClientCodec v0;
java.util.concurrent.atomic.AtomicLong v8;
io.netty.handler.codec.http.HttpClientCodec$Decoder v9;
int v1, v2, v3;
java.util.ArrayDeque v7;
boolean v4, v5, v6;
io.netty.handler.codec.http.HttpClientCodec$Encoder v10;
v0 := @this: io.netty.handler.codec.http.HttpClientCodec;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
v6 := @parameter5: boolean;
specialinvoke v0.<io.netty.channel.CombinedChannelDuplexHandler: void <init>()>();
v7 = new java.util.ArrayDeque;
specialinvoke v7.<java.util.ArrayDeque: void <init>()>();
v0.<io.netty.handler.codec.http.HttpClientCodec: java.util.Queue queue> = v7;
v8 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v8.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.codec.http.HttpClientCodec: java.util.concurrent.atomic.AtomicLong requestResponseCounter> = v8;
v9 = new io.netty.handler.codec.http.HttpClientCodec$Decoder;
specialinvoke v9.<io.netty.handler.codec.http.HttpClientCodec$Decoder: void <init>(io.netty.handler.codec.http.HttpClientCodec,int,int,int,boolean)>(v0, v1, v2, v3, v5);
v10 = new io.netty.handler.codec.http.HttpClientCodec$Encoder;
specialinvoke v10.<io.netty.handler.codec.http.HttpClientCodec$Encoder: void <init>(io.netty.handler.codec.http.HttpClientCodec)>(v0);
virtualinvoke v0.<io.netty.handler.codec.http.HttpClientCodec: void init(io.netty.channel.ChannelInboundHandler,io.netty.channel.ChannelOutboundHandler)>(v9, v10);
v0.<io.netty.handler.codec.http.HttpClientCodec: boolean failOnMissingResponse> = v4;
v0.<io.netty.handler.codec.http.HttpClientCodec: boolean parseHttpAfterConnectRequest> = v6;
return;
}
public void <init>(int, int, int, boolean, boolean, int)
{
int v1, v2, v3, v6;
boolean v4, v5;
io.netty.handler.codec.http.HttpClientCodec v0;
v0 := @this: io.netty.handler.codec.http.HttpClientCodec;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
v6 := @parameter5: int;
specialinvoke v0.<io.netty.handler.codec.http.HttpClientCodec: void <init>(int,int,int,boolean,boolean,int,boolean)>(v1, v2, v3, v4, v5, v6, 0);
return;
}
public void <init>(int, int, int, boolean, boolean, int, boolean)
{
io.netty.handler.codec.http.HttpClientCodec v0;
int v1, v2, v3, v6;
boolean v4, v5, v7;
v0 := @this: io.netty.handler.codec.http.HttpClientCodec;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
v6 := @parameter5: int;
v7 := @parameter6: boolean;
specialinvoke v0.<io.netty.handler.codec.http.HttpClientCodec: void <init>(int,int,int,boolean,boolean,int,boolean,boolean)>(v1, v2, v3, v4, v5, v6, v7, 0);
return;
}
public void <init>(int, int, int, boolean, boolean, int, boolean, boolean)
{
io.netty.handler.codec.http.HttpClientCodec v0;
int v1, v2, v3, v6;
boolean v4, v5, v7, v8;
v0 := @this: io.netty.handler.codec.http.HttpClientCodec;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
v6 := @parameter5: int;
v7 := @parameter6: boolean;
v8 := @parameter7: boolean;
specialinvoke v0.<io.netty.handler.codec.http.HttpClientCodec: void <init>(int,int,int,boolean,boolean,int,boolean,boolean,boolean)>(v1, v2, v3, v4, v5, v6, v7, v8, 1);
return;
}
public void <init>(int, int, int, boolean, boolean, int, boolean, boolean, boolean)
{
io.netty.handler.codec.http.HttpClientCodec v0;
java.util.concurrent.atomic.AtomicLong v11;
io.netty.handler.codec.http.HttpClientCodec$Decoder v12;
int v1, v2, v3, v6;
java.util.ArrayDeque v10;
boolean v4, v5, v7, v8, v9;
io.netty.handler.codec.http.HttpClientCodec$Encoder v13;
v0 := @this: io.netty.handler.codec.http.HttpClientCodec;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
v6 := @parameter5: int;
v7 := @parameter6: boolean;
v8 := @parameter7: boolean;
v9 := @parameter8: boolean;
specialinvoke v0.<io.netty.channel.CombinedChannelDuplexHandler: void <init>()>();
v10 = new java.util.ArrayDeque;
specialinvoke v10.<java.util.ArrayDeque: void <init>()>();
v0.<io.netty.handler.codec.http.HttpClientCodec: java.util.Queue queue> = v10;
v11 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v11.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.codec.http.HttpClientCodec: java.util.concurrent.atomic.AtomicLong requestResponseCounter> = v11;
v12 = new io.netty.handler.codec.http.HttpClientCodec$Decoder;
specialinvoke v12.<io.netty.handler.codec.http.HttpClientCodec$Decoder: void <init>(io.netty.handler.codec.http.HttpClientCodec,int,int,int,boolean,int,boolean,boolean)>(v0, v1, v2, v3, v5, v6, v8, v9);
v13 = new io.netty.handler.codec.http.HttpClientCodec$Encoder;
specialinvoke v13.<io.netty.handler.codec.http.HttpClientCodec$Encoder: void <init>(io.netty.handler.codec.http.HttpClientCodec)>(v0);
virtualinvoke v0.<io.netty.handler.codec.http.HttpClientCodec: void init(io.netty.channel.ChannelInboundHandler,io.netty.channel.ChannelOutboundHandler)>(v12, v13);
v0.<io.netty.handler.codec.http.HttpClientCodec: boolean parseHttpAfterConnectRequest> = v7;
v0.<io.netty.handler.codec.http.HttpClientCodec: boolean failOnMissingResponse> = v4;
return;
}
public void prepareUpgradeFrom(io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelOutboundHandler v2;
io.netty.handler.codec.http.HttpClientCodec v0;
v0 := @this: io.netty.handler.codec.http.HttpClientCodec;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = virtualinvoke v0.<io.netty.handler.codec.http.HttpClientCodec: io.netty.channel.ChannelOutboundHandler outboundHandler()>();
v2.<io.netty.handler.codec.http.HttpClientCodec$Encoder: boolean upgraded> = 1;
return;
}
public void upgradeFrom(io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPipeline v2;
io.netty.handler.codec.http.HttpClientCodec v0;
v0 := @this: io.netty.handler.codec.http.HttpClientCodec;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v2.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
return;
}
public void setSingleDecode(boolean)
{
io.netty.channel.ChannelInboundHandler v2;
boolean v1;
io.netty.handler.codec.http.HttpClientCodec v0;
v0 := @this: io.netty.handler.codec.http.HttpClientCodec;
v1 := @parameter0: boolean;
v2 = virtualinvoke v0.<io.netty.handler.codec.http.HttpClientCodec: io.netty.channel.ChannelInboundHandler inboundHandler()>();
virtualinvoke v2.<io.netty.handler.codec.http.HttpResponseDecoder: void setSingleDecode(boolean)>(v1);
return;
}
public boolean isSingleDecode()
{
io.netty.channel.ChannelInboundHandler v1;
boolean v2;
io.netty.handler.codec.http.HttpClientCodec v0;
v0 := @this: io.netty.handler.codec.http.HttpClientCodec;
v1 = virtualinvoke v0.<io.netty.handler.codec.http.HttpClientCodec: io.netty.channel.ChannelInboundHandler inboundHandler()>();
v2 = virtualinvoke v1.<io.netty.handler.codec.http.HttpResponseDecoder: boolean isSingleDecode()>();
return v2;
}
}