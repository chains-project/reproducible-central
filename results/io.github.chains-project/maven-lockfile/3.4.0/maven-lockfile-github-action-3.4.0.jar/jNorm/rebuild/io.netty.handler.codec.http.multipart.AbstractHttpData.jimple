public abstract class io.netty.handler.codec.http.multipart.AbstractHttpData extends io.netty.util.AbstractReferenceCounted implements io.netty.handler.codec.http.multipart.HttpData
{
private static final java.util.regex.Pattern STRIP_PATTERN;
private static final java.util.regex.Pattern REPLACE_PATTERN;
private final java.lang.String name;
protected long definedSize;
protected long size;
private java.nio.charset.Charset charset;
private boolean completed;
private long maxSize;
protected void <init>(java.lang.String, java.nio.charset.Charset, long)
{
long v3;
io.netty.handler.codec.http.multipart.AbstractHttpData v0;
java.util.regex.Matcher v6, v9;
java.nio.charset.Charset v2, v4;
java.lang.String v1, v10, v11, v7;
java.util.regex.Pattern v5, v8;
v0 := @this: io.netty.handler.codec.http.multipart.AbstractHttpData;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.nio.charset.Charset;
v3 := @parameter2: long;
specialinvoke v0.<io.netty.util.AbstractReferenceCounted: void <init>()>();
v4 = <io.netty.handler.codec.http.HttpConstants: java.nio.charset.Charset DEFAULT_CHARSET>;
v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: java.nio.charset.Charset charset> = v4;
v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: long maxSize> = -1L;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "name");
v5 = <io.netty.handler.codec.http.multipart.AbstractHttpData: java.util.regex.Pattern REPLACE_PATTERN>;
v6 = virtualinvoke v5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v1);
v7 = virtualinvoke v6.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>(" ");
v8 = <io.netty.handler.codec.http.multipart.AbstractHttpData: java.util.regex.Pattern STRIP_PATTERN>;
v9 = virtualinvoke v8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v7);
v10 = virtualinvoke v9.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");
v11 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.String checkNonEmpty(java.lang.String,java.lang.String)>(v10, "name");
v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: java.lang.String name> = v11;
if v2 == null goto label1;
virtualinvoke v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: void setCharset(java.nio.charset.Charset)>(v2);
label1:
v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: long definedSize> = v3;
return;
}
public long getMaxSize()
{
long v1;
io.netty.handler.codec.http.multipart.AbstractHttpData v0;
v0 := @this: io.netty.handler.codec.http.multipart.AbstractHttpData;
v1 = v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: long maxSize>;
return v1;
}
public void setMaxSize(long)
{
long v1;
io.netty.handler.codec.http.multipart.AbstractHttpData v0;
v0 := @this: io.netty.handler.codec.http.multipart.AbstractHttpData;
v1 := @parameter0: long;
v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: long maxSize> = v1;
return;
}
public void checkSize(long) throws java.io.IOException
{
byte v3, v5;
java.io.IOException v6;
long v1, v2, v4;
io.netty.handler.codec.http.multipart.AbstractHttpData v0;
v0 := @this: io.netty.handler.codec.http.multipart.AbstractHttpData;
v1 := @parameter0: long;
v2 = v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: long maxSize>;
v3 = v2 cmp 0L;
if v3 < 0 goto label1;
v4 = v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: long maxSize>;
v5 = v1 cmp v4;
if v5 <= 0 goto label1;
v6 = new java.io.IOException;
specialinvoke v6.<java.io.IOException: void <init>(java.lang.String)>("Size exceed allowed maximum capacity");
throw v6;
label1:
return;
}
public java.lang.String getName()
{
java.lang.String v1;
io.netty.handler.codec.http.multipart.AbstractHttpData v0;
v0 := @this: io.netty.handler.codec.http.multipart.AbstractHttpData;
v1 = v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: java.lang.String name>;
return v1;
}
public boolean isCompleted()
{
io.netty.handler.codec.http.multipart.AbstractHttpData v0;
boolean v1;
v0 := @this: io.netty.handler.codec.http.multipart.AbstractHttpData;
v1 = v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: boolean completed>;
return v1;
}
protected void setCompleted()
{
io.netty.handler.codec.http.multipart.AbstractHttpData v0;
v0 := @this: io.netty.handler.codec.http.multipart.AbstractHttpData;
virtualinvoke v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: void setCompleted(boolean)>(1);
return;
}
protected void setCompleted(boolean)
{
io.netty.handler.codec.http.multipart.AbstractHttpData v0;
boolean v1;
v0 := @this: io.netty.handler.codec.http.multipart.AbstractHttpData;
v1 := @parameter0: boolean;
v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: boolean completed> = v1;
return;
}
public java.nio.charset.Charset getCharset()
{
io.netty.handler.codec.http.multipart.AbstractHttpData v0;
java.nio.charset.Charset v1;
v0 := @this: io.netty.handler.codec.http.multipart.AbstractHttpData;
v1 = v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: java.nio.charset.Charset charset>;
return v1;
}
public void setCharset(java.nio.charset.Charset)
{
java.lang.Object v2;
io.netty.handler.codec.http.multipart.AbstractHttpData v0;
java.nio.charset.Charset v1;
v0 := @this: io.netty.handler.codec.http.multipart.AbstractHttpData;
v1 := @parameter0: java.nio.charset.Charset;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "charset");
v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: java.nio.charset.Charset charset> = v2;
return;
}
public long length()
{
long v1;
io.netty.handler.codec.http.multipart.AbstractHttpData v0;
v0 := @this: io.netty.handler.codec.http.multipart.AbstractHttpData;
v1 = v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: long size>;
return v1;
}
public long definedLength()
{
long v1;
io.netty.handler.codec.http.multipart.AbstractHttpData v0;
v0 := @this: io.netty.handler.codec.http.multipart.AbstractHttpData;
v1 = v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: long definedSize>;
return v1;
}
public io.netty.buffer.ByteBuf content()
{
io.netty.channel.ChannelException v3;
io.netty.buffer.ByteBuf v1;
java.io.IOException v2;
io.netty.handler.codec.http.multipart.AbstractHttpData v0;
v0 := @this: io.netty.handler.codec.http.multipart.AbstractHttpData;
label1:
v1 = virtualinvoke v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: io.netty.buffer.ByteBuf getByteBuf()>();
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = new io.netty.channel.ChannelException;
specialinvoke v3.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v2);
throw v3;
catch java.io.IOException from label1 to label2 with label3;
}
protected void deallocate()
{
io.netty.handler.codec.http.multipart.AbstractHttpData v0;
v0 := @this: io.netty.handler.codec.http.multipart.AbstractHttpData;
virtualinvoke v0.<io.netty.handler.codec.http.multipart.AbstractHttpData: void delete()>();
return;
}
public io.netty.handler.codec.http.multipart.HttpData retain()
{
io.netty.handler.codec.http.multipart.AbstractHttpData v0;
v0 := @this: io.netty.handler.codec.http.multipart.AbstractHttpData;
specialinvoke v0.<io.netty.util.AbstractReferenceCounted: io.netty.util.ReferenceCounted retain()>();
return v0;
}
public io.netty.handler.codec.http.multipart.HttpData retain(int)
{
int v1;
io.netty.handler.codec.http.multipart.AbstractHttpData v0;
v0 := @this: io.netty.handler.codec.http.multipart.AbstractHttpData;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.util.AbstractReferenceCounted: io.netty.util.ReferenceCounted retain(int)>(v1);
return v0;
}
public abstract io.netty.handler.codec.http.multipart.HttpData touch();
public abstract io.netty.handler.codec.http.multipart.HttpData touch(java.lang.Object);
static void <clinit>()
{
java.util.regex.Pattern v0, v1;
v0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?:^\\s+|\\s+$|\\n)");
<io.netty.handler.codec.http.multipart.AbstractHttpData: java.util.regex.Pattern STRIP_PATTERN> = v0;
v1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[\\r\\t]");
<io.netty.handler.codec.http.multipart.AbstractHttpData: java.util.regex.Pattern REPLACE_PATTERN> = v1;
return;
}
}