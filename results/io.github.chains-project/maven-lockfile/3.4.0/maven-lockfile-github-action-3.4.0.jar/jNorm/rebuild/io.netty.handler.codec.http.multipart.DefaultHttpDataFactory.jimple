public class io.netty.handler.codec.http.multipart.DefaultHttpDataFactory extends java.lang.Object implements io.netty.handler.codec.http.multipart.HttpDataFactory
{
public static final long MINSIZE;
public static final long MAXSIZE;
private final boolean useDisk;
private final boolean checkSize;
private long minSize;
private long maxSize;
private java.nio.charset.Charset charset;
private java.lang.String baseDir;
private boolean deleteOnExit;
private final java.util.Map requestFileDeleteMap;
public void <init>()
{
java.util.IdentityHashMap v2;
java.nio.charset.Charset v1;
java.util.Map v3;
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long maxSize> = -1L;
v1 = <io.netty.handler.codec.http.HttpConstants: java.nio.charset.Charset DEFAULT_CHARSET>;
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.nio.charset.Charset charset> = v1;
v2 = new java.util.IdentityHashMap;
specialinvoke v2.<java.util.IdentityHashMap: void <init>()>();
v3 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>(v2);
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.util.Map requestFileDeleteMap> = v3;
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean useDisk> = 0;
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean checkSize> = 1;
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long minSize> = 16384L;
return;
}
public void <init>(java.nio.charset.Charset)
{
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
java.nio.charset.Charset v1;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
v1 := @parameter0: java.nio.charset.Charset;
specialinvoke v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: void <init>()>();
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.nio.charset.Charset charset> = v1;
return;
}
public void <init>(boolean)
{
java.util.IdentityHashMap v3;
java.nio.charset.Charset v2;
java.util.Map v4;
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
boolean v1;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
v1 := @parameter0: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long maxSize> = -1L;
v2 = <io.netty.handler.codec.http.HttpConstants: java.nio.charset.Charset DEFAULT_CHARSET>;
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.nio.charset.Charset charset> = v2;
v3 = new java.util.IdentityHashMap;
specialinvoke v3.<java.util.IdentityHashMap: void <init>()>();
v4 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>(v3);
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.util.Map requestFileDeleteMap> = v4;
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean useDisk> = v1;
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean checkSize> = 0;
return;
}
public void <init>(boolean, java.nio.charset.Charset)
{
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
java.nio.charset.Charset v2;
boolean v1;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
v1 := @parameter0: boolean;
v2 := @parameter1: java.nio.charset.Charset;
specialinvoke v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: void <init>(boolean)>(v1);
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.nio.charset.Charset charset> = v2;
return;
}
public void <init>(long)
{
java.util.IdentityHashMap v3;
java.nio.charset.Charset v2;
java.util.Map v4;
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
long v1;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
v1 := @parameter0: long;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long maxSize> = -1L;
v2 = <io.netty.handler.codec.http.HttpConstants: java.nio.charset.Charset DEFAULT_CHARSET>;
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.nio.charset.Charset charset> = v2;
v3 = new java.util.IdentityHashMap;
specialinvoke v3.<java.util.IdentityHashMap: void <init>()>();
v4 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>(v3);
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.util.Map requestFileDeleteMap> = v4;
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean useDisk> = 0;
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean checkSize> = 1;
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long minSize> = v1;
return;
}
public void <init>(long, java.nio.charset.Charset)
{
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
long v1;
java.nio.charset.Charset v2;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
v1 := @parameter0: long;
v2 := @parameter1: java.nio.charset.Charset;
specialinvoke v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: void <init>(long)>(v1);
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.nio.charset.Charset charset> = v2;
return;
}
public void setBaseDir(java.lang.String)
{
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
v1 := @parameter0: java.lang.String;
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.lang.String baseDir> = v1;
return;
}
public void setDeleteOnExit(boolean)
{
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
boolean v1;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
v1 := @parameter0: boolean;
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean deleteOnExit> = v1;
return;
}
public void setMaxLimit(long)
{
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
long v1;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
v1 := @parameter0: long;
v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long maxSize> = v1;
return;
}
private java.util.List getList(io.netty.handler.codec.http.HttpRequest)
{
io.netty.handler.codec.http.HttpRequest v1;
java.util.Map v2, v5;
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
java.lang.Object v3;
java.util.ArrayList v4;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
v1 := @parameter0: io.netty.handler.codec.http.HttpRequest;
v2 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.util.Map requestFileDeleteMap>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 != null goto label1;
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
v3 = v4;
v5 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.util.Map requestFileDeleteMap>;
interfaceinvoke v5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v4);
label1:
return v3;
}
public io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest, java.lang.String)
{
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
long v12, v16, v19, v8;
java.nio.charset.Charset v13, v5;
java.lang.String v14, v2, v6;
boolean v10, v15, v3, v7;
io.netty.handler.codec.http.multipart.MemoryAttribute v18;
io.netty.handler.codec.http.HttpRequest v1;
java.util.List v17, v9;
io.netty.handler.codec.http.multipart.DiskAttribute v4;
io.netty.handler.codec.http.multipart.MixedAttribute v11;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
v1 := @parameter0: io.netty.handler.codec.http.HttpRequest;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean useDisk>;
if v3 == 0 goto label1;
v4 = new io.netty.handler.codec.http.multipart.DiskAttribute;
v5 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.nio.charset.Charset charset>;
v6 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.lang.String baseDir>;
v7 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean deleteOnExit>;
specialinvoke v4.<io.netty.handler.codec.http.multipart.DiskAttribute: void <init>(java.lang.String,java.nio.charset.Charset,java.lang.String,boolean)>(v2, v5, v6, v7);
v8 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long maxSize>;
interfaceinvoke v4.<io.netty.handler.codec.http.multipart.Attribute: void setMaxSize(long)>(v8);
v9 = specialinvoke v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.util.List getList(io.netty.handler.codec.http.HttpRequest)>(v1);
interfaceinvoke v9.<java.util.List: boolean add(java.lang.Object)>(v4);
return v4;
label1:
v10 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean checkSize>;
if v10 == 0 goto label2;
v11 = new io.netty.handler.codec.http.multipart.MixedAttribute;
v12 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long minSize>;
v13 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.nio.charset.Charset charset>;
v14 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.lang.String baseDir>;
v15 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean deleteOnExit>;
specialinvoke v11.<io.netty.handler.codec.http.multipart.MixedAttribute: void <init>(java.lang.String,long,java.nio.charset.Charset,java.lang.String,boolean)>(v2, v12, v13, v14, v15);
v16 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long maxSize>;
interfaceinvoke v11.<io.netty.handler.codec.http.multipart.Attribute: void setMaxSize(long)>(v16);
v17 = specialinvoke v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.util.List getList(io.netty.handler.codec.http.HttpRequest)>(v1);
interfaceinvoke v17.<java.util.List: boolean add(java.lang.Object)>(v11);
return v11;
label2:
v18 = new io.netty.handler.codec.http.multipart.MemoryAttribute;
specialinvoke v18.<io.netty.handler.codec.http.multipart.MemoryAttribute: void <init>(java.lang.String)>(v2);
v19 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long maxSize>;
virtualinvoke v18.<io.netty.handler.codec.http.multipart.MemoryAttribute: void setMaxSize(long)>(v19);
return v18;
}
public io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest, java.lang.String, long)
{
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
long v13, v17, v20, v3, v9;
java.nio.charset.Charset v14, v6;
java.lang.String v15, v2, v7;
boolean v11, v16, v4, v8;
io.netty.handler.codec.http.multipart.MemoryAttribute v19;
io.netty.handler.codec.http.HttpRequest v1;
java.util.List v10, v18;
io.netty.handler.codec.http.multipart.DiskAttribute v5;
io.netty.handler.codec.http.multipart.MixedAttribute v12;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
v1 := @parameter0: io.netty.handler.codec.http.HttpRequest;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: long;
v4 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean useDisk>;
if v4 == 0 goto label1;
v5 = new io.netty.handler.codec.http.multipart.DiskAttribute;
v6 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.nio.charset.Charset charset>;
v7 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.lang.String baseDir>;
v8 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean deleteOnExit>;
specialinvoke v5.<io.netty.handler.codec.http.multipart.DiskAttribute: void <init>(java.lang.String,long,java.nio.charset.Charset,java.lang.String,boolean)>(v2, v3, v6, v7, v8);
v9 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long maxSize>;
interfaceinvoke v5.<io.netty.handler.codec.http.multipart.Attribute: void setMaxSize(long)>(v9);
v10 = specialinvoke v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.util.List getList(io.netty.handler.codec.http.HttpRequest)>(v1);
interfaceinvoke v10.<java.util.List: boolean add(java.lang.Object)>(v5);
return v5;
label1:
v11 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean checkSize>;
if v11 == 0 goto label2;
v12 = new io.netty.handler.codec.http.multipart.MixedAttribute;
v13 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long minSize>;
v14 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.nio.charset.Charset charset>;
v15 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.lang.String baseDir>;
v16 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean deleteOnExit>;
specialinvoke v12.<io.netty.handler.codec.http.multipart.MixedAttribute: void <init>(java.lang.String,long,long,java.nio.charset.Charset,java.lang.String,boolean)>(v2, v3, v13, v14, v15, v16);
v17 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long maxSize>;
interfaceinvoke v12.<io.netty.handler.codec.http.multipart.Attribute: void setMaxSize(long)>(v17);
v18 = specialinvoke v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.util.List getList(io.netty.handler.codec.http.HttpRequest)>(v1);
interfaceinvoke v18.<java.util.List: boolean add(java.lang.Object)>(v12);
return v12;
label2:
v19 = new io.netty.handler.codec.http.multipart.MemoryAttribute;
specialinvoke v19.<io.netty.handler.codec.http.multipart.MemoryAttribute: void <init>(java.lang.String,long)>(v2, v3);
v20 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long maxSize>;
virtualinvoke v19.<io.netty.handler.codec.http.multipart.MemoryAttribute: void setMaxSize(long)>(v20);
return v19;
}
private static void checkHttpDataSize(io.netty.handler.codec.http.multipart.HttpData)
{
io.netty.handler.codec.http.multipart.HttpData v0;
java.io.IOException v2;
long v1;
java.lang.IllegalArgumentException v3;
v0 := @parameter0: io.netty.handler.codec.http.multipart.HttpData;
label1:
v1 = interfaceinvoke v0.<io.netty.handler.codec.http.multipart.HttpData: long length()>();
interfaceinvoke v0.<io.netty.handler.codec.http.multipart.HttpData: void checkSize(long)>(v1);
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attribute bigger than maxSize allowed");
throw v3;
label4:
return;
catch java.io.IOException from label1 to label2 with label3;
}
public io.netty.handler.codec.http.multipart.Attribute createAttribute(io.netty.handler.codec.http.HttpRequest, java.lang.String, java.lang.String)
{
boolean v16, v19, v24, v4, v8;
io.netty.handler.codec.http.multipart.MemoryAttribute v27;
io.netty.handler.codec.http.HttpRequest v1;
io.netty.handler.codec.http.multipart.Attribute v9;
java.util.List v18, v26;
io.netty.handler.codec.http.multipart.DiskAttribute v5;
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
long v10, v13, v17, v21, v25, v29;
java.nio.charset.Charset v14, v22, v28, v6;
java.lang.String v15, v2, v23, v3, v7;
java.io.IOException v11, v30;
java.lang.IllegalArgumentException v31;
io.netty.handler.codec.http.multipart.MixedAttribute v12, v20;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
v1 := @parameter0: io.netty.handler.codec.http.HttpRequest;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean useDisk>;
if v4 == 0 goto label5;
label1:
v5 = new io.netty.handler.codec.http.multipart.DiskAttribute;
v6 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.nio.charset.Charset charset>;
v7 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.lang.String baseDir>;
v8 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean deleteOnExit>;
specialinvoke v5.<io.netty.handler.codec.http.multipart.DiskAttribute: void <init>(java.lang.String,java.lang.String,java.nio.charset.Charset,java.lang.String,boolean)>(v2, v3, v6, v7, v8);
v9 = v5;
v10 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long maxSize>;
interfaceinvoke v5.<io.netty.handler.codec.http.multipart.Attribute: void setMaxSize(long)>(v10);
label2:
goto label4;
label3:
v11 := @caughtexception;
v12 = new io.netty.handler.codec.http.multipart.MixedAttribute;
v13 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long minSize>;
v14 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.nio.charset.Charset charset>;
v15 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.lang.String baseDir>;
v16 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean deleteOnExit>;
specialinvoke v12.<io.netty.handler.codec.http.multipart.MixedAttribute: void <init>(java.lang.String,java.lang.String,long,java.nio.charset.Charset,java.lang.String,boolean)>(v2, v3, v13, v14, v15, v16);
v9 = v12;
v17 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long maxSize>;
interfaceinvoke v12.<io.netty.handler.codec.http.multipart.Attribute: void setMaxSize(long)>(v17);
label4:
staticinvoke <io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: void checkHttpDataSize(io.netty.handler.codec.http.multipart.HttpData)>(v9);
v18 = specialinvoke v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.util.List getList(io.netty.handler.codec.http.HttpRequest)>(v1);
interfaceinvoke v18.<java.util.List: boolean add(java.lang.Object)>(v9);
return v9;
label5:
v19 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean checkSize>;
if v19 == 0 goto label6;
v20 = new io.netty.handler.codec.http.multipart.MixedAttribute;
v21 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long minSize>;
v22 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.nio.charset.Charset charset>;
v23 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.lang.String baseDir>;
v24 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean deleteOnExit>;
specialinvoke v20.<io.netty.handler.codec.http.multipart.MixedAttribute: void <init>(java.lang.String,java.lang.String,long,java.nio.charset.Charset,java.lang.String,boolean)>(v2, v3, v21, v22, v23, v24);
v25 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long maxSize>;
interfaceinvoke v20.<io.netty.handler.codec.http.multipart.Attribute: void setMaxSize(long)>(v25);
staticinvoke <io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: void checkHttpDataSize(io.netty.handler.codec.http.multipart.HttpData)>(v20);
v26 = specialinvoke v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.util.List getList(io.netty.handler.codec.http.HttpRequest)>(v1);
interfaceinvoke v26.<java.util.List: boolean add(java.lang.Object)>(v20);
return v20;
label6:
v27 = new io.netty.handler.codec.http.multipart.MemoryAttribute;
v28 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.nio.charset.Charset charset>;
specialinvoke v27.<io.netty.handler.codec.http.multipart.MemoryAttribute: void <init>(java.lang.String,java.lang.String,java.nio.charset.Charset)>(v2, v3, v28);
v29 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long maxSize>;
virtualinvoke v27.<io.netty.handler.codec.http.multipart.MemoryAttribute: void setMaxSize(long)>(v29);
staticinvoke <io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: void checkHttpDataSize(io.netty.handler.codec.http.multipart.HttpData)>(v27);
label7:
return v27;
label8:
v30 := @caughtexception;
v31 = new java.lang.IllegalArgumentException;
specialinvoke v31.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(v30);
throw v31;
catch java.io.IOException from label1 to label2 with label3;
catch java.io.IOException from label6 to label7 with label8;
}
public io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.nio.charset.Charset, long)
{
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
long v12, v16, v19, v22, v7;
java.nio.charset.Charset v6;
io.netty.handler.codec.http.multipart.MixedFileUpload v15;
io.netty.handler.codec.http.multipart.MemoryFileUpload v21;
java.lang.String v10, v17, v2, v3, v4, v5;
boolean v11, v14, v18, v8;
io.netty.handler.codec.http.HttpRequest v1;
io.netty.handler.codec.http.multipart.DiskFileUpload v9;
java.util.List v13, v20;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
v1 := @parameter0: io.netty.handler.codec.http.HttpRequest;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: java.lang.String;
v6 := @parameter5: java.nio.charset.Charset;
v7 := @parameter6: long;
v8 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean useDisk>;
if v8 == 0 goto label1;
v9 = new io.netty.handler.codec.http.multipart.DiskFileUpload;
v10 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.lang.String baseDir>;
v11 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean deleteOnExit>;
specialinvoke v9.<io.netty.handler.codec.http.multipart.DiskFileUpload: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long,java.lang.String,boolean)>(v2, v3, v4, v5, v6, v7, v10, v11);
v12 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long maxSize>;
interfaceinvoke v9.<io.netty.handler.codec.http.multipart.FileUpload: void setMaxSize(long)>(v12);
staticinvoke <io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: void checkHttpDataSize(io.netty.handler.codec.http.multipart.HttpData)>(v9);
v13 = specialinvoke v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.util.List getList(io.netty.handler.codec.http.HttpRequest)>(v1);
interfaceinvoke v13.<java.util.List: boolean add(java.lang.Object)>(v9);
return v9;
label1:
v14 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean checkSize>;
if v14 == 0 goto label2;
v15 = new io.netty.handler.codec.http.multipart.MixedFileUpload;
v16 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long minSize>;
v17 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.lang.String baseDir>;
v18 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: boolean deleteOnExit>;
specialinvoke v15.<io.netty.handler.codec.http.multipart.MixedFileUpload: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long,long,java.lang.String,boolean)>(v2, v3, v4, v5, v6, v7, v16, v17, v18);
v19 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long maxSize>;
interfaceinvoke v15.<io.netty.handler.codec.http.multipart.FileUpload: void setMaxSize(long)>(v19);
staticinvoke <io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: void checkHttpDataSize(io.netty.handler.codec.http.multipart.HttpData)>(v15);
v20 = specialinvoke v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.util.List getList(io.netty.handler.codec.http.HttpRequest)>(v1);
interfaceinvoke v20.<java.util.List: boolean add(java.lang.Object)>(v15);
return v15;
label2:
v21 = new io.netty.handler.codec.http.multipart.MemoryFileUpload;
specialinvoke v21.<io.netty.handler.codec.http.multipart.MemoryFileUpload: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)>(v2, v3, v4, v5, v6, v7);
v22 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: long maxSize>;
virtualinvoke v21.<io.netty.handler.codec.http.multipart.MemoryFileUpload: void setMaxSize(long)>(v22);
staticinvoke <io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: void checkHttpDataSize(io.netty.handler.codec.http.multipart.HttpData)>(v21);
return v21;
}
public void removeHttpDataFromClean(io.netty.handler.codec.http.HttpRequest, io.netty.handler.codec.http.multipart.InterfaceHttpData)
{
io.netty.handler.codec.http.HttpRequest v1;
java.util.Iterator v6;
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
io.netty.handler.codec.http.multipart.InterfaceHttpData v2;
java.util.Map v10, v4;
java.lang.Object v5, v8;
boolean v3, v7, v9;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
v1 := @parameter0: io.netty.handler.codec.http.HttpRequest;
v2 := @parameter1: io.netty.handler.codec.http.multipart.InterfaceHttpData;
v3 = v2 instanceof io.netty.handler.codec.http.multipart.HttpData;
if v3 != 0 goto label1;
return;
label1:
v4 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.util.Map requestFileDeleteMap>;
v5 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v5 != null goto label2;
return;
label2:
v6 = interfaceinvoke v5.<java.util.List: java.util.Iterator iterator()>();
label3:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label5;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
if v8 != v2 goto label3;
interfaceinvoke v6.<java.util.Iterator: void remove()>();
v9 = interfaceinvoke v5.<java.util.List: boolean isEmpty()>();
if v9 == 0 goto label4;
v10 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.util.Map requestFileDeleteMap>;
interfaceinvoke v10.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
label4:
return;
label5:
return;
}
public void cleanRequestHttpData(io.netty.handler.codec.http.HttpRequest)
{
io.netty.handler.codec.http.HttpRequest v1;
java.util.Iterator v4;
java.util.Map v2;
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
java.lang.Object v3, v6;
boolean v5;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
v1 := @parameter0: io.netty.handler.codec.http.HttpRequest;
v2 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.util.Map requestFileDeleteMap>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
if v3 == null goto label2;
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v6.<io.netty.handler.codec.http.multipart.HttpData: boolean release()>();
goto label1;
label2:
return;
}
public void cleanAllHttpData()
{
java.util.Iterator v3, v7;
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
java.util.Set v2;
java.util.Map v1;
java.lang.Object v5, v6, v9;
boolean v4, v8;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
v1 = v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: java.util.Map requestFileDeleteMap>;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label4;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
v7 = interfaceinvoke v6.<java.util.List: java.util.Iterator iterator()>();
label2:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label3;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v9.<io.netty.handler.codec.http.multipart.HttpData: boolean release()>();
goto label2;
label3:
interfaceinvoke v3.<java.util.Iterator: void remove()>();
goto label1;
label4:
return;
}
public void cleanRequestHttpDatas(io.netty.handler.codec.http.HttpRequest)
{
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
io.netty.handler.codec.http.HttpRequest v1;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
v1 := @parameter0: io.netty.handler.codec.http.HttpRequest;
virtualinvoke v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: void cleanRequestHttpData(io.netty.handler.codec.http.HttpRequest)>(v1);
return;
}
public void cleanAllHttpDatas()
{
io.netty.handler.codec.http.multipart.DefaultHttpDataFactory v0;
v0 := @this: io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
virtualinvoke v0.<io.netty.handler.codec.http.multipart.DefaultHttpDataFactory: void cleanAllHttpData()>();
return;
}
}