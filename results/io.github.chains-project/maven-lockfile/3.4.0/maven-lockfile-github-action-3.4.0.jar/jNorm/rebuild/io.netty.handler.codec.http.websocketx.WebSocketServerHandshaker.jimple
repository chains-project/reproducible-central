public abstract class io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker extends java.lang.Object
{
protected static final io.netty.util.internal.logging.InternalLogger logger;
private final java.lang.String uri;
private final java.lang.String[] subprotocols;
private final io.netty.handler.codec.http.websocketx.WebSocketVersion version;
private final io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig decoderConfig;
private java.lang.String selectedSubprotocol;
public static final java.lang.String SUB_PROTOCOL_WILDCARD;
protected void <init>(io.netty.handler.codec.http.websocketx.WebSocketVersion, java.lang.String, java.lang.String, int)
{
io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig v7;
io.netty.handler.codec.http.websocketx.WebSocketVersion v1;
io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig$Builder v5, v6;
int v4;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v0;
java.lang.String v2, v3;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v1 := @parameter0: io.netty.handler.codec.http.websocketx.WebSocketVersion;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: int;
v5 = staticinvoke <io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig: io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig$Builder newBuilder()>();
v6 = virtualinvoke v5.<io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig$Builder: io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig$Builder maxFramePayloadLength(int)>(v4);
v7 = virtualinvoke v6.<io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig$Builder: io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig build()>();
specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: void <init>(io.netty.handler.codec.http.websocketx.WebSocketVersion,java.lang.String,java.lang.String,io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig)>(v1, v2, v3, v7);
return;
}
protected void <init>(io.netty.handler.codec.http.websocketx.WebSocketVersion, java.lang.String, java.lang.String, io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig)
{
io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig v4;
java.lang.String[] v10, v5;
io.netty.handler.codec.http.websocketx.WebSocketVersion v1;
int v6, v7;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v0;
java.lang.Object v11;
java.lang.String v2, v3, v8, v9;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v1 := @parameter0: io.netty.handler.codec.http.websocketx.WebSocketVersion;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.handler.codec.http.websocketx.WebSocketVersion version> = v1;
v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: java.lang.String uri> = v2;
if v3 == null goto label3;
v5 = virtualinvoke v3.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");
v6 = 0;
label1:
v7 = lengthof v5;
if v6 >= v7 goto label2;
v8 = v5[v6];
v9 = virtualinvoke v8.<java.lang.String: java.lang.String trim()>();
v5[v6] = v9;
v6 = v6 + 1;
goto label1;
label2:
v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: java.lang.String[] subprotocols> = v5;
goto label4;
label3:
v10 = <io.netty.util.internal.EmptyArrays: java.lang.String[] EMPTY_STRINGS>;
v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: java.lang.String[] subprotocols> = v10;
label4:
v11 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v4, "decoderConfig");
v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig decoderConfig> = v11;
return;
}
public java.lang.String uri()
{
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v0;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v1 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: java.lang.String uri>;
return v1;
}
public java.util.Set subprotocols()
{
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v0;
java.lang.String[] v2;
java.util.LinkedHashSet v1;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v1 = new java.util.LinkedHashSet;
specialinvoke v1.<java.util.LinkedHashSet: void <init>()>();
v2 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: java.lang.String[] subprotocols>;
staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(v1, v2);
return v1;
}
public io.netty.handler.codec.http.websocketx.WebSocketVersion version()
{
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v0;
io.netty.handler.codec.http.websocketx.WebSocketVersion v1;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v1 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.handler.codec.http.websocketx.WebSocketVersion version>;
return v1;
}
public int maxFramePayloadLength()
{
int v2;
io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig v1;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v1 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig decoderConfig>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig: int maxFramePayloadLength()>();
return v2;
}
public io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig decoderConfig()
{
io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig v1;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v1 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig decoderConfig>;
return v1;
}
public io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel, io.netty.handler.codec.http.FullHttpRequest)
{
io.netty.channel.Channel v1;
io.netty.channel.ChannelPromise v3;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v0;
io.netty.handler.codec.http.FullHttpRequest v2;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.handler.codec.http.FullHttpRequest;
v3 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPromise newPromise()>();
v4 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)>(v1, v2, null, v3);
return v4;
}
public final io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel, io.netty.handler.codec.http.FullHttpRequest, io.netty.handler.codec.http.HttpHeaders, io.netty.channel.ChannelPromise)
{
java.lang.IllegalStateException v15;
io.netty.handler.codec.http.HttpHeaders v3;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$1 v26;
io.netty.channel.ChannelHandlerContext v13, v14, v23;
io.netty.handler.codec.http.websocketx.WebSocketVersion v8;
io.netty.channel.ChannelPromise v4;
io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder v19, v22;
java.lang.String v16, v18, v20, v21;
boolean v6;
io.netty.channel.ChannelPipeline v10;
io.netty.handler.codec.http.FullHttpRequest v2;
io.netty.channel.ChannelFuture v25;
io.netty.channel.Channel v1;
io.netty.handler.codec.http.FullHttpResponse v9;
io.netty.util.internal.logging.InternalLogger v5, v7;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v0;
io.netty.channel.ChannelHandler v11, v12;
io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder v17, v24;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.handler.codec.http.FullHttpRequest;
v3 := @parameter2: io.netty.handler.codec.http.HttpHeaders;
v4 := @parameter3: io.netty.channel.ChannelPromise;
v5 = <io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.util.internal.logging.InternalLogger logger>;
v6 = interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v6 == 0 goto label1;
v7 = <io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.util.internal.logging.InternalLogger logger>;
v8 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.handler.codec.http.websocketx.WebSocketVersion version()>();
interfaceinvoke v7.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("{} WebSocket version {} server handshake", v1, v8);
label1:
v9 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)>(v2, v3);
v10 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v11 = interfaceinvoke v10.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandler get(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpObjectAggregator;");
if v11 == null goto label2;
interfaceinvoke v10.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandler remove(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpObjectAggregator;");
label2:
v12 = interfaceinvoke v10.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandler get(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpContentCompressor;");
if v12 == null goto label3;
interfaceinvoke v10.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandler remove(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpContentCompressor;");
label3:
v13 = interfaceinvoke v10.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpRequestDecoder;");
if v13 != null goto label5;
v14 = interfaceinvoke v10.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpServerCodec;");
if v14 != null goto label4;
v15 = new java.lang.IllegalStateException;
specialinvoke v15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No HttpDecoder and no HttpServerCodec in the pipeline");
interfaceinvoke v4.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v15);
interfaceinvoke v9.<io.netty.handler.codec.http.FullHttpResponse: boolean release()>();
return v4;
label4:
v16 = interfaceinvoke v14.<io.netty.channel.ChannelHandlerContext: java.lang.String name()>();
v17 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()>();
interfaceinvoke v10.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addBefore(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)>(v16, "wsencoder", v17);
v18 = interfaceinvoke v14.<io.netty.channel.ChannelHandlerContext: java.lang.String name()>();
v19 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()>();
interfaceinvoke v10.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addBefore(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)>(v18, "wsdecoder", v19);
v20 = interfaceinvoke v14.<io.netty.channel.ChannelHandlerContext: java.lang.String name()>();
goto label6;
label5:
v21 = interfaceinvoke v13.<io.netty.channel.ChannelHandlerContext: java.lang.String name()>();
v22 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()>();
interfaceinvoke v10.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandler replace(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)>(v21, "wsdecoder", v22);
v23 = interfaceinvoke v10.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpResponseEncoder;");
v20 = interfaceinvoke v23.<io.netty.channel.ChannelHandlerContext: java.lang.String name()>();
v24 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()>();
interfaceinvoke v10.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addBefore(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)>(v20, "wsencoder", v24);
label6:
v25 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)>(v9);
v26 = new io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$1;
specialinvoke v26.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$1: void <init>(io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker,java.lang.String,io.netty.channel.ChannelPromise)>(v0, v20, v4);
interfaceinvoke v25.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v26);
return v4;
}
public io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel, io.netty.handler.codec.http.HttpRequest)
{
io.netty.channel.Channel v1;
io.netty.handler.codec.http.HttpRequest v2;
io.netty.channel.ChannelPromise v3;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v0;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.handler.codec.http.HttpRequest;
v3 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPromise newPromise()>();
v4 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)>(v1, v2, null, v3);
return v4;
}
public final io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel, io.netty.handler.codec.http.HttpRequest, io.netty.handler.codec.http.HttpHeaders, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v23;
java.lang.IllegalStateException v13;
io.netty.handler.codec.http.HttpHeaders v3;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2 v21;
io.netty.channel.ChannelHandlerContext v12;
io.netty.handler.codec.http.websocketx.WebSocketVersion v10, v17, v18;
io.netty.channel.ChannelPromise v4;
java.lang.String v14, v19;
boolean v15, v16, v5, v8;
io.netty.handler.codec.http.HttpRequest v2;
io.netty.channel.ChannelPipeline v11;
io.netty.channel.ChannelFuture v6;
io.netty.channel.Channel v1;
io.netty.util.internal.logging.InternalLogger v7, v9;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v0;
java.lang.Object v22;
io.netty.handler.codec.http.HttpObjectAggregator v20;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.handler.codec.http.HttpRequest;
v3 := @parameter2: io.netty.handler.codec.http.HttpHeaders;
v4 := @parameter3: io.netty.channel.ChannelPromise;
v5 = v2 instanceof io.netty.handler.codec.http.FullHttpRequest;
if v5 == 0 goto label1;
v6 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)>(v1, v2, v3, v4);
return v6;
label1:
v7 = <io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.util.internal.logging.InternalLogger logger>;
v8 = interfaceinvoke v7.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v8 == 0 goto label2;
v9 = <io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.util.internal.logging.InternalLogger logger>;
v10 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.handler.codec.http.websocketx.WebSocketVersion version()>();
interfaceinvoke v9.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("{} WebSocket version {} server handshake", v1, v10);
label2:
v11 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v12 = interfaceinvoke v11.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpRequestDecoder;");
if v12 != null goto label3;
v12 = interfaceinvoke v11.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpServerCodec;");
if v12 != null goto label3;
v13 = new java.lang.IllegalStateException;
specialinvoke v13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No HttpDecoder and no HttpServerCodec in the pipeline");
interfaceinvoke v4.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v13);
return v4;
label3:
v14 = interfaceinvoke v12.<io.netty.channel.ChannelHandlerContext: java.lang.String name()>();
v15 = staticinvoke <io.netty.handler.codec.http.HttpUtil: boolean isContentLengthSet(io.netty.handler.codec.http.HttpMessage)>(v2);
if v15 != 0 goto label4;
v16 = staticinvoke <io.netty.handler.codec.http.HttpUtil: boolean isTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage)>(v2);
if v16 != 0 goto label4;
v17 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.handler.codec.http.websocketx.WebSocketVersion version>;
v18 = <io.netty.handler.codec.http.websocketx.WebSocketVersion: io.netty.handler.codec.http.websocketx.WebSocketVersion V00>;
if v17 != v18 goto label5;
label4:
v14 = "httpAggregator";
v19 = interfaceinvoke v12.<io.netty.channel.ChannelHandlerContext: java.lang.String name()>();
v20 = new io.netty.handler.codec.http.HttpObjectAggregator;
specialinvoke v20.<io.netty.handler.codec.http.HttpObjectAggregator: void <init>(int)>(8192);
interfaceinvoke v11.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addAfter(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)>(v19, "httpAggregator", v20);
label5:
v21 = new io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2;
specialinvoke v21.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: void <init>(io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker,io.netty.channel.ChannelPromise,io.netty.channel.Channel,io.netty.handler.codec.http.HttpHeaders)>(v0, v4, v1, v3);
interfaceinvoke v11.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addAfter(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)>(v14, "handshaker", v21);
label6:
v22 = staticinvoke <io.netty.util.ReferenceCountUtil: java.lang.Object retain(java.lang.Object)>(v2);
interfaceinvoke v12.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>(v22);
label7:
goto label9;
label8:
v23 := @caughtexception;
interfaceinvoke v4.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v23);
label9:
return v4;
catch java.lang.Throwable from label6 to label7 with label8;
}
protected abstract io.netty.handler.codec.http.FullHttpResponse newHandshakeResponse(io.netty.handler.codec.http.FullHttpRequest, io.netty.handler.codec.http.HttpHeaders);
public io.netty.channel.ChannelFuture close(io.netty.channel.Channel, io.netty.handler.codec.http.websocketx.CloseWebSocketFrame)
{
io.netty.channel.Channel v1;
io.netty.channel.ChannelPromise v3;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v0;
io.netty.handler.codec.http.websocketx.CloseWebSocketFrame v2;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "channel");
v3 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPromise newPromise()>();
v4 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.channel.ChannelFuture close(io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame,io.netty.channel.ChannelPromise)>(v1, v2, v3);
return v4;
}
public io.netty.channel.ChannelFuture close(io.netty.channel.Channel, io.netty.handler.codec.http.websocketx.CloseWebSocketFrame, io.netty.channel.ChannelPromise)
{
io.netty.channel.Channel v1;
io.netty.channel.ChannelPromise v3;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v0;
io.netty.handler.codec.http.websocketx.CloseWebSocketFrame v2;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.channel.ChannelFuture close0(io.netty.channel.ChannelOutboundInvoker,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame,io.netty.channel.ChannelPromise)>(v1, v2, v3);
return v4;
}
public io.netty.channel.ChannelFuture close(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.websocketx.CloseWebSocketFrame)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v3;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v0;
io.netty.handler.codec.http.websocketx.CloseWebSocketFrame v2;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "ctx");
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
v4 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.channel.ChannelFuture close(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame,io.netty.channel.ChannelPromise)>(v1, v2, v3);
return v4;
}
public io.netty.channel.ChannelFuture close(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.websocketx.CloseWebSocketFrame, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v3;
io.netty.channel.ChannelFutureListener v5;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v0;
io.netty.handler.codec.http.websocketx.CloseWebSocketFrame v2;
io.netty.channel.ChannelFuture v4, v6;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
v3 := @parameter2: io.netty.channel.ChannelPromise;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "ctx");
v4 = specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.channel.ChannelFuture close0(io.netty.channel.ChannelOutboundInvoker,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame,io.netty.channel.ChannelPromise)>(v1, v2, v3);
v5 = <io.netty.channel.ChannelFutureListener: io.netty.channel.ChannelFutureListener CLOSE>;
v6 = interfaceinvoke v4.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v5);
return v6;
}
private io.netty.channel.ChannelFuture close0(io.netty.channel.ChannelOutboundInvoker, io.netty.handler.codec.http.websocketx.CloseWebSocketFrame, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v3;
io.netty.channel.ChannelFutureListener v5;
io.netty.channel.ChannelOutboundInvoker v1;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v0;
io.netty.handler.codec.http.websocketx.CloseWebSocketFrame v2;
io.netty.channel.ChannelFuture v4, v6;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v1 := @parameter0: io.netty.channel.ChannelOutboundInvoker;
v2 := @parameter1: io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = interfaceinvoke v1.<io.netty.channel.ChannelOutboundInvoker: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)>(v2, v3);
v5 = <io.netty.channel.ChannelFutureListener: io.netty.channel.ChannelFutureListener CLOSE>;
v6 = interfaceinvoke v4.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v5);
return v6;
}
protected java.lang.String selectSubprotocol(java.lang.String)
{
java.lang.String[] v2, v4, v9;
int v10, v11, v3, v5, v6;
java.lang.String v1, v12, v13, v7, v8;
boolean v14, v15;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v1 := @parameter0: java.lang.String;
if v1 == null goto label1;
v2 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: java.lang.String[] subprotocols>;
v3 = lengthof v2;
if v3 != 0 goto label2;
label1:
return null;
label2:
v4 = virtualinvoke v1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");
v5 = lengthof v4;
v6 = 0;
label3:
if v6 >= v5 goto label8;
v7 = v4[v6];
v8 = virtualinvoke v7.<java.lang.String: java.lang.String trim()>();
v9 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: java.lang.String[] subprotocols>;
v10 = lengthof v9;
v11 = 0;
label4:
if v11 >= v10 goto label7;
v12 = v9[v11];
v13 = "*";
v14 = virtualinvoke v13.<java.lang.String: boolean equals(java.lang.Object)>(v12);
if v14 != 0 goto label5;
v15 = virtualinvoke v8.<java.lang.String: boolean equals(java.lang.Object)>(v12);
if v15 == 0 goto label6;
label5:
v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: java.lang.String selectedSubprotocol> = v8;
return v8;
label6:
v11 = v11 + 1;
goto label4;
label7:
v6 = v6 + 1;
goto label3;
label8:
return null;
}
public java.lang.String selectedSubprotocol()
{
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v0;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v1 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: java.lang.String selectedSubprotocol>;
return v1;
}
protected abstract io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder();
protected abstract io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder();
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/handler/codec/http/websocketx/WebSocketServerHandshaker;");
<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}