public class io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder extends java.lang.Object implements io.netty.handler.codec.http2.Http2ConnectionEncoder, io.netty.handler.codec.http2.Http2SettingsReceivedConsumer
{
private final io.netty.handler.codec.http2.Http2FrameWriter frameWriter;
private final io.netty.handler.codec.http2.Http2Connection connection;
private io.netty.handler.codec.http2.Http2LifecycleManager lifecycleManager;
private final java.util.Queue outstandingLocalSettingsQueue;
private java.util.Queue outstandingRemoteSettingsQueue;
public void <init>(io.netty.handler.codec.http2.Http2Connection, io.netty.handler.codec.http2.Http2FrameWriter)
{
io.netty.handler.codec.http2.Http2Connection$Endpoint v6, v8;
io.netty.handler.codec.http2.Http2FrameWriter v2;
io.netty.handler.codec.http2.Http2FlowController v7;
io.netty.handler.codec.http2.Http2Connection v1;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
java.lang.Object v4, v5;
java.util.ArrayDeque v3;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v9;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Connection;
v2 := @parameter1: io.netty.handler.codec.http2.Http2FrameWriter;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.ArrayDeque;
specialinvoke v3.<java.util.ArrayDeque: void <init>(int)>(4);
v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: java.util.Queue outstandingLocalSettingsQueue> = v3;
v4 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "connection");
v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection> = v4;
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "frameWriter");
v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2FrameWriter frameWriter> = v5;
v6 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Connection$Endpoint remote()>();
v7 = interfaceinvoke v6.<io.netty.handler.codec.http2.Http2Connection$Endpoint: io.netty.handler.codec.http2.Http2FlowController flowController()>();
if v7 != null goto label1;
v8 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Connection$Endpoint remote()>();
v9 = new io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
specialinvoke v9.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: void <init>(io.netty.handler.codec.http2.Http2Connection)>(v1);
interfaceinvoke v8.<io.netty.handler.codec.http2.Http2Connection$Endpoint: void flowController(io.netty.handler.codec.http2.Http2FlowController)>(v9);
label1:
return;
}
public void lifecycleManager(io.netty.handler.codec.http2.Http2LifecycleManager)
{
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
io.netty.handler.codec.http2.Http2LifecycleManager v1;
java.lang.Object v2;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.handler.codec.http2.Http2LifecycleManager;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "lifecycleManager");
v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2LifecycleManager lifecycleManager> = v2;
return;
}
public io.netty.handler.codec.http2.Http2FrameWriter frameWriter()
{
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
io.netty.handler.codec.http2.Http2FrameWriter v1;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2FrameWriter frameWriter>;
return v1;
}
public io.netty.handler.codec.http2.Http2Connection connection()
{
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
io.netty.handler.codec.http2.Http2Connection v1;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection>;
return v1;
}
public final io.netty.handler.codec.http2.Http2RemoteFlowController flowController()
{
io.netty.handler.codec.http2.Http2Connection$Endpoint v2;
io.netty.handler.codec.http2.Http2Connection v1;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
io.netty.handler.codec.http2.Http2FlowController v3;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection()>();
v2 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Connection$Endpoint remote()>();
v3 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Connection$Endpoint: io.netty.handler.codec.http2.Http2FlowController flowController()>();
return v3;
}
public void remoteSettings(io.netty.handler.codec.http2.Http2Settings) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v10;
io.netty.handler.codec.http2.Http2FrameSizePolicy v5;
long v18, v19, v21, v23;
java.lang.Integer v24, v26;
java.lang.Long v15, v20, v22;
io.netty.handler.codec.http2.Http2Exception v11;
int v25, v28, v29;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
java.lang.Boolean v2;
boolean v14, v7, v8;
io.netty.handler.codec.http2.Http2FrameWriter$Configuration v3;
io.netty.handler.codec.http2.Http2Connection$Endpoint v13, v17;
io.netty.handler.codec.http2.Http2Settings v1;
io.netty.handler.codec.http2.Http2Connection v12, v16, v6;
io.netty.handler.codec.http2.Http2HeadersEncoder$Configuration v4;
io.netty.handler.codec.http2.Http2Error v9;
io.netty.handler.codec.http2.Http2RemoteFlowController v27;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Settings;
v2 = virtualinvoke v1.<io.netty.handler.codec.http2.Http2Settings: java.lang.Boolean pushEnabled()>();
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2FrameWriter$Configuration configuration()>();
v4 = interfaceinvoke v3.<io.netty.handler.codec.http2.Http2FrameWriter$Configuration: io.netty.handler.codec.http2.Http2HeadersEncoder$Configuration headersConfiguration()>();
v5 = interfaceinvoke v3.<io.netty.handler.codec.http2.Http2FrameWriter$Configuration: io.netty.handler.codec.http2.Http2FrameSizePolicy frameSizePolicy()>();
if v2 == null goto label2;
v6 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection>;
v7 = interfaceinvoke v6.<io.netty.handler.codec.http2.Http2Connection: boolean isServer()>();
if v7 != 0 goto label1;
v8 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
if v8 == 0 goto label1;
v9 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v10 = newarray (java.lang.Object)[0];
v11 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v9, "Client received a value of ENABLE_PUSH specified to other than 0", v10);
throw v11;
label1:
v12 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection>;
v13 = interfaceinvoke v12.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Connection$Endpoint remote()>();
v14 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
interfaceinvoke v13.<io.netty.handler.codec.http2.Http2Connection$Endpoint: void allowPushTo(boolean)>(v14);
label2:
v15 = virtualinvoke v1.<io.netty.handler.codec.http2.Http2Settings: java.lang.Long maxConcurrentStreams()>();
if v15 == null goto label3;
v16 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection>;
v17 = interfaceinvoke v16.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Connection$Endpoint local()>();
v18 = virtualinvoke v15.<java.lang.Long: long longValue()>();
v19 = staticinvoke <java.lang.Math: long min(long,long)>(v18, 2147483647L);
interfaceinvoke v17.<io.netty.handler.codec.http2.Http2Connection$Endpoint: void maxActiveStreams(int)>(v19);
label3:
v20 = virtualinvoke v1.<io.netty.handler.codec.http2.Http2Settings: java.lang.Long headerTableSize()>();
if v20 == null goto label4;
v21 = virtualinvoke v20.<java.lang.Long: long longValue()>();
staticinvoke <java.lang.Math: long min(long,long)>(v21, 2147483647L);
interfaceinvoke v4.<io.netty.handler.codec.http2.Http2HeadersEncoder$Configuration: void maxHeaderTableSize(long)>(v29);
label4:
v22 = virtualinvoke v1.<io.netty.handler.codec.http2.Http2Settings: java.lang.Long maxHeaderListSize()>();
if v22 == null goto label5;
v23 = virtualinvoke v22.<java.lang.Long: long longValue()>();
interfaceinvoke v4.<io.netty.handler.codec.http2.Http2HeadersEncoder$Configuration: void maxHeaderListSize(long)>(v23);
label5:
v24 = virtualinvoke v1.<io.netty.handler.codec.http2.Http2Settings: java.lang.Integer maxFrameSize()>();
if v24 == null goto label6;
v25 = virtualinvoke v24.<java.lang.Integer: int intValue()>();
interfaceinvoke v5.<io.netty.handler.codec.http2.Http2FrameSizePolicy: void maxFrameSize(int)>(v25);
label6:
v26 = virtualinvoke v1.<io.netty.handler.codec.http2.Http2Settings: java.lang.Integer initialWindowSize()>();
if v26 == null goto label7;
v27 = virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2RemoteFlowController flowController()>();
v28 = virtualinvoke v26.<java.lang.Integer: int intValue()>();
interfaceinvoke v27.<io.netty.handler.codec.http2.Http2RemoteFlowController: void initialWindowSize(int)>(v28);
label7:
return;
}
public io.netty.channel.ChannelFuture writeData(io.netty.channel.ChannelHandlerContext, int, io.netty.buffer.ByteBuf, int, boolean, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v17;
java.lang.IllegalStateException v13;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledData v20;
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v3;
io.netty.channel.ChannelPromise v18, v6, v7;
int[] v9;
int v11, v12, v14, v2, v4;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
io.netty.handler.codec.http2.Http2Stream v8;
java.lang.String v16;
boolean v5;
io.netty.handler.codec.http2.Http2Stream$State v10, v15;
io.netty.handler.codec.http2.Http2RemoteFlowController v19;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.buffer.ByteBuf;
v4 := @parameter3: int;
v5 := @parameter4: boolean;
v6 := @parameter5: io.netty.channel.ChannelPromise;
v7 = interfaceinvoke v6.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise unvoid()>();
label1:
v8 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Stream requireStream(int)>(v2);
v9 = <io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$2: int[] $SwitchMap$io$netty$handler$codec$http2$Http2Stream$State>;
v10 = interfaceinvoke v8.<io.netty.handler.codec.http2.Http2Stream: io.netty.handler.codec.http2.Http2Stream$State state()>();
v11 = virtualinvoke v10.<io.netty.handler.codec.http2.Http2Stream$State: int ordinal()>();
v12 = v9[v11];
lookupswitch(v12)
{
case 1: goto label4;
case 2: goto label4;
default: goto label2;
};
label2:
v13 = new java.lang.IllegalStateException;
v14 = interfaceinvoke v8.<io.netty.handler.codec.http2.Http2Stream: int id()>();
v15 = interfaceinvoke v8.<io.netty.handler.codec.http2.Http2Stream: io.netty.handler.codec.http2.Http2Stream$State state()>();
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,io.netty.handler.codec.http2.Http2Stream$State)>(v14, v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Stream \u0001 in unexpected state \u0001");
specialinvoke v13.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v16);
throw v13;
label3:
v17 := @caughtexception;
virtualinvoke v3.<io.netty.buffer.ByteBuf: boolean release()>();
v18 = interfaceinvoke v7.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v17);
return v18;
label4:
v19 = virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2RemoteFlowController flowController()>();
v20 = new io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledData;
specialinvoke v20.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledData: void <init>(io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder,io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,int,boolean,io.netty.channel.ChannelPromise)>(v0, v8, v3, v4, v5, v7);
interfaceinvoke v19.<io.netty.handler.codec.http2.Http2RemoteFlowController: void addFlowControlled(io.netty.handler.codec.http2.Http2Stream,io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled)>(v8, v20);
return v7;
catch java.lang.Throwable from label1 to label3 with label3;
}
public io.netty.channel.ChannelFuture writeHeaders(io.netty.channel.ChannelHandlerContext, int, io.netty.handler.codec.http2.Http2Headers, int, boolean, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelFuture v7;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v6;
io.netty.handler.codec.http2.Http2Headers v3;
int v2, v4;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
boolean v5;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.handler.codec.http2.Http2Headers;
v4 := @parameter3: int;
v5 := @parameter4: boolean;
v6 := @parameter5: io.netty.channel.ChannelPromise;
v7 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.channel.ChannelFuture writeHeaders0(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,boolean,int,short,boolean,int,boolean,io.netty.channel.ChannelPromise)>(v1, v2, v3, 0, 0, 0, 0, v4, v5, v6);
return v7;
}
private static boolean validateHeadersSentState(io.netty.handler.codec.http2.Http2Stream, io.netty.handler.codec.http2.Http2Headers, boolean, boolean)
{
java.lang.IllegalStateException v11;
java.lang.CharSequence v4;
io.netty.handler.codec.http.HttpStatusClass v5, v6;
io.netty.handler.codec.http2.Http2Headers v1;
int v12;
io.netty.handler.codec.http2.Http2Stream v0;
java.lang.String v13;
boolean v10, v2, v3, v7, v8, v9;
v0 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v1 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
v2 := @parameter2: boolean;
v3 := @parameter3: boolean;
if v2 == 0 goto label1;
v4 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: java.lang.CharSequence status()>();
v5 = staticinvoke <io.netty.handler.codec.http.HttpStatusClass: io.netty.handler.codec.http.HttpStatusClass valueOf(java.lang.CharSequence)>(v4);
v6 = <io.netty.handler.codec.http.HttpStatusClass: io.netty.handler.codec.http.HttpStatusClass INFORMATIONAL>;
if v5 != v6 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
v8 = v7;
if v7 != 0 goto label3;
if v3 != 0 goto label4;
label3:
v9 = interfaceinvoke v0.<io.netty.handler.codec.http2.Http2Stream: boolean isHeadersSent()>();
if v9 != 0 goto label5;
label4:
v10 = interfaceinvoke v0.<io.netty.handler.codec.http2.Http2Stream: boolean isTrailersSent()>();
if v10 == 0 goto label6;
label5:
v11 = new java.lang.IllegalStateException;
v12 = interfaceinvoke v0.<io.netty.handler.codec.http2.Http2Stream: int id()>();
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,boolean)>(v12, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Stream \u0001 sent too many headers EOS: \u0001");
specialinvoke v11.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v13);
throw v11;
label6:
return v8;
}
public io.netty.channel.ChannelFuture writeHeaders(io.netty.channel.ChannelHandlerContext, int, io.netty.handler.codec.http2.Http2Headers, int, short, boolean, int, boolean, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelFuture v10;
io.netty.channel.ChannelHandlerContext v1;
short v5;
io.netty.channel.ChannelPromise v9;
io.netty.handler.codec.http2.Http2Headers v3;
int v2, v4, v7;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
boolean v6, v8;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.handler.codec.http2.Http2Headers;
v4 := @parameter3: int;
v5 := @parameter4: short;
v6 := @parameter5: boolean;
v7 := @parameter6: int;
v8 := @parameter7: boolean;
v9 := @parameter8: io.netty.channel.ChannelPromise;
v10 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.channel.ChannelFuture writeHeaders0(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,boolean,int,short,boolean,int,boolean,io.netty.channel.ChannelPromise)>(v1, v2, v3, 1, v4, v5, v6, v7, v8, v9);
return v10;
}
private static io.netty.channel.ChannelFuture sendHeaders(io.netty.handler.codec.http2.Http2FrameWriter, io.netty.channel.ChannelHandlerContext, int, io.netty.handler.codec.http2.Http2Headers, boolean, int, short, boolean, int, boolean, io.netty.channel.ChannelPromise)
{
io.netty.handler.codec.http2.Http2FrameWriter v0;
io.netty.channel.ChannelFuture v11, v12;
io.netty.channel.ChannelHandlerContext v1;
short v6;
io.netty.channel.ChannelPromise v10;
io.netty.handler.codec.http2.Http2Headers v3;
int v2, v5, v8;
boolean v4, v7, v9;
v0 := @parameter0: io.netty.handler.codec.http2.Http2FrameWriter;
v1 := @parameter1: io.netty.channel.ChannelHandlerContext;
v2 := @parameter2: int;
v3 := @parameter3: io.netty.handler.codec.http2.Http2Headers;
v4 := @parameter4: boolean;
v5 := @parameter5: int;
v6 := @parameter6: short;
v7 := @parameter7: boolean;
v8 := @parameter8: int;
v9 := @parameter9: boolean;
v10 := @parameter10: io.netty.channel.ChannelPromise;
if v4 == 0 goto label1;
v11 = interfaceinvoke v0.<io.netty.handler.codec.http2.Http2FrameWriter: io.netty.channel.ChannelFuture writeHeaders(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,short,boolean,int,boolean,io.netty.channel.ChannelPromise)>(v1, v2, v3, v5, v6, v7, v8, v9, v10);
return v11;
label1:
v12 = interfaceinvoke v0.<io.netty.handler.codec.http2.Http2FrameWriter: io.netty.channel.ChannelFuture writeHeaders(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,boolean,io.netty.channel.ChannelPromise)>(v1, v2, v3, v8, v9, v10);
return v12;
}
private io.netty.channel.ChannelFuture writeHeaders0(io.netty.channel.ChannelHandlerContext, int, io.netty.handler.codec.http2.Http2Headers, boolean, int, short, boolean, int, boolean, io.netty.channel.ChannelPromise)
{
java.lang.IllegalStateException v19, v25;
io.netty.channel.ChannelPromise v10;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders v40;
int[] v21;
io.netty.handler.codec.http2.Http2Exception v15;
boolean v18, v30, v32, v33, v37, v4, v7, v9;
io.netty.handler.codec.http2.Http2Connection$Endpoint v14, v17;
io.netty.handler.codec.http2.Http2LifecycleManager v38, v39, v42;
io.netty.handler.codec.http2.Http2Stream$State v22, v27;
io.netty.handler.codec.http2.Http2Headers v3;
java.lang.Throwable v36, v41;
io.netty.channel.ChannelHandlerContext v1;
short v6;
int v2, v23, v24, v26, v5, v8;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
io.netty.handler.codec.http2.Http2Stream v12;
java.lang.String v20, v28;
io.netty.handler.codec.http2.Http2FrameWriter v34;
io.netty.channel.ChannelFuture v35;
io.netty.handler.codec.http2.Http2Connection v11, v13, v16, v31;
io.netty.handler.codec.http2.Http2RemoteFlowController v29;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.handler.codec.http2.Http2Headers;
v4 := @parameter3: boolean;
v5 := @parameter4: int;
v6 := @parameter5: short;
v7 := @parameter6: boolean;
v8 := @parameter7: int;
v9 := @parameter8: boolean;
v10 := @parameter9: io.netty.channel.ChannelPromise;
label01:
v11 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection>;
v12 = interfaceinvoke v11.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Stream stream(int)>(v2);
if v12 != null goto label07;
label02:
v13 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection>;
v14 = interfaceinvoke v13.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Connection$Endpoint local()>();
v12 = interfaceinvoke v14.<io.netty.handler.codec.http2.Http2Connection$Endpoint: io.netty.handler.codec.http2.Http2Stream createStream(int,boolean)>(v2, 0);
label03:
goto label10;
label04:
v15 := @caughtexception;
v16 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection>;
v17 = interfaceinvoke v16.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Connection$Endpoint remote()>();
v18 = interfaceinvoke v17.<io.netty.handler.codec.http2.Http2Connection$Endpoint: boolean mayHaveCreatedStream(int)>(v2);
if v18 == 0 goto label06;
v19 = new java.lang.IllegalStateException;
v20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Stream no longer exists: \u0001");
specialinvoke v19.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>(v20, v15);
interfaceinvoke v10.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v19);
label05:
return v10;
label06:
throw v15;
label07:
v21 = <io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$2: int[] $SwitchMap$io$netty$handler$codec$http2$Http2Stream$State>;
v22 = interfaceinvoke v12.<io.netty.handler.codec.http2.Http2Stream: io.netty.handler.codec.http2.Http2Stream$State state()>();
v23 = virtualinvoke v22.<io.netty.handler.codec.http2.Http2Stream$State: int ordinal()>();
v24 = v21[v23];
tableswitch(v24)
{
case 1: goto label10;
case 2: goto label10;
case 3: goto label08;
default: goto label09;
};
label08:
interfaceinvoke v12.<io.netty.handler.codec.http2.Http2Stream: io.netty.handler.codec.http2.Http2Stream open(boolean)>(v9);
goto label10;
label09:
v25 = new java.lang.IllegalStateException;
v26 = interfaceinvoke v12.<io.netty.handler.codec.http2.Http2Stream: int id()>();
v27 = interfaceinvoke v12.<io.netty.handler.codec.http2.Http2Stream: io.netty.handler.codec.http2.Http2Stream$State state()>();
v28 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,io.netty.handler.codec.http2.Http2Stream$State)>(v26, v27) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Stream \u0001 in unexpected state \u0001");
specialinvoke v25.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v28);
throw v25;
label10:
v29 = virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2RemoteFlowController flowController()>();
if v9 == 0 goto label11;
v30 = interfaceinvoke v29.<io.netty.handler.codec.http2.Http2RemoteFlowController: boolean hasFlowControlled(io.netty.handler.codec.http2.Http2Stream)>(v12);
if v30 != 0 goto label15;
label11:
v10 = interfaceinvoke v10.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise unvoid()>();
v31 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection>;
v32 = interfaceinvoke v31.<io.netty.handler.codec.http2.Http2Connection: boolean isServer()>();
v33 = staticinvoke <io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: boolean validateHeadersSentState(io.netty.handler.codec.http2.Http2Stream,io.netty.handler.codec.http2.Http2Headers,boolean,boolean)>(v12, v3, v32, v9);
v34 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2FrameWriter frameWriter>;
v35 = staticinvoke <io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.channel.ChannelFuture sendHeaders(io.netty.handler.codec.http2.Http2FrameWriter,io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,boolean,int,short,boolean,int,boolean,io.netty.channel.ChannelPromise)>(v34, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
v36 = interfaceinvoke v35.<io.netty.channel.ChannelFuture: java.lang.Throwable cause()>();
if v36 != null goto label12;
interfaceinvoke v12.<io.netty.handler.codec.http2.Http2Stream: io.netty.handler.codec.http2.Http2Stream headersSent(boolean)>(v33);
v37 = interfaceinvoke v35.<io.netty.channel.ChannelFuture: boolean isSuccess()>();
if v37 != 0 goto label13;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: void notifyLifecycleManagerOnError(io.netty.channel.ChannelFuture,io.netty.channel.ChannelHandlerContext)>(v35, v1);
goto label13;
label12:
v38 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2LifecycleManager lifecycleManager>;
interfaceinvoke v38.<io.netty.handler.codec.http2.Http2LifecycleManager: void onError(io.netty.channel.ChannelHandlerContext,boolean,java.lang.Throwable)>(v1, 1, v36);
label13:
if v9 == 0 goto label14;
v39 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2LifecycleManager lifecycleManager>;
interfaceinvoke v39.<io.netty.handler.codec.http2.Http2LifecycleManager: void closeStreamLocal(io.netty.handler.codec.http2.Http2Stream,io.netty.channel.ChannelFuture)>(v12, v35);
label14:
return v35;
label15:
v40 = new io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders;
specialinvoke v40.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders: void <init>(io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder,io.netty.handler.codec.http2.Http2Stream,io.netty.handler.codec.http2.Http2Headers,boolean,int,short,boolean,int,boolean,io.netty.channel.ChannelPromise)>(v0, v12, v3, v4, v5, v6, v7, v8, 1, v10);
interfaceinvoke v29.<io.netty.handler.codec.http2.Http2RemoteFlowController: void addFlowControlled(io.netty.handler.codec.http2.Http2Stream,io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled)>(v12, v40);
label16:
return v10;
label17:
v41 := @caughtexception;
v42 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2LifecycleManager lifecycleManager>;
interfaceinvoke v42.<io.netty.handler.codec.http2.Http2LifecycleManager: void onError(io.netty.channel.ChannelHandlerContext,boolean,java.lang.Throwable)>(v1, 1, v41);
interfaceinvoke v10.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v41);
return v10;
catch io.netty.handler.codec.http2.Http2Exception from label02 to label03 with label04;
catch java.lang.Throwable from label01 to label05 with label17;
catch java.lang.Throwable from label06 to label14 with label17;
catch java.lang.Throwable from label15 to label16 with label17;
}
public io.netty.channel.ChannelFuture writePriority(io.netty.channel.ChannelHandlerContext, int, int, short, boolean, io.netty.channel.ChannelPromise)
{
io.netty.handler.codec.http2.Http2FrameWriter v7;
io.netty.channel.ChannelFuture v8;
io.netty.channel.ChannelHandlerContext v1;
short v4;
io.netty.channel.ChannelPromise v6;
int v2, v3;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
boolean v5;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: short;
v5 := @parameter4: boolean;
v6 := @parameter5: io.netty.channel.ChannelPromise;
v7 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2FrameWriter frameWriter>;
v8 = interfaceinvoke v7.<io.netty.handler.codec.http2.Http2FrameWriter: io.netty.channel.ChannelFuture writePriority(io.netty.channel.ChannelHandlerContext,int,int,short,boolean,io.netty.channel.ChannelPromise)>(v1, v2, v3, v4, v5, v6);
return v8;
}
public io.netty.channel.ChannelFuture writeRstStream(io.netty.channel.ChannelHandlerContext, int, long, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.Http2LifecycleManager v5;
io.netty.channel.ChannelPromise v4;
int v2;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
long v3;
io.netty.channel.ChannelFuture v6;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: long;
v4 := @parameter3: io.netty.channel.ChannelPromise;
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2LifecycleManager lifecycleManager>;
v6 = interfaceinvoke v5.<io.netty.handler.codec.http2.Http2LifecycleManager: io.netty.channel.ChannelFuture resetStream(io.netty.channel.ChannelHandlerContext,int,long,io.netty.channel.ChannelPromise)>(v1, v2, v3, v4);
return v6;
}
public io.netty.channel.ChannelFuture writeSettings(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http2.Http2Settings, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v11;
java.lang.Object[] v9;
io.netty.handler.codec.http2.Http2FrameWriter v13;
io.netty.channel.ChannelFuture v14;
io.netty.handler.codec.http2.Http2Settings v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.Http2Connection v6;
io.netty.channel.ChannelPromise v12, v3;
io.netty.handler.codec.http2.Http2Exception v10;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
io.netty.handler.codec.http2.Http2Error v8;
java.lang.Boolean v5;
java.util.Queue v4;
boolean v7;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.codec.http2.Http2Settings;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: java.util.Queue outstandingLocalSettingsQueue>;
interfaceinvoke v4.<java.util.Queue: boolean add(java.lang.Object)>(v2);
label1:
v5 = virtualinvoke v2.<io.netty.handler.codec.http2.Http2Settings: java.lang.Boolean pushEnabled()>();
if v5 == null goto label3;
v6 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection>;
v7 = interfaceinvoke v6.<io.netty.handler.codec.http2.Http2Connection: boolean isServer()>();
if v7 == 0 goto label3;
v8 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v9 = newarray (java.lang.Object)[0];
v10 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v8, "Server sending SETTINGS frame with ENABLE_PUSH specified", v9);
throw v10;
label2:
v11 := @caughtexception;
v12 = interfaceinvoke v3.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v11);
return v12;
label3:
v13 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2FrameWriter frameWriter>;
v14 = interfaceinvoke v13.<io.netty.handler.codec.http2.Http2FrameWriter: io.netty.channel.ChannelFuture writeSettings(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http2.Http2Settings,io.netty.channel.ChannelPromise)>(v1, v2, v3);
return v14;
catch java.lang.Throwable from label1 to label2 with label2;
}
public io.netty.channel.ChannelFuture writeSettingsAck(io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelPromise)
{
io.netty.util.concurrent.EventExecutor v13;
java.lang.Throwable v17;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v10, v15, v16, v19, v2;
io.netty.handler.codec.http2.Http2Exception v8;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
io.netty.handler.codec.http2.Http2LifecycleManager v18;
io.netty.handler.codec.http2.Http2FrameWriter v14, v4;
io.netty.channel.ChannelFuture v5;
io.netty.channel.Channel v12;
io.netty.handler.codec.http2.Http2CodecUtil$SimpleChannelPromiseAggregator v11;
io.netty.handler.codec.http2.Http2Error v9;
java.lang.Object v7;
java.util.Queue v3, v6;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: java.util.Queue outstandingRemoteSettingsQueue>;
if v3 != null goto label1;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2FrameWriter frameWriter>;
v5 = interfaceinvoke v4.<io.netty.handler.codec.http2.Http2FrameWriter: io.netty.channel.ChannelFuture writeSettingsAck(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)>(v1, v2);
return v5;
label1:
v6 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: java.util.Queue outstandingRemoteSettingsQueue>;
v7 = interfaceinvoke v6.<java.util.Queue: java.lang.Object poll()>();
if v7 != null goto label2;
v8 = new io.netty.handler.codec.http2.Http2Exception;
v9 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error INTERNAL_ERROR>;
specialinvoke v8.<io.netty.handler.codec.http2.Http2Exception: void <init>(io.netty.handler.codec.http2.Http2Error,java.lang.String)>(v9, "attempted to write a SETTINGS ACK with no  pending SETTINGS");
v10 = interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v8);
return v10;
label2:
v11 = new io.netty.handler.codec.http2.Http2CodecUtil$SimpleChannelPromiseAggregator;
v12 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v13 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
specialinvoke v11.<io.netty.handler.codec.http2.Http2CodecUtil$SimpleChannelPromiseAggregator: void <init>(io.netty.channel.ChannelPromise,io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)>(v2, v12, v13);
v14 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2FrameWriter frameWriter>;
v15 = virtualinvoke v11.<io.netty.handler.codec.http2.Http2CodecUtil$SimpleChannelPromiseAggregator: io.netty.channel.ChannelPromise newPromise()>();
interfaceinvoke v14.<io.netty.handler.codec.http2.Http2FrameWriter: io.netty.channel.ChannelFuture writeSettingsAck(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)>(v1, v15);
v16 = virtualinvoke v11.<io.netty.handler.codec.http2.Http2CodecUtil$SimpleChannelPromiseAggregator: io.netty.channel.ChannelPromise newPromise()>();
label3:
virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: void remoteSettings(io.netty.handler.codec.http2.Http2Settings)>(v7);
interfaceinvoke v16.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
label4:
goto label6;
label5:
v17 := @caughtexception;
interfaceinvoke v16.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v17);
v18 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2LifecycleManager lifecycleManager>;
interfaceinvoke v18.<io.netty.handler.codec.http2.Http2LifecycleManager: void onError(io.netty.channel.ChannelHandlerContext,boolean,java.lang.Throwable)>(v1, 1, v17);
label6:
v19 = virtualinvoke v11.<io.netty.handler.codec.http2.Http2CodecUtil$SimpleChannelPromiseAggregator: io.netty.channel.ChannelPromise doneAllocatingPromises()>();
return v19;
catch java.lang.Throwable from label3 to label4 with label5;
}
public io.netty.channel.ChannelFuture writePing(io.netty.channel.ChannelHandlerContext, boolean, long, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v4;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
io.netty.handler.codec.http2.Http2FrameWriter v5;
long v3;
boolean v2;
io.netty.channel.ChannelFuture v6;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: boolean;
v3 := @parameter2: long;
v4 := @parameter3: io.netty.channel.ChannelPromise;
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2FrameWriter frameWriter>;
v6 = interfaceinvoke v5.<io.netty.handler.codec.http2.Http2FrameWriter: io.netty.channel.ChannelFuture writePing(io.netty.channel.ChannelHandlerContext,boolean,long,io.netty.channel.ChannelPromise)>(v1, v2, v3, v4);
return v6;
}
public io.netty.channel.ChannelFuture writePushPromise(io.netty.channel.ChannelHandlerContext, int, int, io.netty.handler.codec.http2.Http2Headers, int, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v17, v20;
java.lang.Object[] v10;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v6;
io.netty.handler.codec.http2.Http2Exception v11;
int v2, v3, v5;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
io.netty.handler.codec.http2.Http2Stream v12;
boolean v18, v8;
io.netty.handler.codec.http2.Http2Connection$Endpoint v14;
io.netty.handler.codec.http2.Http2LifecycleManager v19, v21;
io.netty.handler.codec.http2.Http2FrameWriter v15;
io.netty.channel.ChannelFuture v16;
io.netty.handler.codec.http2.Http2Connection v13, v7;
io.netty.handler.codec.http2.Http2Headers v4;
io.netty.handler.codec.http2.Http2Error v9;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: io.netty.handler.codec.http2.Http2Headers;
v5 := @parameter4: int;
v6 := @parameter5: io.netty.channel.ChannelPromise;
label1:
v7 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection>;
v8 = interfaceinvoke v7.<io.netty.handler.codec.http2.Http2Connection: boolean goAwayReceived()>();
if v8 == 0 goto label2;
v9 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v10 = newarray (java.lang.Object)[0];
v11 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v9, "Sending PUSH_PROMISE after GO_AWAY received.", v10);
throw v11;
label2:
v12 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Stream requireStream(int)>(v2);
v13 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection>;
v14 = interfaceinvoke v13.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Connection$Endpoint local()>();
interfaceinvoke v14.<io.netty.handler.codec.http2.Http2Connection$Endpoint: io.netty.handler.codec.http2.Http2Stream reservePushStream(int,io.netty.handler.codec.http2.Http2Stream)>(v3, v12);
v6 = interfaceinvoke v6.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise unvoid()>();
v15 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2FrameWriter frameWriter>;
v16 = interfaceinvoke v15.<io.netty.handler.codec.http2.Http2FrameWriter: io.netty.channel.ChannelFuture writePushPromise(io.netty.channel.ChannelHandlerContext,int,int,io.netty.handler.codec.http2.Http2Headers,int,io.netty.channel.ChannelPromise)>(v1, v2, v3, v4, v5, v6);
v17 = interfaceinvoke v16.<io.netty.channel.ChannelFuture: java.lang.Throwable cause()>();
if v17 != null goto label3;
interfaceinvoke v12.<io.netty.handler.codec.http2.Http2Stream: io.netty.handler.codec.http2.Http2Stream pushPromiseSent()>();
v18 = interfaceinvoke v16.<io.netty.channel.ChannelFuture: boolean isSuccess()>();
if v18 != 0 goto label4;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: void notifyLifecycleManagerOnError(io.netty.channel.ChannelFuture,io.netty.channel.ChannelHandlerContext)>(v16, v1);
goto label4;
label3:
v19 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2LifecycleManager lifecycleManager>;
interfaceinvoke v19.<io.netty.handler.codec.http2.Http2LifecycleManager: void onError(io.netty.channel.ChannelHandlerContext,boolean,java.lang.Throwable)>(v1, 1, v17);
label4:
return v16;
label5:
v20 := @caughtexception;
v21 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2LifecycleManager lifecycleManager>;
interfaceinvoke v21.<io.netty.handler.codec.http2.Http2LifecycleManager: void onError(io.netty.channel.ChannelHandlerContext,boolean,java.lang.Throwable)>(v1, 1, v20);
interfaceinvoke v6.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v20);
return v6;
catch java.lang.Throwable from label1 to label4 with label5;
}
public io.netty.channel.ChannelFuture writeGoAway(io.netty.channel.ChannelHandlerContext, int, long, io.netty.buffer.ByteBuf, io.netty.channel.ChannelPromise)
{
io.netty.handler.codec.http2.Http2LifecycleManager v6;
long v3;
io.netty.channel.ChannelFuture v7;
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v4;
io.netty.channel.ChannelPromise v5;
int v2;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: long;
v4 := @parameter3: io.netty.buffer.ByteBuf;
v5 := @parameter4: io.netty.channel.ChannelPromise;
v6 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2LifecycleManager lifecycleManager>;
v7 = interfaceinvoke v6.<io.netty.handler.codec.http2.Http2LifecycleManager: io.netty.channel.ChannelFuture goAway(io.netty.channel.ChannelHandlerContext,int,long,io.netty.buffer.ByteBuf,io.netty.channel.ChannelPromise)>(v1, v2, v3, v4, v5);
return v7;
}
public io.netty.channel.ChannelFuture writeWindowUpdate(io.netty.channel.ChannelHandlerContext, int, int, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelHandlerContext v1;
java.lang.UnsupportedOperationException v5;
io.netty.channel.ChannelPromise v4, v6;
int v2, v3;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: io.netty.channel.ChannelPromise;
v5 = new java.lang.UnsupportedOperationException;
specialinvoke v5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Use the Http2[Inbound|Outbound]FlowController objects to control window sizes");
v6 = interfaceinvoke v4.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v5);
return v6;
}
public io.netty.channel.ChannelFuture writeFrame(io.netty.channel.ChannelHandlerContext, byte, int, io.netty.handler.codec.http2.Http2Flags, io.netty.buffer.ByteBuf, io.netty.channel.ChannelPromise)
{
io.netty.handler.codec.http2.Http2Flags v4;
io.netty.handler.codec.http2.Http2FrameWriter v7;
io.netty.channel.ChannelFuture v8;
io.netty.channel.ChannelHandlerContext v1;
byte v2;
io.netty.buffer.ByteBuf v5;
io.netty.channel.ChannelPromise v6;
int v3;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: byte;
v3 := @parameter2: int;
v4 := @parameter3: io.netty.handler.codec.http2.Http2Flags;
v5 := @parameter4: io.netty.buffer.ByteBuf;
v6 := @parameter5: io.netty.channel.ChannelPromise;
v7 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2FrameWriter frameWriter>;
v8 = interfaceinvoke v7.<io.netty.handler.codec.http2.Http2FrameWriter: io.netty.channel.ChannelFuture writeFrame(io.netty.channel.ChannelHandlerContext,byte,int,io.netty.handler.codec.http2.Http2Flags,io.netty.buffer.ByteBuf,io.netty.channel.ChannelPromise)>(v1, v2, v3, v4, v5, v6);
return v8;
}
public void close()
{
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
io.netty.handler.codec.http2.Http2FrameWriter v1;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2FrameWriter frameWriter>;
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2FrameWriter: void close()>();
return;
}
public io.netty.handler.codec.http2.Http2Settings pollSentSettings()
{
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
java.lang.Object v2;
java.util.Queue v1;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: java.util.Queue outstandingLocalSettingsQueue>;
v2 = interfaceinvoke v1.<java.util.Queue: java.lang.Object poll()>();
return v2;
}
public io.netty.handler.codec.http2.Http2FrameWriter$Configuration configuration()
{
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
io.netty.handler.codec.http2.Http2FrameWriter v1;
io.netty.handler.codec.http2.Http2FrameWriter$Configuration v2;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2FrameWriter frameWriter>;
v2 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2FrameWriter: io.netty.handler.codec.http2.Http2FrameWriter$Configuration configuration()>();
return v2;
}
private io.netty.handler.codec.http2.Http2Stream requireStream(int)
{
java.lang.IllegalArgumentException v7;
io.netty.handler.codec.http2.Http2Connection v2, v4;
int v1;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
io.netty.handler.codec.http2.Http2Stream v3;
java.lang.String v6;
boolean v5;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection>;
v3 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Stream stream(int)>(v1);
if v3 != null goto label3;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection>;
v5 = interfaceinvoke v4.<io.netty.handler.codec.http2.Http2Connection: boolean streamMayHaveExisted(int)>(v1);
if v5 == 0 goto label1;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Stream no longer exists: \u0001");
goto label2;
label1:
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Stream does not exist: \u0001");
label2:
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v7;
label3:
return v3;
}
public void consumeReceivedSettings(io.netty.handler.codec.http2.Http2Settings)
{
io.netty.handler.codec.http2.Http2Settings v1;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
java.util.Queue v2, v4;
java.util.ArrayDeque v3;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Settings;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: java.util.Queue outstandingRemoteSettingsQueue>;
if v2 != null goto label1;
v3 = new java.util.ArrayDeque;
specialinvoke v3.<java.util.ArrayDeque: void <init>(int)>(2);
v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: java.util.Queue outstandingRemoteSettingsQueue> = v3;
label1:
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: java.util.Queue outstandingRemoteSettingsQueue>;
interfaceinvoke v4.<java.util.Queue: boolean add(java.lang.Object)>(v1);
return;
}
private void notifyLifecycleManagerOnError(io.netty.channel.ChannelFuture, io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.ChannelHandlerContext v2;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v0;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$1 v3;
io.netty.channel.ChannelFuture v1;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelFuture;
v2 := @parameter1: io.netty.channel.ChannelHandlerContext;
v3 = new io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$1;
specialinvoke v3.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$1: void <init>(io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder,io.netty.channel.ChannelHandlerContext)>(v0, v2);
interfaceinvoke v1.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v3);
return;
}
}