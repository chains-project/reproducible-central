public abstract class io.netty.handler.codec.http2.Http2ChannelDuplexHandler extends io.netty.channel.ChannelDuplexHandler
{
private volatile io.netty.handler.codec.http2.Http2FrameCodec frameCodec;
public void <init>()
{
io.netty.handler.codec.http2.Http2ChannelDuplexHandler v0;
v0 := @this: io.netty.handler.codec.http2.Http2ChannelDuplexHandler;
specialinvoke v0.<io.netty.channel.ChannelDuplexHandler: void <init>()>();
return;
}
public final void handlerAdded(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.Http2FrameCodec v2;
io.netty.handler.codec.http2.Http2ChannelDuplexHandler v0;
v0 := @this: io.netty.handler.codec.http2.Http2ChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = staticinvoke <io.netty.handler.codec.http2.Http2ChannelDuplexHandler: io.netty.handler.codec.http2.Http2FrameCodec requireHttp2FrameCodec(io.netty.channel.ChannelHandlerContext)>(v1);
v0.<io.netty.handler.codec.http2.Http2ChannelDuplexHandler: io.netty.handler.codec.http2.Http2FrameCodec frameCodec> = v2;
virtualinvoke v0.<io.netty.handler.codec.http2.Http2ChannelDuplexHandler: void handlerAdded0(io.netty.channel.ChannelHandlerContext)>(v1);
return;
}
protected void handlerAdded0(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.Http2ChannelDuplexHandler v0;
v0 := @this: io.netty.handler.codec.http2.Http2ChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
return;
}
public final void handlerRemoved(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
java.lang.Throwable v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.Http2ChannelDuplexHandler v0;
v0 := @this: io.netty.handler.codec.http2.Http2ChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
label1:
virtualinvoke v0.<io.netty.handler.codec.http2.Http2ChannelDuplexHandler: void handlerRemoved0(io.netty.channel.ChannelHandlerContext)>(v1);
label2:
v0.<io.netty.handler.codec.http2.Http2ChannelDuplexHandler: io.netty.handler.codec.http2.Http2FrameCodec frameCodec> = null;
goto label4;
label3:
v2 := @caughtexception;
v0.<io.netty.handler.codec.http2.Http2ChannelDuplexHandler: io.netty.handler.codec.http2.Http2FrameCodec frameCodec> = null;
throw v2;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected void handlerRemoved0(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.Http2ChannelDuplexHandler v0;
v0 := @this: io.netty.handler.codec.http2.Http2ChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
return;
}
public final io.netty.handler.codec.http2.Http2FrameStream newStream()
{
java.lang.IllegalStateException v2;
io.netty.handler.codec.http2.Http2ChannelDuplexHandler v0;
io.netty.handler.codec.http2.Http2FrameCodec v1;
io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream v5;
java.lang.String v3, v4;
v0 := @this: io.netty.handler.codec.http2.Http2ChannelDuplexHandler;
v1 = v0.<io.netty.handler.codec.http2.Http2ChannelDuplexHandler: io.netty.handler.codec.http2.Http2FrameCodec frameCodec>;
if v1 != null goto label1;
v2 = new java.lang.IllegalStateException;
v3 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(class "Lio/netty/handler/codec/http2/Http2FrameCodec;");
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 not found. Has the handler been added to a pipeline?");
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v4);
throw v2;
label1:
v5 = virtualinvoke v1.<io.netty.handler.codec.http2.Http2FrameCodec: io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream newStream()>();
return v5;
}
protected final void forEachActiveStream(io.netty.handler.codec.http2.Http2FrameStreamVisitor) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.Http2FrameCodec v2;
io.netty.handler.codec.http2.Http2FrameStreamVisitor v1;
io.netty.handler.codec.http2.Http2ChannelDuplexHandler v0;
v0 := @this: io.netty.handler.codec.http2.Http2ChannelDuplexHandler;
v1 := @parameter0: io.netty.handler.codec.http2.Http2FrameStreamVisitor;
v2 = v0.<io.netty.handler.codec.http2.Http2ChannelDuplexHandler: io.netty.handler.codec.http2.Http2FrameCodec frameCodec>;
virtualinvoke v2.<io.netty.handler.codec.http2.Http2FrameCodec: void forEachActiveStream(io.netty.handler.codec.http2.Http2FrameStreamVisitor)>(v1);
return;
}
private static io.netty.handler.codec.http2.Http2FrameCodec requireHttp2FrameCodec(io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.ChannelPipeline v1;
java.lang.IllegalArgumentException v3;
io.netty.channel.ChannelHandlerContext v0, v2;
io.netty.channel.ChannelHandler v7;
java.lang.Class v4;
java.lang.String v5, v6;
v0 := @parameter0: io.netty.channel.ChannelHandlerContext;
v1 = interfaceinvoke v0.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
v2 = interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.Class)>(class "Lio/netty/handler/codec/http2/Http2FrameCodec;");
if v2 != null goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = class "Lio/netty/handler/codec/http2/Http2FrameCodec;";
v5 = virtualinvoke v4.<java.lang.Class: java.lang.String getSimpleName()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 was not found in the channel pipeline.");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v3;
label1:
v7 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
return v7;
}
}