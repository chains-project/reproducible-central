public final class io.netty.handler.codec.http2.Http2Settings extends io.netty.util.collection.CharObjectHashMap
{
private static final int DEFAULT_CAPACITY;
private static final java.lang.Long FALSE;
private static final java.lang.Long TRUE;
public void <init>()
{
io.netty.handler.codec.http2.Http2Settings v0;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
specialinvoke v0.<io.netty.handler.codec.http2.Http2Settings: void <init>(int)>(13);
return;
}
public void <init>(int, float)
{
int v1;
io.netty.handler.codec.http2.Http2Settings v0;
float v2;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
v1 := @parameter0: int;
v2 := @parameter1: float;
specialinvoke v0.<io.netty.util.collection.CharObjectHashMap: void <init>(int,float)>(v1, v2);
return;
}
public void <init>(int)
{
int v1;
io.netty.handler.codec.http2.Http2Settings v0;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.util.collection.CharObjectHashMap: void <init>(int)>(v1);
return;
}
public java.lang.Long put(char, java.lang.Long)
{
io.netty.handler.codec.http2.Http2Settings v0;
java.lang.Long v2;
char v1;
java.lang.Object v3;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
v1 := @parameter0: char;
v2 := @parameter1: java.lang.Long;
staticinvoke <io.netty.handler.codec.http2.Http2Settings: void verifyStandardSetting(int,java.lang.Long)>(v1, v2);
v3 = specialinvoke v0.<io.netty.util.collection.CharObjectHashMap: java.lang.Object put(char,java.lang.Object)>(v1, v2);
return v3;
}
public java.lang.Long headerTableSize()
{
io.netty.handler.codec.http2.Http2Settings v0;
java.lang.Object v1;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.Http2Settings: java.lang.Object get(char)>(1);
return v1;
}
public io.netty.handler.codec.http2.Http2Settings headerTableSize(long)
{
io.netty.handler.codec.http2.Http2Settings v0;
long v1;
java.lang.Long v2;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
v1 := @parameter0: long;
v2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v1);
virtualinvoke v0.<io.netty.handler.codec.http2.Http2Settings: java.lang.Long put(char,java.lang.Long)>(1, v2);
return v0;
}
public java.lang.Boolean pushEnabled()
{
io.netty.handler.codec.http2.Http2Settings v0;
java.lang.Long v2;
java.lang.Boolean v4;
java.lang.Object v1;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.Http2Settings: java.lang.Object get(char)>(2);
if v1 != null goto label1;
return null;
label1:
v2 = <io.netty.handler.codec.http2.Http2Settings: java.lang.Long TRUE>;
v3 = virtualinvoke v2.<java.lang.Long: boolean equals(java.lang.Object)>(v1);
v4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v3);
return v4;
}
public io.netty.handler.codec.http2.Http2Settings pushEnabled(boolean)
{
io.netty.handler.codec.http2.Http2Settings v0;
java.lang.Long v2;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
v1 := @parameter0: boolean;
if v1 == 0 goto label1;
v2 = <io.netty.handler.codec.http2.Http2Settings: java.lang.Long TRUE>;
goto label2;
label1:
v2 = <io.netty.handler.codec.http2.Http2Settings: java.lang.Long FALSE>;
label2:
virtualinvoke v0.<io.netty.handler.codec.http2.Http2Settings: java.lang.Long put(char,java.lang.Long)>(2, v2);
return v0;
}
public java.lang.Long maxConcurrentStreams()
{
io.netty.handler.codec.http2.Http2Settings v0;
java.lang.Object v1;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.Http2Settings: java.lang.Object get(char)>(3);
return v1;
}
public io.netty.handler.codec.http2.Http2Settings maxConcurrentStreams(long)
{
io.netty.handler.codec.http2.Http2Settings v0;
long v1;
java.lang.Long v2;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
v1 := @parameter0: long;
v2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v1);
virtualinvoke v0.<io.netty.handler.codec.http2.Http2Settings: java.lang.Long put(char,java.lang.Long)>(3, v2);
return v0;
}
public java.lang.Integer initialWindowSize()
{
io.netty.handler.codec.http2.Http2Settings v0;
java.lang.Integer v1;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.Http2Settings: java.lang.Integer getIntValue(char)>(4);
return v1;
}
public io.netty.handler.codec.http2.Http2Settings initialWindowSize(int)
{
int v1;
io.netty.handler.codec.http2.Http2Settings v0;
java.lang.Long v2;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
v1 := @parameter0: int;
v2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v1);
virtualinvoke v0.<io.netty.handler.codec.http2.Http2Settings: java.lang.Long put(char,java.lang.Long)>(4, v2);
return v0;
}
public java.lang.Integer maxFrameSize()
{
io.netty.handler.codec.http2.Http2Settings v0;
java.lang.Integer v1;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.Http2Settings: java.lang.Integer getIntValue(char)>(5);
return v1;
}
public io.netty.handler.codec.http2.Http2Settings maxFrameSize(int)
{
int v1;
io.netty.handler.codec.http2.Http2Settings v0;
java.lang.Long v2;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
v1 := @parameter0: int;
v2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v1);
virtualinvoke v0.<io.netty.handler.codec.http2.Http2Settings: java.lang.Long put(char,java.lang.Long)>(5, v2);
return v0;
}
public java.lang.Long maxHeaderListSize()
{
io.netty.handler.codec.http2.Http2Settings v0;
java.lang.Object v1;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.Http2Settings: java.lang.Object get(char)>(6);
return v1;
}
public io.netty.handler.codec.http2.Http2Settings maxHeaderListSize(long)
{
io.netty.handler.codec.http2.Http2Settings v0;
long v1;
java.lang.Long v2;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
v1 := @parameter0: long;
v2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v1);
virtualinvoke v0.<io.netty.handler.codec.http2.Http2Settings: java.lang.Long put(char,java.lang.Long)>(6, v2);
return v0;
}
public io.netty.handler.codec.http2.Http2Settings copyFrom(io.netty.handler.codec.http2.Http2Settings)
{
io.netty.handler.codec.http2.Http2Settings v0, v1;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Settings;
virtualinvoke v0.<io.netty.handler.codec.http2.Http2Settings: void clear()>();
virtualinvoke v0.<io.netty.handler.codec.http2.Http2Settings: void putAll(java.util.Map)>(v1);
return v0;
}
public java.lang.Integer getIntValue(char)
{
io.netty.handler.codec.http2.Http2Settings v0;
int v3;
char v1;
java.lang.Object v2;
java.lang.Integer v4;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
v1 := @parameter0: char;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.Http2Settings: java.lang.Object get(char)>(v1);
if v2 != null goto label1;
return null;
label1:
v3 = virtualinvoke v2.<java.lang.Long: int intValue()>();
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
return v4;
}
private static void verifyStandardSetting(int, java.lang.Long)
{
byte v11, v15, v17, v21, v23, v3, v31, v33, v5, v9;
java.lang.Long v1;
boolean v27;
long v10, v14, v16, v2, v20, v22, v30, v32, v4, v8;
int v0, v26;
java.lang.String v13, v19, v25, v29, v35, v7;
java.lang.IllegalArgumentException v12, v18, v24, v28, v34, v6;
v0 := @parameter0: int;
v1 := @parameter1: java.lang.Long;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "value");
tableswitch(v0)
{
case 1: goto label01;
case 2: goto label03;
case 3: goto label04;
case 4: goto label06;
case 5: goto label08;
case 6: goto label09;
default: goto label11;
};
label01:
v2 = virtualinvoke v1.<java.lang.Long: long longValue()>();
v3 = v2 cmp 0L;
if v3 < 0 goto label02;
v4 = virtualinvoke v1.<java.lang.Long: long longValue()>();
v5 = v4 cmp 4294967295L;
if v5 <= 0 goto label11;
label02:
v6 = new java.lang.IllegalArgumentException;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Setting HEADER_TABLE_SIZE is invalid: \u0001");
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v7);
throw v6;
label03:
v8 = virtualinvoke v1.<java.lang.Long: long longValue()>();
v9 = v8 cmp 0L;
if v9 == 0 goto label11;
v10 = virtualinvoke v1.<java.lang.Long: long longValue()>();
v11 = v10 cmp 1L;
if v11 == 0 goto label11;
v12 = new java.lang.IllegalArgumentException;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Setting ENABLE_PUSH is invalid: \u0001");
specialinvoke v12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v13);
throw v12;
label04:
v14 = virtualinvoke v1.<java.lang.Long: long longValue()>();
v15 = v14 cmp 0L;
if v15 < 0 goto label05;
v16 = virtualinvoke v1.<java.lang.Long: long longValue()>();
v17 = v16 cmp 4294967295L;
if v17 <= 0 goto label11;
label05:
v18 = new java.lang.IllegalArgumentException;
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Setting MAX_CONCURRENT_STREAMS is invalid: \u0001");
specialinvoke v18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v19);
throw v18;
label06:
v20 = virtualinvoke v1.<java.lang.Long: long longValue()>();
v21 = v20 cmp 0L;
if v21 < 0 goto label07;
v22 = virtualinvoke v1.<java.lang.Long: long longValue()>();
v23 = v22 cmp 2147483647L;
if v23 <= 0 goto label11;
label07:
v24 = new java.lang.IllegalArgumentException;
v25 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Setting INITIAL_WINDOW_SIZE is invalid: \u0001");
specialinvoke v24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v25);
throw v24;
label08:
v26 = virtualinvoke v1.<java.lang.Long: int intValue()>();
v27 = staticinvoke <io.netty.handler.codec.http2.Http2CodecUtil: boolean isMaxFrameSizeValid(int)>(v26);
if v27 != 0 goto label11;
v28 = new java.lang.IllegalArgumentException;
v29 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Setting MAX_FRAME_SIZE is invalid: \u0001");
specialinvoke v28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v29);
throw v28;
label09:
v30 = virtualinvoke v1.<java.lang.Long: long longValue()>();
v31 = v30 cmp 0L;
if v31 < 0 goto label10;
v32 = virtualinvoke v1.<java.lang.Long: long longValue()>();
v33 = v32 cmp 4294967295L;
if v33 <= 0 goto label11;
label10:
v34 = new java.lang.IllegalArgumentException;
v35 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Setting MAX_HEADER_LIST_SIZE is invalid: \u0001");
specialinvoke v34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v35);
throw v34;
label11:
return;
}
protected java.lang.String keyToString(char)
{
io.netty.handler.codec.http2.Http2Settings v0;
char v1;
java.lang.String v2;
v0 := @this: io.netty.handler.codec.http2.Http2Settings;
v1 := @parameter0: char;
tableswitch(v1)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label3;
case 4: goto label4;
case 5: goto label5;
case 6: goto label6;
default: goto label7;
};
label1:
return "HEADER_TABLE_SIZE";
label2:
return "ENABLE_PUSH";
label3:
return "MAX_CONCURRENT_STREAMS";
label4:
return "INITIAL_WINDOW_SIZE";
label5:
return "MAX_FRAME_SIZE";
label6:
return "MAX_HEADER_LIST_SIZE";
label7:
v2 = specialinvoke v0.<io.netty.util.collection.CharObjectHashMap: java.lang.String keyToString(char)>(v1);
return v2;
}
public static io.netty.handler.codec.http2.Http2Settings defaultSettings()
{
io.netty.handler.codec.http2.Http2Settings v0, v1;
v0 = new io.netty.handler.codec.http2.Http2Settings;
specialinvoke v0.<io.netty.handler.codec.http2.Http2Settings: void <init>()>();
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.Http2Settings: io.netty.handler.codec.http2.Http2Settings maxHeaderListSize(long)>(8192L);
return v1;
}
static void <clinit>()
{
java.lang.Long v0, v1;
v0 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);
<io.netty.handler.codec.http2.Http2Settings: java.lang.Long FALSE> = v0;
v1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);
<io.netty.handler.codec.http2.Http2Settings: java.lang.Long TRUE> = v1;
return;
}
}