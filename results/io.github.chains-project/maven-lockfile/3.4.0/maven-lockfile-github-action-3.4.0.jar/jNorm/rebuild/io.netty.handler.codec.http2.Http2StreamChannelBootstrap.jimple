public final class io.netty.handler.codec.http2.Http2StreamChannelBootstrap extends java.lang.Object
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final java.util.Map$Entry[] EMPTY_OPTION_ARRAY;
private static final java.util.Map$Entry[] EMPTY_ATTRIBUTE_ARRAY;
private final java.util.Map options;
private final java.util.Map attrs;
private final io.netty.channel.Channel channel;
private volatile io.netty.channel.ChannelHandler handler;
private volatile io.netty.channel.ChannelHandlerContext multiplexCtx;
static final boolean $assertionsDisabled;
public void <init>(io.netty.channel.Channel)
{
io.netty.channel.Channel v1;
java.util.LinkedHashMap v2;
io.netty.handler.codec.http2.Http2StreamChannelBootstrap v0;
java.util.concurrent.ConcurrentHashMap v3;
java.lang.Object v4;
v0 := @this: io.netty.handler.codec.http2.Http2StreamChannelBootstrap;
v1 := @parameter0: io.netty.channel.Channel;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.LinkedHashMap;
specialinvoke v2.<java.util.LinkedHashMap: void <init>()>();
v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: java.util.Map options> = v2;
v3 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: java.util.Map attrs> = v3;
v4 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "channel");
v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: io.netty.channel.Channel channel> = v4;
return;
}
public io.netty.handler.codec.http2.Http2StreamChannelBootstrap option(io.netty.channel.ChannelOption, java.lang.Object)
{
java.lang.Throwable v6;
io.netty.handler.codec.http2.Http2StreamChannelBootstrap v0;
io.netty.channel.ChannelOption v1;
java.util.Map v3, v4, v5;
java.lang.Object v2;
v0 := @this: io.netty.handler.codec.http2.Http2StreamChannelBootstrap;
v1 := @parameter0: io.netty.channel.ChannelOption;
v2 := @parameter1: java.lang.Object;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "option");
v3 = v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: java.util.Map options>;
entermonitor v3;
label1:
if v2 != null goto label2;
v4 = v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: java.util.Map options>;
interfaceinvoke v4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
goto label3;
label2:
v5 = v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: java.util.Map options>;
interfaceinvoke v5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
label3:
exitmonitor v3;
label4:
goto label6;
label5:
v6 := @caughtexception;
exitmonitor v3;
throw v6;
label6:
return v0;
catch java.lang.Throwable from label1 to label4 with label5;
}
public io.netty.handler.codec.http2.Http2StreamChannelBootstrap attr(io.netty.util.AttributeKey, java.lang.Object)
{
io.netty.util.AttributeKey v1;
io.netty.handler.codec.http2.Http2StreamChannelBootstrap v0;
java.util.Map v3, v4;
java.lang.Object v2;
v0 := @this: io.netty.handler.codec.http2.Http2StreamChannelBootstrap;
v1 := @parameter0: io.netty.util.AttributeKey;
v2 := @parameter1: java.lang.Object;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "key");
if v2 != null goto label1;
v3 = v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: java.util.Map attrs>;
interfaceinvoke v3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
goto label2;
label1:
v4 = v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: java.util.Map attrs>;
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
label2:
return v0;
}
public io.netty.handler.codec.http2.Http2StreamChannelBootstrap handler(io.netty.channel.ChannelHandler)
{
io.netty.channel.ChannelHandler v1;
java.lang.Object v2;
io.netty.handler.codec.http2.Http2StreamChannelBootstrap v0;
v0 := @this: io.netty.handler.codec.http2.Http2StreamChannelBootstrap;
v1 := @parameter0: io.netty.channel.ChannelHandler;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "handler");
v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: io.netty.channel.ChannelHandler handler> = v2;
return v0;
}
public io.netty.util.concurrent.Future open()
{
io.netty.channel.Channel v1;
io.netty.handler.codec.http2.Http2StreamChannelBootstrap v0;
io.netty.util.concurrent.Promise v3;
io.netty.channel.EventLoop v2;
io.netty.util.concurrent.Future v4;
v0 := @this: io.netty.handler.codec.http2.Http2StreamChannelBootstrap;
v1 = v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: io.netty.channel.Channel channel>;
v2 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v3 = interfaceinvoke v2.<io.netty.channel.EventLoop: io.netty.util.concurrent.Promise newPromise()>();
v4 = virtualinvoke v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: io.netty.util.concurrent.Future open(io.netty.util.concurrent.Promise)>(v3);
return v4;
}
public io.netty.util.concurrent.Future open(io.netty.util.concurrent.Promise)
{
io.netty.util.concurrent.EventExecutor v3;
java.lang.Throwable v6;
io.netty.channel.ChannelHandlerContext v2;
io.netty.handler.codec.http2.Http2StreamChannelBootstrap$1 v5;
io.netty.handler.codec.http2.Http2StreamChannelBootstrap v0;
io.netty.util.concurrent.Promise v1;
boolean v4;
v0 := @this: io.netty.handler.codec.http2.Http2StreamChannelBootstrap;
v1 := @parameter0: io.netty.util.concurrent.Promise;
label1:
v2 = specialinvoke v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: io.netty.channel.ChannelHandlerContext findCtx()>();
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v4 = interfaceinvoke v3.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v4 == 0 goto label2;
virtualinvoke v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: void open0(io.netty.channel.ChannelHandlerContext,io.netty.util.concurrent.Promise)>(v2, v1);
goto label5;
label2:
v5 = new io.netty.handler.codec.http2.Http2StreamChannelBootstrap$1;
specialinvoke v5.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap$1: void <init>(io.netty.handler.codec.http2.Http2StreamChannelBootstrap,io.netty.channel.ChannelHandlerContext,io.netty.util.concurrent.Promise)>(v0, v2, v1);
interfaceinvoke v3.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v5);
label3:
goto label5;
label4:
v6 := @caughtexception;
interfaceinvoke v1.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v6);
label5:
return v1;
catch java.lang.Throwable from label1 to label3 with label4;
}
private io.netty.channel.ChannelHandlerContext findCtx() throws java.nio.channels.ClosedChannelException
{
java.lang.IllegalStateException v8;
java.nio.channels.ClosedChannelException v13;
io.netty.channel.ChannelPipeline v4;
io.netty.channel.Channel v11, v3, v6;
io.netty.channel.ChannelHandlerContext v1, v5;
io.netty.handler.codec.http2.Http2StreamChannelBootstrap v0;
java.lang.String v10, v12, v9;
boolean v2, v7;
v0 := @this: io.netty.handler.codec.http2.Http2StreamChannelBootstrap;
v1 = v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: io.netty.channel.ChannelHandlerContext multiplexCtx>;
if v1 == null goto label1;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: boolean isRemoved()>();
if v2 != 0 goto label1;
return v1;
label1:
v3 = v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: io.netty.channel.Channel channel>;
v4 = interfaceinvoke v3.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v5 = interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.Class)>(class "Lio/netty/handler/codec/http2/Http2MultiplexCodec;");
if v5 != null goto label3;
v5 = interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.Class)>(class "Lio/netty/handler/codec/http2/Http2MultiplexHandler;");
if v5 != null goto label3;
v6 = v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: io.netty.channel.Channel channel>;
v7 = interfaceinvoke v6.<io.netty.channel.Channel: boolean isActive()>();
if v7 == 0 goto label2;
v8 = new java.lang.IllegalStateException;
v9 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(class "Lio/netty/handler/codec/http2/Http2MultiplexCodec;");
v10 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(class "Lio/netty/handler/codec/http2/Http2MultiplexHandler;");
v11 = v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: io.netty.channel.Channel channel>;
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,io.netty.channel.Channel)>(v9, v10, v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 or \u0001 must be in the ChannelPipeline of Channel \u0001");
specialinvoke v8.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v12);
throw v8;
label2:
v13 = new java.nio.channels.ClosedChannelException;
specialinvoke v13.<java.nio.channels.ClosedChannelException: void <init>()>();
throw v13;
label3:
v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: io.netty.channel.ChannelHandlerContext multiplexCtx> = v5;
return v5;
}
public void open0(io.netty.channel.ChannelHandlerContext, io.netty.util.concurrent.Promise)
{
io.netty.handler.codec.http2.Http2StreamChannelBootstrap$2 v19;
io.netty.util.concurrent.EventExecutor v4;
java.lang.AssertionError v6;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.Http2StreamChannelBootstrap v0;
boolean v3, v5, v7, v9;
io.netty.util.concurrent.Promise v2;
io.netty.channel.EventLoop v17;
io.netty.channel.Channel$Unsafe v15;
java.lang.Exception v13, v14;
io.netty.channel.ChannelFuture v18;
io.netty.channel.Channel v16;
io.netty.channel.ChannelHandler v10, v12, v8;
io.netty.handler.codec.http2.Http2StreamChannel v11;
v0 := @this: io.netty.handler.codec.http2.Http2StreamChannelBootstrap;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 = <io.netty.handler.codec.http2.Http2StreamChannelBootstrap: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
v4 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v5 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v5 != 0 goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
v7 = interfaceinvoke v2.<io.netty.util.concurrent.Promise: boolean setUncancellable()>();
if v7 != 0 goto label2;
return;
label2:
v8 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
v9 = v8 instanceof io.netty.handler.codec.http2.Http2MultiplexCodec;
if v9 == 0 goto label3;
v10 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
v11 = virtualinvoke v10.<io.netty.handler.codec.http2.Http2MultiplexCodec: io.netty.handler.codec.http2.Http2StreamChannel newOutboundStream()>();
goto label6;
label3:
v12 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
v11 = virtualinvoke v12.<io.netty.handler.codec.http2.Http2MultiplexHandler: io.netty.handler.codec.http2.Http2StreamChannel newOutboundStream()>();
label4:
goto label6;
label5:
v13 := @caughtexception;
interfaceinvoke v2.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v13);
return;
label6:
specialinvoke v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: void init(io.netty.channel.Channel)>(v11);
label7:
goto label9;
label8:
v14 := @caughtexception;
v15 = interfaceinvoke v11.<io.netty.handler.codec.http2.Http2StreamChannel: io.netty.channel.Channel$Unsafe unsafe()>();
interfaceinvoke v15.<io.netty.channel.Channel$Unsafe: void closeForcibly()>();
interfaceinvoke v2.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v14);
return;
label9:
v16 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v17 = interfaceinvoke v16.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v18 = interfaceinvoke v17.<io.netty.channel.EventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.Channel)>(v11);
v19 = new io.netty.handler.codec.http2.Http2StreamChannelBootstrap$2;
specialinvoke v19.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap$2: void <init>(io.netty.handler.codec.http2.Http2StreamChannelBootstrap,io.netty.util.concurrent.Promise,io.netty.handler.codec.http2.Http2StreamChannel)>(v0, v2, v11);
interfaceinvoke v18.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v19);
return;
catch java.lang.Exception from label2 to label4 with label5;
catch java.lang.Exception from label6 to label7 with label8;
}
private void init(io.netty.channel.Channel)
{
java.lang.Throwable v10;
java.lang.Object[] v14, v9;
java.util.Set v12, v7;
io.netty.channel.ChannelPipeline v2;
io.netty.channel.ChannelHandler[] v4;
io.netty.channel.Channel v1;
io.netty.handler.codec.http2.Http2StreamChannelBootstrap v0;
java.util.Map v11, v5, v6;
io.netty.channel.ChannelHandler v3;
java.util.Map$Entry[] v13, v8;
v0 := @this: io.netty.handler.codec.http2.Http2StreamChannelBootstrap;
v1 := @parameter0: io.netty.channel.Channel;
v2 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v3 = v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: io.netty.channel.ChannelHandler handler>;
if v3 == null goto label1;
v4 = newarray (io.netty.channel.ChannelHandler)[1];
v4[0] = v3;
interfaceinvoke v2.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.channel.ChannelHandler[])>(v4);
label1:
v5 = v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: java.util.Map options>;
entermonitor v5;
label2:
v6 = v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: java.util.Map options>;
v7 = interfaceinvoke v6.<java.util.Map: java.util.Set entrySet()>();
v8 = <io.netty.handler.codec.http2.Http2StreamChannelBootstrap: java.util.Map$Entry[] EMPTY_OPTION_ARRAY>;
v9 = interfaceinvoke v7.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(v8);
exitmonitor v5;
label3:
goto label5;
label4:
v10 := @caughtexception;
exitmonitor v5;
throw v10;
label5:
staticinvoke <io.netty.handler.codec.http2.Http2StreamChannelBootstrap: void setChannelOptions(io.netty.channel.Channel,java.util.Map$Entry[])>(v1, v9);
v11 = v0.<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: java.util.Map attrs>;
v12 = interfaceinvoke v11.<java.util.Map: java.util.Set entrySet()>();
v13 = <io.netty.handler.codec.http2.Http2StreamChannelBootstrap: java.util.Map$Entry[] EMPTY_ATTRIBUTE_ARRAY>;
v14 = interfaceinvoke v12.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(v13);
staticinvoke <io.netty.handler.codec.http2.Http2StreamChannelBootstrap: void setAttributes(io.netty.channel.Channel,java.util.Map$Entry[])>(v1, v14);
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
private static void setChannelOptions(io.netty.channel.Channel, java.util.Map$Entry[])
{
io.netty.channel.Channel v0;
java.util.Map$Entry v4;
int v2, v3;
java.lang.Object v5, v6;
java.util.Map$Entry[] v1;
v0 := @parameter0: io.netty.channel.Channel;
v1 := @parameter1: java.util.Map$Entry[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v6 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
staticinvoke <io.netty.handler.codec.http2.Http2StreamChannelBootstrap: void setChannelOption(io.netty.channel.Channel,io.netty.channel.ChannelOption,java.lang.Object)>(v0, v5, v6);
v3 = v3 + 1;
goto label1;
label2:
return;
}
private static void setChannelOption(io.netty.channel.Channel, io.netty.channel.ChannelOption, java.lang.Object)
{
java.lang.Throwable v6;
java.lang.Object[] v8;
io.netty.channel.ChannelOption v1;
io.netty.channel.Channel v0;
io.netty.channel.ChannelConfig v3;
io.netty.util.internal.logging.InternalLogger v5, v7;
java.lang.Object v2;
boolean v4;
v0 := @parameter0: io.netty.channel.Channel;
v1 := @parameter1: io.netty.channel.ChannelOption;
v2 := @parameter2: java.lang.Object;
label1:
v3 = interfaceinvoke v0.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v4 = interfaceinvoke v3.<io.netty.channel.ChannelConfig: boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)>(v1, v2);
if v4 != 0 goto label4;
v5 = <io.netty.handler.codec.http2.Http2StreamChannelBootstrap: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Unknown channel option \'{}\' for channel \'{}\'", v1, v0);
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = <io.netty.handler.codec.http2.Http2StreamChannelBootstrap: io.netty.util.internal.logging.InternalLogger logger>;
v8 = newarray (java.lang.Object)[4];
v8[0] = v1;
v8[1] = v2;
v8[2] = v0;
v8[3] = v6;
interfaceinvoke v7.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object[])>("Failed to set channel option \'{}\' with value \'{}\' for channel \'{}\'", v8);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private static void setAttributes(io.netty.channel.Channel, java.util.Map$Entry[])
{
io.netty.util.Attribute v6;
java.util.Map$Entry v4;
io.netty.channel.Channel v0;
int v2, v3;
java.lang.Object v5, v7;
java.util.Map$Entry[] v1;
v0 := @parameter0: io.netty.channel.Channel;
v1 := @parameter1: java.util.Map$Entry[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v6 = interfaceinvoke v0.<io.netty.channel.Channel: io.netty.util.Attribute attr(io.netty.util.AttributeKey)>(v5);
v7 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
interfaceinvoke v6.<io.netty.util.Attribute: void set(java.lang.Object)>(v7);
v3 = v3 + 1;
goto label1;
label2:
return;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v3;
java.lang.Class v0;
java.util.Map$Entry[] v4, v5;
boolean v1, v2;
v0 = class "Lio/netty/handler/codec/http2/Http2StreamChannelBootstrap;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/handler/codec/http2/Http2StreamChannelBootstrap;");
<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: io.netty.util.internal.logging.InternalLogger logger> = v3;
v4 = newarray (java.util.Map$Entry)[0];
<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: java.util.Map$Entry[] EMPTY_OPTION_ARRAY> = v4;
v5 = newarray (java.util.Map$Entry)[0];
<io.netty.handler.codec.http2.Http2StreamChannelBootstrap: java.util.Map$Entry[] EMPTY_ATTRIBUTE_ARRAY> = v5;
return;
}
}