final class io.netty.handler.codec.http2.StreamBufferingEncoder$PendingStream extends java.lang.Object
{
final io.netty.channel.ChannelHandlerContext ctx;
final int streamId;
final java.util.Queue frames;
void <init>(io.netty.channel.ChannelHandlerContext, int)
{
io.netty.channel.ChannelHandlerContext v1;
int v2;
io.netty.handler.codec.http2.StreamBufferingEncoder$PendingStream v0;
java.util.ArrayDeque v3;
v0 := @this: io.netty.handler.codec.http2.StreamBufferingEncoder$PendingStream;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.ArrayDeque;
specialinvoke v3.<java.util.ArrayDeque: void <init>(int)>(2);
v0.<io.netty.handler.codec.http2.StreamBufferingEncoder$PendingStream: java.util.Queue frames> = v3;
v0.<io.netty.handler.codec.http2.StreamBufferingEncoder$PendingStream: io.netty.channel.ChannelHandlerContext ctx> = v1;
v0.<io.netty.handler.codec.http2.StreamBufferingEncoder$PendingStream: int streamId> = v2;
return;
}
void sendFrames()
{
io.netty.channel.ChannelHandlerContext v5;
java.util.Iterator v2;
int v6;
io.netty.handler.codec.http2.StreamBufferingEncoder$PendingStream v0;
java.lang.Object v4;
java.util.Queue v1;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.StreamBufferingEncoder$PendingStream;
v1 = v0.<io.netty.handler.codec.http2.StreamBufferingEncoder$PendingStream: java.util.Queue frames>;
v2 = interfaceinvoke v1.<java.util.Queue: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = v0.<io.netty.handler.codec.http2.StreamBufferingEncoder$PendingStream: io.netty.channel.ChannelHandlerContext ctx>;
v6 = v0.<io.netty.handler.codec.http2.StreamBufferingEncoder$PendingStream: int streamId>;
virtualinvoke v4.<io.netty.handler.codec.http2.StreamBufferingEncoder$Frame: void send(io.netty.channel.ChannelHandlerContext,int)>(v5, v6);
goto label1;
label2:
return;
}
void close(java.lang.Throwable)
{
java.lang.Throwable v1;
java.util.Iterator v3;
io.netty.handler.codec.http2.StreamBufferingEncoder$PendingStream v0;
java.lang.Object v5;
java.util.Queue v2;
boolean v4;
v0 := @this: io.netty.handler.codec.http2.StreamBufferingEncoder$PendingStream;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.netty.handler.codec.http2.StreamBufferingEncoder$PendingStream: java.util.Queue frames>;
v3 = interfaceinvoke v2.<java.util.Queue: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v5.<io.netty.handler.codec.http2.StreamBufferingEncoder$Frame: void release(java.lang.Throwable)>(v1);
goto label1;
label2:
return;
}
}