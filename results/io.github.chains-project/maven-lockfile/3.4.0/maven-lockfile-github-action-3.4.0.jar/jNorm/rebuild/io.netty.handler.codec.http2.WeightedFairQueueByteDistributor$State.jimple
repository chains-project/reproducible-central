final class io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State extends java.lang.Object implements io.netty.util.internal.PriorityQueueNode
{
private static final byte STATE_IS_ACTIVE;
private static final byte STATE_IS_DISTRIBUTING;
private static final byte STATE_STREAM_ACTIVATED;
io.netty.handler.codec.http2.Http2Stream stream;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent;
io.netty.util.collection.IntObjectMap children;
private final io.netty.util.internal.PriorityQueue pseudoTimeQueue;
final int streamId;
int streamableBytes;
int dependencyTreeDepth;
int activeCountForTree;
private int pseudoTimeQueueIndex;
private int stateOnlyQueueIndex;
long pseudoTimeToWrite;
long pseudoTime;
long totalQueuedWeights;
private byte flags;
short weight;
static final boolean $assertionsDisabled;
final io.netty.handler.codec.http2.WeightedFairQueueByteDistributor this$0;
void <init>(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor, int)
{
int v2;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v1;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor;
v2 := @parameter1: int;
specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void <init>(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor,int,io.netty.handler.codec.http2.Http2Stream,int)>(v1, v2, null, 0);
return;
}
void <init>(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor, io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.Http2Stream v2;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v1;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor;
v2 := @parameter1: io.netty.handler.codec.http2.Http2Stream;
specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void <init>(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor,io.netty.handler.codec.http2.Http2Stream,int)>(v1, v2, 0);
return;
}
void <init>(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor, io.netty.handler.codec.http2.Http2Stream, int)
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
int v3, v4;
io.netty.handler.codec.http2.Http2Stream v2;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v1;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor;
v2 := @parameter1: io.netty.handler.codec.http2.Http2Stream;
v3 := @parameter2: int;
v4 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Stream: int id()>();
specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void <init>(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor,int,io.netty.handler.codec.http2.Http2Stream,int)>(v1, v4, v2, v3);
return;
}
void <init>(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor, int, io.netty.handler.codec.http2.Http2Stream, int)
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$StatePseudoTimeComparator v9;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v1;
io.netty.util.internal.DefaultPriorityQueue v8;
io.netty.util.collection.IntObjectMap v5;
int v2, v4, v6, v7;
io.netty.handler.codec.http2.Http2Stream v3;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.handler.codec.http2.Http2Stream;
v4 := @parameter3: int;
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = staticinvoke <io.netty.util.collection.IntCollections: io.netty.util.collection.IntObjectMap emptyMap()>();
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children> = v5;
v6 = (int) -1;
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int pseudoTimeQueueIndex> = v6;
v7 = (int) -1;
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int stateOnlyQueueIndex> = v7;
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: short weight> = 16;
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.Http2Stream stream> = v3;
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamId> = v2;
v8 = new io.netty.util.internal.DefaultPriorityQueue;
v9 = <io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$StatePseudoTimeComparator: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$StatePseudoTimeComparator INSTANCE>;
specialinvoke v8.<io.netty.util.internal.DefaultPriorityQueue: void <init>(java.util.Comparator,int)>(v9, v4);
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.internal.PriorityQueue pseudoTimeQueue> = v8;
return;
}
boolean isDescendantOf(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0, v1, v2;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v2 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
label1:
if v2 == null goto label3;
if v2 != v1 goto label2;
return 1;
label2:
v2 = v2.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
goto label1;
label3:
return 0;
}
void takeChild(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State, boolean, java.util.List)
{
java.util.List v3;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0, v1;
boolean v2;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v2 := @parameter1: boolean;
v3 := @parameter2: java.util.List;
virtualinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void takeChild(java.util.Iterator,io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State,boolean,java.util.List)>(null, v1, v2, v3);
return;
}
void takeChild(java.util.Iterator, io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State, boolean, java.util.List)
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0, v2, v5;
java.lang.AssertionError v13;
java.lang.Iterable v17;
io.netty.util.collection.IntObjectMap v14, v16, v7, v9;
int v10, v8;
boolean v12, v15, v19, v3;
java.util.Iterator v1, v18;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$ParentChangedEvent v6;
java.util.List v4;
java.lang.Object v11, v20, v21;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: java.util.Iterator;
v2 := @parameter1: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v3 := @parameter2: boolean;
v4 := @parameter3: java.util.List;
v5 = v2.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
if v5 == v0 goto label3;
v6 = new io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$ParentChangedEvent;
specialinvoke v6.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$ParentChangedEvent: void <init>(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State,io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)>(v2, v5);
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v6);
specialinvoke v2.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void setParent(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)>(v0);
if v1 == null goto label1;
interfaceinvoke v1.<java.util.Iterator: void remove()>();
goto label2;
label1:
if v5 == null goto label2;
v7 = v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children>;
v8 = v2.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamId>;
interfaceinvoke v7.<io.netty.util.collection.IntObjectMap: java.lang.Object remove(int)>(v8);
label2:
specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void initChildrenIfEmpty()>();
v9 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children>;
v10 = v2.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamId>;
v11 = interfaceinvoke v9.<io.netty.util.collection.IntObjectMap: java.lang.Object put(int,java.lang.Object)>(v10, v2);
v12 = <io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: boolean $assertionsDisabled>;
if v12 != 0 goto label3;
if v11 == null goto label3;
v13 = new java.lang.AssertionError;
specialinvoke v13.<java.lang.AssertionError: void <init>(java.lang.Object)>("A stream with the same stream ID was already in the child map.");
throw v13;
label3:
if v3 == 0 goto label5;
v14 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children>;
v15 = interfaceinvoke v14.<io.netty.util.collection.IntObjectMap: boolean isEmpty()>();
if v15 != 0 goto label5;
v16 = specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap removeAllChildrenExcept(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)>(v2);
v17 = interfaceinvoke v16.<io.netty.util.collection.IntObjectMap: java.lang.Iterable entries()>();
v18 = interfaceinvoke v17.<java.lang.Iterable: java.util.Iterator iterator()>();
label4:
v19 = interfaceinvoke v18.<java.util.Iterator: boolean hasNext()>();
if v19 == 0 goto label5;
v20 = interfaceinvoke v18.<java.util.Iterator: java.lang.Object next()>();
v21 = interfaceinvoke v20.<io.netty.util.collection.IntObjectMap$PrimitiveEntry: java.lang.Object value()>();
virtualinvoke v2.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void takeChild(java.util.Iterator,io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State,boolean,java.util.List)>(v18, v21, 0, v4);
goto label4;
label5:
return;
}
void removeChild(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0, v1, v10;
long v16, v22;
java.lang.Iterable v14;
java.util.ArrayList v5;
short v19, v20;
io.netty.util.collection.IntObjectMap v11, v13, v2, v6;
int v21, v25, v3, v7, v8;
boolean v12, v23;
java.util.Iterator v15;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v24;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$ParentChangedEvent v9;
java.lang.Object v17, v18, v4;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v2 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children>;
v3 = v1.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamId>;
v4 = interfaceinvoke v2.<io.netty.util.collection.IntObjectMap: java.lang.Object remove(int)>(v3);
if v4 == null goto label3;
v5 = new java.util.ArrayList;
v6 = v1.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children>;
v7 = interfaceinvoke v6.<io.netty.util.collection.IntObjectMap: int size()>();
v8 = 1 + v7;
specialinvoke v5.<java.util.ArrayList: void <init>(int)>(v8);
v9 = new io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$ParentChangedEvent;
v10 = v1.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
specialinvoke v9.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$ParentChangedEvent: void <init>(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State,io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)>(v1, v10);
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v9);
specialinvoke v1.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void setParent(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)>(null);
v11 = v1.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children>;
v12 = interfaceinvoke v11.<io.netty.util.collection.IntObjectMap: boolean isEmpty()>();
if v12 != 0 goto label2;
v13 = v1.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children>;
v14 = interfaceinvoke v13.<io.netty.util.collection.IntObjectMap: java.lang.Iterable entries()>();
v15 = interfaceinvoke v14.<java.lang.Iterable: java.util.Iterator iterator()>();
v16 = specialinvoke v1.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long getTotalWeight()>();
label1:
v17 = interfaceinvoke v15.<java.util.Iterator: java.lang.Object next()>();
v18 = interfaceinvoke v17.<io.netty.util.collection.IntObjectMap$PrimitiveEntry: java.lang.Object value()>();
v19 = v18.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: short weight>;
v20 = v1.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: short weight>;
v21 = v19 * v20;
v22 = v21 / v16;
staticinvoke <java.lang.Math: long max(long,long)>(1L, v22);
v18.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: short weight> = v25;
virtualinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void takeChild(java.util.Iterator,io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State,boolean,java.util.List)>(v15, v18, 0, v5);
v23 = interfaceinvoke v15.<java.util.Iterator: boolean hasNext()>();
if v23 != 0 goto label1;
label2:
v24 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor this$0>;
virtualinvoke v24.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: void notifyParentChanged(java.util.List)>(v5);
label3:
return;
}
private long getTotalWeight()
{
java.util.Iterator v4;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
java.util.Collection v3;
long v1;
short v7;
io.netty.util.collection.IntObjectMap v2;
java.lang.Object v6;
boolean v5;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 = 0L;
v2 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children>;
v3 = interfaceinvoke v2.<io.netty.util.collection.IntObjectMap: java.util.Collection values()>();
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = v6.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: short weight>;
v1 = v1 + v7;
goto label1;
label2:
return v1;
}
private io.netty.util.collection.IntObjectMap removeAllChildrenExcept(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0, v1;
io.netty.util.collection.IntObjectMap v2, v5, v6;
int v3, v7;
java.lang.Object v4;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v2 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children>;
v3 = v1.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamId>;
v4 = interfaceinvoke v2.<io.netty.util.collection.IntObjectMap: java.lang.Object remove(int)>(v3);
v5 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children>;
specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void initChildren()>();
if v4 == null goto label1;
v6 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children>;
v7 = v4.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamId>;
interfaceinvoke v6.<io.netty.util.collection.IntObjectMap: java.lang.Object put(int,java.lang.Object)>(v7, v4);
label1:
return v5;
}
private void setParent(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0, v1, v3, v4, v5;
int v2, v6, v7, v8, v9;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v2 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
if v2 == 0 goto label1;
v3 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
if v3 == null goto label1;
v4 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
virtualinvoke v4.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void removePseudoTimeQueue(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)>(v0);
v5 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
v6 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
v7 = neg v6;
virtualinvoke v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void activeCountChangeForTree(int)>(v7);
label1:
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent> = v1;
if v1 != null goto label2;
v8 = 2147483647;
goto label3;
label2:
v9 = v1.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int dependencyTreeDepth>;
v8 = v9 + 1;
label3:
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int dependencyTreeDepth> = v8;
return;
}
private void initChildrenIfEmpty()
{
io.netty.util.collection.IntObjectMap v1, v2;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children>;
v2 = staticinvoke <io.netty.util.collection.IntCollections: io.netty.util.collection.IntObjectMap emptyMap()>();
if v1 != v2 goto label1;
specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void initChildren()>();
label1:
return;
}
private void initChildren()
{
int v2;
io.netty.util.collection.IntObjectHashMap v1;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 = new io.netty.util.collection.IntObjectHashMap;
v2 = <io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: int INITIAL_CHILDREN_MAP_SIZE>;
specialinvoke v1.<io.netty.util.collection.IntObjectHashMap: void <init>(int)>(v2);
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children> = v1;
return;
}
void write(int, io.netty.handler.codec.http2.StreamByteDistributor$Writer) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Throwable v7;
java.lang.Object[] v9;
io.netty.handler.codec.http2.StreamByteDistributor$Writer v2;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
java.lang.AssertionError v5;
io.netty.handler.codec.http2.Http2Exception v10;
int v1;
io.netty.handler.codec.http2.Http2Error v8;
io.netty.handler.codec.http2.Http2Stream v4, v6;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: int;
v2 := @parameter1: io.netty.handler.codec.http2.StreamByteDistributor$Writer;
v3 = <io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
v4 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.Http2Stream stream>;
if v4 != null goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.Http2Stream stream>;
interfaceinvoke v2.<io.netty.handler.codec.http2.StreamByteDistributor$Writer: void write(io.netty.handler.codec.http2.Http2Stream,int)>(v6, v1);
label2:
goto label4;
label3:
v7 := @caughtexception;
v8 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error INTERNAL_ERROR>;
v9 = newarray (java.lang.Object)[0];
v10 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.Throwable,java.lang.String,java.lang.Object[])>(v8, v7, "byte distribution write error", v9);
throw v10;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
void activeCountChangeForTree(int)
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0, v13, v18, v22, v25, v26, v8;
io.netty.util.internal.PriorityQueue v14;
java.lang.AssertionError v16, v5;
int v1, v10, v11, v12, v17, v19, v21, v23, v3, v4, v6, v7;
java.lang.String v20;
boolean v15, v2, v24, v9;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: int;
v2 = <io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
v4 = v3 + v1;
if v4 >= 0 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
v7 = v6 + v1;
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree> = v7;
v8 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
if v8 == null goto label5;
v9 = <io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: boolean $assertionsDisabled>;
if v9 != 0 goto label2;
v10 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
if v10 != v1 goto label2;
v11 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int pseudoTimeQueueIndex>;
v12 = (int) -1;
if v11 == v12 goto label2;
v13 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
v14 = v13.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.internal.PriorityQueue pseudoTimeQueue>;
v15 = interfaceinvoke v14.<io.netty.util.internal.PriorityQueue: boolean containsTyped(java.lang.Object)>(v0);
if v15 != 0 goto label2;
v16 = new java.lang.AssertionError;
v17 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamId>;
v18 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
v19 = v18.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamId>;
v20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v17, v1, v19) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("State[\u0001].activeCountForTree changed from 0 to \u0001 is in a pseudoTimeQueue, but not in parent[ \u0001]\'s pseudoTimeQueue");
specialinvoke v16.<java.lang.AssertionError: void <init>(java.lang.Object)>(v20);
throw v16;
label2:
v21 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
if v21 != 0 goto label3;
v22 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
virtualinvoke v22.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void removePseudoTimeQueue(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)>(v0);
goto label4;
label3:
v23 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
if v23 != v1 goto label4;
v24 = virtualinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: boolean isDistributing()>();
if v24 != 0 goto label4;
v25 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
virtualinvoke v25.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void offerAndInitializePseudoTime(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)>(v0);
label4:
v26 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
virtualinvoke v26.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void activeCountChangeForTree(int)>(v1);
label5:
return;
}
void updateStreamableBytes(int, boolean)
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
int v1, v4;
boolean v2, v3;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: boolean isActive()>();
if v3 == v2 goto label2;
if v2 == 0 goto label1;
virtualinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void activeCountChangeForTree(int)>(1);
specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void setActive()>();
goto label2;
label1:
v4 = (int) -1;
virtualinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void activeCountChangeForTree(int)>(v4);
specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void unsetActive()>();
label2:
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamableBytes> = v1;
return;
}
void updatePseudoTime(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State, int, long)
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0, v1;
long v10, v12, v13, v3, v7, v8, v9;
java.lang.AssertionError v6;
short v11;
int v2, v5;
boolean v4;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v2 := @parameter1: int;
v3 := @parameter2: long;
v4 = <io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: boolean $assertionsDisabled>;
if v4 != 0 goto label2;
v5 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamId>;
if v5 == 0 goto label1;
if v2 >= 0 goto label2;
label1:
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label2:
v7 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long pseudoTimeToWrite>;
v8 = v1.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long pseudoTime>;
v9 = staticinvoke <java.lang.Math: long min(long,long)>(v7, v8);
v10 = v2 * v3;
v11 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: short weight>;
v12 = v10 / v11;
v13 = v9 + v12;
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long pseudoTimeToWrite> = v13;
return;
}
void offerAndInitializePseudoTime(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)
{
long v2;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0, v1;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v2 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long pseudoTime>;
v1.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long pseudoTimeToWrite> = v2;
virtualinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void offerPseudoTimeQueue(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)>(v1);
return;
}
void offerPseudoTimeQueue(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)
{
short v4;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0, v1;
io.netty.util.internal.PriorityQueue v2;
long v3, v5;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v2 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.internal.PriorityQueue pseudoTimeQueue>;
interfaceinvoke v2.<io.netty.util.internal.PriorityQueue: boolean offer(java.lang.Object)>(v1);
v3 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long totalQueuedWeights>;
v4 = v1.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: short weight>;
v5 = v3 + v4;
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long totalQueuedWeights> = v5;
return;
}
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State pollPseudoTimeQueue()
{
short v4;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
io.netty.util.internal.PriorityQueue v1;
java.lang.Object v2;
long v3, v5;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.internal.PriorityQueue pseudoTimeQueue>;
v2 = interfaceinvoke v1.<io.netty.util.internal.PriorityQueue: java.lang.Object poll()>();
v3 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long totalQueuedWeights>;
v4 = v2.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: short weight>;
v5 = v3 - v4;
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long totalQueuedWeights> = v5;
return v2;
}
void removePseudoTimeQueue(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)
{
short v5;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0, v1;
io.netty.util.internal.PriorityQueue v2;
long v4, v6;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v2 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.internal.PriorityQueue pseudoTimeQueue>;
v3 = interfaceinvoke v2.<io.netty.util.internal.PriorityQueue: boolean removeTyped(java.lang.Object)>(v1);
if v3 == 0 goto label1;
v4 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long totalQueuedWeights>;
v5 = v1.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: short weight>;
v6 = v4 - v5;
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long totalQueuedWeights> = v6;
label1:
return;
}
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State peekPseudoTimeQueue()
{
java.lang.Object v2;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
io.netty.util.internal.PriorityQueue v1;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.internal.PriorityQueue pseudoTimeQueue>;
v2 = interfaceinvoke v1.<io.netty.util.internal.PriorityQueue: java.lang.Object peek()>();
return v2;
}
void close()
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
virtualinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void updateStreamableBytes(int,boolean)>(0, 0);
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.Http2Stream stream> = null;
return;
}
boolean wasStreamReservedOrActivated()
{
byte v1, v2;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: byte flags>;
v2 = v1 & 4;
if v2 == 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
void setStreamReservedOrActivated()
{
byte v1, v2;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: byte flags>;
v2 = v1 | 4;
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: byte flags> = v2;
return;
}
boolean isActive()
{
byte v1, v2;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: byte flags>;
v2 = v1 & 1;
if v2 == 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
private void setActive()
{
byte v1, v2;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: byte flags>;
v2 = v1 | 1;
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: byte flags> = v2;
return;
}
private void unsetActive()
{
byte v1, v2;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: byte flags>;
v2 = v1 & -2;
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: byte flags> = v2;
return;
}
boolean isDistributing()
{
byte v1, v2;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: byte flags>;
v2 = v1 & 2;
if v2 == 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
void setDistributing()
{
byte v1, v2;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: byte flags>;
v2 = v1 | 2;
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: byte flags> = v2;
return;
}
void unsetDistributing()
{
byte v1, v2;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: byte flags>;
v2 = v1 & -3;
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: byte flags> = v2;
return;
}
public int priorityQueueIndex(io.netty.util.internal.DefaultPriorityQueue)
{
io.netty.util.internal.DefaultPriorityQueue v1;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
io.netty.util.internal.PriorityQueue v3;
int v4;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v2;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: io.netty.util.internal.DefaultPriorityQueue;
v2 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor this$0>;
v3 = v2.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.util.internal.PriorityQueue stateOnlyRemovalQueue>;
if v1 != v3 goto label1;
v4 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int stateOnlyQueueIndex>;
goto label2;
label1:
v4 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int pseudoTimeQueueIndex>;
label2:
return v4;
}
public void priorityQueueIndex(io.netty.util.internal.DefaultPriorityQueue, int)
{
io.netty.util.internal.DefaultPriorityQueue v1;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
io.netty.util.internal.PriorityQueue v4;
int v2;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v3;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: io.netty.util.internal.DefaultPriorityQueue;
v2 := @parameter1: int;
v3 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor this$0>;
v4 = v3.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.util.internal.PriorityQueue stateOnlyRemovalQueue>;
if v1 != v4 goto label1;
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int stateOnlyQueueIndex> = v2;
goto label2;
label1:
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int pseudoTimeQueueIndex> = v2;
label2:
return;
}
public java.lang.String toString()
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0;
int v2, v3, v4;
java.lang.StringBuilder v1;
java.lang.String v5;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 = new java.lang.StringBuilder;
v2 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
if v2 <= 0 goto label1;
v3 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
goto label2;
label1:
v3 = 1;
label2:
v4 = 256 * v3;
specialinvoke v1.<java.lang.StringBuilder: void <init>(int)>(v4);
specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void toString(java.lang.StringBuilder)>(v1);
v5 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v5;
}
private void toString(java.lang.StringBuilder)
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v0, v31, v34;
byte v21;
boolean v37, v40;
java.lang.StringBuilder v1, v10, v11, v13, v14, v16, v17, v19, v2, v20, v22, v23, v26, v27, v29, v30, v35, v4, v5, v7, v8;
io.netty.util.internal.PriorityQueue v24, v36, v38;
long v15, v18;
int v12, v25, v28, v3, v32, v33, v42, v43, v6, v9;
java.util.Iterator v39;
java.lang.Object v41;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v1 := @parameter0: java.lang.StringBuilder;
v2 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{streamId ");
v3 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamId>;
v4 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v3);
v5 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" streamableBytes ");
v6 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamableBytes>;
v7 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v6);
v8 = virtualinvoke v7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" activeCountForTree ");
v9 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
v10 = virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v9);
v11 = virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pseudoTimeQueueIndex ");
v12 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int pseudoTimeQueueIndex>;
v13 = virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v12);
v14 = virtualinvoke v13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pseudoTimeToWrite ");
v15 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long pseudoTimeToWrite>;
v16 = virtualinvoke v14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(v15);
v17 = virtualinvoke v16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pseudoTime ");
v18 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long pseudoTime>;
v19 = virtualinvoke v17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(v18);
v20 = virtualinvoke v19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" flags ");
v21 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: byte flags>;
v22 = virtualinvoke v20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v21);
v23 = virtualinvoke v22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pseudoTimeQueue.size() ");
v24 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.internal.PriorityQueue pseudoTimeQueue>;
v25 = interfaceinvoke v24.<io.netty.util.internal.PriorityQueue: int size()>();
v26 = virtualinvoke v23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v25);
v27 = virtualinvoke v26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stateOnlyQueueIndex ");
v28 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int stateOnlyQueueIndex>;
v29 = virtualinvoke v27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v28);
v30 = virtualinvoke v29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parent.streamId ");
v31 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
if v31 != null goto label1;
v32 = (int) -1;
v33 = v32;
goto label2;
label1:
v34 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
v33 = v34.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamId>;
label2:
v35 = virtualinvoke v30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v33);
virtualinvoke v35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} [");
v36 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.internal.PriorityQueue pseudoTimeQueue>;
v37 = interfaceinvoke v36.<io.netty.util.internal.PriorityQueue: boolean isEmpty()>();
if v37 != 0 goto label5;
v38 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.internal.PriorityQueue pseudoTimeQueue>;
v39 = interfaceinvoke v38.<io.netty.util.internal.PriorityQueue: java.util.Iterator iterator()>();
label3:
v40 = interfaceinvoke v39.<java.util.Iterator: boolean hasNext()>();
if v40 == 0 goto label4;
v41 = interfaceinvoke v39.<java.util.Iterator: java.lang.Object next()>();
specialinvoke v41.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void toString(java.lang.StringBuilder)>(v1);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
goto label3;
label4:
v42 = virtualinvoke v1.<java.lang.StringBuilder: int length()>();
v43 = v42 - 2;
virtualinvoke v1.<java.lang.StringBuilder: void setLength(int)>(v43);
label5:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/codec/http2/WeightedFairQueueByteDistributor;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: boolean $assertionsDisabled> = v2;
return;
}
}