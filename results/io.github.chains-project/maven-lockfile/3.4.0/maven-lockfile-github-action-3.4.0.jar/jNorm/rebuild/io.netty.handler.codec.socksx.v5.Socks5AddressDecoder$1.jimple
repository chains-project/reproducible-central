class io.netty.handler.codec.socksx.v5.Socks5AddressDecoder$1 extends java.lang.Object implements io.netty.handler.codec.socksx.v5.Socks5AddressDecoder
{
private static final int IPv6_LEN;
void <init>()
{
io.netty.handler.codec.socksx.v5.Socks5AddressDecoder$1 v0;
v0 := @this: io.netty.handler.codec.socksx.v5.Socks5AddressDecoder$1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.lang.String decodeAddress(io.netty.handler.codec.socksx.v5.Socks5AddressType, io.netty.buffer.ByteBuf) throws java.lang.Exception
{
byte[] v15, v19;
short v23, v7;
byte v22;
io.netty.buffer.ByteBuf v2;
java.nio.charset.Charset v9;
int v13, v14, v16, v17, v4, v8;
java.lang.String v10, v18, v20, v24, v5;
boolean v12;
io.netty.handler.codec.DecoderException v21;
io.netty.handler.codec.socksx.v5.Socks5AddressType v1, v11, v3, v6;
io.netty.handler.codec.socksx.v5.Socks5AddressDecoder$1 v0;
v0 := @this: io.netty.handler.codec.socksx.v5.Socks5AddressDecoder$1;
v1 := @parameter0: io.netty.handler.codec.socksx.v5.Socks5AddressType;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 = <io.netty.handler.codec.socksx.v5.Socks5AddressType: io.netty.handler.codec.socksx.v5.Socks5AddressType IPv4>;
if v1 != v3 goto label1;
v4 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readInt()>();
v5 = staticinvoke <io.netty.util.NetUtil: java.lang.String intToIpAddress(int)>(v4);
return v5;
label1:
v6 = <io.netty.handler.codec.socksx.v5.Socks5AddressType: io.netty.handler.codec.socksx.v5.Socks5AddressType DOMAIN>;
if v1 != v6 goto label2;
v7 = virtualinvoke v2.<io.netty.buffer.ByteBuf: short readUnsignedByte()>();
v8 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
v9 = <io.netty.util.CharsetUtil: java.nio.charset.Charset US_ASCII>;
v10 = virtualinvoke v2.<io.netty.buffer.ByteBuf: java.lang.String toString(int,int,java.nio.charset.Charset)>(v8, v7, v9);
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf skipBytes(int)>(v7);
return v10;
label2:
v11 = <io.netty.handler.codec.socksx.v5.Socks5AddressType: io.netty.handler.codec.socksx.v5.Socks5AddressType IPv6>;
if v1 != v11 goto label4;
v12 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean hasArray()>();
if v12 == 0 goto label3;
v13 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
v14 = v13 + 16;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readerIndex(int)>(v14);
v15 = virtualinvoke v2.<io.netty.buffer.ByteBuf: byte[] array()>();
v16 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v17 = v16 + v13;
v18 = staticinvoke <io.netty.util.NetUtil: java.lang.String bytesToIpAddress(byte[],int,int)>(v15, v17, 16);
return v18;
label3:
v19 = newarray (byte)[16];
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readBytes(byte[])>(v19);
v20 = staticinvoke <io.netty.util.NetUtil: java.lang.String bytesToIpAddress(byte[])>(v19);
return v20;
label4:
v21 = new io.netty.handler.codec.DecoderException;
v22 = virtualinvoke v1.<io.netty.handler.codec.socksx.v5.Socks5AddressType: byte byteValue()>();
v23 = v22 & 255;
v24 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (short)>(v23) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unsupported address type: \u0001");
specialinvoke v21.<io.netty.handler.codec.DecoderException: void <init>(java.lang.String)>(v24);
throw v21;
}
}