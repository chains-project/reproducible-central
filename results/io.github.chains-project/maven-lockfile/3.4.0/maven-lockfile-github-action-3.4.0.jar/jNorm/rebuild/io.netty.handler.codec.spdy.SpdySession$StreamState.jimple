final class io.netty.handler.codec.spdy.SpdySession$StreamState extends java.lang.Object
{
private final byte priority;
private boolean remoteSideClosed;
private boolean localSideClosed;
private boolean receivedReply;
private final java.util.concurrent.atomic.AtomicInteger sendWindowSize;
private final java.util.concurrent.atomic.AtomicInteger receiveWindowSize;
private int receiveWindowSizeLowerBound;
private final java.util.Queue pendingWriteQueue;
void <init>(byte, boolean, boolean, int, int)
{
io.netty.handler.codec.spdy.SpdySession$StreamState v0;
byte v1;
java.util.concurrent.atomic.AtomicInteger v7, v8;
int v4, v5;
boolean v2, v3;
java.util.concurrent.ConcurrentLinkedQueue v6;
v0 := @this: io.netty.handler.codec.spdy.SpdySession$StreamState;
v1 := @parameter0: byte;
v2 := @parameter1: boolean;
v3 := @parameter2: boolean;
v4 := @parameter3: int;
v5 := @parameter4: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v6 = new java.util.concurrent.ConcurrentLinkedQueue;
specialinvoke v6.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();
v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: java.util.Queue pendingWriteQueue> = v6;
v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: byte priority> = v1;
v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: boolean remoteSideClosed> = v2;
v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: boolean localSideClosed> = v3;
v7 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v7.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(v4);
v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: java.util.concurrent.atomic.AtomicInteger sendWindowSize> = v7;
v8 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v8.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(v5);
v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: java.util.concurrent.atomic.AtomicInteger receiveWindowSize> = v8;
return;
}
byte getPriority()
{
byte v1;
io.netty.handler.codec.spdy.SpdySession$StreamState v0;
v0 := @this: io.netty.handler.codec.spdy.SpdySession$StreamState;
v1 = v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: byte priority>;
return v1;
}
boolean isRemoteSideClosed()
{
io.netty.handler.codec.spdy.SpdySession$StreamState v0;
boolean v1;
v0 := @this: io.netty.handler.codec.spdy.SpdySession$StreamState;
v1 = v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: boolean remoteSideClosed>;
return v1;
}
void closeRemoteSide()
{
io.netty.handler.codec.spdy.SpdySession$StreamState v0;
v0 := @this: io.netty.handler.codec.spdy.SpdySession$StreamState;
v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: boolean remoteSideClosed> = 1;
return;
}
boolean isLocalSideClosed()
{
io.netty.handler.codec.spdy.SpdySession$StreamState v0;
boolean v1;
v0 := @this: io.netty.handler.codec.spdy.SpdySession$StreamState;
v1 = v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: boolean localSideClosed>;
return v1;
}
void closeLocalSide()
{
io.netty.handler.codec.spdy.SpdySession$StreamState v0;
v0 := @this: io.netty.handler.codec.spdy.SpdySession$StreamState;
v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: boolean localSideClosed> = 1;
return;
}
boolean hasReceivedReply()
{
io.netty.handler.codec.spdy.SpdySession$StreamState v0;
boolean v1;
v0 := @this: io.netty.handler.codec.spdy.SpdySession$StreamState;
v1 = v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: boolean receivedReply>;
return v1;
}
void receivedReply()
{
io.netty.handler.codec.spdy.SpdySession$StreamState v0;
v0 := @this: io.netty.handler.codec.spdy.SpdySession$StreamState;
v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: boolean receivedReply> = 1;
return;
}
int getSendWindowSize()
{
int v2;
io.netty.handler.codec.spdy.SpdySession$StreamState v0;
java.util.concurrent.atomic.AtomicInteger v1;
v0 := @this: io.netty.handler.codec.spdy.SpdySession$StreamState;
v1 = v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: java.util.concurrent.atomic.AtomicInteger sendWindowSize>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
return v2;
}
int updateSendWindowSize(int)
{
io.netty.handler.codec.spdy.SpdySession$StreamState v0;
java.util.concurrent.atomic.AtomicInteger v2;
int v1, v3;
v0 := @this: io.netty.handler.codec.spdy.SpdySession$StreamState;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: java.util.concurrent.atomic.AtomicInteger sendWindowSize>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v1);
return v3;
}
int updateReceiveWindowSize(int)
{
io.netty.handler.codec.spdy.SpdySession$StreamState v0;
java.util.concurrent.atomic.AtomicInteger v2;
int v1, v3;
v0 := @this: io.netty.handler.codec.spdy.SpdySession$StreamState;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: java.util.concurrent.atomic.AtomicInteger receiveWindowSize>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v1);
return v3;
}
int getReceiveWindowSizeLowerBound()
{
int v1;
io.netty.handler.codec.spdy.SpdySession$StreamState v0;
v0 := @this: io.netty.handler.codec.spdy.SpdySession$StreamState;
v1 = v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: int receiveWindowSizeLowerBound>;
return v1;
}
void setReceiveWindowSizeLowerBound(int)
{
int v1;
io.netty.handler.codec.spdy.SpdySession$StreamState v0;
v0 := @this: io.netty.handler.codec.spdy.SpdySession$StreamState;
v1 := @parameter0: int;
v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: int receiveWindowSizeLowerBound> = v1;
return;
}
boolean putPendingWrite(io.netty.handler.codec.spdy.SpdySession$PendingWrite)
{
io.netty.handler.codec.spdy.SpdySession$StreamState v0;
io.netty.handler.codec.spdy.SpdySession$PendingWrite v1;
java.util.Queue v2;
boolean v3;
v0 := @this: io.netty.handler.codec.spdy.SpdySession$StreamState;
v1 := @parameter0: io.netty.handler.codec.spdy.SpdySession$PendingWrite;
v2 = v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: java.util.Queue pendingWriteQueue>;
v3 = interfaceinvoke v2.<java.util.Queue: boolean offer(java.lang.Object)>(v1);
return v3;
}
io.netty.handler.codec.spdy.SpdySession$PendingWrite getPendingWrite()
{
java.lang.Object v2;
java.util.Queue v1;
io.netty.handler.codec.spdy.SpdySession$StreamState v0;
v0 := @this: io.netty.handler.codec.spdy.SpdySession$StreamState;
v1 = v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: java.util.Queue pendingWriteQueue>;
v2 = interfaceinvoke v1.<java.util.Queue: java.lang.Object peek()>();
return v2;
}
io.netty.handler.codec.spdy.SpdySession$PendingWrite removePendingWrite()
{
java.lang.Object v2;
java.util.Queue v1;
io.netty.handler.codec.spdy.SpdySession$StreamState v0;
v0 := @this: io.netty.handler.codec.spdy.SpdySession$StreamState;
v1 = v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: java.util.Queue pendingWriteQueue>;
v2 = interfaceinvoke v1.<java.util.Queue: java.lang.Object poll()>();
return v2;
}
void clearPendingWrites(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.handler.codec.spdy.SpdySession$StreamState v0;
java.lang.Object v3;
java.util.Queue v2;
v0 := @this: io.netty.handler.codec.spdy.SpdySession$StreamState;
v1 := @parameter0: java.lang.Throwable;
label1:
v2 = v0.<io.netty.handler.codec.spdy.SpdySession$StreamState: java.util.Queue pendingWriteQueue>;
v3 = interfaceinvoke v2.<java.util.Queue: java.lang.Object poll()>();
if v3 == null goto label2;
virtualinvoke v3.<io.netty.handler.codec.spdy.SpdySession$PendingWrite: void fail(java.lang.Throwable)>(v1);
goto label1;
label2:
return;
}
}