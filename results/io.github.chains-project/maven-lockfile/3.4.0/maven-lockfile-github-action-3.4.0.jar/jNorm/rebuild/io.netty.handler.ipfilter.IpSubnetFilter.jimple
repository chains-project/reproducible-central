public class io.netty.handler.ipfilter.IpSubnetFilter extends io.netty.handler.ipfilter.AbstractRemoteAddressFilter
{
private final boolean acceptIfNotFound;
private final java.util.List ipv4Rules;
private final java.util.List ipv6Rules;
private final io.netty.handler.ipfilter.IpFilterRuleType ipFilterRuleTypeIPv4;
private final io.netty.handler.ipfilter.IpFilterRuleType ipFilterRuleTypeIPv6;
public transient void <init>(io.netty.handler.ipfilter.IpSubnetFilterRule[])
{
java.util.List v3;
io.netty.handler.ipfilter.IpSubnetFilter v0;
io.netty.handler.ipfilter.IpSubnetFilterRule[] v1;
java.lang.Object v2;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilter;
v1 := @parameter0: io.netty.handler.ipfilter.IpSubnetFilterRule[];
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "rules");
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
specialinvoke v0.<io.netty.handler.ipfilter.IpSubnetFilter: void <init>(boolean,java.util.List)>(1, v3);
return;
}
public transient void <init>(boolean, io.netty.handler.ipfilter.IpSubnetFilterRule[])
{
java.util.List v4;
io.netty.handler.ipfilter.IpSubnetFilter v0;
io.netty.handler.ipfilter.IpSubnetFilterRule[] v2;
java.lang.Object v3;
boolean v1;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilter;
v1 := @parameter0: boolean;
v2 := @parameter1: io.netty.handler.ipfilter.IpSubnetFilterRule[];
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "rules");
v4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v3);
specialinvoke v0.<io.netty.handler.ipfilter.IpSubnetFilter: void <init>(boolean,java.util.List)>(v1, v4);
return;
}
public void <init>(java.util.List)
{
java.util.List v1;
io.netty.handler.ipfilter.IpSubnetFilter v0;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilter;
v1 := @parameter0: java.util.List;
specialinvoke v0.<io.netty.handler.ipfilter.IpSubnetFilter: void <init>(boolean,java.util.List)>(1, v1);
return;
}
public void <init>(boolean, java.util.List)
{
io.netty.handler.ipfilter.IpFilterRule v12;
java.util.ArrayList v7, v8;
int v3, v4, v5, v6;
boolean v1, v10, v13;
java.util.Iterator v9;
java.util.List v2, v22, v23;
io.netty.handler.ipfilter.IpSubnetFilter v0;
java.lang.Object v11;
io.netty.handler.ipfilter.IpFilterRuleType v14, v15, v16, v17, v18, v19, v20, v21;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilter;
v1 := @parameter0: boolean;
v2 := @parameter1: java.util.List;
specialinvoke v0.<io.netty.handler.ipfilter.AbstractRemoteAddressFilter: void <init>()>();
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "rules");
v0.<io.netty.handler.ipfilter.IpSubnetFilter: boolean acceptIfNotFound> = v1;
v3 = 0;
v4 = 0;
v5 = 0;
v6 = 0;
v7 = new java.util.ArrayList;
specialinvoke v7.<java.util.ArrayList: void <init>()>();
v8 = new java.util.ArrayList;
specialinvoke v8.<java.util.ArrayList: void <init>()>();
v9 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label01:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label05;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v11, "rule");
v12 = virtualinvoke v11.<io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRule getFilterRule()>();
v13 = v12 instanceof io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule;
if v13 == 0 goto label03;
interfaceinvoke v7.<java.util.List: boolean add(java.lang.Object)>(v11);
v14 = virtualinvoke v11.<io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRuleType ruleType()>();
v15 = <io.netty.handler.ipfilter.IpFilterRuleType: io.netty.handler.ipfilter.IpFilterRuleType ACCEPT>;
if v14 != v15 goto label02;
v3 = v3 + 1;
goto label01;
label02:
v4 = v4 + 1;
goto label01;
label03:
interfaceinvoke v8.<java.util.List: boolean add(java.lang.Object)>(v11);
v16 = virtualinvoke v11.<io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRuleType ruleType()>();
v17 = <io.netty.handler.ipfilter.IpFilterRuleType: io.netty.handler.ipfilter.IpFilterRuleType ACCEPT>;
if v16 != v17 goto label04;
v5 = v5 + 1;
goto label01;
label04:
v6 = v6 + 1;
goto label01;
label05:
if v3 != 0 goto label06;
if v4 <= 0 goto label06;
v18 = <io.netty.handler.ipfilter.IpFilterRuleType: io.netty.handler.ipfilter.IpFilterRuleType REJECT>;
v0.<io.netty.handler.ipfilter.IpSubnetFilter: io.netty.handler.ipfilter.IpFilterRuleType ipFilterRuleTypeIPv4> = v18;
goto label08;
label06:
if v3 <= 0 goto label07;
if v4 != 0 goto label07;
v19 = <io.netty.handler.ipfilter.IpFilterRuleType: io.netty.handler.ipfilter.IpFilterRuleType ACCEPT>;
v0.<io.netty.handler.ipfilter.IpSubnetFilter: io.netty.handler.ipfilter.IpFilterRuleType ipFilterRuleTypeIPv4> = v19;
goto label08;
label07:
v0.<io.netty.handler.ipfilter.IpSubnetFilter: io.netty.handler.ipfilter.IpFilterRuleType ipFilterRuleTypeIPv4> = null;
label08:
if v5 != 0 goto label09;
if v6 <= 0 goto label09;
v20 = <io.netty.handler.ipfilter.IpFilterRuleType: io.netty.handler.ipfilter.IpFilterRuleType REJECT>;
v0.<io.netty.handler.ipfilter.IpSubnetFilter: io.netty.handler.ipfilter.IpFilterRuleType ipFilterRuleTypeIPv6> = v20;
goto label11;
label09:
if v5 <= 0 goto label10;
if v6 != 0 goto label10;
v21 = <io.netty.handler.ipfilter.IpFilterRuleType: io.netty.handler.ipfilter.IpFilterRuleType ACCEPT>;
v0.<io.netty.handler.ipfilter.IpSubnetFilter: io.netty.handler.ipfilter.IpFilterRuleType ipFilterRuleTypeIPv6> = v21;
goto label11;
label10:
v0.<io.netty.handler.ipfilter.IpSubnetFilter: io.netty.handler.ipfilter.IpFilterRuleType ipFilterRuleTypeIPv6> = null;
label11:
v22 = staticinvoke <io.netty.handler.ipfilter.IpSubnetFilter: java.util.List sortAndFilter(java.util.List)>(v7);
v0.<io.netty.handler.ipfilter.IpSubnetFilter: java.util.List ipv4Rules> = v22;
v23 = staticinvoke <io.netty.handler.ipfilter.IpSubnetFilter: java.util.List sortAndFilter(java.util.List)>(v8);
v0.<io.netty.handler.ipfilter.IpSubnetFilter: java.util.List ipv6Rules> = v23;
return;
}
protected boolean accept(io.netty.channel.ChannelHandlerContext, java.net.InetSocketAddress)
{
java.net.InetAddress v3;
io.netty.channel.ChannelHandlerContext v1;
int v19, v7;
boolean v13, v16, v25, v28, v29, v4;
java.net.InetSocketAddress v2;
java.util.List v17, v21, v5, v9;
io.netty.handler.ipfilter.IpSubnetFilter v0;
java.lang.Object v10, v22;
io.netty.handler.ipfilter.IpSubnetFilterRuleComparator v18, v6;
io.netty.handler.ipfilter.IpFilterRuleType v11, v12, v14, v15, v20, v23, v24, v26, v27, v8;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilter;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.net.InetSocketAddress;
v3 = virtualinvoke v2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
v4 = v3 instanceof java.net.Inet4Address;
if v4 == 0 goto label06;
v5 = v0.<io.netty.handler.ipfilter.IpSubnetFilter: java.util.List ipv4Rules>;
v6 = <io.netty.handler.ipfilter.IpSubnetFilterRuleComparator: io.netty.handler.ipfilter.IpSubnetFilterRuleComparator INSTANCE>;
v7 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>(v5, v2, v6);
if v7 < 0 goto label12;
v8 = v0.<io.netty.handler.ipfilter.IpSubnetFilter: io.netty.handler.ipfilter.IpFilterRuleType ipFilterRuleTypeIPv4>;
if v8 != null goto label03;
v9 = v0.<io.netty.handler.ipfilter.IpSubnetFilter: java.util.List ipv4Rules>;
v10 = interfaceinvoke v9.<java.util.List: java.lang.Object get(int)>(v7);
v11 = virtualinvoke v10.<io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRuleType ruleType()>();
v12 = <io.netty.handler.ipfilter.IpFilterRuleType: io.netty.handler.ipfilter.IpFilterRuleType ACCEPT>;
if v11 != v12 goto label01;
v13 = 1;
goto label02;
label01:
v13 = 0;
label02:
return v13;
label03:
v14 = v0.<io.netty.handler.ipfilter.IpSubnetFilter: io.netty.handler.ipfilter.IpFilterRuleType ipFilterRuleTypeIPv4>;
v15 = <io.netty.handler.ipfilter.IpFilterRuleType: io.netty.handler.ipfilter.IpFilterRuleType ACCEPT>;
if v14 != v15 goto label04;
v16 = 1;
goto label05;
label04:
v16 = 0;
label05:
return v16;
label06:
v17 = v0.<io.netty.handler.ipfilter.IpSubnetFilter: java.util.List ipv6Rules>;
v18 = <io.netty.handler.ipfilter.IpSubnetFilterRuleComparator: io.netty.handler.ipfilter.IpSubnetFilterRuleComparator INSTANCE>;
v19 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>(v17, v2, v18);
if v19 < 0 goto label12;
v20 = v0.<io.netty.handler.ipfilter.IpSubnetFilter: io.netty.handler.ipfilter.IpFilterRuleType ipFilterRuleTypeIPv6>;
if v20 != null goto label09;
v21 = v0.<io.netty.handler.ipfilter.IpSubnetFilter: java.util.List ipv6Rules>;
v22 = interfaceinvoke v21.<java.util.List: java.lang.Object get(int)>(v19);
v23 = virtualinvoke v22.<io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRuleType ruleType()>();
v24 = <io.netty.handler.ipfilter.IpFilterRuleType: io.netty.handler.ipfilter.IpFilterRuleType ACCEPT>;
if v23 != v24 goto label07;
v25 = 1;
goto label08;
label07:
v25 = 0;
label08:
return v25;
label09:
v26 = v0.<io.netty.handler.ipfilter.IpSubnetFilter: io.netty.handler.ipfilter.IpFilterRuleType ipFilterRuleTypeIPv6>;
v27 = <io.netty.handler.ipfilter.IpFilterRuleType: io.netty.handler.ipfilter.IpFilterRuleType ACCEPT>;
if v26 != v27 goto label10;
v28 = 1;
goto label11;
label10:
v28 = 0;
label11:
return v28;
label12:
v29 = v0.<io.netty.handler.ipfilter.IpSubnetFilter: boolean acceptIfNotFound>;
return v29;
}
private static java.util.List sortAndFilter(java.util.List)
{
java.util.Iterator v1;
java.net.InetSocketAddress v8;
java.util.ArrayList v2;
java.util.List v0;
io.netty.handler.ipfilter.IpSubnetFilterRule v5;
java.lang.Object v4, v7;
java.lang.String v9;
boolean v10, v3, v6;
v0 := @parameter0: java.util.List;
staticinvoke <java.util.Collections: void sort(java.util.List)>(v0);
v1 = interfaceinvoke v0.<java.util.List: java.util.Iterator iterator()>();
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = interfaceinvoke v1.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label1;
v4 = interfaceinvoke v1.<java.util.Iterator: java.lang.Object next()>();
goto label2;
label1:
v4 = null;
label2:
v5 = v4;
if v4 == null goto label3;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v4);
label3:
v6 = interfaceinvoke v1.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label4;
v7 = interfaceinvoke v1.<java.util.Iterator: java.lang.Object next()>();
v8 = new java.net.InetSocketAddress;
v9 = virtualinvoke v7.<io.netty.handler.ipfilter.IpSubnetFilterRule: java.lang.String getIpAddress()>();
specialinvoke v8.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(v9, 1);
v10 = virtualinvoke v5.<io.netty.handler.ipfilter.IpSubnetFilterRule: boolean matches(java.net.InetSocketAddress)>(v8);
if v10 != 0 goto label3;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v7);
v5 = v7;
goto label3;
label4:
return v2;
}
}