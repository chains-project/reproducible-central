public class io.netty.handler.ipfilter.RuleBasedIpFilter extends io.netty.handler.ipfilter.AbstractRemoteAddressFilter
{
private final boolean acceptIfNotFound;
private final java.util.List rules;
public transient void <init>(io.netty.handler.ipfilter.IpFilterRule[])
{
io.netty.handler.ipfilter.IpFilterRule[] v1;
io.netty.handler.ipfilter.RuleBasedIpFilter v0;
v0 := @this: io.netty.handler.ipfilter.RuleBasedIpFilter;
v1 := @parameter0: io.netty.handler.ipfilter.IpFilterRule[];
specialinvoke v0.<io.netty.handler.ipfilter.RuleBasedIpFilter: void <init>(boolean,io.netty.handler.ipfilter.IpFilterRule[])>(1, v1);
return;
}
public transient void <init>(boolean, io.netty.handler.ipfilter.IpFilterRule[])
{
io.netty.handler.ipfilter.IpFilterRule v7;
io.netty.handler.ipfilter.RuleBasedIpFilter v0;
java.util.ArrayList v3;
java.util.List v8;
io.netty.handler.ipfilter.IpFilterRule[] v2;
int v4, v5, v6;
boolean v1;
v0 := @this: io.netty.handler.ipfilter.RuleBasedIpFilter;
v1 := @parameter0: boolean;
v2 := @parameter1: io.netty.handler.ipfilter.IpFilterRule[];
specialinvoke v0.<io.netty.handler.ipfilter.AbstractRemoteAddressFilter: void <init>()>();
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "rules");
v0.<io.netty.handler.ipfilter.RuleBasedIpFilter: boolean acceptIfNotFound> = v1;
v3 = new java.util.ArrayList;
v4 = lengthof v2;
specialinvoke v3.<java.util.ArrayList: void <init>(int)>(v4);
v0.<io.netty.handler.ipfilter.RuleBasedIpFilter: java.util.List rules> = v3;
v5 = lengthof v2;
v6 = 0;
label1:
if v6 >= v5 goto label3;
v7 = v2[v6];
if v7 == null goto label2;
v8 = v0.<io.netty.handler.ipfilter.RuleBasedIpFilter: java.util.List rules>;
interfaceinvoke v8.<java.util.List: boolean add(java.lang.Object)>(v7);
label2:
v6 = v6 + 1;
goto label1;
label3:
return;
}
protected boolean accept(io.netty.channel.ChannelHandlerContext, java.net.InetSocketAddress) throws java.lang.Exception
{
java.util.Iterator v4;
java.net.InetSocketAddress v2;
io.netty.handler.ipfilter.RuleBasedIpFilter v0;
io.netty.channel.ChannelHandlerContext v1;
java.util.List v3;
java.lang.Object v6;
io.netty.handler.ipfilter.IpFilterRuleType v8, v9;
boolean v10, v11, v5, v7;
v0 := @this: io.netty.handler.ipfilter.RuleBasedIpFilter;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.net.InetSocketAddress;
v3 = v0.<io.netty.handler.ipfilter.RuleBasedIpFilter: java.util.List rules>;
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label4;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<io.netty.handler.ipfilter.IpFilterRule: boolean matches(java.net.InetSocketAddress)>(v2);
if v7 == 0 goto label1;
v8 = interfaceinvoke v6.<io.netty.handler.ipfilter.IpFilterRule: io.netty.handler.ipfilter.IpFilterRuleType ruleType()>();
v9 = <io.netty.handler.ipfilter.IpFilterRuleType: io.netty.handler.ipfilter.IpFilterRuleType ACCEPT>;
if v8 != v9 goto label2;
v10 = 1;
goto label3;
label2:
v10 = 0;
label3:
return v10;
label4:
v11 = v0.<io.netty.handler.ipfilter.RuleBasedIpFilter: boolean acceptIfNotFound>;
return v11;
}
}