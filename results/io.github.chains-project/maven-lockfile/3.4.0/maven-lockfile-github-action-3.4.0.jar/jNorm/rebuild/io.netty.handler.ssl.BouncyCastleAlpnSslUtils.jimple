final class io.netty.handler.ssl.BouncyCastleAlpnSslUtils extends java.lang.Object
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final java.lang.reflect.Method SET_PARAMETERS;
private static final java.lang.reflect.Method GET_PARAMETERS;
private static final java.lang.reflect.Method SET_APPLICATION_PROTOCOLS;
private static final java.lang.reflect.Method GET_APPLICATION_PROTOCOL;
private static final java.lang.reflect.Method GET_HANDSHAKE_APPLICATION_PROTOCOL;
private static final java.lang.reflect.Method SET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR;
private static final java.lang.reflect.Method GET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR;
private static final java.lang.Class BC_APPLICATION_PROTOCOL_SELECTOR;
private static final java.lang.reflect.Method BC_APPLICATION_PROTOCOL_SELECTOR_SELECT;
private void <init>()
{
io.netty.handler.ssl.BouncyCastleAlpnSslUtils v0;
v0 := @this: io.netty.handler.ssl.BouncyCastleAlpnSslUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static java.lang.String getApplicationProtocol(javax.net.ssl.SSLEngine)
{
java.lang.IllegalStateException v6;
java.lang.UnsupportedOperationException v4;
java.lang.Object[] v2;
java.lang.Object v3;
java.lang.reflect.Method v1;
java.lang.Exception v5;
javax.net.ssl.SSLEngine v0;
v0 := @parameter0: javax.net.ssl.SSLEngine;
label1:
v1 = <io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.reflect.Method GET_APPLICATION_PROTOCOL>;
v2 = newarray (java.lang.Object)[0];
v3 = virtualinvoke v1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v0, v2);
label2:
return v3;
label3:
v4 := @caughtexception;
throw v4;
label4:
v5 := @caughtexception;
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v5);
throw v6;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
static void setApplicationProtocols(javax.net.ssl.SSLEngine, java.util.List)
{
java.lang.IllegalStateException v13;
java.lang.UnsupportedOperationException v11;
java.lang.Object[] v10, v3, v5, v8;
java.lang.String[] v2;
java.lang.Exception v12;
javax.net.ssl.SSLEngine v0;
java.util.List v1;
int v14;
java.lang.Object v6;
java.lang.reflect.Method v4, v7, v9;
v0 := @parameter0: javax.net.ssl.SSLEngine;
v1 := @parameter1: java.util.List;
v2 = <io.netty.util.internal.EmptyArrays: java.lang.String[] EMPTY_STRINGS>;
v3 = interfaceinvoke v1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v2);
label1:
v4 = <io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.reflect.Method GET_PARAMETERS>;
v5 = newarray (java.lang.Object)[0];
v6 = virtualinvoke v4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v0, v5);
v7 = <io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.reflect.Method SET_APPLICATION_PROTOCOLS>;
v8 = newarray (java.lang.Object)[1];
v8[0] = v3;
virtualinvoke v7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v6, v8);
v9 = <io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.reflect.Method SET_PARAMETERS>;
v10 = newarray (java.lang.Object)[1];
v10[0] = v6;
virtualinvoke v9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v0, v10);
label2:
goto label5;
label3:
v11 := @caughtexception;
throw v11;
label4:
v12 := @caughtexception;
v13 = new java.lang.IllegalStateException;
specialinvoke v13.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v12);
throw v13;
label5:
v14 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v14 < 9 goto label6;
staticinvoke <io.netty.handler.ssl.JdkAlpnSslUtils: void setApplicationProtocols(javax.net.ssl.SSLEngine,java.util.List)>(v0, v1);
label6:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
static java.lang.String getHandshakeApplicationProtocol(javax.net.ssl.SSLEngine)
{
java.lang.IllegalStateException v6;
java.lang.UnsupportedOperationException v4;
java.lang.Object[] v2;
java.lang.Object v3;
java.lang.reflect.Method v1;
java.lang.Exception v5;
javax.net.ssl.SSLEngine v0;
v0 := @parameter0: javax.net.ssl.SSLEngine;
label1:
v1 = <io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.reflect.Method GET_HANDSHAKE_APPLICATION_PROTOCOL>;
v2 = newarray (java.lang.Object)[0];
v3 = virtualinvoke v1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v0, v2);
label2:
return v3;
label3:
v4 := @caughtexception;
throw v4;
label4:
v5 := @caughtexception;
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v5);
throw v6;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
static void setHandshakeApplicationProtocolSelector(javax.net.ssl.SSLEngine, java.util.function.BiFunction)
{
java.lang.IllegalStateException v12;
java.lang.UnsupportedOperationException v10;
java.lang.Object[] v9;
java.util.function.BiFunction v1;
java.lang.Class[] v4;
java.lang.Exception v11;
javax.net.ssl.SSLEngine v0;
io.netty.handler.ssl.BouncyCastleAlpnSslUtils$9 v6;
java.lang.Class v2, v5;
java.lang.Object v7;
java.lang.ClassLoader v3;
java.lang.reflect.Method v8;
v0 := @parameter0: javax.net.ssl.SSLEngine;
v1 := @parameter1: java.util.function.BiFunction;
label1:
v2 = class "Lio/netty/handler/ssl/BouncyCastleAlpnSslUtils;";
v3 = virtualinvoke v2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v4 = newarray (java.lang.Class)[1];
v5 = <io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.Class BC_APPLICATION_PROTOCOL_SELECTOR>;
v4[0] = v5;
v6 = new io.netty.handler.ssl.BouncyCastleAlpnSslUtils$9;
specialinvoke v6.<io.netty.handler.ssl.BouncyCastleAlpnSslUtils$9: void <init>(java.util.function.BiFunction)>(v1);
v7 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>(v3, v4, v6);
v8 = <io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.reflect.Method SET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR>;
v9 = newarray (java.lang.Object)[1];
v9[0] = v7;
virtualinvoke v8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v0, v9);
label2:
goto label5;
label3:
v10 := @caughtexception;
throw v10;
label4:
v11 := @caughtexception;
v12 = new java.lang.IllegalStateException;
specialinvoke v12.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v11);
throw v12;
label5:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
static java.util.function.BiFunction getHandshakeApplicationProtocolSelector(javax.net.ssl.SSLEngine)
{
java.lang.IllegalStateException v7;
java.lang.UnsupportedOperationException v5;
java.lang.Object[] v2;
java.lang.Exception v6;
javax.net.ssl.SSLEngine v0;
io.netty.handler.ssl.BouncyCastleAlpnSslUtils$10 v4;
java.lang.Object v3;
java.lang.reflect.Method v1;
v0 := @parameter0: javax.net.ssl.SSLEngine;
label1:
v1 = <io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.reflect.Method GET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR>;
v2 = newarray (java.lang.Object)[0];
v3 = virtualinvoke v1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v0, v2);
v4 = new io.netty.handler.ssl.BouncyCastleAlpnSslUtils$10;
specialinvoke v4.<io.netty.handler.ssl.BouncyCastleAlpnSslUtils$10: void <init>(java.lang.Object)>(v3);
label2:
return v4;
label3:
v5 := @caughtexception;
throw v5;
label4:
v6 := @caughtexception;
v7 = new java.lang.IllegalStateException;
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v6);
throw v7;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
static void <clinit>()
{
javax.net.ssl.SSLContext v5;
io.netty.handler.ssl.BouncyCastleAlpnSslUtils$7 v25;
io.netty.handler.ssl.BouncyCastleAlpnSslUtils$6 v22;
io.netty.handler.ssl.BouncyCastleAlpnSslUtils$5 v19;
io.netty.handler.ssl.BouncyCastleAlpnSslUtils$4 v15;
io.netty.handler.ssl.BouncyCastleAlpnSslUtils$3 v12;
io.netty.handler.ssl.BouncyCastleAlpnSslUtils$2 v7;
io.netty.handler.ssl.BouncyCastleAlpnSslUtils$1 v3;
io.netty.handler.ssl.BouncyCastleAlpnSslUtils$8 v27;
io.netty.util.internal.logging.InternalLogger v0, v31;
java.lang.Throwable v30;
java.lang.Object[] v14, v17, v21, v24, v29, v9;
java.lang.String[] v18;
javax.net.ssl.SSLEngine v6;
java.lang.Class v1, v11, v2;
java.lang.Object v10, v13, v16, v20, v23, v26, v28, v4, v8;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/handler/ssl/BouncyCastleAlpnSslUtils;");
<io.netty.handler.ssl.BouncyCastleAlpnSslUtils: io.netty.util.internal.logging.InternalLogger logger> = v0;
label1:
v1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.bouncycastle.jsse.BCSSLEngine");
v2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.bouncycastle.jsse.BCApplicationProtocolSelector");
v3 = new io.netty.handler.ssl.BouncyCastleAlpnSslUtils$1;
specialinvoke v3.<io.netty.handler.ssl.BouncyCastleAlpnSslUtils$1: void <init>(java.lang.Class)>(v2);
v4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(v3);
v5 = staticinvoke <io.netty.handler.ssl.SslUtils: javax.net.ssl.SSLContext getSSLContext(java.lang.String)>("BCJSSE");
v6 = virtualinvoke v5.<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine()>();
v7 = new io.netty.handler.ssl.BouncyCastleAlpnSslUtils$2;
specialinvoke v7.<io.netty.handler.ssl.BouncyCastleAlpnSslUtils$2: void <init>(java.lang.Class)>(v1);
v8 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(v7);
v9 = newarray (java.lang.Object)[0];
v10 = virtualinvoke v8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v6, v9);
v11 = virtualinvoke v10.<java.lang.Object: java.lang.Class getClass()>();
v12 = new io.netty.handler.ssl.BouncyCastleAlpnSslUtils$3;
specialinvoke v12.<io.netty.handler.ssl.BouncyCastleAlpnSslUtils$3: void <init>(java.lang.Class,java.lang.Class)>(v1, v11);
v13 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(v12);
v14 = newarray (java.lang.Object)[1];
v14[0] = v10;
virtualinvoke v13.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v6, v14);
v15 = new io.netty.handler.ssl.BouncyCastleAlpnSslUtils$4;
specialinvoke v15.<io.netty.handler.ssl.BouncyCastleAlpnSslUtils$4: void <init>(java.lang.Class)>(v11);
v16 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(v15);
v17 = newarray (java.lang.Object)[1];
v18 = <io.netty.util.internal.EmptyArrays: java.lang.String[] EMPTY_STRINGS>;
v17[0] = v18;
virtualinvoke v16.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v10, v17);
v19 = new io.netty.handler.ssl.BouncyCastleAlpnSslUtils$5;
specialinvoke v19.<io.netty.handler.ssl.BouncyCastleAlpnSslUtils$5: void <init>(java.lang.Class)>(v1);
v20 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(v19);
v21 = newarray (java.lang.Object)[0];
virtualinvoke v20.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v6, v21);
v22 = new io.netty.handler.ssl.BouncyCastleAlpnSslUtils$6;
specialinvoke v22.<io.netty.handler.ssl.BouncyCastleAlpnSslUtils$6: void <init>(java.lang.Class)>(v1);
v23 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(v22);
v24 = newarray (java.lang.Object)[0];
virtualinvoke v23.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v6, v24);
v25 = new io.netty.handler.ssl.BouncyCastleAlpnSslUtils$7;
specialinvoke v25.<io.netty.handler.ssl.BouncyCastleAlpnSslUtils$7: void <init>(java.lang.Class,java.lang.Class)>(v1, v2);
v26 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(v25);
v27 = new io.netty.handler.ssl.BouncyCastleAlpnSslUtils$8;
specialinvoke v27.<io.netty.handler.ssl.BouncyCastleAlpnSslUtils$8: void <init>(java.lang.Class)>(v1);
v28 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(v27);
v29 = newarray (java.lang.Object)[0];
virtualinvoke v28.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v6, v29);
label2:
goto label4;
label3:
v30 := @caughtexception;
v31 = <io.netty.handler.ssl.BouncyCastleAlpnSslUtils: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v31.<io.netty.util.internal.logging.InternalLogger: void error(java.lang.String,java.lang.Throwable)>("Unable to initialize BouncyCastleAlpnSslUtils.", v30);
v13 = null;
v8 = null;
v16 = null;
v20 = null;
v23 = null;
v26 = null;
v28 = null;
v4 = null;
v2 = null;
label4:
<io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.reflect.Method SET_PARAMETERS> = v13;
<io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.reflect.Method GET_PARAMETERS> = v8;
<io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.reflect.Method SET_APPLICATION_PROTOCOLS> = v16;
<io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.reflect.Method GET_APPLICATION_PROTOCOL> = v20;
<io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.reflect.Method GET_HANDSHAKE_APPLICATION_PROTOCOL> = v23;
<io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.reflect.Method SET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR> = v26;
<io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.reflect.Method GET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR> = v28;
<io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.reflect.Method BC_APPLICATION_PROTOCOL_SELECTOR_SELECT> = v4;
<io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.Class BC_APPLICATION_PROTOCOL_SELECTOR> = v2;
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}