abstract class io.netty.handler.ssl.ExtendedOpenSslSession extends javax.net.ssl.ExtendedSSLSession implements io.netty.handler.ssl.OpenSslSession
{
private static final java.lang.String[] LOCAL_SUPPORTED_SIGNATURE_ALGORITHMS;
private final io.netty.handler.ssl.OpenSslSession wrapped;
void <init>(io.netty.handler.ssl.OpenSslSession)
{
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 := @parameter0: io.netty.handler.ssl.OpenSslSession;
specialinvoke v0.<javax.net.ssl.ExtendedSSLSession: void <init>()>();
v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped> = v1;
return;
}
public abstract java.util.List getRequestedServerNames();
public java.util.List getStatusResponses()
{
java.util.List v1;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v1;
}
public io.netty.handler.ssl.OpenSslSessionId sessionId()
{
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSessionId v2;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: io.netty.handler.ssl.OpenSslSessionId sessionId()>();
return v2;
}
public void setSessionId(io.netty.handler.ssl.OpenSslSessionId)
{
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSessionId v1;
io.netty.handler.ssl.OpenSslSession v2;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 := @parameter0: io.netty.handler.ssl.OpenSslSessionId;
v2 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
interfaceinvoke v2.<io.netty.handler.ssl.OpenSslSession: void setSessionId(io.netty.handler.ssl.OpenSslSessionId)>(v1);
return;
}
public final void setLocalCertificate(java.security.cert.Certificate[])
{
java.security.cert.Certificate[] v1;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v2;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 := @parameter0: java.security.cert.Certificate[];
v2 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
interfaceinvoke v2.<io.netty.handler.ssl.OpenSslSession: void setLocalCertificate(java.security.cert.Certificate[])>(v1);
return;
}
public java.lang.String[] getPeerSupportedSignatureAlgorithms()
{
java.lang.String[] v1;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = <io.netty.util.internal.EmptyArrays: java.lang.String[] EMPTY_STRINGS>;
return v1;
}
public final void tryExpandApplicationBufferSize(int)
{
int v1;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v2;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
interfaceinvoke v2.<io.netty.handler.ssl.OpenSslSession: void tryExpandApplicationBufferSize(int)>(v1);
return;
}
public final java.lang.String[] getLocalSupportedSignatureAlgorithms()
{
java.lang.Object v2;
java.lang.String[] v1;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = <io.netty.handler.ssl.ExtendedOpenSslSession: java.lang.String[] LOCAL_SUPPORTED_SIGNATURE_ALGORITHMS>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Object clone()>();
return v2;
}
public final byte[] getId()
{
byte[] v2;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: byte[] getId()>();
return v2;
}
public final io.netty.handler.ssl.OpenSslSessionContext getSessionContext()
{
io.netty.handler.ssl.OpenSslSessionContext v2;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: io.netty.handler.ssl.OpenSslSessionContext getSessionContext()>();
return v2;
}
public final long getCreationTime()
{
long v2;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: long getCreationTime()>();
return v2;
}
public final long getLastAccessedTime()
{
long v2;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: long getLastAccessedTime()>();
return v2;
}
public final void invalidate()
{
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: void invalidate()>();
return;
}
public final boolean isValid()
{
io.netty.handler.ssl.ExtendedOpenSslSession v0;
boolean v2;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: boolean isValid()>();
return v2;
}
public final void putValue(java.lang.String, java.lang.Object)
{
io.netty.handler.ssl.ExtendedOpenSslSession$SSLSessionBindingListenerDecorator v4;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v5;
java.lang.Object v2;
java.lang.String v1;
boolean v3;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = v2 instanceof javax.net.ssl.SSLSessionBindingListener;
if v3 == 0 goto label1;
v4 = new io.netty.handler.ssl.ExtendedOpenSslSession$SSLSessionBindingListenerDecorator;
specialinvoke v4.<io.netty.handler.ssl.ExtendedOpenSslSession$SSLSessionBindingListenerDecorator: void <init>(io.netty.handler.ssl.ExtendedOpenSslSession,javax.net.ssl.SSLSessionBindingListener)>(v0, v2);
v2 = v4;
label1:
v5 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
interfaceinvoke v5.<io.netty.handler.ssl.OpenSslSession: void putValue(java.lang.String,java.lang.Object)>(v1, v2);
return;
}
public final java.lang.Object getValue(java.lang.String)
{
io.netty.handler.ssl.ExtendedOpenSslSession v0;
javax.net.ssl.SSLSessionBindingListener v5;
io.netty.handler.ssl.OpenSslSession v2;
java.lang.Object v3;
java.lang.String v1;
boolean v4;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v3 = interfaceinvoke v2.<io.netty.handler.ssl.OpenSslSession: java.lang.Object getValue(java.lang.String)>(v1);
v4 = v3 instanceof io.netty.handler.ssl.ExtendedOpenSslSession$SSLSessionBindingListenerDecorator;
if v4 == 0 goto label1;
v5 = v3.<io.netty.handler.ssl.ExtendedOpenSslSession$SSLSessionBindingListenerDecorator: javax.net.ssl.SSLSessionBindingListener delegate>;
return v5;
label1:
return v3;
}
public final void removeValue(java.lang.String)
{
java.lang.String v1;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v2;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
interfaceinvoke v2.<io.netty.handler.ssl.OpenSslSession: void removeValue(java.lang.String)>(v1);
return;
}
public final java.lang.String[] getValueNames()
{
java.lang.String[] v2;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: java.lang.String[] getValueNames()>();
return v2;
}
public final java.security.cert.Certificate[] getPeerCertificates() throws javax.net.ssl.SSLPeerUnverifiedException
{
java.security.cert.Certificate[] v2;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: java.security.cert.Certificate[] getPeerCertificates()>();
return v2;
}
public final java.security.cert.Certificate[] getLocalCertificates()
{
java.security.cert.Certificate[] v2;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: java.security.cert.Certificate[] getLocalCertificates()>();
return v2;
}
public final javax.security.cert.X509Certificate[] getPeerCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException
{
javax.security.cert.X509Certificate[] v2;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: javax.security.cert.X509Certificate[] getPeerCertificateChain()>();
return v2;
}
public final java.security.Principal getPeerPrincipal() throws javax.net.ssl.SSLPeerUnverifiedException
{
java.security.Principal v2;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: java.security.Principal getPeerPrincipal()>();
return v2;
}
public final java.security.Principal getLocalPrincipal()
{
java.security.Principal v2;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: java.security.Principal getLocalPrincipal()>();
return v2;
}
public final java.lang.String getCipherSuite()
{
java.lang.String v2;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: java.lang.String getCipherSuite()>();
return v2;
}
public java.lang.String getProtocol()
{
java.lang.String v2;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: java.lang.String getProtocol()>();
return v2;
}
public final java.lang.String getPeerHost()
{
java.lang.String v2;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: java.lang.String getPeerHost()>();
return v2;
}
public final int getPeerPort()
{
int v2;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: int getPeerPort()>();
return v2;
}
public final int getPacketBufferSize()
{
int v2;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: int getPacketBufferSize()>();
return v2;
}
public final int getApplicationBufferSize()
{
int v2;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: int getApplicationBufferSize()>();
return v2;
}
public void handshakeFinished(byte[], java.lang.String, java.lang.String, byte[], byte[][], long, long) throws javax.net.ssl.SSLException
{
byte[] v1, v4;
io.netty.handler.ssl.OpenSslSession v8;
long v6, v7;
byte[][] v5;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
java.lang.String v2, v3;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 := @parameter0: byte[];
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: byte[];
v5 := @parameter4: byte[][];
v6 := @parameter5: long;
v7 := @parameter6: long;
v8 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
interfaceinvoke v8.<io.netty.handler.ssl.OpenSslSession: void handshakeFinished(byte[],java.lang.String,java.lang.String,byte[],byte[][],long,long)>(v1, v2, v3, v4, v5, v6, v7);
return;
}
public java.lang.String toString()
{
java.lang.String v2;
io.netty.handler.ssl.ExtendedOpenSslSession v0;
io.netty.handler.ssl.OpenSslSession v1;
v0 := @this: io.netty.handler.ssl.ExtendedOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ExtendedOpenSslSession: io.netty.handler.ssl.OpenSslSession wrapped>;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.handler.ssl.OpenSslSession)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("ExtendedOpenSslSession{wrapped=\u0001}");
return v2;
}
static void <clinit>()
{
java.lang.String[] v0;
v0 = newarray (java.lang.String)[11];
v0[0] = "SHA512withRSA";
v0[1] = "SHA512withECDSA";
v0[2] = "SHA384withRSA";
v0[3] = "SHA384withECDSA";
v0[4] = "SHA256withRSA";
v0[5] = "SHA256withECDSA";
v0[6] = "SHA224withRSA";
v0[7] = "SHA224withECDSA";
v0[8] = "SHA1withRSA";
v0[9] = "SHA1withECDSA";
v0[10] = "RSASSA-PSS";
<io.netty.handler.ssl.ExtendedOpenSslSession: java.lang.String[] LOCAL_SUPPORTED_SIGNATURE_ALGORITHMS> = v0;
return;
}
}