class io.netty.handler.ssl.JdkAlpnSslEngine extends io.netty.handler.ssl.JdkSslEngine
{
private final io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener selectionListener;
private final io.netty.handler.ssl.JdkAlpnSslEngine$AlpnSelector alpnSelector;
static final boolean $assertionsDisabled;
void <init>(javax.net.ssl.SSLEngine, io.netty.handler.ssl.JdkApplicationProtocolNegotiator, boolean, java.util.function.BiConsumer, java.util.function.BiConsumer)
{
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener v14;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator v2;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory v12;
javax.net.ssl.SSLEngine v1;
io.netty.handler.ssl.JdkAlpnSslEngine$AlpnSelector v11, v6;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory v7;
java.util.function.BiConsumer v4, v5;
io.netty.handler.ssl.JdkAlpnSslEngine v0;
java.util.LinkedHashSet v8;
boolean v3;
java.util.List v13, v15, v9;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelector v10;
v0 := @this: io.netty.handler.ssl.JdkAlpnSslEngine;
v1 := @parameter0: javax.net.ssl.SSLEngine;
v2 := @parameter1: io.netty.handler.ssl.JdkApplicationProtocolNegotiator;
v3 := @parameter2: boolean;
v4 := @parameter3: java.util.function.BiConsumer;
v5 := @parameter4: java.util.function.BiConsumer;
specialinvoke v0.<io.netty.handler.ssl.JdkSslEngine: void <init>(javax.net.ssl.SSLEngine)>(v1);
if v3 == 0 goto label1;
v0.<io.netty.handler.ssl.JdkAlpnSslEngine: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener selectionListener> = null;
v6 = new io.netty.handler.ssl.JdkAlpnSslEngine$AlpnSelector;
v7 = interfaceinvoke v2.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory protocolSelectorFactory()>();
v8 = new java.util.LinkedHashSet;
v9 = interfaceinvoke v2.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator: java.util.List protocols()>();
specialinvoke v8.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(v9);
v10 = interfaceinvoke v7.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelector newSelector(javax.net.ssl.SSLEngine,java.util.Set)>(v0, v8);
specialinvoke v6.<io.netty.handler.ssl.JdkAlpnSslEngine$AlpnSelector: void <init>(io.netty.handler.ssl.JdkAlpnSslEngine,io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelector)>(v0, v10);
v0.<io.netty.handler.ssl.JdkAlpnSslEngine: io.netty.handler.ssl.JdkAlpnSslEngine$AlpnSelector alpnSelector> = v6;
v11 = v0.<io.netty.handler.ssl.JdkAlpnSslEngine: io.netty.handler.ssl.JdkAlpnSslEngine$AlpnSelector alpnSelector>;
interfaceinvoke v4.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(v1, v11);
goto label2;
label1:
v12 = interfaceinvoke v2.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory protocolListenerFactory()>();
v13 = interfaceinvoke v2.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator: java.util.List protocols()>();
v14 = interfaceinvoke v12.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener newListener(javax.net.ssl.SSLEngine,java.util.List)>(v0, v13);
v0.<io.netty.handler.ssl.JdkAlpnSslEngine: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener selectionListener> = v14;
v0.<io.netty.handler.ssl.JdkAlpnSslEngine: io.netty.handler.ssl.JdkAlpnSslEngine$AlpnSelector alpnSelector> = null;
v15 = interfaceinvoke v2.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator: java.util.List protocols()>();
interfaceinvoke v5.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(v1, v15);
label2:
return;
}
void <init>(javax.net.ssl.SSLEngine, io.netty.handler.ssl.JdkApplicationProtocolNegotiator, boolean)
{
io.netty.handler.ssl.JdkAlpnSslEngine$2 v5;
io.netty.handler.ssl.JdkAlpnSslEngine$1 v4;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator v2;
io.netty.handler.ssl.JdkAlpnSslEngine v0;
boolean v3;
javax.net.ssl.SSLEngine v1;
v0 := @this: io.netty.handler.ssl.JdkAlpnSslEngine;
v1 := @parameter0: javax.net.ssl.SSLEngine;
v2 := @parameter1: io.netty.handler.ssl.JdkApplicationProtocolNegotiator;
v3 := @parameter2: boolean;
v4 = new io.netty.handler.ssl.JdkAlpnSslEngine$1;
specialinvoke v4.<io.netty.handler.ssl.JdkAlpnSslEngine$1: void <init>()>();
v5 = new io.netty.handler.ssl.JdkAlpnSslEngine$2;
specialinvoke v5.<io.netty.handler.ssl.JdkAlpnSslEngine$2: void <init>()>();
specialinvoke v0.<io.netty.handler.ssl.JdkAlpnSslEngine: void <init>(javax.net.ssl.SSLEngine,io.netty.handler.ssl.JdkApplicationProtocolNegotiator,boolean,java.util.function.BiConsumer,java.util.function.BiConsumer)>(v1, v2, v3, v4, v5);
return;
}
private javax.net.ssl.SSLEngineResult verifyProtocolSelection(javax.net.ssl.SSLEngineResult) throws javax.net.ssl.SSLException
{
java.lang.Throwable v11;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener v10, v14, v9;
javax.net.ssl.SSLEngineResult$HandshakeStatus v2, v3;
java.lang.AssertionError v15, v7;
javax.net.ssl.SSLEngineResult v1;
io.netty.handler.ssl.JdkAlpnSslEngine$AlpnSelector v16, v4;
java.lang.String v5;
io.netty.handler.ssl.JdkAlpnSslEngine v0;
boolean v13, v6, v8;
javax.net.ssl.SSLHandshakeException v12;
v0 := @this: io.netty.handler.ssl.JdkAlpnSslEngine;
v1 := @parameter0: javax.net.ssl.SSLEngineResult;
v2 = virtualinvoke v1.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();
v3 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus FINISHED>;
if v2 != v3 goto label8;
v4 = v0.<io.netty.handler.ssl.JdkAlpnSslEngine: io.netty.handler.ssl.JdkAlpnSslEngine$AlpnSelector alpnSelector>;
if v4 != null goto label6;
label1:
v5 = virtualinvoke v0.<io.netty.handler.ssl.JdkAlpnSslEngine: java.lang.String getApplicationProtocol()>();
v6 = <io.netty.handler.ssl.JdkAlpnSslEngine: boolean $assertionsDisabled>;
if v6 != 0 goto label2;
if v5 != null goto label2;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label2:
v8 = virtualinvoke v5.<java.lang.String: boolean isEmpty()>();
if v8 == 0 goto label3;
v9 = v0.<io.netty.handler.ssl.JdkAlpnSslEngine: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener selectionListener>;
interfaceinvoke v9.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener: void unsupported()>();
goto label8;
label3:
v10 = v0.<io.netty.handler.ssl.JdkAlpnSslEngine: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener selectionListener>;
interfaceinvoke v10.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener: void selected(java.lang.String)>(v5);
label4:
goto label8;
label5:
v11 := @caughtexception;
v12 = staticinvoke <io.netty.handler.ssl.SslUtils: javax.net.ssl.SSLHandshakeException toSSLHandshakeException(java.lang.Throwable)>(v11);
throw v12;
label6:
v13 = <io.netty.handler.ssl.JdkAlpnSslEngine: boolean $assertionsDisabled>;
if v13 != 0 goto label7;
v14 = v0.<io.netty.handler.ssl.JdkAlpnSslEngine: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener selectionListener>;
if v14 == null goto label7;
v15 = new java.lang.AssertionError;
specialinvoke v15.<java.lang.AssertionError: void <init>()>();
throw v15;
label7:
v16 = v0.<io.netty.handler.ssl.JdkAlpnSslEngine: io.netty.handler.ssl.JdkAlpnSslEngine$AlpnSelector alpnSelector>;
virtualinvoke v16.<io.netty.handler.ssl.JdkAlpnSslEngine$AlpnSelector: void checkUnsupported()>();
label8:
return v1;
catch java.lang.Throwable from label1 to label4 with label5;
}
public javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.net.ssl.SSLException
{
javax.net.ssl.SSLEngineResult v3, v4;
io.netty.handler.ssl.JdkAlpnSslEngine v0;
java.nio.ByteBuffer v1, v2;
v0 := @this: io.netty.handler.ssl.JdkAlpnSslEngine;
v1 := @parameter0: java.nio.ByteBuffer;
v2 := @parameter1: java.nio.ByteBuffer;
v3 = specialinvoke v0.<io.netty.handler.ssl.JdkSslEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>(v1, v2);
v4 = specialinvoke v0.<io.netty.handler.ssl.JdkAlpnSslEngine: javax.net.ssl.SSLEngineResult verifyProtocolSelection(javax.net.ssl.SSLEngineResult)>(v3);
return v4;
}
public javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[], java.nio.ByteBuffer) throws javax.net.ssl.SSLException
{
java.nio.ByteBuffer[] v1;
javax.net.ssl.SSLEngineResult v3, v4;
io.netty.handler.ssl.JdkAlpnSslEngine v0;
java.nio.ByteBuffer v2;
v0 := @this: io.netty.handler.ssl.JdkAlpnSslEngine;
v1 := @parameter0: java.nio.ByteBuffer[];
v2 := @parameter1: java.nio.ByteBuffer;
v3 = specialinvoke v0.<io.netty.handler.ssl.JdkSslEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],java.nio.ByteBuffer)>(v1, v2);
v4 = specialinvoke v0.<io.netty.handler.ssl.JdkAlpnSslEngine: javax.net.ssl.SSLEngineResult verifyProtocolSelection(javax.net.ssl.SSLEngineResult)>(v3);
return v4;
}
public javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[], int, int, java.nio.ByteBuffer) throws javax.net.ssl.SSLException
{
java.nio.ByteBuffer[] v1;
javax.net.ssl.SSLEngineResult v5, v6;
int v2, v3;
io.netty.handler.ssl.JdkAlpnSslEngine v0;
java.nio.ByteBuffer v4;
v0 := @this: io.netty.handler.ssl.JdkAlpnSslEngine;
v1 := @parameter0: java.nio.ByteBuffer[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: java.nio.ByteBuffer;
v5 = specialinvoke v0.<io.netty.handler.ssl.JdkSslEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)>(v1, v2, v3, v4);
v6 = specialinvoke v0.<io.netty.handler.ssl.JdkAlpnSslEngine: javax.net.ssl.SSLEngineResult verifyProtocolSelection(javax.net.ssl.SSLEngineResult)>(v5);
return v6;
}
public javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.net.ssl.SSLException
{
javax.net.ssl.SSLEngineResult v3, v4;
io.netty.handler.ssl.JdkAlpnSslEngine v0;
java.nio.ByteBuffer v1, v2;
v0 := @this: io.netty.handler.ssl.JdkAlpnSslEngine;
v1 := @parameter0: java.nio.ByteBuffer;
v2 := @parameter1: java.nio.ByteBuffer;
v3 = specialinvoke v0.<io.netty.handler.ssl.JdkSslEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>(v1, v2);
v4 = specialinvoke v0.<io.netty.handler.ssl.JdkAlpnSslEngine: javax.net.ssl.SSLEngineResult verifyProtocolSelection(javax.net.ssl.SSLEngineResult)>(v3);
return v4;
}
public javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer[]) throws javax.net.ssl.SSLException
{
java.nio.ByteBuffer[] v2;
javax.net.ssl.SSLEngineResult v3, v4;
io.netty.handler.ssl.JdkAlpnSslEngine v0;
java.nio.ByteBuffer v1;
v0 := @this: io.netty.handler.ssl.JdkAlpnSslEngine;
v1 := @parameter0: java.nio.ByteBuffer;
v2 := @parameter1: java.nio.ByteBuffer[];
v3 = specialinvoke v0.<io.netty.handler.ssl.JdkSslEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[])>(v1, v2);
v4 = specialinvoke v0.<io.netty.handler.ssl.JdkAlpnSslEngine: javax.net.ssl.SSLEngineResult verifyProtocolSelection(javax.net.ssl.SSLEngineResult)>(v3);
return v4;
}
public javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer[], int, int) throws javax.net.ssl.SSLException
{
java.nio.ByteBuffer[] v2;
javax.net.ssl.SSLEngineResult v5, v6;
int v3, v4;
io.netty.handler.ssl.JdkAlpnSslEngine v0;
java.nio.ByteBuffer v1;
v0 := @this: io.netty.handler.ssl.JdkAlpnSslEngine;
v1 := @parameter0: java.nio.ByteBuffer;
v2 := @parameter1: java.nio.ByteBuffer[];
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = specialinvoke v0.<io.netty.handler.ssl.JdkSslEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)>(v1, v2, v3, v4);
v6 = specialinvoke v0.<io.netty.handler.ssl.JdkAlpnSslEngine: javax.net.ssl.SSLEngineResult verifyProtocolSelection(javax.net.ssl.SSLEngineResult)>(v5);
return v6;
}
void setNegotiatedApplicationProtocol(java.lang.String)
{
java.lang.String v1;
io.netty.handler.ssl.JdkAlpnSslEngine v0;
v0 := @this: io.netty.handler.ssl.JdkAlpnSslEngine;
v1 := @parameter0: java.lang.String;
return;
}
public java.lang.String getNegotiatedApplicationProtocol()
{
java.lang.String v1, v3;
io.netty.handler.ssl.JdkAlpnSslEngine v0;
boolean v2;
v0 := @this: io.netty.handler.ssl.JdkAlpnSslEngine;
v1 = virtualinvoke v0.<io.netty.handler.ssl.JdkAlpnSslEngine: java.lang.String getApplicationProtocol()>();
if v1 == null goto label3;
v2 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v2 == 0 goto label1;
v3 = null;
goto label2;
label1:
v3 = v1;
label2:
return v3;
label3:
return null;
}
public java.lang.String getApplicationProtocol()
{
java.lang.String v2;
io.netty.handler.ssl.JdkAlpnSslEngine v0;
javax.net.ssl.SSLEngine v1;
v0 := @this: io.netty.handler.ssl.JdkAlpnSslEngine;
v1 = virtualinvoke v0.<io.netty.handler.ssl.JdkAlpnSslEngine: javax.net.ssl.SSLEngine getWrappedEngine()>();
v2 = staticinvoke <io.netty.handler.ssl.JdkAlpnSslUtils: java.lang.String getApplicationProtocol(javax.net.ssl.SSLEngine)>(v1);
return v2;
}
public java.lang.String getHandshakeApplicationProtocol()
{
java.lang.String v2;
io.netty.handler.ssl.JdkAlpnSslEngine v0;
javax.net.ssl.SSLEngine v1;
v0 := @this: io.netty.handler.ssl.JdkAlpnSslEngine;
v1 = virtualinvoke v0.<io.netty.handler.ssl.JdkAlpnSslEngine: javax.net.ssl.SSLEngine getWrappedEngine()>();
v2 = staticinvoke <io.netty.handler.ssl.JdkAlpnSslUtils: java.lang.String getHandshakeApplicationProtocol(javax.net.ssl.SSLEngine)>(v1);
return v2;
}
public void setHandshakeApplicationProtocolSelector(java.util.function.BiFunction)
{
io.netty.handler.ssl.JdkAlpnSslEngine v0;
java.util.function.BiFunction v1;
javax.net.ssl.SSLEngine v2;
v0 := @this: io.netty.handler.ssl.JdkAlpnSslEngine;
v1 := @parameter0: java.util.function.BiFunction;
v2 = virtualinvoke v0.<io.netty.handler.ssl.JdkAlpnSslEngine: javax.net.ssl.SSLEngine getWrappedEngine()>();
staticinvoke <io.netty.handler.ssl.JdkAlpnSslUtils: void setHandshakeApplicationProtocolSelector(javax.net.ssl.SSLEngine,java.util.function.BiFunction)>(v2, v1);
return;
}
public java.util.function.BiFunction getHandshakeApplicationProtocolSelector()
{
io.netty.handler.ssl.JdkAlpnSslEngine v0;
java.util.function.BiFunction v2;
javax.net.ssl.SSLEngine v1;
v0 := @this: io.netty.handler.ssl.JdkAlpnSslEngine;
v1 = virtualinvoke v0.<io.netty.handler.ssl.JdkAlpnSslEngine: javax.net.ssl.SSLEngine getWrappedEngine()>();
v2 = staticinvoke <io.netty.handler.ssl.JdkAlpnSslUtils: java.util.function.BiFunction getHandshakeApplicationProtocolSelector(javax.net.ssl.SSLEngine)>(v1);
return v2;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/ssl/JdkAlpnSslEngine;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.ssl.JdkAlpnSslEngine: boolean $assertionsDisabled> = v2;
return;
}
}