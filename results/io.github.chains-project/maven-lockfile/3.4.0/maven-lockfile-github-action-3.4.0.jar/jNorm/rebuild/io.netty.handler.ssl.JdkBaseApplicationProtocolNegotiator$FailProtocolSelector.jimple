final class io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$FailProtocolSelector extends io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelector
{
void <init>(io.netty.handler.ssl.JdkSslEngine, java.util.Set)
{
io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$FailProtocolSelector v0;
java.util.Set v2;
io.netty.handler.ssl.JdkSslEngine v1;
v0 := @this: io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$FailProtocolSelector;
v1 := @parameter0: io.netty.handler.ssl.JdkSslEngine;
v2 := @parameter1: java.util.Set;
specialinvoke v0.<io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelector: void <init>(io.netty.handler.ssl.JdkSslEngine,java.util.Set)>(v1, v2);
return;
}
public java.lang.String noSelectMatchFound() throws java.lang.Exception
{
io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$FailProtocolSelector v0;
javax.net.ssl.SSLHandshakeException v1;
v0 := @this: io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$FailProtocolSelector;
v1 = new javax.net.ssl.SSLHandshakeException;
specialinvoke v1.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>("Selected protocol is not supported");
throw v1;
}
}