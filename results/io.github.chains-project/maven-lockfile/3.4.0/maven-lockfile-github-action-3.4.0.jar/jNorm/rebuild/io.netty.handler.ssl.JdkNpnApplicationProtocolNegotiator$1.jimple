class io.netty.handler.ssl.JdkNpnApplicationProtocolNegotiator$1 extends java.lang.Object implements io.netty.handler.ssl.JdkApplicationProtocolNegotiator$SslEngineWrapperFactory
{
void <init>()
{
io.netty.handler.ssl.JdkNpnApplicationProtocolNegotiator$1 v0;
java.lang.RuntimeException v2;
boolean v1;
v0 := @this: io.netty.handler.ssl.JdkNpnApplicationProtocolNegotiator$1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = staticinvoke <io.netty.handler.ssl.JettyNpnSslEngine: boolean isAvailable()>();
if v1 != 0 goto label1;
v2 = new java.lang.RuntimeException;
specialinvoke v2.<java.lang.RuntimeException: void <init>(java.lang.String)>("NPN unsupported. Is your classpath configured correctly? See https://wiki.eclipse.org/Jetty/Feature/NPN");
throw v2;
label1:
return;
}
public javax.net.ssl.SSLEngine wrapSslEngine(javax.net.ssl.SSLEngine, io.netty.handler.ssl.JdkApplicationProtocolNegotiator, boolean)
{
io.netty.handler.ssl.JdkNpnApplicationProtocolNegotiator$1 v0;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator v2;
io.netty.handler.ssl.JettyNpnSslEngine v4;
boolean v3;
javax.net.ssl.SSLEngine v1;
v0 := @this: io.netty.handler.ssl.JdkNpnApplicationProtocolNegotiator$1;
v1 := @parameter0: javax.net.ssl.SSLEngine;
v2 := @parameter1: io.netty.handler.ssl.JdkApplicationProtocolNegotiator;
v3 := @parameter2: boolean;
v4 = new io.netty.handler.ssl.JettyNpnSslEngine;
specialinvoke v4.<io.netty.handler.ssl.JettyNpnSslEngine: void <init>(javax.net.ssl.SSLEngine,io.netty.handler.ssl.JdkApplicationProtocolNegotiator,boolean)>(v1, v2, v3);
return v4;
}
}