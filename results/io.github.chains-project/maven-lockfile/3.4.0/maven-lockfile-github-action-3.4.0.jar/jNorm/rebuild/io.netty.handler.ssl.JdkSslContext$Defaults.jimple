final class io.netty.handler.ssl.JdkSslContext$Defaults extends java.lang.Object
{
java.lang.String[] defaultProtocols;
java.util.List defaultCiphers;
java.util.List defaultCiphersNonTLSv13;
java.util.Set supportedCiphers;
java.util.Set supportedCiphersNonTLSv13;
java.security.Provider defaultProvider;
private void <init>()
{
io.netty.handler.ssl.JdkSslContext$Defaults v0;
v0 := @this: io.netty.handler.ssl.JdkSslContext$Defaults;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
void init()
{
javax.net.ssl.SSLContext v1;
java.lang.Error v3;
java.lang.String[] v14, v19, v6;
io.netty.handler.ssl.JdkSslContext$Defaults v0;
java.util.ArrayList v12;
javax.net.ssl.SSLEngine v5;
java.util.LinkedHashSet v17;
java.util.Set v18, v21, v7, v8, v9;
java.lang.Exception v2;
java.security.Provider v4;
java.util.List v10, v11, v13, v15, v16, v20;
v0 := @this: io.netty.handler.ssl.JdkSslContext$Defaults;
label1:
v1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS");
virtualinvoke v1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, null, null);
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = new java.lang.Error;
specialinvoke v3.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>("failed to initialize the default SSL context", v2);
throw v3;
label4:
v4 = virtualinvoke v1.<javax.net.ssl.SSLContext: java.security.Provider getProvider()>();
v0.<io.netty.handler.ssl.JdkSslContext$Defaults: java.security.Provider defaultProvider> = v4;
v5 = virtualinvoke v1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine()>();
v6 = staticinvoke <io.netty.handler.ssl.JdkSslContext: java.lang.String[] defaultProtocols(javax.net.ssl.SSLContext,javax.net.ssl.SSLEngine)>(v1, v5);
v0.<io.netty.handler.ssl.JdkSslContext$Defaults: java.lang.String[] defaultProtocols> = v6;
v7 = staticinvoke <io.netty.handler.ssl.JdkSslContext: java.util.Set supportedCiphers(javax.net.ssl.SSLEngine)>(v5);
v8 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v7);
v0.<io.netty.handler.ssl.JdkSslContext$Defaults: java.util.Set supportedCiphers> = v8;
v9 = v0.<io.netty.handler.ssl.JdkSslContext$Defaults: java.util.Set supportedCiphers>;
v10 = staticinvoke <io.netty.handler.ssl.JdkSslContext: java.util.List defaultCiphers(javax.net.ssl.SSLEngine,java.util.Set)>(v5, v9);
v11 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v10);
v0.<io.netty.handler.ssl.JdkSslContext$Defaults: java.util.List defaultCiphers> = v11;
v12 = new java.util.ArrayList;
v13 = v0.<io.netty.handler.ssl.JdkSslContext$Defaults: java.util.List defaultCiphers>;
specialinvoke v12.<java.util.ArrayList: void <init>(java.util.Collection)>(v13);
v14 = <io.netty.handler.ssl.SslUtils: java.lang.String[] DEFAULT_TLSV13_CIPHER_SUITES>;
v15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v14);
interfaceinvoke v12.<java.util.List: boolean removeAll(java.util.Collection)>(v15);
v16 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v12);
v0.<io.netty.handler.ssl.JdkSslContext$Defaults: java.util.List defaultCiphersNonTLSv13> = v16;
v17 = new java.util.LinkedHashSet;
v18 = v0.<io.netty.handler.ssl.JdkSslContext$Defaults: java.util.Set supportedCiphers>;
specialinvoke v17.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(v18);
v19 = <io.netty.handler.ssl.SslUtils: java.lang.String[] DEFAULT_TLSV13_CIPHER_SUITES>;
v20 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v19);
interfaceinvoke v17.<java.util.Set: boolean removeAll(java.util.Collection)>(v20);
v21 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v17);
v0.<io.netty.handler.ssl.JdkSslContext$Defaults: java.util.Set supportedCiphersNonTLSv13> = v21;
return;
catch java.lang.Exception from label1 to label2 with label3;
}
}