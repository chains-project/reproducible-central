public final class io.netty.handler.ssl.OpenSslServerSessionContext extends io.netty.handler.ssl.OpenSslSessionContext
{
void <init>(io.netty.handler.ssl.ReferenceCountedOpenSslContext, io.netty.handler.ssl.OpenSslKeyMaterialProvider)
{
io.netty.handler.ssl.OpenSslServerSessionContext v0;
io.netty.handler.ssl.OpenSslEngineMap v5;
io.netty.handler.ssl.OpenSslKeyMaterialProvider v2;
long v3;
io.netty.handler.ssl.OpenSslSessionCache v4;
io.netty.handler.ssl.ReferenceCountedOpenSslContext v1;
v0 := @this: io.netty.handler.ssl.OpenSslServerSessionContext;
v1 := @parameter0: io.netty.handler.ssl.ReferenceCountedOpenSslContext;
v2 := @parameter1: io.netty.handler.ssl.OpenSslKeyMaterialProvider;
v3 = <io.netty.internal.tcnative.SSL: long SSL_SESS_CACHE_SERVER>;
v4 = new io.netty.handler.ssl.OpenSslSessionCache;
v5 = v1.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: io.netty.handler.ssl.OpenSslEngineMap engineMap>;
specialinvoke v4.<io.netty.handler.ssl.OpenSslSessionCache: void <init>(io.netty.handler.ssl.OpenSslEngineMap)>(v5);
specialinvoke v0.<io.netty.handler.ssl.OpenSslSessionContext: void <init>(io.netty.handler.ssl.ReferenceCountedOpenSslContext,io.netty.handler.ssl.OpenSslKeyMaterialProvider,long,io.netty.handler.ssl.OpenSslSessionCache)>(v1, v2, v3, v4);
return;
}
public boolean setSessionIdContext(byte[])
{
java.lang.Throwable v8;
byte[] v1;
long v6;
io.netty.handler.ssl.OpenSslServerSessionContext v0;
java.util.concurrent.locks.Lock v4;
io.netty.handler.ssl.ReferenceCountedOpenSslContext v2, v5;
java.util.concurrent.locks.ReadWriteLock v3;
boolean v7;
v0 := @this: io.netty.handler.ssl.OpenSslServerSessionContext;
v1 := @parameter0: byte[];
v2 = v0.<io.netty.handler.ssl.OpenSslServerSessionContext: io.netty.handler.ssl.ReferenceCountedOpenSslContext context>;
v3 = v2.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: java.util.concurrent.locks.ReadWriteLock ctxLock>;
v4 = interfaceinvoke v3.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
interfaceinvoke v4.<java.util.concurrent.locks.Lock: void lock()>();
label1:
v5 = v0.<io.netty.handler.ssl.OpenSslServerSessionContext: io.netty.handler.ssl.ReferenceCountedOpenSslContext context>;
v6 = v5.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: long ctx>;
v7 = staticinvoke <io.netty.internal.tcnative.SSLContext: boolean setSessionIdContext(long,byte[])>(v6, v1);
label2:
interfaceinvoke v4.<java.util.concurrent.locks.Lock: void unlock()>();
return v7;
label3:
v8 := @caughtexception;
interfaceinvoke v4.<java.util.concurrent.locks.Lock: void unlock()>();
throw v8;
catch java.lang.Throwable from label1 to label2 with label3;
}
}