class io.netty.handler.ssl.OpenSslSessionCache extends java.lang.Object implements io.netty.internal.tcnative.SSLSessionCache
{
private static final io.netty.handler.ssl.OpenSslSession[] EMPTY_SESSIONS;
private static final int DEFAULT_CACHE_SIZE;
private final io.netty.handler.ssl.OpenSslEngineMap engineMap;
private final java.util.Map sessions;
private final java.util.concurrent.atomic.AtomicInteger maximumCacheSize;
private final java.util.concurrent.atomic.AtomicInteger sessionTimeout;
private int sessionCounter;
void <init>(io.netty.handler.ssl.OpenSslEngineMap)
{
io.netty.handler.ssl.OpenSslSessionCache$1 v2;
io.netty.handler.ssl.OpenSslEngineMap v1;
java.util.concurrent.atomic.AtomicInteger v3, v5;
int v4;
io.netty.handler.ssl.OpenSslSessionCache v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache;
v1 := @parameter0: io.netty.handler.ssl.OpenSslEngineMap;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new io.netty.handler.ssl.OpenSslSessionCache$1;
specialinvoke v2.<io.netty.handler.ssl.OpenSslSessionCache$1: void <init>(io.netty.handler.ssl.OpenSslSessionCache)>(v0);
v0.<io.netty.handler.ssl.OpenSslSessionCache: java.util.Map sessions> = v2;
v3 = new java.util.concurrent.atomic.AtomicInteger;
v4 = <io.netty.handler.ssl.OpenSslSessionCache: int DEFAULT_CACHE_SIZE>;
specialinvoke v3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(v4);
v0.<io.netty.handler.ssl.OpenSslSessionCache: java.util.concurrent.atomic.AtomicInteger maximumCacheSize> = v3;
v5 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v5.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(300);
v0.<io.netty.handler.ssl.OpenSslSessionCache: java.util.concurrent.atomic.AtomicInteger sessionTimeout> = v5;
v0.<io.netty.handler.ssl.OpenSslSessionCache: io.netty.handler.ssl.OpenSslEngineMap engineMap> = v1;
return;
}
final void setSessionTimeout(int)
{
java.util.concurrent.atomic.AtomicInteger v2;
int v1, v3;
io.netty.handler.ssl.OpenSslSessionCache v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.ssl.OpenSslSessionCache: java.util.concurrent.atomic.AtomicInteger sessionTimeout>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>(v1);
if v3 <= v1 goto label1;
virtualinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache: void clear()>();
label1:
return;
}
final int getSessionTimeout()
{
int v2;
io.netty.handler.ssl.OpenSslSessionCache v0;
java.util.concurrent.atomic.AtomicInteger v1;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache;
v1 = v0.<io.netty.handler.ssl.OpenSslSessionCache: java.util.concurrent.atomic.AtomicInteger sessionTimeout>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
return v2;
}
protected boolean sessionCreated(io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession)
{
io.netty.handler.ssl.OpenSslSessionCache v0;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v1;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache;
v1 := @parameter0: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
return 1;
}
protected void sessionRemoved(io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession)
{
io.netty.handler.ssl.OpenSslSessionCache v0;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v1;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache;
v1 := @parameter0: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
return;
}
final void setSessionCacheSize(int)
{
byte v4;
java.util.concurrent.atomic.AtomicInteger v2;
int v1, v3;
io.netty.handler.ssl.OpenSslSessionCache v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.ssl.OpenSslSessionCache: java.util.concurrent.atomic.AtomicInteger maximumCacheSize>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>(v1);
v4 = v3 cmp v1;
if v4 > 0 goto label1;
if v1 != 0 goto label2;
label1:
virtualinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache: void clear()>();
label2:
return;
}
final int getSessionCacheSize()
{
int v2;
io.netty.handler.ssl.OpenSslSessionCache v0;
java.util.concurrent.atomic.AtomicInteger v1;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache;
v1 = v0.<io.netty.handler.ssl.OpenSslSessionCache: java.util.concurrent.atomic.AtomicInteger maximumCacheSize>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
return v2;
}
private void expungeInvalidSessions()
{
java.util.Iterator v6;
java.util.Set v5;
long v3;
io.netty.handler.ssl.OpenSslSessionCache v0;
java.util.Map v1, v4;
java.lang.Object v8, v9;
boolean v10, v2, v7;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache;
v1 = v0.<io.netty.handler.ssl.OpenSslSessionCache: java.util.Map sessions>;
v2 = interfaceinvoke v1.<java.util.Map: boolean isEmpty()>();
if v2 == 0 goto label1;
return;
label1:
v3 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v4 = v0.<io.netty.handler.ssl.OpenSslSessionCache: java.util.Map sessions>;
v5 = interfaceinvoke v4.<java.util.Map: java.util.Set entrySet()>();
v6 = interfaceinvoke v5.<java.util.Set: java.util.Iterator iterator()>();
label2:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label3;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = interfaceinvoke v8.<java.util.Map$Entry: java.lang.Object getValue()>();
v10 = virtualinvoke v9.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean isValid(long)>(v3);
if v10 != 0 goto label3;
interfaceinvoke v6.<java.util.Iterator: void remove()>();
specialinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache: void notifyRemovalAndFree(io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession)>(v9);
goto label2;
label3:
return;
}
public final boolean sessionCreated(long, long)
{
java.lang.Throwable v17;
long v1, v2, v9;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v5;
io.netty.handler.ssl.OpenSslSessionId v10, v15;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v4;
java.util.Map v14;
int v11, v12, v7, v8;
java.lang.String v6;
boolean v13;
io.netty.handler.ssl.OpenSslEngineMap v3;
io.netty.handler.ssl.OpenSslSessionCache v0;
java.lang.Object v16;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 = v0.<io.netty.handler.ssl.OpenSslSessionCache: io.netty.handler.ssl.OpenSslEngineMap engineMap>;
v4 = interfaceinvoke v3.<io.netty.handler.ssl.OpenSslEngineMap: io.netty.handler.ssl.ReferenceCountedOpenSslEngine get(long)>(v1);
if v4 != null goto label1;
return 0;
label1:
v5 = new io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v6 = virtualinvoke v4.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: java.lang.String getPeerHost()>();
v7 = virtualinvoke v4.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: int getPeerPort()>();
v8 = virtualinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache: int getSessionTimeout()>();
v9 = v8 * 1000L;
specialinvoke v5.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: void <init>(long,java.lang.String,int,long)>(v2, v6, v7, v9);
v10 = virtualinvoke v5.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: io.netty.handler.ssl.OpenSslSessionId sessionId()>();
virtualinvoke v4.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: void setSessionId(io.netty.handler.ssl.OpenSslSessionId)>(v10);
entermonitor v0;
label2:
v11 = v0.<io.netty.handler.ssl.OpenSslSessionCache: int sessionCounter>;
v12 = v11 + 1;
v0.<io.netty.handler.ssl.OpenSslSessionCache: int sessionCounter> = v12;
if v12 != 255 goto label3;
v0.<io.netty.handler.ssl.OpenSslSessionCache: int sessionCounter> = 0;
specialinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache: void expungeInvalidSessions()>();
label3:
v13 = virtualinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache: boolean sessionCreated(io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession)>(v5);
if v13 != 0 goto label5;
virtualinvoke v5.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: void close()>();
exitmonitor v0;
label4:
return 0;
label5:
v14 = v0.<io.netty.handler.ssl.OpenSslSessionCache: java.util.Map sessions>;
v15 = virtualinvoke v5.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: io.netty.handler.ssl.OpenSslSessionId sessionId()>();
v16 = interfaceinvoke v14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v15, v5);
if v16 == null goto label6;
specialinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache: void notifyRemovalAndFree(io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession)>(v16);
label6:
exitmonitor v0;
label7:
goto label9;
label8:
v17 := @caughtexception;
exitmonitor v0;
throw v17;
label9:
return 1;
catch java.lang.Throwable from label2 to label4 with label8;
catch java.lang.Throwable from label5 to label7 with label8;
}
public final long getSession(long, byte[])
{
java.lang.Throwable v11;
byte[] v2;
long v1, v12;
io.netty.handler.ssl.OpenSslSessionCache v0;
io.netty.handler.ssl.OpenSslSessionId v10, v3, v8;
java.util.Map v4;
java.lang.Object v5;
boolean v6, v7, v9;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache;
v1 := @parameter0: long;
v2 := @parameter1: byte[];
v3 = new io.netty.handler.ssl.OpenSslSessionId;
specialinvoke v3.<io.netty.handler.ssl.OpenSslSessionId: void <init>(byte[])>(v2);
entermonitor v0;
label01:
v4 = v0.<io.netty.handler.ssl.OpenSslSessionCache: java.util.Map sessions>;
v5 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
if v5 != null goto label03;
exitmonitor v0;
label02:
return -1L;
label03:
v6 = virtualinvoke v5.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean isValid()>();
if v6 == 0 goto label04;
v7 = virtualinvoke v5.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean upRef()>();
if v7 != 0 goto label06;
label04:
v8 = virtualinvoke v5.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: io.netty.handler.ssl.OpenSslSessionId sessionId()>();
virtualinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache: void removeSessionWithId(io.netty.handler.ssl.OpenSslSessionId)>(v8);
exitmonitor v0;
label05:
return -1L;
label06:
v9 = virtualinvoke v5.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean shouldBeSingleUse()>();
if v9 == 0 goto label07;
v10 = virtualinvoke v5.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: io.netty.handler.ssl.OpenSslSessionId sessionId()>();
virtualinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache: void removeSessionWithId(io.netty.handler.ssl.OpenSslSessionId)>(v10);
label07:
exitmonitor v0;
label08:
goto label10;
label09:
v11 := @caughtexception;
exitmonitor v0;
throw v11;
label10:
virtualinvoke v5.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: void updateLastAccessedTime()>();
v12 = virtualinvoke v5.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: long session()>();
return v12;
catch java.lang.Throwable from label01 to label02 with label09;
catch java.lang.Throwable from label03 to label05 with label09;
catch java.lang.Throwable from label06 to label08 with label09;
}
void setSession(long, java.lang.String, int)
{
int v3;
long v1;
java.lang.String v2;
io.netty.handler.ssl.OpenSslSessionCache v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache;
v1 := @parameter0: long;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
return;
}
final synchronized void removeSessionWithId(io.netty.handler.ssl.OpenSslSessionId)
{
java.util.Map v2;
java.lang.Object v3;
io.netty.handler.ssl.OpenSslSessionCache v0;
io.netty.handler.ssl.OpenSslSessionId v1;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache;
v1 := @parameter0: io.netty.handler.ssl.OpenSslSessionId;
v2 = v0.<io.netty.handler.ssl.OpenSslSessionCache: java.util.Map sessions>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
if v3 == null goto label1;
specialinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache: void notifyRemovalAndFree(io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession)>(v3);
label1:
return;
}
final synchronized boolean containsSessionWithId(io.netty.handler.ssl.OpenSslSessionId)
{
java.util.Map v2;
io.netty.handler.ssl.OpenSslSessionCache v0;
io.netty.handler.ssl.OpenSslSessionId v1;
boolean v3;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache;
v1 := @parameter0: io.netty.handler.ssl.OpenSslSessionId;
v2 = v0.<io.netty.handler.ssl.OpenSslSessionCache: java.util.Map sessions>;
v3 = interfaceinvoke v2.<java.util.Map: boolean containsKey(java.lang.Object)>(v1);
return v3;
}
private void notifyRemovalAndFree(io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession)
{
io.netty.handler.ssl.OpenSslSessionCache v0;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v1;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache;
v1 := @parameter0: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
virtualinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache: void sessionRemoved(io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession)>(v1);
virtualinvoke v1.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: void free()>();
return;
}
final synchronized io.netty.handler.ssl.OpenSslSession getSession(io.netty.handler.ssl.OpenSslSessionId)
{
java.util.Map v2;
java.lang.Object v3;
io.netty.handler.ssl.OpenSslSessionCache v0;
io.netty.handler.ssl.OpenSslSessionId v1, v5;
boolean v4;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache;
v1 := @parameter0: io.netty.handler.ssl.OpenSslSessionId;
v2 = v0.<io.netty.handler.ssl.OpenSslSessionCache: java.util.Map sessions>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = virtualinvoke v3.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean isValid()>();
if v4 != 0 goto label1;
v5 = virtualinvoke v3.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: io.netty.handler.ssl.OpenSslSessionId sessionId()>();
virtualinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache: void removeSessionWithId(io.netty.handler.ssl.OpenSslSessionId)>(v5);
return null;
label1:
return v3;
}
final java.util.List getIds()
{
java.lang.Throwable v5;
java.lang.Object[] v4;
io.netty.handler.ssl.OpenSslSession v10;
java.util.Collection v2;
io.netty.handler.ssl.OpenSslSessionCache v0;
io.netty.handler.ssl.OpenSslSessionId v12;
java.util.ArrayList v6;
java.util.Map v1;
int v7, v8, v9;
io.netty.handler.ssl.OpenSslSession[] v3;
boolean v11;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache;
entermonitor v0;
label1:
v1 = v0.<io.netty.handler.ssl.OpenSslSessionCache: java.util.Map sessions>;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v3 = <io.netty.handler.ssl.OpenSslSessionCache: io.netty.handler.ssl.OpenSslSession[] EMPTY_SESSIONS>;
v4 = interfaceinvoke v2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(v3);
exitmonitor v0;
label2:
goto label4;
label3:
v5 := @caughtexception;
exitmonitor v0;
throw v5;
label4:
v6 = new java.util.ArrayList;
v7 = lengthof v4;
specialinvoke v6.<java.util.ArrayList: void <init>(int)>(v7);
v8 = lengthof v4;
v9 = 0;
label5:
if v9 >= v8 goto label7;
v10 = v4[v9];
v11 = interfaceinvoke v10.<io.netty.handler.ssl.OpenSslSession: boolean isValid()>();
if v11 == 0 goto label6;
v12 = interfaceinvoke v10.<io.netty.handler.ssl.OpenSslSession: io.netty.handler.ssl.OpenSslSessionId sessionId()>();
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v12);
label6:
v9 = v9 + 1;
goto label5;
label7:
return v6;
catch java.lang.Throwable from label1 to label2 with label3;
}
synchronized void clear()
{
java.util.Iterator v3;
java.util.Map v1;
java.util.Set v2;
java.lang.Object v5, v6;
io.netty.handler.ssl.OpenSslSessionCache v0;
boolean v4;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache;
v1 = v0.<io.netty.handler.ssl.OpenSslSessionCache: java.util.Map sessions>;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
interfaceinvoke v3.<java.util.Iterator: void remove()>();
specialinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache: void notifyRemovalAndFree(io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession)>(v6);
goto label1;
label2:
return;
}
static void <clinit>()
{
int v1;
io.netty.handler.ssl.OpenSslSession[] v0;
v0 = newarray (io.netty.handler.ssl.OpenSslSession)[0];
<io.netty.handler.ssl.OpenSslSessionCache: io.netty.handler.ssl.OpenSslSession[] EMPTY_SESSIONS> = v0;
v1 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>("javax.net.ssl.sessionCacheSize", 20480);
if v1 < 0 goto label1;
<io.netty.handler.ssl.OpenSslSessionCache: int DEFAULT_CACHE_SIZE> = v1;
goto label2;
label1:
<io.netty.handler.ssl.OpenSslSessionCache: int DEFAULT_CACHE_SIZE> = 20480;
label2:
return;
}
}