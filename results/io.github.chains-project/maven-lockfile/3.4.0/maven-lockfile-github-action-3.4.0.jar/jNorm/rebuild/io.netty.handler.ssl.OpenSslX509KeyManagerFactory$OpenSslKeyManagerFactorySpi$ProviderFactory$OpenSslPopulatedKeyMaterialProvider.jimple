final class io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi$ProviderFactory$OpenSslPopulatedKeyMaterialProvider extends io.netty.handler.ssl.OpenSslKeyMaterialProvider
{
private final java.util.Map materialMap;
void <init>(javax.net.ssl.X509KeyManager, java.lang.String, java.lang.Iterable)
{
io.netty.buffer.UnpooledByteBufAllocator v11;
java.lang.Throwable v15;
javax.net.ssl.X509KeyManager v1;
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi$ProviderFactory$OpenSslPopulatedKeyMaterialProvider v0;
java.util.HashMap v4;
java.lang.Iterable v3;
java.util.Map v10, v14, v16, v8;
java.lang.String v2;
boolean v6, v9;
java.util.Iterator v5;
java.lang.Exception v13;
java.lang.Object v7;
io.netty.handler.ssl.OpenSslKeyMaterial v12;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi$ProviderFactory$OpenSslPopulatedKeyMaterialProvider;
v1 := @parameter0: javax.net.ssl.X509KeyManager;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.Iterable;
specialinvoke v0.<io.netty.handler.ssl.OpenSslKeyMaterialProvider: void <init>(javax.net.ssl.X509KeyManager,java.lang.String)>(v1, v2);
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>()>();
v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi$ProviderFactory$OpenSslPopulatedKeyMaterialProvider: java.util.Map materialMap> = v4;
label1:
v5 = interfaceinvoke v3.<java.lang.Iterable: java.util.Iterator iterator()>();
label2:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label7;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
if v7 == null goto label2;
v8 = v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi$ProviderFactory$OpenSslPopulatedKeyMaterialProvider: java.util.Map materialMap>;
v9 = interfaceinvoke v8.<java.util.Map: boolean containsKey(java.lang.Object)>(v7);
if v9 != 0 goto label2;
label3:
v10 = v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi$ProviderFactory$OpenSslPopulatedKeyMaterialProvider: java.util.Map materialMap>;
v11 = <io.netty.buffer.UnpooledByteBufAllocator: io.netty.buffer.UnpooledByteBufAllocator DEFAULT>;
v12 = specialinvoke v0.<io.netty.handler.ssl.OpenSslKeyMaterialProvider: io.netty.handler.ssl.OpenSslKeyMaterial chooseKeyMaterial(io.netty.buffer.ByteBufAllocator,java.lang.String)>(v11, v7);
interfaceinvoke v10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v7, v12);
label4:
goto label2;
label5:
v13 := @caughtexception;
v14 = v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi$ProviderFactory$OpenSslPopulatedKeyMaterialProvider: java.util.Map materialMap>;
interfaceinvoke v14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v7, v13);
goto label2;
label6:
v15 := @caughtexception;
virtualinvoke v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi$ProviderFactory$OpenSslPopulatedKeyMaterialProvider: void destroy()>();
throw v15;
label7:
v16 = v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi$ProviderFactory$OpenSslPopulatedKeyMaterialProvider: java.util.Map materialMap>;
staticinvoke <io.netty.util.internal.ObjectUtil: java.util.Map checkNonEmpty(java.util.Map,java.lang.String)>(v16, "materialMap");
return;
catch java.lang.Exception from label3 to label4 with label5;
catch java.lang.Throwable from label1 to label6 with label6;
}
io.netty.handler.ssl.OpenSslKeyMaterial chooseKeyMaterial(io.netty.buffer.ByteBufAllocator, java.lang.String) throws java.lang.Exception
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi$ProviderFactory$OpenSslPopulatedKeyMaterialProvider v0;
io.netty.buffer.ByteBufAllocator v1;
java.util.Map v3;
java.lang.Object v4;
java.lang.String v2;
io.netty.handler.ssl.OpenSslKeyMaterial v6;
boolean v5;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi$ProviderFactory$OpenSslPopulatedKeyMaterialProvider;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi$ProviderFactory$OpenSslPopulatedKeyMaterialProvider: java.util.Map materialMap>;
v4 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
if v4 != null goto label1;
return null;
label1:
v5 = v4 instanceof io.netty.handler.ssl.OpenSslKeyMaterial;
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<io.netty.handler.ssl.OpenSslKeyMaterial: io.netty.handler.ssl.OpenSslKeyMaterial retain()>();
return v6;
label2:
throw v4;
}
void destroy()
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi$ProviderFactory$OpenSslPopulatedKeyMaterialProvider v0;
java.util.Iterator v3;
java.util.Collection v2;
java.util.Map v1, v6;
java.lang.Object v5;
boolean v4;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi$ProviderFactory$OpenSslPopulatedKeyMaterialProvider;
v1 = v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi$ProviderFactory$OpenSslPopulatedKeyMaterialProvider: java.util.Map materialMap>;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v3 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v5);
goto label1;
label2:
v6 = v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi$ProviderFactory$OpenSslPopulatedKeyMaterialProvider: java.util.Map materialMap>;
interfaceinvoke v6.<java.util.Map: void clear()>();
return;
}
}