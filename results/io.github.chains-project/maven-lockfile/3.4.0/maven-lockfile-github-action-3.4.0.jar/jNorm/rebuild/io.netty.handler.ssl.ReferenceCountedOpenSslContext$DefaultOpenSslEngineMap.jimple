final class io.netty.handler.ssl.ReferenceCountedOpenSslContext$DefaultOpenSslEngineMap extends java.lang.Object implements io.netty.handler.ssl.OpenSslEngineMap
{
private final java.util.Map engines;
private void <init>()
{
io.netty.handler.ssl.ReferenceCountedOpenSslContext$DefaultOpenSslEngineMap v0;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslContext$DefaultOpenSslEngineMap;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$DefaultOpenSslEngineMap: java.util.Map engines> = v1;
return;
}
public io.netty.handler.ssl.ReferenceCountedOpenSslEngine remove(long)
{
java.lang.Long v3;
java.util.Map v2;
java.lang.Object v4;
long v1;
io.netty.handler.ssl.ReferenceCountedOpenSslContext$DefaultOpenSslEngineMap v0;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslContext$DefaultOpenSslEngineMap;
v1 := @parameter0: long;
v2 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$DefaultOpenSslEngineMap: java.util.Map engines>;
v3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v1);
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v3);
return v4;
}
public void add(io.netty.handler.ssl.ReferenceCountedOpenSslEngine)
{
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v1;
java.lang.Long v4;
java.util.Map v2;
long v3;
io.netty.handler.ssl.ReferenceCountedOpenSslContext$DefaultOpenSslEngineMap v0;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslContext$DefaultOpenSslEngineMap;
v1 := @parameter0: io.netty.handler.ssl.ReferenceCountedOpenSslEngine;
v2 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$DefaultOpenSslEngineMap: java.util.Map engines>;
v3 = virtualinvoke v1.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: long sslPointer()>();
v4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v3);
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v4, v1);
return;
}
public io.netty.handler.ssl.ReferenceCountedOpenSslEngine get(long)
{
java.lang.Long v3;
java.util.Map v2;
java.lang.Object v4;
long v1;
io.netty.handler.ssl.ReferenceCountedOpenSslContext$DefaultOpenSslEngineMap v0;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslContext$DefaultOpenSslEngineMap;
v1 := @parameter0: long;
v2 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$DefaultOpenSslEngineMap: java.util.Map engines>;
v3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v1);
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
return v4;
}
}