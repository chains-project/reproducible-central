final class io.netty.handler.ssl.ReferenceCountedOpenSslContext$PrivateKeyMethod extends java.lang.Object implements io.netty.internal.tcnative.SSLPrivateKeyMethod
{
private final io.netty.handler.ssl.OpenSslEngineMap engineMap;
private final io.netty.handler.ssl.OpenSslPrivateKeyMethod keyMethod;
void <init>(io.netty.handler.ssl.OpenSslEngineMap, io.netty.handler.ssl.OpenSslPrivateKeyMethod)
{
io.netty.handler.ssl.OpenSslEngineMap v1;
io.netty.handler.ssl.OpenSslPrivateKeyMethod v2;
io.netty.handler.ssl.ReferenceCountedOpenSslContext$PrivateKeyMethod v0;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslContext$PrivateKeyMethod;
v1 := @parameter0: io.netty.handler.ssl.OpenSslEngineMap;
v2 := @parameter1: io.netty.handler.ssl.OpenSslPrivateKeyMethod;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$PrivateKeyMethod: io.netty.handler.ssl.OpenSslEngineMap engineMap> = v1;
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$PrivateKeyMethod: io.netty.handler.ssl.OpenSslPrivateKeyMethod keyMethod> = v2;
return;
}
public byte[] sign(long, int, byte[]) throws java.lang.Exception
{
byte[] v3, v7, v8;
io.netty.handler.ssl.OpenSslEngineMap v4;
io.netty.handler.ssl.ReferenceCountedOpenSslContext$PrivateKeyMethod v0;
long v1;
java.lang.Exception v9;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v5;
int v2;
io.netty.handler.ssl.OpenSslPrivateKeyMethod v6;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslContext$PrivateKeyMethod;
v1 := @parameter0: long;
v2 := @parameter1: int;
v3 := @parameter2: byte[];
v4 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$PrivateKeyMethod: io.netty.handler.ssl.OpenSslEngineMap engineMap>;
v5 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslContext: io.netty.handler.ssl.ReferenceCountedOpenSslEngine retrieveEngine(io.netty.handler.ssl.OpenSslEngineMap,long)>(v4, v1);
label1:
v6 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$PrivateKeyMethod: io.netty.handler.ssl.OpenSslPrivateKeyMethod keyMethod>;
v7 = interfaceinvoke v6.<io.netty.handler.ssl.OpenSslPrivateKeyMethod: byte[] sign(javax.net.ssl.SSLEngine,int,byte[])>(v5, v2, v3);
v8 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslContext: byte[] verifyResult(byte[])>(v7);
label2:
return v8;
label3:
v9 := @caughtexception;
virtualinvoke v5.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: void initHandshakeException(java.lang.Throwable)>(v9);
throw v9;
catch java.lang.Exception from label1 to label2 with label3;
}
public byte[] decrypt(long, byte[]) throws java.lang.Exception
{
byte[] v2, v6, v7;
io.netty.handler.ssl.OpenSslEngineMap v3;
io.netty.handler.ssl.ReferenceCountedOpenSslContext$PrivateKeyMethod v0;
long v1;
java.lang.Exception v8;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v4;
io.netty.handler.ssl.OpenSslPrivateKeyMethod v5;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslContext$PrivateKeyMethod;
v1 := @parameter0: long;
v2 := @parameter1: byte[];
v3 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$PrivateKeyMethod: io.netty.handler.ssl.OpenSslEngineMap engineMap>;
v4 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslContext: io.netty.handler.ssl.ReferenceCountedOpenSslEngine retrieveEngine(io.netty.handler.ssl.OpenSslEngineMap,long)>(v3, v1);
label1:
v5 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$PrivateKeyMethod: io.netty.handler.ssl.OpenSslPrivateKeyMethod keyMethod>;
v6 = interfaceinvoke v5.<io.netty.handler.ssl.OpenSslPrivateKeyMethod: byte[] decrypt(javax.net.ssl.SSLEngine,byte[])>(v4, v2);
v7 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslContext: byte[] verifyResult(byte[])>(v6);
label2:
return v7;
label3:
v8 := @caughtexception;
virtualinvoke v4.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: void initHandshakeException(java.lang.Throwable)>(v8);
throw v8;
catch java.lang.Exception from label1 to label2 with label3;
}
}