enum class io.netty.handler.ssl.SslHandler$SslEngineType$3 extends io.netty.handler.ssl.SslHandler$SslEngineType
{
private void <init>(java.lang.String, int, boolean, io.netty.handler.codec.ByteToMessageDecoder$Cumulator)
{
io.netty.handler.codec.ByteToMessageDecoder$Cumulator v4;
int v2;
java.lang.String v1;
boolean v3;
io.netty.handler.ssl.SslHandler$SslEngineType$3 v0;
v0 := @this: io.netty.handler.ssl.SslHandler$SslEngineType$3;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: boolean;
v4 := @parameter3: io.netty.handler.codec.ByteToMessageDecoder$Cumulator;
specialinvoke v0.<io.netty.handler.ssl.SslHandler$SslEngineType: void <init>(java.lang.String,int,boolean,io.netty.handler.codec.ByteToMessageDecoder$Cumulator)>(v1, v2, v3, v4);
return;
}
javax.net.ssl.SSLEngineResult unwrap(io.netty.handler.ssl.SslHandler, io.netty.buffer.ByteBuf, int, io.netty.buffer.ByteBuf) throws javax.net.ssl.SSLException
{
javax.net.ssl.SSLEngineResult$HandshakeStatus v21;
java.nio.ByteBuffer v11, v7;
javax.net.ssl.SSLEngine v9;
javax.net.ssl.SSLEngineResult v12, v19;
io.netty.buffer.ByteBuf v2, v4;
int v10, v13, v14, v15, v16, v17, v18, v22, v3, v5, v6, v8;
javax.net.ssl.SSLEngineResult$Status v20;
io.netty.handler.ssl.SslHandler v1;
io.netty.handler.ssl.SslHandler$SslEngineType$3 v0;
v0 := @this: io.netty.handler.ssl.SslHandler$SslEngineType$3;
v1 := @parameter0: io.netty.handler.ssl.SslHandler;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: int;
v4 := @parameter3: io.netty.buffer.ByteBuf;
v5 = virtualinvoke v4.<io.netty.buffer.ByteBuf: int writerIndex()>();
v6 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
v7 = staticinvoke <io.netty.handler.ssl.SslHandler: java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)>(v2, v6, v3);
v8 = virtualinvoke v7.<java.nio.ByteBuffer: int position()>();
v9 = v1.<io.netty.handler.ssl.SslHandler: javax.net.ssl.SSLEngine engine>;
v10 = virtualinvoke v4.<io.netty.buffer.ByteBuf: int writableBytes()>();
v11 = staticinvoke <io.netty.handler.ssl.SslHandler: java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)>(v4, v5, v10);
v12 = virtualinvoke v9.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>(v7, v11);
v13 = virtualinvoke v12.<javax.net.ssl.SSLEngineResult: int bytesProduced()>();
v14 = v5 + v13;
virtualinvoke v4.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writerIndex(int)>(v14);
v15 = virtualinvoke v12.<javax.net.ssl.SSLEngineResult: int bytesConsumed()>();
if v15 != 0 goto label1;
v16 = virtualinvoke v7.<java.nio.ByteBuffer: int position()>();
v17 = v16 - v8;
v18 = virtualinvoke v12.<javax.net.ssl.SSLEngineResult: int bytesConsumed()>();
if v17 == v18 goto label1;
v19 = new javax.net.ssl.SSLEngineResult;
v20 = virtualinvoke v12.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>();
v21 = virtualinvoke v12.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();
v22 = virtualinvoke v12.<javax.net.ssl.SSLEngineResult: int bytesProduced()>();
specialinvoke v19.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>(v20, v21, v17, v22);
return v19;
label1:
return v12;
}
io.netty.buffer.ByteBuf allocateWrapBuffer(io.netty.handler.ssl.SslHandler, io.netty.buffer.ByteBufAllocator, int, int)
{
io.netty.buffer.ByteBufAllocator v2;
javax.net.ssl.SSLEngine v5;
javax.net.ssl.SSLSession v6;
io.netty.buffer.ByteBuf v8;
io.netty.handler.ssl.SslHandler v1;
int v3, v4, v7;
io.netty.handler.ssl.SslHandler$SslEngineType$3 v0;
v0 := @this: io.netty.handler.ssl.SslHandler$SslEngineType$3;
v1 := @parameter0: io.netty.handler.ssl.SslHandler;
v2 := @parameter1: io.netty.buffer.ByteBufAllocator;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = v1.<io.netty.handler.ssl.SslHandler: javax.net.ssl.SSLEngine engine>;
v6 = virtualinvoke v5.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLSession getSession()>();
v7 = interfaceinvoke v6.<javax.net.ssl.SSLSession: int getPacketBufferSize()>();
v8 = interfaceinvoke v2.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>(v7);
return v8;
}
int calculatePendingData(io.netty.handler.ssl.SslHandler, int)
{
int v2;
io.netty.handler.ssl.SslHandler v1;
io.netty.handler.ssl.SslHandler$SslEngineType$3 v0;
v0 := @this: io.netty.handler.ssl.SslHandler$SslEngineType$3;
v1 := @parameter0: io.netty.handler.ssl.SslHandler;
v2 := @parameter1: int;
return v2;
}
boolean jdkCompatibilityMode(javax.net.ssl.SSLEngine)
{
io.netty.handler.ssl.SslHandler$SslEngineType$3 v0;
javax.net.ssl.SSLEngine v1;
v0 := @this: io.netty.handler.ssl.SslHandler$SslEngineType$3;
v1 := @parameter0: javax.net.ssl.SSLEngine;
return 1;
}
}