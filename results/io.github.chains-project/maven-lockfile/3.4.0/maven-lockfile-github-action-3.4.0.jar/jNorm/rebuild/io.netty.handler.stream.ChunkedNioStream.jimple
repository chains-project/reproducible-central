public class io.netty.handler.stream.ChunkedNioStream extends java.lang.Object implements io.netty.handler.stream.ChunkedInput
{
private final java.nio.channels.ReadableByteChannel in;
private final int chunkSize;
private long offset;
private final java.nio.ByteBuffer byteBuffer;
public void <init>(java.nio.channels.ReadableByteChannel)
{
io.netty.handler.stream.ChunkedNioStream v0;
java.nio.channels.ReadableByteChannel v1;
v0 := @this: io.netty.handler.stream.ChunkedNioStream;
v1 := @parameter0: java.nio.channels.ReadableByteChannel;
specialinvoke v0.<io.netty.handler.stream.ChunkedNioStream: void <init>(java.nio.channels.ReadableByteChannel,int)>(v1, 8192);
return;
}
public void <init>(java.nio.channels.ReadableByteChannel, int)
{
io.netty.handler.stream.ChunkedNioStream v0;
java.nio.channels.ReadableByteChannel v1;
int v2, v4;
java.lang.Object v3;
java.nio.ByteBuffer v5;
v0 := @this: io.netty.handler.stream.ChunkedNioStream;
v1 := @parameter0: java.nio.channels.ReadableByteChannel;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "in");
v0.<io.netty.handler.stream.ChunkedNioStream: java.nio.channels.ReadableByteChannel in> = v3;
v4 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v2, "chunkSize");
v0.<io.netty.handler.stream.ChunkedNioStream: int chunkSize> = v4;
v5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(v2);
v0.<io.netty.handler.stream.ChunkedNioStream: java.nio.ByteBuffer byteBuffer> = v5;
return;
}
public long transferredBytes()
{
io.netty.handler.stream.ChunkedNioStream v0;
long v1;
v0 := @this: io.netty.handler.stream.ChunkedNioStream;
v1 = v0.<io.netty.handler.stream.ChunkedNioStream: long offset>;
return v1;
}
public boolean isEndOfInput() throws java.lang.Exception
{
io.netty.handler.stream.ChunkedNioStream v0;
java.nio.channels.ReadableByteChannel v3, v5;
long v8, v9;
java.nio.ByteBuffer v1, v6;
int v2, v7;
boolean v4;
v0 := @this: io.netty.handler.stream.ChunkedNioStream;
v1 = v0.<io.netty.handler.stream.ChunkedNioStream: java.nio.ByteBuffer byteBuffer>;
v2 = virtualinvoke v1.<java.nio.ByteBuffer: int position()>();
if v2 <= 0 goto label1;
return 0;
label1:
v3 = v0.<io.netty.handler.stream.ChunkedNioStream: java.nio.channels.ReadableByteChannel in>;
v4 = interfaceinvoke v3.<java.nio.channels.ReadableByteChannel: boolean isOpen()>();
if v4 == 0 goto label3;
v5 = v0.<io.netty.handler.stream.ChunkedNioStream: java.nio.channels.ReadableByteChannel in>;
v6 = v0.<io.netty.handler.stream.ChunkedNioStream: java.nio.ByteBuffer byteBuffer>;
v7 = interfaceinvoke v5.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(v6);
if v7 >= 0 goto label2;
return 1;
label2:
v8 = v0.<io.netty.handler.stream.ChunkedNioStream: long offset>;
v9 = v8 + v7;
v0.<io.netty.handler.stream.ChunkedNioStream: long offset> = v9;
return 0;
label3:
return 1;
}
public void close() throws java.lang.Exception
{
io.netty.handler.stream.ChunkedNioStream v0;
java.nio.channels.ReadableByteChannel v1;
v0 := @this: io.netty.handler.stream.ChunkedNioStream;
v1 = v0.<io.netty.handler.stream.ChunkedNioStream: java.nio.channels.ReadableByteChannel in>;
interfaceinvoke v1.<java.nio.channels.ReadableByteChannel: void close()>();
return;
}
public io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.handler.stream.ChunkedNioStream v0;
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v3;
io.netty.buffer.ByteBufAllocator v2;
v0 := @this: io.netty.handler.stream.ChunkedNioStream;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.buffer.ByteBufAllocator alloc()>();
v3 = virtualinvoke v0.<io.netty.handler.stream.ChunkedNioStream: io.netty.buffer.ByteBuf readChunk(io.netty.buffer.ByteBufAllocator)>(v2);
return v3;
}
public io.netty.buffer.ByteBuf readChunk(io.netty.buffer.ByteBufAllocator) throws java.lang.Exception
{
java.lang.Throwable v17;
io.netty.buffer.ByteBufAllocator v1;
long v8, v9;
java.nio.ByteBuffer v11, v12, v15, v16, v3, v6;
io.netty.buffer.ByteBuf v14;
int v10, v13, v4, v7;
boolean v2;
io.netty.handler.stream.ChunkedNioStream v0;
java.nio.channels.ReadableByteChannel v5;
v0 := @this: io.netty.handler.stream.ChunkedNioStream;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 = virtualinvoke v0.<io.netty.handler.stream.ChunkedNioStream: boolean isEndOfInput()>();
if v2 == 0 goto label1;
return null;
label1:
v3 = v0.<io.netty.handler.stream.ChunkedNioStream: java.nio.ByteBuffer byteBuffer>;
v4 = virtualinvoke v3.<java.nio.ByteBuffer: int position()>();
label2:
v5 = v0.<io.netty.handler.stream.ChunkedNioStream: java.nio.channels.ReadableByteChannel in>;
v6 = v0.<io.netty.handler.stream.ChunkedNioStream: java.nio.ByteBuffer byteBuffer>;
v7 = interfaceinvoke v5.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(v6);
if v7 < 0 goto label3;
v4 = v4 + v7;
v8 = v0.<io.netty.handler.stream.ChunkedNioStream: long offset>;
v9 = v8 + v7;
v0.<io.netty.handler.stream.ChunkedNioStream: long offset> = v9;
v10 = v0.<io.netty.handler.stream.ChunkedNioStream: int chunkSize>;
if v4 != v10 goto label2;
label3:
v11 = v0.<io.netty.handler.stream.ChunkedNioStream: java.nio.ByteBuffer byteBuffer>;
virtualinvoke v11.<java.nio.ByteBuffer: java.nio.ByteBuffer flip()>();
v12 = v0.<io.netty.handler.stream.ChunkedNioStream: java.nio.ByteBuffer byteBuffer>;
v13 = virtualinvoke v12.<java.nio.ByteBuffer: int remaining()>();
v14 = interfaceinvoke v1.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf buffer(int)>(v13);
label4:
v15 = v0.<io.netty.handler.stream.ChunkedNioStream: java.nio.ByteBuffer byteBuffer>;
virtualinvoke v14.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)>(v15);
v16 = v0.<io.netty.handler.stream.ChunkedNioStream: java.nio.ByteBuffer byteBuffer>;
virtualinvoke v16.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
label5:
return v14;
label6:
v17 := @caughtexception;
virtualinvoke v14.<io.netty.buffer.ByteBuf: boolean release()>();
throw v17;
catch java.lang.Throwable from label4 to label5 with label6;
}
public long length()
{
io.netty.handler.stream.ChunkedNioStream v0;
v0 := @this: io.netty.handler.stream.ChunkedNioStream;
return -1L;
}
public long progress()
{
io.netty.handler.stream.ChunkedNioStream v0;
long v1;
v0 := @this: io.netty.handler.stream.ChunkedNioStream;
v1 = v0.<io.netty.handler.stream.ChunkedNioStream: long offset>;
return v1;
}
}