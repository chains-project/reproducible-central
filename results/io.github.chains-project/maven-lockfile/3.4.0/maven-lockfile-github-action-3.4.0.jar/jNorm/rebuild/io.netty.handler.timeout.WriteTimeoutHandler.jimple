public class io.netty.handler.timeout.WriteTimeoutHandler extends io.netty.channel.ChannelOutboundHandlerAdapter
{
private static final long MIN_TIMEOUT_NANOS;
private final long timeoutNanos;
private io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask lastTask;
private boolean closed;
static final boolean $assertionsDisabled;
public void <init>(int)
{
int v1;
java.util.concurrent.TimeUnit v2;
io.netty.handler.timeout.WriteTimeoutHandler v0;
v0 := @this: io.netty.handler.timeout.WriteTimeoutHandler;
v1 := @parameter0: int;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
specialinvoke v0.<io.netty.handler.timeout.WriteTimeoutHandler: void <init>(long,java.util.concurrent.TimeUnit)>(v1, v2);
return;
}
public void <init>(long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v2;
io.netty.handler.timeout.WriteTimeoutHandler v0;
byte v3;
long v1, v4, v5, v6;
v0 := @this: io.netty.handler.timeout.WriteTimeoutHandler;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
specialinvoke v0.<io.netty.channel.ChannelOutboundHandlerAdapter: void <init>()>();
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "unit");
v3 = v1 cmp 0L;
if v3 > 0 goto label1;
v0.<io.netty.handler.timeout.WriteTimeoutHandler: long timeoutNanos> = 0L;
goto label2;
label1:
v4 = virtualinvoke v2.<java.util.concurrent.TimeUnit: long toNanos(long)>(v1);
v5 = <io.netty.handler.timeout.WriteTimeoutHandler: long MIN_TIMEOUT_NANOS>;
v6 = staticinvoke <java.lang.Math: long max(long,long)>(v4, v5);
v0.<io.netty.handler.timeout.WriteTimeoutHandler: long timeoutNanos> = v6;
label2:
return;
}
public void write(io.netty.channel.ChannelHandlerContext, java.lang.Object, io.netty.channel.ChannelPromise) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.timeout.WriteTimeoutHandler v0;
byte v5;
io.netty.channel.ChannelPromise v3;
java.lang.Object v2;
long v4;
v0 := @this: io.netty.handler.timeout.WriteTimeoutHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = v0.<io.netty.handler.timeout.WriteTimeoutHandler: long timeoutNanos>;
v5 = v4 cmp 0L;
if v5 <= 0 goto label1;
v3 = interfaceinvoke v3.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise unvoid()>();
specialinvoke v0.<io.netty.handler.timeout.WriteTimeoutHandler: void scheduleTimeout(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)>(v1, v3);
label1:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v2, v3);
return;
}
public void handlerRemoved(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.util.concurrent.EventExecutor v3, v9;
io.netty.handler.timeout.WriteTimeoutHandler v0;
java.lang.AssertionError v11, v5;
io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask v13, v6;
io.netty.channel.ChannelHandlerContext v1, v8;
io.netty.util.concurrent.Future v12;
boolean v10, v2, v4, v7;
v0 := @this: io.netty.handler.timeout.WriteTimeoutHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = <io.netty.handler.timeout.WriteTimeoutHandler: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v4 = interfaceinvoke v3.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v4 != 0 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = v0.<io.netty.handler.timeout.WriteTimeoutHandler: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask lastTask>;
v0.<io.netty.handler.timeout.WriteTimeoutHandler: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask lastTask> = null;
label2:
if v6 == null goto label4;
v7 = <io.netty.handler.timeout.WriteTimeoutHandler: boolean $assertionsDisabled>;
if v7 != 0 goto label3;
v8 = v6.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.channel.ChannelHandlerContext ctx>;
v9 = interfaceinvoke v8.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v10 = interfaceinvoke v9.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v10 != 0 goto label3;
v11 = new java.lang.AssertionError;
specialinvoke v11.<java.lang.AssertionError: void <init>()>();
throw v11;
label3:
v12 = v6.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.util.concurrent.Future scheduledFuture>;
interfaceinvoke v12.<io.netty.util.concurrent.Future: boolean cancel(boolean)>(0);
v13 = v6.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask prev>;
v6.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask prev> = null;
v6.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask next> = null;
v6 = v13;
goto label2;
label4:
return;
}
private void scheduleTimeout(io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelPromise)
{
io.netty.util.concurrent.EventExecutor v4;
io.netty.handler.timeout.WriteTimeoutHandler v0;
io.netty.util.concurrent.ScheduledFuture v7;
long v5;
io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask v3;
java.util.concurrent.TimeUnit v6;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v2;
io.netty.util.concurrent.Future v8;
boolean v9;
v0 := @this: io.netty.handler.timeout.WriteTimeoutHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = new io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask;
specialinvoke v3.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: void <init>(io.netty.handler.timeout.WriteTimeoutHandler,io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)>(v0, v1, v2);
v4 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v5 = v0.<io.netty.handler.timeout.WriteTimeoutHandler: long timeoutNanos>;
v6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
v7 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v3, v5, v6);
v3.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.util.concurrent.Future scheduledFuture> = v7;
v8 = v3.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.util.concurrent.Future scheduledFuture>;
v9 = interfaceinvoke v8.<io.netty.util.concurrent.Future: boolean isDone()>();
if v9 != 0 goto label1;
specialinvoke v0.<io.netty.handler.timeout.WriteTimeoutHandler: void addWriteTimeoutTask(io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask)>(v3);
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)>(v3);
label1:
return;
}
private void addWriteTimeoutTask(io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask)
{
io.netty.util.concurrent.EventExecutor v4;
io.netty.handler.timeout.WriteTimeoutHandler v0;
java.lang.AssertionError v6;
io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask v1, v7, v8, v9;
io.netty.channel.ChannelHandlerContext v3;
boolean v2, v5;
v0 := @this: io.netty.handler.timeout.WriteTimeoutHandler;
v1 := @parameter0: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask;
v2 = <io.netty.handler.timeout.WriteTimeoutHandler: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v1.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.channel.ChannelHandlerContext ctx>;
v4 = interfaceinvoke v3.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v5 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v5 != 0 goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
v7 = v0.<io.netty.handler.timeout.WriteTimeoutHandler: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask lastTask>;
if v7 == null goto label2;
v8 = v0.<io.netty.handler.timeout.WriteTimeoutHandler: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask lastTask>;
v8.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask next> = v1;
v9 = v0.<io.netty.handler.timeout.WriteTimeoutHandler: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask lastTask>;
v1.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask prev> = v9;
label2:
v0.<io.netty.handler.timeout.WriteTimeoutHandler: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask lastTask> = v1;
return;
}
private void removeWriteTimeoutTask(io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask)
{
io.netty.util.concurrent.EventExecutor v4;
java.lang.AssertionError v10, v6;
io.netty.channel.ChannelHandlerContext v3;
boolean v2, v5, v8;
io.netty.handler.timeout.WriteTimeoutHandler v0;
io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask v1, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v7, v9;
v0 := @this: io.netty.handler.timeout.WriteTimeoutHandler;
v1 := @parameter0: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask;
v2 = <io.netty.handler.timeout.WriteTimeoutHandler: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v1.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.channel.ChannelHandlerContext ctx>;
v4 = interfaceinvoke v3.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v5 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v5 != 0 goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
v7 = v0.<io.netty.handler.timeout.WriteTimeoutHandler: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask lastTask>;
if v1 != v7 goto label3;
v8 = <io.netty.handler.timeout.WriteTimeoutHandler: boolean $assertionsDisabled>;
if v8 != 0 goto label2;
v9 = v1.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask next>;
if v9 == null goto label2;
v10 = new java.lang.AssertionError;
specialinvoke v10.<java.lang.AssertionError: void <init>()>();
throw v10;
label2:
v11 = v0.<io.netty.handler.timeout.WriteTimeoutHandler: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask lastTask>;
v12 = v11.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask prev>;
v0.<io.netty.handler.timeout.WriteTimeoutHandler: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask lastTask> = v12;
v13 = v0.<io.netty.handler.timeout.WriteTimeoutHandler: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask lastTask>;
if v13 == null goto label6;
v14 = v0.<io.netty.handler.timeout.WriteTimeoutHandler: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask lastTask>;
v14.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask next> = null;
goto label6;
label3:
v15 = v1.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask prev>;
if v15 != null goto label4;
v16 = v1.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask next>;
if v16 != null goto label4;
return;
label4:
v17 = v1.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask prev>;
if v17 != null goto label5;
v18 = v1.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask next>;
v18.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask prev> = null;
goto label6;
label5:
v19 = v1.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask prev>;
v20 = v1.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask next>;
v19.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask next> = v20;
v21 = v1.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask next>;
v22 = v1.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask prev>;
v21.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask prev> = v22;
label6:
v1.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask prev> = null;
v1.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask next> = null;
return;
}
protected void writeTimedOut(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.handler.timeout.WriteTimeoutException v3;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.timeout.WriteTimeoutHandler v0;
boolean v2;
v0 := @this: io.netty.handler.timeout.WriteTimeoutHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = v0.<io.netty.handler.timeout.WriteTimeoutHandler: boolean closed>;
if v2 != 0 goto label1;
v3 = <io.netty.handler.timeout.WriteTimeoutException: io.netty.handler.timeout.WriteTimeoutException INSTANCE>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)>(v3);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close()>();
v0.<io.netty.handler.timeout.WriteTimeoutHandler: boolean closed> = 1;
label1:
return;
}
static void <clinit>()
{
java.util.concurrent.TimeUnit v3;
java.lang.Class v0;
long v4;
boolean v1, v2;
v0 = class "Lio/netty/handler/timeout/WriteTimeoutHandler;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.timeout.WriteTimeoutHandler: boolean $assertionsDisabled> = v2;
v3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v4 = virtualinvoke v3.<java.util.concurrent.TimeUnit: long toNanos(long)>(1L);
<io.netty.handler.timeout.WriteTimeoutHandler: long MIN_TIMEOUT_NANOS> = v4;
return;
}
}