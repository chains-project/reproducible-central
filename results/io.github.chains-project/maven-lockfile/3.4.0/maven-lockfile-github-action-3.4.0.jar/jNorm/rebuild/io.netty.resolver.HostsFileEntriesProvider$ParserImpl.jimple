final class io.netty.resolver.HostsFileEntriesProvider$ParserImpl extends java.lang.Object implements io.netty.resolver.HostsFileEntriesProvider$Parser
{
private static final java.lang.String WINDOWS_DEFAULT_SYSTEM_ROOT;
private static final java.lang.String WINDOWS_HOSTS_FILE_RELATIVE_PATH;
private static final java.lang.String X_PLATFORMS_HOSTS_FILE_PATH;
private static final java.util.regex.Pattern WHITESPACES;
private static final io.netty.util.internal.logging.InternalLogger logger;
static final io.netty.resolver.HostsFileEntriesProvider$ParserImpl INSTANCE;
private void <init>()
{
io.netty.resolver.HostsFileEntriesProvider$ParserImpl v0;
v0 := @this: io.netty.resolver.HostsFileEntriesProvider$ParserImpl;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public io.netty.resolver.HostsFileEntriesProvider parse() throws java.io.IOException
{
io.netty.resolver.HostsFileEntriesProvider$ParserImpl v0;
java.nio.charset.Charset v3;
java.nio.charset.Charset[] v2;
io.netty.resolver.HostsFileEntriesProvider v4;
java.io.File v1;
v0 := @this: io.netty.resolver.HostsFileEntriesProvider$ParserImpl;
v1 = staticinvoke <io.netty.resolver.HostsFileEntriesProvider$ParserImpl: java.io.File locateHostsFile()>();
v2 = newarray (java.nio.charset.Charset)[1];
v3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
v2[0] = v3;
v4 = virtualinvoke v0.<io.netty.resolver.HostsFileEntriesProvider$ParserImpl: io.netty.resolver.HostsFileEntriesProvider parse(java.io.File,java.nio.charset.Charset[])>(v1, v2);
return v4;
}
public transient io.netty.resolver.HostsFileEntriesProvider parse(java.nio.charset.Charset[]) throws java.io.IOException
{
io.netty.resolver.HostsFileEntriesProvider$ParserImpl v0;
java.nio.charset.Charset[] v1;
io.netty.resolver.HostsFileEntriesProvider v3;
java.io.File v2;
v0 := @this: io.netty.resolver.HostsFileEntriesProvider$ParserImpl;
v1 := @parameter0: java.nio.charset.Charset[];
v2 = staticinvoke <io.netty.resolver.HostsFileEntriesProvider$ParserImpl: java.io.File locateHostsFile()>();
v3 = virtualinvoke v0.<io.netty.resolver.HostsFileEntriesProvider$ParserImpl: io.netty.resolver.HostsFileEntriesProvider parse(java.io.File,java.nio.charset.Charset[])>(v2, v1);
return v3;
}
public transient io.netty.resolver.HostsFileEntriesProvider parse(java.io.File, java.nio.charset.Charset[]) throws java.io.IOException
{
java.lang.Throwable v17;
java.nio.charset.Charset v11, v5;
int v10, v3, v9;
boolean v6, v7;
java.io.FileInputStream v14;
java.io.InputStreamReader v13;
java.io.File v1;
io.netty.resolver.HostsFileEntriesProvider$ParserImpl v0;
java.io.BufferedReader v12;
java.nio.charset.Charset[] v2, v4, v8;
io.netty.resolver.HostsFileEntriesProvider v15, v16, v18;
v0 := @this: io.netty.resolver.HostsFileEntriesProvider$ParserImpl;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.nio.charset.Charset[];
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "file");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "charsets");
v3 = lengthof v2;
if v3 != 0 goto label1;
v4 = newarray (java.nio.charset.Charset)[1];
v5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
v4[0] = v5;
v2 = v4;
label1:
v6 = virtualinvoke v1.<java.io.File: boolean exists()>();
if v6 == 0 goto label8;
v7 = virtualinvoke v1.<java.io.File: boolean isFile()>();
if v7 == 0 goto label8;
v8 = v2;
v9 = lengthof v2;
v10 = 0;
label2:
if v10 >= v9 goto label8;
v11 = v8[v10];
v12 = new java.io.BufferedReader;
v13 = new java.io.InputStreamReader;
v14 = new java.io.FileInputStream;
specialinvoke v14.<java.io.FileInputStream: void <init>(java.io.File)>(v1);
specialinvoke v13.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(v14, v11);
specialinvoke v12.<java.io.BufferedReader: void <init>(java.io.Reader)>(v13);
label3:
v15 = virtualinvoke v0.<io.netty.resolver.HostsFileEntriesProvider$ParserImpl: io.netty.resolver.HostsFileEntriesProvider parse(java.io.Reader)>(v12);
v16 = <io.netty.resolver.HostsFileEntriesProvider: io.netty.resolver.HostsFileEntriesProvider EMPTY>;
if v15 == v16 goto label5;
label4:
virtualinvoke v12.<java.io.BufferedReader: void close()>();
return v15;
label5:
virtualinvoke v12.<java.io.BufferedReader: void close()>();
goto label7;
label6:
v17 := @caughtexception;
virtualinvoke v12.<java.io.BufferedReader: void close()>();
throw v17;
label7:
v10 = v10 + 1;
goto label2;
label8:
v18 = <io.netty.resolver.HostsFileEntriesProvider: io.netty.resolver.HostsFileEntriesProvider EMPTY>;
return v18;
catch java.lang.Throwable from label3 to label4 with label6;
}
public io.netty.resolver.HostsFileEntriesProvider parse(java.io.Reader) throws java.io.IOException
{
byte[] v20;
java.net.InetAddress v26;
java.util.Locale v24;
boolean v10, v17, v27, v30, v31;
java.io.Reader v1;
io.netty.resolver.HostsFileEntriesProvider$ParserImpl v0;
java.util.regex.Pattern v12;
io.netty.resolver.HostsFileEntriesProvider v32, v33, v34;
java.lang.Throwable v35;
java.lang.String[] v13;
java.util.HashMap v3, v4;
java.util.ArrayList v11, v29;
int v14, v15, v18, v21, v22, v7, v8;
java.lang.String v16, v25, v5, v6, v9;
java.lang.Object v19, v23, v28;
java.io.BufferedReader v2;
v0 := @this: io.netty.resolver.HostsFileEntriesProvider$ParserImpl;
v1 := @parameter0: java.io.Reader;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "reader");
v2 = new java.io.BufferedReader;
specialinvoke v2.<java.io.BufferedReader: void <init>(java.io.Reader)>(v1);
label01:
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>()>();
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>()>();
label02:
v5 = virtualinvoke v2.<java.io.BufferedReader: java.lang.String readLine()>();
v6 = v5;
if v5 == null goto label10;
v7 = virtualinvoke v5.<java.lang.String: int indexOf(int)>(35);
v8 = (int) -1;
if v7 == v8 goto label03;
v6 = virtualinvoke v5.<java.lang.String: java.lang.String substring(int,int)>(0, v7);
label03:
v9 = virtualinvoke v6.<java.lang.String: java.lang.String trim()>();
v10 = virtualinvoke v9.<java.lang.String: boolean isEmpty()>();
if v10 != 0 goto label02;
v11 = new java.util.ArrayList;
specialinvoke v11.<java.util.ArrayList: void <init>()>();
v12 = <io.netty.resolver.HostsFileEntriesProvider$ParserImpl: java.util.regex.Pattern WHITESPACES>;
v13 = virtualinvoke v12.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>(v9);
v14 = lengthof v13;
v15 = 0;
label04:
if v15 >= v14 goto label06;
v16 = v13[v15];
v17 = virtualinvoke v16.<java.lang.String: boolean isEmpty()>();
if v17 != 0 goto label05;
interfaceinvoke v11.<java.util.List: boolean add(java.lang.Object)>(v16);
label05:
v15 = v15 + 1;
goto label04;
label06:
v18 = interfaceinvoke v11.<java.util.List: int size()>();
if v18 < 2 goto label02;
v19 = interfaceinvoke v11.<java.util.List: java.lang.Object get(int)>(0);
v20 = staticinvoke <io.netty.util.NetUtil: byte[] createByteArrayFromIpAddressString(java.lang.String)>(v19);
if v20 == null goto label02;
v21 = 1;
label07:
v22 = interfaceinvoke v11.<java.util.List: int size()>();
if v21 >= v22 goto label02;
v23 = interfaceinvoke v11.<java.util.List: java.lang.Object get(int)>(v21);
v24 = <java.util.Locale: java.util.Locale ENGLISH>;
v25 = virtualinvoke v23.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v24);
v26 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])>(v23, v20);
v27 = v26 instanceof java.net.Inet4Address;
if v27 == 0 goto label08;
v28 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v25);
if v28 != null goto label09;
v29 = new java.util.ArrayList;
specialinvoke v29.<java.util.ArrayList: void <init>()>();
v28 = v29;
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v25, v29);
goto label09;
label08:
interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(v25);
label09:
interfaceinvoke v28.<java.util.List: boolean add(java.lang.Object)>(v26);
v21 = v21 + 1;
goto label07;
label10:
v30 = interfaceinvoke v3.<java.util.Map: boolean isEmpty()>();
if v30 == 0 goto label11;
v31 = interfaceinvoke v4.<java.util.Map: boolean isEmpty()>();
if v31 == 0 goto label11;
v32 = <io.netty.resolver.HostsFileEntriesProvider: io.netty.resolver.HostsFileEntriesProvider EMPTY>;
goto label12;
label11:
v33 = new io.netty.resolver.HostsFileEntriesProvider;
v32 = v33;
specialinvoke v33.<io.netty.resolver.HostsFileEntriesProvider: void <init>(java.util.Map,java.util.Map)>(v3, v4);
label12:
v34 = v32;
label13:
return v34;
label14:
v35 := @caughtexception;
throw v35;
catch java.lang.Throwable from label01 to label13 with label14;
}
public io.netty.resolver.HostsFileEntriesProvider parseSilently()
{
io.netty.resolver.HostsFileEntriesProvider$ParserImpl v0;
java.nio.charset.Charset v3;
java.nio.charset.Charset[] v2;
io.netty.resolver.HostsFileEntriesProvider v4;
java.io.File v1;
v0 := @this: io.netty.resolver.HostsFileEntriesProvider$ParserImpl;
v1 = staticinvoke <io.netty.resolver.HostsFileEntriesProvider$ParserImpl: java.io.File locateHostsFile()>();
v2 = newarray (java.nio.charset.Charset)[1];
v3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
v2[0] = v3;
v4 = virtualinvoke v0.<io.netty.resolver.HostsFileEntriesProvider$ParserImpl: io.netty.resolver.HostsFileEntriesProvider parseSilently(java.io.File,java.nio.charset.Charset[])>(v1, v2);
return v4;
}
public transient io.netty.resolver.HostsFileEntriesProvider parseSilently(java.nio.charset.Charset[])
{
io.netty.resolver.HostsFileEntriesProvider$ParserImpl v0;
java.nio.charset.Charset[] v1;
io.netty.resolver.HostsFileEntriesProvider v3;
java.io.File v2;
v0 := @this: io.netty.resolver.HostsFileEntriesProvider$ParserImpl;
v1 := @parameter0: java.nio.charset.Charset[];
v2 = staticinvoke <io.netty.resolver.HostsFileEntriesProvider$ParserImpl: java.io.File locateHostsFile()>();
v3 = virtualinvoke v0.<io.netty.resolver.HostsFileEntriesProvider$ParserImpl: io.netty.resolver.HostsFileEntriesProvider parseSilently(java.io.File,java.nio.charset.Charset[])>(v2, v1);
return v3;
}
public transient io.netty.resolver.HostsFileEntriesProvider parseSilently(java.io.File, java.nio.charset.Charset[])
{
java.io.IOException v4;
java.io.File v1;
io.netty.resolver.HostsFileEntriesProvider$ParserImpl v0;
io.netty.util.internal.logging.InternalLogger v5, v7;
java.lang.String v8, v9;
java.nio.charset.Charset[] v2;
io.netty.resolver.HostsFileEntriesProvider v10, v3;
boolean v6;
v0 := @this: io.netty.resolver.HostsFileEntriesProvider$ParserImpl;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.nio.charset.Charset[];
label1:
v3 = virtualinvoke v0.<io.netty.resolver.HostsFileEntriesProvider$ParserImpl: io.netty.resolver.HostsFileEntriesProvider parse(java.io.File,java.nio.charset.Charset[])>(v1, v2);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = <io.netty.resolver.HostsFileEntriesProvider$ParserImpl: io.netty.util.internal.logging.InternalLogger logger>;
v6 = interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: boolean isWarnEnabled()>();
if v6 == 0 goto label4;
v7 = <io.netty.resolver.HostsFileEntriesProvider$ParserImpl: io.netty.util.internal.logging.InternalLogger logger>;
v8 = virtualinvoke v1.<java.io.File: java.lang.String getPath()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to load and parse hosts file at \u0001");
interfaceinvoke v7.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Throwable)>(v9, v4);
label4:
v10 = <io.netty.resolver.HostsFileEntriesProvider: io.netty.resolver.HostsFileEntriesProvider EMPTY>;
return v10;
catch java.io.IOException from label1 to label2 with label3;
}
private static java.io.File locateHostsFile()
{
java.io.File v1, v4, v6, v7;
java.lang.String v2, v3;
boolean v0, v5;
v0 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean isWindows()>();
if v0 == 0 goto label1;
v1 = new java.io.File;
v2 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("SystemRoot");
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\\system32\\drivers\\etc\\hosts");
specialinvoke v1.<java.io.File: void <init>(java.lang.String)>(v3);
v4 = v1;
v5 = virtualinvoke v1.<java.io.File: boolean exists()>();
if v5 != 0 goto label2;
v6 = new java.io.File;
specialinvoke v6.<java.io.File: void <init>(java.lang.String)>("C:\\Windows\\system32\\drivers\\etc\\hosts");
v4 = v6;
goto label2;
label1:
v7 = new java.io.File;
specialinvoke v7.<java.io.File: void <init>(java.lang.String)>("/etc/hosts");
v4 = v7;
label2:
return v4;
}
static void <clinit>()
{
io.netty.resolver.HostsFileEntriesProvider$ParserImpl v2;
java.util.regex.Pattern v0;
io.netty.util.internal.logging.InternalLogger v1;
v0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[ \t]+");
<io.netty.resolver.HostsFileEntriesProvider$ParserImpl: java.util.regex.Pattern WHITESPACES> = v0;
v1 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/resolver/HostsFileEntriesProvider$Parser;");
<io.netty.resolver.HostsFileEntriesProvider$ParserImpl: io.netty.util.internal.logging.InternalLogger logger> = v1;
v2 = new io.netty.resolver.HostsFileEntriesProvider$ParserImpl;
specialinvoke v2.<io.netty.resolver.HostsFileEntriesProvider$ParserImpl: void <init>()>();
<io.netty.resolver.HostsFileEntriesProvider$ParserImpl: io.netty.resolver.HostsFileEntriesProvider$ParserImpl INSTANCE> = v2;
return;
}
}