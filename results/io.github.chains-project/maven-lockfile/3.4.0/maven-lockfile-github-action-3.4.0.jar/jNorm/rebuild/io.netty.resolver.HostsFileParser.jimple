public final class io.netty.resolver.HostsFileParser extends java.lang.Object
{
public static io.netty.resolver.HostsFileEntries parseSilently()
{
io.netty.resolver.HostsFileEntries v2;
io.netty.resolver.HostsFileEntriesProvider$Parser v0;
io.netty.resolver.HostsFileEntriesProvider v1;
v0 = staticinvoke <io.netty.resolver.HostsFileEntriesProvider: io.netty.resolver.HostsFileEntriesProvider$Parser parser()>();
v1 = interfaceinvoke v0.<io.netty.resolver.HostsFileEntriesProvider$Parser: io.netty.resolver.HostsFileEntriesProvider parseSilently()>();
v2 = staticinvoke <io.netty.resolver.HostsFileParser: io.netty.resolver.HostsFileEntries hostsFileEntries(io.netty.resolver.HostsFileEntriesProvider)>(v1);
return v2;
}
public static transient io.netty.resolver.HostsFileEntries parseSilently(java.nio.charset.Charset[])
{
io.netty.resolver.HostsFileEntriesProvider$Parser v1;
io.netty.resolver.HostsFileEntries v3;
java.nio.charset.Charset[] v0;
io.netty.resolver.HostsFileEntriesProvider v2;
v0 := @parameter0: java.nio.charset.Charset[];
v1 = staticinvoke <io.netty.resolver.HostsFileEntriesProvider: io.netty.resolver.HostsFileEntriesProvider$Parser parser()>();
v2 = interfaceinvoke v1.<io.netty.resolver.HostsFileEntriesProvider$Parser: io.netty.resolver.HostsFileEntriesProvider parseSilently(java.nio.charset.Charset[])>(v0);
v3 = staticinvoke <io.netty.resolver.HostsFileParser: io.netty.resolver.HostsFileEntries hostsFileEntries(io.netty.resolver.HostsFileEntriesProvider)>(v2);
return v3;
}
public static io.netty.resolver.HostsFileEntries parse() throws java.io.IOException
{
io.netty.resolver.HostsFileEntries v2;
io.netty.resolver.HostsFileEntriesProvider$Parser v0;
io.netty.resolver.HostsFileEntriesProvider v1;
v0 = staticinvoke <io.netty.resolver.HostsFileEntriesProvider: io.netty.resolver.HostsFileEntriesProvider$Parser parser()>();
v1 = interfaceinvoke v0.<io.netty.resolver.HostsFileEntriesProvider$Parser: io.netty.resolver.HostsFileEntriesProvider parse()>();
v2 = staticinvoke <io.netty.resolver.HostsFileParser: io.netty.resolver.HostsFileEntries hostsFileEntries(io.netty.resolver.HostsFileEntriesProvider)>(v1);
return v2;
}
public static io.netty.resolver.HostsFileEntries parse(java.io.File) throws java.io.IOException
{
io.netty.resolver.HostsFileEntriesProvider$Parser v1;
io.netty.resolver.HostsFileEntries v4;
java.nio.charset.Charset[] v2;
io.netty.resolver.HostsFileEntriesProvider v3;
java.io.File v0;
v0 := @parameter0: java.io.File;
v1 = staticinvoke <io.netty.resolver.HostsFileEntriesProvider: io.netty.resolver.HostsFileEntriesProvider$Parser parser()>();
v2 = newarray (java.nio.charset.Charset)[0];
v3 = interfaceinvoke v1.<io.netty.resolver.HostsFileEntriesProvider$Parser: io.netty.resolver.HostsFileEntriesProvider parse(java.io.File,java.nio.charset.Charset[])>(v0, v2);
v4 = staticinvoke <io.netty.resolver.HostsFileParser: io.netty.resolver.HostsFileEntries hostsFileEntries(io.netty.resolver.HostsFileEntriesProvider)>(v3);
return v4;
}
public static transient io.netty.resolver.HostsFileEntries parse(java.io.File, java.nio.charset.Charset[]) throws java.io.IOException
{
io.netty.resolver.HostsFileEntriesProvider$Parser v2;
io.netty.resolver.HostsFileEntries v4;
java.nio.charset.Charset[] v1;
io.netty.resolver.HostsFileEntriesProvider v3;
java.io.File v0;
v0 := @parameter0: java.io.File;
v1 := @parameter1: java.nio.charset.Charset[];
v2 = staticinvoke <io.netty.resolver.HostsFileEntriesProvider: io.netty.resolver.HostsFileEntriesProvider$Parser parser()>();
v3 = interfaceinvoke v2.<io.netty.resolver.HostsFileEntriesProvider$Parser: io.netty.resolver.HostsFileEntriesProvider parse(java.io.File,java.nio.charset.Charset[])>(v0, v1);
v4 = staticinvoke <io.netty.resolver.HostsFileParser: io.netty.resolver.HostsFileEntries hostsFileEntries(io.netty.resolver.HostsFileEntriesProvider)>(v3);
return v4;
}
public static io.netty.resolver.HostsFileEntries parse(java.io.Reader) throws java.io.IOException
{
io.netty.resolver.HostsFileEntriesProvider$Parser v1;
io.netty.resolver.HostsFileEntries v3;
java.io.Reader v0;
io.netty.resolver.HostsFileEntriesProvider v2;
v0 := @parameter0: java.io.Reader;
v1 = staticinvoke <io.netty.resolver.HostsFileEntriesProvider: io.netty.resolver.HostsFileEntriesProvider$Parser parser()>();
v2 = interfaceinvoke v1.<io.netty.resolver.HostsFileEntriesProvider$Parser: io.netty.resolver.HostsFileEntriesProvider parse(java.io.Reader)>(v0);
v3 = staticinvoke <io.netty.resolver.HostsFileParser: io.netty.resolver.HostsFileEntries hostsFileEntries(io.netty.resolver.HostsFileEntriesProvider)>(v2);
return v3;
}
private void <init>()
{
io.netty.resolver.HostsFileParser v0;
v0 := @this: io.netty.resolver.HostsFileParser;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
private static io.netty.resolver.HostsFileEntries hostsFileEntries(io.netty.resolver.HostsFileEntriesProvider)
{
java.util.Map v3, v4, v5, v6;
io.netty.resolver.HostsFileEntries v2;
io.netty.resolver.HostsFileEntriesProvider v0, v1;
v0 := @parameter0: io.netty.resolver.HostsFileEntriesProvider;
v1 = <io.netty.resolver.HostsFileEntriesProvider: io.netty.resolver.HostsFileEntriesProvider EMPTY>;
if v0 != v1 goto label1;
v2 = <io.netty.resolver.HostsFileEntries: io.netty.resolver.HostsFileEntries EMPTY>;
goto label2;
label1:
v2 = new io.netty.resolver.HostsFileEntries;
v3 = virtualinvoke v0.<io.netty.resolver.HostsFileEntriesProvider: java.util.Map ipv4Entries()>();
v4 = staticinvoke <io.netty.resolver.HostsFileParser: java.util.Map toMapWithSingleValue(java.util.Map)>(v3);
v5 = virtualinvoke v0.<io.netty.resolver.HostsFileEntriesProvider: java.util.Map ipv6Entries()>();
v6 = staticinvoke <io.netty.resolver.HostsFileParser: java.util.Map toMapWithSingleValue(java.util.Map)>(v5);
specialinvoke v2.<io.netty.resolver.HostsFileEntries: void <init>(java.util.Map,java.util.Map)>(v4, v6);
label2:
return v2;
}
private static java.util.Map toMapWithSingleValue(java.util.Map)
{
java.util.Iterator v4;
java.util.Set v3;
java.util.HashMap v1;
java.util.Map v0;
int v2;
java.lang.Object v10, v6, v7, v9;
boolean v5, v8;
v0 := @parameter0: java.util.Map;
v1 = new java.util.HashMap;
v2 = interfaceinvoke v0.<java.util.Map: int size()>();
specialinvoke v1.<java.util.HashMap: void <init>(int)>(v2);
v3 = interfaceinvoke v0.<java.util.Map: java.util.Set entrySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getValue()>();
v8 = interfaceinvoke v7.<java.util.List: boolean isEmpty()>();
if v8 != 0 goto label1;
v9 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getKey()>();
v10 = interfaceinvoke v7.<java.util.List: java.lang.Object get(int)>(0);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, v10);
goto label1;
label2:
return v1;
}
}