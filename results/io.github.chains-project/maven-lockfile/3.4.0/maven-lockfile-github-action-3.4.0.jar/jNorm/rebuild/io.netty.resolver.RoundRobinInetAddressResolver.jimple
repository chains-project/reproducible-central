public class io.netty.resolver.RoundRobinInetAddressResolver extends io.netty.resolver.InetNameResolver
{
private final io.netty.resolver.NameResolver nameResolver;
public void <init>(io.netty.util.concurrent.EventExecutor, io.netty.resolver.NameResolver)
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.resolver.RoundRobinInetAddressResolver v0;
io.netty.resolver.NameResolver v2;
v0 := @this: io.netty.resolver.RoundRobinInetAddressResolver;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
v2 := @parameter1: io.netty.resolver.NameResolver;
specialinvoke v0.<io.netty.resolver.InetNameResolver: void <init>(io.netty.util.concurrent.EventExecutor)>(v1);
v0.<io.netty.resolver.RoundRobinInetAddressResolver: io.netty.resolver.NameResolver nameResolver> = v2;
return;
}
protected void doResolve(java.lang.String, io.netty.util.concurrent.Promise) throws java.lang.Exception
{
io.netty.util.concurrent.Promise v2;
io.netty.resolver.NameResolver v3;
io.netty.resolver.RoundRobinInetAddressResolver$1 v5;
java.lang.String v1;
io.netty.resolver.RoundRobinInetAddressResolver v0;
io.netty.util.concurrent.Future v4;
v0 := @this: io.netty.resolver.RoundRobinInetAddressResolver;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 = v0.<io.netty.resolver.RoundRobinInetAddressResolver: io.netty.resolver.NameResolver nameResolver>;
v4 = interfaceinvoke v3.<io.netty.resolver.NameResolver: io.netty.util.concurrent.Future resolveAll(java.lang.String)>(v1);
v5 = new io.netty.resolver.RoundRobinInetAddressResolver$1;
specialinvoke v5.<io.netty.resolver.RoundRobinInetAddressResolver$1: void <init>(io.netty.resolver.RoundRobinInetAddressResolver,io.netty.util.concurrent.Promise,java.lang.String)>(v0, v2, v1);
interfaceinvoke v4.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v5);
return;
}
protected void doResolveAll(java.lang.String, io.netty.util.concurrent.Promise) throws java.lang.Exception
{
io.netty.util.concurrent.Promise v2;
io.netty.resolver.NameResolver v3;
java.lang.String v1;
io.netty.resolver.RoundRobinInetAddressResolver v0;
io.netty.resolver.RoundRobinInetAddressResolver$2 v5;
io.netty.util.concurrent.Future v4;
v0 := @this: io.netty.resolver.RoundRobinInetAddressResolver;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 = v0.<io.netty.resolver.RoundRobinInetAddressResolver: io.netty.resolver.NameResolver nameResolver>;
v4 = interfaceinvoke v3.<io.netty.resolver.NameResolver: io.netty.util.concurrent.Future resolveAll(java.lang.String)>(v1);
v5 = new io.netty.resolver.RoundRobinInetAddressResolver$2;
specialinvoke v5.<io.netty.resolver.RoundRobinInetAddressResolver$2: void <init>(io.netty.resolver.RoundRobinInetAddressResolver,io.netty.util.concurrent.Promise)>(v0, v2);
interfaceinvoke v4.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v5);
return;
}
private static int randomIndex(int)
{
int v0, v1;
java.util.Random v2;
v0 := @parameter0: int;
if v0 != 1 goto label1;
v1 = 0;
goto label2;
label1:
v2 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.Random threadLocalRandom()>();
v1 = virtualinvoke v2.<java.util.Random: int nextInt(int)>(v0);
label2:
return v1;
}
public void close()
{
io.netty.resolver.RoundRobinInetAddressResolver v0;
io.netty.resolver.NameResolver v1;
v0 := @this: io.netty.resolver.RoundRobinInetAddressResolver;
v1 = v0.<io.netty.resolver.RoundRobinInetAddressResolver: io.netty.resolver.NameResolver nameResolver>;
interfaceinvoke v1.<io.netty.resolver.NameResolver: void close()>();
return;
}
}