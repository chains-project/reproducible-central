public class io.netty.resolver.dns.DefaultDnsCache extends java.lang.Object implements io.netty.resolver.dns.DnsCache
{
private final io.netty.resolver.dns.Cache resolveCache;
private final int minTtl;
private final int maxTtl;
private final int negativeTtl;
public void <init>()
{
int v1;
io.netty.resolver.dns.DefaultDnsCache v0;
v0 := @this: io.netty.resolver.dns.DefaultDnsCache;
v1 = <io.netty.resolver.dns.Cache: int MAX_SUPPORTED_TTL_SECS>;
specialinvoke v0.<io.netty.resolver.dns.DefaultDnsCache: void <init>(int,int,int)>(0, v1, 0);
return;
}
public void <init>(int, int, int)
{
java.lang.IllegalArgumentException v11;
io.netty.resolver.dns.DefaultDnsCache v0;
int v1, v10, v13, v2, v3, v5, v6, v7, v8, v9;
io.netty.resolver.dns.DefaultDnsCache$1 v4;
java.lang.String v12;
v0 := @this: io.netty.resolver.dns.DefaultDnsCache;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = new io.netty.resolver.dns.DefaultDnsCache$1;
specialinvoke v4.<io.netty.resolver.dns.DefaultDnsCache$1: void <init>(io.netty.resolver.dns.DefaultDnsCache)>(v0);
v0.<io.netty.resolver.dns.DefaultDnsCache: io.netty.resolver.dns.Cache resolveCache> = v4;
v5 = <io.netty.resolver.dns.Cache: int MAX_SUPPORTED_TTL_SECS>;
v6 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v1, "minTtl");
v7 = staticinvoke <java.lang.Math: int min(int,int)>(v5, v6);
v0.<io.netty.resolver.dns.DefaultDnsCache: int minTtl> = v7;
v8 = <io.netty.resolver.dns.Cache: int MAX_SUPPORTED_TTL_SECS>;
v9 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v2, "maxTtl");
v10 = staticinvoke <java.lang.Math: int min(int,int)>(v8, v9);
v0.<io.netty.resolver.dns.DefaultDnsCache: int maxTtl> = v10;
if v1 <= v2 goto label1;
v11 = new java.lang.IllegalArgumentException;
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("minTtl: \u0001, maxTtl: \u0001 (expected: 0 <= minTtl <= maxTtl)");
specialinvoke v11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v12);
throw v11;
label1:
v13 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v3, "negativeTtl");
v0.<io.netty.resolver.dns.DefaultDnsCache: int negativeTtl> = v13;
return;
}
public int minTtl()
{
int v1;
io.netty.resolver.dns.DefaultDnsCache v0;
v0 := @this: io.netty.resolver.dns.DefaultDnsCache;
v1 = v0.<io.netty.resolver.dns.DefaultDnsCache: int minTtl>;
return v1;
}
public int maxTtl()
{
int v1;
io.netty.resolver.dns.DefaultDnsCache v0;
v0 := @this: io.netty.resolver.dns.DefaultDnsCache;
v1 = v0.<io.netty.resolver.dns.DefaultDnsCache: int maxTtl>;
return v1;
}
public int negativeTtl()
{
int v1;
io.netty.resolver.dns.DefaultDnsCache v0;
v0 := @this: io.netty.resolver.dns.DefaultDnsCache;
v1 = v0.<io.netty.resolver.dns.DefaultDnsCache: int negativeTtl>;
return v1;
}
public void clear()
{
io.netty.resolver.dns.Cache v1;
io.netty.resolver.dns.DefaultDnsCache v0;
v0 := @this: io.netty.resolver.dns.DefaultDnsCache;
v1 = v0.<io.netty.resolver.dns.DefaultDnsCache: io.netty.resolver.dns.Cache resolveCache>;
virtualinvoke v1.<io.netty.resolver.dns.Cache: void clear()>();
return;
}
public boolean clear(java.lang.String)
{
io.netty.resolver.dns.Cache v2;
java.lang.String v1, v3;
io.netty.resolver.dns.DefaultDnsCache v0;
boolean v4;
v0 := @this: io.netty.resolver.dns.DefaultDnsCache;
v1 := @parameter0: java.lang.String;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "hostname");
v2 = v0.<io.netty.resolver.dns.DefaultDnsCache: io.netty.resolver.dns.Cache resolveCache>;
v3 = staticinvoke <io.netty.resolver.dns.DefaultDnsCache: java.lang.String appendDot(java.lang.String)>(v1);
v4 = virtualinvoke v2.<io.netty.resolver.dns.Cache: boolean clear(java.lang.String)>(v3);
return v4;
}
private static boolean emptyAdditionals(io.netty.handler.codec.dns.DnsRecord[])
{
int v1;
io.netty.handler.codec.dns.DnsRecord[] v0;
boolean v2;
v0 := @parameter0: io.netty.handler.codec.dns.DnsRecord[];
if v0 == null goto label1;
v1 = lengthof v0;
if v1 != 0 goto label2;
label1:
v2 = 1;
goto label3;
label2:
v2 = 0;
label3:
return v2;
}
public java.util.List get(java.lang.String, io.netty.handler.codec.dns.DnsRecord[])
{
io.netty.resolver.dns.Cache v5;
io.netty.resolver.dns.DefaultDnsCache v0;
io.netty.resolver.dns.DefaultDnsCache$DnsCacheEntryList v9;
java.util.List v4, v7;
io.netty.handler.codec.dns.DnsRecord[] v2;
java.lang.String v1, v6;
boolean v3, v8;
v0 := @this: io.netty.resolver.dns.DefaultDnsCache;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.handler.codec.dns.DnsRecord[];
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "hostname");
v3 = staticinvoke <io.netty.resolver.dns.DefaultDnsCache: boolean emptyAdditionals(io.netty.handler.codec.dns.DnsRecord[])>(v2);
if v3 != 0 goto label1;
v4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v4;
label1:
v5 = v0.<io.netty.resolver.dns.DefaultDnsCache: io.netty.resolver.dns.Cache resolveCache>;
v6 = staticinvoke <io.netty.resolver.dns.DefaultDnsCache: java.lang.String appendDot(java.lang.String)>(v1);
v7 = virtualinvoke v5.<io.netty.resolver.dns.Cache: java.util.List get(java.lang.String)>(v6);
if v7 == null goto label2;
v8 = interfaceinvoke v7.<java.util.List: boolean isEmpty()>();
if v8 == 0 goto label3;
label2:
return v7;
label3:
v9 = new io.netty.resolver.dns.DefaultDnsCache$DnsCacheEntryList;
specialinvoke v9.<io.netty.resolver.dns.DefaultDnsCache$DnsCacheEntryList: void <init>(java.util.List)>(v7);
return v9;
}
public io.netty.resolver.dns.DnsCacheEntry cache(java.lang.String, io.netty.handler.codec.dns.DnsRecord[], java.net.InetAddress, long, io.netty.channel.EventLoop)
{
io.netty.resolver.dns.Cache v9;
long v13, v4;
io.netty.channel.EventLoop v5;
io.netty.resolver.dns.DefaultDnsCache v0;
io.netty.resolver.dns.DefaultDnsCache$DefaultDnsCacheEntry v6;
java.net.InetAddress v3;
io.netty.handler.codec.dns.DnsRecord[] v2;
int v11, v12, v14, v7;
java.lang.String v1, v10;
boolean v8;
v0 := @this: io.netty.resolver.dns.DefaultDnsCache;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.handler.codec.dns.DnsRecord[];
v3 := @parameter2: java.net.InetAddress;
v4 := @parameter3: long;
v5 := @parameter4: io.netty.channel.EventLoop;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "hostname");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v3, "address");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v5, "loop");
v6 = new io.netty.resolver.dns.DefaultDnsCache$DefaultDnsCacheEntry;
specialinvoke v6.<io.netty.resolver.dns.DefaultDnsCache$DefaultDnsCacheEntry: void <init>(java.lang.String,java.net.InetAddress)>(v1, v3);
v7 = v0.<io.netty.resolver.dns.DefaultDnsCache: int maxTtl>;
if v7 == 0 goto label1;
v8 = staticinvoke <io.netty.resolver.dns.DefaultDnsCache: boolean emptyAdditionals(io.netty.handler.codec.dns.DnsRecord[])>(v2);
if v8 != 0 goto label2;
label1:
return v6;
label2:
v9 = v0.<io.netty.resolver.dns.DefaultDnsCache: io.netty.resolver.dns.Cache resolveCache>;
v10 = staticinvoke <io.netty.resolver.dns.DefaultDnsCache: java.lang.String appendDot(java.lang.String)>(v1);
v11 = v0.<io.netty.resolver.dns.DefaultDnsCache: int minTtl>;
v12 = v0.<io.netty.resolver.dns.DefaultDnsCache: int maxTtl>;
v13 = staticinvoke <java.lang.Math: long min(long,long)>(v12, v4);
v14 = staticinvoke <java.lang.Math: int max(int,int)>(v11, v13);
virtualinvoke v9.<io.netty.resolver.dns.Cache: void cache(java.lang.String,java.lang.Object,int,io.netty.channel.EventLoop)>(v10, v6, v14, v5);
return v6;
}
public io.netty.resolver.dns.DnsCacheEntry cache(java.lang.String, io.netty.handler.codec.dns.DnsRecord[], java.lang.Throwable, io.netty.channel.EventLoop)
{
java.lang.Throwable v3;
io.netty.resolver.dns.Cache v8;
io.netty.channel.EventLoop v4;
io.netty.resolver.dns.DefaultDnsCache v0;
io.netty.resolver.dns.DefaultDnsCache$DefaultDnsCacheEntry v5;
io.netty.handler.codec.dns.DnsRecord[] v2;
int v10, v6;
java.lang.String v1, v9;
boolean v7;
v0 := @this: io.netty.resolver.dns.DefaultDnsCache;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.handler.codec.dns.DnsRecord[];
v3 := @parameter2: java.lang.Throwable;
v4 := @parameter3: io.netty.channel.EventLoop;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "hostname");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v3, "cause");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v4, "loop");
v5 = new io.netty.resolver.dns.DefaultDnsCache$DefaultDnsCacheEntry;
specialinvoke v5.<io.netty.resolver.dns.DefaultDnsCache$DefaultDnsCacheEntry: void <init>(java.lang.String,java.lang.Throwable)>(v1, v3);
v6 = v0.<io.netty.resolver.dns.DefaultDnsCache: int negativeTtl>;
if v6 == 0 goto label1;
v7 = staticinvoke <io.netty.resolver.dns.DefaultDnsCache: boolean emptyAdditionals(io.netty.handler.codec.dns.DnsRecord[])>(v2);
if v7 != 0 goto label2;
label1:
return v5;
label2:
v8 = v0.<io.netty.resolver.dns.DefaultDnsCache: io.netty.resolver.dns.Cache resolveCache>;
v9 = staticinvoke <io.netty.resolver.dns.DefaultDnsCache: java.lang.String appendDot(java.lang.String)>(v1);
v10 = v0.<io.netty.resolver.dns.DefaultDnsCache: int negativeTtl>;
virtualinvoke v8.<io.netty.resolver.dns.Cache: void cache(java.lang.String,java.lang.Object,int,io.netty.channel.EventLoop)>(v9, v5, v10, v4);
return v5;
}
public java.lang.String toString()
{
io.netty.resolver.dns.Cache v4;
int v1, v2, v3, v5;
java.lang.String v6;
io.netty.resolver.dns.DefaultDnsCache v0;
v0 := @this: io.netty.resolver.dns.DefaultDnsCache;
v1 = v0.<io.netty.resolver.dns.DefaultDnsCache: int minTtl>;
v2 = v0.<io.netty.resolver.dns.DefaultDnsCache: int maxTtl>;
v3 = v0.<io.netty.resolver.dns.DefaultDnsCache: int negativeTtl>;
v4 = v0.<io.netty.resolver.dns.DefaultDnsCache: io.netty.resolver.dns.Cache resolveCache>;
v5 = virtualinvoke v4.<io.netty.resolver.dns.Cache: int size()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int,int)>(v1, v2, v3, v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("DefaultDnsCache(minTtl=\u0001, maxTtl=\u0001, negativeTtl=\u0001, cached resolved hostname=\u0001)");
return v6;
}
private static java.lang.String appendDot(java.lang.String)
{
java.lang.String v0, v2;
boolean v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <io.netty.util.internal.StringUtil: boolean endsWith(java.lang.CharSequence,char)>(v0, 46);
if v1 == 0 goto label1;
v2 = v0;
goto label2;
label1:
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.");
label2:
return v2;
}
private static java.lang.Throwable copyThrowable(java.lang.Throwable)
{
java.lang.Throwable v0, v16, v4;
byte[] v9;
java.lang.IllegalStateException v13, v15;
java.io.ByteArrayOutputStream v6;
java.io.ObjectInputStream v10, v18;
java.io.ByteArrayInputStream v8;
io.netty.resolver.dns.DefaultDnsCache$2 v2;
java.io.ObjectOutputStream v17, v7;
java.lang.String v3;
java.io.IOException v12;
java.lang.StackTraceElement[] v5;
java.lang.Class v1;
java.lang.ClassNotFoundException v14;
java.lang.Object v11;
v0 := @parameter0: java.lang.Throwable;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
if v1 != class "Ljava/net/UnknownHostException;" goto label1;
v2 = new io.netty.resolver.dns.DefaultDnsCache$2;
v3 = virtualinvoke v0.<java.lang.Throwable: java.lang.String getMessage()>();
specialinvoke v2.<io.netty.resolver.dns.DefaultDnsCache$2: void <init>(java.lang.String)>(v3);
v4 = virtualinvoke v0.<java.lang.Throwable: java.lang.Throwable getCause()>();
virtualinvoke v2.<java.net.UnknownHostException: java.lang.Throwable initCause(java.lang.Throwable)>(v4);
v5 = virtualinvoke v0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();
virtualinvoke v2.<java.net.UnknownHostException: void setStackTrace(java.lang.StackTraceElement[])>(v5);
return v2;
label1:
v6 = new java.io.ByteArrayOutputStream;
specialinvoke v6.<java.io.ByteArrayOutputStream: void <init>()>();
v7 = new java.io.ObjectOutputStream;
specialinvoke v7.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(v6);
virtualinvoke v7.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(v0);
v8 = new java.io.ByteArrayInputStream;
v9 = virtualinvoke v6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();
specialinvoke v8.<java.io.ByteArrayInputStream: void <init>(byte[])>(v9);
v10 = new java.io.ObjectInputStream;
specialinvoke v10.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(v8);
v11 = virtualinvoke v10.<java.io.ObjectInputStream: java.lang.Object readObject()>();
label2:
return v11;
label3:
v12 := @caughtexception;
v13 = new java.lang.IllegalStateException;
specialinvoke v13.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v12);
throw v13;
label4:
v14 := @caughtexception;
v15 = new java.lang.IllegalStateException;
specialinvoke v15.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v14);
throw v15;
label5:
v16 := @caughtexception;
throw v16;
catch java.io.IOException from label1 to label2 with label3;
catch java.lang.ClassNotFoundException from label1 to label2 with label4;
catch java.lang.Throwable from label1 to label2 with label5;
}
}