class io.netty.resolver.dns.DefaultDnsCnameCache$1 extends io.netty.resolver.dns.Cache
{
final io.netty.resolver.dns.DefaultDnsCnameCache this$0;
void <init>(io.netty.resolver.dns.DefaultDnsCnameCache)
{
io.netty.resolver.dns.DefaultDnsCnameCache$1 v0;
io.netty.resolver.dns.DefaultDnsCnameCache v1;
v0 := @this: io.netty.resolver.dns.DefaultDnsCnameCache$1;
v1 := @parameter0: io.netty.resolver.dns.DefaultDnsCnameCache;
v0.<io.netty.resolver.dns.DefaultDnsCnameCache$1: io.netty.resolver.dns.DefaultDnsCnameCache this$0> = v1;
specialinvoke v0.<io.netty.resolver.dns.Cache: void <init>()>();
return;
}
protected boolean shouldReplaceAll(java.lang.String)
{
java.lang.String v1;
io.netty.resolver.dns.DefaultDnsCnameCache$1 v0;
v0 := @this: io.netty.resolver.dns.DefaultDnsCnameCache$1;
v1 := @parameter0: java.lang.String;
return 1;
}
protected boolean equals(java.lang.String, java.lang.String)
{
io.netty.resolver.dns.DefaultDnsCnameCache$1 v0;
java.lang.String v1, v2;
boolean v3;
v0 := @this: io.netty.resolver.dns.DefaultDnsCnameCache$1;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
return v3;
}
}