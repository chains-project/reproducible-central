final class io.netty.resolver.dns.DnsAddressResolveContext extends io.netty.resolver.dns.DnsResolveContext
{
private final io.netty.resolver.dns.DnsCache resolveCache;
private final io.netty.resolver.dns.AuthoritativeDnsServerCache authoritativeDnsServerCache;
private final boolean completeEarlyIfPossible;
void <init>(io.netty.resolver.dns.DnsNameResolver, io.netty.util.concurrent.Promise, java.lang.String, io.netty.handler.codec.dns.DnsRecord[], io.netty.resolver.dns.DnsServerAddressStream, int, io.netty.resolver.dns.DnsCache, io.netty.resolver.dns.AuthoritativeDnsServerCache, boolean)
{
io.netty.resolver.dns.DnsAddressResolveContext v0;
io.netty.resolver.dns.DnsNameResolver v1;
io.netty.util.concurrent.Promise v2;
io.netty.resolver.dns.DnsServerAddressStream v5;
io.netty.handler.codec.dns.DnsRecordType[] v10;
io.netty.resolver.dns.AuthoritativeDnsServerCache v8;
io.netty.resolver.dns.DnsCache v7;
io.netty.handler.codec.dns.DnsRecord[] v4;
int v6;
java.lang.String v3;
boolean v9;
v0 := @this: io.netty.resolver.dns.DnsAddressResolveContext;
v1 := @parameter0: io.netty.resolver.dns.DnsNameResolver;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.netty.handler.codec.dns.DnsRecord[];
v5 := @parameter4: io.netty.resolver.dns.DnsServerAddressStream;
v6 := @parameter5: int;
v7 := @parameter6: io.netty.resolver.dns.DnsCache;
v8 := @parameter7: io.netty.resolver.dns.AuthoritativeDnsServerCache;
v9 := @parameter8: boolean;
v10 = virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolver: io.netty.handler.codec.dns.DnsRecordType[] resolveRecordTypes()>();
specialinvoke v0.<io.netty.resolver.dns.DnsResolveContext: void <init>(io.netty.resolver.dns.DnsNameResolver,io.netty.util.concurrent.Promise,java.lang.String,int,io.netty.handler.codec.dns.DnsRecordType[],io.netty.handler.codec.dns.DnsRecord[],io.netty.resolver.dns.DnsServerAddressStream,int)>(v1, v2, v3, 1, v10, v4, v5, v6);
v0.<io.netty.resolver.dns.DnsAddressResolveContext: io.netty.resolver.dns.DnsCache resolveCache> = v7;
v0.<io.netty.resolver.dns.DnsAddressResolveContext: io.netty.resolver.dns.AuthoritativeDnsServerCache authoritativeDnsServerCache> = v8;
v0.<io.netty.resolver.dns.DnsAddressResolveContext: boolean completeEarlyIfPossible> = v9;
return;
}
io.netty.resolver.dns.DnsResolveContext newResolverContext(io.netty.resolver.dns.DnsNameResolver, io.netty.util.concurrent.Promise, java.lang.String, int, io.netty.handler.codec.dns.DnsRecordType[], io.netty.handler.codec.dns.DnsRecord[], io.netty.resolver.dns.DnsServerAddressStream, int)
{
io.netty.resolver.dns.DnsAddressResolveContext v0, v9;
io.netty.resolver.dns.DnsNameResolver v1;
io.netty.util.concurrent.Promise v2;
io.netty.resolver.dns.DnsServerAddressStream v7;
io.netty.handler.codec.dns.DnsRecordType[] v5;
io.netty.resolver.dns.AuthoritativeDnsServerCache v11;
io.netty.resolver.dns.DnsCache v10;
io.netty.handler.codec.dns.DnsRecord[] v6;
int v4, v8;
java.lang.String v3;
boolean v12;
v0 := @this: io.netty.resolver.dns.DnsAddressResolveContext;
v1 := @parameter0: io.netty.resolver.dns.DnsNameResolver;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: int;
v5 := @parameter4: io.netty.handler.codec.dns.DnsRecordType[];
v6 := @parameter5: io.netty.handler.codec.dns.DnsRecord[];
v7 := @parameter6: io.netty.resolver.dns.DnsServerAddressStream;
v8 := @parameter7: int;
v9 = new io.netty.resolver.dns.DnsAddressResolveContext;
v10 = v0.<io.netty.resolver.dns.DnsAddressResolveContext: io.netty.resolver.dns.DnsCache resolveCache>;
v11 = v0.<io.netty.resolver.dns.DnsAddressResolveContext: io.netty.resolver.dns.AuthoritativeDnsServerCache authoritativeDnsServerCache>;
v12 = v0.<io.netty.resolver.dns.DnsAddressResolveContext: boolean completeEarlyIfPossible>;
specialinvoke v9.<io.netty.resolver.dns.DnsAddressResolveContext: void <init>(io.netty.resolver.dns.DnsNameResolver,io.netty.util.concurrent.Promise,java.lang.String,io.netty.handler.codec.dns.DnsRecord[],io.netty.resolver.dns.DnsServerAddressStream,int,io.netty.resolver.dns.DnsCache,io.netty.resolver.dns.AuthoritativeDnsServerCache,boolean)>(v1, v2, v3, v6, v7, v8, v10, v11, v12);
return v9;
}
java.net.InetAddress convertRecord(io.netty.handler.codec.dns.DnsRecord, java.lang.String, io.netty.handler.codec.dns.DnsRecord[], io.netty.channel.EventLoop)
{
io.netty.handler.codec.dns.DnsRecord v1;
io.netty.resolver.dns.DnsAddressResolveContext v0;
io.netty.resolver.dns.DnsNameResolver v5;
io.netty.channel.EventLoop v4;
java.net.InetAddress v7;
io.netty.handler.codec.dns.DnsRecord[] v3;
java.lang.String v2;
boolean v6;
v0 := @this: io.netty.resolver.dns.DnsAddressResolveContext;
v1 := @parameter0: io.netty.handler.codec.dns.DnsRecord;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.netty.handler.codec.dns.DnsRecord[];
v4 := @parameter3: io.netty.channel.EventLoop;
v5 = v0.<io.netty.resolver.dns.DnsAddressResolveContext: io.netty.resolver.dns.DnsNameResolver parent>;
v6 = virtualinvoke v5.<io.netty.resolver.dns.DnsNameResolver: boolean isDecodeIdn()>();
v7 = staticinvoke <io.netty.resolver.dns.DnsAddressDecoder: java.net.InetAddress decodeAddress(io.netty.handler.codec.dns.DnsRecord,java.lang.String,boolean)>(v1, v2, v6);
return v7;
}
java.util.List filterResults(java.util.List)
{
java.util.List v1;
io.netty.resolver.dns.DnsAddressResolveContext v0;
io.netty.resolver.dns.DnsNameResolver v2;
io.netty.resolver.dns.PreferredAddressTypeComparator v4;
io.netty.channel.socket.InternetProtocolFamily v3;
v0 := @this: io.netty.resolver.dns.DnsAddressResolveContext;
v1 := @parameter0: java.util.List;
v2 = v0.<io.netty.resolver.dns.DnsAddressResolveContext: io.netty.resolver.dns.DnsNameResolver parent>;
v3 = virtualinvoke v2.<io.netty.resolver.dns.DnsNameResolver: io.netty.channel.socket.InternetProtocolFamily preferredAddressType()>();
v4 = staticinvoke <io.netty.resolver.dns.PreferredAddressTypeComparator: io.netty.resolver.dns.PreferredAddressTypeComparator comparator(io.netty.channel.socket.InternetProtocolFamily)>(v3);
staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(v1, v4);
return v1;
}
boolean isCompleteEarly(java.net.InetAddress)
{
io.netty.resolver.dns.DnsAddressResolveContext v0;
io.netty.resolver.dns.DnsNameResolver v3;
java.net.InetAddress v1;
io.netty.channel.socket.InternetProtocolFamily v4;
java.lang.Class v5, v6;
boolean v2, v7;
v0 := @this: io.netty.resolver.dns.DnsAddressResolveContext;
v1 := @parameter0: java.net.InetAddress;
v2 = v0.<io.netty.resolver.dns.DnsAddressResolveContext: boolean completeEarlyIfPossible>;
if v2 == 0 goto label1;
v3 = v0.<io.netty.resolver.dns.DnsAddressResolveContext: io.netty.resolver.dns.DnsNameResolver parent>;
v4 = virtualinvoke v3.<io.netty.resolver.dns.DnsNameResolver: io.netty.channel.socket.InternetProtocolFamily preferredAddressType()>();
v5 = virtualinvoke v4.<io.netty.channel.socket.InternetProtocolFamily: java.lang.Class addressType()>();
v6 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v5 != v6 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
return v7;
}
boolean isDuplicateAllowed()
{
io.netty.resolver.dns.DnsAddressResolveContext v0;
v0 := @this: io.netty.resolver.dns.DnsAddressResolveContext;
return 0;
}
void cache(java.lang.String, io.netty.handler.codec.dns.DnsRecord[], io.netty.handler.codec.dns.DnsRecord, java.net.InetAddress)
{
io.netty.handler.codec.dns.DnsRecord v3;
io.netty.resolver.dns.DnsAddressResolveContext v0;
io.netty.resolver.dns.DnsNameResolver v7;
long v6;
io.netty.channel.EventLoop v9;
io.netty.resolver.dns.DnsCache v5;
io.netty.channel.Channel v8;
java.net.InetAddress v4;
io.netty.handler.codec.dns.DnsRecord[] v2;
java.lang.String v1;
v0 := @this: io.netty.resolver.dns.DnsAddressResolveContext;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.handler.codec.dns.DnsRecord[];
v3 := @parameter2: io.netty.handler.codec.dns.DnsRecord;
v4 := @parameter3: java.net.InetAddress;
v5 = v0.<io.netty.resolver.dns.DnsAddressResolveContext: io.netty.resolver.dns.DnsCache resolveCache>;
v6 = interfaceinvoke v3.<io.netty.handler.codec.dns.DnsRecord: long timeToLive()>();
v7 = v0.<io.netty.resolver.dns.DnsAddressResolveContext: io.netty.resolver.dns.DnsNameResolver parent>;
v8 = v7.<io.netty.resolver.dns.DnsNameResolver: io.netty.channel.Channel ch>;
v9 = interfaceinvoke v8.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
interfaceinvoke v5.<io.netty.resolver.dns.DnsCache: io.netty.resolver.dns.DnsCacheEntry cache(java.lang.String,io.netty.handler.codec.dns.DnsRecord[],java.net.InetAddress,long,io.netty.channel.EventLoop)>(v1, v2, v4, v6, v9);
return;
}
void cache(java.lang.String, io.netty.handler.codec.dns.DnsRecord[], java.net.UnknownHostException)
{
io.netty.resolver.dns.DnsAddressResolveContext v0;
io.netty.resolver.dns.DnsNameResolver v5;
io.netty.channel.EventLoop v7;
java.net.UnknownHostException v3;
io.netty.resolver.dns.DnsCache v4;
io.netty.channel.Channel v6;
io.netty.handler.codec.dns.DnsRecord[] v2;
java.lang.String v1;
v0 := @this: io.netty.resolver.dns.DnsAddressResolveContext;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.handler.codec.dns.DnsRecord[];
v3 := @parameter2: java.net.UnknownHostException;
v4 = v0.<io.netty.resolver.dns.DnsAddressResolveContext: io.netty.resolver.dns.DnsCache resolveCache>;
v5 = v0.<io.netty.resolver.dns.DnsAddressResolveContext: io.netty.resolver.dns.DnsNameResolver parent>;
v6 = v5.<io.netty.resolver.dns.DnsNameResolver: io.netty.channel.Channel ch>;
v7 = interfaceinvoke v6.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
interfaceinvoke v4.<io.netty.resolver.dns.DnsCache: io.netty.resolver.dns.DnsCacheEntry cache(java.lang.String,io.netty.handler.codec.dns.DnsRecord[],java.lang.Throwable,io.netty.channel.EventLoop)>(v1, v2, v3, v7);
return;
}
void doSearchDomainQuery(java.lang.String, io.netty.util.concurrent.Promise)
{
io.netty.resolver.dns.DnsAddressResolveContext v0;
io.netty.resolver.dns.DnsNameResolver v5;
io.netty.util.concurrent.Promise v2;
io.netty.resolver.dns.DnsCache v4;
io.netty.channel.socket.InternetProtocolFamily[] v6;
io.netty.handler.codec.dns.DnsRecord[] v3;
java.lang.String v1;
boolean v7;
v0 := @this: io.netty.resolver.dns.DnsAddressResolveContext;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 = v0.<io.netty.resolver.dns.DnsAddressResolveContext: io.netty.handler.codec.dns.DnsRecord[] additionals>;
v4 = v0.<io.netty.resolver.dns.DnsAddressResolveContext: io.netty.resolver.dns.DnsCache resolveCache>;
v5 = v0.<io.netty.resolver.dns.DnsAddressResolveContext: io.netty.resolver.dns.DnsNameResolver parent>;
v6 = virtualinvoke v5.<io.netty.resolver.dns.DnsNameResolver: io.netty.channel.socket.InternetProtocolFamily[] resolvedInternetProtocolFamiliesUnsafe()>();
v7 = staticinvoke <io.netty.resolver.dns.DnsNameResolver: boolean doResolveAllCached(java.lang.String,io.netty.handler.codec.dns.DnsRecord[],io.netty.util.concurrent.Promise,io.netty.resolver.dns.DnsCache,io.netty.channel.socket.InternetProtocolFamily[])>(v1, v3, v2, v4, v6);
if v7 != 0 goto label1;
specialinvoke v0.<io.netty.resolver.dns.DnsResolveContext: void doSearchDomainQuery(java.lang.String,io.netty.util.concurrent.Promise)>(v1, v2);
label1:
return;
}
io.netty.resolver.dns.DnsCache resolveCache()
{
io.netty.resolver.dns.DnsAddressResolveContext v0;
io.netty.resolver.dns.DnsCache v1;
v0 := @this: io.netty.resolver.dns.DnsAddressResolveContext;
v1 = v0.<io.netty.resolver.dns.DnsAddressResolveContext: io.netty.resolver.dns.DnsCache resolveCache>;
return v1;
}
io.netty.resolver.dns.AuthoritativeDnsServerCache authoritativeDnsServerCache()
{
io.netty.resolver.dns.AuthoritativeDnsServerCache v1;
io.netty.resolver.dns.DnsAddressResolveContext v0;
v0 := @this: io.netty.resolver.dns.DnsAddressResolveContext;
v1 = v0.<io.netty.resolver.dns.DnsAddressResolveContext: io.netty.resolver.dns.AuthoritativeDnsServerCache authoritativeDnsServerCache>;
return v1;
}
}