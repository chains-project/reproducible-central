class io.netty.resolver.dns.DnsNameResolver$1 extends io.netty.handler.codec.dns.DatagramDnsResponseDecoder
{
void <init>()
{
io.netty.resolver.dns.DnsNameResolver$1 v0;
v0 := @this: io.netty.resolver.dns.DnsNameResolver$1;
specialinvoke v0.<io.netty.handler.codec.dns.DatagramDnsResponseDecoder: void <init>()>();
return;
}
protected io.netty.handler.codec.dns.DnsResponse decodeResponse(io.netty.channel.ChannelHandlerContext, io.netty.channel.socket.DatagramPacket) throws java.lang.Exception
{
io.netty.handler.codec.dns.DnsResponse v3;
io.netty.channel.Channel v9;
io.netty.channel.ChannelHandlerContext v1;
io.netty.util.internal.logging.InternalLogger v6, v8;
io.netty.channel.socket.DatagramPacket v2;
java.lang.Object v4;
java.lang.String v10;
io.netty.resolver.dns.DnsNameResolver$1 v0;
boolean v5, v7;
v0 := @this: io.netty.resolver.dns.DnsNameResolver$1;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.channel.socket.DatagramPacket;
v3 = specialinvoke v0.<io.netty.handler.codec.dns.DatagramDnsResponseDecoder: io.netty.handler.codec.dns.DnsResponse decodeResponse(io.netty.channel.ChannelHandlerContext,io.netty.channel.socket.DatagramPacket)>(v1, v2);
v4 = virtualinvoke v2.<io.netty.channel.socket.DatagramPacket: java.lang.Object content()>();
v5 = virtualinvoke v4.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v5 == 0 goto label1;
interfaceinvoke v3.<io.netty.handler.codec.dns.DnsResponse: io.netty.handler.codec.dns.DnsResponse setTruncated(boolean)>(1);
v6 = <io.netty.resolver.dns.DnsNameResolver: io.netty.util.internal.logging.InternalLogger logger>;
v7 = interfaceinvoke v6.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v7 == 0 goto label1;
v8 = <io.netty.resolver.dns.DnsNameResolver: io.netty.util.internal.logging.InternalLogger logger>;
v9 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v10 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(class "Lio/netty/resolver/dns/DnsNameResolver;");
interfaceinvoke v8.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("{} RECEIVED: UDP truncated packet received, consider adjusting maxPayloadSize for the {}.", v9, v10);
label1:
return v3;
}
}