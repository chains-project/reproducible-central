class io.netty.resolver.dns.DnsNameResolver$3 extends io.netty.channel.ChannelInitializer
{
final io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler val$responseHandler;
final io.netty.resolver.dns.DnsNameResolver this$0;
void <init>(io.netty.resolver.dns.DnsNameResolver, io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler)
{
io.netty.resolver.dns.DnsNameResolver$3 v0;
io.netty.resolver.dns.DnsNameResolver v1;
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler v2;
v0 := @this: io.netty.resolver.dns.DnsNameResolver$3;
v1 := @parameter0: io.netty.resolver.dns.DnsNameResolver;
v2 := @parameter1: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler;
v0.<io.netty.resolver.dns.DnsNameResolver$3: io.netty.resolver.dns.DnsNameResolver this$0> = v1;
v0.<io.netty.resolver.dns.DnsNameResolver$3: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler val$responseHandler> = v2;
specialinvoke v0.<io.netty.channel.ChannelInitializer: void <init>()>();
return;
}
protected void initChannel(io.netty.channel.socket.DatagramChannel)
{
io.netty.handler.codec.dns.DatagramDnsQueryEncoder v4;
io.netty.resolver.dns.DnsNameResolver$3 v0;
io.netty.channel.socket.DatagramChannel v1;
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler v6;
io.netty.handler.codec.dns.DatagramDnsResponseDecoder v5;
io.netty.channel.ChannelPipeline v2;
io.netty.channel.ChannelHandler[] v3;
v0 := @this: io.netty.resolver.dns.DnsNameResolver$3;
v1 := @parameter0: io.netty.channel.socket.DatagramChannel;
v2 = interfaceinvoke v1.<io.netty.channel.socket.DatagramChannel: io.netty.channel.ChannelPipeline pipeline()>();
v3 = newarray (io.netty.channel.ChannelHandler)[3];
v4 = <io.netty.resolver.dns.DnsNameResolver: io.netty.handler.codec.dns.DatagramDnsQueryEncoder DATAGRAM_ENCODER>;
v3[0] = v4;
v5 = <io.netty.resolver.dns.DnsNameResolver: io.netty.handler.codec.dns.DatagramDnsResponseDecoder DATAGRAM_DECODER>;
v3[1] = v5;
v6 = v0.<io.netty.resolver.dns.DnsNameResolver$3: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler val$responseHandler>;
v3[2] = v6;
interfaceinvoke v2.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.channel.ChannelHandler[])>(v3);
return;
}
}