class io.netty.resolver.dns.DnsResolveContext$2 extends java.lang.Object implements io.netty.util.concurrent.FutureListener
{
final io.netty.util.concurrent.Promise val$promise;
final io.netty.resolver.dns.DnsQueryLifecycleObserver val$queryLifecycleObserver;
final boolean val$isFeedbackAddressStream;
final io.netty.resolver.dns.DnsServerAddressStream val$nameServerAddrStream;
final java.net.InetSocketAddress val$nameServerAddr;
final long val$queryStartTimeNanos;
final int val$nameServerAddrStreamIndex;
final io.netty.handler.codec.dns.DnsQuestion val$question;
final io.netty.resolver.dns.DnsResolveContext this$0;
void <init>(io.netty.resolver.dns.DnsResolveContext, io.netty.util.concurrent.Promise, io.netty.resolver.dns.DnsQueryLifecycleObserver, boolean, io.netty.resolver.dns.DnsServerAddressStream, java.net.InetSocketAddress, long, int, io.netty.handler.codec.dns.DnsQuestion)
{
io.netty.util.concurrent.Promise v2;
io.netty.handler.codec.dns.DnsQuestion v9;
io.netty.resolver.dns.DnsServerAddressStream v5;
long v7;
java.net.InetSocketAddress v6;
io.netty.resolver.dns.DnsQueryLifecycleObserver v3;
io.netty.resolver.dns.DnsResolveContext v1;
io.netty.resolver.dns.DnsResolveContext$2 v0;
int v8;
boolean v4;
v0 := @this: io.netty.resolver.dns.DnsResolveContext$2;
v1 := @parameter0: io.netty.resolver.dns.DnsResolveContext;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 := @parameter2: io.netty.resolver.dns.DnsQueryLifecycleObserver;
v4 := @parameter3: boolean;
v5 := @parameter4: io.netty.resolver.dns.DnsServerAddressStream;
v6 := @parameter5: java.net.InetSocketAddress;
v7 := @parameter6: long;
v8 := @parameter7: int;
v9 := @parameter8: io.netty.handler.codec.dns.DnsQuestion;
v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsResolveContext this$0> = v1;
v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.util.concurrent.Promise val$promise> = v2;
v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsQueryLifecycleObserver val$queryLifecycleObserver> = v3;
v0.<io.netty.resolver.dns.DnsResolveContext$2: boolean val$isFeedbackAddressStream> = v4;
v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsServerAddressStream val$nameServerAddrStream> = v5;
v0.<io.netty.resolver.dns.DnsResolveContext$2: java.net.InetSocketAddress val$nameServerAddr> = v6;
v0.<io.netty.resolver.dns.DnsResolveContext$2: long val$queryStartTimeNanos> = v7;
v0.<io.netty.resolver.dns.DnsResolveContext$2: int val$nameServerAddrStreamIndex> = v8;
v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.handler.codec.dns.DnsQuestion val$question> = v9;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void operationComplete(io.netty.util.concurrent.Future)
{
io.netty.resolver.dns.DnsServerAddressStream v13, v19, v26, v33, v42, v49;
io.netty.resolver.dns.DnsResolveContext v18, v2, v32, v37, v41, v48, v8;
boolean v12, v25, v5, v6;
io.netty.handler.codec.dns.DnsQuestion v21, v36, v38, v44, v51;
java.util.Set v3;
java.net.InetSocketAddress v14, v27;
io.netty.resolver.dns.DnsQueryLifecycleObserver v23, v31, v39, v7;
io.netty.resolver.dns.DnsResolveContext$2 v0;
java.lang.Throwable v11, v47;
long v15, v16, v17, v28, v29, v30;
int v20, v34, v35, v43, v50, v9;
io.netty.util.concurrent.Promise v24, v4, v40, v46, v53;
java.lang.Object v10, v22;
io.netty.util.concurrent.Future v1;
io.netty.resolver.dns.NoopDnsQueryLifecycleObserver v45, v52;
v0 := @this: io.netty.resolver.dns.DnsResolveContext$2;
v1 := @parameter0: io.netty.util.concurrent.Future;
v2 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsResolveContext this$0>;
v3 = v2.<io.netty.resolver.dns.DnsResolveContext: java.util.Set queriesInProgress>;
interfaceinvoke v3.<java.util.Set: boolean remove(java.lang.Object)>(v1);
v4 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.util.concurrent.Promise val$promise>;
v5 = interfaceinvoke v4.<io.netty.util.concurrent.Promise: boolean isDone()>();
if v5 != 0 goto label01;
v6 = interfaceinvoke v1.<io.netty.util.concurrent.Future: boolean isCancelled()>();
if v6 == 0 goto label03;
label01:
v7 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsQueryLifecycleObserver val$queryLifecycleObserver>;
v8 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsResolveContext this$0>;
v9 = v8.<io.netty.resolver.dns.DnsResolveContext: int allowedQueries>;
interfaceinvoke v7.<io.netty.resolver.dns.DnsQueryLifecycleObserver: void queryCancelled(int)>(v9);
v10 = interfaceinvoke v1.<io.netty.util.concurrent.Future: java.lang.Object getNow()>();
if v10 == null goto label02;
interfaceinvoke v10.<io.netty.channel.AddressedEnvelope: boolean release()>();
label02:
return;
label03:
v11 = interfaceinvoke v1.<io.netty.util.concurrent.Future: java.lang.Throwable cause()>();
label04:
if v11 != null goto label06;
v12 = v0.<io.netty.resolver.dns.DnsResolveContext$2: boolean val$isFeedbackAddressStream>;
if v12 == 0 goto label05;
v13 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsServerAddressStream val$nameServerAddrStream>;
v14 = v0.<io.netty.resolver.dns.DnsResolveContext$2: java.net.InetSocketAddress val$nameServerAddr>;
v15 = staticinvoke <java.lang.System: long nanoTime()>();
v16 = v0.<io.netty.resolver.dns.DnsResolveContext$2: long val$queryStartTimeNanos>;
v17 = v15 - v16;
interfaceinvoke v13.<io.netty.resolver.dns.DnsServerResponseFeedbackAddressStream: void feedbackSuccess(java.net.InetSocketAddress,long)>(v14, v17);
label05:
v18 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsResolveContext this$0>;
v19 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsServerAddressStream val$nameServerAddrStream>;
v20 = v0.<io.netty.resolver.dns.DnsResolveContext$2: int val$nameServerAddrStreamIndex>;
v21 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.handler.codec.dns.DnsQuestion val$question>;
v22 = interfaceinvoke v1.<io.netty.util.concurrent.Future: java.lang.Object getNow()>();
v23 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsQueryLifecycleObserver val$queryLifecycleObserver>;
v24 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.util.concurrent.Promise val$promise>;
specialinvoke v18.<io.netty.resolver.dns.DnsResolveContext: void onResponse(io.netty.resolver.dns.DnsServerAddressStream,int,io.netty.handler.codec.dns.DnsQuestion,io.netty.channel.AddressedEnvelope,io.netty.resolver.dns.DnsQueryLifecycleObserver,io.netty.util.concurrent.Promise)>(v19, v20, v21, v22, v23, v24);
goto label08;
label06:
v25 = v0.<io.netty.resolver.dns.DnsResolveContext$2: boolean val$isFeedbackAddressStream>;
if v25 == 0 goto label07;
v26 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsServerAddressStream val$nameServerAddrStream>;
v27 = v0.<io.netty.resolver.dns.DnsResolveContext$2: java.net.InetSocketAddress val$nameServerAddr>;
v28 = staticinvoke <java.lang.System: long nanoTime()>();
v29 = v0.<io.netty.resolver.dns.DnsResolveContext$2: long val$queryStartTimeNanos>;
v30 = v28 - v29;
interfaceinvoke v26.<io.netty.resolver.dns.DnsServerResponseFeedbackAddressStream: void feedbackFailure(java.net.InetSocketAddress,java.lang.Throwable,long)>(v27, v11, v30);
label07:
v31 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsQueryLifecycleObserver val$queryLifecycleObserver>;
interfaceinvoke v31.<io.netty.resolver.dns.DnsQueryLifecycleObserver: void queryFailed(java.lang.Throwable)>(v11);
v32 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsResolveContext this$0>;
v33 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsServerAddressStream val$nameServerAddrStream>;
v34 = v0.<io.netty.resolver.dns.DnsResolveContext$2: int val$nameServerAddrStreamIndex>;
v35 = v34 + 1;
v36 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.handler.codec.dns.DnsQuestion val$question>;
v37 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsResolveContext this$0>;
v38 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.handler.codec.dns.DnsQuestion val$question>;
v39 = specialinvoke v37.<io.netty.resolver.dns.DnsResolveContext: io.netty.resolver.dns.DnsQueryLifecycleObserver newDnsQueryLifecycleObserver(io.netty.handler.codec.dns.DnsQuestion)>(v38);
v40 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.util.concurrent.Promise val$promise>;
specialinvoke v32.<io.netty.resolver.dns.DnsResolveContext: void query(io.netty.resolver.dns.DnsServerAddressStream,int,io.netty.handler.codec.dns.DnsQuestion,io.netty.resolver.dns.DnsQueryLifecycleObserver,boolean,io.netty.util.concurrent.Promise,java.lang.Throwable)>(v33, v35, v36, v39, 1, v40, v11);
label08:
v41 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsResolveContext this$0>;
v42 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsServerAddressStream val$nameServerAddrStream>;
v43 = v0.<io.netty.resolver.dns.DnsResolveContext$2: int val$nameServerAddrStreamIndex>;
v44 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.handler.codec.dns.DnsQuestion val$question>;
v45 = <io.netty.resolver.dns.NoopDnsQueryLifecycleObserver: io.netty.resolver.dns.NoopDnsQueryLifecycleObserver INSTANCE>;
v46 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.util.concurrent.Promise val$promise>;
specialinvoke v41.<io.netty.resolver.dns.DnsResolveContext: void tryToFinishResolve(io.netty.resolver.dns.DnsServerAddressStream,int,io.netty.handler.codec.dns.DnsQuestion,io.netty.resolver.dns.DnsQueryLifecycleObserver,io.netty.util.concurrent.Promise,java.lang.Throwable)>(v42, v43, v44, v45, v46, v11);
goto label10;
label09:
v47 := @caughtexception;
v48 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsResolveContext this$0>;
v49 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.resolver.dns.DnsServerAddressStream val$nameServerAddrStream>;
v50 = v0.<io.netty.resolver.dns.DnsResolveContext$2: int val$nameServerAddrStreamIndex>;
v51 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.handler.codec.dns.DnsQuestion val$question>;
v52 = <io.netty.resolver.dns.NoopDnsQueryLifecycleObserver: io.netty.resolver.dns.NoopDnsQueryLifecycleObserver INSTANCE>;
v53 = v0.<io.netty.resolver.dns.DnsResolveContext$2: io.netty.util.concurrent.Promise val$promise>;
specialinvoke v48.<io.netty.resolver.dns.DnsResolveContext: void tryToFinishResolve(io.netty.resolver.dns.DnsServerAddressStream,int,io.netty.handler.codec.dns.DnsQuestion,io.netty.resolver.dns.DnsQueryLifecycleObserver,io.netty.util.concurrent.Promise,java.lang.Throwable)>(v49, v50, v51, v52, v53, v11);
throw v47;
label10:
return;
catch java.lang.Throwable from label04 to label08 with label09;
}
}