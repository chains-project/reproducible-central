final class io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer extends java.lang.Object
{
private final int dots;
private final java.lang.String domainName;
final boolean isCopy;
final java.lang.String nsName;
private long ttl;
private java.net.InetSocketAddress address;
io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer next;
static final boolean $assertionsDisabled;
void <init>(int, long, java.lang.String, java.lang.String)
{
io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer v0;
int v1;
long v2;
java.lang.String v3, v4;
v0 := @this: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer;
v1 := @parameter0: int;
v2 := @parameter1: long;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: int dots> = v1;
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: long ttl> = v2;
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.lang.String nsName> = v4;
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.lang.String domainName> = v3;
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: boolean isCopy> = 0;
return;
}
void <init>(io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer)
{
io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer v0, v1;
int v2;
long v3;
java.lang.String v4, v5;
v0 := @this: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer;
v1 := @parameter0: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = v1.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: int dots>;
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: int dots> = v2;
v3 = v1.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: long ttl>;
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: long ttl> = v3;
v4 = v1.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.lang.String nsName>;
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.lang.String nsName> = v4;
v5 = v1.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.lang.String domainName>;
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.lang.String domainName> = v5;
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: boolean isCopy> = 1;
return;
}
boolean isRootServer()
{
int v1;
io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer v0;
boolean v2;
v0 := @this: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer;
v1 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: int dots>;
if v1 != 1 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
void update(java.net.InetSocketAddress, long)
{
io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer v0;
long v2, v8, v9;
java.lang.AssertionError v7;
java.net.InetSocketAddress v1, v4, v5;
boolean v3, v6;
v0 := @this: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer;
v1 := @parameter0: java.net.InetSocketAddress;
v2 := @parameter1: long;
v3 = <io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
v4 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.net.InetSocketAddress address>;
if v4 == null goto label1;
v5 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.net.InetSocketAddress address>;
v6 = virtualinvoke v5.<java.net.InetSocketAddress: boolean isUnresolved()>();
if v6 != 0 goto label1;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label1:
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.net.InetSocketAddress address> = v1;
v8 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: long ttl>;
v9 = staticinvoke <java.lang.Math: long min(long,long)>(v8, v2);
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: long ttl> = v9;
return;
}
void update(java.net.InetSocketAddress)
{
io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer v0;
java.net.InetSocketAddress v1;
v0 := @this: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer;
v1 := @parameter0: java.net.InetSocketAddress;
virtualinvoke v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: void update(java.net.InetSocketAddress,long)>(v1, 9223372036854775807L);
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/resolver/dns/DnsResolveContext;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: boolean $assertionsDisabled> = v2;
return;
}
}