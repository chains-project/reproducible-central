final class io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList extends java.util.AbstractList
{
private final io.netty.resolver.dns.DnsServerAddressStream duplicate;
private java.util.List addresses;
void <init>(io.netty.resolver.dns.DnsServerAddressStream)
{
io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList v0;
io.netty.resolver.dns.DnsServerAddressStream v1, v2;
v0 := @this: io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList;
v1 := @parameter0: io.netty.resolver.dns.DnsServerAddressStream;
specialinvoke v0.<java.util.AbstractList: void <init>()>();
v2 = interfaceinvoke v1.<io.netty.resolver.dns.DnsServerAddressStream: io.netty.resolver.dns.DnsServerAddressStream duplicate()>();
v0.<io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList: io.netty.resolver.dns.DnsServerAddressStream duplicate> = v2;
return;
}
public java.net.InetSocketAddress get(int)
{
io.netty.resolver.dns.DnsServerAddressStream v3, v4;
java.net.InetSocketAddress v10;
java.util.ArrayList v5;
io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList v0;
java.util.List v11, v2, v9;
int v1, v6, v7, v8;
java.lang.Object v12;
v0 := @this: io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList;
v1 := @parameter0: int;
v2 = v0.<io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList: java.util.List addresses>;
if v2 != null goto label2;
v3 = v0.<io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList: io.netty.resolver.dns.DnsServerAddressStream duplicate>;
v4 = interfaceinvoke v3.<io.netty.resolver.dns.DnsServerAddressStream: io.netty.resolver.dns.DnsServerAddressStream duplicate()>();
v5 = new java.util.ArrayList;
v6 = virtualinvoke v0.<io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList: int size()>();
specialinvoke v5.<java.util.ArrayList: void <init>(int)>(v6);
v0.<io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList: java.util.List addresses> = v5;
v7 = 0;
label1:
v8 = interfaceinvoke v4.<io.netty.resolver.dns.DnsServerAddressStream: int size()>();
if v7 >= v8 goto label2;
v9 = v0.<io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList: java.util.List addresses>;
v10 = interfaceinvoke v4.<io.netty.resolver.dns.DnsServerAddressStream: java.net.InetSocketAddress next()>();
interfaceinvoke v9.<java.util.List: boolean add(java.lang.Object)>(v10);
v7 = v7 + 1;
goto label1;
label2:
v11 = v0.<io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList: java.util.List addresses>;
v12 = interfaceinvoke v11.<java.util.List: java.lang.Object get(int)>(v1);
return v12;
}
public int size()
{
int v2;
io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList v0;
io.netty.resolver.dns.DnsServerAddressStream v1;
v0 := @this: io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList;
v1 = v0.<io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList: io.netty.resolver.dns.DnsServerAddressStream duplicate>;
v2 = interfaceinvoke v1.<io.netty.resolver.dns.DnsServerAddressStream: int size()>();
return v2;
}
public java.util.Iterator iterator()
{
io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList v0;
io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList$1 v1;
v0 := @this: io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList;
v1 = new io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList$1;
specialinvoke v1.<io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList$1: void <init>(io.netty.resolver.dns.DnsResolveContext$DnsAddressStreamList)>(v0);
return v1;
}
}