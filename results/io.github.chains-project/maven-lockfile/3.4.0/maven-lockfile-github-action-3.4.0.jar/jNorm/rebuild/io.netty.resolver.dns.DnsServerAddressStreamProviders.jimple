public final class io.netty.resolver.dns.DnsServerAddressStreamProviders extends java.lang.Object
{
private static final io.netty.util.internal.logging.InternalLogger LOGGER;
private static final java.lang.reflect.Constructor STREAM_PROVIDER_CONSTRUCTOR;
private static final java.lang.String MACOS_PROVIDER_CLASS_NAME;
private void <init>()
{
io.netty.resolver.dns.DnsServerAddressStreamProviders v0;
v0 := @this: io.netty.resolver.dns.DnsServerAddressStreamProviders;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static io.netty.resolver.dns.DnsServerAddressStreamProvider platformDefault()
{
java.lang.IllegalAccessException v4;
java.lang.Object[] v2;
io.netty.resolver.dns.DnsServerAddressStreamProvider v7;
java.lang.reflect.Constructor v0, v1;
java.lang.reflect.InvocationTargetException v6;
java.lang.InstantiationException v5;
java.lang.Object v3;
v0 = <io.netty.resolver.dns.DnsServerAddressStreamProviders: java.lang.reflect.Constructor STREAM_PROVIDER_CONSTRUCTOR>;
if v0 == null goto label6;
label1:
v1 = <io.netty.resolver.dns.DnsServerAddressStreamProviders: java.lang.reflect.Constructor STREAM_PROVIDER_CONSTRUCTOR>;
v2 = newarray (java.lang.Object)[0];
v3 = virtualinvoke v1.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v2);
label2:
return v3;
label3:
v4 := @caughtexception;
goto label6;
label4:
v5 := @caughtexception;
goto label6;
label5:
v6 := @caughtexception;
label6:
v7 = staticinvoke <io.netty.resolver.dns.DnsServerAddressStreamProviders: io.netty.resolver.dns.DnsServerAddressStreamProvider unixDefault()>();
return v7;
catch java.lang.IllegalAccessException from label1 to label2 with label3;
catch java.lang.InstantiationException from label1 to label2 with label4;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
}
public static io.netty.resolver.dns.DnsServerAddressStreamProvider unixDefault()
{
io.netty.resolver.dns.DnsServerAddressStreamProvider v0;
v0 = <io.netty.resolver.dns.DnsServerAddressStreamProviders$DefaultProviderHolder: io.netty.resolver.dns.DnsServerAddressStreamProvider DEFAULT_DNS_SERVER_ADDRESS_STREAM_PROVIDER>;
return v0;
}
static void <clinit>()
{
java.lang.Throwable v11, v16, v17;
java.lang.Object[] v7;
java.lang.reflect.Constructor v1;
java.lang.String v18;
boolean v13, v2, v5;
java.lang.Class[] v6;
io.netty.resolver.dns.DnsServerAddressStreamProviders$1 v3;
io.netty.util.internal.logging.InternalLogger v0, v10, v12, v14, v15, v8;
java.lang.ClassNotFoundException v9;
java.lang.Object v4;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/resolver/dns/DnsServerAddressStreamProviders;");
<io.netty.resolver.dns.DnsServerAddressStreamProviders: io.netty.util.internal.logging.InternalLogger LOGGER> = v0;
v1 = null;
v2 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean isOsx()>();
if v2 == 0 goto label9;
label1:
v3 = new io.netty.resolver.dns.DnsServerAddressStreamProviders$1;
specialinvoke v3.<io.netty.resolver.dns.DnsServerAddressStreamProviders$1: void <init>()>();
v4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(v3);
v5 = v4 instanceof java.lang.Class;
if v5 == 0 goto label2;
v6 = newarray (java.lang.Class)[0];
v1 = virtualinvoke v4.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(v6);
v7 = newarray (java.lang.Object)[0];
virtualinvoke v1.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v7);
v8 = <io.netty.resolver.dns.DnsServerAddressStreamProviders: io.netty.util.internal.logging.InternalLogger LOGGER>;
interfaceinvoke v8.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("{}: available", "io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider");
goto label9;
label2:
throw v4;
label3:
v9 := @caughtexception;
v10 = <io.netty.resolver.dns.DnsServerAddressStreamProviders: io.netty.util.internal.logging.InternalLogger LOGGER>;
interfaceinvoke v10.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object)>("Can not find {} in the classpath, fallback to system defaults. This may result in incorrect DNS resolutions on MacOS. Check whether you have a dependency on \'io.netty:netty-resolver-dns-native-macos\'", "io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider");
goto label9;
label4:
v11 := @caughtexception;
v12 = <io.netty.resolver.dns.DnsServerAddressStreamProviders: io.netty.util.internal.logging.InternalLogger LOGGER>;
v13 = interfaceinvoke v12.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v13 == 0 goto label5;
v14 = <io.netty.resolver.dns.DnsServerAddressStreamProviders: io.netty.util.internal.logging.InternalLogger LOGGER>;
interfaceinvoke v14.<io.netty.util.internal.logging.InternalLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Unable to load {}, fallback to system defaults. This may result in incorrect DNS resolutions on MacOS. Check whether you have a dependency on \'io.netty:netty-resolver-dns-native-macos\'", "io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider", v11);
goto label8;
label5:
v15 = <io.netty.resolver.dns.DnsServerAddressStreamProviders: io.netty.util.internal.logging.InternalLogger LOGGER>;
v16 = virtualinvoke v11.<java.lang.Throwable: java.lang.Throwable getCause()>();
if v16 == null goto label6;
v17 = virtualinvoke v11.<java.lang.Throwable: java.lang.Throwable getCause()>();
v18 = virtualinvoke v17.<java.lang.Throwable: java.lang.String toString()>();
goto label7;
label6:
v18 = virtualinvoke v11.<java.lang.Throwable: java.lang.String toString()>();
label7:
interfaceinvoke v15.<io.netty.util.internal.logging.InternalLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Unable to load {}, fallback to system defaults. This may result in incorrect DNS resolutions on MacOS. Check whether you have a dependency on \'io.netty:netty-resolver-dns-native-macos\'. Use DEBUG level to see the full stack: {}", "io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider", v18);
label8:
v1 = null;
label9:
<io.netty.resolver.dns.DnsServerAddressStreamProviders: java.lang.reflect.Constructor STREAM_PROVIDER_CONSTRUCTOR> = v1;
return;
catch java.lang.ClassNotFoundException from label1 to label3 with label3;
catch java.lang.Throwable from label1 to label3 with label4;
}
}