class io.netty.resolver.dns.InflightNameResolver$1 extends java.lang.Object implements io.netty.util.concurrent.FutureListener
{
final io.netty.util.concurrent.Promise val$promise;
final io.netty.resolver.dns.InflightNameResolver this$0;
void <init>(io.netty.resolver.dns.InflightNameResolver, io.netty.util.concurrent.Promise)
{
io.netty.resolver.dns.InflightNameResolver v1;
io.netty.resolver.dns.InflightNameResolver$1 v0;
io.netty.util.concurrent.Promise v2;
v0 := @this: io.netty.resolver.dns.InflightNameResolver$1;
v1 := @parameter0: io.netty.resolver.dns.InflightNameResolver;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v0.<io.netty.resolver.dns.InflightNameResolver$1: io.netty.resolver.dns.InflightNameResolver this$0> = v1;
v0.<io.netty.resolver.dns.InflightNameResolver$1: io.netty.util.concurrent.Promise val$promise> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void operationComplete(io.netty.util.concurrent.Future) throws java.lang.Exception
{
io.netty.resolver.dns.InflightNameResolver$1 v0;
io.netty.util.concurrent.Future v1;
io.netty.util.concurrent.Promise v2;
v0 := @this: io.netty.resolver.dns.InflightNameResolver$1;
v1 := @parameter0: io.netty.util.concurrent.Future;
v2 = v0.<io.netty.resolver.dns.InflightNameResolver$1: io.netty.util.concurrent.Promise val$promise>;
staticinvoke <io.netty.resolver.dns.InflightNameResolver: void transferResult(io.netty.util.concurrent.Future,io.netty.util.concurrent.Promise)>(v1, v2);
return;
}
}