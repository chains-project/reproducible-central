final class io.netty.resolver.dns.ShuffledDnsServerAddressStream extends java.lang.Object implements io.netty.resolver.dns.DnsServerAddressStream
{
private final java.util.List addresses;
private int i;
void <init>(java.util.List)
{
java.util.List v1;
io.netty.resolver.dns.ShuffledDnsServerAddressStream v0;
v0 := @this: io.netty.resolver.dns.ShuffledDnsServerAddressStream;
v1 := @parameter0: java.util.List;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.resolver.dns.ShuffledDnsServerAddressStream: java.util.List addresses> = v1;
specialinvoke v0.<io.netty.resolver.dns.ShuffledDnsServerAddressStream: void shuffle()>();
return;
}
private void <init>(java.util.List, int)
{
int v2;
java.util.List v1;
io.netty.resolver.dns.ShuffledDnsServerAddressStream v0;
v0 := @this: io.netty.resolver.dns.ShuffledDnsServerAddressStream;
v1 := @parameter0: java.util.List;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.resolver.dns.ShuffledDnsServerAddressStream: java.util.List addresses> = v1;
v0.<io.netty.resolver.dns.ShuffledDnsServerAddressStream: int i> = v2;
return;
}
private void shuffle()
{
java.util.List v1;
java.util.Random v2;
io.netty.resolver.dns.ShuffledDnsServerAddressStream v0;
v0 := @this: io.netty.resolver.dns.ShuffledDnsServerAddressStream;
v1 = v0.<io.netty.resolver.dns.ShuffledDnsServerAddressStream: java.util.List addresses>;
v2 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.Random threadLocalRandom()>();
staticinvoke <java.util.Collections: void shuffle(java.util.List,java.util.Random)>(v1, v2);
return;
}
public java.net.InetSocketAddress next()
{
java.util.List v2, v5;
io.netty.resolver.dns.ShuffledDnsServerAddressStream v0;
int v1, v4, v6;
java.lang.Object v3;
v0 := @this: io.netty.resolver.dns.ShuffledDnsServerAddressStream;
v1 = v0.<io.netty.resolver.dns.ShuffledDnsServerAddressStream: int i>;
v2 = v0.<io.netty.resolver.dns.ShuffledDnsServerAddressStream: java.util.List addresses>;
v3 = interfaceinvoke v2.<java.util.List: java.lang.Object get(int)>(v1);
v4 = v1 + 1;
v5 = v0.<io.netty.resolver.dns.ShuffledDnsServerAddressStream: java.util.List addresses>;
v6 = interfaceinvoke v5.<java.util.List: int size()>();
if v4 >= v6 goto label1;
v0.<io.netty.resolver.dns.ShuffledDnsServerAddressStream: int i> = v4;
goto label2;
label1:
v0.<io.netty.resolver.dns.ShuffledDnsServerAddressStream: int i> = 0;
specialinvoke v0.<io.netty.resolver.dns.ShuffledDnsServerAddressStream: void shuffle()>();
label2:
return v3;
}
public int size()
{
int v2;
java.util.List v1;
io.netty.resolver.dns.ShuffledDnsServerAddressStream v0;
v0 := @this: io.netty.resolver.dns.ShuffledDnsServerAddressStream;
v1 = v0.<io.netty.resolver.dns.ShuffledDnsServerAddressStream: java.util.List addresses>;
v2 = interfaceinvoke v1.<java.util.List: int size()>();
return v2;
}
public io.netty.resolver.dns.ShuffledDnsServerAddressStream duplicate()
{
java.util.List v2;
io.netty.resolver.dns.ShuffledDnsServerAddressStream v0, v1;
int v3;
v0 := @this: io.netty.resolver.dns.ShuffledDnsServerAddressStream;
v1 = new io.netty.resolver.dns.ShuffledDnsServerAddressStream;
v2 = v0.<io.netty.resolver.dns.ShuffledDnsServerAddressStream: java.util.List addresses>;
v3 = v0.<io.netty.resolver.dns.ShuffledDnsServerAddressStream: int i>;
specialinvoke v1.<io.netty.resolver.dns.ShuffledDnsServerAddressStream: void <init>(java.util.List,int)>(v2, v3);
return v1;
}
public java.lang.String toString()
{
java.util.List v2;
io.netty.resolver.dns.ShuffledDnsServerAddressStream v0;
int v1;
java.lang.String v3;
v0 := @this: io.netty.resolver.dns.ShuffledDnsServerAddressStream;
v1 = v0.<io.netty.resolver.dns.ShuffledDnsServerAddressStream: int i>;
v2 = v0.<io.netty.resolver.dns.ShuffledDnsServerAddressStream: java.util.List addresses>;
v3 = staticinvoke <io.netty.resolver.dns.SequentialDnsServerAddressStream: java.lang.String toString(java.lang.String,int,java.util.Collection)>("shuffled", v1, v2);
return v3;
}
}