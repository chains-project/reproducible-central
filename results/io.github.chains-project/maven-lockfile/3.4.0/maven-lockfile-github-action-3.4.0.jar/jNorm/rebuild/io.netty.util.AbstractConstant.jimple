public abstract class io.netty.util.AbstractConstant extends java.lang.Object implements io.netty.util.Constant
{
private static final java.util.concurrent.atomic.AtomicLong uniqueIdGenerator;
private final int id;
private final java.lang.String name;
private final long uniquifier;
protected void <init>(int, java.lang.String)
{
java.util.concurrent.atomic.AtomicLong v3;
int v1;
long v4;
java.lang.String v2;
io.netty.util.AbstractConstant v0;
v0 := @this: io.netty.util.AbstractConstant;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.util.AbstractConstant: int id> = v1;
v0.<io.netty.util.AbstractConstant: java.lang.String name> = v2;
v3 = <io.netty.util.AbstractConstant: java.util.concurrent.atomic.AtomicLong uniqueIdGenerator>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();
v0.<io.netty.util.AbstractConstant: long uniquifier> = v4;
return;
}
public final java.lang.String name()
{
java.lang.String v1;
io.netty.util.AbstractConstant v0;
v0 := @this: io.netty.util.AbstractConstant;
v1 = v0.<io.netty.util.AbstractConstant: java.lang.String name>;
return v1;
}
public final int id()
{
int v1;
io.netty.util.AbstractConstant v0;
v0 := @this: io.netty.util.AbstractConstant;
v1 = v0.<io.netty.util.AbstractConstant: int id>;
return v1;
}
public final java.lang.String toString()
{
java.lang.String v1;
io.netty.util.AbstractConstant v0;
v0 := @this: io.netty.util.AbstractConstant;
v1 = virtualinvoke v0.<io.netty.util.AbstractConstant: java.lang.String name()>();
return v1;
}
public final int hashCode()
{
int v1;
io.netty.util.AbstractConstant v0;
v0 := @this: io.netty.util.AbstractConstant;
v1 = specialinvoke v0.<java.lang.Object: int hashCode()>();
return v1;
}
public final boolean equals(java.lang.Object)
{
java.lang.Object v1;
boolean v2;
io.netty.util.AbstractConstant v0;
v0 := @this: io.netty.util.AbstractConstant;
v1 := @parameter0: java.lang.Object;
v2 = specialinvoke v0.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
return v2;
}
public final int compareTo(io.netty.util.AbstractConstant)
{
java.lang.Error v12;
long v10, v5, v6, v9;
io.netty.util.AbstractConstant v0, v1;
byte v11, v7;
int v2, v3, v4, v8;
v0 := @this: io.netty.util.AbstractConstant;
v1 := @parameter0: io.netty.util.AbstractConstant;
if v0 != v1 goto label1;
return 0;
label1:
v2 = virtualinvoke v0.<io.netty.util.AbstractConstant: int hashCode()>();
v3 = virtualinvoke v1.<io.netty.util.AbstractConstant: int hashCode()>();
v4 = v2 - v3;
if v4 == 0 goto label2;
return v4;
label2:
v5 = v0.<io.netty.util.AbstractConstant: long uniquifier>;
v6 = v1.<io.netty.util.AbstractConstant: long uniquifier>;
v7 = v5 cmp v6;
if v7 >= 0 goto label3;
v8 = (int) -1;
return v8;
label3:
v9 = v0.<io.netty.util.AbstractConstant: long uniquifier>;
v10 = v1.<io.netty.util.AbstractConstant: long uniquifier>;
v11 = v9 cmp v10;
if v11 <= 0 goto label4;
return 1;
label4:
v12 = new java.lang.Error;
specialinvoke v12.<java.lang.Error: void <init>(java.lang.String)>("failed to compare two different constants");
throw v12;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicLong v0;
v0 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v0.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
<io.netty.util.AbstractConstant: java.util.concurrent.atomic.AtomicLong uniqueIdGenerator> = v0;
return;
}
}