public class io.netty.util.DomainNameMapping extends java.lang.Object implements io.netty.util.Mapping
{
final java.lang.Object defaultValue;
private final java.util.Map map;
private final java.util.Map unmodifiableMap;
public void <init>(java.lang.Object)
{
java.lang.Object v1;
io.netty.util.DomainNameMapping v0;
v0 := @this: io.netty.util.DomainNameMapping;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<io.netty.util.DomainNameMapping: void <init>(int,java.lang.Object)>(4, v1);
return;
}
public void <init>(int, java.lang.Object)
{
java.util.LinkedHashMap v3;
io.netty.util.DomainNameMapping v0;
int v1;
java.lang.Object v2;
v0 := @this: io.netty.util.DomainNameMapping;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.Object;
v3 = new java.util.LinkedHashMap;
specialinvoke v3.<java.util.LinkedHashMap: void <init>(int)>(v1);
specialinvoke v0.<io.netty.util.DomainNameMapping: void <init>(java.util.Map,java.lang.Object)>(v3, v2);
return;
}
void <init>(java.util.Map, java.lang.Object)
{
io.netty.util.DomainNameMapping v0;
java.util.Map v1, v4;
java.lang.Object v2, v3;
v0 := @this: io.netty.util.DomainNameMapping;
v1 := @parameter0: java.util.Map;
v2 := @parameter1: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "defaultValue");
v0.<io.netty.util.DomainNameMapping: java.lang.Object defaultValue> = v3;
v0.<io.netty.util.DomainNameMapping: java.util.Map map> = v1;
if v1 == null goto label1;
v4 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v1);
goto label2;
label1:
v4 = null;
label2:
v0.<io.netty.util.DomainNameMapping: java.util.Map unmodifiableMap> = v4;
return;
}
public io.netty.util.DomainNameMapping add(java.lang.String, java.lang.Object)
{
io.netty.util.DomainNameMapping v0;
java.util.Map v3;
java.lang.Object v2, v4, v6;
java.lang.String v1, v5;
v0 := @this: io.netty.util.DomainNameMapping;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = v0.<io.netty.util.DomainNameMapping: java.util.Map map>;
v4 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "hostname");
v5 = staticinvoke <io.netty.util.DomainNameMapping: java.lang.String normalizeHostname(java.lang.String)>(v4);
v6 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "output");
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v5, v6);
return v0;
}
static boolean matches(java.lang.String, java.lang.String)
{
int v3, v5, v6;
java.lang.String v0, v1;
boolean v2, v4, v7, v8, v9;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = virtualinvoke v0.<java.lang.String: boolean startsWith(java.lang.String)>("*.");
if v2 == 0 goto label4;
v3 = virtualinvoke v1.<java.lang.String: int length()>();
v4 = virtualinvoke v0.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(2, v1, 0, v3);
if v4 != 0 goto label1;
v5 = virtualinvoke v0.<java.lang.String: int length()>();
v6 = v5 - 1;
v7 = staticinvoke <io.netty.util.internal.StringUtil: boolean commonSuffixOfLength(java.lang.String,java.lang.String,int)>(v1, v0, v6);
if v7 == 0 goto label2;
label1:
v8 = 1;
goto label3;
label2:
v8 = 0;
label3:
return v8;
label4:
v9 = virtualinvoke v0.<java.lang.String: boolean equals(java.lang.Object)>(v1);
return v9;
}
static java.lang.String normalizeHostname(java.lang.String)
{
java.util.Locale v2;
java.lang.String v0, v3;
boolean v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <io.netty.util.DomainNameMapping: boolean needsNormalization(java.lang.String)>(v0);
if v1 == 0 goto label1;
v0 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String,int)>(v0, 1);
label1:
v2 = <java.util.Locale: java.util.Locale US>;
v3 = virtualinvoke v0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v2);
return v3;
}
private static boolean needsNormalization(java.lang.String)
{
int v1, v2;
char v3;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: int length()>();
v2 = 0;
label1:
if v2 >= v1 goto label3;
v3 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v2);
if v3 <= 127 goto label2;
return 1;
label2:
v2 = v2 + 1;
goto label1;
label3:
return 0;
}
public java.lang.Object map(java.lang.String)
{
java.util.Iterator v5;
java.util.Set v4;
io.netty.util.DomainNameMapping v0;
java.util.Map v3;
java.lang.Object v10, v11, v7, v8;
java.lang.String v1, v2;
boolean v6, v9;
v0 := @this: io.netty.util.DomainNameMapping;
v1 := @parameter0: java.lang.String;
if v1 == null goto label2;
v2 = staticinvoke <io.netty.util.DomainNameMapping: java.lang.String normalizeHostname(java.lang.String)>(v1);
v3 = v0.<io.netty.util.DomainNameMapping: java.util.Map map>;
v4 = interfaceinvoke v3.<java.util.Map: java.util.Set entrySet()>();
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getKey()>();
v9 = staticinvoke <io.netty.util.DomainNameMapping: boolean matches(java.lang.String,java.lang.String)>(v8, v2);
if v9 == 0 goto label1;
v10 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getValue()>();
return v10;
label2:
v11 = v0.<io.netty.util.DomainNameMapping: java.lang.Object defaultValue>;
return v11;
}
public java.util.Map asMap()
{
io.netty.util.DomainNameMapping v0;
java.util.Map v1;
v0 := @this: io.netty.util.DomainNameMapping;
v1 = v0.<io.netty.util.DomainNameMapping: java.util.Map unmodifiableMap>;
return v1;
}
public java.lang.String toString()
{
io.netty.util.DomainNameMapping v0;
java.util.Map v3;
java.lang.Object v2;
java.lang.String v1, v4;
v0 := @this: io.netty.util.DomainNameMapping;
v1 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Object)>(v0);
v2 = v0.<io.netty.util.DomainNameMapping: java.lang.Object defaultValue>;
v3 = v0.<io.netty.util.DomainNameMapping: java.util.Map map>;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Object,java.util.Map)>(v1, v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001(default: \u0001, map: \u0001)");
return v4;
}
}