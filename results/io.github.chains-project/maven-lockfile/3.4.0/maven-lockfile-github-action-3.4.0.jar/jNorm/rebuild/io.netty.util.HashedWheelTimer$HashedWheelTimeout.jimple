final class io.netty.util.HashedWheelTimer$HashedWheelTimeout extends java.lang.Object implements io.netty.util.Timeout, java.lang.Runnable
{
private static final int ST_INIT;
private static final int ST_CANCELLED;
private static final int ST_EXPIRED;
private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater STATE_UPDATER;
private final io.netty.util.HashedWheelTimer timer;
private final io.netty.util.TimerTask task;
private final long deadline;
private volatile int state;
long remainingRounds;
io.netty.util.HashedWheelTimer$HashedWheelTimeout next;
io.netty.util.HashedWheelTimer$HashedWheelTimeout prev;
io.netty.util.HashedWheelTimer$HashedWheelBucket bucket;
void <init>(io.netty.util.HashedWheelTimer, io.netty.util.TimerTask, long)
{
io.netty.util.HashedWheelTimer v1;
io.netty.util.HashedWheelTimer$HashedWheelTimeout v0;
long v3;
io.netty.util.TimerTask v2;
v0 := @this: io.netty.util.HashedWheelTimer$HashedWheelTimeout;
v1 := @parameter0: io.netty.util.HashedWheelTimer;
v2 := @parameter1: io.netty.util.TimerTask;
v3 := @parameter2: long;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: int state> = 0;
v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer timer> = v1;
v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.TimerTask task> = v2;
v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: long deadline> = v3;
return;
}
public io.netty.util.Timer timer()
{
io.netty.util.HashedWheelTimer v1;
io.netty.util.HashedWheelTimer$HashedWheelTimeout v0;
v0 := @this: io.netty.util.HashedWheelTimer$HashedWheelTimeout;
v1 = v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer timer>;
return v1;
}
public io.netty.util.TimerTask task()
{
io.netty.util.HashedWheelTimer$HashedWheelTimeout v0;
io.netty.util.TimerTask v1;
v0 := @this: io.netty.util.HashedWheelTimer$HashedWheelTimeout;
v1 = v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.TimerTask task>;
return v1;
}
public boolean cancel()
{
io.netty.util.HashedWheelTimer v2;
io.netty.util.HashedWheelTimer$HashedWheelTimeout v0;
java.util.Queue v3;
boolean v1;
v0 := @this: io.netty.util.HashedWheelTimer$HashedWheelTimeout;
v1 = virtualinvoke v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: boolean compareAndSetState(int,int)>(0, 1);
if v1 != 0 goto label1;
return 0;
label1:
v2 = v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer timer>;
v3 = v2.<io.netty.util.HashedWheelTimer: java.util.Queue cancelledTimeouts>;
interfaceinvoke v3.<java.util.Queue: boolean add(java.lang.Object)>(v0);
return 1;
}
void remove()
{
java.util.concurrent.atomic.AtomicLong v3;
io.netty.util.HashedWheelTimer v2;
io.netty.util.HashedWheelTimer$HashedWheelTimeout v0;
io.netty.util.HashedWheelTimer$HashedWheelBucket v1;
v0 := @this: io.netty.util.HashedWheelTimer$HashedWheelTimeout;
v1 = v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelBucket bucket>;
if v1 == null goto label1;
virtualinvoke v1.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout remove(io.netty.util.HashedWheelTimer$HashedWheelTimeout)>(v0);
goto label2;
label1:
v2 = v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer timer>;
v3 = v2.<io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicLong pendingTimeouts>;
virtualinvoke v3.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();
label2:
return;
}
public boolean compareAndSetState(int, int)
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v3;
int v1, v2;
io.netty.util.HashedWheelTimer$HashedWheelTimeout v0;
boolean v4;
v0 := @this: io.netty.util.HashedWheelTimer$HashedWheelTimeout;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = <io.netty.util.HashedWheelTimer$HashedWheelTimeout: java.util.concurrent.atomic.AtomicIntegerFieldUpdater STATE_UPDATER>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(v0, v1, v2);
return v4;
}
public int state()
{
int v1;
io.netty.util.HashedWheelTimer$HashedWheelTimeout v0;
v0 := @this: io.netty.util.HashedWheelTimer$HashedWheelTimeout;
v1 = v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: int state>;
return v1;
}
public boolean isCancelled()
{
int v1;
io.netty.util.HashedWheelTimer$HashedWheelTimeout v0;
boolean v2;
v0 := @this: io.netty.util.HashedWheelTimer$HashedWheelTimeout;
v1 = virtualinvoke v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: int state()>();
if v1 != 1 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public boolean isExpired()
{
int v1;
io.netty.util.HashedWheelTimer$HashedWheelTimeout v0;
boolean v2;
v0 := @this: io.netty.util.HashedWheelTimer$HashedWheelTimeout;
v1 = virtualinvoke v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: int state()>();
if v1 != 2 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public void expire()
{
java.lang.Throwable v4;
java.util.concurrent.Executor v3;
io.netty.util.HashedWheelTimer$HashedWheelTimeout v0;
io.netty.util.internal.logging.InternalLogger v5, v7;
io.netty.util.HashedWheelTimer v2;
java.lang.Class v8;
java.lang.String v10, v9;
boolean v1, v6;
v0 := @this: io.netty.util.HashedWheelTimer$HashedWheelTimeout;
v1 = virtualinvoke v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: boolean compareAndSetState(int,int)>(0, 2);
if v1 != 0 goto label1;
return;
label1:
v2 = v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer timer>;
v3 = v2.<io.netty.util.HashedWheelTimer: java.util.concurrent.Executor taskExecutor>;
interfaceinvoke v3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(v0);
label2:
goto label4;
label3:
v4 := @caughtexception;
v5 = <io.netty.util.HashedWheelTimer: io.netty.util.internal.logging.InternalLogger logger>;
v6 = interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: boolean isWarnEnabled()>();
if v6 == 0 goto label4;
v7 = <io.netty.util.HashedWheelTimer: io.netty.util.internal.logging.InternalLogger logger>;
v8 = class "Lio/netty/util/TimerTask;";
v9 = virtualinvoke v8.<java.lang.Class: java.lang.String getSimpleName()>();
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("An exception was thrown while submit \u0001 for execution.");
interfaceinvoke v7.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Throwable)>(v10, v4);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void run()
{
java.lang.Throwable v2;
io.netty.util.HashedWheelTimer$HashedWheelTimeout v0;
io.netty.util.internal.logging.InternalLogger v3, v5;
java.lang.Class v6;
io.netty.util.TimerTask v1;
java.lang.String v7, v8;
boolean v4;
v0 := @this: io.netty.util.HashedWheelTimer$HashedWheelTimeout;
label1:
v1 = v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.TimerTask task>;
interfaceinvoke v1.<io.netty.util.TimerTask: void run(io.netty.util.Timeout)>(v0);
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = <io.netty.util.HashedWheelTimer: io.netty.util.internal.logging.InternalLogger logger>;
v4 = interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: boolean isWarnEnabled()>();
if v4 == 0 goto label4;
v5 = <io.netty.util.HashedWheelTimer: io.netty.util.internal.logging.InternalLogger logger>;
v6 = class "Lio/netty/util/TimerTask;";
v7 = virtualinvoke v6.<java.lang.Class: java.lang.String getSimpleName()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("An exception was thrown by \u0001.");
interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Throwable)>(v8, v2);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public java.lang.String toString()
{
long v1, v10, v2, v3, v5, v6;
byte v8, v9;
io.netty.util.TimerTask v12;
java.lang.String v13, v7;
boolean v11;
io.netty.util.HashedWheelTimer$HashedWheelTimeout v0;
io.netty.util.HashedWheelTimer v4;
java.lang.StringBuilder v14, v15, v16, v17;
v0 := @this: io.netty.util.HashedWheelTimer$HashedWheelTimeout;
v1 = staticinvoke <java.lang.System: long nanoTime()>();
v2 = v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: long deadline>;
v3 = v2 - v1;
v4 = v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer timer>;
v5 = v4.<io.netty.util.HashedWheelTimer: long startTime>;
v6 = v3 + v5;
specialinvoke v17.<java.lang.StringBuilder: void <init>(int)>(192);
v7 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Object)>(v0);
v8 = v6 cmp 0L;
if v8 <= 0 goto label1;
virtualinvoke v16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ns later");
goto label3;
label1:
v9 = v6 cmp 0L;
if v9 >= 0 goto label2;
v10 = neg v6;
virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ns ago");
goto label3;
label2:
virtualinvoke v14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("now");
label3:
v11 = virtualinvoke v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: boolean isCancelled()>();
if v11 == 0 goto label4;
virtualinvoke v14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", cancelled");
label4:
v12 = virtualinvoke v0.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.TimerTask task()>();
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,long,long,io.netty.util.TimerTask)>(v7, v6, v10, v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001(deadline: \u0001\u0001, task: \u0001)");
return v13;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v0;
v0 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lio/netty/util/HashedWheelTimer$HashedWheelTimeout;", "state");
<io.netty.util.HashedWheelTimer$HashedWheelTimeout: java.util.concurrent.atomic.AtomicIntegerFieldUpdater STATE_UPDATER> = v0;
return;
}
}