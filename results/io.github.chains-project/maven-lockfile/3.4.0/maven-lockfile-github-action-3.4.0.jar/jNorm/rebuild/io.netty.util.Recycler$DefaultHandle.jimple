final class io.netty.util.Recycler$DefaultHandle extends io.netty.util.Recycler$EnhancedHandle
{
private static final int STATE_CLAIMED;
private static final int STATE_AVAILABLE;
private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater STATE_UPDATER;
private volatile int state;
private final io.netty.util.Recycler$LocalPool localPool;
private java.lang.Object value;
static final boolean $assertionsDisabled;
void <init>(io.netty.util.Recycler$LocalPool)
{
io.netty.util.Recycler$DefaultHandle v0;
io.netty.util.Recycler$LocalPool v1;
v0 := @this: io.netty.util.Recycler$DefaultHandle;
v1 := @parameter0: io.netty.util.Recycler$LocalPool;
specialinvoke v0.<io.netty.util.Recycler$EnhancedHandle: void <init>()>();
v0.<io.netty.util.Recycler$DefaultHandle: io.netty.util.Recycler$LocalPool localPool> = v1;
return;
}
public void recycle(java.lang.Object)
{
java.lang.Object v1, v2;
io.netty.util.Recycler$DefaultHandle v0;
io.netty.util.Recycler$LocalPool v4;
java.lang.IllegalArgumentException v3;
v0 := @this: io.netty.util.Recycler$DefaultHandle;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.util.Recycler$DefaultHandle: java.lang.Object value>;
if v1 == v2 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("object does not belong to handle");
throw v3;
label1:
v4 = v0.<io.netty.util.Recycler$DefaultHandle: io.netty.util.Recycler$LocalPool localPool>;
virtualinvoke v4.<io.netty.util.Recycler$LocalPool: void release(io.netty.util.Recycler$DefaultHandle,boolean)>(v0, 1);
return;
}
public void unguardedRecycle(java.lang.Object)
{
java.lang.Object v1, v2;
io.netty.util.Recycler$DefaultHandle v0;
io.netty.util.Recycler$LocalPool v4;
java.lang.IllegalArgumentException v3;
v0 := @this: io.netty.util.Recycler$DefaultHandle;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.util.Recycler$DefaultHandle: java.lang.Object value>;
if v1 == v2 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("object does not belong to handle");
throw v3;
label1:
v4 = v0.<io.netty.util.Recycler$DefaultHandle: io.netty.util.Recycler$LocalPool localPool>;
virtualinvoke v4.<io.netty.util.Recycler$LocalPool: void release(io.netty.util.Recycler$DefaultHandle,boolean)>(v0, 0);
return;
}
java.lang.Object get()
{
java.lang.Object v1;
io.netty.util.Recycler$DefaultHandle v0;
v0 := @this: io.netty.util.Recycler$DefaultHandle;
v1 = v0.<io.netty.util.Recycler$DefaultHandle: java.lang.Object value>;
return v1;
}
void set(java.lang.Object)
{
java.lang.Object v1;
io.netty.util.Recycler$DefaultHandle v0;
v0 := @this: io.netty.util.Recycler$DefaultHandle;
v1 := @parameter0: java.lang.Object;
v0.<io.netty.util.Recycler$DefaultHandle: java.lang.Object value> = v1;
return;
}
void toClaimed()
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v4;
int v2;
io.netty.util.Recycler$DefaultHandle v0;
java.lang.AssertionError v3;
boolean v1;
v0 := @this: io.netty.util.Recycler$DefaultHandle;
v1 = <io.netty.util.Recycler$DefaultHandle: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.util.Recycler$DefaultHandle: int state>;
if v2 == 1 goto label1;
v3 = new java.lang.AssertionError;
specialinvoke v3.<java.lang.AssertionError: void <init>()>();
throw v3;
label1:
v4 = <io.netty.util.Recycler$DefaultHandle: java.util.concurrent.atomic.AtomicIntegerFieldUpdater STATE_UPDATER>;
virtualinvoke v4.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void lazySet(java.lang.Object,int)>(v0, 0);
return;
}
void toAvailable()
{
java.lang.IllegalStateException v3;
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v1;
int v2;
io.netty.util.Recycler$DefaultHandle v0;
v0 := @this: io.netty.util.Recycler$DefaultHandle;
v1 = <io.netty.util.Recycler$DefaultHandle: java.util.concurrent.atomic.AtomicIntegerFieldUpdater STATE_UPDATER>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndSet(java.lang.Object,int)>(v0, 1);
if v2 != 1 goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Object has been recycled already.");
throw v3;
label1:
return;
}
void unguardedToAvailable()
{
java.lang.IllegalStateException v2;
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v3;
int v1;
io.netty.util.Recycler$DefaultHandle v0;
v0 := @this: io.netty.util.Recycler$DefaultHandle;
v1 = v0.<io.netty.util.Recycler$DefaultHandle: int state>;
if v1 != 1 goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Object has been recycled already.");
throw v2;
label1:
v3 = <io.netty.util.Recycler$DefaultHandle: java.util.concurrent.atomic.AtomicIntegerFieldUpdater STATE_UPDATER>;
virtualinvoke v3.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void lazySet(java.lang.Object,int)>(v0, 1);
return;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v3;
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/util/Recycler;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.util.Recycler$DefaultHandle: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lio/netty/util/Recycler$DefaultHandle;", "state");
<io.netty.util.Recycler$DefaultHandle: java.util.concurrent.atomic.AtomicIntegerFieldUpdater STATE_UPDATER> = v3;
return;
}
}