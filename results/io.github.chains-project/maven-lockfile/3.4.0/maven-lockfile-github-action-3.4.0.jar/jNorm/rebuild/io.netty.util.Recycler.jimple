public abstract class io.netty.util.Recycler extends java.lang.Object
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final io.netty.util.Recycler$EnhancedHandle NOOP_HANDLE;
private static final int DEFAULT_INITIAL_MAX_CAPACITY_PER_THREAD;
private static final int DEFAULT_MAX_CAPACITY_PER_THREAD;
private static final int RATIO;
private static final int DEFAULT_QUEUE_CHUNK_SIZE_PER_THREAD;
private static final boolean BLOCKING_POOL;
private static final boolean BATCH_FAST_TL_ONLY;
private final int maxCapacityPerThread;
private final int interval;
private final int chunkSize;
private final io.netty.util.concurrent.FastThreadLocal threadLocal;
protected void <init>()
{
int v1;
io.netty.util.Recycler v0;
v0 := @this: io.netty.util.Recycler;
v1 = <io.netty.util.Recycler: int DEFAULT_MAX_CAPACITY_PER_THREAD>;
specialinvoke v0.<io.netty.util.Recycler: void <init>(int)>(v1);
return;
}
protected void <init>(int)
{
int v1, v2, v3;
io.netty.util.Recycler v0;
v0 := @this: io.netty.util.Recycler;
v1 := @parameter0: int;
v2 = <io.netty.util.Recycler: int RATIO>;
v3 = <io.netty.util.Recycler: int DEFAULT_QUEUE_CHUNK_SIZE_PER_THREAD>;
specialinvoke v0.<io.netty.util.Recycler: void <init>(int,int,int)>(v1, v2, v3);
return;
}
protected void <init>(int, int)
{
int v1, v2, v3, v4;
io.netty.util.Recycler v0;
v0 := @this: io.netty.util.Recycler;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = <io.netty.util.Recycler: int RATIO>;
v4 = <io.netty.util.Recycler: int DEFAULT_QUEUE_CHUNK_SIZE_PER_THREAD>;
specialinvoke v0.<io.netty.util.Recycler: void <init>(int,int,int)>(v1, v3, v4);
return;
}
protected void <init>(int, int, int, int)
{
int v1, v2, v3, v4, v5;
io.netty.util.Recycler v0;
v0 := @this: io.netty.util.Recycler;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = <io.netty.util.Recycler: int DEFAULT_QUEUE_CHUNK_SIZE_PER_THREAD>;
specialinvoke v0.<io.netty.util.Recycler: void <init>(int,int,int)>(v1, v3, v5);
return;
}
protected void <init>(int, int, int, int, int)
{
int v1, v2, v3, v4, v5, v6;
io.netty.util.Recycler v0;
v0 := @this: io.netty.util.Recycler;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 = <io.netty.util.Recycler: int DEFAULT_QUEUE_CHUNK_SIZE_PER_THREAD>;
specialinvoke v0.<io.netty.util.Recycler: void <init>(int,int,int)>(v1, v3, v6);
return;
}
protected void <init>(int, int, int)
{
io.netty.util.Recycler v0;
int v1, v10, v2, v3, v5, v6, v7, v8, v9;
io.netty.util.Recycler$2 v4;
v0 := @this: io.netty.util.Recycler;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = new io.netty.util.Recycler$2;
specialinvoke v4.<io.netty.util.Recycler$2: void <init>(io.netty.util.Recycler)>(v0);
v0.<io.netty.util.Recycler: io.netty.util.concurrent.FastThreadLocal threadLocal> = v4;
v5 = staticinvoke <java.lang.Math: int max(int,int)>(0, v2);
v0.<io.netty.util.Recycler: int interval> = v5;
if v1 > 0 goto label1;
v0.<io.netty.util.Recycler: int maxCapacityPerThread> = 0;
v0.<io.netty.util.Recycler: int chunkSize> = 0;
goto label2;
label1:
v6 = staticinvoke <java.lang.Math: int max(int,int)>(4, v1);
v0.<io.netty.util.Recycler: int maxCapacityPerThread> = v6;
v7 = v0.<io.netty.util.Recycler: int maxCapacityPerThread>;
v8 = v7 >> 1;
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v8);
v10 = staticinvoke <java.lang.Math: int max(int,int)>(2, v9);
v0.<io.netty.util.Recycler: int chunkSize> = v10;
label2:
return;
}
public final java.lang.Object get()
{
io.netty.util.Recycler$DefaultHandle v6, v7;
io.netty.util.Recycler v0;
io.netty.util.concurrent.FastThreadLocal v4;
io.netty.util.Recycler$EnhancedHandle v2, v9;
int v1;
java.lang.Object v3, v5, v8;
v0 := @this: io.netty.util.Recycler;
v1 = v0.<io.netty.util.Recycler: int maxCapacityPerThread>;
if v1 != 0 goto label1;
v2 = <io.netty.util.Recycler: io.netty.util.Recycler$EnhancedHandle NOOP_HANDLE>;
v3 = virtualinvoke v0.<io.netty.util.Recycler: java.lang.Object newObject(io.netty.util.Recycler$Handle)>(v2);
return v3;
label1:
v4 = v0.<io.netty.util.Recycler: io.netty.util.concurrent.FastThreadLocal threadLocal>;
v5 = virtualinvoke v4.<io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>();
v6 = virtualinvoke v5.<io.netty.util.Recycler$LocalPool: io.netty.util.Recycler$DefaultHandle claim()>();
if v6 != null goto label3;
v7 = virtualinvoke v5.<io.netty.util.Recycler$LocalPool: io.netty.util.Recycler$DefaultHandle newHandle()>();
if v7 == null goto label2;
v8 = virtualinvoke v0.<io.netty.util.Recycler: java.lang.Object newObject(io.netty.util.Recycler$Handle)>(v7);
virtualinvoke v7.<io.netty.util.Recycler$DefaultHandle: void set(java.lang.Object)>(v8);
goto label4;
label2:
v9 = <io.netty.util.Recycler: io.netty.util.Recycler$EnhancedHandle NOOP_HANDLE>;
v8 = virtualinvoke v0.<io.netty.util.Recycler: java.lang.Object newObject(io.netty.util.Recycler$Handle)>(v9);
goto label4;
label3:
v8 = virtualinvoke v6.<io.netty.util.Recycler$DefaultHandle: java.lang.Object get()>();
label4:
return v8;
}
public final boolean recycle(java.lang.Object, io.netty.util.Recycler$Handle)
{
io.netty.util.Recycler$EnhancedHandle v3;
io.netty.util.Recycler$Handle v2;
java.lang.Object v1;
io.netty.util.Recycler v0;
v0 := @this: io.netty.util.Recycler;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.util.Recycler$Handle;
v3 = <io.netty.util.Recycler: io.netty.util.Recycler$EnhancedHandle NOOP_HANDLE>;
if v2 != v3 goto label1;
return 0;
label1:
interfaceinvoke v2.<io.netty.util.Recycler$Handle: void recycle(java.lang.Object)>(v1);
return 1;
}
final int threadLocalSize()
{
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue v4;
io.netty.util.Recycler v0;
io.netty.util.concurrent.FastThreadLocal v1;
int v3, v5, v7;
java.lang.Object v2;
java.util.ArrayDeque v6;
v0 := @this: io.netty.util.Recycler;
v1 = v0.<io.netty.util.Recycler: io.netty.util.concurrent.FastThreadLocal threadLocal>;
v2 = virtualinvoke v1.<io.netty.util.concurrent.FastThreadLocal: java.lang.Object getIfExists()>();
if v2 != null goto label1;
v3 = 0;
goto label2;
label1:
v4 = v2.<io.netty.util.Recycler$LocalPool: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue pooledHandles>;
v5 = interfaceinvoke v4.<io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue: int size()>();
v6 = v2.<io.netty.util.Recycler$LocalPool: java.util.ArrayDeque batch>;
v7 = virtualinvoke v6.<java.util.ArrayDeque: int size()>();
v3 = v5 + v7;
label2:
return v3;
}
protected abstract java.lang.Object newObject(io.netty.util.Recycler$Handle);
static void <clinit>()
{
java.lang.Integer v19, v22, v25;
boolean v10, v27, v30, v7, v8;
io.netty.util.internal.logging.InternalLogger v0, v12, v13, v14, v15, v16, v17, v20, v23, v26, v29, v9;
int v11, v18, v2, v21, v24, v3, v4, v5, v6;
java.lang.Boolean v28, v31;
io.netty.util.Recycler$1 v1;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/util/Recycler;");
<io.netty.util.Recycler: io.netty.util.internal.logging.InternalLogger logger> = v0;
v1 = new io.netty.util.Recycler$1;
specialinvoke v1.<io.netty.util.Recycler$1: void <init>()>();
<io.netty.util.Recycler: io.netty.util.Recycler$EnhancedHandle NOOP_HANDLE> = v1;
v2 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>("io.netty.recycler.maxCapacity", 4096);
v3 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>("io.netty.recycler.maxCapacityPerThread", v2);
if v3 >= 0 goto label1;
v3 = 4096;
label1:
<io.netty.util.Recycler: int DEFAULT_MAX_CAPACITY_PER_THREAD> = v3;
v4 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>("io.netty.recycler.chunkSize", 32);
<io.netty.util.Recycler: int DEFAULT_QUEUE_CHUNK_SIZE_PER_THREAD> = v4;
v5 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>("io.netty.recycler.ratio", 8);
v6 = staticinvoke <java.lang.Math: int max(int,int)>(0, v5);
<io.netty.util.Recycler: int RATIO> = v6;
v7 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>("io.netty.recycler.blocking", 0);
<io.netty.util.Recycler: boolean BLOCKING_POOL> = v7;
v8 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>("io.netty.recycler.batchFastThreadLocalOnly", 1);
<io.netty.util.Recycler: boolean BATCH_FAST_TL_ONLY> = v8;
v9 = <io.netty.util.Recycler: io.netty.util.internal.logging.InternalLogger logger>;
v10 = interfaceinvoke v9.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v10 == 0 goto label3;
v11 = <io.netty.util.Recycler: int DEFAULT_MAX_CAPACITY_PER_THREAD>;
if v11 != 0 goto label2;
v12 = <io.netty.util.Recycler: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v12.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>("-Dio.netty.recycler.maxCapacityPerThread: disabled");
v13 = <io.netty.util.Recycler: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v13.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>("-Dio.netty.recycler.ratio: disabled");
v14 = <io.netty.util.Recycler: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v14.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>("-Dio.netty.recycler.chunkSize: disabled");
v15 = <io.netty.util.Recycler: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v15.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>("-Dio.netty.recycler.blocking: disabled");
v16 = <io.netty.util.Recycler: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v16.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>("-Dio.netty.recycler.batchFastThreadLocalOnly: disabled");
goto label3;
label2:
v17 = <io.netty.util.Recycler: io.netty.util.internal.logging.InternalLogger logger>;
v18 = <io.netty.util.Recycler: int DEFAULT_MAX_CAPACITY_PER_THREAD>;
v19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v18);
interfaceinvoke v17.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("-Dio.netty.recycler.maxCapacityPerThread: {}", v19);
v20 = <io.netty.util.Recycler: io.netty.util.internal.logging.InternalLogger logger>;
v21 = <io.netty.util.Recycler: int RATIO>;
v22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v21);
interfaceinvoke v20.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("-Dio.netty.recycler.ratio: {}", v22);
v23 = <io.netty.util.Recycler: io.netty.util.internal.logging.InternalLogger logger>;
v24 = <io.netty.util.Recycler: int DEFAULT_QUEUE_CHUNK_SIZE_PER_THREAD>;
v25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v24);
interfaceinvoke v23.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("-Dio.netty.recycler.chunkSize: {}", v25);
v26 = <io.netty.util.Recycler: io.netty.util.internal.logging.InternalLogger logger>;
v27 = <io.netty.util.Recycler: boolean BLOCKING_POOL>;
v28 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v27);
interfaceinvoke v26.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("-Dio.netty.recycler.blocking: {}", v28);
v29 = <io.netty.util.Recycler: io.netty.util.internal.logging.InternalLogger logger>;
v30 = <io.netty.util.Recycler: boolean BATCH_FAST_TL_ONLY>;
v31 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v30);
interfaceinvoke v29.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("-Dio.netty.recycler.batchFastThreadLocalOnly: {}", v31);
label3:
return;
}
}