public abstract class io.netty.util.concurrent.CompleteFuture extends io.netty.util.concurrent.AbstractFuture
{
private final io.netty.util.concurrent.EventExecutor executor;
protected void <init>(io.netty.util.concurrent.EventExecutor)
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.util.concurrent.CompleteFuture v0;
v0 := @this: io.netty.util.concurrent.CompleteFuture;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
specialinvoke v0.<io.netty.util.concurrent.AbstractFuture: void <init>()>();
v0.<io.netty.util.concurrent.CompleteFuture: io.netty.util.concurrent.EventExecutor executor> = v1;
return;
}
protected io.netty.util.concurrent.EventExecutor executor()
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.util.concurrent.CompleteFuture v0;
v0 := @this: io.netty.util.concurrent.CompleteFuture;
v1 = v0.<io.netty.util.concurrent.CompleteFuture: io.netty.util.concurrent.EventExecutor executor>;
return v1;
}
public io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)
{
io.netty.util.concurrent.EventExecutor v2;
io.netty.util.concurrent.CompleteFuture v0;
io.netty.util.concurrent.GenericFutureListener v1;
java.lang.Object v3;
v0 := @this: io.netty.util.concurrent.CompleteFuture;
v1 := @parameter0: io.netty.util.concurrent.GenericFutureListener;
v2 = virtualinvoke v0.<io.netty.util.concurrent.CompleteFuture: io.netty.util.concurrent.EventExecutor executor()>();
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "listener");
staticinvoke <io.netty.util.concurrent.DefaultPromise: void notifyListener(io.netty.util.concurrent.EventExecutor,io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)>(v2, v0, v3);
return v0;
}
public transient io.netty.util.concurrent.Future addListeners(io.netty.util.concurrent.GenericFutureListener[])
{
io.netty.util.concurrent.EventExecutor v6;
io.netty.util.concurrent.GenericFutureListener[] v1;
io.netty.util.concurrent.CompleteFuture v0;
int v3, v4;
io.netty.util.concurrent.GenericFutureListener v5;
java.lang.Object v2;
v0 := @this: io.netty.util.concurrent.CompleteFuture;
v1 := @parameter0: io.netty.util.concurrent.GenericFutureListener[];
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "listeners");
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
if v5 == null goto label2;
v6 = virtualinvoke v0.<io.netty.util.concurrent.CompleteFuture: io.netty.util.concurrent.EventExecutor executor()>();
staticinvoke <io.netty.util.concurrent.DefaultPromise: void notifyListener(io.netty.util.concurrent.EventExecutor,io.netty.util.concurrent.Future,io.netty.util.concurrent.GenericFutureListener)>(v6, v0, v5);
v4 = v4 + 1;
goto label1;
label2:
return v0;
}
public io.netty.util.concurrent.Future removeListener(io.netty.util.concurrent.GenericFutureListener)
{
io.netty.util.concurrent.GenericFutureListener v1;
io.netty.util.concurrent.CompleteFuture v0;
v0 := @this: io.netty.util.concurrent.CompleteFuture;
v1 := @parameter0: io.netty.util.concurrent.GenericFutureListener;
return v0;
}
public transient io.netty.util.concurrent.Future removeListeners(io.netty.util.concurrent.GenericFutureListener[])
{
io.netty.util.concurrent.GenericFutureListener[] v1;
io.netty.util.concurrent.CompleteFuture v0;
v0 := @this: io.netty.util.concurrent.CompleteFuture;
v1 := @parameter0: io.netty.util.concurrent.GenericFutureListener[];
return v0;
}
public io.netty.util.concurrent.Future await() throws java.lang.InterruptedException
{
java.lang.InterruptedException v2;
boolean v1;
io.netty.util.concurrent.CompleteFuture v0;
v0 := @this: io.netty.util.concurrent.CompleteFuture;
v1 = staticinvoke <java.lang.Thread: boolean interrupted()>();
if v1 == 0 goto label1;
v2 = new java.lang.InterruptedException;
specialinvoke v2.<java.lang.InterruptedException: void <init>()>();
throw v2;
label1:
return v0;
}
public boolean await(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
{
java.util.concurrent.TimeUnit v2;
java.lang.InterruptedException v4;
io.netty.util.concurrent.CompleteFuture v0;
long v1;
boolean v3;
v0 := @this: io.netty.util.concurrent.CompleteFuture;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
v3 = staticinvoke <java.lang.Thread: boolean interrupted()>();
if v3 == 0 goto label1;
v4 = new java.lang.InterruptedException;
specialinvoke v4.<java.lang.InterruptedException: void <init>()>();
throw v4;
label1:
return 1;
}
public io.netty.util.concurrent.Future sync() throws java.lang.InterruptedException
{
io.netty.util.concurrent.CompleteFuture v0;
v0 := @this: io.netty.util.concurrent.CompleteFuture;
return v0;
}
public io.netty.util.concurrent.Future syncUninterruptibly()
{
io.netty.util.concurrent.CompleteFuture v0;
v0 := @this: io.netty.util.concurrent.CompleteFuture;
return v0;
}
public boolean await(long) throws java.lang.InterruptedException
{
java.lang.InterruptedException v3;
io.netty.util.concurrent.CompleteFuture v0;
long v1;
boolean v2;
v0 := @this: io.netty.util.concurrent.CompleteFuture;
v1 := @parameter0: long;
v2 = staticinvoke <java.lang.Thread: boolean interrupted()>();
if v2 == 0 goto label1;
v3 = new java.lang.InterruptedException;
specialinvoke v3.<java.lang.InterruptedException: void <init>()>();
throw v3;
label1:
return 1;
}
public io.netty.util.concurrent.Future awaitUninterruptibly()
{
io.netty.util.concurrent.CompleteFuture v0;
v0 := @this: io.netty.util.concurrent.CompleteFuture;
return v0;
}
public boolean awaitUninterruptibly(long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v2;
long v1;
io.netty.util.concurrent.CompleteFuture v0;
v0 := @this: io.netty.util.concurrent.CompleteFuture;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
return 1;
}
public boolean awaitUninterruptibly(long)
{
long v1;
io.netty.util.concurrent.CompleteFuture v0;
v0 := @this: io.netty.util.concurrent.CompleteFuture;
v1 := @parameter0: long;
return 1;
}
public boolean isDone()
{
io.netty.util.concurrent.CompleteFuture v0;
v0 := @this: io.netty.util.concurrent.CompleteFuture;
return 1;
}
public boolean isCancellable()
{
io.netty.util.concurrent.CompleteFuture v0;
v0 := @this: io.netty.util.concurrent.CompleteFuture;
return 0;
}
public boolean isCancelled()
{
io.netty.util.concurrent.CompleteFuture v0;
v0 := @this: io.netty.util.concurrent.CompleteFuture;
return 0;
}
public boolean cancel(boolean)
{
boolean v1;
io.netty.util.concurrent.CompleteFuture v0;
v0 := @this: io.netty.util.concurrent.CompleteFuture;
v1 := @parameter0: boolean;
return 0;
}
}