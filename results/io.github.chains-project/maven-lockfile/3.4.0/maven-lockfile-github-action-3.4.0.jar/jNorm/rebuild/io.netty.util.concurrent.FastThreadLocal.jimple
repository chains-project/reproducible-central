public class io.netty.util.concurrent.FastThreadLocal extends java.lang.Object
{
private final int index;
public static void removeAll()
{
java.lang.Throwable v9;
java.lang.Object[] v5;
io.netty.util.internal.InternalThreadLocalMap v0;
io.netty.util.concurrent.FastThreadLocal v8;
int v1, v6, v7;
io.netty.util.concurrent.FastThreadLocal[] v4;
java.lang.Object v2, v3;
v0 = staticinvoke <io.netty.util.internal.InternalThreadLocalMap: io.netty.util.internal.InternalThreadLocalMap getIfSet()>();
if v0 != null goto label1;
return;
label1:
v1 = <io.netty.util.internal.InternalThreadLocalMap: int VARIABLES_TO_REMOVE_INDEX>;
v2 = virtualinvoke v0.<io.netty.util.internal.InternalThreadLocalMap: java.lang.Object indexedVariable(int)>(v1);
if v2 == null goto label3;
v3 = <io.netty.util.internal.InternalThreadLocalMap: java.lang.Object UNSET>;
if v2 == v3 goto label3;
v4 = newarray (io.netty.util.concurrent.FastThreadLocal)[0];
v5 = interfaceinvoke v2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(v4);
v6 = lengthof v5;
v7 = 0;
label2:
if v7 >= v6 goto label3;
v8 = v5[v7];
virtualinvoke v8.<io.netty.util.concurrent.FastThreadLocal: void remove(io.netty.util.internal.InternalThreadLocalMap)>(v0);
v7 = v7 + 1;
goto label2;
label3:
staticinvoke <io.netty.util.internal.InternalThreadLocalMap: void remove()>();
goto label5;
label4:
v9 := @caughtexception;
staticinvoke <io.netty.util.internal.InternalThreadLocalMap: void remove()>();
throw v9;
label5:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
public static int size()
{
int v1;
io.netty.util.internal.InternalThreadLocalMap v0;
v0 = staticinvoke <io.netty.util.internal.InternalThreadLocalMap: io.netty.util.internal.InternalThreadLocalMap getIfSet()>();
if v0 != null goto label1;
return 0;
label1:
v1 = virtualinvoke v0.<io.netty.util.internal.InternalThreadLocalMap: int size()>();
return v1;
}
public static void destroy()
{
staticinvoke <io.netty.util.internal.InternalThreadLocalMap: void destroy()>();
return;
}
private static void addToVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap, io.netty.util.concurrent.FastThreadLocal)
{
java.util.IdentityHashMap v5;
io.netty.util.internal.InternalThreadLocalMap v0;
java.util.Set v6;
io.netty.util.concurrent.FastThreadLocal v1;
int v2, v7;
java.lang.Object v3, v4;
v0 := @parameter0: io.netty.util.internal.InternalThreadLocalMap;
v1 := @parameter1: io.netty.util.concurrent.FastThreadLocal;
v2 = <io.netty.util.internal.InternalThreadLocalMap: int VARIABLES_TO_REMOVE_INDEX>;
v3 = virtualinvoke v0.<io.netty.util.internal.InternalThreadLocalMap: java.lang.Object indexedVariable(int)>(v2);
v4 = <io.netty.util.internal.InternalThreadLocalMap: java.lang.Object UNSET>;
if v3 == v4 goto label1;
if v3 != null goto label2;
label1:
v5 = new java.util.IdentityHashMap;
specialinvoke v5.<java.util.IdentityHashMap: void <init>()>();
v6 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>(v5);
v7 = <io.netty.util.internal.InternalThreadLocalMap: int VARIABLES_TO_REMOVE_INDEX>;
virtualinvoke v0.<io.netty.util.internal.InternalThreadLocalMap: boolean setIndexedVariable(int,java.lang.Object)>(v7, v6);
label2:
interfaceinvoke v3.<java.util.Set: boolean add(java.lang.Object)>(v1);
return;
}
private static void removeFromVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap, io.netty.util.concurrent.FastThreadLocal)
{
io.netty.util.concurrent.FastThreadLocal v1;
int v2;
io.netty.util.internal.InternalThreadLocalMap v0;
java.lang.Object v3, v4;
v0 := @parameter0: io.netty.util.internal.InternalThreadLocalMap;
v1 := @parameter1: io.netty.util.concurrent.FastThreadLocal;
v2 = <io.netty.util.internal.InternalThreadLocalMap: int VARIABLES_TO_REMOVE_INDEX>;
v3 = virtualinvoke v0.<io.netty.util.internal.InternalThreadLocalMap: java.lang.Object indexedVariable(int)>(v2);
v4 = <io.netty.util.internal.InternalThreadLocalMap: java.lang.Object UNSET>;
if v3 == v4 goto label1;
if v3 != null goto label2;
label1:
return;
label2:
interfaceinvoke v3.<java.util.Set: boolean remove(java.lang.Object)>(v1);
return;
}
public void <init>()
{
int v1;
io.netty.util.concurrent.FastThreadLocal v0;
v0 := @this: io.netty.util.concurrent.FastThreadLocal;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = staticinvoke <io.netty.util.internal.InternalThreadLocalMap: int nextVariableIndex()>();
v0.<io.netty.util.concurrent.FastThreadLocal: int index> = v1;
return;
}
public final java.lang.Object get()
{
io.netty.util.concurrent.FastThreadLocal v0;
int v2;
io.netty.util.internal.InternalThreadLocalMap v1;
java.lang.Object v3, v4, v5;
v0 := @this: io.netty.util.concurrent.FastThreadLocal;
v1 = staticinvoke <io.netty.util.internal.InternalThreadLocalMap: io.netty.util.internal.InternalThreadLocalMap get()>();
v2 = v0.<io.netty.util.concurrent.FastThreadLocal: int index>;
v3 = virtualinvoke v1.<io.netty.util.internal.InternalThreadLocalMap: java.lang.Object indexedVariable(int)>(v2);
v4 = <io.netty.util.internal.InternalThreadLocalMap: java.lang.Object UNSET>;
if v3 == v4 goto label1;
return v3;
label1:
v5 = specialinvoke v0.<io.netty.util.concurrent.FastThreadLocal: java.lang.Object initialize(io.netty.util.internal.InternalThreadLocalMap)>(v1);
return v5;
}
public final java.lang.Object getIfExists()
{
io.netty.util.concurrent.FastThreadLocal v0;
int v2;
io.netty.util.internal.InternalThreadLocalMap v1;
java.lang.Object v3, v4;
v0 := @this: io.netty.util.concurrent.FastThreadLocal;
v1 = staticinvoke <io.netty.util.internal.InternalThreadLocalMap: io.netty.util.internal.InternalThreadLocalMap getIfSet()>();
if v1 == null goto label1;
v2 = v0.<io.netty.util.concurrent.FastThreadLocal: int index>;
v3 = virtualinvoke v1.<io.netty.util.internal.InternalThreadLocalMap: java.lang.Object indexedVariable(int)>(v2);
v4 = <io.netty.util.internal.InternalThreadLocalMap: java.lang.Object UNSET>;
if v3 == v4 goto label1;
return v3;
label1:
return null;
}
public final java.lang.Object get(io.netty.util.internal.InternalThreadLocalMap)
{
io.netty.util.concurrent.FastThreadLocal v0;
int v2;
io.netty.util.internal.InternalThreadLocalMap v1;
java.lang.Object v3, v4, v5;
v0 := @this: io.netty.util.concurrent.FastThreadLocal;
v1 := @parameter0: io.netty.util.internal.InternalThreadLocalMap;
v2 = v0.<io.netty.util.concurrent.FastThreadLocal: int index>;
v3 = virtualinvoke v1.<io.netty.util.internal.InternalThreadLocalMap: java.lang.Object indexedVariable(int)>(v2);
v4 = <io.netty.util.internal.InternalThreadLocalMap: java.lang.Object UNSET>;
if v3 == v4 goto label1;
return v3;
label1:
v5 = specialinvoke v0.<io.netty.util.concurrent.FastThreadLocal: java.lang.Object initialize(io.netty.util.internal.InternalThreadLocalMap)>(v1);
return v5;
}
private java.lang.Object initialize(io.netty.util.internal.InternalThreadLocalMap)
{
io.netty.util.concurrent.FastThreadLocal v0;
int v6;
io.netty.util.internal.InternalThreadLocalMap v1;
java.lang.Object v2, v3;
java.lang.IllegalArgumentException v4;
java.lang.Exception v5;
v0 := @this: io.netty.util.concurrent.FastThreadLocal;
v1 := @parameter0: io.netty.util.internal.InternalThreadLocalMap;
v2 = null;
label1:
v2 = virtualinvoke v0.<io.netty.util.concurrent.FastThreadLocal: java.lang.Object initialValue()>();
v3 = <io.netty.util.internal.InternalThreadLocalMap: java.lang.Object UNSET>;
if v2 != v3 goto label3;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("InternalThreadLocalMap.UNSET can not be initial value.");
throw v4;
label2:
v5 := @caughtexception;
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v5);
label3:
v6 = v0.<io.netty.util.concurrent.FastThreadLocal: int index>;
virtualinvoke v1.<io.netty.util.internal.InternalThreadLocalMap: boolean setIndexedVariable(int,java.lang.Object)>(v6, v2);
staticinvoke <io.netty.util.concurrent.FastThreadLocal: void addToVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)>(v1, v0);
return v2;
catch java.lang.Exception from label1 to label2 with label2;
}
public final void set(java.lang.Object)
{
io.netty.util.concurrent.FastThreadLocal v0;
io.netty.util.internal.InternalThreadLocalMap v3;
java.lang.Object v1, v2;
v0 := @this: io.netty.util.concurrent.FastThreadLocal;
v1 := @parameter0: java.lang.Object;
v2 = <io.netty.util.internal.InternalThreadLocalMap: java.lang.Object UNSET>;
if v1 == v2 goto label1;
v3 = staticinvoke <io.netty.util.internal.InternalThreadLocalMap: io.netty.util.internal.InternalThreadLocalMap get()>();
specialinvoke v0.<io.netty.util.concurrent.FastThreadLocal: void setKnownNotUnset(io.netty.util.internal.InternalThreadLocalMap,java.lang.Object)>(v3, v1);
goto label2;
label1:
virtualinvoke v0.<io.netty.util.concurrent.FastThreadLocal: void remove()>();
label2:
return;
}
public final void set(io.netty.util.internal.InternalThreadLocalMap, java.lang.Object)
{
io.netty.util.concurrent.FastThreadLocal v0;
io.netty.util.internal.InternalThreadLocalMap v1;
java.lang.Object v2, v3;
v0 := @this: io.netty.util.concurrent.FastThreadLocal;
v1 := @parameter0: io.netty.util.internal.InternalThreadLocalMap;
v2 := @parameter1: java.lang.Object;
v3 = <io.netty.util.internal.InternalThreadLocalMap: java.lang.Object UNSET>;
if v2 == v3 goto label1;
specialinvoke v0.<io.netty.util.concurrent.FastThreadLocal: void setKnownNotUnset(io.netty.util.internal.InternalThreadLocalMap,java.lang.Object)>(v1, v2);
goto label2;
label1:
virtualinvoke v0.<io.netty.util.concurrent.FastThreadLocal: void remove(io.netty.util.internal.InternalThreadLocalMap)>(v1);
label2:
return;
}
private void setKnownNotUnset(io.netty.util.internal.InternalThreadLocalMap, java.lang.Object)
{
io.netty.util.concurrent.FastThreadLocal v0;
int v3;
io.netty.util.internal.InternalThreadLocalMap v1;
java.lang.Object v2;
boolean v4;
v0 := @this: io.netty.util.concurrent.FastThreadLocal;
v1 := @parameter0: io.netty.util.internal.InternalThreadLocalMap;
v2 := @parameter1: java.lang.Object;
v3 = v0.<io.netty.util.concurrent.FastThreadLocal: int index>;
v4 = virtualinvoke v1.<io.netty.util.internal.InternalThreadLocalMap: boolean setIndexedVariable(int,java.lang.Object)>(v3, v2);
if v4 == 0 goto label1;
staticinvoke <io.netty.util.concurrent.FastThreadLocal: void addToVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)>(v1, v0);
label1:
return;
}
public final boolean isSet()
{
io.netty.util.internal.InternalThreadLocalMap v1;
io.netty.util.concurrent.FastThreadLocal v0;
boolean v2;
v0 := @this: io.netty.util.concurrent.FastThreadLocal;
v1 = staticinvoke <io.netty.util.internal.InternalThreadLocalMap: io.netty.util.internal.InternalThreadLocalMap getIfSet()>();
v2 = virtualinvoke v0.<io.netty.util.concurrent.FastThreadLocal: boolean isSet(io.netty.util.internal.InternalThreadLocalMap)>(v1);
return v2;
}
public final boolean isSet(io.netty.util.internal.InternalThreadLocalMap)
{
io.netty.util.concurrent.FastThreadLocal v0;
int v2;
io.netty.util.internal.InternalThreadLocalMap v1;
boolean v3, v4;
v0 := @this: io.netty.util.concurrent.FastThreadLocal;
v1 := @parameter0: io.netty.util.internal.InternalThreadLocalMap;
if v1 == null goto label1;
v2 = v0.<io.netty.util.concurrent.FastThreadLocal: int index>;
v3 = virtualinvoke v1.<io.netty.util.internal.InternalThreadLocalMap: boolean isIndexedVariableSet(int)>(v2);
if v3 == 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public final void remove()
{
io.netty.util.internal.InternalThreadLocalMap v1;
io.netty.util.concurrent.FastThreadLocal v0;
v0 := @this: io.netty.util.concurrent.FastThreadLocal;
v1 = staticinvoke <io.netty.util.internal.InternalThreadLocalMap: io.netty.util.internal.InternalThreadLocalMap getIfSet()>();
virtualinvoke v0.<io.netty.util.concurrent.FastThreadLocal: void remove(io.netty.util.internal.InternalThreadLocalMap)>(v1);
return;
}
public final void remove(io.netty.util.internal.InternalThreadLocalMap)
{
io.netty.util.concurrent.FastThreadLocal v0;
int v2;
io.netty.util.internal.InternalThreadLocalMap v1;
java.lang.Object v3, v4;
java.lang.Exception v5;
v0 := @this: io.netty.util.concurrent.FastThreadLocal;
v1 := @parameter0: io.netty.util.internal.InternalThreadLocalMap;
if v1 != null goto label1;
return;
label1:
v2 = v0.<io.netty.util.concurrent.FastThreadLocal: int index>;
v3 = virtualinvoke v1.<io.netty.util.internal.InternalThreadLocalMap: java.lang.Object removeIndexedVariable(int)>(v2);
v4 = <io.netty.util.internal.InternalThreadLocalMap: java.lang.Object UNSET>;
if v3 == v4 goto label5;
staticinvoke <io.netty.util.concurrent.FastThreadLocal: void removeFromVariablesToRemove(io.netty.util.internal.InternalThreadLocalMap,io.netty.util.concurrent.FastThreadLocal)>(v1, v0);
label2:
virtualinvoke v0.<io.netty.util.concurrent.FastThreadLocal: void onRemoval(java.lang.Object)>(v3);
label3:
goto label5;
label4:
v5 := @caughtexception;
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v5);
label5:
return;
catch java.lang.Exception from label2 to label3 with label4;
}
protected java.lang.Object initialValue() throws java.lang.Exception
{
io.netty.util.concurrent.FastThreadLocal v0;
v0 := @this: io.netty.util.concurrent.FastThreadLocal;
return null;
}
protected void onRemoval(java.lang.Object) throws java.lang.Exception
{
java.lang.Object v1;
io.netty.util.concurrent.FastThreadLocal v0;
v0 := @this: io.netty.util.concurrent.FastThreadLocal;
v1 := @parameter0: java.lang.Object;
return;
}
}