public abstract class io.netty.util.concurrent.MultithreadEventExecutorGroup extends io.netty.util.concurrent.AbstractEventExecutorGroup
{
private final io.netty.util.concurrent.EventExecutor[] children;
private final java.util.Set readonlyChildren;
private final java.util.concurrent.atomic.AtomicInteger terminatedChildren;
private final io.netty.util.concurrent.Promise terminationFuture;
private final io.netty.util.concurrent.EventExecutorChooserFactory$EventExecutorChooser chooser;
protected transient void <init>(int, java.util.concurrent.ThreadFactory, java.lang.Object[])
{
io.netty.util.concurrent.MultithreadEventExecutorGroup v0;
io.netty.util.concurrent.ThreadPerTaskExecutor v4;
java.lang.Object[] v3;
int v1;
java.util.concurrent.ThreadFactory v2;
v0 := @this: io.netty.util.concurrent.MultithreadEventExecutorGroup;
v1 := @parameter0: int;
v2 := @parameter1: java.util.concurrent.ThreadFactory;
v3 := @parameter2: java.lang.Object[];
if v2 != null goto label1;
v4 = null;
goto label2;
label1:
v4 = new io.netty.util.concurrent.ThreadPerTaskExecutor;
specialinvoke v4.<io.netty.util.concurrent.ThreadPerTaskExecutor: void <init>(java.util.concurrent.ThreadFactory)>(v2);
label2:
specialinvoke v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: void <init>(int,java.util.concurrent.Executor,java.lang.Object[])>(v1, v4, v3);
return;
}
protected transient void <init>(int, java.util.concurrent.Executor, java.lang.Object[])
{
io.netty.util.concurrent.MultithreadEventExecutorGroup v0;
java.lang.Object[] v3;
java.util.concurrent.Executor v2;
int v1;
io.netty.util.concurrent.DefaultEventExecutorChooserFactory v4;
v0 := @this: io.netty.util.concurrent.MultithreadEventExecutorGroup;
v1 := @parameter0: int;
v2 := @parameter1: java.util.concurrent.Executor;
v3 := @parameter2: java.lang.Object[];
v4 = <io.netty.util.concurrent.DefaultEventExecutorChooserFactory: io.netty.util.concurrent.DefaultEventExecutorChooserFactory INSTANCE>;
specialinvoke v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: void <init>(int,java.util.concurrent.Executor,io.netty.util.concurrent.EventExecutorChooserFactory,java.lang.Object[])>(v1, v2, v4, v3);
return;
}
protected transient void <init>(int, java.util.concurrent.Executor, io.netty.util.concurrent.EventExecutorChooserFactory, java.lang.Object[])
{
java.lang.IllegalStateException v15;
io.netty.util.concurrent.GlobalEventExecutor v7;
io.netty.util.concurrent.MultithreadEventExecutorGroup$1 v29;
java.util.concurrent.atomic.AtomicInteger v5;
java.lang.Thread v26;
java.util.concurrent.ThreadFactory v9;
boolean v23;
java.util.Set v39;
java.lang.Exception v14;
io.netty.util.concurrent.DefaultPromise v6;
io.netty.util.concurrent.EventExecutor[] v10, v12, v18, v21, v27, v30, v36, v38;
io.netty.util.concurrent.EventExecutor v13, v19, v22, v33;
io.netty.util.concurrent.MultithreadEventExecutorGroup v0;
java.lang.Throwable v16;
java.lang.Object[] v4;
io.netty.util.concurrent.EventExecutorChooserFactory v3;
io.netty.util.concurrent.EventExecutorChooserFactory$EventExecutorChooser v28;
int v1, v11, v17, v20, v31, v32, v37;
java.util.LinkedHashSet v35;
java.util.concurrent.Executor v2;
io.netty.util.concurrent.ThreadPerTaskExecutor v8;
java.util.concurrent.TimeUnit v24;
java.lang.InterruptedException v25;
io.netty.util.concurrent.Future v34;
v0 := @this: io.netty.util.concurrent.MultithreadEventExecutorGroup;
v1 := @parameter0: int;
v2 := @parameter1: java.util.concurrent.Executor;
v3 := @parameter2: io.netty.util.concurrent.EventExecutorChooserFactory;
v4 := @parameter3: java.lang.Object[];
specialinvoke v0.<io.netty.util.concurrent.AbstractEventExecutorGroup: void <init>()>();
v5 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v5.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: java.util.concurrent.atomic.AtomicInteger terminatedChildren> = v5;
v6 = new io.netty.util.concurrent.DefaultPromise;
v7 = <io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.GlobalEventExecutor INSTANCE>;
specialinvoke v6.<io.netty.util.concurrent.DefaultPromise: void <init>(io.netty.util.concurrent.EventExecutor)>(v7);
v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.Promise terminationFuture> = v6;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v1, "nThreads");
if v2 != null goto label01;
v8 = new io.netty.util.concurrent.ThreadPerTaskExecutor;
v9 = virtualinvoke v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: java.util.concurrent.ThreadFactory newDefaultThreadFactory()>();
specialinvoke v8.<io.netty.util.concurrent.ThreadPerTaskExecutor: void <init>(java.util.concurrent.ThreadFactory)>(v9);
v2 = v8;
label01:
v10 = newarray (io.netty.util.concurrent.EventExecutor)[v1];
v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutor[] children> = v10;
v11 = 0;
label02:
if v11 >= v1 goto label15;
label03:
v12 = v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutor[] children>;
v13 = virtualinvoke v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutor newChild(java.util.concurrent.Executor,java.lang.Object[])>(v2, v4);
v12[v11] = v13;
label04:
goto label14;
label05:
v14 := @caughtexception;
v15 = new java.lang.IllegalStateException;
specialinvoke v15.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("failed to create a child event loop", v14);
throw v15;
label06:
v16 := @caughtexception;
v17 = 0;
label07:
if v17 >= v11 goto label08;
v18 = v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutor[] children>;
v19 = v18[v17];
interfaceinvoke v19.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Future shutdownGracefully()>();
v17 = v17 + 1;
goto label07;
label08:
v20 = 0;
label09:
if v20 >= v11 goto label13;
v21 = v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutor[] children>;
v22 = v21[v20];
label10:
v23 = interfaceinvoke v22.<io.netty.util.concurrent.EventExecutor: boolean isTerminated()>();
if v23 != 0 goto label12;
v24 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
interfaceinvoke v22.<io.netty.util.concurrent.EventExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(2147483647L, v24);
goto label10;
label11:
v25 := @caughtexception;
v26 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v26.<java.lang.Thread: void interrupt()>();
goto label13;
label12:
v20 = v20 + 1;
goto label09;
label13:
throw v16;
label14:
v11 = v11 + 1;
goto label02;
label15:
v27 = v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutor[] children>;
v28 = interfaceinvoke v3.<io.netty.util.concurrent.EventExecutorChooserFactory: io.netty.util.concurrent.EventExecutorChooserFactory$EventExecutorChooser newChooser(io.netty.util.concurrent.EventExecutor[])>(v27);
v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutorChooserFactory$EventExecutorChooser chooser> = v28;
v29 = new io.netty.util.concurrent.MultithreadEventExecutorGroup$1;
specialinvoke v29.<io.netty.util.concurrent.MultithreadEventExecutorGroup$1: void <init>(io.netty.util.concurrent.MultithreadEventExecutorGroup)>(v0);
v30 = v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutor[] children>;
v31 = lengthof v30;
v32 = 0;
label16:
if v32 >= v31 goto label17;
v33 = v30[v32];
v34 = interfaceinvoke v33.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Future terminationFuture()>();
interfaceinvoke v34.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v29);
v32 = v32 + 1;
goto label16;
label17:
v35 = new java.util.LinkedHashSet;
v36 = v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutor[] children>;
v37 = lengthof v36;
specialinvoke v35.<java.util.LinkedHashSet: void <init>(int)>(v37);
v38 = v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutor[] children>;
staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(v35, v38);
v39 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v35);
v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: java.util.Set readonlyChildren> = v39;
return;
catch java.lang.Exception from label03 to label04 with label05;
catch java.lang.Throwable from label03 to label04 with label06;
catch java.lang.InterruptedException from label10 to label11 with label11;
}
protected java.util.concurrent.ThreadFactory newDefaultThreadFactory()
{
io.netty.util.concurrent.MultithreadEventExecutorGroup v0;
java.lang.Class v2;
io.netty.util.concurrent.DefaultThreadFactory v1;
v0 := @this: io.netty.util.concurrent.MultithreadEventExecutorGroup;
v1 = new io.netty.util.concurrent.DefaultThreadFactory;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
specialinvoke v1.<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.Class)>(v2);
return v1;
}
public io.netty.util.concurrent.EventExecutor next()
{
io.netty.util.concurrent.EventExecutor v2;
io.netty.util.concurrent.MultithreadEventExecutorGroup v0;
io.netty.util.concurrent.EventExecutorChooserFactory$EventExecutorChooser v1;
v0 := @this: io.netty.util.concurrent.MultithreadEventExecutorGroup;
v1 = v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutorChooserFactory$EventExecutorChooser chooser>;
v2 = interfaceinvoke v1.<io.netty.util.concurrent.EventExecutorChooserFactory$EventExecutorChooser: io.netty.util.concurrent.EventExecutor next()>();
return v2;
}
public java.util.Iterator iterator()
{
io.netty.util.concurrent.MultithreadEventExecutorGroup v0;
java.util.Set v1;
java.util.Iterator v2;
v0 := @this: io.netty.util.concurrent.MultithreadEventExecutorGroup;
v1 = v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: java.util.Set readonlyChildren>;
v2 = interfaceinvoke v1.<java.util.Set: java.util.Iterator iterator()>();
return v2;
}
public final int executorCount()
{
int v2;
io.netty.util.concurrent.MultithreadEventExecutorGroup v0;
io.netty.util.concurrent.EventExecutor[] v1;
v0 := @this: io.netty.util.concurrent.MultithreadEventExecutorGroup;
v1 = v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutor[] children>;
v2 = lengthof v1;
return v2;
}
protected abstract transient io.netty.util.concurrent.EventExecutor newChild(java.util.concurrent.Executor, java.lang.Object[]) throws java.lang.Exception;
public io.netty.util.concurrent.Future shutdownGracefully(long, long, java.util.concurrent.TimeUnit)
{
io.netty.util.concurrent.EventExecutor v7;
io.netty.util.concurrent.MultithreadEventExecutorGroup v0;
long v1, v2;
java.util.concurrent.TimeUnit v3;
io.netty.util.concurrent.EventExecutor[] v4;
int v5, v6;
io.netty.util.concurrent.Future v8;
v0 := @this: io.netty.util.concurrent.MultithreadEventExecutorGroup;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 = v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutor[] children>;
v5 = lengthof v4;
v6 = 0;
label1:
if v6 >= v5 goto label2;
v7 = v4[v6];
interfaceinvoke v7.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)>(v1, v2, v3);
v6 = v6 + 1;
goto label1;
label2:
v8 = virtualinvoke v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.Future terminationFuture()>();
return v8;
}
public io.netty.util.concurrent.Future terminationFuture()
{
io.netty.util.concurrent.MultithreadEventExecutorGroup v0;
io.netty.util.concurrent.Promise v1;
v0 := @this: io.netty.util.concurrent.MultithreadEventExecutorGroup;
v1 = v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.Promise terminationFuture>;
return v1;
}
public void shutdown()
{
io.netty.util.concurrent.EventExecutor v4;
io.netty.util.concurrent.MultithreadEventExecutorGroup v0;
io.netty.util.concurrent.EventExecutor[] v1;
int v2, v3;
v0 := @this: io.netty.util.concurrent.MultithreadEventExecutorGroup;
v1 = v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutor[] children>;
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: void shutdown()>();
v3 = v3 + 1;
goto label1;
label2:
return;
}
public boolean isShuttingDown()
{
io.netty.util.concurrent.EventExecutor v4;
io.netty.util.concurrent.MultithreadEventExecutorGroup v0;
io.netty.util.concurrent.EventExecutor[] v1;
int v2, v3;
boolean v5;
v0 := @this: io.netty.util.concurrent.MultithreadEventExecutorGroup;
v1 = v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutor[] children>;
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v1[v3];
v5 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: boolean isShuttingDown()>();
if v5 != 0 goto label2;
return 0;
label2:
v3 = v3 + 1;
goto label1;
label3:
return 1;
}
public boolean isShutdown()
{
io.netty.util.concurrent.EventExecutor v4;
io.netty.util.concurrent.MultithreadEventExecutorGroup v0;
io.netty.util.concurrent.EventExecutor[] v1;
int v2, v3;
boolean v5;
v0 := @this: io.netty.util.concurrent.MultithreadEventExecutorGroup;
v1 = v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutor[] children>;
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v1[v3];
v5 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: boolean isShutdown()>();
if v5 != 0 goto label2;
return 0;
label2:
v3 = v3 + 1;
goto label1;
label3:
return 1;
}
public boolean isTerminated()
{
io.netty.util.concurrent.EventExecutor v4;
io.netty.util.concurrent.MultithreadEventExecutorGroup v0;
io.netty.util.concurrent.EventExecutor[] v1;
int v2, v3;
boolean v5;
v0 := @this: io.netty.util.concurrent.MultithreadEventExecutorGroup;
v1 = v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutor[] children>;
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v1[v3];
v5 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: boolean isTerminated()>();
if v5 != 0 goto label2;
return 0;
label2:
v3 = v3 + 1;
goto label1;
label3:
return 1;
}
public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
{
io.netty.util.concurrent.EventExecutor v9;
io.netty.util.concurrent.MultithreadEventExecutorGroup v0;
long v1, v10, v11, v3, v4, v5;
byte v12;
int v7, v8;
boolean v14, v15;
java.util.concurrent.TimeUnit v13, v2;
io.netty.util.concurrent.EventExecutor[] v6;
v0 := @this: io.netty.util.concurrent.MultithreadEventExecutorGroup;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
v3 = staticinvoke <java.lang.System: long nanoTime()>();
v4 = virtualinvoke v2.<java.util.concurrent.TimeUnit: long toNanos(long)>(v1);
v5 = v3 + v4;
v6 = v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutor[] children>;
v7 = lengthof v6;
v8 = 0;
label1:
if v8 >= v7 goto label3;
v9 = v6[v8];
label2:
v10 = staticinvoke <java.lang.System: long nanoTime()>();
v11 = v5 - v10;
v12 = v11 cmp 0L;
if v12 <= 0 goto label3;
v13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
v14 = interfaceinvoke v9.<io.netty.util.concurrent.EventExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(v11, v13);
if v14 == 0 goto label2;
v8 = v8 + 1;
goto label1;
label3:
v15 = virtualinvoke v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: boolean isTerminated()>();
return v15;
}
}