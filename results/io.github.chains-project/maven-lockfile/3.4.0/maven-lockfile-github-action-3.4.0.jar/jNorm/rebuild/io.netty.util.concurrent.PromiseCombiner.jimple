public final class io.netty.util.concurrent.PromiseCombiner extends java.lang.Object
{
private int expectedCount;
private int doneCount;
private io.netty.util.concurrent.Promise aggregatePromise;
private java.lang.Throwable cause;
private final io.netty.util.concurrent.GenericFutureListener listener;
private final io.netty.util.concurrent.EventExecutor executor;
public void <init>()
{
io.netty.util.concurrent.PromiseCombiner v0;
io.netty.util.concurrent.ImmediateEventExecutor v1;
v0 := @this: io.netty.util.concurrent.PromiseCombiner;
v1 = <io.netty.util.concurrent.ImmediateEventExecutor: io.netty.util.concurrent.ImmediateEventExecutor INSTANCE>;
specialinvoke v0.<io.netty.util.concurrent.PromiseCombiner: void <init>(io.netty.util.concurrent.EventExecutor)>(v1);
return;
}
public void <init>(io.netty.util.concurrent.EventExecutor)
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.util.concurrent.PromiseCombiner$1 v2;
java.lang.Object v3;
io.netty.util.concurrent.PromiseCombiner v0;
v0 := @this: io.netty.util.concurrent.PromiseCombiner;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new io.netty.util.concurrent.PromiseCombiner$1;
specialinvoke v2.<io.netty.util.concurrent.PromiseCombiner$1: void <init>(io.netty.util.concurrent.PromiseCombiner)>(v0);
v0.<io.netty.util.concurrent.PromiseCombiner: io.netty.util.concurrent.GenericFutureListener listener> = v2;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "executor");
v0.<io.netty.util.concurrent.PromiseCombiner: io.netty.util.concurrent.EventExecutor executor> = v3;
return;
}
public void add(io.netty.util.concurrent.Promise)
{
io.netty.util.concurrent.PromiseCombiner v0;
io.netty.util.concurrent.Promise v1;
v0 := @this: io.netty.util.concurrent.PromiseCombiner;
v1 := @parameter0: io.netty.util.concurrent.Promise;
virtualinvoke v0.<io.netty.util.concurrent.PromiseCombiner: void add(io.netty.util.concurrent.Future)>(v1);
return;
}
public void add(io.netty.util.concurrent.Future)
{
int v2, v3;
io.netty.util.concurrent.GenericFutureListener v4;
io.netty.util.concurrent.PromiseCombiner v0;
io.netty.util.concurrent.Future v1;
v0 := @this: io.netty.util.concurrent.PromiseCombiner;
v1 := @parameter0: io.netty.util.concurrent.Future;
specialinvoke v0.<io.netty.util.concurrent.PromiseCombiner: void checkAddAllowed()>();
specialinvoke v0.<io.netty.util.concurrent.PromiseCombiner: void checkInEventLoop()>();
v2 = v0.<io.netty.util.concurrent.PromiseCombiner: int expectedCount>;
v3 = v2 + 1;
v0.<io.netty.util.concurrent.PromiseCombiner: int expectedCount> = v3;
v4 = v0.<io.netty.util.concurrent.PromiseCombiner: io.netty.util.concurrent.GenericFutureListener listener>;
interfaceinvoke v1.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v4);
return;
}
public transient void addAll(io.netty.util.concurrent.Promise[])
{
io.netty.util.concurrent.PromiseCombiner v0;
io.netty.util.concurrent.Promise[] v1;
v0 := @this: io.netty.util.concurrent.PromiseCombiner;
v1 := @parameter0: io.netty.util.concurrent.Promise[];
virtualinvoke v0.<io.netty.util.concurrent.PromiseCombiner: void addAll(io.netty.util.concurrent.Future[])>(v1);
return;
}
public transient void addAll(io.netty.util.concurrent.Future[])
{
int v2, v3;
io.netty.util.concurrent.PromiseCombiner v0;
io.netty.util.concurrent.Future v4;
io.netty.util.concurrent.Future[] v1;
v0 := @this: io.netty.util.concurrent.PromiseCombiner;
v1 := @parameter0: io.netty.util.concurrent.Future[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
virtualinvoke v0.<io.netty.util.concurrent.PromiseCombiner: void add(io.netty.util.concurrent.Future)>(v4);
v3 = v3 + 1;
goto label1;
label2:
return;
}
public void finish(io.netty.util.concurrent.Promise)
{
java.lang.IllegalStateException v3;
io.netty.util.concurrent.Promise v1, v2;
int v4, v5;
io.netty.util.concurrent.PromiseCombiner v0;
v0 := @this: io.netty.util.concurrent.PromiseCombiner;
v1 := @parameter0: io.netty.util.concurrent.Promise;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "aggregatePromise");
specialinvoke v0.<io.netty.util.concurrent.PromiseCombiner: void checkInEventLoop()>();
v2 = v0.<io.netty.util.concurrent.PromiseCombiner: io.netty.util.concurrent.Promise aggregatePromise>;
if v2 == null goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already finished");
throw v3;
label1:
v0.<io.netty.util.concurrent.PromiseCombiner: io.netty.util.concurrent.Promise aggregatePromise> = v1;
v4 = v0.<io.netty.util.concurrent.PromiseCombiner: int doneCount>;
v5 = v0.<io.netty.util.concurrent.PromiseCombiner: int expectedCount>;
if v4 != v5 goto label2;
specialinvoke v0.<io.netty.util.concurrent.PromiseCombiner: boolean tryPromise()>();
label2:
return;
}
private void checkInEventLoop()
{
io.netty.util.concurrent.EventExecutor v1;
java.lang.IllegalStateException v3;
io.netty.util.concurrent.PromiseCombiner v0;
boolean v2;
v0 := @this: io.netty.util.concurrent.PromiseCombiner;
v1 = v0.<io.netty.util.concurrent.PromiseCombiner: io.netty.util.concurrent.EventExecutor executor>;
v2 = interfaceinvoke v1.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v2 != 0 goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must be called from EventExecutor thread");
throw v3;
label1:
return;
}
private boolean tryPromise()
{
java.lang.Throwable v1, v5;
io.netty.util.concurrent.Promise v2, v4;
io.netty.util.concurrent.PromiseCombiner v0;
boolean v3;
v0 := @this: io.netty.util.concurrent.PromiseCombiner;
v1 = v0.<io.netty.util.concurrent.PromiseCombiner: java.lang.Throwable cause>;
if v1 != null goto label1;
v2 = v0.<io.netty.util.concurrent.PromiseCombiner: io.netty.util.concurrent.Promise aggregatePromise>;
v3 = interfaceinvoke v2.<io.netty.util.concurrent.Promise: boolean trySuccess(java.lang.Object)>(null);
goto label2;
label1:
v4 = v0.<io.netty.util.concurrent.PromiseCombiner: io.netty.util.concurrent.Promise aggregatePromise>;
v5 = v0.<io.netty.util.concurrent.PromiseCombiner: java.lang.Throwable cause>;
v3 = interfaceinvoke v4.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v5);
label2:
return v3;
}
private void checkAddAllowed()
{
java.lang.IllegalStateException v2;
io.netty.util.concurrent.PromiseCombiner v0;
io.netty.util.concurrent.Promise v1;
v0 := @this: io.netty.util.concurrent.PromiseCombiner;
v1 = v0.<io.netty.util.concurrent.PromiseCombiner: io.netty.util.concurrent.Promise aggregatePromise>;
if v1 == null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Adding promises is not allowed after finished adding");
throw v2;
label1:
return;
}
}