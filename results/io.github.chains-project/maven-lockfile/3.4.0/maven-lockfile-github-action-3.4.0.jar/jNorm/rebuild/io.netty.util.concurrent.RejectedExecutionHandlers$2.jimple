class io.netty.util.concurrent.RejectedExecutionHandlers$2 extends java.lang.Object implements io.netty.util.concurrent.RejectedExecutionHandler
{
final int val$retries;
final long val$backOffNanos;
void <init>(int, long)
{
int v1;
long v2;
io.netty.util.concurrent.RejectedExecutionHandlers$2 v0;
v0 := @this: io.netty.util.concurrent.RejectedExecutionHandlers$2;
v1 := @parameter0: int;
v2 := @parameter1: long;
v0.<io.netty.util.concurrent.RejectedExecutionHandlers$2: int val$retries> = v1;
v0.<io.netty.util.concurrent.RejectedExecutionHandlers$2: long val$backOffNanos> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void rejected(java.lang.Runnable, io.netty.util.concurrent.SingleThreadEventExecutor)
{
io.netty.util.concurrent.SingleThreadEventExecutor v2;
io.netty.util.concurrent.RejectedExecutionHandlers$2 v0;
long v6;
java.lang.Runnable v1;
java.util.concurrent.RejectedExecutionException v8;
int v4, v5;
boolean v3, v7;
v0 := @this: io.netty.util.concurrent.RejectedExecutionHandlers$2;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: io.netty.util.concurrent.SingleThreadEventExecutor;
v3 = virtualinvoke v2.<io.netty.util.concurrent.SingleThreadEventExecutor: boolean inEventLoop()>();
if v3 != 0 goto label3;
v4 = 0;
label1:
v5 = v0.<io.netty.util.concurrent.RejectedExecutionHandlers$2: int val$retries>;
if v4 >= v5 goto label3;
virtualinvoke v2.<io.netty.util.concurrent.SingleThreadEventExecutor: void wakeup(boolean)>(0);
v6 = v0.<io.netty.util.concurrent.RejectedExecutionHandlers$2: long val$backOffNanos>;
staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(long)>(v6);
v7 = virtualinvoke v2.<io.netty.util.concurrent.SingleThreadEventExecutor: boolean offerTask(java.lang.Runnable)>(v1);
if v7 == 0 goto label2;
return;
label2:
v4 = v4 + 1;
goto label1;
label3:
v8 = new java.util.concurrent.RejectedExecutionException;
specialinvoke v8.<java.util.concurrent.RejectedExecutionException: void <init>()>();
throw v8;
}
}