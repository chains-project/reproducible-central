public final class io.netty.util.concurrent.UnaryPromiseNotifier extends java.lang.Object implements io.netty.util.concurrent.FutureListener
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private final io.netty.util.concurrent.Promise promise;
public void <init>(io.netty.util.concurrent.Promise)
{
io.netty.util.concurrent.UnaryPromiseNotifier v0;
java.lang.Object v2;
io.netty.util.concurrent.Promise v1;
v0 := @this: io.netty.util.concurrent.UnaryPromiseNotifier;
v1 := @parameter0: io.netty.util.concurrent.Promise;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "promise");
v0.<io.netty.util.concurrent.UnaryPromiseNotifier: io.netty.util.concurrent.Promise promise> = v2;
return;
}
public void operationComplete(io.netty.util.concurrent.Future) throws java.lang.Exception
{
io.netty.util.concurrent.UnaryPromiseNotifier v0;
io.netty.util.concurrent.Future v1;
io.netty.util.concurrent.Promise v2;
v0 := @this: io.netty.util.concurrent.UnaryPromiseNotifier;
v1 := @parameter0: io.netty.util.concurrent.Future;
v2 = v0.<io.netty.util.concurrent.UnaryPromiseNotifier: io.netty.util.concurrent.Promise promise>;
staticinvoke <io.netty.util.concurrent.UnaryPromiseNotifier: void cascadeTo(io.netty.util.concurrent.Future,io.netty.util.concurrent.Promise)>(v1, v2);
return;
}
public static void cascadeTo(io.netty.util.concurrent.Future, io.netty.util.concurrent.Promise)
{
java.lang.Throwable v12, v9;
io.netty.util.concurrent.Promise v1;
io.netty.util.internal.logging.InternalLogger v11, v5, v8;
java.lang.Object v3;
io.netty.util.concurrent.Future v0;
boolean v10, v2, v4, v6, v7;
v0 := @parameter0: io.netty.util.concurrent.Future;
v1 := @parameter1: io.netty.util.concurrent.Promise;
v2 = interfaceinvoke v0.<io.netty.util.concurrent.Future: boolean isSuccess()>();
if v2 == 0 goto label1;
v3 = interfaceinvoke v0.<io.netty.util.concurrent.Future: java.lang.Object getNow()>();
v4 = interfaceinvoke v1.<io.netty.util.concurrent.Promise: boolean trySuccess(java.lang.Object)>(v3);
if v4 != 0 goto label3;
v5 = <io.netty.util.concurrent.UnaryPromiseNotifier: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object)>("Failed to mark a promise as success because it is done already: {}", v1);
goto label3;
label1:
v6 = interfaceinvoke v0.<io.netty.util.concurrent.Future: boolean isCancelled()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v1.<io.netty.util.concurrent.Promise: boolean cancel(boolean)>(0);
if v7 != 0 goto label3;
v8 = <io.netty.util.concurrent.UnaryPromiseNotifier: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v8.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object)>("Failed to cancel a promise because it is done already: {}", v1);
goto label3;
label2:
v9 = interfaceinvoke v0.<io.netty.util.concurrent.Future: java.lang.Throwable cause()>();
v10 = interfaceinvoke v1.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v9);
if v10 != 0 goto label3;
v11 = <io.netty.util.concurrent.UnaryPromiseNotifier: io.netty.util.internal.logging.InternalLogger logger>;
v12 = interfaceinvoke v0.<io.netty.util.concurrent.Future: java.lang.Throwable cause()>();
interfaceinvoke v11.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Failed to mark a promise as failure because it\'s done already: {}", v1, v12);
label3:
return;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/util/concurrent/UnaryPromiseNotifier;");
<io.netty.util.concurrent.UnaryPromiseNotifier: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}