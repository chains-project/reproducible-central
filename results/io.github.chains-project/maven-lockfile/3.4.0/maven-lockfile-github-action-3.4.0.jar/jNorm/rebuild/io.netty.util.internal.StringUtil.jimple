public final class io.netty.util.internal.StringUtil extends java.lang.Object
{
public static final java.lang.String EMPTY_STRING;
public static final java.lang.String NEWLINE;
public static final char DOUBLE_QUOTE;
public static final char COMMA;
public static final char LINE_FEED;
public static final char CARRIAGE_RETURN;
public static final char TAB;
public static final char SPACE;
private static final java.lang.String[] BYTE2HEX_PAD;
private static final java.lang.String[] BYTE2HEX_NOPAD;
private static final byte[] HEX2B;
private static final int CSV_NUMBER_ESCAPE_CHARACTERS;
private static final char PACKAGE_SEPARATOR_CHAR;
static final boolean $assertionsDisabled;
private void <init>()
{
io.netty.util.internal.StringUtil v0;
v0 := @this: io.netty.util.internal.StringUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.String substringAfter(java.lang.String, char)
{
int v2, v3;
char v1;
java.lang.String v0, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: char;
v2 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(v1);
if v2 < 0 goto label1;
v3 = v2 + 1;
v4 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v3);
return v4;
label1:
return null;
}
public static java.lang.String substringBefore(java.lang.String, char)
{
int v2;
char v1;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: char;
v2 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(v1);
if v2 < 0 goto label1;
v3 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v2);
return v3;
label1:
return null;
}
public static boolean commonSuffixOfLength(java.lang.String, java.lang.String, int)
{
int v2, v3, v4, v5, v6;
java.lang.String v0, v1;
boolean v7, v8;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
if v0 == null goto label1;
if v1 == null goto label1;
if v2 < 0 goto label1;
v3 = virtualinvoke v0.<java.lang.String: int length()>();
v4 = v3 - v2;
v5 = virtualinvoke v1.<java.lang.String: int length()>();
v6 = v5 - v2;
v7 = virtualinvoke v0.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(v4, v1, v6, v2);
if v7 == 0 goto label1;
v8 = 1;
goto label2;
label1:
v8 = 0;
label2:
return v8;
}
public static java.lang.String byteToHexStringPadded(int)
{
int v0, v2;
java.lang.String[] v1;
java.lang.String v3;
v0 := @parameter0: int;
v1 = <io.netty.util.internal.StringUtil: java.lang.String[] BYTE2HEX_PAD>;
v2 = v0 & 255;
v3 = v1[v2];
return v3;
}
public static java.lang.Appendable byteToHexStringPadded(java.lang.Appendable, int)
{
java.lang.Appendable v0;
int v1;
java.io.IOException v3;
java.lang.String v2;
v0 := @parameter0: java.lang.Appendable;
v1 := @parameter1: int;
label1:
v2 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String byteToHexStringPadded(int)>(v1);
interfaceinvoke v0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(v2);
label2:
goto label4;
label3:
v3 := @caughtexception;
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v3);
label4:
return v0;
catch java.io.IOException from label1 to label2 with label3;
}
public static java.lang.String toHexStringPadded(byte[])
{
int v1;
byte[] v0;
java.lang.String v2;
v0 := @parameter0: byte[];
v1 = lengthof v0;
v2 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String toHexStringPadded(byte[],int,int)>(v0, 0, v1);
return v2;
}
public static java.lang.String toHexStringPadded(byte[], int, int)
{
byte[] v0;
java.lang.Appendable v5;
int v1, v2, v4;
java.lang.StringBuilder v3;
java.lang.String v6;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = new java.lang.StringBuilder;
v4 = v2 << 1;
specialinvoke v3.<java.lang.StringBuilder: void <init>(int)>(v4);
v5 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.Appendable toHexStringPadded(java.lang.Appendable,byte[],int,int)>(v3, v0, v1, v2);
v6 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.String toString()>();
return v6;
}
public static java.lang.Appendable toHexStringPadded(java.lang.Appendable, byte[])
{
byte[] v1;
java.lang.Appendable v0, v3;
int v2;
v0 := @parameter0: java.lang.Appendable;
v1 := @parameter1: byte[];
v2 = lengthof v1;
v3 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.Appendable toHexStringPadded(java.lang.Appendable,byte[],int,int)>(v0, v1, 0, v2);
return v3;
}
public static java.lang.Appendable toHexStringPadded(java.lang.Appendable, byte[], int, int)
{
byte[] v1;
byte v6;
java.lang.Appendable v0;
int v2, v3, v4, v5;
v0 := @parameter0: java.lang.Appendable;
v1 := @parameter1: byte[];
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = v2 + v3;
v5 = v2;
label1:
if v5 >= v4 goto label2;
v6 = v1[v5];
staticinvoke <io.netty.util.internal.StringUtil: java.lang.Appendable byteToHexStringPadded(java.lang.Appendable,int)>(v0, v6);
v5 = v5 + 1;
goto label1;
label2:
return v0;
}
public static java.lang.String byteToHexString(int)
{
int v0, v2;
java.lang.String[] v1;
java.lang.String v3;
v0 := @parameter0: int;
v1 = <io.netty.util.internal.StringUtil: java.lang.String[] BYTE2HEX_NOPAD>;
v2 = v0 & 255;
v3 = v1[v2];
return v3;
}
public static java.lang.Appendable byteToHexString(java.lang.Appendable, int)
{
java.lang.Appendable v0;
int v1;
java.io.IOException v3;
java.lang.String v2;
v0 := @parameter0: java.lang.Appendable;
v1 := @parameter1: int;
label1:
v2 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String byteToHexString(int)>(v1);
interfaceinvoke v0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(v2);
label2:
goto label4;
label3:
v3 := @caughtexception;
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v3);
label4:
return v0;
catch java.io.IOException from label1 to label2 with label3;
}
public static java.lang.String toHexString(byte[])
{
int v1;
byte[] v0;
java.lang.String v2;
v0 := @parameter0: byte[];
v1 = lengthof v0;
v2 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String toHexString(byte[],int,int)>(v0, 0, v1);
return v2;
}
public static java.lang.String toHexString(byte[], int, int)
{
byte[] v0;
java.lang.Appendable v5;
int v1, v2, v4;
java.lang.StringBuilder v3;
java.lang.String v6;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = new java.lang.StringBuilder;
v4 = v2 << 1;
specialinvoke v3.<java.lang.StringBuilder: void <init>(int)>(v4);
v5 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.Appendable toHexString(java.lang.Appendable,byte[],int,int)>(v3, v0, v1, v2);
v6 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.String toString()>();
return v6;
}
public static java.lang.Appendable toHexString(java.lang.Appendable, byte[])
{
byte[] v1;
java.lang.Appendable v0, v3;
int v2;
v0 := @parameter0: java.lang.Appendable;
v1 := @parameter1: byte[];
v2 = lengthof v1;
v3 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.Appendable toHexString(java.lang.Appendable,byte[],int,int)>(v0, v1, 0, v2);
return v3;
}
public static java.lang.Appendable toHexString(java.lang.Appendable, byte[], int, int)
{
byte[] v1;
java.lang.Appendable v0;
java.lang.AssertionError v5;
byte v11, v9;
int v10, v12, v2, v3, v6, v7, v8;
boolean v4;
v0 := @parameter0: java.lang.Appendable;
v1 := @parameter1: byte[];
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = <io.netty.util.internal.StringUtil: boolean $assertionsDisabled>;
if v4 != 0 goto label1;
if v3 >= 0 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
if v3 != 0 goto label2;
return v0;
label2:
v6 = v2 + v3;
v7 = v6 - 1;
v8 = v2;
label3:
if v8 >= v7 goto label4;
v9 = v1[v8];
if v9 != 0 goto label4;
v8 = v8 + 1;
goto label3;
label4:
v10 = v8 + 1;
v11 = v1[v8];
staticinvoke <io.netty.util.internal.StringUtil: java.lang.Appendable byteToHexString(java.lang.Appendable,int)>(v0, v11);
v12 = v6 - v10;
staticinvoke <io.netty.util.internal.StringUtil: java.lang.Appendable toHexStringPadded(java.lang.Appendable,byte[],int,int)>(v0, v1, v10, v12);
return v0;
}
public static int decodeHexNibble(char)
{
byte[] v1;
char v0;
byte v2;
v0 := @parameter0: char;
v1 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v2 = v1[v0];
return v2;
}
public static int decodeHexNibble(byte)
{
byte[] v1;
byte v0, v2;
v0 := @parameter0: byte;
v1 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v2 = v1[v0];
return v2;
}
public static byte decodeHexByte(java.lang.CharSequence, int)
{
java.lang.Object[] v10;
java.lang.Integer v13;
int v1, v11, v15, v16, v3, v4, v6, v7, v8;
java.lang.String v14;
java.lang.CharSequence v0, v12;
char v2, v5;
java.lang.IllegalArgumentException v9;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v1);
v3 = staticinvoke <io.netty.util.internal.StringUtil: int decodeHexNibble(char)>(v2);
v4 = v1 + 1;
v5 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v4);
v6 = staticinvoke <io.netty.util.internal.StringUtil: int decodeHexNibble(char)>(v5);
v7 = (int) -1;
if v3 == v7 goto label1;
v8 = (int) -1;
if v6 != v8 goto label2;
label1:
v9 = new java.lang.IllegalArgumentException;
v10 = newarray (java.lang.Object)[3];
v11 = v1 + 2;
v12 = interfaceinvoke v0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(v1, v11);
v10[0] = v12;
v13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v10[1] = v13;
v10[2] = v0;
v14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("invalid hex byte \'%s\' at index %d of \'%s\'", v10);
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v14);
throw v9;
label2:
v15 = v3 << 4;
v16 = v15 + v6;
return v16;
}
public static byte[] decodeHexDump(java.lang.CharSequence, int, int)
{
byte[] v6, v8;
java.lang.CharSequence v0;
java.lang.IllegalArgumentException v4;
byte v12;
int v1, v10, v11, v2, v3, v7, v9;
java.lang.String v5;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 := @parameter2: int;
if v2 < 0 goto label1;
v3 = v2 & 1;
if v3 == 0 goto label2;
label1:
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("length: \u0001");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label2:
if v2 != 0 goto label3;
v6 = <io.netty.util.internal.EmptyArrays: byte[] EMPTY_BYTES>;
return v6;
label3:
v7 = v2 >>> 1;
v8 = newarray (byte)[v7];
v9 = 0;
label4:
if v9 >= v2 goto label5;
v10 = v9 >>> 1;
v11 = v1 + v9;
v12 = staticinvoke <io.netty.util.internal.StringUtil: byte decodeHexByte(java.lang.CharSequence,int)>(v0, v11);
v8[v10] = v12;
v9 = v9 + 2;
goto label4;
label5:
return v8;
}
public static byte[] decodeHexDump(java.lang.CharSequence)
{
int v1;
byte[] v2;
java.lang.CharSequence v0;
v0 := @parameter0: java.lang.CharSequence;
v1 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v2 = staticinvoke <io.netty.util.internal.StringUtil: byte[] decodeHexDump(java.lang.CharSequence,int,int)>(v0, 0, v1);
return v2;
}
public static java.lang.String simpleClassName(java.lang.Object)
{
java.lang.Class v1;
java.lang.Object v0;
java.lang.String v2;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
return "null_object";
label1:
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(v1);
return v2;
}
public static java.lang.String simpleClassName(java.lang.Class)
{
int v3, v4, v5;
java.lang.Class v0;
java.lang.Object v1;
java.lang.String v2, v6;
v0 := @parameter0: java.lang.Class;
v1 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "clazz");
v2 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v3 = virtualinvoke v2.<java.lang.String: int lastIndexOf(int)>(46);
v4 = (int) -1;
if v3 <= v4 goto label1;
v5 = v3 + 1;
v6 = virtualinvoke v2.<java.lang.String: java.lang.String substring(int)>(v5);
return v6;
label1:
return v2;
}
public static java.lang.CharSequence escapeCsv(java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
v0 := @parameter0: java.lang.CharSequence;
v1 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.CharSequence escapeCsv(java.lang.CharSequence,boolean)>(v0, 0);
return v1;
}
public static java.lang.CharSequence escapeCsv(java.lang.CharSequence, boolean)
{
boolean v1, v10, v12, v13, v16, v19, v22, v25, v37, v40, v8;
java.lang.CharSequence v0, v28;
java.lang.StringBuilder v30, v34, v41;
int v14, v17, v20, v23, v26, v27, v29, v3, v31, v32, v33, v35, v38, v4, v5, v6, v7;
char v11, v15, v18, v21, v24, v36, v39, v9;
java.lang.Object v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: boolean;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "value");
v3 = interfaceinvoke v2.<java.lang.CharSequence: int length()>();
if v1 == 0 goto label01;
v4 = staticinvoke <io.netty.util.internal.StringUtil: int indexOfFirstNonOwsChar(java.lang.CharSequence,int)>(v0, v3);
v5 = staticinvoke <io.netty.util.internal.StringUtil: int indexOfLastNonOwsChar(java.lang.CharSequence,int,int)>(v0, v4, v3);
goto label02;
label01:
v4 = 0;
v5 = v3 - 1;
label02:
if v4 <= v5 goto label03;
return "";
label03:
v6 = (int) -1;
v7 = v6;
v8 = 0;
v9 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v4);
v10 = staticinvoke <io.netty.util.internal.StringUtil: boolean isDoubleQuote(char)>(v9);
if v10 == 0 goto label07;
v11 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v5);
v12 = staticinvoke <io.netty.util.internal.StringUtil: boolean isDoubleQuote(char)>(v11);
if v12 == 0 goto label04;
if v5 <= v4 goto label04;
v13 = 1;
goto label05;
label04:
v13 = 0;
label05:
v8 = v13;
if v13 == 0 goto label06;
v4 = v4 + 1;
v5 = v5 - 1;
goto label07;
label06:
v7 = v4;
label07:
if v7 >= 0 goto label22;
if v8 == 0 goto label12;
v14 = v4;
label08:
if v14 > v5 goto label19;
v15 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v14);
v16 = staticinvoke <io.netty.util.internal.StringUtil: boolean isDoubleQuote(char)>(v15);
if v16 == 0 goto label11;
if v14 == v5 goto label09;
v17 = v14 + 1;
v18 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v17);
v19 = staticinvoke <io.netty.util.internal.StringUtil: boolean isDoubleQuote(char)>(v18);
if v19 != 0 goto label10;
label09:
v7 = v14;
goto label19;
label10:
v14 = v14 + 1;
label11:
v14 = v14 + 1;
goto label08;
label12:
v20 = v4;
label13:
if v20 > v5 goto label19;
v21 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v20);
if v21 == 10 goto label14;
if v21 == 13 goto label14;
if v21 != 44 goto label15;
label14:
v7 = v20;
goto label19;
label15:
v22 = staticinvoke <io.netty.util.internal.StringUtil: boolean isDoubleQuote(char)>(v21);
if v22 == 0 goto label18;
if v20 == v5 goto label16;
v23 = v20 + 1;
v24 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v23);
v25 = staticinvoke <io.netty.util.internal.StringUtil: boolean isDoubleQuote(char)>(v24);
if v25 != 0 goto label17;
label16:
v7 = v20;
goto label19;
label17:
v20 = v20 + 1;
label18:
v20 = v20 + 1;
goto label13;
label19:
if v7 >= 0 goto label22;
if v8 == 0 goto label20;
v26 = v4 - 1;
v27 = v5 + 2;
v28 = interfaceinvoke v0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(v26, v27);
goto label21;
label20:
v29 = v5 + 1;
v28 = interfaceinvoke v0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(v4, v29);
label21:
return v28;
label22:
v30 = new java.lang.StringBuilder;
v31 = v5 - v4;
v32 = v31 + 1;
v33 = v32 + 7;
specialinvoke v30.<java.lang.StringBuilder: void <init>(int)>(v33);
v34 = virtualinvoke v30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);
virtualinvoke v34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v0, v4, v7);
v35 = v7;
label23:
if v35 > v5 goto label25;
v36 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v35);
v37 = staticinvoke <io.netty.util.internal.StringUtil: boolean isDoubleQuote(char)>(v36);
if v37 == 0 goto label24;
virtualinvoke v30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);
if v35 >= v5 goto label24;
v38 = v35 + 1;
v39 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v38);
v40 = staticinvoke <io.netty.util.internal.StringUtil: boolean isDoubleQuote(char)>(v39);
if v40 == 0 goto label24;
v35 = v35 + 1;
label24:
virtualinvoke v30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v36);
v35 = v35 + 1;
goto label23;
label25:
v41 = virtualinvoke v30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);
return v41;
}
public static java.lang.CharSequence unescapeCsv(java.lang.CharSequence)
{
io.netty.util.internal.InternalThreadLocalMap v9;
int v11, v13, v16, v2, v3;
java.lang.String v18;
boolean v15, v5, v7, v8;
java.lang.CharSequence v0;
char v12, v14, v4, v6;
java.lang.IllegalArgumentException v17;
java.lang.Object v1;
java.lang.StringBuilder v10;
v0 := @parameter0: java.lang.CharSequence;
v1 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "value");
v2 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v2 != 0 goto label1;
return v0;
label1:
v3 = v2 - 1;
v4 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(0);
v5 = staticinvoke <io.netty.util.internal.StringUtil: boolean isDoubleQuote(char)>(v4);
if v5 == 0 goto label2;
v6 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v3);
v7 = staticinvoke <io.netty.util.internal.StringUtil: boolean isDoubleQuote(char)>(v6);
if v7 == 0 goto label2;
if v2 == 1 goto label2;
v8 = 1;
goto label3;
label2:
v8 = 0;
label3:
if v8 != 0 goto label4;
staticinvoke <io.netty.util.internal.StringUtil: void validateCsvFormat(java.lang.CharSequence)>(v0);
return v0;
label4:
v9 = staticinvoke <io.netty.util.internal.InternalThreadLocalMap: io.netty.util.internal.InternalThreadLocalMap get()>();
v10 = virtualinvoke v9.<io.netty.util.internal.InternalThreadLocalMap: java.lang.StringBuilder stringBuilder()>();
v11 = 1;
label5:
if v11 >= v3 goto label8;
v12 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v11);
if v12 != 34 goto label7;
v13 = v11 + 1;
v14 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v13);
v15 = staticinvoke <io.netty.util.internal.StringUtil: boolean isDoubleQuote(char)>(v14);
if v15 == 0 goto label6;
v16 = v11 + 1;
if v16 == v3 goto label6;
v11 = v11 + 1;
goto label7;
label6:
v17 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.IllegalArgumentException newInvalidEscapedCsvFieldException(java.lang.CharSequence,int)>(v0, v11);
throw v17;
label7:
virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v12);
v11 = v11 + 1;
goto label5;
label8:
v18 = virtualinvoke v10.<java.lang.StringBuilder: java.lang.String toString()>();
return v18;
}
public static java.util.List unescapeCsvFields(java.lang.CharSequence)
{
io.netty.util.internal.InternalThreadLocalMap v2;
java.util.ArrayList v1;
int v12, v15, v5, v6, v7;
java.lang.String v11, v14, v18, v9;
boolean v4;
java.lang.CharSequence v0;
char v10, v8;
java.lang.IllegalArgumentException v13, v16, v17;
java.lang.StringBuilder v3;
v0 := @parameter0: java.lang.CharSequence;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>(int)>(2);
v2 = staticinvoke <io.netty.util.internal.InternalThreadLocalMap: io.netty.util.internal.InternalThreadLocalMap get()>();
v3 = virtualinvoke v2.<io.netty.util.internal.InternalThreadLocalMap: java.lang.StringBuilder stringBuilder()>();
v4 = 0;
v5 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v6 = v5 - 1;
v7 = 0;
label01:
if v7 > v6 goto label13;
v8 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v7);
if v4 == 0 goto label07;
lookupswitch(v8)
{
case 34: goto label02;
default: goto label06;
};
label02:
if v7 != v6 goto label03;
v9 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v9);
return v1;
label03:
v7 = v7 + 1;
v10 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v7);
if v10 != 34 goto label04;
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);
goto label12;
label04:
if v10 != 44 goto label05;
v4 = 0;
v11 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v11);
virtualinvoke v3.<java.lang.StringBuilder: void setLength(int)>(0);
goto label12;
label05:
v12 = v7 - 1;
v13 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.IllegalArgumentException newInvalidEscapedCsvFieldException(java.lang.CharSequence,int)>(v0, v12);
throw v13;
label06:
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v8);
goto label12;
label07:
lookupswitch(v8)
{
case 10: goto label10;
case 13: goto label10;
case 34: goto label09;
case 44: goto label08;
default: goto label11;
};
label08:
v14 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v14);
virtualinvoke v3.<java.lang.StringBuilder: void setLength(int)>(0);
goto label12;
label09:
v15 = virtualinvoke v3.<java.lang.StringBuilder: int length()>();
if v15 != 0 goto label10;
v4 = 1;
goto label12;
label10:
v16 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.IllegalArgumentException newInvalidEscapedCsvFieldException(java.lang.CharSequence,int)>(v0, v7);
throw v16;
label11:
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v8);
label12:
v7 = v7 + 1;
goto label01;
label13:
if v4 == 0 goto label14;
v17 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.IllegalArgumentException newInvalidEscapedCsvFieldException(java.lang.CharSequence,int)>(v0, v6);
throw v17;
label14:
v18 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v18);
return v1;
}
private static void validateCsvFormat(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v1, v2;
char v3;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: java.lang.CharSequence;
v1 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v2 = 0;
label1:
if v2 >= v1 goto label4;
v3 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v2);
lookupswitch(v3)
{
case 10: goto label2;
case 13: goto label2;
case 34: goto label2;
case 44: goto label2;
default: goto label3;
};
label2:
v4 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.IllegalArgumentException newInvalidEscapedCsvFieldException(java.lang.CharSequence,int)>(v0, v2);
throw v4;
label3:
v2 = v2 + 1;
goto label1;
label4:
return;
}
private static java.lang.IllegalArgumentException newInvalidEscapedCsvFieldException(java.lang.CharSequence, int)
{
java.lang.CharSequence v0;
int v1;
java.lang.String v3;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 = new java.lang.IllegalArgumentException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.CharSequence,int)>(v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("invalid escaped CSV field: \u0001 index: \u0001");
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
return v2;
}
public static int length(java.lang.String)
{
int v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
v1 = 0;
goto label2;
label1:
v1 = virtualinvoke v0.<java.lang.String: int length()>();
label2:
return v1;
}
public static boolean isNullOrEmpty(java.lang.String)
{
java.lang.String v0;
boolean v1, v2;
v0 := @parameter0: java.lang.String;
if v0 == null goto label1;
v1 = virtualinvoke v0.<java.lang.String: boolean isEmpty()>();
if v1 == 0 goto label2;
label1:
v2 = 1;
goto label3;
label2:
v2 = 0;
label3:
return v2;
}
public static int indexOfNonWhiteSpace(java.lang.CharSequence, int)
{
java.lang.CharSequence v0;
int v1, v2, v5;
char v3;
boolean v4;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
label1:
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v1 >= v2 goto label3;
v3 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v1);
v4 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(v3);
if v4 != 0 goto label2;
return v1;
label2:
v1 = v1 + 1;
goto label1;
label3:
v5 = (int) -1;
return v5;
}
public static int indexOfWhiteSpace(java.lang.CharSequence, int)
{
java.lang.CharSequence v0;
int v1, v2, v5;
char v3;
boolean v4;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
label1:
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v1 >= v2 goto label3;
v3 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v1);
v4 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(v3);
if v4 == 0 goto label2;
return v1;
label2:
v1 = v1 + 1;
goto label1;
label3:
v5 = (int) -1;
return v5;
}
public static boolean isSurrogate(char)
{
int v1, v2;
char v0;
boolean v3;
v0 := @parameter0: char;
v1 = (int) 55296;
if v0 < v1 goto label1;
v2 = (int) 57343;
if v0 > v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
private static boolean isDoubleQuote(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if v0 != 34 goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
public static boolean endsWith(java.lang.CharSequence, char)
{
java.lang.CharSequence v0;
int v2, v3;
char v1, v4;
boolean v5;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: char;
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v2 <= 0 goto label1;
v3 = v2 - 1;
v4 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v3);
if v4 != v1 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public static java.lang.CharSequence trimOws(java.lang.CharSequence)
{
java.lang.CharSequence v0, v5;
int v1, v2, v3, v4, v6;
v0 := @parameter0: java.lang.CharSequence;
v1 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v1 != 0 goto label1;
return v0;
label1:
v2 = staticinvoke <io.netty.util.internal.StringUtil: int indexOfFirstNonOwsChar(java.lang.CharSequence,int)>(v0, v1);
v3 = staticinvoke <io.netty.util.internal.StringUtil: int indexOfLastNonOwsChar(java.lang.CharSequence,int,int)>(v0, v2, v1);
if v2 != 0 goto label2;
v4 = v1 - 1;
if v3 != v4 goto label2;
v5 = v0;
goto label3;
label2:
v6 = v3 + 1;
v5 = interfaceinvoke v0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(v2, v6);
label3:
return v5;
}
public static java.lang.CharSequence join(java.lang.CharSequence, java.lang.Iterable)
{
java.lang.CharSequence v0;
java.util.Iterator v2;
java.lang.Iterable v1;
java.lang.Object v4, v8;
java.lang.StringBuilder v6, v7;
boolean v3, v5, v9;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.Iterable;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "separator");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "elements");
v2 = interfaceinvoke v1.<java.lang.Iterable: java.util.Iterator iterator()>();
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 != 0 goto label1;
return "";
label1:
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v5 != 0 goto label2;
return v4;
label2:
v6 = new java.lang.StringBuilder;
specialinvoke v6.<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>(v4);
label3:
v7 = virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(v0);
v8 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(v8);
v9 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v9 != 0 goto label3;
return v6;
}
private static int indexOfFirstNonOwsChar(java.lang.CharSequence, int)
{
java.lang.CharSequence v0;
int v1, v2;
char v3;
boolean v4;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 = 0;
label1:
if v2 >= v1 goto label2;
v3 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v2);
v4 = staticinvoke <io.netty.util.internal.StringUtil: boolean isOws(char)>(v3);
if v4 == 0 goto label2;
v2 = v2 + 1;
goto label1;
label2:
return v2;
}
private static int indexOfLastNonOwsChar(java.lang.CharSequence, int, int)
{
java.lang.CharSequence v0;
int v1, v2, v3;
char v4;
boolean v5;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = v2 - 1;
label1:
if v3 <= v1 goto label2;
v4 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v3);
v5 = staticinvoke <io.netty.util.internal.StringUtil: boolean isOws(char)>(v4);
if v5 == 0 goto label2;
v3 = v3 - 1;
goto label1;
label2:
return v3;
}
private static boolean isOws(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if v0 == 32 goto label1;
if v0 != 9 goto label2;
label1:
v1 = 1;
goto label3;
label2:
v1 = 0;
label3:
return v1;
}
static void <clinit>()
{
byte[] v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37;
boolean v1, v2;
java.lang.String[] v10, v13, v4, v5, v7;
int v11, v6, v8;
java.lang.String v12, v3, v9;
java.lang.Class v0;
v0 = class "Lio/netty/util/internal/StringUtil;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.util.internal.StringUtil: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String,java.lang.String)>("line.separator", "\n");
<io.netty.util.internal.StringUtil: java.lang.String NEWLINE> = v3;
v4 = newarray (java.lang.String)[256];
<io.netty.util.internal.StringUtil: java.lang.String[] BYTE2HEX_PAD> = v4;
v5 = newarray (java.lang.String)[256];
<io.netty.util.internal.StringUtil: java.lang.String[] BYTE2HEX_NOPAD> = v5;
v6 = 0;
label3:
v7 = <io.netty.util.internal.StringUtil: java.lang.String[] BYTE2HEX_PAD>;
v8 = lengthof v7;
if v6 >= v8 goto label6;
v9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v6);
v10 = <io.netty.util.internal.StringUtil: java.lang.String[] BYTE2HEX_PAD>;
v11 = v6;
if v6 <= 15 goto label4;
v12 = v9;
goto label5;
label4:
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("0\u0001");
label5:
v10[v11] = v12;
v13 = <io.netty.util.internal.StringUtil: java.lang.String[] BYTE2HEX_NOPAD>;
v13[v6] = v9;
v6 = v6 + 1;
goto label3;
label6:
v14 = newarray (byte)[65536];
<io.netty.util.internal.StringUtil: byte[] HEX2B> = v14;
v15 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
staticinvoke <java.util.Arrays: void fill(byte[],byte)>(v15, -1);
v16 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v16[48] = 0;
v17 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v17[49] = 1;
v18 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v18[50] = 2;
v19 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v19[51] = 3;
v20 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v20[52] = 4;
v21 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v21[53] = 5;
v22 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v22[54] = 6;
v23 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v23[55] = 7;
v24 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v24[56] = 8;
v25 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v25[57] = 9;
v26 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v26[65] = 10;
v27 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v27[66] = 11;
v28 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v28[67] = 12;
v29 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v29[68] = 13;
v30 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v30[69] = 14;
v31 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v31[70] = 15;
v32 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v32[97] = 10;
v33 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v33[98] = 11;
v34 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v34[99] = 12;
v35 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v35[100] = 13;
v36 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v36[101] = 14;
v37 = <io.netty.util.internal.StringUtil: byte[] HEX2B>;
v37[102] = 15;
return;
}
}