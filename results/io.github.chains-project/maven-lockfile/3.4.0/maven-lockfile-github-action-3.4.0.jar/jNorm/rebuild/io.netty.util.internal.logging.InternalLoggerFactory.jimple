public abstract class io.netty.util.internal.logging.InternalLoggerFactory extends java.lang.Object
{
private static volatile io.netty.util.internal.logging.InternalLoggerFactory defaultFactory;
public void <init>()
{
io.netty.util.internal.logging.InternalLoggerFactory v0;
v0 := @this: io.netty.util.internal.logging.InternalLoggerFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
private static io.netty.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)
{
io.netty.util.internal.logging.InternalLoggerFactory v1, v2, v3, v4;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLoggerFactory useSlf4JLoggerFactory(java.lang.String)>(v0);
if v1 == null goto label1;
return v1;
label1:
v2 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLoggerFactory useLog4J2LoggerFactory(java.lang.String)>(v0);
if v2 == null goto label2;
return v2;
label2:
v3 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLoggerFactory useLog4JLoggerFactory(java.lang.String)>(v0);
if v3 == null goto label3;
return v3;
label3:
v4 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLoggerFactory useJdkLoggerFactory(java.lang.String)>(v0);
return v4;
}
private static io.netty.util.internal.logging.InternalLoggerFactory useSlf4JLoggerFactory(java.lang.String)
{
java.lang.LinkageError v3;
io.netty.util.internal.logging.InternalLogger v2;
io.netty.util.internal.logging.InternalLoggerFactory v1;
java.lang.String v0;
java.lang.Exception v4;
v0 := @parameter0: java.lang.String;
label1:
v1 = staticinvoke <io.netty.util.internal.logging.Slf4JLoggerFactory: io.netty.util.internal.logging.InternalLoggerFactory getInstanceWithNopCheck()>();
v2 = virtualinvoke v1.<io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger newInstance(java.lang.String)>(v0);
interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>("Using SLF4J as the default logging framework");
label2:
return v1;
label3:
v3 := @caughtexception;
return null;
label4:
v4 := @caughtexception;
return null;
catch java.lang.LinkageError from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
private static io.netty.util.internal.logging.InternalLoggerFactory useLog4J2LoggerFactory(java.lang.String)
{
java.lang.LinkageError v3;
io.netty.util.internal.logging.InternalLogger v2;
io.netty.util.internal.logging.InternalLoggerFactory v1;
java.lang.String v0;
java.lang.Exception v4;
v0 := @parameter0: java.lang.String;
label1:
v1 = <io.netty.util.internal.logging.Log4J2LoggerFactory: io.netty.util.internal.logging.InternalLoggerFactory INSTANCE>;
v2 = virtualinvoke v1.<io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger newInstance(java.lang.String)>(v0);
interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>("Using Log4J2 as the default logging framework");
label2:
return v1;
label3:
v3 := @caughtexception;
return null;
label4:
v4 := @caughtexception;
return null;
catch java.lang.LinkageError from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
private static io.netty.util.internal.logging.InternalLoggerFactory useLog4JLoggerFactory(java.lang.String)
{
java.lang.LinkageError v3;
io.netty.util.internal.logging.InternalLogger v2;
io.netty.util.internal.logging.InternalLoggerFactory v1;
java.lang.String v0;
java.lang.Exception v4;
v0 := @parameter0: java.lang.String;
label1:
v1 = <io.netty.util.internal.logging.Log4JLoggerFactory: io.netty.util.internal.logging.InternalLoggerFactory INSTANCE>;
v2 = virtualinvoke v1.<io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger newInstance(java.lang.String)>(v0);
interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>("Using Log4J as the default logging framework");
label2:
return v1;
label3:
v3 := @caughtexception;
return null;
label4:
v4 := @caughtexception;
return null;
catch java.lang.LinkageError from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
private static io.netty.util.internal.logging.InternalLoggerFactory useJdkLoggerFactory(java.lang.String)
{
io.netty.util.internal.logging.InternalLoggerFactory v1;
java.lang.String v0;
io.netty.util.internal.logging.InternalLogger v2;
v0 := @parameter0: java.lang.String;
v1 = <io.netty.util.internal.logging.JdkLoggerFactory: io.netty.util.internal.logging.InternalLoggerFactory INSTANCE>;
v2 = virtualinvoke v1.<io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger newInstance(java.lang.String)>(v0);
interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>("Using java.util.logging as the default logging framework");
return v1;
}
public static io.netty.util.internal.logging.InternalLoggerFactory getDefaultFactory()
{
java.lang.Class v1;
io.netty.util.internal.logging.InternalLoggerFactory v0, v3, v4;
java.lang.String v2;
v0 = <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLoggerFactory defaultFactory>;
if v0 != null goto label1;
v1 = class "Lio/netty/util/internal/logging/InternalLoggerFactory;";
v2 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v3 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLoggerFactory newDefaultFactory(java.lang.String)>(v2);
<io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLoggerFactory defaultFactory> = v3;
label1:
v4 = <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLoggerFactory defaultFactory>;
return v4;
}
public static void setDefaultFactory(io.netty.util.internal.logging.InternalLoggerFactory)
{
java.lang.Object v1;
io.netty.util.internal.logging.InternalLoggerFactory v0;
v0 := @parameter0: io.netty.util.internal.logging.InternalLoggerFactory;
v1 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "defaultFactory");
<io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLoggerFactory defaultFactory> = v1;
return;
}
public static io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)
{
java.lang.Class v0;
java.lang.String v1;
io.netty.util.internal.logging.InternalLogger v2;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v2 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.String)>(v1);
return v2;
}
public static io.netty.util.internal.logging.InternalLogger getInstance(java.lang.String)
{
io.netty.util.internal.logging.InternalLoggerFactory v1;
java.lang.String v0;
io.netty.util.internal.logging.InternalLogger v2;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLoggerFactory getDefaultFactory()>();
v2 = virtualinvoke v1.<io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger newInstance(java.lang.String)>(v0);
return v2;
}
protected abstract io.netty.util.internal.logging.InternalLogger newInstance(java.lang.String);
}