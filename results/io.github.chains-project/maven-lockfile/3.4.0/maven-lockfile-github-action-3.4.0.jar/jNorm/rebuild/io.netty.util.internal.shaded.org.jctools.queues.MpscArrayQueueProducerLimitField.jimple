abstract class io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField extends io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueMidPad
{
private static final long P_LIMIT_OFFSET;
private volatile long producerLimit;
void <init>(int)
{
int v1;
io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField v0;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueMidPad: void <init>(int)>(v1);
v0.<io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField: long producerLimit> = v1;
return;
}
final long lvProducerLimit()
{
io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField v0;
long v1;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField;
v1 = v0.<io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField: long producerLimit>;
return v1;
}
final void soProducerLimit(long)
{
sun.misc.Unsafe v2;
io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField v0;
long v1, v3;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField;
v1 := @parameter0: long;
v2 = <io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess: sun.misc.Unsafe UNSAFE>;
v3 = <io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField: long P_LIMIT_OFFSET>;
virtualinvoke v2.<sun.misc.Unsafe: void putOrderedLong(java.lang.Object,long,long)>(v0, v3, v1);
return;
}
static void <clinit>()
{
long v0;
v0 = staticinvoke <io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess: long fieldOffset(java.lang.Class,java.lang.String)>(class "Lio/netty/util/internal/shaded/org/jctools/queues/MpscArrayQueueProducerLimitField;", "producerLimit");
<io.netty.util.internal.shaded.org.jctools.queues.MpscArrayQueueProducerLimitField: long P_LIMIT_OFFSET> = v0;
return;
}
}