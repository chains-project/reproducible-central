public class io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue extends io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL3Pad
{
public void <init>(int)
{
int v1;
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue v0;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueL3Pad: void <init>(int)>(v1);
return;
}
public boolean offerIfBelowThreshold(java.lang.Object, int)
{
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue v0;
long v11, v12, v14, v6, v7, v8, v9;
java.lang.NullPointerException v3;
java.util.concurrent.atomic.AtomicReferenceArray v17;
byte v10, v13;
int v16, v2, v4, v5;
boolean v15;
java.lang.Object v1;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: int;
if null != v1 goto label1;
v3 = new java.lang.NullPointerException;
specialinvoke v3.<java.lang.NullPointerException: void <init>()>();
throw v3;
label1:
v4 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: int mask>;
v5 = v4 + 1;
v6 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lvProducerLimit()>();
label2:
v7 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lvProducerIndex()>();
v8 = v6 - v7;
v9 = v5 - v8;
v10 = v9 cmp v2;
if v10 < 0 goto label4;
v11 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lvConsumerIndex()>();
v12 = v7 - v11;
v13 = v12 cmp v2;
if v13 < 0 goto label3;
return 0;
label3:
v6 = v11 + v5;
virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: void soProducerLimit(long)>(v6);
label4:
v14 = v7 + 1L;
v15 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: boolean casProducerIndex(long,long)>(v7, v14);
if v15 == 0 goto label2;
v16 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: int calcCircularRefElementOffset(long,long)>(v7, v4);
v17 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray buffer>;
staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: void soRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v17, v16, v1);
return 1;
}
public boolean offer(java.lang.Object)
{
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue v0;
long v10, v4, v5, v7, v8;
java.lang.NullPointerException v2;
java.util.concurrent.atomic.AtomicReferenceArray v13;
byte v6, v9;
int v12, v3;
java.lang.Object v1;
boolean v11;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue;
v1 := @parameter0: java.lang.Object;
if null != v1 goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>()>();
throw v2;
label1:
v3 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: int mask>;
v4 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lvProducerLimit()>();
label2:
v5 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lvProducerIndex()>();
v6 = v5 cmp v4;
if v6 < 0 goto label4;
v7 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lvConsumerIndex()>();
v8 = v7 + v3;
v4 = v8 + 1L;
v9 = v5 cmp v4;
if v9 < 0 goto label3;
return 0;
label3:
virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: void soProducerLimit(long)>(v4);
label4:
v10 = v5 + 1L;
v11 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: boolean casProducerIndex(long,long)>(v5, v10);
if v11 == 0 goto label2;
v12 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: int calcCircularRefElementOffset(long,long)>(v5, v3);
v13 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray buffer>;
staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: void soRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v13, v12, v1);
return 1;
}
public final int failFastOffer(java.lang.Object)
{
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue v0;
long v11, v5, v6, v8, v9;
java.lang.NullPointerException v2;
java.util.concurrent.atomic.AtomicReferenceArray v15;
byte v10, v7;
int v13, v14, v3, v4;
boolean v12;
java.lang.Object v1;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue;
v1 := @parameter0: java.lang.Object;
if null != v1 goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>()>();
throw v2;
label1:
v3 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: int mask>;
v4 = v3 + 1;
v5 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lvProducerIndex()>();
v6 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lvProducerLimit()>();
v7 = v5 cmp v6;
if v7 < 0 goto label3;
v8 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lvConsumerIndex()>();
v9 = v8 + v4;
v10 = v5 cmp v9;
if v10 < 0 goto label2;
return 1;
label2:
virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: void soProducerLimit(long)>(v9);
label3:
v11 = v5 + 1L;
v12 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: boolean casProducerIndex(long,long)>(v5, v11);
if v12 != 0 goto label4;
v13 = (int) -1;
return v13;
label4:
v14 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: int calcCircularRefElementOffset(long,long)>(v5, v3);
v15 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray buffer>;
staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: void soRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v15, v14, v1);
return 0;
}
public java.lang.Object poll()
{
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue v0;
long v1, v6, v8;
java.util.concurrent.atomic.AtomicReferenceArray v4;
byte v7;
int v2, v3;
java.lang.Object v5;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue;
v1 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lpConsumerIndex()>();
v2 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: int mask>;
v3 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: int calcCircularRefElementOffset(long,long)>(v1, v2);
v4 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray buffer>;
v5 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: java.lang.Object lvRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>(v4, v3);
if null != v5 goto label3;
v6 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lvProducerIndex()>();
v7 = v1 cmp v6;
if v7 == 0 goto label2;
label1:
v5 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: java.lang.Object lvRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>(v4, v3);
if v5 == null goto label1;
goto label3;
label2:
return null;
label3:
staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: void spRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v4, v3, null);
v8 = v1 + 1L;
virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: void soConsumerIndex(long)>(v8);
return v5;
}
public java.lang.Object peek()
{
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue v0;
long v2, v6;
java.util.concurrent.atomic.AtomicReferenceArray v1;
byte v7;
int v3, v4;
java.lang.Object v5;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue;
v1 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray buffer>;
v2 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lpConsumerIndex()>();
v3 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: int mask>;
v4 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: int calcCircularRefElementOffset(long,long)>(v2, v3);
v5 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: java.lang.Object lvRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>(v1, v4);
if null != v5 goto label3;
v6 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lvProducerIndex()>();
v7 = v2 cmp v6;
if v7 == 0 goto label2;
label1:
v5 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: java.lang.Object lvRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>(v1, v4);
if v5 == null goto label1;
goto label3;
label2:
return null;
label3:
return v5;
}
public boolean relaxedOffer(java.lang.Object)
{
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue v0;
java.lang.Object v1;
boolean v2;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: boolean offer(java.lang.Object)>(v1);
return v2;
}
public java.lang.Object relaxedPoll()
{
int v3, v4;
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue v0;
java.lang.Object v5;
long v2, v6;
java.util.concurrent.atomic.AtomicReferenceArray v1;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue;
v1 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray buffer>;
v2 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lpConsumerIndex()>();
v3 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: int mask>;
v4 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: int calcCircularRefElementOffset(long,long)>(v2, v3);
v5 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: java.lang.Object lvRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>(v1, v4);
if null != v5 goto label1;
return null;
label1:
staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: void spRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v1, v4, null);
v6 = v2 + 1L;
virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: void soConsumerIndex(long)>(v6);
return v5;
}
public java.lang.Object relaxedPeek()
{
int v2, v4;
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue v0;
java.lang.Object v5;
long v3;
java.util.concurrent.atomic.AtomicReferenceArray v1;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue;
v1 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray buffer>;
v2 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: int mask>;
v3 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lpConsumerIndex()>();
v4 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: int calcCircularRefElementOffset(long,long)>(v3, v2);
v5 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: java.lang.Object lvRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>(v1, v4);
return v5;
}
public int drain(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer, int)
{
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue v0;
long v10, v13, v8;
java.lang.IllegalArgumentException v3, v4;
java.util.concurrent.atomic.AtomicReferenceArray v6;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer v1;
int v11, v2, v7, v9;
java.lang.Object v12;
java.lang.String v5;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue;
v1 := @parameter0: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer;
v2 := @parameter1: int;
if null != v1 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("c is null");
throw v3;
label1:
if v2 >= 0 goto label2;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("limit is negative: \u0001");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label2:
if v2 != 0 goto label3;
return 0;
label3:
v6 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray buffer>;
v7 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: int mask>;
v8 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lpConsumerIndex()>();
v9 = 0;
label4:
if v9 >= v2 goto label6;
v10 = v8 + v9;
v11 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: int calcCircularRefElementOffset(long,long)>(v10, v7);
v12 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: java.lang.Object lvRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>(v6, v11);
if null != v12 goto label5;
return v9;
label5:
staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: void spRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v6, v11, null);
v13 = v10 + 1L;
virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: void soConsumerIndex(long)>(v13);
interfaceinvoke v1.<io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer: void accept(java.lang.Object)>(v12);
v9 = v9 + 1;
goto label4;
label6:
return v2;
}
public int fill(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier, int)
{
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue v0;
long v10, v12, v15, v19, v8, v9;
java.util.concurrent.atomic.AtomicReferenceArray v17;
byte v11, v13;
int v14, v18, v2, v20, v6, v7;
java.lang.String v5;
boolean v16;
java.lang.IllegalArgumentException v3, v4;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier v1;
java.lang.Object v21;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue;
v1 := @parameter0: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier;
v2 := @parameter1: int;
if null != v1 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("supplier is null");
throw v3;
label1:
if v2 >= 0 goto label2;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("limit is negative:\u0001");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label2:
if v2 != 0 goto label3;
return 0;
label3:
v6 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: int mask>;
v7 = v6 + 1;
v8 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lvProducerLimit()>();
label4:
v9 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lvProducerIndex()>();
v10 = v8 - v9;
v11 = v10 cmp 0L;
if v11 > 0 goto label6;
v12 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: long lvConsumerIndex()>();
v8 = v12 + v7;
v10 = v8 - v9;
v13 = v10 cmp 0L;
if v13 > 0 goto label5;
return 0;
label5:
virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: void soProducerLimit(long)>(v8);
label6:
v14 = staticinvoke <java.lang.Math: int min(int,int)>(v10, v2);
v15 = v9 + v14;
v16 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: boolean casProducerIndex(long,long)>(v9, v15);
if v16 == 0 goto label4;
v17 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray buffer>;
v18 = 0;
label7:
if v18 >= v14 goto label8;
v19 = v9 + v18;
v20 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: int calcCircularRefElementOffset(long,long)>(v19, v6);
v21 = interfaceinvoke v1.<io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier: java.lang.Object get()>();
staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicQueueUtil: void soRefElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v17, v20, v21);
v18 = v18 + 1;
goto label7;
label8:
return v14;
}
public int drain(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer)
{
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer v1;
int v2, v3;
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue v0;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue;
v1 := @parameter0: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer;
v2 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: int capacity()>();
v3 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: int drain(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer,int)>(v1, v2);
return v3;
}
public int fill(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier)
{
int v2;
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue v0;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier v1;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue;
v1 := @parameter0: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier;
v2 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueueUtil: int fillBounded(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue,io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier)>(v0, v1);
return v2;
}
public void drain(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer, io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy, io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition)
{
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer v1;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition v3;
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue v0;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy v2;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue;
v1 := @parameter0: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer;
v2 := @parameter1: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy;
v3 := @parameter2: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition;
staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueueUtil: void drain(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue,io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer,io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy,io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition)>(v0, v1, v2, v3);
return;
}
public void fill(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier, io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy, io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition)
{
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition v3;
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue v0;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy v2;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier v1;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue;
v1 := @parameter0: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier;
v2 := @parameter1: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy;
v3 := @parameter2: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition;
staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueueUtil: void fill(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue,io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier,io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy,io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition)>(v0, v1, v2, v3);
return;
}
public int weakOffer(java.lang.Object)
{
int v2;
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue v0;
java.lang.Object v1;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueue: int failFastOffer(java.lang.Object)>(v1);
return v2;
}
}