public class io.quarkiverse.githubaction.runtime.ConfigFileReader extends java.lang.Object
{
private static final java.util.List YAML_EXTENSIONS;
private static final java.util.List JSON_EXTENSIONS;
private static final java.util.List TEXT_EXTENSIONS;
private static final java.lang.String DEFAULT_DIRECTORY;
private static final java.lang.String PARENT_DIRECTORY;
private static final java.lang.String ROOT_DIRECTORY;
io.quarkiverse.githubaction.GitHubFileDownloader gitHubFileDownloader;
com.fasterxml.jackson.databind.ObjectMapper jsonObjectMapper;
com.fasterxml.jackson.databind.ObjectMapper yamlObjectMapper;
public void <init>()
{
io.quarkiverse.githubaction.runtime.ConfigFileReader v0;
v0 := @this: io.quarkiverse.githubaction.runtime.ConfigFileReader;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.lang.Object getConfigObject(org.kohsuke.github.GitHub, java.lang.String, java.lang.String, java.lang.Class)
{
io.quarkiverse.githubaction.runtime.ConfigFileReader v0;
java.lang.Class v4;
java.lang.Object v7;
java.lang.String v2, v3, v5, v6;
org.kohsuke.github.GitHub v1;
v0 := @this: io.quarkiverse.githubaction.runtime.ConfigFileReader;
v1 := @parameter0: org.kohsuke.github.GitHub;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.Class;
v5 = virtualinvoke v3.<java.lang.String: java.lang.String trim()>();
v6 = staticinvoke <io.quarkiverse.githubaction.runtime.ConfigFileReader: java.lang.String getFilePath(java.lang.String)>(v5);
v7 = specialinvoke v0.<io.quarkiverse.githubaction.runtime.ConfigFileReader: java.lang.Object readConfigFile(org.kohsuke.github.GitHub,java.lang.String,java.lang.String,java.lang.Class)>(v1, v2, v6, v4);
return v7;
}
private java.lang.Object readConfigFile(org.kohsuke.github.GitHub, java.lang.String, java.lang.String, java.lang.Class)
{
java.lang.IllegalStateException v23;
io.quarkiverse.githubaction.runtime.ConfigFileReader v0;
java.lang.String v15, v16, v17, v2, v24, v25, v3;
org.kohsuke.github.GitHub v1;
boolean v10, v12, v19, v7;
com.fasterxml.jackson.databind.ObjectMapper v20;
java.lang.IllegalArgumentException v13;
java.lang.Exception v22;
java.util.List v14, v9;
io.quarkiverse.githubaction.GitHubFileDownloader v5;
java.util.Optional v6;
java.lang.Class v11, v18, v4;
java.lang.Object v21, v8;
v0 := @this: io.quarkiverse.githubaction.runtime.ConfigFileReader;
v1 := @parameter0: org.kohsuke.github.GitHub;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.Class;
v5 = v0.<io.quarkiverse.githubaction.runtime.ConfigFileReader: io.quarkiverse.githubaction.GitHubFileDownloader gitHubFileDownloader>;
v6 = interfaceinvoke v5.<io.quarkiverse.githubaction.GitHubFileDownloader: java.util.Optional getFileContent(org.kohsuke.github.GitHub,java.lang.String,java.lang.String)>(v1, v2, v3);
v7 = virtualinvoke v6.<java.util.Optional: boolean isEmpty()>();
if v7 == 0 goto label1;
return null;
label1:
v8 = virtualinvoke v6.<java.util.Optional: java.lang.Object get()>();
v9 = <io.quarkiverse.githubaction.runtime.ConfigFileReader: java.util.List TEXT_EXTENSIONS>;
v10 = staticinvoke <io.quarkiverse.githubaction.runtime.ConfigFileReader: boolean matchExtensions(java.lang.String,java.util.Collection)>(v3, v9);
if v10 == 0 goto label2;
v11 = class "Ljava/lang/String;";
v12 = virtualinvoke v11.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
if v12 != 0 goto label2;
v13 = new java.lang.IllegalArgumentException;
v14 = <io.quarkiverse.githubaction.runtime.ConfigFileReader: java.util.List TEXT_EXTENSIONS>;
v15 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(", ", v14);
v16 = virtualinvoke v4.<java.lang.Class: java.lang.String getName()>();
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>(v15, v3, v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Text extensions (\u0001) only support String: \u0001 required type \u0001");
specialinvoke v13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v17);
throw v13;
label2:
v18 = class "Ljava/lang/String;";
v19 = virtualinvoke v18.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
if v19 == 0 goto label3;
return v8;
label3:
v20 = specialinvoke v0.<io.quarkiverse.githubaction.runtime.ConfigFileReader: com.fasterxml.jackson.databind.ObjectMapper getObjectMapper(java.lang.String)>(v3);
v21 = virtualinvoke v20.<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>(v8, v4);
label4:
return v21;
label5:
v22 := @caughtexception;
v23 = new java.lang.IllegalStateException;
v24 = virtualinvoke v4.<java.lang.Class: java.lang.String getName()>();
v25 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v3, v24) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Error deserializing config file \u0001 to type \u0001");
specialinvoke v23.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>(v25, v22);
throw v23;
catch java.lang.Exception from label3 to label4 with label5;
}
private com.fasterxml.jackson.databind.ObjectMapper getObjectMapper(java.lang.String)
{
com.fasterxml.jackson.databind.ObjectMapper v4, v7;
java.lang.IllegalArgumentException v8;
java.util.List v2, v5;
io.quarkiverse.githubaction.runtime.ConfigFileReader v0;
java.lang.String v1, v9;
boolean v3, v6;
v0 := @this: io.quarkiverse.githubaction.runtime.ConfigFileReader;
v1 := @parameter0: java.lang.String;
v2 = <io.quarkiverse.githubaction.runtime.ConfigFileReader: java.util.List YAML_EXTENSIONS>;
v3 = staticinvoke <io.quarkiverse.githubaction.runtime.ConfigFileReader: boolean matchExtensions(java.lang.String,java.util.Collection)>(v1, v2);
if v3 == 0 goto label1;
v4 = v0.<io.quarkiverse.githubaction.runtime.ConfigFileReader: com.fasterxml.jackson.databind.ObjectMapper yamlObjectMapper>;
return v4;
label1:
v5 = <io.quarkiverse.githubaction.runtime.ConfigFileReader: java.util.List JSON_EXTENSIONS>;
v6 = staticinvoke <io.quarkiverse.githubaction.runtime.ConfigFileReader: boolean matchExtensions(java.lang.String,java.util.Collection)>(v1, v5);
if v6 == 0 goto label2;
v7 = v0.<io.quarkiverse.githubaction.runtime.ConfigFileReader: com.fasterxml.jackson.databind.ObjectMapper jsonObjectMapper>;
return v7;
label2:
v8 = new java.lang.IllegalArgumentException;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("File extension not supported for config file \u0001");
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v9);
throw v8;
}
private static boolean matchExtensions(java.lang.String, java.util.Collection)
{
java.util.Iterator v2;
java.util.Collection v1;
java.lang.Object v4;
java.lang.String v0;
boolean v3, v5;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.util.Collection;
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = virtualinvoke v0.<java.lang.String: boolean endsWith(java.lang.String)>(v4);
if v5 == 0 goto label1;
return 1;
label2:
return 0;
}
private static java.lang.String getFilePath(java.lang.String)
{
java.lang.String v0, v3, v5, v6;
java.lang.IllegalArgumentException v2;
boolean v1, v4;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: boolean contains(java.lang.CharSequence)>("..");
if v1 == 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Config file paths containing \'..\' are not accepted: \u0001");
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
throw v2;
label1:
v4 = virtualinvoke v0.<java.lang.String: boolean startsWith(java.lang.String)>("/");
if v4 == 0 goto label2;
v5 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(1);
return v5;
label2:
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(".github/\u0001");
return v6;
}
static void <clinit>()
{
java.util.List v1, v2, v3;
java.lang.String[] v0;
v0 = newarray (java.lang.String)[2];
v0[0] = ".yml";
v0[1] = ".yaml";
v1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v0);
<io.quarkiverse.githubaction.runtime.ConfigFileReader: java.util.List YAML_EXTENSIONS> = v1;
v2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(".json");
<io.quarkiverse.githubaction.runtime.ConfigFileReader: java.util.List JSON_EXTENSIONS> = v2;
v3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(".txt");
<io.quarkiverse.githubaction.runtime.ConfigFileReader: java.util.List TEXT_EXTENSIONS> = v3;
return;
}
}