public class io.quarkiverse.githubaction.runtime.GitHubEvent extends java.lang.Object
{
private static final java.lang.String AUTHORIZATION_HEADER;
private static final java.lang.String AUTHORIZATION_HEADER_BEARER;
private final java.lang.String name;
private final io.quarkiverse.githubaction.Context context;
private final java.lang.String eventAction;
private final io.quarkiverse.githubaction.Inputs inputs;
private final io.quarkiverse.githubaction.Commands commands;
private final java.lang.Class payloadType;
private volatile org.kohsuke.github.GHEventPayload payload;
private volatile org.kohsuke.github.GitHub gitHubClient;
private volatile io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClient gitHubGraphQLClient;
void <init>(java.lang.String, io.quarkiverse.githubaction.Context, java.lang.String, io.quarkiverse.githubaction.Inputs, io.quarkiverse.githubaction.Commands, java.lang.Class)
{
io.quarkiverse.githubaction.runtime.GitHubEvent v0;
io.quarkiverse.githubaction.Context v2;
io.quarkiverse.githubaction.Commands v5;
java.lang.Class v6;
java.lang.String v1, v3;
io.quarkiverse.githubaction.Inputs v4;
v0 := @this: io.quarkiverse.githubaction.runtime.GitHubEvent;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.quarkiverse.githubaction.Context;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.quarkiverse.githubaction.Inputs;
v5 := @parameter4: io.quarkiverse.githubaction.Commands;
v6 := @parameter5: java.lang.Class;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: java.lang.String name> = v1;
v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: io.quarkiverse.githubaction.Context context> = v2;
v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: java.lang.String eventAction> = v3;
v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: io.quarkiverse.githubaction.Inputs inputs> = v4;
v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: io.quarkiverse.githubaction.Commands commands> = v5;
v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: java.lang.Class payloadType> = v6;
return;
}
public java.lang.String getName()
{
io.quarkiverse.githubaction.runtime.GitHubEvent v0;
java.lang.String v1;
v0 := @this: io.quarkiverse.githubaction.runtime.GitHubEvent;
v1 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: java.lang.String name>;
return v1;
}
public java.lang.String getEvent()
{
io.quarkiverse.githubaction.runtime.GitHubEvent v0;
io.quarkiverse.githubaction.Context v1;
java.lang.String v2;
v0 := @this: io.quarkiverse.githubaction.runtime.GitHubEvent;
v1 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: io.quarkiverse.githubaction.Context context>;
v2 = interfaceinvoke v1.<io.quarkiverse.githubaction.Context: java.lang.String getGitHubEventName()>();
return v2;
}
public java.lang.String getEventAction()
{
io.quarkiverse.githubaction.runtime.GitHubEvent v0;
java.lang.String v1;
v0 := @this: io.quarkiverse.githubaction.runtime.GitHubEvent;
v1 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: java.lang.String eventAction>;
return v1;
}
public io.quarkiverse.githubaction.Context getContext()
{
io.quarkiverse.githubaction.runtime.GitHubEvent v0;
io.quarkiverse.githubaction.Context v1;
v0 := @this: io.quarkiverse.githubaction.runtime.GitHubEvent;
v1 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: io.quarkiverse.githubaction.Context context>;
return v1;
}
public io.quarkiverse.githubaction.Inputs getInputs()
{
io.quarkiverse.githubaction.runtime.GitHubEvent v0;
io.quarkiverse.githubaction.Inputs v1;
v0 := @this: io.quarkiverse.githubaction.runtime.GitHubEvent;
v1 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: io.quarkiverse.githubaction.Inputs inputs>;
return v1;
}
public io.quarkiverse.githubaction.Commands getCommands()
{
io.quarkiverse.githubaction.runtime.GitHubEvent v0;
io.quarkiverse.githubaction.Commands v1;
v0 := @this: io.quarkiverse.githubaction.runtime.GitHubEvent;
v1 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: io.quarkiverse.githubaction.Commands commands>;
return v1;
}
public org.kohsuke.github.GHEventPayload getPayload()
{
java.lang.Throwable v10, v16;
java.lang.IllegalStateException v12;
java.lang.String[] v4;
io.quarkiverse.githubaction.Context v13, v2;
org.kohsuke.github.GHEventPayload v1, v9;
java.lang.String v14, v15, v3;
java.nio.file.Path v5;
org.kohsuke.github.GitHub v7;
java.io.IOException v11;
io.quarkiverse.githubaction.runtime.GitHubEvent v0;
java.lang.Class v8;
java.io.BufferedReader v6;
v0 := @this: io.quarkiverse.githubaction.runtime.GitHubEvent;
v1 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: org.kohsuke.github.GHEventPayload payload>;
if v1 != null goto label10;
entermonitor v0;
label01:
v1 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: org.kohsuke.github.GHEventPayload payload>;
if v1 != null goto label07;
label02:
v2 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: io.quarkiverse.githubaction.Context context>;
v3 = interfaceinvoke v2.<io.quarkiverse.githubaction.Context: java.lang.String getGitHubEventPath()>();
v4 = newarray (java.lang.String)[0];
v5 = staticinvoke <java.nio.file.Path: java.nio.file.Path of(java.lang.String,java.lang.String[])>(v3, v4);
v6 = staticinvoke <java.nio.file.Files: java.io.BufferedReader newBufferedReader(java.nio.file.Path)>(v5);
label03:
v7 = virtualinvoke v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: org.kohsuke.github.GitHub getGitHub()>();
v8 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: java.lang.Class payloadType>;
v9 = virtualinvoke v7.<org.kohsuke.github.GitHub: org.kohsuke.github.GHEventPayload parseEventPayload(java.io.Reader,java.lang.Class)>(v6, v8);
v1 = v9;
v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: org.kohsuke.github.GHEventPayload payload> = v9;
label04:
if v6 == null goto label07;
virtualinvoke v6.<java.io.Reader: void close()>();
goto label07;
label05:
v10 := @caughtexception;
throw v10;
label06:
v11 := @caughtexception;
v12 = new java.lang.IllegalStateException;
v13 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: io.quarkiverse.githubaction.Context context>;
v14 = interfaceinvoke v13.<io.quarkiverse.githubaction.Context: java.lang.String getGitHubEventPath()>();
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unable to read or parse payload file \u0001");
specialinvoke v12.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>(v15, v11);
throw v12;
label07:
exitmonitor v0;
label08:
goto label10;
label09:
v16 := @caughtexception;
exitmonitor v0;
throw v16;
label10:
return v1;
catch java.lang.Throwable from label03 to label04 with label05;
catch java.io.IOException from label02 to label06 with label06;
catch java.lang.Throwable from label01 to label08 with label09;
}
public org.kohsuke.github.GitHub getGitHub()
{
java.lang.Throwable v15;
java.lang.IllegalStateException v14;
org.kohsuke.github.GitHubBuilder v12, v5, v8;
io.quarkiverse.githubaction.Context v6;
java.lang.String v7;
org.kohsuke.github.GitHub v1;
boolean v4;
java.lang.Exception v13;
io.quarkiverse.githubaction.Inputs v2, v9;
io.quarkiverse.githubaction.runtime.GitHubEvent v0;
java.util.Optional v10, v3;
java.lang.Object v11;
v0 := @this: io.quarkiverse.githubaction.runtime.GitHubEvent;
v1 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: org.kohsuke.github.GitHub gitHubClient>;
if v1 != null goto label10;
entermonitor v0;
label01:
v1 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: org.kohsuke.github.GitHub gitHubClient>;
if v1 != null goto label07;
label02:
v2 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: io.quarkiverse.githubaction.Inputs inputs>;
v3 = interfaceinvoke v2.<io.quarkiverse.githubaction.Inputs: java.util.Optional getGitHubToken()>();
v4 = virtualinvoke v3.<java.util.Optional: boolean isPresent()>();
if v4 == 0 goto label03;
v5 = new org.kohsuke.github.GitHubBuilder;
specialinvoke v5.<org.kohsuke.github.GitHubBuilder: void <init>()>();
v6 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: io.quarkiverse.githubaction.Context context>;
v7 = interfaceinvoke v6.<io.quarkiverse.githubaction.Context: java.lang.String getGitHubApiUrl()>();
v8 = virtualinvoke v5.<org.kohsuke.github.GitHubBuilder: org.kohsuke.github.GitHubBuilder withEndpoint(java.lang.String)>(v7);
v9 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: io.quarkiverse.githubaction.Inputs inputs>;
v10 = interfaceinvoke v9.<io.quarkiverse.githubaction.Inputs: java.util.Optional getGitHubToken()>();
v11 = virtualinvoke v10.<java.util.Optional: java.lang.Object get()>();
v12 = virtualinvoke v8.<org.kohsuke.github.GitHubBuilder: org.kohsuke.github.GitHubBuilder withAppInstallationToken(java.lang.String)>(v11);
v1 = virtualinvoke v12.<org.kohsuke.github.GitHubBuilder: org.kohsuke.github.GitHub build()>();
virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.GHRateLimit getRateLimit()>();
goto label04;
label03:
v1 = staticinvoke <org.kohsuke.github.GitHub: org.kohsuke.github.GitHub offline()>();
label04:
v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: org.kohsuke.github.GitHub gitHubClient> = v1;
label05:
goto label07;
label06:
v13 := @caughtexception;
v14 = new java.lang.IllegalStateException;
specialinvoke v14.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to initialize the GitHub API client, is the token valid?", v13);
throw v14;
label07:
exitmonitor v0;
label08:
goto label10;
label09:
v15 := @caughtexception;
exitmonitor v0;
throw v15;
label10:
return v1;
catch java.lang.Exception from label02 to label05 with label06;
catch java.lang.Throwable from label01 to label08 with label09;
}
public io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClient getDynamicGraphQLClient()
{
java.lang.Throwable v19;
java.lang.IllegalStateException v18, v4;
java.lang.Object[] v10;
io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClientBuilder v15, v6, v9;
io.quarkiverse.githubaction.Context v7;
java.lang.String v14, v8;
boolean v3;
io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClient v16, v5;
java.lang.Exception v17;
io.quarkiverse.githubaction.Inputs v1, v11;
io.quarkiverse.githubaction.runtime.GitHubEvent v0;
java.util.Optional v12, v2;
java.lang.Object v13;
v0 := @this: io.quarkiverse.githubaction.runtime.GitHubEvent;
v1 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: io.quarkiverse.githubaction.Inputs inputs>;
v2 = interfaceinvoke v1.<io.quarkiverse.githubaction.Inputs: java.util.Optional getGitHubToken()>();
v3 = virtualinvoke v2.<java.util.Optional: boolean isEmpty()>();
if v3 == 0 goto label1;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No GitHub token provided, unable to initialize the GitHub GraphQL client");
throw v4;
label1:
v5 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClient gitHubGraphQLClient>;
if v5 != null goto label9;
entermonitor v0;
label2:
v5 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClient gitHubGraphQLClient>;
if v5 != null goto label6;
label3:
v6 = staticinvoke <io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClientBuilder: io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClientBuilder newBuilder()>();
v7 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: io.quarkiverse.githubaction.Context context>;
v8 = interfaceinvoke v7.<io.quarkiverse.githubaction.Context: java.lang.String getGithubGraphQLUrl()>();
v9 = interfaceinvoke v6.<io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClientBuilder: io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClientBuilder url(java.lang.String)>(v8);
v10 = newarray (java.lang.Object)[1];
v11 = v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: io.quarkiverse.githubaction.Inputs inputs>;
v12 = interfaceinvoke v11.<io.quarkiverse.githubaction.Inputs: java.util.Optional getGitHubToken()>();
v13 = virtualinvoke v12.<java.util.Optional: java.lang.Object get()>();
v10[0] = v13;
v14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Bearer %s", v10);
v15 = interfaceinvoke v9.<io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClientBuilder: io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClientBuilder header(java.lang.String,java.lang.String)>("Authorization", v14);
v16 = interfaceinvoke v15.<io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClientBuilder: io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClient build()>();
v5 = v16;
v0.<io.quarkiverse.githubaction.runtime.GitHubEvent: io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClient gitHubGraphQLClient> = v16;
interfaceinvoke v16.<io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClient: io.smallrye.graphql.client.Response executeSync(java.lang.String)>("query {\nrateLimit {\n    limit\n    cost\n    remaining\n    resetAt\n  }\n}");
label4:
goto label6;
label5:
v17 := @caughtexception;
v18 = new java.lang.IllegalStateException;
specialinvoke v18.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to initialize the GitHub GraphQL client, is the token valid?", v17);
throw v18;
label6:
exitmonitor v0;
label7:
goto label9;
label8:
v19 := @caughtexception;
exitmonitor v0;
throw v19;
label9:
return v5;
catch java.lang.Exception from label3 to label4 with label5;
catch java.lang.Throwable from label2 to label7 with label8;
}
}