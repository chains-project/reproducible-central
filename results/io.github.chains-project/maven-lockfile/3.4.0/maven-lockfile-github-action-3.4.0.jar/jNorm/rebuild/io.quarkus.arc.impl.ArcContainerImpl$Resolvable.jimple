final class io.quarkus.arc.impl.ArcContainerImpl$Resolvable extends java.lang.Object
{
private static final java.lang.'annotation'.Annotation[] ANY_QUALIFIER;
final java.lang.reflect.Type requiredType;
final java.lang.'annotation'.Annotation[] qualifiers;
void <init>(java.lang.reflect.Type, java.lang.'annotation'.Annotation[])
{
io.quarkus.arc.impl.ArcContainerImpl$Resolvable v0;
java.lang.'annotation'.Annotation[] v10, v2;
java.lang.reflect.Type v1;
java.lang.Class v3, v4, v6, v8;
boolean v5, v7, v9;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl$Resolvable;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = staticinvoke <io.quarkus.arc.impl.Reflections: java.lang.Class getRawType(java.lang.reflect.Type)>(v1);
v4 = class "Ljakarta/enterprise/event/Event;";
v5 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v5 != 0 goto label1;
v6 = class "Ljakarta/enterprise/inject/Instance;";
v7 = virtualinvoke v6.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v7 != 0 goto label1;
v8 = class "Ljakarta/enterprise/inject/spi/InjectionPoint;";
v9 = virtualinvoke v8.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v9 == 0 goto label2;
label1:
v0.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.reflect.Type requiredType> = v3;
v10 = <io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.'annotation'.Annotation[] ANY_QUALIFIER>;
v0.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.'annotation'.Annotation[] qualifiers> = v10;
goto label3;
label2:
v0.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.reflect.Type requiredType> = v1;
v0.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.'annotation'.Annotation[] qualifiers> = v2;
label3:
return;
}
public int hashCode()
{
io.quarkus.arc.impl.ArcContainerImpl$Resolvable v0;
java.lang.'annotation'.Annotation[] v1;
java.lang.reflect.Type v5, v7;
int v2, v3, v4, v6, v8;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl$Resolvable;
v1 = v0.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.'annotation'.Annotation[] qualifiers>;
v2 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>(v1);
v3 = 31 + v2;
v4 = 31 * v3;
v5 = v0.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.reflect.Type requiredType>;
if v5 != null goto label1;
v6 = 0;
goto label2;
label1:
v7 = v0.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.reflect.Type requiredType>;
v6 = virtualinvoke v7.<java.lang.Object: int hashCode()>();
label2:
v8 = v4 + v6;
return v8;
}
public boolean equals(java.lang.Object)
{
io.quarkus.arc.impl.ArcContainerImpl$Resolvable v0;
java.lang.'annotation'.Annotation[] v8, v9;
java.lang.reflect.Type v3, v4, v5, v6;
java.lang.Object v1;
boolean v10, v2, v7;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl$Resolvable;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 != null goto label2;
return 0;
label2:
v2 = v1 instanceof io.quarkus.arc.impl.ArcContainerImpl$Resolvable;
if v2 != 0 goto label3;
return 0;
label3:
v3 = v0.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.reflect.Type requiredType>;
if v3 != null goto label4;
v4 = v1.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.reflect.Type requiredType>;
if v4 == null goto label5;
return 0;
label4:
v5 = v0.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.reflect.Type requiredType>;
v6 = v1.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.reflect.Type requiredType>;
v7 = virtualinvoke v5.<java.lang.Object: boolean equals(java.lang.Object)>(v6);
if v7 != 0 goto label5;
return 0;
label5:
v8 = v0.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.'annotation'.Annotation[] qualifiers>;
v9 = v1.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.'annotation'.Annotation[] qualifiers>;
v10 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>(v8, v9);
return v10;
}
static void <clinit>()
{
java.lang.'annotation'.Annotation[] v0;
jakarta.enterprise.inject.Any$Literal v1;
v0 = newarray (java.lang.'annotation'.Annotation)[1];
v1 = <jakarta.enterprise.inject.Any$Literal: jakarta.enterprise.inject.Any$Literal INSTANCE>;
v0[0] = v1;
<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.'annotation'.Annotation[] ANY_QUALIFIER> = v0;
return;
}
}