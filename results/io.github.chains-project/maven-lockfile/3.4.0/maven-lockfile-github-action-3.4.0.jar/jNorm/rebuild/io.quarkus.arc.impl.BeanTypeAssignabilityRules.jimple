class io.quarkus.arc.impl.BeanTypeAssignabilityRules extends java.lang.Object
{
private static final io.quarkus.arc.impl.BeanTypeAssignabilityRules INSTANCE;
public static io.quarkus.arc.impl.BeanTypeAssignabilityRules instance()
{
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
v0 = <io.quarkus.arc.impl.BeanTypeAssignabilityRules: io.quarkus.arc.impl.BeanTypeAssignabilityRules INSTANCE>;
return v0;
}
protected void <init>()
{
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
v0 := @this: io.quarkus.arc.impl.BeanTypeAssignabilityRules;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public boolean matches(java.lang.reflect.Type, java.util.Set)
{
java.util.Iterator v3;
java.lang.reflect.Type v1;
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
java.util.Set v2;
java.lang.Object v5;
boolean v4, v6;
v0 := @this: io.quarkus.arc.impl.BeanTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.util.Set;
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = virtualinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean matches(java.lang.reflect.Type,java.lang.reflect.Type)>(v1, v5);
if v6 == 0 goto label1;
return 1;
label2:
return 0;
}
protected boolean matches(java.lang.reflect.Type, java.lang.reflect.Type)
{
java.lang.reflect.Type v1, v2, v3, v4;
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
boolean v5;
v0 := @this: io.quarkus.arc.impl.BeanTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.lang.reflect.Type;
v3 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.reflect.Type boxedType(java.lang.reflect.Type)>(v1);
v4 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.reflect.Type boxedType(java.lang.reflect.Type)>(v2);
v5 = specialinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean matchesNoBoxing(java.lang.reflect.Type,java.lang.reflect.Type)>(v3, v4);
return v5;
}
private boolean matchesNoBoxing(java.lang.reflect.Type, java.lang.reflect.Type)
{
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
boolean v10, v11, v13, v14, v15, v17, v18, v21, v3, v4, v7, v8, v9;
java.lang.reflect.ParameterizedType v12, v16, v19, v20;
java.lang.reflect.Type v1, v2, v5, v6;
v0 := @this: io.quarkus.arc.impl.BeanTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.lang.reflect.Type;
v3 = staticinvoke <io.quarkus.arc.impl.Types: boolean isArray(java.lang.reflect.Type)>(v1);
if v3 == 0 goto label1;
v4 = staticinvoke <io.quarkus.arc.impl.Types: boolean isArray(java.lang.reflect.Type)>(v2);
if v4 == 0 goto label1;
v5 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>(v1);
v6 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>(v2);
v7 = specialinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean matchesNoBoxing(java.lang.reflect.Type,java.lang.reflect.Type)>(v5, v6);
return v7;
label1:
v8 = v1 instanceof java.lang.Class;
if v8 == 0 goto label3;
v9 = v2 instanceof java.lang.Class;
if v9 == 0 goto label2;
v10 = specialinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean matches(java.lang.Class,java.lang.Class)>(v1, v2);
return v10;
label2:
v11 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v2);
if v11 == 0 goto label5;
v12 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v2);
v13 = specialinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean matches(java.lang.Class,java.lang.reflect.ParameterizedType)>(v1, v12);
return v13;
label3:
v14 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v1);
if v14 == 0 goto label5;
v15 = v2 instanceof java.lang.Class;
if v15 == 0 goto label4;
v16 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v1);
v17 = specialinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean matches(java.lang.Class,java.lang.reflect.ParameterizedType)>(v2, v16);
return v17;
label4:
v18 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v2);
if v18 == 0 goto label5;
v19 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v1);
v20 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v2);
v21 = specialinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean matches(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>(v19, v20);
return v21;
label5:
return 0;
}
private boolean matches(java.lang.Class, java.lang.Class)
{
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
java.lang.Class v1, v2;
boolean v3;
v0 := @this: io.quarkus.arc.impl.BeanTypeAssignabilityRules;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.Class;
v3 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v2);
return v3;
}
private boolean matches(java.lang.Class, java.lang.reflect.ParameterizedType)
{
java.lang.reflect.ParameterizedType v2;
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
java.lang.reflect.Type[] v5;
java.lang.Class v1, v3;
boolean v4, v6;
v0 := @this: io.quarkus.arc.impl.BeanTypeAssignabilityRules;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.reflect.ParameterizedType;
v3 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class getRawType(java.lang.reflect.Type)>(v2);
v4 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v4 != 0 goto label1;
return 0;
label1:
v5 = interfaceinvoke v2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v6 = staticinvoke <io.quarkus.arc.impl.Types: boolean isArrayOfUnboundedTypeVariablesOrObjects(java.lang.reflect.Type[])>(v5);
return v6;
}
private boolean matches(java.lang.reflect.ParameterizedType, java.lang.reflect.ParameterizedType)
{
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
int v12, v14, v7, v9;
java.lang.String v11;
boolean v19, v5;
java.lang.IllegalArgumentException v10;
java.lang.reflect.ParameterizedType v1, v2;
java.lang.reflect.Type v16, v18, v3, v4;
java.lang.reflect.Type[] v13, v15, v17, v6, v8;
v0 := @this: io.quarkus.arc.impl.BeanTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.ParameterizedType;
v2 := @parameter1: java.lang.reflect.ParameterizedType;
v3 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v4 = interfaceinvoke v2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v5 = virtualinvoke v3.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
if v5 != 0 goto label1;
return 0;
label1:
v6 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v7 = lengthof v6;
v8 = interfaceinvoke v2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v9 = lengthof v8;
if v7 == v9 goto label2;
v10 = new java.lang.IllegalArgumentException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid argument combination \u0001; \u0001");
specialinvoke v10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v11);
throw v10;
label2:
v12 = 0;
label3:
v13 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v14 = lengthof v13;
if v12 >= v14 goto label5;
v15 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v16 = v15[v12];
v17 = interfaceinvoke v2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v18 = v17[v12];
v19 = virtualinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean parametersMatch(java.lang.reflect.Type,java.lang.reflect.Type)>(v16, v18);
if v19 != 0 goto label4;
return 0;
label4:
v12 = v12 + 1;
goto label3;
label5:
return 1;
}
protected boolean parametersMatch(java.lang.reflect.Type, java.lang.reflect.Type)
{
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
boolean v10, v11, v12, v13, v14, v15, v16, v17, v3, v4, v5, v6, v7, v8, v9;
java.lang.reflect.Type v1, v2;
v0 := @this: io.quarkus.arc.impl.BeanTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.lang.reflect.Type;
v3 = staticinvoke <io.quarkus.arc.impl.Types: boolean isActualType(java.lang.reflect.Type)>(v1);
if v3 == 0 goto label1;
v4 = staticinvoke <io.quarkus.arc.impl.Types: boolean isActualType(java.lang.reflect.Type)>(v2);
if v4 == 0 goto label1;
v5 = virtualinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean matches(java.lang.reflect.Type,java.lang.reflect.Type)>(v1, v2);
return v5;
label1:
v6 = v1 instanceof java.lang.reflect.WildcardType;
if v6 == 0 goto label2;
v7 = staticinvoke <io.quarkus.arc.impl.Types: boolean isActualType(java.lang.reflect.Type)>(v2);
if v7 == 0 goto label2;
v8 = specialinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean parametersMatch(java.lang.reflect.WildcardType,java.lang.reflect.Type)>(v1, v2);
return v8;
label2:
v9 = v1 instanceof java.lang.reflect.WildcardType;
if v9 == 0 goto label3;
v10 = v2 instanceof java.lang.reflect.TypeVariable;
if v10 == 0 goto label3;
v11 = virtualinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean parametersMatch(java.lang.reflect.WildcardType,java.lang.reflect.TypeVariable)>(v1, v2);
return v11;
label3:
v12 = staticinvoke <io.quarkus.arc.impl.Types: boolean isActualType(java.lang.reflect.Type)>(v1);
if v12 == 0 goto label4;
v13 = v2 instanceof java.lang.reflect.TypeVariable;
if v13 == 0 goto label4;
v14 = specialinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean parametersMatch(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>(v1, v2);
return v14;
label4:
v15 = v1 instanceof java.lang.reflect.TypeVariable;
if v15 == 0 goto label5;
v16 = v2 instanceof java.lang.reflect.TypeVariable;
if v16 == 0 goto label5;
v17 = virtualinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean parametersMatch(java.lang.reflect.TypeVariable,java.lang.reflect.TypeVariable)>(v1, v2);
return v17;
label5:
return 0;
}
private boolean parametersMatch(java.lang.reflect.WildcardType, java.lang.reflect.Type)
{
java.lang.reflect.Type v2;
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
java.lang.reflect.WildcardType v1;
boolean v3, v4, v5;
v0 := @this: io.quarkus.arc.impl.BeanTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.WildcardType;
v2 := @parameter1: java.lang.reflect.Type;
v3 = virtualinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean lowerBoundsOfWildcardMatch(java.lang.reflect.Type,java.lang.reflect.WildcardType)>(v2, v1);
if v3 == 0 goto label1;
v4 = virtualinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean upperBoundsOfWildcardMatch(java.lang.reflect.WildcardType,java.lang.reflect.Type)>(v1, v2);
if v4 == 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
protected boolean parametersMatch(java.lang.reflect.WildcardType, java.lang.reflect.TypeVariable)
{
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
java.lang.reflect.TypeVariable v2;
java.lang.reflect.WildcardType v1;
java.lang.reflect.Type[] v3, v5;
boolean v4, v6, v7, v8;
v0 := @this: io.quarkus.arc.impl.BeanTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.WildcardType;
v2 := @parameter1: java.lang.reflect.TypeVariable;
v3 = staticinvoke <io.quarkus.arc.impl.BeanTypeAssignabilityRules: java.lang.reflect.Type[] getUppermostTypeVariableBounds(java.lang.reflect.TypeVariable)>(v2);
v4 = virtualinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean lowerBoundsOfWildcardMatch(java.lang.reflect.Type[],java.lang.reflect.WildcardType)>(v3, v1);
if v4 != 0 goto label1;
return 0;
label1:
v5 = interfaceinvoke v1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();
v6 = virtualinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean boundsMatch(java.lang.reflect.Type[],java.lang.reflect.Type[])>(v5, v3);
if v6 != 0 goto label2;
v7 = virtualinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean boundsMatch(java.lang.reflect.Type[],java.lang.reflect.Type[])>(v3, v5);
if v7 == 0 goto label3;
label2:
v8 = 1;
goto label4;
label3:
v8 = 0;
label4:
return v8;
}
private boolean parametersMatch(java.lang.reflect.Type, java.lang.reflect.TypeVariable)
{
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
java.lang.reflect.TypeVariable v2;
java.lang.reflect.Type v1, v6;
int v4, v5;
java.lang.reflect.Type[] v3;
boolean v7;
v0 := @this: io.quarkus.arc.impl.BeanTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.lang.reflect.TypeVariable;
v3 = staticinvoke <io.quarkus.arc.impl.BeanTypeAssignabilityRules: java.lang.reflect.Type[] getUppermostTypeVariableBounds(java.lang.reflect.TypeVariable)>(v2);
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label3;
v6 = v3[v5];
v7 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v6, v1);
if v7 != 0 goto label2;
return 0;
label2:
v5 = v5 + 1;
goto label1;
label3:
return 1;
}
protected boolean parametersMatch(java.lang.reflect.TypeVariable, java.lang.reflect.TypeVariable)
{
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
java.lang.reflect.TypeVariable v1, v2;
java.lang.reflect.Type[] v3, v4;
boolean v5;
v0 := @this: io.quarkus.arc.impl.BeanTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.TypeVariable;
v2 := @parameter1: java.lang.reflect.TypeVariable;
v3 = staticinvoke <io.quarkus.arc.impl.BeanTypeAssignabilityRules: java.lang.reflect.Type[] getUppermostTypeVariableBounds(java.lang.reflect.TypeVariable)>(v2);
v4 = staticinvoke <io.quarkus.arc.impl.BeanTypeAssignabilityRules: java.lang.reflect.Type[] getUppermostTypeVariableBounds(java.lang.reflect.TypeVariable)>(v1);
v5 = virtualinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean boundsMatch(java.lang.reflect.Type[],java.lang.reflect.Type[])>(v3, v4);
return v5;
}
static java.lang.reflect.Type[] getUppermostTypeVariableBounds(java.lang.reflect.TypeVariable)
{
java.lang.reflect.TypeVariable v0;
java.lang.reflect.Type v2, v5;
java.lang.reflect.Type[] v1, v4, v6, v7;
boolean v3;
v0 := @parameter0: java.lang.reflect.TypeVariable;
v1 = interfaceinvoke v0.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
v2 = v1[0];
v3 = v2 instanceof java.lang.reflect.TypeVariable;
if v3 == 0 goto label1;
v4 = interfaceinvoke v0.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
v5 = v4[0];
v6 = staticinvoke <io.quarkus.arc.impl.BeanTypeAssignabilityRules: java.lang.reflect.Type[] getUppermostTypeVariableBounds(java.lang.reflect.TypeVariable)>(v5);
return v6;
label1:
v7 = interfaceinvoke v0.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
return v7;
}
private java.lang.reflect.Type[] getUppermostBounds(java.lang.reflect.Type[])
{
java.lang.reflect.Type v2, v4;
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
java.lang.reflect.Type[] v1, v5;
boolean v3;
v0 := @this: io.quarkus.arc.impl.BeanTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.Type[];
v2 = v1[0];
v3 = v2 instanceof java.lang.reflect.TypeVariable;
if v3 == 0 goto label1;
v4 = v1[0];
v5 = staticinvoke <io.quarkus.arc.impl.BeanTypeAssignabilityRules: java.lang.reflect.Type[] getUppermostTypeVariableBounds(java.lang.reflect.TypeVariable)>(v4);
return v5;
label1:
return v1;
}
protected boolean boundsMatch(java.lang.reflect.Type[], java.lang.reflect.Type[])
{
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
java.lang.reflect.Type v7;
int v5, v6;
java.lang.reflect.Type[] v1, v2, v3, v4;
boolean v8;
v0 := @this: io.quarkus.arc.impl.BeanTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.Type[];
v2 := @parameter1: java.lang.reflect.Type[];
v3 = specialinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: java.lang.reflect.Type[] getUppermostBounds(java.lang.reflect.Type[])>(v1);
v4 = specialinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: java.lang.reflect.Type[] getUppermostBounds(java.lang.reflect.Type[])>(v2);
v5 = lengthof v3;
v6 = 0;
label1:
if v6 >= v5 goto label3;
v7 = v3[v6];
v8 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFromAtLeastOne(java.lang.reflect.Type,java.lang.reflect.Type[])>(v7, v4);
if v8 != 0 goto label2;
return 0;
label2:
v6 = v6 + 1;
goto label1;
label3:
return 1;
}
boolean lowerBoundsOfWildcardMatch(java.lang.reflect.Type, java.lang.reflect.WildcardType)
{
java.lang.reflect.Type v1;
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
java.lang.reflect.WildcardType v2;
java.lang.reflect.Type[] v3;
boolean v4;
v0 := @this: io.quarkus.arc.impl.BeanTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.lang.reflect.WildcardType;
v3 = newarray (java.lang.reflect.Type)[1];
v3[0] = v1;
v4 = virtualinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean lowerBoundsOfWildcardMatch(java.lang.reflect.Type[],java.lang.reflect.WildcardType)>(v3, v2);
return v4;
}
boolean lowerBoundsOfWildcardMatch(java.lang.reflect.Type[], java.lang.reflect.WildcardType)
{
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
java.lang.reflect.WildcardType v2;
int v4;
java.lang.reflect.Type[] v1, v3, v5;
boolean v6;
v0 := @this: io.quarkus.arc.impl.BeanTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.Type[];
v2 := @parameter1: java.lang.reflect.WildcardType;
v3 = interfaceinvoke v2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();
v4 = lengthof v3;
if v4 <= 0 goto label1;
v5 = interfaceinvoke v2.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();
v6 = virtualinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean boundsMatch(java.lang.reflect.Type[],java.lang.reflect.Type[])>(v1, v5);
if v6 != 0 goto label1;
return 0;
label1:
return 1;
}
boolean upperBoundsOfWildcardMatch(java.lang.reflect.WildcardType, java.lang.reflect.Type)
{
java.lang.reflect.Type v2;
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
java.lang.reflect.WildcardType v1;
java.lang.reflect.Type[] v3, v4;
boolean v5;
v0 := @this: io.quarkus.arc.impl.BeanTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.WildcardType;
v2 := @parameter1: java.lang.reflect.Type;
v3 = interfaceinvoke v1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();
v4 = newarray (java.lang.reflect.Type)[1];
v4[0] = v2;
v5 = virtualinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean boundsMatch(java.lang.reflect.Type[],java.lang.reflect.Type[])>(v3, v4);
return v5;
}
static void <clinit>()
{
io.quarkus.arc.impl.BeanTypeAssignabilityRules v0;
v0 = new io.quarkus.arc.impl.BeanTypeAssignabilityRules;
specialinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: void <init>()>();
<io.quarkus.arc.impl.BeanTypeAssignabilityRules: io.quarkus.arc.impl.BeanTypeAssignabilityRules INSTANCE> = v0;
return;
}
}