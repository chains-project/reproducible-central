class io.quarkus.arc.impl.HierarchyDiscovery extends java.lang.Object
{
private final java.util.Map types;
private final java.util.Map resolvedTypeVariables;
private final io.quarkus.arc.impl.TypeResolver resolver;
private final java.util.Set typeClosure;
void <init>(java.lang.reflect.Type)
{
java.lang.reflect.Type v1;
io.quarkus.arc.impl.TypeResolver v2;
java.util.HashMap v3;
io.quarkus.arc.impl.HierarchyDiscovery v0;
v0 := @this: io.quarkus.arc.impl.HierarchyDiscovery;
v1 := @parameter0: java.lang.reflect.Type;
v2 = new io.quarkus.arc.impl.TypeResolver;
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>()>();
specialinvoke v2.<io.quarkus.arc.impl.TypeResolver: void <init>(java.util.Map)>(v3);
specialinvoke v0.<io.quarkus.arc.impl.HierarchyDiscovery: void <init>(java.lang.reflect.Type,io.quarkus.arc.impl.TypeResolver)>(v1, v2);
return;
}
void <init>(java.lang.reflect.Type, io.quarkus.arc.impl.TypeResolver)
{
java.util.Collection v7;
java.util.HashMap v3;
io.quarkus.arc.impl.HierarchyDiscovery v0;
java.util.HashSet v5;
java.lang.reflect.Type v1;
java.util.Map v4, v6;
io.quarkus.arc.impl.TypeResolver v2;
v0 := @this: io.quarkus.arc.impl.HierarchyDiscovery;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: io.quarkus.arc.impl.TypeResolver;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>()>();
v0.<io.quarkus.arc.impl.HierarchyDiscovery: java.util.Map types> = v3;
v0.<io.quarkus.arc.impl.HierarchyDiscovery: io.quarkus.arc.impl.TypeResolver resolver> = v2;
v4 = virtualinvoke v2.<io.quarkus.arc.impl.TypeResolver: java.util.Map getResolvedTypeVariables()>();
v0.<io.quarkus.arc.impl.HierarchyDiscovery: java.util.Map resolvedTypeVariables> = v4;
virtualinvoke v0.<io.quarkus.arc.impl.HierarchyDiscovery: void discoverTypes(java.lang.reflect.Type,boolean)>(v1, 0);
v5 = new java.util.HashSet;
v6 = v0.<io.quarkus.arc.impl.HierarchyDiscovery: java.util.Map types>;
v7 = interfaceinvoke v6.<java.util.Map: java.util.Collection values()>();
specialinvoke v5.<java.util.HashSet: void <init>(java.util.Collection)>(v7);
v0.<io.quarkus.arc.impl.HierarchyDiscovery: java.util.Set typeClosure> = v5;
return;
}
public java.util.Set getTypeClosure()
{
java.util.Set v1;
io.quarkus.arc.impl.HierarchyDiscovery v0;
v0 := @this: io.quarkus.arc.impl.HierarchyDiscovery;
v1 = v0.<io.quarkus.arc.impl.HierarchyDiscovery: java.util.Set typeClosure>;
return v1;
}
public java.util.Map getTypeMap()
{
io.quarkus.arc.impl.HierarchyDiscovery v0;
java.util.Map v1;
v0 := @this: io.quarkus.arc.impl.HierarchyDiscovery;
v1 = v0.<io.quarkus.arc.impl.HierarchyDiscovery: java.util.Map types>;
return v1;
}
protected void discoverTypes(java.lang.reflect.Type, boolean)
{
java.util.Map v11, v18, v4;
boolean v12, v15, v2, v3, v6;
io.quarkus.arc.impl.HierarchyDiscovery v0;
java.lang.reflect.ParameterizedType v13;
java.lang.reflect.Type v1, v14, v7;
java.lang.reflect.TypeVariable[] v16;
java.lang.reflect.Type[] v17;
java.lang.Class v10, v5, v8;
java.lang.Object v9;
v0 := @this: io.quarkus.arc.impl.HierarchyDiscovery;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: boolean;
if v2 != 0 goto label1;
v2 = staticinvoke <io.quarkus.arc.impl.Types: boolean isRawGenericType(java.lang.reflect.Type)>(v1);
label1:
v3 = v1 instanceof java.lang.Class;
if v3 == 0 goto label2;
v4 = v0.<io.quarkus.arc.impl.HierarchyDiscovery: java.util.Map types>;
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v1);
virtualinvoke v0.<io.quarkus.arc.impl.HierarchyDiscovery: void discoverFromClass(java.lang.Class,boolean)>(v1, v2);
goto label5;
label2:
if v2 == 0 goto label3;
v5 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class getRawType(java.lang.reflect.Type)>(v1);
virtualinvoke v0.<io.quarkus.arc.impl.HierarchyDiscovery: void discoverTypes(java.lang.reflect.Type,boolean)>(v5, v2);
goto label5;
label3:
v6 = v1 instanceof java.lang.reflect.GenericArrayType;
if v6 == 0 goto label4;
v7 = interfaceinvoke v1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v8 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class getRawType(java.lang.reflect.Type)>(v7);
if v8 == null goto label5;
v9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v8, 0);
v10 = virtualinvoke v9.<java.lang.Object: java.lang.Class getClass()>();
v11 = v0.<io.quarkus.arc.impl.HierarchyDiscovery: java.util.Map types>;
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, v1);
virtualinvoke v0.<io.quarkus.arc.impl.HierarchyDiscovery: void discoverFromClass(java.lang.Class,boolean)>(v10, v2);
goto label5;
label4:
v12 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v1);
if v12 == 0 goto label5;
v13 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v1);
v14 = interfaceinvoke v13.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v15 = v14 instanceof java.lang.Class;
if v15 == 0 goto label5;
v16 = virtualinvoke v14.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v17 = interfaceinvoke v13.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
specialinvoke v0.<io.quarkus.arc.impl.HierarchyDiscovery: void processTypeVariables(java.lang.reflect.TypeVariable[],java.lang.reflect.Type[])>(v16, v17);
v18 = v0.<io.quarkus.arc.impl.HierarchyDiscovery: java.util.Map types>;
interfaceinvoke v18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v14, v1);
virtualinvoke v0.<io.quarkus.arc.impl.HierarchyDiscovery: void discoverFromClass(java.lang.Class,boolean)>(v14, v2);
label5:
return;
}
protected void discoverFromClass(java.lang.Class, boolean)
{
java.lang.reflect.Type v4, v6;
java.lang.Class v1, v3, v5;
io.quarkus.arc.impl.HierarchyDiscovery v0;
boolean v2;
v0 := @this: io.quarkus.arc.impl.HierarchyDiscovery;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: boolean;
v3 = virtualinvoke v1.<java.lang.Class: java.lang.Class getSuperclass()>();
if v3 == null goto label1;
v4 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();
v5 = virtualinvoke v1.<java.lang.Class: java.lang.Class getSuperclass()>();
v6 = virtualinvoke v0.<io.quarkus.arc.impl.HierarchyDiscovery: java.lang.reflect.Type processAndResolveType(java.lang.reflect.Type,java.lang.Class)>(v4, v5);
virtualinvoke v0.<io.quarkus.arc.impl.HierarchyDiscovery: void discoverTypes(java.lang.reflect.Type,boolean)>(v6, v2);
label1:
virtualinvoke v0.<io.quarkus.arc.impl.HierarchyDiscovery: void discoverInterfaces(java.lang.Class,boolean)>(v1, v2);
return;
}
protected void discoverInterfaces(java.lang.Class, boolean)
{
java.lang.Class[] v4;
io.quarkus.arc.impl.HierarchyDiscovery v0;
java.lang.reflect.Type v11, v9;
int v5, v6, v7, v8;
java.lang.reflect.Type[] v3;
java.lang.Class v1, v10;
boolean v2;
v0 := @this: io.quarkus.arc.impl.HierarchyDiscovery;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: boolean;
v3 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();
v4 = virtualinvoke v1.<java.lang.Class: java.lang.Class[] getInterfaces()>();
v5 = lengthof v3;
v6 = lengthof v4;
if v5 != v6 goto label2;
v7 = 0;
label1:
v8 = lengthof v4;
if v7 >= v8 goto label2;
v9 = v3[v7];
v10 = v4[v7];
v11 = virtualinvoke v0.<io.quarkus.arc.impl.HierarchyDiscovery: java.lang.reflect.Type processAndResolveType(java.lang.reflect.Type,java.lang.Class)>(v9, v10);
virtualinvoke v0.<io.quarkus.arc.impl.HierarchyDiscovery: void discoverTypes(java.lang.reflect.Type,boolean)>(v11, v2);
v7 = v7 + 1;
goto label1;
label2:
return;
}
protected java.lang.reflect.Type processAndResolveType(java.lang.reflect.Type, java.lang.Class)
{
java.lang.RuntimeException v9;
io.quarkus.arc.impl.HierarchyDiscovery v0;
java.lang.reflect.ParameterizedType v4;
java.lang.reflect.Type v1, v7;
java.lang.reflect.TypeVariable[] v5;
java.lang.reflect.Type[] v6;
java.lang.Class v2;
java.lang.String v10;
boolean v3, v8;
v0 := @this: io.quarkus.arc.impl.HierarchyDiscovery;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.lang.Class;
v3 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v1);
if v3 == 0 goto label1;
v4 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v1);
v5 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v6 = interfaceinvoke v4.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
specialinvoke v0.<io.quarkus.arc.impl.HierarchyDiscovery: void processTypeVariables(java.lang.reflect.TypeVariable[],java.lang.reflect.Type[])>(v5, v6);
v7 = virtualinvoke v0.<io.quarkus.arc.impl.HierarchyDiscovery: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>(v4);
return v7;
label1:
v8 = v1 instanceof java.lang.Class;
if v8 == 0 goto label2;
return v1;
label2:
v9 = new java.lang.RuntimeException;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected type: \u0001");
specialinvoke v9.<java.lang.RuntimeException: void <init>(java.lang.String)>(v10);
throw v9;
}
private void processTypeVariables(java.lang.reflect.TypeVariable[], java.lang.reflect.Type[])
{
java.lang.reflect.Type v6;
java.lang.reflect.TypeVariable[] v1;
java.lang.reflect.TypeVariable v5;
int v3, v4;
java.lang.reflect.Type[] v2;
io.quarkus.arc.impl.HierarchyDiscovery v0;
v0 := @this: io.quarkus.arc.impl.HierarchyDiscovery;
v1 := @parameter0: java.lang.reflect.TypeVariable[];
v2 := @parameter1: java.lang.reflect.Type[];
v3 = 0;
label1:
v4 = lengthof v1;
if v3 >= v4 goto label2;
v5 = v1[v3];
v6 = v2[v3];
specialinvoke v0.<io.quarkus.arc.impl.HierarchyDiscovery: void processTypeVariable(java.lang.reflect.TypeVariable,java.lang.reflect.Type)>(v5, v6);
v3 = v3 + 1;
goto label1;
label2:
return;
}
private void processTypeVariable(java.lang.reflect.TypeVariable, java.lang.reflect.Type)
{
java.lang.reflect.Type v2;
java.lang.reflect.TypeVariable v1;
java.util.Map v4;
io.quarkus.arc.impl.HierarchyDiscovery v0;
boolean v3;
v0 := @this: io.quarkus.arc.impl.HierarchyDiscovery;
v1 := @parameter0: java.lang.reflect.TypeVariable;
v2 := @parameter1: java.lang.reflect.Type;
v3 = v2 instanceof java.lang.reflect.TypeVariable;
if v3 == 0 goto label1;
v2 = virtualinvoke v0.<io.quarkus.arc.impl.HierarchyDiscovery: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>(v2);
label1:
v4 = v0.<io.quarkus.arc.impl.HierarchyDiscovery: java.util.Map resolvedTypeVariables>;
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
return;
}
public java.lang.reflect.Type resolveType(java.lang.reflect.Type)
{
java.lang.reflect.Type v1, v6;
java.util.Map v3;
io.quarkus.arc.impl.TypeResolver v5;
java.lang.Object v4;
io.quarkus.arc.impl.HierarchyDiscovery v0;
boolean v2;
v0 := @this: io.quarkus.arc.impl.HierarchyDiscovery;
v1 := @parameter0: java.lang.reflect.Type;
v2 = v1 instanceof java.lang.Class;
if v2 == 0 goto label1;
v3 = v0.<io.quarkus.arc.impl.HierarchyDiscovery: java.util.Map types>;
v4 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v4 == null goto label1;
return v4;
label1:
v5 = v0.<io.quarkus.arc.impl.HierarchyDiscovery: io.quarkus.arc.impl.TypeResolver resolver>;
v6 = virtualinvoke v5.<io.quarkus.arc.impl.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>(v1);
return v6;
}
public io.quarkus.arc.impl.TypeResolver getResolver()
{
io.quarkus.arc.impl.TypeResolver v1;
io.quarkus.arc.impl.HierarchyDiscovery v0;
v0 := @this: io.quarkus.arc.impl.HierarchyDiscovery;
v1 = v0.<io.quarkus.arc.impl.HierarchyDiscovery: io.quarkus.arc.impl.TypeResolver resolver>;
return v1;
}
}