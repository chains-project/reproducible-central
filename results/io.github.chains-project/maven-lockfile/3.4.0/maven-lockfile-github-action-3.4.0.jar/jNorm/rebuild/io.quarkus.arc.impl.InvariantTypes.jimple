class io.quarkus.arc.impl.InvariantTypes extends java.lang.Object
{
private void <init>()
{
io.quarkus.arc.impl.InvariantTypes v0;
v0 := @this: io.quarkus.arc.impl.InvariantTypes;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static boolean isAssignableFrom(java.lang.reflect.Type, java.lang.reflect.Type)
{
boolean v10, v11, v12, v13, v14, v16, v17, v19, v2, v20, v23, v24, v26, v27, v29, v3, v31, v32, v33, v34, v36, v37, v38, v39, v4, v40, v42, v43, v44, v45, v47, v48, v49, v5, v50, v51, v6, v7, v8;
java.lang.reflect.Type v0, v1;
java.lang.IllegalArgumentException v15, v30, v41, v52, v53;
java.lang.reflect.ParameterizedType v18, v21, v22, v25, v28, v35, v46, v9;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: java.lang.reflect.Type;
v2 = v0 instanceof java.lang.reflect.WildcardType;
if v2 != 0 goto label01;
v3 = v1 instanceof java.lang.reflect.WildcardType;
if v3 == 0 goto label02;
label01:
v4 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v0, v1);
return v4;
label02:
v5 = v0 instanceof java.lang.Class;
if v5 == 0 goto label07;
v6 = v1 instanceof java.lang.Class;
if v6 == 0 goto label03;
v7 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.Class,java.lang.Class)>(v0, v1);
return v7;
label03:
v8 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v1);
if v8 == 0 goto label04;
v9 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v1);
v10 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.Class,java.lang.reflect.ParameterizedType)>(v0, v9);
return v10;
label04:
v11 = v1 instanceof java.lang.reflect.TypeVariable;
if v11 == 0 goto label05;
v12 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.Class,java.lang.reflect.TypeVariable)>(v0, v1);
return v12;
label05:
v13 = v1 instanceof java.lang.reflect.GenericArrayType;
if v13 == 0 goto label06;
v14 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.Class,java.lang.reflect.GenericArrayType)>(v0, v1);
return v14;
label06:
v15 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: java.lang.IllegalArgumentException unknownType(java.lang.reflect.Type)>(v1);
throw v15;
label07:
v16 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v0);
if v16 == 0 goto label12;
v17 = v1 instanceof java.lang.Class;
if v17 == 0 goto label08;
v18 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v0);
v19 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.reflect.ParameterizedType,java.lang.Class)>(v18, v1);
return v19;
label08:
v20 = v1 instanceof java.lang.reflect.ParameterizedType;
if v20 == 0 goto label09;
v21 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v0);
v22 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v1);
v23 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>(v21, v22);
return v23;
label09:
v24 = v1 instanceof java.lang.reflect.TypeVariable;
if v24 == 0 goto label10;
v25 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v0);
v26 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.reflect.ParameterizedType,java.lang.reflect.TypeVariable)>(v25, v1);
return v26;
label10:
v27 = v1 instanceof java.lang.reflect.GenericArrayType;
if v27 == 0 goto label11;
v28 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v0);
v29 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.reflect.ParameterizedType,java.lang.reflect.GenericArrayType)>(v28, v1);
return v29;
label11:
v30 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: java.lang.IllegalArgumentException unknownType(java.lang.reflect.Type)>(v1);
throw v30;
label12:
v31 = v0 instanceof java.lang.reflect.TypeVariable;
if v31 == 0 goto label17;
v32 = v1 instanceof java.lang.Class;
if v32 == 0 goto label13;
v33 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.reflect.TypeVariable,java.lang.Class)>(v0, v1);
return v33;
label13:
v34 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v1);
if v34 == 0 goto label14;
v35 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v1);
v36 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.reflect.TypeVariable,java.lang.reflect.ParameterizedType)>(v0, v35);
return v36;
label14:
v37 = v1 instanceof java.lang.reflect.TypeVariable;
if v37 == 0 goto label15;
v38 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.reflect.TypeVariable,java.lang.reflect.TypeVariable)>(v0, v1);
return v38;
label15:
v39 = v1 instanceof java.lang.reflect.GenericArrayType;
if v39 == 0 goto label16;
v40 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.reflect.TypeVariable,java.lang.reflect.GenericArrayType)>(v0, v1);
return v40;
label16:
v41 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: java.lang.IllegalArgumentException unknownType(java.lang.reflect.Type)>(v1);
throw v41;
label17:
v42 = v0 instanceof java.lang.reflect.GenericArrayType;
if v42 == 0 goto label22;
v43 = v1 instanceof java.lang.Class;
if v43 == 0 goto label18;
v44 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.reflect.GenericArrayType,java.lang.Class)>(v0, v1);
return v44;
label18:
v45 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v1);
if v45 == 0 goto label19;
v46 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v1);
v47 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.reflect.GenericArrayType,java.lang.reflect.ParameterizedType)>(v0, v46);
return v47;
label19:
v48 = v1 instanceof java.lang.reflect.TypeVariable;
if v48 == 0 goto label20;
v49 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.reflect.GenericArrayType,java.lang.reflect.TypeVariable)>(v0, v1);
return v49;
label20:
v50 = v1 instanceof java.lang.reflect.GenericArrayType;
if v50 == 0 goto label21;
v51 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.reflect.GenericArrayType,java.lang.reflect.GenericArrayType)>(v0, v1);
return v51;
label21:
v52 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: java.lang.IllegalArgumentException unknownType(java.lang.reflect.Type)>(v1);
throw v52;
label22:
v53 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: java.lang.IllegalArgumentException unknownType(java.lang.reflect.Type)>(v0);
throw v53;
}
static java.lang.IllegalArgumentException unknownType(java.lang.reflect.Type)
{
java.lang.String v2;
java.lang.IllegalArgumentException v1;
java.lang.reflect.Type v0;
v0 := @parameter0: java.lang.reflect.Type;
v1 = new java.lang.IllegalArgumentException;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unknown type: \u0001");
specialinvoke v1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v2);
return v1;
}
private static boolean isAssignableFrom(java.lang.Class, java.lang.Class)
{
java.lang.Class v0, v1, v2, v3;
boolean v4;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
v2 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class boxedClass(java.lang.Class)>(v0);
v3 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class boxedClass(java.lang.Class)>(v1);
v4 = virtualinvoke v2.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
return v4;
}
private static boolean isAssignableFrom(java.lang.Class, java.lang.reflect.ParameterizedType)
{
java.lang.Class v0;
java.lang.reflect.ParameterizedType v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.reflect.ParameterizedType;
return 0;
}
private static boolean isAssignableFrom(java.lang.Class, java.lang.reflect.TypeVariable)
{
java.lang.Class v0;
java.lang.reflect.TypeVariable v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.reflect.TypeVariable;
return 0;
}
private static boolean isAssignableFrom(java.lang.Class, java.lang.reflect.GenericArrayType)
{
java.lang.reflect.GenericArrayType v1;
java.lang.Class v0;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.reflect.GenericArrayType;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.ParameterizedType, java.lang.Class)
{
java.lang.Class v1;
java.lang.reflect.ParameterizedType v0;
v0 := @parameter0: java.lang.reflect.ParameterizedType;
v1 := @parameter1: java.lang.Class;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.ParameterizedType, java.lang.reflect.ParameterizedType)
{
int v11, v12, v7, v8;
java.lang.String v10;
boolean v15, v4;
java.lang.IllegalArgumentException v9;
java.lang.reflect.ParameterizedType v0, v1;
java.lang.reflect.Type v13, v14;
java.lang.reflect.Type[] v5, v6;
java.lang.Class v2, v3;
v0 := @parameter0: java.lang.reflect.ParameterizedType;
v1 := @parameter1: java.lang.reflect.ParameterizedType;
v2 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class getRawType(java.lang.reflect.Type)>(v0);
v3 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class getRawType(java.lang.reflect.Type)>(v1);
v4 = virtualinvoke v2.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v4 != 0 goto label1;
return 0;
label1:
v5 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v6 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v7 = lengthof v5;
v8 = lengthof v6;
if v7 == v8 goto label2;
v9 = new java.lang.IllegalArgumentException;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>(v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalida argument combination: \u0001 and \u0001");
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v9;
label2:
v11 = 0;
label3:
v12 = lengthof v5;
if v11 >= v12 goto label5;
v13 = v5[v11];
v14 = v6[v11];
v15 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v13, v14);
if v15 != 0 goto label4;
return 0;
label4:
v11 = v11 + 1;
goto label3;
label5:
return 1;
}
private static boolean isAssignableFrom(java.lang.reflect.ParameterizedType, java.lang.reflect.TypeVariable)
{
java.lang.reflect.ParameterizedType v0;
java.lang.reflect.TypeVariable v1;
v0 := @parameter0: java.lang.reflect.ParameterizedType;
v1 := @parameter1: java.lang.reflect.TypeVariable;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.ParameterizedType, java.lang.reflect.GenericArrayType)
{
java.lang.reflect.GenericArrayType v1;
java.lang.reflect.ParameterizedType v0;
v0 := @parameter0: java.lang.reflect.ParameterizedType;
v1 := @parameter1: java.lang.reflect.GenericArrayType;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.TypeVariable, java.lang.Class)
{
java.lang.Class v1;
java.lang.reflect.TypeVariable v0;
v0 := @parameter0: java.lang.reflect.TypeVariable;
v1 := @parameter1: java.lang.Class;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.TypeVariable, java.lang.reflect.ParameterizedType)
{
java.lang.reflect.ParameterizedType v1;
java.lang.reflect.TypeVariable v0;
v0 := @parameter0: java.lang.reflect.TypeVariable;
v1 := @parameter1: java.lang.reflect.ParameterizedType;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.TypeVariable, java.lang.reflect.TypeVariable)
{
boolean v2;
java.lang.reflect.TypeVariable v0, v1;
v0 := @parameter0: java.lang.reflect.TypeVariable;
v1 := @parameter1: java.lang.reflect.TypeVariable;
v2 = virtualinvoke v0.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
return v2;
}
private static boolean isAssignableFrom(java.lang.reflect.TypeVariable, java.lang.reflect.GenericArrayType)
{
java.lang.reflect.GenericArrayType v1;
java.lang.reflect.TypeVariable v0;
v0 := @parameter0: java.lang.reflect.TypeVariable;
v1 := @parameter1: java.lang.reflect.GenericArrayType;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.GenericArrayType, java.lang.Class)
{
java.lang.reflect.GenericArrayType v0;
java.lang.Class v1;
v0 := @parameter0: java.lang.reflect.GenericArrayType;
v1 := @parameter1: java.lang.Class;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.GenericArrayType, java.lang.reflect.ParameterizedType)
{
java.lang.reflect.GenericArrayType v0;
java.lang.reflect.ParameterizedType v1;
v0 := @parameter0: java.lang.reflect.GenericArrayType;
v1 := @parameter1: java.lang.reflect.ParameterizedType;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.GenericArrayType, java.lang.reflect.TypeVariable)
{
java.lang.reflect.GenericArrayType v0;
java.lang.reflect.TypeVariable v1;
v0 := @parameter0: java.lang.reflect.GenericArrayType;
v1 := @parameter1: java.lang.reflect.TypeVariable;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.GenericArrayType, java.lang.reflect.GenericArrayType)
{
java.lang.reflect.GenericArrayType v0, v1;
java.lang.reflect.Type v2, v3;
boolean v4;
v0 := @parameter0: java.lang.reflect.GenericArrayType;
v1 := @parameter1: java.lang.reflect.GenericArrayType;
v2 = interfaceinvoke v0.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v3 = interfaceinvoke v1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v4 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v2, v3);
return v4;
}
}