public final class io.quarkus.arc.impl.Qualifiers extends java.lang.Object
{
public static final java.util.Set DEFAULT_QUALIFIERS;
public static final java.util.Set IP_DEFAULT_QUALIFIERS;
final java.util.Set allQualifiers;
final java.util.Map qualifierNonbindingMembers;
void <init>(java.util.Set, java.util.Map)
{
java.util.Set v1;
io.quarkus.arc.impl.Qualifiers v0;
java.util.Map v2;
v0 := @this: io.quarkus.arc.impl.Qualifiers;
v1 := @parameter0: java.util.Set;
v2 := @parameter1: java.util.Map;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.quarkus.arc.impl.Qualifiers: java.util.Set allQualifiers> = v1;
v0.<io.quarkus.arc.impl.Qualifiers: java.util.Map qualifierNonbindingMembers> = v2;
return;
}
boolean isRegistered(java.lang.Class)
{
io.quarkus.arc.impl.Qualifiers v0;
java.util.Set v2;
java.lang.Class v1;
java.lang.String v3;
boolean v4;
v0 := @this: io.quarkus.arc.impl.Qualifiers;
v1 := @parameter0: java.lang.Class;
v2 = v0.<io.quarkus.arc.impl.Qualifiers: java.util.Set allQualifiers>;
v3 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v4 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v3);
return v4;
}
void verify(java.util.Collection)
{
io.quarkus.arc.impl.Qualifiers$TimesSeenBiFunction v13;
java.util.Iterator v4, v8;
java.util.Collection v1;
java.util.HashMap v7;
io.quarkus.arc.impl.Qualifiers v0;
int v3;
java.lang.Class v11, v12, v6;
java.lang.Object v10, v5;
boolean v2, v9;
v0 := @this: io.quarkus.arc.impl.Qualifiers;
v1 := @parameter0: java.util.Collection;
v2 = interfaceinvoke v1.<java.util.Collection: boolean isEmpty()>();
if v2 == 0 goto label1;
return;
label1:
v3 = interfaceinvoke v1.<java.util.Collection: int size()>();
if v3 != 1 goto label2;
v4 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
v5 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
specialinvoke v0.<io.quarkus.arc.impl.Qualifiers: void verifyQualifier(java.lang.Class)>(v6);
goto label5;
label2:
v7 = new java.util.HashMap;
specialinvoke v7.<java.util.HashMap: void <init>()>();
v8 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
label3:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label4;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = interfaceinvoke v10.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
specialinvoke v0.<io.quarkus.arc.impl.Qualifiers: void verifyQualifier(java.lang.Class)>(v11);
v12 = interfaceinvoke v10.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
v13 = <io.quarkus.arc.impl.Qualifiers$TimesSeenBiFunction: io.quarkus.arc.impl.Qualifiers$TimesSeenBiFunction INSTANCE>;
interfaceinvoke v7.<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(v12, v13);
goto label3;
label4:
staticinvoke <io.quarkus.arc.impl.Qualifiers: void checkQualifiersForDuplicates(java.util.Map)>(v7);
label5:
return;
}
void verify(java.lang.'annotation'.Annotation[])
{
io.quarkus.arc.impl.Qualifiers$TimesSeenBiFunction v12;
java.util.HashMap v6;
java.lang.'annotation'.Annotation[] v1;
io.quarkus.arc.impl.Qualifiers v0;
int v2, v3, v7, v8;
java.lang.'annotation'.Annotation v4, v9;
java.lang.Class v10, v11, v5;
v0 := @this: io.quarkus.arc.impl.Qualifiers;
v1 := @parameter0: java.lang.'annotation'.Annotation[];
v2 = lengthof v1;
if v2 != 0 goto label1;
return;
label1:
v3 = lengthof v1;
if v3 != 1 goto label2;
v4 = v1[0];
v5 = interfaceinvoke v4.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
specialinvoke v0.<io.quarkus.arc.impl.Qualifiers: void verifyQualifier(java.lang.Class)>(v5);
goto label5;
label2:
v6 = new java.util.HashMap;
specialinvoke v6.<java.util.HashMap: void <init>()>();
v7 = lengthof v1;
v8 = 0;
label3:
if v8 >= v7 goto label4;
v9 = v1[v8];
v10 = interfaceinvoke v9.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
specialinvoke v0.<io.quarkus.arc.impl.Qualifiers: void verifyQualifier(java.lang.Class)>(v10);
v11 = interfaceinvoke v9.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
v12 = <io.quarkus.arc.impl.Qualifiers$TimesSeenBiFunction: io.quarkus.arc.impl.Qualifiers$TimesSeenBiFunction INSTANCE>;
interfaceinvoke v6.<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(v11, v12);
v8 = v8 + 1;
goto label3;
label4:
staticinvoke <io.quarkus.arc.impl.Qualifiers: void checkQualifiersForDuplicates(java.util.Map)>(v6);
label5:
return;
}
private static void checkQualifiersForDuplicates(java.util.Map)
{
java.util.function.BiConsumer v1;
java.util.Map v0;
v0 := @parameter0: java.util.Map;
v1 = staticinvoke <io.quarkus.arc.impl.Qualifiers$checkQualifiersForDuplicates__2575: java.util.function.BiConsumer bootstrap$()>();
interfaceinvoke v0.<java.util.Map: void forEach(java.util.function.BiConsumer)>(v1);
return;
}
public static void checkQualifiersForDuplicates(java.lang.Class, java.lang.Integer)
{
int v2;
java.lang.'annotation'.Annotation v3;
java.lang.Class v0;
java.lang.String v5;
java.lang.IllegalArgumentException v4;
java.lang.Integer v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Integer;
v2 = virtualinvoke v1.<java.lang.Integer: int intValue()>();
if v2 <= 1 goto label1;
v3 = virtualinvoke v0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljava/lang/annotation/Repeatable;");
if v3 != null goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The qualifier \u0001 was used repeatedly but it is not annotated with @java.lang.annotation.Repeatable");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
return;
}
transient boolean hasQualifiers(java.util.Set, java.lang.'annotation'.Annotation[])
{
io.quarkus.arc.impl.Qualifiers v0;
int v3, v4;
java.lang.'annotation'.Annotation v5;
java.util.Set v1;
java.lang.'annotation'.Annotation[] v2;
boolean v6;
v0 := @this: io.quarkus.arc.impl.Qualifiers;
v1 := @parameter0: java.util.Set;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label3;
v5 = v2[v4];
v6 = virtualinvoke v0.<io.quarkus.arc.impl.Qualifiers: boolean hasQualifier(java.lang.Iterable,java.lang.'annotation'.Annotation)>(v1, v5);
if v6 != 0 goto label2;
return 0;
label2:
v4 = v4 + 1;
goto label1;
label3:
return 1;
}
boolean hasQualifier(java.lang.Iterable, java.lang.'annotation'.Annotation)
{
java.lang.Iterable v1;
java.lang.reflect.Method[] v4;
io.quarkus.arc.impl.Qualifiers v0;
java.util.Map v15, v17;
int v11, v12;
java.lang.String v18, v20;
java.lang.reflect.Method v13;
boolean v10, v14, v16, v21, v25, v27, v28, v29, v6, v9;
java.util.Iterator v5;
java.lang.'annotation'.Annotation v2;
java.lang.Class v24, v26, v3, v8;
java.lang.Object v19, v22, v23, v7;
v0 := @this: io.quarkus.arc.impl.Qualifiers;
v1 := @parameter0: java.lang.Iterable;
v2 := @parameter1: java.lang.'annotation'.Annotation;
v3 = interfaceinvoke v2.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();
v5 = interfaceinvoke v1.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label8;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
v9 = virtualinvoke v8.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v9 == 0 goto label1;
v10 = 1;
v11 = lengthof v4;
v12 = 0;
label2:
if v12 >= v11 goto label7;
v13 = v4[v12];
v14 = virtualinvoke v13.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Ljakarta/enterprise/util/Nonbinding;");
if v14 != 0 goto label6;
v15 = v0.<io.quarkus.arc.impl.Qualifiers: java.util.Map qualifierNonbindingMembers>;
v16 = interfaceinvoke v15.<java.util.Map: boolean isEmpty()>();
if v16 != 0 goto label3;
v17 = v0.<io.quarkus.arc.impl.Qualifiers: java.util.Map qualifierNonbindingMembers>;
v18 = virtualinvoke v8.<java.lang.Class: java.lang.String getName()>();
v19 = interfaceinvoke v17.<java.util.Map: java.lang.Object get(java.lang.Object)>(v18);
if v19 == null goto label3;
v20 = virtualinvoke v13.<java.lang.reflect.Method: java.lang.String getName()>();
v21 = interfaceinvoke v19.<java.util.Set: boolean contains(java.lang.Object)>(v20);
if v21 != 0 goto label6;
label3:
v22 = staticinvoke <io.quarkus.arc.impl.Qualifiers: java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object)>(v13, v2);
v23 = staticinvoke <io.quarkus.arc.impl.Qualifiers: java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object)>(v13, v7);
v24 = virtualinvoke v22.<java.lang.Object: java.lang.Class getClass()>();
v25 = virtualinvoke v24.<java.lang.Class: boolean isArray()>();
if v25 == 0 goto label5;
v26 = virtualinvoke v23.<java.lang.Object: java.lang.Class getClass()>();
v27 = virtualinvoke v26.<java.lang.Class: boolean isArray()>();
if v27 == 0 goto label4;
v28 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>(v22, v23);
if v28 != 0 goto label6;
label4:
v10 = 0;
goto label7;
label5:
v29 = virtualinvoke v22.<java.lang.Object: boolean equals(java.lang.Object)>(v23);
if v29 != 0 goto label6;
v10 = 0;
goto label7;
label6:
v12 = v12 + 1;
goto label2;
label7:
if v10 == 0 goto label1;
return 1;
label8:
return 0;
}
boolean isSubset(java.util.Set, java.util.Set)
{
java.util.Iterator v3;
io.quarkus.arc.impl.Qualifiers v0;
java.util.Set v1, v2;
java.lang.Object v5;
boolean v4, v6;
v0 := @this: io.quarkus.arc.impl.Qualifiers;
v1 := @parameter0: java.util.Set;
v2 := @parameter1: java.util.Set;
v3 = interfaceinvoke v1.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = virtualinvoke v0.<io.quarkus.arc.impl.Qualifiers: boolean hasQualifier(java.lang.Iterable,java.lang.'annotation'.Annotation)>(v2, v5);
if v6 != 0 goto label1;
return 0;
label2:
return 1;
}
private static java.lang.Object invoke(java.lang.reflect.Method, java.lang.Object)
{
java.lang.Object[] v2;
java.lang.RuntimeException v5;
java.lang.Exception v4;
java.lang.Class v7;
java.lang.Object v1, v3;
java.lang.String v6, v8;
java.lang.reflect.Method v0;
v0 := @parameter0: java.lang.reflect.Method;
v1 := @parameter1: java.lang.Object;
label1:
virtualinvoke v0.<java.lang.reflect.Method: void setAccessible(boolean)>(1);
v2 = newarray (java.lang.Object)[0];
v3 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v1, v2);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = new java.lang.RuntimeException;
v6 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.String getName()>();
v7 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Class)>(v6, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Error checking value of member method \u0001 on \u0001");
specialinvoke v5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v8, v4);
throw v5;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
catch java.lang.IllegalAccessException from label1 to label2 with label3;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
}
private void verifyQualifier(java.lang.Class)
{
io.quarkus.arc.impl.Qualifiers v0;
java.util.Set v2;
java.lang.Class v1;
java.lang.String v3, v6;
java.lang.IllegalArgumentException v5;
boolean v4;
v0 := @this: io.quarkus.arc.impl.Qualifiers;
v1 := @parameter0: java.lang.Class;
v2 = v0.<io.quarkus.arc.impl.Qualifiers: java.util.Set allQualifiers>;
v3 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v4 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v3);
if v4 != 0 goto label1;
v5 = new java.lang.IllegalArgumentException;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Annotation is not a registered qualifier: \u0001");
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v5;
label1:
return;
}
static void <clinit>()
{
jakarta.enterprise.inject.Default$Literal v0, v3;
jakarta.enterprise.inject.Any$Literal v1;
java.util.Set v2, v4;
v0 = <jakarta.enterprise.inject.Default$Literal: jakarta.enterprise.inject.Default$Literal INSTANCE>;
v1 = <jakarta.enterprise.inject.Any$Literal: jakarta.enterprise.inject.Any$Literal INSTANCE>;
v2 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object)>(v0, v1);
<io.quarkus.arc.impl.Qualifiers: java.util.Set DEFAULT_QUALIFIERS> = v2;
v3 = <jakarta.enterprise.inject.Default$Literal: jakarta.enterprise.inject.Default$Literal INSTANCE>;
v4 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v3);
<io.quarkus.arc.impl.Qualifiers: java.util.Set IP_DEFAULT_QUALIFIERS> = v4;
return;
}
}