class io.quarkus.arc.impl.RequestContext$RequestContextState extends java.lang.Object implements io.quarkus.arc.InjectableContext$ContextState
{
private static final java.lang.invoke.VarHandle IS_VALID;
private final java.util.Map map;
private volatile int isValid;
void <init>(java.util.concurrent.ConcurrentMap)
{
java.lang.Object v2;
io.quarkus.arc.impl.RequestContext$RequestContextState v0;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.quarkus.arc.impl.RequestContext$RequestContextState;
v1 := @parameter0: java.util.concurrent.ConcurrentMap;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(v1);
v0.<io.quarkus.arc.impl.RequestContext$RequestContextState: java.util.Map map> = v2;
v0.<io.quarkus.arc.impl.RequestContext$RequestContextState: int isValid> = 1;
return;
}
public java.util.Map getContextualInstances()
{
java.util.Collection v2;
java.util.function.Function v4, v5;
java.util.stream.Stream v3;
java.util.Map v1;
java.lang.Object v7;
java.util.stream.Collector v6;
io.quarkus.arc.impl.RequestContext$RequestContextState v0;
v0 := @this: io.quarkus.arc.impl.RequestContext$RequestContextState;
v1 = v0.<io.quarkus.arc.impl.RequestContext$RequestContextState: java.util.Map map>;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v3 = interfaceinvoke v2.<java.util.Collection: java.util.stream.Stream stream()>();
v4 = staticinvoke <io.quarkus.arc.impl.RequestContext$RequestContextState$getBean__2581: java.util.function.Function bootstrap$()>();
v5 = staticinvoke <io.quarkus.arc.impl.RequestContext$RequestContextState$get__2582: java.util.function.Function bootstrap$()>();
v6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toUnmodifiableMap(java.util.function.Function,java.util.function.Function)>(v4, v5);
v7 = interfaceinvoke v3.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v6);
return v7;
}
boolean invalidate()
{
java.lang.invoke.VarHandle v1;
boolean v2;
io.quarkus.arc.impl.RequestContext$RequestContextState v0;
v0 := @this: io.quarkus.arc.impl.RequestContext$RequestContextState;
v1 = <io.quarkus.arc.impl.RequestContext$RequestContextState: java.lang.invoke.VarHandle IS_VALID>;
v2 = virtualinvoke v1.<java.lang.invoke.VarHandle: boolean compareAndSet(io.quarkus.arc.impl.RequestContext$RequestContextState,int,int)>(v0, 1, 0);
return v2;
}
public boolean isValid()
{
int v1;
boolean v2;
io.quarkus.arc.impl.RequestContext$RequestContextState v0;
v0 := @this: io.quarkus.arc.impl.RequestContext$RequestContextState;
v1 = v0.<io.quarkus.arc.impl.RequestContext$RequestContextState: int isValid>;
if v1 != 1 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
static void <clinit>()
{
java.lang.invoke.VarHandle v2;
java.lang.invoke.MethodHandles$Lookup v0;
java.lang.Error v4;
java.lang.Class v1;
java.lang.ReflectiveOperationException v3;
label1:
v0 = staticinvoke <java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>();
v1 = <java.lang.Integer: java.lang.Class TYPE>;
v2 = virtualinvoke v0.<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.VarHandle findVarHandle(java.lang.Class,java.lang.String,java.lang.Class)>(class "Lio/quarkus/arc/impl/RequestContext$RequestContextState;", "isValid", v1);
<io.quarkus.arc.impl.RequestContext$RequestContextState: java.lang.invoke.VarHandle IS_VALID> = v2;
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new java.lang.Error;
specialinvoke v4.<java.lang.Error: void <init>(java.lang.Throwable)>(v3);
throw v4;
label4:
return;
catch java.lang.ReflectiveOperationException from label1 to label2 with label3;
}
}