final class io.quarkus.arc.runtime.BeanContainerImpl$DefaultInstanceFactory extends java.lang.Object implements io.quarkus.arc.runtime.BeanContainer$Factory
{
private final java.lang.Class type;
void <init>(java.lang.Class)
{
io.quarkus.arc.runtime.BeanContainerImpl$DefaultInstanceFactory v0;
java.lang.Class v1;
v0 := @this: io.quarkus.arc.runtime.BeanContainerImpl$DefaultInstanceFactory;
v1 := @parameter0: java.lang.Class;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.quarkus.arc.runtime.BeanContainerImpl$DefaultInstanceFactory: java.lang.Class type> = v1;
return;
}
public io.quarkus.arc.runtime.BeanContainer$Instance create()
{
java.lang.Object[] v4;
java.lang.Class[] v2;
java.lang.ReflectiveOperationException v7;
java.lang.RuntimeException v8;
java.lang.reflect.Constructor v3;
io.quarkus.arc.runtime.BeanContainerImpl$DefaultInstanceFactory v0;
io.quarkus.arc.runtime.BeanContainerImpl$DefaultInstanceFactory$1 v6;
java.lang.Class v1;
java.lang.Object v5;
v0 := @this: io.quarkus.arc.runtime.BeanContainerImpl$DefaultInstanceFactory;
label1:
v1 = v0.<io.quarkus.arc.runtime.BeanContainerImpl$DefaultInstanceFactory: java.lang.Class type>;
v2 = newarray (java.lang.Class)[0];
v3 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(v2);
v4 = newarray (java.lang.Object)[0];
v5 = virtualinvoke v3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v4);
v6 = new io.quarkus.arc.runtime.BeanContainerImpl$DefaultInstanceFactory$1;
specialinvoke v6.<io.quarkus.arc.runtime.BeanContainerImpl$DefaultInstanceFactory$1: void <init>(io.quarkus.arc.runtime.BeanContainerImpl$DefaultInstanceFactory,java.lang.Object)>(v0, v5);
label2:
return v6;
label3:
v7 := @caughtexception;
v8 = new java.lang.RuntimeException;
specialinvoke v8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v7);
throw v8;
catch java.lang.InstantiationException from label1 to label2 with label3;
catch java.lang.IllegalAccessException from label1 to label2 with label3;
catch java.lang.NoSuchMethodException from label1 to label2 with label3;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
}
}