class io.quarkus.fs.util.ZipUtils$2 extends java.nio.file.SimpleFileVisitor
{
final java.nio.file.FileSystem val$zipfs;
final java.nio.file.Path val$srcRoot;
void <init>(java.nio.file.FileSystem, java.nio.file.Path)
{
java.nio.file.FileSystem v1;
java.nio.file.Path v2;
io.quarkus.fs.util.ZipUtils$2 v0;
v0 := @this: io.quarkus.fs.util.ZipUtils$2;
v1 := @parameter0: java.nio.file.FileSystem;
v2 := @parameter1: java.nio.file.Path;
v0.<io.quarkus.fs.util.ZipUtils$2: java.nio.file.FileSystem val$zipfs> = v1;
v0.<io.quarkus.fs.util.ZipUtils$2: java.nio.file.Path val$srcRoot> = v2;
specialinvoke v0.<java.nio.file.SimpleFileVisitor: void <init>()>();
return;
}
public java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
{
java.nio.file.CopyOption[] v9;
java.nio.file.LinkOption[] v11;
java.lang.String[] v7;
java.nio.file.FileAlreadyExistsException v10;
java.nio.file.FileSystem v3;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.FileVisitResult v13;
io.quarkus.fs.util.ZipUtils$2 v0;
java.lang.String v6;
java.nio.file.Path v1, v4, v5, v8;
boolean v12;
v0 := @this: io.quarkus.fs.util.ZipUtils$2;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = v0.<io.quarkus.fs.util.ZipUtils$2: java.nio.file.FileSystem val$zipfs>;
v4 = v0.<io.quarkus.fs.util.ZipUtils$2: java.nio.file.Path val$srcRoot>;
v5 = interfaceinvoke v4.<java.nio.file.Path: java.nio.file.Path relativize(java.nio.file.Path)>(v1);
v6 = interfaceinvoke v5.<java.nio.file.Path: java.lang.String toString()>();
v7 = newarray (java.lang.String)[0];
v8 = virtualinvoke v3.<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>(v6, v7);
label1:
v9 = newarray (java.nio.file.CopyOption)[0];
staticinvoke <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(v1, v8, v9);
label2:
goto label4;
label3:
v10 := @caughtexception;
v11 = newarray (java.nio.file.LinkOption)[0];
v12 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(v8, v11);
if v12 != 0 goto label4;
throw v10;
label4:
v13 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
return v13;
catch java.nio.file.FileAlreadyExistsException from label1 to label2 with label3;
}
public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
{
java.nio.file.CopyOption[] v9;
java.lang.String[] v7;
java.nio.file.FileSystem v3;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.StandardCopyOption v10;
java.nio.file.FileVisitResult v11;
io.quarkus.fs.util.ZipUtils$2 v0;
java.lang.String v6;
java.nio.file.Path v1, v4, v5, v8;
v0 := @this: io.quarkus.fs.util.ZipUtils$2;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = v0.<io.quarkus.fs.util.ZipUtils$2: java.nio.file.FileSystem val$zipfs>;
v4 = v0.<io.quarkus.fs.util.ZipUtils$2: java.nio.file.Path val$srcRoot>;
v5 = interfaceinvoke v4.<java.nio.file.Path: java.nio.file.Path relativize(java.nio.file.Path)>(v1);
v6 = interfaceinvoke v5.<java.nio.file.Path: java.lang.String toString()>();
v7 = newarray (java.lang.String)[0];
v8 = virtualinvoke v3.<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>(v6, v7);
v9 = newarray (java.nio.file.CopyOption)[1];
v10 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption REPLACE_EXISTING>;
v9[0] = v10;
staticinvoke <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(v1, v8, v9);
v11 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
return v11;
}
}