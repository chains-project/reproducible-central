public class io.quarkus.mutiny.runtime.MutinyInfrastructure extends java.lang.Object
{
public static final java.lang.String VERTX_EVENT_LOOP_THREAD_PREFIX;
public void <init>()
{
io.quarkus.mutiny.runtime.MutinyInfrastructure v0;
v0 := @this: io.quarkus.mutiny.runtime.MutinyInfrastructure;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void configureMutinyInfrastructure(java.util.concurrent.ScheduledExecutorService, io.quarkus.runtime.ShutdownContext, org.jboss.threads.ContextHandler)
{
java.util.concurrent.ScheduledExecutorService v1, v4;
io.quarkus.runtime.ShutdownContext v2;
org.jboss.threads.ContextHandler v3;
io.quarkus.mutiny.runtime.MutinyInfrastructure v0;
v0 := @this: io.quarkus.mutiny.runtime.MutinyInfrastructure;
v1 := @parameter0: java.util.concurrent.ScheduledExecutorService;
v2 := @parameter1: io.quarkus.runtime.ShutdownContext;
v3 := @parameter2: org.jboss.threads.ContextHandler;
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.ScheduledExecutorService getDefaultWorkerPool()>();
interfaceinvoke v4.<java.util.concurrent.ScheduledExecutorService: void shutdown()>();
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void setDefaultExecutor(java.util.concurrent.Executor)>(v1);
return;
}
public void configureDroppedExceptionHandler()
{
io.quarkus.mutiny.runtime.MutinyInfrastructure$1 v2;
io.quarkus.mutiny.runtime.MutinyInfrastructure v0;
org.jboss.logging.Logger v1;
v0 := @this: io.quarkus.mutiny.runtime.MutinyInfrastructure;
v1 = staticinvoke <org.jboss.logging.Logger: org.jboss.logging.Logger getLogger(java.lang.Class)>(class "Lio/quarkus/mutiny/runtime/MutinyInfrastructure;");
v2 = new io.quarkus.mutiny.runtime.MutinyInfrastructure$1;
specialinvoke v2.<io.quarkus.mutiny.runtime.MutinyInfrastructure$1: void <init>(io.quarkus.mutiny.runtime.MutinyInfrastructure,org.jboss.logging.Logger)>(v0, v1);
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void setDroppedExceptionHandler(java.util.function.Consumer)>(v2);
return;
}
public void configureThreadBlockingChecker()
{
io.quarkus.mutiny.runtime.MutinyInfrastructure$2 v1;
io.quarkus.mutiny.runtime.MutinyInfrastructure v0;
v0 := @this: io.quarkus.mutiny.runtime.MutinyInfrastructure;
v1 = new io.quarkus.mutiny.runtime.MutinyInfrastructure$2;
specialinvoke v1.<io.quarkus.mutiny.runtime.MutinyInfrastructure$2: void <init>(io.quarkus.mutiny.runtime.MutinyInfrastructure)>(v0);
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void setCanCallerThreadBeBlockedSupplier(java.util.function.BooleanSupplier)>(v1);
return;
}
public void configureOperatorLogger()
{
io.quarkus.mutiny.runtime.MutinyInfrastructure$3 v2;
io.quarkus.mutiny.runtime.MutinyInfrastructure v0;
org.jboss.logging.Logger v1;
v0 := @this: io.quarkus.mutiny.runtime.MutinyInfrastructure;
v1 = staticinvoke <org.jboss.logging.Logger: org.jboss.logging.Logger getLogger(java.lang.Class)>(class "Lio/quarkus/mutiny/runtime/MutinyInfrastructure;");
v2 = new io.quarkus.mutiny.runtime.MutinyInfrastructure$3;
specialinvoke v2.<io.quarkus.mutiny.runtime.MutinyInfrastructure$3: void <init>(io.quarkus.mutiny.runtime.MutinyInfrastructure,org.jboss.logging.Logger)>(v0, v1);
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void setOperatorLogger(io.smallrye.mutiny.infrastructure.Infrastructure$OperatorLogger)>(v2);
return;
}
}