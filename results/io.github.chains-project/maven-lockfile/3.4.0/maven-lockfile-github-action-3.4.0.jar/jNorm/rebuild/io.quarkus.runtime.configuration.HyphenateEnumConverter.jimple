public final class io.quarkus.runtime.configuration.HyphenateEnumConverter extends java.lang.Object implements org.eclipse.microprofile.config.spi.Converter, java.io.Serializable
{
private static final java.lang.String HYPHEN;
private static final java.util.regex.Pattern PATTERN;
private static final long serialVersionUID;
private final java.lang.Class enumType;
private final java.util.Map values;
public void <init>(java.lang.Class)
{
java.lang.Object[] v4;
java.util.HashMap v2;
io.quarkus.runtime.configuration.HyphenateEnumConverter v0;
java.lang.Enum v7;
java.util.Map v10;
int v5, v6;
java.lang.Class v1, v3;
java.lang.String v8, v9;
v0 := @this: io.quarkus.runtime.configuration.HyphenateEnumConverter;
v1 := @parameter0: java.lang.Class;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
v0.<io.quarkus.runtime.configuration.HyphenateEnumConverter: java.util.Map values> = v2;
v0.<io.quarkus.runtime.configuration.HyphenateEnumConverter: java.lang.Class enumType> = v1;
v3 = v0.<io.quarkus.runtime.configuration.HyphenateEnumConverter: java.lang.Class enumType>;
v4 = virtualinvoke v3.<java.lang.Class: java.lang.Object[] getEnumConstants()>();
v5 = lengthof v4;
v6 = 0;
label1:
if v6 >= v5 goto label2;
v7 = v4[v6];
v8 = virtualinvoke v7.<java.lang.Enum: java.lang.String name()>();
v9 = specialinvoke v0.<io.quarkus.runtime.configuration.HyphenateEnumConverter: java.lang.String hyphenate(java.lang.String)>(v8);
v10 = v0.<io.quarkus.runtime.configuration.HyphenateEnumConverter: java.util.Map values>;
interfaceinvoke v10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, v7);
v6 = v6 + 1;
goto label1;
label2:
return;
}
public static io.quarkus.runtime.configuration.HyphenateEnumConverter of(java.lang.Class)
{
java.lang.Class v0;
io.quarkus.runtime.configuration.HyphenateEnumConverter v1;
v0 := @parameter0: java.lang.Class;
v1 = new io.quarkus.runtime.configuration.HyphenateEnumConverter;
specialinvoke v1.<io.quarkus.runtime.configuration.HyphenateEnumConverter: void <init>(java.lang.Class)>(v0);
return v1;
}
public java.lang.Enum convert(java.lang.String)
{
java.lang.Object[] v10;
io.quarkus.runtime.configuration.HyphenateEnumConverter v0;
java.lang.IllegalArgumentException v9;
java.util.Map v5;
java.lang.Class v11, v7;
java.lang.Object v6, v8;
java.lang.String v1, v12, v2, v4;
boolean v3;
v0 := @this: io.quarkus.runtime.configuration.HyphenateEnumConverter;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: java.lang.String trim()>();
v3 = virtualinvoke v2.<java.lang.String: boolean isEmpty()>();
if v3 == 0 goto label1;
return null;
label1:
v4 = specialinvoke v0.<io.quarkus.runtime.configuration.HyphenateEnumConverter: java.lang.String hyphenate(java.lang.String)>(v2);
v5 = v0.<io.quarkus.runtime.configuration.HyphenateEnumConverter: java.util.Map values>;
v6 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v4);
if v6 == null goto label2;
v7 = v0.<io.quarkus.runtime.configuration.HyphenateEnumConverter: java.lang.Class enumType>;
v8 = virtualinvoke v7.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v6);
return v8;
label2:
v9 = new java.lang.IllegalArgumentException;
v10 = newarray (java.lang.Object)[2];
v10[0] = v2;
v11 = v0.<io.quarkus.runtime.configuration.HyphenateEnumConverter: java.lang.Class enumType>;
v10[1] = v11;
v12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot convert %s to enum %s", v10);
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v12);
throw v9;
}
private java.lang.String hyphenate(java.lang.String)
{
io.quarkus.runtime.configuration.HyphenateEnumConverter v0;
java.util.regex.Matcher v5;
java.lang.StringBuffer v2;
java.lang.String v1, v3, v7;
java.util.regex.Pattern v4;
boolean v6;
v0 := @this: io.quarkus.runtime.configuration.HyphenateEnumConverter;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.StringBuffer;
specialinvoke v2.<java.lang.StringBuffer: void <init>()>();
v3 = staticinvoke <io.quarkus.runtime.util.StringUtil: java.lang.String hyphenate(java.lang.String)>(v1);
v4 = <io.quarkus.runtime.configuration.HyphenateEnumConverter: java.util.regex.Pattern PATTERN>;
v5 = virtualinvoke v4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v3);
label1:
v6 = virtualinvoke v5.<java.util.regex.Matcher: boolean find()>();
if v6 == 0 goto label2;
virtualinvoke v5.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>(v2, "-");
goto label1;
label2:
virtualinvoke v5.<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>(v2);
v7 = virtualinvoke v2.<java.lang.StringBuffer: java.lang.String toString()>();
return v7;
}
static void <clinit>()
{
java.util.regex.Pattern v0;
v0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("([-_]+)");
<io.quarkus.runtime.configuration.HyphenateEnumConverter: java.util.regex.Pattern PATTERN> = v0;
return;
}
}