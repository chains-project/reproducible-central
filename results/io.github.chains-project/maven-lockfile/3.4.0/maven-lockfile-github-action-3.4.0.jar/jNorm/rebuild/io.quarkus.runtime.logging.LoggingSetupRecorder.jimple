public class io.quarkus.runtime.logging.LoggingSetupRecorder extends java.lang.Object
{
private static final org.jboss.logging.Logger log;
final io.quarkus.runtime.RuntimeValue consoleRuntimeConfig;
public void <init>(io.quarkus.runtime.RuntimeValue)
{
io.quarkus.runtime.logging.LoggingSetupRecorder v0;
io.quarkus.runtime.RuntimeValue v1;
v0 := @this: io.quarkus.runtime.logging.LoggingSetupRecorder;
v1 := @parameter0: io.quarkus.runtime.RuntimeValue;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.quarkus.runtime.logging.LoggingSetupRecorder: io.quarkus.runtime.RuntimeValue consoleRuntimeConfig> = v1;
return;
}
public static void handleFailedStart()
{
java.util.Optional v1;
io.quarkus.runtime.RuntimeValue v0;
v0 = new io.quarkus.runtime.RuntimeValue;
v1 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
specialinvoke v0.<io.quarkus.runtime.RuntimeValue: void <init>(java.lang.Object)>(v1);
staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: void handleFailedStart(io.quarkus.runtime.RuntimeValue)>(v0);
return;
}
public static void handleFailedStart(io.quarkus.runtime.RuntimeValue)
{
io.quarkus.runtime.logging.LogBuildTimeConfig v2;
io.quarkus.runtime.logging.LoggingSetupRecorder v4;
io.quarkus.runtime.LaunchMode v13;
java.util.List v10, v11, v12, v8, v9;
io.quarkus.runtime.RuntimeValue v0, v5;
io.quarkus.runtime.logging.DiscoveredLogComponents v6;
java.util.Map v7;
io.quarkus.runtime.logging.LogConfig v1;
io.quarkus.runtime.console.ConsoleRuntimeConfig v3;
v0 := @parameter0: io.quarkus.runtime.RuntimeValue;
v1 = new io.quarkus.runtime.logging.LogConfig;
specialinvoke v1.<io.quarkus.runtime.logging.LogConfig: void <init>()>();
staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: void handleObject(java.lang.Object)>(v1);
v2 = new io.quarkus.runtime.logging.LogBuildTimeConfig;
specialinvoke v2.<io.quarkus.runtime.logging.LogBuildTimeConfig: void <init>()>();
staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: void handleObject(java.lang.Object)>(v2);
v3 = new io.quarkus.runtime.console.ConsoleRuntimeConfig;
specialinvoke v3.<io.quarkus.runtime.console.ConsoleRuntimeConfig: void <init>()>();
staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: void handleObject(java.lang.Object)>(v3);
v4 = new io.quarkus.runtime.logging.LoggingSetupRecorder;
v5 = new io.quarkus.runtime.RuntimeValue;
specialinvoke v5.<io.quarkus.runtime.RuntimeValue: void <init>(java.lang.Object)>(v3);
specialinvoke v4.<io.quarkus.runtime.logging.LoggingSetupRecorder: void <init>(io.quarkus.runtime.RuntimeValue)>(v5);
v6 = staticinvoke <io.quarkus.runtime.logging.DiscoveredLogComponents: io.quarkus.runtime.logging.DiscoveredLogComponents ofEmpty()>();
v7 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
v8 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v9 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v10 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v11 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v12 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v13 = <io.quarkus.runtime.LaunchMode: io.quarkus.runtime.LaunchMode DEVELOPMENT>;
virtualinvoke v4.<io.quarkus.runtime.logging.LoggingSetupRecorder: io.quarkus.runtime.shutdown.ShutdownListener initializeLogging(io.quarkus.runtime.logging.LogConfig,io.quarkus.runtime.logging.LogBuildTimeConfig,io.quarkus.runtime.logging.DiscoveredLogComponents,java.util.Map,boolean,io.quarkus.runtime.RuntimeValue,io.quarkus.runtime.RuntimeValue,java.util.List,java.util.List,java.util.List,java.util.List,java.util.List,io.quarkus.runtime.RuntimeValue,io.quarkus.runtime.LaunchMode,boolean)>(v1, v2, v6, v7, 0, null, null, v8, v9, v10, v11, v12, v0, v13, 0);
return;
}
public io.quarkus.runtime.shutdown.ShutdownListener initializeLogging(io.quarkus.runtime.logging.LogConfig, io.quarkus.runtime.logging.LogBuildTimeConfig, io.quarkus.runtime.logging.DiscoveredLogComponents, java.util.Map, boolean, io.quarkus.runtime.RuntimeValue, io.quarkus.runtime.RuntimeValue, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, io.quarkus.runtime.RuntimeValue, io.quarkus.runtime.LaunchMode, boolean)
{
java.util.Map v104, v105, v108, v17, v34, v4, v47;
io.quarkus.runtime.logging.FileConfig v65, v67;
io.quarkus.runtime.logging.SyslogConfig v69, v71;
io.quarkus.runtime.logging.LoggingSetupRecorder v0;
java.util.logging.ErrorManager v33;
io.quarkus.runtime.logging.LogConfig v1;
java.lang.Object[] v127, v25;
io.quarkus.runtime.logging.LogBuildTimeConfig v2;
java.util.logging.Handler[] v126, v43;
io.quarkus.runtime.logging.LoggingSetupRecorder$AdditionalNamedHandlersConsumer v114;
io.quarkus.runtime.logging.LogCleanupFilter v40, v78, v92;
io.quarkus.runtime.logging.LoggingSetupRecorder$CategoryLoggerConsumer v116;
java.util.logging.LogManager v41;
io.quarkus.runtime.logging.DiscoveredLogComponents v3;
org.jboss.logging.Logger v24;
java.util.logging.Level v100, v20, v22, v26, v27, v28, v29, v30, v31, v86;
io.quarkus.runtime.RuntimeValue v102, v13, v6, v60, v7;
int v21, v23, v38, v44, v45, v49, v50, v55, v56;
java.lang.Object v103, v112, v113, v119, v120, v122, v54, v61, v74, v76, v77, v79, v81, v82, v83, v88, v90, v91, v93, v95, v96, v97;
java.util.ArrayList v37, v48;
io.quarkus.runtime.logging.ConsoleConfig v57, v59;
java.lang.String v84, v98;
org.jboss.logmanager.Logger v19;
boolean v101, v106, v107, v111, v118, v121, v15, v35, v5, v52, v58, v63, v66, v70, v73, v75, v80, v87, v89, v94;
java.util.logging.LogRecord v85, v99;
java.util.logging.Logger v42;
java.util.List v10, v11, v12, v36, v8, v9;
java.util.Optional v123, v51, v53;
java.util.logging.Handler v46, v62, v68, v72;
org.jboss.logmanager.LogContext v18;
org.jboss.logmanager.errormanager.OnlyOnceErrorManager v32;
io.quarkus.runtime.LaunchMode v14;
java.util.HashMap v109;
io.quarkus.runtime.logging.LoggingSetupRecorder$ShutdownNotifier v16;
io.quarkus.runtime.logging.LoggingSetupRecorder$3 v115;
io.quarkus.bootstrap.logging.QuarkusDelayedHandler v124, v125;
io.quarkus.runtime.logging.LoggingSetupRecorder$1 v39;
io.quarkus.runtime.logging.LoggingSetupRecorder$2 v64;
java.util.Iterator v110, v117;
v0 := @this: io.quarkus.runtime.logging.LoggingSetupRecorder;
v1 := @parameter0: io.quarkus.runtime.logging.LogConfig;
v2 := @parameter1: io.quarkus.runtime.logging.LogBuildTimeConfig;
v3 := @parameter2: io.quarkus.runtime.logging.DiscoveredLogComponents;
v4 := @parameter3: java.util.Map;
v5 := @parameter4: boolean;
v6 := @parameter5: io.quarkus.runtime.RuntimeValue;
v7 := @parameter6: io.quarkus.runtime.RuntimeValue;
v8 := @parameter7: java.util.List;
v9 := @parameter8: java.util.List;
v10 := @parameter9: java.util.List;
v11 := @parameter10: java.util.List;
v12 := @parameter11: java.util.List;
v13 := @parameter12: io.quarkus.runtime.RuntimeValue;
v14 := @parameter13: io.quarkus.runtime.LaunchMode;
v15 := @parameter14: boolean;
v16 = new io.quarkus.runtime.logging.LoggingSetupRecorder$ShutdownNotifier;
specialinvoke v16.<io.quarkus.runtime.logging.LoggingSetupRecorder$ShutdownNotifier: void <init>()>();
v17 = v1.<io.quarkus.runtime.logging.LogConfig: java.util.Map categories>;
v18 = staticinvoke <org.jboss.logmanager.LogContext: org.jboss.logmanager.LogContext getLogContext()>();
v19 = virtualinvoke v18.<org.jboss.logmanager.LogContext: org.jboss.logmanager.Logger getLogger(java.lang.String)>("");
v20 = v1.<io.quarkus.runtime.logging.LogConfig: java.util.logging.Level level>;
v21 = virtualinvoke v20.<java.util.logging.Level: int intValue()>();
v22 = v2.<io.quarkus.runtime.logging.LogBuildTimeConfig: java.util.logging.Level minLevel>;
v23 = virtualinvoke v22.<java.util.logging.Level: int intValue()>();
if v21 >= v23 goto label01;
v24 = <io.quarkus.runtime.logging.LoggingSetupRecorder: org.jboss.logging.Logger log>;
v25 = newarray (java.lang.Object)[4];
v26 = v1.<io.quarkus.runtime.logging.LogConfig: java.util.logging.Level level>;
v25[0] = v26;
v27 = v2.<io.quarkus.runtime.logging.LogBuildTimeConfig: java.util.logging.Level minLevel>;
v25[1] = v27;
v28 = v2.<io.quarkus.runtime.logging.LogBuildTimeConfig: java.util.logging.Level minLevel>;
v25[2] = v28;
v29 = v1.<io.quarkus.runtime.logging.LogConfig: java.util.logging.Level level>;
v25[3] = v29;
virtualinvoke v24.<org.jboss.logging.Logger: void warnf(java.lang.String,java.lang.Object[])>("Root log level %s set below minimum logging level %s, promoting it to %s. Set the build time configuration property \'quarkus.log.min-level\' to \'%s\' to avoid this warning", v25);
v30 = v2.<io.quarkus.runtime.logging.LogBuildTimeConfig: java.util.logging.Level minLevel>;
virtualinvoke v19.<org.jboss.logmanager.Logger: void setLevel(java.util.logging.Level)>(v30);
goto label02;
label01:
v31 = v1.<io.quarkus.runtime.logging.LogConfig: java.util.logging.Level level>;
virtualinvoke v19.<org.jboss.logmanager.Logger: void setLevel(java.util.logging.Level)>(v31);
label02:
v32 = new org.jboss.logmanager.errormanager.OnlyOnceErrorManager;
specialinvoke v32.<org.jboss.logmanager.errormanager.OnlyOnceErrorManager: void <init>()>();
v33 = v32;
v34 = v1.<io.quarkus.runtime.logging.LogConfig: java.util.Map filters>;
v35 = interfaceinvoke v34.<java.util.Map: boolean isEmpty()>();
if v35 == 0 goto label03;
v36 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
goto label04;
label03:
v37 = new java.util.ArrayList;
v38 = interfaceinvoke v34.<java.util.Map: int size()>();
specialinvoke v37.<java.util.ArrayList: void <init>(int)>(v38);
v36 = v37;
v39 = new io.quarkus.runtime.logging.LoggingSetupRecorder$1;
specialinvoke v39.<io.quarkus.runtime.logging.LoggingSetupRecorder$1: void <init>(io.quarkus.runtime.logging.LoggingSetupRecorder,java.util.List)>(v0, v37);
interfaceinvoke v34.<java.util.Map: void forEach(java.util.function.BiConsumer)>(v39);
label04:
v40 = new io.quarkus.runtime.logging.LogCleanupFilter;
specialinvoke v40.<io.quarkus.runtime.logging.LogCleanupFilter: void <init>(java.util.Collection,io.quarkus.runtime.logging.LoggingSetupRecorder$ShutdownNotifier)>(v36, v16);
v41 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();
v42 = virtualinvoke v41.<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>("");
v43 = virtualinvoke v42.<java.util.logging.Logger: java.util.logging.Handler[] getHandlers()>();
v44 = lengthof v43;
v45 = 0;
label05:
if v45 >= v44 goto label06;
v46 = v43[v45];
virtualinvoke v46.<java.util.logging.Handler: void setFilter(java.util.logging.Filter)>(v40);
v45 = v45 + 1;
goto label05;
label06:
v47 = staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: java.util.Map createNamedFilters(io.quarkus.runtime.logging.DiscoveredLogComponents)>(v3);
v48 = new java.util.ArrayList;
v49 = interfaceinvoke v8.<java.util.List: int size()>();
v50 = 3 + v49;
v51 = v1.<io.quarkus.runtime.logging.LogConfig: java.util.Optional handlers>;
v52 = virtualinvoke v51.<java.util.Optional: boolean isPresent()>();
if v52 == 0 goto label07;
v53 = v1.<io.quarkus.runtime.logging.LogConfig: java.util.Optional handlers>;
v54 = virtualinvoke v53.<java.util.Optional: java.lang.Object get()>();
v55 = interfaceinvoke v54.<java.util.List: int size()>();
goto label08;
label07:
v55 = 0;
label08:
v56 = v50 + v55;
specialinvoke v48.<java.util.ArrayList: void <init>(int)>(v56);
v57 = v1.<io.quarkus.runtime.logging.LogConfig: io.quarkus.runtime.logging.ConsoleConfig console>;
v58 = v57.<io.quarkus.runtime.logging.ConsoleConfig: boolean enable>;
if v58 == 0 goto label09;
v59 = v1.<io.quarkus.runtime.logging.LogConfig: io.quarkus.runtime.logging.ConsoleConfig console>;
v60 = v0.<io.quarkus.runtime.logging.LoggingSetupRecorder: io.quarkus.runtime.RuntimeValue consoleRuntimeConfig>;
v61 = virtualinvoke v60.<io.quarkus.runtime.RuntimeValue: java.lang.Object getValue()>();
v62 = staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: java.util.logging.Handler configureConsoleHandler(io.quarkus.runtime.logging.ConsoleConfig,io.quarkus.runtime.console.ConsoleRuntimeConfig,java.util.logging.ErrorManager,io.quarkus.runtime.logging.LogCleanupFilter,java.util.Map,java.util.List,io.quarkus.runtime.RuntimeValue,io.quarkus.runtime.LaunchMode,boolean)>(v59, v61, v32, v40, v47, v10, v13, v14, v15);
v33 = virtualinvoke v62.<java.util.logging.Handler: java.util.logging.ErrorManager getErrorManager()>();
virtualinvoke v48.<java.util.ArrayList: boolean add(java.lang.Object)>(v62);
label09:
v63 = virtualinvoke v14.<io.quarkus.runtime.LaunchMode: boolean isDevOrTest()>();
if v63 == 0 goto label10;
v64 = new io.quarkus.runtime.logging.LoggingSetupRecorder$2;
specialinvoke v64.<io.quarkus.runtime.logging.LoggingSetupRecorder$2: void <init>(io.quarkus.runtime.logging.LoggingSetupRecorder)>(v0);
virtualinvoke v48.<java.util.ArrayList: boolean add(java.lang.Object)>(v64);
label10:
v65 = v1.<io.quarkus.runtime.logging.LogConfig: io.quarkus.runtime.logging.FileConfig file>;
v66 = v65.<io.quarkus.runtime.logging.FileConfig: boolean enable>;
if v66 == 0 goto label11;
v67 = v1.<io.quarkus.runtime.logging.LogConfig: io.quarkus.runtime.logging.FileConfig file>;
v68 = staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: java.util.logging.Handler configureFileHandler(io.quarkus.runtime.logging.FileConfig,java.util.logging.ErrorManager,io.quarkus.runtime.logging.LogCleanupFilter,java.util.Map,java.util.List,boolean)>(v67, v33, v40, v47, v11, v15);
virtualinvoke v48.<java.util.ArrayList: boolean add(java.lang.Object)>(v68);
label11:
v69 = v1.<io.quarkus.runtime.logging.LogConfig: io.quarkus.runtime.logging.SyslogConfig syslog>;
v70 = v69.<io.quarkus.runtime.logging.SyslogConfig: boolean enable>;
if v70 == 0 goto label12;
v71 = v1.<io.quarkus.runtime.logging.LogConfig: io.quarkus.runtime.logging.SyslogConfig syslog>;
v72 = staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: java.util.logging.Handler configureSyslogHandler(io.quarkus.runtime.logging.SyslogConfig,java.util.logging.ErrorManager,io.quarkus.runtime.logging.LogCleanupFilter,java.util.Map,java.util.List,boolean)>(v71, v33, v40, v47, v12, v15);
if v72 == null goto label12;
virtualinvoke v48.<java.util.ArrayList: boolean add(java.lang.Object)>(v72);
label12:
v73 = virtualinvoke v14.<io.quarkus.runtime.LaunchMode: boolean isDevOrTest()>();
if v73 != 0 goto label13;
if v5 == 0 goto label15;
label13:
if v6 == null goto label15;
v74 = virtualinvoke v6.<io.quarkus.runtime.RuntimeValue: java.lang.Object getValue()>();
v75 = virtualinvoke v74.<java.util.Optional: boolean isPresent()>();
if v75 == 0 goto label15;
v76 = virtualinvoke v6.<io.quarkus.runtime.RuntimeValue: java.lang.Object getValue()>();
v77 = virtualinvoke v76.<java.util.Optional: java.lang.Object get()>();
virtualinvoke v77.<java.util.logging.Handler: void setErrorManager(java.util.logging.ErrorManager)>(v33);
v78 = new io.quarkus.runtime.logging.LogCleanupFilter;
specialinvoke v78.<io.quarkus.runtime.logging.LogCleanupFilter: void <init>(java.util.Collection,io.quarkus.runtime.logging.LoggingSetupRecorder$ShutdownNotifier)>(v36, v16);
virtualinvoke v77.<java.util.logging.Handler: void setFilter(java.util.logging.Filter)>(v78);
if v13 == null goto label14;
v79 = virtualinvoke v13.<io.quarkus.runtime.RuntimeValue: java.lang.Object getValue()>();
v80 = virtualinvoke v79.<java.util.Optional: boolean isPresent()>();
if v80 == 0 goto label14;
v81 = virtualinvoke v13.<io.quarkus.runtime.RuntimeValue: java.lang.Object getValue()>();
v82 = virtualinvoke v81.<java.util.Optional: java.lang.Object get()>();
v83 = interfaceinvoke v82.<java.util.function.Supplier: java.lang.Object get()>();
v84 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v83) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\n\u0001");
v85 = new java.util.logging.LogRecord;
v86 = <java.util.logging.Level: java.util.logging.Level INFO>;
specialinvoke v85.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(v86, v84);
virtualinvoke v77.<java.util.logging.Handler: void publish(java.util.logging.LogRecord)>(v85);
label14:
virtualinvoke v48.<java.util.ArrayList: boolean add(java.lang.Object)>(v77);
label15:
v87 = virtualinvoke v14.<io.quarkus.runtime.LaunchMode: boolean isDevOrTest()>();
if v87 == 0 goto label17;
if v7 == null goto label17;
v88 = virtualinvoke v7.<io.quarkus.runtime.RuntimeValue: java.lang.Object getValue()>();
v89 = virtualinvoke v88.<java.util.Optional: boolean isPresent()>();
if v89 == 0 goto label17;
v90 = virtualinvoke v7.<io.quarkus.runtime.RuntimeValue: java.lang.Object getValue()>();
v91 = virtualinvoke v90.<java.util.Optional: java.lang.Object get()>();
virtualinvoke v91.<java.util.logging.Handler: void setErrorManager(java.util.logging.ErrorManager)>(v33);
v92 = new io.quarkus.runtime.logging.LogCleanupFilter;
specialinvoke v92.<io.quarkus.runtime.logging.LogCleanupFilter: void <init>(java.util.Collection,io.quarkus.runtime.logging.LoggingSetupRecorder$ShutdownNotifier)>(v36, v16);
virtualinvoke v91.<java.util.logging.Handler: void setFilter(java.util.logging.Filter)>(v92);
if v13 == null goto label16;
v93 = virtualinvoke v13.<io.quarkus.runtime.RuntimeValue: java.lang.Object getValue()>();
v94 = virtualinvoke v93.<java.util.Optional: boolean isPresent()>();
if v94 == 0 goto label16;
v95 = virtualinvoke v13.<io.quarkus.runtime.RuntimeValue: java.lang.Object getValue()>();
v96 = virtualinvoke v95.<java.util.Optional: java.lang.Object get()>();
v97 = interfaceinvoke v96.<java.util.function.Supplier: java.lang.Object get()>();
v98 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v97) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\n\u0001");
v99 = new java.util.logging.LogRecord;
v100 = <java.util.logging.Level: java.util.logging.Level INFO>;
specialinvoke v99.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>(v100, v98);
virtualinvoke v91.<java.util.logging.Handler: void publish(java.util.logging.LogRecord)>(v99);
label16:
virtualinvoke v48.<java.util.ArrayList: boolean add(java.lang.Object)>(v91);
label17:
v101 = specialinvoke v0.<io.quarkus.runtime.logging.LoggingSetupRecorder: boolean shouldCreateNamedHandlers(io.quarkus.runtime.logging.LogConfig,java.util.List)>(v1, v9);
if v101 == 0 goto label18;
v102 = v0.<io.quarkus.runtime.logging.LoggingSetupRecorder: io.quarkus.runtime.RuntimeValue consoleRuntimeConfig>;
v103 = virtualinvoke v102.<io.quarkus.runtime.RuntimeValue: java.lang.Object getValue()>();
v104 = staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: java.util.Map createNamedHandlers(io.quarkus.runtime.logging.LogConfig,io.quarkus.runtime.console.ConsoleRuntimeConfig,java.util.List,java.util.List,java.util.List,java.util.List,java.util.logging.ErrorManager,io.quarkus.runtime.logging.LogCleanupFilter,java.util.Map,io.quarkus.runtime.LaunchMode,io.quarkus.runtime.logging.LoggingSetupRecorder$ShutdownNotifier,boolean)>(v1, v103, v9, v10, v11, v12, v33, v40, v47, v14, v16, v15);
goto label19;
label18:
v104 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
label19:
v105 = v104;
v106 = interfaceinvoke v17.<java.util.Map: boolean isEmpty()>();
if v106 != 0 goto label23;
v107 = interfaceinvoke v9.<java.util.List: boolean isEmpty()>();
if v107 == 0 goto label20;
v108 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
goto label22;
label20:
v109 = new java.util.HashMap;
specialinvoke v109.<java.util.HashMap: void <init>()>();
v108 = v109;
v110 = interfaceinvoke v9.<java.util.List: java.util.Iterator iterator()>();
label21:
v111 = interfaceinvoke v110.<java.util.Iterator: boolean hasNext()>();
if v111 == 0 goto label22;
v112 = interfaceinvoke v110.<java.util.Iterator: java.lang.Object next()>();
v113 = virtualinvoke v112.<io.quarkus.runtime.RuntimeValue: java.lang.Object getValue()>();
v114 = new io.quarkus.runtime.logging.LoggingSetupRecorder$AdditionalNamedHandlersConsumer;
specialinvoke v114.<io.quarkus.runtime.logging.LoggingSetupRecorder$AdditionalNamedHandlersConsumer: void <init>(java.util.Map,java.util.logging.ErrorManager,java.util.Collection,io.quarkus.runtime.logging.LoggingSetupRecorder$ShutdownNotifier)>(v109, v33, v36, v16);
interfaceinvoke v113.<java.util.Map: void forEach(java.util.function.BiConsumer)>(v114);
goto label21;
label22:
interfaceinvoke v105.<java.util.Map: void putAll(java.util.Map)>(v108);
v115 = new io.quarkus.runtime.logging.LoggingSetupRecorder$3;
specialinvoke v115.<io.quarkus.runtime.logging.LoggingSetupRecorder$3: void <init>(io.quarkus.runtime.logging.LoggingSetupRecorder,java.util.Map,io.quarkus.runtime.logging.LogBuildTimeConfig,java.util.Map)>(v0, v17, v2, v4);
interfaceinvoke v17.<java.util.Map: void forEach(java.util.function.BiConsumer)>(v115);
v116 = new io.quarkus.runtime.logging.LoggingSetupRecorder$CategoryLoggerConsumer;
specialinvoke v116.<io.quarkus.runtime.logging.LoggingSetupRecorder$CategoryLoggerConsumer: void <init>(org.jboss.logmanager.LogContext,java.util.Map,java.util.logging.ErrorManager)>(v18, v105, v33);
interfaceinvoke v17.<java.util.Map: void forEach(java.util.function.BiConsumer)>(v116);
label23:
v117 = interfaceinvoke v8.<java.util.List: java.util.Iterator iterator()>();
label24:
v118 = interfaceinvoke v117.<java.util.Iterator: boolean hasNext()>();
if v118 == 0 goto label25;
v119 = interfaceinvoke v117.<java.util.Iterator: java.lang.Object next()>();
v120 = virtualinvoke v119.<io.quarkus.runtime.RuntimeValue: java.lang.Object getValue()>();
v121 = virtualinvoke v120.<java.util.Optional: boolean isPresent()>();
if v121 == 0 goto label24;
v122 = virtualinvoke v120.<java.util.Optional: java.lang.Object get()>();
virtualinvoke v122.<java.util.logging.Handler: void setErrorManager(java.util.logging.ErrorManager)>(v33);
virtualinvoke v122.<java.util.logging.Handler: void setFilter(java.util.logging.Filter)>(v40);
virtualinvoke v48.<java.util.ArrayList: boolean add(java.lang.Object)>(v122);
goto label24;
label25:
v123 = v1.<io.quarkus.runtime.logging.LogConfig: java.util.Optional handlers>;
staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: void addNamedHandlersToRootHandlers(java.util.Optional,java.util.Map,java.util.ArrayList,java.util.logging.ErrorManager)>(v123, v105, v48, v33);
v124 = <io.quarkus.bootstrap.logging.InitialConfigurator: io.quarkus.bootstrap.logging.QuarkusDelayedHandler DELAYED_HANDLER>;
virtualinvoke v124.<io.quarkus.bootstrap.logging.QuarkusDelayedHandler: void setAutoFlush(boolean)>(0);
v125 = <io.quarkus.bootstrap.logging.InitialConfigurator: io.quarkus.bootstrap.logging.QuarkusDelayedHandler DELAYED_HANDLER>;
v126 = <org.jboss.logmanager.EmbeddedConfigurator: java.util.logging.Handler[] NO_HANDLERS>;
v127 = virtualinvoke v48.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(v126);
virtualinvoke v125.<io.quarkus.bootstrap.logging.QuarkusDelayedHandler: java.util.logging.Handler[] setHandlers(java.util.logging.Handler[])>(v127);
return v16;
}
private static java.util.Map createNamedFilters(io.quarkus.runtime.logging.DiscoveredLogComponents)
{
io.quarkus.runtime.logging.LoggingSetupRecorder$4 v7;
java.util.HashMap v4;
io.quarkus.runtime.logging.DiscoveredLogComponents v0;
io.quarkus.runtime.logging.LogFilterFactory v5;
java.util.Map v1, v3, v6;
boolean v2;
v0 := @parameter0: io.quarkus.runtime.logging.DiscoveredLogComponents;
v1 = virtualinvoke v0.<io.quarkus.runtime.logging.DiscoveredLogComponents: java.util.Map getNameToFilterClass()>();
v2 = interfaceinvoke v1.<java.util.Map: boolean isEmpty()>();
if v2 == 0 goto label1;
v3 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
return v3;
label1:
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>()>();
v5 = staticinvoke <io.quarkus.runtime.logging.LogFilterFactory: io.quarkus.runtime.logging.LogFilterFactory load()>();
v6 = virtualinvoke v0.<io.quarkus.runtime.logging.DiscoveredLogComponents: java.util.Map getNameToFilterClass()>();
v7 = new io.quarkus.runtime.logging.LoggingSetupRecorder$4;
specialinvoke v7.<io.quarkus.runtime.logging.LoggingSetupRecorder$4: void <init>(java.util.Map,io.quarkus.runtime.logging.LogFilterFactory)>(v4, v5);
interfaceinvoke v6.<java.util.Map: void forEach(java.util.function.BiConsumer)>(v7);
return v4;
}
public static void initializeBuildTimeLogging(io.quarkus.runtime.logging.LogConfig, io.quarkus.runtime.logging.LogBuildTimeConfig, java.util.Map, io.quarkus.runtime.console.ConsoleRuntimeConfig, io.quarkus.runtime.LaunchMode)
{
java.util.Map v12, v2, v30, v39, v40, v47, v50, v6;
java.util.Set v15, v41, v62;
java.util.logging.ErrorManager v11;
io.quarkus.runtime.logging.LogConfig v0;
java.lang.Object[] v58, v80;
io.quarkus.runtime.logging.LogBuildTimeConfig v1;
java.util.logging.Handler[] v79;
java.util.ArrayList v13, v26;
io.quarkus.runtime.logging.ConsoleConfig v27, v29;
java.lang.String v60;
org.jboss.logmanager.Logger v67, v8;
io.quarkus.runtime.logging.LogCleanupFilter v25;
boolean v17, v28, v43, v64, v70, v73, v75;
java.util.List v24, v31, v35, v36, v37, v38;
io.quarkus.runtime.logging.InheritableLevel v61, v69, v71;
java.util.Optional v33, v74, v76;
java.util.logging.Handler v34;
io.quarkus.runtime.logging.LogCleanupFilterElement v19;
org.jboss.logmanager.LogContext v7;
org.jboss.logmanager.errormanager.OnlyOnceErrorManager v10;
org.jboss.logging.Logger v57;
io.quarkus.runtime.LaunchMode v4;
java.util.function.Function v46, v51;
java.util.logging.Level v22, v48, v49, v52, v53, v72, v9;
io.quarkus.runtime.logging.LoggingSetupRecorder$ShutdownNotifier v5;
io.quarkus.runtime.RuntimeValue v32;
int v14, v54, v55;
io.quarkus.bootstrap.logging.QuarkusDelayedHandler v77, v78;
java.util.Iterator v16, v42, v63;
java.lang.Object v18, v20, v21, v23, v44, v45, v56, v59, v65, v66, v68;
io.quarkus.runtime.console.ConsoleRuntimeConfig v3;
v0 := @parameter0: io.quarkus.runtime.logging.LogConfig;
v1 := @parameter1: io.quarkus.runtime.logging.LogBuildTimeConfig;
v2 := @parameter2: java.util.Map;
v3 := @parameter3: io.quarkus.runtime.console.ConsoleRuntimeConfig;
v4 := @parameter4: io.quarkus.runtime.LaunchMode;
v5 = new io.quarkus.runtime.logging.LoggingSetupRecorder$ShutdownNotifier;
specialinvoke v5.<io.quarkus.runtime.logging.LoggingSetupRecorder$ShutdownNotifier: void <init>()>();
v6 = v0.<io.quarkus.runtime.logging.LogConfig: java.util.Map categories>;
v7 = staticinvoke <org.jboss.logmanager.LogContext: org.jboss.logmanager.LogContext getLogContext()>();
v8 = virtualinvoke v7.<org.jboss.logmanager.LogContext: org.jboss.logmanager.Logger getLogger(java.lang.String)>("");
v9 = v0.<io.quarkus.runtime.logging.LogConfig: java.util.logging.Level level>;
virtualinvoke v8.<org.jboss.logmanager.Logger: void setLevel(java.util.logging.Level)>(v9);
v10 = new org.jboss.logmanager.errormanager.OnlyOnceErrorManager;
specialinvoke v10.<org.jboss.logmanager.errormanager.OnlyOnceErrorManager: void <init>()>();
v11 = v10;
v12 = v0.<io.quarkus.runtime.logging.LogConfig: java.util.Map filters>;
v13 = new java.util.ArrayList;
v14 = interfaceinvoke v12.<java.util.Map: int size()>();
specialinvoke v13.<java.util.ArrayList: void <init>(int)>(v14);
v15 = interfaceinvoke v12.<java.util.Map: java.util.Set entrySet()>();
v16 = interfaceinvoke v15.<java.util.Set: java.util.Iterator iterator()>();
label1:
v17 = interfaceinvoke v16.<java.util.Iterator: boolean hasNext()>();
if v17 == 0 goto label2;
v18 = interfaceinvoke v16.<java.util.Iterator: java.lang.Object next()>();
v19 = new io.quarkus.runtime.logging.LogCleanupFilterElement;
v20 = interfaceinvoke v18.<java.util.Map$Entry: java.lang.Object getKey()>();
v21 = interfaceinvoke v18.<java.util.Map$Entry: java.lang.Object getValue()>();
v22 = v21.<io.quarkus.runtime.logging.CleanupFilterConfig: java.util.logging.Level targetLevel>;
v23 = interfaceinvoke v18.<java.util.Map$Entry: java.lang.Object getValue()>();
v24 = v23.<io.quarkus.runtime.logging.CleanupFilterConfig: java.util.List ifStartsWith>;
specialinvoke v19.<io.quarkus.runtime.logging.LogCleanupFilterElement: void <init>(java.lang.String,java.util.logging.Level,java.util.List)>(v20, v22, v24);
interfaceinvoke v13.<java.util.List: boolean add(java.lang.Object)>(v19);
goto label1;
label2:
v25 = new io.quarkus.runtime.logging.LogCleanupFilter;
specialinvoke v25.<io.quarkus.runtime.logging.LogCleanupFilter: void <init>(java.util.Collection,io.quarkus.runtime.logging.LoggingSetupRecorder$ShutdownNotifier)>(v13, v5);
v26 = new java.util.ArrayList;
specialinvoke v26.<java.util.ArrayList: void <init>(int)>(3);
v27 = v0.<io.quarkus.runtime.logging.LogConfig: io.quarkus.runtime.logging.ConsoleConfig console>;
v28 = v27.<io.quarkus.runtime.logging.ConsoleConfig: boolean enable>;
if v28 == 0 goto label3;
v29 = v0.<io.quarkus.runtime.logging.LogConfig: io.quarkus.runtime.logging.ConsoleConfig console>;
v30 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
v31 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v32 = new io.quarkus.runtime.RuntimeValue;
v33 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
specialinvoke v32.<io.quarkus.runtime.RuntimeValue: void <init>(java.lang.Object)>(v33);
v34 = staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: java.util.logging.Handler configureConsoleHandler(io.quarkus.runtime.logging.ConsoleConfig,io.quarkus.runtime.console.ConsoleRuntimeConfig,java.util.logging.ErrorManager,io.quarkus.runtime.logging.LogCleanupFilter,java.util.Map,java.util.List,io.quarkus.runtime.RuntimeValue,io.quarkus.runtime.LaunchMode,boolean)>(v29, v3, v10, v25, v30, v31, v32, v4, 0);
v11 = virtualinvoke v34.<java.util.logging.Handler: java.util.logging.ErrorManager getErrorManager()>();
virtualinvoke v26.<java.util.ArrayList: boolean add(java.lang.Object)>(v34);
label3:
v35 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v36 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v37 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v38 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v39 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
v40 = staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: java.util.Map createNamedHandlers(io.quarkus.runtime.logging.LogConfig,io.quarkus.runtime.console.ConsoleRuntimeConfig,java.util.List,java.util.List,java.util.List,java.util.List,java.util.logging.ErrorManager,io.quarkus.runtime.logging.LogCleanupFilter,java.util.Map,io.quarkus.runtime.LaunchMode,io.quarkus.runtime.logging.LoggingSetupRecorder$ShutdownNotifier,boolean)>(v0, v3, v35, v36, v37, v38, v11, v25, v39, v4, v5, 0);
v41 = interfaceinvoke v6.<java.util.Map: java.util.Set entrySet()>();
v42 = interfaceinvoke v41.<java.util.Set: java.util.Iterator iterator()>();
label4:
v43 = interfaceinvoke v42.<java.util.Iterator: boolean hasNext()>();
if v43 == 0 goto label5;
v44 = interfaceinvoke v42.<java.util.Iterator: java.lang.Object next()>();
v45 = interfaceinvoke v44.<java.util.Map$Entry: java.lang.Object getKey()>();
v46 = staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder$getLevel__3031: java.util.function.Function bootstrap$()>();
v47 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
v48 = v1.<io.quarkus.runtime.logging.LogBuildTimeConfig: java.util.logging.Level minLevel>;
v49 = staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: java.util.logging.Level getLogLevel(java.lang.String,java.util.Map,java.util.function.Function,java.util.Map,java.util.logging.Level)>(v45, v6, v46, v47, v48);
v50 = v1.<io.quarkus.runtime.logging.LogBuildTimeConfig: java.util.Map categories>;
v51 = staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder$getMinLevel__3032: java.util.function.Function bootstrap$()>();
v52 = v1.<io.quarkus.runtime.logging.LogBuildTimeConfig: java.util.logging.Level minLevel>;
v53 = staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: java.util.logging.Level getLogLevel(java.lang.String,java.util.Map,java.util.function.Function,java.util.Map,java.util.logging.Level)>(v45, v50, v51, v2, v52);
v54 = virtualinvoke v49.<java.util.logging.Level: int intValue()>();
v55 = virtualinvoke v53.<java.util.logging.Level: int intValue()>();
if v54 >= v55 goto label4;
v56 = interfaceinvoke v44.<java.util.Map$Entry: java.lang.Object getKey()>();
v57 = <io.quarkus.runtime.logging.LoggingSetupRecorder: org.jboss.logging.Logger log>;
v58 = newarray (java.lang.Object)[6];
v58[0] = v49;
v58[1] = v56;
v58[2] = v53;
v58[3] = v53;
v58[4] = v56;
v58[5] = v49;
virtualinvoke v57.<org.jboss.logging.Logger: void warnf(java.lang.String,java.lang.Object[])>("Log level %s for category \'%s\' set below minimum logging level %s, promoting it to %s. Set the build time configuration property \'quarkus.log.category.\"%s\".min-level\' to \'%s\' to avoid this warning", v58);
v59 = interfaceinvoke v44.<java.util.Map$Entry: java.lang.Object getValue()>();
v60 = virtualinvoke v53.<java.util.logging.Level: java.lang.String toString()>();
v61 = staticinvoke <io.quarkus.runtime.logging.InheritableLevel: io.quarkus.runtime.logging.InheritableLevel of(java.lang.String)>(v60);
v59.<io.quarkus.runtime.logging.CategoryConfig: io.quarkus.runtime.logging.InheritableLevel level> = v61;
goto label4;
label5:
v62 = interfaceinvoke v6.<java.util.Map: java.util.Set entrySet()>();
v63 = interfaceinvoke v62.<java.util.Set: java.util.Iterator iterator()>();
label6:
v64 = interfaceinvoke v63.<java.util.Iterator: boolean hasNext()>();
if v64 == 0 goto label8;
v65 = interfaceinvoke v63.<java.util.Iterator: java.lang.Object next()>();
v66 = interfaceinvoke v65.<java.util.Map$Entry: java.lang.Object getKey()>();
v67 = virtualinvoke v7.<org.jboss.logmanager.LogContext: org.jboss.logmanager.Logger getLogger(java.lang.String)>(v66);
v68 = interfaceinvoke v65.<java.util.Map$Entry: java.lang.Object getValue()>();
v69 = v68.<io.quarkus.runtime.logging.CategoryConfig: io.quarkus.runtime.logging.InheritableLevel level>;
v70 = virtualinvoke v69.<io.quarkus.runtime.logging.InheritableLevel: boolean isInherited()>();
if v70 != 0 goto label7;
v71 = v68.<io.quarkus.runtime.logging.CategoryConfig: io.quarkus.runtime.logging.InheritableLevel level>;
v72 = virtualinvoke v71.<io.quarkus.runtime.logging.InheritableLevel: java.util.logging.Level getLevel()>();
virtualinvoke v67.<org.jboss.logmanager.Logger: void setLevel(java.util.logging.Level)>(v72);
label7:
v73 = v68.<io.quarkus.runtime.logging.CategoryConfig: boolean useParentHandlers>;
virtualinvoke v67.<org.jboss.logmanager.Logger: void setUseParentHandlers(boolean)>(v73);
v74 = v68.<io.quarkus.runtime.logging.CategoryConfig: java.util.Optional handlers>;
v75 = virtualinvoke v74.<java.util.Optional: boolean isPresent()>();
if v75 == 0 goto label6;
staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: void addNamedHandlersToCategory(io.quarkus.runtime.logging.CategoryConfig,java.util.Map,org.jboss.logmanager.Logger,java.util.logging.ErrorManager)>(v68, v40, v67, v11);
goto label6;
label8:
v76 = v0.<io.quarkus.runtime.logging.LogConfig: java.util.Optional handlers>;
staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: void addNamedHandlersToRootHandlers(java.util.Optional,java.util.Map,java.util.ArrayList,java.util.logging.ErrorManager)>(v76, v40, v26, v11);
v77 = <io.quarkus.bootstrap.logging.InitialConfigurator: io.quarkus.bootstrap.logging.QuarkusDelayedHandler DELAYED_HANDLER>;
virtualinvoke v77.<io.quarkus.bootstrap.logging.QuarkusDelayedHandler: void setAutoFlush(boolean)>(0);
v78 = <io.quarkus.bootstrap.logging.InitialConfigurator: io.quarkus.bootstrap.logging.QuarkusDelayedHandler DELAYED_HANDLER>;
v79 = <org.jboss.logmanager.EmbeddedConfigurator: java.util.logging.Handler[] NO_HANDLERS>;
v80 = virtualinvoke v26.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(v79);
virtualinvoke v78.<io.quarkus.bootstrap.logging.QuarkusDelayedHandler: java.util.logging.Handler[] setBuildTimeHandlers(java.util.logging.Handler[])>(v80);
return;
}
private boolean shouldCreateNamedHandlers(io.quarkus.runtime.logging.LogConfig, java.util.List)
{
io.quarkus.runtime.logging.LoggingSetupRecorder v0;
java.util.List v2;
java.util.Map v3;
io.quarkus.runtime.logging.LogConfig v1;
java.util.Optional v5, v7;
java.lang.Object v8;
boolean v10, v11, v12, v4, v6, v9;
v0 := @this: io.quarkus.runtime.logging.LoggingSetupRecorder;
v1 := @parameter0: io.quarkus.runtime.logging.LogConfig;
v2 := @parameter1: java.util.List;
v3 = v1.<io.quarkus.runtime.logging.LogConfig: java.util.Map categories>;
v4 = interfaceinvoke v3.<java.util.Map: boolean isEmpty()>();
if v4 != 0 goto label1;
return 1;
label1:
v5 = v1.<io.quarkus.runtime.logging.LogConfig: java.util.Optional handlers>;
v6 = virtualinvoke v5.<java.util.Optional: boolean isPresent()>();
if v6 == 0 goto label4;
v7 = v1.<io.quarkus.runtime.logging.LogConfig: java.util.Optional handlers>;
v8 = virtualinvoke v7.<java.util.Optional: java.lang.Object get()>();
v9 = interfaceinvoke v8.<java.util.List: boolean isEmpty()>();
if v9 != 0 goto label2;
v10 = 1;
goto label3;
label2:
v10 = 0;
label3:
return v10;
label4:
v11 = interfaceinvoke v2.<java.util.List: boolean isEmpty()>();
if v11 != 0 goto label5;
v12 = 1;
goto label6;
label5:
v12 = 0;
label6:
return v12;
}
public static java.util.logging.Level getLogLevel(java.lang.String, java.util.Map, java.util.function.Function, java.util.Map, java.util.logging.Level)
{
java.util.function.Function v2;
java.util.logging.Level v4, v7;
java.util.Map v1, v3;
int v8, v9;
io.quarkus.runtime.logging.InheritableLevel v5;
java.lang.String v0;
boolean v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.util.Map;
v2 := @parameter2: java.util.function.Function;
v3 := @parameter3: java.util.Map;
v4 := @parameter4: java.util.logging.Level;
label1:
v5 = staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: io.quarkus.runtime.logging.InheritableLevel getLogLevelNoInheritance(java.lang.String,java.util.Map,java.util.function.Function,java.util.Map)>(v0, v1, v2, v3);
v6 = virtualinvoke v5.<io.quarkus.runtime.logging.InheritableLevel: boolean isInherited()>();
if v6 != 0 goto label2;
v7 = virtualinvoke v5.<io.quarkus.runtime.logging.InheritableLevel: java.util.logging.Level getLevel()>();
return v7;
label2:
v8 = virtualinvoke v0.<java.lang.String: int lastIndexOf(int)>(46);
v9 = (int) -1;
if v8 != v9 goto label3;
return v4;
label3:
v0 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v8);
goto label1;
}
public static io.quarkus.runtime.logging.InheritableLevel getLogLevelNoInheritance(java.lang.String, java.util.Map, java.util.function.Function, java.util.Map)
{
java.util.Map v1, v3;
java.lang.Object v4, v5;
java.lang.String v0;
java.util.function.Function v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.util.Map;
v2 := @parameter2: java.util.function.Function;
v3 := @parameter3: java.util.Map;
v4 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
if v4 == null goto label1;
v5 = interfaceinvoke v2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v4);
label1:
if v5 != null goto label2;
interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
if v5 != null goto label2;
v5 = <io.quarkus.runtime.logging.InheritableLevel$Inherited: io.quarkus.runtime.logging.InheritableLevel$Inherited INSTANCE>;
label2:
return v5;
}
private static java.util.Map createNamedHandlers(io.quarkus.runtime.logging.LogConfig, io.quarkus.runtime.console.ConsoleRuntimeConfig, java.util.List, java.util.List, java.util.List, java.util.List, java.util.logging.ErrorManager, io.quarkus.runtime.logging.LogCleanupFilter, java.util.Map, io.quarkus.runtime.LaunchMode, io.quarkus.runtime.logging.LoggingSetupRecorder$ShutdownNotifier, boolean)
{
java.util.Map v13, v22, v31, v41, v48, v8;
boolean v11, v16, v19, v25, v28, v34, v37, v40, v44;
java.util.Collection v49;
java.util.Set v14, v23, v32;
java.util.logging.ErrorManager v6;
java.util.List v2, v3, v4, v5;
io.quarkus.runtime.logging.LogConfig v0;
java.util.logging.Handler v20, v29, v38;
io.quarkus.runtime.LaunchMode v9;
java.util.HashMap v12, v42;
io.quarkus.runtime.logging.LoggingSetupRecorder$ShutdownNotifier v10;
java.util.Iterator v15, v24, v33, v43;
io.quarkus.runtime.logging.LoggingSetupRecorder$AdditionalNamedHandlersConsumer v47;
io.quarkus.runtime.logging.LogCleanupFilter v7;
java.lang.Object v17, v18, v21, v26, v27, v30, v35, v36, v39, v45, v46;
io.quarkus.runtime.console.ConsoleRuntimeConfig v1;
v0 := @parameter0: io.quarkus.runtime.logging.LogConfig;
v1 := @parameter1: io.quarkus.runtime.console.ConsoleRuntimeConfig;
v2 := @parameter2: java.util.List;
v3 := @parameter3: java.util.List;
v4 := @parameter4: java.util.List;
v5 := @parameter5: java.util.List;
v6 := @parameter6: java.util.logging.ErrorManager;
v7 := @parameter7: io.quarkus.runtime.logging.LogCleanupFilter;
v8 := @parameter8: java.util.Map;
v9 := @parameter9: io.quarkus.runtime.LaunchMode;
v10 := @parameter10: io.quarkus.runtime.logging.LoggingSetupRecorder$ShutdownNotifier;
v11 := @parameter11: boolean;
v12 = new java.util.HashMap;
specialinvoke v12.<java.util.HashMap: void <init>()>();
v13 = v0.<io.quarkus.runtime.logging.LogConfig: java.util.Map consoleHandlers>;
v14 = interfaceinvoke v13.<java.util.Map: java.util.Set entrySet()>();
v15 = interfaceinvoke v14.<java.util.Set: java.util.Iterator iterator()>();
label1:
v16 = interfaceinvoke v15.<java.util.Iterator: boolean hasNext()>();
if v16 == 0 goto label2;
v17 = interfaceinvoke v15.<java.util.Iterator: java.lang.Object next()>();
v18 = interfaceinvoke v17.<java.util.Map$Entry: java.lang.Object getValue()>();
v19 = v18.<io.quarkus.runtime.logging.ConsoleConfig: boolean enable>;
if v19 == 0 goto label1;
v20 = staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: java.util.logging.Handler configureConsoleHandler(io.quarkus.runtime.logging.ConsoleConfig,io.quarkus.runtime.console.ConsoleRuntimeConfig,java.util.logging.ErrorManager,io.quarkus.runtime.logging.LogCleanupFilter,java.util.Map,java.util.List,io.quarkus.runtime.RuntimeValue,io.quarkus.runtime.LaunchMode,boolean)>(v18, v1, v6, v7, v8, v3, null, v9, v11);
v21 = interfaceinvoke v17.<java.util.Map$Entry: java.lang.Object getKey()>();
staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: void addToNamedHandlers(java.util.Map,java.util.logging.Handler,java.lang.String)>(v12, v20, v21);
goto label1;
label2:
v22 = v0.<io.quarkus.runtime.logging.LogConfig: java.util.Map fileHandlers>;
v23 = interfaceinvoke v22.<java.util.Map: java.util.Set entrySet()>();
v24 = interfaceinvoke v23.<java.util.Set: java.util.Iterator iterator()>();
label3:
v25 = interfaceinvoke v24.<java.util.Iterator: boolean hasNext()>();
if v25 == 0 goto label4;
v26 = interfaceinvoke v24.<java.util.Iterator: java.lang.Object next()>();
v27 = interfaceinvoke v26.<java.util.Map$Entry: java.lang.Object getValue()>();
v28 = v27.<io.quarkus.runtime.logging.FileConfig: boolean enable>;
if v28 == 0 goto label3;
v29 = staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: java.util.logging.Handler configureFileHandler(io.quarkus.runtime.logging.FileConfig,java.util.logging.ErrorManager,io.quarkus.runtime.logging.LogCleanupFilter,java.util.Map,java.util.List,boolean)>(v27, v6, v7, v8, v4, v11);
v30 = interfaceinvoke v26.<java.util.Map$Entry: java.lang.Object getKey()>();
staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: void addToNamedHandlers(java.util.Map,java.util.logging.Handler,java.lang.String)>(v12, v29, v30);
goto label3;
label4:
v31 = v0.<io.quarkus.runtime.logging.LogConfig: java.util.Map syslogHandlers>;
v32 = interfaceinvoke v31.<java.util.Map: java.util.Set entrySet()>();
v33 = interfaceinvoke v32.<java.util.Set: java.util.Iterator iterator()>();
label5:
v34 = interfaceinvoke v33.<java.util.Iterator: boolean hasNext()>();
if v34 == 0 goto label6;
v35 = interfaceinvoke v33.<java.util.Iterator: java.lang.Object next()>();
v36 = interfaceinvoke v35.<java.util.Map$Entry: java.lang.Object getValue()>();
v37 = v36.<io.quarkus.runtime.logging.SyslogConfig: boolean enable>;
if v37 == 0 goto label5;
v38 = staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: java.util.logging.Handler configureSyslogHandler(io.quarkus.runtime.logging.SyslogConfig,java.util.logging.ErrorManager,io.quarkus.runtime.logging.LogCleanupFilter,java.util.Map,java.util.List,boolean)>(v36, v6, v7, v8, v5, v11);
if v38 == null goto label5;
v39 = interfaceinvoke v35.<java.util.Map$Entry: java.lang.Object getKey()>();
staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: void addToNamedHandlers(java.util.Map,java.util.logging.Handler,java.lang.String)>(v12, v38, v39);
goto label5;
label6:
v40 = interfaceinvoke v2.<java.util.List: boolean isEmpty()>();
if v40 == 0 goto label7;
v41 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
goto label9;
label7:
v42 = new java.util.HashMap;
specialinvoke v42.<java.util.HashMap: void <init>()>();
v41 = v42;
v43 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label8:
v44 = interfaceinvoke v43.<java.util.Iterator: boolean hasNext()>();
if v44 == 0 goto label9;
v45 = interfaceinvoke v43.<java.util.Iterator: java.lang.Object next()>();
v46 = virtualinvoke v45.<io.quarkus.runtime.RuntimeValue: java.lang.Object getValue()>();
v47 = new io.quarkus.runtime.logging.LoggingSetupRecorder$AdditionalNamedHandlersConsumer;
v48 = v7.<io.quarkus.runtime.logging.LogCleanupFilter: java.util.Map filterElements>;
v49 = interfaceinvoke v48.<java.util.Map: java.util.Collection values()>();
specialinvoke v47.<io.quarkus.runtime.logging.LoggingSetupRecorder$AdditionalNamedHandlersConsumer: void <init>(java.util.Map,java.util.logging.ErrorManager,java.util.Collection,io.quarkus.runtime.logging.LoggingSetupRecorder$ShutdownNotifier)>(v42, v6, v49, v10);
interfaceinvoke v46.<java.util.Map: void forEach(java.util.function.BiConsumer)>(v47);
goto label8;
label9:
interfaceinvoke v12.<java.util.Map: void putAll(java.util.Map)>(v41);
return v12;
}
private static void addToNamedHandlers(java.util.Map, java.util.logging.Handler, java.lang.String)
{
io.quarkus.bootstrap.logging.QuarkusDelayedHandler v7;
java.lang.Object[] v5;
io.quarkus.runtime.logging.LoggingSetupRecorder$5 v8;
java.lang.RuntimeException v4;
java.util.Map v0;
java.lang.String v2, v6;
java.util.logging.Handler v1;
boolean v3;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: java.util.logging.Handler;
v2 := @parameter2: java.lang.String;
v3 = interfaceinvoke v0.<java.util.Map: boolean containsKey(java.lang.Object)>(v2);
if v3 == 0 goto label1;
v4 = new java.lang.RuntimeException;
v5 = newarray (java.lang.Object)[1];
v5[0] = v2;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Only one handler can be configured with the same name \'%s\'", v5);
specialinvoke v4.<java.lang.RuntimeException: void <init>(java.lang.String)>(v6);
throw v4;
label1:
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v2, v1);
v7 = <io.quarkus.bootstrap.logging.InitialConfigurator: io.quarkus.bootstrap.logging.QuarkusDelayedHandler DELAYED_HANDLER>;
v8 = new io.quarkus.runtime.logging.LoggingSetupRecorder$5;
specialinvoke v8.<io.quarkus.runtime.logging.LoggingSetupRecorder$5: void <init>(java.util.logging.Handler)>(v1);
virtualinvoke v7.<io.quarkus.bootstrap.logging.QuarkusDelayedHandler: void addLoggingCloseTask(java.lang.Runnable)>(v8);
return;
}
private static void addNamedHandlersToCategory(io.quarkus.runtime.logging.CategoryConfig, java.util.Map, org.jboss.logmanager.Logger, java.util.logging.ErrorManager)
{
org.jboss.logmanager.Logger v2;
io.quarkus.bootstrap.logging.QuarkusDelayedHandler v10;
io.quarkus.runtime.logging.CategoryConfig v0;
java.lang.Object[] v12;
java.util.Iterator v6;
io.quarkus.runtime.logging.LoggingSetupRecorder$6 v11;
java.util.logging.ErrorManager v3;
java.util.Map v1;
java.util.Optional v4;
java.lang.Object v5, v8, v9;
java.lang.String v13;
boolean v7;
v0 := @parameter0: io.quarkus.runtime.logging.CategoryConfig;
v1 := @parameter1: java.util.Map;
v2 := @parameter2: org.jboss.logmanager.Logger;
v3 := @parameter3: java.util.logging.ErrorManager;
v4 = v0.<io.quarkus.runtime.logging.CategoryConfig: java.util.Optional handlers>;
v5 = virtualinvoke v4.<java.util.Optional: java.lang.Object get()>();
v6 = interfaceinvoke v5.<java.util.List: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label3;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v8);
if v9 == null goto label2;
virtualinvoke v2.<org.jboss.logmanager.Logger: void addHandler(java.util.logging.Handler)>(v9);
v10 = <io.quarkus.bootstrap.logging.InitialConfigurator: io.quarkus.bootstrap.logging.QuarkusDelayedHandler DELAYED_HANDLER>;
v11 = new io.quarkus.runtime.logging.LoggingSetupRecorder$6;
specialinvoke v11.<io.quarkus.runtime.logging.LoggingSetupRecorder$6: void <init>(org.jboss.logmanager.Logger,java.util.logging.Handler)>(v2, v9);
virtualinvoke v10.<io.quarkus.bootstrap.logging.QuarkusDelayedHandler: void addLoggingCloseTask(java.lang.Runnable)>(v11);
goto label1;
label2:
v12 = newarray (java.lang.Object)[1];
v12[0] = v8;
v13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Handler with name \'%s\' is linked to a category but not configured.", v12);
virtualinvoke v3.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>(v13, null, 0);
goto label1;
label3:
return;
}
private static void addNamedHandlersToRootHandlers(java.util.Optional, java.util.Map, java.util.ArrayList, java.util.logging.ErrorManager)
{
java.lang.Object[] v12;
java.util.Iterator v8;
java.util.logging.ErrorManager v3;
java.util.ArrayList v2;
java.util.Map v1;
java.util.Optional v0;
java.lang.Object v10, v11, v5, v7;
java.lang.String v13;
boolean v4, v6, v9;
v0 := @parameter0: java.util.Optional;
v1 := @parameter1: java.util.Map;
v2 := @parameter2: java.util.ArrayList;
v3 := @parameter3: java.util.logging.ErrorManager;
v4 = virtualinvoke v0.<java.util.Optional: boolean isEmpty()>();
if v4 == 0 goto label1;
return;
label1:
v5 = virtualinvoke v0.<java.util.Optional: java.lang.Object get()>();
v6 = interfaceinvoke v5.<java.util.List: boolean isEmpty()>();
if v6 == 0 goto label2;
return;
label2:
v7 = virtualinvoke v0.<java.util.Optional: java.lang.Object get()>();
v8 = interfaceinvoke v7.<java.util.List: java.util.Iterator iterator()>();
label3:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label5;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v10);
if v11 == null goto label4;
virtualinvoke v2.<java.util.ArrayList: boolean add(java.lang.Object)>(v11);
goto label3;
label4:
v12 = newarray (java.lang.Object)[1];
v12[0] = v10;
v13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Handler with name \'%s\' is linked to a category but not configured.", v12);
virtualinvoke v3.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>(v13, null, 0);
goto label3;
label5:
return;
}
public void initializeLoggingForImageBuild()
{
org.jboss.logmanager.handlers.ConsoleHandler v3;
io.quarkus.bootstrap.logging.QuarkusDelayedHandler v6, v7;
org.jboss.logmanager.formatters.PatternFormatter v4;
io.quarkus.runtime.logging.LoggingSetupRecorder v0;
java.util.logging.Handler[] v8;
java.util.logging.Level v5;
io.quarkus.runtime.ImageMode v1, v2;
v0 := @this: io.quarkus.runtime.logging.LoggingSetupRecorder;
v1 = staticinvoke <io.quarkus.runtime.ImageMode: io.quarkus.runtime.ImageMode current()>();
v2 = <io.quarkus.runtime.ImageMode: io.quarkus.runtime.ImageMode NATIVE_BUILD>;
if v1 != v2 goto label1;
v3 = new org.jboss.logmanager.handlers.ConsoleHandler;
v4 = new org.jboss.logmanager.formatters.PatternFormatter;
specialinvoke v4.<org.jboss.logmanager.formatters.PatternFormatter: void <init>(java.lang.String)>("%d{HH:mm:ss,SSS} %-5p [%c{1.}] %s%e%n");
specialinvoke v3.<org.jboss.logmanager.handlers.ConsoleHandler: void <init>(java.util.logging.Formatter)>(v4);
v5 = <java.util.logging.Level: java.util.logging.Level INFO>;
virtualinvoke v3.<org.jboss.logmanager.handlers.ConsoleHandler: void setLevel(java.util.logging.Level)>(v5);
v6 = <io.quarkus.bootstrap.logging.InitialConfigurator: io.quarkus.bootstrap.logging.QuarkusDelayedHandler DELAYED_HANDLER>;
virtualinvoke v6.<io.quarkus.bootstrap.logging.QuarkusDelayedHandler: void setAutoFlush(boolean)>(0);
v7 = <io.quarkus.bootstrap.logging.InitialConfigurator: io.quarkus.bootstrap.logging.QuarkusDelayedHandler DELAYED_HANDLER>;
v8 = newarray (java.util.logging.Handler)[1];
v8[0] = v3;
virtualinvoke v7.<io.quarkus.bootstrap.logging.QuarkusDelayedHandler: java.util.logging.Handler[] setHandlers(java.util.logging.Handler[])>(v8);
label1:
return;
}
private static java.util.logging.Handler configureConsoleHandler(io.quarkus.runtime.logging.ConsoleConfig, io.quarkus.runtime.console.ConsoleRuntimeConfig, java.util.logging.ErrorManager, io.quarkus.runtime.logging.LogCleanupFilter, java.util.Map, java.util.List, io.quarkus.runtime.RuntimeValue, io.quarkus.runtime.LaunchMode, boolean)
{
java.util.Map v4;
org.jboss.logmanager.ExtHandler v38;
boolean v11, v14, v16, v18, v21, v30, v35, v40, v42, v8, v9;
org.jboss.logmanager.handlers.ConsoleHandler v29;
io.quarkus.runtime.logging.AsyncConfig v34, v36, v41;
java.util.logging.ErrorManager v2, v44;
io.quarkus.runtime.logging.BannerFormatter v25, v28;
java.util.List v5;
org.jboss.logmanager.formatters.ColorPatternFormatter v22;
java.util.Optional v33;
java.util.logging.Handler v39;
org.jboss.logmanager.formatters.PatternFormatter v26;
io.quarkus.runtime.LaunchMode v7;
java.util.logging.Level v32, v37;
io.quarkus.runtime.logging.ConsoleConfig v0;
io.quarkus.runtime.RuntimeValue v6;
int v23;
java.lang.String v24, v27;
org.jboss.logmanager.handlers.ConsoleHandler$Target v31;
io.quarkus.runtime.logging.LoggingSetupRecorder$7 v43;
java.util.Iterator v10;
io.quarkus.runtime.logging.LogCleanupFilter v3;
java.lang.Object v12, v13, v15, v17, v19, v20;
io.quarkus.runtime.console.ConsoleRuntimeConfig v1;
v0 := @parameter0: io.quarkus.runtime.logging.ConsoleConfig;
v1 := @parameter1: io.quarkus.runtime.console.ConsoleRuntimeConfig;
v2 := @parameter2: java.util.logging.ErrorManager;
v3 := @parameter3: io.quarkus.runtime.logging.LogCleanupFilter;
v4 := @parameter4: java.util.Map;
v5 := @parameter5: java.util.List;
v6 := @parameter6: io.quarkus.runtime.RuntimeValue;
v7 := @parameter7: io.quarkus.runtime.LaunchMode;
v8 := @parameter8: boolean;
v9 = 0;
v10 = interfaceinvoke v5.<java.util.List: java.util.Iterator iterator()>();
label01:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label02;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
v13 = virtualinvoke v12.<io.quarkus.runtime.RuntimeValue: java.lang.Object getValue()>();
v14 = virtualinvoke v13.<java.util.Optional: boolean isPresent()>();
if v14 == 0 goto label01;
v15 = virtualinvoke v13.<java.util.Optional: java.lang.Object get()>();
goto label01;
label02:
v16 = 0;
if v15 != null goto label07;
if v6 == null goto label03;
v17 = virtualinvoke v6.<io.quarkus.runtime.RuntimeValue: java.lang.Object getValue()>();
v18 = virtualinvoke v17.<java.util.Optional: boolean isPresent()>();
if v18 == 0 goto label03;
v19 = virtualinvoke v6.<io.quarkus.runtime.RuntimeValue: java.lang.Object getValue()>();
v20 = virtualinvoke v19.<java.util.Optional: java.lang.Object get()>();
label03:
v21 = staticinvoke <io.quarkus.runtime.util.ColorSupport: boolean isColorEnabled(io.quarkus.runtime.console.ConsoleRuntimeConfig,io.quarkus.runtime.logging.ConsoleConfig)>(v1, v0);
if v21 == 0 goto label05;
v16 = 1;
v22 = new org.jboss.logmanager.formatters.ColorPatternFormatter;
v23 = v0.<io.quarkus.runtime.logging.ConsoleConfig: int darken>;
v24 = v0.<io.quarkus.runtime.logging.ConsoleConfig: java.lang.String format>;
specialinvoke v22.<org.jboss.logmanager.formatters.ColorPatternFormatter: void <init>(int,java.lang.String)>(v23, v24);
if v20 == null goto label04;
v25 = new io.quarkus.runtime.logging.BannerFormatter;
specialinvoke v25.<io.quarkus.runtime.logging.BannerFormatter: void <init>(java.util.logging.Formatter,boolean,java.util.function.Supplier)>(v22, 1, v20);
v15 = v25;
goto label07;
label04:
v15 = v22;
goto label07;
label05:
v26 = new org.jboss.logmanager.formatters.PatternFormatter;
v27 = v0.<io.quarkus.runtime.logging.ConsoleConfig: java.lang.String format>;
specialinvoke v26.<org.jboss.logmanager.formatters.PatternFormatter: void <init>(java.lang.String)>(v27);
if v20 == null goto label06;
v28 = new io.quarkus.runtime.logging.BannerFormatter;
specialinvoke v28.<io.quarkus.runtime.logging.BannerFormatter: void <init>(java.util.logging.Formatter,boolean,java.util.function.Supplier)>(v26, 0, v20);
v15 = v28;
goto label07;
label06:
v15 = v26;
label07:
v29 = new org.jboss.logmanager.handlers.ConsoleHandler;
v30 = v0.<io.quarkus.runtime.logging.ConsoleConfig: boolean stderr>;
if v30 == 0 goto label08;
v31 = <org.jboss.logmanager.handlers.ConsoleHandler$Target: org.jboss.logmanager.handlers.ConsoleHandler$Target SYSTEM_ERR>;
goto label09;
label08:
v31 = <org.jboss.logmanager.handlers.ConsoleHandler$Target: org.jboss.logmanager.handlers.ConsoleHandler$Target SYSTEM_OUT>;
label09:
specialinvoke v29.<org.jboss.logmanager.handlers.ConsoleHandler: void <init>(org.jboss.logmanager.handlers.ConsoleHandler$Target,java.util.logging.Formatter)>(v31, v15);
v32 = v0.<io.quarkus.runtime.logging.ConsoleConfig: java.util.logging.Level level>;
virtualinvoke v29.<org.jboss.logmanager.handlers.ConsoleHandler: void setLevel(java.util.logging.Level)>(v32);
virtualinvoke v29.<org.jboss.logmanager.handlers.ConsoleHandler: void setErrorManager(java.util.logging.ErrorManager)>(v2);
v33 = v0.<io.quarkus.runtime.logging.ConsoleConfig: java.util.Optional filter>;
staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: void applyFilter(boolean,java.util.logging.ErrorManager,io.quarkus.runtime.logging.LogCleanupFilter,java.util.Optional,java.util.Map,java.util.logging.Handler)>(v8, v2, v3, v33, v4, v29);
v34 = v0.<io.quarkus.runtime.logging.ConsoleConfig: io.quarkus.runtime.logging.AsyncConfig async>;
v35 = v34.<io.quarkus.runtime.logging.AsyncConfig: boolean enable>;
if v35 == 0 goto label10;
v36 = v0.<io.quarkus.runtime.logging.ConsoleConfig: io.quarkus.runtime.logging.AsyncConfig async>;
v37 = v0.<io.quarkus.runtime.logging.ConsoleConfig: java.util.logging.Level level>;
v38 = staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: org.jboss.logmanager.handlers.AsyncHandler createAsyncHandler(io.quarkus.runtime.logging.AsyncConfig,java.util.logging.Level,java.util.logging.Handler)>(v36, v37, v29);
goto label11;
label10:
v38 = v29;
label11:
v39 = v38;
if v16 == 0 goto label12;
v40 = virtualinvoke v7.<io.quarkus.runtime.LaunchMode: boolean isDevOrTest()>();
if v40 == 0 goto label12;
v41 = v0.<io.quarkus.runtime.logging.ConsoleConfig: io.quarkus.runtime.logging.AsyncConfig async>;
v42 = v41.<io.quarkus.runtime.logging.AsyncConfig: boolean enable>;
if v42 != 0 goto label12;
v43 = new io.quarkus.runtime.logging.LoggingSetupRecorder$7;
specialinvoke v43.<io.quarkus.runtime.logging.LoggingSetupRecorder$7: void <init>(java.util.logging.Handler)>(v38);
v39 = v43;
label12:
if v9 == 0 goto label13;
v44 = virtualinvoke v39.<java.util.logging.Handler: java.util.logging.ErrorManager getErrorManager()>();
virtualinvoke v44.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>("Multiple console formatters were activated", null, 0);
label13:
return v39;
}
private static java.util.logging.Handler configureFileHandler(io.quarkus.runtime.logging.FileConfig, java.util.logging.ErrorManager, io.quarkus.runtime.logging.LogCleanupFilter, java.util.Map, java.util.List, boolean)
{
org.jboss.logmanager.handlers.FileHandler v16;
java.util.Map v3;
org.jboss.logmanager.handlers.PeriodicSizeRotatingFileHandler v9;
io.quarkus.runtime.logging.FileConfig v0;
boolean v14, v21, v22, v24, v27, v35, v43, v5, v8;
io.quarkus.runtime.logging.AsyncConfig v42, v44;
java.util.logging.ErrorManager v1, v41;
java.io.FileNotFoundException v32;
java.util.List v4;
java.util.Optional v10, v34, v36, v40, v7;
org.jboss.logmanager.handlers.SizeRotatingFileHandler v17;
java.io.UnsupportedEncodingException v39;
org.jboss.logmanager.handlers.AsyncHandler v46;
org.jboss.logmanager.formatters.PatternFormatter v29;
io.quarkus.runtime.configuration.MemorySize v12, v18;
long v13, v19;
io.quarkus.runtime.logging.FileConfig$RotationConfig v6;
java.util.logging.Level v33, v45;
int v15, v20;
java.lang.String v30, v38;
java.util.Iterator v23;
java.io.File v31;
io.quarkus.runtime.logging.LogCleanupFilter v2;
java.lang.Object v11, v25, v26, v28, v37;
v0 := @parameter0: io.quarkus.runtime.logging.FileConfig;
v1 := @parameter1: java.util.logging.ErrorManager;
v2 := @parameter2: io.quarkus.runtime.logging.LogCleanupFilter;
v3 := @parameter3: java.util.Map;
v4 := @parameter4: java.util.List;
v5 := @parameter5: boolean;
v6 = v0.<io.quarkus.runtime.logging.FileConfig: io.quarkus.runtime.logging.FileConfig$RotationConfig rotation>;
v7 = v6.<io.quarkus.runtime.logging.FileConfig$RotationConfig: java.util.Optional fileSuffix>;
v8 = virtualinvoke v7.<java.util.Optional: boolean isPresent()>();
if v8 == 0 goto label01;
v9 = new org.jboss.logmanager.handlers.PeriodicSizeRotatingFileHandler;
specialinvoke v9.<org.jboss.logmanager.handlers.PeriodicSizeRotatingFileHandler: void <init>()>();
v10 = v6.<io.quarkus.runtime.logging.FileConfig$RotationConfig: java.util.Optional fileSuffix>;
v11 = virtualinvoke v10.<java.util.Optional: java.lang.Object get()>();
virtualinvoke v9.<org.jboss.logmanager.handlers.PeriodicSizeRotatingFileHandler: void setSuffix(java.lang.String)>(v11);
v12 = v6.<io.quarkus.runtime.logging.FileConfig$RotationConfig: io.quarkus.runtime.configuration.MemorySize maxFileSize>;
v13 = virtualinvoke v12.<io.quarkus.runtime.configuration.MemorySize: long asLongValue()>();
virtualinvoke v9.<org.jboss.logmanager.handlers.PeriodicSizeRotatingFileHandler: void setRotateSize(long)>(v13);
v14 = v6.<io.quarkus.runtime.logging.FileConfig$RotationConfig: boolean rotateOnBoot>;
virtualinvoke v9.<org.jboss.logmanager.handlers.PeriodicSizeRotatingFileHandler: void setRotateOnBoot(boolean)>(v14);
v15 = v6.<io.quarkus.runtime.logging.FileConfig$RotationConfig: int maxBackupIndex>;
virtualinvoke v9.<org.jboss.logmanager.handlers.PeriodicSizeRotatingFileHandler: void setMaxBackupIndex(int)>(v15);
v16 = v9;
goto label02;
label01:
v17 = new org.jboss.logmanager.handlers.SizeRotatingFileHandler;
v18 = v6.<io.quarkus.runtime.logging.FileConfig$RotationConfig: io.quarkus.runtime.configuration.MemorySize maxFileSize>;
v19 = virtualinvoke v18.<io.quarkus.runtime.configuration.MemorySize: long asLongValue()>();
v20 = v6.<io.quarkus.runtime.logging.FileConfig$RotationConfig: int maxBackupIndex>;
specialinvoke v17.<org.jboss.logmanager.handlers.SizeRotatingFileHandler: void <init>(long,int)>(v19, v20);
v21 = v6.<io.quarkus.runtime.logging.FileConfig$RotationConfig: boolean rotateOnBoot>;
virtualinvoke v17.<org.jboss.logmanager.handlers.SizeRotatingFileHandler: void setRotateOnBoot(boolean)>(v21);
v16 = v17;
label02:
v22 = 0;
v23 = interfaceinvoke v4.<java.util.List: java.util.Iterator iterator()>();
label03:
v24 = interfaceinvoke v23.<java.util.Iterator: boolean hasNext()>();
if v24 == 0 goto label04;
v25 = interfaceinvoke v23.<java.util.Iterator: java.lang.Object next()>();
v26 = virtualinvoke v25.<io.quarkus.runtime.RuntimeValue: java.lang.Object getValue()>();
v27 = virtualinvoke v26.<java.util.Optional: boolean isPresent()>();
if v27 == 0 goto label03;
v28 = virtualinvoke v26.<java.util.Optional: java.lang.Object get()>();
goto label03;
label04:
if v28 != null goto label05;
v29 = new org.jboss.logmanager.formatters.PatternFormatter;
v30 = v0.<io.quarkus.runtime.logging.FileConfig: java.lang.String format>;
specialinvoke v29.<org.jboss.logmanager.formatters.PatternFormatter: void <init>(java.lang.String)>(v30);
v28 = v29;
label05:
virtualinvoke v16.<org.jboss.logmanager.handlers.FileHandler: void setFormatter(java.util.logging.Formatter)>(v28);
virtualinvoke v16.<org.jboss.logmanager.handlers.FileHandler: void setAppend(boolean)>(1);
label06:
v31 = v0.<io.quarkus.runtime.logging.FileConfig: java.io.File path>;
virtualinvoke v16.<org.jboss.logmanager.handlers.FileHandler: void setFile(java.io.File)>(v31);
label07:
goto label09;
label08:
v32 := @caughtexception;
virtualinvoke v1.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>("Failed to set log file", v32, 4);
label09:
virtualinvoke v16.<org.jboss.logmanager.handlers.FileHandler: void setErrorManager(java.util.logging.ErrorManager)>(v1);
v33 = v0.<io.quarkus.runtime.logging.FileConfig: java.util.logging.Level level>;
virtualinvoke v16.<org.jboss.logmanager.handlers.FileHandler: void setLevel(java.util.logging.Level)>(v33);
virtualinvoke v16.<org.jboss.logmanager.handlers.FileHandler: void setFilter(java.util.logging.Filter)>(v2);
v34 = v0.<io.quarkus.runtime.logging.FileConfig: java.util.Optional encoding>;
v35 = virtualinvoke v34.<java.util.Optional: boolean isPresent()>();
if v35 == 0 goto label13;
label10:
v36 = v0.<io.quarkus.runtime.logging.FileConfig: java.util.Optional encoding>;
v37 = virtualinvoke v36.<java.util.Optional: java.lang.Object get()>();
v38 = virtualinvoke v37.<java.nio.charset.Charset: java.lang.String name()>();
virtualinvoke v16.<org.jboss.logmanager.handlers.FileHandler: void setEncoding(java.lang.String)>(v38);
label11:
goto label13;
label12:
v39 := @caughtexception;
virtualinvoke v1.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>("Failed to set character encoding", v39, 0);
label13:
v40 = v0.<io.quarkus.runtime.logging.FileConfig: java.util.Optional filter>;
staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: void applyFilter(boolean,java.util.logging.ErrorManager,io.quarkus.runtime.logging.LogCleanupFilter,java.util.Optional,java.util.Map,java.util.logging.Handler)>(v5, v1, v2, v40, v3, v16);
if v22 == 0 goto label14;
v41 = virtualinvoke v16.<org.jboss.logmanager.handlers.FileHandler: java.util.logging.ErrorManager getErrorManager()>();
virtualinvoke v41.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>("Multiple file formatters were activated", null, 0);
label14:
v42 = v0.<io.quarkus.runtime.logging.FileConfig: io.quarkus.runtime.logging.AsyncConfig async>;
v43 = v42.<io.quarkus.runtime.logging.AsyncConfig: boolean enable>;
if v43 == 0 goto label15;
v44 = v0.<io.quarkus.runtime.logging.FileConfig: io.quarkus.runtime.logging.AsyncConfig async>;
v45 = v0.<io.quarkus.runtime.logging.FileConfig: java.util.logging.Level level>;
v46 = staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: org.jboss.logmanager.handlers.AsyncHandler createAsyncHandler(io.quarkus.runtime.logging.AsyncConfig,java.util.logging.Level,java.util.logging.Handler)>(v44, v45, v16);
return v46;
label15:
return v16;
catch java.io.FileNotFoundException from label06 to label07 with label08;
catch java.io.UnsupportedEncodingException from label10 to label11 with label12;
}
private static void applyFilter(boolean, java.util.logging.ErrorManager, io.quarkus.runtime.logging.LogCleanupFilter, java.util.Optional, java.util.Map, java.util.logging.Handler)
{
java.util.logging.ErrorManager v1;
java.util.List v11;
io.quarkus.runtime.logging.LogCleanupFilter v2;
org.jboss.logmanager.filters.AllFilter v10;
java.util.Map v4;
java.util.Optional v3;
java.lang.Object v7, v8;
java.lang.String v9;
java.util.logging.Handler v5;
boolean v0, v6;
v0 := @parameter0: boolean;
v1 := @parameter1: java.util.logging.ErrorManager;
v2 := @parameter2: io.quarkus.runtime.logging.LogCleanupFilter;
v3 := @parameter3: java.util.Optional;
v4 := @parameter4: java.util.Map;
v5 := @parameter5: java.util.logging.Handler;
v6 = virtualinvoke v3.<java.util.Optional: boolean isEmpty()>();
if v6 != 0 goto label1;
if v0 != 0 goto label2;
label1:
virtualinvoke v5.<java.util.logging.Handler: void setFilter(java.util.logging.Filter)>(v2);
goto label4;
label2:
v7 = virtualinvoke v3.<java.util.Optional: java.lang.Object get()>();
v8 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(v7);
if v8 != null goto label3;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unable to find named filter \'\u0001\'");
virtualinvoke v1.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>(v9, null, 0);
virtualinvoke v5.<java.util.logging.Handler: void setFilter(java.util.logging.Filter)>(v2);
goto label4;
label3:
v10 = new org.jboss.logmanager.filters.AllFilter;
v11 = staticinvoke <java.util.List: java.util.List of(java.lang.Object,java.lang.Object)>(v2, v8);
specialinvoke v10.<org.jboss.logmanager.filters.AllFilter: void <init>(java.lang.Iterable)>(v11);
virtualinvoke v5.<java.util.logging.Handler: void setFilter(java.util.logging.Filter)>(v10);
label4:
return;
}
private static java.util.logging.Handler configureSyslogHandler(io.quarkus.runtime.logging.SyslogConfig, java.util.logging.ErrorManager, io.quarkus.runtime.logging.LogCleanupFilter, java.util.Map, java.util.List, boolean)
{
org.jboss.logmanager.handlers.SyslogHandler v6;
org.jboss.logmanager.handlers.SyslogHandler$SyslogType v18;
java.util.Map v3;
io.quarkus.runtime.logging.SyslogConfig v0;
boolean v20, v21, v22, v24, v26, v29, v36, v5;
io.quarkus.runtime.logging.AsyncConfig v35, v37;
org.jboss.logmanager.handlers.SyslogHandler$Protocol v19;
java.util.logging.ErrorManager v1, v34;
java.net.InetSocketAddress v7, v9;
java.util.List v4;
java.util.Optional v11, v14, v33;
org.jboss.logmanager.handlers.AsyncHandler v39;
org.jboss.logmanager.formatters.PatternFormatter v31;
java.util.logging.Level v23, v38;
int v10;
java.lang.String v12, v15, v32, v8;
org.jboss.logmanager.handlers.SyslogHandler$Facility v17;
java.util.Iterator v25;
java.io.IOException v40;
io.quarkus.runtime.logging.LogCleanupFilter v2;
java.lang.Object v13, v16, v27, v28, v30;
v0 := @parameter0: io.quarkus.runtime.logging.SyslogConfig;
v1 := @parameter1: java.util.logging.ErrorManager;
v2 := @parameter2: io.quarkus.runtime.logging.LogCleanupFilter;
v3 := @parameter3: java.util.Map;
v4 := @parameter4: java.util.List;
v5 := @parameter5: boolean;
label1:
v6 = new org.jboss.logmanager.handlers.SyslogHandler;
v7 = v0.<io.quarkus.runtime.logging.SyslogConfig: java.net.InetSocketAddress endpoint>;
v8 = virtualinvoke v7.<java.net.InetSocketAddress: java.lang.String getHostString()>();
v9 = v0.<io.quarkus.runtime.logging.SyslogConfig: java.net.InetSocketAddress endpoint>;
v10 = virtualinvoke v9.<java.net.InetSocketAddress: int getPort()>();
specialinvoke v6.<org.jboss.logmanager.handlers.SyslogHandler: void <init>(java.lang.String,int)>(v8, v10);
v11 = v0.<io.quarkus.runtime.logging.SyslogConfig: java.util.Optional appName>;
v12 = staticinvoke <org.wildfly.common.os.Process: java.lang.String getProcessName()>();
v13 = virtualinvoke v11.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(v12);
virtualinvoke v6.<org.jboss.logmanager.handlers.SyslogHandler: void setAppName(java.lang.String)>(v13);
v14 = v0.<io.quarkus.runtime.logging.SyslogConfig: java.util.Optional hostname>;
v15 = staticinvoke <org.wildfly.common.net.HostName: java.lang.String getQualifiedHostName()>();
v16 = virtualinvoke v14.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(v15);
virtualinvoke v6.<org.jboss.logmanager.handlers.SyslogHandler: void setHostname(java.lang.String)>(v16);
v17 = v0.<io.quarkus.runtime.logging.SyslogConfig: org.jboss.logmanager.handlers.SyslogHandler$Facility facility>;
virtualinvoke v6.<org.jboss.logmanager.handlers.SyslogHandler: void setFacility(org.jboss.logmanager.handlers.SyslogHandler$Facility)>(v17);
v18 = v0.<io.quarkus.runtime.logging.SyslogConfig: org.jboss.logmanager.handlers.SyslogHandler$SyslogType syslogType>;
virtualinvoke v6.<org.jboss.logmanager.handlers.SyslogHandler: void setSyslogType(org.jboss.logmanager.handlers.SyslogHandler$SyslogType)>(v18);
v19 = v0.<io.quarkus.runtime.logging.SyslogConfig: org.jboss.logmanager.handlers.SyslogHandler$Protocol protocol>;
virtualinvoke v6.<org.jboss.logmanager.handlers.SyslogHandler: void setProtocol(org.jboss.logmanager.handlers.SyslogHandler$Protocol)>(v19);
v20 = v0.<io.quarkus.runtime.logging.SyslogConfig: boolean blockOnReconnect>;
virtualinvoke v6.<org.jboss.logmanager.handlers.SyslogHandler: void setBlockOnReconnect(boolean)>(v20);
v21 = v0.<io.quarkus.runtime.logging.SyslogConfig: boolean truncate>;
virtualinvoke v6.<org.jboss.logmanager.handlers.SyslogHandler: void setTruncate(boolean)>(v21);
v22 = v0.<io.quarkus.runtime.logging.SyslogConfig: boolean useCountingFraming>;
virtualinvoke v6.<org.jboss.logmanager.handlers.SyslogHandler: void setUseCountingFraming(boolean)>(v22);
v23 = v0.<io.quarkus.runtime.logging.SyslogConfig: java.util.logging.Level level>;
virtualinvoke v6.<org.jboss.logmanager.handlers.SyslogHandler: void setLevel(java.util.logging.Level)>(v23);
v24 = 0;
v25 = interfaceinvoke v4.<java.util.List: java.util.Iterator iterator()>();
label2:
v26 = interfaceinvoke v25.<java.util.Iterator: boolean hasNext()>();
if v26 == 0 goto label3;
v27 = interfaceinvoke v25.<java.util.Iterator: java.lang.Object next()>();
v28 = virtualinvoke v27.<io.quarkus.runtime.RuntimeValue: java.lang.Object getValue()>();
v29 = virtualinvoke v28.<java.util.Optional: boolean isPresent()>();
if v29 == 0 goto label2;
v30 = virtualinvoke v28.<java.util.Optional: java.lang.Object get()>();
goto label2;
label3:
if v30 != null goto label4;
v31 = new org.jboss.logmanager.formatters.PatternFormatter;
v32 = v0.<io.quarkus.runtime.logging.SyslogConfig: java.lang.String format>;
specialinvoke v31.<org.jboss.logmanager.formatters.PatternFormatter: void <init>(java.lang.String)>(v32);
v30 = v31;
label4:
virtualinvoke v6.<org.jboss.logmanager.handlers.SyslogHandler: void setFormatter(java.util.logging.Formatter)>(v30);
virtualinvoke v6.<org.jboss.logmanager.handlers.SyslogHandler: void setErrorManager(java.util.logging.ErrorManager)>(v1);
virtualinvoke v6.<org.jboss.logmanager.handlers.SyslogHandler: void setFilter(java.util.logging.Filter)>(v2);
v33 = v0.<io.quarkus.runtime.logging.SyslogConfig: java.util.Optional filter>;
staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: void applyFilter(boolean,java.util.logging.ErrorManager,io.quarkus.runtime.logging.LogCleanupFilter,java.util.Optional,java.util.Map,java.util.logging.Handler)>(v5, v1, v2, v33, v3, v6);
if v24 == 0 goto label5;
v34 = virtualinvoke v6.<org.jboss.logmanager.handlers.SyslogHandler: java.util.logging.ErrorManager getErrorManager()>();
virtualinvoke v34.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>("Multiple syslog formatters were activated", null, 0);
label5:
v35 = v0.<io.quarkus.runtime.logging.SyslogConfig: io.quarkus.runtime.logging.AsyncConfig async>;
v36 = v35.<io.quarkus.runtime.logging.AsyncConfig: boolean enable>;
if v36 == 0 goto label7;
v37 = v0.<io.quarkus.runtime.logging.SyslogConfig: io.quarkus.runtime.logging.AsyncConfig async>;
v38 = v0.<io.quarkus.runtime.logging.SyslogConfig: java.util.logging.Level level>;
v39 = staticinvoke <io.quarkus.runtime.logging.LoggingSetupRecorder: org.jboss.logmanager.handlers.AsyncHandler createAsyncHandler(io.quarkus.runtime.logging.AsyncConfig,java.util.logging.Level,java.util.logging.Handler)>(v37, v38, v6);
label6:
return v39;
label7:
return v6;
label8:
v40 := @caughtexception;
virtualinvoke v1.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>("Failed to create syslog handler", v40, 4);
return null;
catch java.io.IOException from label1 to label6 with label8;
}
private static org.jboss.logmanager.handlers.AsyncHandler createAsyncHandler(io.quarkus.runtime.logging.AsyncConfig, java.util.logging.Level, java.util.logging.Handler)
{
org.jboss.logmanager.handlers.AsyncHandler$OverflowAction v5;
int v4;
io.quarkus.runtime.logging.AsyncConfig v0;
java.util.logging.Handler v2;
org.jboss.logmanager.handlers.AsyncHandler v3;
java.util.logging.Level v1;
v0 := @parameter0: io.quarkus.runtime.logging.AsyncConfig;
v1 := @parameter1: java.util.logging.Level;
v2 := @parameter2: java.util.logging.Handler;
v3 = new org.jboss.logmanager.handlers.AsyncHandler;
v4 = v0.<io.quarkus.runtime.logging.AsyncConfig: int queueLength>;
specialinvoke v3.<org.jboss.logmanager.handlers.AsyncHandler: void <init>(int)>(v4);
v5 = v0.<io.quarkus.runtime.logging.AsyncConfig: org.jboss.logmanager.handlers.AsyncHandler$OverflowAction overflow>;
virtualinvoke v3.<org.jboss.logmanager.handlers.AsyncHandler: void setOverflowAction(org.jboss.logmanager.handlers.AsyncHandler$OverflowAction)>(v5);
virtualinvoke v3.<org.jboss.logmanager.handlers.AsyncHandler: void addHandler(java.util.logging.Handler)>(v2);
virtualinvoke v3.<org.jboss.logmanager.handlers.AsyncHandler: void setLevel(java.util.logging.Level)>(v1);
return v3;
}
static void <clinit>()
{
org.jboss.logging.Logger v0;
v0 = staticinvoke <org.jboss.logging.Logger: org.jboss.logging.Logger getLogger(java.lang.Class)>(class "Lio/quarkus/runtime/logging/LoggingSetupRecorder;");
<io.quarkus.runtime.logging.LoggingSetupRecorder: org.jboss.logging.Logger log> = v0;
return;
}
}