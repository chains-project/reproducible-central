public final class io.smallrye.common.expression.Expression extends java.lang.Object
{
private final io.smallrye.common.expression.Node content;
private final java.util.Set referencedStrings;
private static final io.smallrye.common.expression.Expression EMPTY;
private static final java.util.EnumSet NO_FLAGS;
static final boolean $assertionsDisabled;
void <init>(io.smallrye.common.expression.Node)
{
java.util.Iterator v6;
java.util.Set v4;
io.smallrye.common.expression.Node v1;
io.smallrye.common.expression.Expression v0;
java.util.HashSet v2;
int v5;
java.lang.Object v7;
boolean v3;
v0 := @this: io.smallrye.common.expression.Expression;
v1 := @parameter0: io.smallrye.common.expression.Node;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.common.expression.Expression: io.smallrye.common.expression.Node content> = v1;
v2 = new java.util.HashSet;
specialinvoke v2.<java.util.HashSet: void <init>()>();
virtualinvoke v1.<io.smallrye.common.expression.Node: void catalog(java.util.HashSet)>(v2);
v3 = virtualinvoke v2.<java.util.HashSet: boolean isEmpty()>();
if v3 == 0 goto label1;
v4 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
goto label3;
label1:
v5 = virtualinvoke v2.<java.util.HashSet: int size()>();
if v5 != 1 goto label2;
v6 = virtualinvoke v2.<java.util.HashSet: java.util.Iterator iterator()>();
v7 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v4 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v7);
goto label3;
label2:
v4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v2);
label3:
v0.<io.smallrye.common.expression.Expression: java.util.Set referencedStrings> = v4;
return;
}
public java.util.Set getReferencedStrings()
{
java.util.Set v1;
io.smallrye.common.expression.Expression v0;
v0 := @this: io.smallrye.common.expression.Expression;
v1 = v0.<io.smallrye.common.expression.Expression: java.util.Set referencedStrings>;
return v1;
}
public java.lang.String evaluateException(io.smallrye.common.function.ExceptionBiConsumer) throws java.lang.Exception
{
io.smallrye.common.function.ExceptionBiConsumer v1;
io.smallrye.common.expression.ResolveContext v4;
io.smallrye.common.expression.Node v3;
java.lang.StringBuilder v2;
io.smallrye.common.expression.Expression v0;
java.lang.String v5;
v0 := @this: io.smallrye.common.expression.Expression;
v1 := @parameter0: io.smallrye.common.function.ExceptionBiConsumer;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("expandFunction", v1);
v2 = new java.lang.StringBuilder;
specialinvoke v2.<java.lang.StringBuilder: void <init>()>();
v3 = v0.<io.smallrye.common.expression.Expression: io.smallrye.common.expression.Node content>;
v4 = new io.smallrye.common.expression.ResolveContext;
specialinvoke v4.<io.smallrye.common.expression.ResolveContext: void <init>(io.smallrye.common.function.ExceptionBiConsumer,java.lang.StringBuilder)>(v1, v2);
virtualinvoke v3.<io.smallrye.common.expression.Node: void emit(io.smallrye.common.expression.ResolveContext,io.smallrye.common.function.ExceptionBiConsumer)>(v4, v1);
v5 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.String toString()>();
return v5;
}
public java.lang.String evaluate(java.util.function.BiConsumer)
{
io.smallrye.common.function.ExceptionBiConsumer v2;
java.util.function.BiConsumer v1;
io.smallrye.common.expression.Expression v0;
java.lang.String v3;
v0 := @this: io.smallrye.common.expression.Expression;
v1 := @parameter0: java.util.function.BiConsumer;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <io.smallrye.common.expression.Expression$accept__3157: io.smallrye.common.function.ExceptionBiConsumer bootstrap$(java.util.function.BiConsumer)>(v1);
v3 = virtualinvoke v0.<io.smallrye.common.expression.Expression: java.lang.String evaluateException(io.smallrye.common.function.ExceptionBiConsumer)>(v2);
return v3;
}
public java.lang.String evaluateWithPropertiesAndEnvironment(boolean)
{
java.util.function.BiConsumer v2;
io.smallrye.common.expression.Expression v0;
java.lang.String v3;
boolean v1;
v0 := @this: io.smallrye.common.expression.Expression;
v1 := @parameter0: boolean;
v2 = staticinvoke <io.smallrye.common.expression.Expression$lambda_evaluateWithPropertiesAndEnvironment_0__3158: java.util.function.BiConsumer bootstrap$(boolean)>(v1);
v3 = virtualinvoke v0.<io.smallrye.common.expression.Expression: java.lang.String evaluate(java.util.function.BiConsumer)>(v2);
return v3;
}
public java.lang.String evaluateWithProperties(boolean)
{
java.util.function.BiConsumer v2;
io.smallrye.common.expression.Expression v0;
java.lang.String v3;
boolean v1;
v0 := @this: io.smallrye.common.expression.Expression;
v1 := @parameter0: boolean;
v2 = staticinvoke <io.smallrye.common.expression.Expression$lambda_evaluateWithProperties_1__3159: java.util.function.BiConsumer bootstrap$(boolean)>(v1);
v3 = virtualinvoke v0.<io.smallrye.common.expression.Expression: java.lang.String evaluate(java.util.function.BiConsumer)>(v2);
return v3;
}
public java.lang.String evaluateWithEnvironment(boolean)
{
java.util.function.BiConsumer v2;
io.smallrye.common.expression.Expression v0;
java.lang.String v3;
boolean v1;
v0 := @this: io.smallrye.common.expression.Expression;
v1 := @parameter0: boolean;
v2 = staticinvoke <io.smallrye.common.expression.Expression$lambda_evaluateWithEnvironment_2__3160: java.util.function.BiConsumer bootstrap$(boolean)>(v1);
v3 = virtualinvoke v0.<io.smallrye.common.expression.Expression: java.lang.String evaluate(java.util.function.BiConsumer)>(v2);
return v3;
}
public static transient io.smallrye.common.expression.Expression compile(java.lang.String, io.smallrye.common.expression.Expression$Flag[])
{
io.smallrye.common.expression.Expression$Flag[] v1;
int v2;
io.smallrye.common.expression.Expression v5;
java.lang.String v0;
io.smallrye.common.expression.Expression$Flag v4;
java.util.EnumSet v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: io.smallrye.common.expression.Expression$Flag[];
if v1 == null goto label1;
v2 = lengthof v1;
if v2 != 0 goto label2;
label1:
v3 = <io.smallrye.common.expression.Expression: java.util.EnumSet NO_FLAGS>;
goto label3;
label2:
v4 = v1[0];
v3 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum[])>(v4, v1);
label3:
v5 = staticinvoke <io.smallrye.common.expression.Expression: io.smallrye.common.expression.Expression compile(java.lang.String,java.util.EnumSet)>(v0, v3);
return v5;
}
public static io.smallrye.common.expression.Expression compile(java.lang.String, java.util.EnumSet)
{
io.smallrye.common.expression.Expression$Itr v4, v5, v6;
io.smallrye.common.expression.Node v8, v9;
io.smallrye.common.expression.Expression v10;
io.smallrye.common.expression.Expression$Flag v2;
java.lang.String v0, v7;
java.util.EnumSet v1;
boolean v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.util.EnumSet;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("string", v0);
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("flags", v1);
v2 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag NO_TRIM>;
v3 = virtualinvoke v1.<java.util.EnumSet: boolean contains(java.lang.Object)>(v2);
if v3 == 0 goto label1;
v4 = new io.smallrye.common.expression.Expression$Itr;
specialinvoke v4.<io.smallrye.common.expression.Expression$Itr: void <init>(java.lang.String)>(v0);
v5 = v4;
goto label2;
label1:
v6 = new io.smallrye.common.expression.Expression$Itr;
v7 = virtualinvoke v0.<java.lang.String: java.lang.String trim()>();
specialinvoke v6.<io.smallrye.common.expression.Expression$Itr: void <init>(java.lang.String)>(v7);
v5 = v6;
label2:
v8 = staticinvoke <io.smallrye.common.expression.Expression: io.smallrye.common.expression.Node parseString(io.smallrye.common.expression.Expression$Itr,boolean,boolean,boolean,java.util.EnumSet)>(v5, 1, 0, 0, v1);
v9 = <io.smallrye.common.expression.Node: io.smallrye.common.expression.Node NULL>;
if v8 != v9 goto label3;
v10 = <io.smallrye.common.expression.Expression: io.smallrye.common.expression.Expression EMPTY>;
goto label4;
label3:
v10 = new io.smallrye.common.expression.Expression;
specialinvoke v10.<io.smallrye.common.expression.Expression: void <init>(io.smallrye.common.expression.Node)>(v8);
label4:
return v10;
}
private static io.smallrye.common.expression.Node parseString(io.smallrye.common.expression.Expression$Itr, boolean, boolean, boolean, java.util.EnumSet)
{
java.util.EnumSet v4;
io.smallrye.common.expression.Expression$Itr v0;
io.smallrye.common.expression.Expression$Flag v101, v107, v112, v118, v12, v124, v129, v135, v141, v148, v156, v158, v163, v168, v174, v23, v30, v35, v43, v47, v53, v58, v64, v73, v79, v90, v96;
int v10, v146, v150, v172, v179, v18, v21, v22, v26, v29, v38, v42, v46, v5, v67, v7, v70, v76, v78, v82, v85, v9, v93, v95, v99;
io.smallrye.common.expression.ExpressionNode v103, v109, v126, v143, v40, v51, v57, v62, v87;
io.smallrye.common.expression.LiteralNode v104, v106, v110, v114, v120, v121, v127, v131, v137, v138, v144, v153, v16, v160, v165, v173, v180, v19;
java.lang.AssertionError v71, v86;
java.util.ArrayList v6;
java.lang.String v116, v122, v133, v139, v14, v145, v151, v154, v161, v166, v17, v170, v176, v178, v181, v20, v37, v66, v75, v81, v92, v98;
boolean v1, v102, v108, v11, v113, v119, v125, v13, v130, v136, v142, v149, v157, v159, v164, v167, v169, v175, v2, v24, v25, v27, v28, v3, v31, v32, v34, v36, v44, v45, v48, v49, v54, v55, v59, v60, v63, v65, v69, v72, v74, v8, v80, v84, v89, v91, v97;
io.smallrye.common.expression.Node v105, v111, v115, v128, v132, v147, v155, v162, v182, v33, v41, v50, v52, v56, v61, v88;
java.lang.IllegalArgumentException v100, v117, v123, v134, v140, v15, v152, v171, v177, v39, v68, v77, v83, v94;
v0 := @parameter0: io.smallrye.common.expression.Expression$Itr;
v1 := @parameter1: boolean;
v2 := @parameter2: boolean;
v3 := @parameter3: boolean;
v4 := @parameter4: java.util.EnumSet;
v5 = 0;
v6 = new java.util.ArrayList;
specialinvoke v6.<java.util.ArrayList: void <init>()>();
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
label01:
v8 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: boolean hasNext()>();
if v8 == 0 goto label72;
v9 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
v10 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int next()>();
lookupswitch(v10)
{
case 36: goto label02;
case 58: goto label54;
case 92: goto label60;
case 123: goto label56;
case 125: goto label57;
default: goto label01;
};
label02:
if v1 == 0 goto label01;
v11 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: boolean hasNext()>();
if v11 != 0 goto label04;
v12 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag LENIENT_SYNTAX>;
v13 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v12);
if v13 != 0 goto label03;
v14 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
v15 = staticinvoke <io.smallrye.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v14, v9);
throw v15;
label03:
v16 = new io.smallrye.common.expression.LiteralNode;
v17 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
v18 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
specialinvoke v16.<io.smallrye.common.expression.LiteralNode: void <init>(java.lang.String,int,int)>(v17, v7, v18);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v16);
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label04:
if v9 <= v7 goto label05;
v19 = new io.smallrye.common.expression.LiteralNode;
v20 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
specialinvoke v19.<io.smallrye.common.expression.LiteralNode: void <init>(java.lang.String,int,int)>(v20, v7, v9);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v19);
label05:
v21 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
v22 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int next()>();
lookupswitch(v22)
{
case 36: goto label38;
case 58: goto label46;
case 123: goto label06;
case 125: goto label41;
default: goto label51;
};
label06:
v23 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag GENERAL_EXPANSION>;
v24 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v23);
if v24 == 0 goto label07;
v25 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: boolean hasNext()>();
if v25 == 0 goto label07;
v26 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int peekNext()>();
if v26 != 123 goto label07;
v27 = 1;
goto label08;
label07:
v27 = 0;
label08:
v28 = v27;
if v27 == 0 goto label09;
virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int next()>();
label09:
v29 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
v30 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag NO_RECURSE_KEY>;
v31 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v30);
if v31 != 0 goto label10;
v32 = 1;
goto label11;
label10:
v32 = 0;
label11:
v33 = staticinvoke <io.smallrye.common.expression.Expression: io.smallrye.common.expression.Node parseString(io.smallrye.common.expression.Expression$Itr,boolean,boolean,boolean,java.util.EnumSet)>(v0, v32, 1, 1, v4);
v34 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: boolean hasNext()>();
if v34 != 0 goto label13;
v35 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag LENIENT_SYNTAX>;
v36 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v35);
if v36 != 0 goto label12;
v37 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
v38 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
v39 = staticinvoke <io.smallrye.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v37, v38);
throw v39;
label12:
v40 = new io.smallrye.common.expression.ExpressionNode;
v41 = <io.smallrye.common.expression.Node: io.smallrye.common.expression.Node NULL>;
specialinvoke v40.<io.smallrye.common.expression.ExpressionNode: void <init>(boolean,io.smallrye.common.expression.Node,io.smallrye.common.expression.Node)>(v28, v33, v41);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v40);
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label13:
v42 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int peekNext()>();
if v42 != 58 goto label31;
v43 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag DOUBLE_COLON>;
v44 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v43);
if v44 == 0 goto label19;
virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int next()>();
v45 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: boolean hasNext()>();
if v45 == 0 goto label16;
v46 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int peekNext()>();
if v46 != 58 goto label16;
virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: void rewind(int)>(v29);
v47 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag NO_RECURSE_KEY>;
v48 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v47);
if v48 != 0 goto label14;
v49 = 1;
goto label15;
label14:
v49 = 0;
label15:
v50 = staticinvoke <io.smallrye.common.expression.Expression: io.smallrye.common.expression.Node parseString(io.smallrye.common.expression.Expression$Itr,boolean,boolean,boolean,java.util.EnumSet)>(v0, v49, 1, 0, v4);
v51 = new io.smallrye.common.expression.ExpressionNode;
v52 = <io.smallrye.common.expression.Node: io.smallrye.common.expression.Node NULL>;
specialinvoke v51.<io.smallrye.common.expression.ExpressionNode: void <init>(boolean,io.smallrye.common.expression.Node,io.smallrye.common.expression.Node)>(v28, v50, v52);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v51);
goto label22;
label16:
v53 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag NO_RECURSE_DEFAULT>;
v54 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v53);
if v54 != 0 goto label17;
v55 = 1;
goto label18;
label17:
v55 = 0;
label18:
v56 = staticinvoke <io.smallrye.common.expression.Expression: io.smallrye.common.expression.Node parseString(io.smallrye.common.expression.Expression$Itr,boolean,boolean,boolean,java.util.EnumSet)>(v0, v55, 1, 0, v4);
v57 = new io.smallrye.common.expression.ExpressionNode;
specialinvoke v57.<io.smallrye.common.expression.ExpressionNode: void <init>(boolean,io.smallrye.common.expression.Node,io.smallrye.common.expression.Node)>(v28, v33, v56);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v57);
goto label22;
label19:
virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int next()>();
v58 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag NO_RECURSE_DEFAULT>;
v59 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v58);
if v59 != 0 goto label20;
v60 = 1;
goto label21;
label20:
v60 = 0;
label21:
v61 = staticinvoke <io.smallrye.common.expression.Expression: io.smallrye.common.expression.Node parseString(io.smallrye.common.expression.Expression$Itr,boolean,boolean,boolean,java.util.EnumSet)>(v0, v60, 1, 0, v4);
v62 = new io.smallrye.common.expression.ExpressionNode;
specialinvoke v62.<io.smallrye.common.expression.ExpressionNode: void <init>(boolean,io.smallrye.common.expression.Node,io.smallrye.common.expression.Node)>(v28, v33, v61);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v62);
label22:
v63 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: boolean hasNext()>();
if v63 != 0 goto label24;
v64 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag LENIENT_SYNTAX>;
v65 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v64);
if v65 != 0 goto label23;
v66 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
v67 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
v68 = staticinvoke <io.smallrye.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v66, v67);
throw v68;
label23:
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label24:
v69 = <io.smallrye.common.expression.Expression: boolean $assertionsDisabled>;
if v69 != 0 goto label25;
v70 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int peekNext()>();
if v70 == 125 goto label25;
v71 = new java.lang.AssertionError;
specialinvoke v71.<java.lang.AssertionError: void <init>()>();
throw v71;
label25:
virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int next()>();
if v28 == 0 goto label30;
v72 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: boolean hasNext()>();
if v72 != 0 goto label27;
v73 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag LENIENT_SYNTAX>;
v74 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v73);
if v74 != 0 goto label26;
v75 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
v76 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
v77 = staticinvoke <io.smallrye.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v75, v76);
throw v77;
label26:
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label27:
v78 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int peekNext()>();
if v78 != 125 goto label28;
virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int next()>();
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label28:
v79 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag LENIENT_SYNTAX>;
v80 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v79);
if v80 != 0 goto label29;
v81 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
v82 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
v83 = staticinvoke <io.smallrye.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v81, v82);
throw v83;
label29:
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label30:
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label31:
v84 = <io.smallrye.common.expression.Expression: boolean $assertionsDisabled>;
if v84 != 0 goto label32;
v85 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int peekNext()>();
if v85 == 125 goto label32;
v86 = new java.lang.AssertionError;
specialinvoke v86.<java.lang.AssertionError: void <init>()>();
throw v86;
label32:
virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int next()>();
v87 = new io.smallrye.common.expression.ExpressionNode;
v88 = <io.smallrye.common.expression.Node: io.smallrye.common.expression.Node NULL>;
specialinvoke v87.<io.smallrye.common.expression.ExpressionNode: void <init>(boolean,io.smallrye.common.expression.Node,io.smallrye.common.expression.Node)>(v28, v33, v88);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v87);
if v28 == 0 goto label37;
v89 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: boolean hasNext()>();
if v89 != 0 goto label34;
v90 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag LENIENT_SYNTAX>;
v91 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v90);
if v91 != 0 goto label33;
v92 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
v93 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
v94 = staticinvoke <io.smallrye.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v92, v93);
throw v94;
label33:
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label34:
v95 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int peekNext()>();
if v95 != 125 goto label35;
virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int next()>();
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label35:
v96 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag LENIENT_SYNTAX>;
v97 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v96);
if v97 != 0 goto label36;
v98 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
v99 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
v100 = staticinvoke <io.smallrye.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v98, v99);
throw v100;
label36:
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label37:
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label38:
v101 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag MINI_EXPRS>;
v102 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v101);
if v102 == 0 goto label39;
v103 = new io.smallrye.common.expression.ExpressionNode;
v104 = <io.smallrye.common.expression.LiteralNode: io.smallrye.common.expression.LiteralNode DOLLAR>;
v105 = <io.smallrye.common.expression.Node: io.smallrye.common.expression.Node NULL>;
specialinvoke v103.<io.smallrye.common.expression.ExpressionNode: void <init>(boolean,io.smallrye.common.expression.Node,io.smallrye.common.expression.Node)>(0, v104, v105);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v103);
goto label40;
label39:
v106 = <io.smallrye.common.expression.LiteralNode: io.smallrye.common.expression.LiteralNode DOLLAR>;
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v106);
label40:
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label41:
v107 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag MINI_EXPRS>;
v108 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v107);
if v108 == 0 goto label42;
v109 = new io.smallrye.common.expression.ExpressionNode;
v110 = <io.smallrye.common.expression.LiteralNode: io.smallrye.common.expression.LiteralNode CLOSE_BRACE>;
v111 = <io.smallrye.common.expression.Node: io.smallrye.common.expression.Node NULL>;
specialinvoke v109.<io.smallrye.common.expression.ExpressionNode: void <init>(boolean,io.smallrye.common.expression.Node,io.smallrye.common.expression.Node)>(0, v110, v111);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v109);
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label42:
if v2 == 0 goto label44;
v112 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag LENIENT_SYNTAX>;
v113 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v112);
if v113 == 0 goto label43;
v114 = <io.smallrye.common.expression.LiteralNode: io.smallrye.common.expression.LiteralNode DOLLAR>;
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v114);
virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int prev()>();
v115 = staticinvoke <io.smallrye.common.expression.Node: io.smallrye.common.expression.Node fromList(java.util.List)>(v6);
return v115;
label43:
v116 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
v117 = staticinvoke <io.smallrye.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v116, v21);
throw v117;
label44:
v118 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag LENIENT_SYNTAX>;
v119 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v118);
if v119 == 0 goto label45;
v120 = <io.smallrye.common.expression.LiteralNode: io.smallrye.common.expression.LiteralNode DOLLAR>;
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v120);
v121 = <io.smallrye.common.expression.LiteralNode: io.smallrye.common.expression.LiteralNode CLOSE_BRACE>;
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v121);
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label45:
v122 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
v123 = staticinvoke <io.smallrye.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v122, v21);
throw v123;
label46:
v124 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag MINI_EXPRS>;
v125 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v124);
if v125 == 0 goto label47;
v126 = new io.smallrye.common.expression.ExpressionNode;
v127 = <io.smallrye.common.expression.LiteralNode: io.smallrye.common.expression.LiteralNode COLON>;
v128 = <io.smallrye.common.expression.Node: io.smallrye.common.expression.Node NULL>;
specialinvoke v126.<io.smallrye.common.expression.ExpressionNode: void <init>(boolean,io.smallrye.common.expression.Node,io.smallrye.common.expression.Node)>(0, v127, v128);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v126);
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label47:
if v3 == 0 goto label49;
v129 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag LENIENT_SYNTAX>;
v130 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v129);
if v130 == 0 goto label48;
virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int prev()>();
v131 = <io.smallrye.common.expression.LiteralNode: io.smallrye.common.expression.LiteralNode DOLLAR>;
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v131);
v132 = staticinvoke <io.smallrye.common.expression.Node: io.smallrye.common.expression.Node fromList(java.util.List)>(v6);
return v132;
label48:
v133 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
v134 = staticinvoke <io.smallrye.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v133, v21);
throw v134;
label49:
v135 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag LENIENT_SYNTAX>;
v136 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v135);
if v136 == 0 goto label50;
v137 = <io.smallrye.common.expression.LiteralNode: io.smallrye.common.expression.LiteralNode DOLLAR>;
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v137);
v138 = <io.smallrye.common.expression.LiteralNode: io.smallrye.common.expression.LiteralNode COLON>;
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v138);
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label50:
v139 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
v140 = staticinvoke <io.smallrye.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v139, v21);
throw v140;
label51:
v141 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag MINI_EXPRS>;
v142 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v141);
if v142 == 0 goto label52;
v143 = new io.smallrye.common.expression.ExpressionNode;
v144 = new io.smallrye.common.expression.LiteralNode;
v145 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
v146 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
specialinvoke v144.<io.smallrye.common.expression.LiteralNode: void <init>(java.lang.String,int,int)>(v145, v21, v146);
v147 = <io.smallrye.common.expression.Node: io.smallrye.common.expression.Node NULL>;
specialinvoke v143.<io.smallrye.common.expression.ExpressionNode: void <init>(boolean,io.smallrye.common.expression.Node,io.smallrye.common.expression.Node)>(0, v144, v147);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v143);
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label52:
v148 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag LENIENT_SYNTAX>;
v149 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v148);
if v149 == 0 goto label53;
v150 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getPrevIdx()>();
v7 = v150 - 1;
goto label01;
label53:
v151 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
v152 = staticinvoke <io.smallrye.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v151, v21);
throw v152;
label54:
if v3 == 0 goto label01;
virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int prev()>();
if v9 <= v7 goto label55;
v153 = new io.smallrye.common.expression.LiteralNode;
v154 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
specialinvoke v153.<io.smallrye.common.expression.LiteralNode: void <init>(java.lang.String,int,int)>(v154, v7, v9);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v153);
label55:
v155 = staticinvoke <io.smallrye.common.expression.Node: io.smallrye.common.expression.Node fromList(java.util.List)>(v6);
return v155;
label56:
v156 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag NO_SMART_BRACES>;
v157 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v156);
if v157 != 0 goto label01;
v5 = v5 + 1;
goto label01;
label57:
v158 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag NO_SMART_BRACES>;
v159 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v158);
if v159 != 0 goto label58;
if v5 <= 0 goto label58;
v5 = v5 - 1;
goto label01;
label58:
if v2 == 0 goto label01;
virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int prev()>();
if v9 < v7 goto label59;
v160 = new io.smallrye.common.expression.LiteralNode;
v161 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
specialinvoke v160.<io.smallrye.common.expression.LiteralNode: void <init>(java.lang.String,int,int)>(v161, v7, v9);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v160);
label59:
v162 = staticinvoke <io.smallrye.common.expression.Node: io.smallrye.common.expression.Node fromList(java.util.List)>(v6);
return v162;
label60:
v163 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag ESCAPES>;
v164 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v163);
if v164 == 0 goto label01;
if v9 <= v7 goto label61;
v165 = new io.smallrye.common.expression.LiteralNode;
v166 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
specialinvoke v165.<io.smallrye.common.expression.LiteralNode: void <init>(java.lang.String,int,int)>(v166, v7, v9);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v165);
v7 = v9;
label61:
v167 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: boolean hasNext()>();
if v167 != 0 goto label62;
v168 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag LENIENT_SYNTAX>;
v169 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v168);
if v169 != 0 goto label01;
v170 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
v171 = staticinvoke <io.smallrye.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v170, v9);
throw v171;
label62:
v172 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int next()>();
lookupswitch(v172)
{
case 92: goto label68;
case 98: goto label66;
case 102: goto label67;
case 110: goto label63;
case 114: goto label64;
case 116: goto label65;
default: goto label69;
};
label63:
v173 = <io.smallrye.common.expression.LiteralNode: io.smallrye.common.expression.LiteralNode NEWLINE>;
goto label71;
label64:
v173 = <io.smallrye.common.expression.LiteralNode: io.smallrye.common.expression.LiteralNode CARRIAGE_RETURN>;
goto label71;
label65:
v173 = <io.smallrye.common.expression.LiteralNode: io.smallrye.common.expression.LiteralNode TAB>;
goto label71;
label66:
v173 = <io.smallrye.common.expression.LiteralNode: io.smallrye.common.expression.LiteralNode BACKSPACE>;
goto label71;
label67:
v173 = <io.smallrye.common.expression.LiteralNode: io.smallrye.common.expression.LiteralNode FORM_FEED>;
goto label71;
label68:
v173 = <io.smallrye.common.expression.LiteralNode: io.smallrye.common.expression.LiteralNode BACKSLASH>;
goto label71;
label69:
v174 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag LENIENT_SYNTAX>;
v175 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v174);
if v175 == 0 goto label70;
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getPrevIdx()>();
goto label01;
label70:
v176 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
v177 = staticinvoke <io.smallrye.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v176, v9);
throw v177;
label71:
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v173);
v7 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label72:
v178 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
v179 = virtualinvoke v178.<java.lang.String: int length()>();
if v179 <= v7 goto label73;
v180 = new io.smallrye.common.expression.LiteralNode;
v181 = virtualinvoke v0.<io.smallrye.common.expression.Expression$Itr: java.lang.String getStr()>();
specialinvoke v180.<io.smallrye.common.expression.LiteralNode: void <init>(java.lang.String,int,int)>(v181, v7, v179);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v180);
label73:
v182 = staticinvoke <io.smallrye.common.expression.Node: io.smallrye.common.expression.Node fromList(java.util.List)>(v6);
return v182;
}
private static java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String, int)
{
int v1, v10, v14, v15, v5, v6, v7, v8, v9;
java.lang.String v0, v20, v3;
boolean v16, v17, v18;
java.lang.IllegalArgumentException v19;
java.lang.StringBuilder v11, v12, v13, v4;
io.smallrye.common.expression.Messages v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 = <io.smallrye.common.expression.Messages: io.smallrye.common.expression.Messages msg>;
v3 = interfaceinvoke v2.<io.smallrye.common.expression.Messages: java.lang.String invalidExpressionSyntax(int)>(v1);
v4 = new java.lang.StringBuilder;
v5 = virtualinvoke v3.<java.lang.String: int length()>();
v6 = virtualinvoke v0.<java.lang.String: int length()>();
v7 = v5 + v6;
v8 = virtualinvoke v0.<java.lang.String: int length()>();
v9 = v7 + v8;
v10 = v9 + 5;
specialinvoke v4.<java.lang.StringBuilder: void <init>(int)>(v10);
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v3);
v11 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);
v12 = virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);
virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v0);
v13 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);
virtualinvoke v13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);
v14 = 0;
label1:
if v14 >= v1 goto label4;
v15 = virtualinvoke v0.<java.lang.String: int codePointAt(int)>(v14);
v16 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(v15);
if v16 == 0 goto label2;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v15);
goto label3;
label2:
v17 = staticinvoke <java.lang.Character: boolean isValidCodePoint(int)>(v15);
if v17 == 0 goto label3;
v18 = staticinvoke <java.lang.Character: boolean isISOControl(int)>(v15);
if v18 != 0 goto label3;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
label3:
v14 = virtualinvoke v0.<java.lang.String: int offsetByCodePoints(int,int)>(v14, 1);
goto label1;
label4:
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(94);
v19 = new java.lang.IllegalArgumentException;
v20 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke v19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v20);
return v19;
}
static void <clinit>()
{
io.smallrye.common.expression.Node v4;
java.lang.Class v0;
io.smallrye.common.expression.Expression v3;
java.util.EnumSet v5;
boolean v1, v2;
v0 = class "Lio/smallrye/common/expression/Expression;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.smallrye.common.expression.Expression: boolean $assertionsDisabled> = v2;
v3 = new io.smallrye.common.expression.Expression;
v4 = <io.smallrye.common.expression.Node: io.smallrye.common.expression.Node NULL>;
specialinvoke v3.<io.smallrye.common.expression.Expression: void <init>(io.smallrye.common.expression.Node)>(v4);
<io.smallrye.common.expression.Expression: io.smallrye.common.expression.Expression EMPTY> = v3;
v5 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(class "Lio/smallrye/common/expression/Expression$Flag;");
<io.smallrye.common.expression.Expression: java.util.EnumSet NO_FLAGS> = v5;
return;
}
}