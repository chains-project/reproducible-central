public class io.smallrye.config.ConfigMappingGenerator extends java.lang.Object
{
static final boolean usefulDebugInfo;
private static final java.util.regex.Pattern ARRAY_FORMAT_REGEX;
private static final java.lang.String I_CLASS;
private static final java.lang.String I_COLLECTIONS;
private static final java.lang.String I_CONFIGURATION_OBJECT;
private static final java.lang.String I_CONVERTER;
private static final java.lang.String I_MAP;
private static final java.lang.String I_COLLECTION;
private static final java.lang.String I_LIST;
private static final java.lang.String I_INT_FUNCTION;
private static final java.lang.String I_MAPPING_CONTEXT;
private static final java.lang.String I_OBJECT;
private static final java.lang.String I_OPTIONAL;
private static final java.lang.String I_RUNTIME_EXCEPTION;
private static final java.lang.String I_SMALLRYE_CONFIG;
private static final java.lang.String I_STRING_BUILDER;
private static final java.lang.String I_INTEGER;
private static final java.lang.String I_STRING;
private static final java.lang.String I_FIELD;
private static final int V_THIS;
private static final int V_MAPPING_CONTEXT;
private static final int V_STRING_BUILDER;
private static final int V_LENGTH;
static final boolean $assertionsDisabled;
public void <init>()
{
io.smallrye.config.ConfigMappingGenerator v0;
v0 := @this: io.smallrye.config.ConfigMappingGenerator;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static byte[] generate(io.smallrye.config.ConfigMappingInterface)
{
byte[] v44;
org.objectweb.asm.MethodVisitor v12, v16, v28;
boolean v2, v37;
io.smallrye.config.ConfigMappingGenerator$Debugging$ClassVisitorImpl v3;
org.objectweb.asm.ClassWriter v1;
io.smallrye.config.ConfigMappingInterface v0;
org.objectweb.asm.Label v17, v18, v23, v25, v29, v30;
java.lang.String[] v8;
java.util.HashSet v34;
java.lang.String v11, v13, v14, v15, v19, v20, v21, v22, v24, v26, v27, v31, v32, v33, v35, v38, v39, v40, v41, v42, v43, v6, v7, v9;
io.smallrye.config.ConfigMappingInterface$ToStringMethod v36;
java.lang.Class v10;
java.lang.Object v4, v5;
v0 := @parameter0: io.smallrye.config.ConfigMappingInterface;
v1 = new org.objectweb.asm.ClassWriter;
specialinvoke v1.<org.objectweb.asm.ClassWriter: void <init>(int)>(3);
v2 = <io.smallrye.config.ConfigMappingGenerator: boolean usefulDebugInfo>;
if v2 == 0 goto label1;
v3 = new io.smallrye.config.ConfigMappingGenerator$Debugging$ClassVisitorImpl;
v4 = v3;
specialinvoke v3.<io.smallrye.config.ConfigMappingGenerator$Debugging$ClassVisitorImpl: void <init>(org.objectweb.asm.ClassWriter)>(v1);
goto label2;
label1:
v4 = v1;
label2:
v5 = v4;
v6 = virtualinvoke v0.<io.smallrye.config.ConfigMappingInterface: java.lang.String getClassInternalName()>();
v7 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v8 = newarray (java.lang.String)[2];
v9 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CONFIGURATION_OBJECT>;
v8[0] = v9;
v10 = virtualinvoke v0.<io.smallrye.config.ConfigMappingInterface: java.lang.Class getInterfaceType()>();
v11 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(v10);
v8[1] = v11;
virtualinvoke v4.<org.objectweb.asm.ClassVisitor: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(52, 1, v6, null, v7, v8);
virtualinvoke v4.<org.objectweb.asm.ClassVisitor: void visitSource(java.lang.String,java.lang.String)>(null, null);
v12 = virtualinvoke v4.<org.objectweb.asm.ClassVisitor: org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(1, "<init>", "()V", null, null);
virtualinvoke v12.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
v13 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
virtualinvoke v12.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(183, v13, "<init>", "()V", 0);
virtualinvoke v12.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(177);
virtualinvoke v12.<org.objectweb.asm.MethodVisitor: void visitEnd()>();
virtualinvoke v12.<org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>(0, 0);
v14 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)V");
v16 = virtualinvoke v4.<org.objectweb.asm.ClassVisitor: org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(1, "<init>", v15, null, null);
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitParameter(java.lang.String,int)>("context", 16);
v17 = new org.objectweb.asm.Label;
specialinvoke v17.<org.objectweb.asm.Label: void <init>()>();
v18 = new org.objectweb.asm.Label;
specialinvoke v18.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v17);
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
v19 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(183, v19, "<init>", "()V", 0);
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);
v20 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v21 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v22 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v21) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("()L\u0001;");
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v20, "getStringBuilder", v22, 0);
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(89);
v23 = new org.objectweb.asm.Label;
specialinvoke v23.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v23);
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(58, 2);
v24 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v24, "length", "()I", 0);
v25 = new org.objectweb.asm.Label;
specialinvoke v25.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v25);
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(54, 3);
v26 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v27 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v26) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)V");
v28 = virtualinvoke v4.<org.objectweb.asm.ClassVisitor: org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(1, "fillInOptionals", v27, null, null);
virtualinvoke v28.<org.objectweb.asm.MethodVisitor: void visitParameter(java.lang.String,int)>("context", 16);
v29 = new org.objectweb.asm.Label;
specialinvoke v29.<org.objectweb.asm.Label: void <init>()>();
v30 = new org.objectweb.asm.Label;
specialinvoke v30.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v28.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v29);
virtualinvoke v28.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);
v31 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v32 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v33 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v32) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("()L\u0001;");
virtualinvoke v28.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v31, "getStringBuilder", v33, 0);
virtualinvoke v28.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(58, 2);
v34 = new java.util.HashSet;
specialinvoke v34.<java.util.HashSet: void <init>()>();
v35 = virtualinvoke v0.<io.smallrye.config.ConfigMappingInterface: java.lang.String getClassInternalName()>();
staticinvoke <io.smallrye.config.ConfigMappingGenerator: void addProperties(org.objectweb.asm.ClassVisitor,org.objectweb.asm.MethodVisitor,org.objectweb.asm.MethodVisitor,java.util.Set,io.smallrye.config.ConfigMappingInterface,java.lang.String)>(v4, v16, v28, v34, v0, v35);
v36 = virtualinvoke v0.<io.smallrye.config.ConfigMappingInterface: io.smallrye.config.ConfigMappingInterface$ToStringMethod getToStringMethod()>();
v37 = virtualinvoke v36.<io.smallrye.config.ConfigMappingInterface$ToStringMethod: boolean generate()>();
if v37 == 0 goto label3;
staticinvoke <io.smallrye.config.ConfigMappingGenerator: void addToString(org.objectweb.asm.ClassVisitor,io.smallrye.config.ConfigMappingInterface)>(v4, v0);
label3:
virtualinvoke v28.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(177);
virtualinvoke v28.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v30);
v38 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v39 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v38) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("L\u0001;");
virtualinvoke v28.<org.objectweb.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>("mc", v39, null, v29, v30, 1);
virtualinvoke v28.<org.objectweb.asm.MethodVisitor: void visitEnd()>();
virtualinvoke v28.<org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>(0, 0);
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(177);
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v18);
v40 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v41 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v40) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("L\u0001;");
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>("mc", v41, null, v17, v18, 1);
v42 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v43 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v42) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("L\u0001;");
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>("sb", v43, null, v23, v18, 2);
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>("len", "I", null, v25, v18, 3);
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitEnd()>();
virtualinvoke v16.<org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>(0, 0);
virtualinvoke v5.<org.objectweb.asm.ClassVisitor: void visitEnd()>();
v44 = virtualinvoke v1.<org.objectweb.asm.ClassWriter: byte[] toByteArray()>();
return v44;
}
static byte[] generate(java.lang.Class, java.lang.String)
{
byte[] v116;
java.lang.Exception v22;
org.objectweb.asm.ClassWriter v4;
org.objectweb.asm.AnnotationVisitor v10, v39, v45, v51, v60, v66, v73;
java.lang.Object[] v20;
java.lang.reflect.Constructor v19;
java.lang.String v1, v102, v103, v106, v109, v11, v115, v12, v14, v17, v2, v28, v3, v32, v33, v37, v38, v41, v43, v44, v47, v49, v5, v50, v56, v58, v59, v61, v62, v64, v65, v67, v7, v71, v72, v74, v76, v77, v8, v89, v9, v95, v96, v98;
java.lang.Class[] v18;
java.lang.reflect.Field v27, v82;
java.lang.IllegalStateException v23;
io.smallrye.config.ConfigMapping$NamingStrategy v13;
org.objectweb.asm.MethodVisitor v34, v78;
org.objectweb.asm.Type v101, v104, v107, v111, v113, v114, v30, v93, v97, v99;
org.objectweb.asm.Type[] v100, v105, v112, v31, v94;
boolean v15, v35, v36, v42, v48, v54, v57, v63, v70, v84, v86, v88, v92;
java.lang.IllegalAccessException v75;
java.lang.'annotation'.Annotation v16, v40, v46, v52, v55;
org.objectweb.asm.Label v79;
java.lang.String[] v6;
int v108, v25, v26, v80, v81, v83, v85, v87, v91;
java.lang.reflect.Field[] v24;
java.lang.Class v0, v110, v29, v53, v69, v90;
java.lang.Object v21, v68;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(v0);
v3 = virtualinvoke v1.<java.lang.String: java.lang.String replace(char,char)>(46, 47);
v4 = new org.objectweb.asm.ClassWriter;
specialinvoke v4.<org.objectweb.asm.ClassWriter: void <init>(int)>(3);
v5 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v6 = newarray (java.lang.String)[1];
v7 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Lio/smallrye/config/ConfigMappingClassMapper;");
v6[0] = v7;
virtualinvoke v4.<org.objectweb.asm.ClassWriter: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(52, 1537, v3, null, v5, v6);
v8 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Lio/smallrye/config/ConfigMapping;");
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("L\u0001;");
v10 = virtualinvoke v4.<org.objectweb.asm.ClassWriter: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>(v9, 1);
v11 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Lio/smallrye/config/ConfigMapping$NamingStrategy;");
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("L\u0001;");
v13 = <io.smallrye.config.ConfigMapping$NamingStrategy: io.smallrye.config.ConfigMapping$NamingStrategy VERBATIM>;
v14 = virtualinvoke v13.<io.smallrye.config.ConfigMapping$NamingStrategy: java.lang.String toString()>();
virtualinvoke v10.<org.objectweb.asm.AnnotationVisitor: void visitEnum(java.lang.String,java.lang.String,java.lang.String)>("namingStrategy", v12, v14);
v15 = virtualinvoke v0.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/eclipse/microprofile/config/inject/ConfigProperties;");
if v15 == 0 goto label01;
v16 = virtualinvoke v0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/eclipse/microprofile/config/inject/ConfigProperties;");
v17 = interfaceinvoke v16.<org.eclipse.microprofile.config.inject.ConfigProperties: java.lang.String prefix()>();
virtualinvoke v10.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>("prefix", v17);
label01:
virtualinvoke v10.<org.objectweb.asm.AnnotationVisitor: void visitEnd()>();
label02:
v18 = newarray (java.lang.Class)[0];
v19 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(v18);
v20 = newarray (java.lang.Object)[0];
v21 = virtualinvoke v19.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v20);
label03:
goto label05;
label04:
v22 := @caughtexception;
v23 = new java.lang.IllegalStateException;
specialinvoke v23.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v22);
throw v23;
label05:
v24 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();
v25 = lengthof v24;
v26 = 0;
label06:
if v26 >= v25 goto label16;
v27 = v24[v26];
v28 = virtualinvoke v27.<java.lang.reflect.Field: java.lang.String getName()>();
v29 = virtualinvoke v27.<java.lang.reflect.Field: java.lang.Class getType()>();
v30 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(v29);
v31 = newarray (org.objectweb.asm.Type)[0];
v32 = staticinvoke <org.objectweb.asm.Type: java.lang.String getMethodDescriptor(org.objectweb.asm.Type,org.objectweb.asm.Type[])>(v30, v31);
v33 = staticinvoke <io.smallrye.config.ConfigMappingGenerator: java.lang.String getSignature(java.lang.reflect.Field)>(v27);
v34 = virtualinvoke v4.<org.objectweb.asm.ClassWriter: org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(1025, v28, v32, v33, null);
v35 = 0;
v36 = virtualinvoke v27.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lio/smallrye/config/WithName;");
if v36 == 0 goto label07;
v37 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Lio/smallrye/config/WithName;");
v38 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v37) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("L\u0001;");
v39 = virtualinvoke v34.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>(v38, 1);
v40 = virtualinvoke v27.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/smallrye/config/WithName;");
v41 = interfaceinvoke v40.<io.smallrye.config.WithName: java.lang.String value()>();
virtualinvoke v39.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>("value", v41);
virtualinvoke v39.<org.objectweb.asm.AnnotationVisitor: void visitEnd()>();
label07:
v42 = virtualinvoke v27.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lio/smallrye/config/WithDefault;");
if v42 == 0 goto label08;
v43 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Lio/smallrye/config/WithDefault;");
v44 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v43) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("L\u0001;");
v45 = virtualinvoke v34.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>(v44, 1);
v46 = virtualinvoke v27.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/smallrye/config/WithDefault;");
v47 = interfaceinvoke v46.<io.smallrye.config.WithDefault: java.lang.String value()>();
virtualinvoke v45.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>("value", v47);
virtualinvoke v45.<org.objectweb.asm.AnnotationVisitor: void visitEnd()>();
v35 = 1;
label08:
v48 = virtualinvoke v27.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lio/smallrye/config/WithConverter;");
if v48 == 0 goto label09;
v49 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Lio/smallrye/config/WithConverter;");
v50 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v49) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("L\u0001;");
v51 = virtualinvoke v34.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>(v50, 1);
v52 = virtualinvoke v27.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/smallrye/config/WithConverter;");
v53 = interfaceinvoke v52.<io.smallrye.config.WithConverter: java.lang.Class value()>();
virtualinvoke v51.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>("value", v53);
virtualinvoke v51.<org.objectweb.asm.AnnotationVisitor: void visitEnd()>();
label09:
v54 = virtualinvoke v27.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/eclipse/microprofile/config/inject/ConfigProperty;");
if v54 == 0 goto label11;
v55 = virtualinvoke v27.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/eclipse/microprofile/config/inject/ConfigProperty;");
v56 = interfaceinvoke v55.<org.eclipse.microprofile.config.inject.ConfigProperty: java.lang.String name()>();
v57 = virtualinvoke v56.<java.lang.String: boolean isEmpty()>();
if v57 != 0 goto label10;
v58 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Lio/smallrye/config/WithName;");
v59 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v58) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("L\u0001;");
v60 = virtualinvoke v34.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>(v59, 1);
v61 = interfaceinvoke v55.<org.eclipse.microprofile.config.inject.ConfigProperty: java.lang.String name()>();
virtualinvoke v60.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>("value", v61);
virtualinvoke v60.<org.objectweb.asm.AnnotationVisitor: void visitEnd()>();
label10:
v62 = interfaceinvoke v55.<org.eclipse.microprofile.config.inject.ConfigProperty: java.lang.String defaultValue()>();
v63 = virtualinvoke v62.<java.lang.String: boolean equals(java.lang.Object)>("org.eclipse.microprofile.config.configproperty.unconfigureddvalue");
if v63 != 0 goto label11;
v64 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Lio/smallrye/config/WithDefault;");
v65 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v64) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("L\u0001;");
v66 = virtualinvoke v34.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>(v65, 1);
v67 = interfaceinvoke v55.<org.eclipse.microprofile.config.inject.ConfigProperty: java.lang.String defaultValue()>();
virtualinvoke v66.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>("value", v67);
virtualinvoke v66.<org.objectweb.asm.AnnotationVisitor: void visitEnd()>();
v35 = 1;
label11:
if v35 != 0 goto label15;
label12:
virtualinvoke v27.<java.lang.reflect.Field: void setAccessible(boolean)>(1);
v68 = virtualinvoke v27.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(v21);
v69 = virtualinvoke v27.<java.lang.reflect.Field: java.lang.Class getType()>();
v70 = staticinvoke <io.smallrye.config.ConfigMappingGenerator: boolean hasDefaultValue(java.lang.Class,java.lang.Object)>(v69, v68);
if v70 == 0 goto label15;
v71 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Lio/smallrye/config/WithDefault;");
v72 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v71) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("L\u0001;");
v73 = virtualinvoke v34.<org.objectweb.asm.MethodVisitor: org.objectweb.asm.AnnotationVisitor visitAnnotation(java.lang.String,boolean)>(v72, 1);
v74 = virtualinvoke v68.<java.lang.Object: java.lang.String toString()>();
virtualinvoke v73.<org.objectweb.asm.AnnotationVisitor: void visit(java.lang.String,java.lang.Object)>("value", v74);
virtualinvoke v73.<org.objectweb.asm.AnnotationVisitor: void visitEnd()>();
label13:
goto label15;
label14:
v75 := @caughtexception;
label15:
virtualinvoke v34.<org.objectweb.asm.MethodVisitor: void visitEnd()>();
v26 = v26 + 1;
goto label06;
label16:
v76 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v77 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v76) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("()L\u0001;");
v78 = virtualinvoke v4.<org.objectweb.asm.ClassWriter: org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(1, "map", v77, null, null);
v79 = new org.objectweb.asm.Label;
specialinvoke v79.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v79);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, v2);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(89);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(183, v2, "<init>", "()V", 0);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(58, 1);
v80 = lengthof v24;
v81 = 0;
label17:
if v81 >= v80 goto label29;
v82 = v24[v81];
v83 = virtualinvoke v82.<java.lang.reflect.Field: int getModifiers()>();
v84 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(v83);
if v84 != 0 goto label28;
v85 = virtualinvoke v82.<java.lang.reflect.Field: int getModifiers()>();
v86 = staticinvoke <java.lang.reflect.Modifier: boolean isVolatile(int)>(v85);
if v86 != 0 goto label28;
v87 = virtualinvoke v82.<java.lang.reflect.Field: int getModifiers()>();
v88 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>(v87);
if v88 != 0 goto label28;
v89 = virtualinvoke v82.<java.lang.reflect.Field: java.lang.String getName()>();
v90 = virtualinvoke v82.<java.lang.reflect.Field: java.lang.Class getType()>();
v91 = virtualinvoke v82.<java.lang.reflect.Field: int getModifiers()>();
v92 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(v91);
if v92 == 0 goto label18;
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
v93 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(v90);
v94 = newarray (org.objectweb.asm.Type)[0];
v95 = staticinvoke <org.objectweb.asm.Type: java.lang.String getMethodDescriptor(org.objectweb.asm.Type,org.objectweb.asm.Type[])>(v93, v94);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(185, v3, v89, v95, 1);
v96 = staticinvoke <org.objectweb.asm.Type: java.lang.String getDescriptor(java.lang.Class)>(v90);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(181, v2, v89, v96);
goto label28;
label18:
v97 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(v0);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v97);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v89);
v98 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CLASS>;
v99 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(class "Ljava/lang/reflect/Field;");
v100 = newarray (org.objectweb.asm.Type)[1];
v101 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(class "Ljava/lang/String;");
v100[0] = v101;
v102 = staticinvoke <org.objectweb.asm.Type: java.lang.String getMethodDescriptor(org.objectweb.asm.Type,org.objectweb.asm.Type[])>(v99, v100);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v98, "getDeclaredField", v102, 0);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(58, 2);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 2);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(4);
v103 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_FIELD>;
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v103, "setAccessible", "(Z)V", 0);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 2);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
v104 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(v90);
v105 = newarray (org.objectweb.asm.Type)[0];
v106 = staticinvoke <org.objectweb.asm.Type: java.lang.String getMethodDescriptor(org.objectweb.asm.Type,org.objectweb.asm.Type[])>(v104, v105);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(185, v3, v89, v106, 1);
v107 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(v90);
v108 = virtualinvoke v107.<org.objectweb.asm.Type: int getSort()>();
tableswitch(v108)
{
case 1: goto label19;
case 2: goto label21;
case 3: goto label20;
case 4: goto label22;
case 5: goto label23;
case 6: goto label24;
case 7: goto label25;
case 8: goto label26;
default: goto label27;
};
label19:
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(184, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;", 0);
goto label27;
label20:
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(184, "java/lang/Byte", "valueOf", "(B)Ljava/lang/Byte;", 0);
goto label27;
label21:
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(184, "java/lang/Character", "valueOf", "(C)Ljava/lang/Character;", 0);
goto label27;
label22:
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(184, "java/lang/Short", "valueOf", "(S)Ljava/lang/Short;", 0);
goto label27;
label23:
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(184, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", 0);
goto label27;
label24:
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(184, "java/lang/Float", "valueOf", "(F)Ljava/lang/Float;", 0);
goto label27;
label25:
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(184, "java/lang/Long", "valueOf", "(J)Ljava/lang/Long;", 0);
goto label27;
label26:
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(184, "java/lang/Double", "valueOf", "(D)Ljava/lang/Double;", 0);
label27:
v109 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_FIELD>;
v110 = <java.lang.Void: java.lang.Class TYPE>;
v111 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(v110);
v112 = newarray (org.objectweb.asm.Type)[2];
v113 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(class "Ljava/lang/Object;");
v112[0] = v113;
v114 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(class "Ljava/lang/Object;");
v112[1] = v114;
v115 = staticinvoke <org.objectweb.asm.Type: java.lang.String getMethodDescriptor(org.objectweb.asm.Type,org.objectweb.asm.Type[])>(v111, v112);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v109, "set", v115, 0);
label28:
v81 = v81 + 1;
goto label17;
label29:
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(176);
virtualinvoke v78.<org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>(2, 2);
virtualinvoke v4.<org.objectweb.asm.ClassWriter: void visitEnd()>();
v116 = virtualinvoke v4.<org.objectweb.asm.ClassWriter: byte[] toByteArray()>();
return v116;
catch java.lang.Exception from label02 to label03 with label04;
catch java.lang.IllegalAccessException from label12 to label13 with label14;
}
private static void addProperties(org.objectweb.asm.ClassVisitor, org.objectweb.asm.MethodVisitor, org.objectweb.asm.MethodVisitor, java.util.Set, io.smallrye.config.ConfigMappingInterface, java.lang.String)
{
java.lang.reflect.Method v10, v266;
int v275, v277, v278, v7, v8;
java.lang.Class v129, v13, v137, v149, v15, v171, v186, v192, v211, v234, v250, v267, v270, v40, v84, v98;
io.smallrye.config.ConfigMappingInterface$OptionalProperty v18;
io.smallrye.config.ConfigMappingInterface$PrimitiveProperty v233;
java.lang.AssertionError v241;
java.lang.String v100, v101, v102, v103, v104, v105, v106, v107, v108, v109, v11, v110, v111, v112, v113, v114, v115, v116, v117, v118, v119, v121, v122, v123, v125, v126, v127, v128, v131, v132, v133, v134, v135, v139, v14, v140, v141, v142, v143, v144, v145, v146, v147, v148, v151, v152, v153, v154, v155, v157, v158, v159, v16, v160, v161, v162, v163, v164, v165, v166, v168, v169, v170, v173, v174, v175, v176, v177, v178, v181, v188, v189, v190, v191, v194, v195, v196, v197, v198, v199, v205, v206, v207, v208, v209, v210, v213, v214, v215, v216, v217, v222, v223, v224, v225, v226, v227, v228, v229, v23, v230, v231, v235, v236, v237, v24, v242, v243, v244, v245, v247, v248, v249, v25, v252, v253, v254, v255, v256, v257, v26, v260, v261, v262, v263, v268, v269, v27, v272, v273, v28, v36, v37, v38, v39, v42, v43, v44, v45, v46, v47, v48, v49, v5, v50, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v86, v87, v88, v89, v92, v93, v94, v95, v96, v97;
io.smallrye.config.ConfigMappingInterface[] v276;
boolean v12, v167, v17, v182, v183, v20, v200, v201, v202, v203, v204, v21, v22, v221, v232, v238, v239, v240, v246, v264, v31, v34, v80, v91;
io.smallrye.config.ConfigMappingInterface$Property[] v6;
io.smallrye.config.ConfigMappingInterface$Property v19, v30, v33, v79, v81, v9, v90;
org.objectweb.asm.MethodVisitor v1, v2, v274;
io.smallrye.config.ConfigMappingInterface$DefaultMethodProperty v265;
java.util.Set v3;
io.smallrye.config.ConfigMappingInterface$CollectionProperty v136, v29, v32, v35;
org.objectweb.asm.Type v130, v138, v150, v156, v172, v187, v193, v212, v251, v271, v41, v85, v99;
org.objectweb.asm.ClassVisitor v0;
io.smallrye.config.ConfigMappingInterface$GroupProperty v184, v82;
io.smallrye.config.ConfigMappingInterface v185, v279, v4, v83;
org.objectweb.asm.Label v120, v124, v179, v180, v218, v219, v220, v258, v259, v51, v52;
v0 := @parameter0: org.objectweb.asm.ClassVisitor;
v1 := @parameter1: org.objectweb.asm.MethodVisitor;
v2 := @parameter2: org.objectweb.asm.MethodVisitor;
v3 := @parameter3: java.util.Set;
v4 := @parameter4: io.smallrye.config.ConfigMappingInterface;
v5 := @parameter5: java.lang.String;
v6 = virtualinvoke v4.<io.smallrye.config.ConfigMappingInterface: io.smallrye.config.ConfigMappingInterface$Property[] getProperties()>();
v7 = lengthof v6;
v8 = 0;
label01:
if v8 >= v7 goto label26;
v9 = v6[v8];
v10 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: java.lang.reflect.Method getMethod()>();
v11 = virtualinvoke v10.<java.lang.reflect.Method: java.lang.String getName()>();
v12 = interfaceinvoke v3.<java.util.Set: boolean add(java.lang.Object)>(v11);
if v12 == 0 goto label25;
v13 = virtualinvoke v10.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
v14 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(v13);
v15 = virtualinvoke v10.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
v16 = staticinvoke <org.objectweb.asm.Type: java.lang.String getDescriptor(java.lang.Class)>(v15);
virtualinvoke v0.<org.objectweb.asm.ClassVisitor: org.objectweb.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(2, v11, v16, null, null);
v17 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isOptional()>();
if v17 == 0 goto label02;
v18 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$OptionalProperty asOptional()>();
v19 = virtualinvoke v18.<io.smallrye.config.ConfigMappingInterface$OptionalProperty: io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty getNestedProperty()>();
goto label03;
label02:
v19 = v9;
label03:
v20 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isCollection()>();
if v20 != 0 goto label04;
v21 = virtualinvoke v19.<io.smallrye.config.ConfigMappingInterface$Property: boolean isCollection()>();
if v21 == 0 goto label12;
if v17 == 0 goto label12;
label04:
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
v22 = staticinvoke <io.smallrye.config.ConfigMappingGenerator: boolean appendPropertyName(org.objectweb.asm.MethodVisitor,io.smallrye.config.ConfigMappingInterface$Property)>(v1, v9);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);
v23 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v24 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_SMALLRYE_CONFIG>;
v25 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v24) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("()L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v23, "getConfig", v25, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 2);
v26 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v27 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v28 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v27) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("()L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v26, "toString", v28, 0);
v29 = virtualinvoke v19.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$CollectionProperty asCollection()>();
v30 = virtualinvoke v29.<io.smallrye.config.ConfigMappingInterface$CollectionProperty: io.smallrye.config.ConfigMappingInterface$Property getElement()>();
v31 = virtualinvoke v30.<io.smallrye.config.ConfigMappingInterface$Property: boolean isGroup()>();
if v31 != 0 goto label05;
v32 = virtualinvoke v19.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$CollectionProperty asCollection()>();
v33 = virtualinvoke v32.<io.smallrye.config.ConfigMappingInterface$CollectionProperty: io.smallrye.config.ConfigMappingInterface$Property getElement()>();
v34 = virtualinvoke v33.<io.smallrye.config.ConfigMappingInterface$Property: boolean isMap()>();
if v34 == 0 goto label09;
label05:
v35 = virtualinvoke v19.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$CollectionProperty asCollection()>();
v36 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_SMALLRYE_CONFIG>;
v37 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v38 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_LIST>;
v39 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v37, v38) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v36, "getIndexedPropertiesIndexes", v39, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(58, 4);
v40 = virtualinvoke v35.<io.smallrye.config.ConfigMappingInterface$CollectionProperty: java.lang.Class getCollectionRawType()>();
v41 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(v40);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v41);
v42 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v43 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CLASS>;
v44 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_INT_FUNCTION>;
v45 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v43, v44) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(184, v42, "createCollectionFactory", v45, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 4);
v46 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_LIST>;
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(185, v46, "size", "()I", 1);
v47 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_INT_FUNCTION>;
v48 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v49 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v48) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(I)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(185, v47, "apply", v49, 1);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(58, 5);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(3);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(54, 6);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 4);
v50 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_LIST>;
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(185, v50, "size", "()I", 1);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(54, 7);
v51 = new org.objectweb.asm.Label;
specialinvoke v51.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v51);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(21, 6);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(21, 7);
v52 = new org.objectweb.asm.Label;
specialinvoke v52.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(162, v52);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 4);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(21, 6);
v53 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_LIST>;
v54 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v55 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v54) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(I)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(185, v53, "get", v55, 1);
v56 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_INTEGER>;
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(192, v56);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(58, 8);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 2);
v57 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v57, "length", "()I", 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(54, 9);
v58 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, v58);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(89);
v59 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(183, v59, "<init>", "()V", 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>("[");
v60 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v61 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v62 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v63 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v61, v62) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v60, "append", v63, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 8);
v64 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v65 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v66 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v67 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v65, v66) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v64, "append", v67, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>("]");
v68 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v69 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v70 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v71 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v69, v70) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v68, "append", v71, 0);
v72 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v73 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v74 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v73) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("()L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v72, "toString", v74, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(58, 10);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 2);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 10);
v75 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v76 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v77 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v78 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v76, v77) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v75, "append", v78, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(87);
v79 = virtualinvoke v35.<io.smallrye.config.ConfigMappingInterface$CollectionProperty: io.smallrye.config.ConfigMappingInterface$Property getElement()>();
v80 = virtualinvoke v79.<io.smallrye.config.ConfigMappingInterface$Property: boolean isGroup()>();
if v80 == 0 goto label06;
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);
v81 = virtualinvoke v35.<io.smallrye.config.ConfigMappingInterface$CollectionProperty: io.smallrye.config.ConfigMappingInterface$Property getElement()>();
v82 = virtualinvoke v81.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$GroupProperty asGroup()>();
v83 = virtualinvoke v82.<io.smallrye.config.ConfigMappingInterface$GroupProperty: io.smallrye.config.ConfigMappingInterface getGroupType()>();
v84 = virtualinvoke v83.<io.smallrye.config.ConfigMappingInterface: java.lang.Class getInterfaceType()>();
v85 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(v84);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v85);
v86 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v87 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CLASS>;
v88 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v89 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v87, v88) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v86, "constructGroup", v89, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(58, 11);
goto label07;
label06:
v90 = virtualinvoke v35.<io.smallrye.config.ConfigMappingInterface$CollectionProperty: io.smallrye.config.ConfigMappingInterface$Property getElement()>();
v91 = virtualinvoke v90.<io.smallrye.config.ConfigMappingInterface$Property: boolean isMap()>();
if v91 == 0 goto label07;
v92 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Ljava/util/HashMap;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, v92);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(89);
v93 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Ljava/util/HashMap;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(183, v93, "<init>", "()V", 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(58, 11);
label07:
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 5);
v94 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_COLLECTION>;
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(192, v94);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 11);
v95 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_COLLECTION>;
v96 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v97 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v96) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)Z");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(185, v95, "add", v97, 1);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(87);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);
v98 = virtualinvoke v4.<io.smallrye.config.ConfigMappingInterface: java.lang.Class getInterfaceType()>();
v99 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(v98);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v99);
v100 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, v100);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(89);
v101 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(183, v101, "<init>", "()V", 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v11);
v102 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v103 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v104 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v105 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v103, v104) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v102, "append", v105, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 10);
v106 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v107 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v108 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v109 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v107, v108) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v106, "append", v109, 0);
v110 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v111 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v112 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v111) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("()L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v110, "toString", v112, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 11);
v113 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v114 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CLASS>;
v115 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v116 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v117 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v118 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(v114, v115, v116, v117) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;L\u0001;L\u0001;L\u0001;)V");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v113, "registerEnclosedField", v118, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 2);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(21, 9);
v119 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v119, "setLength", "(I)V", 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitIincInsn(int,int)>(6, 1);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(167, v51);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v52);
if v17 == 0 goto label08;
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(21, 7);
v120 = new org.objectweb.asm.Label;
specialinvoke v120.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(154, v120);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
v121 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OPTIONAL>;
v122 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OPTIONAL>;
v123 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v122) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("()L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(184, v121, "empty", v123, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(181, v5, v11, v16);
v124 = new org.objectweb.asm.Label;
specialinvoke v124.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(167, v124);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v120);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 5);
v125 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OPTIONAL>;
v126 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v127 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OPTIONAL>;
v128 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v126, v127) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(184, v125, "of", v128, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(181, v5, v11, v16);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v124);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(87);
goto label11;
label08:
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 5);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(181, v5, v11, v16);
goto label11;
label09:
if v17 == 0 goto label10;
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);
v129 = virtualinvoke v4.<io.smallrye.config.ConfigMappingInterface: java.lang.Class getInterfaceType()>();
v130 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(v129);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v130);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v11);
v131 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v132 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CLASS>;
v133 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v134 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CONVERTER>;
v135 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>(v132, v133, v134) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v131, "getValueConverter", v135, 0);
v136 = virtualinvoke v19.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$CollectionProperty asCollection()>();
v137 = virtualinvoke v136.<io.smallrye.config.ConfigMappingInterface$CollectionProperty: java.lang.Class getCollectionRawType()>();
v138 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(v137);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v138);
v139 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v140 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CLASS>;
v141 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_INT_FUNCTION>;
v142 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v140, v141) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(184, v139, "createCollectionFactory", v142, 0);
v143 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_SMALLRYE_CONFIG>;
v144 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v145 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CONVERTER>;
v146 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_INT_FUNCTION>;
v147 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OPTIONAL>;
v148 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(v144, v145, v146, v147) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;L\u0001;L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v143, "getOptionalValues", v148, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(181, v5, v11, v16);
if v22 == 0 goto label24;
staticinvoke <io.smallrye.config.ConfigMappingGenerator: void restoreLength(org.objectweb.asm.MethodVisitor)>(v1);
goto label11;
label10:
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);
v149 = virtualinvoke v4.<io.smallrye.config.ConfigMappingInterface: java.lang.Class getInterfaceType()>();
v150 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(v149);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v150);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v11);
v151 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v152 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CLASS>;
v153 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v154 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CONVERTER>;
v155 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>(v152, v153, v154) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v151, "getValueConverter", v155, 0);
v156 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.String)>(v16);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v156);
v157 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v158 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CLASS>;
v159 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_INT_FUNCTION>;
v160 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v158, v159) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(184, v157, "createCollectionFactory", v160, 0);
v161 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_SMALLRYE_CONFIG>;
v162 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v163 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CONVERTER>;
v164 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_INT_FUNCTION>;
v165 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_COLLECTION>;
v166 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(v162, v163, v164, v165) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;L\u0001;L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v161, "getValues", v166, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(181, v5, v11, v16);
label11:
if v22 == 0 goto label24;
staticinvoke <io.smallrye.config.ConfigMappingGenerator: void restoreLength(org.objectweb.asm.MethodVisitor)>(v1);
goto label24;
label12:
v167 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isMap()>();
if v167 == 0 goto label13;
v168 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_COLLECTIONS>;
v169 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAP>;
v170 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v169) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("()L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(184, v168, "emptyMap", v170, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(95);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(181, v5, v11, v16);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);
v171 = virtualinvoke v4.<io.smallrye.config.ConfigMappingInterface: java.lang.Class getInterfaceType()>();
v172 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(v171);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v172);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v11);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
v173 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v174 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CLASS>;
v175 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v176 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v177 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v178 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(v174, v175, v176, v177) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;L\u0001;L\u0001;)L\u0001;");
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v173, "getEnclosedField", v178, 0);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(89);
v179 = new org.objectweb.asm.Label;
specialinvoke v179.<org.objectweb.asm.Label: void <init>()>();
v180 = new org.objectweb.asm.Label;
specialinvoke v180.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(198, v179);
v181 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAP>;
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(192, v181);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(95);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(181, v5, v11, v16);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(167, v180);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v179);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(87);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v180);
goto label24;
label13:
v182 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isGroup()>();
if v182 == 0 goto label14;
v183 = staticinvoke <io.smallrye.config.ConfigMappingGenerator: boolean appendPropertyName(org.objectweb.asm.MethodVisitor,io.smallrye.config.ConfigMappingInterface$Property)>(v1, v9);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);
v184 = virtualinvoke v19.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$GroupProperty asGroup()>();
v185 = virtualinvoke v184.<io.smallrye.config.ConfigMappingInterface$GroupProperty: io.smallrye.config.ConfigMappingInterface getGroupType()>();
v186 = virtualinvoke v185.<io.smallrye.config.ConfigMappingInterface: java.lang.Class getInterfaceType()>();
v187 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(v186);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v187);
v188 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v189 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CLASS>;
v190 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v191 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v189, v190) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v188, "constructGroup", v191, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(95);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(181, v5, v11, v16);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);
v192 = virtualinvoke v4.<io.smallrye.config.ConfigMappingInterface: java.lang.Class getInterfaceType()>();
v193 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(v192);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v193);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v11);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(180, v5, v11, v16);
v194 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v195 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CLASS>;
v196 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v197 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v198 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v199 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(v195, v196, v197, v198) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;L\u0001;L\u0001;L\u0001;)V");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v194, "registerEnclosedField", v199, 0);
if v183 == 0 goto label24;
staticinvoke <io.smallrye.config.ConfigMappingGenerator: void restoreLength(org.objectweb.asm.MethodVisitor)>(v1);
goto label24;
label14:
v200 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isLeaf()>();
if v200 != 0 goto label15;
v201 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isPrimitive()>();
if v201 != 0 goto label15;
v202 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isOptional()>();
if v202 == 0 goto label22;
v203 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isLeaf()>();
if v203 == 0 goto label22;
label15:
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
v204 = staticinvoke <io.smallrye.config.ConfigMappingGenerator: boolean appendPropertyName(org.objectweb.asm.MethodVisitor,io.smallrye.config.ConfigMappingInterface$Property)>(v1, v9);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);
v205 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v206 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_SMALLRYE_CONFIG>;
v207 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v206) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("()L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v205, "getConfig", v207, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 2);
v208 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v209 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v210 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v209) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("()L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v208, "toString", v210, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);
v211 = virtualinvoke v4.<io.smallrye.config.ConfigMappingInterface: java.lang.Class getInterfaceType()>();
v212 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(v211);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v212);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v11);
v213 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v214 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CLASS>;
v215 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v216 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CONVERTER>;
v217 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>(v214, v215, v216) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v213, "getValueConverter", v217, 0);
v218 = new org.objectweb.asm.Label;
specialinvoke v218.<org.objectweb.asm.Label: void <init>()>();
v219 = new org.objectweb.asm.Label;
specialinvoke v219.<org.objectweb.asm.Label: void <init>()>();
v220 = new org.objectweb.asm.Label;
specialinvoke v220.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v218);
v221 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isOptional()>();
if v221 == 0 goto label16;
v222 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_SMALLRYE_CONFIG>;
v223 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v224 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CONVERTER>;
v225 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OPTIONAL>;
v226 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>(v223, v224, v225) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v222, "getOptionalValue", v226, 0);
goto label17;
label16:
v227 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_SMALLRYE_CONFIG>;
v228 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v229 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CONVERTER>;
v230 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v231 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>(v228, v229, v230) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;L\u0001;)L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v227, "getValue", v231, 0);
label17:
v232 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isPrimitive()>();
if v232 == 0 goto label18;
v233 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$PrimitiveProperty asPrimitive()>();
v234 = virtualinvoke v233.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.Class getBoxType()>();
v235 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(v234);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(192, v235);
v236 = virtualinvoke v233.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.String getUnboxMethodName()>();
v237 = virtualinvoke v233.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.String getUnboxMethodDescriptor()>();
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v235, v236, v237, 0);
goto label20;
label18:
v238 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isOptional()>();
if v238 != 0 goto label20;
v239 = <io.smallrye.config.ConfigMappingGenerator: boolean $assertionsDisabled>;
if v239 != 0 goto label19;
v240 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isLeaf()>();
if v240 != 0 goto label19;
v241 = new java.lang.AssertionError;
specialinvoke v241.<java.lang.AssertionError: void <init>()>();
throw v241;
label19:
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(192, v14);
label20:
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(181, v5, v11, v16);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(167, v220);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v219);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(95);
v242 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v243 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_RUNTIME_EXCEPTION>;
v244 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v243) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)V");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v242, "reportProblem", v244, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v220);
if v204 == 0 goto label21;
staticinvoke <io.smallrye.config.ConfigMappingGenerator: void restoreLength(org.objectweb.asm.MethodVisitor)>(v1);
label21:
v245 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_RUNTIME_EXCEPTION>;
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitTryCatchBlock(org.objectweb.asm.Label,org.objectweb.asm.Label,org.objectweb.asm.Label,java.lang.String)>(v218, v219, v219, v245);
goto label24;
label22:
v246 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isOptional()>();
if v246 == 0 goto label23;
v247 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OPTIONAL>;
v248 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OPTIONAL>;
v249 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v248) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("()L\u0001;");
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(184, v247, "empty", v249, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(95);
virtualinvoke v1.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(181, v5, v11, v16);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);
v250 = virtualinvoke v4.<io.smallrye.config.ConfigMappingInterface: java.lang.Class getInterfaceType()>();
v251 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(v250);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v251);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v11);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
v252 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v253 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CLASS>;
v254 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v255 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v256 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v257 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(v253, v254, v255, v256) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;L\u0001;L\u0001;)L\u0001;");
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v252, "getEnclosedField", v257, 0);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(89);
v258 = new org.objectweb.asm.Label;
specialinvoke v258.<org.objectweb.asm.Label: void <init>()>();
v259 = new org.objectweb.asm.Label;
specialinvoke v259.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(198, v258);
v260 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OPTIONAL>;
v261 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v262 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OPTIONAL>;
v263 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v261, v262) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(184, v260, "of", v263, 0);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(95);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(181, v5, v11, v16);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(167, v259);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v258);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(87);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v259);
goto label24;
label23:
v264 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isDefaultMethod()>();
if v264 == 0 goto label24;
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
v265 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$DefaultMethodProperty asDefaultMethod()>();
v266 = virtualinvoke v265.<io.smallrye.config.ConfigMappingInterface$DefaultMethodProperty: java.lang.reflect.Method getDefaultMethod()>();
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
v267 = virtualinvoke v266.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
v268 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(v267);
v269 = virtualinvoke v266.<java.lang.reflect.Method: java.lang.String getName()>();
v270 = virtualinvoke v4.<io.smallrye.config.ConfigMappingInterface: java.lang.Class getInterfaceType()>();
v271 = staticinvoke <org.objectweb.asm.Type: org.objectweb.asm.Type getType(java.lang.Class)>(v270);
v272 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.objectweb.asm.Type,java.lang.String)>(v271, v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(\u0001)\u0001");
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(184, v268, v269, v272, 0);
virtualinvoke v2.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(181, v5, v11, v16);
label24:
v273 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("()\u0001");
v274 = virtualinvoke v0.<org.objectweb.asm.ClassVisitor: org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(1, v11, v273, null, null);
virtualinvoke v274.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
virtualinvoke v274.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(180, v5, v11, v16);
v275 = staticinvoke <io.smallrye.config.ConfigMappingGenerator: int getReturnInstruction(io.smallrye.config.ConfigMappingInterface$Property)>(v9);
virtualinvoke v274.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(v275);
virtualinvoke v274.<org.objectweb.asm.MethodVisitor: void visitEnd()>();
virtualinvoke v274.<org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>(0, 0);
label25:
v8 = v8 + 1;
goto label01;
label26:
v276 = virtualinvoke v4.<io.smallrye.config.ConfigMappingInterface: io.smallrye.config.ConfigMappingInterface[] getSuperTypes()>();
v277 = lengthof v276;
v278 = 0;
label27:
if v278 >= v277 goto label28;
v279 = v276[v278];
staticinvoke <io.smallrye.config.ConfigMappingGenerator: void addProperties(org.objectweb.asm.ClassVisitor,org.objectweb.asm.MethodVisitor,org.objectweb.asm.MethodVisitor,java.util.Set,io.smallrye.config.ConfigMappingInterface,java.lang.String)>(v0, v1, v2, v3, v279, v5);
v278 = v278 + 1;
goto label27;
label28:
return;
}
private static boolean appendPropertyName(org.objectweb.asm.MethodVisitor, io.smallrye.config.ConfigMappingInterface$Property)
{
org.objectweb.asm.MethodVisitor v0;
io.smallrye.config.ConfigMappingInterface$Property v1;
org.objectweb.asm.Label v3;
java.lang.Character v5;
java.lang.String v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v4, v6, v7, v8;
boolean v2, v9;
v0 := @parameter0: org.objectweb.asm.MethodVisitor;
v1 := @parameter1: io.smallrye.config.ConfigMappingInterface$Property;
v2 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface$Property: boolean isParentPropertyName()>();
if v2 == 0 goto label1;
return 0;
label1:
v3 = new org.objectweb.asm.Label;
specialinvoke v3.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 2);
v4 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v4, "length", "()I", 0);
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(153, v3);
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 2);
v5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(46);
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v5);
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(146);
v6 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v7 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(C)L\u0001;");
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v6, "append", v8, 0);
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(87);
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>(v3);
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 2);
v9 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface$Property: boolean hasPropertyName()>();
if v9 == 0 goto label2;
v10 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface$Property: java.lang.String getPropertyName()>();
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v10);
goto label3;
label2:
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);
v11 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface$Property: java.lang.String getPropertyName()>();
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v11);
v12 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT>;
v13 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v14 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v13, v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v12, "applyNamingStrategy", v15, 0);
label3:
v16 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v17 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v18 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v17, v18) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v16, "append", v19, 0);
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(87);
return 1;
}
private static void restoreLength(org.objectweb.asm.MethodVisitor)
{
java.lang.String v1;
org.objectweb.asm.MethodVisitor v0;
v0 := @parameter0: org.objectweb.asm.MethodVisitor;
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 2);
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(21, 3);
v1 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
virtualinvoke v0.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v1, "setLength", "(I)V", 0);
return;
}
private static int getReturnInstruction(io.smallrye.config.ConfigMappingInterface$Property)
{
io.smallrye.config.ConfigMappingInterface$PrimitiveProperty v2;
io.smallrye.config.ConfigMappingInterface$DefaultMethodProperty v4, v7;
io.smallrye.config.ConfigMappingInterface$Property v0, v5, v8;
java.lang.Class v10, v11, v12, v13, v14, v9;
boolean v1, v3, v6;
v0 := @parameter0: io.smallrye.config.ConfigMappingInterface$Property;
v1 = virtualinvoke v0.<io.smallrye.config.ConfigMappingInterface$Property: boolean isPrimitive()>();
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$PrimitiveProperty asPrimitive()>();
goto label3;
label1:
v3 = virtualinvoke v0.<io.smallrye.config.ConfigMappingInterface$Property: boolean isDefaultMethod()>();
if v3 == 0 goto label2;
v4 = virtualinvoke v0.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$DefaultMethodProperty asDefaultMethod()>();
v5 = virtualinvoke v4.<io.smallrye.config.ConfigMappingInterface$DefaultMethodProperty: io.smallrye.config.ConfigMappingInterface$Property getDefaultProperty()>();
v6 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface$Property: boolean isPrimitive()>();
if v6 == 0 goto label2;
v7 = virtualinvoke v0.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$DefaultMethodProperty asDefaultMethod()>();
v8 = virtualinvoke v7.<io.smallrye.config.ConfigMappingInterface$DefaultMethodProperty: io.smallrye.config.ConfigMappingInterface$Property getDefaultProperty()>();
v2 = virtualinvoke v8.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$PrimitiveProperty asPrimitive()>();
goto label3;
label2:
return 176;
label3:
v9 = virtualinvoke v2.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.Class getPrimitiveType()>();
v10 = <java.lang.Float: java.lang.Class TYPE>;
if v9 != v10 goto label4;
return 174;
label4:
v11 = virtualinvoke v2.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.Class getPrimitiveType()>();
v12 = <java.lang.Double: java.lang.Class TYPE>;
if v11 != v12 goto label5;
return 175;
label5:
v13 = virtualinvoke v2.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.Class getPrimitiveType()>();
v14 = <java.lang.Long: java.lang.Class TYPE>;
if v13 != v14 goto label6;
return 173;
label6:
return 172;
}
private static java.lang.String getSignature(java.lang.reflect.Field)
{
java.util.regex.Matcher v15;
int v3, v4, v5, v6;
java.lang.String v10, v11, v12, v2, v7, v8, v9;
boolean v13;
java.lang.reflect.Field v0;
java.lang.reflect.Type v1;
java.util.regex.Pattern v14;
v0 := @parameter0: java.lang.reflect.Field;
v1 = virtualinvoke v0.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
v2 = interfaceinvoke v1.<java.lang.reflect.Type: java.lang.String getTypeName()>();
v3 = virtualinvoke v2.<java.lang.String: int indexOf(int)>(60);
v4 = (int) -1;
if v3 == v4 goto label2;
v5 = virtualinvoke v2.<java.lang.String: int indexOf(int)>(62);
v6 = (int) -1;
if v5 == v6 goto label2;
v7 = virtualinvoke v2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".", "/");
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("()L\u0001");
v9 = virtualinvoke v8.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("<", "<L");
v10 = virtualinvoke v9.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(", ", ";L");
v11 = virtualinvoke v10.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(">", ";>");
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001;");
v13 = virtualinvoke v2.<java.lang.String: boolean contains(java.lang.CharSequence)>("[]");
if v13 == 0 goto label1;
v14 = <io.smallrye.config.ConfigMappingGenerator: java.util.regex.Pattern ARRAY_FORMAT_REGEX>;
v15 = virtualinvoke v14.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v12);
v12 = virtualinvoke v15.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("$1[L$2;");
label1:
return v12;
label2:
return null;
}
private static void addToString(org.objectweb.asm.ClassVisitor, io.smallrye.config.ConfigMappingInterface)
{
org.objectweb.asm.MethodVisitor v4;
io.smallrye.config.ConfigMappingInterface$DefaultMethodProperty v19;
java.lang.reflect.Method v20, v28;
org.objectweb.asm.ClassVisitor v0;
boolean v18, v31;
io.smallrye.config.ConfigMappingInterface$PrimitiveProperty v33;
io.smallrye.config.ConfigMappingInterface$Property v17;
io.smallrye.config.ConfigMappingInterface v1;
int v15, v16, v42;
java.lang.String v10, v11, v12, v13, v2, v21, v22, v23, v24, v25, v26, v27, v3, v30, v32, v35, v36, v37, v38, v39, v40, v41, v43, v44, v45, v46, v47, v48, v49, v5, v50, v51, v52, v53, v6, v8, v9;
io.smallrye.config.ConfigMappingInterface$Property[] v14;
java.lang.Class v29, v34, v7;
v0 := @parameter0: org.objectweb.asm.ClassVisitor;
v1 := @parameter1: io.smallrye.config.ConfigMappingInterface;
v2 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("()L\u0001;");
v4 = virtualinvoke v0.<org.objectweb.asm.ClassVisitor: org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(1, "toString", v3, null, null);
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitCode()>();
v5 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, v5);
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(89);
v6 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(183, v6, "<init>", "()V", 0);
v7 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface: java.lang.Class getInterfaceType()>();
v8 = virtualinvoke v7.<java.lang.Class: java.lang.String getSimpleName()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001{");
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v9);
v10 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v11 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v12 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v11, v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v10, "append", v13, 0);
v14 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface: io.smallrye.config.ConfigMappingInterface$Property[] getProperties()>();
v15 = 0;
v16 = lengthof v14;
label1:
if v15 >= v16 goto label6;
v17 = v14[v15];
v18 = virtualinvoke v17.<io.smallrye.config.ConfigMappingInterface$Property: boolean isDefaultMethod()>();
if v18 == 0 goto label2;
v19 = virtualinvoke v17.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$DefaultMethodProperty asDefaultMethod()>();
v17 = virtualinvoke v19.<io.smallrye.config.ConfigMappingInterface$DefaultMethodProperty: io.smallrye.config.ConfigMappingInterface$Property getDefaultProperty()>();
label2:
v20 = virtualinvoke v17.<io.smallrye.config.ConfigMappingInterface$Property: java.lang.reflect.Method getMethod()>();
v21 = virtualinvoke v20.<java.lang.reflect.Method: java.lang.String getName()>();
v22 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v21) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001=");
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v22);
v23 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v24 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v25 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v26 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v24, v25) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v23, "append", v26, 0);
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);
v27 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface: java.lang.String getClassInternalName()>();
v28 = virtualinvoke v17.<io.smallrye.config.ConfigMappingInterface$Property: java.lang.reflect.Method getMethod()>();
v29 = virtualinvoke v28.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
v30 = staticinvoke <org.objectweb.asm.Type: java.lang.String getDescriptor(java.lang.Class)>(v29);
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(180, v27, v21, v30);
v31 = virtualinvoke v17.<io.smallrye.config.ConfigMappingInterface$Property: boolean isPrimitive()>();
if v31 == 0 goto label3;
v32 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v33 = virtualinvoke v17.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$PrimitiveProperty asPrimitive()>();
v34 = virtualinvoke v33.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.Class getPrimitiveType()>();
v35 = staticinvoke <org.objectweb.asm.Type: java.lang.String getDescriptor(java.lang.Class)>(v34);
v36 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v37 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v35, v36) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(\u0001)L\u0001;");
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v32, "append", v37, 0);
goto label4;
label3:
v38 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v39 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT>;
v40 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v41 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v39, v40) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v38, "append", v41, 0);
label4:
v42 = v15 + 1;
if v42 >= v16 goto label5;
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(", ");
v43 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v44 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v45 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v46 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v44, v45) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v43, "append", v46, 0);
label5:
v15 = v15 + 1;
goto label1;
label6:
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>("}");
v47 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v48 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v49 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v50 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v48, v49) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(L\u0001;)L\u0001;");
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v47, "append", v50, 0);
v51 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER>;
v52 = <io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING>;
v53 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v52) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("()L\u0001;");
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(182, v51, "toString", v53, 0);
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(176);
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitEnd()>();
virtualinvoke v4.<org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>(0, 0);
return;
}
private static boolean hasDefaultValue(java.lang.Class, java.lang.Object)
{
java.lang.Integer v12, v4;
java.lang.Boolean v8;
java.lang.Class v0;
java.lang.Object v1;
boolean v10, v11, v13, v14, v2, v3, v5, v6, v7, v9;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Object;
if v1 != null goto label1;
return 0;
label1:
v2 = virtualinvoke v0.<java.lang.Class: boolean isPrimitive()>();
if v2 == 0 goto label2;
v3 = v1 instanceof java.lang.Number;
if v3 == 0 goto label2;
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
v5 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
if v5 == 0 goto label2;
return 0;
label2:
v6 = virtualinvoke v0.<java.lang.Class: boolean isPrimitive()>();
if v6 == 0 goto label3;
v7 = v1 instanceof java.lang.Boolean;
if v7 == 0 goto label3;
v8 = <java.lang.Boolean: java.lang.Boolean FALSE>;
v9 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v8);
if v9 == 0 goto label3;
return 0;
label3:
v10 = virtualinvoke v0.<java.lang.Class: boolean isPrimitive()>();
if v10 == 0 goto label4;
v11 = v1 instanceof java.lang.Character;
if v11 == 0 goto label4;
v12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
v13 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v12);
if v13 != 0 goto label5;
label4:
v14 = 1;
goto label6;
label5:
v14 = 0;
label6:
return v14;
}
static void <clinit>()
{
java.lang.String v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v7, v8, v9;
boolean v1, v2, v6;
java.security.PrivilegedAction v4;
java.lang.Class v0;
java.lang.Object v5;
java.util.regex.Pattern v3;
v0 = class "Lio/smallrye/config/ConfigMappingGenerator;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.smallrye.config.ConfigMappingGenerator: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("([<;])L(.*)\\[];");
<io.smallrye.config.ConfigMappingGenerator: java.util.regex.Pattern ARRAY_FORMAT_REGEX> = v3;
v4 = staticinvoke <io.smallrye.config.ConfigMappingGenerator$lambda_static_0__3072: java.security.PrivilegedAction bootstrap$()>();
v5 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(v4);
v6 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(v5);
<io.smallrye.config.ConfigMappingGenerator: boolean usefulDebugInfo> = v6;
v7 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Ljava/lang/Class;");
<io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CLASS> = v7;
v8 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Ljava/util/Collections;");
<io.smallrye.config.ConfigMappingGenerator: java.lang.String I_COLLECTIONS> = v8;
v9 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Lio/smallrye/config/ConfigMappingObject;");
<io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CONFIGURATION_OBJECT> = v9;
v10 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Lorg/eclipse/microprofile/config/spi/Converter;");
<io.smallrye.config.ConfigMappingGenerator: java.lang.String I_CONVERTER> = v10;
v11 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Ljava/util/Map;");
<io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAP> = v11;
v12 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Ljava/util/Collection;");
<io.smallrye.config.ConfigMappingGenerator: java.lang.String I_COLLECTION> = v12;
v13 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Ljava/util/List;");
<io.smallrye.config.ConfigMappingGenerator: java.lang.String I_LIST> = v13;
v14 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Ljava/util/function/IntFunction;");
<io.smallrye.config.ConfigMappingGenerator: java.lang.String I_INT_FUNCTION> = v14;
v15 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Lio/smallrye/config/ConfigMappingContext;");
<io.smallrye.config.ConfigMappingGenerator: java.lang.String I_MAPPING_CONTEXT> = v15;
v16 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Ljava/lang/Object;");
<io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OBJECT> = v16;
v17 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Ljava/util/Optional;");
<io.smallrye.config.ConfigMappingGenerator: java.lang.String I_OPTIONAL> = v17;
v18 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Ljava/lang/RuntimeException;");
<io.smallrye.config.ConfigMappingGenerator: java.lang.String I_RUNTIME_EXCEPTION> = v18;
v19 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Lio/smallrye/config/SmallRyeConfig;");
<io.smallrye.config.ConfigMappingGenerator: java.lang.String I_SMALLRYE_CONFIG> = v19;
v20 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Ljava/lang/StringBuilder;");
<io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING_BUILDER> = v20;
v21 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Ljava/lang/Integer;");
<io.smallrye.config.ConfigMappingGenerator: java.lang.String I_INTEGER> = v21;
v22 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Ljava/lang/String;");
<io.smallrye.config.ConfigMappingGenerator: java.lang.String I_STRING> = v22;
v23 = staticinvoke <org.objectweb.asm.Type: java.lang.String getInternalName(java.lang.Class)>(class "Ljava/lang/reflect/Field;");
<io.smallrye.config.ConfigMappingGenerator: java.lang.String I_FIELD> = v23;
return;
}
}