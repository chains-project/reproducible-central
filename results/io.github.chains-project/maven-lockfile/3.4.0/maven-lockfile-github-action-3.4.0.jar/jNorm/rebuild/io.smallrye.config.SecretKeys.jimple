public final class io.smallrye.config.SecretKeys extends java.lang.Object implements java.io.Serializable
{
private static final long serialVersionUID;
private static final java.lang.ThreadLocal LOCKED;
public void <init>()
{
io.smallrye.config.SecretKeys v0;
v0 := @this: io.smallrye.config.SecretKeys;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static boolean isLocked()
{
java.lang.ThreadLocal v0;
java.lang.Object v1;
boolean v2, v3;
v0 = <io.smallrye.config.SecretKeys: java.lang.ThreadLocal LOCKED>;
v1 = virtualinvoke v0.<java.lang.ThreadLocal: java.lang.Object get()>();
if v1 == null goto label1;
v2 = virtualinvoke v1.<java.lang.Boolean: boolean booleanValue()>();
if v2 == 0 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
public static void doUnlocked(java.lang.Runnable)
{
java.lang.Runnable v0;
java.util.function.Supplier v1;
v0 := @parameter0: java.lang.Runnable;
v1 = staticinvoke <io.smallrye.config.SecretKeys$lambda_doUnlocked_0__3085: java.util.function.Supplier bootstrap$(java.lang.Runnable)>(v0);
staticinvoke <io.smallrye.config.SecretKeys: java.lang.Object doUnlocked(java.util.function.Supplier)>(v1);
return;
}
public static java.lang.Object doUnlocked(java.util.function.Supplier)
{
java.lang.Throwable v6;
java.lang.ThreadLocal v2, v5, v7;
java.util.function.Supplier v0;
java.lang.Boolean v3;
java.lang.Object v4, v8;
boolean v1;
v0 := @parameter0: java.util.function.Supplier;
v1 = staticinvoke <io.smallrye.config.SecretKeys: boolean isLocked()>();
if v1 == 0 goto label4;
v2 = <io.smallrye.config.SecretKeys: java.lang.ThreadLocal LOCKED>;
v3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
virtualinvoke v2.<java.lang.ThreadLocal: void set(java.lang.Object)>(v3);
label1:
v4 = interfaceinvoke v0.<java.util.function.Supplier: java.lang.Object get()>();
label2:
v5 = <io.smallrye.config.SecretKeys: java.lang.ThreadLocal LOCKED>;
virtualinvoke v5.<java.lang.ThreadLocal: void remove()>();
return v4;
label3:
v6 := @caughtexception;
v7 = <io.smallrye.config.SecretKeys: java.lang.ThreadLocal LOCKED>;
virtualinvoke v7.<java.lang.ThreadLocal: void remove()>();
throw v6;
label4:
v8 = interfaceinvoke v0.<java.util.function.Supplier: java.lang.Object get()>();
return v8;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static void doLocked(java.lang.Runnable)
{
java.lang.Runnable v0;
java.util.function.Supplier v1;
v0 := @parameter0: java.lang.Runnable;
v1 = staticinvoke <io.smallrye.config.SecretKeys$lambda_doLocked_1__3086: java.util.function.Supplier bootstrap$(java.lang.Runnable)>(v0);
staticinvoke <io.smallrye.config.SecretKeys: java.lang.Object doLocked(java.util.function.Supplier)>(v1);
return;
}
public static java.lang.Object doLocked(java.util.function.Supplier)
{
java.lang.Throwable v7;
java.lang.ThreadLocal v2, v5, v8;
java.util.function.Supplier v0;
java.lang.Boolean v3, v6, v9;
java.lang.Object v10, v4;
boolean v1;
v0 := @parameter0: java.util.function.Supplier;
v1 = staticinvoke <io.smallrye.config.SecretKeys: boolean isLocked()>();
if v1 != 0 goto label4;
v2 = <io.smallrye.config.SecretKeys: java.lang.ThreadLocal LOCKED>;
v3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
virtualinvoke v2.<java.lang.ThreadLocal: void set(java.lang.Object)>(v3);
label1:
v4 = interfaceinvoke v0.<java.util.function.Supplier: java.lang.Object get()>();
label2:
v5 = <io.smallrye.config.SecretKeys: java.lang.ThreadLocal LOCKED>;
v6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
virtualinvoke v5.<java.lang.ThreadLocal: void set(java.lang.Object)>(v6);
return v4;
label3:
v7 := @caughtexception;
v8 = <io.smallrye.config.SecretKeys: java.lang.ThreadLocal LOCKED>;
v9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
virtualinvoke v8.<java.lang.ThreadLocal: void set(java.lang.Object)>(v9);
throw v7;
label4:
v10 = interfaceinvoke v0.<java.util.function.Supplier: java.lang.Object get()>();
return v10;
catch java.lang.Throwable from label1 to label2 with label3;
}
static void <clinit>()
{
java.lang.ThreadLocal v0;
v0 = new java.lang.ThreadLocal;
specialinvoke v0.<java.lang.ThreadLocal: void <init>()>();
<io.smallrye.config.SecretKeys: java.lang.ThreadLocal LOCKED> = v0;
return;
}
}