public class io.smallrye.config.inject.ConfigExtension extends java.lang.Object implements jakarta.enterprise.inject.spi.Extension
{
private final java.util.Set configPropertyInjectionPoints;
private final java.util.Set configProperties;
private final java.util.Set configPropertiesBeans;
private final java.util.Set configMappings;
private final java.util.Set configMappingBeans;
public void <init>()
{
java.util.HashSet v1, v2, v3, v4, v5;
io.smallrye.config.inject.ConfigExtension v0;
v0 := @this: io.smallrye.config.inject.ConfigExtension;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.HashSet;
specialinvoke v1.<java.util.HashSet: void <init>()>();
v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configPropertyInjectionPoints> = v1;
v2 = new java.util.HashSet;
specialinvoke v2.<java.util.HashSet: void <init>()>();
v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configProperties> = v2;
v3 = new java.util.HashSet;
specialinvoke v3.<java.util.HashSet: void <init>()>();
v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configPropertiesBeans> = v3;
v4 = new java.util.HashSet;
specialinvoke v4.<java.util.HashSet: void <init>()>();
v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configMappings> = v4;
v5 = new java.util.HashSet;
specialinvoke v5.<java.util.HashSet: void <init>()>();
v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configMappingBeans> = v5;
return;
}
protected void beforeBeanDiscovery(jakarta.enterprise.inject.spi.BeforeBeanDiscovery, jakarta.enterprise.inject.spi.BeanManager)
{
io.smallrye.config.inject.ConfigExtension v0;
java.util.Set v7;
java.util.function.Consumer v8;
jakarta.enterprise.inject.spi.BeforeBeanDiscovery v1;
java.lang.Class v4;
jakarta.enterprise.inject.spi.AnnotatedType v3;
jakarta.enterprise.inject.spi.configurator.AnnotatedTypeConfigurator v6;
java.lang.String v5;
jakarta.enterprise.inject.spi.BeanManager v2;
v0 := @this: io.smallrye.config.inject.ConfigExtension;
v1 := @parameter0: jakarta.enterprise.inject.spi.BeforeBeanDiscovery;
v2 := @parameter1: jakarta.enterprise.inject.spi.BeanManager;
v3 = interfaceinvoke v2.<jakarta.enterprise.inject.spi.BeanManager: jakarta.enterprise.inject.spi.AnnotatedType createAnnotatedType(java.lang.Class)>(class "Lio/smallrye/config/inject/ConfigProducer;");
v4 = class "Lio/smallrye/config/inject/ConfigProducer;";
v5 = virtualinvoke v4.<java.lang.Class: java.lang.String getName()>();
interfaceinvoke v1.<jakarta.enterprise.inject.spi.BeforeBeanDiscovery: void addAnnotatedType(jakarta.enterprise.inject.spi.AnnotatedType,java.lang.String)>(v3, v5);
v6 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.BeforeBeanDiscovery: jakarta.enterprise.inject.spi.configurator.AnnotatedTypeConfigurator configureQualifier(java.lang.Class)>(class "Lorg/eclipse/microprofile/config/inject/ConfigProperties;");
v7 = interfaceinvoke v6.<jakarta.enterprise.inject.spi.configurator.AnnotatedTypeConfigurator: java.util.Set methods()>();
v8 = staticinvoke <io.smallrye.config.inject.ConfigExtension$lambda_beforeBeanDiscovery_1__3053: java.util.function.Consumer bootstrap$()>();
interfaceinvoke v7.<java.util.Set: void forEach(java.util.function.Consumer)>(v8);
return;
}
protected void processConfigProperties(jakarta.enterprise.inject.spi.ProcessAnnotatedType)
{
io.smallrye.config.ConfigMappings$ConfigClassWithPrefix v15, v9;
jakarta.enterprise.inject.spi.ProcessAnnotatedType v1;
java.lang.String v10, v8;
boolean v11, v3;
io.smallrye.config.inject.ConfigExtension v0;
java.util.Set v12, v13, v16;
java.lang.'annotation'.Annotation v7;
java.lang.Class v14, v5;
jakarta.enterprise.inject.spi.AnnotatedType v2, v4, v6;
v0 := @this: io.smallrye.config.inject.ConfigExtension;
v1 := @parameter0: jakarta.enterprise.inject.spi.ProcessAnnotatedType;
v2 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.ProcessAnnotatedType: jakarta.enterprise.inject.spi.AnnotatedType getAnnotatedType()>();
v3 = interfaceinvoke v2.<jakarta.enterprise.inject.spi.AnnotatedType: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/eclipse/microprofile/config/inject/ConfigProperties;");
if v3 == 0 goto label3;
interfaceinvoke v1.<jakarta.enterprise.inject.spi.ProcessAnnotatedType: void veto()>();
v4 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.ProcessAnnotatedType: jakarta.enterprise.inject.spi.AnnotatedType getAnnotatedType()>();
v5 = interfaceinvoke v4.<jakarta.enterprise.inject.spi.AnnotatedType: java.lang.Class getJavaClass()>();
v6 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.ProcessAnnotatedType: jakarta.enterprise.inject.spi.AnnotatedType getAnnotatedType()>();
v7 = interfaceinvoke v6.<jakarta.enterprise.inject.spi.AnnotatedType: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/eclipse/microprofile/config/inject/ConfigProperties;");
v8 = interfaceinvoke v7.<org.eclipse.microprofile.config.inject.ConfigProperties: java.lang.String prefix()>();
v9 = staticinvoke <io.smallrye.config.ConfigMappings$ConfigClassWithPrefix: io.smallrye.config.ConfigMappings$ConfigClassWithPrefix configClassWithPrefix(java.lang.Class,java.lang.String)>(v5, v8);
v10 = virtualinvoke v9.<io.smallrye.config.ConfigMappings$ConfigClassWithPrefix: java.lang.String getPrefix()>();
v11 = virtualinvoke v10.<java.lang.String: boolean equals(java.lang.Object)>("org.eclipse.microprofile.config.inject.configproperties.unconfiguredprefix");
if v11 != 0 goto label1;
v12 = v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configProperties>;
interfaceinvoke v12.<java.util.Set: boolean add(java.lang.Object)>(v9);
goto label2;
label1:
v13 = v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configProperties>;
v14 = virtualinvoke v9.<io.smallrye.config.ConfigMappings$ConfigClassWithPrefix: java.lang.Class getKlass()>();
v15 = staticinvoke <io.smallrye.config.ConfigMappings$ConfigClassWithPrefix: io.smallrye.config.ConfigMappings$ConfigClassWithPrefix configClassWithPrefix(java.lang.Class,java.lang.String)>(v14, "");
interfaceinvoke v13.<java.util.Set: boolean add(java.lang.Object)>(v15);
label2:
v16 = v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configPropertiesBeans>;
interfaceinvoke v16.<java.util.Set: boolean add(java.lang.Object)>(v9);
label3:
return;
}
protected void processConfigMappings(jakarta.enterprise.inject.spi.ProcessAnnotatedType)
{
io.smallrye.config.inject.ConfigExtension v0;
io.smallrye.config.ConfigMappings$ConfigClassWithPrefix v9;
java.util.Set v10, v11;
jakarta.enterprise.inject.spi.ProcessAnnotatedType v1;
java.lang.'annotation'.Annotation v7;
java.lang.Class v5;
jakarta.enterprise.inject.spi.AnnotatedType v2, v4, v6;
java.lang.String v8;
boolean v3;
v0 := @this: io.smallrye.config.inject.ConfigExtension;
v1 := @parameter0: jakarta.enterprise.inject.spi.ProcessAnnotatedType;
v2 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.ProcessAnnotatedType: jakarta.enterprise.inject.spi.AnnotatedType getAnnotatedType()>();
v3 = interfaceinvoke v2.<jakarta.enterprise.inject.spi.AnnotatedType: boolean isAnnotationPresent(java.lang.Class)>(class "Lio/smallrye/config/ConfigMapping;");
if v3 == 0 goto label1;
interfaceinvoke v1.<jakarta.enterprise.inject.spi.ProcessAnnotatedType: void veto()>();
v4 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.ProcessAnnotatedType: jakarta.enterprise.inject.spi.AnnotatedType getAnnotatedType()>();
v5 = interfaceinvoke v4.<jakarta.enterprise.inject.spi.AnnotatedType: java.lang.Class getJavaClass()>();
v6 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.ProcessAnnotatedType: jakarta.enterprise.inject.spi.AnnotatedType getAnnotatedType()>();
v7 = interfaceinvoke v6.<jakarta.enterprise.inject.spi.AnnotatedType: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/smallrye/config/ConfigMapping;");
v8 = interfaceinvoke v7.<io.smallrye.config.ConfigMapping: java.lang.String prefix()>();
v9 = staticinvoke <io.smallrye.config.ConfigMappings$ConfigClassWithPrefix: io.smallrye.config.ConfigMappings$ConfigClassWithPrefix configClassWithPrefix(java.lang.Class,java.lang.String)>(v5, v8);
v10 = v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configMappings>;
interfaceinvoke v10.<java.util.Set: boolean add(java.lang.Object)>(v9);
v11 = v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configMappingBeans>;
interfaceinvoke v11.<java.util.Set: boolean add(java.lang.Object)>(v9);
label1:
return;
}
protected void processConfigInjectionPoints(jakarta.enterprise.inject.spi.ProcessInjectionPoint)
{
io.smallrye.config.ConfigMappings$ConfigClassWithPrefix v16, v30;
boolean v18, v23, v32, v4, v9;
java.util.Set v19, v20, v33, v5;
java.lang.reflect.Type v11, v25;
java.lang.'annotation'.Annotation v14, v28;
jakarta.enterprise.inject.spi.ProcessInjectionPoint v1;
java.lang.String v15, v17, v29, v31;
io.smallrye.config.inject.ConfigExtension v0;
jakarta.enterprise.inject.spi.InjectionPoint v10, v12, v2, v21, v24, v26, v6, v7;
jakarta.enterprise.inject.spi.Annotated v13, v22, v27, v3, v8;
v0 := @this: io.smallrye.config.inject.ConfigExtension;
v1 := @parameter0: jakarta.enterprise.inject.spi.ProcessInjectionPoint;
v2 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.ProcessInjectionPoint: jakarta.enterprise.inject.spi.InjectionPoint getInjectionPoint()>();
v3 = interfaceinvoke v2.<jakarta.enterprise.inject.spi.InjectionPoint: jakarta.enterprise.inject.spi.Annotated getAnnotated()>();
v4 = interfaceinvoke v3.<jakarta.enterprise.inject.spi.Annotated: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/eclipse/microprofile/config/inject/ConfigProperty;");
if v4 == 0 goto label1;
v5 = v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configPropertyInjectionPoints>;
v6 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.ProcessInjectionPoint: jakarta.enterprise.inject.spi.InjectionPoint getInjectionPoint()>();
interfaceinvoke v5.<java.util.Set: boolean add(java.lang.Object)>(v6);
label1:
v7 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.ProcessInjectionPoint: jakarta.enterprise.inject.spi.InjectionPoint getInjectionPoint()>();
v8 = interfaceinvoke v7.<jakarta.enterprise.inject.spi.InjectionPoint: jakarta.enterprise.inject.spi.Annotated getAnnotated()>();
v9 = interfaceinvoke v8.<jakarta.enterprise.inject.spi.Annotated: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/eclipse/microprofile/config/inject/ConfigProperties;");
if v9 == 0 goto label3;
v10 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.ProcessInjectionPoint: jakarta.enterprise.inject.spi.InjectionPoint getInjectionPoint()>();
v11 = interfaceinvoke v10.<jakarta.enterprise.inject.spi.InjectionPoint: java.lang.reflect.Type getType()>();
v12 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.ProcessInjectionPoint: jakarta.enterprise.inject.spi.InjectionPoint getInjectionPoint()>();
v13 = interfaceinvoke v12.<jakarta.enterprise.inject.spi.InjectionPoint: jakarta.enterprise.inject.spi.Annotated getAnnotated()>();
v14 = interfaceinvoke v13.<jakarta.enterprise.inject.spi.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/eclipse/microprofile/config/inject/ConfigProperties;");
v15 = interfaceinvoke v14.<org.eclipse.microprofile.config.inject.ConfigProperties: java.lang.String prefix()>();
v16 = staticinvoke <io.smallrye.config.ConfigMappings$ConfigClassWithPrefix: io.smallrye.config.ConfigMappings$ConfigClassWithPrefix configClassWithPrefix(java.lang.Class,java.lang.String)>(v11, v15);
v17 = virtualinvoke v16.<io.smallrye.config.ConfigMappings$ConfigClassWithPrefix: java.lang.String getPrefix()>();
v18 = virtualinvoke v17.<java.lang.String: boolean equals(java.lang.Object)>("org.eclipse.microprofile.config.inject.configproperties.unconfiguredprefix");
if v18 != 0 goto label2;
v19 = v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configProperties>;
interfaceinvoke v19.<java.util.Set: boolean add(java.lang.Object)>(v16);
label2:
v20 = v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configPropertiesBeans>;
interfaceinvoke v20.<java.util.Set: boolean add(java.lang.Object)>(v16);
label3:
v21 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.ProcessInjectionPoint: jakarta.enterprise.inject.spi.InjectionPoint getInjectionPoint()>();
v22 = interfaceinvoke v21.<jakarta.enterprise.inject.spi.InjectionPoint: jakarta.enterprise.inject.spi.Annotated getAnnotated()>();
v23 = interfaceinvoke v22.<jakarta.enterprise.inject.spi.Annotated: boolean isAnnotationPresent(java.lang.Class)>(class "Lio/smallrye/config/ConfigMapping;");
if v23 == 0 goto label4;
v24 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.ProcessInjectionPoint: jakarta.enterprise.inject.spi.InjectionPoint getInjectionPoint()>();
v25 = interfaceinvoke v24.<jakarta.enterprise.inject.spi.InjectionPoint: java.lang.reflect.Type getType()>();
v26 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.ProcessInjectionPoint: jakarta.enterprise.inject.spi.InjectionPoint getInjectionPoint()>();
v27 = interfaceinvoke v26.<jakarta.enterprise.inject.spi.InjectionPoint: jakarta.enterprise.inject.spi.Annotated getAnnotated()>();
v28 = interfaceinvoke v27.<jakarta.enterprise.inject.spi.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/smallrye/config/ConfigMapping;");
v29 = interfaceinvoke v28.<io.smallrye.config.ConfigMapping: java.lang.String prefix()>();
v30 = staticinvoke <io.smallrye.config.ConfigMappings$ConfigClassWithPrefix: io.smallrye.config.ConfigMappings$ConfigClassWithPrefix configClassWithPrefix(java.lang.Class,java.lang.String)>(v25, v29);
v31 = virtualinvoke v30.<io.smallrye.config.ConfigMappings$ConfigClassWithPrefix: java.lang.String getPrefix()>();
v32 = virtualinvoke v31.<java.lang.String: boolean isEmpty()>();
if v32 != 0 goto label4;
v33 = v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configMappings>;
interfaceinvoke v33.<java.util.Set: boolean add(java.lang.Object)>(v30);
label4:
return;
}
protected void registerCustomBeans(jakarta.enterprise.inject.spi.AfterBeanDiscovery, jakarta.enterprise.inject.spi.BeanManager)
{
java.util.HashSet v3;
boolean v11, v13, v16, v17, v18, v19, v6, v9;
jakarta.enterprise.inject.spi.BeanManager v2;
io.smallrye.config.inject.ConfigExtension v0;
java.util.Iterator v5;
java.util.Set v21, v23, v4;
java.util.function.Consumer v20, v22, v24;
jakarta.enterprise.inject.spi.AfterBeanDiscovery v1;
java.lang.reflect.Type v10, v12, v15, v8;
java.lang.reflect.Type[] v14;
java.lang.Object v7;
v0 := @this: io.smallrye.config.inject.ConfigExtension;
v1 := @parameter0: jakarta.enterprise.inject.spi.AfterBeanDiscovery;
v2 := @parameter1: jakarta.enterprise.inject.spi.BeanManager;
v3 = new java.util.HashSet;
specialinvoke v3.<java.util.HashSet: void <init>()>();
v4 = v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configPropertyInjectionPoints>;
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label4;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<jakarta.enterprise.inject.spi.InjectionPoint: java.lang.reflect.Type getType()>();
v9 = v8 instanceof java.lang.reflect.ParameterizedType;
if v9 == 0 goto label3;
v10 = interfaceinvoke v8.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v11 = virtualinvoke v10.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljakarta/inject/Provider;");
if v11 != 0 goto label2;
v12 = interfaceinvoke v8.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v13 = virtualinvoke v12.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljakarta/enterprise/inject/Instance;");
if v13 == 0 goto label1;
label2:
v14 = interfaceinvoke v8.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v15 = v14[0];
v16 = v15 instanceof java.lang.Class;
if v16 == 0 goto label1;
v17 = staticinvoke <io.smallrye.config.inject.ConfigProducer: boolean isClassHandledByConfigProducer(java.lang.reflect.Type)>(v15);
if v17 != 0 goto label1;
interfaceinvoke v3.<java.util.Set: boolean add(java.lang.Object)>(v15);
goto label1;
label3:
v18 = v8 instanceof java.lang.Class;
if v18 == 0 goto label1;
v19 = staticinvoke <io.smallrye.config.inject.ConfigProducer: boolean isClassHandledByConfigProducer(java.lang.reflect.Type)>(v8);
if v19 != 0 goto label1;
interfaceinvoke v3.<java.util.Set: boolean add(java.lang.Object)>(v8);
goto label1;
label4:
v20 = staticinvoke <io.smallrye.config.inject.ConfigExtension$lambda_registerCustomBeans_2__3054: java.util.function.Consumer bootstrap$(jakarta.enterprise.inject.spi.AfterBeanDiscovery,jakarta.enterprise.inject.spi.BeanManager)>(v1, v2);
interfaceinvoke v3.<java.util.Set: void forEach(java.util.function.Consumer)>(v20);
v21 = v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configPropertiesBeans>;
v22 = staticinvoke <io.smallrye.config.inject.ConfigExtension$lambda_registerCustomBeans_3__3055: java.util.function.Consumer bootstrap$(jakarta.enterprise.inject.spi.AfterBeanDiscovery)>(v1);
interfaceinvoke v21.<java.util.Set: void forEach(java.util.function.Consumer)>(v22);
v23 = v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configMappingBeans>;
v24 = staticinvoke <io.smallrye.config.inject.ConfigExtension$lambda_registerCustomBeans_4__3056: java.util.function.Consumer bootstrap$(jakarta.enterprise.inject.spi.AfterBeanDiscovery,jakarta.enterprise.inject.spi.BeanManager)>(v1, v2);
interfaceinvoke v23.<java.util.Set: void forEach(java.util.function.Consumer)>(v24);
return;
}
protected void validate(jakarta.enterprise.inject.spi.AfterDeploymentValidation)
{
java.lang.IllegalStateException v40;
jakarta.enterprise.inject.spi.AfterDeploymentValidation v1;
java.util.stream.Collector v8;
boolean v12, v15, v17, v18, v20, v21, v23, v24, v26, v27, v30, v33, v36, v45, v48, v49, v51;
java.util.Set v10, v60, v61;
org.eclipse.microprofile.config.Config v3;
io.smallrye.config.ConfigValue v46;
java.lang.Exception v55;
java.util.stream.Stream v7;
java.lang.reflect.Type v14, v29, v32, v35;
java.lang.'annotation'.Annotation v38;
java.lang.ClassLoader v2;
java.util.Spliterator v6;
java.lang.Iterable v5;
java.lang.String v39, v42, v43, v47, v50, v53, v57, v58;
io.smallrye.config.inject.InjectionMessages v41, v52, v56;
io.smallrye.config.inject.ConfigExtension v0;
java.util.Iterator v11;
jakarta.enterprise.inject.spi.Annotated v37;
io.smallrye.config.ConfigValidationException v62;
java.lang.Class v16, v19, v22, v25, v28, v31, v34;
java.lang.Object v13, v4, v9;
io.smallrye.config.inject.ConfigException v44, v54, v59;
v0 := @this: io.smallrye.config.inject.ConfigExtension;
v1 := @parameter0: jakarta.enterprise.inject.spi.AfterDeploymentValidation;
v2 = staticinvoke <io.smallrye.config.inject.SecuritySupport: java.lang.ClassLoader getContextClassLoader()>();
v3 = staticinvoke <org.eclipse.microprofile.config.ConfigProvider: org.eclipse.microprofile.config.Config getConfig(java.lang.ClassLoader)>(v2);
v4 = interfaceinvoke v3.<org.eclipse.microprofile.config.Config: java.lang.Object unwrap(java.lang.Class)>(class "Lio/smallrye/config/SmallRyeConfig;");
v5 = virtualinvoke v4.<io.smallrye.config.SmallRyeConfig: java.lang.Iterable getPropertyNames()>();
v6 = interfaceinvoke v5.<java.lang.Iterable: java.util.Spliterator spliterator()>();
v7 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>(v6, 0);
v8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>();
v9 = interfaceinvoke v7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v8);
v10 = virtualinvoke v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set getConfigPropertyInjectionPoints()>();
v11 = interfaceinvoke v10.<java.util.Set: java.util.Iterator iterator()>();
label01:
v12 = interfaceinvoke v11.<java.util.Iterator: boolean hasNext()>();
if v12 == 0 goto label14;
v13 = interfaceinvoke v11.<java.util.Iterator: java.lang.Object next()>();
v14 = interfaceinvoke v13.<jakarta.enterprise.inject.spi.InjectionPoint: java.lang.reflect.Type getType()>();
v15 = v14 instanceof java.lang.Class;
if v15 == 0 goto label02;
v16 = class "Lorg/eclipse/microprofile/config/ConfigValue;";
v17 = virtualinvoke v16.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v14);
if v17 != 0 goto label01;
label02:
v18 = v14 instanceof java.lang.Class;
if v18 == 0 goto label03;
v19 = class "Ljava/util/OptionalInt;";
v20 = virtualinvoke v19.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v14);
if v20 != 0 goto label01;
label03:
v21 = v14 instanceof java.lang.Class;
if v21 == 0 goto label04;
v22 = class "Ljava/util/OptionalLong;";
v23 = virtualinvoke v22.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v14);
if v23 != 0 goto label01;
label04:
v24 = v14 instanceof java.lang.Class;
if v24 == 0 goto label05;
v25 = class "Ljava/util/OptionalDouble;";
v26 = virtualinvoke v25.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v14);
if v26 != 0 goto label01;
label05:
v27 = v14 instanceof java.lang.reflect.ParameterizedType;
if v27 == 0 goto label06;
v28 = class "Ljava/util/Optional;";
v29 = interfaceinvoke v14.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v30 = virtualinvoke v28.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v29);
if v30 != 0 goto label01;
v31 = class "Ljakarta/inject/Provider;";
v32 = interfaceinvoke v14.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v33 = virtualinvoke v31.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v32);
if v33 != 0 goto label01;
v34 = class "Ljava/util/function/Supplier;";
v35 = interfaceinvoke v14.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v36 = virtualinvoke v34.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v35);
if v36 != 0 goto label01;
label06:
v37 = interfaceinvoke v13.<jakarta.enterprise.inject.spi.InjectionPoint: jakarta.enterprise.inject.spi.Annotated getAnnotated()>();
v38 = interfaceinvoke v37.<jakarta.enterprise.inject.spi.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/eclipse/microprofile/config/inject/ConfigProperty;");
label07:
v39 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.String getConfigKey(jakarta.enterprise.inject.spi.InjectionPoint,org.eclipse.microprofile.config.inject.ConfigProperty)>(v13, v38);
label08:
goto label10;
label09:
v40 := @caughtexception;
v41 = <io.smallrye.config.inject.InjectionMessages: io.smallrye.config.inject.InjectionMessages msg>;
v42 = staticinvoke <io.smallrye.config.inject.InjectionMessages: java.lang.String formatInjectionPoint(jakarta.enterprise.inject.spi.InjectionPoint)>(v13);
v43 = virtualinvoke v40.<java.lang.IllegalStateException: java.lang.String getLocalizedMessage()>();
v44 = interfaceinvoke v41.<io.smallrye.config.inject.InjectionMessages: io.smallrye.config.inject.ConfigException retrieveConfigFailure(java.lang.String,java.lang.String,java.lang.String,java.lang.Exception)>(null, v42, v43, v40);
interfaceinvoke v1.<jakarta.enterprise.inject.spi.AfterDeploymentValidation: void addDeploymentProblem(java.lang.Throwable)>(v44);
goto label01;
label10:
v45 = interfaceinvoke v9.<java.util.Set: boolean contains(java.lang.Object)>(v39);
if v45 != 0 goto label11;
v46 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: io.smallrye.config.ConfigValue getConfigValue(java.lang.String,io.smallrye.config.SmallRyeConfig)>(v39, v4);
v47 = virtualinvoke v46.<io.smallrye.config.ConfigValue: java.lang.String getValue()>();
if v47 != null goto label11;
v48 = staticinvoke <io.smallrye.config.inject.ConfigExtension: boolean isMap(java.lang.reflect.Type)>(v14);
if v48 != 0 goto label11;
v49 = staticinvoke <io.smallrye.config.inject.ConfigExtension: boolean isIndexed(java.lang.reflect.Type,java.lang.String,io.smallrye.config.SmallRyeConfig)>(v14, v39, v4);
if v49 != 0 goto label11;
v50 = interfaceinvoke v38.<org.eclipse.microprofile.config.inject.ConfigProperty: java.lang.String defaultValue()>();
v51 = virtualinvoke v50.<java.lang.String: boolean equals(java.lang.Object)>("org.eclipse.microprofile.config.configproperty.unconfigureddvalue");
if v51 == 0 goto label11;
v52 = <io.smallrye.config.inject.InjectionMessages: io.smallrye.config.inject.InjectionMessages msg>;
v53 = staticinvoke <io.smallrye.config.inject.InjectionMessages: java.lang.String formatInjectionPoint(jakarta.enterprise.inject.spi.InjectionPoint)>(v13);
v54 = interfaceinvoke v52.<io.smallrye.config.inject.InjectionMessages: io.smallrye.config.inject.ConfigException noConfigValue(java.lang.String,java.lang.String)>(v39, v53);
interfaceinvoke v1.<jakarta.enterprise.inject.spi.AfterDeploymentValidation: void addDeploymentProblem(java.lang.Throwable)>(v54);
goto label01;
label11:
staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.Object getValue(jakarta.enterprise.inject.spi.InjectionPoint,org.eclipse.microprofile.config.Config)>(v13, v4);
label12:
goto label01;
label13:
v55 := @caughtexception;
v56 = <io.smallrye.config.inject.InjectionMessages: io.smallrye.config.inject.InjectionMessages msg>;
v57 = staticinvoke <io.smallrye.config.inject.InjectionMessages: java.lang.String formatInjectionPoint(jakarta.enterprise.inject.spi.InjectionPoint)>(v13);
v58 = virtualinvoke v55.<java.lang.Exception: java.lang.String getLocalizedMessage()>();
v59 = interfaceinvoke v56.<io.smallrye.config.inject.InjectionMessages: io.smallrye.config.inject.ConfigException retrieveConfigFailure(java.lang.String,java.lang.String,java.lang.String,java.lang.Exception)>(v39, v57, v58, v55);
interfaceinvoke v1.<jakarta.enterprise.inject.spi.AfterDeploymentValidation: void addDeploymentProblem(java.lang.Throwable)>(v59);
goto label01;
label14:
v60 = v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configMappings>;
staticinvoke <io.smallrye.config.ConfigMappings: void registerConfigMappings(io.smallrye.config.SmallRyeConfig,java.util.Set)>(v4, v60);
v61 = v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configProperties>;
staticinvoke <io.smallrye.config.ConfigMappings: void registerConfigProperties(io.smallrye.config.SmallRyeConfig,java.util.Set)>(v4, v61);
label15:
goto label17;
label16:
v62 := @caughtexception;
interfaceinvoke v1.<jakarta.enterprise.inject.spi.AfterDeploymentValidation: void addDeploymentProblem(java.lang.Throwable)>(v62);
label17:
return;
catch java.lang.IllegalStateException from label07 to label08 with label09;
catch java.lang.Exception from label11 to label12 with label13;
catch io.smallrye.config.ConfigValidationException from label14 to label15 with label16;
}
protected java.util.Set getConfigPropertyInjectionPoints()
{
java.util.Set v1;
io.smallrye.config.inject.ConfigExtension v0;
v0 := @this: io.smallrye.config.inject.ConfigExtension;
v1 = v0.<io.smallrye.config.inject.ConfigExtension: java.util.Set configPropertyInjectionPoints>;
return v1;
}
private static boolean isIndexed(java.lang.reflect.Type, java.lang.String, io.smallrye.config.SmallRyeConfig)
{
io.smallrye.config.SmallRyeConfig v2;
java.util.List v10;
java.lang.reflect.Type v0, v5, v8;
java.lang.Class v4, v7;
java.lang.String v1;
boolean v11, v12, v3, v6, v9;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: io.smallrye.config.SmallRyeConfig;
v3 = v0 instanceof java.lang.reflect.ParameterizedType;
if v3 == 0 goto label2;
v4 = class "Ljava/util/List;";
v5 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v6 = virtualinvoke v4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v5);
if v6 != 0 goto label1;
v7 = class "Ljava/util/Set;";
v8 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v9 = virtualinvoke v7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v8);
if v9 == 0 goto label2;
label1:
v10 = virtualinvoke v2.<io.smallrye.config.SmallRyeConfig: java.util.List getIndexedPropertiesIndexes(java.lang.String)>(v1);
v11 = interfaceinvoke v10.<java.util.List: boolean isEmpty()>();
if v11 != 0 goto label2;
v12 = 1;
goto label3;
label2:
v12 = 0;
label3:
return v12;
}
private static boolean isMap(java.lang.reflect.Type)
{
java.lang.reflect.Type v0, v3;
java.lang.Class v2;
boolean v1, v4, v5;
v0 := @parameter0: java.lang.reflect.Type;
v1 = v0 instanceof java.lang.reflect.ParameterizedType;
if v1 == 0 goto label1;
v2 = class "Ljava/util/Map;";
v3 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v4 = virtualinvoke v2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v3);
if v4 == 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
}