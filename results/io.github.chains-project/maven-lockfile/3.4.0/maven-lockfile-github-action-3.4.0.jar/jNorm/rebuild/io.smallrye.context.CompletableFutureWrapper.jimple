public class io.smallrye.context.CompletableFutureWrapper extends java.util.concurrent.CompletableFuture implements io.smallrye.context.impl.Contextualized
{
protected final java.util.concurrent.CompletableFuture f;
protected final io.smallrye.context.SmallRyeThreadContext context;
protected final java.util.concurrent.Executor executor;
protected final int flags;
public static final int FLAG_MINIMAL;
public static final int FLAG_DEPENDENT;
public void <init>(io.smallrye.context.SmallRyeThreadContext, java.util.concurrent.CompletableFuture, java.util.concurrent.Executor, int)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v3;
io.smallrye.context.SmallRyeThreadContext v1;
int v4;
java.util.function.BiConsumer v5;
java.util.concurrent.CompletableFuture v2;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: io.smallrye.context.SmallRyeThreadContext;
v2 := @parameter1: java.util.concurrent.CompletableFuture;
v3 := @parameter2: java.util.concurrent.Executor;
v4 := @parameter3: int;
specialinvoke v0.<java.util.concurrent.CompletableFuture: void <init>()>();
v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context> = v1;
v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f> = v2;
v5 = staticinvoke <io.smallrye.context.CompletableFutureWrapper$lambda_new_0__1599: java.util.function.BiConsumer bootstrap$(io.smallrye.context.CompletableFutureWrapper)>(v0);
virtualinvoke v2.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture whenComplete(java.util.function.BiConsumer)>(v5);
v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor> = v3;
v0.<io.smallrye.context.CompletableFutureWrapper: int flags> = v4;
return;
}
protected void checkDefaultExecutor()
{
java.lang.UnsupportedOperationException v2;
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v1;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
if v1 != null goto label1;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Async methods not supported when no executor is specified");
throw v2;
label1:
return;
}
private void checkMinimal()
{
java.lang.UnsupportedOperationException v3;
io.smallrye.context.CompletableFutureWrapper v0;
int v1, v2;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v2 = v1 & 1;
if v2 == 0 goto label1;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Completion methods not supported for minimal CompletionStage instances");
throw v3;
label1:
return;
}
private boolean isDependent()
{
io.smallrye.context.CompletableFutureWrapper v0;
int v1, v2;
boolean v3;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v2 = v1 & 2;
if v2 == 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean complete(java.lang.Object)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.lang.Object v1;
java.util.concurrent.CompletableFuture v4;
boolean v2, v3, v5;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<io.smallrye.context.CompletableFutureWrapper: void checkMinimal()>();
v2 = specialinvoke v0.<io.smallrye.context.CompletableFutureWrapper: boolean isDependent()>();
if v2 == 0 goto label1;
v3 = specialinvoke v0.<java.util.concurrent.CompletableFuture: boolean complete(java.lang.Object)>(v1);
return v3;
label1:
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: boolean complete(java.lang.Object)>(v1);
return v5;
}
public boolean completeExceptionally(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.CompletableFuture v4;
boolean v2, v3, v5;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.lang.Throwable;
specialinvoke v0.<io.smallrye.context.CompletableFutureWrapper: void checkMinimal()>();
v2 = specialinvoke v0.<io.smallrye.context.CompletableFutureWrapper: boolean isDependent()>();
if v2 == 0 goto label1;
v3 = specialinvoke v0.<java.util.concurrent.CompletableFuture: boolean completeExceptionally(java.lang.Throwable)>(v1);
return v3;
label1:
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: boolean completeExceptionally(java.lang.Throwable)>(v1);
return v5;
}
public boolean cancel(boolean)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.CompletableFuture v4;
boolean v1, v2, v3, v5;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.smallrye.context.CompletableFutureWrapper: boolean isDependent()>();
if v2 == 0 goto label1;
v3 = specialinvoke v0.<java.util.concurrent.CompletableFuture: boolean cancel(boolean)>(v1);
return v3;
label1:
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: boolean cancel(boolean)>(v1);
return v5;
}
public boolean isCancelled()
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.CompletableFuture v3;
boolean v1, v2, v4;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 = specialinvoke v0.<io.smallrye.context.CompletableFutureWrapper: boolean isDependent()>();
if v1 == 0 goto label1;
v2 = specialinvoke v0.<java.util.concurrent.CompletableFuture: boolean isCancelled()>();
return v2;
label1:
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: boolean isCancelled()>();
return v4;
}
public boolean isCompletedExceptionally()
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.CompletableFuture v3;
boolean v1, v2, v4;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 = specialinvoke v0.<io.smallrye.context.CompletableFutureWrapper: boolean isDependent()>();
if v1 == 0 goto label1;
v2 = specialinvoke v0.<java.util.concurrent.CompletableFuture: boolean isCompletedExceptionally()>();
return v2;
label1:
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: boolean isCompletedExceptionally()>();
return v4;
}
public void obtrudeValue(java.lang.Object)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.lang.Object v1;
java.util.concurrent.CompletableFuture v3;
boolean v2;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.lang.Object;
v2 = specialinvoke v0.<io.smallrye.context.CompletableFutureWrapper: boolean isDependent()>();
if v2 == 0 goto label1;
specialinvoke v0.<java.util.concurrent.CompletableFuture: void obtrudeValue(java.lang.Object)>(v1);
goto label2;
label1:
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
virtualinvoke v3.<java.util.concurrent.CompletableFuture: void obtrudeValue(java.lang.Object)>(v1);
label2:
return;
}
public void obtrudeException(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.CompletableFuture v3;
boolean v2;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.lang.Throwable;
v2 = specialinvoke v0.<io.smallrye.context.CompletableFutureWrapper: boolean isDependent()>();
if v2 == 0 goto label1;
specialinvoke v0.<java.util.concurrent.CompletableFuture: void obtrudeException(java.lang.Throwable)>(v1);
goto label2;
label1:
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
virtualinvoke v3.<java.util.concurrent.CompletableFuture: void obtrudeException(java.lang.Throwable)>(v1);
label2:
return;
}
public int getNumberOfDependents()
{
io.smallrye.context.CompletableFutureWrapper v0;
int v2, v4;
java.util.concurrent.CompletableFuture v3;
boolean v1;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 = specialinvoke v0.<io.smallrye.context.CompletableFutureWrapper: boolean isDependent()>();
if v1 == 0 goto label1;
v2 = specialinvoke v0.<java.util.concurrent.CompletableFuture: int getNumberOfDependents()>();
return v2;
label1:
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: int getNumberOfDependents()>();
return v4;
}
public boolean isDone()
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.CompletableFuture v3;
boolean v1, v2, v4;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 = specialinvoke v0.<io.smallrye.context.CompletableFutureWrapper: boolean isDependent()>();
if v1 == 0 goto label1;
v2 = specialinvoke v0.<java.util.concurrent.CompletableFuture: boolean isDone()>();
return v2;
label1:
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: boolean isDone()>();
return v4;
}
public java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
{
io.smallrye.context.CompletableFutureWrapper v0;
java.lang.Object v2, v4;
java.util.concurrent.CompletableFuture v3;
boolean v1;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 = specialinvoke v0.<io.smallrye.context.CompletableFutureWrapper: boolean isDependent()>();
if v1 == 0 goto label1;
v2 = specialinvoke v0.<java.util.concurrent.CompletableFuture: java.lang.Object get()>();
return v2;
label1:
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: java.lang.Object get()>();
return v4;
}
public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
{
java.util.concurrent.TimeUnit v2;
io.smallrye.context.CompletableFutureWrapper v0;
java.lang.Object v4, v6;
java.util.concurrent.CompletableFuture v5;
long v1;
boolean v3;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
v3 = specialinvoke v0.<io.smallrye.context.CompletableFutureWrapper: boolean isDependent()>();
if v3 == 0 goto label1;
v4 = specialinvoke v0.<java.util.concurrent.CompletableFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(v1, v2);
return v4;
label1:
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v6 = virtualinvoke v5.<java.util.concurrent.CompletableFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(v1, v2);
return v6;
}
public java.lang.Object join()
{
io.smallrye.context.CompletableFutureWrapper v0;
java.lang.Object v2, v4;
java.util.concurrent.CompletableFuture v3;
boolean v1;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 = specialinvoke v0.<io.smallrye.context.CompletableFutureWrapper: boolean isDependent()>();
if v1 == 0 goto label1;
v2 = specialinvoke v0.<java.util.concurrent.CompletableFuture: java.lang.Object join()>();
return v2;
label1:
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: java.lang.Object join()>();
return v4;
}
public java.lang.Object getNow(java.lang.Object)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.lang.Object v1, v3, v5;
java.util.concurrent.CompletableFuture v4;
boolean v2;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.lang.Object;
v2 = specialinvoke v0.<io.smallrye.context.CompletableFutureWrapper: boolean isDependent()>();
if v2 == 0 goto label1;
v3 = specialinvoke v0.<java.util.concurrent.CompletableFuture: java.lang.Object getNow(java.lang.Object)>(v1);
return v3;
label1:
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.lang.Object getNow(java.lang.Object)>(v1);
return v5;
}
public java.util.concurrent.CompletableFuture toCompletableFuture()
{
io.smallrye.context.CompletableFutureWrapper v0;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
return v0;
}
public java.util.concurrent.CompletableFuture exceptionally(java.util.function.Function)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v7;
java.util.concurrent.CompletableFuture v3, v6, v9;
java.util.function.Function v1, v5;
io.smallrye.context.SmallRyeThreadContext v2, v4;
int v8;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.function.Function;
v2 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v1);
v6 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture exceptionally(java.util.function.Function)>(v5);
v7 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v9 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v6, v7, v8);
return v9;
}
public java.util.concurrent.CompletableFuture handle(java.util.function.BiFunction)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v7;
java.util.function.BiFunction v1, v5;
java.util.concurrent.CompletableFuture v3, v6, v9;
io.smallrye.context.SmallRyeThreadContext v2, v4;
int v8;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.function.BiFunction;
v2 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiFunction contextualFunctionUnlessContextualized(java.util.function.BiFunction)>(v1);
v6 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture handle(java.util.function.BiFunction)>(v5);
v7 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v9 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v6, v7, v8);
return v9;
}
public java.util.concurrent.CompletableFuture handleAsync(java.util.function.BiFunction)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v6, v8;
java.util.function.BiFunction v1, v5;
java.util.concurrent.CompletableFuture v10, v3, v7;
io.smallrye.context.SmallRyeThreadContext v2, v4;
int v9;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.function.BiFunction;
virtualinvoke v0.<io.smallrye.context.CompletableFutureWrapper: void checkDefaultExecutor()>();
v2 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiFunction contextualFunctionUnlessContextualized(java.util.function.BiFunction)>(v1);
v6 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v7 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture handleAsync(java.util.function.BiFunction,java.util.concurrent.Executor)>(v5, v6);
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v10 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v7, v8, v9);
return v10;
}
public java.util.concurrent.CompletableFuture handleAsync(java.util.function.BiFunction, java.util.concurrent.Executor)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v2, v8;
java.util.function.BiFunction v1, v6;
java.util.concurrent.CompletableFuture v10, v4, v7;
io.smallrye.context.SmallRyeThreadContext v3, v5;
int v9;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.function.BiFunction;
v2 := @parameter1: java.util.concurrent.Executor;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiFunction contextualFunctionUnlessContextualized(java.util.function.BiFunction)>(v1);
v7 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture handleAsync(java.util.function.BiFunction,java.util.concurrent.Executor)>(v6, v2);
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v10 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v7, v8, v9);
return v10;
}
public java.util.concurrent.CompletableFuture thenApply(java.util.function.Function)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v7;
java.util.concurrent.CompletableFuture v3, v6, v9;
java.util.function.Function v1, v5;
io.smallrye.context.SmallRyeThreadContext v2, v4;
int v8;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.function.Function;
v2 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v1);
v6 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenApply(java.util.function.Function)>(v5);
v7 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v9 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v6, v7, v8);
return v9;
}
public java.util.concurrent.CompletableFuture thenApplyAsync(java.util.function.Function)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v6, v8;
java.util.concurrent.CompletableFuture v10, v3, v7;
java.util.function.Function v1, v5;
io.smallrye.context.SmallRyeThreadContext v2, v4;
int v9;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.function.Function;
virtualinvoke v0.<io.smallrye.context.CompletableFutureWrapper: void checkDefaultExecutor()>();
v2 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v1);
v6 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v7 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenApplyAsync(java.util.function.Function,java.util.concurrent.Executor)>(v5, v6);
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v10 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v7, v8, v9);
return v10;
}
public java.util.concurrent.CompletableFuture thenApplyAsync(java.util.function.Function, java.util.concurrent.Executor)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v2, v8;
java.util.concurrent.CompletableFuture v10, v4, v7;
java.util.function.Function v1, v6;
io.smallrye.context.SmallRyeThreadContext v3, v5;
int v9;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.function.Function;
v2 := @parameter1: java.util.concurrent.Executor;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v1);
v7 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenApplyAsync(java.util.function.Function,java.util.concurrent.Executor)>(v6, v2);
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v10 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v7, v8, v9);
return v10;
}
public java.util.concurrent.CompletableFuture thenAccept(java.util.function.Consumer)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v7;
java.util.concurrent.CompletableFuture v3, v6, v9;
java.util.function.Consumer v1, v5;
io.smallrye.context.SmallRyeThreadContext v2, v4;
int v8;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.function.Consumer;
v2 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Consumer contextualConsumerUnlessContextualized(java.util.function.Consumer)>(v1);
v6 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenAccept(java.util.function.Consumer)>(v5);
v7 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v9 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v6, v7, v8);
return v9;
}
public java.util.concurrent.CompletableFuture thenAcceptAsync(java.util.function.Consumer)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v6, v8;
java.util.concurrent.CompletableFuture v10, v3, v7;
java.util.function.Consumer v1, v5;
io.smallrye.context.SmallRyeThreadContext v2, v4;
int v9;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.function.Consumer;
virtualinvoke v0.<io.smallrye.context.CompletableFutureWrapper: void checkDefaultExecutor()>();
v2 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Consumer contextualConsumerUnlessContextualized(java.util.function.Consumer)>(v1);
v6 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v7 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenAcceptAsync(java.util.function.Consumer,java.util.concurrent.Executor)>(v5, v6);
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v10 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v7, v8, v9);
return v10;
}
public java.util.concurrent.CompletableFuture thenAcceptAsync(java.util.function.Consumer, java.util.concurrent.Executor)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v2, v8;
java.util.concurrent.CompletableFuture v10, v4, v7;
java.util.function.Consumer v1, v6;
io.smallrye.context.SmallRyeThreadContext v3, v5;
int v9;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.function.Consumer;
v2 := @parameter1: java.util.concurrent.Executor;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Consumer contextualConsumerUnlessContextualized(java.util.function.Consumer)>(v1);
v7 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenAcceptAsync(java.util.function.Consumer,java.util.concurrent.Executor)>(v6, v2);
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v10 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v7, v8, v9);
return v10;
}
public java.util.concurrent.CompletableFuture thenRun(java.lang.Runnable)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v7;
java.util.concurrent.CompletableFuture v3, v6, v9;
java.lang.Runnable v1, v5;
io.smallrye.context.SmallRyeThreadContext v2, v4;
int v8;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.lang.Runnable;
v2 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v1);
v6 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenRun(java.lang.Runnable)>(v5);
v7 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v9 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v6, v7, v8);
return v9;
}
public java.util.concurrent.CompletableFuture thenRunAsync(java.lang.Runnable)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v6, v8;
java.util.concurrent.CompletableFuture v10, v3, v7;
java.lang.Runnable v1, v5;
io.smallrye.context.SmallRyeThreadContext v2, v4;
int v9;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.lang.Runnable;
virtualinvoke v0.<io.smallrye.context.CompletableFutureWrapper: void checkDefaultExecutor()>();
v2 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v1);
v6 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v7 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenRunAsync(java.lang.Runnable,java.util.concurrent.Executor)>(v5, v6);
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v10 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v7, v8, v9);
return v10;
}
public java.util.concurrent.CompletableFuture thenRunAsync(java.lang.Runnable, java.util.concurrent.Executor)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v2, v8;
java.util.concurrent.CompletableFuture v10, v4, v7;
java.lang.Runnable v1, v6;
io.smallrye.context.SmallRyeThreadContext v3, v5;
int v9;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: java.util.concurrent.Executor;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v1);
v7 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenRunAsync(java.lang.Runnable,java.util.concurrent.Executor)>(v6, v2);
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v10 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v7, v8, v9);
return v10;
}
public java.util.concurrent.CompletableFuture thenCombine(java.util.concurrent.CompletionStage, java.util.function.BiFunction)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v8;
java.util.function.BiFunction v2, v6;
java.util.concurrent.CompletableFuture v10, v4, v7;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.SmallRyeThreadContext v3, v5;
int v9;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.BiFunction;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiFunction contextualFunctionUnlessContextualized(java.util.function.BiFunction)>(v2);
v7 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenCombine(java.util.concurrent.CompletionStage,java.util.function.BiFunction)>(v1, v6);
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v10 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v7, v8, v9);
return v10;
}
public java.util.concurrent.CompletableFuture thenCombineAsync(java.util.concurrent.CompletionStage, java.util.function.BiFunction)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v7, v9;
java.util.function.BiFunction v2, v6;
java.util.concurrent.CompletableFuture v11, v4, v8;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.SmallRyeThreadContext v3, v5;
int v10;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.BiFunction;
virtualinvoke v0.<io.smallrye.context.CompletableFutureWrapper: void checkDefaultExecutor()>();
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiFunction contextualFunctionUnlessContextualized(java.util.function.BiFunction)>(v2);
v7 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v8 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenCombineAsync(java.util.concurrent.CompletionStage,java.util.function.BiFunction,java.util.concurrent.Executor)>(v1, v6, v7);
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v10 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v11 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v8, v9, v10);
return v11;
}
public java.util.concurrent.CompletableFuture thenCombineAsync(java.util.concurrent.CompletionStage, java.util.function.BiFunction, java.util.concurrent.Executor)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v3, v9;
java.util.function.BiFunction v2, v7;
java.util.concurrent.CompletableFuture v11, v5, v8;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.SmallRyeThreadContext v4, v6;
int v10;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.BiFunction;
v3 := @parameter2: java.util.concurrent.Executor;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v6 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v7 = virtualinvoke v6.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiFunction contextualFunctionUnlessContextualized(java.util.function.BiFunction)>(v2);
v8 = virtualinvoke v5.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenCombineAsync(java.util.concurrent.CompletionStage,java.util.function.BiFunction,java.util.concurrent.Executor)>(v1, v7, v3);
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v10 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v11 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v8, v9, v10);
return v11;
}
public java.util.concurrent.CompletableFuture thenAcceptBoth(java.util.concurrent.CompletionStage, java.util.function.BiConsumer)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v8;
java.util.concurrent.CompletableFuture v10, v4, v7;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.SmallRyeThreadContext v3, v5;
int v9;
java.util.function.BiConsumer v2, v6;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.BiConsumer;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiConsumer contextualConsumerUnlessContextualized(java.util.function.BiConsumer)>(v2);
v7 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenAcceptBoth(java.util.concurrent.CompletionStage,java.util.function.BiConsumer)>(v1, v6);
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v10 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v7, v8, v9);
return v10;
}
public java.util.concurrent.CompletableFuture thenAcceptBothAsync(java.util.concurrent.CompletionStage, java.util.function.BiConsumer)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v7, v9;
java.util.concurrent.CompletableFuture v11, v4, v8;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.SmallRyeThreadContext v3, v5;
int v10;
java.util.function.BiConsumer v2, v6;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.BiConsumer;
virtualinvoke v0.<io.smallrye.context.CompletableFutureWrapper: void checkDefaultExecutor()>();
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiConsumer contextualConsumerUnlessContextualized(java.util.function.BiConsumer)>(v2);
v7 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v8 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenAcceptBothAsync(java.util.concurrent.CompletionStage,java.util.function.BiConsumer,java.util.concurrent.Executor)>(v1, v6, v7);
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v10 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v11 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v8, v9, v10);
return v11;
}
public java.util.concurrent.CompletableFuture thenAcceptBothAsync(java.util.concurrent.CompletionStage, java.util.function.BiConsumer, java.util.concurrent.Executor)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v3, v9;
java.util.concurrent.CompletableFuture v11, v5, v8;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.SmallRyeThreadContext v4, v6;
int v10;
java.util.function.BiConsumer v2, v7;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.BiConsumer;
v3 := @parameter2: java.util.concurrent.Executor;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v6 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v7 = virtualinvoke v6.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiConsumer contextualConsumerUnlessContextualized(java.util.function.BiConsumer)>(v2);
v8 = virtualinvoke v5.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenAcceptBothAsync(java.util.concurrent.CompletionStage,java.util.function.BiConsumer,java.util.concurrent.Executor)>(v1, v7, v3);
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v10 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v11 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v8, v9, v10);
return v11;
}
public java.util.concurrent.CompletableFuture runAfterBoth(java.util.concurrent.CompletionStage, java.lang.Runnable)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v8;
java.util.concurrent.CompletableFuture v10, v4, v7;
java.lang.Runnable v2, v6;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.SmallRyeThreadContext v3, v5;
int v9;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.lang.Runnable;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v2);
v7 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAfterBoth(java.util.concurrent.CompletionStage,java.lang.Runnable)>(v1, v6);
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v10 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v7, v8, v9);
return v10;
}
public java.util.concurrent.CompletableFuture runAfterBothAsync(java.util.concurrent.CompletionStage, java.lang.Runnable)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v7, v9;
java.util.concurrent.CompletableFuture v11, v4, v8;
java.lang.Runnable v2, v6;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.SmallRyeThreadContext v3, v5;
int v10;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.lang.Runnable;
virtualinvoke v0.<io.smallrye.context.CompletableFutureWrapper: void checkDefaultExecutor()>();
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v2);
v7 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v8 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAfterBothAsync(java.util.concurrent.CompletionStage,java.lang.Runnable,java.util.concurrent.Executor)>(v1, v6, v7);
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v10 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v11 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v8, v9, v10);
return v11;
}
public java.util.concurrent.CompletableFuture runAfterBothAsync(java.util.concurrent.CompletionStage, java.lang.Runnable, java.util.concurrent.Executor)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v3, v9;
java.util.concurrent.CompletableFuture v11, v5, v8;
java.lang.Runnable v2, v7;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.SmallRyeThreadContext v4, v6;
int v10;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.lang.Runnable;
v3 := @parameter2: java.util.concurrent.Executor;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v6 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v7 = virtualinvoke v6.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v2);
v8 = virtualinvoke v5.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAfterBothAsync(java.util.concurrent.CompletionStage,java.lang.Runnable,java.util.concurrent.Executor)>(v1, v7, v3);
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v10 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v11 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v8, v9, v10);
return v11;
}
public java.util.concurrent.CompletableFuture applyToEither(java.util.concurrent.CompletionStage, java.util.function.Function)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v8;
java.util.concurrent.CompletableFuture v10, v4, v7;
java.util.function.Function v2, v6;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.SmallRyeThreadContext v3, v5;
int v9;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.Function;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v2);
v7 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture applyToEither(java.util.concurrent.CompletionStage,java.util.function.Function)>(v1, v6);
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v10 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v7, v8, v9);
return v10;
}
public java.util.concurrent.CompletableFuture applyToEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Function)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v7, v9;
java.util.concurrent.CompletableFuture v11, v4, v8;
java.util.function.Function v2, v6;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.SmallRyeThreadContext v3, v5;
int v10;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.Function;
virtualinvoke v0.<io.smallrye.context.CompletableFutureWrapper: void checkDefaultExecutor()>();
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v2);
v7 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v8 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture applyToEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Function,java.util.concurrent.Executor)>(v1, v6, v7);
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v10 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v11 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v8, v9, v10);
return v11;
}
public java.util.concurrent.CompletableFuture applyToEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Function, java.util.concurrent.Executor)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v3, v9;
java.util.concurrent.CompletableFuture v11, v5, v8;
java.util.function.Function v2, v7;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.SmallRyeThreadContext v4, v6;
int v10;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.Function;
v3 := @parameter2: java.util.concurrent.Executor;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v6 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v7 = virtualinvoke v6.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v2);
v8 = virtualinvoke v5.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture applyToEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Function,java.util.concurrent.Executor)>(v1, v7, v3);
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v10 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v11 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v8, v9, v10);
return v11;
}
public java.util.concurrent.CompletableFuture acceptEither(java.util.concurrent.CompletionStage, java.util.function.Consumer)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v8;
java.util.concurrent.CompletableFuture v10, v4, v7;
java.util.function.Consumer v2, v6;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.SmallRyeThreadContext v3, v5;
int v9;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.Consumer;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Consumer contextualConsumerUnlessContextualized(java.util.function.Consumer)>(v2);
v7 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture acceptEither(java.util.concurrent.CompletionStage,java.util.function.Consumer)>(v1, v6);
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v10 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v7, v8, v9);
return v10;
}
public java.util.concurrent.CompletableFuture acceptEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Consumer)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v7, v9;
java.util.concurrent.CompletableFuture v11, v4, v8;
java.util.function.Consumer v2, v6;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.SmallRyeThreadContext v3, v5;
int v10;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.Consumer;
virtualinvoke v0.<io.smallrye.context.CompletableFutureWrapper: void checkDefaultExecutor()>();
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Consumer contextualConsumerUnlessContextualized(java.util.function.Consumer)>(v2);
v7 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v8 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture acceptEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Consumer,java.util.concurrent.Executor)>(v1, v6, v7);
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v10 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v11 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v8, v9, v10);
return v11;
}
public java.util.concurrent.CompletableFuture acceptEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Consumer, java.util.concurrent.Executor)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v3, v9;
java.util.concurrent.CompletableFuture v11, v5, v8;
java.util.function.Consumer v2, v7;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.SmallRyeThreadContext v4, v6;
int v10;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.Consumer;
v3 := @parameter2: java.util.concurrent.Executor;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v6 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v7 = virtualinvoke v6.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Consumer contextualConsumerUnlessContextualized(java.util.function.Consumer)>(v2);
v8 = virtualinvoke v5.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture acceptEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Consumer,java.util.concurrent.Executor)>(v1, v7, v3);
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v10 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v11 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v8, v9, v10);
return v11;
}
public java.util.concurrent.CompletableFuture runAfterEither(java.util.concurrent.CompletionStage, java.lang.Runnable)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v8;
java.util.concurrent.CompletableFuture v10, v4, v7;
java.lang.Runnable v2, v6;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.SmallRyeThreadContext v3, v5;
int v9;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.lang.Runnable;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v2);
v7 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAfterEither(java.util.concurrent.CompletionStage,java.lang.Runnable)>(v1, v6);
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v10 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v7, v8, v9);
return v10;
}
public java.util.concurrent.CompletableFuture runAfterEitherAsync(java.util.concurrent.CompletionStage, java.lang.Runnable)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v7, v9;
java.util.concurrent.CompletableFuture v11, v4, v8;
java.lang.Runnable v2, v6;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.SmallRyeThreadContext v3, v5;
int v10;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.lang.Runnable;
virtualinvoke v0.<io.smallrye.context.CompletableFutureWrapper: void checkDefaultExecutor()>();
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v2);
v7 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v8 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAfterEitherAsync(java.util.concurrent.CompletionStage,java.lang.Runnable,java.util.concurrent.Executor)>(v1, v6, v7);
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v10 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v11 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v8, v9, v10);
return v11;
}
public java.util.concurrent.CompletableFuture runAfterEitherAsync(java.util.concurrent.CompletionStage, java.lang.Runnable, java.util.concurrent.Executor)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v3, v9;
java.util.concurrent.CompletableFuture v11, v5, v8;
java.lang.Runnable v2, v7;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.SmallRyeThreadContext v4, v6;
int v10;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.lang.Runnable;
v3 := @parameter2: java.util.concurrent.Executor;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v6 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v7 = virtualinvoke v6.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v2);
v8 = virtualinvoke v5.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAfterEitherAsync(java.util.concurrent.CompletionStage,java.lang.Runnable,java.util.concurrent.Executor)>(v1, v7, v3);
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v10 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v11 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v8, v9, v10);
return v11;
}
public java.util.concurrent.CompletableFuture thenCompose(java.util.function.Function)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v7;
java.util.concurrent.CompletableFuture v3, v6, v9;
java.util.function.Function v1, v5;
io.smallrye.context.SmallRyeThreadContext v2, v4;
int v8;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.function.Function;
v2 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v1);
v6 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenCompose(java.util.function.Function)>(v5);
v7 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v9 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v6, v7, v8);
return v9;
}
public java.util.concurrent.CompletableFuture thenComposeAsync(java.util.function.Function)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v6, v8;
java.util.concurrent.CompletableFuture v10, v3, v7;
java.util.function.Function v1, v5;
io.smallrye.context.SmallRyeThreadContext v2, v4;
int v9;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.function.Function;
virtualinvoke v0.<io.smallrye.context.CompletableFutureWrapper: void checkDefaultExecutor()>();
v2 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v1);
v6 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v7 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenComposeAsync(java.util.function.Function,java.util.concurrent.Executor)>(v5, v6);
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v10 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v7, v8, v9);
return v10;
}
public java.util.concurrent.CompletableFuture thenComposeAsync(java.util.function.Function, java.util.concurrent.Executor)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v2, v8;
java.util.concurrent.CompletableFuture v10, v4, v7;
java.util.function.Function v1, v6;
io.smallrye.context.SmallRyeThreadContext v3, v5;
int v9;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.function.Function;
v2 := @parameter1: java.util.concurrent.Executor;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v1);
v7 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenComposeAsync(java.util.function.Function,java.util.concurrent.Executor)>(v6, v2);
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v10 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v7, v8, v9);
return v10;
}
public java.util.concurrent.CompletableFuture whenComplete(java.util.function.BiConsumer)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v7;
java.util.concurrent.CompletableFuture v3, v6, v9;
io.smallrye.context.SmallRyeThreadContext v2, v4;
int v8;
java.util.function.BiConsumer v1, v5;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.function.BiConsumer;
v2 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiConsumer contextualConsumerUnlessContextualized(java.util.function.BiConsumer)>(v1);
v6 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture whenComplete(java.util.function.BiConsumer)>(v5);
v7 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v9 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v6, v7, v8);
return v9;
}
public java.util.concurrent.CompletableFuture whenCompleteAsync(java.util.function.BiConsumer)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v6, v8;
java.util.concurrent.CompletableFuture v10, v3, v7;
io.smallrye.context.SmallRyeThreadContext v2, v4;
int v9;
java.util.function.BiConsumer v1, v5;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.function.BiConsumer;
virtualinvoke v0.<io.smallrye.context.CompletableFutureWrapper: void checkDefaultExecutor()>();
v2 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiConsumer contextualConsumerUnlessContextualized(java.util.function.BiConsumer)>(v1);
v6 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v7 = virtualinvoke v3.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture whenCompleteAsync(java.util.function.BiConsumer,java.util.concurrent.Executor)>(v5, v6);
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v10 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v7, v8, v9);
return v10;
}
public java.util.concurrent.CompletableFuture whenCompleteAsync(java.util.function.BiConsumer, java.util.concurrent.Executor)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.util.concurrent.Executor v2, v8;
java.util.concurrent.CompletableFuture v10, v4, v7;
io.smallrye.context.SmallRyeThreadContext v3, v5;
int v9;
java.util.function.BiConsumer v1, v6;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.util.function.BiConsumer;
v2 := @parameter1: java.util.concurrent.Executor;
v3 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v5 = v0.<io.smallrye.context.CompletableFutureWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiConsumer contextualConsumerUnlessContextualized(java.util.function.BiConsumer)>(v1);
v7 = virtualinvoke v4.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture whenCompleteAsync(java.util.function.BiConsumer,java.util.concurrent.Executor)>(v6, v2);
v8 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.Executor executor>;
v9 = v0.<io.smallrye.context.CompletableFutureWrapper: int flags>;
v10 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v7, v8, v9);
return v10;
}
public java.lang.String toString()
{
java.util.concurrent.CompletableFuture v1;
java.lang.String v2;
io.smallrye.context.CompletableFutureWrapper v0;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v2 = virtualinvoke v1.<java.util.concurrent.CompletableFuture: java.lang.String toString()>();
return v2;
}
public int hashCode()
{
int v2;
java.util.concurrent.CompletableFuture v1;
io.smallrye.context.CompletableFutureWrapper v0;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public boolean equals(java.lang.Object)
{
io.smallrye.context.CompletableFutureWrapper v0;
java.lang.Object v1;
java.util.concurrent.CompletableFuture v2;
boolean v3;
v0 := @this: io.smallrye.context.CompletableFutureWrapper;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.context.CompletableFutureWrapper: java.util.concurrent.CompletableFuture f>;
v3 = virtualinvoke v2.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
return v3;
}
}