public class io.smallrye.context.SmallRyeManagedExecutor extends java.lang.Object implements org.eclipse.microprofile.context.ManagedExecutor
{
private static final java.lang.String UNI_APPLY;
private final io.smallrye.context.SmallRyeThreadContext threadContext;
private final int maxAsync;
private final int maxQueued;
private final java.lang.String injectionPointName;
private final java.util.concurrent.ExecutorService executor;
private final java.util.concurrent.Executor noPropagationExecutor;
public static java.util.concurrent.ExecutorService newThreadPoolExecutor(int, int)
{
java.util.concurrent.ThreadPoolExecutor v2;
java.lang.Runtime v4, v7;
java.util.concurrent.LinkedBlockingQueue v10;
java.util.concurrent.TimeUnit v9;
java.util.concurrent.ThreadPoolExecutor$AbortPolicy v13;
int v0, v1, v11, v12, v3, v5, v6, v8;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 = new java.util.concurrent.ThreadPoolExecutor;
v3 = (int) -1;
if v0 != v3 goto label1;
v4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
v5 = virtualinvoke v4.<java.lang.Runtime: int availableProcessors()>();
goto label2;
label1:
v5 = v0;
label2:
v6 = (int) -1;
if v0 != v6 goto label3;
v7 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
v8 = virtualinvoke v7.<java.lang.Runtime: int availableProcessors()>();
goto label4;
label3:
v8 = v0;
label4:
v9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v10 = new java.util.concurrent.LinkedBlockingQueue;
v11 = (int) -1;
if v1 != v11 goto label5;
v12 = 2147483647;
goto label6;
label5:
v12 = v1;
label6:
specialinvoke v10.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(v12);
v13 = new java.util.concurrent.ThreadPoolExecutor$AbortPolicy;
specialinvoke v13.<java.util.concurrent.ThreadPoolExecutor$AbortPolicy: void <init>()>();
specialinvoke v2.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.RejectedExecutionHandler)>(v5, v8, 5000L, v9, v10, v13);
virtualinvoke v2.<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(1);
return v2;
}
public void <init>(int, int, io.smallrye.context.SmallRyeThreadContext, java.util.concurrent.ExecutorService, java.lang.String)
{
io.smallrye.context.SmallRyeThreadContext v3;
io.smallrye.context.SmallRyeManagedExecutor v0;
int v1, v2;
io.smallrye.context.SmallRyeManagedExecutor$NoPropagationExecutor v6;
java.lang.String v5;
java.util.concurrent.ExecutorService v4;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: io.smallrye.context.SmallRyeThreadContext;
v4 := @parameter3: java.util.concurrent.ExecutorService;
v5 := @parameter4: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v6 = new io.smallrye.context.SmallRyeManagedExecutor$NoPropagationExecutor;
specialinvoke v6.<io.smallrye.context.SmallRyeManagedExecutor$NoPropagationExecutor: void <init>(io.smallrye.context.SmallRyeManagedExecutor)>(v0);
v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.Executor noPropagationExecutor> = v6;
v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext> = v3;
v0.<io.smallrye.context.SmallRyeManagedExecutor: int maxAsync> = v1;
v0.<io.smallrye.context.SmallRyeManagedExecutor: int maxQueued> = v2;
v0.<io.smallrye.context.SmallRyeManagedExecutor: java.lang.String injectionPointName> = v5;
v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.ExecutorService executor> = v4;
return;
}
public void shutdown()
{
java.util.concurrent.ExecutorService v1;
io.smallrye.context.SmallRyeManagedExecutor v0;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.ExecutorService executor>;
interfaceinvoke v1.<java.util.concurrent.ExecutorService: void shutdown()>();
return;
}
public java.util.List shutdownNow()
{
java.util.List v2;
java.util.concurrent.ExecutorService v1;
io.smallrye.context.SmallRyeManagedExecutor v0;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.ExecutorService executor>;
v2 = interfaceinvoke v1.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();
return v2;
}
public boolean isShutdown()
{
java.util.concurrent.ExecutorService v1;
boolean v2;
io.smallrye.context.SmallRyeManagedExecutor v0;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.ExecutorService executor>;
v2 = interfaceinvoke v1.<java.util.concurrent.ExecutorService: boolean isShutdown()>();
return v2;
}
public boolean isTerminated()
{
java.util.concurrent.ExecutorService v1;
boolean v2;
io.smallrye.context.SmallRyeManagedExecutor v0;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.ExecutorService executor>;
v2 = interfaceinvoke v1.<java.util.concurrent.ExecutorService: boolean isTerminated()>();
return v2;
}
public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
{
java.util.concurrent.TimeUnit v2;
io.smallrye.context.SmallRyeManagedExecutor v0;
long v1;
java.util.concurrent.ExecutorService v3;
boolean v4;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
v3 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.ExecutorService executor>;
v4 = interfaceinvoke v3.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(v1, v2);
return v4;
}
public java.util.concurrent.Future submit(java.util.concurrent.Callable)
{
java.util.concurrent.Future v5;
io.smallrye.context.SmallRyeThreadContext v3;
io.smallrye.context.SmallRyeManagedExecutor v0;
java.util.concurrent.Callable v1, v4;
java.util.concurrent.ExecutorService v2;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: java.util.concurrent.Callable;
v2 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.ExecutorService executor>;
v3 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v4 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.Callable contextualCallableUnlessContextualized(java.util.concurrent.Callable)>(v1);
v5 = interfaceinvoke v2.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(v4);
return v5;
}
public java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object)
{
java.util.concurrent.Future v6;
io.smallrye.context.SmallRyeThreadContext v4;
io.smallrye.context.SmallRyeManagedExecutor v0;
java.lang.Object v2;
java.lang.Runnable v1, v5;
java.util.concurrent.ExecutorService v3;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: java.lang.Object;
v3 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.ExecutorService executor>;
v4 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v1);
v6 = interfaceinvoke v3.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)>(v5, v2);
return v6;
}
public java.util.concurrent.Future submit(java.lang.Runnable)
{
java.util.concurrent.Future v5;
io.smallrye.context.SmallRyeThreadContext v3;
io.smallrye.context.SmallRyeManagedExecutor v0;
java.lang.Runnable v1, v4;
java.util.concurrent.ExecutorService v2;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.ExecutorService executor>;
v3 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v4 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v1);
v5 = interfaceinvoke v2.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>(v4);
return v5;
}
public java.util.List invokeAll(java.util.Collection) throws java.lang.InterruptedException
{
java.util.Iterator v4;
java.util.Collection v1;
java.util.concurrent.Callable v8;
java.util.ArrayList v2;
java.util.List v10;
io.smallrye.context.SmallRyeThreadContext v7;
io.smallrye.context.SmallRyeManagedExecutor v0;
int v3;
java.lang.Object v6;
java.util.concurrent.ExecutorService v9;
boolean v5;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: java.util.Collection;
v2 = new java.util.ArrayList;
v3 = interfaceinvoke v1.<java.util.Collection: int size()>();
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v3);
v4 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v8 = virtualinvoke v7.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.Callable contextualCallableUnlessContextualized(java.util.concurrent.Callable)>(v6);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v8);
goto label1;
label2:
v9 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.ExecutorService executor>;
v10 = interfaceinvoke v9.<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection)>(v2);
return v10;
}
public java.util.List invokeAll(java.util.Collection, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
{
java.util.Iterator v6;
java.util.Collection v1;
java.util.concurrent.Callable v10;
long v2;
java.util.ArrayList v4;
java.util.concurrent.TimeUnit v3;
java.util.List v12;
io.smallrye.context.SmallRyeThreadContext v9;
io.smallrye.context.SmallRyeManagedExecutor v0;
int v5;
java.lang.Object v8;
java.util.concurrent.ExecutorService v11;
boolean v7;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: java.util.Collection;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 = new java.util.ArrayList;
v5 = interfaceinvoke v1.<java.util.Collection: int size()>();
specialinvoke v4.<java.util.ArrayList: void <init>(int)>(v5);
v6 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v10 = virtualinvoke v9.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.Callable contextualCallableUnlessContextualized(java.util.concurrent.Callable)>(v8);
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v10);
goto label1;
label2:
v11 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.ExecutorService executor>;
v12 = interfaceinvoke v11.<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>(v4, v2, v3);
return v12;
}
public java.lang.Object invokeAny(java.util.Collection) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
{
java.util.Iterator v4;
java.util.Collection v1;
java.util.concurrent.Callable v8;
java.util.ArrayList v2;
io.smallrye.context.SmallRyeThreadContext v7;
io.smallrye.context.SmallRyeManagedExecutor v0;
int v3;
java.lang.Object v10, v6;
java.util.concurrent.ExecutorService v9;
boolean v5;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: java.util.Collection;
v2 = new java.util.ArrayList;
v3 = interfaceinvoke v1.<java.util.Collection: int size()>();
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v3);
v4 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v8 = virtualinvoke v7.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.Callable contextualCallableUnlessContextualized(java.util.concurrent.Callable)>(v6);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v8);
goto label1;
label2:
v9 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.ExecutorService executor>;
v10 = interfaceinvoke v9.<java.util.concurrent.ExecutorService: java.lang.Object invokeAny(java.util.Collection)>(v2);
return v10;
}
public java.lang.Object invokeAny(java.util.Collection, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
{
java.util.Iterator v6;
java.util.Collection v1;
java.util.concurrent.Callable v10;
long v2;
java.util.ArrayList v4;
java.util.concurrent.TimeUnit v3;
io.smallrye.context.SmallRyeThreadContext v9;
io.smallrye.context.SmallRyeManagedExecutor v0;
int v5;
java.lang.Object v12, v8;
java.util.concurrent.ExecutorService v11;
boolean v7;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: java.util.Collection;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 = new java.util.ArrayList;
v5 = interfaceinvoke v1.<java.util.Collection: int size()>();
specialinvoke v4.<java.util.ArrayList: void <init>(int)>(v5);
v6 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v10 = virtualinvoke v9.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.Callable contextualCallableUnlessContextualized(java.util.concurrent.Callable)>(v8);
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v10);
goto label1;
label2:
v11 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.ExecutorService executor>;
v12 = interfaceinvoke v11.<java.util.concurrent.ExecutorService: java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>(v4, v2, v3);
return v12;
}
public void execute(java.lang.Runnable)
{
java.lang.Runnable v1, v8;
io.smallrye.context.SmallRyeThreadContext v7;
io.smallrye.context.SmallRyeManagedExecutor v0;
java.lang.Class v3;
java.lang.String v2, v4;
java.util.concurrent.ExecutorService v6;
boolean v5;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 = "java.util.concurrent.CompletableFuture$UniApply";
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
v5 = virtualinvoke v2.<java.lang.String: boolean equals(java.lang.Object)>(v4);
if v5 == 0 goto label1;
specialinvoke v0.<io.smallrye.context.SmallRyeManagedExecutor: void executeWithoutPropagation(java.lang.Runnable)>(v1);
return;
label1:
v6 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.ExecutorService executor>;
v7 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v8 = virtualinvoke v7.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v1);
interfaceinvoke v6.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(v8);
return;
}
private void executeWithoutPropagation(java.lang.Runnable)
{
java.lang.Runnable v1;
java.util.concurrent.ExecutorService v2;
io.smallrye.context.SmallRyeManagedExecutor v0;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.ExecutorService executor>;
interfaceinvoke v2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(v1);
return;
}
public java.util.concurrent.CompletableFuture completedFuture(java.lang.Object)
{
io.smallrye.context.SmallRyeThreadContext v2;
io.smallrye.context.SmallRyeManagedExecutor v0;
java.lang.Object v1;
java.util.concurrent.CompletableFuture v3, v4;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v3 = staticinvoke <java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture completedFuture(java.lang.Object)>(v1);
v4 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v3, v0, 0);
return v4;
}
public java.util.concurrent.CompletionStage completedStage(java.lang.Object)
{
java.lang.Object v1;
java.util.concurrent.CompletableFuture v2;
io.smallrye.context.SmallRyeManagedExecutor v0;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.CompletableFuture completedFuture(java.lang.Object)>(v1);
return v2;
}
public java.util.concurrent.CompletableFuture failedFuture(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.context.SmallRyeThreadContext v3;
io.smallrye.context.SmallRyeManagedExecutor v0;
java.util.concurrent.CompletableFuture v2, v4;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: java.lang.Throwable;
v2 = new java.util.concurrent.CompletableFuture;
specialinvoke v2.<java.util.concurrent.CompletableFuture: void <init>()>();
virtualinvoke v2.<java.util.concurrent.CompletableFuture: boolean completeExceptionally(java.lang.Throwable)>(v1);
v3 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v4 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v2, v0, 0);
return v4;
}
public java.util.concurrent.CompletionStage failedStage(java.lang.Throwable)
{
java.lang.Throwable v1;
java.util.concurrent.CompletableFuture v2;
io.smallrye.context.SmallRyeManagedExecutor v0;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: java.lang.Throwable;
v2 = virtualinvoke v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.CompletableFuture failedFuture(java.lang.Throwable)>(v1);
return v2;
}
public java.util.concurrent.CompletableFuture runAsync(java.lang.Runnable)
{
java.util.concurrent.Executor v5;
java.util.concurrent.CompletableFuture v6, v7;
java.lang.Runnable v1, v4;
io.smallrye.context.SmallRyeThreadContext v2, v3;
io.smallrye.context.SmallRyeManagedExecutor v0;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v3 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v4 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v1);
v5 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.Executor noPropagationExecutor>;
v6 = staticinvoke <java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAsync(java.lang.Runnable,java.util.concurrent.Executor)>(v4, v5);
v7 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v6, v0, 0);
return v7;
}
public java.util.concurrent.CompletableFuture supplyAsync(java.util.function.Supplier)
{
java.util.concurrent.Executor v5;
java.util.concurrent.CompletableFuture v6, v7;
java.util.function.Supplier v1, v4;
io.smallrye.context.SmallRyeThreadContext v2, v3;
io.smallrye.context.SmallRyeManagedExecutor v0;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: java.util.function.Supplier;
v2 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v3 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v4 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Supplier contextualSupplierUnlessContextualized(java.util.function.Supplier)>(v1);
v5 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.util.concurrent.Executor noPropagationExecutor>;
v6 = staticinvoke <java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture supplyAsync(java.util.function.Supplier,java.util.concurrent.Executor)>(v4, v5);
v7 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v6, v0, 0);
return v7;
}
public java.util.concurrent.CompletableFuture newIncompleteFuture()
{
io.smallrye.context.SmallRyeThreadContext v2;
io.smallrye.context.SmallRyeManagedExecutor v0;
java.util.concurrent.CompletableFuture v1, v3;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 = new java.util.concurrent.CompletableFuture;
specialinvoke v1.<java.util.concurrent.CompletableFuture: void <init>()>();
v2 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v3 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v1, v0, 0);
return v3;
}
public java.lang.String toString()
{
int v6, v9;
java.lang.String v25, v28, v29, v3;
java.util.Set v14, v19, v24;
io.smallrye.context.impl.ThreadContextProviderPlan v13, v18, v23;
io.smallrye.context.SmallRyeThreadContext v12, v17, v22;
io.smallrye.context.SmallRyeManagedExecutor v0;
java.lang.Class v2;
java.lang.StringBuilder v1, v10, v11, v15, v16, v20, v21, v26, v27, v4, v5, v7, v8;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = class "Lio/smallrye/context/SmallRyeManagedExecutor;";
v3 = virtualinvoke v2.<java.lang.Class: java.lang.String getName()>();
v4 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v3);
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
v5 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("with maxAsync: ");
v6 = v0.<io.smallrye.context.SmallRyeManagedExecutor: int maxAsync>;
v7 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v6);
virtualinvoke v7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
v8 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("with maxQueued: ");
v9 = v0.<io.smallrye.context.SmallRyeManagedExecutor: int maxQueued>;
v10 = virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v9);
virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
v11 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("with cleared contexts: ");
v12 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v13 = virtualinvoke v12.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan getPlan()>();
v14 = v13.<io.smallrye.context.impl.ThreadContextProviderPlan: java.util.Set clearedProviders>;
v15 = virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v14);
virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
v16 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("with propagated contexts: ");
v17 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v18 = virtualinvoke v17.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan getPlan()>();
v19 = v18.<io.smallrye.context.impl.ThreadContextProviderPlan: java.util.Set propagatedProviders>;
v20 = virtualinvoke v16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v19);
virtualinvoke v20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
v21 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("with unchanged contexts: ");
v22 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v23 = virtualinvoke v22.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan getPlan()>();
v24 = v23.<io.smallrye.context.impl.ThreadContextProviderPlan: java.util.Set unchangedProviders>;
virtualinvoke v21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v24);
v25 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.lang.String injectionPointName>;
if v25 == null goto label1;
v26 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
v27 = virtualinvoke v26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with injection point name: ");
v28 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.lang.String injectionPointName>;
virtualinvoke v27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v28);
label1:
v29 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v29;
}
public io.smallrye.context.impl.ThreadContextProviderPlan getThreadContextProviderPlan()
{
io.smallrye.context.impl.ThreadContextProviderPlan v2;
io.smallrye.context.SmallRyeThreadContext v1;
io.smallrye.context.SmallRyeManagedExecutor v0;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v2 = virtualinvoke v1.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan getPlan()>();
return v2;
}
public int getMaxAsync()
{
int v1;
io.smallrye.context.SmallRyeManagedExecutor v0;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 = v0.<io.smallrye.context.SmallRyeManagedExecutor: int maxAsync>;
return v1;
}
public int getMaxQueued()
{
int v1;
io.smallrye.context.SmallRyeManagedExecutor v0;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 = v0.<io.smallrye.context.SmallRyeManagedExecutor: int maxQueued>;
return v1;
}
public java.lang.String getInjectionPointName()
{
java.lang.String v1;
io.smallrye.context.SmallRyeManagedExecutor v0;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 = v0.<io.smallrye.context.SmallRyeManagedExecutor: java.lang.String injectionPointName>;
return v1;
}
public static io.smallrye.context.SmallRyeManagedExecutor$Builder builder()
{
io.smallrye.context.SmallRyeManagedExecutor$Builder v2;
io.smallrye.context.SmallRyeContextManager v1;
io.smallrye.context.SmallRyeContextManagerProvider v0;
v0 = staticinvoke <io.smallrye.context.SmallRyeContextManagerProvider: io.smallrye.context.SmallRyeContextManagerProvider instance()>();
v1 = virtualinvoke v0.<io.smallrye.context.SmallRyeContextManagerProvider: io.smallrye.context.SmallRyeContextManager getContextManager()>();
v2 = virtualinvoke v1.<io.smallrye.context.SmallRyeContextManager: io.smallrye.context.SmallRyeManagedExecutor$Builder newManagedExecutorBuilder()>();
return v2;
}
public java.util.concurrent.CompletableFuture copy(java.util.concurrent.CompletableFuture)
{
io.smallrye.context.SmallRyeThreadContext v2;
io.smallrye.context.SmallRyeManagedExecutor v0;
java.util.concurrent.CompletableFuture v1, v3;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: java.util.concurrent.CompletableFuture;
v2 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v3 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v1, v0, 0);
return v3;
}
public java.util.concurrent.CompletionStage copy(java.util.concurrent.CompletionStage)
{
java.util.concurrent.CompletionStage v1, v3;
io.smallrye.context.SmallRyeThreadContext v2;
io.smallrye.context.SmallRyeManagedExecutor v0;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
v3 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage,java.util.concurrent.Executor)>(v1, v0);
return v3;
}
public io.smallrye.context.SmallRyeThreadContext getThreadContext()
{
io.smallrye.context.SmallRyeThreadContext v1;
io.smallrye.context.SmallRyeManagedExecutor v0;
v0 := @this: io.smallrye.context.SmallRyeManagedExecutor;
v1 = v0.<io.smallrye.context.SmallRyeManagedExecutor: io.smallrye.context.SmallRyeThreadContext threadContext>;
return v1;
}
}