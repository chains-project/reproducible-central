public class io.smallrye.context.impl.JdkSpecificImpl extends java.lang.Object implements io.smallrye.context.JdkSpecific$Contract
{
public void <init>()
{
io.smallrye.context.impl.JdkSpecificImpl v0;
v0 := @this: io.smallrye.context.impl.JdkSpecificImpl;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.util.concurrent.CompletionStage newCompletionStageWrapper(io.smallrye.context.SmallRyeThreadContext, java.util.concurrent.CompletionStage, java.util.concurrent.Executor)
{
java.util.concurrent.CompletionStage v2;
io.smallrye.context.CompletionStageWrapper v4;
java.util.concurrent.Executor v3;
io.smallrye.context.SmallRyeThreadContext v1;
io.smallrye.context.impl.JdkSpecificImpl v0;
v0 := @this: io.smallrye.context.impl.JdkSpecificImpl;
v1 := @parameter0: io.smallrye.context.SmallRyeThreadContext;
v2 := @parameter1: java.util.concurrent.CompletionStage;
v3 := @parameter2: java.util.concurrent.Executor;
v4 = new io.smallrye.context.CompletionStageWrapper;
specialinvoke v4.<io.smallrye.context.CompletionStageWrapper: void <init>(io.smallrye.context.SmallRyeThreadContext,java.util.concurrent.CompletionStage,java.util.concurrent.Executor)>(v1, v2, v3);
return v4;
}
public java.util.concurrent.CompletableFuture newCompletableFutureWrapper(io.smallrye.context.SmallRyeThreadContext, java.util.concurrent.CompletableFuture, java.util.concurrent.Executor, int)
{
io.smallrye.context.CompletableFutureWrapper v5;
java.util.concurrent.Executor v3;
io.smallrye.context.SmallRyeThreadContext v1;
int v4;
java.util.concurrent.CompletableFuture v2;
io.smallrye.context.impl.JdkSpecificImpl v0;
v0 := @this: io.smallrye.context.impl.JdkSpecificImpl;
v1 := @parameter0: io.smallrye.context.SmallRyeThreadContext;
v2 := @parameter1: java.util.concurrent.CompletableFuture;
v3 := @parameter2: java.util.concurrent.Executor;
v4 := @parameter3: int;
v5 = new io.smallrye.context.CompletableFutureWrapper;
specialinvoke v5.<io.smallrye.context.CompletableFutureWrapper: void <init>(io.smallrye.context.SmallRyeThreadContext,java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v1, v2, v3, v4);
return v5;
}
}