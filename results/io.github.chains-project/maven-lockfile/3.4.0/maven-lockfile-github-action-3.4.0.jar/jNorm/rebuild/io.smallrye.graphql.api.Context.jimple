public interface  io.smallrye.graphql.api.Context extends java.lang.Object
{
public static final java.lang.String QUERY;
public static final java.lang.String OPERATION_NAME;
public static final java.lang.String VARIABLES;
public abstract jakarta.json.JsonObject getRequest();
public boolean hasRequest()
{
jakarta.json.JsonObject v1;
io.smallrye.graphql.api.Context v0;
boolean v2;
v0 := @this: io.smallrye.graphql.api.Context;
v1 = interfaceinvoke v0.<io.smallrye.graphql.api.Context: jakarta.json.JsonObject getRequest()>();
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public java.lang.String getQuery()
{
jakarta.json.JsonObject v1;
io.smallrye.graphql.api.Context v0;
java.lang.String v2;
v0 := @this: io.smallrye.graphql.api.Context;
v1 = interfaceinvoke v0.<io.smallrye.graphql.api.Context: jakarta.json.JsonObject getRequest()>();
v2 = interfaceinvoke v1.<jakarta.json.JsonObject: java.lang.String getString(java.lang.String,java.lang.String)>("query", null);
return v2;
}
public abstract java.util.Optional getOperationName();
public boolean hasOperationName()
{
io.smallrye.graphql.api.Context v0;
java.util.Optional v1;
boolean v2;
v0 := @this: io.smallrye.graphql.api.Context;
v1 = interfaceinvoke v0.<io.smallrye.graphql.api.Context: java.util.Optional getOperationName()>();
v2 = virtualinvoke v1.<java.util.Optional: boolean isPresent()>();
return v2;
}
public java.util.Optional getVariables()
{
io.smallrye.graphql.api.Context v0;
jakarta.json.JsonObject v1, v10, v3, v5;
jakarta.json.JsonValue$ValueType v7, v8;
java.util.Optional v12, v13;
java.lang.Object v11, v4, v6;
boolean v2, v9;
v0 := @this: io.smallrye.graphql.api.Context;
v1 = interfaceinvoke v0.<io.smallrye.graphql.api.Context: jakarta.json.JsonObject getRequest()>();
v2 = interfaceinvoke v1.<jakarta.json.JsonObject: boolean containsKey(java.lang.Object)>("variables");
if v2 == 0 goto label1;
v3 = interfaceinvoke v0.<io.smallrye.graphql.api.Context: jakarta.json.JsonObject getRequest()>();
v4 = interfaceinvoke v3.<jakarta.json.JsonObject: java.lang.Object get(java.lang.Object)>("variables");
if v4 == null goto label1;
v5 = interfaceinvoke v0.<io.smallrye.graphql.api.Context: jakarta.json.JsonObject getRequest()>();
v6 = interfaceinvoke v5.<jakarta.json.JsonObject: java.lang.Object get(java.lang.Object)>("variables");
v7 = interfaceinvoke v6.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v8 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType NULL>;
v9 = virtualinvoke v7.<jakarta.json.JsonValue$ValueType: boolean equals(java.lang.Object)>(v8);
if v9 != 0 goto label1;
v10 = interfaceinvoke v0.<io.smallrye.graphql.api.Context: jakarta.json.JsonObject getRequest()>();
v11 = interfaceinvoke v10.<jakarta.json.JsonObject: java.lang.Object get(java.lang.Object)>("variables");
v12 = staticinvoke <io.smallrye.graphql.api.Context$VariablesParser: java.util.Optional toMap(jakarta.json.JsonValue)>(v11);
return v12;
label1:
v13 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
return v13;
}
public boolean hasVariables()
{
io.smallrye.graphql.api.Context v0;
java.util.Optional v1;
boolean v2;
v0 := @this: io.smallrye.graphql.api.Context;
v1 = interfaceinvoke v0.<io.smallrye.graphql.api.Context: java.util.Optional getVariables()>();
v2 = virtualinvoke v1.<java.util.Optional: boolean isPresent()>();
return v2;
}
public abstract java.lang.String getExecutionId();
public abstract java.lang.String getFieldName();
public java.lang.Boolean hasArgument(java.lang.String)
{
io.smallrye.graphql.api.Context v0;
java.util.Map v2;
java.lang.Boolean v4;
java.lang.String v1;
boolean v3;
v0 := @this: io.smallrye.graphql.api.Context;
v1 := @parameter0: java.lang.String;
v2 = interfaceinvoke v0.<io.smallrye.graphql.api.Context: java.util.Map getArguments()>();
if v2 == null goto label1;
v3 = interfaceinvoke v2.<java.util.Map: boolean containsKey(java.lang.Object)>(v1);
v4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v3);
return v4;
label1:
return null;
}
public java.lang.Object getArgument(java.lang.String)
{
io.smallrye.graphql.api.Context v0;
java.util.Map v2;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: io.smallrye.graphql.api.Context;
v1 := @parameter0: java.lang.String;
v2 = interfaceinvoke v0.<io.smallrye.graphql.api.Context: java.util.Map getArguments()>();
if v2 == null goto label1;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v3;
label1:
return null;
}
public java.lang.Object getArgumentOrDefault(java.lang.String, java.lang.Object)
{
io.smallrye.graphql.api.Context v0;
java.lang.Object v2, v3;
java.lang.String v1;
v0 := @this: io.smallrye.graphql.api.Context;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = interfaceinvoke v0.<io.smallrye.graphql.api.Context: java.lang.Object getArgument(java.lang.String)>(v1);
if v3 != null goto label1;
return v2;
label1:
return v3;
}
public abstract java.util.Map getArguments();
public boolean hasSource()
{
io.smallrye.graphql.api.Context v0;
java.lang.Object v1;
boolean v2;
v0 := @this: io.smallrye.graphql.api.Context;
v1 = interfaceinvoke v0.<io.smallrye.graphql.api.Context: java.lang.Object getSource()>();
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public abstract java.lang.Object getSource();
public abstract java.lang.String getPath();
public abstract jakarta.json.JsonArray getSelectedFields();
public abstract jakarta.json.JsonArray getSelectedAndSourceFields();
public abstract java.lang.String getOperationType();
public abstract java.util.List getRequestedOperationTypes();
public abstract java.util.Optional getParentTypeName();
public abstract java.lang.Object unwrap(java.lang.Class);
}