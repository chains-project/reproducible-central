public class io.smallrye.graphql.client.impl.ResponseReader extends java.lang.Object
{
private static final org.jboss.logging.Logger LOG;
public void <init>()
{
io.smallrye.graphql.client.impl.ResponseReader v0;
v0 := @this: io.smallrye.graphql.client.impl.ResponseReader;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static jakarta.json.JsonObject parseGraphQLResponse(java.lang.String)
{
jakarta.json.JsonObject v2;
java.lang.Boolean v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
v2 = staticinvoke <io.smallrye.graphql.client.impl.ResponseReader: jakarta.json.JsonObject parseGraphQLResponse(java.lang.String,java.lang.Boolean)>(v0, v1);
return v2;
}
public static jakarta.json.JsonObject parseGraphQLResponse(java.lang.String, java.lang.Boolean)
{
java.lang.Exception v5;
java.io.StringReader v2;
int v6;
jakarta.json.JsonObject v4, v7;
java.lang.Boolean v1;
jakarta.json.JsonReader v3;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.Boolean;
if v0 != null goto label1;
return null;
label1:
v2 = new java.io.StringReader;
specialinvoke v2.<java.io.StringReader: void <init>(java.lang.String)>(v0);
v3 = staticinvoke <jakarta.json.Json: jakarta.json.JsonReader createReader(java.io.Reader)>(v2);
label2:
v4 = interfaceinvoke v3.<jakarta.json.JsonReader: jakarta.json.JsonObject readObject()>();
label3:
goto label5;
label4:
v5 := @caughtexception;
return null;
label5:
v6 = interfaceinvoke v4.<jakarta.json.JsonObject: int size()>();
if v6 < 1 goto label6;
v7 = staticinvoke <io.smallrye.graphql.client.impl.ResponseReader: jakarta.json.JsonObject checkExpectedResponseFields(jakarta.json.JsonObject,java.lang.Boolean)>(v4, v1);
return v7;
label6:
return null;
catch java.lang.Exception from label2 to label3 with label4;
}
private static jakarta.json.JsonObject checkExpectedResponseFields(jakarta.json.JsonObject, java.lang.Boolean)
{
java.util.Iterator v3;
org.jboss.logging.Logger v10;
java.util.Set v2;
jakarta.json.JsonObject v0;
java.lang.Boolean v1;
java.lang.Object v5;
java.lang.String v11;
boolean v4, v6, v7, v8, v9;
v0 := @parameter0: jakarta.json.JsonObject;
v1 := @parameter1: java.lang.Boolean;
v2 = interfaceinvoke v0.<jakarta.json.JsonObject: java.util.Set keySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label3;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = virtualinvoke v5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("data");
if v6 != 0 goto label1;
v7 = virtualinvoke v5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("errors");
if v7 != 0 goto label1;
v8 = virtualinvoke v5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("extensions");
if v8 != 0 goto label1;
v9 = virtualinvoke v1.<java.lang.Boolean: boolean booleanValue()>();
if v9 != 0 goto label2;
return null;
label2:
v10 = <io.smallrye.graphql.client.impl.ResponseReader: org.jboss.logging.Logger LOG>;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Ignored field: \'\u0001\' in the response.");
virtualinvoke v10.<org.jboss.logging.Logger: void info(java.lang.Object)>(v11);
goto label1;
label3:
return v0;
}
public static io.smallrye.graphql.client.impl.ResponseImpl readFrom(java.lang.String, java.util.Map, java.lang.Integer, java.lang.String, java.lang.Boolean)
{
java.lang.Integer v2;
java.util.ArrayList v12, v14;
java.util.Map v1;
jakarta.json.JsonObject v20, v5, v8;
java.lang.Boolean v4;
java.lang.String v0, v3, v7;
boolean v10, v13, v17, v21, v9;
io.smallrye.graphql.client.InvalidResponseException v6;
java.util.Iterator v16;
io.smallrye.graphql.client.impl.ResponseImpl v22;
io.smallrye.graphql.client.impl.SmallRyeGraphQLClientLogging v11;
io.smallrye.graphql.client.GraphQLError v19;
java.lang.Object v18;
jakarta.json.JsonArray v15;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.util.Map;
v2 := @parameter2: java.lang.Integer;
v3 := @parameter3: java.lang.String;
v4 := @parameter4: java.lang.Boolean;
v5 = staticinvoke <io.smallrye.graphql.client.impl.ResponseReader: jakarta.json.JsonObject parseGraphQLResponse(java.lang.String,java.lang.Boolean)>(v0, v4);
if v5 != null goto label1;
v6 = new io.smallrye.graphql.client.InvalidResponseException;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Integer,java.lang.String,java.lang.String)>(v2, v3, v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected response. Code=\u0001, message=\"\u0001\", body=\"\u0001\"");
specialinvoke v6.<io.smallrye.graphql.client.InvalidResponseException: void <init>(java.lang.String)>(v7);
throw v6;
label1:
v8 = null;
v9 = interfaceinvoke v5.<jakarta.json.JsonObject: boolean containsKey(java.lang.Object)>("data");
if v9 == 0 goto label3;
v10 = interfaceinvoke v5.<jakarta.json.JsonObject: boolean isNull(java.lang.String)>("data");
if v10 != 0 goto label2;
v8 = interfaceinvoke v5.<jakarta.json.JsonObject: jakarta.json.JsonObject getJsonObject(java.lang.String)>("data");
goto label3;
label2:
v11 = <io.smallrye.graphql.client.impl.SmallRyeGraphQLClientLogging: io.smallrye.graphql.client.impl.SmallRyeGraphQLClientLogging log>;
interfaceinvoke v11.<io.smallrye.graphql.client.impl.SmallRyeGraphQLClientLogging: void noDataInResponse()>();
label3:
v12 = null;
v13 = interfaceinvoke v5.<jakarta.json.JsonObject: boolean containsKey(java.lang.Object)>("errors");
if v13 == 0 goto label5;
v14 = new java.util.ArrayList;
specialinvoke v14.<java.util.ArrayList: void <init>()>();
v12 = v14;
v15 = interfaceinvoke v5.<jakarta.json.JsonObject: jakarta.json.JsonArray getJsonArray(java.lang.String)>("errors");
v16 = interfaceinvoke v15.<jakarta.json.JsonArray: java.util.Iterator iterator()>();
label4:
v17 = interfaceinvoke v16.<java.util.Iterator: boolean hasNext()>();
if v17 == 0 goto label5;
v18 = interfaceinvoke v16.<java.util.Iterator: java.lang.Object next()>();
v19 = staticinvoke <io.smallrye.graphql.client.impl.ResponseReader: io.smallrye.graphql.client.GraphQLError readError(jakarta.json.JsonValue)>(v18);
interfaceinvoke v14.<java.util.List: boolean add(java.lang.Object)>(v19);
goto label4;
label5:
v20 = null;
v21 = interfaceinvoke v5.<jakarta.json.JsonObject: boolean containsKey(java.lang.Object)>("extensions");
if v21 == 0 goto label6;
v20 = interfaceinvoke v5.<jakarta.json.JsonObject: jakarta.json.JsonObject getJsonObject(java.lang.String)>("extensions");
label6:
v22 = new io.smallrye.graphql.client.impl.ResponseImpl;
specialinvoke v22.<io.smallrye.graphql.client.impl.ResponseImpl: void <init>(jakarta.json.JsonObject,java.util.List,jakarta.json.JsonObject,java.util.Map,java.lang.Integer,java.lang.String)>(v8, v12, v20, v1, v2, v3);
return v22;
}
public static io.smallrye.graphql.client.impl.ResponseImpl readFrom(java.lang.String, java.util.Map)
{
java.lang.String v0;
io.smallrye.graphql.client.impl.ResponseImpl v2;
java.util.Map v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.util.Map;
v2 = staticinvoke <io.smallrye.graphql.client.impl.ResponseReader: io.smallrye.graphql.client.impl.ResponseImpl readFrom(java.lang.String,java.util.Map,java.lang.Integer,java.lang.String)>(v0, v1, null, null);
return v2;
}
public static io.smallrye.graphql.client.impl.ResponseImpl readFrom(java.lang.String, java.util.Map, java.lang.Integer, java.lang.String)
{
io.smallrye.graphql.client.impl.ResponseImpl v5;
java.util.Map v1;
java.lang.Boolean v4;
java.lang.String v0, v3;
java.lang.Integer v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.util.Map;
v2 := @parameter2: java.lang.Integer;
v3 := @parameter3: java.lang.String;
v4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
v5 = staticinvoke <io.smallrye.graphql.client.impl.ResponseReader: io.smallrye.graphql.client.impl.ResponseImpl readFrom(java.lang.String,java.util.Map,java.lang.Integer,java.lang.String,java.lang.Boolean)>(v0, v1, v2, v3, v4);
return v5;
}
public static io.smallrye.graphql.client.GraphQLError readError(jakarta.json.JsonValue)
{
jakarta.json.JsonValue v0, v72;
java.lang.Integer v42;
java.util.Map v55;
jakarta.json.JsonObject v1, v18, v52;
java.util.Set v59;
io.smallrye.graphql.client.impl.GraphQLErrorImpl v2;
jakarta.json.JsonArray v13, v28, v32;
java.lang.Object[] v30;
java.util.ArrayList v14;
jakarta.json.JsonValue$ValueType v10, v11, v25, v26, v37, v44, v49, v50;
java.util.function.BiConsumer v20, v54;
java.lang.String v40, v5;
java.lang.RuntimeException v21, v45, v56, v6, v70;
int[] v36;
boolean v12, v16, v23, v27, v34, v4, v47, v51, v61, v63, v64, v65, v66, v69, v8;
io.smallrye.graphql.client.impl.SmallRyeGraphQLClientLogging v43;
org.jboss.logging.Logger v22, v46, v57, v7, v71;
java.util.HashMap v19, v53, v58;
int v29, v31, v38, v39, v41;
java.util.Iterator v15, v33, v60;
java.lang.Object v17, v24, v3, v35, v48, v62, v67, v68, v9;
v0 := @parameter0: jakarta.json.JsonValue;
v1 = interfaceinvoke v0.<jakarta.json.JsonValue: jakarta.json.JsonObject asJsonObject()>();
v2 = new io.smallrye.graphql.client.impl.GraphQLErrorImpl;
specialinvoke v2.<io.smallrye.graphql.client.impl.GraphQLErrorImpl: void <init>()>();
label01:
v3 = interfaceinvoke v1.<jakarta.json.JsonObject: java.lang.Object get(java.lang.Object)>("message");
v4 = v3 instanceof jakarta.json.JsonString;
if v4 == 0 goto label04;
v5 = interfaceinvoke v1.<jakarta.json.JsonObject: java.lang.String getString(java.lang.String)>("message");
virtualinvoke v2.<io.smallrye.graphql.client.impl.GraphQLErrorImpl: void setMessage(java.lang.String)>(v5);
label02:
goto label04;
label03:
v6 := @caughtexception;
v7 = <io.smallrye.graphql.client.impl.ResponseReader: org.jboss.logging.Logger LOG>;
virtualinvoke v7.<org.jboss.logging.Logger: void warn(java.lang.Object)>(v6);
label04:
v8 = interfaceinvoke v1.<jakarta.json.JsonObject: boolean containsKey(java.lang.Object)>("locations");
if v8 == 0 goto label09;
v9 = interfaceinvoke v1.<jakarta.json.JsonObject: java.lang.Object get(java.lang.Object)>("locations");
v10 = interfaceinvoke v9.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v11 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType ARRAY>;
v12 = virtualinvoke v10.<jakarta.json.JsonValue$ValueType: boolean equals(java.lang.Object)>(v11);
if v12 == 0 goto label09;
v13 = interfaceinvoke v1.<jakarta.json.JsonObject: jakarta.json.JsonArray getJsonArray(java.lang.String)>("locations");
v14 = new java.util.ArrayList;
specialinvoke v14.<java.util.ArrayList: void <init>()>();
v15 = interfaceinvoke v13.<jakarta.json.JsonArray: java.util.Iterator iterator()>();
label05:
v16 = interfaceinvoke v15.<java.util.Iterator: boolean hasNext()>();
if v16 == 0 goto label06;
v17 = interfaceinvoke v15.<java.util.Iterator: java.lang.Object next()>();
v18 = interfaceinvoke v17.<jakarta.json.JsonValue: jakarta.json.JsonObject asJsonObject()>();
v19 = new java.util.HashMap;
specialinvoke v19.<java.util.HashMap: void <init>()>();
v20 = staticinvoke <io.smallrye.graphql.client.impl.ResponseReader$lambda_readError_0__705: java.util.function.BiConsumer bootstrap$(java.util.Map)>(v19);
interfaceinvoke v18.<jakarta.json.JsonObject: void forEach(java.util.function.BiConsumer)>(v20);
interfaceinvoke v14.<java.util.List: boolean add(java.lang.Object)>(v19);
goto label05;
label06:
virtualinvoke v2.<io.smallrye.graphql.client.impl.GraphQLErrorImpl: void setLocations(java.util.List)>(v14);
label07:
goto label09;
label08:
v21 := @caughtexception;
v22 = <io.smallrye.graphql.client.impl.ResponseReader: org.jboss.logging.Logger LOG>;
virtualinvoke v22.<org.jboss.logging.Logger: void warn(java.lang.Object)>(v21);
label09:
v23 = interfaceinvoke v1.<jakarta.json.JsonObject: boolean containsKey(java.lang.Object)>("path");
if v23 == 0 goto label18;
v24 = interfaceinvoke v1.<jakarta.json.JsonObject: java.lang.Object get(java.lang.Object)>("path");
v25 = interfaceinvoke v24.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v26 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType ARRAY>;
v27 = virtualinvoke v25.<jakarta.json.JsonValue$ValueType: boolean equals(java.lang.Object)>(v26);
if v27 == 0 goto label18;
v28 = interfaceinvoke v1.<jakarta.json.JsonObject: jakarta.json.JsonArray getJsonArray(java.lang.String)>("path");
v29 = interfaceinvoke v28.<jakarta.json.JsonArray: int size()>();
v30 = newarray (java.lang.Object)[v29];
v31 = 0;
v32 = interfaceinvoke v1.<jakarta.json.JsonObject: jakarta.json.JsonArray getJsonArray(java.lang.String)>("path");
v33 = interfaceinvoke v32.<jakarta.json.JsonArray: java.util.Iterator iterator()>();
label10:
v34 = interfaceinvoke v33.<java.util.Iterator: boolean hasNext()>();
if v34 == 0 goto label15;
v35 = interfaceinvoke v33.<java.util.Iterator: java.lang.Object next()>();
v36 = <io.smallrye.graphql.client.impl.ResponseReader$1: int[] $SwitchMap$jakarta$json$JsonValue$ValueType>;
v37 = interfaceinvoke v35.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v38 = virtualinvoke v37.<jakarta.json.JsonValue$ValueType: int ordinal()>();
v39 = v36[v38];
lookupswitch(v39)
{
case 1: goto label11;
case 2: goto label12;
default: goto label13;
};
label11:
v40 = interfaceinvoke v72.<jakarta.json.JsonString: java.lang.String getString()>();
v30[v31] = v40;
goto label14;
label12:
v41 = interfaceinvoke v72.<jakarta.json.JsonNumber: int intValue()>();
v42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v41);
v30[v31] = v42;
goto label14;
label13:
v43 = <io.smallrye.graphql.client.impl.SmallRyeGraphQLClientLogging: io.smallrye.graphql.client.impl.SmallRyeGraphQLClientLogging log>;
v44 = interfaceinvoke v35.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
interfaceinvoke v43.<io.smallrye.graphql.client.impl.SmallRyeGraphQLClientLogging: void unknownPathSegmentType(jakarta.json.JsonValue$ValueType)>(v44);
label14:
v31 = v31 + 1;
goto label10;
label15:
virtualinvoke v2.<io.smallrye.graphql.client.impl.GraphQLErrorImpl: void setPath(java.lang.Object[])>(v30);
label16:
goto label18;
label17:
v45 := @caughtexception;
v46 = <io.smallrye.graphql.client.impl.ResponseReader: org.jboss.logging.Logger LOG>;
virtualinvoke v46.<org.jboss.logging.Logger: void warn(java.lang.Object)>(v45);
label18:
v47 = interfaceinvoke v1.<jakarta.json.JsonObject: boolean containsKey(java.lang.Object)>("extensions");
if v47 == 0 goto label19;
v48 = interfaceinvoke v1.<jakarta.json.JsonObject: java.lang.Object get(java.lang.Object)>("extensions");
v49 = interfaceinvoke v48.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v50 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType OBJECT>;
v51 = virtualinvoke v49.<jakarta.json.JsonValue$ValueType: boolean equals(java.lang.Object)>(v50);
if v51 == 0 goto label19;
v52 = interfaceinvoke v1.<jakarta.json.JsonObject: jakarta.json.JsonObject getJsonObject(java.lang.String)>("extensions");
v53 = new java.util.HashMap;
specialinvoke v53.<java.util.HashMap: void <init>()>();
v54 = staticinvoke <io.smallrye.graphql.client.impl.ResponseReader$lambda_readError_1__704: java.util.function.BiConsumer bootstrap$(java.util.Map)>(v53);
interfaceinvoke v52.<jakarta.json.JsonObject: void forEach(java.util.function.BiConsumer)>(v54);
virtualinvoke v2.<io.smallrye.graphql.client.impl.GraphQLErrorImpl: void setExtensions(java.util.Map)>(v53);
goto label22;
label19:
v55 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
virtualinvoke v2.<io.smallrye.graphql.client.impl.GraphQLErrorImpl: void setExtensions(java.util.Map)>(v55);
label20:
goto label22;
label21:
v56 := @caughtexception;
v57 = <io.smallrye.graphql.client.impl.ResponseReader: org.jboss.logging.Logger LOG>;
virtualinvoke v57.<org.jboss.logging.Logger: void warn(java.lang.Object)>(v56);
label22:
v58 = new java.util.HashMap;
specialinvoke v58.<java.util.HashMap: void <init>()>();
v59 = interfaceinvoke v1.<jakarta.json.JsonObject: java.util.Set keySet()>();
v60 = interfaceinvoke v59.<java.util.Set: java.util.Iterator iterator()>();
label23:
v61 = interfaceinvoke v60.<java.util.Iterator: boolean hasNext()>();
if v61 == 0 goto label24;
v62 = interfaceinvoke v60.<java.util.Iterator: java.lang.Object next()>();
v63 = virtualinvoke v62.<java.lang.String: boolean equals(java.lang.Object)>("extensions");
if v63 != 0 goto label23;
v64 = virtualinvoke v62.<java.lang.String: boolean equals(java.lang.Object)>("locations");
if v64 != 0 goto label23;
v65 = virtualinvoke v62.<java.lang.String: boolean equals(java.lang.Object)>("message");
if v65 != 0 goto label23;
v66 = virtualinvoke v62.<java.lang.String: boolean equals(java.lang.Object)>("path");
if v66 != 0 goto label23;
v67 = interfaceinvoke v1.<jakarta.json.JsonObject: java.lang.Object get(java.lang.Object)>(v62);
v68 = staticinvoke <io.smallrye.graphql.client.impl.ResponseReader: java.lang.Object decode(jakarta.json.JsonValue)>(v67);
interfaceinvoke v58.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v62, v68);
goto label23;
label24:
v69 = interfaceinvoke v58.<java.util.Map: boolean isEmpty()>();
if v69 != 0 goto label27;
virtualinvoke v2.<io.smallrye.graphql.client.impl.GraphQLErrorImpl: void setOtherFields(java.util.Map)>(v58);
label25:
goto label27;
label26:
v70 := @caughtexception;
v71 = <io.smallrye.graphql.client.impl.ResponseReader: org.jboss.logging.Logger LOG>;
virtualinvoke v71.<org.jboss.logging.Logger: void warn(java.lang.Object)>(v70);
label27:
return v2;
catch java.lang.RuntimeException from label01 to label02 with label03;
catch java.lang.RuntimeException from label04 to label07 with label08;
catch java.lang.RuntimeException from label09 to label16 with label17;
catch java.lang.RuntimeException from label18 to label20 with label21;
catch java.lang.RuntimeException from label22 to label25 with label26;
}
private static java.lang.Object decode(jakarta.json.JsonValue)
{
jakarta.json.JsonValue v0;
long v6;
int[] v1;
java.lang.Long v7;
int v3, v4;
jakarta.json.JsonValue$ValueType v2;
java.lang.Boolean v8, v9;
java.lang.String v5;
v0 := @parameter0: jakarta.json.JsonValue;
v1 = <io.smallrye.graphql.client.impl.ResponseReader$1: int[] $SwitchMap$jakarta$json$JsonValue$ValueType>;
v2 = interfaceinvoke v0.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v3 = virtualinvoke v2.<jakarta.json.JsonValue$ValueType: int ordinal()>();
v4 = v1[v3];
tableswitch(v4)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label3;
case 4: goto label4;
case 5: goto label5;
default: goto label6;
};
label1:
v5 = interfaceinvoke v0.<jakarta.json.JsonString: java.lang.String getString()>();
return v5;
label2:
v6 = interfaceinvoke v0.<jakarta.json.JsonNumber: long longValue()>();
v7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v6);
return v7;
label3:
v8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
return v8;
label4:
v9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
return v9;
label5:
return null;
label6:
return v0;
}
static void <clinit>()
{
java.lang.Class v0;
java.lang.String v1;
org.jboss.logging.Logger v2;
v0 = class "Lio/smallrye/graphql/client/impl/ResponseReader;";
v1 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v2 = staticinvoke <org.jboss.logging.Logger: org.jboss.logging.Logger getLogger(java.lang.String)>(v1);
<io.smallrye.graphql.client.impl.ResponseReader: org.jboss.logging.Logger LOG> = v2;
return;
}
}