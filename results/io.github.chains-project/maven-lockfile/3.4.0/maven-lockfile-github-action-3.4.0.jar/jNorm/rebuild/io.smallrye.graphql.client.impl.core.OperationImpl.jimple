public class io.smallrye.graphql.client.impl.core.OperationImpl extends io.smallrye.graphql.client.impl.core.AbstractOperation
{
public void <init>()
{
io.smallrye.graphql.client.impl.core.OperationImpl v0;
v0 := @this: io.smallrye.graphql.client.impl.core.OperationImpl;
specialinvoke v0.<io.smallrye.graphql.client.impl.core.AbstractOperation: void <init>()>();
return;
}
public java.lang.String build()
{
io.smallrye.graphql.client.core.exceptions.BuildException v14, v6;
int[] v2;
io.smallrye.graphql.client.impl.core.OperationImpl v0;
int v4, v5;
java.lang.String v15, v7;
boolean v11, v13, v9;
java.util.List v10, v12, v8;
io.smallrye.graphql.client.core.OperationType v3;
java.lang.StringBuilder v1;
v0 := @this: io.smallrye.graphql.client.impl.core.OperationImpl;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = <io.smallrye.graphql.client.impl.core.OperationImpl$1: int[] $SwitchMap$io$smallrye$graphql$client$core$OperationType>;
v3 = virtualinvoke v0.<io.smallrye.graphql.client.impl.core.OperationImpl: io.smallrye.graphql.client.core.OperationType getType()>();
v4 = virtualinvoke v3.<io.smallrye.graphql.client.core.OperationType: int ordinal()>();
v5 = v2[v4];
tableswitch(v5)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label3;
default: goto label4;
};
label1:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("query");
goto label5;
label2:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mutation");
goto label5;
label3:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("subscription");
goto label5;
label4:
v6 = new io.smallrye.graphql.client.core.exceptions.BuildException;
specialinvoke v6.<io.smallrye.graphql.client.core.exceptions.BuildException: void <init>(java.lang.String)>("Operation type must be one of QUERY, MUTATION or SUBSCRIPTION");
throw v6;
label5:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
v7 = virtualinvoke v0.<io.smallrye.graphql.client.impl.core.OperationImpl: java.lang.String getName()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v7);
v8 = virtualinvoke v0.<io.smallrye.graphql.client.impl.core.OperationImpl: java.util.List getVariables()>();
v9 = interfaceinvoke v8.<java.util.List: boolean isEmpty()>();
if v9 != 0 goto label6;
specialinvoke v0.<io.smallrye.graphql.client.impl.core.OperationImpl: void _buildVariables(java.lang.StringBuilder)>(v1);
label6:
v10 = virtualinvoke v0.<io.smallrye.graphql.client.impl.core.OperationImpl: java.util.List getDirectives()>();
v11 = interfaceinvoke v10.<java.util.List: boolean isEmpty()>();
if v11 != 0 goto label7;
specialinvoke v0.<io.smallrye.graphql.client.impl.core.OperationImpl: void _buildDirectives(java.lang.StringBuilder)>(v1);
label7:
v12 = virtualinvoke v0.<io.smallrye.graphql.client.impl.core.OperationImpl: java.util.List getFields()>();
v13 = interfaceinvoke v12.<java.util.List: boolean isEmpty()>();
if v13 != 0 goto label8;
specialinvoke v0.<io.smallrye.graphql.client.impl.core.OperationImpl: void _buildFields(java.lang.StringBuilder)>(v1);
goto label9;
label8:
v14 = new io.smallrye.graphql.client.core.exceptions.BuildException;
specialinvoke v14.<io.smallrye.graphql.client.core.exceptions.BuildException: void <init>(java.lang.String)>("An operation must have at least one root field.");
throw v14;
label9:
v15 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v15;
}
private void _buildVariables(java.lang.StringBuilder)
{
java.lang.StringBuilder v1;
java.util.function.Supplier v2;
io.smallrye.graphql.client.impl.core.OperationImpl v0;
v0 := @this: io.smallrye.graphql.client.impl.core.OperationImpl;
v1 := @parameter0: java.lang.StringBuilder;
v2 = staticinvoke <io.smallrye.graphql.client.impl.core.OperationImpl$getVariables__778: java.util.function.Supplier bootstrap$(io.smallrye.graphql.client.impl.core.OperationImpl)>(v0);
specialinvoke v0.<io.smallrye.graphql.client.impl.core.OperationImpl: void buildWrapper(java.lang.StringBuilder,java.util.function.Supplier,java.lang.String,java.lang.String,java.lang.String)>(v1, v2, ", ", "(", ")");
return;
}
private void _buildDirectives(java.lang.StringBuilder)
{
char v10;
java.util.function.Function v4;
java.util.List v2;
java.util.stream.Stream v3, v5;
io.smallrye.graphql.client.impl.core.OperationImpl v0;
int v8, v9;
java.lang.Object v7;
java.lang.StringBuilder v1;
java.lang.String v11;
java.util.stream.Collector v6;
boolean v12;
v0 := @this: io.smallrye.graphql.client.impl.core.OperationImpl;
v1 := @parameter0: java.lang.StringBuilder;
v2 = virtualinvoke v0.<io.smallrye.graphql.client.impl.core.OperationImpl: java.util.List getDirectives()>();
v3 = interfaceinvoke v2.<java.util.List: java.util.stream.Stream stream()>();
v4 = staticinvoke <io.smallrye.graphql.client.impl.core.OperationImpl$build__779: java.util.function.Function bootstrap$()>();
v5 = interfaceinvoke v3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v4);
v6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining()>();
v7 = interfaceinvoke v5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v6);
v8 = virtualinvoke v1.<java.lang.StringBuilder: int length()>();
v9 = v8 - 1;
v10 = virtualinvoke v1.<java.lang.StringBuilder: char charAt(int)>(v9);
v11 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(v10);
v12 = virtualinvoke v11.<java.lang.String: boolean equals(java.lang.Object)>(" ");
if v12 == 0 goto label1;
v7 = virtualinvoke v7.<java.lang.String: java.lang.String trim()>();
label1:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v7);
return;
}
private void _buildFields(java.lang.StringBuilder)
{
java.lang.StringBuilder v1;
java.util.function.Supplier v2;
io.smallrye.graphql.client.impl.core.OperationImpl v0;
v0 := @this: io.smallrye.graphql.client.impl.core.OperationImpl;
v1 := @parameter0: java.lang.StringBuilder;
v2 = staticinvoke <io.smallrye.graphql.client.impl.core.OperationImpl$getFields__780: java.util.function.Supplier bootstrap$(io.smallrye.graphql.client.impl.core.OperationImpl)>(v0);
specialinvoke v0.<io.smallrye.graphql.client.impl.core.OperationImpl: void buildWrapper(java.lang.StringBuilder,java.util.function.Supplier,java.lang.String,java.lang.String,java.lang.String)>(v1, v2, " ", "{", "}");
return;
}
private void buildWrapper(java.lang.StringBuilder, java.util.function.Supplier, java.lang.String, java.lang.String, java.lang.String)
{
java.util.function.Supplier v2;
java.util.function.Consumer v8;
io.smallrye.graphql.client.impl.core.OperationImpl v0;
java.util.StringJoiner v6;
java.lang.Object v7;
java.lang.StringBuilder v1;
java.lang.String v3, v4, v5;
v0 := @this: io.smallrye.graphql.client.impl.core.OperationImpl;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.util.function.Supplier;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: java.lang.String;
v6 = new java.util.StringJoiner;
specialinvoke v6.<java.util.StringJoiner: void <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>(v3, v4, v5);
v7 = interfaceinvoke v2.<java.util.function.Supplier: java.lang.Object get()>();
v8 = staticinvoke <io.smallrye.graphql.client.impl.core.OperationImpl$lambda_buildWrapper_0__781: java.util.function.Consumer bootstrap$(java.util.StringJoiner)>(v6);
interfaceinvoke v7.<java.util.List: void forEach(java.util.function.Consumer)>(v8);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v6);
return;
}
}