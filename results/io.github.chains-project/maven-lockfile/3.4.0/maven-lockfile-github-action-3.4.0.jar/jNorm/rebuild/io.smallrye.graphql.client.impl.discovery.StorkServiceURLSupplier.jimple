public class io.smallrye.graphql.client.impl.discovery.StorkServiceURLSupplier extends java.lang.Object implements io.smallrye.graphql.client.impl.discovery.ServiceURLSupplier
{
private final io.smallrye.stork.Stork stork;
private final java.lang.String serviceName;
private final java.lang.String scheme;
private final java.lang.String path;
private final org.jboss.logging.Logger LOG;
public void <init>(java.net.URI, boolean)
{
java.lang.IllegalStateException v12;
org.jboss.logging.Logger v3;
io.smallrye.graphql.client.impl.discovery.StorkServiceURLSupplier v0;
io.smallrye.stork.Stork v10;
java.lang.String v13, v14, v15, v17, v18, v19, v20, v21, v4, v6, v9;
java.net.URI v1;
java.lang.NoClassDefFoundError v11;
boolean v16, v2, v5, v7;
java.lang.IllegalArgumentException v8;
v0 := @this: io.smallrye.graphql.client.impl.discovery.StorkServiceURLSupplier;
v1 := @parameter0: java.net.URI;
v2 := @parameter1: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = staticinvoke <org.jboss.logging.Logger: org.jboss.logging.Logger getLogger(java.lang.Class)>(class "Lio/smallrye/graphql/client/impl/discovery/StorkServiceURLSupplier;");
v0.<io.smallrye.graphql.client.impl.discovery.StorkServiceURLSupplier: org.jboss.logging.Logger LOG> = v3;
if v1 == null goto label01;
v4 = virtualinvoke v1.<java.net.URI: java.lang.String getScheme()>();
v5 = virtualinvoke v4.<java.lang.String: boolean equals(java.lang.Object)>("stork");
if v5 != 0 goto label02;
v6 = virtualinvoke v1.<java.net.URI: java.lang.String getScheme()>();
v7 = virtualinvoke v6.<java.lang.String: boolean equals(java.lang.Object)>("storks");
if v7 != 0 goto label02;
label01:
v8 = new java.lang.IllegalArgumentException;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.net.URI)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Not a stork URI: \u0001");
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v9);
throw v8;
label02:
v10 = staticinvoke <io.smallrye.stork.Stork: io.smallrye.stork.Stork getInstance()>();
v0.<io.smallrye.graphql.client.impl.discovery.StorkServiceURLSupplier: io.smallrye.stork.Stork stork> = v10;
label03:
goto label05;
label04:
v11 := @caughtexception;
v12 = new java.lang.IllegalStateException;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.net.URI)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot use URI \u0001 because SmallRye Stork dependency seems to be missing");
specialinvoke v12.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>(v13, v11);
throw v12;
label05:
v14 = virtualinvoke v1.<java.net.URI: java.lang.String getHost()>();
v0.<io.smallrye.graphql.client.impl.discovery.StorkServiceURLSupplier: java.lang.String serviceName> = v14;
v15 = virtualinvoke v1.<java.net.URI: java.lang.String getScheme()>();
v16 = virtualinvoke v15.<java.lang.String: boolean equals(java.lang.Object)>("storks");
if v16 == 0 goto label07;
if v2 == 0 goto label06;
v0.<io.smallrye.graphql.client.impl.discovery.StorkServiceURLSupplier: java.lang.String scheme> = "wss";
goto label09;
label06:
v0.<io.smallrye.graphql.client.impl.discovery.StorkServiceURLSupplier: java.lang.String scheme> = "https";
goto label09;
label07:
if v2 == 0 goto label08;
v0.<io.smallrye.graphql.client.impl.discovery.StorkServiceURLSupplier: java.lang.String scheme> = "ws";
goto label09;
label08:
v0.<io.smallrye.graphql.client.impl.discovery.StorkServiceURLSupplier: java.lang.String scheme> = "http";
label09:
v17 = virtualinvoke v1.<java.net.URI: java.lang.String getPath()>();
v18 = virtualinvoke v1.<java.net.URI: java.lang.String getRawQuery()>();
if v18 != null goto label10;
v19 = "";
goto label11;
label10:
v20 = virtualinvoke v1.<java.net.URI: java.lang.String getRawQuery()>();
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v20) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("?\u0001");
label11:
v21 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v17, v19) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
v0.<io.smallrye.graphql.client.impl.discovery.StorkServiceURLSupplier: java.lang.String path> = v21;
return;
catch java.lang.NoClassDefFoundError from label02 to label03 with label04;
}
public io.smallrye.mutiny.Uni get()
{
io.smallrye.stork.api.Service v3;
java.util.function.Function v6;
io.smallrye.mutiny.Uni v4, v7;
io.smallrye.mutiny.groups.UniOnItem v5;
io.smallrye.graphql.client.impl.discovery.StorkServiceURLSupplier v0;
io.smallrye.stork.Stork v1;
java.lang.String v2;
v0 := @this: io.smallrye.graphql.client.impl.discovery.StorkServiceURLSupplier;
v1 = v0.<io.smallrye.graphql.client.impl.discovery.StorkServiceURLSupplier: io.smallrye.stork.Stork stork>;
v2 = v0.<io.smallrye.graphql.client.impl.discovery.StorkServiceURLSupplier: java.lang.String serviceName>;
v3 = virtualinvoke v1.<io.smallrye.stork.Stork: io.smallrye.stork.api.Service getService(java.lang.String)>(v2);
v4 = virtualinvoke v3.<io.smallrye.stork.api.Service: io.smallrye.mutiny.Uni selectInstance()>();
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniOnItem onItem()>();
v6 = staticinvoke <io.smallrye.graphql.client.impl.discovery.StorkServiceURLSupplier$lambda_get_0__773: java.util.function.Function bootstrap$(io.smallrye.graphql.client.impl.discovery.StorkServiceURLSupplier)>(v0);
v7 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniOnItem: io.smallrye.mutiny.Uni transform(java.util.function.Function)>(v6);
return v7;
}
}