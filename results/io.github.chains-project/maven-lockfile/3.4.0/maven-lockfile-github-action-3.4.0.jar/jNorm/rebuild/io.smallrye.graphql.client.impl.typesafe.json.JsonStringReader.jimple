class io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader extends io.smallrye.graphql.client.impl.typesafe.json.Reader
{
void <init>(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo, io.smallrye.graphql.client.impl.typesafe.json.Location, jakarta.json.JsonString, io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo)
{
io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader v0;
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v4;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v1;
io.smallrye.graphql.client.impl.typesafe.json.Location v2;
jakarta.json.JsonString v3;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader;
v1 := @parameter0: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v2 := @parameter1: io.smallrye.graphql.client.impl.typesafe.json.Location;
v3 := @parameter2: jakarta.json.JsonString;
v4 := @parameter3: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo;
specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.json.Reader: void <init>(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo,io.smallrye.graphql.client.impl.typesafe.json.Location,jakarta.json.JsonValue,io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo)>(v1, v2, v3, v4);
return;
}
java.lang.Object read()
{
jakarta.json.JsonValue v13, v15, v27, v36, v43, v55, v63, v9;
java.lang.Character v18;
java.lang.CharSequence v10, v16;
java.lang.Exception v66;
java.lang.Object[] v62;
java.util.function.Supplier v60;
io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader v0;
java.lang.String v28, v37, v44, v56, v64, v69;
java.lang.Number v57;
java.lang.RuntimeException v67;
java.util.Date v38;
java.lang.Enum v31;
boolean v22, v26, v30, v35, v4, v42, v49, v8;
io.smallrye.graphql.client.InvalidResponseException v14;
java.util.UUID v45;
java.lang.'annotation'.Annotation v52, v54;
java.util.Optional v59;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v2, v20, v24, v29, v33, v40, v47, v58, v6;
int v11;
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v50, v51, v53;
char v17;
java.lang.Class v1, v19, v21, v23, v25, v3, v32, v34, v39, v41, v46, v48, v5, v7;
java.lang.Object v61, v65;
io.smallrye.graphql.client.impl.typesafe.json.Location v12, v68;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader;
v1 = <java.lang.Character: java.lang.Class TYPE>;
v2 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo type>;
v3 = virtualinvoke v2.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v4 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v4 != 0 goto label01;
v5 = class "Ljava/lang/Character;";
v6 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo type>;
v7 = virtualinvoke v6.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v8 = virtualinvoke v5.<java.lang.Object: boolean equals(java.lang.Object)>(v7);
if v8 == 0 goto label03;
label01:
v9 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: jakarta.json.JsonValue value>;
v10 = interfaceinvoke v9.<jakarta.json.JsonString: java.lang.CharSequence getChars()>();
v11 = interfaceinvoke v10.<java.lang.CharSequence: int length()>();
if v11 == 1 goto label02;
v12 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.json.Location location>;
v13 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: jakarta.json.JsonValue value>;
v14 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.json.GraphQLClientValueHelper: io.smallrye.graphql.client.InvalidResponseException fail(io.smallrye.graphql.client.impl.typesafe.json.Location,java.lang.Object)>(v12, v13);
throw v14;
label02:
v15 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: jakarta.json.JsonValue value>;
v16 = interfaceinvoke v15.<jakarta.json.JsonString: java.lang.CharSequence getChars()>();
v17 = interfaceinvoke v16.<java.lang.CharSequence: char charAt(int)>(0);
v18 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v17);
return v18;
label03:
v19 = class "Ljava/lang/String;";
v20 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo type>;
v21 = virtualinvoke v20.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v22 = virtualinvoke v19.<java.lang.Object: boolean equals(java.lang.Object)>(v21);
if v22 != 0 goto label04;
v23 = class "Ljava/lang/Object;";
v24 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo type>;
v25 = virtualinvoke v24.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v26 = virtualinvoke v23.<java.lang.Object: boolean equals(java.lang.Object)>(v25);
if v26 == 0 goto label05;
label04:
v27 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: jakarta.json.JsonValue value>;
v28 = interfaceinvoke v27.<jakarta.json.JsonString: java.lang.String getString()>();
return v28;
label05:
v29 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo type>;
v30 = virtualinvoke v29.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isEnum()>();
if v30 == 0 goto label06;
v31 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: java.lang.Enum enumValue()>();
return v31;
label06:
v32 = class "Ljava/util/Date;";
v33 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo type>;
v34 = virtualinvoke v33.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v35 = virtualinvoke v32.<java.lang.Object: boolean equals(java.lang.Object)>(v34);
if v35 == 0 goto label07;
v36 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: jakarta.json.JsonValue value>;
v37 = interfaceinvoke v36.<jakarta.json.JsonString: java.lang.String getString()>();
v38 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: java.util.Date formattedDate(java.lang.String)>(v37);
return v38;
label07:
v39 = class "Ljava/util/UUID;";
v40 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo type>;
v41 = virtualinvoke v40.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v42 = virtualinvoke v39.<java.lang.Object: boolean equals(java.lang.Object)>(v41);
if v42 == 0 goto label08;
v43 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: jakarta.json.JsonValue value>;
v44 = interfaceinvoke v43.<jakarta.json.JsonString: java.lang.String getString()>();
v45 = staticinvoke <java.util.UUID: java.util.UUID fromString(java.lang.String)>(v44);
return v45;
label08:
v46 = class "Ljava/lang/Number;";
v47 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo type>;
v48 = virtualinvoke v47.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v49 = virtualinvoke v46.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v48);
if v49 == 0 goto label10;
v50 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo field>;
if v50 == null goto label10;
v51 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo field>;
v52 = virtualinvoke v51.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/eclipse/microprofile/graphql/NumberFormat;");
if v52 != null goto label09;
v53 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo field>;
v54 = virtualinvoke v53.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljakarta/json/bind/annotation/JsonbNumberFormat;");
if v54 == null goto label10;
label09:
v55 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: jakarta.json.JsonValue value>;
v56 = interfaceinvoke v55.<jakarta.json.JsonString: java.lang.String getString()>();
v57 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: java.lang.Number formattedNumber(java.lang.String)>(v56);
return v57;
label10:
v58 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo type>;
v59 = virtualinvoke v58.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.util.Optional scalarConstructor()>();
v60 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader$lambda_read_0__727: java.util.function.Supplier bootstrap$(io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader)>(v0);
v61 = virtualinvoke v59.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>(v60);
label11:
v62 = newarray (java.lang.Object)[1];
v63 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: jakarta.json.JsonValue value>;
v64 = interfaceinvoke v63.<jakarta.json.JsonString: java.lang.String getString()>();
v62[0] = v64;
v65 = virtualinvoke v61.<io.smallrye.graphql.client.impl.typesafe.reflection.ConstructionInfo: java.lang.Object execute(java.lang.Object[])>(v62);
label12:
return v65;
label13:
v66 := @caughtexception;
v67 = new java.lang.RuntimeException;
v68 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.json.Location location>;
v69 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.smallrye.graphql.client.impl.typesafe.json.Location)>(v68) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("can\'t create scalar \u0001");
specialinvoke v67.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v69, v66);
throw v67;
catch java.lang.Exception from label11 to label12 with label13;
}
private java.util.Date formattedDate(java.lang.String)
{
java.util.Date v15, v19;
java.text.SimpleDateFormat v10, v11, v12, v14;
io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader v0;
java.util.Locale v13;
java.lang.String v1, v3, v4;
java.text.ParseException v16;
boolean v9;
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v2, v5, v7;
java.lang.RuntimeException v17;
java.time.Instant v18;
java.lang.'annotation'.Annotation v6, v8;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo field>;
if v2 == null goto label9;
v3 = null;
v4 = null;
v5 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo field>;
v6 = virtualinvoke v5.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljakarta/json/bind/annotation/JsonbDateFormat;");
if v6 == null goto label1;
v3 = interfaceinvoke v6.<jakarta.json.bind.'annotation'.JsonbDateFormat: java.lang.String value()>();
v4 = interfaceinvoke v6.<jakarta.json.bind.'annotation'.JsonbDateFormat: java.lang.String locale()>();
label1:
v7 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo field>;
v8 = virtualinvoke v7.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/eclipse/microprofile/graphql/DateFormat;");
if v8 == null goto label2;
v3 = interfaceinvoke v8.<org.eclipse.microprofile.graphql.DateFormat: java.lang.String value()>();
v4 = interfaceinvoke v8.<org.eclipse.microprofile.graphql.DateFormat: java.lang.String locale()>();
label2:
if v3 == null goto label5;
if v4 == null goto label3;
v9 = virtualinvoke v4.<java.lang.String: boolean isEmpty()>();
if v9 == 0 goto label4;
label3:
v10 = new java.text.SimpleDateFormat;
specialinvoke v10.<java.text.SimpleDateFormat: void <init>(java.lang.String)>(v3);
v11 = v10;
goto label6;
label4:
v12 = new java.text.SimpleDateFormat;
v13 = staticinvoke <java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>(v4);
specialinvoke v12.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>(v3, v13);
v11 = v12;
goto label6;
label5:
v14 = new java.text.SimpleDateFormat;
specialinvoke v14.<java.text.SimpleDateFormat: void <init>()>();
v11 = v14;
label6:
v15 = virtualinvoke v11.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(v1);
label7:
return v15;
label8:
v16 := @caughtexception;
v17 = new java.lang.RuntimeException;
specialinvoke v17.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot parse date", v16);
throw v17;
label9:
v18 = staticinvoke <java.time.Instant: java.time.Instant parse(java.lang.CharSequence)>(v1);
v19 = staticinvoke <java.util.Date: java.util.Date 'from'(java.time.Instant)>(v18);
return v19;
catch java.text.ParseException from label6 to label7 with label8;
}
private java.lang.Number formattedNumber(java.lang.String)
{
java.text.NumberFormat v10;
io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader v0;
java.util.Locale v12;
java.lang.String v1, v2, v3;
java.lang.Number v14;
java.text.ParseException v15;
boolean v11, v8;
io.smallrye.graphql.client.InvalidResponseException v16;
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v4, v6;
java.text.DecimalFormat v13, v9;
java.lang.'annotation'.Annotation v5, v7;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader;
v1 := @parameter0: java.lang.String;
v2 = null;
v3 = null;
v4 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo field>;
v5 = virtualinvoke v4.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljakarta/json/bind/annotation/JsonbNumberFormat;");
if v5 == null goto label1;
v2 = interfaceinvoke v5.<jakarta.json.bind.'annotation'.JsonbNumberFormat: java.lang.String locale()>();
v3 = interfaceinvoke v5.<jakarta.json.bind.'annotation'.JsonbNumberFormat: java.lang.String value()>();
label1:
v6 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo field>;
v7 = virtualinvoke v6.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/eclipse/microprofile/graphql/NumberFormat;");
if v7 == null goto label2;
v2 = interfaceinvoke v7.<org.eclipse.microprofile.graphql.NumberFormat: java.lang.String locale()>();
v3 = interfaceinvoke v7.<org.eclipse.microprofile.graphql.NumberFormat: java.lang.String value()>();
label2:
if v3 == null goto label3;
v8 = virtualinvoke v3.<java.lang.String: boolean isEmpty()>();
if v8 != 0 goto label3;
v9 = new java.text.DecimalFormat;
specialinvoke v9.<java.text.DecimalFormat: void <init>(java.lang.String)>(v3);
v10 = v9;
goto label5;
label3:
if v2 == null goto label4;
v11 = virtualinvoke v2.<java.lang.String: boolean isEmpty()>();
if v11 != 0 goto label4;
v12 = staticinvoke <java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>(v2);
v10 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale)>(v12);
goto label5;
label4:
v13 = new java.text.DecimalFormat;
specialinvoke v13.<java.text.DecimalFormat: void <init>()>();
v10 = v13;
label5:
v14 = virtualinvoke v10.<java.text.NumberFormat: java.lang.Number parse(java.lang.String)>(v1);
label6:
return v14;
label7:
v15 := @caughtexception;
v16 = new io.smallrye.graphql.client.InvalidResponseException;
specialinvoke v16.<io.smallrye.graphql.client.InvalidResponseException: void <init>(java.lang.String,java.lang.Throwable)>("Can\'t parse number", v15);
throw v16;
catch java.text.ParseException from label5 to label6 with label7;
}
private java.lang.Enum enumValue()
{
java.lang.Enum v5;
jakarta.json.JsonValue v3;
io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader v0;
java.lang.Class v2;
java.lang.String v4;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v1;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo type>;
v2 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v3 = v0.<io.smallrye.graphql.client.impl.typesafe.json.JsonStringReader: jakarta.json.JsonValue value>;
v4 = interfaceinvoke v3.<jakarta.json.JsonString: java.lang.String getString()>();
v5 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(v2, v4);
return v5;
}
}