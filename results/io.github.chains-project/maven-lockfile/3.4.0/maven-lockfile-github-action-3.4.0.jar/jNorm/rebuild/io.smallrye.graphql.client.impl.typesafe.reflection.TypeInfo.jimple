public class io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo extends java.lang.Object
{
private final io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo container;
private final java.lang.reflect.Type type;
private final java.lang.reflect.AnnotatedType annotatedType;
private final java.lang.reflect.Type genericType;
private io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo itemType;
private io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo keyType;
private io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo valueType;
private java.lang.Class rawType;
static final boolean $assertionsDisabled;
public static io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo of(java.lang.reflect.Type)
{
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v1;
java.lang.reflect.Type v0;
v0 := @parameter0: java.lang.reflect.Type;
v1 = new io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
specialinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: void <init>(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo,java.lang.reflect.Type)>(null, v0);
return v1;
}
void <init>(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo, java.lang.reflect.Type)
{
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0, v1;
java.lang.reflect.Type v2;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v2 := @parameter1: java.lang.reflect.Type;
specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: void <init>(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo,java.lang.reflect.Type,java.lang.reflect.AnnotatedType,java.lang.reflect.Type)>(v1, v2, null, null);
return;
}
void <init>(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo, java.lang.reflect.Type, java.lang.reflect.AnnotatedType)
{
java.lang.reflect.Type v2;
java.lang.reflect.AnnotatedType v3;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0, v1;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v2 := @parameter1: java.lang.reflect.Type;
v3 := @parameter2: java.lang.reflect.AnnotatedType;
specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: void <init>(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo,java.lang.reflect.Type,java.lang.reflect.AnnotatedType,java.lang.reflect.Type)>(v1, v2, v3, null);
return;
}
void <init>(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo, java.lang.reflect.Type, java.lang.reflect.AnnotatedType, java.lang.reflect.Type)
{
java.lang.reflect.Type v2, v4;
java.lang.reflect.AnnotatedType v3;
java.lang.Object v5;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0, v1;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v2 := @parameter1: java.lang.reflect.Type;
v3 := @parameter2: java.lang.reflect.AnnotatedType;
v4 := @parameter3: java.lang.reflect.Type;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo container> = v1;
v5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(v2);
v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type> = v5;
v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.AnnotatedType annotatedType> = v3;
v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type genericType> = v4;
return;
}
public java.lang.String toString()
{
java.lang.reflect.AnnotatedType v1;
java.lang.reflect.Type v2, v4;
java.lang.Object v5;
java.lang.String v7, v9;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0, v6, v8;
boolean v3;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.AnnotatedType annotatedType>;
if v1 != null goto label2;
v2 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v3 = v2 instanceof java.lang.Class;
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v5 = virtualinvoke v4.<java.lang.Class: java.lang.String getName()>();
goto label3;
label1:
v5 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
goto label3;
label2:
v5 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.AnnotatedType annotatedType>;
label3:
v6 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo container>;
if v6 != null goto label4;
v7 = "";
goto label5;
label4:
v8 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo container>;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(" in \u0001");
label5:
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object,java.lang.String)>(v5, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
return v9;
}
public boolean equals(java.lang.Object)
{
java.lang.reflect.Type v4, v5;
java.lang.Class v2, v3;
java.lang.Object v1;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v6;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v5 = v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
java.lang.reflect.Type v1;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public java.lang.String getTypeName()
{
java.lang.reflect.Type v1, v5;
java.lang.Class v3;
java.lang.String v4, v6;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v2;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v2 = v1 instanceof java.lang.reflect.TypeVariable;
if v2 == 0 goto label1;
v3 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class resolveTypeVariable()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getTypeName()>();
return v4;
label1:
v5 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v6 = interfaceinvoke v5.<java.lang.reflect.Type: java.lang.String getTypeName()>();
return v6;
}
private java.lang.Class resolveTypeVariable()
{
java.lang.UnsupportedOperationException v7;
java.lang.reflect.Type v2, v4;
java.lang.reflect.Type[] v3;
java.lang.String v8, v9;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0, v1;
boolean v5, v6;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo container>;
v2 = v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v3 = interfaceinvoke v2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v4 = v3[0];
v5 = v4 instanceof java.lang.Class;
if v5 == 0 goto label1;
return v4;
label1:
v6 = v4 instanceof java.lang.reflect.ParameterizedType;
if v6 == 0 goto label2;
return class "Ljava/lang/Object;";
label2:
v7 = new java.lang.UnsupportedOperationException;
v8 = interfaceinvoke v4.<java.lang.reflect.Type: java.lang.String getTypeName()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("can\'t resolve type variable of a \u0001");
specialinvoke v7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v9);
throw v7;
}
public java.lang.String getPackage()
{
java.lang.Package v2;
java.lang.reflect.Type v1;
java.lang.String v3;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v2 = virtualinvoke v1.<java.lang.Class: java.lang.Package getPackage()>();
v3 = virtualinvoke v2.<java.lang.Package: java.lang.String getName()>();
return v3;
}
public boolean isCollection()
{
java.util.function.Predicate v1;
java.lang.Class v3, v4;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v2, v5, v6;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo$isArray__758: java.util.function.Predicate bootstrap$()>();
v2 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean ifClass(java.util.function.Predicate)>(v1);
if v2 != 0 goto label1;
v3 = class "Ljava/util/Collection;";
v4 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v5 = virtualinvoke v3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v4);
if v5 == 0 goto label2;
label1:
v6 = 1;
goto label3;
label2:
v6 = 0;
label3:
return v6;
}
public boolean isAsync()
{
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v1, v2, v3;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isMulti()>();
if v1 != 0 goto label1;
v2 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isUni()>();
if v2 == 0 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
public boolean isMulti()
{
java.lang.Class v1, v2;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v3;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = class "Lio/smallrye/mutiny/Multi;";
v2 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v3 = virtualinvoke v1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v2);
return v3;
}
public boolean isUni()
{
java.lang.Class v1, v2;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v3;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = class "Lio/smallrye/mutiny/Uni;";
v2 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v3 = virtualinvoke v1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v2);
return v3;
}
public boolean isMap()
{
java.lang.Class v1, v2;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v3;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = class "Ljava/util/Map;";
v2 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v3 = virtualinvoke v1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v2);
return v3;
}
public boolean isOptionalNumber()
{
java.lang.Class v1, v2, v4, v6;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v3, v5, v7, v8;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v2 = class "Ljava/util/OptionalInt;";
v3 = virtualinvoke v2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v1);
if v3 != 0 goto label1;
v4 = class "Ljava/util/OptionalLong;";
v5 = virtualinvoke v4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v1);
if v5 != 0 goto label1;
v6 = class "Ljava/util/OptionalDouble;";
v7 = virtualinvoke v6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v1);
if v7 == 0 goto label2;
label1:
v8 = 1;
goto label3;
label2:
v8 = 0;
label3:
return v8;
}
private boolean ifClass(java.util.function.Predicate)
{
java.lang.reflect.Type v2, v4;
java.util.function.Predicate v1;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v3, v5, v6;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: java.util.function.Predicate;
v2 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v3 = v2 instanceof java.lang.Class;
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v5 = interfaceinvoke v1.<java.util.function.Predicate: boolean test(java.lang.Object)>(v4);
if v5 == 0 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
return v6;
}
public java.util.stream.Stream fields()
{
java.lang.Class v1;
java.util.stream.Stream v2;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v2 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.util.stream.Stream fields(java.lang.Class)>(v1);
return v2;
}
private java.util.stream.Stream fields(java.lang.Class)
{
java.util.function.Predicate v8;
java.util.function.Function v10;
java.lang.reflect.Field[] v6;
java.util.stream.Stream v11, v3, v5, v7, v9;
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo[] v2;
java.lang.Class v1, v4;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: java.lang.Class;
if v1 != null goto label1;
v2 = newarray (io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo)[0];
v3 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>(v2);
goto label2;
label1:
v4 = virtualinvoke v1.<java.lang.Class: java.lang.Class getSuperclass()>();
v5 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.util.stream.Stream fields(java.lang.Class)>(v4);
v6 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)>(v1);
v7 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>(v6);
v8 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo$isGraphQlField__759: java.util.function.Predicate bootstrap$(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo)>(v0);
v9 = interfaceinvoke v7.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v8);
v10 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo$lambda_fields_0__760: java.util.function.Function bootstrap$(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo)>(v0);
v11 = interfaceinvoke v9.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v10);
v3 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream concat(java.util.stream.Stream,java.util.stream.Stream)>(v5, v11);
label2:
return v3;
}
private java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)
{
java.lang.reflect.Field[] v3;
java.lang.Class v1;
java.lang.Object v5;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
java.security.PrivilegedAction v4;
java.lang.SecurityManager v2;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: java.lang.Class;
v2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
if v2 != null goto label1;
v3 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();
return v3;
label1:
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v4 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo$getDeclaredFields__761: java.security.PrivilegedAction bootstrap$(java.lang.Class)>(v1);
v5 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(v4);
return v5;
}
public boolean isGraphQlField(java.lang.reflect.Field)
{
java.lang.Class[] v12;
java.lang.reflect.Field v1;
java.lang.Thread v3;
int v10, v6, v8;
java.lang.Class v2;
java.lang.ClassNotFoundException v5;
java.lang.ClassLoader v4;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v11, v13, v14, v7, v9;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: java.lang.reflect.Field;
v2 = null;
label1:
v3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v4 = virtualinvoke v3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
v2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("com.fasterxml.jackson.annotation.JsonIgnore", 0, v4);
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
v6 = virtualinvoke v1.<java.lang.reflect.Field: int getModifiers()>();
v7 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(v6);
if v7 != 0 goto label5;
v8 = virtualinvoke v1.<java.lang.reflect.Field: int getModifiers()>();
v9 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isSynthetic(int)>(v8);
if v9 != 0 goto label5;
v10 = virtualinvoke v1.<java.lang.reflect.Field: int getModifiers()>();
v11 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>(v10);
if v11 != 0 goto label5;
v12 = newarray (java.lang.Class)[3];
v12[0] = class "Lorg/eclipse/microprofile/graphql/Ignore;";
v12[1] = class "Ljakarta/json/bind/annotation/JsonbTransient;";
v12[2] = v2;
v13 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isAnnotatedBy(java.lang.reflect.Field,java.lang.Class[])>(v1, v12);
if v13 != 0 goto label5;
v14 = 1;
goto label6;
label5:
v14 = 0;
label6:
return v14;
catch java.lang.ClassNotFoundException from label1 to label2 with label3;
}
private transient boolean isAnnotatedBy(java.lang.reflect.Field, java.lang.Class[])
{
int v3, v4;
java.lang.Class[] v2;
java.lang.Class v5;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
java.lang.reflect.Field v1;
boolean v6;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: java.lang.reflect.Field;
v2 := @parameter1: java.lang.Class[];
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label3;
v5 = v2[v4];
if v5 == null goto label2;
v6 = virtualinvoke v1.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(v5);
if v6 == 0 goto label2;
return 1;
label2:
v4 = v4 + 1;
goto label1;
label3:
return 0;
}
private static boolean isSynthetic(int)
{
int v0, v1;
boolean v2;
v0 := @parameter0: int;
v1 = v0 & 4096;
if v1 == 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public boolean isOptional()
{
java.lang.Class v1, v2;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v3;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = class "Ljava/util/Optional;";
v2 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v3 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v2);
return v3;
}
public boolean isErrorOr()
{
java.lang.Class v1, v2;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v3;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = class "Lio/smallrye/graphql/client/typesafe/api/ErrorOr;";
v2 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v3 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v2);
return v3;
}
public boolean isTypesafeResponse()
{
java.lang.Class v1, v2;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v3;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = class "Lio/smallrye/graphql/client/typesafe/api/TypesafeResponse;";
v2 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v3 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v2);
return v3;
}
public boolean isRecord()
{
java.lang.Class v1, v2;
java.lang.String v3;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v4, v5;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class rawType>;
v2 = virtualinvoke v1.<java.lang.Class: java.lang.Class getSuperclass()>();
if v2 == null goto label1;
v3 = virtualinvoke v2.<java.lang.Class: java.lang.String getName()>();
v4 = virtualinvoke v3.<java.lang.String: boolean equals(java.lang.Object)>("java.lang.Record");
if v4 == 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public boolean isScalar()
{
boolean v1, v10, v11, v14, v17, v20, v23, v25, v28, v31, v34, v35, v4, v7;
java.util.Optional v24;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
java.lang.Class v12, v13, v15, v16, v18, v19, v2, v21, v22, v26, v27, v29, v3, v30, v32, v33, v5, v6, v8, v9;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isPrimitive()>();
if v1 != 0 goto label1;
v2 = class "Ljava/lang/Void;";
v3 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v4 = virtualinvoke v2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v3);
if v4 != 0 goto label1;
v5 = class "Ljava/lang/Number;";
v6 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v7 = virtualinvoke v5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v6);
if v7 != 0 goto label1;
v8 = class "Ljava/lang/Boolean;";
v9 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v10 = virtualinvoke v8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v9);
if v10 != 0 goto label1;
v11 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isEnum()>();
if v11 != 0 goto label1;
v12 = class "Ljava/lang/CharSequence;";
v13 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v14 = virtualinvoke v12.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v13);
if v14 != 0 goto label1;
v15 = class "Ljava/lang/Character;";
v16 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v17 = virtualinvoke v15.<java.lang.Object: boolean equals(java.lang.Object)>(v16);
if v17 != 0 goto label1;
v18 = class "Ljava/util/Date;";
v19 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v20 = virtualinvoke v18.<java.lang.Object: boolean equals(java.lang.Object)>(v19);
if v20 != 0 goto label1;
v21 = class "Ljava/util/UUID;";
v22 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v23 = virtualinvoke v21.<java.lang.Object: boolean equals(java.lang.Object)>(v22);
if v23 != 0 goto label1;
v24 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.util.Optional scalarConstructor()>();
v25 = virtualinvoke v24.<java.util.Optional: boolean isPresent()>();
if v25 != 0 goto label1;
v26 = class "Ljava/util/OptionalInt;";
v27 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v28 = virtualinvoke v26.<java.lang.Object: boolean equals(java.lang.Object)>(v27);
if v28 != 0 goto label1;
v29 = class "Ljava/util/OptionalLong;";
v30 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v31 = virtualinvoke v29.<java.lang.Object: boolean equals(java.lang.Object)>(v30);
if v31 != 0 goto label1;
v32 = class "Ljava/util/OptionalDouble;";
v33 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v34 = virtualinvoke v32.<java.lang.Object: boolean equals(java.lang.Object)>(v33);
if v34 == 0 goto label2;
label1:
v35 = 1;
goto label3;
label2:
v35 = 0;
label3:
return v35;
}
public boolean isPrimitive()
{
java.lang.Class v1;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v2;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v2 = virtualinvoke v1.<java.lang.Class: boolean isPrimitive()>();
return v2;
}
public boolean isVoid()
{
java.lang.Class v1, v2, v4, v5;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v3, v6, v7;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = <java.lang.Void: java.lang.Class TYPE>;
v2 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v3 = virtualinvoke v1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v2);
if v3 != 0 goto label1;
v4 = class "Ljava/lang/Void;";
v5 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v6 = virtualinvoke v4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v5);
if v6 == 0 goto label2;
label1:
v7 = 1;
goto label3;
label2:
v7 = 0;
label3:
return v7;
}
public boolean isEnum()
{
java.lang.reflect.Type v1;
java.util.function.Predicate v5;
java.lang.Class v3;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v2, v4, v6;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v2 = v1 instanceof java.lang.reflect.TypeVariable;
if v2 == 0 goto label1;
v3 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class resolveTypeVariable()>();
v4 = virtualinvoke v3.<java.lang.Class: boolean isEnum()>();
return v4;
label1:
v5 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo$isEnum__762: java.util.function.Predicate bootstrap$()>();
v6 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean ifClass(java.util.function.Predicate)>(v5);
return v6;
}
public java.util.Optional scalarConstructor()
{
java.util.function.Predicate v4;
java.util.function.Function v7;
java.lang.reflect.Method[] v2;
java.util.stream.Stream v3, v5;
java.util.Optional v6, v8;
java.lang.Class v1;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v2 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();
v3 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>(v2);
v4 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo$isStaticStringConstructor__763: java.util.function.Predicate bootstrap$(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo)>(v0);
v5 = interfaceinvoke v3.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v4);
v6 = interfaceinvoke v5.<java.util.stream.Stream: java.util.Optional findFirst()>();
v7 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo$init__764: java.util.function.Function bootstrap$()>();
v8 = virtualinvoke v6.<java.util.Optional: java.util.Optional map(java.util.function.Function)>(v7);
return v8;
}
public boolean isStaticStringConstructor(java.lang.reflect.Method)
{
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
java.lang.reflect.Method v1;
boolean v2, v3, v4, v5;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: java.lang.reflect.Method;
v2 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isStaticConstructorMethodNamed(java.lang.reflect.Method,java.lang.String)>(v1, "of");
if v2 != 0 goto label1;
v3 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isStaticConstructorMethodNamed(java.lang.reflect.Method,java.lang.String)>(v1, "valueOf");
if v3 != 0 goto label1;
v4 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isStaticConstructorMethodNamed(java.lang.reflect.Method,java.lang.String)>(v1, "parse");
if v4 == 0 goto label2;
label1:
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
return v5;
}
private boolean isStaticConstructorMethodNamed(java.lang.reflect.Method, java.lang.String)
{
java.lang.reflect.Type v8;
int v5;
java.lang.Class v7;
java.lang.String v2, v3;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
java.lang.reflect.Method v1;
boolean v10, v11, v4, v6, v9;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: java.lang.reflect.Method;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v1.<java.lang.reflect.Method: java.lang.String getName()>();
v4 = virtualinvoke v3.<java.lang.String: boolean equals(java.lang.Object)>(v2);
if v4 == 0 goto label1;
v5 = virtualinvoke v1.<java.lang.reflect.Method: int getModifiers()>();
v6 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(v5);
if v6 == 0 goto label1;
v7 = virtualinvoke v1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
v8 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v9 = virtualinvoke v7.<java.lang.Object: boolean equals(java.lang.Object)>(v8);
if v9 == 0 goto label1;
v10 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean hasOneStringParameter(java.lang.reflect.Executable)>(v1);
if v10 == 0 goto label1;
v11 = 1;
goto label2;
label1:
v11 = 0;
label2:
return v11;
}
private boolean hasOneStringParameter(java.lang.reflect.Executable)
{
java.lang.Class[] v4;
int v2;
java.lang.reflect.Executable v1;
java.lang.Class v3, v5;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v6, v7;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: java.lang.reflect.Executable;
v2 = virtualinvoke v1.<java.lang.reflect.Executable: int getParameterCount()>();
if v2 != 1 goto label1;
v3 = class "Ljava/lang/CharSequence;";
v4 = virtualinvoke v1.<java.lang.reflect.Executable: java.lang.Class[] getParameterTypes()>();
v5 = v4[0];
v6 = virtualinvoke v3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v5);
if v6 == 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
return v7;
}
public java.lang.Object newInstance(java.lang.Object[])
{
java.lang.Object[] v1, v5;
java.lang.ReflectiveOperationException v21;
java.lang.reflect.Constructor v4;
java.lang.reflect.Constructor[] v8;
int v2;
java.lang.String v20, v24;
boolean v15;
java.util.function.Predicate v10, v12;
java.lang.RuntimeException v18, v22;
java.util.stream.Stream v11, v13, v9;
java.lang.reflect.Type v19, v23;
java.util.Optional v14;
java.lang.Class v3, v7;
java.lang.Object v16, v17, v6;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: java.lang.Object[];
label1:
v2 = lengthof v1;
if v2 != 0 goto label3;
v3 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v4 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class)>(v3);
virtualinvoke v4.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);
v5 = newarray (java.lang.Object)[0];
v6 = virtualinvoke v4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v5);
label2:
return v6;
label3:
v7 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
v8 = virtualinvoke v7.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();
v9 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(v8);
v10 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo$lambda_newInstance_1__765: java.util.function.Predicate bootstrap$()>();
v11 = interfaceinvoke v9.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v10);
v12 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo$lambda_newInstance_2__766: java.util.function.Predicate bootstrap$(java.lang.Object[])>(v1);
v13 = interfaceinvoke v11.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v12);
v14 = interfaceinvoke v13.<java.util.stream.Stream: java.util.Optional findAny()>();
v15 = virtualinvoke v14.<java.util.Optional: boolean isPresent()>();
if v15 == 0 goto label5;
v16 = virtualinvoke v14.<java.util.Optional: java.lang.Object get()>();
virtualinvoke v16.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);
v17 = virtualinvoke v16.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v1);
label4:
return v17;
label5:
v18 = new java.lang.RuntimeException;
v19 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v19) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Could not find a suitable constructor of type \u0001");
specialinvoke v18.<java.lang.RuntimeException: void <init>(java.lang.String)>(v20);
throw v18;
label6:
v21 := @caughtexception;
v22 = new java.lang.RuntimeException;
v23 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v24 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v23) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("can\'t instantiate \u0001");
specialinvoke v22.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v24, v21);
throw v22;
catch java.lang.ReflectiveOperationException from label1 to label2 with label6;
catch java.lang.ReflectiveOperationException from label3 to label4 with label6;
}
private java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class) throws java.lang.NoSuchMethodException
{
java.lang.Class[] v2;
java.lang.Class v1;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
java.lang.reflect.Constructor v3;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: java.lang.Class;
v2 = newarray (java.lang.Class)[0];
v3 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class,java.lang.Class[])>(v1, v2);
return v3;
}
private java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class, java.lang.Class[]) throws java.lang.NoSuchMethodException
{
java.lang.Throwable v10, v12, v8;
java.security.PrivilegedActionException v7;
java.lang.Class[] v2;
java.lang.RuntimeException v11;
java.security.PrivilegedExceptionAction v5;
java.lang.reflect.Constructor v4;
java.lang.SecurityManager v3;
java.lang.Class v1;
java.lang.Object v6;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v9;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.Class[];
v3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
if v3 != null goto label1;
v4 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(v2);
return v4;
label1:
v5 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo$lambda_getDeclaredConstructor_3__767: java.security.PrivilegedExceptionAction bootstrap$(java.lang.Class,java.lang.Class[])>(v1, v2);
v6 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(v5);
label2:
return v6;
label3:
v7 := @caughtexception;
v8 = virtualinvoke v7.<java.security.PrivilegedActionException: java.lang.Throwable getCause()>();
v9 = v8 instanceof java.lang.NoSuchMethodException;
if v9 == 0 goto label4;
v10 = virtualinvoke v7.<java.security.PrivilegedActionException: java.lang.Throwable getCause()>();
throw v10;
label4:
v11 = new java.lang.RuntimeException;
v12 = virtualinvoke v7.<java.security.PrivilegedActionException: java.lang.Throwable getCause()>();
specialinvoke v11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v12);
throw v11;
catch java.security.PrivilegedActionException from label1 to label2 with label3;
}
public java.lang.String getSimpleName()
{
java.lang.reflect.Type v1, v3, v5;
java.lang.String v4, v6;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v2;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v2 = v1 instanceof java.lang.Class;
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getSimpleName()>();
return v4;
label1:
v5 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v6 = interfaceinvoke v5.<java.lang.reflect.Type: java.lang.String getTypeName()>();
return v6;
}
public boolean isNonNull()
{
java.lang.Thread v2;
boolean v11, v12, v15, v20, v23, v24, v6, v9;
java.util.function.Predicate v5;
java.lang.reflect.AnnotatedType v10, v17, v19, v22, v7, v8;
java.lang.Class v1;
java.lang.ClassNotFoundException v4;
java.lang.ClassLoader v3;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0, v13, v14, v16, v18, v21;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = null;
label01:
v2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v3 = virtualinvoke v2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
v1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("jakarta.validation.constraints.NotNull", 0, v3);
label02:
goto label04;
label03:
v4 := @caughtexception;
label04:
v5 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo$lambda_isNonNull_4__768: java.util.function.Predicate bootstrap$(java.lang.Class)>(v1);
v6 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean ifClass(java.util.function.Predicate)>(v5);
if v6 == 0 goto label05;
return 1;
label05:
v7 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.AnnotatedType annotatedType>;
if v7 == null goto label09;
v8 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.AnnotatedType annotatedType>;
v9 = interfaceinvoke v8.<java.lang.reflect.AnnotatedType: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/eclipse/microprofile/graphql/NonNull;");
if v9 != 0 goto label06;
if v1 == null goto label07;
v10 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.AnnotatedType annotatedType>;
v11 = interfaceinvoke v10.<java.lang.reflect.AnnotatedType: boolean isAnnotationPresent(java.lang.Class)>(v1);
if v11 == 0 goto label07;
label06:
v12 = 1;
goto label08;
label07:
v12 = 0;
label08:
return v12;
label09:
v13 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo container>;
if v13 == null goto label10;
v14 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo container>;
v15 = virtualinvoke v14.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isCollection()>();
if v15 == 0 goto label10;
v16 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo container>;
v17 = v16.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.AnnotatedType annotatedType>;
if v17 != null goto label11;
label10:
return 0;
label11:
v18 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo container>;
v19 = v18.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.AnnotatedType annotatedType>;
v20 = interfaceinvoke v19.<java.lang.reflect.AnnotatedType: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/eclipse/microprofile/graphql/NonNull;");
if v20 != 0 goto label12;
if v1 == null goto label13;
v21 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo container>;
v22 = v21.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.AnnotatedType annotatedType>;
v23 = interfaceinvoke v22.<java.lang.reflect.AnnotatedType: boolean isAnnotationPresent(java.lang.Class)>(v1);
if v23 == 0 goto label13;
label12:
v24 = 1;
goto label14;
label13:
v24 = 0;
label14:
return v24;
catch java.lang.ClassNotFoundException from label01 to label02 with label03;
}
public java.lang.Class getRawType()
{
java.lang.reflect.Type v2;
java.lang.Class v1, v3, v4;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class rawType>;
if v1 != null goto label1;
v2 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v3 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class raw(java.lang.reflect.Type)>(v2);
v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class rawType> = v3;
label1:
v4 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class rawType>;
return v4;
}
public io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo getItemType()
{
java.lang.reflect.AnnotatedType v12;
java.lang.AssertionError v7;
java.lang.Integer v10;
java.lang.reflect.Type v11;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0, v13, v8, v9;
boolean v1, v2, v3, v4, v5, v6;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = <io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isCollection()>();
if v2 != 0 goto label1;
v3 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isOptional()>();
if v3 != 0 goto label1;
v4 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isErrorOr()>();
if v4 != 0 goto label1;
v5 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isAsync()>();
if v5 != 0 goto label1;
v6 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isTypesafeResponse()>();
if v6 != 0 goto label1;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label1:
v8 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo itemType>;
if v8 != null goto label2;
v9 = new io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
v11 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type computeParameterType(java.lang.Integer)>(v10);
v12 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.AnnotatedType computeAnnotatedItemType()>();
specialinvoke v9.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: void <init>(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo,java.lang.reflect.Type,java.lang.reflect.AnnotatedType)>(v0, v11, v12);
v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo itemType> = v9;
label2:
v13 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo itemType>;
return v13;
}
public io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo getKeyType()
{
java.lang.reflect.Type v4;
java.lang.reflect.AnnotatedType v5;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0, v1, v2, v6;
java.lang.Integer v3;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo keyType>;
if v1 != null goto label1;
v2 = new io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
v4 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type computeParameterType(java.lang.Integer)>(v3);
v5 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.AnnotatedType computeAnnotatedItemType()>();
specialinvoke v2.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: void <init>(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo,java.lang.reflect.Type,java.lang.reflect.AnnotatedType)>(v0, v4, v5);
v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo keyType> = v2;
label1:
v6 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo keyType>;
return v6;
}
public io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo getValueType()
{
java.lang.reflect.Type v4;
java.lang.reflect.AnnotatedType v5;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0, v1, v2, v6;
java.lang.Integer v3;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo valueType>;
if v1 != null goto label1;
v2 = new io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
v4 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type computeParameterType(java.lang.Integer)>(v3);
v5 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.AnnotatedType computeAnnotatedItemType()>();
specialinvoke v2.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: void <init>(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo,java.lang.reflect.Type,java.lang.reflect.AnnotatedType)>(v0, v4, v5);
v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo valueType> = v2;
label1:
v6 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo valueType>;
return v6;
}
private java.lang.reflect.Type computeParameterType(java.lang.Integer)
{
java.lang.Integer v1;
int v13, v19, v6;
java.lang.reflect.AnnotatedType[] v5;
boolean v10, v16, v3;
java.lang.reflect.AnnotatedType v2, v4, v7;
java.lang.reflect.Type v11, v14, v15, v17, v20, v21, v8, v9;
java.lang.reflect.Type[] v12, v18;
java.lang.Class v22;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: java.lang.Integer;
v2 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.AnnotatedType annotatedType>;
v3 = v2 instanceof java.lang.reflect.AnnotatedParameterizedType;
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.AnnotatedType annotatedType>;
v5 = interfaceinvoke v4.<java.lang.reflect.AnnotatedParameterizedType: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>();
v6 = virtualinvoke v1.<java.lang.Integer: int intValue()>();
v7 = v5[v6];
v8 = interfaceinvoke v7.<java.lang.reflect.AnnotatedType: java.lang.reflect.Type getType()>();
return v8;
label1:
v9 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v10 = v9 instanceof java.lang.reflect.ParameterizedType;
if v10 == 0 goto label2;
v11 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v12 = interfaceinvoke v11.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v13 = virtualinvoke v1.<java.lang.Integer: int intValue()>();
v14 = v12[v13];
return v14;
label2:
v15 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type genericType>;
v16 = v15 instanceof java.lang.reflect.ParameterizedType;
if v16 == 0 goto label3;
v17 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type genericType>;
v18 = interfaceinvoke v17.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v19 = virtualinvoke v1.<java.lang.Integer: int intValue()>();
v20 = v18[v19];
return v20;
label3:
v21 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v22 = virtualinvoke v21.<java.lang.Class: java.lang.Class getComponentType()>();
return v22;
}
private java.lang.reflect.AnnotatedType computeAnnotatedItemType()
{
java.lang.reflect.AnnotatedType v1, v3, v5;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
java.lang.reflect.AnnotatedType[] v4;
boolean v2;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.AnnotatedType annotatedType>;
v2 = v1 instanceof java.lang.reflect.AnnotatedParameterizedType;
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.AnnotatedType annotatedType>;
v4 = interfaceinvoke v3.<java.lang.reflect.AnnotatedParameterizedType: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()>();
v5 = v4[0];
return v5;
label1:
return null;
}
private java.lang.Class raw(java.lang.reflect.Type)
{
java.lang.RuntimeException v8;
java.lang.reflect.Type v1, v4;
java.lang.Class v5, v7, v9;
java.lang.String v10;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v2, v3, v6;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: java.lang.reflect.Type;
v2 = v1 instanceof java.lang.Class;
if v2 == 0 goto label1;
return v1;
label1:
v3 = v1 instanceof java.lang.reflect.ParameterizedType;
if v3 == 0 goto label2;
v4 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v5 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class raw(java.lang.reflect.Type)>(v4);
return v5;
label2:
v6 = v1 instanceof java.lang.reflect.TypeVariable;
if v6 == 0 goto label3;
v7 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class resolveTypeVariable()>();
return v7;
label3:
v8 = new java.lang.RuntimeException;
v9 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unsupported reflection type \u0001");
specialinvoke v8.<java.lang.RuntimeException: void <init>(java.lang.String)>(v10);
throw v8;
}
public transient java.util.Optional getMethod(java.lang.String, java.lang.Class[])
{
java.lang.reflect.Type v3;
java.lang.Class[] v2;
java.util.Optional v4, v6;
java.lang.String v1;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
java.util.function.Function v5;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class[];
v3 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v4 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.util.Optional getDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(v3, v1, v2);
v5 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo$lambda_getMethod_5__769: java.util.function.Function bootstrap$()>();
v6 = virtualinvoke v4.<java.util.Optional: java.util.Optional map(java.util.function.Function)>(v5);
return v6;
}
private transient java.util.Optional getDeclaredMethod(java.lang.Class, java.lang.String, java.lang.Class[])
{
java.lang.Throwable v13, v17;
java.lang.NoSuchMethodException v10;
java.lang.String v2;
java.lang.reflect.Method v5;
boolean v14;
java.security.PrivilegedActionException v12;
java.lang.Class[] v3;
java.lang.RuntimeException v16;
java.security.PrivilegedExceptionAction v7;
java.lang.SecurityManager v4;
java.util.Optional v11, v15, v6, v9;
java.lang.Class v1;
java.lang.Object v8;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.Class[];
label1:
v4 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
if v4 != null goto label3;
v5 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(v2, v3);
v6 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(v5);
label2:
return v6;
label3:
v7 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo$lambda_getDeclaredMethod_6__770: java.security.PrivilegedExceptionAction bootstrap$(java.lang.Class,java.lang.String,java.lang.Class[])>(v1, v2, v3);
v8 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(v7);
v9 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(v8);
label4:
return v9;
label5:
v10 := @caughtexception;
v11 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
return v11;
label6:
v12 := @caughtexception;
v13 = virtualinvoke v12.<java.security.PrivilegedActionException: java.lang.Throwable getCause()>();
v14 = v13 instanceof java.lang.NoSuchMethodException;
if v14 == 0 goto label7;
v15 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
return v15;
label7:
v16 = new java.lang.RuntimeException;
v17 = virtualinvoke v12.<java.security.PrivilegedActionException: java.lang.Throwable getCause()>();
specialinvoke v16.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v17);
throw v16;
catch java.lang.NoSuchMethodException from label1 to label2 with label5;
catch java.lang.NoSuchMethodException from label3 to label4 with label5;
catch java.security.PrivilegedActionException from label1 to label2 with label6;
catch java.security.PrivilegedActionException from label3 to label4 with label6;
}
public boolean isNestedIn(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo)
{
java.util.stream.Stream v2;
java.util.function.Predicate v3;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0, v1;
boolean v4;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v2 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.util.stream.Stream enclosingTypes()>();
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v3 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo$equals__771: java.util.function.Predicate bootstrap$(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo)>(v1);
v4 = interfaceinvoke v2.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>(v3);
return v4;
}
public java.util.stream.Stream enclosingTypes()
{
java.util.stream.Stream v4;
java.util.stream.Stream$Builder v1;
java.lang.Class v2;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0, v3;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream$Builder builder()>();
v2 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.Class getRawType()>();
label1:
if v2 == null goto label2;
v3 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo of(java.lang.reflect.Type)>(v2);
interfaceinvoke v1.<java.util.stream.Stream$Builder: void accept(java.lang.Object)>(v3);
v2 = virtualinvoke v2.<java.lang.Class: java.lang.Class getEnclosingClass()>();
goto label1;
label2:
v4 = interfaceinvoke v1.<java.util.stream.Stream$Builder: java.util.stream.Stream build()>();
return v4;
}
public boolean isAnnotated(java.lang.Class)
{
java.util.function.Predicate v2;
java.lang.Class v1;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
boolean v3;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: java.lang.Class;
v2 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo$lambda_isAnnotated_7__772: java.util.function.Predicate bootstrap$(java.lang.Class)>(v1);
v3 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean ifClass(java.util.function.Predicate)>(v2);
return v3;
}
public java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)
{
java.lang.reflect.Type v2;
java.lang.'annotation'.Annotation v3;
java.lang.Class v1;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v0;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v1 := @parameter0: java.lang.Class;
v2 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.reflect.Type type>;
v3 = virtualinvoke v2.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(v1);
return v3;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/smallrye/graphql/client/impl/typesafe/reflection/TypeInfo;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean $assertionsDisabled> = v2;
return;
}
}