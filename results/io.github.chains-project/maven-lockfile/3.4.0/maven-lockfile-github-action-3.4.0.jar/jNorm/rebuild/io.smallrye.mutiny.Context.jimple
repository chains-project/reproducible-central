public final class io.smallrye.mutiny.Context extends java.lang.Object
{
private volatile java.util.concurrent.ConcurrentHashMap entries;
public static io.smallrye.mutiny.Context empty()
{
io.smallrye.mutiny.Context v0;
v0 = new io.smallrye.mutiny.Context;
specialinvoke v0.<io.smallrye.mutiny.Context: void <init>()>();
return v0;
}
public static transient io.smallrye.mutiny.Context of(java.lang.Object[])
{
java.lang.Object[] v0;
java.util.HashMap v4;
java.lang.IllegalArgumentException v3;
io.smallrye.mutiny.Context v13;
int v1, v10, v2, v5, v6;
java.lang.Object v11, v12, v7, v8;
java.lang.String v9;
v0 := @parameter0: java.lang.Object[];
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v0, "The entries array cannot be null");
v1 = lengthof v0;
v2 = v1 % 2;
if v2 == 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Arguments must be balanced to form (key, value) pairs");
throw v3;
label1:
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>()>();
v5 = 0;
label2:
v6 = lengthof v0;
if v5 >= v6 goto label3;
v7 = v0[v5];
v8 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v7, "key");
v9 = virtualinvoke v8.<java.lang.Object: java.lang.String toString()>();
v10 = v5 + 1;
v11 = v0[v10];
v12 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v11, "value");
virtualinvoke v4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, v12);
v5 = v5 + 2;
goto label2;
label3:
v13 = new io.smallrye.mutiny.Context;
specialinvoke v13.<io.smallrye.mutiny.Context: void <init>(java.util.Map)>(v4);
return v13;
}
public static io.smallrye.mutiny.Context 'from'(java.util.Map)
{
java.lang.Object v2;
io.smallrye.mutiny.Context v1;
java.util.Map v0;
v0 := @parameter0: java.util.Map;
v1 = new io.smallrye.mutiny.Context;
v2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v0, "The entries map cannot be null");
specialinvoke v1.<io.smallrye.mutiny.Context: void <init>(java.util.Map)>(v2);
return v1;
}
private void <init>()
{
io.smallrye.mutiny.Context v0;
v0 := @this: io.smallrye.mutiny.Context;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries> = null;
return;
}
private void <init>(java.util.Map)
{
java.util.concurrent.ConcurrentHashMap v2;
io.smallrye.mutiny.Context v0;
java.util.Map v1;
v0 := @this: io.smallrye.mutiny.Context;
v1 := @parameter0: java.util.Map;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v2.<java.util.concurrent.ConcurrentHashMap: void <init>(java.util.Map)>(v1);
v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries> = v2;
return;
}
public boolean contains(java.lang.String)
{
java.util.concurrent.ConcurrentHashMap v2, v3;
java.lang.String v1;
io.smallrye.mutiny.Context v0;
boolean v4;
v0 := @this: io.smallrye.mutiny.Context;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
if v2 != null goto label1;
return 0;
label1:
v3 = v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
v4 = virtualinvoke v3.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>(v1);
return v4;
}
public java.lang.Object get(java.lang.String) throws java.util.NoSuchElementException
{
java.util.concurrent.ConcurrentHashMap v2, v4;
io.smallrye.mutiny.Context v0;
java.lang.Object v5;
java.lang.String v1, v7;
java.util.NoSuchElementException v3, v6;
v0 := @this: io.smallrye.mutiny.Context;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
if v2 != null goto label1;
v3 = new java.util.NoSuchElementException;
specialinvoke v3.<java.util.NoSuchElementException: void <init>(java.lang.String)>("The context is empty");
throw v3;
label1:
v4 = v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
v5 = virtualinvoke v4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(v1);
if v5 != null goto label2;
v6 = new java.util.NoSuchElementException;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The context does not have a value for key \u0001");
specialinvoke v6.<java.util.NoSuchElementException: void <init>(java.lang.String)>(v7);
throw v6;
label2:
return v5;
}
public java.lang.Object getOrElse(java.lang.String, java.util.function.Supplier)
{
java.util.concurrent.ConcurrentHashMap v3, v4;
java.lang.Object v5, v6;
java.lang.String v1;
io.smallrye.mutiny.Context v0;
java.util.function.Supplier v2;
v0 := @this: io.smallrye.mutiny.Context;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.util.function.Supplier;
v3 = v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
if v3 == null goto label1;
v4 = v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
v5 = virtualinvoke v4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(v1);
if v5 == null goto label1;
return v5;
label1:
v6 = interfaceinvoke v2.<java.util.function.Supplier: java.lang.Object get()>();
return v6;
}
public io.smallrye.mutiny.Context put(java.lang.String, java.lang.Object)
{
java.lang.Throwable v6;
java.util.concurrent.ConcurrentHashMap v3, v4, v5, v7;
io.smallrye.mutiny.Context v0;
java.lang.Object v2;
java.lang.String v1;
v0 := @this: io.smallrye.mutiny.Context;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
if v3 != null goto label5;
entermonitor v0;
label1:
v4 = v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
if v4 != null goto label2;
v5 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v5.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(8);
v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries> = v5;
label2:
exitmonitor v0;
label3:
goto label5;
label4:
v6 := @caughtexception;
exitmonitor v0;
throw v6;
label5:
v7 = v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
virtualinvoke v7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
return v0;
catch java.lang.Throwable from label1 to label3 with label4;
}
public io.smallrye.mutiny.Context delete(java.lang.String)
{
java.util.concurrent.ConcurrentHashMap v2, v3;
java.lang.String v1;
io.smallrye.mutiny.Context v0;
v0 := @this: io.smallrye.mutiny.Context;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
if v2 == null goto label1;
v3 = v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
virtualinvoke v3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(v1);
label1:
return v0;
}
public boolean isEmpty()
{
java.util.concurrent.ConcurrentHashMap v1, v2;
io.smallrye.mutiny.Context v0;
boolean v3, v4;
v0 := @this: io.smallrye.mutiny.Context;
v1 = v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
if v1 == null goto label1;
v2 = v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
v3 = virtualinvoke v2.<java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>();
if v3 == 0 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
public java.util.Set keys()
{
java.util.Enumeration v5;
java.util.concurrent.ConcurrentHashMap v1, v4;
java.util.Set v2;
io.smallrye.mutiny.Context v0;
java.util.HashSet v3;
java.lang.Object v7;
boolean v6;
v0 := @this: io.smallrye.mutiny.Context;
v1 = v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
if v1 != null goto label1;
v2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
return v2;
label1:
v3 = new java.util.HashSet;
specialinvoke v3.<java.util.HashSet: void <init>()>();
v4 = v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
v5 = virtualinvoke v4.<java.util.concurrent.ConcurrentHashMap: java.util.Enumeration keys()>();
label2:
v6 = interfaceinvoke v5.<java.util.Enumeration: boolean hasMoreElements()>();
if v6 == 0 goto label3;
v7 = interfaceinvoke v5.<java.util.Enumeration: java.lang.Object nextElement()>();
virtualinvoke v3.<java.util.HashSet: boolean add(java.lang.Object)>(v7);
goto label2;
label3:
return v3;
}
public boolean equals(java.lang.Object)
{
java.util.concurrent.ConcurrentHashMap v4, v5;
java.lang.Class v2, v3;
java.lang.Object v1;
io.smallrye.mutiny.Context v0;
boolean v6;
v0 := @this: io.smallrye.mutiny.Context;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
v5 = v1.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
v6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v4, v5);
return v6;
}
public int hashCode()
{
java.lang.Object[] v1;
int v3;
java.util.concurrent.ConcurrentHashMap v2;
io.smallrye.mutiny.Context v0;
v0 := @this: io.smallrye.mutiny.Context;
v1 = newarray (java.lang.Object)[1];
v2 = v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
v1[0] = v2;
v3 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>(v1);
return v3;
}
public java.lang.String toString()
{
java.util.concurrent.ConcurrentHashMap v1;
java.lang.String v2;
io.smallrye.mutiny.Context v0;
v0 := @this: io.smallrye.mutiny.Context;
v1 = v0.<io.smallrye.mutiny.Context: java.util.concurrent.ConcurrentHashMap entries>;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.concurrent.ConcurrentHashMap)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Context{entries=\u0001}");
return v2;
}
}