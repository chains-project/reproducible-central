public interface  io.smallrye.mutiny.Multi extends java.lang.Object implements java.util.concurrent.Flow$Publisher
{
public static io.smallrye.mutiny.groups.MultiCreate createFrom()
{
io.smallrye.mutiny.groups.MultiCreate v0;
v0 = <io.smallrye.mutiny.groups.MultiCreate: io.smallrye.mutiny.groups.MultiCreate INSTANCE>;
return v0;
}
public static io.smallrye.mutiny.groups.MultiCreateBy createBy()
{
io.smallrye.mutiny.groups.MultiCreateBy v0;
v0 = <io.smallrye.mutiny.groups.MultiCreateBy: io.smallrye.mutiny.groups.MultiCreateBy INSTANCE>;
return v0;
}
public abstract io.smallrye.mutiny.groups.MultiSubscribe subscribe();
public abstract io.smallrye.mutiny.groups.MultiOnItem onItem();
public java.lang.Object stage(java.util.function.Function)
{
java.lang.Object v2, v3;
java.util.function.Function v1;
io.smallrye.mutiny.Multi v0;
v0 := @this: io.smallrye.mutiny.Multi;
v1 := @parameter0: java.util.function.Function;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "stage");
v3 = interfaceinvoke v2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v0);
return v3;
}
public abstract io.smallrye.mutiny.Uni toUni();
public abstract io.smallrye.mutiny.groups.MultiOnFailure onFailure();
public abstract io.smallrye.mutiny.groups.MultiOnFailure onFailure(java.util.function.Predicate);
public abstract io.smallrye.mutiny.groups.MultiOnSubscribe onSubscription();
public abstract io.smallrye.mutiny.groups.MultiOnFailure onFailure(java.lang.Class);
public abstract io.smallrye.mutiny.groups.MultiIfNoItem ifNoItem();
public abstract io.smallrye.mutiny.Multi cache();
public abstract io.smallrye.mutiny.groups.MultiCollect collect();
public abstract io.smallrye.mutiny.groups.MultiGroup group();
public abstract io.smallrye.mutiny.Multi emitOn(java.util.concurrent.Executor);
public abstract io.smallrye.mutiny.Multi runSubscriptionOn(java.util.concurrent.Executor);
public abstract io.smallrye.mutiny.groups.MultiOnCompletion onCompletion();
public abstract io.smallrye.mutiny.groups.MultiSelect select();
public abstract io.smallrye.mutiny.groups.MultiSkip skip();
public abstract io.smallrye.mutiny.groups.MultiOverflow onOverflow();
public abstract io.smallrye.mutiny.groups.MultiBroadcast broadcast();
public abstract io.smallrye.mutiny.groups.MultiConvert convert();
public io.smallrye.mutiny.Multi filter(java.util.function.Predicate)
{
io.smallrye.mutiny.groups.MultiSelect v2;
java.util.function.Predicate v1;
io.smallrye.mutiny.Multi v0, v3;
v0 := @this: io.smallrye.mutiny.Multi;
v1 := @parameter0: java.util.function.Predicate;
v2 = interfaceinvoke v0.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSelect select()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSelect: io.smallrye.mutiny.Multi where(java.util.function.Predicate)>(v1);
return v3;
}
public io.smallrye.mutiny.Multi map(java.util.function.Function)
{
io.smallrye.mutiny.groups.MultiOnItem v2;
java.util.function.Function v1;
io.smallrye.mutiny.Multi v0, v3;
v0 := @this: io.smallrye.mutiny.Multi;
v1 := @parameter0: java.util.function.Function;
v2 = interfaceinvoke v0.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiOnItem onItem()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiOnItem: io.smallrye.mutiny.Multi transform(java.util.function.Function)>(v1);
return v3;
}
public io.smallrye.mutiny.Multi flatMap(java.util.function.Function)
{
io.smallrye.mutiny.groups.MultiOnItem v2;
java.util.function.Function v1;
io.smallrye.mutiny.Multi v0, v3;
v0 := @this: io.smallrye.mutiny.Multi;
v1 := @parameter0: java.util.function.Function;
v2 = interfaceinvoke v0.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiOnItem onItem()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiOnItem: io.smallrye.mutiny.Multi transformToMultiAndMerge(java.util.function.Function)>(v1);
return v3;
}
public io.smallrye.mutiny.Multi call(java.util.function.Function)
{
io.smallrye.mutiny.groups.MultiOnItem v2;
java.util.function.Function v1;
io.smallrye.mutiny.Multi v0, v3;
v0 := @this: io.smallrye.mutiny.Multi;
v1 := @parameter0: java.util.function.Function;
v2 = interfaceinvoke v0.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiOnItem onItem()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiOnItem: io.smallrye.mutiny.Multi call(java.util.function.Function)>(v1);
return v3;
}
public io.smallrye.mutiny.Multi call(java.util.function.Supplier)
{
io.smallrye.mutiny.groups.MultiOnItem v2;
java.util.function.Supplier v1;
io.smallrye.mutiny.Multi v0, v3;
v0 := @this: io.smallrye.mutiny.Multi;
v1 := @parameter0: java.util.function.Supplier;
v2 = interfaceinvoke v0.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiOnItem onItem()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiOnItem: io.smallrye.mutiny.Multi call(java.util.function.Supplier)>(v1);
return v3;
}
public io.smallrye.mutiny.Multi invoke(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.groups.MultiOnItem v2;
java.lang.Object v3;
io.smallrye.mutiny.Multi v0, v4;
v0 := @this: io.smallrye.mutiny.Multi;
v1 := @parameter0: java.util.function.Consumer;
v2 = interfaceinvoke v0.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiOnItem onItem()>();
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "callback");
v4 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiOnItem: io.smallrye.mutiny.Multi invoke(java.util.function.Consumer)>(v3);
return v4;
}
public io.smallrye.mutiny.Multi invoke(java.lang.Runnable)
{
io.smallrye.mutiny.groups.MultiOnItem v2;
java.lang.Runnable v1;
io.smallrye.mutiny.Multi v0, v3;
v0 := @this: io.smallrye.mutiny.Multi;
v1 := @parameter0: java.lang.Runnable;
v2 = interfaceinvoke v0.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiOnItem onItem()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiOnItem: io.smallrye.mutiny.Multi invoke(java.lang.Runnable)>(v1);
return v3;
}
public io.smallrye.mutiny.Multi concatMap(java.util.function.Function)
{
io.smallrye.mutiny.groups.MultiOnItem v2;
java.util.function.Function v1;
io.smallrye.mutiny.Multi v0, v3;
v0 := @this: io.smallrye.mutiny.Multi;
v1 := @parameter0: java.util.function.Function;
v2 = interfaceinvoke v0.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiOnItem onItem()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiOnItem: io.smallrye.mutiny.Multi transformToMultiAndConcatenate(java.util.function.Function)>(v1);
return v3;
}
public abstract io.smallrye.mutiny.groups.MultiOnTerminate onTermination();
public abstract io.smallrye.mutiny.groups.MultiOnCancel onCancellation();
public abstract io.smallrye.mutiny.groups.MultiOnRequest onRequest();
public io.smallrye.mutiny.Multi plug(java.util.function.Function)
{
java.lang.Object v2, v3, v4;
java.util.function.Function v1;
io.smallrye.mutiny.Multi v0, v5;
v0 := @this: io.smallrye.mutiny.Multi;
v1 := @parameter0: java.util.function.Function;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "operatorProvider");
v3 = interfaceinvoke v2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v0);
v4 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v3, "multi");
v5 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v4);
return v5;
}
public abstract io.smallrye.mutiny.Multi toHotStream();
public abstract io.smallrye.mutiny.Multi log(java.lang.String);
public abstract io.smallrye.mutiny.Multi log();
public io.smallrye.mutiny.Multi withContext(java.util.function.BiFunction)
{
java.lang.UnsupportedOperationException v2;
io.smallrye.mutiny.Multi v0;
java.util.function.BiFunction v1;
v0 := @this: io.smallrye.mutiny.Multi;
v1 := @parameter0: java.util.function.BiFunction;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Default method added to limit binary incompatibility");
throw v2;
}
public io.smallrye.mutiny.Multi attachContext()
{
io.smallrye.mutiny.Multi v0, v2;
java.util.function.BiFunction v1;
v0 := @this: io.smallrye.mutiny.Multi;
v1 = staticinvoke <io.smallrye.mutiny.Multi$lambda_attachContext_1__2624: java.util.function.BiFunction bootstrap$()>();
v2 = interfaceinvoke v0.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.Multi withContext(java.util.function.BiFunction)>(v1);
return v2;
}
public abstract io.smallrye.mutiny.groups.MultiDemandPacing paceDemand();
public io.smallrye.mutiny.Multi capDemandsTo(long)
{
java.util.function.LongFunction v3;
long v1, v2;
io.smallrye.mutiny.Multi v0, v4;
v0 := @this: io.smallrye.mutiny.Multi;
v1 := @parameter0: long;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: long positive(long,java.lang.String)>(v1, "max");
v3 = staticinvoke <io.smallrye.mutiny.Multi$lambda_capDemandsTo_2__2625: java.util.function.LongFunction bootstrap$(long)>(v2);
v4 = interfaceinvoke v0.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.Multi capDemandsUsing(java.util.function.LongFunction)>(v3);
return v4;
}
public abstract io.smallrye.mutiny.Multi capDemandsUsing(java.util.function.LongFunction);
}