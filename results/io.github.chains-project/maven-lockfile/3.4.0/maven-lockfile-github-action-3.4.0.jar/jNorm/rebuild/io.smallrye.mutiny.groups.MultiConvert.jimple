public class io.smallrye.mutiny.groups.MultiConvert extends java.lang.Object
{
private final io.smallrye.mutiny.Multi upstream;
public void <init>(io.smallrye.mutiny.Multi)
{
io.smallrye.mutiny.groups.MultiConvert v0;
java.lang.Object v2;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.groups.MultiConvert;
v1 := @parameter0: io.smallrye.mutiny.Multi;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "upstream");
v0.<io.smallrye.mutiny.groups.MultiConvert: io.smallrye.mutiny.Multi upstream> = v2;
return;
}
public java.lang.Object 'with'(java.util.function.Function)
{
io.smallrye.mutiny.groups.MultiConvert v0;
java.lang.Object v3;
java.util.function.Function v1;
io.smallrye.mutiny.Multi v2;
v0 := @this: io.smallrye.mutiny.groups.MultiConvert;
v1 := @parameter0: java.util.function.Function;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "converter");
v2 = v0.<io.smallrye.mutiny.groups.MultiConvert: io.smallrye.mutiny.Multi upstream>;
v3 = interfaceinvoke v1.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v2);
return v3;
}
public java.util.concurrent.Flow$Publisher toPublisher()
{
io.smallrye.mutiny.groups.MultiConvert v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.groups.MultiConvert;
v1 = v0.<io.smallrye.mutiny.groups.MultiConvert: io.smallrye.mutiny.Multi upstream>;
return v1;
}
}