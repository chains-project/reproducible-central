public class io.smallrye.mutiny.groups.MultiFlatten extends java.lang.Object
{
private final java.util.function.Function mapper;
private final io.smallrye.mutiny.Multi upstream;
private final int requests;
private final boolean collectFailureUntilCompletion;
void <init>(io.smallrye.mutiny.Multi, java.util.function.Function, int, boolean)
{
int v3;
java.util.function.Function v2;
io.smallrye.mutiny.Multi v1;
io.smallrye.mutiny.groups.MultiFlatten v0;
boolean v4;
v0 := @this: io.smallrye.mutiny.groups.MultiFlatten;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.function.Function;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.groups.MultiFlatten: io.smallrye.mutiny.Multi upstream> = v1;
v0.<io.smallrye.mutiny.groups.MultiFlatten: java.util.function.Function mapper> = v2;
v0.<io.smallrye.mutiny.groups.MultiFlatten: int requests> = v3;
v0.<io.smallrye.mutiny.groups.MultiFlatten: boolean collectFailureUntilCompletion> = v4;
return;
}
public io.smallrye.mutiny.groups.MultiFlatten collectFailures()
{
int v4;
java.util.function.Function v3;
io.smallrye.mutiny.Multi v2;
io.smallrye.mutiny.groups.MultiFlatten v0, v1;
v0 := @this: io.smallrye.mutiny.groups.MultiFlatten;
v1 = new io.smallrye.mutiny.groups.MultiFlatten;
v2 = v0.<io.smallrye.mutiny.groups.MultiFlatten: io.smallrye.mutiny.Multi upstream>;
v3 = v0.<io.smallrye.mutiny.groups.MultiFlatten: java.util.function.Function mapper>;
v4 = v0.<io.smallrye.mutiny.groups.MultiFlatten: int requests>;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiFlatten: void <init>(io.smallrye.mutiny.Multi,java.util.function.Function,int,boolean)>(v2, v3, v4, 1);
return v1;
}
public io.smallrye.mutiny.groups.MultiFlatten withRequests(int)
{
int v1, v5;
java.util.function.Function v4;
io.smallrye.mutiny.Multi v3;
io.smallrye.mutiny.groups.MultiFlatten v0, v2;
boolean v6;
v0 := @this: io.smallrye.mutiny.groups.MultiFlatten;
v1 := @parameter0: int;
v2 = new io.smallrye.mutiny.groups.MultiFlatten;
v3 = v0.<io.smallrye.mutiny.groups.MultiFlatten: io.smallrye.mutiny.Multi upstream>;
v4 = v0.<io.smallrye.mutiny.groups.MultiFlatten: java.util.function.Function mapper>;
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v1, "requests");
v6 = v0.<io.smallrye.mutiny.groups.MultiFlatten: boolean collectFailureUntilCompletion>;
specialinvoke v2.<io.smallrye.mutiny.groups.MultiFlatten: void <init>(io.smallrye.mutiny.Multi,java.util.function.Function,int,boolean)>(v3, v4, v5, v6);
return v2;
}
public io.smallrye.mutiny.Multi merge()
{
int v1;
io.smallrye.mutiny.Multi v2;
io.smallrye.mutiny.groups.MultiFlatten v0;
v0 := @this: io.smallrye.mutiny.groups.MultiFlatten;
v1 = <io.smallrye.mutiny.helpers.queues.Queues: int BUFFER_S>;
v2 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiFlatten: io.smallrye.mutiny.Multi merge(int)>(v1);
return v2;
}
public io.smallrye.mutiny.Multi merge(int)
{
io.smallrye.mutiny.operators.multi.MultiFlatMapOp v2;
java.util.function.Function v4;
io.smallrye.mutiny.Multi v3, v7;
io.smallrye.mutiny.groups.MultiFlatten v0;
int v1, v6;
boolean v5;
v0 := @this: io.smallrye.mutiny.groups.MultiFlatten;
v1 := @parameter0: int;
v2 = new io.smallrye.mutiny.operators.multi.MultiFlatMapOp;
v3 = v0.<io.smallrye.mutiny.groups.MultiFlatten: io.smallrye.mutiny.Multi upstream>;
v4 = v0.<io.smallrye.mutiny.groups.MultiFlatten: java.util.function.Function mapper>;
v5 = v0.<io.smallrye.mutiny.groups.MultiFlatten: boolean collectFailureUntilCompletion>;
v6 = v0.<io.smallrye.mutiny.groups.MultiFlatten: int requests>;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp: void <init>(io.smallrye.mutiny.Multi,java.util.function.Function,boolean,int,int)>(v3, v4, v5, v1, v6);
v7 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v2);
return v7;
}
public io.smallrye.mutiny.Multi concatenate(boolean)
{
io.smallrye.mutiny.operators.multi.MultiFlatMapOp v2;
java.util.function.Function v10, v5;
io.smallrye.mutiny.Multi v12, v4, v9;
io.smallrye.mutiny.groups.MultiFlatten v0;
int v7;
io.smallrye.mutiny.operators.multi.MultiConcatMapOp v8;
io.smallrye.mutiny.operators.multi.AbstractMultiOperator v3;
boolean v1, v11, v6;
v0 := @this: io.smallrye.mutiny.groups.MultiFlatten;
v1 := @parameter0: boolean;
if v1 == 0 goto label1;
v2 = new io.smallrye.mutiny.operators.multi.MultiFlatMapOp;
v3 = v2;
v4 = v0.<io.smallrye.mutiny.groups.MultiFlatten: io.smallrye.mutiny.Multi upstream>;
v5 = v0.<io.smallrye.mutiny.groups.MultiFlatten: java.util.function.Function mapper>;
v6 = v0.<io.smallrye.mutiny.groups.MultiFlatten: boolean collectFailureUntilCompletion>;
v7 = v0.<io.smallrye.mutiny.groups.MultiFlatten: int requests>;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp: void <init>(io.smallrye.mutiny.Multi,java.util.function.Function,boolean,int,int)>(v4, v5, v6, 1, v7);
goto label2;
label1:
v8 = new io.smallrye.mutiny.operators.multi.MultiConcatMapOp;
v3 = v8;
v9 = v0.<io.smallrye.mutiny.groups.MultiFlatten: io.smallrye.mutiny.Multi upstream>;
v10 = v0.<io.smallrye.mutiny.groups.MultiFlatten: java.util.function.Function mapper>;
v11 = v0.<io.smallrye.mutiny.groups.MultiFlatten: boolean collectFailureUntilCompletion>;
specialinvoke v8.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp: void <init>(io.smallrye.mutiny.Multi,java.util.function.Function,boolean)>(v9, v10, v11);
label2:
v12 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v3);
return v12;
}
public io.smallrye.mutiny.Multi concatenate()
{
io.smallrye.mutiny.Multi v1;
io.smallrye.mutiny.groups.MultiFlatten v0;
v0 := @this: io.smallrye.mutiny.groups.MultiFlatten;
v1 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiFlatten: io.smallrye.mutiny.Multi concatenate(boolean)>(0);
return v1;
}
}