public class io.smallrye.mutiny.groups.UniIfNoItem extends java.lang.Object
{
private final io.smallrye.mutiny.Uni upstream;
public void <init>(io.smallrye.mutiny.Uni)
{
io.smallrye.mutiny.groups.UniIfNoItem v0;
java.lang.Object v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.smallrye.mutiny.groups.UniIfNoItem;
v1 := @parameter0: io.smallrye.mutiny.Uni;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "upstream");
v0.<io.smallrye.mutiny.groups.UniIfNoItem: io.smallrye.mutiny.Uni upstream> = v2;
return;
}
public io.smallrye.mutiny.groups.UniOnTimeout after(java.time.Duration)
{
java.time.Duration v1, v4;
io.smallrye.mutiny.groups.UniIfNoItem v0;
io.smallrye.mutiny.groups.UniOnTimeout v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.smallrye.mutiny.groups.UniIfNoItem;
v1 := @parameter0: java.time.Duration;
v2 = new io.smallrye.mutiny.groups.UniOnTimeout;
v3 = v0.<io.smallrye.mutiny.groups.UniIfNoItem: io.smallrye.mutiny.Uni upstream>;
v4 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.time.Duration validate(java.time.Duration,java.lang.String)>(v1, "timeout");
specialinvoke v2.<io.smallrye.mutiny.groups.UniOnTimeout: void <init>(io.smallrye.mutiny.Uni,java.time.Duration,java.util.concurrent.ScheduledExecutorService)>(v3, v4, null);
return v2;
}
}