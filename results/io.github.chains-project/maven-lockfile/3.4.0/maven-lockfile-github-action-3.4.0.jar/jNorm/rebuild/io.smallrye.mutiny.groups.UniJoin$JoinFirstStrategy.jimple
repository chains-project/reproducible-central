public class io.smallrye.mutiny.groups.UniJoin$JoinFirstStrategy extends java.lang.Object implements io.smallrye.mutiny.groups.UniJoin$JoinFirstStrategyTerminal
{
private final java.util.List unis;
private int concurrency;
private void <init>(java.util.List)
{
int v2;
io.smallrye.mutiny.groups.UniJoin$JoinFirstStrategy v0;
java.util.List v1;
v0 := @this: io.smallrye.mutiny.groups.UniJoin$JoinFirstStrategy;
v1 := @parameter0: java.util.List;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = (int) -1;
v0.<io.smallrye.mutiny.groups.UniJoin$JoinFirstStrategy: int concurrency> = v2;
v0.<io.smallrye.mutiny.groups.UniJoin$JoinFirstStrategy: java.util.List unis> = v1;
return;
}
public io.smallrye.mutiny.groups.UniJoin$JoinFirstStrategyTerminal usingConcurrencyOf(int)
{
int v1, v2;
io.smallrye.mutiny.groups.UniJoin$JoinFirstStrategy v0;
v0 := @this: io.smallrye.mutiny.groups.UniJoin$JoinFirstStrategy;
v1 := @parameter0: int;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v1, "limit");
v0.<io.smallrye.mutiny.groups.UniJoin$JoinFirstStrategy: int concurrency> = v2;
return v0;
}
public io.smallrye.mutiny.Uni toTerminate()
{
io.smallrye.mutiny.operators.uni.builders.UniJoinFirst v1;
io.smallrye.mutiny.groups.UniJoin$JoinFirstStrategy v0;
java.util.List v2;
int v4;
io.smallrye.mutiny.Uni v5;
io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$Mode v3;
v0 := @this: io.smallrye.mutiny.groups.UniJoin$JoinFirstStrategy;
v1 = new io.smallrye.mutiny.operators.uni.builders.UniJoinFirst;
v2 = v0.<io.smallrye.mutiny.groups.UniJoin$JoinFirstStrategy: java.util.List unis>;
v3 = <io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$Mode: io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$Mode FIRST_TO_EMIT>;
v4 = v0.<io.smallrye.mutiny.groups.UniJoin$JoinFirstStrategy: int concurrency>;
specialinvoke v1.<io.smallrye.mutiny.operators.uni.builders.UniJoinFirst: void <init>(java.util.List,io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$Mode,int)>(v2, v3, v4);
v5 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Uni onUniCreation(io.smallrye.mutiny.Uni)>(v1);
return v5;
}
public io.smallrye.mutiny.Uni withItem()
{
io.smallrye.mutiny.operators.uni.builders.UniJoinFirst v1;
io.smallrye.mutiny.groups.UniJoin$JoinFirstStrategy v0;
java.util.List v2;
int v4;
io.smallrye.mutiny.Uni v5;
io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$Mode v3;
v0 := @this: io.smallrye.mutiny.groups.UniJoin$JoinFirstStrategy;
v1 = new io.smallrye.mutiny.operators.uni.builders.UniJoinFirst;
v2 = v0.<io.smallrye.mutiny.groups.UniJoin$JoinFirstStrategy: java.util.List unis>;
v3 = <io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$Mode: io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$Mode FIRST_WITH_ITEM>;
v4 = v0.<io.smallrye.mutiny.groups.UniJoin$JoinFirstStrategy: int concurrency>;
specialinvoke v1.<io.smallrye.mutiny.operators.uni.builders.UniJoinFirst: void <init>(java.util.List,io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$Mode,int)>(v2, v3, v4);
v5 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Uni onUniCreation(io.smallrye.mutiny.Uni)>(v1);
return v5;
}
}