public class io.smallrye.mutiny.helpers.ExponentialBackoff extends java.lang.Object
{
public static final java.time.Duration MAX_BACKOFF;
public static final double DEFAULT_JITTER;
private void <init>()
{
io.smallrye.mutiny.helpers.ExponentialBackoff v0;
v0 := @this: io.smallrye.mutiny.helpers.ExponentialBackoff;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.util.function.Function randomExponentialBackoffFunction(long, java.time.Duration, java.time.Duration, double, java.util.concurrent.ScheduledExecutorService)
{
java.util.concurrent.atomic.AtomicInteger v5;
java.time.Duration v1, v2;
java.util.concurrent.ScheduledExecutorService v4;
long v0;
java.util.function.Function v6;
double v3;
v0 := @parameter0: long;
v1 := @parameter1: java.time.Duration;
v2 := @parameter2: java.time.Duration;
v3 := @parameter3: double;
v4 := @parameter4: java.util.concurrent.ScheduledExecutorService;
staticinvoke <io.smallrye.mutiny.helpers.ExponentialBackoff: void validate(java.time.Duration,java.time.Duration,double,java.util.concurrent.ScheduledExecutorService)>(v1, v2, v3, v4);
v5 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v5.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v6 = staticinvoke <io.smallrye.mutiny.helpers.ExponentialBackoff$lambda_randomExponentialBackoffFunction_1__2747: java.util.function.Function bootstrap$(java.util.concurrent.atomic.AtomicInteger,long,java.time.Duration,java.time.Duration,double,java.util.concurrent.ScheduledExecutorService)>(v5, v0, v1, v2, v3, v4);
return v6;
}
private static java.time.Duration getNextDelay(java.time.Duration, java.time.Duration, double, int)
{
long v11, v12, v16, v5, v7, v8, v9;
byte v14, v15;
java.time.Duration v0, v1, v10, v17, v4, v6;
java.util.concurrent.ThreadLocalRandom v13;
int v3;
double v2;
v0 := @parameter0: java.time.Duration;
v1 := @parameter1: java.time.Duration;
v2 := @parameter2: double;
v3 := @parameter3: int;
v4 = staticinvoke <io.smallrye.mutiny.helpers.ExponentialBackoff: java.time.Duration getNextAttemptDelay(java.time.Duration,java.time.Duration,int)>(v0, v1, v3);
v5 = staticinvoke <io.smallrye.mutiny.helpers.ExponentialBackoff: long getJitter(double,java.time.Duration)>(v2, v4);
v6 = virtualinvoke v0.<java.time.Duration: java.time.Duration minus(java.time.Duration)>(v4);
v7 = virtualinvoke v6.<java.time.Duration: long toMillis()>();
v8 = neg v5;
v9 = staticinvoke <java.lang.Math: long max(long,long)>(v7, v8);
v10 = virtualinvoke v1.<java.time.Duration: java.time.Duration minus(java.time.Duration)>(v4);
v11 = virtualinvoke v10.<java.time.Duration: long toMillis()>();
v12 = staticinvoke <java.lang.Math: long min(long,long)>(v11, v5);
v13 = staticinvoke <java.util.concurrent.ThreadLocalRandom: java.util.concurrent.ThreadLocalRandom current()>();
v14 = v12 cmp v9;
if v14 != 0 goto label2;
v15 = v12 cmp 0L;
if v15 != 0 goto label1;
v16 = 0L;
goto label3;
label1:
v16 = virtualinvoke v13.<java.util.concurrent.ThreadLocalRandom: long nextLong(long)>(v12);
goto label3;
label2:
v16 = virtualinvoke v13.<java.util.concurrent.ThreadLocalRandom: long nextLong(long,long)>(v9, v12);
label3:
v17 = virtualinvoke v4.<java.time.Duration: java.time.Duration plusMillis(long)>(v16);
return v17;
}
private static void validate(java.time.Duration, java.time.Duration, double, java.util.concurrent.ScheduledExecutorService)
{
byte v4, v5;
java.time.Duration v0, v1;
java.util.concurrent.ScheduledExecutorService v3;
java.lang.IllegalArgumentException v6;
double v2;
v0 := @parameter0: java.time.Duration;
v1 := @parameter1: java.time.Duration;
v2 := @parameter2: double;
v3 := @parameter3: java.util.concurrent.ScheduledExecutorService;
v4 = v2 cmpg 0.0;
if v4 < 0 goto label1;
v5 = v2 cmpl 1.0;
if v5 <= 0 goto label2;
label1:
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("jitterFactor must be between 0 and 1 (default 0.5)");
throw v6;
label2:
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v0, "firstBackoff");
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "maxBackoff");
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v3, "executor");
return;
}
public static java.util.function.Function randomExponentialBackoffFunctionExpireAt(long, java.time.Duration, java.time.Duration, double, java.util.concurrent.ScheduledExecutorService)
{
java.util.concurrent.atomic.AtomicInteger v5;
java.time.Duration v1, v2;
java.util.concurrent.ScheduledExecutorService v4;
long v0;
java.util.function.Function v6;
double v3;
v0 := @parameter0: long;
v1 := @parameter1: java.time.Duration;
v2 := @parameter2: java.time.Duration;
v3 := @parameter3: double;
v4 := @parameter4: java.util.concurrent.ScheduledExecutorService;
staticinvoke <io.smallrye.mutiny.helpers.ExponentialBackoff: void validate(java.time.Duration,java.time.Duration,double,java.util.concurrent.ScheduledExecutorService)>(v1, v2, v3, v4);
v5 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v5.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v6 = staticinvoke <io.smallrye.mutiny.helpers.ExponentialBackoff$lambda_randomExponentialBackoffFunctionExpireAt_3__2748: java.util.function.Function bootstrap$(java.util.concurrent.atomic.AtomicInteger,java.time.Duration,java.time.Duration,double,long,java.util.concurrent.ScheduledExecutorService)>(v5, v1, v2, v3, v0, v4);
return v6;
}
private static long getJitter(double, java.time.Duration)
{
long v5;
java.time.Duration v1, v3, v4;
java.lang.ArithmeticException v6;
double v0, v2, v7;
v0 := @parameter0: double;
v1 := @parameter1: java.time.Duration;
label1:
v2 = 100.0 * v0;
v3 = virtualinvoke v1.<java.time.Duration: java.time.Duration multipliedBy(long)>(v2);
v4 = virtualinvoke v3.<java.time.Duration: java.time.Duration dividedBy(long)>(100L);
v5 = virtualinvoke v4.<java.time.Duration: long toMillis()>();
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = 9.223372036854776E18 * v0;
v5 = staticinvoke <java.lang.Math: long round(double)>(v7);
label4:
return v5;
catch java.lang.ArithmeticException from label1 to label2 with label3;
}
private static java.time.Duration getNextAttemptDelay(java.time.Duration, java.time.Duration, int)
{
java.time.Duration v0, v1, v4;
int v2, v5;
java.lang.ArithmeticException v6;
double v3;
v0 := @parameter0: java.time.Duration;
v1 := @parameter1: java.time.Duration;
v2 := @parameter2: int;
label1:
v3 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, v2);
v4 = virtualinvoke v0.<java.time.Duration: java.time.Duration multipliedBy(long)>(v3);
v5 = virtualinvoke v4.<java.time.Duration: int compareTo(java.time.Duration)>(v1);
if v5 <= 0 goto label4;
v4 = v1;
label2:
goto label4;
label3:
v6 := @caughtexception;
v4 = v1;
label4:
return v4;
catch java.lang.ArithmeticException from label1 to label2 with label3;
}
static void <clinit>()
{
java.time.Duration v0;
v0 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(9223372036854775807L);
<io.smallrye.mutiny.helpers.ExponentialBackoff: java.time.Duration MAX_BACKOFF> = v0;
return;
}
}