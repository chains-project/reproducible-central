public class io.smallrye.mutiny.helpers.test.AssertionHelper extends java.lang.Object
{
public void <init>()
{
io.smallrye.mutiny.helpers.test.AssertionHelper v0;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertionHelper;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void shouldHaveCompleted(boolean, java.lang.Throwable, java.util.List)
{
java.lang.Throwable v1;
java.lang.Object[] v3, v6, v8;
java.util.List v2;
java.lang.String v4, v7;
boolean v0, v5;
v0 := @parameter0: boolean;
v1 := @parameter1: java.lang.Throwable;
v2 := @parameter2: java.util.List;
if v0 == 0 goto label1;
return;
label1:
if v1 == null goto label2;
v3 = newarray (java.lang.Object)[2];
v3[0] = v1;
v4 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: java.lang.String getStackTrace(java.lang.Throwable)>(v1);
v3[1] = v4;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected a completion event, but received a failure event <%s>:%n<%s>", v3);
goto label4;
label2:
if v2 == null goto label3;
v5 = interfaceinvoke v2.<java.util.List: boolean isEmpty()>();
if v5 != 0 goto label3;
v6 = newarray (java.lang.Object)[1];
v7 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: java.lang.String getItemList(java.util.List)>(v2);
v6[0] = v7;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected a completion event, but didn\'t received it.%nThe subscriber received item events:%n<%s>", v6);
goto label4;
label3:
v8 = newarray (java.lang.Object)[0];
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected a completion event, but didn\'t received it.", v8);
label4:
return;
}
static void shouldHaveFailed(boolean, java.lang.Throwable, java.lang.Class, java.lang.String)
{
java.lang.Throwable v1;
java.lang.Object[] v10, v13, v4, v5, v7;
java.lang.Class v2;
java.lang.String v11, v14, v3, v8, v9;
boolean v0, v12, v6;
v0 := @parameter0: boolean;
v1 := @parameter1: java.lang.Throwable;
v2 := @parameter2: java.lang.Class;
v3 := @parameter3: java.lang.String;
if v0 == 0 goto label1;
v4 = newarray (java.lang.Object)[0];
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected a failure event, but instead got a completion event.", v4);
goto label2;
label1:
if v1 != null goto label2;
v5 = newarray (java.lang.Object)[0];
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected a failure event, but didn\'t received it. It didn\'t receive a completion event either.", v5);
label2:
if v2 == null goto label3;
v6 = virtualinvoke v2.<java.lang.Class: boolean isInstance(java.lang.Object)>(v1);
if v6 != 0 goto label3;
v7 = newarray (java.lang.Object)[3];
v7[0] = v1;
v7[1] = v2;
v8 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: java.lang.String getStackTrace(java.lang.Throwable)>(v1);
v7[2] = v8;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nReceived a failure event, but expecting:%n  <%s>%nto be an instance of:%n  <%s>%nbut was:%n  <%s>", v7);
label3:
if v3 == null goto label5;
v9 = virtualinvoke v1.<java.lang.Throwable: java.lang.String getMessage()>();
if v9 != null goto label4;
v10 = newarray (java.lang.Object)[3];
v10[0] = v9;
v10[1] = v3;
v11 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: java.lang.String getStackTrace(java.lang.Throwable)>(v1);
v10[2] = v11;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nReceived a failure event, but expecting:%n  <%s>%nto contain:%n  <%s>%nbut was:%n  <%s>", v10);
goto label5;
label4:
v12 = virtualinvoke v9.<java.lang.String: boolean contains(java.lang.CharSequence)>(v3);
if v12 != 0 goto label5;
v13 = newarray (java.lang.Object)[3];
v13[0] = v9;
v13[1] = v3;
v14 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: java.lang.String getStackTrace(java.lang.Throwable)>(v1);
v13[2] = v14;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nReceived a failure event, but expecting:%n  <%s>%nto contain:%n  <%s>%nbut was:%n  <%s>", v13);
label5:
return;
}
static void shouldHaveReceivedNoItems(java.util.List)
{
java.util.List v0;
java.lang.Object[] v2;
int v3;
java.lang.String v5;
java.lang.Integer v4;
boolean v1;
v0 := @parameter0: java.util.List;
v1 = interfaceinvoke v0.<java.util.List: boolean isEmpty()>();
if v1 != 0 goto label1;
v2 = newarray (java.lang.Object)[2];
v3 = interfaceinvoke v0.<java.util.List: int size()>();
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v2[0] = v4;
v5 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: java.lang.String getItemList(java.util.List)>(v0);
v2[1] = v5;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected no item events but received %d items:%n<%s>", v2);
label1:
return;
}
static void shouldBeSubscribed(int)
{
java.lang.Object[] v1, v2;
int v0;
java.lang.Integer v3;
v0 := @parameter0: int;
if v0 != 0 goto label1;
v1 = newarray (java.lang.Object)[0];
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected having a subscription, but didn\'t received it.", v1);
label1:
if v0 <= 1 goto label2;
v2 = newarray (java.lang.Object)[1];
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v0);
v2[0] = v3;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected a single subscription, but received %d subscriptions.", v2);
label2:
return;
}
static void shouldNotBeSubscribed(int)
{
int v0;
java.lang.Object[] v1;
java.lang.Integer v2;
v0 := @parameter0: int;
if v0 == 0 goto label1;
v1 = newarray (java.lang.Object)[1];
v2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v0);
v1[0] = v2;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected no subscription, but received %d subscriptions.", v1);
label1:
return;
}
static void shouldNotBeTerminated(boolean, java.lang.Throwable)
{
java.lang.Throwable v1;
java.lang.Object[] v2, v3;
java.lang.String v4;
boolean v0;
v0 := @parameter0: boolean;
v1 := @parameter1: java.lang.Throwable;
if v0 == 0 goto label1;
v2 = newarray (java.lang.Object)[0];
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected no terminal event, but received a completion event.", v2);
goto label2;
label1:
if v1 == null goto label2;
v3 = newarray (java.lang.Object)[2];
v3[0] = v1;
v4 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: java.lang.String getStackTrace(java.lang.Throwable)>(v1);
v3[1] = v4;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected no terminal event, but received a failure event: <%s>:%n<%s>", v3);
label2:
return;
}
static void shouldNotBeTerminatedUni(boolean, java.lang.Throwable)
{
java.lang.Throwable v1;
java.lang.Object[] v2, v4;
java.lang.String v5;
boolean v0, v3;
v0 := @parameter0: boolean;
v1 := @parameter1: java.lang.Throwable;
if v0 == 0 goto label1;
v2 = newarray (java.lang.Object)[0];
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected no terminal event, but received a completion event.", v2);
goto label2;
label1:
if v1 == null goto label2;
v3 = v1 instanceof java.util.concurrent.CancellationException;
if v3 != 0 goto label2;
v4 = newarray (java.lang.Object)[2];
v4[0] = v1;
v5 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: java.lang.String getStackTrace(java.lang.Throwable)>(v1);
v4[1] = v5;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected no terminal event, but received a failure event: <%s>:%n<%s>", v4);
label2:
return;
}
static void shouldBeTerminated(boolean, java.lang.Throwable)
{
java.lang.Throwable v1;
java.lang.Object[] v2;
boolean v0;
v0 := @parameter0: boolean;
v1 := @parameter1: java.lang.Throwable;
if v0 != 0 goto label1;
if v1 != null goto label1;
v2 = newarray (java.lang.Object)[0];
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected a terminal event (either a completion or failure event), but didn\'t received any.", v2);
label1:
return;
}
static void shouldHaveReceived(java.lang.Object, java.lang.Object)
{
java.lang.Object[] v2, v3, v5;
java.lang.Object v0, v1;
boolean v4;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
if v0 == null goto label1;
if v1 != null goto label1;
v2 = newarray (java.lang.Object)[1];
v2[0] = v0;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected `null` but received <%s>", v2);
goto label3;
label1:
if v0 != null goto label2;
if v1 == null goto label2;
v3 = newarray (java.lang.Object)[1];
v3[0] = v1;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected <%s> but received `null`", v3);
goto label3;
label2:
if v0 == null goto label3;
v4 = virtualinvoke v0.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v4 != 0 goto label3;
v5 = newarray (java.lang.Object)[2];
v5[0] = v1;
v5[1] = v0;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected <%s> but received <%s>", v5);
label3:
return;
}
static void shouldHaveReceivedExactly(java.util.List, java.lang.Object[])
{
java.lang.Object[] v1, v16, v20;
java.util.ArrayList v3;
java.util.LinkedHashMap v2;
int v5, v6;
java.lang.String v17, v18, v19, v21, v22, v23;
boolean v10, v11, v13, v14, v15, v8;
java.util.Iterator v4;
java.util.List v0;
java.lang.Object v12, v7, v9;
v0 := @parameter0: java.util.List;
v1 := @parameter1: java.lang.Object[];
v2 = new java.util.LinkedHashMap;
specialinvoke v2.<java.util.LinkedHashMap: void <init>()>();
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v4 = interfaceinvoke v0.<java.util.List: java.util.Iterator iterator()>();
v5 = lengthof v1;
v6 = 0;
label1:
if v6 >= v5 goto label4;
v7 = v1[v6];
v8 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v8 != 0 goto label2;
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v7, null);
goto label3;
label2:
v9 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v10 = virtualinvoke v9.<java.lang.Object: boolean equals(java.lang.Object)>(v7);
if v10 != 0 goto label3;
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v7, v9);
label3:
v6 = v6 + 1;
goto label1;
label4:
v11 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label5;
v12 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v12);
goto label4;
label5:
v13 = interfaceinvoke v2.<java.util.Map: boolean isEmpty()>();
if v13 == 0 goto label6;
v14 = interfaceinvoke v3.<java.util.List: boolean isEmpty()>();
if v14 == 0 goto label6;
return;
label6:
v15 = interfaceinvoke v2.<java.util.Map: boolean isEmpty()>();
if v15 != 0 goto label7;
v16 = newarray (java.lang.Object)[3];
v17 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: java.lang.String getItemList(java.lang.Object[])>(v1);
v16[0] = v17;
v18 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: java.lang.String getItemList(java.util.List)>(v0);
v16[1] = v18;
v19 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: java.lang.String getMismatches(java.util.Map)>(v2);
v16[2] = v19;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected to have received exactly:%n<%s>%nbut received:%n<%s>.%nMismatches are:%n%s", v16);
label7:
v20 = newarray (java.lang.Object)[3];
v21 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: java.lang.String getItemList(java.lang.Object[])>(v1);
v20[0] = v21;
v22 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: java.lang.String getItemList(java.util.List)>(v0);
v20[1] = v22;
v23 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: java.lang.String getItemList(java.util.List)>(v3);
v20[2] = v23;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void fail(java.lang.String,java.lang.Object[])>("%nExpected to have received exactly%n<%s>%nbut received%n<%s>.%nExpected the following items to be received:%n%s", v20);
return;
}
private static transient void fail(java.lang.String, java.lang.Object[])
{
java.lang.Object[] v1;
java.lang.AssertionError v2;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.Object[];
v2 = new java.lang.AssertionError;
v3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v0, v1);
specialinvoke v2.<java.lang.AssertionError: void <init>(java.lang.Object)>(v3);
throw v2;
}
private static java.lang.String getItemList(java.util.List)
{
java.util.List v0;
java.util.stream.Stream v1, v3;
java.lang.Object v5;
java.lang.String v6;
java.util.stream.Collector v4;
java.util.function.Function v2;
v0 := @parameter0: java.util.List;
v1 = interfaceinvoke v0.<java.util.List: java.util.stream.Stream stream()>();
v2 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper$toString__2806: java.util.function.Function bootstrap$()>();
v3 = interfaceinvoke v1.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v2);
v4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v5 = interfaceinvoke v3.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v4);
v6 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(",", v5);
return v6;
}
private static java.lang.String getItemList(java.lang.Object[])
{
java.lang.Object[] v0;
java.util.stream.Stream v1, v3;
java.lang.Object v5;
java.lang.String v6;
java.util.stream.Collector v4;
java.util.function.Function v2;
v0 := @parameter0: java.lang.Object[];
v1 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(v0);
v2 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper$toString__2807: java.util.function.Function bootstrap$()>();
v3 = interfaceinvoke v1.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v2);
v4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v5 = interfaceinvoke v3.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v4);
v6 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(",", v5);
return v6;
}
private static java.lang.String getMismatches(java.util.Map)
{
java.util.Map v0;
int v6;
java.lang.String v19;
boolean v4;
java.util.Iterator v3;
java.util.Set v2;
java.lang.Object v10, v14, v17, v5, v7;
java.lang.StringBuilder v1, v11, v12, v13, v15, v16, v18, v8, v9;
v0 := @parameter0: java.util.Map;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = interfaceinvoke v0.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label4;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = virtualinvoke v1.<java.lang.StringBuilder: int length()>();
if v6 == 0 goto label2;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
label2:
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
if v7 != null goto label3;
v8 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");
v9 = virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("- Missing expected item <");
v10 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v11 = virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v10);
virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");
goto label1;
label3:
v12 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");
v13 = virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("- Expected <");
v14 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
v15 = virtualinvoke v13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v14);
v16 = virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> to be equal to <");
v17 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v18 = virtualinvoke v16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v17);
virtualinvoke v18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");
goto label1;
label4:
v19 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v19;
}
private static java.lang.String getStackTrace(java.lang.Throwable)
{
java.io.PrintWriter v2, v4;
java.lang.Throwable v0, v7;
java.io.StringWriter v1, v3;
java.lang.StringBuffer v5;
java.lang.String v6;
v0 := @parameter0: java.lang.Throwable;
v1 = null;
v2 = null;
label1:
v3 = new java.io.StringWriter;
specialinvoke v3.<java.io.StringWriter: void <init>()>();
v1 = v3;
v4 = new java.io.PrintWriter;
specialinvoke v4.<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>(v3, 1);
v2 = v4;
virtualinvoke v0.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>(v4);
v5 = virtualinvoke v3.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();
v6 = virtualinvoke v5.<java.lang.StringBuffer: java.lang.String toString()>();
label2:
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void closeQuietly(java.io.Closeable)>(v3);
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void closeQuietly(java.io.Closeable)>(v4);
goto label4;
label3:
v7 := @caughtexception;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void closeQuietly(java.io.Closeable)>(v1);
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void closeQuietly(java.io.Closeable)>(v2);
throw v7;
label4:
return v6;
catch java.lang.Throwable from label1 to label2 with label3;
}
private static void closeQuietly(java.io.Closeable)
{
java.io.Closeable v0;
v0 := @parameter0: java.io.Closeable;
return;
}
}