public class io.smallrye.mutiny.helpers.test.UniAssertSubscriber extends java.lang.Object implements io.smallrye.mutiny.subscription.UniSubscriber
{
private volatile boolean cancelImmediatelyOnSubscription;
private final io.smallrye.mutiny.Context context;
private final java.util.concurrent.CompletableFuture completion;
private final java.util.concurrent.CompletableFuture subscribed;
private final java.util.concurrent.CompletableFuture hasCompleted;
private final java.util.concurrent.CompletableFuture hasSubscription;
private volatile io.smallrye.mutiny.subscription.UniSubscription subscription;
private volatile java.lang.Object item;
private volatile java.lang.Throwable failure;
private volatile boolean hasCompletedSuccessfully;
private volatile java.lang.String onResultThreadName;
private volatile java.lang.String onErrorThreadName;
private volatile java.lang.String onSubscribeThreadName;
private final java.util.List signals;
public void <init>(io.smallrye.mutiny.Context, boolean)
{
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
java.util.concurrent.CompletableFuture v10, v11, v13, v14, v3, v4, v7, v9;
io.smallrye.mutiny.Context v1;
java.util.function.Function v12;
java.util.ArrayList v5;
java.util.function.BiConsumer v8;
java.lang.Object v6;
boolean v2;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 := @parameter0: io.smallrye.mutiny.Context;
v2 := @parameter1: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.CompletableFuture;
specialinvoke v3.<java.util.concurrent.CompletableFuture: void <init>()>();
v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.concurrent.CompletableFuture completion> = v3;
v4 = new java.util.concurrent.CompletableFuture;
specialinvoke v4.<java.util.concurrent.CompletableFuture: void <init>()>();
v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.concurrent.CompletableFuture subscribed> = v4;
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>(int)>(4);
v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.List signals> = v5;
v6 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "context");
v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: io.smallrye.mutiny.Context context> = v6;
v7 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.concurrent.CompletableFuture completion>;
v8 = staticinvoke <io.smallrye.mutiny.helpers.test.UniAssertSubscriber$lambda_new_0__2799: java.util.function.BiConsumer bootstrap$(io.smallrye.mutiny.helpers.test.UniAssertSubscriber)>(v0);
v9 = virtualinvoke v7.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture whenComplete(java.util.function.BiConsumer)>(v8);
v10 = virtualinvoke v9.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture toCompletableFuture()>();
v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.concurrent.CompletableFuture hasCompleted> = v10;
v11 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.concurrent.CompletableFuture subscribed>;
v12 = staticinvoke <io.smallrye.mutiny.helpers.test.UniAssertSubscriber$lambda_new_1__2800: java.util.function.Function bootstrap$(io.smallrye.mutiny.helpers.test.UniAssertSubscriber)>(v0);
v13 = virtualinvoke v11.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture thenApply(java.util.function.Function)>(v12);
v14 = virtualinvoke v13.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture toCompletableFuture()>();
v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.concurrent.CompletableFuture hasSubscription> = v14;
v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: boolean cancelImmediatelyOnSubscription> = v2;
return;
}
public void <init>(boolean)
{
io.smallrye.mutiny.Context v2;
boolean v1;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 := @parameter0: boolean;
v2 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
specialinvoke v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: void <init>(io.smallrye.mutiny.Context,boolean)>(v2, v1);
return;
}
public void <init>()
{
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
specialinvoke v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: void <init>(boolean)>(0);
return;
}
public static io.smallrye.mutiny.helpers.test.UniAssertSubscriber create()
{
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
v0 = new io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
specialinvoke v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: void <init>()>();
return v0;
}
public static io.smallrye.mutiny.helpers.test.UniAssertSubscriber create(io.smallrye.mutiny.Context)
{
io.smallrye.mutiny.Context v0;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v1;
v0 := @parameter0: io.smallrye.mutiny.Context;
v1 = new io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
specialinvoke v1.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: void <init>(io.smallrye.mutiny.Context,boolean)>(v0, 0);
return v1;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.Context v1;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: io.smallrye.mutiny.Context context>;
return v1;
}
public synchronized void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)
{
io.smallrye.mutiny.subscription.UniSubscription v1;
java.util.List v2;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
java.util.concurrent.CompletableFuture v4, v6;
io.smallrye.mutiny.helpers.test.OnSubscribeUniSignal v3;
boolean v5;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscription;
v2 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.List signals>;
v3 = new io.smallrye.mutiny.helpers.test.OnSubscribeUniSignal;
specialinvoke v3.<io.smallrye.mutiny.helpers.test.OnSubscribeUniSignal: void <init>(io.smallrye.mutiny.subscription.UniSubscription)>(v1);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v3);
v4 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.concurrent.CompletableFuture subscribed>;
virtualinvoke v4.<java.util.concurrent.CompletableFuture: boolean complete(java.lang.Object)>(v1);
v5 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: boolean cancelImmediatelyOnSubscription>;
if v5 == 0 goto label1;
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscription: void cancel()>();
v6 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.concurrent.CompletableFuture completion>;
virtualinvoke v6.<java.util.concurrent.CompletableFuture: boolean cancel(boolean)>(0);
label1:
return;
}
public synchronized void onItem(java.lang.Object)
{
java.util.List v2;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
io.smallrye.mutiny.helpers.test.OnItemUniSignal v3;
java.lang.Object v1;
java.util.concurrent.CompletableFuture v4;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.List signals>;
v3 = new io.smallrye.mutiny.helpers.test.OnItemUniSignal;
specialinvoke v3.<io.smallrye.mutiny.helpers.test.OnItemUniSignal: void <init>(java.lang.Object)>(v1);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v3);
v4 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.concurrent.CompletableFuture completion>;
virtualinvoke v4.<java.util.concurrent.CompletableFuture: boolean complete(java.lang.Object)>(v1);
return;
}
public synchronized void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
java.util.List v2;
io.smallrye.mutiny.helpers.test.OnFailureUniSignal v3;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
java.util.concurrent.CompletableFuture v4;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.List signals>;
v3 = new io.smallrye.mutiny.helpers.test.OnFailureUniSignal;
specialinvoke v3.<io.smallrye.mutiny.helpers.test.OnFailureUniSignal: void <init>(java.lang.Throwable)>(v1);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v3);
v4 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.concurrent.CompletableFuture completion>;
virtualinvoke v4.<java.util.concurrent.CompletableFuture: boolean completeExceptionally(java.lang.Throwable)>(v1);
return;
}
public io.smallrye.mutiny.helpers.test.UniAssertSubscriber awaitItem()
{
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0, v2;
java.time.Duration v1;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 = <io.smallrye.mutiny.helpers.test.AssertSubscriber: java.time.Duration DEFAULT_TIMEOUT>;
v2 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: io.smallrye.mutiny.helpers.test.UniAssertSubscriber awaitItem(java.time.Duration)>(v1);
return v2;
}
public io.smallrye.mutiny.helpers.test.UniAssertSubscriber awaitItem(java.time.Duration)
{
java.lang.Throwable v7, v9;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
java.util.concurrent.TimeoutException v3;
java.util.concurrent.CompletableFuture v2;
long v5;
java.lang.AssertionError v4, v8;
java.time.Duration v1;
java.lang.String v10, v6;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 := @parameter0: java.time.Duration;
label1:
v2 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.concurrent.CompletableFuture hasCompleted>;
specialinvoke v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: void awaitEvent(java.util.concurrent.CompletableFuture,java.time.Duration)>(v2, v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new java.lang.AssertionError;
v5 = virtualinvoke v1.<java.time.Duration: long toMillis()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No item (or failure) event received in the last \u0001 ms");
specialinvoke v4.<java.lang.AssertionError: void <init>(java.lang.Object)>(v6);
throw v4;
label4:
v7 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.Throwable failure>;
if v7 != null goto label5;
return v0;
label5:
v8 = new java.lang.AssertionError;
v9 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.Throwable failure>;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Throwable)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected an item event but got a failure: \u0001");
specialinvoke v8.<java.lang.AssertionError: void <init>(java.lang.Object)>(v10);
throw v8;
catch java.util.concurrent.TimeoutException from label1 to label2 with label3;
}
public io.smallrye.mutiny.helpers.test.UniAssertSubscriber awaitFailure()
{
java.util.function.Consumer v1;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0, v2;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 = staticinvoke <io.smallrye.mutiny.helpers.test.UniAssertSubscriber$lambda_awaitFailure_2__2801: java.util.function.Consumer bootstrap$()>();
v2 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: io.smallrye.mutiny.helpers.test.UniAssertSubscriber awaitFailure(java.util.function.Consumer)>(v1);
return v2;
}
public io.smallrye.mutiny.helpers.test.UniAssertSubscriber awaitFailure(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0, v3;
java.time.Duration v2;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 := @parameter0: java.util.function.Consumer;
v2 = <io.smallrye.mutiny.helpers.test.AssertSubscriber: java.time.Duration DEFAULT_TIMEOUT>;
v3 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: io.smallrye.mutiny.helpers.test.UniAssertSubscriber awaitFailure(java.util.function.Consumer,java.time.Duration)>(v1, v2);
return v3;
}
public io.smallrye.mutiny.helpers.test.UniAssertSubscriber awaitFailure(java.time.Duration)
{
java.util.function.Consumer v2;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0, v3;
java.time.Duration v1;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 := @parameter0: java.time.Duration;
v2 = staticinvoke <io.smallrye.mutiny.helpers.test.UniAssertSubscriber$lambda_awaitFailure_3__2802: java.util.function.Consumer bootstrap$()>();
v3 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: io.smallrye.mutiny.helpers.test.UniAssertSubscriber awaitFailure(java.util.function.Consumer,java.time.Duration)>(v2, v1);
return v3;
}
public io.smallrye.mutiny.helpers.test.UniAssertSubscriber awaitFailure(java.util.function.Consumer, java.time.Duration)
{
java.lang.Throwable v12, v8;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
java.util.concurrent.TimeoutException v4;
java.util.concurrent.CompletableFuture v3;
long v6;
java.lang.AssertionError v13, v14, v5, v9;
java.time.Duration v2;
java.lang.String v11, v15, v7;
java.util.function.Consumer v1;
java.lang.Object v10;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 := @parameter0: java.util.function.Consumer;
v2 := @parameter1: java.time.Duration;
label1:
v3 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.concurrent.CompletableFuture hasCompleted>;
specialinvoke v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: void awaitEvent(java.util.concurrent.CompletableFuture,java.time.Duration)>(v3, v2);
label2:
goto label4;
label3:
v4 := @caughtexception;
v5 = new java.lang.AssertionError;
v6 = virtualinvoke v2.<java.time.Duration: long toMillis()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No item (or failure) event received in the last \u0001 ms");
specialinvoke v5.<java.lang.AssertionError: void <init>(java.lang.Object)>(v7);
throw v5;
label4:
v8 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.Throwable failure>;
if v8 != null goto label5;
v9 = new java.lang.AssertionError;
v10 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.Object item>;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected a failure event but got an item event: \u0001");
specialinvoke v9.<java.lang.AssertionError: void <init>(java.lang.Object)>(v11);
throw v9;
label5:
v12 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.Throwable failure>;
interfaceinvoke v1.<java.util.function.Consumer: void accept(java.lang.Object)>(v12);
label6:
return v0;
label7:
v13 := @caughtexception;
v14 = new java.lang.AssertionError;
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.AssertionError)>(v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Received a failure event, but that failure did not pass the validation: \u0001");
specialinvoke v14.<java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)>(v15, v13);
throw v14;
catch java.util.concurrent.TimeoutException from label1 to label2 with label3;
catch java.lang.AssertionError from label5 to label6 with label7;
}
public io.smallrye.mutiny.helpers.test.UniAssertSubscriber awaitSubscription()
{
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0, v2;
java.time.Duration v1;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 = <io.smallrye.mutiny.helpers.test.AssertSubscriber: java.time.Duration DEFAULT_TIMEOUT>;
v2 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: io.smallrye.mutiny.helpers.test.UniAssertSubscriber awaitSubscription(java.time.Duration)>(v1);
return v2;
}
public io.smallrye.mutiny.helpers.test.UniAssertSubscriber awaitSubscription(java.time.Duration)
{
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
java.time.Duration v1;
java.util.concurrent.TimeoutException v3;
java.util.concurrent.CompletableFuture v2;
long v5;
java.lang.AssertionError v4;
java.lang.String v6;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 := @parameter0: java.time.Duration;
label1:
v2 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.concurrent.CompletableFuture hasSubscription>;
specialinvoke v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: void awaitEvent(java.util.concurrent.CompletableFuture,java.time.Duration)>(v2, v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new java.lang.AssertionError;
v5 = virtualinvoke v1.<java.time.Duration: long toMillis()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expecting a subscription event in the last \u0001 ms, but did not get it");
specialinvoke v4.<java.lang.AssertionError: void <init>(java.lang.Object)>(v6);
throw v4;
label4:
return v0;
catch java.util.concurrent.TimeoutException from label1 to label2 with label3;
}
private void awaitEvent(java.util.concurrent.CompletableFuture, java.time.Duration) throws java.util.concurrent.TimeoutException
{
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
java.util.concurrent.CompletableFuture v1;
long v4;
java.util.concurrent.ExecutionException v8;
java.util.concurrent.TimeUnit v5;
java.lang.InterruptedException v6;
java.lang.Thread v7;
java.time.Duration v2;
boolean v3;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 := @parameter0: java.util.concurrent.CompletableFuture;
v2 := @parameter1: java.time.Duration;
v3 = virtualinvoke v1.<java.util.concurrent.CompletableFuture: boolean isDone()>();
if v3 == 0 goto label1;
return;
label1:
v4 = virtualinvoke v2.<java.time.Duration: long toMillis()>();
v5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
virtualinvoke v1.<java.util.concurrent.CompletableFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(v4, v5);
label2:
goto label5;
label3:
v6 := @caughtexception;
v7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v7.<java.lang.Thread: void interrupt()>();
goto label5;
label4:
v8 := @caughtexception;
label5:
return;
catch java.lang.InterruptedException from label1 to label2 with label3;
catch java.util.concurrent.ExecutionException from label1 to label2 with label4;
}
public synchronized io.smallrye.mutiny.helpers.test.UniAssertSubscriber assertCompleted()
{
java.lang.Throwable v2;
boolean v1;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: boolean hasCompletedSuccessfully>;
v2 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.Throwable failure>;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldHaveCompleted(boolean,java.lang.Throwable,java.util.List)>(v1, v2, null);
return v0;
}
public synchronized io.smallrye.mutiny.helpers.test.UniAssertSubscriber assertFailed()
{
java.lang.Throwable v2;
boolean v1;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: boolean hasCompletedSuccessfully>;
v2 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.Throwable failure>;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldHaveFailed(boolean,java.lang.Throwable,java.lang.Class,java.lang.String)>(v1, v2, null, null);
return v0;
}
public synchronized java.lang.Object getItem()
{
java.lang.Object v1;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.Object item>;
return v1;
}
public synchronized java.lang.Throwable getFailure()
{
java.lang.Throwable v1, v3;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
boolean v2;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.Throwable failure>;
v2 = v1 instanceof java.util.concurrent.CancellationException;
if v2 == 0 goto label1;
return null;
label1:
v3 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.Throwable failure>;
return v3;
}
public io.smallrye.mutiny.helpers.test.UniAssertSubscriber assertItem(java.lang.Object)
{
java.lang.Throwable v3;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
java.lang.Object v1, v4;
boolean v2;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: boolean hasCompletedSuccessfully>;
v3 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.Throwable failure>;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldHaveCompleted(boolean,java.lang.Throwable,java.util.List)>(v2, v3, null);
v4 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.Object getItem()>();
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldHaveReceived(java.lang.Object,java.lang.Object)>(v4, v1);
return v0;
}
public io.smallrye.mutiny.helpers.test.UniAssertSubscriber assertFailedWith(java.lang.Class, java.lang.String)
{
java.lang.Throwable v4;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
java.lang.Class v1;
java.lang.String v2;
boolean v3;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: boolean hasCompletedSuccessfully>;
v4 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.Throwable failure>;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldHaveFailed(boolean,java.lang.Throwable,java.lang.Class,java.lang.String)>(v3, v4, v1, v2);
return v0;
}
public io.smallrye.mutiny.helpers.test.UniAssertSubscriber assertFailedWith(java.lang.Class)
{
java.lang.Throwable v3;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
java.lang.Class v1;
boolean v2;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 := @parameter0: java.lang.Class;
v2 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: boolean hasCompletedSuccessfully>;
v3 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.Throwable failure>;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldHaveFailed(boolean,java.lang.Throwable,java.lang.Class,java.lang.String)>(v2, v3, v1, null);
return v0;
}
public java.lang.String getOnItemThreadName()
{
java.lang.String v1;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.String onResultThreadName>;
return v1;
}
public java.lang.String getOnFailureThreadName()
{
java.lang.String v1;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.String onErrorThreadName>;
return v1;
}
public java.lang.String getOnSubscribeThreadName()
{
java.lang.String v1;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.String onSubscribeThreadName>;
return v1;
}
public void cancel()
{
io.smallrye.mutiny.subscription.UniSubscription v3, v4;
java.util.List v1;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
io.smallrye.mutiny.helpers.test.OnCancellationUniSignal v2;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.List signals>;
v2 = new io.smallrye.mutiny.helpers.test.OnCancellationUniSignal;
specialinvoke v2.<io.smallrye.mutiny.helpers.test.OnCancellationUniSignal: void <init>()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v2);
v3 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: io.smallrye.mutiny.subscription.UniSubscription subscription>;
if v3 != null goto label1;
v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: boolean cancelImmediatelyOnSubscription> = 1;
goto label2;
label1:
v4 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: io.smallrye.mutiny.subscription.UniSubscription subscription>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.UniSubscription: void cancel()>();
label2:
return;
}
public io.smallrye.mutiny.helpers.test.UniAssertSubscriber assertTerminated()
{
java.lang.Throwable v2;
boolean v1;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: boolean hasCompletedSuccessfully>;
v2 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.Throwable failure>;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldBeTerminated(boolean,java.lang.Throwable)>(v1, v2);
return v0;
}
public io.smallrye.mutiny.helpers.test.UniAssertSubscriber assertNotTerminated()
{
java.lang.Throwable v2;
boolean v1;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: boolean hasCompletedSuccessfully>;
v2 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.lang.Throwable failure>;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldNotBeTerminatedUni(boolean,java.lang.Throwable)>(v1, v2);
return v0;
}
public io.smallrye.mutiny.helpers.test.UniAssertSubscriber assertSubscribed()
{
io.smallrye.mutiny.subscription.UniSubscription v1;
byte v2;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: io.smallrye.mutiny.subscription.UniSubscription subscription>;
if v1 != null goto label1;
v2 = 0;
goto label2;
label1:
v2 = 1;
label2:
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldBeSubscribed(int)>(v2);
return v0;
}
public io.smallrye.mutiny.helpers.test.UniAssertSubscriber assertNotSubscribed()
{
io.smallrye.mutiny.subscription.UniSubscription v1;
byte v2;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: io.smallrye.mutiny.subscription.UniSubscription subscription>;
if v1 != null goto label1;
v2 = 0;
goto label2;
label1:
v2 = 1;
label2:
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldNotBeSubscribed(int)>(v2);
return v0;
}
public java.util.List getSignals()
{
java.util.List v1, v2;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.List signals>;
v2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v1);
return v2;
}
public io.smallrye.mutiny.helpers.test.UniAssertSubscriber assertSignalsReceivedInOrder()
{
int[] v9;
boolean v12, v14, v17, v2, v20, v5, v6;
java.util.List v1, v10, v25, v29, v3, v33, v38;
io.smallrye.mutiny.helpers.test.UniAssertSubscriber v0;
java.lang.AssertionError v24, v28, v32, v37, v7;
int v15, v16, v18, v19, v21, v22, v23, v27, v31, v35, v36;
java.lang.String v26, v30, v34, v39, v8;
java.util.Iterator v11;
java.lang.Object v13, v4;
v0 := @this: io.smallrye.mutiny.helpers.test.UniAssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.List signals>;
v2 = interfaceinvoke v1.<java.util.List: boolean isEmpty()>();
if v2 == 0 goto label01;
return v0;
label01:
v3 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.List signals>;
v4 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(0);
v5 = v4 instanceof io.smallrye.mutiny.helpers.test.OnSubscribeUniSignal;
if v5 != 0 goto label02;
v6 = v4 instanceof io.smallrye.mutiny.helpers.test.OnCancellationUniSignal;
if v6 != 0 goto label02;
v7 = new java.lang.AssertionError;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.smallrye.mutiny.helpers.test.UniSignal)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The first signal is neither onSubscribe nor cancel but \u0001");
specialinvoke v7.<java.lang.AssertionError: void <init>(java.lang.Object)>(v8);
throw v7;
label02:
v9 = newarray (int)[3];
v10 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.List signals>;
v11 = interfaceinvoke v10.<java.util.List: java.util.Iterator iterator()>();
label03:
v12 = interfaceinvoke v11.<java.util.Iterator: boolean hasNext()>();
if v12 == 0 goto label06;
v13 = interfaceinvoke v11.<java.util.Iterator: java.lang.Object next()>();
v14 = v13 instanceof io.smallrye.mutiny.helpers.test.OnSubscribeUniSignal;
if v14 == 0 goto label04;
v15 = v9[0];
v16 = v15 + 1;
v9[0] = v16;
goto label03;
label04:
v17 = v13 instanceof io.smallrye.mutiny.helpers.test.OnItemUniSignal;
if v17 == 0 goto label05;
v18 = v9[1];
v19 = v18 + 1;
v9[1] = v19;
goto label03;
label05:
v20 = v13 instanceof io.smallrye.mutiny.helpers.test.OnFailureUniSignal;
if v20 == 0 goto label03;
v21 = v9[2];
v22 = v21 + 1;
v9[2] = v22;
goto label03;
label06:
v23 = v9[0];
if v23 <= 1 goto label07;
v24 = new java.lang.AssertionError;
v25 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.List signals>;
v26 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.List)>(v25) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("There are more than 1 onSubscribe signals in \u0001");
specialinvoke v24.<java.lang.AssertionError: void <init>(java.lang.Object)>(v26);
throw v24;
label07:
v27 = v9[1];
if v27 <= 1 goto label08;
v28 = new java.lang.AssertionError;
v29 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.List signals>;
v30 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.List)>(v29) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("There are more than 1 onItem signals in \u0001");
specialinvoke v28.<java.lang.AssertionError: void <init>(java.lang.Object)>(v30);
throw v28;
label08:
v31 = v9[2];
if v31 <= 1 goto label09;
v32 = new java.lang.AssertionError;
v33 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.List signals>;
v34 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.List)>(v33) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("There are more than 1 onFailure signals in \u0001");
specialinvoke v32.<java.lang.AssertionError: void <init>(java.lang.Object)>(v34);
throw v32;
label09:
v35 = v9[1];
if v35 != 1 goto label10;
v36 = v9[2];
if v36 != 1 goto label10;
v37 = new java.lang.AssertionError;
v38 = v0.<io.smallrye.mutiny.helpers.test.UniAssertSubscriber: java.util.List signals>;
v39 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.List)>(v38) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("There are both onItem and onFailure signals in \u0001");
specialinvoke v37.<java.lang.AssertionError: void <init>(java.lang.Object)>(v39);
throw v37;
label10:
return v0;
}
}