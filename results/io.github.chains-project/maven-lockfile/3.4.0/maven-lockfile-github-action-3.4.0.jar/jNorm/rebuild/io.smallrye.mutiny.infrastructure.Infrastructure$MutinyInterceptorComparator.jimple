class io.smallrye.mutiny.infrastructure.Infrastructure$MutinyInterceptorComparator extends java.lang.Object implements java.util.Comparator
{
private static final io.smallrye.mutiny.infrastructure.Infrastructure$MutinyInterceptorComparator INSTANCE;
private void <init>()
{
io.smallrye.mutiny.infrastructure.Infrastructure$MutinyInterceptorComparator v0;
v0 := @this: io.smallrye.mutiny.infrastructure.Infrastructure$MutinyInterceptorComparator;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public int compare(io.smallrye.mutiny.infrastructure.MutinyInterceptor, io.smallrye.mutiny.infrastructure.MutinyInterceptor)
{
io.smallrye.mutiny.infrastructure.MutinyInterceptor v1, v2;
int v3, v4, v5;
io.smallrye.mutiny.infrastructure.Infrastructure$MutinyInterceptorComparator v0;
v0 := @this: io.smallrye.mutiny.infrastructure.Infrastructure$MutinyInterceptorComparator;
v1 := @parameter0: io.smallrye.mutiny.infrastructure.MutinyInterceptor;
v2 := @parameter1: io.smallrye.mutiny.infrastructure.MutinyInterceptor;
v3 = interfaceinvoke v1.<io.smallrye.mutiny.infrastructure.MutinyInterceptor: int ordinal()>();
v4 = interfaceinvoke v2.<io.smallrye.mutiny.infrastructure.MutinyInterceptor: int ordinal()>();
v5 = staticinvoke <java.lang.Integer: int compare(int,int)>(v3, v4);
return v5;
}
static void <clinit>()
{
io.smallrye.mutiny.infrastructure.Infrastructure$MutinyInterceptorComparator v0;
v0 = new io.smallrye.mutiny.infrastructure.Infrastructure$MutinyInterceptorComparator;
specialinvoke v0.<io.smallrye.mutiny.infrastructure.Infrastructure$MutinyInterceptorComparator: void <init>()>();
<io.smallrye.mutiny.infrastructure.Infrastructure$MutinyInterceptorComparator: io.smallrye.mutiny.infrastructure.Infrastructure$MutinyInterceptorComparator INSTANCE> = v0;
return;
}
}