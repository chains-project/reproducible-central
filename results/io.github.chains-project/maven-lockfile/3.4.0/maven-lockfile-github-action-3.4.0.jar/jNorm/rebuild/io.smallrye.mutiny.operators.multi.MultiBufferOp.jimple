public class io.smallrye.mutiny.operators.multi.MultiBufferOp extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator
{
private final int size;
private final int skip;
private final java.util.function.Supplier supplier;
public void <init>(io.smallrye.mutiny.Multi, int, int)
{
int v2, v3, v4, v5;
io.smallrye.mutiny.operators.multi.MultiBufferOp v0;
java.util.function.Supplier v6;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferOp;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v4 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v2, "size");
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp: int size> = v4;
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v3, "skip");
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp: int skip> = v5;
v6 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiBufferOp$lambda_new_0__2644: java.util.function.Supplier bootstrap$(int)>(v2);
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp: java.util.function.Supplier supplier> = v6;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.groups.MultiSubscribe v12, v18, v5;
io.smallrye.mutiny.operators.multi.MultiBufferOp v0;
java.util.function.Supplier v16, v22, v8;
io.smallrye.mutiny.Multi v11, v17, v4;
io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor v19;
io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor v13;
int v10, v14, v15, v2, v20, v21, v3, v7, v9;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor v6;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp: int size>;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp: int skip>;
if v2 != v3 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp: io.smallrye.mutiny.Multi upstream>;
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v6 = new io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor;
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp: int size>;
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp: java.util.function.Supplier supplier>;
specialinvoke v6.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,int,java.util.function.Supplier)>(v1, v7, v8);
virtualinvoke v5.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.subscription.MultiSubscriber withSubscriber(io.smallrye.mutiny.subscription.MultiSubscriber)>(v6);
goto label3;
label1:
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp: int skip>;
v10 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp: int size>;
if v9 <= v10 goto label2;
v11 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp: io.smallrye.mutiny.Multi upstream>;
v12 = interfaceinvoke v11.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v13 = new io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor;
v14 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp: int size>;
v15 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp: int skip>;
v16 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp: java.util.function.Supplier supplier>;
specialinvoke v13.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,int,int,java.util.function.Supplier)>(v1, v14, v15, v16);
virtualinvoke v12.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.subscription.MultiSubscriber withSubscriber(io.smallrye.mutiny.subscription.MultiSubscriber)>(v13);
goto label3;
label2:
v17 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp: io.smallrye.mutiny.Multi upstream>;
v18 = interfaceinvoke v17.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v19 = new io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor;
v20 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp: int size>;
v21 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp: int skip>;
v22 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp: java.util.function.Supplier supplier>;
specialinvoke v19.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,int,int,java.util.function.Supplier)>(v1, v20, v21, v22);
virtualinvoke v18.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.subscription.MultiSubscriber withSubscriber(io.smallrye.mutiny.subscription.MultiSubscriber)>(v19);
label3:
return;
}
}