class io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final java.util.function.BiConsumer accumulator;
private final java.util.function.Function finisher;
private java.lang.Object intermediate;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, java.lang.Object, java.util.function.BiConsumer, java.util.function.Function)
{
java.util.function.BiConsumer v3;
java.lang.Object v2;
java.util.function.Function v4;
io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.util.function.BiConsumer;
v4 := @parameter3: java.util.function.Function;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v0.<io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor: java.lang.Object intermediate> = v2;
v0.<io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor: java.util.function.BiConsumer accumulator> = v3;
v0.<io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor: java.util.function.Function finisher> = v4;
return;
}
public void onItem(java.lang.Object)
{
java.lang.Throwable v6;
io.smallrye.mutiny.subscription.UniSubscription v3;
java.util.function.BiConsumer v4;
java.lang.Object v1, v5;
io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor v0;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
v3 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
if v2 == v3 goto label4;
label1:
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor: java.util.function.BiConsumer accumulator>;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor: java.lang.Object intermediate>;
interfaceinvoke v4.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(v5, v1);
label2:
goto label4;
label3:
v6 := @caughtexception;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor: void failAndCancel(java.lang.Throwable)>(v6);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void onCompletion()
{
java.lang.Throwable v8;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v1, v3;
java.util.function.Function v5;
io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor v0;
java.lang.Object v6, v7;
io.smallrye.mutiny.subscription.MultiSubscriber v4;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor;
v1 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v1);
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 == v3 goto label6;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
label1:
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor: java.util.function.Function finisher>;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor: java.lang.Object intermediate>;
v7 = interfaceinvoke v5.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v6);
label2:
goto label4;
label3:
v8 := @caughtexception;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v8);
return;
label4:
v0.<io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor: java.lang.Object intermediate> = null;
if v7 == null goto label5;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v7);
label5:
interfaceinvoke v4.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
label6:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void request(long)
{
long v1;
io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCollectorOp$CollectorProcessor;
v1 := @parameter0: long;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void request(long)>(9223372036854775807L);
return;
}
}