class io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final java.util.concurrent.atomic.AtomicLong demand;
final io.smallrye.mutiny.operators.multi.MultiDemandCapping this$0;
void <init>(io.smallrye.mutiny.operators.multi.MultiDemandCapping, io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.util.concurrent.atomic.AtomicLong v3;
io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor v0;
io.smallrye.mutiny.operators.multi.MultiDemandCapping v1;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.MultiDemandCapping;
v2 := @parameter1: io.smallrye.mutiny.subscription.MultiSubscriber;
v0.<io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor: io.smallrye.mutiny.operators.multi.MultiDemandCapping this$0> = v1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v2);
v3 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor: java.util.concurrent.atomic.AtomicLong demand> = v3;
return;
}
public void request(long)
{
java.lang.Throwable v20;
java.lang.IllegalStateException v17;
long v1, v13, v8;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v3;
io.smallrye.mutiny.operators.multi.MultiDemandCapping v9;
byte v14, v16, v4;
java.lang.String v18;
java.util.concurrent.Flow$Subscription v2;
java.util.function.LongFunction v10;
io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor v0;
java.lang.IllegalArgumentException v15, v5;
java.util.concurrent.atomic.AtomicLong v19, v6, v7;
java.lang.Object v11, v12;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor;
v1 := @parameter0: long;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 != v3 goto label1;
return;
label1:
v4 = v1 cmp 0L;
if v4 > 0 goto label2;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid number of request, must be greater than 0");
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor: void onFailure(java.lang.Throwable)>(v5);
return;
label2:
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor: java.util.concurrent.atomic.AtomicLong demand>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v6, v1);
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor: java.util.concurrent.atomic.AtomicLong demand>;
v8 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicLong: long get()>();
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor: io.smallrye.mutiny.operators.multi.MultiDemandCapping this$0>;
v10 = v9.<io.smallrye.mutiny.operators.multi.MultiDemandCapping: java.util.function.LongFunction function>;
v11 = interfaceinvoke v10.<java.util.function.LongFunction: java.lang.Object apply(long)>(v8);
v12 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v11, "actualDemand");
v13 = virtualinvoke v12.<java.lang.Long: long longValue()>();
v14 = v13 cmp 0L;
if v14 > 0 goto label4;
v15 = new java.lang.IllegalArgumentException;
specialinvoke v15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid number of request, must be greater than 0");
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor: void onFailure(java.lang.Throwable)>(v15);
label3:
return;
label4:
v16 = v13 cmp v8;
if v16 <= 0 goto label6;
v17 = new java.lang.IllegalStateException;
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,long)>(v13, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The demand capping function computed a request of \u0001 elements while the outstanding demand is of \u0001 elements");
specialinvoke v17.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v18);
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor: void onFailure(java.lang.Throwable)>(v17);
label5:
return;
label6:
v19 = v0.<io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor: java.util.concurrent.atomic.AtomicLong demand>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long produced(java.util.concurrent.atomic.AtomicLong,long)>(v19, v13);
interfaceinvoke v2.<java.util.concurrent.Flow$Subscription: void request(long)>(v13);
label7:
goto label9;
label8:
v20 := @caughtexception;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor: void onFailure(java.lang.Throwable)>(v20);
label9:
return;
catch java.lang.Throwable from label2 to label3 with label8;
catch java.lang.Throwable from label4 to label5 with label8;
catch java.lang.Throwable from label6 to label7 with label8;
}
}