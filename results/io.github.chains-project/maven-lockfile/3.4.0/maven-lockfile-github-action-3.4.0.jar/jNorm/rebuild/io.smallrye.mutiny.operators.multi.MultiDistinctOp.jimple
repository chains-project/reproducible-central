public final class io.smallrye.mutiny.operators.multi.MultiDistinctOp extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator
{
private final java.util.Comparator comparator;
public void <init>(io.smallrye.mutiny.Multi)
{
io.smallrye.mutiny.operators.multi.MultiDistinctOp v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiDistinctOp;
v1 := @parameter0: io.smallrye.mutiny.Multi;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiDistinctOp: void <init>(io.smallrye.mutiny.Multi,java.util.Comparator)>(v1, null);
return;
}
public void <init>(io.smallrye.mutiny.Multi, java.util.Comparator)
{
io.smallrye.mutiny.operators.multi.MultiDistinctOp v0;
java.util.Comparator v2;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiDistinctOp;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.Comparator;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v0.<io.smallrye.mutiny.operators.multi.MultiDistinctOp: java.util.Comparator comparator> = v2;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.MultiDistinctOp v0;
io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor v3;
java.lang.Object v4;
java.util.Comparator v5;
io.smallrye.mutiny.Multi v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiDistinctOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiDistinctOp: io.smallrye.mutiny.Multi upstream>;
v3 = new io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor;
v4 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNullNpe(java.lang.Object,java.lang.String)>(v1, "subscriber");
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiDistinctOp: java.util.Comparator comparator>;
specialinvoke v3.<io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,java.util.Comparator)>(v4, v5);
interfaceinvoke v2.<io.smallrye.mutiny.Multi: void subscribe(java.util.concurrent.Flow$Subscriber)>(v3);
return;
}
}