final class io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner extends java.lang.Object implements java.util.concurrent.Flow$Subscription, io.smallrye.mutiny.subscription.MultiSubscriber, io.smallrye.mutiny.subscription.ContextSupport
{
final io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber parent;
final int requests;
final int limit;
volatile java.util.concurrent.Flow$Subscription subscription;
private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater SUBSCRIPTION_UPDATER;
long produced;
volatile java.util.Queue queue;
volatile boolean done;
int index;
void <init>(io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber, int)
{
io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner v0;
io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber v1;
int v2, v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: java.util.concurrent.Flow$Subscription subscription> = null;
v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber parent> = v1;
v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: int requests> = v2;
v3 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: int unboundedOrLimit(int)>(v2);
v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: int limit> = v3;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v2;
int v4;
long v5;
boolean v3;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = <io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: java.util.concurrent.atomic.AtomicReferenceFieldUpdater SUBSCRIPTION_UPDATER>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, null, v1);
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: int requests>;
v5 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long unboundedOrRequests(int)>(v4);
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(v5);
label1:
return;
}
public void onItem(java.lang.Object)
{
java.lang.Object v1;
io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner v0;
io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber parent>;
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber: void tryEmit(io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner,java.lang.Object)>(v0, v1);
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner v0;
io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner;
v1 := @parameter0: java.lang.Throwable;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: boolean done> = 1;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber parent>;
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber: void innerError(io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner,java.lang.Throwable)>(v0, v1);
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner v0;
io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner;
v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: boolean done> = 1;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber parent>;
virtualinvoke v1.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber: void innerComplete()>();
return;
}
public void request(long)
{
byte v5;
io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner v0;
int v4;
long v1, v2, v3;
java.util.concurrent.Flow$Subscription v6;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: long produced>;
v3 = v2 + v1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: int limit>;
v5 = v3 cmp v4;
if v5 < 0 goto label1;
v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: long produced> = 0L;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: java.util.concurrent.Flow$Subscription subscription>;
interfaceinvoke v6.<java.util.concurrent.Flow$Subscription: void request(long)>(v3);
goto label2;
label1:
v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: long produced> = v3;
label2:
return;
}
public void cancel()
{
io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: void cancel(boolean)>(1);
return;
}
public void cancel(boolean)
{
io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v2;
java.lang.Object v4;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v3;
java.util.Queue v5, v6;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner;
v1 := @parameter0: boolean;
if v1 != 0 goto label1;
v2 = <io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: java.util.concurrent.atomic.AtomicReferenceFieldUpdater SUBSCRIPTION_UPDATER>;
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v4 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(v0, v3);
if v4 == null goto label1;
interfaceinvoke v4.<java.util.concurrent.Flow$Subscription: void cancel()>();
label1:
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: java.util.Queue queue>;
if v5 == null goto label2;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: java.util.Queue queue>;
interfaceinvoke v6.<java.util.Queue: void clear()>();
v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: java.util.Queue queue> = null;
label2:
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.Context v2;
io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner v0;
io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber parent>;
v2 = virtualinvoke v1.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber: io.smallrye.mutiny.Context context()>();
return v2;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v0;
v0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lio/smallrye/mutiny/operators/multi/MultiFlatMapOp$FlatMapInner;", class "Ljava/util/concurrent/Flow$Subscription;", "subscription");
<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapInner: java.util.concurrent.atomic.AtomicReferenceFieldUpdater SUBSCRIPTION_UPDATER> = v0;
return;
}
}