class io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final java.lang.String processorIdentifier;
final io.smallrye.mutiny.operators.multi.MultiLogger this$0;
public void <init>(io.smallrye.mutiny.operators.multi.MultiLogger, io.smallrye.mutiny.subscription.MultiSubscriber, long)
{
long v3;
io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor v0;
java.lang.String v4, v5;
io.smallrye.mutiny.operators.multi.MultiLogger v1;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.MultiLogger;
v2 := @parameter1: io.smallrye.mutiny.subscription.MultiSubscriber;
v3 := @parameter2: long;
v0.<io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor: io.smallrye.mutiny.operators.multi.MultiLogger this$0> = v1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v2);
v4 = v1.<io.smallrye.mutiny.operators.multi.MultiLogger: java.lang.String identifier>;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,long)>(v4, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.\u0001");
v0.<io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor: java.lang.String processorIdentifier> = v5;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor v0;
java.lang.String v3;
boolean v2;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor: boolean isDone()>();
if v2 != 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor: java.lang.String processorIdentifier>;
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void logFromOperator(java.lang.String,java.lang.String,java.lang.Object,java.lang.Throwable)>(v3, "onSubscribe", null, null);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v1);
label1:
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor v0;
java.lang.String v3;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor: boolean isDone()>();
if v2 != 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor: java.lang.String processorIdentifier>;
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void logFromOperator(java.lang.String,java.lang.String,java.lang.Object,java.lang.Throwable)>(v3, "onFailure", null, v1);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onFailure(java.lang.Throwable)>(v1);
label1:
return;
}
public void onItem(java.lang.Object)
{
java.lang.Object v1;
io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor v0;
java.lang.String v3;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor: boolean isDone()>();
if v2 != 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor: java.lang.String processorIdentifier>;
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void logFromOperator(java.lang.String,java.lang.String,java.lang.Object,java.lang.Throwable)>(v3, "onItem", v1, null);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onItem(java.lang.Object)>(v1);
label1:
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor v0;
java.lang.String v2;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor;
v1 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor: boolean isDone()>();
if v1 != 0 goto label1;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor: java.lang.String processorIdentifier>;
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void logFromOperator(java.lang.String,java.lang.String,java.lang.Object,java.lang.Throwable)>(v2, "onCompletion", null, null);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onCompletion()>();
label1:
return;
}
public void request(long)
{
java.lang.Long v4;
long v1;
io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor v0;
java.lang.String v3;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor;
v1 := @parameter0: long;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor: boolean isDone()>();
if v2 != 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor: java.lang.String processorIdentifier>;
v4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v1);
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void logFromOperator(java.lang.String,java.lang.String,java.lang.Object,java.lang.Throwable)>(v3, "request", v4, null);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void request(long)>(v1);
label1:
return;
}
public void cancel()
{
io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor v0;
java.lang.String v2;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor;
v1 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor: boolean isDone()>();
if v1 != 0 goto label1;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiLogger$MultiLoggerProcessor: java.lang.String processorIdentifier>;
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void logFromOperator(java.lang.String,java.lang.String,java.lang.Object,java.lang.Throwable)>(v2, "cancel", null, null);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void cancel()>();
label1:
return;
}
}