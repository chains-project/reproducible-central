final class io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp$ResumeSubscriber extends io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber
{
private final java.util.function.Function next;
private boolean switched;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, java.util.function.Function)
{
io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp$ResumeSubscriber v0;
java.util.function.Function v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp$ResumeSubscriber;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: java.util.function.Function;
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v0.<io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp$ResumeSubscriber: java.util.function.Function next> = v2;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp$ResumeSubscriber v0;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
boolean v2;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp$ResumeSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp$ResumeSubscriber: boolean switched>;
if v2 != 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp$ResumeSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
label1:
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void setOrSwitchUpstream(java.util.concurrent.Flow$Subscription)>(v1);
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp$ResumeSubscriber v0;
java.lang.Object v1;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp$ResumeSubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp$ResumeSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v2.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v1);
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp$ResumeSubscriber: boolean switched>;
if v3 != 0 goto label1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp$ResumeSubscriber: void emitted(long)>(1L);
label1:
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1, v6;
io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp$ResumeSubscriber v0;
java.util.function.Function v3;
java.lang.NullPointerException v5;
io.smallrye.mutiny.CompositeException v7;
java.util.concurrent.Flow$Subscriber v9;
java.lang.Throwable[] v8;
java.lang.Object v4;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp$ResumeSubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp$ResumeSubscriber: boolean switched>;
if v2 != 0 goto label6;
v0.<io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp$ResumeSubscriber: boolean switched> = 1;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp$ResumeSubscriber: java.util.function.Function next>;
v4 = interfaceinvoke v3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v1);
if v4 != null goto label5;
v5 = new java.lang.NullPointerException;
specialinvoke v5.<java.lang.NullPointerException: void <init>(java.lang.String)>("The supplier returned `null`");
throw v5;
label2:
v6 := @caughtexception;
if v6 != v1 goto label3;
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void onFailure(java.lang.Throwable)>(v6);
goto label4;
label3:
v7 = new io.smallrye.mutiny.CompositeException;
v8 = newarray (java.lang.Throwable)[2];
v8[0] = v1;
v8[1] = v6;
specialinvoke v7.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v8);
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void onFailure(java.lang.Throwable)>(v7);
label4:
return;
label5:
v9 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Flow$Subscriber onMultiSubscription(java.util.concurrent.Flow$Publisher,java.util.concurrent.Flow$Subscriber)>(v4, v0);
interfaceinvoke v4.<java.util.concurrent.Flow$Publisher: void subscribe(java.util.concurrent.Flow$Subscriber)>(v9);
goto label7;
label6:
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void onFailure(java.lang.Throwable)>(v1);
label7:
return;
catch java.lang.Throwable from label1 to label2 with label2;
}
}