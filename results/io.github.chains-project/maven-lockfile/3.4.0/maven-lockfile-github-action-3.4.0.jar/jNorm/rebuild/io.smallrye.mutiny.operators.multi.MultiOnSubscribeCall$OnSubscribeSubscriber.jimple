final class io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall$OnSubscribeSubscriber extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
final io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall this$0;
void <init>(io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall, io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall$OnSubscribeSubscriber v0;
io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall v1;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall$OnSubscribeSubscriber;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall;
v2 := @parameter1: io.smallrye.mutiny.subscription.MultiSubscriber;
v0.<io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall$OnSubscribeSubscriber: io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall this$0> = v1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v2);
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
java.lang.Throwable v10;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v12;
io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall v3;
java.util.function.Function v4;
java.util.function.Consumer v8, v9;
io.smallrye.mutiny.groups.UniSubscribe v7;
java.lang.Object v5, v6;
io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall$OnSubscribeSubscriber v0;
io.smallrye.mutiny.subscription.MultiSubscriber v11;
boolean v2;
java.util.concurrent.Flow$Subscription v1, v13;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall$OnSubscribeSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall$OnSubscribeSubscriber: boolean compareAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription,java.util.concurrent.Flow$Subscription)>(null, v1);
if v2 == 0 goto label4;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall$OnSubscribeSubscriber: io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall this$0>;
v4 = v3.<io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall: java.util.function.Function onSubscribe>;
v5 = interfaceinvoke v4.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v1);
v6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v5, "The produced Uni must not be `null`");
v7 = interfaceinvoke v6.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v8 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall$OnSubscribeSubscriber$lambda_onSubscribe_0__2653: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall$OnSubscribeSubscriber)>(v0);
v9 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall$OnSubscribeSubscriber$lambda_onSubscribe_1__2654: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall$OnSubscribeSubscriber)>(v0);
virtualinvoke v7.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer,java.util.function.Consumer)>(v8, v9);
label2:
goto label5;
label3:
v10 := @caughtexception;
v11 = v0.<io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall$OnSubscribeSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void fail(java.util.concurrent.Flow$Subscriber,java.lang.Throwable)>(v11, v10);
v12 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v13 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOnSubscribeCall$OnSubscribeSubscriber: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v12);
interfaceinvoke v13.<java.util.concurrent.Flow$Subscription: void cancel()>();
goto label5;
label4:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}