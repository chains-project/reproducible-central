public abstract class io.smallrye.mutiny.operators.multi.MultiOperatorProcessor extends java.lang.Object implements io.smallrye.mutiny.subscription.MultiSubscriber, java.util.concurrent.Flow$Subscription, io.smallrye.mutiny.subscription.ContextSupport
{
protected volatile io.smallrye.mutiny.subscription.MultiSubscriber downstream;
protected volatile java.util.concurrent.Flow$Subscription upstream;
private volatile int cancellationRequested;
private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater UPSTREAM_UPDATER;
private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater CANCELLATION_REQUESTED_UPDATER;
public void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.lang.Object v2;
io.smallrye.mutiny.operators.multi.MultiOperatorProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOperatorProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: java.util.concurrent.Flow$Subscription upstream> = null;
v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: int cancellationRequested> = 0;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "downstream");
v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream> = v2;
return;
}
void failAndCancel(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.MultiOperatorProcessor v0;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOperatorProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
if v2 == null goto label1;
interfaceinvoke v2.<java.util.concurrent.Flow$Subscription: void cancel()>();
label1:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onFailure(java.lang.Throwable)>(v1);
return;
}
protected java.util.concurrent.Flow$Subscription getUpstreamSubscription()
{
io.smallrye.mutiny.operators.multi.MultiOperatorProcessor v0;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOperatorProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: java.util.concurrent.Flow$Subscription upstream>;
return v1;
}
protected boolean compareAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription, java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.MultiOperatorProcessor v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v3;
boolean v4;
java.util.concurrent.Flow$Subscription v1, v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOperatorProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 := @parameter1: java.util.concurrent.Flow$Subscription;
v3 = <io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: java.util.concurrent.atomic.AtomicReferenceFieldUpdater UPSTREAM_UPDATER>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v1, v2);
return v4;
}
protected java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.MultiOperatorProcessor v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v2;
java.lang.Object v3;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOperatorProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = <io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: java.util.concurrent.atomic.AtomicReferenceFieldUpdater UPSTREAM_UPDATER>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(v0, v1);
return v3;
}
protected boolean isDone()
{
io.smallrye.mutiny.operators.multi.MultiOperatorProcessor v0;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v2;
boolean v3;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOperatorProcessor;
v1 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
v2 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
protected boolean isCancelled()
{
int v1;
io.smallrye.mutiny.operators.multi.MultiOperatorProcessor v0;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOperatorProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: int cancellationRequested>;
if v1 != 1 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.operators.multi.MultiOperatorProcessor v0;
io.smallrye.mutiny.Context v4, v5;
io.smallrye.mutiny.subscription.MultiSubscriber v1, v3;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOperatorProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v2 = v1 instanceof io.smallrye.mutiny.subscription.ContextSupport;
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v4 = interfaceinvoke v3.<io.smallrye.mutiny.subscription.ContextSupport: io.smallrye.mutiny.Context context()>();
return v4;
label1:
v5 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
return v5;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.MultiOperatorProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
boolean v2;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOperatorProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: boolean compareAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription,java.util.concurrent.Flow$Subscription)>(null, v1);
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
goto label2;
label1:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label2:
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.MultiOperatorProcessor v0;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v2, v4;
io.smallrye.mutiny.subscription.MultiSubscriber v5;
java.util.concurrent.Flow$Subscription v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOperatorProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v2);
v4 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v3 == v4 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v1);
goto label2;
label1:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
label2:
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.MultiOperatorProcessor v0;
java.lang.Object v1;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v3;
io.smallrye.mutiny.subscription.MultiSubscriber v4;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOperatorProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 == v3 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v1);
label1:
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.MultiOperatorProcessor v0;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v1, v3;
io.smallrye.mutiny.subscription.MultiSubscriber v4;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOperatorProcessor;
v1 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v1);
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 == v3 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
label1:
return;
}
public void request(long)
{
byte v4;
io.smallrye.mutiny.operators.multi.MultiOperatorProcessor v0;
long v1;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v3;
java.lang.IllegalArgumentException v5;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOperatorProcessor;
v1 := @parameter0: long;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 == v3 goto label2;
v4 = v1 cmp 0L;
if v4 > 0 goto label1;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid number of request, must be greater than 0");
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onFailure(java.lang.Throwable)>(v5);
return;
label1:
interfaceinvoke v2.<java.util.concurrent.Flow$Subscription: void request(long)>(v1);
label2:
return;
}
public void cancel()
{
io.smallrye.mutiny.operators.multi.MultiOperatorProcessor v0;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOperatorProcessor;
v1 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: boolean compareAndSwapDownstreamCancellationRequest()>();
if v1 == 0 goto label1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void cancelUpstream()>();
label1:
return;
}
protected final boolean compareAndSwapDownstreamCancellationRequest()
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v1;
io.smallrye.mutiny.operators.multi.MultiOperatorProcessor v0;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOperatorProcessor;
v1 = <io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: java.util.concurrent.atomic.AtomicIntegerFieldUpdater CANCELLATION_REQUESTED_UPDATER>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(v0, 0, 1);
return v2;
}
protected void cancelUpstream()
{
io.smallrye.mutiny.operators.multi.MultiOperatorProcessor v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v1;
java.lang.Object v3;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v2, v4;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOperatorProcessor;
v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: int cancellationRequested> = 1;
v1 = <io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: java.util.concurrent.atomic.AtomicReferenceFieldUpdater UPSTREAM_UPDATER>;
v2 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v3 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(v0, v2);
if v3 == null goto label1;
v4 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v3 == v4 goto label1;
interfaceinvoke v3.<java.util.concurrent.Flow$Subscription: void cancel()>();
label1:
return;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v1;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v0;
v0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lio/smallrye/mutiny/operators/multi/MultiOperatorProcessor;", class "Ljava/util/concurrent/Flow$Subscription;", "upstream");
<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: java.util.concurrent.atomic.AtomicReferenceFieldUpdater UPSTREAM_UPDATER> = v0;
v1 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lio/smallrye/mutiny/operators/multi/MultiOperatorProcessor;", "cancellationRequested");
<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: java.util.concurrent.atomic.AtomicIntegerFieldUpdater CANCELLATION_REQUESTED_UPDATER> = v1;
return;
}
}