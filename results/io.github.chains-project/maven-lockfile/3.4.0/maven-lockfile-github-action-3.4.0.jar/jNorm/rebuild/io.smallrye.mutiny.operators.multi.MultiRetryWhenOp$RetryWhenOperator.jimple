final class io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator extends io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber
{
private final java.util.concurrent.Flow$Publisher upstream;
private final java.util.concurrent.atomic.AtomicInteger wip;
private final java.util.concurrent.Flow$Subscriber signaller;
private final io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription arbiter;
private final java.util.function.Predicate onFailurePredicate;
long produced;
void <init>(java.util.concurrent.Flow$Publisher, java.util.function.Predicate, io.smallrye.mutiny.subscription.MultiSubscriber, java.util.concurrent.Flow$Subscriber)
{
java.util.concurrent.Flow$Subscriber v4;
java.util.concurrent.Flow$Publisher v1;
java.util.concurrent.atomic.AtomicInteger v5;
io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription v6;
java.util.function.Predicate v2;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator v0;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator;
v1 := @parameter0: java.util.concurrent.Flow$Publisher;
v2 := @parameter1: java.util.function.Predicate;
v3 := @parameter2: io.smallrye.mutiny.subscription.MultiSubscriber;
v4 := @parameter3: java.util.concurrent.Flow$Subscriber;
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v3);
v5 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v5.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: java.util.concurrent.atomic.AtomicInteger wip> = v5;
v6 = new io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription;
specialinvoke v6.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription arbiter> = v6;
v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: java.util.function.Predicate onFailurePredicate> = v2;
v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: java.util.concurrent.Flow$Publisher upstream> = v1;
v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: java.util.concurrent.Flow$Subscriber signaller> = v4;
return;
}
public void cancel()
{
io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription v2;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator v0;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator;
v1 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: boolean isCancelled()>();
if v1 != 0 goto label1;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription arbiter>;
virtualinvoke v2.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: void cancel()>();
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void cancel()>();
label1:
return;
}
public void setWhen(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription v2;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator v0;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription arbiter>;
virtualinvoke v2.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: boolean set(java.util.concurrent.Flow$Subscription)>(v1);
return;
}
public void onItem(java.lang.Object)
{
java.lang.Object v1;
long v3, v4;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator v0;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v2.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v1);
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: long produced>;
v4 = v3 + 1L;
v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: long produced> = v4;
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
java.util.concurrent.Flow$Subscriber v6;
byte v4;
io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription v5;
long v3;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator v0;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator;
v1 := @parameter0: java.lang.Throwable;
v2 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: boolean testOnFailurePredicate(java.lang.Throwable)>(v1);
if v2 == 0 goto label1;
return;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: long produced>;
v4 = v3 cmp 0L;
if v4 == 0 goto label2;
v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: long produced> = 0L;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: void emitted(long)>(v3);
label2:
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription arbiter>;
virtualinvoke v5.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: void request(long)>(1L);
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: java.util.concurrent.Flow$Subscriber signaller>;
interfaceinvoke v6.<java.util.concurrent.Flow$Subscriber: void onNext(java.lang.Object)>(v1);
return;
}
private boolean testOnFailurePredicate(java.lang.Throwable)
{
java.lang.Throwable v1, v6;
java.util.function.Predicate v2;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator v0;
io.smallrye.mutiny.CompositeException v9;
io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription v4, v7;
java.lang.Throwable[] v10;
io.smallrye.mutiny.subscription.MultiSubscriber v5, v8;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator;
v1 := @parameter0: java.lang.Throwable;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: java.util.function.Predicate onFailurePredicate>;
v3 = interfaceinvoke v2.<java.util.function.Predicate: boolean test(java.lang.Object)>(v1);
if v3 != 0 goto label4;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription arbiter>;
virtualinvoke v4.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: void cancel()>();
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v1);
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription arbiter>;
virtualinvoke v7.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: void cancel()>();
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v9 = new io.smallrye.mutiny.CompositeException;
v10 = newarray (java.lang.Throwable)[2];
v10[0] = v6;
v10[1] = v1;
specialinvoke v9.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v10);
interfaceinvoke v8.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v9);
return 1;
label4:
return 0;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void onCompletion()
{
io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription v1;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator v0;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription arbiter>;
virtualinvoke v1.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: void cancel()>();
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v2.<io.smallrye.mutiny.subscription.MultiSubscriber: void onComplete()>();
return;
}
void resubscribe()
{
java.util.concurrent.Flow$Publisher v4;
java.util.concurrent.atomic.AtomicInteger v1, v5;
int v2, v6;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator v0;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 != 0 goto label3;
label1:
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: boolean isCancelled()>();
if v3 == 0 goto label2;
return;
label2:
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: java.util.concurrent.Flow$Publisher upstream>;
interfaceinvoke v4.<java.util.concurrent.Flow$Publisher: void subscribe(java.util.concurrent.Flow$Subscriber)>(v0);
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: java.util.concurrent.atomic.AtomicInteger wip>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
if v6 != 0 goto label1;
label3:
return;
}
void whenFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator v0;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator;
v1 := @parameter0: java.lang.Throwable;
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void cancel()>();
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v2.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v1);
return;
}
void whenComplete()
{
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator;
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void cancel()>();
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onComplete()>();
return;
}
}