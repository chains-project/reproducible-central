final class io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber extends io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber
{
private final io.smallrye.mutiny.Multi upstream;
private final java.util.function.Supplier initialSupplier;
private final java.util.function.BiFunction accumulator;
private final java.util.concurrent.atomic.AtomicInteger wip;
long produced;
private io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSeedProcessor subscriber;
void <init>(io.smallrye.mutiny.Multi, io.smallrye.mutiny.subscription.MultiSubscriber, java.util.function.BiFunction, java.util.function.Supplier)
{
java.util.concurrent.atomic.AtomicInteger v5;
java.util.function.BiFunction v3;
io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber v0;
java.util.function.Supplier v4;
io.smallrye.mutiny.Multi v1;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: io.smallrye.mutiny.subscription.MultiSubscriber;
v3 := @parameter2: java.util.function.BiFunction;
v4 := @parameter3: java.util.function.Supplier;
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v2);
v5 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v5.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: java.util.concurrent.atomic.AtomicInteger wip> = v5;
v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: io.smallrye.mutiny.Multi upstream> = v1;
v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: java.util.function.BiFunction accumulator> = v3;
v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: java.util.function.Supplier initialSupplier> = v4;
return;
}
public void onCompletion()
{
java.lang.Throwable v14;
java.util.function.BiFunction v18;
long v9;
java.util.concurrent.atomic.AtomicReference v5;
java.util.function.Supplier v12;
io.smallrye.mutiny.Multi v19, v20;
java.lang.NullPointerException v15;
byte v10;
java.util.concurrent.atomic.AtomicInteger v1, v24;
int v2, v25;
io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber v0;
io.smallrye.mutiny.subscription.MultiSubscriber v8;
boolean v23, v3;
io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSeedProcessor v11, v17, v21, v4, v7;
java.util.concurrent.Flow$Subscription v16;
java.util.concurrent.Flow$Subscriber v22;
java.lang.Object v13, v6;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 != 0 goto label13;
label01:
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: boolean isCancelled()>();
if v3 == 0 goto label02;
return;
label02:
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSeedProcessor subscriber>;
if v4 == null goto label03;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: java.util.concurrent.atomic.AtomicReference currentUpstream>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSeedProcessor subscriber>;
if v6 != v7 goto label03;
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v8.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
return;
label03:
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: long produced>;
v10 = v9 cmp 0L;
if v10 == 0 goto label04;
v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: long produced> = 0L;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: void emitted(long)>(v9);
label04:
v11 = v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSeedProcessor subscriber>;
if v11 != null goto label10;
label05:
v12 = v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: java.util.function.Supplier initialSupplier>;
v13 = interfaceinvoke v12.<java.util.function.Supplier: java.lang.Object get()>();
label06:
goto label08;
label07:
v14 := @caughtexception;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: void onFailure(java.lang.Throwable)>(v14);
return;
label08:
if v13 != null goto label09;
v15 = new java.lang.NullPointerException;
specialinvoke v15.<java.lang.NullPointerException: void <init>(java.lang.String)>("The seed cannot be `null`");
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: void onFailure(java.lang.Throwable)>(v15);
return;
label09:
v16 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: java.util.concurrent.Flow$Subscription single(java.util.concurrent.Flow$Subscriber,java.lang.Object)>(v0, v13);
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v16);
v17 = new io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSeedProcessor;
v18 = v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: java.util.function.BiFunction accumulator>;
specialinvoke v17.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSeedProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,java.util.function.BiFunction,java.lang.Object)>(v0, v18, v13);
v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSeedProcessor subscriber> = v17;
goto label11;
label10:
v19 = v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: io.smallrye.mutiny.Multi upstream>;
v20 = v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: io.smallrye.mutiny.Multi upstream>;
v21 = v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSeedProcessor subscriber>;
v22 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Flow$Subscriber onMultiSubscription(java.util.concurrent.Flow$Publisher,java.util.concurrent.Flow$Subscriber)>(v20, v21);
interfaceinvoke v19.<io.smallrye.mutiny.Multi: void subscribe(java.util.concurrent.Flow$Subscriber)>(v22);
label11:
v23 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: boolean isCancelled()>();
if v23 == 0 goto label12;
return;
label12:
v24 = v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v25 = virtualinvoke v24.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
if v25 != 0 goto label01;
label13:
return;
catch java.lang.Throwable from label05 to label06 with label07;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber v0;
java.lang.Object v1;
long v2, v3;
io.smallrye.mutiny.subscription.MultiSubscriber v4;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: long produced>;
v3 = v2 + 1L;
v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: long produced> = v3;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v1);
return;
}
}