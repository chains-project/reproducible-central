final class io.smallrye.mutiny.operators.multi.MultiSelectWhereOp$MultiSelectWhereProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final java.util.function.Predicate predicate;
private boolean requestedMax;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, java.util.function.Predicate)
{
io.smallrye.mutiny.operators.multi.MultiSelectWhereOp$MultiSelectWhereProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
java.util.function.Predicate v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectWhereOp$MultiSelectWhereProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: java.util.function.Predicate;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v0.<io.smallrye.mutiny.operators.multi.MultiSelectWhereOp$MultiSelectWhereProcessor: boolean requestedMax> = 0;
v0.<io.smallrye.mutiny.operators.multi.MultiSelectWhereOp$MultiSelectWhereProcessor: java.util.function.Predicate predicate> = v2;
return;
}
public void onItem(java.lang.Object)
{
java.lang.Throwable v5;
java.util.function.Predicate v3;
io.smallrye.mutiny.operators.multi.MultiSelectWhereOp$MultiSelectWhereProcessor v0;
java.lang.Object v1;
io.smallrye.mutiny.subscription.MultiSubscriber v6;
boolean v2, v4, v7;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectWhereOp$MultiSelectWhereProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSelectWhereOp$MultiSelectWhereProcessor: boolean isDone()>();
if v2 == 0 goto label1;
return;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectWhereOp$MultiSelectWhereProcessor: java.util.function.Predicate predicate>;
v4 = interfaceinvoke v3.<java.util.function.Predicate: boolean test(java.lang.Object)>(v1);
label2:
goto label4;
label3:
v5 := @caughtexception;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSelectWhereOp$MultiSelectWhereProcessor: void failAndCancel(java.lang.Throwable)>(v5);
return;
label4:
if v4 == 0 goto label5;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectWhereOp$MultiSelectWhereProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v6.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v1);
goto label6;
label5:
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectWhereOp$MultiSelectWhereProcessor: boolean requestedMax>;
if v7 != 0 goto label6;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSelectWhereOp$MultiSelectWhereProcessor: void request(long)>(1L);
label6:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void request(long)
{
byte v4, v6;
io.smallrye.mutiny.operators.multi.MultiSelectWhereOp$MultiSelectWhereProcessor v0;
long v1;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v3;
java.lang.IllegalArgumentException v5;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectWhereOp$MultiSelectWhereProcessor;
v1 := @parameter0: long;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSelectWhereOp$MultiSelectWhereProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 == v3 goto label3;
v4 = v1 cmp 0L;
if v4 > 0 goto label1;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid number of request, must be greater than 0");
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSelectWhereOp$MultiSelectWhereProcessor: void onFailure(java.lang.Throwable)>(v5);
return;
label1:
v6 = v1 cmp 9223372036854775807L;
if v6 != 0 goto label2;
v0.<io.smallrye.mutiny.operators.multi.MultiSelectWhereOp$MultiSelectWhereProcessor: boolean requestedMax> = 1;
label2:
interfaceinvoke v2.<java.util.concurrent.Flow$Subscription: void request(long)>(v1);
label3:
return;
}
}