public class io.smallrye.mutiny.operators.multi.MultiSwitchOnCompletion extends io.smallrye.mutiny.operators.MultiOperator
{
private final java.util.function.Supplier supplier;
public void <init>(io.smallrye.mutiny.Multi, java.util.function.Supplier)
{
io.smallrye.mutiny.operators.multi.MultiSwitchOnCompletion v0;
java.util.function.Supplier v2;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSwitchOnCompletion;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.function.Supplier;
specialinvoke v0.<io.smallrye.mutiny.operators.MultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v0.<io.smallrye.mutiny.operators.multi.MultiSwitchOnCompletion: java.util.function.Supplier supplier> = v2;
return;
}
public void subscribe(java.util.concurrent.Flow$Subscriber)
{
java.util.concurrent.Flow$Publisher[] v6;
java.util.function.Supplier v4;
io.smallrye.mutiny.Multi v5, v7, v9;
java.lang.NullPointerException v2;
java.util.concurrent.Flow$Subscriber v1;
io.smallrye.mutiny.operators.multi.MultiSwitchOnCompletion v0;
io.smallrye.mutiny.groups.MultiCreate v3;
io.smallrye.mutiny.operators.multi.MultiConcatOp v8;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSwitchOnCompletion;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>("The subscriber must not be `null`");
throw v2;
label1:
v3 = staticinvoke <io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiCreate createFrom()>();
v4 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiSwitchOnCompletion$lambda_subscribe_0__2677: java.util.function.Supplier bootstrap$(io.smallrye.mutiny.operators.multi.MultiSwitchOnCompletion)>(v0);
v5 = virtualinvoke v3.<io.smallrye.mutiny.groups.MultiCreate: io.smallrye.mutiny.Multi deferred(java.util.function.Supplier)>(v4);
v6 = newarray (java.util.concurrent.Flow$Publisher)[2];
v7 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSwitchOnCompletion: io.smallrye.mutiny.Multi upstream()>();
v6[0] = v7;
v6[1] = v5;
v8 = new io.smallrye.mutiny.operators.multi.MultiConcatOp;
specialinvoke v8.<io.smallrye.mutiny.operators.multi.MultiConcatOp: void <init>(boolean,java.util.concurrent.Flow$Publisher[])>(0, v6);
v9 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v8);
interfaceinvoke v9.<io.smallrye.mutiny.Multi: void subscribe(java.util.concurrent.Flow$Subscriber)>(v1);
return;
}
}