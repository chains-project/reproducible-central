class io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder extends java.lang.Object
{
private final java.util.concurrent.atomic.AtomicReference container;
static final java.util.concurrent.Future NONE;
private void <init>()
{
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder v0;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder: java.util.concurrent.atomic.AtomicReference container> = v1;
return;
}
boolean replace(java.util.concurrent.Future)
{
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder v0;
java.util.concurrent.Future v1, v4;
java.lang.Object v3;
java.util.concurrent.atomic.AtomicReference v2, v5;
boolean v6;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder;
v1 := @parameter0: java.util.concurrent.Future;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder: java.util.concurrent.atomic.AtomicReference container>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v4 = <io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder: java.util.concurrent.Future NONE>;
if v3 != v4 goto label3;
if v1 == null goto label2;
interfaceinvoke v1.<java.util.concurrent.Future: boolean cancel(boolean)>(1);
label2:
return 0;
label3:
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder: java.util.concurrent.atomic.AtomicReference container>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v3, v1);
if v6 == 0 goto label1;
return 1;
}
void cancel()
{
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder v0;
java.util.concurrent.Future v2, v4;
java.lang.Object v3;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder: java.util.concurrent.atomic.AtomicReference container>;
v2 = <io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder: java.util.concurrent.Future NONE>;
v3 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v2);
if v3 == null goto label1;
v4 = <io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder: java.util.concurrent.Future NONE>;
if v3 == v4 goto label1;
interfaceinvoke v3.<java.util.concurrent.Future: boolean cancel(boolean)>(0);
label1:
return;
}
static void <clinit>()
{
java.util.concurrent.CompletableFuture v0;
v0 = new java.util.concurrent.CompletableFuture;
specialinvoke v0.<java.util.concurrent.CompletableFuture: void <init>()>();
<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder: java.util.concurrent.Future NONE> = v0;
return;
}
}