final class io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final java.util.function.Supplier supplier;
private final int size;
private final java.util.concurrent.atomic.AtomicInteger count;
int index;
private io.smallrye.mutiny.operators.multi.processors.UnicastProcessor processor;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, int, java.util.function.Supplier)
{
io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor v0;
java.util.concurrent.atomic.AtomicInteger v4, v5;
int v2;
java.util.function.Supplier v3;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: int;
v3 := @parameter2: java.util.function.Supplier;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v4 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v4.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: java.util.concurrent.atomic.AtomicInteger count> = v4;
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: int size> = v2;
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: java.util.function.Supplier supplier> = v3;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: java.util.concurrent.atomic.AtomicInteger count>;
virtualinvoke v5.<java.util.concurrent.atomic.AtomicInteger: void lazySet(int)>(1);
return;
}
public void onItem(java.lang.Object)
{
java.lang.Runnable v9;
java.util.function.Supplier v7;
io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor v0;
java.util.concurrent.atomic.AtomicInteger v6;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v4;
int v11, v12, v3;
java.lang.Object v1, v8;
io.smallrye.mutiny.subscription.MultiSubscriber v10;
boolean v2, v5;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: boolean isDone()>();
if v2 == 0 goto label1;
return;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: int index>;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor processor>;
v5 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: boolean isCancelled()>();
if v5 != 0 goto label2;
if v3 != 0 goto label2;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: java.util.concurrent.atomic.AtomicInteger count>;
virtualinvoke v6.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: java.util.function.Supplier supplier>;
v8 = interfaceinvoke v7.<java.util.function.Supplier: java.lang.Object get()>();
v9 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor$lambda_onItem_0__2678: java.lang.Runnable bootstrap$(io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor)>(v0);
v4 = staticinvoke <io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor create(java.util.Queue,java.lang.Runnable)>(v8, v9);
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor processor> = v4;
v10 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v10.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v4);
label2:
v11 = v3 + 1;
virtualinvoke v4.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onNext(java.lang.Object)>(v1);
v12 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: int size>;
if v11 != v12 goto label3;
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: int index> = 0;
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor processor> = null;
virtualinvoke v4.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onComplete()>();
goto label4;
label3:
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: int index> = v11;
label4:
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor v0;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v5;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v2, v4;
io.smallrye.mutiny.subscription.MultiSubscriber v6;
java.util.concurrent.Flow$Subscription v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v2);
v4 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v3 == v4 goto label2;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor processor>;
if v5 == null goto label1;
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor processor> = null;
virtualinvoke v5.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onError(java.lang.Throwable)>(v1);
label1:
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v6.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v1);
goto label3;
label2:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
label3:
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor v0;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v4;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v1, v3;
io.smallrye.mutiny.subscription.MultiSubscriber v5;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor;
v1 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v1);
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 == v3 goto label2;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor processor>;
if v4 == null goto label1;
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor processor> = null;
virtualinvoke v4.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onComplete()>();
label1:
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
label2:
return;
}
public void request(long)
{
io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor v0;
int v2;
long v1, v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: int size>;
v3 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long multiply(long,long)>(v2, v1);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void request(long)>(v3);
return;
}
public void cancel()
{
io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor v0;
java.util.concurrent.atomic.AtomicInteger v2;
int v3;
boolean v1;
java.util.concurrent.Flow$Subscription v4;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor;
v1 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: boolean compareAndSwapDownstreamCancellationRequest()>();
if v1 == 0 goto label1;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: java.util.concurrent.atomic.AtomicInteger count>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
if v3 != 0 goto label1;
v4 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowExactProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
interfaceinvoke v4.<java.util.concurrent.Flow$Subscription: void cancel()>();
label1:
return;
}
}