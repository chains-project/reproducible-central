public final class io.smallrye.mutiny.operators.multi.builders.EmptyMulti extends io.smallrye.mutiny.operators.AbstractMulti
{
private static final io.smallrye.mutiny.Multi EMPTY;
private void <init>()
{
io.smallrye.mutiny.operators.multi.builders.EmptyMulti v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.EmptyMulti;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
return;
}
public static io.smallrye.mutiny.Multi empty()
{
io.smallrye.mutiny.Multi v0;
v0 = <io.smallrye.mutiny.operators.multi.builders.EmptyMulti: io.smallrye.mutiny.Multi EMPTY>;
return v0;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.builders.EmptyMulti v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.EmptyMulti;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNullNpe(java.lang.Object,java.lang.String)>(v1, "downstream");
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void complete(java.util.concurrent.Flow$Subscriber)>(v1);
return;
}
static void <clinit>()
{
io.smallrye.mutiny.operators.multi.builders.EmptyMulti v0;
v0 = new io.smallrye.mutiny.operators.multi.builders.EmptyMulti;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.EmptyMulti: void <init>()>();
<io.smallrye.mutiny.operators.multi.builders.EmptyMulti: io.smallrye.mutiny.Multi EMPTY> = v0;
return;
}
}