final class io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription extends java.lang.Object implements java.util.concurrent.Flow$Subscription
{
private final java.util.Iterator iterator;
private final io.smallrye.mutiny.subscription.MultiSubscriber downstream;
private volatile boolean cancelled;
private final java.util.concurrent.atomic.AtomicLong requested;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, java.util.Iterator)
{
java.util.concurrent.atomic.AtomicLong v3;
java.util.Iterator v2;
io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: java.util.Iterator;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: java.util.concurrent.atomic.AtomicLong requested> = v3;
v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream> = v1;
v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: java.util.Iterator iterator> = v2;
return;
}
public void request(long)
{
long v1, v4;
java.lang.IllegalArgumentException v8;
java.util.concurrent.atomic.AtomicLong v3;
byte v2, v5, v6;
io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription v0;
io.smallrye.mutiny.subscription.MultiSubscriber v7;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label2;
v3 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: java.util.concurrent.atomic.AtomicLong requested>;
v4 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v3, v1);
v5 = v4 cmp 0L;
if v5 != 0 goto label3;
v6 = v1 cmp 9223372036854775807L;
if v6 != 0 goto label1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: void fastPath()>();
goto label3;
label1:
specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: void slowPath(long)>(v1);
goto label3;
label2:
v7 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v8 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: java.lang.IllegalArgumentException getInvalidRequestException()>();
interfaceinvoke v7.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v8);
label3:
return;
}
public void cancel()
{
io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription;
v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: boolean cancelled> = 1;
return;
}
private void fastPath()
{
java.lang.Throwable v13, v4;
java.lang.NullPointerException v8;
io.smallrye.mutiny.subscription.MultiSubscriber v14, v16, v5, v7, v9;
boolean v1, v10, v12, v15, v6;
java.util.Iterator v11, v2;
io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription v0;
java.lang.Object v3;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription;
label01:
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: boolean cancelled>;
if v1 == 0 goto label02;
return;
label02:
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: java.util.Iterator iterator>;
v3 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
label03:
goto label05;
label04:
v4 := @caughtexception;
v5 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v4);
return;
label05:
v6 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: boolean cancelled>;
if v6 == 0 goto label06;
return;
label06:
if v3 != null goto label07;
v7 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v8 = new java.lang.NullPointerException;
specialinvoke v8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Iterator.next() returned a null value");
interfaceinvoke v7.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v8);
return;
label07:
v9 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v9.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v3);
v10 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: boolean cancelled>;
if v10 == 0 goto label08;
return;
label08:
v11 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: java.util.Iterator iterator>;
v12 = interfaceinvoke v11.<java.util.Iterator: boolean hasNext()>();
label09:
goto label11;
label10:
v13 := @caughtexception;
v14 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v14.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v13);
return;
label11:
if v12 != 0 goto label01;
v15 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: boolean cancelled>;
if v15 != 0 goto label12;
v16 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v16.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
label12:
return;
catch java.lang.Throwable from label02 to label03 with label04;
catch java.lang.Throwable from label08 to label09 with label10;
}
private void slowPath(long)
{
java.lang.Throwable v16, v7;
long v1, v2, v23;
java.lang.NullPointerException v11;
byte v21, v24, v3;
io.smallrye.mutiny.subscription.MultiSubscriber v10, v12, v17, v19, v8;
boolean v13, v15, v18, v4, v9;
java.util.Iterator v14, v5;
java.util.concurrent.atomic.AtomicLong v20, v22;
io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription v0;
java.lang.Object v6;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription;
v1 := @parameter0: long;
v2 = 0L;
label01:
v3 = v2 cmp v1;
if v3 == 0 goto label14;
v4 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: boolean cancelled>;
if v4 == 0 goto label02;
return;
label02:
v5 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: java.util.Iterator iterator>;
v6 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
label03:
goto label05;
label04:
v7 := @caughtexception;
v8 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v8.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v7);
return;
label05:
v9 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: boolean cancelled>;
if v9 == 0 goto label06;
return;
label06:
if v6 != null goto label07;
v10 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v11 = new java.lang.NullPointerException;
specialinvoke v11.<java.lang.NullPointerException: void <init>(java.lang.String)>("Iterator.next() returned a null value");
interfaceinvoke v10.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v11);
return;
label07:
v12 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v12.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v6);
v13 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: boolean cancelled>;
if v13 == 0 goto label08;
return;
label08:
v14 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: java.util.Iterator iterator>;
v15 = interfaceinvoke v14.<java.util.Iterator: boolean hasNext()>();
label09:
goto label11;
label10:
v16 := @caughtexception;
v17 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v17.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v16);
return;
label11:
if v15 != 0 goto label13;
v18 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: boolean cancelled>;
if v18 != 0 goto label12;
v19 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v19.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
label12:
return;
label13:
v2 = v2 + 1L;
goto label01;
label14:
v20 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: java.util.concurrent.atomic.AtomicLong requested>;
v1 = virtualinvoke v20.<java.util.concurrent.atomic.AtomicLong: long get()>();
v21 = v2 cmp v1;
if v21 != 0 goto label01;
v22 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: java.util.concurrent.atomic.AtomicLong requested>;
v23 = neg v2;
v1 = virtualinvoke v22.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v23);
v24 = v1 cmp 0L;
if v24 != 0 goto label15;
return;
label15:
v2 = 0L;
goto label01;
catch java.lang.Throwable from label02 to label03 with label04;
catch java.lang.Throwable from label08 to label09 with label10;
}
}