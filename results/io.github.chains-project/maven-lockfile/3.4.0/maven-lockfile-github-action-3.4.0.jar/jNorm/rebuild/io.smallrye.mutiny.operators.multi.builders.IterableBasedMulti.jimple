public class io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti extends io.smallrye.mutiny.operators.AbstractMulti
{
private final java.lang.Iterable source;
public void <init>(java.lang.Iterable)
{
io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti v0;
java.lang.Iterable v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti;
v1 := @parameter0: java.lang.Iterable;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti: java.lang.Iterable source> = v1;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.lang.Throwable v4;
java.util.Iterator v3;
io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
java.lang.Iterable v2;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNullNpe(java.lang.Object,java.lang.String)>(v1, "subscriber");
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti: java.lang.Iterable source>;
v3 = interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
label2:
goto label4;
label3:
v4 := @caughtexception;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void fail(java.util.concurrent.Flow$Subscriber,java.lang.Throwable)>(v1, v4);
return;
label4:
staticinvoke <io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti: void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber,java.util.Iterator)>(v1, v3);
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber, java.util.Iterator)
{
java.lang.Throwable v3;
java.util.Iterator v1;
io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription v4;
io.smallrye.mutiny.subscription.MultiSubscriber v0;
boolean v2;
v0 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v1 := @parameter1: java.util.Iterator;
label1:
v2 = interfaceinvoke v1.<java.util.Iterator: boolean hasNext()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void fail(java.util.concurrent.Flow$Subscriber,java.lang.Throwable)>(v0, v3);
return;
label4:
if v2 != 0 goto label5;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void complete(java.util.concurrent.Flow$Subscriber)>(v0);
return;
label5:
v4 = new io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription;
specialinvoke v4.<io.smallrye.mutiny.operators.multi.builders.IterableBasedMulti$IteratorSubscription: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,java.util.Iterator)>(v0, v1);
interfaceinvoke v0.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v4);
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}