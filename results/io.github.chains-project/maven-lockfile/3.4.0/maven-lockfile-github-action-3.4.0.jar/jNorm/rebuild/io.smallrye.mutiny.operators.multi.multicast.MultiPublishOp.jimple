public final class io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp extends io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti
{
private static final long CANCELLED;
private final java.util.concurrent.atomic.AtomicReference current;
private final int bufferSize;
private final java.util.concurrent.Flow$Publisher onSubscribe;
public static io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti create(io.smallrye.mutiny.Multi)
{
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerPublisher v2;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp v3;
java.util.concurrent.atomic.AtomicReference v1;
io.smallrye.mutiny.Multi v0;
v0 := @parameter0: io.smallrye.mutiny.Multi;
v1 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v2 = new io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerPublisher;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerPublisher: void <init>(java.util.concurrent.atomic.AtomicReference,int)>(v1, 128);
v3 = new io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp;
specialinvoke v3.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp: void <init>(java.util.concurrent.Flow$Publisher,io.smallrye.mutiny.Multi,java.util.concurrent.atomic.AtomicReference,int)>(v2, v0, v1, 128);
return v3;
}
private void <init>(java.util.concurrent.Flow$Publisher, io.smallrye.mutiny.Multi, java.util.concurrent.atomic.AtomicReference, int)
{
java.util.concurrent.Flow$Publisher v1;
int v4;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp v0;
java.util.concurrent.atomic.AtomicReference v3;
io.smallrye.mutiny.Multi v2;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp;
v1 := @parameter0: java.util.concurrent.Flow$Publisher;
v2 := @parameter1: io.smallrye.mutiny.Multi;
v3 := @parameter2: java.util.concurrent.atomic.AtomicReference;
v4 := @parameter3: int;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti: void <init>(io.smallrye.mutiny.Multi)>(v2);
v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp: java.util.concurrent.Flow$Publisher onSubscribe> = v1;
v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp: java.util.concurrent.atomic.AtomicReference current> = v3;
v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp: int bufferSize> = v4;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.util.concurrent.Flow$Subscriber v4;
java.util.concurrent.Flow$Publisher v2;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp v0;
io.smallrye.mutiny.Multi v3;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp: java.util.concurrent.Flow$Publisher onSubscribe>;
v3 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp: io.smallrye.mutiny.Multi upstream>;
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Flow$Subscriber onMultiSubscription(java.util.concurrent.Flow$Publisher,java.util.concurrent.Flow$Subscriber)>(v3, v1);
interfaceinvoke v2.<java.util.concurrent.Flow$Publisher: void subscribe(java.util.concurrent.Flow$Subscriber)>(v4);
return;
}
public void connect(io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection)
{
java.util.concurrent.atomic.AtomicBoolean v14, v16, v4;
java.util.concurrent.atomic.AtomicReference v10, v12, v2;
io.smallrye.mutiny.Multi v20, v21;
int v11;
io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection v1;
io.smallrye.mutiny.subscription.MultiSubscriber v6;
boolean v13, v15, v17, v18, v19, v5, v7;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp v0;
io.smallrye.mutiny.Context v8;
java.util.concurrent.Flow$Subscriber v22;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber v9;
java.lang.Object v3;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp: java.util.concurrent.atomic.AtomicReference current>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v3 == null goto label2;
v4 = v3.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicBoolean cancelled>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v5 == 0 goto label5;
label2:
v6 = virtualinvoke v1.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: io.smallrye.mutiny.subscription.MultiSubscriber getSubscriber()>();
v7 = v6 instanceof io.smallrye.mutiny.subscription.ContextSupport;
if v7 == 0 goto label3;
v8 = interfaceinvoke v6.<io.smallrye.mutiny.subscription.ContextSupport: io.smallrye.mutiny.Context context()>();
goto label4;
label3:
v8 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
label4:
v9 = new io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber;
v10 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp: java.util.concurrent.atomic.AtomicReference current>;
v11 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp: int bufferSize>;
specialinvoke v9.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: void <init>(java.util.concurrent.atomic.AtomicReference,int,io.smallrye.mutiny.Context)>(v10, v11, v8);
v12 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp: java.util.concurrent.atomic.AtomicReference current>;
v13 = virtualinvoke v12.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v3, v9);
if v13 == 0 goto label1;
v3 = v9;
label5:
v14 = v3.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicBoolean shouldConnect>;
v15 = virtualinvoke v14.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v15 != 0 goto label6;
v16 = v3.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicBoolean shouldConnect>;
v17 = virtualinvoke v16.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v17 == 0 goto label6;
v18 = 1;
goto label7;
label6:
v18 = 0;
label7:
v19 = v18;
if v1 == null goto label8;
virtualinvoke v1.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: void accept(io.smallrye.mutiny.subscription.Cancellable)>(v3);
label8:
if v19 == 0 goto label9;
v20 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp: io.smallrye.mutiny.Multi upstream>;
v21 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp: io.smallrye.mutiny.Multi upstream>;
v22 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Flow$Subscriber onMultiSubscription(java.util.concurrent.Flow$Publisher,java.util.concurrent.Flow$Subscriber)>(v21, v3);
interfaceinvoke v20.<io.smallrye.mutiny.Multi: void subscribe(java.util.concurrent.Flow$Subscriber)>(v22);
label9:
return;
}
}