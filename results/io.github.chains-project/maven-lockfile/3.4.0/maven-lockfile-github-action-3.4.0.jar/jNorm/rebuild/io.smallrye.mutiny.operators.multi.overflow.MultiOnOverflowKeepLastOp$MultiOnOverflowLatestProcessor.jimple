class io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final java.util.concurrent.atomic.AtomicInteger wip;
private java.lang.Throwable failure;
private final java.util.concurrent.atomic.AtomicLong requested;
private volatile boolean done;
private volatile boolean cancelled;
private final java.util.concurrent.atomic.AtomicReference last;
final io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp this$0;
void <init>(io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp, io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.util.concurrent.atomic.AtomicLong v4;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp v1;
java.util.concurrent.atomic.AtomicInteger v3;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor v0;
java.util.concurrent.atomic.AtomicReference v5;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp;
v2 := @parameter1: io.smallrye.mutiny.subscription.MultiSubscriber;
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp this$0> = v1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v2);
v3 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: java.util.concurrent.atomic.AtomicInteger wip> = v3;
v4 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v4.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: java.util.concurrent.atomic.AtomicLong requested> = v4;
v5 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v5.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: java.util.concurrent.atomic.AtomicReference last> = v5;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
boolean v2;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: boolean compareAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription,java.util.concurrent.Flow$Subscription)>(null, v1);
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(9223372036854775807L);
goto label2;
label1:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label2:
return;
}
public void onItem(java.lang.Object)
{
java.lang.Object v1;
java.util.concurrent.atomic.AtomicReference v2;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: java.util.concurrent.atomic.AtomicReference last>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: void lazySet(java.lang.Object)>(v1);
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: void drain()>();
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor;
v1 := @parameter0: java.lang.Throwable;
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: java.lang.Throwable failure> = v1;
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: boolean done> = 1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: void drain()>();
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor;
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: boolean done> = 1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: void drain()>();
return;
}
public void request(long)
{
java.util.concurrent.atomic.AtomicLong v3;
byte v2;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor v0;
long v1;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v3, v1);
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: void drain()>();
label1:
return;
}
public void cancel()
{
java.util.concurrent.atomic.AtomicInteger v2;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor v0;
int v3;
java.util.concurrent.atomic.AtomicReference v4;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: boolean cancelled>;
if v1 != 0 goto label1;
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: boolean cancelled> = 1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void cancel()>();
v2 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v3 != 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: java.util.concurrent.atomic.AtomicReference last>;
virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: void lazySet(java.lang.Object)>(null);
label1:
return;
}
void drain()
{
byte v17, v24, v30, v7;
java.util.concurrent.atomic.AtomicInteger v1, v31;
boolean v11, v12, v18, v25, v28, v29, v8;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp v19, v21;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor v0;
long v16, v23, v5, v6;
java.util.concurrent.atomic.AtomicReference v14, v26, v9;
java.util.function.Function v22;
int v2, v3, v32;
io.smallrye.mutiny.subscription.MultiSubscriber v13;
java.util.function.Consumer v20;
java.util.concurrent.atomic.AtomicLong v4;
java.lang.Object v10, v15, v27;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 == 0 goto label01;
return;
label01:
v3 = 1;
v4 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: java.util.concurrent.atomic.AtomicLong requested>;
label02:
v5 = 0L;
label03:
v6 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLong: long get()>();
v7 = v5 cmp v6;
if v7 == 0 goto label07;
v8 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: boolean done>;
v9 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: java.util.concurrent.atomic.AtomicReference last>;
v10 = virtualinvoke v9.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);
if v10 != null goto label04;
v11 = 1;
goto label05;
label04:
v11 = 0;
label05:
v12 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: boolean checkTerminated(boolean,boolean)>(v8, v11);
if v12 == 0 goto label06;
return;
label06:
if v11 != 0 goto label07;
v13 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v13.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v10);
v5 = v5 + 1L;
goto label03;
label07:
v14 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: java.util.concurrent.atomic.AtomicReference last>;
v15 = virtualinvoke v14.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v16 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLong: long get()>();
v17 = v16 cmp 0L;
if v17 != 0 goto label09;
if v15 == null goto label09;
v18 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: boolean done>;
if v18 != 0 goto label09;
v19 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp this$0>;
v20 = v19.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp: java.util.function.Consumer dropConsumer>;
if v20 == null goto label08;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: void notifyOnOverflowInvoke(java.lang.Object)>(v15);
goto label09;
label08:
v21 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp this$0>;
v22 = v21.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp: java.util.function.Function dropUniMapper>;
if v22 == null goto label09;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: void notifyOnOverflowCall(java.lang.Object)>(v15);
label09:
v23 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLong: long get()>();
v24 = v5 cmp v23;
if v24 != 0 goto label12;
v25 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: boolean done>;
v26 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: java.util.concurrent.atomic.AtomicReference last>;
v27 = virtualinvoke v26.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v27 != null goto label10;
v28 = 1;
goto label11;
label10:
v28 = 0;
label11:
v29 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: boolean checkTerminated(boolean,boolean)>(v25, v28);
if v29 == 0 goto label12;
return;
label12:
v30 = v5 cmp 0L;
if v30 == 0 goto label13;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long subtract(java.util.concurrent.atomic.AtomicLong,long)>(v4, v5);
label13:
v31 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v32 = neg v3;
v3 = virtualinvoke v31.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v32);
if v3 != 0 goto label02;
return;
}
private void notifyOnOverflowInvoke(java.lang.Object)
{
java.lang.Throwable v4;
java.util.function.Consumer v3;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp v2;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor v0;
java.lang.Object v1;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor;
v1 := @parameter0: java.lang.Object;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp this$0>;
v3 = v2.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp: java.util.function.Consumer dropConsumer>;
interfaceinvoke v3.<java.util.function.Consumer: void accept(java.lang.Object)>(v1);
label2:
goto label4;
label3:
v4 := @caughtexception;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onFailure(java.lang.Throwable)>(v4);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void notifyOnOverflowCall(java.lang.Object)
{
java.lang.Throwable v9;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor v0;
java.util.function.Function v3;
java.util.function.Consumer v7, v8;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp v2;
io.smallrye.mutiny.groups.UniSubscribe v6;
java.lang.Object v1, v4, v5;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor;
v1 := @parameter0: java.lang.Object;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp this$0>;
v3 = v2.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp: java.util.function.Function dropUniMapper>;
v4 = interfaceinvoke v3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v1);
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v4, "uni");
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v7 = staticinvoke <io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor$lambda_notifyOnOverflowCall_0__2693: java.util.function.Consumer bootstrap$()>();
v8 = staticinvoke <io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor$lambda_notifyOnOverflowCall_1__2694: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor)>(v0);
virtualinvoke v6.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer,java.util.function.Consumer)>(v7, v8);
label2:
goto label4;
label3:
v9 := @caughtexception;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onFailure(java.lang.Throwable)>(v9);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
boolean checkTerminated(boolean, boolean)
{
java.lang.Throwable v5, v7;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor v0;
java.util.concurrent.atomic.AtomicReference v4, v6;
boolean v1, v2, v3;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor;
v1 := @parameter0: boolean;
v2 := @parameter1: boolean;
v3 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: boolean cancelled>;
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: java.util.concurrent.atomic.AtomicReference last>;
virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: void lazySet(java.lang.Object)>(null);
return 1;
label1:
if v1 == 0 goto label3;
v5 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: java.lang.Throwable failure>;
if v5 == null goto label2;
v6 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: java.util.concurrent.atomic.AtomicReference last>;
virtualinvoke v6.<java.util.concurrent.atomic.AtomicReference: void lazySet(java.lang.Object)>(null);
v7 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp$MultiOnOverflowLatestProcessor: java.lang.Throwable failure>;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onFailure(java.lang.Throwable)>(v7);
return 1;
label2:
if v2 == 0 goto label3;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onCompletion()>();
return 1;
label3:
return 0;
}
}