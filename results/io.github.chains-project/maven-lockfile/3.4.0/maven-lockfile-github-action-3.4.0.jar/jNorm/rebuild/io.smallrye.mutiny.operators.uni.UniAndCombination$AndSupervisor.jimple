class io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor extends java.lang.Object implements io.smallrye.mutiny.subscription.UniSubscription
{
private final java.util.List handlers;
private final io.smallrye.mutiny.subscription.UniSubscriber subscriber;
java.util.concurrent.atomic.AtomicBoolean cancelled;
java.util.concurrent.atomic.AtomicInteger nextIndex;
final io.smallrye.mutiny.operators.uni.UniAndCombination this$0;
void <init>(io.smallrye.mutiny.operators.uni.UniAndCombination, io.smallrye.mutiny.subscription.UniSubscriber)
{
java.util.Iterator v9;
java.util.concurrent.atomic.AtomicBoolean v4;
io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler v12;
io.smallrye.mutiny.operators.uni.UniAndCombination v1;
io.smallrye.mutiny.subscription.UniSubscriber v2, v6;
io.smallrye.mutiny.Context v7;
java.util.ArrayList v3;
java.util.List v13, v8;
java.util.concurrent.atomic.AtomicInteger v5;
io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor v0;
java.lang.Object v11;
boolean v10;
v0 := @this: io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor;
v1 := @parameter0: io.smallrye.mutiny.operators.uni.UniAndCombination;
v2 := @parameter1: io.smallrye.mutiny.subscription.UniSubscriber;
v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: io.smallrye.mutiny.operators.uni.UniAndCombination this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.List handlers> = v3;
v4 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v4.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.concurrent.atomic.AtomicBoolean cancelled> = v4;
v5 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v5.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.concurrent.atomic.AtomicInteger nextIndex> = v5;
v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: io.smallrye.mutiny.subscription.UniSubscriber subscriber> = v2;
v6 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: io.smallrye.mutiny.subscription.UniSubscriber subscriber>;
v7 = interfaceinvoke v6.<io.smallrye.mutiny.subscription.UniSubscriber: io.smallrye.mutiny.Context context()>();
v8 = v1.<io.smallrye.mutiny.operators.uni.UniAndCombination: java.util.List unis>;
v9 = interfaceinvoke v8.<java.util.List: java.util.Iterator iterator()>();
label1:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label2;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
v12 = new io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler;
specialinvoke v12.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: void <init>(io.smallrye.mutiny.operators.uni.UniAndCombination,io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor,io.smallrye.mutiny.Uni,io.smallrye.mutiny.Context)>(v1, v0, v11, v7);
v13 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.List handlers>;
interfaceinvoke v13.<java.util.List: boolean add(java.lang.Object)>(v12);
goto label1;
label2:
return;
}
private void run()
{
java.util.concurrent.atomic.AtomicBoolean v12;
io.smallrye.mutiny.operators.uni.UniAndCombination v1, v8;
java.util.concurrent.atomic.AtomicInteger v10;
io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor v0;
int v11, v2, v3, v5, v7, v9;
boolean v13;
java.util.List v14, v4, v6;
java.lang.Object v15;
v0 := @this: io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: io.smallrye.mutiny.operators.uni.UniAndCombination this$0>;
v2 = v1.<io.smallrye.mutiny.operators.uni.UniAndCombination: int concurrency>;
v3 = (int) -1;
if v2 != v3 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.List handlers>;
v5 = interfaceinvoke v4.<java.util.List: int size()>();
goto label2;
label1:
v6 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.List handlers>;
v7 = interfaceinvoke v6.<java.util.List: int size()>();
v8 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: io.smallrye.mutiny.operators.uni.UniAndCombination this$0>;
v9 = v8.<io.smallrye.mutiny.operators.uni.UniAndCombination: int concurrency>;
v5 = staticinvoke <java.lang.Math: int min(int,int)>(v7, v9);
v10 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v10.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(v5);
v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.concurrent.atomic.AtomicInteger nextIndex> = v10;
label2:
v11 = 0;
label3:
if v11 >= v5 goto label4;
v12 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.concurrent.atomic.AtomicBoolean cancelled>;
v13 = virtualinvoke v12.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v13 != 0 goto label4;
v14 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.List handlers>;
v15 = interfaceinvoke v14.<java.util.List: java.lang.Object get(int)>(v11);
virtualinvoke v15.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: void subscribe()>();
v11 = v11 + 1;
goto label3;
label4:
return;
}
public void cancel()
{
java.util.function.Consumer v4;
java.util.List v3;
io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor v0;
java.util.concurrent.atomic.AtomicBoolean v1;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.concurrent.atomic.AtomicBoolean cancelled>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.List handlers>;
v4 = staticinvoke <io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor$cancel__2719: java.util.function.Consumer bootstrap$()>();
interfaceinvoke v3.<java.util.List: void forEach(java.util.function.Consumer)>(v4);
label1:
return;
}
void check(io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler, boolean)
{
io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler v1;
io.smallrye.mutiny.operators.uni.UniAndCombination v25, v3, v32, v6;
io.smallrye.mutiny.subscription.UniSubscriber v12;
java.util.concurrent.atomic.AtomicInteger v30;
io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor v0;
boolean v16, v2, v22, v29, v7, v9;
java.util.List v10, v14, v23, v24, v33, v35, v4;
java.lang.Throwable v13, v18;
java.util.concurrent.atomic.AtomicBoolean v21, v28, v8;
int v26, v27, v31, v34, v5;
java.util.Iterator v15;
java.util.function.Consumer v11;
java.lang.Object v17, v19, v20, v36;
v0 := @this: io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor;
v1 := @parameter0: io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler;
v2 := @parameter1: boolean;
v3 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: io.smallrye.mutiny.operators.uni.UniAndCombination this$0>;
v4 = v3.<io.smallrye.mutiny.operators.uni.UniAndCombination: java.util.List unis>;
v5 = interfaceinvoke v4.<java.util.List: int size()>();
if v2 == 0 goto label2;
v6 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: io.smallrye.mutiny.operators.uni.UniAndCombination this$0>;
v7 = v6.<io.smallrye.mutiny.operators.uni.UniAndCombination: boolean collectAllFailureBeforeFiring>;
if v7 != 0 goto label2;
v8 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.concurrent.atomic.AtomicBoolean cancelled>;
v9 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v9 == 0 goto label1;
v10 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.List handlers>;
v11 = staticinvoke <io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor$cancel__2720: java.util.function.Consumer bootstrap$()>();
interfaceinvoke v10.<java.util.List: void forEach(java.util.function.Consumer)>(v11);
v12 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: io.smallrye.mutiny.subscription.UniSubscriber subscriber>;
v13 = v1.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: java.lang.Throwable failure>;
interfaceinvoke v12.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v13);
label1:
return;
label2:
v14 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.List handlers>;
v15 = interfaceinvoke v14.<java.util.List: java.util.Iterator iterator()>();
label3:
v16 = interfaceinvoke v15.<java.util.Iterator: boolean hasNext()>();
if v16 == 0 goto label5;
v17 = interfaceinvoke v15.<java.util.Iterator: java.lang.Object next()>();
v18 = v17.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: java.lang.Throwable failure>;
if v18 != null goto label4;
v19 = v17.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: java.lang.Object item>;
v20 = <io.smallrye.mutiny.operators.uni.UniAndCombination: java.lang.Object SENTINEL>;
if v19 == v20 goto label3;
label4:
v5 = v5 - 1;
goto label3;
label5:
if v5 != 0 goto label6;
v21 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.concurrent.atomic.AtomicBoolean cancelled>;
v22 = virtualinvoke v21.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v22 == 0 goto label6;
v23 = specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.List getFailures()>();
v24 = specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.List getItems()>();
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: void computeAndFireTheOutcome(java.util.List,java.util.List)>(v23, v24);
label6:
v25 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: io.smallrye.mutiny.operators.uni.UniAndCombination this$0>;
v26 = v25.<io.smallrye.mutiny.operators.uni.UniAndCombination: int concurrency>;
v27 = (int) -1;
if v26 == v27 goto label7;
v28 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.concurrent.atomic.AtomicBoolean cancelled>;
v29 = virtualinvoke v28.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v29 != 0 goto label7;
v30 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.concurrent.atomic.AtomicInteger nextIndex>;
v31 = virtualinvoke v30.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
v32 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: io.smallrye.mutiny.operators.uni.UniAndCombination this$0>;
v33 = v32.<io.smallrye.mutiny.operators.uni.UniAndCombination: java.util.List unis>;
v34 = interfaceinvoke v33.<java.util.List: int size()>();
if v31 >= v34 goto label7;
v35 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.List handlers>;
v36 = interfaceinvoke v35.<java.util.List: java.lang.Object get(int)>(v31);
virtualinvoke v36.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: void subscribe()>();
label7:
return;
}
private void computeAndFireTheOutcome(java.util.List, java.util.List)
{
java.lang.Throwable v7;
io.smallrye.mutiny.operators.uni.UniAndCombination v4;
io.smallrye.mutiny.subscription.UniSubscriber v11, v13, v8, v9;
java.util.function.Function v5;
io.smallrye.mutiny.CompositeException v14;
java.util.List v1, v2;
io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor v0;
int v10;
java.lang.Object v12, v6;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor;
v1 := @parameter0: java.util.List;
v2 := @parameter1: java.util.List;
v3 = interfaceinvoke v1.<java.util.List: boolean isEmpty()>();
if v3 == 0 goto label5;
label1:
v4 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: io.smallrye.mutiny.operators.uni.UniAndCombination this$0>;
v5 = v4.<io.smallrye.mutiny.operators.uni.UniAndCombination: java.util.function.Function combinator>;
v6 = interfaceinvoke v5.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v2);
label2:
goto label4;
label3:
v7 := @caughtexception;
v8 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: io.smallrye.mutiny.subscription.UniSubscriber subscriber>;
interfaceinvoke v8.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v7);
return;
label4:
v9 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: io.smallrye.mutiny.subscription.UniSubscriber subscriber>;
interfaceinvoke v9.<io.smallrye.mutiny.subscription.UniSubscriber: void onItem(java.lang.Object)>(v6);
goto label7;
label5:
v10 = interfaceinvoke v1.<java.util.List: int size()>();
if v10 != 1 goto label6;
v11 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: io.smallrye.mutiny.subscription.UniSubscriber subscriber>;
v12 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(0);
interfaceinvoke v11.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v12);
goto label7;
label6:
v13 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: io.smallrye.mutiny.subscription.UniSubscriber subscriber>;
v14 = new io.smallrye.mutiny.CompositeException;
specialinvoke v14.<io.smallrye.mutiny.CompositeException: void <init>(java.util.List)>(v1);
interfaceinvoke v13.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v14);
label7:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private java.util.List getItems()
{
java.util.List v1;
java.util.stream.Stream v2, v4;
io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor v0;
java.lang.Object v6;
java.util.stream.Collector v5;
java.util.function.Function v3;
v0 := @this: io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.List handlers>;
v2 = interfaceinvoke v1.<java.util.List: java.util.stream.Stream stream()>();
v3 = staticinvoke <io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor$lambda_getItems_0__2721: java.util.function.Function bootstrap$()>();
v4 = interfaceinvoke v2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v3);
v5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v6 = interfaceinvoke v4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v5);
return v6;
}
private java.util.List getFailures()
{
java.util.function.Predicate v3;
java.util.function.Function v5;
java.util.List v1;
java.util.stream.Stream v2, v4, v6;
io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor v0;
java.lang.Object v8;
java.util.stream.Collector v7;
v0 := @this: io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: java.util.List handlers>;
v2 = interfaceinvoke v1.<java.util.List: java.util.stream.Stream stream()>();
v3 = staticinvoke <io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor$lambda_getFailures_1__2722: java.util.function.Predicate bootstrap$()>();
v4 = interfaceinvoke v2.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v3);
v5 = staticinvoke <io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor$lambda_getFailures_2__2723: java.util.function.Function bootstrap$()>();
v6 = interfaceinvoke v4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v5);
v7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v8 = interfaceinvoke v6.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v7);
return v8;
}
}