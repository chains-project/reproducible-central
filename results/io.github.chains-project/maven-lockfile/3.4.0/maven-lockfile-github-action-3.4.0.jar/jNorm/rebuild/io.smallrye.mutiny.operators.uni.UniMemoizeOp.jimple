public class io.smallrye.mutiny.operators.uni.UniMemoizeOp extends io.smallrye.mutiny.operators.UniOperator implements io.smallrye.mutiny.subscription.UniSubscriber
{
private final java.util.function.BooleanSupplier invalidationRequested;
private final java.util.concurrent.atomic.AtomicReference state;
private final java.util.concurrent.atomic.AtomicInteger wip;
private final java.util.List subscribers;
private volatile io.smallrye.mutiny.subscription.UniSubscription upstreamSubscription;
private volatile java.lang.Object item;
private volatile java.lang.Throwable failure;
private volatile io.smallrye.mutiny.Context lastContextInUse;
public void <init>(io.smallrye.mutiny.Uni)
{
io.smallrye.mutiny.operators.uni.UniMemoizeOp v0;
io.smallrye.mutiny.Uni v1;
java.util.function.BooleanSupplier v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniMemoizeOp;
v1 := @parameter0: io.smallrye.mutiny.Uni;
v2 = staticinvoke <io.smallrye.mutiny.operators.uni.UniMemoizeOp$lambda_new_0__2727: java.util.function.BooleanSupplier bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: void <init>(io.smallrye.mutiny.Uni,java.util.function.BooleanSupplier)>(v1, v2);
return;
}
public void <init>(io.smallrye.mutiny.Uni, java.util.function.BooleanSupplier)
{
java.util.concurrent.atomic.AtomicReference v4;
io.smallrye.mutiny.Uni v1;
java.util.ArrayList v7;
java.util.function.BooleanSupplier v2;
io.smallrye.mutiny.operators.uni.UniMemoizeOp v0;
java.util.List v8;
io.smallrye.mutiny.operators.uni.UniMemoizeOp$State v5;
java.util.concurrent.atomic.AtomicInteger v6;
java.lang.Object v3;
v0 := @this: io.smallrye.mutiny.operators.uni.UniMemoizeOp;
v1 := @parameter0: io.smallrye.mutiny.Uni;
v2 := @parameter1: java.util.function.BooleanSupplier;
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "upstream");
specialinvoke v0.<io.smallrye.mutiny.operators.UniOperator: void <init>(io.smallrye.mutiny.Uni)>(v3);
v4 = new java.util.concurrent.atomic.AtomicReference;
v5 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$State: io.smallrye.mutiny.operators.uni.UniMemoizeOp$State INIT>;
specialinvoke v4.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(v5);
v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.concurrent.atomic.AtomicReference state> = v4;
v6 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v6.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.concurrent.atomic.AtomicInteger wip> = v6;
v7 = new java.util.ArrayList;
specialinvoke v7.<java.util.ArrayList: void <init>()>();
v8 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>(v7);
v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.List subscribers> = v8;
v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.function.BooleanSupplier invalidationRequested> = v2;
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.operators.uni.UniMemoizeOp v0;
io.smallrye.mutiny.Context v1;
v0 := @this: io.smallrye.mutiny.operators.uni.UniMemoizeOp;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: io.smallrye.mutiny.Context lastContextInUse>;
return v1;
}
public void subscribe(io.smallrye.mutiny.subscription.UniSubscriber)
{
java.lang.Throwable v17, v18;
io.smallrye.mutiny.subscription.UniSubscriber v1;
java.util.concurrent.atomic.AtomicReference v12, v21, v4, v7;
io.smallrye.mutiny.Uni v26;
java.util.function.BooleanSupplier v2;
io.smallrye.mutiny.operators.uni.UniMemoizeOp v0;
io.smallrye.mutiny.operators.uni.UniMemoizeOp$State v14, v22, v23, v6, v8;
boolean v16, v24, v3;
io.smallrye.mutiny.subscription.UniSubscription v10, v15, v9;
io.smallrye.mutiny.Context v25;
java.util.List v20;
io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper v11;
java.lang.Object v13, v19, v5;
v0 := @this: io.smallrye.mutiny.operators.uni.UniMemoizeOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscriber;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.function.BooleanSupplier invalidationRequested>;
v3 = interfaceinvoke v2.<java.util.function.BooleanSupplier: boolean getAsBoolean()>();
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.concurrent.atomic.AtomicReference state>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v6 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$State: io.smallrye.mutiny.operators.uni.UniMemoizeOp$State SUBSCRIBING>;
if v5 == v6 goto label1;
v7 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.concurrent.atomic.AtomicReference state>;
v8 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$State: io.smallrye.mutiny.operators.uni.UniMemoizeOp$State INIT>;
virtualinvoke v7.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v8);
v9 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: io.smallrye.mutiny.subscription.UniSubscription upstreamSubscription>;
if v9 == null goto label1;
v10 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: io.smallrye.mutiny.subscription.UniSubscription upstreamSubscription>;
interfaceinvoke v10.<io.smallrye.mutiny.subscription.UniSubscription: void cancel()>();
label1:
v11 = new io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper;
specialinvoke v11.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: void <init>(io.smallrye.mutiny.subscription.UniSubscriber)>(v1);
v12 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.concurrent.atomic.AtomicReference state>;
v13 = virtualinvoke v12.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v14 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$State: io.smallrye.mutiny.operators.uni.UniMemoizeOp$State CACHING>;
if v13 != v14 goto label4;
virtualinvoke v11.<java.lang.Object: java.lang.Class getClass()>();
v15 = staticinvoke <io.smallrye.mutiny.operators.uni.UniMemoizeOp$markCancelled__2728: io.smallrye.mutiny.subscription.UniSubscription bootstrap$(io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper)>(v11);
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v15);
v16 = virtualinvoke v11.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: boolean isCancelled()>();
if v16 != 0 goto label3;
v17 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.lang.Throwable failure>;
if v17 == null goto label2;
v18 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.lang.Throwable failure>;
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v18);
goto label3;
label2:
v19 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.lang.Object item>;
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: void onItem(java.lang.Object)>(v19);
label3:
return;
label4:
v20 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.List subscribers>;
interfaceinvoke v20.<java.util.List: boolean add(java.lang.Object)>(v11);
v21 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.concurrent.atomic.AtomicReference state>;
v22 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$State: io.smallrye.mutiny.operators.uni.UniMemoizeOp$State INIT>;
v23 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$State: io.smallrye.mutiny.operators.uni.UniMemoizeOp$State SUBSCRIBING>;
v24 = virtualinvoke v21.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v22, v23);
if v24 == 0 goto label5;
v25 = interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: io.smallrye.mutiny.Context context()>();
v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: io.smallrye.mutiny.Context lastContextInUse> = v25;
v26 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: io.smallrye.mutiny.Uni upstream()>();
staticinvoke <io.smallrye.mutiny.operators.AbstractUni: void subscribe(io.smallrye.mutiny.Uni,io.smallrye.mutiny.subscription.UniSubscriber)>(v26, v0);
label5:
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: void drain()>();
return;
}
public void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)
{
io.smallrye.mutiny.subscription.UniSubscription v1;
io.smallrye.mutiny.operators.uni.UniMemoizeOp v0;
io.smallrye.mutiny.operators.uni.UniMemoizeOp$State v3, v4;
java.util.concurrent.atomic.AtomicReference v2;
boolean v5;
v0 := @this: io.smallrye.mutiny.operators.uni.UniMemoizeOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscription;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.concurrent.atomic.AtomicReference state>;
v3 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$State: io.smallrye.mutiny.operators.uni.UniMemoizeOp$State SUBSCRIBING>;
v4 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$State: io.smallrye.mutiny.operators.uni.UniMemoizeOp$State SUBSCRIBED>;
v5 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v3, v4);
if v5 == 0 goto label1;
v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: io.smallrye.mutiny.subscription.UniSubscription upstreamSubscription> = v1;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: void drain()>();
goto label2;
label1:
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscription: void cancel()>();
label2:
return;
}
private void drain()
{
java.lang.IllegalStateException v33;
io.smallrye.mutiny.subscription.UniSubscriber v23, v25, v28, v29, v38, v39;
io.smallrye.mutiny.operators.uni.UniMemoizeOp v0;
io.smallrye.mutiny.operators.uni.UniMemoizeOp$State v35;
int[] v20;
java.util.concurrent.atomic.AtomicInteger v1, v41;
boolean v11, v13, v19, v27, v36, v5;
java.util.List v14, v30, v32, v4, v40, v6, v8;
java.lang.Throwable v16, v31, v37, v9;
java.util.concurrent.atomic.AtomicReference v17;
java.util.ArrayList v7;
int v2, v21, v22, v3, v42;
java.lang.String v34;
io.smallrye.mutiny.subscription.UniSubscription v24, v26;
java.util.Iterator v10;
java.lang.Object v12, v15, v18;
v0 := @this: io.smallrye.mutiny.operators.uni.UniMemoizeOp;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 == 0 goto label01;
return;
label01:
v3 = 1;
label02:
v4 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.List subscribers>;
v5 = interfaceinvoke v4.<java.util.List: boolean isEmpty()>();
if v5 != 0 goto label19;
v6 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.List subscribers>;
entermonitor v6;
label03:
v7 = new java.util.ArrayList;
v8 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.List subscribers>;
specialinvoke v7.<java.util.ArrayList: void <init>(java.util.Collection)>(v8);
exitmonitor v6;
label04:
goto label06;
label05:
v9 := @caughtexception;
exitmonitor v6;
throw v9;
label06:
v10 = virtualinvoke v7.<java.util.ArrayList: java.util.Iterator iterator()>();
label07:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label19;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
v13 = virtualinvoke v12.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: boolean isCancelled()>();
if v13 == 0 goto label08;
v14 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.List subscribers>;
interfaceinvoke v14.<java.util.List: boolean remove(java.lang.Object)>(v12);
goto label07;
label08:
v15 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.lang.Object item>;
v16 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.lang.Throwable failure>;
v17 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.concurrent.atomic.AtomicReference state>;
v18 = virtualinvoke v17.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v19 = virtualinvoke v12.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: boolean isAwaitingSubscription()>();
if v19 == 0 goto label16;
v20 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$1: int[] $SwitchMap$io$smallrye$mutiny$operators$uni$UniMemoizeOp$State>;
v21 = virtualinvoke v18.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$State: int ordinal()>();
v22 = v20[v21];
tableswitch(v22)
{
case 1: goto label07;
case 2: goto label07;
case 3: goto label09;
case 4: goto label10;
default: goto label15;
};
label09:
v23 = v12.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: io.smallrye.mutiny.subscription.UniSubscriber subscriber>;
virtualinvoke v12.<java.lang.Object: java.lang.Class getClass()>();
v24 = staticinvoke <io.smallrye.mutiny.operators.uni.UniMemoizeOp$markCancelled__2730: io.smallrye.mutiny.subscription.UniSubscription bootstrap$(io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper)>(v12);
interfaceinvoke v23.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v24);
virtualinvoke v12.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: void markSubscribed()>();
goto label07;
label10:
v25 = v12.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: io.smallrye.mutiny.subscription.UniSubscriber subscriber>;
virtualinvoke v12.<java.lang.Object: java.lang.Class getClass()>();
v26 = staticinvoke <io.smallrye.mutiny.operators.uni.UniMemoizeOp$markCancelled__2729: io.smallrye.mutiny.subscription.UniSubscription bootstrap$(io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper)>(v12);
interfaceinvoke v25.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v26);
virtualinvoke v12.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: void markSubscribed()>();
label11:
v27 = virtualinvoke v12.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: boolean isCancelled()>();
if v27 != 0 goto label13;
if v16 == null goto label12;
v28 = v12.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: io.smallrye.mutiny.subscription.UniSubscriber subscriber>;
interfaceinvoke v28.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v16);
goto label13;
label12:
v29 = v12.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: io.smallrye.mutiny.subscription.UniSubscriber subscriber>;
interfaceinvoke v29.<io.smallrye.mutiny.subscription.UniSubscriber: void onItem(java.lang.Object)>(v15);
label13:
v30 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.List subscribers>;
interfaceinvoke v30.<java.util.List: boolean remove(java.lang.Object)>(v12);
goto label07;
label14:
v31 := @caughtexception;
v32 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.List subscribers>;
interfaceinvoke v32.<java.util.List: boolean remove(java.lang.Object)>(v12);
throw v31;
label15:
v33 = new java.lang.IllegalStateException;
v34 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.smallrye.mutiny.operators.uni.UniMemoizeOp$State)>(v18) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Current state is \u0001");
specialinvoke v33.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v34);
throw v33;
label16:
v35 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$State: io.smallrye.mutiny.operators.uni.UniMemoizeOp$State CACHING>;
if v18 != v35 goto label07;
v36 = virtualinvoke v12.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: boolean isAwaitingResult()>();
if v36 == 0 goto label07;
v37 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.lang.Throwable failure>;
if v37 == null goto label17;
v38 = v12.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: io.smallrye.mutiny.subscription.UniSubscriber subscriber>;
interfaceinvoke v38.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v16);
goto label18;
label17:
v39 = v12.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: io.smallrye.mutiny.subscription.UniSubscriber subscriber>;
interfaceinvoke v39.<io.smallrye.mutiny.subscription.UniSubscriber: void onItem(java.lang.Object)>(v15);
label18:
v40 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.List subscribers>;
interfaceinvoke v40.<java.util.List: boolean remove(java.lang.Object)>(v12);
goto label07;
label19:
v41 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.concurrent.atomic.AtomicInteger wip>;
v42 = neg v3;
v3 = virtualinvoke v41.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v42);
if v3 != 0 goto label02;
return;
catch java.lang.Throwable from label03 to label04 with label05;
catch java.lang.Throwable from label11 to label13 with label14;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.operators.uni.UniMemoizeOp v0;
io.smallrye.mutiny.operators.uni.UniMemoizeOp$State v4, v6;
java.lang.Object v1, v3;
java.util.concurrent.atomic.AtomicReference v2, v5;
v0 := @this: io.smallrye.mutiny.operators.uni.UniMemoizeOp;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.concurrent.atomic.AtomicReference state>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v4 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$State: io.smallrye.mutiny.operators.uni.UniMemoizeOp$State SUBSCRIBED>;
if v3 != v4 goto label1;
v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.lang.Object item> = v1;
v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.lang.Throwable failure> = null;
v5 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.concurrent.atomic.AtomicReference state>;
v6 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$State: io.smallrye.mutiny.operators.uni.UniMemoizeOp$State CACHING>;
virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v6);
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: void drain()>();
label1:
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.uni.UniMemoizeOp v0;
io.smallrye.mutiny.operators.uni.UniMemoizeOp$State v4, v6;
java.lang.Object v3;
java.util.concurrent.atomic.AtomicReference v2, v5;
v0 := @this: io.smallrye.mutiny.operators.uni.UniMemoizeOp;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.concurrent.atomic.AtomicReference state>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v4 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$State: io.smallrye.mutiny.operators.uni.UniMemoizeOp$State SUBSCRIBED>;
if v3 != v4 goto label1;
v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.lang.Object item> = null;
v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.lang.Throwable failure> = v1;
v5 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: java.util.concurrent.atomic.AtomicReference state>;
v6 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$State: io.smallrye.mutiny.operators.uni.UniMemoizeOp$State CACHING>;
virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v6);
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: void drain()>();
label1:
return;
}
}