class io.smallrye.mutiny.operators.uni.UniSubscribeToCompletionStage$1 extends java.util.concurrent.CompletableFuture
{
final java.util.concurrent.atomic.AtomicReference val$cancellable;
void <init>(java.util.concurrent.atomic.AtomicReference)
{
io.smallrye.mutiny.operators.uni.UniSubscribeToCompletionStage$1 v0;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.operators.uni.UniSubscribeToCompletionStage$1;
v1 := @parameter0: java.util.concurrent.atomic.AtomicReference;
v0.<io.smallrye.mutiny.operators.uni.UniSubscribeToCompletionStage$1: java.util.concurrent.atomic.AtomicReference val$cancellable> = v1;
specialinvoke v0.<java.util.concurrent.CompletableFuture: void <init>()>();
return;
}
public boolean cancel(boolean)
{
io.smallrye.mutiny.operators.uni.UniSubscribeToCompletionStage$1 v0;
java.lang.Object v4;
java.util.concurrent.atomic.AtomicReference v3;
boolean v1, v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniSubscribeToCompletionStage$1;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<java.util.concurrent.CompletableFuture: boolean cancel(boolean)>(v1);
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.uni.UniSubscribeToCompletionStage$1: java.util.concurrent.atomic.AtomicReference val$cancellable>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v4 == null goto label1;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.Cancellable: void cancel()>();
label1:
return v2;
}
}