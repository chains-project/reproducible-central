public class io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter extends java.lang.Object implements io.smallrye.mutiny.subscription.UniEmitter, io.smallrye.mutiny.subscription.UniSubscription
{
private final io.smallrye.mutiny.subscription.UniSubscriber downstream;
private final java.util.concurrent.atomic.AtomicBoolean disposed;
private final java.util.concurrent.atomic.AtomicReference onTermination;
void <init>(io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter v0;
java.util.concurrent.atomic.AtomicBoolean v2;
java.lang.Object v4;
io.smallrye.mutiny.subscription.UniSubscriber v1;
java.util.concurrent.atomic.AtomicReference v3;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscriber;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter: java.util.concurrent.atomic.AtomicBoolean disposed> = v2;
v3 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter: java.util.concurrent.atomic.AtomicReference onTermination> = v3;
v4 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "subscriber");
v0.<io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter: io.smallrye.mutiny.subscription.UniSubscriber downstream> = v4;
return;
}
public void complete(java.lang.Object)
{
io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter v0;
java.util.concurrent.atomic.AtomicBoolean v2;
java.lang.Object v1;
io.smallrye.mutiny.subscription.UniSubscriber v4;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter: java.util.concurrent.atomic.AtomicBoolean disposed>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.UniSubscriber: void onItem(java.lang.Object)>(v1);
specialinvoke v0.<io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter: void terminate()>();
label1:
return;
}
private void terminate()
{
io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter v0;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter;
v1 = v0.<io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter: java.util.concurrent.atomic.AtomicReference onTermination>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);
if v2 == null goto label1;
interfaceinvoke v2.<java.lang.Runnable: void run()>();
label1:
return;
}
public void fail(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter v0;
java.util.concurrent.atomic.AtomicBoolean v2;
io.smallrye.mutiny.subscription.UniSubscriber v4;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter;
v1 := @parameter0: java.lang.Throwable;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "failure");
v2 = v0.<io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter: java.util.concurrent.atomic.AtomicBoolean disposed>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v1);
specialinvoke v0.<io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter: void terminate()>();
label1:
return;
}
public io.smallrye.mutiny.subscription.UniEmitter onTermination(java.lang.Runnable)
{
java.util.concurrent.atomic.AtomicBoolean v3, v6;
java.lang.Runnable v1;
java.util.concurrent.atomic.AtomicReference v5;
io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter v0;
java.lang.Object v2;
boolean v4, v7;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "onTermination");
v3 = v0.<io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter: java.util.concurrent.atomic.AtomicBoolean disposed>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v4 != 0 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter: java.util.concurrent.atomic.AtomicReference onTermination>;
virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v2);
v6 = v0.<io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter: java.util.concurrent.atomic.AtomicBoolean disposed>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v7 == 0 goto label2;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter: void terminate()>();
goto label2;
label1:
interfaceinvoke v1.<java.lang.Runnable: void run()>();
label2:
return v0;
}
public void cancel()
{
io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter v0;
java.util.concurrent.atomic.AtomicBoolean v1;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter;
v1 = v0.<io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter: java.util.concurrent.atomic.AtomicBoolean disposed>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v2 == 0 goto label1;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter: void terminate()>();
label1:
return;
}
public boolean isTerminated()
{
io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter v0;
java.util.concurrent.atomic.AtomicBoolean v1;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter;
v1 = v0.<io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter: java.util.concurrent.atomic.AtomicBoolean disposed>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
return v2;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter v0;
io.smallrye.mutiny.subscription.UniSubscriber v1;
io.smallrye.mutiny.Context v2;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter;
v1 = v0.<io.smallrye.mutiny.operators.uni.builders.DefaultUniEmitter: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
v2 = interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: io.smallrye.mutiny.Context context()>();
return v2;
}
}