class io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber extends java.lang.Object implements io.smallrye.mutiny.subscription.UniSubscription, java.util.concurrent.Flow$Subscriber, io.smallrye.mutiny.subscription.ContextSupport
{
private final io.smallrye.mutiny.subscription.UniSubscriber subscriber;
java.util.concurrent.atomic.AtomicReference subscription;
final io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher this$0;
private void <init>(io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher, io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher v1;
io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber v0;
io.smallrye.mutiny.subscription.UniSubscriber v2;
java.util.concurrent.atomic.AtomicReference v3;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber;
v1 := @parameter0: io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher;
v2 := @parameter1: io.smallrye.mutiny.subscription.UniSubscriber;
v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber: io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber: java.util.concurrent.atomic.AtomicReference subscription> = v3;
v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber: io.smallrye.mutiny.subscription.UniSubscriber subscriber> = v2;
return;
}
private void forward()
{
java.util.concurrent.Flow$Subscriber v4;
java.util.concurrent.Flow$Publisher v3, v6;
io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher v2, v5;
io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber v0;
io.smallrye.mutiny.subscription.UniSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber: io.smallrye.mutiny.subscription.UniSubscriber subscriber>;
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v0);
v2 = v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber: io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher this$0>;
v3 = v2.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher: java.util.concurrent.Flow$Publisher publisher>;
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Flow$Subscriber onMultiSubscription(java.util.concurrent.Flow$Publisher,java.util.concurrent.Flow$Subscriber)>(v3, v0);
v5 = v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber: io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher this$0>;
v6 = v5.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher: java.util.concurrent.Flow$Publisher publisher>;
interfaceinvoke v6.<java.util.concurrent.Flow$Publisher: void subscribe(java.util.concurrent.Flow$Subscriber)>(v4);
return;
}
public void cancel()
{
io.smallrye.mutiny.subscription.UniSubscription v2;
java.lang.Object v3;
io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber v0;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber: java.util.concurrent.atomic.AtomicReference subscription>;
v2 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
v3 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v2);
if v3 == null goto label1;
interfaceinvoke v3.<java.util.concurrent.Flow$Subscription: void cancel()>();
label1:
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber v0;
java.util.concurrent.atomic.AtomicReference v2;
boolean v3;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber: java.util.concurrent.atomic.AtomicReference subscription>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
if v3 == 0 goto label1;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(1L);
goto label2;
label1:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label2:
return;
}
public void onNext(java.lang.Object)
{
io.smallrye.mutiny.subscription.UniSubscription v3, v5;
java.lang.Object v1, v4;
io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber v0;
io.smallrye.mutiny.subscription.UniSubscriber v6;
java.util.concurrent.atomic.AtomicReference v2;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber: java.util.concurrent.atomic.AtomicReference subscription>;
v3 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
v4 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v3);
v5 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
if v4 == v5 goto label1;
interfaceinvoke v4.<java.util.concurrent.Flow$Subscription: void cancel()>();
v6 = v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber: io.smallrye.mutiny.subscription.UniSubscriber subscriber>;
interfaceinvoke v6.<io.smallrye.mutiny.subscription.UniSubscriber: void onItem(java.lang.Object)>(v1);
label1:
return;
}
public void onError(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.subscription.UniSubscription v3, v5;
java.lang.Object v4;
io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber v0;
io.smallrye.mutiny.subscription.UniSubscriber v6;
java.util.concurrent.atomic.AtomicReference v2;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber: java.util.concurrent.atomic.AtomicReference subscription>;
v3 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
v4 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v3);
v5 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
if v4 == v5 goto label1;
v6 = v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber: io.smallrye.mutiny.subscription.UniSubscriber subscriber>;
interfaceinvoke v6.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v1);
label1:
return;
}
public void onComplete()
{
io.smallrye.mutiny.subscription.UniSubscription v2, v4;
java.lang.Object v3;
io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber v0;
io.smallrye.mutiny.subscription.UniSubscriber v5;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber: java.util.concurrent.atomic.AtomicReference subscription>;
v2 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
v3 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v2);
v4 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
if v3 == v4 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber: io.smallrye.mutiny.subscription.UniSubscriber subscriber>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.UniSubscriber: void onItem(java.lang.Object)>(null);
label1:
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber v0;
io.smallrye.mutiny.subscription.UniSubscriber v1;
io.smallrye.mutiny.Context v2;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber: io.smallrye.mutiny.subscription.UniSubscriber subscriber>;
v2 = interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: io.smallrye.mutiny.Context context()>();
return v2;
}
}