public class io.smallrye.mutiny.operators.uni.builders.UniJoinFirst extends io.smallrye.mutiny.operators.AbstractUni
{
private final java.util.List unis;
private final io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$Mode mode;
private final int concurrency;
static final boolean $assertionsDisabled;
public void <init>(java.util.List, io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$Mode, int)
{
java.lang.AssertionError v8;
io.smallrye.mutiny.operators.uni.builders.UniJoinFirst v0;
java.util.List v1;
int v3, v7;
boolean v4;
io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$Mode v2, v5, v6;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniJoinFirst;
v1 := @parameter0: java.util.List;
v2 := @parameter1: io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$Mode;
v3 := @parameter2: int;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractUni: void <init>()>();
v0.<io.smallrye.mutiny.operators.uni.builders.UniJoinFirst: java.util.List unis> = v1;
v0.<io.smallrye.mutiny.operators.uni.builders.UniJoinFirst: io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$Mode mode> = v2;
v0.<io.smallrye.mutiny.operators.uni.builders.UniJoinFirst: int concurrency> = v3;
v4 = <io.smallrye.mutiny.operators.uni.builders.UniJoinFirst: boolean $assertionsDisabled>;
if v4 != 0 goto label2;
v5 = <io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$Mode: io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$Mode FIRST_WITH_ITEM>;
if v2 == v5 goto label2;
v6 = <io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$Mode: io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$Mode FIRST_TO_EMIT>;
if v2 != v6 goto label1;
v7 = (int) -1;
if v3 == v7 goto label2;
label1:
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>()>();
throw v8;
label2:
return;
}
public void subscribe(io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.operators.uni.builders.UniJoinFirst v0;
io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$UniJoinFirstSubscription v2;
io.smallrye.mutiny.subscription.UniSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniJoinFirst;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscriber;
v2 = new io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$UniJoinFirstSubscription;
specialinvoke v2.<io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$UniJoinFirstSubscription: void <init>(io.smallrye.mutiny.operators.uni.builders.UniJoinFirst,io.smallrye.mutiny.subscription.UniSubscriber)>(v0, v1);
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v2);
virtualinvoke v2.<io.smallrye.mutiny.operators.uni.builders.UniJoinFirst$UniJoinFirstSubscription: void triggerSubscriptions()>();
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/smallrye/mutiny/operators/uni/builders/UniJoinFirst;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.smallrye.mutiny.operators.uni.builders.UniJoinFirst: boolean $assertionsDisabled> = v2;
return;
}
}