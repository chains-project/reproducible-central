public class io.smallrye.mutiny.subscription.UniSerializedSubscriber extends java.lang.Object implements io.smallrye.mutiny.subscription.UniSubscriber, io.smallrye.mutiny.subscription.UniSubscription
{
private static final int INIT;
private static final int SUBSCRIBED;
private static final int HAS_SUBSCRIPTION;
private static final int DONE;
private final java.util.concurrent.atomic.AtomicInteger state;
private final io.smallrye.mutiny.operators.AbstractUni upstream;
private final io.smallrye.mutiny.subscription.UniSubscriber downstream;
private volatile io.smallrye.mutiny.subscription.UniSubscription subscription;
private final java.util.concurrent.atomic.AtomicReference failure;
public void <init>(io.smallrye.mutiny.operators.AbstractUni, io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.operators.AbstractUni v1;
io.smallrye.mutiny.subscription.UniSerializedSubscriber v0;
java.util.concurrent.atomic.AtomicInteger v3;
java.lang.Object v5, v6;
io.smallrye.mutiny.subscription.UniSubscriber v2;
java.util.concurrent.atomic.AtomicReference v4;
v0 := @this: io.smallrye.mutiny.subscription.UniSerializedSubscriber;
v1 := @parameter0: io.smallrye.mutiny.operators.AbstractUni;
v2 := @parameter1: io.smallrye.mutiny.subscription.UniSubscriber;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);
v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: java.util.concurrent.atomic.AtomicInteger state> = v3;
v4 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v4.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: java.util.concurrent.atomic.AtomicReference failure> = v4;
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "source");
v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: io.smallrye.mutiny.operators.AbstractUni upstream> = v5;
v6 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "subscriber` must not be `null`");
v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: io.smallrye.mutiny.subscription.UniSubscriber downstream> = v6;
return;
}
public static void subscribe(io.smallrye.mutiny.operators.AbstractUni, io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.operators.AbstractUni v0;
io.smallrye.mutiny.subscription.UniSerializedSubscriber v3;
io.smallrye.mutiny.subscription.UniSubscriber v1, v2;
v0 := @parameter0: io.smallrye.mutiny.operators.AbstractUni;
v1 := @parameter1: io.smallrye.mutiny.subscription.UniSubscriber;
v2 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.subscription.UniSubscriber onUniSubscription(io.smallrye.mutiny.Uni,io.smallrye.mutiny.subscription.UniSubscriber)>(v0, v1);
v3 = new io.smallrye.mutiny.subscription.UniSerializedSubscriber;
specialinvoke v3.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: void <init>(io.smallrye.mutiny.operators.AbstractUni,io.smallrye.mutiny.subscription.UniSubscriber)>(v0, v2);
specialinvoke v3.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: void subscribe()>();
return;
}
private void subscribe()
{
io.smallrye.mutiny.operators.AbstractUni v3;
io.smallrye.mutiny.subscription.UniSerializedSubscriber v0;
java.util.concurrent.atomic.AtomicInteger v1;
boolean v2;
v0 := @this: io.smallrye.mutiny.subscription.UniSerializedSubscriber;
v1 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(0, 1);
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: io.smallrye.mutiny.operators.AbstractUni upstream>;
virtualinvoke v3.<io.smallrye.mutiny.operators.AbstractUni: void subscribe(io.smallrye.mutiny.subscription.UniSubscriber)>(v0);
label1:
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.subscription.UniSerializedSubscriber v0;
io.smallrye.mutiny.subscription.UniSubscriber v1;
io.smallrye.mutiny.Context v2;
v0 := @this: io.smallrye.mutiny.subscription.UniSerializedSubscriber;
v1 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
v2 = interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: io.smallrye.mutiny.Context context()>();
return v2;
}
public void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)
{
io.smallrye.mutiny.subscription.UniSubscription v1;
java.lang.IllegalStateException v12;
io.smallrye.mutiny.subscription.UniSubscriber v10, v11, v4, v9;
java.util.concurrent.atomic.AtomicReference v7;
io.smallrye.mutiny.subscription.UniSerializedSubscriber v0;
java.util.concurrent.atomic.AtomicInteger v13, v2, v5;
int v6;
java.lang.Object v8;
java.lang.String v14;
boolean v3;
v0 := @this: io.smallrye.mutiny.subscription.UniSerializedSubscriber;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscription;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "subscription");
v2 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(1, 2);
if v3 == 0 goto label1;
v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: io.smallrye.mutiny.subscription.UniSubscription subscription> = v1;
v4 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v0);
goto label3;
label1:
v5 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicInteger: int get()>();
if v6 != 3 goto label2;
v7 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: java.util.concurrent.atomic.AtomicReference failure>;
v8 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);
if v8 == null goto label3;
v9 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v9.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v0);
v10 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v10.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v8);
goto label3;
label2:
v11 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
v12 = new java.lang.IllegalStateException;
v13 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.concurrent.atomic.AtomicInteger)>(v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid transition, expected to be in the SUBSCRIBED state but was in \u0001");
specialinvoke v12.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v14);
staticinvoke <io.smallrye.mutiny.helpers.EmptyUniSubscription: void propagateFailureEvent(io.smallrye.mutiny.subscription.UniSubscriber,java.lang.Throwable)>(v11, v12);
label3:
return;
}
public void onItem(java.lang.Object)
{
java.lang.Throwable v5;
java.lang.IllegalStateException v9;
io.smallrye.mutiny.subscription.UniSubscriber v4;
java.util.concurrent.atomic.AtomicReference v8;
io.smallrye.mutiny.subscription.UniSerializedSubscriber v0;
java.util.concurrent.atomic.AtomicInteger v2, v6;
java.lang.Object v1;
java.lang.String v10;
boolean v3, v7;
v0 := @this: io.smallrye.mutiny.subscription.UniSerializedSubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(2, 3);
if v3 == 0 goto label4;
label1:
v4 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.UniSubscriber: void onItem(java.lang.Object)>(v1);
label2:
goto label5;
label3:
v5 := @caughtexception;
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v5);
throw v5;
label4:
v6 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(1, 3);
if v7 == 0 goto label5;
v8 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: java.util.concurrent.atomic.AtomicReference failure>;
v9 = new java.lang.IllegalStateException;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid transition, expected to be in the HAS_SUBSCRIPTION states but was in SUBSCRIBED and received onItem(\u0001)");
specialinvoke v9.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v10);
virtualinvoke v8.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v9);
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1, v5;
io.smallrye.mutiny.subscription.UniSubscriber v4;
java.util.concurrent.atomic.AtomicReference v10;
io.smallrye.mutiny.CompositeException v6;
io.smallrye.mutiny.subscription.UniSerializedSubscriber v0;
java.util.concurrent.atomic.AtomicInteger v2, v8;
java.lang.Throwable[] v7;
boolean v3, v9;
v0 := @this: io.smallrye.mutiny.subscription.UniSerializedSubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(2, 3);
if v3 == 0 goto label4;
label1:
v4 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v1);
label2:
goto label6;
label3:
v5 := @caughtexception;
v6 = new io.smallrye.mutiny.CompositeException;
v7 = newarray (java.lang.Throwable)[2];
v7[0] = v1;
v7[1] = v5;
specialinvoke v6.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v7);
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v6);
throw v5;
label4:
v8 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v9 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(1, 3);
if v9 == 0 goto label5;
v10 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: java.util.concurrent.atomic.AtomicReference failure>;
virtualinvoke v10.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v1);
goto label6;
label5:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
label6:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void cancel()
{
io.smallrye.mutiny.subscription.UniSubscription v3, v4, v5;
io.smallrye.mutiny.subscription.UniSerializedSubscriber v0;
java.util.concurrent.atomic.AtomicInteger v1, v6;
boolean v2;
v0 := @this: io.smallrye.mutiny.subscription.UniSerializedSubscriber;
v1 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(2, 3);
if v2 == 0 goto label3;
label1:
v3 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: io.smallrye.mutiny.subscription.UniSubscription subscription>;
if v3 != null goto label2;
staticinvoke <java.lang.Thread: void onSpinWait()>();
goto label1;
label2:
v4 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: io.smallrye.mutiny.subscription.UniSubscription subscription>;
if v4 == null goto label4;
v5 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: io.smallrye.mutiny.subscription.UniSubscription subscription>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.UniSubscription: void cancel()>();
goto label4;
label3:
v6 = v0.<io.smallrye.mutiny.subscription.UniSerializedSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
virtualinvoke v6.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(3);
label4:
return;
}
}