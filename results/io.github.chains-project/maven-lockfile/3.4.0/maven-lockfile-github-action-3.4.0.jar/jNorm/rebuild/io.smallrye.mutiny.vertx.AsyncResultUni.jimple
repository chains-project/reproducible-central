public class io.smallrye.mutiny.vertx.AsyncResultUni extends io.smallrye.mutiny.operators.AbstractUni implements io.smallrye.mutiny.Uni
{
private final java.util.function.Consumer subscriptionConsumer;
public static io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)
{
java.util.function.Consumer v0;
io.smallrye.mutiny.vertx.AsyncResultUni v1;
v0 := @parameter0: java.util.function.Consumer;
v1 = new io.smallrye.mutiny.vertx.AsyncResultUni;
specialinvoke v1.<io.smallrye.mutiny.vertx.AsyncResultUni: void <init>(java.util.function.Consumer)>(v0);
return v1;
}
public void <init>(java.util.function.Consumer)
{
java.util.function.Consumer v1, v2;
io.smallrye.mutiny.vertx.AsyncResultUni v0;
v0 := @this: io.smallrye.mutiny.vertx.AsyncResultUni;
v1 := @parameter0: java.util.function.Consumer;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractUni: void <init>()>();
v2 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Consumer decorate(java.util.function.Consumer)>(v1);
v0.<io.smallrye.mutiny.vertx.AsyncResultUni: java.util.function.Consumer subscriptionConsumer> = v2;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.subscription.UniSubscription v3;
java.util.concurrent.atomic.AtomicBoolean v2;
io.smallrye.mutiny.subscription.UniSubscriber v1;
java.lang.Exception v7;
java.util.function.Consumer v5;
io.vertx.core.Handler v6;
boolean v4, v8;
io.smallrye.mutiny.vertx.AsyncResultUni v0;
v0 := @this: io.smallrye.mutiny.vertx.AsyncResultUni;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscriber;
v2 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni$lambda_subscribe_0__2319: io.smallrye.mutiny.subscription.UniSubscription bootstrap$(java.util.concurrent.atomic.AtomicBoolean)>(v2);
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v3);
v4 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v4 != 0 goto label4;
label1:
v5 = v0.<io.smallrye.mutiny.vertx.AsyncResultUni: java.util.function.Consumer subscriptionConsumer>;
v6 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni$lambda_subscribe_1__2320: io.vertx.core.Handler bootstrap$(java.util.concurrent.atomic.AtomicBoolean,io.smallrye.mutiny.subscription.UniSubscriber)>(v2, v1);
interfaceinvoke v5.<java.util.function.Consumer: void accept(java.lang.Object)>(v6);
label2:
goto label4;
label3:
v7 := @caughtexception;
v8 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);
if v8 != 0 goto label4;
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v7);
label4:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
}