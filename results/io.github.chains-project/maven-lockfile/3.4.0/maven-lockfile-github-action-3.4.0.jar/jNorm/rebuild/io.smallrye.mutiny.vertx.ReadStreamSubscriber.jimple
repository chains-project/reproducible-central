public class io.smallrye.mutiny.vertx.ReadStreamSubscriber extends java.lang.Object implements java.util.concurrent.Flow$Subscriber, io.vertx.core.streams.ReadStream
{
private static final java.lang.Runnable NOOP_ACTION;
private static final java.lang.Throwable DONE_SENTINEL;
public static final int BUFFER_SIZE;
private final java.util.function.Function adapter;
private io.vertx.core.Handler endHandler;
private io.vertx.core.Handler exceptionHandler;
private io.vertx.core.Handler elementHandler;
private boolean paused;
private java.lang.Throwable completed;
private java.util.ArrayDeque pending;
private int requested;
private java.util.concurrent.Flow$Subscription subscription;
public static io.vertx.core.streams.ReadStream asReadStream(java.util.concurrent.Flow$Publisher, java.util.function.Function)
{
io.smallrye.mutiny.vertx.ReadStreamSubscriber v2;
java.util.concurrent.Flow$Publisher v0;
java.util.function.Function v1;
v0 := @parameter0: java.util.concurrent.Flow$Publisher;
v1 := @parameter1: java.util.function.Function;
v2 = new io.smallrye.mutiny.vertx.ReadStreamSubscriber;
specialinvoke v2.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: void <init>(java.util.function.Function)>(v1);
interfaceinvoke v0.<java.util.concurrent.Flow$Publisher: void subscribe(java.util.concurrent.Flow$Subscriber)>(v2);
return v2;
}
public void <init>(java.util.function.Function)
{
io.smallrye.mutiny.vertx.ReadStreamSubscriber v0;
java.util.ArrayDeque v2;
java.util.function.Function v1;
v0 := @this: io.smallrye.mutiny.vertx.ReadStreamSubscriber;
v1 := @parameter0: java.util.function.Function;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: boolean paused> = 0;
v2 = new java.util.ArrayDeque;
specialinvoke v2.<java.util.ArrayDeque: void <init>()>();
v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.util.ArrayDeque pending> = v2;
v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: int requested> = 0;
v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.util.function.Function adapter> = v1;
return;
}
public io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)
{
java.lang.Throwable v2;
io.smallrye.mutiny.vertx.ReadStreamSubscriber v0;
io.vertx.core.Handler v1;
v0 := @this: io.smallrye.mutiny.vertx.ReadStreamSubscriber;
v1 := @parameter0: io.vertx.core.Handler;
entermonitor v0;
label1:
v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: io.vertx.core.Handler elementHandler> = v1;
exitmonitor v0;
label2:
goto label4;
label3:
v2 := @caughtexception;
exitmonitor v0;
throw v2;
label4:
specialinvoke v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: void checkStatus()>();
return v0;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.streams.ReadStream pause()
{
java.lang.Throwable v1;
io.smallrye.mutiny.vertx.ReadStreamSubscriber v0;
v0 := @this: io.smallrye.mutiny.vertx.ReadStreamSubscriber;
entermonitor v0;
label1:
v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: boolean paused> = 1;
exitmonitor v0;
label2:
goto label4;
label3:
v1 := @caughtexception;
exitmonitor v0;
throw v1;
label4:
return v0;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.streams.ReadStream fetch(long)
{
java.lang.UnsupportedOperationException v2;
long v1;
io.smallrye.mutiny.vertx.ReadStreamSubscriber v0;
v0 := @this: io.smallrye.mutiny.vertx.ReadStreamSubscriber;
v1 := @parameter0: long;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not implemented");
throw v2;
}
public io.vertx.core.streams.ReadStream resume()
{
java.lang.Throwable v1;
io.smallrye.mutiny.vertx.ReadStreamSubscriber v0;
v0 := @this: io.smallrye.mutiny.vertx.ReadStreamSubscriber;
entermonitor v0;
label1:
v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: boolean paused> = 0;
exitmonitor v0;
label2:
goto label4;
label3:
v1 := @caughtexception;
exitmonitor v0;
throw v1;
label4:
specialinvoke v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: void checkStatus()>();
return v0;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
java.lang.Throwable v2;
io.smallrye.mutiny.vertx.ReadStreamSubscriber v0;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.vertx.ReadStreamSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
entermonitor v0;
label1:
v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.util.concurrent.Flow$Subscription subscription> = v1;
exitmonitor v0;
label2:
goto label4;
label3:
v2 := @caughtexception;
exitmonitor v0;
throw v2;
label4:
specialinvoke v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: void checkStatus()>();
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void checkStatus()
{
java.lang.Throwable v12, v15, v16, v18, v24;
io.smallrye.mutiny.vertx.ReadStreamSubscriber v0;
java.lang.Runnable v1;
java.util.function.Function v10;
int v21, v22, v23, v5, v6, v7;
boolean v14, v2;
java.lang.Object v11, v9;
io.vertx.core.Handler v17, v19, v20, v3;
java.util.ArrayDeque v13, v4, v8;
v0 := @this: io.smallrye.mutiny.vertx.ReadStreamSubscriber;
v1 = <io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.lang.Runnable NOOP_ACTION>;
label01:
entermonitor v0;
label02:
v2 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: boolean paused>;
if v2 != 0 goto label03;
v3 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: io.vertx.core.Handler elementHandler>;
if v3 == null goto label03;
v4 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.util.ArrayDeque pending>;
v5 = virtualinvoke v4.<java.util.ArrayDeque: int size()>();
if v5 <= 0 goto label03;
v6 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: int requested>;
v7 = v6 - 1;
v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: int requested> = v7;
v8 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.util.ArrayDeque pending>;
v9 = virtualinvoke v8.<java.util.ArrayDeque: java.lang.Object poll()>();
v10 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.util.function.Function adapter>;
v11 = interfaceinvoke v10.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v9);
goto label09;
label03:
v12 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.lang.Throwable completed>;
if v12 == null goto label06;
v13 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.util.ArrayDeque pending>;
v14 = virtualinvoke v13.<java.util.ArrayDeque: boolean isEmpty()>();
if v14 == 0 goto label07;
v15 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.lang.Throwable completed>;
v16 = <io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.lang.Throwable DONE_SENTINEL>;
if v15 == v16 goto label04;
v17 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: io.vertx.core.Handler exceptionHandler>;
v18 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.lang.Throwable completed>;
v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: io.vertx.core.Handler exceptionHandler> = null;
goto label05;
label04:
v17 = null;
v18 = null;
label05:
v19 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: io.vertx.core.Handler endHandler>;
v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: io.vertx.core.Handler endHandler> = null;
v1 = staticinvoke <io.smallrye.mutiny.vertx.ReadStreamSubscriber$lambda_checkStatus_1__2324: java.lang.Runnable bootstrap$(io.vertx.core.Handler,java.lang.Throwable,io.vertx.core.Handler)>(v17, v18, v19);
goto label07;
label06:
v20 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: io.vertx.core.Handler elementHandler>;
if v20 == null goto label07;
v21 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: int requested>;
if v21 >= 8 goto label07;
v22 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: int requested>;
v23 = 16 - v22;
v1 = staticinvoke <io.smallrye.mutiny.vertx.ReadStreamSubscriber$lambda_checkStatus_2__2323: java.lang.Runnable bootstrap$(io.smallrye.mutiny.vertx.ReadStreamSubscriber,int)>(v0, v23);
v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: int requested> = 16;
label07:
exitmonitor v0;
label08:
goto label13;
label09:
exitmonitor v0;
label10:
goto label12;
label11:
v24 := @caughtexception;
exitmonitor v0;
throw v24;
label12:
interfaceinvoke v3.<io.vertx.core.Handler: void handle(java.lang.Object)>(v11);
goto label01;
label13:
interfaceinvoke v1.<java.lang.Runnable: void run()>();
return;
catch java.lang.Throwable from label02 to label08 with label11;
catch java.lang.Throwable from label09 to label10 with label11;
}
public io.vertx.core.streams.ReadStream endHandler(io.vertx.core.Handler)
{
java.lang.Throwable v2, v6;
java.lang.IllegalStateException v5;
int v4;
io.smallrye.mutiny.vertx.ReadStreamSubscriber v0;
io.vertx.core.Handler v1;
java.util.ArrayDeque v3;
v0 := @this: io.smallrye.mutiny.vertx.ReadStreamSubscriber;
v1 := @parameter0: io.vertx.core.Handler;
entermonitor v0;
label1:
v2 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.lang.Throwable completed>;
if v2 == null goto label2;
v3 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.util.ArrayDeque pending>;
v4 = virtualinvoke v3.<java.util.ArrayDeque: int size()>();
if v4 <= 0 goto label3;
label2:
v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: io.vertx.core.Handler endHandler> = v1;
goto label4;
label3:
if v1 == null goto label4;
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>()>();
throw v5;
label4:
exitmonitor v0;
label5:
goto label7;
label6:
v6 := @caughtexception;
exitmonitor v0;
throw v6;
label7:
return v0;
catch java.lang.Throwable from label1 to label5 with label6;
}
public io.vertx.core.streams.ReadStream exceptionHandler(io.vertx.core.Handler)
{
java.lang.Throwable v2, v6;
java.lang.IllegalStateException v5;
int v4;
io.smallrye.mutiny.vertx.ReadStreamSubscriber v0;
io.vertx.core.Handler v1;
java.util.ArrayDeque v3;
v0 := @this: io.smallrye.mutiny.vertx.ReadStreamSubscriber;
v1 := @parameter0: io.vertx.core.Handler;
entermonitor v0;
label1:
v2 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.lang.Throwable completed>;
if v2 == null goto label2;
v3 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.util.ArrayDeque pending>;
v4 = virtualinvoke v3.<java.util.ArrayDeque: int size()>();
if v4 <= 0 goto label3;
label2:
v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: io.vertx.core.Handler exceptionHandler> = v1;
goto label4;
label3:
if v1 == null goto label4;
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>()>();
throw v5;
label4:
exitmonitor v0;
label5:
goto label7;
label6:
v6 := @caughtexception;
exitmonitor v0;
throw v6;
label7:
return v0;
catch java.lang.Throwable from label1 to label5 with label6;
}
public void onComplete()
{
java.lang.Throwable v1;
io.smallrye.mutiny.vertx.ReadStreamSubscriber v0;
v0 := @this: io.smallrye.mutiny.vertx.ReadStreamSubscriber;
v1 = <io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.lang.Throwable DONE_SENTINEL>;
virtualinvoke v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: void onError(java.lang.Throwable)>(v1);
return;
}
public void onError(java.lang.Throwable)
{
java.lang.Throwable v1, v2, v3;
io.smallrye.mutiny.vertx.ReadStreamSubscriber v0;
v0 := @this: io.smallrye.mutiny.vertx.ReadStreamSubscriber;
v1 := @parameter0: java.lang.Throwable;
entermonitor v0;
label1:
v2 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.lang.Throwable completed>;
if v2 == null goto label3;
exitmonitor v0;
label2:
return;
label3:
v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.lang.Throwable completed> = v1;
exitmonitor v0;
label4:
goto label6;
label5:
v3 := @caughtexception;
exitmonitor v0;
throw v3;
label6:
specialinvoke v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: void checkStatus()>();
return;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
public void onNext(java.lang.Object)
{
java.lang.Throwable v3;
java.lang.Object v1;
io.smallrye.mutiny.vertx.ReadStreamSubscriber v0;
java.util.ArrayDeque v2;
v0 := @this: io.smallrye.mutiny.vertx.ReadStreamSubscriber;
v1 := @parameter0: java.lang.Object;
entermonitor v0;
label1:
v2 = v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.util.ArrayDeque pending>;
virtualinvoke v2.<java.util.ArrayDeque: boolean add(java.lang.Object)>(v1);
exitmonitor v0;
label2:
goto label4;
label3:
v3 := @caughtexception;
exitmonitor v0;
throw v3;
label4:
specialinvoke v0.<io.smallrye.mutiny.vertx.ReadStreamSubscriber: void checkStatus()>();
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
static void <clinit>()
{
java.lang.Throwable v1;
java.lang.Runnable v0;
v0 = staticinvoke <io.smallrye.mutiny.vertx.ReadStreamSubscriber$lambda_static_0__2325: java.lang.Runnable bootstrap$()>();
<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.lang.Runnable NOOP_ACTION> = v0;
v1 = new java.lang.Throwable;
specialinvoke v1.<java.lang.Throwable: void <init>()>();
<io.smallrye.mutiny.vertx.ReadStreamSubscriber: java.lang.Throwable DONE_SENTINEL> = v1;
return;
}
}