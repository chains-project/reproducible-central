public interface  io.smallrye.mutiny.vertx.codegen.lang.CodeWriter extends java.lang.Object implements java.util.function.BiFunction
{
public abstract void generate(io.vertx.codegen.ClassModel, java.io.PrintWriter);
public java.lang.Void apply(io.vertx.codegen.ClassModel, java.io.PrintWriter)
{
io.smallrye.mutiny.vertx.codegen.lang.CodeWriter v0;
java.io.PrintWriter v2;
io.vertx.codegen.ClassModel v1;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.CodeWriter;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 := @parameter1: java.io.PrintWriter;
interfaceinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.CodeWriter: void generate(io.vertx.codegen.ClassModel,java.io.PrintWriter)>(v1, v2);
return null;
}
public java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)
{
io.smallrye.mutiny.vertx.codegen.lang.CodeWriter v0;
java.util.function.Function v7;
java.lang.String v11, v14, v15, v4;
java.util.stream.Collector v9;
io.vertx.codegen.type.ClassKind v12, v13;
boolean v2;
io.vertx.codegen.type.ClassTypeInfo v3;
io.vertx.codegen.type.TypeInfo v1;
java.util.List v5;
java.util.stream.Stream v6, v8;
java.lang.Object v10;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.CodeWriter;
v1 := @parameter0: io.vertx.codegen.type.TypeInfo;
v2 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: boolean isParameterized()>();
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<io.vertx.codegen.type.ParameterizedTypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v4 = interfaceinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.CodeWriter: java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)>(v3);
v5 = virtualinvoke v1.<io.vertx.codegen.type.ParameterizedTypeInfo: java.util.List getArgs()>();
v6 = interfaceinvoke v5.<java.util.List: java.util.stream.Stream stream()>();
v7 = staticinvoke <io.smallrye.mutiny.vertx.codegen.lang.CodeWriter$genTypeName__2377: java.util.function.Function bootstrap$(io.smallrye.mutiny.vertx.codegen.lang.CodeWriter)>(v0);
v8 = interfaceinvoke v6.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v7);
v9 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>(", ", "<", ">");
v10 = interfaceinvoke v8.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v9);
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Object)>(v4, v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
return v11;
label1:
v12 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v13 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind API>;
if v12 != v13 goto label2;
v14 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: java.lang.String translateName(java.lang.String)>("mutiny");
return v14;
label2:
v15 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: java.lang.String getSimpleName()>();
return v15;
}
}