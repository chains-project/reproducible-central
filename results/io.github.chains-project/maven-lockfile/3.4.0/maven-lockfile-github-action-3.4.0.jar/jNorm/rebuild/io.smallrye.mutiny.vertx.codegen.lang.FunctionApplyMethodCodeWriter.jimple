public class io.smallrye.mutiny.vertx.codegen.lang.FunctionApplyMethodCodeWriter extends java.lang.Object implements io.smallrye.mutiny.vertx.codegen.lang.ConditionalCodeWriter
{
public void <init>()
{
io.smallrye.mutiny.vertx.codegen.lang.FunctionApplyMethodCodeWriter v0;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.FunctionApplyMethodCodeWriter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void generate(io.vertx.codegen.ClassModel, java.io.PrintWriter)
{
java.lang.Object[] v15, v18, v25, v6, v9;
io.smallrye.mutiny.vertx.codegen.lang.FunctionApplyMethodCodeWriter v0;
io.vertx.codegen.type.TypeInfo[] v3;
java.lang.String v10, v14, v19, v21, v22, v24, v7, v8;
io.vertx.codegen.type.ClassKind v11, v12, v16, v17;
boolean v13, v23;
java.io.PrintWriter v2;
io.vertx.codegen.type.ClassTypeInfo v20;
io.vertx.codegen.type.TypeInfo v4, v5;
io.vertx.codegen.ClassModel v1;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.FunctionApplyMethodCodeWriter;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 := @parameter1: java.io.PrintWriter;
v3 = virtualinvoke v1.<io.vertx.codegen.ClassModel: io.vertx.codegen.type.TypeInfo[] getFunctionArgs()>();
v4 = v3[0];
v5 = v3[1];
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("  @Override");
v6 = newarray (java.lang.Object)[2];
v7 = virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.FunctionApplyMethodCodeWriter: java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)>(v5);
v6[0] = v7;
v8 = virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.FunctionApplyMethodCodeWriter: java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)>(v4);
v6[1] = v8;
virtualinvoke v2.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("  public %s apply(%s in) {%n", v6);
v9 = newarray (java.lang.Object)[1];
v10 = virtualinvoke v5.<io.vertx.codegen.type.TypeInfo: java.lang.String getName()>();
v9[0] = v10;
virtualinvoke v2.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("    %s ret;%n", v9);
v11 = virtualinvoke v4.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v12 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind API>;
if v11 != v12 goto label1;
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("    ret = getDelegate().apply(in.getDelegate());");
goto label3;
label1:
v13 = virtualinvoke v4.<io.vertx.codegen.type.TypeInfo: boolean isVariable()>();
if v13 == 0 goto label2;
v14 = virtualinvoke v4.<io.vertx.codegen.type.TypeInfo: java.lang.String getSimpleName()>();
v15 = newarray (java.lang.Object)[4];
v15[0] = v14;
v15[1] = v14;
v15[2] = v14;
v15[3] = v14;
virtualinvoke v2.<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object[])>("    java.util.function.Function<%s, %s> inConv = (java.util.function.Function<%s, %s>) __typeArg_0.unwrap;%n", v15);
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("    ret = getDelegate().apply(inConv.apply);");
goto label3;
label2:
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("    ret = getDelegate().apply(in);");
label3:
v16 = virtualinvoke v5.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v17 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind API>;
if v16 != v17 goto label4;
v18 = newarray (java.lang.Object)[3];
v19 = virtualinvoke v5.<io.vertx.codegen.type.TypeInfo: java.lang.String getName()>();
v18[0] = v19;
v20 = virtualinvoke v5.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v21 = virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.FunctionApplyMethodCodeWriter: java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)>(v20);
v18[1] = v21;
v22 = virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.FunctionApplyMethodCodeWriter: java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)>(v5);
v18[2] = v22;
virtualinvoke v2.<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object[])>("    java.util.function.Function<%s, %s> outConv = %s::newInstance;%n", v18);
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("    return outConv.apply(ret);");
goto label6;
label4:
v23 = virtualinvoke v5.<io.vertx.codegen.type.TypeInfo: boolean isVariable()>();
if v23 == 0 goto label5;
v24 = virtualinvoke v5.<io.vertx.codegen.type.TypeInfo: java.lang.String getSimpleName()>();
v25 = newarray (java.lang.Object)[4];
v25[0] = v24;
v25[1] = v24;
v25[2] = v24;
v25[3] = v24;
virtualinvoke v2.<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object[])>("    java.util.function.Function<%s, %s> outConv = (java.util.function.Function<%s, %s>) __typeArg_1.wrap;%n", v25);
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("    return outConv.apply(ret);");
goto label6;
label5:
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("    return delegate.iterator();");
label6:
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("  }");
virtualinvoke v2.<java.io.PrintWriter: void println()>();
return;
}
public boolean test(io.vertx.codegen.ClassModel)
{
java.util.function.Predicate v6;
io.smallrye.mutiny.vertx.codegen.lang.FunctionApplyMethodCodeWriter v0;
io.vertx.codegen.ClassModel v1;
java.util.List v4;
java.util.stream.Stream v5;
boolean v2, v3, v7, v8;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.FunctionApplyMethodCodeWriter;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 = virtualinvoke v1.<io.vertx.codegen.ClassModel: boolean isConcrete()>();
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<io.vertx.codegen.ClassModel: boolean isFunction()>();
if v3 == 0 goto label1;
v4 = virtualinvoke v1.<io.vertx.codegen.ClassModel: java.util.List getMethods()>();
v5 = interfaceinvoke v4.<java.util.List: java.util.stream.Stream stream()>();
v6 = staticinvoke <io.smallrye.mutiny.vertx.codegen.lang.FunctionApplyMethodCodeWriter$lambda_test_0__2379: java.util.function.Predicate bootstrap$()>();
v7 = interfaceinvoke v5.<java.util.stream.Stream: boolean noneMatch(java.util.function.Predicate)>(v6);
if v7 == 0 goto label1;
v8 = 1;
goto label2;
label1:
v8 = 0;
label2:
return v8;
}
}