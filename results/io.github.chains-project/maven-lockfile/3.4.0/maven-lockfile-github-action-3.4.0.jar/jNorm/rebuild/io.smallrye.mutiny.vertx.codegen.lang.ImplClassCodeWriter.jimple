public class io.smallrye.mutiny.vertx.codegen.lang.ImplClassCodeWriter extends java.lang.Object implements io.smallrye.mutiny.vertx.codegen.lang.ConditionalCodeWriter
{
private final io.smallrye.mutiny.vertx.codegen.MutinyGenerator generator;
public void <init>(io.smallrye.mutiny.vertx.codegen.MutinyGenerator)
{
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v1;
io.smallrye.mutiny.vertx.codegen.lang.ImplClassCodeWriter v0;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.ImplClassCodeWriter;
v1 := @parameter0: io.smallrye.mutiny.vertx.codegen.MutinyGenerator;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.vertx.codegen.lang.ImplClassCodeWriter: io.smallrye.mutiny.vertx.codegen.MutinyGenerator generator> = v1;
return;
}
public void generate(io.vertx.codegen.ClassModel, java.io.PrintWriter)
{
io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter v20;
io.smallrye.mutiny.vertx.codegen.lang.DelegateFieldCodeWriter v8;
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v21;
io.smallrye.mutiny.vertx.codegen.lang.ConstructorWithGenericTypesCodeWriter v16;
io.smallrye.mutiny.vertx.codegen.lang.ConstructorWithDelegateParameterCodeWriter v13;
io.smallrye.mutiny.vertx.codegen.lang.GetDelegateMethodCodeWriter v9;
java.lang.String v11, v12, v14, v15, v17, v18, v4, v5, v6, v7;
boolean v19;
java.io.PrintWriter v2;
io.vertx.codegen.type.ClassTypeInfo v3;
io.smallrye.mutiny.vertx.codegen.lang.ImplClassCodeWriter v0;
io.vertx.codegen.ClassModel v1;
io.smallrye.mutiny.vertx.codegen.lang.NoArgConstructorCodeWriter v10;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.ImplClassCodeWriter;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 := @parameter1: java.io.PrintWriter;
v3 = virtualinvoke v1.<io.vertx.codegen.ClassModel: io.vertx.codegen.type.ClassTypeInfo getType()>();
virtualinvoke v2.<java.io.PrintWriter: void println()>();
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("class ");
v4 = virtualinvoke v3.<io.vertx.codegen.type.ClassTypeInfo: java.lang.String getSimpleName()>();
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(v4);
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("Impl");
v5 = staticinvoke <io.smallrye.mutiny.vertx.codegen.lang.CodeGenHelper: java.lang.String genOptTypeParamsDecl(io.vertx.codegen.type.ClassTypeInfo,java.lang.String)>(v3, "");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(v5);
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(" implements ");
v6 = virtualinvoke v1.<io.vertx.codegen.ClassModel: java.lang.String getIfaceFQCN()>();
v7 = staticinvoke <io.vertx.codegen.Helper: java.lang.String getSimpleName(java.lang.String)>(v6);
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(v7);
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>(" {");
v8 = new io.smallrye.mutiny.vertx.codegen.lang.DelegateFieldCodeWriter;
specialinvoke v8.<io.smallrye.mutiny.vertx.codegen.lang.DelegateFieldCodeWriter: void <init>()>();
virtualinvoke v8.<io.smallrye.mutiny.vertx.codegen.lang.DelegateFieldCodeWriter: void generate(io.vertx.codegen.ClassModel,java.io.PrintWriter)>(v1, v2);
v9 = new io.smallrye.mutiny.vertx.codegen.lang.GetDelegateMethodCodeWriter;
specialinvoke v9.<io.smallrye.mutiny.vertx.codegen.lang.GetDelegateMethodCodeWriter: void <init>()>();
virtualinvoke v9.<io.smallrye.mutiny.vertx.codegen.lang.GetDelegateMethodCodeWriter: void generate(io.vertx.codegen.ClassModel,java.io.PrintWriter)>(v1, v2);
v10 = new io.smallrye.mutiny.vertx.codegen.lang.NoArgConstructorCodeWriter;
v11 = virtualinvoke v3.<io.vertx.codegen.type.ClassTypeInfo: java.lang.String getSimpleName()>();
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001Impl");
specialinvoke v10.<io.smallrye.mutiny.vertx.codegen.lang.NoArgConstructorCodeWriter: void <init>(java.lang.String)>(v12);
virtualinvoke v10.<io.smallrye.mutiny.vertx.codegen.lang.NoArgConstructorCodeWriter: void generate(io.vertx.codegen.ClassModel,java.io.PrintWriter)>(v1, v2);
v13 = new io.smallrye.mutiny.vertx.codegen.lang.ConstructorWithDelegateParameterCodeWriter;
v14 = virtualinvoke v3.<io.vertx.codegen.type.ClassTypeInfo: java.lang.String getSimpleName()>();
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001Impl");
specialinvoke v13.<io.smallrye.mutiny.vertx.codegen.lang.ConstructorWithDelegateParameterCodeWriter: void <init>(java.lang.String)>(v15);
virtualinvoke v13.<io.smallrye.mutiny.vertx.codegen.lang.ConstructorWithDelegateParameterCodeWriter: void generate(io.vertx.codegen.ClassModel,java.io.PrintWriter)>(v1, v2);
v16 = new io.smallrye.mutiny.vertx.codegen.lang.ConstructorWithGenericTypesCodeWriter;
v17 = virtualinvoke v3.<io.vertx.codegen.type.ClassTypeInfo: java.lang.String getSimpleName()>();
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v17) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001Impl");
specialinvoke v16.<io.smallrye.mutiny.vertx.codegen.lang.ConstructorWithGenericTypesCodeWriter: void <init>(java.lang.String)>(v18);
virtualinvoke v16.<io.smallrye.mutiny.vertx.codegen.lang.ConstructorWithGenericTypesCodeWriter: void generate(io.vertx.codegen.ClassModel,java.io.PrintWriter)>(v1, v2);
v19 = virtualinvoke v1.<io.vertx.codegen.ClassModel: boolean isReadStream()>();
if v19 == 0 goto label1;
v20 = new io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter;
specialinvoke v20.<io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter: void <init>()>();
virtualinvoke v20.<io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter: void generate(io.vertx.codegen.ClassModel,java.io.PrintWriter)>(v1, v2);
label1:
v21 = v0.<io.smallrye.mutiny.vertx.codegen.lang.ImplClassCodeWriter: io.smallrye.mutiny.vertx.codegen.MutinyGenerator generator>;
virtualinvoke v21.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: void generateClassBody(io.vertx.codegen.ClassModel,java.io.PrintWriter)>(v1, v2);
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("}");
return;
}
public boolean test(io.vertx.codegen.ClassModel)
{
io.smallrye.mutiny.vertx.codegen.lang.ImplClassCodeWriter v0;
io.vertx.codegen.ClassModel v1;
boolean v2, v3;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.ImplClassCodeWriter;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 = virtualinvoke v1.<io.vertx.codegen.ClassModel: boolean isConcrete()>();
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
}