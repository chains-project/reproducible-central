public final enum class io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind extends java.lang.Enum
{
public static final enum io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind UNI;
public static final enum io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind AWAIT;
public static final enum io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind FORGET;
public static final enum io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind CONSUMER;
public static final enum io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind SIMPLE;
private static final io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind[] $VALUES;
public static io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind[] values()
{
java.lang.Object v1;
io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind[] v0;
v0 = <io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lio/smallrye/mutiny/vertx/codegen/methods/MutinyMethodDescriptor$MutinyKind;", v0);
return v1;
}
private void <init>(java.lang.String, int)
{
int v2;
io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind v0;
java.lang.String v1;
v0 := @this: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
return;
}
private static io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind[] $values()
{
io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind v1, v2, v3, v4, v5;
io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind[] v0;
v0 = newarray (io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind)[5];
v1 = <io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind UNI>;
v0[0] = v1;
v2 = <io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind AWAIT>;
v0[1] = v2;
v3 = <io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind FORGET>;
v0[2] = v3;
v4 = <io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind CONSUMER>;
v0[3] = v4;
v5 = <io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind SIMPLE>;
v0[4] = v5;
return v0;
}
static void <clinit>()
{
io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind v0, v1, v2, v3, v4;
io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind[] v5;
v0 = new io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind;
specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: void <init>(java.lang.String,int)>("UNI", 0);
<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind UNI> = v0;
v1 = new io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind;
specialinvoke v1.<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: void <init>(java.lang.String,int)>("AWAIT", 1);
<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind AWAIT> = v1;
v2 = new io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind;
specialinvoke v2.<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: void <init>(java.lang.String,int)>("FORGET", 2);
<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind FORGET> = v2;
v3 = new io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind;
specialinvoke v3.<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: void <init>(java.lang.String,int)>("CONSUMER", 3);
<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind CONSUMER> = v3;
v4 = new io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind;
specialinvoke v4.<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: void <init>(java.lang.String,int)>("SIMPLE", 4);
<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind SIMPLE> = v4;
v5 = staticinvoke <io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind[] $values()>();
<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind[] $VALUES> = v5;
return;
}
}