public class io.smallrye.stork.impl.RoundRobinLoadBalancer extends java.lang.Object implements io.smallrye.stork.api.LoadBalancer
{
private final java.util.concurrent.atomic.AtomicInteger index;
public void <init>()
{
io.smallrye.stork.impl.RoundRobinLoadBalancer v0;
java.util.concurrent.atomic.AtomicInteger v1;
v0 := @this: io.smallrye.stork.impl.RoundRobinLoadBalancer;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.stork.impl.RoundRobinLoadBalancer: java.util.concurrent.atomic.AtomicInteger index> = v1;
return;
}
public io.smallrye.stork.api.ServiceInstance selectServiceInstance(java.util.Collection)
{
io.smallrye.stork.api.NoServiceInstanceFoundException v3;
java.util.Collection v1;
java.util.ArrayList v4;
io.smallrye.stork.api.ServiceInstance v7;
io.smallrye.stork.impl.RoundRobinLoadBalancer v0;
java.util.Comparator v6;
java.util.function.ToLongFunction v5;
boolean v2;
v0 := @this: io.smallrye.stork.impl.RoundRobinLoadBalancer;
v1 := @parameter0: java.util.Collection;
v2 = interfaceinvoke v1.<java.util.Collection: boolean isEmpty()>();
if v2 == 0 goto label1;
v3 = new io.smallrye.stork.api.NoServiceInstanceFoundException;
specialinvoke v3.<io.smallrye.stork.api.NoServiceInstanceFoundException: void <init>(java.lang.String)>("No services found.");
throw v3;
label1:
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>(java.util.Collection)>(v1);
v5 = staticinvoke <io.smallrye.stork.impl.RoundRobinLoadBalancer$getId__607: java.util.function.ToLongFunction bootstrap$()>();
v6 = staticinvoke <java.util.Comparator: java.util.Comparator comparingLong(java.util.function.ToLongFunction)>(v5);
interfaceinvoke v4.<java.util.List: void sort(java.util.Comparator)>(v6);
v7 = specialinvoke v0.<io.smallrye.stork.impl.RoundRobinLoadBalancer: io.smallrye.stork.api.ServiceInstance select(java.util.List)>(v4);
return v7;
}
public boolean requiresStrictRecording()
{
io.smallrye.stork.impl.RoundRobinLoadBalancer v0;
v0 := @this: io.smallrye.stork.impl.RoundRobinLoadBalancer;
return 0;
}
private io.smallrye.stork.api.ServiceInstance select(java.util.List)
{
java.util.List v1;
java.util.concurrent.atomic.AtomicInteger v3;
int v4, v5, v6;
io.smallrye.stork.impl.RoundRobinLoadBalancer v0;
java.lang.Object v7;
boolean v2;
v0 := @this: io.smallrye.stork.impl.RoundRobinLoadBalancer;
v1 := @parameter0: java.util.List;
v2 = interfaceinvoke v1.<java.util.List: boolean isEmpty()>();
if v2 == 0 goto label1;
return null;
label1:
v3 = v0.<io.smallrye.stork.impl.RoundRobinLoadBalancer: java.util.concurrent.atomic.AtomicInteger index>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
v5 = interfaceinvoke v1.<java.util.List: int size()>();
v6 = v4 % v5;
v7 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v6);
return v7;
}
}