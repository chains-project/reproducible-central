public final class io.smallrye.stork.utils.StorkAddressUtils extends java.lang.Object
{
public void <init>()
{
io.smallrye.stork.utils.StorkAddressUtils v0;
v0 := @this: io.smallrye.stork.utils.StorkAddressUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static io.smallrye.stork.utils.HostAndPort parseToHostAndPort(java.lang.String, int, java.lang.String)
{
io.smallrye.stork.utils.HostAndPort v10, v7, v9;
char v6;
java.lang.IllegalArgumentException v4;
int v1, v8;
java.lang.String v0, v2, v5;
boolean v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.String;
if v0 == null goto label1;
v3 = virtualinvoke v0.<java.lang.String: boolean isBlank()>();
if v3 == 0 goto label2;
label1:
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Blank or null address: \'\u0001\'");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label2:
v6 = virtualinvoke v0.<java.lang.String: char charAt(int)>(0);
if v6 != 91 goto label3;
v7 = staticinvoke <io.smallrye.stork.utils.StorkAddressUtils: io.smallrye.stork.utils.HostAndPort parseIpV6AddressWithSquareBracket(java.lang.String,int,java.lang.String)>(v0, v1, v2);
return v7;
label3:
v8 = staticinvoke <io.smallrye.stork.utils.StorkAddressUtils: int countColons(java.lang.String)>(v0);
if v8 <= 1 goto label4;
v9 = new io.smallrye.stork.utils.HostAndPort;
specialinvoke v9.<io.smallrye.stork.utils.HostAndPort: void <init>(java.lang.String,int)>(v0, v1);
return v9;
label4:
v10 = staticinvoke <io.smallrye.stork.utils.StorkAddressUtils: io.smallrye.stork.utils.HostAndPort parseNonIpv6Address(java.lang.String,int,java.lang.String)>(v0, v1, v2);
return v10;
}
private static io.smallrye.stork.utils.HostAndPort parseNonIpv6Address(java.lang.String, int, java.lang.String)
{
java.lang.IllegalStateException v30;
java.lang.Object[] v27, v31;
io.smallrye.stork.utils.HostAndPort v16, v21, v7, v8;
java.lang.String[] v3;
int v1, v12, v13, v15, v20, v4, v5, v6;
java.lang.String v0, v10, v11, v14, v17, v18, v19, v2, v22, v23, v24, v28, v29, v32, v9;
java.lang.NumberFormatException v25;
java.lang.IllegalArgumentException v26;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.String;
v3 = virtualinvoke v0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");
v4 = lengthof v3;
lookupswitch(v4)
{
case 1: goto label1;
case 2: goto label3;
default: goto label8;
};
label1:
v5 = virtualinvoke v0.<java.lang.String: int indexOf(java.lang.String)>("/");
v6 = (int) -1;
if v5 != v6 goto label2;
v7 = new io.smallrye.stork.utils.HostAndPort;
specialinvoke v7.<io.smallrye.stork.utils.HostAndPort: void <init>(java.lang.String,int)>(v0, v1);
return v7;
label2:
v8 = new io.smallrye.stork.utils.HostAndPort;
v9 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v5);
v10 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v5);
specialinvoke v8.<io.smallrye.stork.utils.HostAndPort: void <init>(java.lang.String,int,java.lang.String)>(v9, v1, v10);
return v8;
label3:
v11 = v3[1];
v12 = virtualinvoke v11.<java.lang.String: int indexOf(java.lang.String)>("/");
v13 = (int) -1;
if v12 != v13 goto label5;
v14 = v3[1];
v15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v14);
v16 = new io.smallrye.stork.utils.HostAndPort;
v17 = v3[0];
specialinvoke v16.<io.smallrye.stork.utils.HostAndPort: void <init>(java.lang.String,int)>(v17, v15);
label4:
return v16;
label5:
v18 = v3[1];
v19 = virtualinvoke v18.<java.lang.String: java.lang.String substring(int,int)>(0, v12);
v20 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v19);
v21 = new io.smallrye.stork.utils.HostAndPort;
v22 = v3[0];
v23 = v3[1];
v24 = virtualinvoke v23.<java.lang.String: java.lang.String substring(int)>(v12);
specialinvoke v21.<io.smallrye.stork.utils.HostAndPort: void <init>(java.lang.String,int,java.lang.String)>(v22, v20, v24);
label6:
return v21;
label7:
v25 := @caughtexception;
v26 = new java.lang.IllegalArgumentException;
v27 = newarray (java.lang.Object)[3];
v28 = v3[1];
v27[0] = v28;
v27[1] = v0;
v27[2] = v2;
v29 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid port \'%s\' in address \'%s\' for service \'%s\'", v27);
specialinvoke v26.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(v29, v25);
throw v26;
label8:
v30 = new java.lang.IllegalStateException;
v31 = newarray (java.lang.Object)[2];
v31[0] = v0;
v31[1] = v2;
v32 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unable to parse address \'%s\' to host and port for service \'%s\'", v31);
specialinvoke v30.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v32);
throw v30;
catch java.lang.NumberFormatException from label3 to label4 with label7;
catch java.lang.NumberFormatException from label5 to label6 with label7;
}
private static io.smallrye.stork.utils.HostAndPort parseIpV6AddressWithSquareBracket(java.lang.String, int, java.lang.String)
{
java.lang.Integer v21, v33;
java.lang.Character v20, v32;
boolean v27, v5;
java.lang.StringBuilder v3;
java.lang.Object[] v10, v18, v31;
io.smallrye.stork.utils.HostAndPort v14, v35;
int v1, v12, v13, v23, v24, v25, v28, v29, v4, v6;
java.lang.String v0, v11, v15, v2, v22, v34, v36;
char v16, v19, v26, v7, v8;
java.lang.IllegalArgumentException v17, v30, v9;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.String;
v3 = new java.lang.StringBuilder;
specialinvoke v3.<java.lang.StringBuilder: void <init>()>();
v4 = 1;
v5 = 0;
label01:
v6 = virtualinvoke v0.<java.lang.String: int length()>();
if v4 >= v6 goto label03;
v7 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v4);
if v7 != 93 goto label02;
v5 = 1;
goto label03;
label02:
v8 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v4);
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v8);
v4 = v4 + 1;
goto label01;
label03:
if v5 != 0 goto label04;
v9 = new java.lang.IllegalArgumentException;
v10 = newarray (java.lang.Object)[2];
v10[0] = v0;
v10[1] = v2;
v11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("IPv6 Address with a square bracket \'[\' does not have a matching closing square bracket \']\' in address \'%s\' for: \'%s\'", v10);
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v11);
throw v9;
label04:
v12 = v4 + 1;
v13 = virtualinvoke v0.<java.lang.String: int length()>();
if v12 != v13 goto label05;
v14 = new io.smallrye.stork.utils.HostAndPort;
v15 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke v14.<io.smallrye.stork.utils.HostAndPort: void <init>(java.lang.String,int)>(v15, v1);
return v14;
label05:
v16 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v12);
if v16 == 58 goto label06;
v17 = new java.lang.IllegalArgumentException;
v18 = newarray (java.lang.Object)[4];
v19 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v12);
v20 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v19);
v18[0] = v20;
v21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v12);
v18[1] = v21;
v18[2] = v0;
v18[3] = v2;
v22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected character \'%c\' at character %d in address \'%s\' for: \'%s\'", v18);
specialinvoke v17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v22);
throw v17;
label06:
v23 = 0;
v24 = v12 + 1;
label07:
v25 = virtualinvoke v0.<java.lang.String: int length()>();
if v24 >= v25 goto label10;
v26 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v24);
v27 = staticinvoke <io.smallrye.stork.utils.StorkAddressUtils: boolean isDigit(char)>(v26);
if v27 == 0 goto label08;
v28 = 10 * v23;
v29 = v26 - 48;
v23 = v28 + v29;
goto label09;
label08:
v30 = new java.lang.IllegalArgumentException;
v31 = newarray (java.lang.Object)[4];
v32 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v26);
v31[0] = v32;
v31[1] = v2;
v31[2] = v0;
v33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v24);
v31[3] = v33;
v34 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected character \'%c\' while parsing port number in address \'%s\' for \'%s\', at character %d, expected a digit", v31);
specialinvoke v30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v34);
throw v30;
label09:
v24 = v24 + 1;
goto label07;
label10:
v35 = new io.smallrye.stork.utils.HostAndPort;
v36 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke v35.<io.smallrye.stork.utils.HostAndPort: void <init>(java.lang.String,int)>(v36, v23);
return v35;
}
private static boolean isDigit(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if v0 < 48 goto label1;
if v0 > 57 goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
private static int countColons(java.lang.String)
{
int v1, v2, v3;
char v4;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = 0;
v2 = 0;
label1:
v3 = virtualinvoke v0.<java.lang.String: int length()>();
if v2 >= v3 goto label3;
v4 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v2);
if v4 != 58 goto label2;
v1 = v1 + 1;
label2:
v2 = v2 + 1;
goto label1;
label3:
return v1;
}
}