public class io.vertx.codegen.CodeGen extends java.lang.Object
{
private static final java.util.List PROVIDERS;
private static final java.util.logging.Logger logger;
static final java.util.Map loaderMap;
private final java.util.Map models;
private final java.util.Set all;
private final java.util.HashMap modules;
private final javax.'annotation'.processing.ProcessingEnvironment env;
private final javax.lang.model.util.Elements elementUtils;
private final javax.lang.model.util.Types typeUtils;
private final io.vertx.codegen.type.TypeMirrorFactory tmf;
private final java.util.List converters;
public void <init>(javax.'annotation'.processing.ProcessingEnvironment)
{
io.vertx.codegen.type.TypeMirrorFactory v8;
java.util.HashMap v2, v4;
javax.lang.model.util.Types v10, v7;
javax.lang.model.util.Elements v6, v9;
java.util.ArrayList v5;
java.util.HashSet v3;
javax.'annotation'.processing.ProcessingEnvironment v1;
io.vertx.codegen.CodeGen v0;
v0 := @this: io.vertx.codegen.CodeGen;
v1 := @parameter0: javax.'annotation'.processing.ProcessingEnvironment;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
v0.<io.vertx.codegen.CodeGen: java.util.Map models> = v2;
v3 = new java.util.HashSet;
specialinvoke v3.<java.util.HashSet: void <init>()>();
v0.<io.vertx.codegen.CodeGen: java.util.Set all> = v3;
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>()>();
v0.<io.vertx.codegen.CodeGen: java.util.HashMap modules> = v4;
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.codegen.CodeGen: java.util.List converters> = v5;
v0.<io.vertx.codegen.CodeGen: javax.'annotation'.processing.ProcessingEnvironment env> = v1;
v6 = interfaceinvoke v1.<javax.'annotation'.processing.ProcessingEnvironment: javax.lang.model.util.Elements getElementUtils()>();
v0.<io.vertx.codegen.CodeGen: javax.lang.model.util.Elements elementUtils> = v6;
v7 = interfaceinvoke v1.<javax.'annotation'.processing.ProcessingEnvironment: javax.lang.model.util.Types getTypeUtils()>();
v0.<io.vertx.codegen.CodeGen: javax.lang.model.util.Types typeUtils> = v7;
v8 = new io.vertx.codegen.type.TypeMirrorFactory;
v9 = v0.<io.vertx.codegen.CodeGen: javax.lang.model.util.Elements elementUtils>;
v10 = v0.<io.vertx.codegen.CodeGen: javax.lang.model.util.Types typeUtils>;
specialinvoke v8.<io.vertx.codegen.type.TypeMirrorFactory: void <init>(javax.lang.model.util.Elements,javax.lang.model.util.Types)>(v9, v10);
v0.<io.vertx.codegen.CodeGen: io.vertx.codegen.type.TypeMirrorFactory tmf> = v8;
return;
}
public void init(javax.'annotation'.processing.RoundEnvironment, java.lang.ClassLoader)
{
java.util.function.Function v13, v18;
java.util.Map v3;
io.vertx.codegen.CodeGen v0;
java.util.function.Predicate v11, v5;
java.util.Set v16, v8;
java.util.function.Consumer v15, v20, v7;
java.util.List v6;
java.util.stream.Stream v10, v12, v14, v17, v19, v9;
javax.'annotation'.processing.RoundEnvironment v1;
javax.'annotation'.processing.ProcessingEnvironment v4;
java.lang.ClassLoader v2;
v0 := @this: io.vertx.codegen.CodeGen;
v1 := @parameter0: javax.'annotation'.processing.RoundEnvironment;
v2 := @parameter1: java.lang.ClassLoader;
v3 = <io.vertx.codegen.CodeGen: java.util.Map loaderMap>;
v4 = v0.<io.vertx.codegen.CodeGen: javax.'annotation'.processing.ProcessingEnvironment env>;
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v4, v2);
v5 = staticinvoke <io.vertx.codegen.CodeGen$lambda_init_2__2504: java.util.function.Predicate bootstrap$(io.vertx.codegen.CodeGen)>(v0);
v6 = v0.<io.vertx.codegen.CodeGen: java.util.List converters>;
v7 = staticinvoke <io.vertx.codegen.CodeGen$lambda_init_3__2505: java.util.function.Consumer bootstrap$(io.vertx.codegen.CodeGen)>(v0);
interfaceinvoke v6.<java.util.List: void forEach(java.util.function.Consumer)>(v7);
v8 = interfaceinvoke v1.<javax.'annotation'.processing.RoundEnvironment: java.util.Set getRootElements()>();
v9 = interfaceinvoke v8.<java.util.Set: java.util.stream.Stream stream()>();
v10 = interfaceinvoke v9.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v5);
v11 = staticinvoke <io.vertx.codegen.CodeGen$lambda_init_4__2506: java.util.function.Predicate bootstrap$()>();
v12 = interfaceinvoke v10.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v11);
v13 = staticinvoke <io.vertx.codegen.CodeGen$lambda_init_5__2507: java.util.function.Function bootstrap$()>();
v14 = interfaceinvoke v12.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v13);
v15 = staticinvoke <io.vertx.codegen.CodeGen$lambda_init_8__2508: java.util.function.Consumer bootstrap$(io.vertx.codegen.CodeGen)>(v0);
interfaceinvoke v14.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>(v15);
v16 = interfaceinvoke v1.<javax.'annotation'.processing.RoundEnvironment: java.util.Set getElementsAnnotatedWith(java.lang.Class)>(class "Lio/vertx/codegen/annotations/ModuleGen;");
v17 = interfaceinvoke v16.<java.util.Set: java.util.stream.Stream stream()>();
v18 = staticinvoke <io.vertx.codegen.CodeGen$lambda_init_9__2509: java.util.function.Function bootstrap$()>();
v19 = interfaceinvoke v17.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v18);
v20 = staticinvoke <io.vertx.codegen.CodeGen$lambda_init_10__2510: java.util.function.Consumer bootstrap$(io.vertx.codegen.CodeGen)>(v0);
interfaceinvoke v19.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>(v20);
return;
}
private io.vertx.codegen.CodeGen$Resolved resolveMember(javax.lang.model.element.Element, javax.lang.model.type.TypeMirror, java.lang.String)
{
java.util.function.Function v12;
java.util.function.Supplier v14;
io.vertx.codegen.GenException v16;
java.lang.String v3;
io.vertx.codegen.CodeGen v0;
java.util.function.Predicate v9;
javax.lang.model.element.Element v1, v6;
javax.lang.model.type.TypeKind v4, v5;
java.util.List v7;
javax.lang.model.type.TypeMirror v2;
java.util.stream.Stream v10, v8;
java.util.Optional v11, v13;
java.lang.Object v15;
v0 := @this: io.vertx.codegen.CodeGen;
v1 := @parameter0: javax.lang.model.element.Element;
v2 := @parameter1: javax.lang.model.type.TypeMirror;
v3 := @parameter2: java.lang.String;
v4 = interfaceinvoke v2.<javax.lang.model.type.TypeMirror: javax.lang.model.type.TypeKind getKind()>();
v5 = <javax.lang.model.type.TypeKind: javax.lang.model.type.TypeKind DECLARED>;
if v4 != v5 goto label1;
v6 = interfaceinvoke v2.<javax.lang.model.type.DeclaredType: javax.lang.model.element.Element asElement()>();
v7 = interfaceinvoke v6.<javax.lang.model.element.Element: java.util.List getEnclosedElements()>();
v8 = interfaceinvoke v7.<java.util.List: java.util.stream.Stream stream()>();
v9 = staticinvoke <io.vertx.codegen.CodeGen$lambda_resolveMember_11__2511: java.util.function.Predicate bootstrap$(java.lang.String)>(v3);
v10 = interfaceinvoke v8.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v9);
v11 = interfaceinvoke v10.<java.util.stream.Stream: java.util.Optional findFirst()>();
v12 = staticinvoke <io.vertx.codegen.CodeGen$lambda_resolveMember_12__2512: java.util.function.Function bootstrap$(io.vertx.codegen.CodeGen,javax.lang.model.type.DeclaredType)>(v0, v2);
v13 = virtualinvoke v11.<java.util.Optional: java.util.Optional map(java.util.function.Function)>(v12);
v14 = staticinvoke <io.vertx.codegen.CodeGen$lambda_resolveMember_13__2513: java.util.function.Supplier bootstrap$(javax.lang.model.element.Element,java.lang.String,javax.lang.model.type.TypeMirror)>(v1, v3, v2);
v15 = virtualinvoke v13.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>(v14);
return v15;
label1:
v16 = new io.vertx.codegen.GenException;
specialinvoke v16.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v1, "Only declared element are supported");
throw v16;
}
private void processConverter(javax.lang.model.element.TypeElement, javax.lang.model.type.TypeMirror, java.util.List, javax.lang.model.type.ExecutableType)
{
io.vertx.codegen.MapperKind v30, v44;
io.vertx.codegen.type.MapperInfo v25, v39;
javax.lang.model.element.TypeElement v1, v16;
javax.lang.model.util.Elements v15;
io.vertx.codegen.type.ClassKind v19, v21, v24, v38;
boolean v14, v22, v23, v32, v36, v37, v46;
io.vertx.codegen.type.TypeMirrorFactory v28, v35, v42, v49;
io.vertx.codegen.type.TypeInfo v29, v43;
javax.lang.model.util.Types v31, v45;
java.util.List v11, v3, v5, v8;
io.vertx.codegen.GenException v10, v33, v47, v50, v7;
int v6, v9;
java.lang.String v13, v18, v20, v27, v34, v41, v48;
io.vertx.codegen.CodeGen v0;
javax.lang.model.element.Name v26, v40;
javax.lang.model.type.ExecutableType v4;
javax.lang.model.type.TypeMirror v17, v2;
java.lang.Object v12;
v0 := @this: io.vertx.codegen.CodeGen;
v1 := @parameter0: javax.lang.model.element.TypeElement;
v2 := @parameter1: javax.lang.model.type.TypeMirror;
v3 := @parameter2: java.util.List;
v4 := @parameter3: javax.lang.model.type.ExecutableType;
v5 = interfaceinvoke v4.<javax.lang.model.type.ExecutableType: java.util.List getParameterTypes()>();
v6 = interfaceinvoke v5.<java.util.List: int size()>();
if v6 >= 1 goto label01;
v7 = new io.vertx.codegen.GenException;
specialinvoke v7.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v1, "Annotated method mapper cannot have empty arguments");
throw v7;
label01:
v8 = interfaceinvoke v4.<javax.lang.model.type.ExecutableType: java.util.List getParameterTypes()>();
v9 = interfaceinvoke v8.<java.util.List: int size()>();
if v9 <= 1 goto label02;
v10 = new io.vertx.codegen.GenException;
specialinvoke v10.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v1, "Annotated method mapper must have one argument");
throw v10;
label02:
v11 = interfaceinvoke v4.<javax.lang.model.type.ExecutableType: java.util.List getParameterTypes()>();
v12 = interfaceinvoke v11.<java.util.List: java.lang.Object get(int)>(0);
v13 = interfaceinvoke v12.<javax.lang.model.type.TypeMirror: java.lang.String toString()>();
v14 = virtualinvoke v13.<java.lang.String: boolean equals(java.lang.Object)>("java.lang.CharSequence");
if v14 == 0 goto label03;
v15 = v0.<io.vertx.codegen.CodeGen: javax.lang.model.util.Elements elementUtils>;
v16 = interfaceinvoke v15.<javax.lang.model.util.Elements: javax.lang.model.element.TypeElement getTypeElement(java.lang.CharSequence)>("java.lang.String");
v12 = interfaceinvoke v16.<javax.lang.model.element.TypeElement: javax.lang.model.type.TypeMirror asType()>();
label03:
v17 = interfaceinvoke v4.<javax.lang.model.type.ExecutableType: javax.lang.model.type.TypeMirror getReturnType()>();
v18 = interfaceinvoke v12.<javax.lang.model.type.TypeMirror: java.lang.String toString()>();
v19 = staticinvoke <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind getKind(java.lang.String,boolean)>(v18, 0);
v20 = interfaceinvoke v17.<javax.lang.model.type.TypeMirror: java.lang.String toString()>();
v21 = staticinvoke <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind getKind(java.lang.String,boolean)>(v20, 0);
v22 = v19.<io.vertx.codegen.type.ClassKind: boolean json>;
if v22 != 0 goto label04;
v23 = v19.<io.vertx.codegen.type.ClassKind: boolean basic>;
if v23 != 0 goto label04;
v24 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind OBJECT>;
if v19 != v24 goto label06;
label04:
v25 = new io.vertx.codegen.type.MapperInfo;
specialinvoke v25.<io.vertx.codegen.type.MapperInfo: void <init>()>();
v26 = interfaceinvoke v1.<javax.lang.model.element.TypeElement: javax.lang.model.element.Name getQualifiedName()>();
v27 = virtualinvoke v26.<java.lang.Object: java.lang.String toString()>();
virtualinvoke v25.<io.vertx.codegen.type.MapperInfo: void setQualifiedName(java.lang.String)>(v27);
v28 = v0.<io.vertx.codegen.CodeGen: io.vertx.codegen.type.TypeMirrorFactory tmf>;
v29 = virtualinvoke v28.<io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.TypeInfo create(javax.lang.model.type.TypeMirror)>(v12);
virtualinvoke v25.<io.vertx.codegen.type.MapperInfo: void setTargetType(io.vertx.codegen.type.TypeInfo)>(v29);
virtualinvoke v25.<io.vertx.codegen.type.MapperInfo: void setSelectors(java.util.List)>(v3);
v30 = <io.vertx.codegen.MapperKind: io.vertx.codegen.MapperKind STATIC_METHOD>;
virtualinvoke v25.<io.vertx.codegen.type.MapperInfo: void setKind(io.vertx.codegen.MapperKind)>(v30);
v31 = v0.<io.vertx.codegen.CodeGen: javax.lang.model.util.Types typeUtils>;
v32 = interfaceinvoke v31.<javax.lang.model.util.Types: boolean isSubtype(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>(v17, v2);
if v32 != 0 goto label05;
v33 = new io.vertx.codegen.GenException;
v34 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (javax.lang.model.type.ExecutableType,javax.lang.model.type.TypeMirror)>(v4, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 return should be the same or extend \u0001");
specialinvoke v33.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v1, v34);
throw v33;
label05:
v35 = v0.<io.vertx.codegen.CodeGen: io.vertx.codegen.type.TypeMirrorFactory tmf>;
virtualinvoke v35.<io.vertx.codegen.type.TypeMirrorFactory: void addDataObjectDeserializer(javax.lang.model.element.Element,javax.lang.model.type.TypeMirror,io.vertx.codegen.type.MapperInfo)>(v1, v2, v25);
goto label10;
label06:
v36 = v21.<io.vertx.codegen.type.ClassKind: boolean json>;
if v36 != 0 goto label07;
v37 = v21.<io.vertx.codegen.type.ClassKind: boolean basic>;
if v37 != 0 goto label07;
v38 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind OBJECT>;
if v21 != v38 goto label09;
label07:
v39 = new io.vertx.codegen.type.MapperInfo;
specialinvoke v39.<io.vertx.codegen.type.MapperInfo: void <init>()>();
v40 = interfaceinvoke v1.<javax.lang.model.element.TypeElement: javax.lang.model.element.Name getQualifiedName()>();
v41 = virtualinvoke v40.<java.lang.Object: java.lang.String toString()>();
virtualinvoke v39.<io.vertx.codegen.type.MapperInfo: void setQualifiedName(java.lang.String)>(v41);
v42 = v0.<io.vertx.codegen.CodeGen: io.vertx.codegen.type.TypeMirrorFactory tmf>;
v43 = virtualinvoke v42.<io.vertx.codegen.type.TypeMirrorFactory: io.vertx.codegen.type.TypeInfo create(javax.lang.model.type.TypeMirror)>(v17);
virtualinvoke v39.<io.vertx.codegen.type.MapperInfo: void setTargetType(io.vertx.codegen.type.TypeInfo)>(v43);
virtualinvoke v39.<io.vertx.codegen.type.MapperInfo: void setSelectors(java.util.List)>(v3);
v44 = <io.vertx.codegen.MapperKind: io.vertx.codegen.MapperKind STATIC_METHOD>;
virtualinvoke v39.<io.vertx.codegen.type.MapperInfo: void setKind(io.vertx.codegen.MapperKind)>(v44);
v45 = v0.<io.vertx.codegen.CodeGen: javax.lang.model.util.Types typeUtils>;
v46 = interfaceinvoke v45.<javax.lang.model.util.Types: boolean isSubtype(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>(v2, v12);
if v46 != 0 goto label08;
v47 = new io.vertx.codegen.GenException;
v48 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (javax.lang.model.type.ExecutableType,javax.lang.model.type.TypeMirror)>(v4, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 parameter should be the same or be a super type of \u0001");
specialinvoke v47.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v1, v48);
throw v47;
label08:
v49 = v0.<io.vertx.codegen.CodeGen: io.vertx.codegen.type.TypeMirrorFactory tmf>;
virtualinvoke v49.<io.vertx.codegen.type.TypeMirrorFactory: void addDataObjectSerializer(javax.lang.model.element.Element,javax.lang.model.type.TypeMirror,io.vertx.codegen.type.MapperInfo)>(v1, v2, v39);
goto label10;
label09:
v50 = new io.vertx.codegen.GenException;
specialinvoke v50.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v1, "Mapper method does not declare a JSON type");
throw v50;
label10:
return;
}
public void registerConverter(io.vertx.codegen.CodeGen$Converter)
{
java.util.List v2;
io.vertx.codegen.CodeGen$Converter v1;
io.vertx.codegen.CodeGen v0;
v0 := @this: io.vertx.codegen.CodeGen;
v1 := @parameter0: io.vertx.codegen.CodeGen$Converter;
v2 = v0.<io.vertx.codegen.CodeGen: java.util.List converters>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v1);
return;
}
public transient void registerConverter(java.lang.String, java.lang.String, java.lang.String[])
{
java.util.List v4, v6;
java.lang.String[] v3;
java.lang.String v1, v2;
io.vertx.codegen.CodeGen$Converter v5;
io.vertx.codegen.CodeGen v0;
v0 := @this: io.vertx.codegen.CodeGen;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String[];
v4 = v0.<io.vertx.codegen.CodeGen: java.util.List converters>;
v5 = new io.vertx.codegen.CodeGen$Converter;
v6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v3);
specialinvoke v5.<io.vertx.codegen.CodeGen$Converter: void <init>(java.lang.String,java.lang.String,java.util.List)>(v1, v2, v6);
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v5);
return;
}
public java.util.stream.Stream getModels()
{
java.util.Iterator v4;
java.util.Collection v3, v7;
java.util.stream.Stream v1, v10, v11, v12, v8, v9;
java.util.Map v2;
java.lang.Object v6;
io.vertx.codegen.CodeGen v0;
boolean v5;
v0 := @this: io.vertx.codegen.CodeGen;
v1 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream empty()>();
v2 = v0.<io.vertx.codegen.CodeGen: java.util.Map models>;
v3 = interfaceinvoke v2.<java.util.Map: java.util.Collection values()>();
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<java.util.Map: java.util.Collection values()>();
v8 = interfaceinvoke v7.<java.util.Collection: java.util.stream.Stream stream()>();
v1 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream concat(java.util.stream.Stream,java.util.stream.Stream)>(v1, v8);
goto label1;
label2:
v9 = specialinvoke v0.<io.vertx.codegen.CodeGen: java.util.stream.Stream getModuleModels()>();
v10 = specialinvoke v0.<io.vertx.codegen.CodeGen: java.util.stream.Stream getPackageModels()>();
v11 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream concat(java.util.stream.Stream,java.util.stream.Stream)>(v9, v10);
v12 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream concat(java.util.stream.Stream,java.util.stream.Stream)>(v1, v11);
return v12;
}
private java.util.stream.Stream getPackageModels()
{
java.util.Set v1;
java.util.function.Function v4, v7;
javax.lang.model.util.Elements v3;
java.util.stream.Stream v2, v5, v6, v8;
io.vertx.codegen.CodeGen v0;
v0 := @this: io.vertx.codegen.CodeGen;
v1 = v0.<io.vertx.codegen.CodeGen: java.util.Set all>;
v2 = interfaceinvoke v1.<java.util.Set: java.util.stream.Stream stream()>();
v3 = v0.<io.vertx.codegen.CodeGen: javax.lang.model.util.Elements elementUtils>;
virtualinvoke v3.<java.lang.Object: java.lang.Class getClass()>();
v4 = staticinvoke <io.vertx.codegen.CodeGen$getPackageOf__2514: java.util.function.Function bootstrap$(javax.lang.model.util.Elements)>(v3);
v5 = interfaceinvoke v2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v4);
v6 = interfaceinvoke v5.<java.util.stream.Stream: java.util.stream.Stream distinct()>();
v7 = staticinvoke <io.vertx.codegen.CodeGen$lambda_getPackageModels_15__2515: java.util.function.Function bootstrap$(io.vertx.codegen.CodeGen)>(v0);
v8 = interfaceinvoke v6.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v7);
return v8;
}
private java.util.stream.Stream getModuleModels()
{
java.util.stream.Stream v3, v5;
java.util.Set v2;
java.util.HashMap v1;
java.util.function.Function v4;
io.vertx.codegen.CodeGen v0;
v0 := @this: io.vertx.codegen.CodeGen;
v1 = v0.<io.vertx.codegen.CodeGen: java.util.HashMap modules>;
v2 = virtualinvoke v1.<java.util.HashMap: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.stream.Stream stream()>();
v4 = staticinvoke <io.vertx.codegen.CodeGen$lambda_getModuleModels_17__2516: java.util.function.Function bootstrap$(io.vertx.codegen.CodeGen)>(v0);
v5 = interfaceinvoke v3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v4);
return v5;
}
public io.vertx.codegen.ModuleModel getModuleModel(java.lang.String)
{
io.vertx.codegen.ModuleModel v4;
java.lang.Object v3;
java.util.HashMap v2;
java.lang.String v1;
javax.lang.model.util.Types v6;
javax.lang.model.util.Elements v5;
io.vertx.codegen.CodeGen v0;
v0 := @this: io.vertx.codegen.CodeGen;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.codegen.CodeGen: java.util.HashMap modules>;
v3 = virtualinvoke v2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v1);
v4 = new io.vertx.codegen.ModuleModel;
v5 = v0.<io.vertx.codegen.CodeGen: javax.lang.model.util.Elements elementUtils>;
v6 = v0.<io.vertx.codegen.CodeGen: javax.lang.model.util.Types typeUtils>;
specialinvoke v4.<io.vertx.codegen.ModuleModel: void <init>(javax.lang.model.util.Elements,javax.lang.model.util.Types,javax.lang.model.element.PackageElement)>(v5, v6, v3);
return v4;
}
public io.vertx.codegen.PackageModel getPackageModel(java.lang.String)
{
java.util.function.Predicate v3;
java.util.function.Function v6;
java.util.stream.Stream v2, v4;
java.util.Optional v5, v7;
java.lang.Object v8;
java.lang.String v1;
io.vertx.codegen.CodeGen v0;
v0 := @this: io.vertx.codegen.CodeGen;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.codegen.CodeGen: java.util.stream.Stream getPackageModels()>();
v3 = staticinvoke <io.vertx.codegen.CodeGen$lambda_getPackageModel_18__2517: java.util.function.Predicate bootstrap$(java.lang.String)>(v1);
v4 = interfaceinvoke v2.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v3);
v5 = interfaceinvoke v4.<java.util.stream.Stream: java.util.Optional findFirst()>();
v6 = staticinvoke <io.vertx.codegen.CodeGen$getValue__2518: java.util.function.Function bootstrap$()>();
v7 = virtualinvoke v5.<java.util.Optional: java.util.Optional map(java.util.function.Function)>(v6);
v8 = virtualinvoke v7.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);
return v8;
}
public io.vertx.codegen.Model getModel(java.lang.String, java.lang.String)
{
java.lang.IllegalArgumentException v5, v8;
java.util.Map v3;
java.lang.Object v10, v4, v7;
java.lang.String v1, v2, v6, v9;
io.vertx.codegen.CodeGen v0;
v0 := @this: io.vertx.codegen.CodeGen;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.codegen.CodeGen: java.util.Map models>;
v4 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
if v4 != null goto label1;
v5 = new java.lang.IllegalArgumentException;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Source for \u0001 not found");
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v5;
label1:
v7 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v7 != null goto label2;
v8 = new java.lang.IllegalArgumentException;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Source for \u0001 not found");
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v9);
throw v8;
label2:
v10 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getValue()>();
return v10;
}
public io.vertx.codegen.ClassModel getClassModel(java.lang.String)
{
io.vertx.codegen.Model v2;
java.lang.String v1;
io.vertx.codegen.CodeGen v0;
v0 := @this: io.vertx.codegen.CodeGen;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.codegen.CodeGen: io.vertx.codegen.Model getModel(java.lang.String,java.lang.String)>(v1, "class");
return v2;
}
public io.vertx.codegen.EnumModel getEnumModel(java.lang.String)
{
io.vertx.codegen.Model v2;
java.lang.String v1;
io.vertx.codegen.CodeGen v0;
v0 := @this: io.vertx.codegen.CodeGen;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.codegen.CodeGen: io.vertx.codegen.Model getModel(java.lang.String,java.lang.String)>(v1, "enum");
return v2;
}
public io.vertx.codegen.DataObjectModel getDataObjectModel(java.lang.String)
{
io.vertx.codegen.Model v2;
java.lang.String v1;
io.vertx.codegen.CodeGen v0;
v0 := @this: io.vertx.codegen.CodeGen;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.codegen.CodeGen: io.vertx.codegen.Model getModel(java.lang.String,java.lang.String)>(v1, "dataObject");
return v2;
}
static void <clinit>()
{
java.util.Iterator v7;
java.util.ServiceLoader v6;
java.util.logging.Logger v13;
java.lang.Exception v10;
java.util.ArrayList v0;
io.vertx.codegen.ModelProvider v1, v2, v3;
java.lang.Class v11, v4;
java.lang.Object v9;
java.lang.ClassLoader v5;
java.lang.String v12;
java.util.WeakHashMap v14;
boolean v8;
v0 = new java.util.ArrayList;
specialinvoke v0.<java.util.ArrayList: void <init>()>();
v1 = <io.vertx.codegen.ModelProvider: io.vertx.codegen.ModelProvider CLASS>;
interfaceinvoke v0.<java.util.List: boolean add(java.lang.Object)>(v1);
v2 = <io.vertx.codegen.ModelProvider: io.vertx.codegen.ModelProvider DATA_OBJECT>;
interfaceinvoke v0.<java.util.List: boolean add(java.lang.Object)>(v2);
v3 = <io.vertx.codegen.ModelProvider: io.vertx.codegen.ModelProvider ENUM>;
interfaceinvoke v0.<java.util.List: boolean add(java.lang.Object)>(v3);
label1:
v4 = class "Lio/vertx/codegen/ModelProvider;";
v5 = virtualinvoke v4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v6 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Lio/vertx/codegen/ModelProvider;", v5);
v7 = virtualinvoke v6.<java.util.ServiceLoader: java.util.Iterator iterator()>();
label2:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label4;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v0.<java.util.List: boolean add(java.lang.Object)>(v9);
goto label2;
label3:
v10 := @caughtexception;
virtualinvoke v10.<java.lang.Exception: void printStackTrace()>();
label4:
<io.vertx.codegen.CodeGen: java.util.List PROVIDERS> = v0;
v11 = class "Lio/vertx/codegen/CodeGen;";
v12 = virtualinvoke v11.<java.lang.Class: java.lang.String getName()>();
v13 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(v12);
<io.vertx.codegen.CodeGen: java.util.logging.Logger logger> = v13;
v14 = new java.util.WeakHashMap;
specialinvoke v14.<java.util.WeakHashMap: void <init>()>();
<io.vertx.codegen.CodeGen: java.util.Map loaderMap> = v14;
return;
catch java.lang.Exception from label1 to label3 with label3;
}
}