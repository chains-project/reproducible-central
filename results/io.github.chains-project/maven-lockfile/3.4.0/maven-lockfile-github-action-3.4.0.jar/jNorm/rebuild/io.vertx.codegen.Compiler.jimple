public class io.vertx.codegen.Compiler extends java.lang.Object
{
private javax.'annotation'.processing.Processor processor;
private javax.tools.DiagnosticListener diagnosticListener;
private java.util.List options;
private java.io.File classOutput;
private java.io.File sourceOutput;
private static java.io.File createTempDir() throws java.io.IOException
{
java.nio.file.Path v1;
java.nio.file.attribute.FileAttribute[] v0;
java.io.File v2;
v0 = newarray (java.nio.file.attribute.FileAttribute)[0];
v1 = staticinvoke <java.nio.file.Files: java.nio.file.Path createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute[])>("codegen", v0);
v2 = interfaceinvoke v1.<java.nio.file.Path: java.io.File toFile()>();
virtualinvoke v2.<java.io.File: void deleteOnExit()>();
return v2;
}
public void <init>(javax.'annotation'.processing.Processor)
{
io.vertx.codegen.Compiler v0;
javax.'annotation'.processing.Processor v1;
javax.tools.DiagnosticCollector v2;
v0 := @this: io.vertx.codegen.Compiler;
v1 := @parameter0: javax.'annotation'.processing.Processor;
v2 = new javax.tools.DiagnosticCollector;
specialinvoke v2.<javax.tools.DiagnosticCollector: void <init>()>();
specialinvoke v0.<io.vertx.codegen.Compiler: void <init>(javax.'annotation'.processing.Processor,javax.tools.DiagnosticListener)>(v1, v2);
return;
}
public void <init>(javax.'annotation'.processing.Processor, javax.tools.DiagnosticListener)
{
io.vertx.codegen.Compiler v0;
javax.tools.DiagnosticListener v2;
javax.'annotation'.processing.Processor v1;
java.util.ArrayList v3;
v0 := @this: io.vertx.codegen.Compiler;
v1 := @parameter0: javax.'annotation'.processing.Processor;
v2 := @parameter1: javax.tools.DiagnosticListener;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.codegen.Compiler: java.util.List options> = v3;
v0.<io.vertx.codegen.Compiler: javax.'annotation'.processing.Processor processor> = v1;
v0.<io.vertx.codegen.Compiler: javax.tools.DiagnosticListener diagnosticListener> = v2;
return;
}
public void <init>()
{
io.vertx.codegen.Compiler v0;
v0 := @this: io.vertx.codegen.Compiler;
specialinvoke v0.<io.vertx.codegen.Compiler: void <init>(javax.'annotation'.processing.Processor)>(null);
return;
}
public javax.'annotation'.processing.Processor getProcessor()
{
io.vertx.codegen.Compiler v0;
javax.'annotation'.processing.Processor v1;
v0 := @this: io.vertx.codegen.Compiler;
v1 = v0.<io.vertx.codegen.Compiler: javax.'annotation'.processing.Processor processor>;
return v1;
}
public io.vertx.codegen.Compiler addOption(java.lang.String)
{
java.util.List v2;
java.lang.String v1;
io.vertx.codegen.Compiler v0;
v0 := @this: io.vertx.codegen.Compiler;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.codegen.Compiler: java.util.List options>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v1);
return v0;
}
public java.io.File getClassOutput()
{
io.vertx.codegen.Compiler v0;
java.io.File v1;
v0 := @this: io.vertx.codegen.Compiler;
v1 = v0.<io.vertx.codegen.Compiler: java.io.File classOutput>;
return v1;
}
public void setClassOutput(java.io.File)
{
io.vertx.codegen.Compiler v0;
java.io.File v1;
v0 := @this: io.vertx.codegen.Compiler;
v1 := @parameter0: java.io.File;
v0.<io.vertx.codegen.Compiler: java.io.File classOutput> = v1;
return;
}
public java.io.File getSourceOutput()
{
io.vertx.codegen.Compiler v0;
java.io.File v1;
v0 := @this: io.vertx.codegen.Compiler;
v1 = v0.<io.vertx.codegen.Compiler: java.io.File sourceOutput>;
return v1;
}
public void setSourceOutput(java.io.File)
{
io.vertx.codegen.Compiler v0;
java.io.File v1;
v0 := @this: io.vertx.codegen.Compiler;
v1 := @parameter0: java.io.File;
v0.<io.vertx.codegen.Compiler: java.io.File sourceOutput> = v1;
return;
}
public transient boolean compile(java.lang.Class[]) throws java.lang.Exception
{
java.util.List v2;
io.vertx.codegen.Compiler v0;
java.lang.Class[] v1;
boolean v3;
v0 := @this: io.vertx.codegen.Compiler;
v1 := @parameter0: java.lang.Class[];
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v3 = virtualinvoke v0.<io.vertx.codegen.Compiler: boolean compile(java.util.List)>(v2);
return v3;
}
public boolean compile(java.util.List) throws java.lang.Exception
{
java.lang.Throwable v16, v23;
java.lang.IllegalStateException v11;
java.lang.Object[] v26;
java.util.Scanner v13, v14;
java.util.ArrayList v2;
int v24;
java.lang.String v12, v15, v17, v18, v6, v7, v8;
boolean v27, v4;
java.io.PrintStream v21;
io.vertx.codegen.Compiler v0;
java.util.Iterator v3;
java.io.FileOutputStream v22;
java.io.File v19, v20;
java.util.List v1;
java.lang.Object v5;
java.lang.ClassLoader v9;
java.io.File[] v25;
java.io.InputStream v10;
v0 := @this: io.vertx.codegen.Compiler;
v1 := @parameter0: java.util.List;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label01:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label11;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getCanonicalName()>();
v7 = virtualinvoke v6.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".", "/");
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.java");
v9 = virtualinvoke v5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v10 = virtualinvoke v9.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(v8);
if v10 != null goto label02;
v11 = new java.lang.IllegalStateException;
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Can\'t find source on classpath: \u0001");
specialinvoke v11.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v12);
throw v11;
label02:
v13 = new java.util.Scanner;
specialinvoke v13.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>(v10, "UTF-8");
v14 = virtualinvoke v13.<java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>("\\A");
label03:
v15 = virtualinvoke v14.<java.util.Scanner: java.lang.String next()>();
label04:
virtualinvoke v14.<java.util.Scanner: void close()>();
goto label06;
label05:
v16 := @caughtexception;
throw v16;
label06:
v17 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v17, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/\u0001");
v19 = new java.io.File;
specialinvoke v19.<java.io.File: void <init>(java.lang.String)>(v18);
v20 = virtualinvoke v19.<java.io.File: java.io.File getParentFile()>();
virtualinvoke v20.<java.io.File: boolean mkdirs()>();
v21 = new java.io.PrintStream;
v22 = new java.io.FileOutputStream;
specialinvoke v22.<java.io.FileOutputStream: void <init>(java.lang.String)>(v18);
specialinvoke v21.<java.io.PrintStream: void <init>(java.io.OutputStream)>(v22);
label07:
virtualinvoke v21.<java.io.PrintStream: void print(java.lang.String)>(v15);
label08:
virtualinvoke v21.<java.io.PrintStream: void close()>();
goto label10;
label09:
v23 := @caughtexception;
throw v23;
label10:
virtualinvoke v2.<java.util.ArrayList: boolean add(java.lang.Object)>(v19);
goto label01;
label11:
v24 = virtualinvoke v2.<java.util.ArrayList: int size()>();
v25 = newarray (java.io.File)[v24];
v26 = virtualinvoke v2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(v25);
v27 = virtualinvoke v0.<io.vertx.codegen.Compiler: boolean compile(java.io.File[])>(v26);
return v27;
catch java.lang.Throwable from label03 to label04 with label05;
catch java.lang.Throwable from label07 to label08 with label09;
}
public transient boolean compile(java.io.File[]) throws java.lang.Exception
{
java.lang.Throwable v25, v26, v28;
io.vertx.codegen.Compiler$NullWriter v16;
java.lang.Iterable v15;
java.lang.Boolean v22;
boolean v23, v27;
javax.tools.StandardLocation v12, v9;
io.vertx.codegen.Compiler v0;
javax.tools.JavaCompiler v2;
java.lang.RuntimeException v24;
javax.'annotation'.processing.Processor v20;
java.io.File v10, v13, v5, v6, v7, v8;
javax.tools.JavaCompiler$CompilationTask v19;
javax.tools.StandardJavaFileManager v4;
java.util.List v11, v14, v18, v21;
javax.tools.DiagnosticListener v17, v3;
java.io.File[] v1;
v0 := @this: io.vertx.codegen.Compiler;
v1 := @parameter0: java.io.File[];
v2 = staticinvoke <javax.tools.ToolProvider: javax.tools.JavaCompiler getSystemJavaCompiler()>();
v3 = v0.<io.vertx.codegen.Compiler: javax.tools.DiagnosticListener diagnosticListener>;
v4 = interfaceinvoke v2.<javax.tools.JavaCompiler: javax.tools.StandardJavaFileManager getStandardFileManager(javax.tools.DiagnosticListener,java.util.Locale,java.nio.charset.Charset)>(v3, null, null);
v5 = v0.<io.vertx.codegen.Compiler: java.io.File classOutput>;
if v5 != null goto label1;
v6 = staticinvoke <io.vertx.codegen.Compiler: java.io.File createTempDir()>();
v0.<io.vertx.codegen.Compiler: java.io.File classOutput> = v6;
label1:
v7 = v0.<io.vertx.codegen.Compiler: java.io.File sourceOutput>;
if v7 != null goto label2;
v8 = staticinvoke <io.vertx.codegen.Compiler: java.io.File createTempDir()>();
v0.<io.vertx.codegen.Compiler: java.io.File sourceOutput> = v8;
label2:
v9 = <javax.tools.StandardLocation: javax.tools.StandardLocation CLASS_OUTPUT>;
v10 = v0.<io.vertx.codegen.Compiler: java.io.File classOutput>;
v11 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v10);
interfaceinvoke v4.<javax.tools.StandardJavaFileManager: void setLocation(javax.tools.JavaFileManager$Location,java.lang.Iterable)>(v9, v11);
v12 = <javax.tools.StandardLocation: javax.tools.StandardLocation SOURCE_OUTPUT>;
v13 = v0.<io.vertx.codegen.Compiler: java.io.File sourceOutput>;
v14 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v13);
interfaceinvoke v4.<javax.tools.StandardJavaFileManager: void setLocation(javax.tools.JavaFileManager$Location,java.lang.Iterable)>(v12, v14);
v15 = interfaceinvoke v4.<javax.tools.StandardJavaFileManager: java.lang.Iterable getJavaFileObjects(java.io.File[])>(v1);
v16 = new io.vertx.codegen.Compiler$NullWriter;
specialinvoke v16.<io.vertx.codegen.Compiler$NullWriter: void <init>()>();
v17 = v0.<io.vertx.codegen.Compiler: javax.tools.DiagnosticListener diagnosticListener>;
v18 = v0.<io.vertx.codegen.Compiler: java.util.List options>;
v19 = interfaceinvoke v2.<javax.tools.JavaCompiler: javax.tools.JavaCompiler$CompilationTask getTask(java.io.Writer,javax.tools.JavaFileManager,javax.tools.DiagnosticListener,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)>(v16, v4, v17, v18, null, v15);
v20 = v0.<io.vertx.codegen.Compiler: javax.'annotation'.processing.Processor processor>;
v21 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v20);
interfaceinvoke v19.<javax.tools.JavaCompiler$CompilationTask: void setProcessors(java.lang.Iterable)>(v21);
label3:
v22 = interfaceinvoke v19.<javax.tools.JavaCompiler$CompilationTask: java.lang.Boolean call()>();
v23 = virtualinvoke v22.<java.lang.Boolean: boolean booleanValue()>();
label4:
return v23;
label5:
v24 := @caughtexception;
v25 = virtualinvoke v24.<java.lang.RuntimeException: java.lang.Throwable getCause()>();
if v25 == null goto label6;
v26 = virtualinvoke v24.<java.lang.RuntimeException: java.lang.Throwable getCause()>();
v27 = v26 instanceof java.lang.RuntimeException;
if v27 == 0 goto label6;
v28 = virtualinvoke v24.<java.lang.RuntimeException: java.lang.Throwable getCause()>();
throw v28;
label6:
throw v24;
catch java.lang.RuntimeException from label3 to label4 with label5;
}
}