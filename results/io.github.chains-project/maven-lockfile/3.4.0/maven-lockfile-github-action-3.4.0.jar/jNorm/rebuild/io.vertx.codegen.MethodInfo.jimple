public class io.vertx.codegen.MethodInfo extends java.lang.Object implements java.lang.Comparable
{
private java.lang.String name;
private io.vertx.codegen.type.TypeInfo returnType;
private io.vertx.codegen.doc.Text returnDescription;
private boolean fluent;
private boolean cacheReturn;
private java.lang.String comment;
private io.vertx.codegen.doc.Doc doc;
private boolean staticMethod;
private boolean defaultMethod;
private java.util.List typeParams;
private java.util.Set ownerTypes;
private java.util.List params;
private boolean deprecated;
private io.vertx.codegen.doc.Text deprecatedDesc;
private boolean useFutures;
private boolean methodOverride;
public void <init>(java.util.Set, java.lang.String, io.vertx.codegen.type.TypeInfo, io.vertx.codegen.doc.Text, boolean, boolean, java.util.List, java.lang.String, io.vertx.codegen.doc.Doc, boolean, boolean, java.util.List, boolean, io.vertx.codegen.doc.Text, boolean, boolean)
{
io.vertx.codegen.doc.Text v14, v4;
java.lang.String v2, v8;
boolean v10, v11, v13, v15, v16, v5, v6;
io.vertx.codegen.type.TypeInfo v3;
java.util.Set v1;
java.util.List v12, v7;
io.vertx.codegen.doc.Doc v9;
io.vertx.codegen.MethodInfo v0;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: java.util.Set;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.codegen.type.TypeInfo;
v4 := @parameter3: io.vertx.codegen.doc.Text;
v5 := @parameter4: boolean;
v6 := @parameter5: boolean;
v7 := @parameter6: java.util.List;
v8 := @parameter7: java.lang.String;
v9 := @parameter8: io.vertx.codegen.doc.Doc;
v10 := @parameter9: boolean;
v11 := @parameter10: boolean;
v12 := @parameter11: java.util.List;
v13 := @parameter12: boolean;
v14 := @parameter13: io.vertx.codegen.doc.Text;
v15 := @parameter14: boolean;
v16 := @parameter15: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.codegen.MethodInfo: boolean useFutures> = v15;
v0.<io.vertx.codegen.MethodInfo: java.lang.String comment> = v8;
v0.<io.vertx.codegen.MethodInfo: java.lang.String name> = v2;
v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.type.TypeInfo returnType> = v3;
v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.doc.Text returnDescription> = v4;
v0.<io.vertx.codegen.MethodInfo: boolean fluent> = v5;
v0.<io.vertx.codegen.MethodInfo: boolean cacheReturn> = v6;
v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.doc.Doc doc> = v9;
v0.<io.vertx.codegen.MethodInfo: boolean staticMethod> = v10;
v0.<io.vertx.codegen.MethodInfo: boolean defaultMethod> = v11;
v0.<io.vertx.codegen.MethodInfo: java.util.List params> = v7;
v0.<io.vertx.codegen.MethodInfo: java.util.List typeParams> = v12;
v0.<io.vertx.codegen.MethodInfo: java.util.Set ownerTypes> = v1;
v0.<io.vertx.codegen.MethodInfo: boolean deprecated> = v13;
v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.doc.Text deprecatedDesc> = v14;
v0.<io.vertx.codegen.MethodInfo: boolean methodOverride> = v16;
return;
}
public java.lang.String getName()
{
java.lang.String v1;
io.vertx.codegen.MethodInfo v0;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: java.lang.String name>;
return v1;
}
public io.vertx.codegen.MethodInfo setName(java.lang.String)
{
java.lang.String v1;
io.vertx.codegen.MethodInfo v0;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.codegen.MethodInfo: java.lang.String name> = v1;
return v0;
}
public java.lang.String getName(io.vertx.codegen.format.Case)
{
java.util.List v4;
io.vertx.codegen.format.Case v1, v2;
java.lang.String v3, v5;
io.vertx.codegen.MethodInfo v0;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: io.vertx.codegen.format.Case;
v2 = <io.vertx.codegen.format.CamelCase: io.vertx.codegen.format.Case INSTANCE>;
v3 = v0.<io.vertx.codegen.MethodInfo: java.lang.String name>;
v4 = virtualinvoke v2.<io.vertx.codegen.format.Case: java.util.List parse(java.lang.String)>(v3);
v5 = virtualinvoke v1.<io.vertx.codegen.format.Case: java.lang.String format(java.lang.Iterable)>(v4);
return v5;
}
public io.vertx.codegen.type.TypeInfo getCallbackType()
{
io.vertx.codegen.type.TypeInfo v4, v9;
java.util.List v1, v12, v7;
int v2, v3;
java.lang.Object v13, v8;
io.vertx.codegen.MethodInfo v0;
io.vertx.codegen.type.ClassKind v10, v11;
boolean v5, v6;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: java.util.List params>;
v2 = interfaceinvoke v1.<java.util.List: int size()>();
v3 = v2 - 1;
if v3 < 0 goto label2;
v4 = v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.type.TypeInfo returnType>;
v5 = virtualinvoke v4.<io.vertx.codegen.type.TypeInfo: boolean isVoid()>();
if v5 != 0 goto label1;
v6 = v0.<io.vertx.codegen.MethodInfo: boolean fluent>;
if v6 == 0 goto label2;
label1:
v7 = v0.<io.vertx.codegen.MethodInfo: java.util.List params>;
v8 = interfaceinvoke v7.<java.util.List: java.lang.Object get(int)>(v3);
v9 = v8.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo type>;
v10 = virtualinvoke v9.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v11 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind HANDLER>;
if v10 != v11 goto label2;
v12 = virtualinvoke v9.<io.vertx.codegen.type.ParameterizedTypeInfo: java.util.List getArgs()>();
v13 = interfaceinvoke v12.<java.util.List: java.lang.Object get(int)>(0);
return v13;
label2:
return null;
}
public io.vertx.codegen.MethodKind getKind()
{
io.vertx.codegen.type.TypeInfo v1, v7;
io.vertx.codegen.MethodKind v11, v12, v5, v6;
io.vertx.codegen.MethodInfo v0;
io.vertx.codegen.type.ClassKind v2, v3, v8, v9;
boolean v10, v4;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = virtualinvoke v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.type.TypeInfo getCallbackType()>();
if v1 == null goto label2;
v2 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v3 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind ASYNC_RESULT>;
if v2 != v3 goto label1;
v4 = v0.<io.vertx.codegen.MethodInfo: boolean useFutures>;
if v4 != 0 goto label1;
v5 = <io.vertx.codegen.MethodKind: io.vertx.codegen.MethodKind CALLBACK>;
return v5;
label1:
v6 = <io.vertx.codegen.MethodKind: io.vertx.codegen.MethodKind HANDLER>;
return v6;
label2:
v7 = v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.type.TypeInfo returnType>;
v8 = virtualinvoke v7.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v9 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind FUTURE>;
if v8 != v9 goto label3;
v10 = v0.<io.vertx.codegen.MethodInfo: boolean useFutures>;
if v10 == 0 goto label3;
v11 = <io.vertx.codegen.MethodKind: io.vertx.codegen.MethodKind FUTURE>;
return v11;
label3:
v12 = <io.vertx.codegen.MethodKind: io.vertx.codegen.MethodKind OTHER>;
return v12;
}
public io.vertx.codegen.type.TypeInfo getReturnType()
{
io.vertx.codegen.MethodInfo v0;
io.vertx.codegen.type.TypeInfo v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.type.TypeInfo returnType>;
return v1;
}
public io.vertx.codegen.MethodInfo setReturnType(io.vertx.codegen.type.TypeInfo)
{
io.vertx.codegen.MethodInfo v0;
io.vertx.codegen.type.TypeInfo v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: io.vertx.codegen.type.TypeInfo;
v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.type.TypeInfo returnType> = v1;
return v0;
}
public boolean isContainingAnyJavaType()
{
java.util.function.Predicate v5;
io.vertx.codegen.type.TypeInfo v7;
java.util.function.Function v3;
java.util.List v1;
java.util.stream.Stream v2, v4;
io.vertx.codegen.MethodInfo v0;
boolean v6, v8, v9;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: java.util.List params>;
v2 = interfaceinvoke v1.<java.util.List: java.util.stream.Stream stream()>();
v3 = staticinvoke <io.vertx.codegen.MethodInfo$getType__2530: java.util.function.Function bootstrap$()>();
v4 = interfaceinvoke v2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v3);
v5 = staticinvoke <io.vertx.codegen.MethodInfo$containsAnyJavaType__2531: java.util.function.Predicate bootstrap$()>();
v6 = interfaceinvoke v4.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>(v5);
if v6 != 0 goto label1;
v7 = v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.type.TypeInfo returnType>;
v8 = staticinvoke <io.vertx.codegen.MethodInfo: boolean containsAnyJavaType(io.vertx.codegen.type.TypeInfo)>(v7);
if v8 == 0 goto label2;
label1:
v9 = 1;
goto label3;
label2:
v9 = 0;
label3:
return v9;
}
public static boolean containsAnyJavaType(io.vertx.codegen.type.TypeInfo)
{
io.vertx.codegen.type.ClassTypeInfo v2;
java.util.function.Predicate v6;
io.vertx.codegen.type.TypeInfo v0;
java.util.List v4;
java.util.stream.Stream v5;
io.vertx.codegen.type.ClassKind v10, v9;
boolean v1, v11, v3, v7, v8;
v0 := @parameter0: io.vertx.codegen.type.TypeInfo;
v1 = v0 instanceof io.vertx.codegen.type.ParameterizedTypeInfo;
if v1 == 0 goto label4;
v2 = virtualinvoke v0.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v3 = staticinvoke <io.vertx.codegen.MethodInfo: boolean containsAnyJavaType(io.vertx.codegen.type.TypeInfo)>(v2);
if v3 != 0 goto label1;
v4 = virtualinvoke v0.<io.vertx.codegen.type.ParameterizedTypeInfo: java.util.List getArgs()>();
v5 = interfaceinvoke v4.<java.util.List: java.util.stream.Stream stream()>();
v6 = staticinvoke <io.vertx.codegen.MethodInfo$containsAnyJavaType__2532: java.util.function.Predicate bootstrap$()>();
v7 = interfaceinvoke v5.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>(v6);
if v7 == 0 goto label2;
label1:
v8 = 1;
goto label3;
label2:
v8 = 0;
label3:
return v8;
label4:
v9 = virtualinvoke v0.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v10 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind OTHER>;
if v9 != v10 goto label5;
v11 = 1;
goto label6;
label5:
v11 = 0;
label6:
return v11;
}
public io.vertx.codegen.ParamInfo resolveClassTypeParam(io.vertx.codegen.type.TypeVariableInfo)
{
io.vertx.codegen.ParamInfo v4;
io.vertx.codegen.TypeArgExpression v2;
io.vertx.codegen.MethodInfo v0;
io.vertx.codegen.type.TypeVariableInfo v1;
boolean v3;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: io.vertx.codegen.type.TypeVariableInfo;
v2 = virtualinvoke v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.TypeArgExpression resolveTypeArg(io.vertx.codegen.type.TypeVariableInfo)>(v1);
if v2 == null goto label1;
v3 = virtualinvoke v2.<io.vertx.codegen.TypeArgExpression: boolean isClassType()>();
if v3 == 0 goto label1;
v4 = virtualinvoke v2.<io.vertx.codegen.TypeArgExpression: io.vertx.codegen.ParamInfo getParam()>();
return v4;
label1:
return null;
}
public io.vertx.codegen.TypeArgExpression resolveTypeArg(io.vertx.codegen.type.TypeVariableInfo)
{
io.vertx.codegen.type.ClassKind v14, v15, v25, v26;
boolean v11, v17, v20, v22, v28, v33, v35, v37, v4, v8;
io.vertx.codegen.type.TypeInfo v13, v16, v18, v19, v24, v27, v29, v39;
java.util.List v2, v31, v9;
io.vertx.codegen.TypeParamInfo v21, v36;
int v30;
java.lang.String v6, v7;
io.vertx.codegen.type.TypeVariableInfo v1;
java.util.Iterator v10, v3, v32;
io.vertx.codegen.TypeArgExpression v23, v38;
java.lang.Object v12, v34, v5;
io.vertx.codegen.MethodInfo v0;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: io.vertx.codegen.type.TypeVariableInfo;
v2 = v0.<io.vertx.codegen.MethodInfo: java.util.List typeParams>;
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label7;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = virtualinvoke v5.<io.vertx.codegen.TypeParamInfo$Method: java.lang.String getName()>();
v7 = virtualinvoke v1.<io.vertx.codegen.type.TypeVariableInfo: java.lang.String getName()>();
v8 = virtualinvoke v6.<java.lang.String: boolean equals(java.lang.Object)>(v7);
if v8 == 0 goto label1;
v9 = v0.<io.vertx.codegen.MethodInfo: java.util.List params>;
v10 = interfaceinvoke v9.<java.util.List: java.util.Iterator iterator()>();
label2:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label6;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
v13 = virtualinvoke v12.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v14 = virtualinvoke v13.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v15 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind CLASS_TYPE>;
if v14 != v15 goto label3;
v16 = virtualinvoke v12.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v17 = virtualinvoke v16.<io.vertx.codegen.type.TypeInfo: boolean isParameterized()>();
if v17 == 0 goto label3;
v18 = virtualinvoke v12.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v19 = virtualinvoke v18.<io.vertx.codegen.type.ParameterizedTypeInfo: io.vertx.codegen.type.TypeInfo getArg(int)>(0);
v20 = virtualinvoke v19.<io.vertx.codegen.type.TypeInfo: boolean isVariable()>();
if v20 == 0 goto label2;
v21 = virtualinvoke v19.<io.vertx.codegen.type.TypeVariableInfo: io.vertx.codegen.TypeParamInfo getParam()>();
v22 = virtualinvoke v21.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
if v22 == 0 goto label2;
v23 = new io.vertx.codegen.TypeArgExpression;
specialinvoke v23.<io.vertx.codegen.TypeArgExpression: void <init>(int,io.vertx.codegen.type.TypeVariableInfo,io.vertx.codegen.ParamInfo,int)>(0, v19, v12, 0);
return v23;
label3:
v24 = virtualinvoke v12.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v25 = virtualinvoke v24.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v26 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind API>;
if v25 != v26 goto label2;
v27 = virtualinvoke v12.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v28 = virtualinvoke v27.<io.vertx.codegen.type.TypeInfo: boolean isParameterized()>();
if v28 == 0 goto label2;
v29 = virtualinvoke v12.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v30 = 0;
v31 = virtualinvoke v29.<io.vertx.codegen.type.ParameterizedTypeInfo: java.util.List getArgs()>();
v32 = interfaceinvoke v31.<java.util.List: java.util.Iterator iterator()>();
label4:
v33 = interfaceinvoke v32.<java.util.Iterator: boolean hasNext()>();
if v33 == 0 goto label2;
v34 = interfaceinvoke v32.<java.util.Iterator: java.lang.Object next()>();
v35 = v34 instanceof io.vertx.codegen.type.TypeVariableInfo;
if v35 == 0 goto label5;
v36 = virtualinvoke v39.<io.vertx.codegen.type.TypeVariableInfo: io.vertx.codegen.TypeParamInfo getParam()>();
v37 = virtualinvoke v36.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
if v37 == 0 goto label5;
v38 = new io.vertx.codegen.TypeArgExpression;
specialinvoke v38.<io.vertx.codegen.TypeArgExpression: void <init>(int,io.vertx.codegen.type.TypeVariableInfo,io.vertx.codegen.ParamInfo,int)>(1, v39, v12, v30);
return v38;
label5:
v30 = v30 + 1;
goto label4;
label6:
return null;
label7:
return null;
}
public io.vertx.codegen.doc.Text getReturnDescription()
{
io.vertx.codegen.MethodInfo v0;
io.vertx.codegen.doc.Text v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.doc.Text returnDescription>;
return v1;
}
public io.vertx.codegen.MethodInfo setReturnDescription(io.vertx.codegen.doc.Text)
{
io.vertx.codegen.MethodInfo v0;
io.vertx.codegen.doc.Text v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: io.vertx.codegen.doc.Text;
v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.doc.Text returnDescription> = v1;
return v0;
}
public java.util.Set getOwnerTypes()
{
java.util.Set v1;
io.vertx.codegen.MethodInfo v0;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: java.util.Set ownerTypes>;
return v1;
}
public io.vertx.codegen.MethodInfo setOwnerTypes(java.util.Set)
{
java.util.Set v1;
io.vertx.codegen.MethodInfo v0;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: java.util.Set;
v0.<io.vertx.codegen.MethodInfo: java.util.Set ownerTypes> = v1;
return v0;
}
public io.vertx.codegen.Signature getSignature()
{
java.util.List v4;
io.vertx.codegen.Signature v1;
java.lang.String v2;
io.vertx.codegen.MethodInfo v0;
java.util.ArrayList v3;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = new io.vertx.codegen.Signature;
v2 = v0.<io.vertx.codegen.MethodInfo: java.lang.String name>;
v3 = new java.util.ArrayList;
v4 = v0.<io.vertx.codegen.MethodInfo: java.util.List params>;
specialinvoke v3.<java.util.ArrayList: void <init>(java.util.Collection)>(v4);
specialinvoke v1.<io.vertx.codegen.Signature: void <init>(java.lang.String,java.util.List)>(v2, v3);
return v1;
}
public boolean isOwnedBy(io.vertx.codegen.type.ClassTypeInfo)
{
io.vertx.codegen.type.ClassTypeInfo v1;
int v5;
java.util.Set v2, v4;
io.vertx.codegen.MethodInfo v0;
boolean v3, v6;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: io.vertx.codegen.type.ClassTypeInfo;
v2 = v0.<io.vertx.codegen.MethodInfo: java.util.Set ownerTypes>;
v3 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v1);
if v3 == 0 goto label1;
v4 = v0.<io.vertx.codegen.MethodInfo: java.util.Set ownerTypes>;
v5 = interfaceinvoke v4.<java.util.Set: int size()>();
if v5 != 1 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
return v6;
}
public boolean isFluent()
{
io.vertx.codegen.MethodInfo v0;
boolean v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: boolean fluent>;
return v1;
}
public io.vertx.codegen.MethodInfo setFluent(boolean)
{
io.vertx.codegen.MethodInfo v0;
boolean v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: boolean;
v0.<io.vertx.codegen.MethodInfo: boolean fluent> = v1;
return v0;
}
public boolean isCacheReturn()
{
io.vertx.codegen.MethodInfo v0;
boolean v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: boolean cacheReturn>;
return v1;
}
public io.vertx.codegen.MethodInfo setCacheReturn(boolean)
{
io.vertx.codegen.MethodInfo v0;
boolean v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: boolean;
v0.<io.vertx.codegen.MethodInfo: boolean cacheReturn> = v1;
return v0;
}
public boolean isNullableReturn()
{
io.vertx.codegen.MethodInfo v0;
boolean v2;
io.vertx.codegen.type.TypeInfo v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.type.TypeInfo returnType>;
v2 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: boolean isNullable()>();
return v2;
}
public java.util.List getParams()
{
java.util.List v1;
io.vertx.codegen.MethodInfo v0;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: java.util.List params>;
return v1;
}
public io.vertx.codegen.MethodInfo setParams(java.util.List)
{
java.util.List v1;
io.vertx.codegen.MethodInfo v0;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: java.util.List;
v0.<io.vertx.codegen.MethodInfo: java.util.List params> = v1;
return v0;
}
public io.vertx.codegen.ParamInfo getParam(int)
{
java.util.List v2;
int v1;
java.lang.Object v3;
io.vertx.codegen.MethodInfo v0;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: int;
v2 = v0.<io.vertx.codegen.MethodInfo: java.util.List params>;
v3 = interfaceinvoke v2.<java.util.List: java.lang.Object get(int)>(v1);
return v3;
}
public java.lang.String getComment()
{
java.lang.String v1;
io.vertx.codegen.MethodInfo v0;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: java.lang.String comment>;
return v1;
}
public io.vertx.codegen.MethodInfo setComment(java.lang.String)
{
java.lang.String v1;
io.vertx.codegen.MethodInfo v0;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.codegen.MethodInfo: java.lang.String comment> = v1;
return v0;
}
public io.vertx.codegen.doc.Doc getDoc()
{
io.vertx.codegen.MethodInfo v0;
io.vertx.codegen.doc.Doc v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.doc.Doc doc>;
return v1;
}
public io.vertx.codegen.MethodInfo setDoc(io.vertx.codegen.doc.Doc)
{
io.vertx.codegen.MethodInfo v0;
io.vertx.codegen.doc.Doc v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: io.vertx.codegen.doc.Doc;
v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.doc.Doc doc> = v1;
return v0;
}
public boolean isStaticMethod()
{
io.vertx.codegen.MethodInfo v0;
boolean v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: boolean staticMethod>;
return v1;
}
public io.vertx.codegen.MethodInfo setStaticMethod(boolean)
{
io.vertx.codegen.MethodInfo v0;
boolean v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: boolean;
v0.<io.vertx.codegen.MethodInfo: boolean staticMethod> = v1;
return v0;
}
public boolean isDefaultMethod()
{
io.vertx.codegen.MethodInfo v0;
boolean v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: boolean defaultMethod>;
return v1;
}
public io.vertx.codegen.MethodInfo setDefaultMethod(boolean)
{
io.vertx.codegen.MethodInfo v0;
boolean v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: boolean;
v0.<io.vertx.codegen.MethodInfo: boolean defaultMethod> = v1;
return v0;
}
public boolean isDeprecated()
{
io.vertx.codegen.MethodInfo v0;
boolean v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: boolean deprecated>;
return v1;
}
public io.vertx.codegen.MethodInfo setDeprecated(boolean)
{
io.vertx.codegen.MethodInfo v0;
boolean v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: boolean;
v0.<io.vertx.codegen.MethodInfo: boolean deprecated> = v1;
return v0;
}
public boolean isUseFutures()
{
io.vertx.codegen.MethodInfo v0;
boolean v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: boolean useFutures>;
return v1;
}
public boolean isMethodOverride()
{
io.vertx.codegen.MethodInfo v0;
boolean v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: boolean methodOverride>;
return v1;
}
public io.vertx.codegen.doc.Text getDeprecatedDesc()
{
io.vertx.codegen.MethodInfo v0;
io.vertx.codegen.doc.Text v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.doc.Text deprecatedDesc>;
return v1;
}
public io.vertx.codegen.MethodInfo setDeprecatedDesc(io.vertx.codegen.doc.Text)
{
io.vertx.codegen.MethodInfo v0;
io.vertx.codegen.doc.Text v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: io.vertx.codegen.doc.Text;
v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.doc.Text deprecatedDesc> = v1;
return v0;
}
public java.util.List getTypeParams()
{
java.util.List v1;
io.vertx.codegen.MethodInfo v0;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = v0.<io.vertx.codegen.MethodInfo: java.util.List typeParams>;
return v1;
}
public io.vertx.codegen.MethodInfo setTypeParams(java.util.List)
{
java.util.List v1;
io.vertx.codegen.MethodInfo v0;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: java.util.List;
v0.<io.vertx.codegen.MethodInfo: java.util.List typeParams> = v1;
return v0;
}
public void mergeTypeParams(java.util.List) throws java.lang.IllegalArgumentException
{
int v10, v12, v15, v16, v3, v4, v5;
java.lang.String v20;
boolean v9;
java.lang.IllegalArgumentException v18;
java.util.List v1, v11, v13, v14, v17, v19, v2, v6, v7, v8;
io.vertx.codegen.MethodInfo v0;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: java.util.List;
v2 = v0.<io.vertx.codegen.MethodInfo: java.util.List typeParams>;
v3 = interfaceinvoke v2.<java.util.List: int size()>();
v4 = interfaceinvoke v1.<java.util.List: int size()>();
v5 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v4);
v6 = v0.<io.vertx.codegen.MethodInfo: java.util.List typeParams>;
v7 = interfaceinvoke v6.<java.util.List: java.util.List subList(int,int)>(0, v5);
v8 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, v5);
v9 = interfaceinvoke v7.<java.util.List: boolean equals(java.lang.Object)>(v8);
if v9 == 0 goto label1;
v10 = interfaceinvoke v1.<java.util.List: int size()>();
v11 = v0.<io.vertx.codegen.MethodInfo: java.util.List typeParams>;
v12 = interfaceinvoke v11.<java.util.List: int size()>();
if v10 <= v12 goto label2;
v13 = v0.<io.vertx.codegen.MethodInfo: java.util.List typeParams>;
v14 = v0.<io.vertx.codegen.MethodInfo: java.util.List typeParams>;
v15 = interfaceinvoke v14.<java.util.List: int size()>();
v16 = interfaceinvoke v1.<java.util.List: int size()>();
v17 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(v15, v16);
interfaceinvoke v13.<java.util.List: boolean addAll(java.util.Collection)>(v17);
goto label2;
label1:
v18 = new java.lang.IllegalArgumentException;
v19 = v0.<io.vertx.codegen.MethodInfo: java.util.List typeParams>;
v20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.List,java.util.List)>(v1, v19) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Merged type params \u0001 don\'t match the existing ones \u0001");
specialinvoke v18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v20);
throw v18;
label2:
return;
}
public void collectImports(java.util.Collection)
{
java.util.function.Consumer v6;
java.util.List v2;
java.util.stream.Stream v3, v5;
java.util.Collection v1;
io.vertx.codegen.MethodInfo v0;
java.util.function.Function v4;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: java.util.Collection;
v2 = v0.<io.vertx.codegen.MethodInfo: java.util.List params>;
v3 = interfaceinvoke v2.<java.util.List: java.util.stream.Stream stream()>();
v4 = staticinvoke <io.vertx.codegen.MethodInfo$getType__2533: java.util.function.Function bootstrap$()>();
v5 = interfaceinvoke v3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v4);
v6 = staticinvoke <io.vertx.codegen.MethodInfo$lambda_collectImports_0__2534: java.util.function.Consumer bootstrap$(java.util.Collection)>(v1);
interfaceinvoke v5.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>(v6);
return;
}
public io.vertx.codegen.MethodInfo copy()
{
java.util.ArrayList v15, v9;
java.util.HashSet v2;
io.vertx.codegen.doc.Text v18, v6;
java.lang.String v11, v4;
boolean v13, v14, v17, v19, v20, v7, v8;
io.vertx.codegen.type.TypeInfo v5;
java.util.Set v3;
java.util.List v10, v16;
io.vertx.codegen.doc.Doc v12;
io.vertx.codegen.MethodInfo v0, v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = new io.vertx.codegen.MethodInfo;
v2 = new java.util.HashSet;
v3 = v0.<io.vertx.codegen.MethodInfo: java.util.Set ownerTypes>;
specialinvoke v2.<java.util.HashSet: void <init>(java.util.Collection)>(v3);
v4 = v0.<io.vertx.codegen.MethodInfo: java.lang.String name>;
v5 = v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.type.TypeInfo returnType>;
v6 = v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.doc.Text returnDescription>;
v7 = v0.<io.vertx.codegen.MethodInfo: boolean fluent>;
v8 = v0.<io.vertx.codegen.MethodInfo: boolean cacheReturn>;
v9 = new java.util.ArrayList;
v10 = v0.<io.vertx.codegen.MethodInfo: java.util.List params>;
specialinvoke v9.<java.util.ArrayList: void <init>(java.util.Collection)>(v10);
v11 = v0.<io.vertx.codegen.MethodInfo: java.lang.String comment>;
v12 = v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.doc.Doc doc>;
v13 = v0.<io.vertx.codegen.MethodInfo: boolean staticMethod>;
v14 = v0.<io.vertx.codegen.MethodInfo: boolean defaultMethod>;
v15 = new java.util.ArrayList;
v16 = v0.<io.vertx.codegen.MethodInfo: java.util.List typeParams>;
specialinvoke v15.<java.util.ArrayList: void <init>(java.util.Collection)>(v16);
v17 = v0.<io.vertx.codegen.MethodInfo: boolean deprecated>;
v18 = v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.doc.Text deprecatedDesc>;
v19 = v0.<io.vertx.codegen.MethodInfo: boolean useFutures>;
v20 = v0.<io.vertx.codegen.MethodInfo: boolean methodOverride>;
specialinvoke v1.<io.vertx.codegen.MethodInfo: void <init>(java.util.Set,java.lang.String,io.vertx.codegen.type.TypeInfo,io.vertx.codegen.doc.Text,boolean,boolean,java.util.List,java.lang.String,io.vertx.codegen.doc.Doc,boolean,boolean,java.util.List,boolean,io.vertx.codegen.doc.Text,boolean,boolean)>(v2, v4, v5, v6, v7, v8, v9, v11, v12, v13, v14, v15, v17, v18, v19, v20);
return v1;
}
public int compareTo(io.vertx.codegen.MethodInfo)
{
int v19, v23, v4;
java.lang.String v15, v18, v2, v3;
boolean v10, v20, v21, v22, v9;
io.vertx.codegen.type.ClassTypeInfo v14, v17;
java.util.Iterator v6, v8;
io.vertx.codegen.type.TypeInfo v13, v16;
java.util.List v5, v7;
java.lang.Object v11, v12;
io.vertx.codegen.MethodInfo v0, v1;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 := @parameter0: io.vertx.codegen.MethodInfo;
v2 = v0.<io.vertx.codegen.MethodInfo: java.lang.String name>;
v3 = v1.<io.vertx.codegen.MethodInfo: java.lang.String name>;
v4 = virtualinvoke v2.<java.lang.String: int compareTo(java.lang.String)>(v3);
if v4 == 0 goto label1;
return v4;
label1:
v5 = v0.<io.vertx.codegen.MethodInfo: java.util.List params>;
v6 = interfaceinvoke v5.<java.util.List: java.util.Iterator iterator()>();
v7 = v1.<io.vertx.codegen.MethodInfo: java.util.List params>;
v8 = interfaceinvoke v7.<java.util.List: java.util.Iterator iterator()>();
label2:
v9 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label3;
v10 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label3;
v11 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v12 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v13 = virtualinvoke v11.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v14 = virtualinvoke v13.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v15 = virtualinvoke v14.<io.vertx.codegen.type.ClassTypeInfo: java.lang.String getName()>();
v16 = virtualinvoke v12.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v17 = virtualinvoke v16.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v18 = virtualinvoke v17.<io.vertx.codegen.type.ClassTypeInfo: java.lang.String getName()>();
v19 = virtualinvoke v15.<java.lang.String: int compareTo(java.lang.String)>(v18);
if v19 == 0 goto label2;
return v19;
label3:
v20 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v20 == 0 goto label4;
v21 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v21 != 0 goto label5;
return 1;
label4:
v22 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v22 != 0 goto label5;
v23 = (int) -1;
return v23;
label5:
return 0;
}
public java.lang.String toString()
{
io.vertx.codegen.Signature v13;
int v3, v4, v6;
java.lang.String v10, v12, v14, v15, v7;
io.vertx.codegen.type.TypeInfo v11;
java.util.List v2, v5, v8;
java.lang.Object v9;
java.lang.StringBuilder v1;
io.vertx.codegen.MethodInfo v0;
v0 := @this: io.vertx.codegen.MethodInfo;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = v0.<io.vertx.codegen.MethodInfo: java.util.List typeParams>;
v3 = interfaceinvoke v2.<java.util.List: int size()>();
if v3 <= 0 goto label5;
v4 = 0;
label1:
v5 = v0.<io.vertx.codegen.MethodInfo: java.util.List typeParams>;
v6 = interfaceinvoke v5.<java.util.List: int size()>();
if v4 >= v6 goto label4;
if v4 <= 0 goto label2;
v7 = ", ";
goto label3;
label2:
v7 = "<";
label3:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v7);
v8 = v0.<io.vertx.codegen.MethodInfo: java.util.List typeParams>;
v9 = interfaceinvoke v8.<java.util.List: java.lang.Object get(int)>(v4);
v10 = virtualinvoke v9.<io.vertx.codegen.TypeParamInfo$Method: java.lang.String getName()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v10);
v4 = v4 + 1;
goto label1;
label4:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> ");
label5:
v11 = v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.type.TypeInfo returnType>;
v12 = virtualinvoke v11.<io.vertx.codegen.type.TypeInfo: java.lang.String getName()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v12);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
v13 = virtualinvoke v0.<io.vertx.codegen.MethodInfo: io.vertx.codegen.Signature getSignature()>();
v14 = virtualinvoke v13.<io.vertx.codegen.Signature: java.lang.String toString()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v14);
v15 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v15;
}
}