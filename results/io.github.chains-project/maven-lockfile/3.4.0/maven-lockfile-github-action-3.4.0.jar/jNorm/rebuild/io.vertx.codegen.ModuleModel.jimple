public class io.vertx.codegen.ModuleModel extends java.lang.Object implements io.vertx.codegen.Model
{
private final javax.lang.model.element.PackageElement element;
private final io.vertx.codegen.ModuleInfo info;
private final java.util.List annotationValueInfos;
public void <init>(javax.lang.model.util.Elements, javax.lang.model.util.Types, javax.lang.model.element.PackageElement)
{
io.vertx.codegen.ModuleModel v0;
javax.lang.model.util.Elements v1;
io.vertx.codegen.type.AnnotationValueInfoFactory v25;
io.vertx.codegen.format.Case v10;
java.util.stream.Collector v31, v39;
boolean v15, v16, v24, v8;
io.vertx.codegen.type.TypeMirrorFactory v26;
java.util.function.Predicate v35;
javax.lang.model.util.Types v2;
java.lang.Exception v20;
java.util.List v27, v33;
java.util.stream.Stream v28, v30, v34, v36, v38;
java.lang.'annotation'.Annotation v6;
io.vertx.codegen.format.QualifiedCase v19;
io.vertx.codegen.ModuleInfo v23;
javax.lang.model.element.PackageElement v3;
java.util.function.Function v29, v37;
io.vertx.codegen.GenException v12, v17, v21, v9;
java.lang.String v13, v14, v18, v22, v5, v7;
javax.lang.model.element.Name v4;
java.lang.IllegalArgumentException v11;
java.util.function.Consumer v41;
java.lang.Object v32, v40;
v0 := @this: io.vertx.codegen.ModuleModel;
v1 := @parameter0: javax.lang.model.util.Elements;
v2 := @parameter1: javax.lang.model.util.Types;
v3 := @parameter2: javax.lang.model.element.PackageElement;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = interfaceinvoke v3.<javax.lang.model.element.PackageElement: javax.lang.model.element.Name getQualifiedName()>();
v5 = virtualinvoke v4.<java.lang.Object: java.lang.String toString()>();
v6 = interfaceinvoke v3.<javax.lang.model.element.PackageElement: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/codegen/annotations/ModuleGen;");
v7 = interfaceinvoke v6.<io.vertx.codegen.annotations.ModuleGen: java.lang.String name()>();
v8 = virtualinvoke v7.<java.lang.String: boolean isEmpty()>();
if v8 == 0 goto label1;
v9 = new io.vertx.codegen.GenException;
specialinvoke v9.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v3, "A module name cannot be empty");
throw v9;
label1:
v10 = <io.vertx.codegen.format.KebabCase: io.vertx.codegen.format.Case INSTANCE>;
virtualinvoke v10.<io.vertx.codegen.format.Case: java.util.List parse(java.lang.String)>(v7);
label2:
goto label4;
label3:
v11 := @caughtexception;
v12 = new io.vertx.codegen.GenException;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Module name \'\u0001\' does not follow the snake case format (dash separated name)");
specialinvoke v12.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v3, v13);
throw v12;
label4:
v14 = interfaceinvoke v6.<io.vertx.codegen.annotations.ModuleGen: java.lang.String groupPackage()>();
v15 = virtualinvoke v14.<java.lang.String: boolean equals(java.lang.Object)>("");
if v15 == 0 goto label5;
v14 = v5;
goto label6;
label5:
v16 = virtualinvoke v5.<java.lang.String: boolean startsWith(java.lang.String)>(v14);
if v16 != 0 goto label6;
v17 = new io.vertx.codegen.GenException;
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v5, v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("A module package (\u0001) must be prefixed by the group package (\u0001)");
specialinvoke v17.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v3, v18);
throw v17;
label6:
v19 = <io.vertx.codegen.PackageModel: io.vertx.codegen.format.QualifiedCase CASE>;
virtualinvoke v19.<io.vertx.codegen.format.QualifiedCase: java.util.List parse(java.lang.String)>(v14);
label7:
goto label9;
label8:
v20 := @caughtexception;
v21 = new io.vertx.codegen.GenException;
v22 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid group package name \u0001");
specialinvoke v21.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v3, v22);
throw v21;
label9:
v23 = new io.vertx.codegen.ModuleInfo;
v24 = interfaceinvoke v6.<io.vertx.codegen.annotations.ModuleGen: boolean useFutures()>();
specialinvoke v23.<io.vertx.codegen.ModuleInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>(v5, v7, v14, v24);
v25 = new io.vertx.codegen.type.AnnotationValueInfoFactory;
v26 = new io.vertx.codegen.type.TypeMirrorFactory;
specialinvoke v26.<io.vertx.codegen.type.TypeMirrorFactory: void <init>(javax.lang.model.util.Elements,javax.lang.model.util.Types)>(v1, v2);
specialinvoke v25.<io.vertx.codegen.type.AnnotationValueInfoFactory: void <init>(io.vertx.codegen.type.TypeMirrorFactory)>(v26);
v27 = interfaceinvoke v3.<javax.lang.model.element.PackageElement: java.util.List getAnnotationMirrors()>();
v28 = interfaceinvoke v27.<java.util.List: java.util.stream.Stream stream()>();
virtualinvoke v25.<java.lang.Object: java.lang.Class getClass()>();
v29 = staticinvoke <io.vertx.codegen.ModuleModel$processAnnotation__2436: java.util.function.Function bootstrap$(io.vertx.codegen.type.AnnotationValueInfoFactory)>(v25);
v30 = interfaceinvoke v28.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v29);
v31 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v32 = interfaceinvoke v30.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v31);
v33 = interfaceinvoke v1.<javax.lang.model.util.Elements: java.util.List getAllAnnotationMirrors(javax.lang.model.element.Element)>(v3);
v34 = interfaceinvoke v33.<java.util.List: java.util.stream.Stream stream()>();
v35 = staticinvoke <io.vertx.codegen.ModuleModel$lambda_new_0__2437: java.util.function.Predicate bootstrap$()>();
v36 = interfaceinvoke v34.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v35);
v37 = staticinvoke <io.vertx.codegen.ModuleModel$lambda_new_4__2438: java.util.function.Function bootstrap$()>();
v38 = interfaceinvoke v36.<java.util.stream.Stream: java.util.stream.Stream flatMap(java.util.function.Function)>(v37);
v39 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v40 = interfaceinvoke v38.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v39);
v41 = staticinvoke <io.vertx.codegen.ModuleModel$lambda_new_5__2439: java.util.function.Consumer bootstrap$(io.vertx.codegen.ModuleModel,javax.lang.model.util.Elements,javax.lang.model.util.Types)>(v0, v1, v2);
interfaceinvoke v40.<java.util.List: void forEach(java.util.function.Consumer)>(v41);
v0.<io.vertx.codegen.ModuleModel: javax.lang.model.element.PackageElement element> = v3;
v0.<io.vertx.codegen.ModuleModel: io.vertx.codegen.ModuleInfo info> = v23;
v0.<io.vertx.codegen.ModuleModel: java.util.List annotationValueInfos> = v32;
return;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
catch java.lang.Exception from label6 to label7 with label8;
}
private void isLegalJsonMapper(javax.lang.model.util.Elements, javax.lang.model.util.Types, javax.lang.model.type.DeclaredType)
{
io.vertx.codegen.ModuleModel v0;
javax.lang.model.element.TypeElement v12;
javax.lang.model.util.Elements v1;
io.vertx.codegen.GenException v17, v9;
javax.lang.model.type.DeclaredType v3;
java.lang.String v10, v11, v19, v20;
boolean v16, v8;
java.util.function.Predicate v7;
javax.lang.model.element.Element v18, v4;
javax.lang.model.util.Types v2;
java.util.List v13, v5;
javax.lang.model.type.TypeMirror v15;
java.util.stream.Stream v6;
java.lang.Object v14;
v0 := @this: io.vertx.codegen.ModuleModel;
v1 := @parameter0: javax.lang.model.util.Elements;
v2 := @parameter1: javax.lang.model.util.Types;
v3 := @parameter2: javax.lang.model.type.DeclaredType;
v4 = interfaceinvoke v3.<javax.lang.model.type.DeclaredType: javax.lang.model.element.Element asElement()>();
v5 = interfaceinvoke v1.<javax.lang.model.util.Elements: java.util.List getAllMembers(javax.lang.model.element.TypeElement)>(v4);
v6 = interfaceinvoke v5.<java.util.List: java.util.stream.Stream stream()>();
v7 = staticinvoke <io.vertx.codegen.ModuleModel$lambda_isLegalJsonMapper_6__2440: java.util.function.Predicate bootstrap$(javax.lang.model.util.Types,javax.lang.model.type.DeclaredType)>(v2, v3);
v8 = interfaceinvoke v6.<java.util.stream.Stream: boolean noneMatch(java.util.function.Predicate)>(v7);
if v8 == 0 goto label1;
v9 = new io.vertx.codegen.GenException;
v10 = virtualinvoke v3.<java.lang.Object: java.lang.String toString()>();
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The json mapper \u0001 must have a public static final INSTANCE field of the mapper type");
specialinvoke v9.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v4, v11);
throw v9;
label1:
v12 = interfaceinvoke v1.<javax.lang.model.util.Elements: javax.lang.model.element.TypeElement getTypeElement(java.lang.CharSequence)>("io.vertx.core.spi.json.JsonMapper");
v13 = interfaceinvoke v12.<javax.lang.model.element.TypeElement: java.util.List getTypeParameters()>();
v14 = interfaceinvoke v13.<java.util.List: java.lang.Object get(int)>(1);
v15 = staticinvoke <io.vertx.codegen.Helper: javax.lang.model.type.TypeMirror resolveTypeParameter(javax.lang.model.util.Types,javax.lang.model.type.DeclaredType,javax.lang.model.element.TypeParameterElement)>(v2, v3, v14);
if v15 == null goto label2;
v16 = staticinvoke <io.vertx.codegen.ModuleModel: boolean isLegalJsonType(javax.lang.model.type.TypeMirror)>(v15);
if v16 != 0 goto label2;
v17 = new io.vertx.codegen.GenException;
v18 = interfaceinvoke v3.<javax.lang.model.type.DeclaredType: javax.lang.model.element.Element asElement()>();
v19 = virtualinvoke v3.<java.lang.Object: java.lang.String toString()>();
v20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v19) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The specified json type in mapper \u0001 is not a valid json type. Allowed types are java.lang.Boolean, java.lang.Number, java.lang.String and BOXED_PRIMITIVE");
specialinvoke v17.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v18, v20);
throw v17;
label2:
return;
}
private static boolean isLegalJsonType(javax.lang.model.type.TypeMirror)
{
javax.lang.model.type.TypeMirror v0;
java.lang.'annotation'.Annotation v2;
java.lang.String v1, v6, v8;
io.vertx.codegen.type.ClassKind v10, v4;
boolean v11, v3, v5, v7, v9;
v0 := @parameter0: javax.lang.model.type.TypeMirror;
v1 = interfaceinvoke v0.<javax.lang.model.type.TypeMirror: java.lang.String toString()>();
v2 = interfaceinvoke v0.<javax.lang.model.type.TypeMirror: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/codegen/annotations/VertxGen;");
if v2 == null goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
v4 = staticinvoke <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind getKind(java.lang.String,boolean)>(v1, v3);
v5 = v4.<io.vertx.codegen.type.ClassKind: boolean json>;
if v5 != 0 goto label3;
v6 = interfaceinvoke v0.<javax.lang.model.type.TypeMirror: java.lang.String toString()>();
v7 = virtualinvoke v6.<java.lang.String: boolean equals(java.lang.Object)>("java.lang.Boolean");
if v7 != 0 goto label3;
v8 = interfaceinvoke v0.<javax.lang.model.type.TypeMirror: java.lang.String toString()>();
v9 = virtualinvoke v8.<java.lang.String: boolean equals(java.lang.Object)>("java.lang.Number");
if v9 != 0 goto label3;
v10 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind STRING>;
if v4 != v10 goto label4;
label3:
v11 = 1;
goto label5;
label4:
v11 = 0;
label5:
return v11;
}
public java.lang.String getName()
{
io.vertx.codegen.ModuleInfo v1;
java.lang.String v2;
io.vertx.codegen.ModuleModel v0;
v0 := @this: io.vertx.codegen.ModuleModel;
v1 = v0.<io.vertx.codegen.ModuleModel: io.vertx.codegen.ModuleInfo info>;
v2 = virtualinvoke v1.<io.vertx.codegen.ModuleInfo: java.lang.String getName()>();
return v2;
}
public java.lang.String translateFqn(java.lang.String)
{
io.vertx.codegen.ModuleModel v0;
io.vertx.codegen.ModuleInfo v2;
java.lang.String v1, v3;
v0 := @this: io.vertx.codegen.ModuleModel;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.codegen.ModuleModel: io.vertx.codegen.ModuleInfo info>;
v3 = virtualinvoke v2.<io.vertx.codegen.ModuleInfo: java.lang.String translatePackageName(java.lang.String)>(v1);
return v3;
}
public boolean process()
{
io.vertx.codegen.ModuleModel v0;
v0 := @this: io.vertx.codegen.ModuleModel;
return 0;
}
public java.lang.String getKind()
{
io.vertx.codegen.ModuleModel v0;
v0 := @this: io.vertx.codegen.ModuleModel;
return "module";
}
public javax.lang.model.element.Element getElement()
{
javax.lang.model.element.PackageElement v1;
io.vertx.codegen.ModuleModel v0;
v0 := @this: io.vertx.codegen.ModuleModel;
v1 = v0.<io.vertx.codegen.ModuleModel: javax.lang.model.element.PackageElement element>;
return v1;
}
public java.lang.String getFqn()
{
io.vertx.codegen.ModuleInfo v1;
java.lang.String v2;
io.vertx.codegen.ModuleModel v0;
v0 := @this: io.vertx.codegen.ModuleModel;
v1 = v0.<io.vertx.codegen.ModuleModel: io.vertx.codegen.ModuleInfo info>;
v2 = virtualinvoke v1.<io.vertx.codegen.ModuleInfo: java.lang.String getPackageName()>();
return v2;
}
public java.util.List getAnnotations()
{
java.util.List v1;
io.vertx.codegen.ModuleModel v0;
v0 := @this: io.vertx.codegen.ModuleModel;
v1 = v0.<io.vertx.codegen.ModuleModel: java.util.List annotationValueInfos>;
return v1;
}
public java.util.Map getVars()
{
io.vertx.codegen.ModuleModel v0;
java.util.List v7;
java.util.Map v1;
io.vertx.codegen.ModuleInfo v2, v4, v6;
java.lang.String v3, v5;
v0 := @this: io.vertx.codegen.ModuleModel;
v1 = specialinvoke v0.<io.vertx.codegen.Model: java.util.Map getVars()>();
v2 = v0.<io.vertx.codegen.ModuleModel: io.vertx.codegen.ModuleInfo info>;
v3 = virtualinvoke v2.<io.vertx.codegen.ModuleInfo: java.lang.String getPackageName()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("fqn", v3);
v4 = v0.<io.vertx.codegen.ModuleModel: io.vertx.codegen.ModuleInfo info>;
v5 = virtualinvoke v4.<io.vertx.codegen.ModuleInfo: java.lang.String getName()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("name", v5);
v6 = virtualinvoke v0.<io.vertx.codegen.ModuleModel: io.vertx.codegen.ModuleInfo getModule()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("module", v6);
v7 = virtualinvoke v0.<io.vertx.codegen.ModuleModel: java.util.List getAnnotations()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("annotations", v7);
return v1;
}
public io.vertx.codegen.ModuleInfo getModule()
{
io.vertx.codegen.ModuleInfo v1;
io.vertx.codegen.ModuleModel v0;
v0 := @this: io.vertx.codegen.ModuleModel;
v1 = v0.<io.vertx.codegen.ModuleModel: io.vertx.codegen.ModuleInfo info>;
return v1;
}
}