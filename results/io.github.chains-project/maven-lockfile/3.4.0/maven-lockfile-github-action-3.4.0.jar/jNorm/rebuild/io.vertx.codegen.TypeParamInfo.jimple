public abstract class io.vertx.codegen.TypeParamInfo extends java.lang.Object
{
protected final int index;
protected final java.lang.String name;
public static io.vertx.codegen.TypeParamInfo create(java.lang.reflect.TypeVariable)
{
java.lang.AssertionError v18;
int v3, v4;
java.lang.String v10, v14, v15, v16, v9;
boolean v11, v6, v7;
java.lang.reflect.GenericDeclaration v1;
io.vertx.codegen.TypeParamInfo$Method v12;
java.lang.UnsupportedOperationException v17;
java.lang.reflect.TypeVariable v0, v5;
io.vertx.codegen.TypeParamInfo$Class v8;
java.lang.reflect.TypeVariable[] v2;
java.lang.Class v13;
v0 := @parameter0: java.lang.reflect.TypeVariable;
v1 = interfaceinvoke v0.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();
v2 = interfaceinvoke v1.<java.lang.reflect.GenericDeclaration: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v3 = 0;
label1:
v4 = lengthof v2;
if v3 >= v4 goto label5;
v5 = v2[v3];
v6 = virtualinvoke v5.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v6 == 0 goto label4;
v7 = v1 instanceof java.lang.Class;
if v7 == 0 goto label2;
v8 = new io.vertx.codegen.TypeParamInfo$Class;
v9 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v10 = interfaceinvoke v0.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
specialinvoke v8.<io.vertx.codegen.TypeParamInfo$Class: void <init>(java.lang.String,int,java.lang.String)>(v9, v3, v10);
return v8;
label2:
v11 = v1 instanceof java.lang.reflect.Method;
if v11 == 0 goto label3;
v12 = new io.vertx.codegen.TypeParamInfo$Method;
v13 = virtualinvoke v1.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
v14 = virtualinvoke v13.<java.lang.Class: java.lang.String getName()>();
v15 = virtualinvoke v1.<java.lang.reflect.Method: java.lang.String getName()>();
v16 = interfaceinvoke v0.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
specialinvoke v12.<io.vertx.codegen.TypeParamInfo$Method: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>(v14, v15, v3, v16);
return v12;
label3:
v17 = new java.lang.UnsupportedOperationException;
specialinvoke v17.<java.lang.UnsupportedOperationException: void <init>()>();
throw v17;
label4:
v3 = v3 + 1;
goto label1;
label5:
v18 = new java.lang.AssertionError;
specialinvoke v18.<java.lang.AssertionError: void <init>()>();
throw v18;
}
public static io.vertx.codegen.TypeParamInfo create(javax.lang.model.element.TypeParameterElement)
{
int[] v4;
int v3, v6, v7;
java.lang.String v10, v12, v16, v18, v20, v23;
javax.lang.model.element.Parameterizable v24;
javax.lang.model.element.Name v11, v15, v17, v19, v9;
io.vertx.codegen.TypeParamInfo$Method v14;
java.lang.UnsupportedOperationException v21;
javax.lang.model.element.ElementKind v22, v5;
javax.lang.model.element.Element v1, v13;
javax.lang.model.element.TypeParameterElement v0;
io.vertx.codegen.TypeParamInfo$Class v8;
java.util.List v2;
v0 := @parameter0: javax.lang.model.element.TypeParameterElement;
v1 = interfaceinvoke v0.<javax.lang.model.element.TypeParameterElement: javax.lang.model.element.Element getGenericElement()>();
v2 = interfaceinvoke v1.<javax.lang.model.element.Parameterizable: java.util.List getTypeParameters()>();
v3 = interfaceinvoke v2.<java.util.List: int indexOf(java.lang.Object)>(v0);
v4 = <io.vertx.codegen.TypeParamInfo$1: int[] $SwitchMap$javax$lang$model$element$ElementKind>;
v5 = interfaceinvoke v1.<javax.lang.model.element.Parameterizable: javax.lang.model.element.ElementKind getKind()>();
v6 = virtualinvoke v5.<javax.lang.model.element.ElementKind: int ordinal()>();
v7 = v4[v6];
tableswitch(v7)
{
case 1: goto label1;
case 2: goto label1;
case 3: goto label2;
default: goto label3;
};
label1:
v8 = new io.vertx.codegen.TypeParamInfo$Class;
v9 = interfaceinvoke v24.<javax.lang.model.element.TypeElement: javax.lang.model.element.Name getQualifiedName()>();
v10 = virtualinvoke v9.<java.lang.Object: java.lang.String toString()>();
v11 = interfaceinvoke v0.<javax.lang.model.element.TypeParameterElement: javax.lang.model.element.Name getSimpleName()>();
v12 = virtualinvoke v11.<java.lang.Object: java.lang.String toString()>();
specialinvoke v8.<io.vertx.codegen.TypeParamInfo$Class: void <init>(java.lang.String,int,java.lang.String)>(v10, v3, v12);
return v8;
label2:
v13 = interfaceinvoke v24.<javax.lang.model.element.ExecutableElement: javax.lang.model.element.Element getEnclosingElement()>();
v14 = new io.vertx.codegen.TypeParamInfo$Method;
v15 = interfaceinvoke v13.<javax.lang.model.element.TypeElement: javax.lang.model.element.Name getQualifiedName()>();
v16 = virtualinvoke v15.<java.lang.Object: java.lang.String toString()>();
v17 = interfaceinvoke v24.<javax.lang.model.element.ExecutableElement: javax.lang.model.element.Name getSimpleName()>();
v18 = virtualinvoke v17.<java.lang.Object: java.lang.String toString()>();
v19 = interfaceinvoke v0.<javax.lang.model.element.TypeParameterElement: javax.lang.model.element.Name getSimpleName()>();
v20 = virtualinvoke v19.<java.lang.Object: java.lang.String toString()>();
specialinvoke v14.<io.vertx.codegen.TypeParamInfo$Method: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>(v16, v18, v3, v20);
return v14;
label3:
v21 = new java.lang.UnsupportedOperationException;
v22 = interfaceinvoke v1.<javax.lang.model.element.Parameterizable: javax.lang.model.element.ElementKind getKind()>();
v23 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (javax.lang.model.element.ElementKind)>(v22) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001");
specialinvoke v21.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v23);
throw v21;
}
public void <init>(int, java.lang.String)
{
int v1;
io.vertx.codegen.TypeParamInfo v0;
java.lang.String v2;
v0 := @this: io.vertx.codegen.TypeParamInfo;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.codegen.TypeParamInfo: int index> = v1;
v0.<io.vertx.codegen.TypeParamInfo: java.lang.String name> = v2;
return;
}
public abstract boolean isMethod();
public boolean isClass()
{
io.vertx.codegen.TypeParamInfo v0;
boolean v1, v2;
v0 := @this: io.vertx.codegen.TypeParamInfo;
v1 = virtualinvoke v0.<io.vertx.codegen.TypeParamInfo: boolean isMethod()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public int getIndex()
{
int v1;
io.vertx.codegen.TypeParamInfo v0;
v0 := @this: io.vertx.codegen.TypeParamInfo;
v1 = v0.<io.vertx.codegen.TypeParamInfo: int index>;
return v1;
}
public java.lang.String getName()
{
io.vertx.codegen.TypeParamInfo v0;
java.lang.String v1;
v0 := @this: io.vertx.codegen.TypeParamInfo;
v1 = v0.<io.vertx.codegen.TypeParamInfo: java.lang.String name>;
return v1;
}
}