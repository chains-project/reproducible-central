public abstract class io.vertx.codegen.format.Case extends java.lang.Object
{
public void <init>()
{
io.vertx.codegen.format.Case v0;
v0 := @this: io.vertx.codegen.format.Case;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.lang.String name()
{
java.lang.UnsupportedOperationException v1;
io.vertx.codegen.format.Case v0;
v0 := @this: io.vertx.codegen.format.Case;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public java.lang.String format(java.lang.Iterable)
{
java.lang.UnsupportedOperationException v2;
java.lang.Iterable v1;
io.vertx.codegen.format.Case v0;
v0 := @this: io.vertx.codegen.format.Case;
v1 := @parameter0: java.lang.Iterable;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public java.util.List parse(java.lang.String)
{
java.lang.UnsupportedOperationException v2;
java.lang.String v1;
io.vertx.codegen.format.Case v0;
v0 := @this: io.vertx.codegen.format.Case;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public java.lang.String 'to'(io.vertx.codegen.format.Case, java.lang.String)
{
java.util.List v3;
io.vertx.codegen.format.Case v0, v1;
java.lang.String v2, v4;
v0 := @this: io.vertx.codegen.format.Case;
v1 := @parameter0: io.vertx.codegen.format.Case;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.codegen.format.Case: java.util.List parse(java.lang.String)>(v2);
v4 = virtualinvoke v1.<io.vertx.codegen.format.Case: java.lang.String format(java.lang.Iterable)>(v3);
return v4;
}
protected static java.util.List split(java.lang.String, java.lang.String)
{
java.lang.String[] v2;
java.util.List v6, v7;
int v3;
java.lang.String v0, v1, v4;
boolean v5;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = virtualinvoke v0.<java.lang.String: java.lang.String[] split(java.lang.String)>(v1);
v3 = lengthof v2;
if v3 != 1 goto label1;
v4 = v2[0];
v5 = virtualinvoke v4.<java.lang.String: boolean isEmpty()>();
if v5 == 0 goto label1;
v6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v6;
label1:
v7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
return v7;
}
public static java.util.Map vars()
{
java.util.Iterator v8;
io.vertx.codegen.format.Case[] v1;
java.util.HashMap v0;
java.util.List v7;
io.vertx.codegen.format.Case v2, v3, v4, v5, v6;
java.lang.Object v10;
java.lang.String v11, v12;
boolean v9;
v0 = new java.util.HashMap;
specialinvoke v0.<java.util.HashMap: void <init>()>();
v1 = newarray (io.vertx.codegen.format.Case)[5];
v2 = <io.vertx.codegen.format.CamelCase: io.vertx.codegen.format.Case INSTANCE>;
v1[0] = v2;
v3 = <io.vertx.codegen.format.QualifiedCase: io.vertx.codegen.format.Case INSTANCE>;
v1[1] = v3;
v4 = <io.vertx.codegen.format.SnakeCase: io.vertx.codegen.format.Case INSTANCE>;
v1[2] = v4;
v5 = <io.vertx.codegen.format.KebabCase: io.vertx.codegen.format.Case INSTANCE>;
v1[3] = v5;
v6 = <io.vertx.codegen.format.LowerCamelCase: io.vertx.codegen.format.Case INSTANCE>;
v1[4] = v6;
v7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v8 = interfaceinvoke v7.<java.util.List: java.util.Iterator iterator()>();
label1:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label2;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = virtualinvoke v10.<io.vertx.codegen.format.Case: java.lang.String name()>();
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("CASE_\u0001");
virtualinvoke v0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v12, v10);
goto label1;
label2:
return v0;
}
}