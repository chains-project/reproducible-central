public class io.vertx.codegen.type.TypeReflectionFactory extends java.lang.Object
{
public void <init>()
{
io.vertx.codegen.type.TypeReflectionFactory v0;
v0 := @this: io.vertx.codegen.type.TypeReflectionFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static io.vertx.codegen.type.TypeInfo create(java.lang.reflect.Type)
{
io.vertx.codegen.type.ApiTypeInfo v57;
io.vertx.codegen.type.DataObjectInfo v62, v63;
java.lang.Thread v11, v13, v26, v28;
java.util.stream.Collector v37, v71;
java.util.stream.Stream v34, v36, v68, v70;
io.vertx.codegen.ModuleInfo v10, v16;
java.lang.ClassLoader v12, v14;
java.lang.Throwable v27;
java.lang.Object[] v33;
java.util.ArrayList v42;
io.vertx.codegen.type.ParameterizedTypeInfo v74;
java.lang.String v17, v18, v19, v21, v24, v25, v4, v49, v51, v7, v79, v81;
io.vertx.codegen.type.TypeVariableInfo v78;
io.vertx.codegen.type.ClassTypeInfo v64;
java.lang.reflect.TypeVariable v47, v55;
io.vertx.codegen.type.MapperInfo v60, v61;
io.vertx.codegen.type.ClassKind v41, v52;
boolean v20, v29, v3, v32, v40, v5, v65, v76;
io.vertx.codegen.type.EnumTypeInfo v30;
io.vertx.codegen.type.TypeInfo v2, v58, v75;
io.vertx.codegen.TypeParamInfo$Class v48;
java.util.List v67;
java.lang.reflect.Type v0, v56, v73;
java.lang.'annotation'.Annotation v15, v31, v39, v59;
java.lang.reflect.Type[] v66;
java.util.HashMap v6;
java.util.function.Function v35, v69;
io.vertx.codegen.TypeParamInfo v77;
int v22, v23, v43, v45, v46, v50;
java.lang.Package v9;
java.lang.IllegalArgumentException v80;
java.lang.reflect.TypeVariable[] v44, v54;
java.lang.Class v1, v53;
java.lang.Object v38, v72, v8;
v0 := @parameter0: java.lang.reflect.Type;
v1 = <java.lang.Void: java.lang.Class TYPE>;
if v0 != v1 goto label01;
v2 = <io.vertx.codegen.type.VoidTypeInfo: io.vertx.codegen.type.TypeInfo INSTANCE>;
return v2;
label01:
v3 = v0 instanceof java.lang.Class;
if v3 == 0 goto label20;
v4 = interfaceinvoke v0.<java.lang.reflect.Type: java.lang.String getTypeName()>();
v5 = virtualinvoke v0.<java.lang.Class: boolean isPrimitive()>();
if v5 == 0 goto label02;
v6 = <io.vertx.codegen.type.PrimitiveTypeInfo: java.util.HashMap PRIMITIVES>;
v7 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v8 = virtualinvoke v6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v7);
return v8;
label02:
v9 = virtualinvoke v0.<java.lang.Class: java.lang.Package getPackage()>();
v10 = null;
v11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v12 = virtualinvoke v11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
v13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v14 = virtualinvoke v0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
virtualinvoke v13.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(v14);
label03:
if v9 == null goto label05;
v15 = virtualinvoke v9.<java.lang.Package: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/codegen/annotations/ModuleGen;");
if v15 == null goto label04;
v16 = new io.vertx.codegen.ModuleInfo;
v17 = virtualinvoke v9.<java.lang.Package: java.lang.String getName()>();
v18 = interfaceinvoke v15.<io.vertx.codegen.annotations.ModuleGen: java.lang.String name()>();
v19 = interfaceinvoke v15.<io.vertx.codegen.annotations.ModuleGen: java.lang.String groupPackage()>();
v20 = interfaceinvoke v15.<io.vertx.codegen.annotations.ModuleGen: boolean useFutures()>();
specialinvoke v16.<io.vertx.codegen.ModuleInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>(v17, v18, v19, v20);
v10 = v16;
goto label05;
label04:
v21 = virtualinvoke v9.<java.lang.Package: java.lang.String getName()>();
v22 = virtualinvoke v21.<java.lang.String: int lastIndexOf(int)>(46);
v23 = (int) -1;
if v22 == v23 goto label05;
v24 = virtualinvoke v9.<java.lang.Package: java.lang.String getName()>();
v25 = virtualinvoke v24.<java.lang.String: java.lang.String substring(int,int)>(0, v22);
v9 = staticinvoke <java.lang.Package: java.lang.Package getPackage(java.lang.String)>(v25);
goto label03;
label05:
v26 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v26.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(v12);
goto label07;
label06:
v27 := @caughtexception;
v28 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v28.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(v12);
throw v27;
label07:
v29 = virtualinvoke v0.<java.lang.Class: boolean isEnum()>();
if v29 == 0 goto label10;
v30 = new io.vertx.codegen.type.EnumTypeInfo;
v31 = virtualinvoke v0.<java.lang.Class: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>(class "Lio/vertx/codegen/annotations/VertxGen;");
if v31 == null goto label08;
v32 = 1;
goto label09;
label08:
v32 = 0;
label09:
v33 = virtualinvoke v0.<java.lang.Class: java.lang.Object[] getEnumConstants()>();
v34 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>(v33);
v35 = staticinvoke <io.vertx.codegen.type.TypeReflectionFactory$toString__2540: java.util.function.Function bootstrap$()>();
v36 = interfaceinvoke v34.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v35);
v37 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v38 = interfaceinvoke v36.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v37);
specialinvoke v30.<io.vertx.codegen.type.EnumTypeInfo: void <init>(java.lang.String,boolean,java.util.List,io.vertx.codegen.ModuleInfo,boolean,io.vertx.codegen.type.DataObjectInfo)>(v4, v32, v38, v10, 0, null);
return v30;
label10:
v39 = virtualinvoke v0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/codegen/annotations/VertxGen;");
if v39 == null goto label11;
v40 = 1;
goto label12;
label11:
v40 = 0;
label12:
v41 = staticinvoke <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind getKind(java.lang.String,boolean)>(v4, v40);
v42 = new java.util.ArrayList;
specialinvoke v42.<java.util.ArrayList: void <init>()>();
v43 = 0;
v44 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v45 = lengthof v44;
v46 = 0;
label13:
if v46 >= v45 goto label14;
v47 = v44[v46];
v48 = new io.vertx.codegen.TypeParamInfo$Class;
v49 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v50 = v43;
v43 = v43 + 1;
v51 = interfaceinvoke v47.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
specialinvoke v48.<io.vertx.codegen.TypeParamInfo$Class: void <init>(java.lang.String,int,java.lang.String)>(v49, v50, v51);
interfaceinvoke v42.<java.util.List: boolean add(java.lang.Object)>(v48);
v46 = v46 + 1;
goto label13;
label14:
v52 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind API>;
if v41 != v52 goto label17;
v53 = class "Lio/vertx/core/Handler;";
v54 = virtualinvoke v53.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v55 = v54[0];
v56 = staticinvoke <io.vertx.codegen.Helper: java.lang.reflect.Type resolveTypeParameter(java.lang.reflect.Type,java.lang.reflect.TypeVariable)>(v0, v55);
v57 = new io.vertx.codegen.type.ApiTypeInfo;
if v56 == null goto label15;
v58 = staticinvoke <io.vertx.codegen.type.TypeReflectionFactory: io.vertx.codegen.type.TypeInfo create(java.lang.reflect.Type)>(v56);
goto label16;
label15:
v58 = null;
label16:
specialinvoke v57.<io.vertx.codegen.type.ApiTypeInfo: void <init>(java.lang.String,boolean,java.util.List,io.vertx.codegen.type.TypeInfo,io.vertx.codegen.ModuleInfo,boolean,boolean,io.vertx.codegen.type.DataObjectInfo)>(v4, 1, v42, v58, v10, 0, 0, null);
return v57;
label17:
v59 = virtualinvoke v0.<java.lang.Class: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>(class "Lio/vertx/codegen/annotations/DataObject;");
if v59 == null goto label18;
v60 = staticinvoke <io.vertx.codegen.type.TypeReflectionFactory: io.vertx.codegen.type.MapperInfo getDataObjectSerializer(java.lang.Class)>(v0);
v61 = staticinvoke <io.vertx.codegen.type.TypeReflectionFactory: io.vertx.codegen.type.MapperInfo getDataObjectDeserializer(java.lang.Class)>(v0);
v62 = new io.vertx.codegen.type.DataObjectInfo;
specialinvoke v62.<io.vertx.codegen.type.DataObjectInfo: void <init>(boolean,io.vertx.codegen.type.MapperInfo,io.vertx.codegen.type.MapperInfo)>(1, v60, v61);
v63 = v62;
goto label19;
label18:
v63 = null;
label19:
v64 = new io.vertx.codegen.type.ClassTypeInfo;
specialinvoke v64.<io.vertx.codegen.type.ClassTypeInfo: void <init>(io.vertx.codegen.type.ClassKind,java.lang.String,io.vertx.codegen.ModuleInfo,boolean,java.util.List,io.vertx.codegen.type.DataObjectInfo)>(v41, v4, v10, 0, v42, v63);
return v64;
label20:
v65 = v0 instanceof java.lang.reflect.ParameterizedType;
if v65 == 0 goto label21;
v66 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v67 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v66);
v68 = interfaceinvoke v67.<java.util.List: java.util.stream.Stream stream()>();
v69 = staticinvoke <io.vertx.codegen.type.TypeReflectionFactory$create__2539: java.util.function.Function bootstrap$()>();
v70 = interfaceinvoke v68.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v69);
v71 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v72 = interfaceinvoke v70.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v71);
v73 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v74 = new io.vertx.codegen.type.ParameterizedTypeInfo;
v75 = staticinvoke <io.vertx.codegen.type.TypeReflectionFactory: io.vertx.codegen.type.TypeInfo create(java.lang.reflect.Type)>(v73);
specialinvoke v74.<io.vertx.codegen.type.ParameterizedTypeInfo: void <init>(io.vertx.codegen.type.ClassTypeInfo,boolean,java.util.List)>(v75, 0, v72);
return v74;
label21:
v76 = v0 instanceof java.lang.reflect.TypeVariable;
if v76 == 0 goto label22;
v77 = staticinvoke <io.vertx.codegen.TypeParamInfo: io.vertx.codegen.TypeParamInfo create(java.lang.reflect.TypeVariable)>(v0);
v78 = new io.vertx.codegen.type.TypeVariableInfo;
v79 = interfaceinvoke v0.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
specialinvoke v78.<io.vertx.codegen.type.TypeVariableInfo: void <init>(io.vertx.codegen.TypeParamInfo,boolean,java.lang.String)>(v77, 0, v79);
return v78;
label22:
v80 = new java.lang.IllegalArgumentException;
v81 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unsupported type \u0001");
specialinvoke v80.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v81);
throw v80;
catch java.lang.Throwable from label03 to label05 with label06;
}
private static io.vertx.codegen.type.MapperInfo getDataObjectSerializer(java.lang.Class)
{
java.lang.NoSuchMethodException v10;
io.vertx.codegen.MapperKind v9;
java.lang.Class[] v1;
io.vertx.codegen.type.MapperInfo v7;
int v3;
java.lang.Class v0, v5;
java.lang.String v8;
java.lang.reflect.Method v2;
boolean v4, v6;
v0 := @parameter0: java.lang.Class;
label1:
v1 = newarray (java.lang.Class)[0];
v2 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("toJson", v1);
v3 = virtualinvoke v2.<java.lang.reflect.Method: int getModifiers()>();
v4 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(v3);
if v4 == 0 goto label4;
v5 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
v6 = virtualinvoke v5.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lio/vertx/core/json/JsonObject;");
if v6 == 0 goto label4;
v7 = new io.vertx.codegen.type.MapperInfo;
specialinvoke v7.<io.vertx.codegen.type.MapperInfo: void <init>()>();
v8 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
virtualinvoke v7.<io.vertx.codegen.type.MapperInfo: void setQualifiedName(java.lang.String)>(v8);
v9 = <io.vertx.codegen.MapperKind: io.vertx.codegen.MapperKind SELF>;
virtualinvoke v7.<io.vertx.codegen.type.MapperInfo: void setKind(io.vertx.codegen.MapperKind)>(v9);
label2:
return v7;
label3:
v10 := @caughtexception;
label4:
return null;
catch java.lang.NoSuchMethodException from label1 to label2 with label3;
}
private static io.vertx.codegen.type.MapperInfo getDataObjectDeserializer(java.lang.Class)
{
java.lang.NoSuchMethodException v11;
io.vertx.codegen.MapperKind v10;
java.lang.Class[] v4;
io.vertx.codegen.type.MapperInfo v8;
java.lang.reflect.Constructor v5;
int v1, v6;
java.lang.Class v0;
java.lang.String v9;
boolean v2, v3, v7;
v0 := @parameter0: java.lang.Class;
label1:
v1 = virtualinvoke v0.<java.lang.Class: int getModifiers()>();
v2 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>(v1);
if v2 != 0 goto label4;
v3 = virtualinvoke v0.<java.lang.Class: boolean isInterface()>();
if v3 != 0 goto label4;
v4 = newarray (java.lang.Class)[1];
v4[0] = class "Lio/vertx/core/json/JsonObject;";
v5 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(v4);
v6 = virtualinvoke v5.<java.lang.reflect.Constructor: int getModifiers()>();
v7 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(v6);
if v7 == 0 goto label4;
v8 = new io.vertx.codegen.type.MapperInfo;
specialinvoke v8.<io.vertx.codegen.type.MapperInfo: void <init>()>();
v9 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
virtualinvoke v8.<io.vertx.codegen.type.MapperInfo: void setQualifiedName(java.lang.String)>(v9);
v10 = <io.vertx.codegen.MapperKind: io.vertx.codegen.MapperKind SELF>;
virtualinvoke v8.<io.vertx.codegen.type.MapperInfo: void setKind(io.vertx.codegen.MapperKind)>(v10);
label2:
return v8;
label3:
v11 := @caughtexception;
label4:
return null;
catch java.lang.NoSuchMethodException from label1 to label2 with label3;
}
}