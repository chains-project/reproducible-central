public interface  io.vertx.core.AsyncResult extends java.lang.Object
{
public abstract java.lang.Object result();
public abstract java.lang.Throwable cause();
public abstract boolean succeeded();
public abstract boolean failed();
public io.vertx.core.AsyncResult map(java.util.function.Function)
{
io.vertx.core.AsyncResult$1 v3;
io.vertx.core.AsyncResult v0;
java.util.function.Function v1;
java.lang.NullPointerException v2;
v0 := @this: io.vertx.core.AsyncResult;
v1 := @parameter0: java.util.function.Function;
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>()>();
throw v2;
label1:
v3 = new io.vertx.core.AsyncResult$1;
specialinvoke v3.<io.vertx.core.AsyncResult$1: void <init>(io.vertx.core.AsyncResult,java.util.function.Function)>(v0, v1);
return v3;
}
public io.vertx.core.AsyncResult map(java.lang.Object)
{
java.lang.Object v1;
io.vertx.core.AsyncResult v0, v3;
java.util.function.Function v2;
v0 := @this: io.vertx.core.AsyncResult;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <io.vertx.core.AsyncResult$lambda_map_0__913: java.util.function.Function bootstrap$(java.lang.Object)>(v1);
v3 = interfaceinvoke v0.<io.vertx.core.AsyncResult: io.vertx.core.AsyncResult map(java.util.function.Function)>(v2);
return v3;
}
public io.vertx.core.AsyncResult mapEmpty()
{
io.vertx.core.AsyncResult v0, v1;
v0 := @this: io.vertx.core.AsyncResult;
v1 = interfaceinvoke v0.<io.vertx.core.AsyncResult: io.vertx.core.AsyncResult map(java.lang.Object)>(null);
return v1;
}
public io.vertx.core.AsyncResult otherwise(java.util.function.Function)
{
io.vertx.core.AsyncResult$2 v3;
io.vertx.core.AsyncResult v0;
java.util.function.Function v1;
java.lang.NullPointerException v2;
v0 := @this: io.vertx.core.AsyncResult;
v1 := @parameter0: java.util.function.Function;
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>()>();
throw v2;
label1:
v3 = new io.vertx.core.AsyncResult$2;
specialinvoke v3.<io.vertx.core.AsyncResult$2: void <init>(io.vertx.core.AsyncResult,java.util.function.Function)>(v0, v1);
return v3;
}
public io.vertx.core.AsyncResult otherwise(java.lang.Object)
{
java.lang.Object v1;
io.vertx.core.AsyncResult v0, v3;
java.util.function.Function v2;
v0 := @this: io.vertx.core.AsyncResult;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <io.vertx.core.AsyncResult$lambda_otherwise_1__914: java.util.function.Function bootstrap$(java.lang.Object)>(v1);
v3 = interfaceinvoke v0.<io.vertx.core.AsyncResult: io.vertx.core.AsyncResult otherwise(java.util.function.Function)>(v2);
return v3;
}
public io.vertx.core.AsyncResult otherwiseEmpty()
{
io.vertx.core.AsyncResult v0, v2;
java.util.function.Function v1;
v0 := @this: io.vertx.core.AsyncResult;
v1 = staticinvoke <io.vertx.core.AsyncResult$lambda_otherwiseEmpty_2__915: java.util.function.Function bootstrap$()>();
v2 = interfaceinvoke v0.<io.vertx.core.AsyncResult: io.vertx.core.AsyncResult otherwise(java.util.function.Function)>(v1);
return v2;
}
}