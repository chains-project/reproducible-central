public interface  io.vertx.core.Context extends java.lang.Object
{
public static boolean isOnWorkerThread()
{
java.lang.Thread v0;
boolean v1, v2, v3;
v0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v1 = v0 instanceof io.vertx.core.impl.VertxThread;
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<io.vertx.core.impl.VertxThread: boolean isWorker()>();
if v2 == 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public static boolean isOnEventLoopThread()
{
java.lang.Thread v0;
boolean v1, v2, v3;
v0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v1 = v0 instanceof io.vertx.core.impl.VertxThread;
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<io.vertx.core.impl.VertxThread: boolean isWorker()>();
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public static boolean isOnVertxThread()
{
boolean v1;
java.lang.Thread v0;
v0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v1 = v0 instanceof io.vertx.core.impl.VertxThread;
return v1;
}
public abstract void runOnContext(io.vertx.core.Handler);
public abstract void executeBlocking(io.vertx.core.Handler, boolean, io.vertx.core.Handler);
public void executeBlocking(io.vertx.core.Handler, io.vertx.core.Handler)
{
io.vertx.core.Handler v1, v2;
io.vertx.core.Context v0;
v0 := @this: io.vertx.core.Context;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: io.vertx.core.Handler;
interfaceinvoke v0.<io.vertx.core.Context: void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)>(v1, 1, v2);
return;
}
public abstract io.vertx.core.Future executeBlocking(io.vertx.core.Handler, boolean);
public io.vertx.core.Future executeBlocking(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.Context v0;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.Context;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.Context: io.vertx.core.Future executeBlocking(io.vertx.core.Handler,boolean)>(v1, 1);
return v2;
}
public abstract java.lang.String deploymentID();
public abstract io.vertx.core.json.JsonObject config();
public java.util.List processArgs()
{
java.util.List v1;
io.vertx.core.Context v0;
v0 := @this: io.vertx.core.Context;
v1 = staticinvoke <io.vertx.core.impl.launcher.VertxCommandLauncher: java.util.List getProcessArguments()>();
return v1;
}
public abstract boolean isEventLoopContext();
public abstract boolean isWorkerContext();
public abstract java.lang.Object get(java.lang.Object);
public abstract void put(java.lang.Object, java.lang.Object);
public abstract boolean remove(java.lang.Object);
public abstract java.lang.Object getLocal(java.lang.Object);
public abstract void putLocal(java.lang.Object, java.lang.Object);
public abstract boolean removeLocal(java.lang.Object);
public abstract io.vertx.core.Vertx owner();
public abstract int getInstanceCount();
public abstract io.vertx.core.Context exceptionHandler(io.vertx.core.Handler);
public abstract io.vertx.core.Handler exceptionHandler();
}