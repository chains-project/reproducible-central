public interface  io.vertx.core.Future extends java.lang.Object implements io.vertx.core.AsyncResult
{
public static io.vertx.core.Future future(io.vertx.core.Handler)
{
java.lang.Throwable v2;
io.vertx.core.Promise v1;
io.vertx.core.Handler v0;
io.vertx.core.Future v3;
v0 := @parameter0: io.vertx.core.Handler;
v1 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
label1:
interfaceinvoke v0.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label2:
goto label4;
label3:
v2 := @caughtexception;
interfaceinvoke v1.<io.vertx.core.Promise: boolean tryFail(java.lang.Throwable)>(v2);
label4:
v3 = interfaceinvoke v1.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static io.vertx.core.Future succeededFuture()
{
io.vertx.core.impl.future.SucceededFuture v0;
v0 = <io.vertx.core.impl.future.SucceededFuture: io.vertx.core.impl.future.SucceededFuture EMPTY>;
return v0;
}
public static io.vertx.core.Future succeededFuture(java.lang.Object)
{
java.lang.Object v0;
io.vertx.core.Future v1;
io.vertx.core.impl.future.SucceededFuture v2;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
v1 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>();
return v1;
label1:
v2 = new io.vertx.core.impl.future.SucceededFuture;
specialinvoke v2.<io.vertx.core.impl.future.SucceededFuture: void <init>(java.lang.Object)>(v0);
return v2;
}
public static io.vertx.core.Future failedFuture(java.lang.Throwable)
{
java.lang.Throwable v0;
io.vertx.core.impl.future.FailedFuture v1;
v0 := @parameter0: java.lang.Throwable;
v1 = new io.vertx.core.impl.future.FailedFuture;
specialinvoke v1.<io.vertx.core.impl.future.FailedFuture: void <init>(java.lang.Throwable)>(v0);
return v1;
}
public static io.vertx.core.Future failedFuture(java.lang.String)
{
java.lang.String v0;
io.vertx.core.impl.future.FailedFuture v1;
v0 := @parameter0: java.lang.String;
v1 = new io.vertx.core.impl.future.FailedFuture;
specialinvoke v1.<io.vertx.core.impl.future.FailedFuture: void <init>(java.lang.String)>(v0);
return v1;
}
public abstract boolean isComplete();
public abstract io.vertx.core.Future onComplete(io.vertx.core.Handler);
public io.vertx.core.Future onSuccess(io.vertx.core.Handler)
{
io.vertx.core.Handler v1, v2;
io.vertx.core.Future v0, v3;
v0 := @this: io.vertx.core.Future;
v1 := @parameter0: io.vertx.core.Handler;
v2 = staticinvoke <io.vertx.core.Future$lambda_onSuccess_0__899: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)>(v1);
v3 = interfaceinvoke v0.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.core.Future onFailure(io.vertx.core.Handler)
{
io.vertx.core.Handler v1, v2;
io.vertx.core.Future v0, v3;
v0 := @this: io.vertx.core.Future;
v1 := @parameter0: io.vertx.core.Handler;
v2 = staticinvoke <io.vertx.core.Future$lambda_onFailure_1__900: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler)>(v1);
v3 = interfaceinvoke v0.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return v3;
}
public abstract java.lang.Object result();
public abstract java.lang.Throwable cause();
public abstract boolean succeeded();
public abstract boolean failed();
public io.vertx.core.Future flatMap(java.util.function.Function)
{
io.vertx.core.Future v0, v2;
java.util.function.Function v1;
v0 := @this: io.vertx.core.Future;
v1 := @parameter0: java.util.function.Function;
v2 = interfaceinvoke v0.<io.vertx.core.Future: io.vertx.core.Future compose(java.util.function.Function)>(v1);
return v2;
}
public io.vertx.core.Future compose(java.util.function.Function)
{
io.vertx.core.Future v0, v3;
java.util.function.Function v1, v2;
v0 := @this: io.vertx.core.Future;
v1 := @parameter0: java.util.function.Function;
v2 = staticinvoke <io.vertx.core.Future$failedFuture__901: java.util.function.Function bootstrap$()>();
v3 = interfaceinvoke v0.<io.vertx.core.Future: io.vertx.core.Future compose(java.util.function.Function,java.util.function.Function)>(v1, v2);
return v3;
}
public io.vertx.core.Future recover(java.util.function.Function)
{
io.vertx.core.Future v0, v3;
java.util.function.Function v1, v2;
v0 := @this: io.vertx.core.Future;
v1 := @parameter0: java.util.function.Function;
v2 = staticinvoke <io.vertx.core.Future$succeededFuture__902: java.util.function.Function bootstrap$()>();
v3 = interfaceinvoke v0.<io.vertx.core.Future: io.vertx.core.Future compose(java.util.function.Function,java.util.function.Function)>(v2, v1);
return v3;
}
public abstract io.vertx.core.Future compose(java.util.function.Function, java.util.function.Function);
public abstract io.vertx.core.Future transform(java.util.function.Function);
public abstract io.vertx.core.Future eventually(java.util.function.Function);
public abstract io.vertx.core.Future map(java.util.function.Function);
public abstract io.vertx.core.Future map(java.lang.Object);
public io.vertx.core.Future mapEmpty()
{
io.vertx.core.AsyncResult v1;
io.vertx.core.Future v0;
v0 := @this: io.vertx.core.Future;
v1 = specialinvoke v0.<io.vertx.core.AsyncResult: io.vertx.core.AsyncResult mapEmpty()>();
return v1;
}
public abstract io.vertx.core.Future otherwise(java.util.function.Function);
public abstract io.vertx.core.Future otherwise(java.lang.Object);
public io.vertx.core.Future otherwiseEmpty()
{
io.vertx.core.AsyncResult v1;
io.vertx.core.Future v0;
v0 := @this: io.vertx.core.Future;
v1 = specialinvoke v0.<io.vertx.core.AsyncResult: io.vertx.core.AsyncResult otherwiseEmpty()>();
return v1;
}
public io.vertx.core.Future andThen(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.Future v0, v3;
java.util.function.Function v2;
v0 := @this: io.vertx.core.Future;
v1 := @parameter0: io.vertx.core.Handler;
v2 = staticinvoke <io.vertx.core.Future$lambda_andThen_2__903: java.util.function.Function bootstrap$(io.vertx.core.Handler)>(v1);
v3 = interfaceinvoke v0.<io.vertx.core.Future: io.vertx.core.Future transform(java.util.function.Function)>(v2);
return v3;
}
public java.util.concurrent.CompletionStage toCompletionStage()
{
java.util.concurrent.CompletableFuture v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v0;
v0 := @this: io.vertx.core.Future;
v1 = new java.util.concurrent.CompletableFuture;
specialinvoke v1.<java.util.concurrent.CompletableFuture: void <init>()>();
v2 = staticinvoke <io.vertx.core.Future$lambda_toCompletionStage_3__904: io.vertx.core.Handler bootstrap$(java.util.concurrent.CompletableFuture)>(v1);
interfaceinvoke v0.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return v1;
}
public static io.vertx.core.Future fromCompletionStage(java.util.concurrent.CompletionStage)
{
java.util.concurrent.CompletionStage v0;
io.vertx.core.Promise v1;
java.util.function.BiConsumer v2;
io.vertx.core.Future v3;
v0 := @parameter0: java.util.concurrent.CompletionStage;
v1 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
v2 = staticinvoke <io.vertx.core.Future$lambda_fromCompletionStage_4__905: java.util.function.BiConsumer bootstrap$(io.vertx.core.Promise)>(v1);
interfaceinvoke v0.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage whenComplete(java.util.function.BiConsumer)>(v2);
v3 = interfaceinvoke v1.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v3;
}
public static io.vertx.core.Future fromCompletionStage(java.util.concurrent.CompletionStage, io.vertx.core.Context)
{
io.vertx.core.impl.future.PromiseInternal v2;
java.util.concurrent.CompletionStage v0;
java.util.function.BiConsumer v3;
io.vertx.core.Context v1;
io.vertx.core.Future v4;
v0 := @parameter0: java.util.concurrent.CompletionStage;
v1 := @parameter1: io.vertx.core.Context;
v2 = interfaceinvoke v1.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v3 = staticinvoke <io.vertx.core.Future$lambda_fromCompletionStage_5__906: java.util.function.BiConsumer bootstrap$(io.vertx.core.Promise)>(v2);
interfaceinvoke v0.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage whenComplete(java.util.function.BiConsumer)>(v3);
v4 = interfaceinvoke v2.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v4;
}
}