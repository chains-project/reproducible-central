public interface  io.vertx.core.MultiMap extends java.lang.Object implements java.lang.Iterable
{
public static io.vertx.core.MultiMap caseInsensitiveMultiMap()
{
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 = staticinvoke <io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap headers()>();
return v0;
}
public abstract java.lang.String get(java.lang.CharSequence);
public abstract java.lang.String get(java.lang.String);
public abstract java.util.List getAll(java.lang.String);
public abstract java.util.List getAll(java.lang.CharSequence);
public void forEach(java.util.function.BiConsumer)
{
io.vertx.core.MultiMap v0;
java.util.function.BiConsumer v1;
io.vertx.core.MultiMap$1 v2;
v0 := @this: io.vertx.core.MultiMap;
v1 := @parameter0: java.util.function.BiConsumer;
v2 = new io.vertx.core.MultiMap$1;
specialinvoke v2.<io.vertx.core.MultiMap$1: void <init>(io.vertx.core.MultiMap,java.util.function.BiConsumer)>(v0, v1);
interfaceinvoke v0.<io.vertx.core.MultiMap: void forEach(java.util.function.Consumer)>(v2);
return;
}
public java.util.List entries()
{
io.vertx.core.MultiMap v0;
java.util.function.Consumer v2;
java.util.ArrayList v1;
v0 := @this: io.vertx.core.MultiMap;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <io.vertx.core.MultiMap$add__909: java.util.function.Consumer bootstrap$(java.util.List)>(v1);
interfaceinvoke v0.<io.vertx.core.MultiMap: void forEach(java.util.function.Consumer)>(v2);
return v1;
}
public abstract boolean contains(java.lang.String);
public abstract boolean contains(java.lang.CharSequence);
public boolean contains(java.lang.String, java.lang.String, boolean)
{
java.util.function.Predicate v6;
io.vertx.core.MultiMap v0;
java.util.List v4;
java.util.stream.Stream v5;
java.lang.String v1, v2;
boolean v3, v7;
v0 := @this: io.vertx.core.MultiMap;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v4 = interfaceinvoke v0.<io.vertx.core.MultiMap: java.util.List getAll(java.lang.String)>(v1);
v5 = interfaceinvoke v4.<java.util.List: java.util.stream.Stream stream()>();
v6 = staticinvoke <io.vertx.core.MultiMap$lambda_contains_0__910: java.util.function.Predicate bootstrap$(boolean,java.lang.String)>(v3, v2);
v7 = interfaceinvoke v5.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>(v6);
return v7;
}
public boolean contains(java.lang.CharSequence, java.lang.CharSequence, boolean)
{
java.lang.CharSequence v1, v2;
java.util.function.Predicate v5;
io.vertx.core.MultiMap v0;
java.util.List v6;
java.util.stream.Stream v7;
java.lang.String v4;
boolean v3, v8;
v0 := @this: io.vertx.core.MultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 := @parameter2: boolean;
if v3 == 0 goto label1;
v4 = virtualinvoke v2.<java.lang.Object: java.lang.String toString()>();
v5 = staticinvoke <io.vertx.core.MultiMap$lambda_contains_1__912: java.util.function.Predicate bootstrap$(java.lang.String)>(v4);
goto label2;
label1:
v5 = staticinvoke <io.vertx.core.MultiMap$lambda_contains_2__911: java.util.function.Predicate bootstrap$(java.lang.CharSequence)>(v2);
label2:
v6 = interfaceinvoke v0.<io.vertx.core.MultiMap: java.util.List getAll(java.lang.CharSequence)>(v1);
v7 = interfaceinvoke v6.<java.util.List: java.util.stream.Stream stream()>();
v8 = interfaceinvoke v7.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>(v5);
return v8;
}
public abstract boolean isEmpty();
public abstract java.util.Set names();
public abstract io.vertx.core.MultiMap add(java.lang.String, java.lang.String);
public abstract io.vertx.core.MultiMap add(java.lang.CharSequence, java.lang.CharSequence);
public abstract io.vertx.core.MultiMap add(java.lang.String, java.lang.Iterable);
public abstract io.vertx.core.MultiMap add(java.lang.CharSequence, java.lang.Iterable);
public abstract io.vertx.core.MultiMap addAll(io.vertx.core.MultiMap);
public abstract io.vertx.core.MultiMap addAll(java.util.Map);
public abstract io.vertx.core.MultiMap set(java.lang.String, java.lang.String);
public abstract io.vertx.core.MultiMap set(java.lang.CharSequence, java.lang.CharSequence);
public abstract io.vertx.core.MultiMap set(java.lang.String, java.lang.Iterable);
public abstract io.vertx.core.MultiMap set(java.lang.CharSequence, java.lang.Iterable);
public abstract io.vertx.core.MultiMap setAll(io.vertx.core.MultiMap);
public abstract io.vertx.core.MultiMap setAll(java.util.Map);
public abstract io.vertx.core.MultiMap remove(java.lang.String);
public abstract io.vertx.core.MultiMap remove(java.lang.CharSequence);
public abstract io.vertx.core.MultiMap clear();
public abstract int size();
}