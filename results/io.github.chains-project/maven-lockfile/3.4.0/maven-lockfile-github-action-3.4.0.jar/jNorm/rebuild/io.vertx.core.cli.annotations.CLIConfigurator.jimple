public class io.vertx.core.cli.annotations.CLIConfigurator extends java.lang.Object
{
public void <init>()
{
io.vertx.core.cli.annotations.CLIConfigurator v0;
v0 := @this: io.vertx.core.cli.annotations.CLIConfigurator;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static io.vertx.core.cli.CLI define(java.lang.Class)
{
io.vertx.core.cli.Option v20;
int v11;
java.lang.String v10, v12, v13, v7;
boolean v16, v8;
java.util.Iterator v15;
java.lang.IllegalArgumentException v6, v9;
io.vertx.core.cli.Argument v21;
java.util.List v14;
io.vertx.core.cli.impl.DefaultCLI v1;
java.lang.'annotation'.Annotation v18, v19, v2, v3, v4, v5;
java.lang.Class v0;
java.lang.Object v17;
v0 := @parameter0: java.lang.Class;
v1 = new io.vertx.core.cli.impl.DefaultCLI;
specialinvoke v1.<io.vertx.core.cli.impl.DefaultCLI: void <init>()>();
v2 = virtualinvoke v0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/Summary;");
v3 = virtualinvoke v0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/Description;");
v4 = virtualinvoke v0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/Hidden;");
v5 = virtualinvoke v0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/Name;");
if v5 != null goto label1;
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The command cannot be defined, the @Name annotation is missing.");
throw v6;
label1:
v7 = interfaceinvoke v5.<io.vertx.core.cli.annotations.Name: java.lang.String value()>();
v8 = virtualinvoke v7.<java.lang.String: boolean isEmpty()>();
if v8 == 0 goto label2;
v9 = new java.lang.IllegalArgumentException;
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The command cannot be defined, the @Name value is empty or null.");
throw v9;
label2:
v10 = interfaceinvoke v5.<io.vertx.core.cli.annotations.Name: java.lang.String value()>();
interfaceinvoke v1.<io.vertx.core.cli.CLI: io.vertx.core.cli.CLI setName(java.lang.String)>(v10);
v11 = interfaceinvoke v5.<io.vertx.core.cli.annotations.Name: int priority()>();
interfaceinvoke v1.<io.vertx.core.cli.CLI: io.vertx.core.cli.CLI setPriority(int)>(v11);
if v2 == null goto label3;
v12 = interfaceinvoke v2.<io.vertx.core.cli.annotations.Summary: java.lang.String value()>();
interfaceinvoke v1.<io.vertx.core.cli.CLI: io.vertx.core.cli.CLI setSummary(java.lang.String)>(v12);
label3:
if v3 == null goto label4;
v13 = interfaceinvoke v3.<io.vertx.core.cli.annotations.Description: java.lang.String value()>();
interfaceinvoke v1.<io.vertx.core.cli.CLI: io.vertx.core.cli.CLI setDescription(java.lang.String)>(v13);
label4:
if v4 == null goto label5;
interfaceinvoke v1.<io.vertx.core.cli.CLI: io.vertx.core.cli.CLI setHidden(boolean)>(1);
label5:
v14 = staticinvoke <io.vertx.core.cli.impl.ReflectionUtils: java.util.List getSetterMethods(java.lang.Class)>(v0);
v15 = interfaceinvoke v14.<java.util.List: java.util.Iterator iterator()>();
label6:
v16 = interfaceinvoke v15.<java.util.Iterator: boolean hasNext()>();
if v16 == 0 goto label8;
v17 = interfaceinvoke v15.<java.util.Iterator: java.lang.Object next()>();
v18 = virtualinvoke v17.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/Option;");
v19 = virtualinvoke v17.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/Argument;");
if v18 == null goto label7;
v20 = staticinvoke <io.vertx.core.cli.annotations.CLIConfigurator: io.vertx.core.cli.Option createOption(java.lang.reflect.Method)>(v17);
interfaceinvoke v1.<io.vertx.core.cli.CLI: io.vertx.core.cli.CLI addOption(io.vertx.core.cli.Option)>(v20);
label7:
if v19 == null goto label6;
v21 = staticinvoke <io.vertx.core.cli.annotations.CLIConfigurator: io.vertx.core.cli.Argument createArgument(java.lang.reflect.Method)>(v17);
interfaceinvoke v1.<io.vertx.core.cli.CLI: io.vertx.core.cli.CLI addArgument(io.vertx.core.cli.Argument)>(v21);
goto label6;
label8:
return v1;
}
private static io.vertx.core.cli.Option createOption(java.lang.reflect.Method)
{
io.vertx.core.cli.Option v16;
java.lang.reflect.Method v0;
boolean v13, v15, v17, v21, v7, v9;
java.lang.'annotation'.Annotation v18, v2, v20, v30, v33, v36;
java.lang.reflect.Parameter[] v22, v26;
java.lang.reflect.Parameter v23, v27;
java.lang.String v11, v19, v3, v35, v37, v5;
io.vertx.core.cli.TypedOption v1, v10, v12, v14, v25, v34, v4, v6, v8;
java.lang.Class v24, v28, v29, v31;
java.lang.Object v32;
v0 := @parameter0: java.lang.reflect.Method;
v1 = new io.vertx.core.cli.TypedOption;
specialinvoke v1.<io.vertx.core.cli.TypedOption: void <init>()>();
v2 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/Option;");
v3 = interfaceinvoke v2.<io.vertx.core.cli.annotations.Option: java.lang.String longName()>();
v4 = virtualinvoke v1.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.TypedOption setLongName(java.lang.String)>(v3);
v5 = interfaceinvoke v2.<io.vertx.core.cli.annotations.Option: java.lang.String shortName()>();
v6 = virtualinvoke v4.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.TypedOption setShortName(java.lang.String)>(v5);
v7 = interfaceinvoke v2.<io.vertx.core.cli.annotations.Option: boolean acceptMultipleValues()>();
v8 = virtualinvoke v6.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.TypedOption setMultiValued(boolean)>(v7);
v9 = interfaceinvoke v2.<io.vertx.core.cli.annotations.Option: boolean acceptValue()>();
v10 = virtualinvoke v8.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.TypedOption setSingleValued(boolean)>(v9);
v11 = interfaceinvoke v2.<io.vertx.core.cli.annotations.Option: java.lang.String argName()>();
v12 = virtualinvoke v10.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.TypedOption setArgName(java.lang.String)>(v11);
v13 = interfaceinvoke v2.<io.vertx.core.cli.annotations.Option: boolean flag()>();
v14 = virtualinvoke v12.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.TypedOption setFlag(boolean)>(v13);
v15 = interfaceinvoke v2.<io.vertx.core.cli.annotations.Option: boolean help()>();
v16 = virtualinvoke v14.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.Option setHelp(boolean)>(v15);
v17 = interfaceinvoke v2.<io.vertx.core.cli.annotations.Option: boolean required()>();
virtualinvoke v16.<io.vertx.core.cli.Option: io.vertx.core.cli.Option setRequired(boolean)>(v17);
v18 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/Description;");
if v18 == null goto label1;
v19 = interfaceinvoke v18.<io.vertx.core.cli.annotations.Description: java.lang.String value()>();
virtualinvoke v1.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.TypedOption setDescription(java.lang.String)>(v19);
label1:
v20 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/Hidden;");
if v20 == null goto label2;
virtualinvoke v1.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.TypedOption setHidden(boolean)>(1);
label2:
v21 = staticinvoke <io.vertx.core.cli.impl.ReflectionUtils: boolean isMultiple(java.lang.reflect.Method)>(v0);
if v21 == 0 goto label3;
v22 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.reflect.Parameter[] getParameters()>();
v23 = v22[0];
v24 = staticinvoke <io.vertx.core.cli.impl.ReflectionUtils: java.lang.Class getComponentType(java.lang.reflect.Parameter)>(v23);
v25 = virtualinvoke v1.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.TypedOption setType(java.lang.Class)>(v24);
virtualinvoke v25.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.TypedOption setMultiValued(boolean)>(1);
goto label4;
label3:
v26 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.reflect.Parameter[] getParameters()>();
v27 = v26[0];
v28 = virtualinvoke v27.<java.lang.reflect.Parameter: java.lang.Class getType()>();
virtualinvoke v1.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.TypedOption setType(java.lang.Class)>(v28);
v29 = <java.lang.Boolean: java.lang.Class TYPE>;
if v28 == v29 goto label4;
if v28 == class "Ljava/lang/Boolean;" goto label4;
virtualinvoke v1.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.TypedOption setSingleValued(boolean)>(1);
label4:
v30 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/ConvertedBy;");
if v30 == null goto label5;
v31 = interfaceinvoke v30.<io.vertx.core.cli.annotations.ConvertedBy: java.lang.Class value()>();
v32 = staticinvoke <io.vertx.core.cli.impl.ReflectionUtils: java.lang.Object newInstance(java.lang.Class)>(v31);
virtualinvoke v1.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.TypedOption setConverter(io.vertx.core.cli.converters.Converter)>(v32);
label5:
v33 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/ParsedAsList;");
if v33 == null goto label6;
v34 = virtualinvoke v1.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.TypedOption setParsedAsList(boolean)>(1);
v35 = interfaceinvoke v33.<io.vertx.core.cli.annotations.ParsedAsList: java.lang.String separator()>();
virtualinvoke v34.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.TypedOption setListSeparator(java.lang.String)>(v35);
label6:
v36 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/DefaultValue;");
if v36 == null goto label7;
v37 = interfaceinvoke v36.<io.vertx.core.cli.annotations.DefaultValue: java.lang.String value()>();
virtualinvoke v1.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.TypedOption setDefaultValue(java.lang.String)>(v37);
label7:
virtualinvoke v1.<io.vertx.core.cli.TypedOption: void ensureValidity()>();
return v1;
}
private static io.vertx.core.cli.Argument createArgument(java.lang.reflect.Method)
{
java.lang.reflect.Parameter[] v13, v9;
java.lang.reflect.Parameter v10, v14;
int v3;
java.lang.String v21, v4, v7;
java.lang.reflect.Method v0;
boolean v5, v8;
java.lang.'annotation'.Annotation v16, v17, v2, v20, v6;
java.lang.Class v11, v15, v18;
java.lang.Object v19;
io.vertx.core.cli.TypedArgument v1, v12;
v0 := @parameter0: java.lang.reflect.Method;
v1 = new io.vertx.core.cli.TypedArgument;
specialinvoke v1.<io.vertx.core.cli.TypedArgument: void <init>()>();
v2 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/Argument;");
v3 = interfaceinvoke v2.<io.vertx.core.cli.annotations.Argument: int index()>();
virtualinvoke v1.<io.vertx.core.cli.TypedArgument: io.vertx.core.cli.TypedArgument setIndex(int)>(v3);
v4 = interfaceinvoke v2.<io.vertx.core.cli.annotations.Argument: java.lang.String argName()>();
virtualinvoke v1.<io.vertx.core.cli.TypedArgument: io.vertx.core.cli.TypedArgument setArgName(java.lang.String)>(v4);
v5 = interfaceinvoke v2.<io.vertx.core.cli.annotations.Argument: boolean required()>();
virtualinvoke v1.<io.vertx.core.cli.TypedArgument: io.vertx.core.cli.TypedArgument setRequired(boolean)>(v5);
v6 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/Description;");
if v6 == null goto label1;
v7 = interfaceinvoke v6.<io.vertx.core.cli.annotations.Description: java.lang.String value()>();
virtualinvoke v1.<io.vertx.core.cli.TypedArgument: io.vertx.core.cli.TypedArgument setDescription(java.lang.String)>(v7);
label1:
v8 = staticinvoke <io.vertx.core.cli.impl.ReflectionUtils: boolean isMultiple(java.lang.reflect.Method)>(v0);
if v8 == 0 goto label2;
v9 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.reflect.Parameter[] getParameters()>();
v10 = v9[0];
v11 = staticinvoke <io.vertx.core.cli.impl.ReflectionUtils: java.lang.Class getComponentType(java.lang.reflect.Parameter)>(v10);
v12 = virtualinvoke v1.<io.vertx.core.cli.TypedArgument: io.vertx.core.cli.TypedArgument setType(java.lang.Class)>(v11);
virtualinvoke v12.<io.vertx.core.cli.TypedArgument: io.vertx.core.cli.TypedArgument setMultiValued(boolean)>(1);
goto label3;
label2:
v13 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.reflect.Parameter[] getParameters()>();
v14 = v13[0];
v15 = virtualinvoke v14.<java.lang.reflect.Parameter: java.lang.Class getType()>();
virtualinvoke v1.<io.vertx.core.cli.TypedArgument: io.vertx.core.cli.TypedArgument setType(java.lang.Class)>(v15);
label3:
v16 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/Hidden;");
if v16 == null goto label4;
virtualinvoke v1.<io.vertx.core.cli.TypedArgument: io.vertx.core.cli.TypedArgument setHidden(boolean)>(1);
label4:
v17 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/ConvertedBy;");
if v17 == null goto label5;
v18 = interfaceinvoke v17.<io.vertx.core.cli.annotations.ConvertedBy: java.lang.Class value()>();
v19 = staticinvoke <io.vertx.core.cli.impl.ReflectionUtils: java.lang.Object newInstance(java.lang.Class)>(v18);
virtualinvoke v1.<io.vertx.core.cli.TypedArgument: io.vertx.core.cli.TypedArgument setConverter(io.vertx.core.cli.converters.Converter)>(v19);
label5:
v20 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/DefaultValue;");
if v20 == null goto label6;
v21 = interfaceinvoke v20.<io.vertx.core.cli.annotations.DefaultValue: java.lang.String value()>();
virtualinvoke v1.<io.vertx.core.cli.TypedArgument: io.vertx.core.cli.TypedArgument setDefaultValue(java.lang.String)>(v21);
label6:
return v1;
}
private static java.lang.Object getOptionValue(java.lang.reflect.Method, java.lang.String, io.vertx.core.cli.CommandLine)
{
io.vertx.core.cli.CommandLine v2;
io.vertx.core.cli.Option v4;
java.util.List v6;
io.vertx.core.cli.CLI v3;
java.lang.Object v7, v8;
java.lang.String v1;
java.lang.reflect.Method v0;
boolean v5;
v0 := @parameter0: java.lang.reflect.Method;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: io.vertx.core.cli.CommandLine;
v3 = interfaceinvoke v2.<io.vertx.core.cli.CommandLine: io.vertx.core.cli.CLI cli()>();
v4 = interfaceinvoke v3.<io.vertx.core.cli.CLI: io.vertx.core.cli.Option getOption(java.lang.String)>(v1);
if v4 != null goto label1;
return null;
label1:
v5 = staticinvoke <io.vertx.core.cli.impl.ReflectionUtils: boolean isMultiple(java.lang.reflect.Method)>(v0);
if v5 == 0 goto label2;
v6 = interfaceinvoke v2.<io.vertx.core.cli.CommandLine: java.util.List getOptionValues(java.lang.String)>(v1);
v7 = staticinvoke <io.vertx.core.cli.annotations.CLIConfigurator: java.lang.Object createMultiValueContainer(java.lang.reflect.Method,java.util.List)>(v0, v6);
return v7;
label2:
v8 = interfaceinvoke v2.<io.vertx.core.cli.CommandLine: java.lang.Object getOptionValue(java.lang.String)>(v1);
return v8;
}
private static java.lang.Object getArgumentValue(java.lang.reflect.Method, int, io.vertx.core.cli.CommandLine)
{
io.vertx.core.cli.CommandLine v2;
io.vertx.core.cli.Argument v4;
java.util.List v7;
io.vertx.core.cli.CLI v3;
int v1, v6, v9;
java.lang.Object v10, v8;
java.lang.reflect.Method v0;
boolean v5;
v0 := @parameter0: java.lang.reflect.Method;
v1 := @parameter1: int;
v2 := @parameter2: io.vertx.core.cli.CommandLine;
v3 = interfaceinvoke v2.<io.vertx.core.cli.CommandLine: io.vertx.core.cli.CLI cli()>();
v4 = interfaceinvoke v3.<io.vertx.core.cli.CLI: io.vertx.core.cli.Argument getArgument(int)>(v1);
if v4 != null goto label1;
return null;
label1:
v5 = staticinvoke <io.vertx.core.cli.impl.ReflectionUtils: boolean isMultiple(java.lang.reflect.Method)>(v0);
if v5 == 0 goto label2;
v6 = virtualinvoke v4.<io.vertx.core.cli.Argument: int getIndex()>();
v7 = interfaceinvoke v2.<io.vertx.core.cli.CommandLine: java.util.List getArgumentValues(int)>(v6);
v8 = staticinvoke <io.vertx.core.cli.annotations.CLIConfigurator: java.lang.Object createMultiValueContainer(java.lang.reflect.Method,java.util.List)>(v0, v7);
return v8;
label2:
v9 = virtualinvoke v4.<io.vertx.core.cli.Argument: int getIndex()>();
v10 = interfaceinvoke v2.<io.vertx.core.cli.CommandLine: java.lang.Object getArgumentValue(int)>(v9);
return v10;
}
public static void inject(io.vertx.core.cli.CommandLine, java.lang.Object) throws io.vertx.core.cli.CLIException
{
io.vertx.core.cli.CommandLine v0;
java.lang.Object[] v11, v17;
int v15;
java.lang.String v14, v20, v9;
boolean v5;
io.vertx.core.cli.CLIException v13, v19;
java.util.Iterator v4;
java.lang.Exception v12, v18;
java.util.List v3;
java.lang.'annotation'.Annotation v7, v8;
java.lang.Class v2;
java.lang.Object v1, v10, v16, v6;
v0 := @parameter0: io.vertx.core.cli.CommandLine;
v1 := @parameter1: java.lang.Object;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v3 = staticinvoke <io.vertx.core.cli.impl.ReflectionUtils: java.util.List getSetterMethods(java.lang.Class)>(v2);
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label9;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/Option;");
v8 = virtualinvoke v6.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/vertx/core/cli/annotations/Argument;");
if v7 == null goto label5;
v9 = interfaceinvoke v7.<io.vertx.core.cli.annotations.Option: java.lang.String longName()>();
if v9 != null goto label2;
v9 = interfaceinvoke v7.<io.vertx.core.cli.annotations.Option: java.lang.String shortName()>();
label2:
v10 = staticinvoke <io.vertx.core.cli.annotations.CLIConfigurator: java.lang.Object getOptionValue(java.lang.reflect.Method,java.lang.String,io.vertx.core.cli.CommandLine)>(v6, v9, v0);
if v10 == null goto label5;
virtualinvoke v6.<java.lang.reflect.Method: void setAccessible(boolean)>(1);
v11 = newarray (java.lang.Object)[1];
v11[0] = v10;
virtualinvoke v6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v1, v11);
label3:
goto label5;
label4:
v12 := @caughtexception;
v13 = new io.vertx.core.cli.CLIException;
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot inject value for option \'\u0001\'");
specialinvoke v13.<io.vertx.core.cli.CLIException: void <init>(java.lang.String,java.lang.Exception)>(v14, v12);
throw v13;
label5:
if v8 == null goto label1;
v15 = interfaceinvoke v8.<io.vertx.core.cli.annotations.Argument: int index()>();
label6:
v16 = staticinvoke <io.vertx.core.cli.annotations.CLIConfigurator: java.lang.Object getArgumentValue(java.lang.reflect.Method,int,io.vertx.core.cli.CommandLine)>(v6, v15, v0);
if v16 == null goto label1;
virtualinvoke v6.<java.lang.reflect.Method: void setAccessible(boolean)>(1);
v17 = newarray (java.lang.Object)[1];
v17[0] = v16;
virtualinvoke v6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v1, v17);
label7:
goto label1;
label8:
v18 := @caughtexception;
v19 = new io.vertx.core.cli.CLIException;
v20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot inject value for argument \'\u0001\'");
specialinvoke v19.<io.vertx.core.cli.CLIException: void <init>(java.lang.String,java.lang.Exception)>(v20, v18);
throw v19;
label9:
return;
catch java.lang.Exception from label2 to label3 with label4;
catch java.lang.Exception from label6 to label7 with label8;
}
private static java.lang.Object createMultiValueContainer(java.lang.reflect.Method, java.util.List)
{
int v6, v8, v9;
java.lang.reflect.Method v0;
java.util.LinkedHashSet v13;
boolean v12, v15, v17, v4;
java.lang.Class[] v2;
java.util.List v1;
java.lang.Class v11, v14, v16, v3, v5;
java.lang.Object v10, v7;
v0 := @parameter0: java.lang.reflect.Method;
v1 := @parameter1: java.util.List;
v2 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
v3 = v2[0];
v4 = virtualinvoke v3.<java.lang.Class: boolean isArray()>();
if v4 == 0 goto label3;
v5 = virtualinvoke v3.<java.lang.Class: java.lang.Class getComponentType()>();
v6 = interfaceinvoke v1.<java.util.List: int size()>();
v7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v5, v6);
v8 = 0;
label1:
v9 = interfaceinvoke v1.<java.util.List: int size()>();
if v8 >= v9 goto label2;
v10 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v8);
staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(v7, v8, v10);
v8 = v8 + 1;
goto label1;
label2:
return v7;
label3:
v11 = class "Ljava/util/Set;";
v12 = virtualinvoke v11.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v3);
if v12 == 0 goto label4;
v13 = new java.util.LinkedHashSet;
specialinvoke v13.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(v1);
return v13;
label4:
v14 = class "Ljava/util/List;";
v15 = virtualinvoke v14.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v3);
if v15 != 0 goto label5;
v16 = class "Ljava/util/Collection;";
v17 = virtualinvoke v16.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v3);
if v17 == 0 goto label6;
label5:
return v1;
label6:
return null;
}
}