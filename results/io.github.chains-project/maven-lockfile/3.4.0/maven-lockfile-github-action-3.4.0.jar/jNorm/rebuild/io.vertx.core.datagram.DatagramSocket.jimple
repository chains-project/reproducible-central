public interface  io.vertx.core.datagram.DatagramSocket extends java.lang.Object implements io.vertx.core.streams.ReadStream, io.vertx.core.metrics.Measured
{
public abstract io.vertx.core.datagram.DatagramSocket send(io.vertx.core.buffer.Buffer, int, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future send(io.vertx.core.buffer.Buffer, int, java.lang.String);
public abstract io.vertx.core.streams.WriteStream sender(int, java.lang.String);
public abstract io.vertx.core.datagram.DatagramSocket send(java.lang.String, int, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future send(java.lang.String, int, java.lang.String);
public abstract io.vertx.core.datagram.DatagramSocket send(java.lang.String, java.lang.String, int, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future send(java.lang.String, java.lang.String, int, java.lang.String);
public abstract void close(io.vertx.core.Handler);
public abstract io.vertx.core.Future close();
public abstract io.vertx.core.net.SocketAddress localAddress();
public abstract io.vertx.core.datagram.DatagramSocket listenMulticastGroup(java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future listenMulticastGroup(java.lang.String);
public abstract io.vertx.core.datagram.DatagramSocket listenMulticastGroup(java.lang.String, java.lang.String, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future listenMulticastGroup(java.lang.String, java.lang.String, java.lang.String);
public abstract io.vertx.core.datagram.DatagramSocket unlistenMulticastGroup(java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future unlistenMulticastGroup(java.lang.String);
public abstract io.vertx.core.datagram.DatagramSocket unlistenMulticastGroup(java.lang.String, java.lang.String, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future unlistenMulticastGroup(java.lang.String, java.lang.String, java.lang.String);
public abstract io.vertx.core.datagram.DatagramSocket blockMulticastGroup(java.lang.String, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future blockMulticastGroup(java.lang.String, java.lang.String);
public abstract io.vertx.core.datagram.DatagramSocket blockMulticastGroup(java.lang.String, java.lang.String, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future blockMulticastGroup(java.lang.String, java.lang.String, java.lang.String);
public abstract io.vertx.core.datagram.DatagramSocket listen(int, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future listen(int, java.lang.String);
public abstract io.vertx.core.datagram.DatagramSocket pause();
public abstract io.vertx.core.datagram.DatagramSocket resume();
public abstract io.vertx.core.datagram.DatagramSocket fetch(long);
public abstract io.vertx.core.datagram.DatagramSocket endHandler(io.vertx.core.Handler);
public abstract io.vertx.core.datagram.DatagramSocket handler(io.vertx.core.Handler);
public abstract io.vertx.core.datagram.DatagramSocket exceptionHandler(io.vertx.core.Handler);
}