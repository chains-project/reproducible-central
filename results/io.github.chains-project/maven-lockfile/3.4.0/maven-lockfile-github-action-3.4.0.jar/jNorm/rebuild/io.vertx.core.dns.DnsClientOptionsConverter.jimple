public class io.vertx.core.dns.DnsClientOptionsConverter extends java.lang.Object
{
private static final java.util.Base64$Decoder BASE64_DECODER;
private static final java.util.Base64$Encoder BASE64_ENCODER;
public void <init>()
{
io.vertx.core.dns.DnsClientOptionsConverter v0;
v0 := @this: io.vertx.core.dns.DnsClientOptionsConverter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static void fromJson(java.lang.Iterable, io.vertx.core.dns.DnsClientOptions)
{
byte v6;
io.netty.handler.logging.ByteBufFormat v17;
boolean v10, v11, v12, v13, v15, v19, v22, v24, v26, v3, v30, v34, v36, v8, v9;
io.vertx.core.dns.DnsClientOptions v1;
long v32;
java.lang.Iterable v0;
int v28, v7;
java.util.Iterator v2;
java.lang.Object v14, v16, v18, v20, v21, v23, v25, v27, v29, v31, v33, v35, v4, v5;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: io.vertx.core.dns.DnsClientOptions;
v2 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
label01:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label15;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v6 = -1;
v7 = virtualinvoke v5.<java.lang.String: int hashCode()>();
lookupswitch(v7)
{
case 3208616: goto label03;
case 3446913: goto label05;
case 52245004: goto label02;
case 84047475: goto label04;
case 129555321: goto label06;
case 1872273624: goto label07;
default: goto label08;
};
label02:
v8 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("activityLogFormat");
if v8 == 0 goto label08;
v6 = 0;
goto label08;
label03:
v9 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("host");
if v9 == 0 goto label08;
v6 = 1;
goto label08;
label04:
v10 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("logActivity");
if v10 == 0 goto label08;
v6 = 2;
goto label08;
label05:
v11 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("port");
if v11 == 0 goto label08;
v6 = 3;
goto label08;
label06:
v12 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("queryTimeout");
if v12 == 0 goto label08;
v6 = 4;
goto label08;
label07:
v13 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("recursionDesired");
if v13 == 0 goto label08;
v6 = 5;
label08:
tableswitch(v6)
{
case 0: goto label09;
case 1: goto label10;
case 2: goto label11;
case 3: goto label12;
case 4: goto label13;
case 5: goto label14;
default: goto label01;
};
label09:
v14 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v15 = v14 instanceof java.lang.String;
if v15 == 0 goto label01;
v16 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v17 = staticinvoke <io.netty.handler.logging.ByteBufFormat: io.netty.handler.logging.ByteBufFormat valueOf(java.lang.String)>(v16);
virtualinvoke v1.<io.vertx.core.dns.DnsClientOptions: io.vertx.core.dns.DnsClientOptions setActivityLogFormat(io.netty.handler.logging.ByteBufFormat)>(v17);
goto label01;
label10:
v18 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v19 = v18 instanceof java.lang.String;
if v19 == 0 goto label01;
v20 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v1.<io.vertx.core.dns.DnsClientOptions: io.vertx.core.dns.DnsClientOptions setHost(java.lang.String)>(v20);
goto label01;
label11:
v21 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v22 = v21 instanceof java.lang.Boolean;
if v22 == 0 goto label01;
v23 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v24 = virtualinvoke v23.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.dns.DnsClientOptions: io.vertx.core.dns.DnsClientOptions setLogActivity(boolean)>(v24);
goto label01;
label12:
v25 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v26 = v25 instanceof java.lang.Number;
if v26 == 0 goto label01;
v27 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v28 = virtualinvoke v27.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.dns.DnsClientOptions: io.vertx.core.dns.DnsClientOptions setPort(int)>(v28);
goto label01;
label13:
v29 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v30 = v29 instanceof java.lang.Number;
if v30 == 0 goto label01;
v31 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v32 = virtualinvoke v31.<java.lang.Number: long longValue()>();
virtualinvoke v1.<io.vertx.core.dns.DnsClientOptions: io.vertx.core.dns.DnsClientOptions setQueryTimeout(long)>(v32);
goto label01;
label14:
v33 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v34 = v33 instanceof java.lang.Boolean;
if v34 == 0 goto label01;
v35 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v36 = virtualinvoke v35.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.dns.DnsClientOptions: io.vertx.core.dns.DnsClientOptions setRecursionDesired(boolean)>(v36);
goto label01;
label15:
return;
}
public static void toJson(io.vertx.core.dns.DnsClientOptions, io.vertx.core.json.JsonObject)
{
io.vertx.core.dns.DnsClientOptions v0;
io.vertx.core.json.JsonObject v1;
java.util.Map v2;
v0 := @parameter0: io.vertx.core.dns.DnsClientOptions;
v1 := @parameter1: io.vertx.core.json.JsonObject;
v2 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.util.Map getMap()>();
staticinvoke <io.vertx.core.dns.DnsClientOptionsConverter: void toJson(io.vertx.core.dns.DnsClientOptions,java.util.Map)>(v0, v2);
return;
}
public static void toJson(io.vertx.core.dns.DnsClientOptions, java.util.Map)
{
io.vertx.core.dns.DnsClientOptions v0;
long v11;
java.lang.Integer v10;
java.lang.Long v12;
io.netty.handler.logging.ByteBufFormat v2, v3;
java.util.Map v1;
int v9;
java.lang.Boolean v14, v8;
java.lang.String v4, v5, v6;
boolean v13, v7;
v0 := @parameter0: io.vertx.core.dns.DnsClientOptions;
v1 := @parameter1: java.util.Map;
v2 = virtualinvoke v0.<io.vertx.core.dns.DnsClientOptions: io.netty.handler.logging.ByteBufFormat getActivityLogFormat()>();
if v2 == null goto label1;
v3 = virtualinvoke v0.<io.vertx.core.dns.DnsClientOptions: io.netty.handler.logging.ByteBufFormat getActivityLogFormat()>();
v4 = virtualinvoke v3.<io.netty.handler.logging.ByteBufFormat: java.lang.String name()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("activityLogFormat", v4);
label1:
v5 = virtualinvoke v0.<io.vertx.core.dns.DnsClientOptions: java.lang.String getHost()>();
if v5 == null goto label2;
v6 = virtualinvoke v0.<io.vertx.core.dns.DnsClientOptions: java.lang.String getHost()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("host", v6);
label2:
v7 = virtualinvoke v0.<io.vertx.core.dns.DnsClientOptions: boolean getLogActivity()>();
v8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v7);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("logActivity", v8);
v9 = virtualinvoke v0.<io.vertx.core.dns.DnsClientOptions: int getPort()>();
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v9);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("port", v10);
v11 = virtualinvoke v0.<io.vertx.core.dns.DnsClientOptions: long getQueryTimeout()>();
v12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v11);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("queryTimeout", v12);
v13 = virtualinvoke v0.<io.vertx.core.dns.DnsClientOptions: boolean isRecursionDesired()>();
v14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v13);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("recursionDesired", v14);
return;
}
static void <clinit>()
{
java.util.Base64$Encoder v1;
java.util.Base64$Decoder v0;
v0 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Decoder BASE64_DECODER>;
<io.vertx.core.dns.DnsClientOptionsConverter: java.util.Base64$Decoder BASE64_DECODER> = v0;
v1 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Encoder BASE64_ENCODER>;
<io.vertx.core.dns.DnsClientOptionsConverter: java.util.Base64$Encoder BASE64_ENCODER> = v1;
return;
}
}