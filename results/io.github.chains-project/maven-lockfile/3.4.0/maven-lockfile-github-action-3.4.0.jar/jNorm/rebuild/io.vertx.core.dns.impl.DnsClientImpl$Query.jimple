class io.vertx.core.dns.impl.DnsClientImpl$Query extends java.lang.Object
{
final io.netty.handler.codec.dns.DatagramDnsQuery msg;
final io.netty.util.concurrent.Promise promise;
final java.lang.String name;
final io.netty.handler.codec.dns.DnsRecordType[] types;
long timerID;
final io.vertx.core.dns.impl.DnsClientImpl this$0;
public void <init>(io.vertx.core.dns.impl.DnsClientImpl, java.lang.String, io.netty.handler.codec.dns.DnsRecordType[])
{
io.vertx.core.dns.impl.DnsClientImpl v1;
io.vertx.core.dns.impl.DnsClientImpl$Query v0;
io.vertx.core.dns.DnsClientOptions v8;
io.vertx.core.impl.ContextInternal v18;
io.netty.handler.codec.dns.DnsRecordType[] v3;
io.netty.handler.codec.dns.DefaultDnsQuestion v17;
io.netty.handler.codec.dns.DnsSection v16;
java.util.concurrent.ThreadLocalRandom v6;
int v12, v13, v7;
java.lang.String v2;
boolean v11, v9;
io.netty.handler.codec.dns.DnsRecordType v14;
io.netty.util.concurrent.Promise v20;
io.netty.handler.codec.dns.DatagramDnsQuery v10, v15, v4;
io.netty.channel.EventLoop v19;
java.net.InetSocketAddress v5;
v0 := @this: io.vertx.core.dns.impl.DnsClientImpl$Query;
v1 := @parameter0: io.vertx.core.dns.impl.DnsClientImpl;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.netty.handler.codec.dns.DnsRecordType[];
v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.vertx.core.dns.impl.DnsClientImpl this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = new io.netty.handler.codec.dns.DatagramDnsQuery;
v5 = v1.<io.vertx.core.dns.impl.DnsClientImpl: java.net.InetSocketAddress dnsServer>;
v6 = staticinvoke <java.util.concurrent.ThreadLocalRandom: java.util.concurrent.ThreadLocalRandom current()>();
v7 = virtualinvoke v6.<java.util.concurrent.ThreadLocalRandom: int nextInt()>();
specialinvoke v4.<io.netty.handler.codec.dns.DatagramDnsQuery: void <init>(java.net.InetSocketAddress,java.net.InetSocketAddress,int)>(null, v5, v7);
v8 = v1.<io.vertx.core.dns.impl.DnsClientImpl: io.vertx.core.dns.DnsClientOptions options>;
v9 = virtualinvoke v8.<io.vertx.core.dns.DnsClientOptions: boolean isRecursionDesired()>();
v10 = virtualinvoke v4.<io.netty.handler.codec.dns.DatagramDnsQuery: io.netty.handler.codec.dns.DatagramDnsQuery setRecursionDesired(boolean)>(v9);
v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.netty.handler.codec.dns.DatagramDnsQuery msg> = v10;
v11 = virtualinvoke v2.<java.lang.String: boolean endsWith(java.lang.String)>(".");
if v11 != 0 goto label1;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.");
label1:
v12 = lengthof v3;
v13 = 0;
label2:
if v13 >= v12 goto label3;
v14 = v3[v13];
v15 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.netty.handler.codec.dns.DatagramDnsQuery msg>;
v16 = <io.netty.handler.codec.dns.DnsSection: io.netty.handler.codec.dns.DnsSection QUESTION>;
v17 = new io.netty.handler.codec.dns.DefaultDnsQuestion;
specialinvoke v17.<io.netty.handler.codec.dns.DefaultDnsQuestion: void <init>(java.lang.String,io.netty.handler.codec.dns.DnsRecordType,int)>(v2, v14, 1);
virtualinvoke v15.<io.netty.handler.codec.dns.DatagramDnsQuery: io.netty.handler.codec.dns.DatagramDnsQuery addRecord(io.netty.handler.codec.dns.DnsSection,io.netty.handler.codec.dns.DnsRecord)>(v16, v17);
v13 = v13 + 1;
goto label2;
label3:
v18 = v1.<io.vertx.core.dns.impl.DnsClientImpl: io.vertx.core.impl.ContextInternal actualCtx>;
v19 = interfaceinvoke v18.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>();
v20 = interfaceinvoke v19.<io.netty.channel.EventLoop: io.netty.util.concurrent.Promise newPromise()>();
v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.netty.util.concurrent.Promise promise> = v20;
v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.netty.handler.codec.dns.DnsRecordType[] types> = v3;
v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: java.lang.String name> = v2;
return;
}
public void fail(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.util.collection.LongObjectMap v3;
io.vertx.core.impl.VertxInternal v12;
io.netty.util.concurrent.Promise v14;
io.netty.handler.codec.dns.DatagramDnsQuery v5;
io.vertx.core.dns.impl.DnsClientImpl v11, v2, v4;
io.vertx.core.dns.impl.DnsClientImpl$Query v0;
long v13, v8, v9;
byte v10;
int v6;
java.lang.String v7;
v0 := @this: io.vertx.core.dns.impl.DnsClientImpl$Query;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.vertx.core.dns.impl.DnsClientImpl this$0>;
v3 = v2.<io.vertx.core.dns.impl.DnsClientImpl: io.netty.util.collection.LongObjectMap inProgressMap>;
v4 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.vertx.core.dns.impl.DnsClientImpl this$0>;
v5 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.netty.handler.codec.dns.DatagramDnsQuery msg>;
v6 = virtualinvoke v5.<io.netty.handler.codec.dns.DatagramDnsQuery: int id()>();
v7 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: java.lang.String name>;
v8 = specialinvoke v4.<io.vertx.core.dns.impl.DnsClientImpl: long dnsMessageId(int,java.lang.String)>(v6, v7);
interfaceinvoke v3.<io.netty.util.collection.LongObjectMap: java.lang.Object remove(long)>(v8);
v9 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: long timerID>;
v10 = v9 cmp 0L;
if v10 < 0 goto label1;
v11 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.vertx.core.dns.impl.DnsClientImpl this$0>;
v12 = v11.<io.vertx.core.dns.impl.DnsClientImpl: io.vertx.core.impl.VertxInternal vertx>;
v13 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: long timerID>;
interfaceinvoke v12.<io.vertx.core.impl.VertxInternal: boolean cancelTimer(long)>(v13);
label1:
v14 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.netty.util.concurrent.Promise promise>;
interfaceinvoke v14.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v1);
return;
}
void handle(io.netty.handler.codec.dns.DnsResponse)
{
io.netty.handler.codec.dns.DnsResponseCode v2;
io.vertx.core.dns.impl.DnsClientImpl$Query v0;
io.netty.handler.codec.dns.DnsRecordType[] v25;
byte v13;
io.netty.handler.codec.dns.DnsSection v17, v21;
boolean v26, v29, v31;
io.netty.util.collection.LongObjectMap v7;
io.netty.handler.codec.dns.DnsRecord v22;
io.netty.handler.codec.dns.DnsResponse v1;
io.vertx.core.dns.DnsException v33;
io.vertx.core.dns.impl.DnsClientImpl v14, v6, v8;
long v11, v12, v16;
java.util.ArrayList v19;
int v18, v20, v27, v3, v9;
io.vertx.core.dns.DnsResponseCode v4, v5;
java.lang.String v10;
io.netty.handler.codec.dns.DnsRecordType v24;
io.vertx.core.impl.VertxInternal v15;
io.netty.util.concurrent.Promise v32;
java.lang.Object v23, v28, v30;
v0 := @this: io.vertx.core.dns.impl.DnsClientImpl$Query;
v1 := @parameter0: io.netty.handler.codec.dns.DnsResponse;
v2 = interfaceinvoke v1.<io.netty.handler.codec.dns.DnsResponse: io.netty.handler.codec.dns.DnsResponseCode code()>();
v3 = virtualinvoke v2.<io.netty.handler.codec.dns.DnsResponseCode: int intValue()>();
v4 = staticinvoke <io.vertx.core.dns.DnsResponseCode: io.vertx.core.dns.DnsResponseCode valueOf(int)>(v3);
v5 = <io.vertx.core.dns.DnsResponseCode: io.vertx.core.dns.DnsResponseCode NOERROR>;
if v4 != v5 goto label7;
v6 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.vertx.core.dns.impl.DnsClientImpl this$0>;
v7 = v6.<io.vertx.core.dns.impl.DnsClientImpl: io.netty.util.collection.LongObjectMap inProgressMap>;
v8 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.vertx.core.dns.impl.DnsClientImpl this$0>;
v9 = interfaceinvoke v1.<io.netty.handler.codec.dns.DnsResponse: int id()>();
v10 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: java.lang.String name>;
v11 = specialinvoke v8.<io.vertx.core.dns.impl.DnsClientImpl: long dnsMessageId(int,java.lang.String)>(v9, v10);
interfaceinvoke v7.<io.netty.util.collection.LongObjectMap: java.lang.Object remove(long)>(v11);
v12 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: long timerID>;
v13 = v12 cmp 0L;
if v13 < 0 goto label1;
v14 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.vertx.core.dns.impl.DnsClientImpl this$0>;
v15 = v14.<io.vertx.core.dns.impl.DnsClientImpl: io.vertx.core.impl.VertxInternal vertx>;
v16 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: long timerID>;
interfaceinvoke v15.<io.vertx.core.impl.VertxInternal: boolean cancelTimer(long)>(v16);
label1:
v17 = <io.netty.handler.codec.dns.DnsSection: io.netty.handler.codec.dns.DnsSection ANSWER>;
v18 = interfaceinvoke v1.<io.netty.handler.codec.dns.DnsResponse: int count(io.netty.handler.codec.dns.DnsSection)>(v17);
v19 = new java.util.ArrayList;
specialinvoke v19.<java.util.ArrayList: void <init>(int)>(v18);
v20 = 0;
label2:
if v20 >= v18 goto label4;
v21 = <io.netty.handler.codec.dns.DnsSection: io.netty.handler.codec.dns.DnsSection ANSWER>;
v22 = interfaceinvoke v1.<io.netty.handler.codec.dns.DnsResponse: io.netty.handler.codec.dns.DnsRecord recordAt(io.netty.handler.codec.dns.DnsSection,int)>(v21, v20);
v23 = staticinvoke <io.vertx.core.dns.impl.decoder.RecordDecoder: java.lang.Object decode(io.netty.handler.codec.dns.DnsRecord)>(v22);
v24 = interfaceinvoke v22.<io.netty.handler.codec.dns.DnsRecord: io.netty.handler.codec.dns.DnsRecordType type()>();
v25 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.netty.handler.codec.dns.DnsRecordType[] types>;
v26 = specialinvoke v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: boolean isRequestedType(io.netty.handler.codec.dns.DnsRecordType,io.netty.handler.codec.dns.DnsRecordType[])>(v24, v25);
if v26 == 0 goto label3;
interfaceinvoke v19.<java.util.List: boolean add(java.lang.Object)>(v23);
label3:
v20 = v20 + 1;
goto label2;
label4:
v27 = interfaceinvoke v19.<java.util.List: int size()>();
if v27 <= 0 goto label6;
v28 = interfaceinvoke v19.<java.util.List: java.lang.Object get(int)>(0);
v29 = v28 instanceof io.vertx.core.dns.impl.MxRecordImpl;
if v29 != 0 goto label5;
v30 = interfaceinvoke v19.<java.util.List: java.lang.Object get(int)>(0);
v31 = v30 instanceof io.vertx.core.dns.impl.SrvRecordImpl;
if v31 == 0 goto label6;
label5:
staticinvoke <java.util.Collections: void sort(java.util.List)>(v19);
label6:
v32 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.netty.util.concurrent.Promise promise>;
interfaceinvoke v32.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(v19);
goto label8;
label7:
v33 = new io.vertx.core.dns.DnsException;
specialinvoke v33.<io.vertx.core.dns.DnsException: void <init>(io.vertx.core.dns.DnsResponseCode)>(v4);
specialinvoke v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: void fail(java.lang.Throwable)>(v33);
label8:
return;
}
void run()
{
io.vertx.core.dns.impl.DnsClientImpl v1, v10, v15, v3, v8;
io.vertx.core.dns.impl.DnsClientImpl$Query v0;
io.vertx.core.dns.DnsClientOptions v11;
long v12, v14, v7;
io.netty.channel.socket.DatagramChannel v16;
io.netty.channel.ChannelFutureListener v19;
int v5;
java.lang.String v6;
io.netty.util.collection.LongObjectMap v2;
io.vertx.core.impl.VertxInternal v9;
io.netty.handler.codec.dns.DatagramDnsQuery v17, v4;
io.netty.channel.ChannelFuture v18;
io.vertx.core.Handler v13;
v0 := @this: io.vertx.core.dns.impl.DnsClientImpl$Query;
v1 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.vertx.core.dns.impl.DnsClientImpl this$0>;
v2 = v1.<io.vertx.core.dns.impl.DnsClientImpl: io.netty.util.collection.LongObjectMap inProgressMap>;
v3 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.vertx.core.dns.impl.DnsClientImpl this$0>;
v4 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.netty.handler.codec.dns.DatagramDnsQuery msg>;
v5 = virtualinvoke v4.<io.netty.handler.codec.dns.DatagramDnsQuery: int id()>();
v6 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: java.lang.String name>;
v7 = specialinvoke v3.<io.vertx.core.dns.impl.DnsClientImpl: long dnsMessageId(int,java.lang.String)>(v5, v6);
interfaceinvoke v2.<io.netty.util.collection.LongObjectMap: java.lang.Object put(long,java.lang.Object)>(v7, v0);
v8 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.vertx.core.dns.impl.DnsClientImpl this$0>;
v9 = v8.<io.vertx.core.dns.impl.DnsClientImpl: io.vertx.core.impl.VertxInternal vertx>;
v10 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.vertx.core.dns.impl.DnsClientImpl this$0>;
v11 = v10.<io.vertx.core.dns.impl.DnsClientImpl: io.vertx.core.dns.DnsClientOptions options>;
v12 = virtualinvoke v11.<io.vertx.core.dns.DnsClientOptions: long getQueryTimeout()>();
v13 = staticinvoke <io.vertx.core.dns.impl.DnsClientImpl$Query$lambda_run_1__930: io.vertx.core.Handler bootstrap$(io.vertx.core.dns.impl.DnsClientImpl$Query)>(v0);
v14 = interfaceinvoke v9.<io.vertx.core.impl.VertxInternal: long setTimer(long,io.vertx.core.Handler)>(v12, v13);
v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: long timerID> = v14;
v15 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.vertx.core.dns.impl.DnsClientImpl this$0>;
v16 = v15.<io.vertx.core.dns.impl.DnsClientImpl: io.netty.channel.socket.DatagramChannel channel>;
v17 = v0.<io.vertx.core.dns.impl.DnsClientImpl$Query: io.netty.handler.codec.dns.DatagramDnsQuery msg>;
v18 = interfaceinvoke v16.<io.netty.channel.socket.DatagramChannel: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)>(v17);
v19 = staticinvoke <io.vertx.core.dns.impl.DnsClientImpl$Query$lambda_run_2__931: io.netty.channel.ChannelFutureListener bootstrap$(io.vertx.core.dns.impl.DnsClientImpl$Query)>(v0);
interfaceinvoke v18.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v19);
return;
}
private boolean isRequestedType(io.netty.handler.codec.dns.DnsRecordType, io.netty.handler.codec.dns.DnsRecordType[])
{
io.netty.handler.codec.dns.DnsRecordType v1, v5;
io.vertx.core.dns.impl.DnsClientImpl$Query v0;
int v3, v4;
io.netty.handler.codec.dns.DnsRecordType[] v2;
boolean v6;
v0 := @this: io.vertx.core.dns.impl.DnsClientImpl$Query;
v1 := @parameter0: io.netty.handler.codec.dns.DnsRecordType;
v2 := @parameter1: io.netty.handler.codec.dns.DnsRecordType[];
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label3;
v5 = v2[v4];
v6 = virtualinvoke v5.<io.netty.handler.codec.dns.DnsRecordType: boolean equals(java.lang.Object)>(v1);
if v6 == 0 goto label2;
return 1;
label2:
v4 = v4 + 1;
goto label1;
label3:
return 0;
}
}