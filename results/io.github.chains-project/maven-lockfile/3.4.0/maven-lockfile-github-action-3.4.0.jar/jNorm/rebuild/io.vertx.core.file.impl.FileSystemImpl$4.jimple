class io.vertx.core.file.impl.FileSystemImpl$4 extends io.vertx.core.file.impl.FileSystemImpl$BlockingAction
{
final java.lang.String val$p;
final long val$len;
final io.vertx.core.file.impl.FileSystemImpl this$0;
void <init>(io.vertx.core.file.impl.FileSystemImpl, java.lang.String, long)
{
io.vertx.core.file.impl.FileSystemImpl v1;
io.vertx.core.file.impl.FileSystemImpl$4 v0;
long v3;
java.lang.String v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl$4;
v1 := @parameter0: io.vertx.core.file.impl.FileSystemImpl;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: long;
v0.<io.vertx.core.file.impl.FileSystemImpl$4: io.vertx.core.file.impl.FileSystemImpl this$0> = v1;
v0.<io.vertx.core.file.impl.FileSystemImpl$4: java.lang.String val$p> = v2;
v0.<io.vertx.core.file.impl.FileSystemImpl$4: long val$len> = v3;
specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: void <init>(io.vertx.core.file.impl.FileSystemImpl)>(v1);
return;
}
public java.lang.Void perform()
{
java.lang.Throwable v17;
java.io.RandomAccessFile v15;
io.vertx.core.file.impl.FileSystemImpl$4 v0;
java.lang.String[] v9;
long v16, v6;
io.vertx.core.file.FileSystemException v13, v19, v8;
byte v7;
java.lang.String v14, v20, v21, v3, v5;
java.nio.file.Path v10;
boolean v12;
io.vertx.core.impl.VertxInternal v2;
java.nio.file.LinkOption[] v11;
java.io.IOException v18;
java.io.File v4;
io.vertx.core.file.impl.FileSystemImpl v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl$4;
label1:
v1 = v0.<io.vertx.core.file.impl.FileSystemImpl$4: io.vertx.core.file.impl.FileSystemImpl this$0>;
v2 = v1.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.impl.VertxInternal vertx>;
v3 = v0.<io.vertx.core.file.impl.FileSystemImpl$4: java.lang.String val$p>;
v4 = interfaceinvoke v2.<io.vertx.core.impl.VertxInternal: java.io.File resolveFile(java.lang.String)>(v3);
v5 = virtualinvoke v4.<java.io.File: java.lang.String getAbsolutePath()>();
v6 = v0.<io.vertx.core.file.impl.FileSystemImpl$4: long val$len>;
v7 = v6 cmp 0L;
if v7 >= 0 goto label2;
v8 = new io.vertx.core.file.FileSystemException;
specialinvoke v8.<io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>("Cannot truncate file to size < 0");
throw v8;
label2:
v9 = newarray (java.lang.String)[0];
v10 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(v5, v9);
v11 = newarray (java.nio.file.LinkOption)[0];
v12 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(v10, v11);
if v12 != 0 goto label3;
v13 = new io.vertx.core.file.FileSystemException;
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot truncate file \u0001. Does not exist");
specialinvoke v13.<io.vertx.core.file.FileSystemException: void <init>(java.lang.String)>(v14);
throw v13;
label3:
v15 = new java.io.RandomAccessFile;
specialinvoke v15.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(v5, "rw");
label4:
v16 = v0.<io.vertx.core.file.impl.FileSystemImpl$4: long val$len>;
virtualinvoke v15.<java.io.RandomAccessFile: void setLength(long)>(v16);
label5:
virtualinvoke v15.<java.io.RandomAccessFile: void close()>();
goto label8;
label6:
v17 := @caughtexception;
throw v17;
label7:
v18 := @caughtexception;
v19 = new io.vertx.core.file.FileSystemException;
v20 = v0.<io.vertx.core.file.impl.FileSystemImpl$4: java.lang.String val$p>;
v21 = staticinvoke <io.vertx.core.file.impl.FileSystemImpl: java.lang.String getFileAccessErrorMessage(java.lang.String,java.lang.String)>("truncate", v20);
specialinvoke v19.<io.vertx.core.file.FileSystemException: void <init>(java.lang.String,java.lang.Throwable)>(v21, v18);
throw v19;
label8:
return null;
catch java.lang.Throwable from label4 to label5 with label6;
catch java.io.IOException from label1 to label7 with label7;
}
}