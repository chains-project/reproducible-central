public abstract class io.vertx.core.file.impl.FileSystemImpl$BlockingAction extends java.lang.Object implements io.vertx.core.Handler
{
protected final io.vertx.core.impl.ContextInternal context;
final io.vertx.core.file.impl.FileSystemImpl this$0;
protected void <init>(io.vertx.core.file.impl.FileSystemImpl)
{
io.vertx.core.file.impl.FileSystemImpl v1;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v0;
io.vertx.core.impl.VertxInternal v2;
io.vertx.core.impl.ContextInternal v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl$BlockingAction;
v1 := @parameter0: io.vertx.core.file.impl.FileSystemImpl;
v0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.file.impl.FileSystemImpl this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = v1.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.impl.VertxInternal vertx>;
v3 = interfaceinvoke v2.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.impl.ContextInternal context> = v3;
return;
}
public io.vertx.core.Future run()
{
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v0;
io.vertx.core.impl.ContextInternal v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl$BlockingAction;
v1 = v0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.impl.ContextInternal context>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future executeBlockingInternal(io.vertx.core.Handler)>(v0);
return v2;
}
public void handle(io.vertx.core.Promise)
{
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v0;
io.vertx.core.Promise v1;
java.lang.Object v2;
java.lang.Exception v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl$BlockingAction;
v1 := @parameter0: io.vertx.core.Promise;
label1:
v2 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
interfaceinvoke v1.<io.vertx.core.Promise: void complete(java.lang.Object)>(v2);
label2:
goto label4;
label3:
v3 := @caughtexception;
interfaceinvoke v1.<io.vertx.core.Promise: void fail(java.lang.Throwable)>(v3);
label4:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
public abstract java.lang.Object perform();
}