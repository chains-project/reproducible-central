public class io.vertx.core.file.impl.FileSystemImpl extends java.lang.Object implements io.vertx.core.file.FileSystem
{
private static final io.vertx.core.file.CopyOptions DEFAULT_OPTIONS;
protected final io.vertx.core.impl.VertxInternal vertx;
public void <init>(io.vertx.core.impl.VertxInternal)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.impl.VertxInternal v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: io.vertx.core.impl.VertxInternal;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.impl.VertxInternal vertx> = v1;
return;
}
public io.vertx.core.file.FileSystem copy(java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.CopyOptions v4;
io.vertx.core.file.FileSystem v5;
java.lang.String v1, v2;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.CopyOptions DEFAULT_OPTIONS>;
v5 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.FileSystem copy(java.lang.String,java.lang.String,io.vertx.core.file.CopyOptions,io.vertx.core.Handler)>(v1, v2, v4, v3);
return v5;
}
public io.vertx.core.Future copy(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.CopyOptions v3;
java.lang.String v1, v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.CopyOptions DEFAULT_OPTIONS>;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future copy(java.lang.String,java.lang.String,io.vertx.core.file.CopyOptions)>(v1, v2, v3);
return v4;
}
public io.vertx.core.file.FileSystem copy(java.lang.String, java.lang.String, io.vertx.core.file.CopyOptions, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.CopyOptions v3;
java.lang.String v1, v2;
io.vertx.core.Handler v4;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.file.CopyOptions;
v4 := @parameter3: io.vertx.core.Handler;
v5 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future copy(java.lang.String,java.lang.String,io.vertx.core.file.CopyOptions)>(v1, v2, v3);
interfaceinvoke v5.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v4);
return v0;
}
public io.vertx.core.Future copy(java.lang.String, java.lang.String, io.vertx.core.file.CopyOptions)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v4;
io.vertx.core.file.CopyOptions v3;
java.lang.String v1, v2;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.file.CopyOptions;
v4 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction copyInternal(java.lang.String,java.lang.String,io.vertx.core.file.CopyOptions)>(v1, v2, v3);
v5 = virtualinvoke v4.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v5;
}
public io.vertx.core.file.FileSystem copyBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v4;
io.vertx.core.file.CopyOptions v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.CopyOptions DEFAULT_OPTIONS>;
v4 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction copyInternal(java.lang.String,java.lang.String,io.vertx.core.file.CopyOptions)>(v1, v2, v3);
virtualinvoke v4.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem copyRecursive(java.lang.String, java.lang.String, boolean, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1, v2;
io.vertx.core.Handler v4;
io.vertx.core.Future v5;
boolean v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v4 := @parameter3: io.vertx.core.Handler;
v5 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future copyRecursive(java.lang.String,java.lang.String,boolean)>(v1, v2, v3);
interfaceinvoke v5.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v4);
return v0;
}
public io.vertx.core.Future copyRecursive(java.lang.String, java.lang.String, boolean)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v4;
java.lang.String v1, v2;
io.vertx.core.Future v5;
boolean v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v4 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction copyRecursiveInternal(java.lang.String,java.lang.String,boolean)>(v1, v2, v3);
v5 = virtualinvoke v4.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v5;
}
public io.vertx.core.file.FileSystem copyRecursiveBlocking(java.lang.String, java.lang.String, boolean)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v4;
java.lang.String v1, v2;
boolean v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v4 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction copyRecursiveInternal(java.lang.String,java.lang.String,boolean)>(v1, v2, v3);
virtualinvoke v4.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem move(java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.CopyOptions v4;
io.vertx.core.file.FileSystem v5;
java.lang.String v1, v2;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.CopyOptions DEFAULT_OPTIONS>;
v5 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.FileSystem move(java.lang.String,java.lang.String,io.vertx.core.file.CopyOptions,io.vertx.core.Handler)>(v1, v2, v4, v3);
return v5;
}
public io.vertx.core.Future move(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.CopyOptions v3;
java.lang.String v1, v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.CopyOptions DEFAULT_OPTIONS>;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future move(java.lang.String,java.lang.String,io.vertx.core.file.CopyOptions)>(v1, v2, v3);
return v4;
}
public io.vertx.core.file.FileSystem move(java.lang.String, java.lang.String, io.vertx.core.file.CopyOptions, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.CopyOptions v3;
java.lang.String v1, v2;
io.vertx.core.Handler v4;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.file.CopyOptions;
v4 := @parameter3: io.vertx.core.Handler;
v5 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future move(java.lang.String,java.lang.String,io.vertx.core.file.CopyOptions)>(v1, v2, v3);
interfaceinvoke v5.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v4);
return v0;
}
public io.vertx.core.Future move(java.lang.String, java.lang.String, io.vertx.core.file.CopyOptions)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v4;
io.vertx.core.file.CopyOptions v3;
java.lang.String v1, v2;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.file.CopyOptions;
v4 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction moveInternal(java.lang.String,java.lang.String,io.vertx.core.file.CopyOptions)>(v1, v2, v3);
v5 = virtualinvoke v4.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v5;
}
public io.vertx.core.file.FileSystem moveBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v4;
io.vertx.core.file.CopyOptions v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = <io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.CopyOptions DEFAULT_OPTIONS>;
v4 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction moveInternal(java.lang.String,java.lang.String,io.vertx.core.file.CopyOptions)>(v1, v2, v3);
virtualinvoke v4.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem truncate(java.lang.String, long, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
long v2;
java.lang.String v1;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 := @parameter2: io.vertx.core.Handler;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future truncate(java.lang.String,long)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.core.Future truncate(java.lang.String, long)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
long v2;
java.lang.String v1;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction truncateInternal(java.lang.String,long)>(v1, v2);
v4 = virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v4;
}
public io.vertx.core.file.FileSystem truncateBlocking(java.lang.String, long)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
long v2;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction truncateInternal(java.lang.String,long)>(v1, v2);
virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem chmod(java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1, v2;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future chmod(java.lang.String,java.lang.String)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.core.Future chmod(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction chmodInternal(java.lang.String,java.lang.String)>(v1, v2);
v4 = virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v4;
}
public io.vertx.core.file.FileSystem chmodBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction chmodInternal(java.lang.String,java.lang.String)>(v1, v2);
virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem chmodRecursive(java.lang.String, java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1, v2, v3;
io.vertx.core.Handler v4;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.vertx.core.Handler;
v5 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future chmodRecursive(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
interfaceinvoke v5.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v4);
return v0;
}
public io.vertx.core.Future chmodRecursive(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v4;
java.lang.String v1, v2, v3;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction chmodInternal(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = virtualinvoke v4.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v5;
}
public io.vertx.core.file.FileSystem chmodRecursiveBlocking(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v4;
java.lang.String v1, v2, v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction chmodInternal(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
virtualinvoke v4.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem chown(java.lang.String, java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1, v2, v3;
io.vertx.core.Handler v4;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.vertx.core.Handler;
v5 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future chown(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
interfaceinvoke v5.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v4);
return v0;
}
public io.vertx.core.Future chown(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v4;
java.lang.String v1, v2, v3;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction chownInternal(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = virtualinvoke v4.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v5;
}
public io.vertx.core.file.FileSystem chownBlocking(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v4;
java.lang.String v1, v2, v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction chownInternal(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
virtualinvoke v4.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem props(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future props(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return v0;
}
public io.vertx.core.Future props(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction propsInternal(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v3;
}
public io.vertx.core.file.FileProps propsBlocking(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction propsInternal(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v3;
}
public io.vertx.core.file.FileSystem lprops(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future lprops(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return v0;
}
public io.vertx.core.Future lprops(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction lpropsInternal(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v3;
}
public io.vertx.core.file.FileProps lpropsBlocking(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction lpropsInternal(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v3;
}
public io.vertx.core.file.FileSystem link(java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1, v2;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future link(java.lang.String,java.lang.String)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.core.Future link(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction linkInternal(java.lang.String,java.lang.String)>(v1, v2);
v4 = virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v4;
}
public io.vertx.core.file.FileSystem linkBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction linkInternal(java.lang.String,java.lang.String)>(v1, v2);
virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem symlink(java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1, v2;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future symlink(java.lang.String,java.lang.String)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.core.Future symlink(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction symlinkInternal(java.lang.String,java.lang.String)>(v1, v2);
v4 = virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v4;
}
public io.vertx.core.file.FileSystem symlinkBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction symlinkInternal(java.lang.String,java.lang.String)>(v1, v2);
virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem unlink(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future unlink(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return v0;
}
public io.vertx.core.Future unlink(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction unlinkInternal(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v3;
}
public io.vertx.core.file.FileSystem unlinkBlocking(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction unlinkInternal(java.lang.String)>(v1);
virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem readSymlink(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future readSymlink(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return v0;
}
public io.vertx.core.Future readSymlink(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction readSymlinkInternal(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v3;
}
public java.lang.String readSymlinkBlocking(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction readSymlinkInternal(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v3;
}
public io.vertx.core.file.FileSystem delete(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future delete(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return v0;
}
public io.vertx.core.Future delete(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction deleteInternal(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v3;
}
public io.vertx.core.file.FileSystem deleteBlocking(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction deleteInternal(java.lang.String)>(v1);
virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem deleteRecursive(java.lang.String, boolean, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
boolean v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 := @parameter2: io.vertx.core.Handler;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future deleteRecursive(java.lang.String,boolean)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.core.Future deleteRecursive(java.lang.String, boolean)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1;
io.vertx.core.Future v4;
boolean v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction deleteInternal(java.lang.String,boolean)>(v1, v2);
v4 = virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v4;
}
public io.vertx.core.file.FileSystem deleteRecursiveBlocking(java.lang.String, boolean)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1;
boolean v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction deleteInternal(java.lang.String,boolean)>(v1, v2);
virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem mkdir(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future mkdir(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return v0;
}
public io.vertx.core.Future mkdir(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction mkdirInternal(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v3;
}
public io.vertx.core.file.FileSystem mkdirBlocking(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction mkdirInternal(java.lang.String)>(v1);
virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem mkdirs(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future mkdirs(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return v0;
}
public io.vertx.core.Future mkdirs(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction mkdirInternal(java.lang.String,boolean)>(v1, 1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v3;
}
public io.vertx.core.file.FileSystem mkdirsBlocking(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction mkdirInternal(java.lang.String,boolean)>(v1, 1);
virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem mkdir(java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1, v2;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future mkdir(java.lang.String,java.lang.String)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.core.Future mkdir(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction mkdirInternal(java.lang.String,java.lang.String)>(v1, v2);
v4 = virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v4;
}
public io.vertx.core.file.FileSystem mkdirBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction mkdirInternal(java.lang.String,java.lang.String)>(v1, v2);
virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem mkdirs(java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1, v2;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future mkdirs(java.lang.String,java.lang.String)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.core.Future mkdirs(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction mkdirInternal(java.lang.String,java.lang.String,boolean)>(v1, v2, 1);
v4 = virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v4;
}
public io.vertx.core.file.FileSystem mkdirsBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction mkdirInternal(java.lang.String,java.lang.String,boolean)>(v1, v2, 1);
virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem readDir(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future readDir(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return v0;
}
public io.vertx.core.Future readDir(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction readDirInternal(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v3;
}
public java.util.List readDirBlocking(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction readDirInternal(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v3;
}
public io.vertx.core.file.FileSystem readDir(java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1, v2;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future readDir(java.lang.String,java.lang.String)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.core.Future readDir(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction readDirInternal(java.lang.String,java.lang.String)>(v1, v2);
v4 = virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v4;
}
public java.util.List readDirBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.Object v4;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction readDirInternal(java.lang.String,java.lang.String)>(v1, v2);
v4 = virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v4;
}
public io.vertx.core.file.FileSystem readFile(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future readFile(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return v0;
}
public io.vertx.core.Future readFile(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction readFileInternal(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v3;
}
public io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction readFileInternal(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v3;
}
public io.vertx.core.file.FileSystem writeFile(java.lang.String, io.vertx.core.buffer.Buffer, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.buffer.Buffer v2;
java.lang.String v1;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.buffer.Buffer;
v3 := @parameter2: io.vertx.core.Handler;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future writeFile(java.lang.String,io.vertx.core.buffer.Buffer)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.core.Future writeFile(java.lang.String, io.vertx.core.buffer.Buffer)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
io.vertx.core.buffer.Buffer v2;
java.lang.String v1;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.buffer.Buffer;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction writeFileInternal(java.lang.String,io.vertx.core.buffer.Buffer)>(v1, v2);
v4 = virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v4;
}
public io.vertx.core.file.FileSystem writeFileBlocking(java.lang.String, io.vertx.core.buffer.Buffer)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
io.vertx.core.buffer.Buffer v2;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.buffer.Buffer;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction writeFileInternal(java.lang.String,io.vertx.core.buffer.Buffer)>(v1, v2);
virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem open(java.lang.String, io.vertx.core.file.OpenOptions, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.OpenOptions v2;
java.lang.String v1;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.file.OpenOptions;
v3 := @parameter2: io.vertx.core.Handler;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future open(java.lang.String,io.vertx.core.file.OpenOptions)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.core.Future open(java.lang.String, io.vertx.core.file.OpenOptions)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
io.vertx.core.file.OpenOptions v2;
java.lang.String v1;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.file.OpenOptions;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction openInternal(java.lang.String,io.vertx.core.file.OpenOptions)>(v1, v2);
v4 = virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v4;
}
public io.vertx.core.file.AsyncFile openBlocking(java.lang.String, io.vertx.core.file.OpenOptions)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
io.vertx.core.file.OpenOptions v2;
java.lang.Object v4;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.file.OpenOptions;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction openInternal(java.lang.String,io.vertx.core.file.OpenOptions)>(v1, v2);
v4 = virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v4;
}
public io.vertx.core.file.FileSystem createFile(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future createFile(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return v0;
}
public io.vertx.core.Future createFile(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction createFileInternal(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v3;
}
public io.vertx.core.file.FileSystem createFileBlocking(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction createFileInternal(java.lang.String)>(v1);
virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem createFile(java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1, v2;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future createFile(java.lang.String,java.lang.String)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.core.Future createFile(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction createFileInternal(java.lang.String,java.lang.String)>(v1, v2);
v4 = virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v4;
}
public io.vertx.core.file.FileSystem createFileBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction createFileInternal(java.lang.String,java.lang.String)>(v1, v2);
virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v0;
}
public io.vertx.core.file.FileSystem exists(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future exists(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return v0;
}
public io.vertx.core.Future exists(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction existsInternal(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v3;
}
public boolean existsBlocking(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.Object v3;
java.lang.String v1;
boolean v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction existsInternal(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
v4 = virtualinvoke v3.<java.lang.Boolean: boolean booleanValue()>();
return v4;
}
public io.vertx.core.file.FileSystem fsProps(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future fsProps(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return v0;
}
public io.vertx.core.Future fsProps(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction fsPropsInternal(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v3;
}
public io.vertx.core.file.FileSystemProps fsPropsBlocking(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction fsPropsInternal(java.lang.String)>(v1);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v3;
}
public io.vertx.core.file.FileSystem createTempDirectory(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future createTempDirectory(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return v0;
}
public io.vertx.core.Future createTempDirectory(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction createTempDirectoryInternal(java.lang.String,java.lang.String,java.lang.String)>(null, v1, null);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v3;
}
public java.lang.String createTempDirectoryBlocking(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction createTempDirectoryInternal(java.lang.String,java.lang.String,java.lang.String)>(null, v1, null);
v3 = virtualinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v3;
}
public io.vertx.core.file.FileSystem createTempDirectory(java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1, v2;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future createTempDirectory(java.lang.String,java.lang.String)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.core.Future createTempDirectory(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction createTempDirectoryInternal(java.lang.String,java.lang.String,java.lang.String)>(null, v1, v2);
v4 = virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v4;
}
public java.lang.String createTempDirectoryBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.Object v4;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction createTempDirectoryInternal(java.lang.String,java.lang.String,java.lang.String)>(null, v1, v2);
v4 = virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v4;
}
public io.vertx.core.file.FileSystem createTempDirectory(java.lang.String, java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1, v2, v3;
io.vertx.core.Handler v4;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.vertx.core.Handler;
v5 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future createTempDirectory(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
interfaceinvoke v5.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v4);
return v0;
}
public io.vertx.core.Future createTempDirectory(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v4;
java.lang.String v1, v2, v3;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction createTempDirectoryInternal(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = virtualinvoke v4.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v5;
}
public java.lang.String createTempDirectoryBlocking(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v4;
java.lang.Object v5;
java.lang.String v1, v2, v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction createTempDirectoryInternal(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = virtualinvoke v4.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v5;
}
public io.vertx.core.file.FileSystem createTempFile(java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1, v2;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future createTempFile(java.lang.String,java.lang.String)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.core.Future createTempFile(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction createTempFileInternal(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, v1, v2, null);
v4 = virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v4;
}
public java.lang.String createTempFileBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.Object v4;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction createTempFileInternal(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, v1, v2, null);
v4 = virtualinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v4;
}
public io.vertx.core.file.FileSystem createTempFile(java.lang.String, java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1, v2, v3;
io.vertx.core.Handler v4;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.vertx.core.Handler;
v5 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future createTempFile(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
interfaceinvoke v5.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v4);
return v0;
}
public io.vertx.core.Future createTempFile(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v4;
java.lang.String v1, v2, v3;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction createTempFileInternal(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, v1, v2, v3);
v5 = virtualinvoke v4.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v5;
}
public java.lang.String createTempFileBlocking(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v4;
java.lang.Object v5;
java.lang.String v1, v2, v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction createTempFileInternal(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, v1, v2, v3);
v5 = virtualinvoke v4.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v5;
}
public io.vertx.core.file.FileSystem createTempFile(java.lang.String, java.lang.String, java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1, v2, v3, v4;
io.vertx.core.Handler v5;
io.vertx.core.Future v6;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: io.vertx.core.Handler;
v6 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.Future createTempFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3, v4);
interfaceinvoke v6.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v5);
return v0;
}
public io.vertx.core.Future createTempFile(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v5;
java.lang.String v1, v2, v3, v4;
io.vertx.core.Future v6;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction createTempFileInternal(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3, v4);
v6 = virtualinvoke v5.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: io.vertx.core.Future run()>();
return v6;
}
public java.lang.String createTempFileBlocking(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v5;
java.lang.Object v6;
java.lang.String v1, v2, v3, v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction createTempFileInternal(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3, v4);
v6 = virtualinvoke v5.<io.vertx.core.file.impl.FileSystemImpl$BlockingAction: java.lang.Object perform()>();
return v6;
}
static java.lang.String getFileAccessErrorMessage(java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unable to \u0001 file at path \'\u0001\'");
return v2;
}
static java.lang.String getFolderAccessErrorMessage(java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unable to \u0001 folder at path \'\u0001\'");
return v2;
}
static java.lang.String getFileCopyErrorMessage(java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <io.vertx.core.file.impl.FileSystemImpl: java.lang.String getFileDualOperationErrorMessage(java.lang.String,java.lang.String,java.lang.String)>("copy", v0, v1);
return v2;
}
static java.lang.String getFileMoveErrorMessage(java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <io.vertx.core.file.impl.FileSystemImpl: java.lang.String getFileDualOperationErrorMessage(java.lang.String,java.lang.String,java.lang.String)>("move", v0, v1);
return v2;
}
static java.lang.String getFileDualOperationErrorMessage(java.lang.String, java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>(v0, v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unable to \u0001 file from \'\u0001\' to \'\u0001\'");
return v3;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction copyInternal(java.lang.String, java.lang.String, io.vertx.core.file.CopyOptions)
{
java.nio.file.CopyOption[] v5;
java.lang.Object[] v6;
io.vertx.core.file.impl.FileSystemImpl$1 v7;
java.util.Set v4;
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.CopyOptions v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.file.CopyOptions;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
virtualinvoke v3.<java.lang.Object: java.lang.Class getClass()>();
v4 = staticinvoke <io.vertx.core.file.impl.FileSystemImpl: java.util.Set toCopyOptionSet(io.vertx.core.file.CopyOptions)>(v3);
v5 = newarray (java.nio.file.CopyOption)[0];
v6 = interfaceinvoke v4.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(v5);
v7 = new io.vertx.core.file.impl.FileSystemImpl$1;
specialinvoke v7.<io.vertx.core.file.impl.FileSystemImpl$1: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String,java.lang.String,java.nio.file.CopyOption[])>(v0, v1, v2, v6);
return v7;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction copyRecursiveInternal(java.lang.String, java.lang.String, boolean)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$2 v4;
java.lang.String v1, v2;
boolean v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v4 = new io.vertx.core.file.impl.FileSystemImpl$2;
specialinvoke v4.<io.vertx.core.file.impl.FileSystemImpl$2: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String,java.lang.String,boolean)>(v0, v1, v2, v3);
return v4;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction moveInternal(java.lang.String, java.lang.String, io.vertx.core.file.CopyOptions)
{
java.nio.file.CopyOption[] v5;
java.lang.Object[] v6;
io.vertx.core.file.impl.FileSystemImpl$3 v7;
java.util.Set v4;
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.CopyOptions v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.file.CopyOptions;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
virtualinvoke v3.<java.lang.Object: java.lang.Class getClass()>();
v4 = staticinvoke <io.vertx.core.file.impl.FileSystemImpl: java.util.Set toCopyOptionSet(io.vertx.core.file.CopyOptions)>(v3);
v5 = newarray (java.nio.file.CopyOption)[0];
v6 = interfaceinvoke v4.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(v5);
v7 = new io.vertx.core.file.impl.FileSystemImpl$3;
specialinvoke v7.<io.vertx.core.file.impl.FileSystemImpl$3: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String,java.lang.String,java.nio.file.CopyOption[])>(v0, v1, v2, v6);
return v7;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction truncateInternal(java.lang.String, long)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$4 v3;
long v2;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v3 = new io.vertx.core.file.impl.FileSystemImpl$4;
specialinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$4: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String,long)>(v0, v1, v2);
return v3;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction chmodInternal(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction chmodInternal(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, null);
return v3;
}
protected io.vertx.core.file.impl.FileSystemImpl$BlockingAction chmodInternal(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$5 v6;
java.util.Set v4, v5;
java.lang.String v1, v2, v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v4 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: java.util.Set fromString(java.lang.String)>(v2);
if v3 != null goto label1;
v5 = null;
goto label2;
label1:
v5 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: java.util.Set fromString(java.lang.String)>(v3);
label2:
v6 = new io.vertx.core.file.impl.FileSystemImpl$5;
specialinvoke v6.<io.vertx.core.file.impl.FileSystemImpl$5: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String,java.util.Set,java.util.Set)>(v0, v1, v5, v4);
return v6;
}
protected io.vertx.core.file.impl.FileSystemImpl$BlockingAction chownInternal(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$6 v4;
java.lang.String v1, v2, v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v4 = new io.vertx.core.file.impl.FileSystemImpl$6;
specialinvoke v4.<io.vertx.core.file.impl.FileSystemImpl$6: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String,java.lang.String,java.lang.String)>(v0, v1, v2, v3);
return v4;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction propsInternal(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction props(java.lang.String,boolean)>(v1, 1);
return v2;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction lpropsInternal(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction props(java.lang.String,boolean)>(v1, 0);
return v2;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction props(java.lang.String, boolean)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$7 v3;
java.lang.String v1;
boolean v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v3 = new io.vertx.core.file.impl.FileSystemImpl$7;
specialinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$7: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String,boolean)>(v0, v1, v2);
return v3;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction linkInternal(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction link(java.lang.String,java.lang.String,boolean)>(v1, v2, 0);
return v3;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction symlinkInternal(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction link(java.lang.String,java.lang.String,boolean)>(v1, v2, 1);
return v3;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction link(java.lang.String, java.lang.String, boolean)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$8 v4;
java.lang.String v1, v2;
boolean v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v4 = new io.vertx.core.file.impl.FileSystemImpl$8;
specialinvoke v4.<io.vertx.core.file.impl.FileSystemImpl$8: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String,java.lang.String,boolean)>(v0, v1, v2, v3);
return v4;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction unlinkInternal(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction deleteInternal(java.lang.String)>(v1);
return v2;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction readSymlinkInternal(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1;
io.vertx.core.file.impl.FileSystemImpl$9 v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = new io.vertx.core.file.impl.FileSystemImpl$9;
specialinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$9: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String)>(v0, v1);
return v2;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction deleteInternal(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction deleteInternal(java.lang.String,boolean)>(v1, 0);
return v2;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction deleteInternal(java.lang.String, boolean)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1;
io.vertx.core.file.impl.FileSystemImpl$10 v3;
boolean v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v3 = new io.vertx.core.file.impl.FileSystemImpl$10;
specialinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$10: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String,boolean)>(v0, v1, v2);
return v3;
}
public static void delete(java.nio.file.Path, boolean) throws java.io.IOException
{
java.nio.file.Path v0;
boolean v1;
io.vertx.core.file.impl.FileSystemImpl$11 v2;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: boolean;
if v1 == 0 goto label1;
v2 = new io.vertx.core.file.impl.FileSystemImpl$11;
specialinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$11: void <init>()>();
staticinvoke <java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.nio.file.FileVisitor)>(v0, v2);
goto label2;
label1:
staticinvoke <java.nio.file.Files: void delete(java.nio.file.Path)>(v0);
label2:
return;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction mkdirInternal(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction mkdirInternal(java.lang.String,java.lang.String,boolean)>(v1, null, 0);
return v2;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction mkdirInternal(java.lang.String, boolean)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1;
boolean v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction mkdirInternal(java.lang.String,java.lang.String,boolean)>(v1, null, v2);
return v3;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction mkdirInternal(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction mkdirInternal(java.lang.String,java.lang.String,boolean)>(v1, v2, 0);
return v3;
}
protected io.vertx.core.file.impl.FileSystemImpl$BlockingAction mkdirInternal(java.lang.String, java.lang.String, boolean)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.util.Set v5;
java.nio.file.attribute.FileAttribute v4;
java.lang.String v1, v2;
io.vertx.core.file.impl.FileSystemImpl$12 v6;
boolean v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 != null goto label1;
v4 = null;
goto label2;
label1:
v5 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: java.util.Set fromString(java.lang.String)>(v2);
v4 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: java.nio.file.attribute.FileAttribute asFileAttribute(java.util.Set)>(v5);
label2:
v6 = new io.vertx.core.file.impl.FileSystemImpl$12;
specialinvoke v6.<io.vertx.core.file.impl.FileSystemImpl$12: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String,boolean,java.nio.file.attribute.FileAttribute)>(v0, v1, v3, v4);
return v6;
}
protected io.vertx.core.file.impl.FileSystemImpl$BlockingAction createTempDirectoryInternal(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.util.Set v5;
java.nio.file.attribute.FileAttribute v4;
java.lang.String v1, v2, v3;
io.vertx.core.file.impl.FileSystemImpl$13 v6;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
if v3 != null goto label1;
v4 = null;
goto label2;
label1:
v5 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: java.util.Set fromString(java.lang.String)>(v3);
v4 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: java.nio.file.attribute.FileAttribute asFileAttribute(java.util.Set)>(v5);
label2:
v6 = new io.vertx.core.file.impl.FileSystemImpl$13;
specialinvoke v6.<io.vertx.core.file.impl.FileSystemImpl$13: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String,java.nio.file.attribute.FileAttribute,java.lang.String)>(v0, v1, v4, v2);
return v6;
}
protected io.vertx.core.file.impl.FileSystemImpl$BlockingAction createTempFileInternal(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl$14 v7;
java.util.Set v6;
java.nio.file.attribute.FileAttribute v5;
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1, v2, v3, v4;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
if v4 != null goto label1;
v5 = null;
goto label2;
label1:
v6 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: java.util.Set fromString(java.lang.String)>(v4);
v5 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: java.nio.file.attribute.FileAttribute asFileAttribute(java.util.Set)>(v6);
label2:
v7 = new io.vertx.core.file.impl.FileSystemImpl$14;
specialinvoke v7.<io.vertx.core.file.impl.FileSystemImpl$14: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String,java.nio.file.attribute.FileAttribute,java.lang.String,java.lang.String)>(v0, v1, v5, v2, v3);
return v7;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction readDirInternal(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction readDirInternal(java.lang.String,java.lang.String)>(v1, null);
return v2;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction readDirInternal(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$15 v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v3 = new io.vertx.core.file.impl.FileSystemImpl$15;
specialinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$15: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String,java.lang.String)>(v0, v1, v2);
return v3;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction readFileInternal(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$16 v2;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = new io.vertx.core.file.impl.FileSystemImpl$16;
specialinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$16: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String)>(v0, v1);
return v2;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction writeFileInternal(java.lang.String, io.vertx.core.buffer.Buffer)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$17 v3;
io.vertx.core.buffer.Buffer v2;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.buffer.Buffer;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v3 = new io.vertx.core.file.impl.FileSystemImpl$17;
specialinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$17: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String,io.vertx.core.buffer.Buffer)>(v0, v1, v2);
return v3;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction openInternal(java.lang.String, io.vertx.core.file.OpenOptions)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.OpenOptions v2;
io.vertx.core.file.impl.FileSystemImpl$18 v3;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.file.OpenOptions;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v3 = new io.vertx.core.file.impl.FileSystemImpl$18;
specialinvoke v3.<io.vertx.core.file.impl.FileSystemImpl$18: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String,io.vertx.core.file.OpenOptions)>(v0, v1, v2);
return v3;
}
protected io.vertx.core.file.AsyncFile doOpen(java.lang.String, io.vertx.core.file.OpenOptions, io.vertx.core.impl.ContextInternal)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.AsyncFileImpl v4;
io.vertx.core.impl.VertxInternal v5;
io.vertx.core.file.OpenOptions v2;
io.vertx.core.impl.ContextInternal v3;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.file.OpenOptions;
v3 := @parameter2: io.vertx.core.impl.ContextInternal;
v4 = new io.vertx.core.file.impl.AsyncFileImpl;
v5 = v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.impl.VertxInternal vertx>;
specialinvoke v4.<io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)>(v5, v1, v2, v3);
return v4;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction createFileInternal(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v2;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction createFileInternal(java.lang.String,java.lang.String)>(v1, null);
return v2;
}
protected io.vertx.core.file.impl.FileSystemImpl$BlockingAction createFileInternal(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$19 v5;
java.util.Set v4;
java.nio.file.attribute.FileAttribute v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 != null goto label1;
v3 = null;
goto label2;
label1:
v4 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: java.util.Set fromString(java.lang.String)>(v2);
v3 = staticinvoke <java.nio.file.attribute.PosixFilePermissions: java.nio.file.attribute.FileAttribute asFileAttribute(java.util.Set)>(v4);
label2:
v5 = new io.vertx.core.file.impl.FileSystemImpl$19;
specialinvoke v5.<io.vertx.core.file.impl.FileSystemImpl$19: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String,java.nio.file.attribute.FileAttribute)>(v0, v1, v3);
return v5;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction existsInternal(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
io.vertx.core.file.impl.FileSystemImpl$20 v2;
java.lang.String v1;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = new io.vertx.core.file.impl.FileSystemImpl$20;
specialinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$20: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String)>(v0, v1);
return v2;
}
private io.vertx.core.file.impl.FileSystemImpl$BlockingAction fsPropsInternal(java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl v0;
java.lang.String v1;
io.vertx.core.file.impl.FileSystemImpl$21 v2;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl;
v1 := @parameter0: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = new io.vertx.core.file.impl.FileSystemImpl$21;
specialinvoke v2.<io.vertx.core.file.impl.FileSystemImpl$21: void <init>(io.vertx.core.file.impl.FileSystemImpl,java.lang.String)>(v0, v1);
return v2;
}
static java.util.Set toCopyOptionSet(io.vertx.core.file.CopyOptions)
{
java.nio.file.StandardCopyOption v3, v5, v7;
java.util.HashSet v1;
java.nio.file.LinkOption v9;
io.vertx.core.file.CopyOptions v0;
boolean v2, v4, v6, v8;
v0 := @parameter0: io.vertx.core.file.CopyOptions;
v1 = new java.util.HashSet;
specialinvoke v1.<java.util.HashSet: void <init>()>();
v2 = virtualinvoke v0.<io.vertx.core.file.CopyOptions: boolean isReplaceExisting()>();
if v2 == 0 goto label1;
v3 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption REPLACE_EXISTING>;
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>(v3);
label1:
v4 = virtualinvoke v0.<io.vertx.core.file.CopyOptions: boolean isCopyAttributes()>();
if v4 == 0 goto label2;
v5 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption COPY_ATTRIBUTES>;
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>(v5);
label2:
v6 = virtualinvoke v0.<io.vertx.core.file.CopyOptions: boolean isAtomicMove()>();
if v6 == 0 goto label3;
v7 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption ATOMIC_MOVE>;
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>(v7);
label3:
v8 = virtualinvoke v0.<io.vertx.core.file.CopyOptions: boolean isNofollowLinks()>();
if v8 == 0 goto label4;
v9 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>(v9);
label4:
return v1;
}
static void <clinit>()
{
io.vertx.core.file.CopyOptions v0;
v0 = new io.vertx.core.file.CopyOptions;
specialinvoke v0.<io.vertx.core.file.CopyOptions: void <init>()>();
<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.CopyOptions DEFAULT_OPTIONS> = v0;
return;
}
}