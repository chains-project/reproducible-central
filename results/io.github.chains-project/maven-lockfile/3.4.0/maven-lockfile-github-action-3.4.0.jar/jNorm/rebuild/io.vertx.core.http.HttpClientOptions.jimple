public class io.vertx.core.http.HttpClientOptions extends io.vertx.core.net.ClientOptionsBase
{
public static final int DEFAULT_MAX_POOL_SIZE;
public static final int DEFAULT_HTTP2_MAX_POOL_SIZE;
public static final int DEFAULT_HTTP2_MULTIPLEXING_LIMIT;
public static final int DEFAULT_HTTP2_CONNECTION_WINDOW_SIZE;
public static final int DEFAULT_HTTP2_KEEP_ALIVE_TIMEOUT;
public static final boolean DEFAULT_KEEP_ALIVE;
public static final boolean DEFAULT_PIPELINING;
public static final int DEFAULT_PIPELINING_LIMIT;
public static final int DEFAULT_KEEP_ALIVE_TIMEOUT;
public static final boolean DEFAULT_TRY_USE_COMPRESSION;
public static final boolean DEFAULT_VERIFY_HOST;
public static final int DEFAULT_MAX_WEBSOCKET_FRAME_SIZE;
public static final int DEFAULT_MAX_WEBSOCKET_MESSAGE_SIZE;
public static final int DEFAULT_MAX_WEBSOCKETS;
public static final java.lang.String DEFAULT_DEFAULT_HOST;
public static final int DEFAULT_DEFAULT_PORT;
public static final io.vertx.core.http.HttpVersion DEFAULT_PROTOCOL_VERSION;
public static final int DEFAULT_MAX_CHUNK_SIZE;
public static final int DEFAULT_MAX_INITIAL_LINE_LENGTH;
public static final int DEFAULT_MAX_HEADER_SIZE;
public static final int DEFAULT_MAX_WAIT_QUEUE_SIZE;
public static final java.util.List DEFAULT_ALPN_VERSIONS;
public static final boolean DEFAULT_HTTP2_CLEAR_TEXT_UPGRADE;
public static final boolean DEFAULT_HTTP2_CLEAR_TEXT_UPGRADE_WITH_PREFLIGHT_REQUEST;
public static final boolean DEFAULT_SEND_UNMASKED_FRAMES;
public static final int DEFAULT_MAX_REDIRECTS;
public static final boolean DEFAULT_FORCE_SNI;
public static final int DEFAULT_DECODER_INITIAL_BUFFER_SIZE;
public static final boolean DEFAULT_TRY_USE_PER_FRAME_WEBSOCKET_COMPRESSION;
public static final boolean DEFAULT_TRY_USE_PER_MESSAGE_WEBSOCKET_COMPRESSION;
public static final int DEFAULT_WEBSOCKET_COMPRESSION_LEVEL;
public static final boolean DEFAULT_WEBSOCKET_ALLOW_CLIENT_NO_CONTEXT;
public static final boolean DEFAULT_WEBSOCKET_REQUEST_SERVER_NO_CONTEXT;
public static final int DEFAULT_POOL_CLEANER_PERIOD;
public static final int DEFAULT_POOL_EVENT_LOOP_SIZE;
public static final int DEFAULT_WEBSOCKET_CLOSING_TIMEOUT;
public static final io.vertx.core.tracing.TracingPolicy DEFAULT_TRACING_POLICY;
public static final boolean DEFAULT_SHARED;
public static final java.lang.String DEFAULT_NAME;
private boolean verifyHost;
private int maxPoolSize;
private boolean keepAlive;
private int keepAliveTimeout;
private int pipeliningLimit;
private boolean pipelining;
private int http2MaxPoolSize;
private int http2MultiplexingLimit;
private int http2ConnectionWindowSize;
private int http2KeepAliveTimeout;
private int poolCleanerPeriod;
private int poolEventLoopSize;
private boolean tryUseCompression;
private int maxWebSocketFrameSize;
private int maxWebSocketMessageSize;
private int maxWebSockets;
private java.lang.String defaultHost;
private int defaultPort;
private io.vertx.core.http.HttpVersion protocolVersion;
private int maxChunkSize;
private int maxInitialLineLength;
private int maxHeaderSize;
private int maxWaitQueueSize;
private io.vertx.core.http.Http2Settings initialSettings;
private java.util.List alpnVersions;
private boolean http2ClearTextUpgrade;
private boolean http2ClearTextUpgradeWithPreflightRequest;
private boolean sendUnmaskedFrames;
private int maxRedirects;
private boolean forceSni;
private int decoderInitialBufferSize;
private boolean tryUsePerFrameWebSocketCompression;
private boolean tryUsePerMessageWebSocketCompression;
private int webSocketCompressionLevel;
private boolean webSocketAllowClientNoContext;
private boolean webSocketRequestServerNoContext;
private int webSocketClosingTimeout;
private io.vertx.core.tracing.TracingPolicy tracingPolicy;
private boolean shared;
private java.lang.String name;
public void <init>()
{
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: void <init>()>();
v0.<io.vertx.core.http.HttpClientOptions: boolean verifyHost> = 1;
specialinvoke v0.<io.vertx.core.http.HttpClientOptions: void init()>();
return;
}
public void <init>(io.vertx.core.http.HttpClientOptions)
{
io.vertx.core.http.Http2Settings v23, v24, v25;
io.vertx.core.http.HttpVersion v18;
boolean v12, v2, v29, v30, v31, v33, v37, v38, v39, v4, v41, v44, v6;
java.util.List v26, v28;
java.util.ArrayList v27;
int v10, v11, v13, v14, v15, v17, v19, v20, v21, v22, v3, v32, v34, v35, v36, v40, v42, v5, v7, v8, v9;
io.vertx.core.http.HttpClientOptions v0, v1;
java.lang.String v16, v45;
io.vertx.core.tracing.TracingPolicy v43;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.vertx.core.http.HttpClientOptions;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: void <init>(io.vertx.core.net.ClientOptionsBase)>(v1);
v0.<io.vertx.core.http.HttpClientOptions: boolean verifyHost> = 1;
v2 = virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: boolean isVerifyHost()>();
v0.<io.vertx.core.http.HttpClientOptions: boolean verifyHost> = v2;
v3 = virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: int getMaxPoolSize()>();
v0.<io.vertx.core.http.HttpClientOptions: int maxPoolSize> = v3;
v4 = virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: boolean isKeepAlive()>();
v0.<io.vertx.core.http.HttpClientOptions: boolean keepAlive> = v4;
v5 = virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: int getKeepAliveTimeout()>();
v0.<io.vertx.core.http.HttpClientOptions: int keepAliveTimeout> = v5;
v6 = virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: boolean isPipelining()>();
v0.<io.vertx.core.http.HttpClientOptions: boolean pipelining> = v6;
v7 = virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: int getPipeliningLimit()>();
v0.<io.vertx.core.http.HttpClientOptions: int pipeliningLimit> = v7;
v8 = virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: int getHttp2MaxPoolSize()>();
v0.<io.vertx.core.http.HttpClientOptions: int http2MaxPoolSize> = v8;
v9 = v1.<io.vertx.core.http.HttpClientOptions: int http2MultiplexingLimit>;
v0.<io.vertx.core.http.HttpClientOptions: int http2MultiplexingLimit> = v9;
v10 = v1.<io.vertx.core.http.HttpClientOptions: int http2ConnectionWindowSize>;
v0.<io.vertx.core.http.HttpClientOptions: int http2ConnectionWindowSize> = v10;
v11 = virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: int getHttp2KeepAliveTimeout()>();
v0.<io.vertx.core.http.HttpClientOptions: int http2KeepAliveTimeout> = v11;
v12 = virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: boolean isTryUseCompression()>();
v0.<io.vertx.core.http.HttpClientOptions: boolean tryUseCompression> = v12;
v13 = v1.<io.vertx.core.http.HttpClientOptions: int maxWebSocketFrameSize>;
v0.<io.vertx.core.http.HttpClientOptions: int maxWebSocketFrameSize> = v13;
v14 = v1.<io.vertx.core.http.HttpClientOptions: int maxWebSocketMessageSize>;
v0.<io.vertx.core.http.HttpClientOptions: int maxWebSocketMessageSize> = v14;
v15 = v1.<io.vertx.core.http.HttpClientOptions: int maxWebSockets>;
v0.<io.vertx.core.http.HttpClientOptions: int maxWebSockets> = v15;
v16 = v1.<io.vertx.core.http.HttpClientOptions: java.lang.String defaultHost>;
v0.<io.vertx.core.http.HttpClientOptions: java.lang.String defaultHost> = v16;
v17 = v1.<io.vertx.core.http.HttpClientOptions: int defaultPort>;
v0.<io.vertx.core.http.HttpClientOptions: int defaultPort> = v17;
v18 = v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpVersion protocolVersion>;
v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpVersion protocolVersion> = v18;
v19 = v1.<io.vertx.core.http.HttpClientOptions: int maxChunkSize>;
v0.<io.vertx.core.http.HttpClientOptions: int maxChunkSize> = v19;
v20 = virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: int getMaxInitialLineLength()>();
v0.<io.vertx.core.http.HttpClientOptions: int maxInitialLineLength> = v20;
v21 = virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: int getMaxHeaderSize()>();
v0.<io.vertx.core.http.HttpClientOptions: int maxHeaderSize> = v21;
v22 = v1.<io.vertx.core.http.HttpClientOptions: int maxWaitQueueSize>;
v0.<io.vertx.core.http.HttpClientOptions: int maxWaitQueueSize> = v22;
v23 = v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.Http2Settings initialSettings>;
if v23 == null goto label1;
v24 = new io.vertx.core.http.Http2Settings;
v25 = v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.Http2Settings initialSettings>;
specialinvoke v24.<io.vertx.core.http.Http2Settings: void <init>(io.vertx.core.http.Http2Settings)>(v25);
goto label2;
label1:
v24 = null;
label2:
v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.Http2Settings initialSettings> = v24;
v26 = v1.<io.vertx.core.http.HttpClientOptions: java.util.List alpnVersions>;
if v26 == null goto label3;
v27 = new java.util.ArrayList;
v28 = v1.<io.vertx.core.http.HttpClientOptions: java.util.List alpnVersions>;
specialinvoke v27.<java.util.ArrayList: void <init>(java.util.Collection)>(v28);
goto label4;
label3:
v27 = null;
label4:
v0.<io.vertx.core.http.HttpClientOptions: java.util.List alpnVersions> = v27;
v29 = v1.<io.vertx.core.http.HttpClientOptions: boolean http2ClearTextUpgrade>;
v0.<io.vertx.core.http.HttpClientOptions: boolean http2ClearTextUpgrade> = v29;
v30 = v1.<io.vertx.core.http.HttpClientOptions: boolean http2ClearTextUpgradeWithPreflightRequest>;
v0.<io.vertx.core.http.HttpClientOptions: boolean http2ClearTextUpgradeWithPreflightRequest> = v30;
v31 = virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: boolean isSendUnmaskedFrames()>();
v0.<io.vertx.core.http.HttpClientOptions: boolean sendUnmaskedFrames> = v31;
v32 = v1.<io.vertx.core.http.HttpClientOptions: int maxRedirects>;
v0.<io.vertx.core.http.HttpClientOptions: int maxRedirects> = v32;
v33 = v1.<io.vertx.core.http.HttpClientOptions: boolean forceSni>;
v0.<io.vertx.core.http.HttpClientOptions: boolean forceSni> = v33;
v34 = virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: int getDecoderInitialBufferSize()>();
v0.<io.vertx.core.http.HttpClientOptions: int decoderInitialBufferSize> = v34;
v35 = virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: int getPoolCleanerPeriod()>();
v0.<io.vertx.core.http.HttpClientOptions: int poolCleanerPeriod> = v35;
v36 = virtualinvoke v1.<io.vertx.core.http.HttpClientOptions: int getPoolEventLoopSize()>();
v0.<io.vertx.core.http.HttpClientOptions: int poolEventLoopSize> = v36;
v37 = v1.<io.vertx.core.http.HttpClientOptions: boolean tryUsePerFrameWebSocketCompression>;
v0.<io.vertx.core.http.HttpClientOptions: boolean tryUsePerFrameWebSocketCompression> = v37;
v38 = v1.<io.vertx.core.http.HttpClientOptions: boolean tryUsePerMessageWebSocketCompression>;
v0.<io.vertx.core.http.HttpClientOptions: boolean tryUsePerMessageWebSocketCompression> = v38;
v39 = v1.<io.vertx.core.http.HttpClientOptions: boolean webSocketAllowClientNoContext>;
v0.<io.vertx.core.http.HttpClientOptions: boolean webSocketAllowClientNoContext> = v39;
v40 = v1.<io.vertx.core.http.HttpClientOptions: int webSocketCompressionLevel>;
v0.<io.vertx.core.http.HttpClientOptions: int webSocketCompressionLevel> = v40;
v41 = v1.<io.vertx.core.http.HttpClientOptions: boolean webSocketRequestServerNoContext>;
v0.<io.vertx.core.http.HttpClientOptions: boolean webSocketRequestServerNoContext> = v41;
v42 = v1.<io.vertx.core.http.HttpClientOptions: int webSocketClosingTimeout>;
v0.<io.vertx.core.http.HttpClientOptions: int webSocketClosingTimeout> = v42;
v43 = v1.<io.vertx.core.http.HttpClientOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy>;
v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy> = v43;
v44 = v1.<io.vertx.core.http.HttpClientOptions: boolean shared>;
v0.<io.vertx.core.http.HttpClientOptions: boolean shared> = v44;
v45 = v1.<io.vertx.core.http.HttpClientOptions: java.lang.String name>;
v0.<io.vertx.core.http.HttpClientOptions: java.lang.String name> = v45;
return;
}
public void <init>(io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.vertx.core.json.JsonObject;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: void <init>(io.vertx.core.json.JsonObject)>(v1);
v0.<io.vertx.core.http.HttpClientOptions: boolean verifyHost> = 1;
specialinvoke v0.<io.vertx.core.http.HttpClientOptions: void init()>();
staticinvoke <io.vertx.core.http.HttpClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.http.HttpClientOptions)>(v1, v0);
return;
}
public io.vertx.core.json.JsonObject toJson()
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.json.JsonObject toJson()>();
staticinvoke <io.vertx.core.http.HttpClientOptionsConverter: void toJson(io.vertx.core.http.HttpClientOptions,io.vertx.core.json.JsonObject)>(v0, v1);
return v1;
}
private void init()
{
io.vertx.core.http.Http2Settings v5;
java.util.ArrayList v6;
java.util.List v7;
io.vertx.core.http.HttpVersion v3;
int v1, v2, v4;
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.tracing.TracingPolicy v8;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v0.<io.vertx.core.http.HttpClientOptions: boolean verifyHost> = 1;
v0.<io.vertx.core.http.HttpClientOptions: int maxPoolSize> = 5;
v0.<io.vertx.core.http.HttpClientOptions: boolean keepAlive> = 1;
v0.<io.vertx.core.http.HttpClientOptions: int keepAliveTimeout> = 60;
v0.<io.vertx.core.http.HttpClientOptions: boolean pipelining> = 0;
v0.<io.vertx.core.http.HttpClientOptions: int pipeliningLimit> = 10;
v1 = (int) -1;
v0.<io.vertx.core.http.HttpClientOptions: int http2MultiplexingLimit> = v1;
v0.<io.vertx.core.http.HttpClientOptions: int http2MaxPoolSize> = 1;
v2 = (int) -1;
v0.<io.vertx.core.http.HttpClientOptions: int http2ConnectionWindowSize> = v2;
v0.<io.vertx.core.http.HttpClientOptions: int http2KeepAliveTimeout> = 60;
v0.<io.vertx.core.http.HttpClientOptions: boolean tryUseCompression> = 0;
v0.<io.vertx.core.http.HttpClientOptions: int maxWebSocketFrameSize> = 65536;
v0.<io.vertx.core.http.HttpClientOptions: int maxWebSocketMessageSize> = 262144;
v0.<io.vertx.core.http.HttpClientOptions: int maxWebSockets> = 50;
v0.<io.vertx.core.http.HttpClientOptions: java.lang.String defaultHost> = "localhost";
v0.<io.vertx.core.http.HttpClientOptions: int defaultPort> = 80;
v3 = <io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpVersion DEFAULT_PROTOCOL_VERSION>;
v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpVersion protocolVersion> = v3;
v0.<io.vertx.core.http.HttpClientOptions: int maxChunkSize> = 8192;
v0.<io.vertx.core.http.HttpClientOptions: int maxInitialLineLength> = 4096;
v0.<io.vertx.core.http.HttpClientOptions: int maxHeaderSize> = 8192;
v4 = (int) -1;
v0.<io.vertx.core.http.HttpClientOptions: int maxWaitQueueSize> = v4;
v5 = new io.vertx.core.http.Http2Settings;
specialinvoke v5.<io.vertx.core.http.Http2Settings: void <init>()>();
v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.Http2Settings initialSettings> = v5;
v6 = new java.util.ArrayList;
v7 = <io.vertx.core.http.HttpClientOptions: java.util.List DEFAULT_ALPN_VERSIONS>;
specialinvoke v6.<java.util.ArrayList: void <init>(java.util.Collection)>(v7);
v0.<io.vertx.core.http.HttpClientOptions: java.util.List alpnVersions> = v6;
v0.<io.vertx.core.http.HttpClientOptions: boolean http2ClearTextUpgrade> = 1;
v0.<io.vertx.core.http.HttpClientOptions: boolean http2ClearTextUpgradeWithPreflightRequest> = 0;
v0.<io.vertx.core.http.HttpClientOptions: boolean sendUnmaskedFrames> = 0;
v0.<io.vertx.core.http.HttpClientOptions: int maxRedirects> = 16;
v0.<io.vertx.core.http.HttpClientOptions: boolean forceSni> = 0;
v0.<io.vertx.core.http.HttpClientOptions: int decoderInitialBufferSize> = 128;
v0.<io.vertx.core.http.HttpClientOptions: boolean tryUsePerFrameWebSocketCompression> = 0;
v0.<io.vertx.core.http.HttpClientOptions: boolean tryUsePerMessageWebSocketCompression> = 0;
v0.<io.vertx.core.http.HttpClientOptions: int webSocketCompressionLevel> = 6;
v0.<io.vertx.core.http.HttpClientOptions: boolean webSocketAllowClientNoContext> = 0;
v0.<io.vertx.core.http.HttpClientOptions: boolean webSocketRequestServerNoContext> = 0;
v0.<io.vertx.core.http.HttpClientOptions: int webSocketClosingTimeout> = 10;
v0.<io.vertx.core.http.HttpClientOptions: int poolCleanerPeriod> = 1000;
v0.<io.vertx.core.http.HttpClientOptions: int poolEventLoopSize> = 0;
v8 = <io.vertx.core.http.HttpClientOptions: io.vertx.core.tracing.TracingPolicy DEFAULT_TRACING_POLICY>;
v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy> = v8;
v0.<io.vertx.core.http.HttpClientOptions: boolean shared> = 0;
v0.<io.vertx.core.http.HttpClientOptions: java.lang.String name> = "__vertx.DEFAULT";
return;
}
public io.vertx.core.http.HttpClientOptions setSendBufferSize(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSendBufferSize(int)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setReceiveBufferSize(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReceiveBufferSize(int)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setReuseAddress(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReuseAddress(boolean)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setReusePort(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReusePort(boolean)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setTrafficClass(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrafficClass(int)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setTcpNoDelay(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpNoDelay(boolean)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setTcpKeepAlive(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpKeepAlive(boolean)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setSoLinger(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSoLinger(int)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setIdleTimeout(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setIdleTimeout(int)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setReadIdleTimeout(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReadIdleTimeout(int)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setWriteIdleTimeout(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setWriteIdleTimeout(int)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setSsl(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSsl(boolean)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)
{
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.KeyCertOptions v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.vertx.core.net.KeyCertOptions;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setKeyCertOptions(io.vertx.core.net.KeyCertOptions)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)
{
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.JksOptions v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.vertx.core.net.JksOptions;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setKeyStoreOptions(io.vertx.core.net.JksOptions)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)
{
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.PfxOptions v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.vertx.core.net.PfxOptions;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions setTrustOptions(io.vertx.core.net.TrustOptions)
{
io.vertx.core.net.TrustOptions v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.vertx.core.net.TrustOptions;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustOptions(io.vertx.core.net.TrustOptions)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)
{
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.PemKeyCertOptions v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.vertx.core.net.PemKeyCertOptions;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)
{
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.JksOptions v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.vertx.core.net.JksOptions;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustStoreOptions(io.vertx.core.net.JksOptions)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)
{
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.PfxOptions v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.vertx.core.net.PfxOptions;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)
{
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.PemTrustOptions v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.vertx.core.net.PemTrustOptions;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions addEnabledCipherSuite(java.lang.String)
{
io.vertx.core.http.HttpClientOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase addEnabledCipherSuite(java.lang.String)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions removeEnabledCipherSuite(java.lang.String)
{
io.vertx.core.http.HttpClientOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase removeEnabledCipherSuite(java.lang.String)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions addEnabledSecureTransportProtocol(java.lang.String)
{
io.vertx.core.http.HttpClientOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase addEnabledSecureTransportProtocol(java.lang.String)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions removeEnabledSecureTransportProtocol(java.lang.String)
{
io.vertx.core.http.HttpClientOptions v0;
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v2;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase removeEnabledSecureTransportProtocol(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions setTcpFastOpen(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.ClientOptionsBase v2;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpFastOpen(boolean)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions setTcpCork(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.ClientOptionsBase v2;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpCork(boolean)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions setTcpQuickAck(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.ClientOptionsBase v2;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpQuickAck(boolean)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions setTcpUserTimeout(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.ClientOptionsBase v2;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpUserTimeout(int)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions addCrlPath(java.lang.String) throws java.lang.NullPointerException
{
io.vertx.core.http.HttpClientOptions v0;
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v2;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase addCrlPath(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions addCrlValue(io.vertx.core.buffer.Buffer) throws java.lang.NullPointerException
{
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.net.ClientOptionsBase v2;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase addCrlValue(io.vertx.core.buffer.Buffer)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions setConnectTimeout(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setConnectTimeout(int)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setTrustAll(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustAll(boolean)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setEnabledSecureTransportProtocols(java.util.Set)
{
java.util.Set v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: java.util.Set;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setSslHandshakeTimeout(long)
{
long v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: long;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.TCPSSLOptions setSslHandshakeTimeout(long)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientOptions setSslHandshakeTimeoutUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.TCPSSLOptions setSslHandshakeTimeoutUnit(java.util.concurrent.TimeUnit)>(v1);
return v0;
}
public int getMaxPoolSize()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int maxPoolSize>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setMaxPoolSize(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
java.lang.IllegalArgumentException v2;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
if v1 >= 1 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxPoolSize must be > 0");
throw v2;
label1:
v0.<io.vertx.core.http.HttpClientOptions: int maxPoolSize> = v1;
return v0;
}
public int getHttp2MultiplexingLimit()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int http2MultiplexingLimit>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setHttp2MultiplexingLimit(int)
{
int v1, v2;
io.vertx.core.http.HttpClientOptions v0;
java.lang.IllegalArgumentException v3;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
if v1 == 0 goto label1;
v2 = (int) -1;
if v1 >= v2 goto label2;
label1:
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxPoolSize must be > 0 or -1 (disabled)");
throw v3;
label2:
v0.<io.vertx.core.http.HttpClientOptions: int http2MultiplexingLimit> = v1;
return v0;
}
public int getHttp2MaxPoolSize()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int http2MaxPoolSize>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setHttp2MaxPoolSize(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
java.lang.IllegalArgumentException v2;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
if v1 >= 1 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("http2MaxPoolSize must be > 0");
throw v2;
label1:
v0.<io.vertx.core.http.HttpClientOptions: int http2MaxPoolSize> = v1;
return v0;
}
public int getHttp2ConnectionWindowSize()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int http2ConnectionWindowSize>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setHttp2ConnectionWindowSize(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpClientOptions: int http2ConnectionWindowSize> = v1;
return v0;
}
public int getHttp2KeepAliveTimeout()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int http2KeepAliveTimeout>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setHttp2KeepAliveTimeout(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
java.lang.IllegalArgumentException v2;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
if v1 >= 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP/2 keepAliveTimeout must be >= 0");
throw v2;
label1:
v0.<io.vertx.core.http.HttpClientOptions: int http2KeepAliveTimeout> = v1;
return v0;
}
public boolean isKeepAlive()
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: boolean keepAlive>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setKeepAlive(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpClientOptions: boolean keepAlive> = v1;
return v0;
}
public int getKeepAliveTimeout()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int keepAliveTimeout>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setKeepAliveTimeout(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
java.lang.IllegalArgumentException v2;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
if v1 >= 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keepAliveTimeout must be >= 0");
throw v2;
label1:
v0.<io.vertx.core.http.HttpClientOptions: int keepAliveTimeout> = v1;
return v0;
}
public boolean isPipelining()
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: boolean pipelining>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setPipelining(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpClientOptions: boolean pipelining> = v1;
return v0;
}
public int getPipeliningLimit()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int pipeliningLimit>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setPipeliningLimit(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
java.lang.IllegalArgumentException v2;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
if v1 >= 1 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("pipeliningLimit must be > 0");
throw v2;
label1:
v0.<io.vertx.core.http.HttpClientOptions: int pipeliningLimit> = v1;
return v0;
}
public boolean isVerifyHost()
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: boolean verifyHost>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setVerifyHost(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpClientOptions: boolean verifyHost> = v1;
return v0;
}
public boolean isTryUseCompression()
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: boolean tryUseCompression>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setTryUseCompression(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpClientOptions: boolean tryUseCompression> = v1;
return v0;
}
public boolean isSendUnmaskedFrames()
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: boolean sendUnmaskedFrames>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setSendUnmaskedFrames(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpClientOptions: boolean sendUnmaskedFrames> = v1;
return v0;
}
public int getMaxWebSocketFrameSize()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int maxWebSocketFrameSize>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setMaxWebSocketFrameSize(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpClientOptions: int maxWebSocketFrameSize> = v1;
return v0;
}
public int getMaxWebSocketMessageSize()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int maxWebSocketMessageSize>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setMaxWebSocketMessageSize(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpClientOptions: int maxWebSocketMessageSize> = v1;
return v0;
}
public int getMaxWebSockets()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int maxWebSockets>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setMaxWebSockets(int)
{
int v1, v2;
io.vertx.core.http.HttpClientOptions v0;
java.lang.IllegalArgumentException v3;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
if v1 == 0 goto label1;
v2 = (int) -1;
if v1 >= v2 goto label2;
label1:
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxWebSockets must be > 0 or -1 (disabled)");
throw v3;
label2:
v0.<io.vertx.core.http.HttpClientOptions: int maxWebSockets> = v1;
return v0;
}
public java.lang.String getDefaultHost()
{
io.vertx.core.http.HttpClientOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: java.lang.String defaultHost>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setDefaultHost(java.lang.String)
{
io.vertx.core.http.HttpClientOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.http.HttpClientOptions: java.lang.String defaultHost> = v1;
return v0;
}
public int getDefaultPort()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int defaultPort>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setDefaultPort(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpClientOptions: int defaultPort> = v1;
return v0;
}
public io.vertx.core.http.HttpVersion getProtocolVersion()
{
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.http.HttpVersion v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpVersion protocolVersion>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setProtocolVersion(io.vertx.core.http.HttpVersion)
{
io.vertx.core.http.HttpClientOptions v0;
java.lang.IllegalArgumentException v2;
io.vertx.core.http.HttpVersion v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.vertx.core.http.HttpVersion;
if v1 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("protocolVersion must not be null");
throw v2;
label1:
v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpVersion protocolVersion> = v1;
return v0;
}
public io.vertx.core.http.HttpClientOptions setMaxChunkSize(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpClientOptions: int maxChunkSize> = v1;
return v0;
}
public int getMaxChunkSize()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int maxChunkSize>;
return v1;
}
public int getMaxInitialLineLength()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int maxInitialLineLength>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setMaxInitialLineLength(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpClientOptions: int maxInitialLineLength> = v1;
return v0;
}
public int getMaxHeaderSize()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int maxHeaderSize>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setMaxHeaderSize(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpClientOptions: int maxHeaderSize> = v1;
return v0;
}
public io.vertx.core.http.HttpClientOptions setMaxWaitQueueSize(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpClientOptions: int maxWaitQueueSize> = v1;
return v0;
}
public int getMaxWaitQueueSize()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int maxWaitQueueSize>;
return v1;
}
public io.vertx.core.http.Http2Settings getInitialSettings()
{
io.vertx.core.http.Http2Settings v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.Http2Settings initialSettings>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setInitialSettings(io.vertx.core.http.Http2Settings)
{
io.vertx.core.http.Http2Settings v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.vertx.core.http.Http2Settings;
v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.Http2Settings initialSettings> = v1;
return v0;
}
public io.vertx.core.http.HttpClientOptions setUseAlpn(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.ClientOptionsBase v2;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setUseAlpn(boolean)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)
{
io.vertx.core.net.SSLEngineOptions v1;
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.ClientOptionsBase v2;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.vertx.core.net.SSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)
{
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.JdkSSLEngineOptions v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.vertx.core.net.JdkSSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)
{
io.vertx.core.net.OpenSSLEngineOptions v1;
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.ClientOptionsBase v2;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.vertx.core.net.OpenSSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(v1);
return v2;
}
public java.util.List getAlpnVersions()
{
java.util.List v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: java.util.List alpnVersions>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setAlpnVersions(java.util.List)
{
java.util.List v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: java.util.List;
v0.<io.vertx.core.http.HttpClientOptions: java.util.List alpnVersions> = v1;
return v0;
}
public boolean isHttp2ClearTextUpgrade()
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: boolean http2ClearTextUpgrade>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setHttp2ClearTextUpgrade(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpClientOptions: boolean http2ClearTextUpgrade> = v1;
return v0;
}
public boolean isHttp2ClearTextUpgradeWithPreflightRequest()
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: boolean http2ClearTextUpgradeWithPreflightRequest>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setHttp2ClearTextUpgradeWithPreflightRequest(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpClientOptions: boolean http2ClearTextUpgradeWithPreflightRequest> = v1;
return v0;
}
public int getMaxRedirects()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int maxRedirects>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setMaxRedirects(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpClientOptions: int maxRedirects> = v1;
return v0;
}
public boolean isForceSni()
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: boolean forceSni>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setForceSni(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpClientOptions: boolean forceSni> = v1;
return v0;
}
public io.vertx.core.http.HttpClientOptions setMetricsName(java.lang.String)
{
io.vertx.core.http.HttpClientOptions v0;
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v2;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setMetricsName(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions setProxyOptions(io.vertx.core.net.ProxyOptions)
{
io.vertx.core.net.ProxyOptions v1;
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.ClientOptionsBase v2;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.vertx.core.net.ProxyOptions;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setProxyOptions(io.vertx.core.net.ProxyOptions)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions setNonProxyHosts(java.util.List)
{
java.util.List v1;
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.ClientOptionsBase v2;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: java.util.List;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setNonProxyHosts(java.util.List)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions addNonProxyHost(java.lang.String)
{
io.vertx.core.http.HttpClientOptions v0;
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v2;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase addNonProxyHost(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions setLocalAddress(java.lang.String)
{
io.vertx.core.http.HttpClientOptions v0;
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v2;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setLocalAddress(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions setLogActivity(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.ClientOptionsBase v2;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setLogActivity(boolean)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions setActivityLogDataFormat(io.netty.handler.logging.ByteBufFormat)
{
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.net.ClientOptionsBase v2;
io.netty.handler.logging.ByteBufFormat v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.netty.handler.logging.ByteBufFormat;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setActivityLogDataFormat(io.netty.handler.logging.ByteBufFormat)>(v1);
return v2;
}
public io.vertx.core.http.HttpClientOptions setTryUsePerFrameWebSocketCompression(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpClientOptions: boolean tryUsePerFrameWebSocketCompression> = v1;
return v0;
}
public boolean getTryWebSocketDeflateFrameCompression()
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: boolean tryUsePerFrameWebSocketCompression>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setTryUsePerMessageWebSocketCompression(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpClientOptions: boolean tryUsePerMessageWebSocketCompression> = v1;
return v0;
}
public boolean getTryUsePerMessageWebSocketCompression()
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: boolean tryUsePerMessageWebSocketCompression>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setWebSocketCompressionLevel(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpClientOptions: int webSocketCompressionLevel> = v1;
return v0;
}
public int getWebSocketCompressionLevel()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int webSocketCompressionLevel>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setWebSocketCompressionAllowClientNoContext(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpClientOptions: boolean webSocketAllowClientNoContext> = v1;
return v0;
}
public boolean getWebSocketCompressionAllowClientNoContext()
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: boolean webSocketAllowClientNoContext>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setWebSocketCompressionRequestServerNoContext(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpClientOptions: boolean webSocketRequestServerNoContext> = v1;
return v0;
}
public boolean getWebSocketCompressionRequestServerNoContext()
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: boolean webSocketRequestServerNoContext>;
return v1;
}
public int getWebSocketClosingTimeout()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int webSocketClosingTimeout>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setWebSocketClosingTimeout(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpClientOptions: int webSocketClosingTimeout> = v1;
return v0;
}
public int getDecoderInitialBufferSize()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int decoderInitialBufferSize>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setDecoderInitialBufferSize(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
boolean v2;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
if v1 <= 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v2, "initialBufferSizeHttpDecoder must be > 0");
v0.<io.vertx.core.http.HttpClientOptions: int decoderInitialBufferSize> = v1;
return v0;
}
public int getPoolCleanerPeriod()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int poolCleanerPeriod>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setPoolCleanerPeriod(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpClientOptions: int poolCleanerPeriod> = v1;
return v0;
}
public int getPoolEventLoopSize()
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: int poolEventLoopSize>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setPoolEventLoopSize(int)
{
int v1;
io.vertx.core.http.HttpClientOptions v0;
boolean v2;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: int;
if v1 < 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v2, "poolEventLoopSize must be >= 0");
v0.<io.vertx.core.http.HttpClientOptions: int poolEventLoopSize> = v1;
return v0;
}
public io.vertx.core.tracing.TracingPolicy getTracingPolicy()
{
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.tracing.TracingPolicy v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setTracingPolicy(io.vertx.core.tracing.TracingPolicy)
{
io.vertx.core.http.HttpClientOptions v0;
io.vertx.core.tracing.TracingPolicy v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: io.vertx.core.tracing.TracingPolicy;
v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy> = v1;
return v0;
}
public boolean isShared()
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: boolean shared>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setShared(boolean)
{
io.vertx.core.http.HttpClientOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpClientOptions: boolean shared> = v1;
return v0;
}
public java.lang.String getName()
{
io.vertx.core.http.HttpClientOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 = v0.<io.vertx.core.http.HttpClientOptions: java.lang.String name>;
return v1;
}
public io.vertx.core.http.HttpClientOptions setName(java.lang.String)
{
io.vertx.core.http.HttpClientOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.HttpClientOptions;
v1 := @parameter0: java.lang.String;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "Client name cannot be null");
v0.<io.vertx.core.http.HttpClientOptions: java.lang.String name> = v1;
return v0;
}
static void <clinit>()
{
java.util.List v1;
io.vertx.core.http.HttpVersion v0;
io.vertx.core.tracing.TracingPolicy v2;
v0 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_1_1>;
<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpVersion DEFAULT_PROTOCOL_VERSION> = v0;
v1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
<io.vertx.core.http.HttpClientOptions: java.util.List DEFAULT_ALPN_VERSIONS> = v1;
v2 = <io.vertx.core.tracing.TracingPolicy: io.vertx.core.tracing.TracingPolicy PROPAGATE>;
<io.vertx.core.http.HttpClientOptions: io.vertx.core.tracing.TracingPolicy DEFAULT_TRACING_POLICY> = v2;
return;
}
}