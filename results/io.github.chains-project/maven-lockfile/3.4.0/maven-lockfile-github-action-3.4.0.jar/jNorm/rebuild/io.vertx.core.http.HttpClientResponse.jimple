public interface  io.vertx.core.http.HttpClientResponse extends java.lang.Object implements io.vertx.core.streams.ReadStream
{
public abstract io.vertx.core.http.HttpClientResponse fetch(long);
public abstract io.vertx.core.http.HttpClientResponse resume();
public abstract io.vertx.core.http.HttpClientResponse exceptionHandler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpClientResponse handler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpClientResponse pause();
public abstract io.vertx.core.http.HttpClientResponse endHandler(io.vertx.core.Handler);
public abstract io.vertx.core.net.NetSocket netSocket();
public abstract io.vertx.core.http.HttpVersion version();
public abstract int statusCode();
public abstract java.lang.String statusMessage();
public abstract io.vertx.core.MultiMap headers();
public abstract java.lang.String getHeader(java.lang.String);
public abstract java.lang.String getHeader(java.lang.CharSequence);
public abstract java.lang.String getTrailer(java.lang.String);
public abstract io.vertx.core.MultiMap trailers();
public abstract java.util.List cookies();
public io.vertx.core.http.HttpClientResponse bodyHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpClientResponse v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.HttpClientResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpClientResponse: io.vertx.core.Future body()>();
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onSuccess(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientResponse body(io.vertx.core.Handler)
{
io.vertx.core.http.HttpClientResponse v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.HttpClientResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpClientResponse: io.vertx.core.Future body()>();
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
return v0;
}
public abstract io.vertx.core.Future body();
public void end(io.vertx.core.Handler)
{
io.vertx.core.http.HttpClientResponse v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.HttpClientResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpClientResponse: io.vertx.core.Future end()>();
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
return;
}
public abstract io.vertx.core.Future end();
public abstract io.vertx.core.http.HttpClientResponse customFrameHandler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpClientRequest request();
public abstract io.vertx.core.http.HttpClientResponse streamPriorityHandler(io.vertx.core.Handler);
}