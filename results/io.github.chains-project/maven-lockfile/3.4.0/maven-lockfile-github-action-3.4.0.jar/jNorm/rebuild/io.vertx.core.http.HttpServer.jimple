public interface  io.vertx.core.http.HttpServer extends java.lang.Object implements io.vertx.core.metrics.Measured
{
public abstract io.vertx.core.streams.ReadStream requestStream();
public abstract io.vertx.core.http.HttpServer requestHandler(io.vertx.core.Handler);
public abstract io.vertx.core.Handler requestHandler();
public abstract io.vertx.core.http.HttpServer invalidRequestHandler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpServer connectionHandler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpServer exceptionHandler(io.vertx.core.Handler);
public abstract io.vertx.core.streams.ReadStream webSocketStream();
public abstract io.vertx.core.http.HttpServer webSocketHandler(io.vertx.core.Handler);
public abstract io.vertx.core.Handler webSocketHandler();
public abstract io.vertx.core.Future updateSSLOptions(io.vertx.core.net.SSLOptions);
public void updateSSLOptions(io.vertx.core.net.SSLOptions, io.vertx.core.Handler)
{
io.vertx.core.net.SSLOptions v1;
io.vertx.core.http.HttpServer v0;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.http.HttpServer;
v1 := @parameter0: io.vertx.core.net.SSLOptions;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v0.<io.vertx.core.http.HttpServer: io.vertx.core.Future updateSSLOptions(io.vertx.core.net.SSLOptions)>(v1);
if v2 == null goto label1;
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
label1:
return;
}
public abstract io.vertx.core.Future listen();
public io.vertx.core.Future listen(int, java.lang.String)
{
io.vertx.core.http.HttpServer v0;
int v1;
java.lang.String v2;
io.vertx.core.Future v4;
io.vertx.core.net.impl.SocketAddressImpl v3;
v0 := @this: io.vertx.core.http.HttpServer;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 = new io.vertx.core.net.impl.SocketAddressImpl;
specialinvoke v3.<io.vertx.core.net.impl.SocketAddressImpl: void <init>(int,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v0.<io.vertx.core.http.HttpServer: io.vertx.core.Future listen(io.vertx.core.net.SocketAddress)>(v3);
return v4;
}
public io.vertx.core.http.HttpServer listen(int, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.http.HttpServer v0;
int v1;
java.lang.String v2;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.http.HttpServer;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = interfaceinvoke v0.<io.vertx.core.http.HttpServer: io.vertx.core.Future listen(int,java.lang.String)>(v1, v2);
if v3 == null goto label1;
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
label1:
return v0;
}
public io.vertx.core.http.HttpServer listen(io.vertx.core.net.SocketAddress, io.vertx.core.Handler)
{
io.vertx.core.http.HttpServer v0;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
io.vertx.core.net.SocketAddress v1;
v0 := @this: io.vertx.core.http.HttpServer;
v1 := @parameter0: io.vertx.core.net.SocketAddress;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v0.<io.vertx.core.http.HttpServer: io.vertx.core.Future listen(io.vertx.core.net.SocketAddress)>(v1);
if v2 == null goto label1;
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
label1:
return v0;
}
public abstract io.vertx.core.Future listen(io.vertx.core.net.SocketAddress);
public io.vertx.core.Future listen(int)
{
int v1;
io.vertx.core.Future v2;
io.vertx.core.http.HttpServer v0;
v0 := @this: io.vertx.core.http.HttpServer;
v1 := @parameter0: int;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpServer: io.vertx.core.Future listen(int,java.lang.String)>(v1, "0.0.0.0");
return v2;
}
public io.vertx.core.http.HttpServer listen(int, io.vertx.core.Handler)
{
io.vertx.core.http.HttpServer v0;
int v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.http.HttpServer;
v1 := @parameter0: int;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v0.<io.vertx.core.http.HttpServer: io.vertx.core.Future listen(int)>(v1);
if v2 == null goto label1;
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
label1:
return v0;
}
public io.vertx.core.http.HttpServer listen(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
io.vertx.core.http.HttpServer v0;
v0 := @this: io.vertx.core.http.HttpServer;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpServer: io.vertx.core.Future listen()>();
if v1 == null goto label1;
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
label1:
return v0;
}
public abstract io.vertx.core.Future close();
public abstract void close(io.vertx.core.Handler);
public abstract int actualPort();
}