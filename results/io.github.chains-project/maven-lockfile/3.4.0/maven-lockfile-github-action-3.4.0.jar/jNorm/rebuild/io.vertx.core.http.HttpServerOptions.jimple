public class io.vertx.core.http.HttpServerOptions extends io.vertx.core.net.NetServerOptions
{
public static final int DEFAULT_PORT;
public static final boolean DEFAULT_COMPRESSION_SUPPORTED;
public static final int DEFAULT_COMPRESSION_LEVEL;
public static final int DEFAULT_MAX_WEBSOCKET_FRAME_SIZE;
public static final int DEFAULT_MAX_WEBSOCKET_MESSAGE_SIZE;
public static final int DEFAULT_MAX_CHUNK_SIZE;
public static final int DEFAULT_MAX_INITIAL_LINE_LENGTH;
public static final int DEFAULT_MAX_HEADER_SIZE;
public static final int DEFAULT_MAX_FORM_ATTRIBUTE_SIZE;
public static final boolean DEFAULT_HANDLE_100_CONTINE_AUTOMATICALLY;
public static final java.util.List DEFAULT_ALPN_VERSIONS;
public static final long DEFAULT_INITIAL_SETTINGS_MAX_CONCURRENT_STREAMS;
public static final int DEFAULT_HTTP2_CONNECTION_WINDOW_SIZE;
public static final boolean DEFAULT_DECOMPRESSION_SUPPORTED;
public static final boolean DEFAULT_ACCEPT_UNMASKED_FRAMES;
public static final int DEFAULT_DECODER_INITIAL_BUFFER_SIZE;
public static final boolean DEFAULT_PER_FRAME_WEBSOCKET_COMPRESSION_SUPPORTED;
public static final boolean DEFAULT_PER_MESSAGE_WEBSOCKET_COMPRESSION_SUPPORTED;
public static final int DEFAULT_WEBSOCKET_COMPRESSION_LEVEL;
public static final boolean DEFAULT_WEBSOCKET_ALLOW_SERVER_NO_CONTEXT;
public static final boolean DEFAULT_WEBSOCKET_PREFERRED_CLIENT_NO_CONTEXT;
public static final int DEFAULT_WEBSOCKET_CLOSING_TIMEOUT;
public static final io.vertx.core.tracing.TracingPolicy DEFAULT_TRACING_POLICY;
public static final boolean DEFAULT_REGISTER_WEBSOCKET_WRITE_HANDLERS;
private boolean compressionSupported;
private int compressionLevel;
private java.util.List compressors;
private int maxWebSocketFrameSize;
private int maxWebSocketMessageSize;
private java.util.List webSocketSubProtocols;
private boolean handle100ContinueAutomatically;
private int maxChunkSize;
private int maxInitialLineLength;
private int maxHeaderSize;
private int maxFormAttributeSize;
private io.vertx.core.http.Http2Settings initialSettings;
private java.util.List alpnVersions;
private int http2ConnectionWindowSize;
private boolean decompressionSupported;
private boolean acceptUnmaskedFrames;
private int decoderInitialBufferSize;
private boolean perFrameWebSocketCompressionSupported;
private boolean perMessageWebSocketCompressionSupported;
private int webSocketCompressionLevel;
private boolean webSocketAllowServerNoContext;
private boolean webSocketPreferredClientNoContext;
private int webSocketClosingTimeout;
private io.vertx.core.tracing.TracingPolicy tracingPolicy;
private boolean registerWebSocketWriteHandlers;
public void <init>()
{
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: void <init>()>();
specialinvoke v0.<io.vertx.core.http.HttpServerOptions: void init()>();
virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPort(int)>(80);
return;
}
public void <init>(io.vertx.core.http.HttpServerOptions)
{
io.vertx.core.http.Http2Settings v17, v18, v19;
boolean v12, v2, v24, v25, v27, v28, v30, v31, v34;
java.util.List v11, v20, v22, v4, v6, v9;
java.util.ArrayList v10, v21, v5;
int v13, v14, v15, v16, v23, v26, v29, v3, v32, v7, v8;
io.vertx.core.tracing.TracingPolicy v33;
io.vertx.core.http.HttpServerOptions v0, v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.vertx.core.http.HttpServerOptions;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: void <init>(io.vertx.core.net.NetServerOptions)>(v1);
v2 = virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: boolean isCompressionSupported()>();
v0.<io.vertx.core.http.HttpServerOptions: boolean compressionSupported> = v2;
v3 = virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: int getCompressionLevel()>();
v0.<io.vertx.core.http.HttpServerOptions: int compressionLevel> = v3;
v4 = v1.<io.vertx.core.http.HttpServerOptions: java.util.List compressors>;
if v4 == null goto label1;
v5 = new java.util.ArrayList;
v6 = v1.<io.vertx.core.http.HttpServerOptions: java.util.List compressors>;
specialinvoke v5.<java.util.ArrayList: void <init>(java.util.Collection)>(v6);
goto label2;
label1:
v5 = null;
label2:
v0.<io.vertx.core.http.HttpServerOptions: java.util.List compressors> = v5;
v7 = v1.<io.vertx.core.http.HttpServerOptions: int maxWebSocketFrameSize>;
v0.<io.vertx.core.http.HttpServerOptions: int maxWebSocketFrameSize> = v7;
v8 = v1.<io.vertx.core.http.HttpServerOptions: int maxWebSocketMessageSize>;
v0.<io.vertx.core.http.HttpServerOptions: int maxWebSocketMessageSize> = v8;
v9 = v1.<io.vertx.core.http.HttpServerOptions: java.util.List webSocketSubProtocols>;
if v9 == null goto label3;
v10 = new java.util.ArrayList;
v11 = v1.<io.vertx.core.http.HttpServerOptions: java.util.List webSocketSubProtocols>;
specialinvoke v10.<java.util.ArrayList: void <init>(java.util.Collection)>(v11);
goto label4;
label3:
v10 = null;
label4:
v0.<io.vertx.core.http.HttpServerOptions: java.util.List webSocketSubProtocols> = v10;
v12 = v1.<io.vertx.core.http.HttpServerOptions: boolean handle100ContinueAutomatically>;
v0.<io.vertx.core.http.HttpServerOptions: boolean handle100ContinueAutomatically> = v12;
v13 = virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: int getMaxChunkSize()>();
v0.<io.vertx.core.http.HttpServerOptions: int maxChunkSize> = v13;
v14 = virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: int getMaxInitialLineLength()>();
v0.<io.vertx.core.http.HttpServerOptions: int maxInitialLineLength> = v14;
v15 = virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: int getMaxHeaderSize()>();
v0.<io.vertx.core.http.HttpServerOptions: int maxHeaderSize> = v15;
v16 = virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: int getMaxFormAttributeSize()>();
v0.<io.vertx.core.http.HttpServerOptions: int maxFormAttributeSize> = v16;
v17 = v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.Http2Settings initialSettings>;
if v17 == null goto label5;
v18 = new io.vertx.core.http.Http2Settings;
v19 = v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.Http2Settings initialSettings>;
specialinvoke v18.<io.vertx.core.http.Http2Settings: void <init>(io.vertx.core.http.Http2Settings)>(v19);
goto label6;
label5:
v18 = null;
label6:
v0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.Http2Settings initialSettings> = v18;
v20 = v1.<io.vertx.core.http.HttpServerOptions: java.util.List alpnVersions>;
if v20 == null goto label7;
v21 = new java.util.ArrayList;
v22 = v1.<io.vertx.core.http.HttpServerOptions: java.util.List alpnVersions>;
specialinvoke v21.<java.util.ArrayList: void <init>(java.util.Collection)>(v22);
goto label8;
label7:
v21 = null;
label8:
v0.<io.vertx.core.http.HttpServerOptions: java.util.List alpnVersions> = v21;
v23 = v1.<io.vertx.core.http.HttpServerOptions: int http2ConnectionWindowSize>;
v0.<io.vertx.core.http.HttpServerOptions: int http2ConnectionWindowSize> = v23;
v24 = virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: boolean isDecompressionSupported()>();
v0.<io.vertx.core.http.HttpServerOptions: boolean decompressionSupported> = v24;
v25 = virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: boolean isAcceptUnmaskedFrames()>();
v0.<io.vertx.core.http.HttpServerOptions: boolean acceptUnmaskedFrames> = v25;
v26 = virtualinvoke v1.<io.vertx.core.http.HttpServerOptions: int getDecoderInitialBufferSize()>();
v0.<io.vertx.core.http.HttpServerOptions: int decoderInitialBufferSize> = v26;
v27 = v1.<io.vertx.core.http.HttpServerOptions: boolean perFrameWebSocketCompressionSupported>;
v0.<io.vertx.core.http.HttpServerOptions: boolean perFrameWebSocketCompressionSupported> = v27;
v28 = v1.<io.vertx.core.http.HttpServerOptions: boolean perMessageWebSocketCompressionSupported>;
v0.<io.vertx.core.http.HttpServerOptions: boolean perMessageWebSocketCompressionSupported> = v28;
v29 = v1.<io.vertx.core.http.HttpServerOptions: int webSocketCompressionLevel>;
v0.<io.vertx.core.http.HttpServerOptions: int webSocketCompressionLevel> = v29;
v30 = v1.<io.vertx.core.http.HttpServerOptions: boolean webSocketPreferredClientNoContext>;
v0.<io.vertx.core.http.HttpServerOptions: boolean webSocketPreferredClientNoContext> = v30;
v31 = v1.<io.vertx.core.http.HttpServerOptions: boolean webSocketAllowServerNoContext>;
v0.<io.vertx.core.http.HttpServerOptions: boolean webSocketAllowServerNoContext> = v31;
v32 = v1.<io.vertx.core.http.HttpServerOptions: int webSocketClosingTimeout>;
v0.<io.vertx.core.http.HttpServerOptions: int webSocketClosingTimeout> = v32;
v33 = v1.<io.vertx.core.http.HttpServerOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy>;
v0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy> = v33;
v34 = v1.<io.vertx.core.http.HttpServerOptions: boolean registerWebSocketWriteHandlers>;
v0.<io.vertx.core.http.HttpServerOptions: boolean registerWebSocketWriteHandlers> = v34;
return;
}
public void <init>(io.vertx.core.json.JsonObject)
{
int v4;
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.json.JsonObject v1;
java.lang.Integer v2, v3;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.vertx.core.json.JsonObject;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: void <init>(io.vertx.core.json.JsonObject)>(v1);
specialinvoke v0.<io.vertx.core.http.HttpServerOptions: void init()>();
v2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(80);
v3 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>("port", v2);
v4 = virtualinvoke v3.<java.lang.Integer: int intValue()>();
virtualinvoke v0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.HttpServerOptions setPort(int)>(v4);
staticinvoke <io.vertx.core.http.HttpServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.http.HttpServerOptions)>(v1, v0);
return;
}
public io.vertx.core.json.JsonObject toJson()
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.json.JsonObject v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.json.JsonObject toJson()>();
staticinvoke <io.vertx.core.http.HttpServerOptionsConverter: void toJson(io.vertx.core.http.HttpServerOptions,io.vertx.core.json.JsonObject)>(v0, v1);
return v1;
}
private void init()
{
java.util.List v4;
int v5;
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.http.Http2Settings v1, v2;
io.vertx.core.tracing.TracingPolicy v6;
java.util.ArrayList v3;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v0.<io.vertx.core.http.HttpServerOptions: boolean compressionSupported> = 0;
v0.<io.vertx.core.http.HttpServerOptions: int compressionLevel> = 6;
v0.<io.vertx.core.http.HttpServerOptions: int maxWebSocketFrameSize> = 65536;
v0.<io.vertx.core.http.HttpServerOptions: int maxWebSocketMessageSize> = 262144;
v0.<io.vertx.core.http.HttpServerOptions: boolean handle100ContinueAutomatically> = 0;
v0.<io.vertx.core.http.HttpServerOptions: int maxChunkSize> = 8192;
v0.<io.vertx.core.http.HttpServerOptions: int maxInitialLineLength> = 4096;
v0.<io.vertx.core.http.HttpServerOptions: int maxHeaderSize> = 8192;
v0.<io.vertx.core.http.HttpServerOptions: int maxFormAttributeSize> = 8192;
v1 = new io.vertx.core.http.Http2Settings;
specialinvoke v1.<io.vertx.core.http.Http2Settings: void <init>()>();
v2 = virtualinvoke v1.<io.vertx.core.http.Http2Settings: io.vertx.core.http.Http2Settings setMaxConcurrentStreams(long)>(100L);
v0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.Http2Settings initialSettings> = v2;
v3 = new java.util.ArrayList;
v4 = <io.vertx.core.http.HttpServerOptions: java.util.List DEFAULT_ALPN_VERSIONS>;
specialinvoke v3.<java.util.ArrayList: void <init>(java.util.Collection)>(v4);
v0.<io.vertx.core.http.HttpServerOptions: java.util.List alpnVersions> = v3;
v5 = (int) -1;
v0.<io.vertx.core.http.HttpServerOptions: int http2ConnectionWindowSize> = v5;
v0.<io.vertx.core.http.HttpServerOptions: boolean decompressionSupported> = 0;
v0.<io.vertx.core.http.HttpServerOptions: boolean acceptUnmaskedFrames> = 0;
v0.<io.vertx.core.http.HttpServerOptions: int decoderInitialBufferSize> = 128;
v0.<io.vertx.core.http.HttpServerOptions: boolean perFrameWebSocketCompressionSupported> = 1;
v0.<io.vertx.core.http.HttpServerOptions: boolean perMessageWebSocketCompressionSupported> = 1;
v0.<io.vertx.core.http.HttpServerOptions: int webSocketCompressionLevel> = 6;
v0.<io.vertx.core.http.HttpServerOptions: boolean webSocketPreferredClientNoContext> = 0;
v0.<io.vertx.core.http.HttpServerOptions: boolean webSocketAllowServerNoContext> = 0;
v0.<io.vertx.core.http.HttpServerOptions: int webSocketClosingTimeout> = 10;
v6 = <io.vertx.core.http.HttpServerOptions: io.vertx.core.tracing.TracingPolicy DEFAULT_TRACING_POLICY>;
v0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy> = v6;
v0.<io.vertx.core.http.HttpServerOptions: boolean registerWebSocketWriteHandlers> = 0;
return;
}
public io.vertx.core.http.HttpServerOptions setSendBufferSize(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSendBufferSize(int)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setReceiveBufferSize(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReceiveBufferSize(int)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setReuseAddress(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReuseAddress(boolean)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setReusePort(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReusePort(boolean)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setTrafficClass(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTrafficClass(int)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setTcpNoDelay(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpNoDelay(boolean)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setTcpKeepAlive(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpKeepAlive(boolean)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setSoLinger(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSoLinger(int)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setIdleTimeout(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setIdleTimeout(int)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setReadIdleTimeout(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setReadIdleTimeout(int)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setWriteIdleTimeout(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setWriteIdleTimeout(int)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setSsl(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSsl(boolean)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setUseAlpn(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setUseAlpn(boolean)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.KeyCertOptions v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.vertx.core.net.KeyCertOptions;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.JksOptions v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.vertx.core.net.JksOptions;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
io.vertx.core.net.PfxOptions v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.vertx.core.net.PfxOptions;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
io.vertx.core.net.PemKeyCertOptions v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.vertx.core.net.PemKeyCertOptions;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions setTrustOptions(io.vertx.core.net.TrustOptions)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.TrustOptions v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.vertx.core.net.TrustOptions;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTrustOptions(io.vertx.core.net.TrustOptions)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.JksOptions v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.vertx.core.net.JksOptions;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
io.vertx.core.net.PemTrustOptions v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.vertx.core.net.PemTrustOptions;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
io.vertx.core.net.PfxOptions v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.vertx.core.net.PfxOptions;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions addEnabledCipherSuite(java.lang.String)
{
io.vertx.core.http.HttpServerOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions addEnabledCipherSuite(java.lang.String)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions removeEnabledCipherSuite(java.lang.String)
{
io.vertx.core.http.HttpServerOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions removeEnabledCipherSuite(java.lang.String)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions addEnabledSecureTransportProtocol(java.lang.String)
{
io.vertx.core.http.HttpServerOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions addEnabledSecureTransportProtocol(java.lang.String)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions removeEnabledSecureTransportProtocol(java.lang.String)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
java.lang.String v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions removeEnabledSecureTransportProtocol(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions setTcpFastOpen(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpFastOpen(boolean)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions setTcpCork(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpCork(boolean)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions setTcpQuickAck(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setTcpQuickAck(boolean)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions addCrlPath(java.lang.String) throws java.lang.NullPointerException
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
java.lang.String v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions addCrlPath(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions addCrlValue(io.vertx.core.buffer.Buffer) throws java.lang.NullPointerException
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
io.vertx.core.buffer.Buffer v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions addCrlValue(io.vertx.core.buffer.Buffer)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions setAcceptBacklog(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setAcceptBacklog(int)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setPort(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setPort(int)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setHost(java.lang.String)
{
io.vertx.core.http.HttpServerOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setHost(java.lang.String)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setClientAuth(io.vertx.core.http.ClientAuth)
{
io.vertx.core.http.ClientAuth v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.vertx.core.http.ClientAuth;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setClientAuth(io.vertx.core.http.ClientAuth)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.SSLEngineOptions v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.vertx.core.net.SSLEngineOptions;
specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
io.vertx.core.net.JdkSSLEngineOptions v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.vertx.core.net.JdkSSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
io.vertx.core.net.OpenSSLEngineOptions v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.vertx.core.net.OpenSSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions setEnabledSecureTransportProtocols(java.util.Set)
{
io.vertx.core.http.HttpServerOptions v0;
java.util.Set v1;
io.vertx.core.net.NetServerOptions v2;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: java.util.Set;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setEnabledSecureTransportProtocols(java.util.Set)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions setSslHandshakeTimeout(long)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
long v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: long;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSslHandshakeTimeout(long)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions setSslHandshakeTimeoutUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSslHandshakeTimeoutUnit(java.util.concurrent.TimeUnit)>(v1);
return v2;
}
public boolean isCompressionSupported()
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: boolean compressionSupported>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setCompressionSupported(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpServerOptions: boolean compressionSupported> = v1;
return v0;
}
public int getCompressionLevel()
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: int compressionLevel>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setCompressionLevel(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpServerOptions: int compressionLevel> = v1;
return v0;
}
public java.util.List getCompressors()
{
io.vertx.core.http.HttpServerOptions v0;
java.util.List v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: java.util.List compressors>;
return v1;
}
public io.vertx.core.http.HttpServerOptions addCompressor(io.netty.handler.codec.compression.CompressionOptions)
{
java.util.List v2, v4;
io.netty.handler.codec.compression.CompressionOptions v1;
io.vertx.core.http.HttpServerOptions v0;
java.util.ArrayList v3;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.netty.handler.codec.compression.CompressionOptions;
v2 = v0.<io.vertx.core.http.HttpServerOptions: java.util.List compressors>;
if v2 != null goto label1;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.core.http.HttpServerOptions: java.util.List compressors> = v3;
label1:
v4 = v0.<io.vertx.core.http.HttpServerOptions: java.util.List compressors>;
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setCompressors(java.util.List)
{
io.vertx.core.http.HttpServerOptions v0;
java.util.List v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: java.util.List;
v0.<io.vertx.core.http.HttpServerOptions: java.util.List compressors> = v1;
return v0;
}
public boolean isAcceptUnmaskedFrames()
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: boolean acceptUnmaskedFrames>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setAcceptUnmaskedFrames(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpServerOptions: boolean acceptUnmaskedFrames> = v1;
return v0;
}
public int getMaxWebSocketFrameSize()
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: int maxWebSocketFrameSize>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setMaxWebSocketFrameSize(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpServerOptions: int maxWebSocketFrameSize> = v1;
return v0;
}
public int getMaxWebSocketMessageSize()
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: int maxWebSocketMessageSize>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setMaxWebSocketMessageSize(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpServerOptions: int maxWebSocketMessageSize> = v1;
return v0;
}
public io.vertx.core.http.HttpServerOptions addWebSocketSubProtocol(java.lang.String)
{
java.util.List v2, v4;
io.vertx.core.http.HttpServerOptions v0;
java.lang.String v1;
java.util.ArrayList v3;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: java.lang.String;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "Cannot add a null WebSocket sub-protocol");
v2 = v0.<io.vertx.core.http.HttpServerOptions: java.util.List webSocketSubProtocols>;
if v2 != null goto label1;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.core.http.HttpServerOptions: java.util.List webSocketSubProtocols> = v3;
label1:
v4 = v0.<io.vertx.core.http.HttpServerOptions: java.util.List webSocketSubProtocols>;
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerOptions setWebSocketSubProtocols(java.util.List)
{
io.vertx.core.http.HttpServerOptions v0;
java.util.List v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: java.util.List;
v0.<io.vertx.core.http.HttpServerOptions: java.util.List webSocketSubProtocols> = v1;
return v0;
}
public java.util.List getWebSocketSubProtocols()
{
io.vertx.core.http.HttpServerOptions v0;
java.util.List v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: java.util.List webSocketSubProtocols>;
return v1;
}
public boolean isHandle100ContinueAutomatically()
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: boolean handle100ContinueAutomatically>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setHandle100ContinueAutomatically(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpServerOptions: boolean handle100ContinueAutomatically> = v1;
return v0;
}
public io.vertx.core.http.HttpServerOptions setMaxChunkSize(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpServerOptions: int maxChunkSize> = v1;
return v0;
}
public int getMaxChunkSize()
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: int maxChunkSize>;
return v1;
}
public int getMaxInitialLineLength()
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: int maxInitialLineLength>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setMaxInitialLineLength(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpServerOptions: int maxInitialLineLength> = v1;
return v0;
}
public int getMaxHeaderSize()
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: int maxHeaderSize>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setMaxHeaderSize(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpServerOptions: int maxHeaderSize> = v1;
return v0;
}
public int getMaxFormAttributeSize()
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: int maxFormAttributeSize>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setMaxFormAttributeSize(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpServerOptions: int maxFormAttributeSize> = v1;
return v0;
}
public io.vertx.core.http.Http2Settings getInitialSettings()
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.http.Http2Settings v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.Http2Settings initialSettings>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setInitialSettings(io.vertx.core.http.Http2Settings)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.http.Http2Settings v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.vertx.core.http.Http2Settings;
v0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.http.Http2Settings initialSettings> = v1;
return v0;
}
public java.util.List getAlpnVersions()
{
io.vertx.core.http.HttpServerOptions v0;
java.util.List v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: java.util.List alpnVersions>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setAlpnVersions(java.util.List)
{
io.vertx.core.http.HttpServerOptions v0;
java.util.List v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: java.util.List;
v0.<io.vertx.core.http.HttpServerOptions: java.util.List alpnVersions> = v1;
return v0;
}
public int getHttp2ConnectionWindowSize()
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: int http2ConnectionWindowSize>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setHttp2ConnectionWindowSize(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpServerOptions: int http2ConnectionWindowSize> = v1;
return v0;
}
public io.vertx.core.http.HttpServerOptions setLogActivity(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setLogActivity(boolean)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions setActivityLogDataFormat(io.netty.handler.logging.ByteBufFormat)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
io.netty.handler.logging.ByteBufFormat v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.netty.handler.logging.ByteBufFormat;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setActivityLogDataFormat(io.netty.handler.logging.ByteBufFormat)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions setSni(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setSni(boolean)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions setUseProxyProtocol(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setUseProxyProtocol(boolean)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions setProxyProtocolTimeout(long)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
long v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: long;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setProxyProtocolTimeout(long)>(v1);
return v2;
}
public io.vertx.core.http.HttpServerOptions setProxyProtocolTimeoutUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.net.NetServerOptions v2;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
v2 = specialinvoke v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.net.NetServerOptions setProxyProtocolTimeoutUnit(java.util.concurrent.TimeUnit)>(v1);
return v2;
}
public boolean isDecompressionSupported()
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: boolean decompressionSupported>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setDecompressionSupported(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpServerOptions: boolean decompressionSupported> = v1;
return v0;
}
public int getDecoderInitialBufferSize()
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: int decoderInitialBufferSize>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setDecoderInitialBufferSize(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
boolean v2;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
if v1 <= 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v2, "initialBufferSizeHttpDecoder must be > 0");
v0.<io.vertx.core.http.HttpServerOptions: int decoderInitialBufferSize> = v1;
return v0;
}
public io.vertx.core.http.HttpServerOptions setPerFrameWebSocketCompressionSupported(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpServerOptions: boolean perFrameWebSocketCompressionSupported> = v1;
return v0;
}
public boolean getPerFrameWebSocketCompressionSupported()
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: boolean perFrameWebSocketCompressionSupported>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setPerMessageWebSocketCompressionSupported(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpServerOptions: boolean perMessageWebSocketCompressionSupported> = v1;
return v0;
}
public boolean getPerMessageWebSocketCompressionSupported()
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: boolean perMessageWebSocketCompressionSupported>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setWebSocketCompressionLevel(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpServerOptions: int webSocketCompressionLevel> = v1;
return v0;
}
public int getWebSocketCompressionLevel()
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: int webSocketCompressionLevel>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setWebSocketAllowServerNoContext(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpServerOptions: boolean webSocketAllowServerNoContext> = v1;
return v0;
}
public boolean getWebSocketAllowServerNoContext()
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: boolean webSocketAllowServerNoContext>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setWebSocketPreferredClientNoContext(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpServerOptions: boolean webSocketPreferredClientNoContext> = v1;
return v0;
}
public boolean getWebSocketPreferredClientNoContext()
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: boolean webSocketPreferredClientNoContext>;
return v1;
}
public int getWebSocketClosingTimeout()
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: int webSocketClosingTimeout>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setWebSocketClosingTimeout(int)
{
int v1;
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.http.HttpServerOptions: int webSocketClosingTimeout> = v1;
return v0;
}
public io.vertx.core.tracing.TracingPolicy getTracingPolicy()
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.tracing.TracingPolicy v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setTracingPolicy(io.vertx.core.tracing.TracingPolicy)
{
io.vertx.core.http.HttpServerOptions v0;
io.vertx.core.tracing.TracingPolicy v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: io.vertx.core.tracing.TracingPolicy;
v0.<io.vertx.core.http.HttpServerOptions: io.vertx.core.tracing.TracingPolicy tracingPolicy> = v1;
return v0;
}
public boolean isRegisterWriteHandler()
{
io.vertx.core.http.HttpServerOptions v0;
v0 := @this: io.vertx.core.http.HttpServerOptions;
return 0;
}
public io.vertx.core.http.HttpServerOptions setRegisterWriteHandler(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
return v0;
}
public boolean isRegisterWebSocketWriteHandlers()
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 = v0.<io.vertx.core.http.HttpServerOptions: boolean registerWebSocketWriteHandlers>;
return v1;
}
public io.vertx.core.http.HttpServerOptions setRegisterWebSocketWriteHandlers(boolean)
{
io.vertx.core.http.HttpServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.HttpServerOptions: boolean registerWebSocketWriteHandlers> = v1;
return v0;
}
static void <clinit>()
{
java.util.List v3, v4;
io.vertx.core.http.HttpVersion v1, v2;
io.vertx.core.http.HttpVersion[] v0;
io.vertx.core.tracing.TracingPolicy v5;
v0 = newarray (io.vertx.core.http.HttpVersion)[2];
v1 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_2>;
v0[0] = v1;
v2 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_1_1>;
v0[1] = v2;
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v0);
v4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v3);
<io.vertx.core.http.HttpServerOptions: java.util.List DEFAULT_ALPN_VERSIONS> = v4;
v5 = <io.vertx.core.tracing.TracingPolicy: io.vertx.core.tracing.TracingPolicy ALWAYS>;
<io.vertx.core.http.HttpServerOptions: io.vertx.core.tracing.TracingPolicy DEFAULT_TRACING_POLICY> = v5;
return;
}
}