public interface  io.vertx.core.http.HttpServerRequest extends java.lang.Object implements io.vertx.core.streams.ReadStream
{
public static final io.vertx.core.Handler DEFAULT_INVALID_REQUEST_HANDLER;
public abstract io.vertx.core.http.HttpServerRequest exceptionHandler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpServerRequest handler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpServerRequest pause();
public abstract io.vertx.core.http.HttpServerRequest resume();
public abstract io.vertx.core.http.HttpServerRequest fetch(long);
public abstract io.vertx.core.http.HttpServerRequest endHandler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpVersion version();
public abstract io.vertx.core.http.HttpMethod method();
public boolean isSSL()
{
io.vertx.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpConnection v1;
boolean v2;
v0 := @this: io.vertx.core.http.HttpServerRequest;
v1 = interfaceinvoke v0.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpConnection connection()>();
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpConnection: boolean isSsl()>();
return v2;
}
public abstract java.lang.String scheme();
public abstract java.lang.String uri();
public abstract java.lang.String path();
public abstract java.lang.String query();
public abstract java.lang.String host();
public abstract long bytesRead();
public abstract io.vertx.core.http.HttpServerResponse response();
public abstract io.vertx.core.MultiMap headers();
public java.lang.String getHeader(java.lang.String)
{
io.vertx.core.http.HttpServerRequest v0;
io.vertx.core.MultiMap v2;
java.lang.String v1, v3;
v0 := @this: io.vertx.core.http.HttpServerRequest;
v1 := @parameter0: java.lang.String;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpServerRequest: io.vertx.core.MultiMap headers()>();
v3 = interfaceinvoke v2.<io.vertx.core.MultiMap: java.lang.String get(java.lang.String)>(v1);
return v3;
}
public java.lang.String getHeader(java.lang.CharSequence)
{
io.vertx.core.http.HttpServerRequest v0;
java.lang.CharSequence v1;
io.vertx.core.MultiMap v2;
java.lang.String v3;
v0 := @this: io.vertx.core.http.HttpServerRequest;
v1 := @parameter0: java.lang.CharSequence;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpServerRequest: io.vertx.core.MultiMap headers()>();
v3 = interfaceinvoke v2.<io.vertx.core.MultiMap: java.lang.String get(java.lang.CharSequence)>(v1);
return v3;
}
public abstract io.vertx.core.http.HttpServerRequest setParamsCharset(java.lang.String);
public abstract java.lang.String getParamsCharset();
public abstract io.vertx.core.MultiMap params();
public java.lang.String getParam(java.lang.String)
{
io.vertx.core.http.HttpServerRequest v0;
io.vertx.core.MultiMap v2;
java.lang.String v1, v3;
v0 := @this: io.vertx.core.http.HttpServerRequest;
v1 := @parameter0: java.lang.String;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpServerRequest: io.vertx.core.MultiMap params()>();
v3 = interfaceinvoke v2.<io.vertx.core.MultiMap: java.lang.String get(java.lang.String)>(v1);
return v3;
}
public java.lang.String getParam(java.lang.String, java.lang.String)
{
io.vertx.core.http.HttpServerRequest v0;
io.vertx.core.MultiMap v3;
java.lang.String v1, v2, v4, v5;
v0 := @this: io.vertx.core.http.HttpServerRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "defaultValue");
v3 = interfaceinvoke v0.<io.vertx.core.http.HttpServerRequest: io.vertx.core.MultiMap params()>();
v4 = interfaceinvoke v3.<io.vertx.core.MultiMap: java.lang.String get(java.lang.String)>(v1);
if v4 == null goto label1;
v5 = v4;
goto label2;
label1:
v5 = v2;
label2:
return v5;
}
public io.vertx.core.net.SocketAddress remoteAddress()
{
io.vertx.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpConnection v1;
io.vertx.core.net.SocketAddress v2;
v0 := @this: io.vertx.core.http.HttpServerRequest;
v1 = interfaceinvoke v0.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpConnection connection()>();
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpConnection: io.vertx.core.net.SocketAddress remoteAddress()>();
return v2;
}
public io.vertx.core.net.SocketAddress localAddress()
{
io.vertx.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpConnection v1;
io.vertx.core.net.SocketAddress v2;
v0 := @this: io.vertx.core.http.HttpServerRequest;
v1 = interfaceinvoke v0.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpConnection connection()>();
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpConnection: io.vertx.core.net.SocketAddress localAddress()>();
return v2;
}
public javax.net.ssl.SSLSession sslSession()
{
io.vertx.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpConnection v1;
javax.net.ssl.SSLSession v2;
v0 := @this: io.vertx.core.http.HttpServerRequest;
v1 = interfaceinvoke v0.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpConnection connection()>();
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpConnection: javax.net.ssl.SSLSession sslSession()>();
return v2;
}
public abstract javax.security.cert.X509Certificate[] peerCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException;
public abstract java.lang.String absoluteURI();
public io.vertx.core.http.HttpServerRequest bodyHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpServerRequest v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.HttpServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpServerRequest: io.vertx.core.Future body()>();
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onSuccess(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerRequest body(io.vertx.core.Handler)
{
io.vertx.core.http.HttpServerRequest v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.HttpServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpServerRequest: io.vertx.core.Future body()>();
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
return v0;
}
public abstract io.vertx.core.Future body();
public void end(io.vertx.core.Handler)
{
io.vertx.core.http.HttpServerRequest v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.HttpServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpServerRequest: io.vertx.core.Future end()>();
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
return;
}
public abstract io.vertx.core.Future end();
public void toNetSocket(io.vertx.core.Handler)
{
io.vertx.core.http.HttpServerRequest v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.HttpServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpServerRequest: io.vertx.core.Future toNetSocket()>();
if v1 == null goto label1;
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
label1:
return;
}
public abstract io.vertx.core.Future toNetSocket();
public abstract io.vertx.core.http.HttpServerRequest setExpectMultipart(boolean);
public abstract boolean isExpectMultipart();
public abstract io.vertx.core.http.HttpServerRequest uploadHandler(io.vertx.core.Handler);
public abstract io.vertx.core.MultiMap formAttributes();
public abstract java.lang.String getFormAttribute(java.lang.String);
public int streamId()
{
int v1;
io.vertx.core.http.HttpServerRequest v0;
v0 := @this: io.vertx.core.http.HttpServerRequest;
v1 = (int) -1;
return v1;
}
public void toWebSocket(io.vertx.core.Handler)
{
io.vertx.core.http.HttpServerRequest v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.HttpServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpServerRequest: io.vertx.core.Future toWebSocket()>();
if v1 == null goto label1;
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
label1:
return;
}
public abstract io.vertx.core.Future toWebSocket();
public abstract boolean isEnded();
public abstract io.vertx.core.http.HttpServerRequest customFrameHandler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpConnection connection();
public io.vertx.core.http.StreamPriority streamPriority()
{
io.vertx.core.http.HttpServerRequest v0;
v0 := @this: io.vertx.core.http.HttpServerRequest;
return null;
}
public abstract io.vertx.core.http.HttpServerRequest streamPriorityHandler(io.vertx.core.Handler);
public abstract io.netty.handler.codec.DecoderResult decoderResult();
public abstract io.vertx.core.http.Cookie getCookie(java.lang.String);
public abstract io.vertx.core.http.Cookie getCookie(java.lang.String, java.lang.String, java.lang.String);
public int cookieCount()
{
int v2;
java.util.Set v1;
io.vertx.core.http.HttpServerRequest v0;
v0 := @this: io.vertx.core.http.HttpServerRequest;
v1 = interfaceinvoke v0.<io.vertx.core.http.HttpServerRequest: java.util.Set cookies()>();
v2 = interfaceinvoke v1.<java.util.Set: int size()>();
return v2;
}
public java.util.Map cookieMap()
{
io.vertx.core.http.HttpServerRequest v0;
java.util.stream.Stream v2;
java.util.Set v1;
java.lang.Object v6;
java.util.stream.Collector v5;
java.util.function.Function v3, v4;
v0 := @this: io.vertx.core.http.HttpServerRequest;
v1 = interfaceinvoke v0.<io.vertx.core.http.HttpServerRequest: java.util.Set cookies()>();
v2 = interfaceinvoke v1.<java.util.Set: java.util.stream.Stream stream()>();
v3 = staticinvoke <io.vertx.core.http.HttpServerRequest$getName__951: java.util.function.Function bootstrap$()>();
v4 = staticinvoke <io.vertx.core.http.HttpServerRequest$lambda_cookieMap_1__952: java.util.function.Function bootstrap$()>();
v5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>(v3, v4);
v6 = interfaceinvoke v2.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v5);
return v6;
}
public abstract java.util.Set cookies(java.lang.String);
public abstract java.util.Set cookies();
public io.vertx.core.http.HttpServerRequest routed(java.lang.String)
{
io.vertx.core.http.HttpServerRequest v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.HttpServerRequest;
v1 := @parameter0: java.lang.String;
return v0;
}
static void <clinit>()
{
io.vertx.core.Handler v0;
v0 = staticinvoke <io.vertx.core.http.HttpServerRequest$lambda_static_0__953: io.vertx.core.Handler bootstrap$()>();
<io.vertx.core.http.HttpServerRequest: io.vertx.core.Handler DEFAULT_INVALID_REQUEST_HANDLER> = v0;
return;
}
}