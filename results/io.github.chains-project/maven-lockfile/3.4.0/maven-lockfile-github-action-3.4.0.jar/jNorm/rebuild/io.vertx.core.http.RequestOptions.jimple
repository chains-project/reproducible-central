public class io.vertx.core.http.RequestOptions extends java.lang.Object
{
public static final io.vertx.core.net.ProxyOptions DEFAULT_PROXY_OPTIONS;
public static final io.vertx.core.net.SocketAddress DEFAULT_SERVER;
public static final io.vertx.core.http.HttpMethod DEFAULT_HTTP_METHOD;
public static final java.lang.String DEFAULT_HOST;
public static final java.lang.Integer DEFAULT_PORT;
public static final java.lang.Boolean DEFAULT_SSL;
public static final java.lang.String DEFAULT_URI;
public static final boolean DEFAULT_FOLLOW_REDIRECTS;
public static final long DEFAULT_TIMEOUT;
private io.vertx.core.net.ProxyOptions proxyOptions;
private io.vertx.core.net.SocketAddress server;
private io.vertx.core.http.HttpMethod method;
private java.lang.String host;
private java.lang.Integer port;
private java.lang.Boolean ssl;
private java.lang.String uri;
private io.vertx.core.MultiMap headers;
private boolean followRedirects;
private long timeout;
private java.lang.String traceOperation;
public void <init>()
{
io.vertx.core.net.ProxyOptions v1;
io.vertx.core.http.HttpMethod v3;
java.lang.Boolean v6;
io.vertx.core.http.RequestOptions v0;
java.lang.String v4;
java.lang.Integer v5;
io.vertx.core.net.SocketAddress v2;
v0 := @this: io.vertx.core.http.RequestOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = <io.vertx.core.http.RequestOptions: io.vertx.core.net.ProxyOptions DEFAULT_PROXY_OPTIONS>;
v0.<io.vertx.core.http.RequestOptions: io.vertx.core.net.ProxyOptions proxyOptions> = v1;
v2 = <io.vertx.core.http.RequestOptions: io.vertx.core.net.SocketAddress DEFAULT_SERVER>;
v0.<io.vertx.core.http.RequestOptions: io.vertx.core.net.SocketAddress server> = v2;
v3 = <io.vertx.core.http.RequestOptions: io.vertx.core.http.HttpMethod DEFAULT_HTTP_METHOD>;
v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.HttpMethod method> = v3;
v4 = <io.vertx.core.http.RequestOptions: java.lang.String DEFAULT_HOST>;
v0.<io.vertx.core.http.RequestOptions: java.lang.String host> = v4;
v5 = <io.vertx.core.http.RequestOptions: java.lang.Integer DEFAULT_PORT>;
v0.<io.vertx.core.http.RequestOptions: java.lang.Integer port> = v5;
v6 = <io.vertx.core.http.RequestOptions: java.lang.Boolean DEFAULT_SSL>;
v0.<io.vertx.core.http.RequestOptions: java.lang.Boolean ssl> = v6;
v0.<io.vertx.core.http.RequestOptions: java.lang.String uri> = "/";
v0.<io.vertx.core.http.RequestOptions: boolean followRedirects> = 0;
v0.<io.vertx.core.http.RequestOptions: long timeout> = 0L;
v0.<io.vertx.core.http.RequestOptions: java.lang.String traceOperation> = null;
return;
}
public void <init>(io.vertx.core.http.RequestOptions)
{
io.vertx.core.MultiMap v12, v13, v14, v15;
io.vertx.core.http.RequestOptions v0, v1;
long v11;
java.lang.Integer v6;
java.lang.Boolean v10, v7;
java.lang.String v16, v5, v8;
boolean v9;
io.vertx.core.net.SocketAddress v3;
io.vertx.core.net.ProxyOptions v2;
io.vertx.core.http.HttpMethod v4;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: io.vertx.core.http.RequestOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = v1.<io.vertx.core.http.RequestOptions: io.vertx.core.net.ProxyOptions proxyOptions>;
virtualinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setProxyOptions(io.vertx.core.net.ProxyOptions)>(v2);
v3 = v1.<io.vertx.core.http.RequestOptions: io.vertx.core.net.SocketAddress server>;
virtualinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setServer(io.vertx.core.net.SocketAddress)>(v3);
v4 = v1.<io.vertx.core.http.RequestOptions: io.vertx.core.http.HttpMethod method>;
virtualinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setMethod(io.vertx.core.http.HttpMethod)>(v4);
v5 = v1.<io.vertx.core.http.RequestOptions: java.lang.String host>;
virtualinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setHost(java.lang.String)>(v5);
v6 = v1.<io.vertx.core.http.RequestOptions: java.lang.Integer port>;
virtualinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setPort(java.lang.Integer)>(v6);
v7 = v1.<io.vertx.core.http.RequestOptions: java.lang.Boolean ssl>;
virtualinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setSsl(java.lang.Boolean)>(v7);
v8 = v1.<io.vertx.core.http.RequestOptions: java.lang.String uri>;
virtualinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setURI(java.lang.String)>(v8);
v9 = v1.<io.vertx.core.http.RequestOptions: boolean followRedirects>;
v10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v9);
virtualinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setFollowRedirects(java.lang.Boolean)>(v10);
v11 = v1.<io.vertx.core.http.RequestOptions: long timeout>;
virtualinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setTimeout(long)>(v11);
v12 = v1.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap headers>;
if v12 == null goto label1;
v13 = staticinvoke <io.vertx.core.MultiMap: io.vertx.core.MultiMap caseInsensitiveMultiMap()>();
v14 = v1.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap headers>;
v15 = interfaceinvoke v13.<io.vertx.core.MultiMap: io.vertx.core.MultiMap setAll(io.vertx.core.MultiMap)>(v14);
virtualinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setHeaders(io.vertx.core.MultiMap)>(v15);
label1:
v16 = v1.<io.vertx.core.http.RequestOptions: java.lang.String traceOperation>;
virtualinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setTraceOperation(java.lang.String)>(v16);
return;
}
public void <init>(io.vertx.core.json.JsonObject)
{
io.vertx.core.http.RequestOptions v0;
java.lang.Integer v5, v6;
int v9;
io.vertx.core.json.JsonObject v1, v12, v4;
java.lang.String v2, v7, v8;
boolean v14, v17, v19, v21, v23;
io.vertx.core.net.SocketAddress v10, v11;
java.util.Iterator v13, v20;
io.vertx.core.http.HttpMethod v3;
java.lang.Object v15, v16, v18, v22, v24;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: io.vertx.core.json.JsonObject;
specialinvoke v0.<io.vertx.core.http.RequestOptions: void <init>()>();
staticinvoke <io.vertx.core.http.RequestOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.http.RequestOptions)>(v1, v0);
v2 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.lang.String getString(java.lang.String)>("method");
if v2 == null goto label1;
v3 = staticinvoke <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod valueOf(java.lang.String)>(v2);
virtualinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setMethod(io.vertx.core.http.HttpMethod)>(v3);
label1:
v4 = virtualinvoke v1.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject getJsonObject(java.lang.String)>("server");
if v4 == null goto label3;
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(80);
v6 = virtualinvoke v4.<io.vertx.core.json.JsonObject: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>("port", v5);
v7 = virtualinvoke v4.<io.vertx.core.json.JsonObject: java.lang.String getString(java.lang.String)>("host");
v8 = virtualinvoke v4.<io.vertx.core.json.JsonObject: java.lang.String getString(java.lang.String)>("path");
if v7 == null goto label2;
v9 = virtualinvoke v6.<java.lang.Integer: int intValue()>();
v10 = staticinvoke <io.vertx.core.net.SocketAddress: io.vertx.core.net.SocketAddress inetSocketAddress(int,java.lang.String)>(v9, v7);
v0.<io.vertx.core.http.RequestOptions: io.vertx.core.net.SocketAddress server> = v10;
goto label3;
label2:
if v8 == null goto label3;
v11 = staticinvoke <io.vertx.core.net.SocketAddress: io.vertx.core.net.SocketAddress domainSocketAddress(java.lang.String)>(v8);
v0.<io.vertx.core.http.RequestOptions: io.vertx.core.net.SocketAddress server> = v11;
label3:
v12 = virtualinvoke v1.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject getJsonObject(java.lang.String)>("headers");
if v12 == null goto label7;
v13 = virtualinvoke v12.<io.vertx.core.json.JsonObject: java.util.Iterator iterator()>();
label4:
v14 = interfaceinvoke v13.<java.util.Iterator: boolean hasNext()>();
if v14 == 0 goto label7;
v15 = interfaceinvoke v13.<java.util.Iterator: java.lang.Object next()>();
v16 = interfaceinvoke v15.<java.util.Map$Entry: java.lang.Object getValue()>();
v17 = v16 instanceof java.lang.String;
if v17 == 0 goto label5;
v18 = interfaceinvoke v15.<java.util.Map$Entry: java.lang.Object getKey()>();
virtualinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions addHeader(java.lang.String,java.lang.String)>(v18, v16);
goto label4;
label5:
v19 = v16 instanceof java.lang.Iterable;
if v19 == 0 goto label4;
v20 = interfaceinvoke v16.<java.lang.Iterable: java.util.Iterator iterator()>();
label6:
v21 = interfaceinvoke v20.<java.util.Iterator: boolean hasNext()>();
if v21 == 0 goto label4;
v22 = interfaceinvoke v20.<java.util.Iterator: java.lang.Object next()>();
v23 = v22 instanceof java.lang.String;
if v23 == 0 goto label6;
v24 = interfaceinvoke v15.<java.util.Map$Entry: java.lang.Object getKey()>();
virtualinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions addHeader(java.lang.String,java.lang.String)>(v24, v22);
goto label6;
label7:
return;
}
public io.vertx.core.net.ProxyOptions getProxyOptions()
{
io.vertx.core.http.RequestOptions v0;
io.vertx.core.net.ProxyOptions v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.net.ProxyOptions proxyOptions>;
return v1;
}
public io.vertx.core.http.RequestOptions setProxyOptions(io.vertx.core.net.ProxyOptions)
{
io.vertx.core.http.RequestOptions v0;
io.vertx.core.net.ProxyOptions v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: io.vertx.core.net.ProxyOptions;
v0.<io.vertx.core.http.RequestOptions: io.vertx.core.net.ProxyOptions proxyOptions> = v1;
return v0;
}
public io.vertx.core.net.SocketAddress getServer()
{
io.vertx.core.http.RequestOptions v0;
io.vertx.core.net.SocketAddress v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.net.SocketAddress server>;
return v1;
}
public io.vertx.core.http.RequestOptions setServer(io.vertx.core.net.SocketAddress)
{
io.vertx.core.http.RequestOptions v0;
io.vertx.core.net.SocketAddress v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: io.vertx.core.net.SocketAddress;
v0.<io.vertx.core.http.RequestOptions: io.vertx.core.net.SocketAddress server> = v1;
return v0;
}
public io.vertx.core.http.HttpMethod getMethod()
{
io.vertx.core.http.RequestOptions v0;
io.vertx.core.http.HttpMethod v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.HttpMethod method>;
return v1;
}
public io.vertx.core.http.RequestOptions setMethod(io.vertx.core.http.HttpMethod)
{
io.vertx.core.http.RequestOptions v0;
io.vertx.core.http.HttpMethod v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.HttpMethod method> = v1;
return v0;
}
public java.lang.String getHost()
{
io.vertx.core.http.RequestOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 = v0.<io.vertx.core.http.RequestOptions: java.lang.String host>;
return v1;
}
public io.vertx.core.http.RequestOptions setHost(java.lang.String)
{
io.vertx.core.http.RequestOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.http.RequestOptions: java.lang.String host> = v1;
return v0;
}
public java.lang.Integer getPort()
{
io.vertx.core.http.RequestOptions v0;
java.lang.Integer v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 = v0.<io.vertx.core.http.RequestOptions: java.lang.Integer port>;
return v1;
}
public io.vertx.core.http.RequestOptions setPort(java.lang.Integer)
{
io.vertx.core.http.RequestOptions v0;
java.lang.Integer v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: java.lang.Integer;
v0.<io.vertx.core.http.RequestOptions: java.lang.Integer port> = v1;
return v0;
}
public java.lang.Boolean isSsl()
{
java.lang.Boolean v1;
io.vertx.core.http.RequestOptions v0;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 = v0.<io.vertx.core.http.RequestOptions: java.lang.Boolean ssl>;
return v1;
}
public io.vertx.core.http.RequestOptions setSsl(java.lang.Boolean)
{
java.lang.Boolean v1;
io.vertx.core.http.RequestOptions v0;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: java.lang.Boolean;
v0.<io.vertx.core.http.RequestOptions: java.lang.Boolean ssl> = v1;
return v0;
}
public java.lang.String getURI()
{
io.vertx.core.http.RequestOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 = v0.<io.vertx.core.http.RequestOptions: java.lang.String uri>;
return v1;
}
public io.vertx.core.http.RequestOptions setURI(java.lang.String)
{
io.vertx.core.http.RequestOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.http.RequestOptions: java.lang.String uri> = v1;
return v0;
}
public java.lang.Boolean getFollowRedirects()
{
java.lang.Boolean v2;
io.vertx.core.http.RequestOptions v0;
boolean v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 = v0.<io.vertx.core.http.RequestOptions: boolean followRedirects>;
v2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v1);
return v2;
}
public io.vertx.core.http.RequestOptions setFollowRedirects(java.lang.Boolean)
{
java.lang.Boolean v1;
io.vertx.core.http.RequestOptions v0;
boolean v2;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: java.lang.Boolean;
v2 = virtualinvoke v1.<java.lang.Boolean: boolean booleanValue()>();
v0.<io.vertx.core.http.RequestOptions: boolean followRedirects> = v2;
return v0;
}
public long getTimeout()
{
io.vertx.core.http.RequestOptions v0;
long v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 = v0.<io.vertx.core.http.RequestOptions: long timeout>;
return v1;
}
public io.vertx.core.http.RequestOptions setTimeout(long)
{
io.vertx.core.http.RequestOptions v0;
long v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: long;
v0.<io.vertx.core.http.RequestOptions: long timeout> = v1;
return v0;
}
private java.net.URL parseUrl(java.lang.String)
{
io.vertx.core.VertxException v4;
java.net.MalformedURLException v3;
java.net.URL v2;
io.vertx.core.http.RequestOptions v0;
java.lang.String v1, v5;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: java.lang.String;
label1:
v2 = new java.net.URL;
specialinvoke v2.<java.net.URL: void <init>(java.lang.String)>(v1);
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new io.vertx.core.VertxException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid url: \u0001");
specialinvoke v4.<io.vertx.core.VertxException: void <init>(java.lang.String,java.lang.Throwable)>(v5, v3);
throw v4;
catch java.net.MalformedURLException from label1 to label2 with label3;
}
public io.vertx.core.http.RequestOptions setAbsoluteURI(java.lang.String)
{
java.net.URL v2;
io.vertx.core.http.RequestOptions v0, v3;
java.lang.String v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: java.lang.String;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "Cannot set a null absolute URI");
v2 = specialinvoke v0.<io.vertx.core.http.RequestOptions: java.net.URL parseUrl(java.lang.String)>(v1);
v3 = virtualinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions setAbsoluteURI(java.net.URL)>(v2);
return v3;
}
public io.vertx.core.http.RequestOptions setAbsoluteURI(java.net.URL)
{
java.net.URL v1;
io.vertx.core.http.RequestOptions v0;
java.lang.Integer v17;
byte v10;
int v11, v14, v15, v3;
java.lang.Boolean v2;
java.lang.String v18, v4, v6, v7, v8, v9;
boolean v12, v13, v5;
java.lang.IllegalArgumentException v16;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: java.net.URL;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "Cannot set a null absolute URI");
v2 = <java.lang.Boolean: java.lang.Boolean FALSE>;
v3 = virtualinvoke v1.<java.net.URL: int getPort()>();
v4 = virtualinvoke v1.<java.net.URL: java.lang.String getPath()>();
v5 = virtualinvoke v4.<java.lang.String: boolean isEmpty()>();
if v5 == 0 goto label1;
v6 = virtualinvoke v1.<java.net.URL: java.lang.String getFile()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("/\u0001");
goto label2;
label1:
v7 = virtualinvoke v1.<java.net.URL: java.lang.String getFile()>();
label2:
v8 = v7;
v9 = virtualinvoke v1.<java.net.URL: java.lang.String getProtocol()>();
v10 = -1;
v11 = virtualinvoke v9.<java.lang.String: int hashCode()>();
lookupswitch(v11)
{
case 3213448: goto label3;
case 99617003: goto label4;
default: goto label5;
};
label3:
v12 = virtualinvoke v9.<java.lang.String: boolean equals(java.lang.Object)>("http");
if v12 == 0 goto label5;
v10 = 0;
goto label5;
label4:
v13 = virtualinvoke v9.<java.lang.String: boolean equals(java.lang.Object)>("https");
if v13 == 0 goto label5;
v10 = 1;
label5:
lookupswitch(v10)
{
case 0: goto label6;
case 1: goto label7;
default: goto label8;
};
label6:
v14 = (int) -1;
if v3 != v14 goto label9;
v3 = 80;
goto label9;
label7:
v2 = <java.lang.Boolean: java.lang.Boolean TRUE>;
v15 = (int) -1;
if v3 != v15 goto label9;
v3 = 443;
goto label9;
label8:
v16 = new java.lang.IllegalArgumentException;
specialinvoke v16.<java.lang.IllegalArgumentException: void <init>()>();
throw v16;
label9:
v0.<io.vertx.core.http.RequestOptions: java.lang.String uri> = v8;
v17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v0.<io.vertx.core.http.RequestOptions: java.lang.Integer port> = v17;
v0.<io.vertx.core.http.RequestOptions: java.lang.Boolean ssl> = v2;
v18 = virtualinvoke v1.<java.net.URL: java.lang.String getHost()>();
v0.<io.vertx.core.http.RequestOptions: java.lang.String host> = v18;
return v0;
}
public io.vertx.core.http.RequestOptions addHeader(java.lang.String, java.lang.String)
{
io.vertx.core.http.RequestOptions v0, v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions addHeader(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
return v3;
}
public io.vertx.core.http.RequestOptions addHeader(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v1, v2;
io.vertx.core.MultiMap v3;
io.vertx.core.http.RequestOptions v0;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
specialinvoke v0.<io.vertx.core.http.RequestOptions: void checkHeaders()>();
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "no null key accepted");
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "no null value accepted");
v3 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap headers>;
interfaceinvoke v3.<io.vertx.core.MultiMap: io.vertx.core.MultiMap add(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
return v0;
}
public io.vertx.core.http.RequestOptions addHeader(java.lang.CharSequence, java.lang.Iterable)
{
java.lang.CharSequence v1;
io.vertx.core.MultiMap v3;
io.vertx.core.http.RequestOptions v0;
java.lang.Iterable v2;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
specialinvoke v0.<io.vertx.core.http.RequestOptions: void checkHeaders()>();
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "no null key accepted");
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "no null values accepted");
v3 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap headers>;
interfaceinvoke v3.<io.vertx.core.MultiMap: io.vertx.core.MultiMap add(java.lang.CharSequence,java.lang.Iterable)>(v1, v2);
return v0;
}
public io.vertx.core.http.RequestOptions putHeader(java.lang.String, java.lang.String)
{
io.vertx.core.http.RequestOptions v0, v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions putHeader(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
return v3;
}
public io.vertx.core.http.RequestOptions putHeader(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v1, v2;
io.vertx.core.MultiMap v3;
io.vertx.core.http.RequestOptions v0;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
specialinvoke v0.<io.vertx.core.http.RequestOptions: void checkHeaders()>();
v3 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap headers>;
interfaceinvoke v3.<io.vertx.core.MultiMap: io.vertx.core.MultiMap set(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
return v0;
}
public io.vertx.core.http.RequestOptions putHeader(java.lang.CharSequence, java.lang.Iterable)
{
java.lang.CharSequence v1;
io.vertx.core.MultiMap v3;
io.vertx.core.http.RequestOptions v0;
java.lang.Iterable v2;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
specialinvoke v0.<io.vertx.core.http.RequestOptions: void checkHeaders()>();
v3 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap headers>;
interfaceinvoke v3.<io.vertx.core.MultiMap: io.vertx.core.MultiMap set(java.lang.CharSequence,java.lang.Iterable)>(v1, v2);
return v0;
}
public io.vertx.core.http.RequestOptions removeHeader(java.lang.String)
{
io.vertx.core.http.RequestOptions v0, v2;
java.lang.String v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.RequestOptions removeHeader(java.lang.CharSequence)>(v1);
return v2;
}
public io.vertx.core.http.RequestOptions removeHeader(java.lang.CharSequence)
{
java.lang.CharSequence v1;
io.vertx.core.MultiMap v2, v3;
io.vertx.core.http.RequestOptions v0;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: java.lang.CharSequence;
v2 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap headers>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap headers>;
interfaceinvoke v3.<io.vertx.core.MultiMap: io.vertx.core.MultiMap remove(java.lang.CharSequence)>(v1);
label1:
return v0;
}
public io.vertx.core.http.RequestOptions setHeaders(io.vertx.core.MultiMap)
{
io.vertx.core.MultiMap v1;
io.vertx.core.http.RequestOptions v0;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: io.vertx.core.MultiMap;
v0.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap headers> = v1;
return v0;
}
public io.vertx.core.MultiMap getHeaders()
{
io.vertx.core.MultiMap v1;
io.vertx.core.http.RequestOptions v0;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap headers>;
return v1;
}
private void checkHeaders()
{
io.vertx.core.MultiMap v1, v2;
io.vertx.core.http.RequestOptions v0;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap headers>;
if v1 != null goto label1;
v2 = staticinvoke <io.vertx.core.http.HttpHeaders: io.vertx.core.MultiMap headers()>();
v0.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap headers> = v2;
label1:
return;
}
public java.lang.String getTraceOperation()
{
io.vertx.core.http.RequestOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 = v0.<io.vertx.core.http.RequestOptions: java.lang.String traceOperation>;
return v1;
}
public io.vertx.core.http.RequestOptions setTraceOperation(java.lang.String)
{
io.vertx.core.http.RequestOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.http.RequestOptions: java.lang.String traceOperation> = v1;
return v0;
}
public io.vertx.core.json.JsonObject toJson()
{
io.vertx.core.MultiMap v16, v18, v23;
io.vertx.core.http.RequestOptions v0;
java.lang.Integer v13;
int v12, v25;
io.vertx.core.json.JsonObject v1, v17, v6;
java.lang.String v10, v15, v4;
boolean v21, v8;
io.vertx.core.net.SocketAddress v11, v14, v5, v7, v9;
java.util.Iterator v20, v26;
java.util.Set v19;
java.util.List v24;
io.vertx.core.http.HttpMethod v2, v3;
java.lang.Object v22, v27;
v0 := @this: io.vertx.core.http.RequestOptions;
v1 = new io.vertx.core.json.JsonObject;
specialinvoke v1.<io.vertx.core.json.JsonObject: void <init>()>();
staticinvoke <io.vertx.core.http.RequestOptionsConverter: void toJson(io.vertx.core.http.RequestOptions,io.vertx.core.json.JsonObject)>(v0, v1);
v2 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.HttpMethod method>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.http.HttpMethod method>;
v4 = virtualinvoke v3.<io.vertx.core.http.HttpMethod: java.lang.String name()>();
virtualinvoke v1.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject put(java.lang.String,java.lang.Object)>("method", v4);
label1:
v5 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.net.SocketAddress server>;
if v5 == null goto label4;
v6 = new io.vertx.core.json.JsonObject;
specialinvoke v6.<io.vertx.core.json.JsonObject: void <init>()>();
v7 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.net.SocketAddress server>;
v8 = interfaceinvoke v7.<io.vertx.core.net.SocketAddress: boolean isInetSocket()>();
if v8 == 0 goto label2;
v9 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.net.SocketAddress server>;
v10 = interfaceinvoke v9.<io.vertx.core.net.SocketAddress: java.lang.String host()>();
virtualinvoke v6.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject put(java.lang.String,java.lang.Object)>("host", v10);
v11 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.net.SocketAddress server>;
v12 = interfaceinvoke v11.<io.vertx.core.net.SocketAddress: int port()>();
v13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v12);
virtualinvoke v6.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject put(java.lang.String,java.lang.Object)>("port", v13);
goto label3;
label2:
v14 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.net.SocketAddress server>;
v15 = interfaceinvoke v14.<io.vertx.core.net.SocketAddress: java.lang.String path()>();
virtualinvoke v6.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject put(java.lang.String,java.lang.Object)>("path", v15);
label3:
virtualinvoke v1.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject put(java.lang.String,java.lang.Object)>("server", v6);
label4:
v16 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap headers>;
if v16 == null goto label8;
v17 = new io.vertx.core.json.JsonObject;
specialinvoke v17.<io.vertx.core.json.JsonObject: void <init>()>();
v18 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap headers>;
v19 = interfaceinvoke v18.<io.vertx.core.MultiMap: java.util.Set names()>();
v20 = interfaceinvoke v19.<java.util.Set: java.util.Iterator iterator()>();
label5:
v21 = interfaceinvoke v20.<java.util.Iterator: boolean hasNext()>();
if v21 == 0 goto label7;
v22 = interfaceinvoke v20.<java.util.Iterator: java.lang.Object next()>();
v23 = v0.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap headers>;
v24 = interfaceinvoke v23.<io.vertx.core.MultiMap: java.util.List getAll(java.lang.String)>(v22);
v25 = interfaceinvoke v24.<java.util.List: int size()>();
if v25 != 1 goto label6;
v26 = interfaceinvoke v24.<java.util.List: java.util.Iterator iterator()>();
v27 = interfaceinvoke v26.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v17.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject put(java.lang.String,java.lang.Object)>(v22, v27);
goto label5;
label6:
virtualinvoke v17.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject put(java.lang.String,java.lang.Object)>(v22, v24);
goto label5;
label7:
virtualinvoke v1.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject put(java.lang.String,java.lang.Object)>("headers", v17);
label8:
return v1;
}
static void <clinit>()
{
io.vertx.core.http.HttpMethod v0;
<io.vertx.core.http.RequestOptions: io.vertx.core.net.ProxyOptions DEFAULT_PROXY_OPTIONS> = null;
<io.vertx.core.http.RequestOptions: io.vertx.core.net.SocketAddress DEFAULT_SERVER> = null;
v0 = <io.vertx.core.http.HttpMethod: io.vertx.core.http.HttpMethod GET>;
<io.vertx.core.http.RequestOptions: io.vertx.core.http.HttpMethod DEFAULT_HTTP_METHOD> = v0;
<io.vertx.core.http.RequestOptions: java.lang.String DEFAULT_HOST> = null;
<io.vertx.core.http.RequestOptions: java.lang.Integer DEFAULT_PORT> = null;
<io.vertx.core.http.RequestOptions: java.lang.Boolean DEFAULT_SSL> = null;
return;
}
}