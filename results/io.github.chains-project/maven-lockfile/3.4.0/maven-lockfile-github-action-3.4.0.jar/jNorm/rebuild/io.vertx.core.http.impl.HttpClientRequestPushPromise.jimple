class io.vertx.core.http.impl.HttpClientRequestPushPromise extends io.vertx.core.http.impl.HttpClientRequestBase
{
private final io.vertx.core.http.impl.HttpClientStream stream;
private final io.vertx.core.MultiMap headers;
public void <init>(io.vertx.core.http.impl.HttpClientStream, io.vertx.core.http.impl.HttpClientImpl, boolean, io.vertx.core.http.HttpMethod, java.lang.String, java.lang.String, int, io.vertx.core.MultiMap)
{
io.vertx.core.impl.future.PromiseInternal v11;
io.vertx.core.http.impl.HttpClientImpl v2;
io.vertx.core.MultiMap v8;
io.vertx.core.impl.ContextInternal v10;
io.vertx.core.http.impl.HttpClientStream v1;
io.vertx.core.http.impl.HttpClientConnection v9;
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
io.vertx.core.http.HttpMethod v4;
int v7;
java.lang.String v5, v6;
boolean v3;
io.vertx.core.net.SocketAddress v12;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: io.vertx.core.http.impl.HttpClientStream;
v2 := @parameter1: io.vertx.core.http.impl.HttpClientImpl;
v3 := @parameter2: boolean;
v4 := @parameter3: io.vertx.core.http.HttpMethod;
v5 := @parameter4: java.lang.String;
v6 := @parameter5: java.lang.String;
v7 := @parameter6: int;
v8 := @parameter7: io.vertx.core.MultiMap;
v9 = interfaceinvoke v1.<io.vertx.core.http.impl.HttpClientStream: io.vertx.core.http.impl.HttpClientConnection connection()>();
v10 = interfaceinvoke v9.<io.vertx.core.http.impl.HttpClientConnection: io.vertx.core.impl.ContextInternal getContext()>();
v11 = interfaceinvoke v10.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v12 = staticinvoke <io.vertx.core.net.SocketAddress: io.vertx.core.net.SocketAddress inetSocketAddress(int,java.lang.String)>(v7, v6);
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestBase: void <init>(io.vertx.core.http.impl.HttpClientImpl,io.vertx.core.http.impl.HttpClientStream,io.vertx.core.impl.future.PromiseInternal,boolean,io.vertx.core.http.HttpMethod,io.vertx.core.net.SocketAddress,java.lang.String,int,java.lang.String)>(v2, v1, v11, v3, v4, v12, v6, v7, v5);
v0.<io.vertx.core.http.impl.HttpClientRequestPushPromise: io.vertx.core.http.impl.HttpClientStream stream> = v1;
v0.<io.vertx.core.http.impl.HttpClientRequestPushPromise: io.vertx.core.MultiMap headers> = v8;
return;
}
public io.vertx.core.http.HttpVersion version()
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
io.vertx.core.http.impl.HttpClientStream v1;
io.vertx.core.http.HttpVersion v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestPushPromise: io.vertx.core.http.impl.HttpClientStream stream>;
v2 = interfaceinvoke v1.<io.vertx.core.http.impl.HttpClientStream: io.vertx.core.http.HttpVersion version()>();
return v2;
}
void handleResponse(io.vertx.core.Promise, io.vertx.core.http.HttpClientResponse, long)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
io.vertx.core.http.HttpClientResponse v2;
io.vertx.core.Promise v1;
long v3;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: io.vertx.core.Promise;
v2 := @parameter1: io.vertx.core.http.HttpClientResponse;
v3 := @parameter2: long;
interfaceinvoke v1.<io.vertx.core.Promise: void complete(java.lang.Object)>(v2);
return;
}
public io.vertx.core.http.HttpClientRequest exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: io.vertx.core.Handler;
return v0;
}
public io.vertx.core.http.HttpConnection connection()
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
io.vertx.core.http.impl.HttpClientStream v1;
io.vertx.core.http.impl.HttpClientConnection v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestPushPromise: io.vertx.core.http.impl.HttpClientStream stream>;
v2 = interfaceinvoke v1.<io.vertx.core.http.impl.HttpClientStream: io.vertx.core.http.impl.HttpClientConnection connection()>();
return v2;
}
boolean reset(java.lang.Throwable)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.Throwable v1;
io.vertx.core.http.impl.HttpClientStream v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestPushPromise: io.vertx.core.http.impl.HttpClientStream stream>;
interfaceinvoke v2.<io.vertx.core.http.impl.HttpClientStream: void reset(java.lang.Throwable)>(v1);
return 1;
}
public boolean isChunked()
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
return 0;
}
public io.vertx.core.MultiMap headers()
{
io.vertx.core.MultiMap v1;
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestPushPromise: io.vertx.core.MultiMap headers>;
return v1;
}
public io.vertx.core.Future write(io.vertx.core.buffer.Buffer)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v2;
io.vertx.core.buffer.Buffer v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
public io.vertx.core.http.HttpClientRequest setWriteQueueMaxSize(int)
{
int v1;
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: int;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
public io.vertx.core.http.HttpClientRequest drainHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: io.vertx.core.Handler;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
public io.vertx.core.http.HttpClientRequest setFollowRedirects(boolean)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v2;
boolean v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: boolean;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
public io.vertx.core.http.HttpClientRequest setMaxRedirects(int)
{
int v1;
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: int;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
public io.vertx.core.http.HttpClientRequest setChunked(boolean)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v2;
boolean v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: boolean;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
public io.vertx.core.http.HttpClientRequest putHeader(java.lang.String, java.lang.String)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>()>();
throw v3;
}
public io.vertx.core.http.HttpClientRequest putHeader(java.lang.CharSequence, java.lang.CharSequence)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v3;
java.lang.CharSequence v1, v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>()>();
throw v3;
}
public io.vertx.core.http.HttpClientRequest putHeader(java.lang.String, java.lang.Iterable)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v3;
java.lang.String v1;
java.lang.Iterable v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Iterable;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>()>();
throw v3;
}
public io.vertx.core.http.HttpClientRequest putHeader(java.lang.CharSequence, java.lang.Iterable)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v3;
java.lang.CharSequence v1;
java.lang.Iterable v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>()>();
throw v3;
}
public io.vertx.core.Future write(java.lang.String)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v2;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
public io.vertx.core.Future write(java.lang.String, java.lang.String)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>()>();
throw v3;
}
public void write(io.vertx.core.buffer.Buffer, io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v3;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: io.vertx.core.Handler;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>()>();
throw v3;
}
public void write(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v3;
java.lang.String v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>()>();
throw v3;
}
public void write(java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v4;
java.lang.String v1, v2;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>()>();
throw v4;
}
public io.vertx.core.http.HttpClientRequest continueHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: io.vertx.core.Handler;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
public io.vertx.core.http.HttpClientRequest earlyHintsHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: io.vertx.core.Handler;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
public io.vertx.core.Future sendHead()
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>()>();
throw v1;
}
public io.vertx.core.http.HttpClientRequest sendHead(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: io.vertx.core.Handler;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
public io.vertx.core.Future connect()
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>()>();
throw v1;
}
public void connect(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: io.vertx.core.Handler;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
public io.vertx.core.Future end(java.lang.String)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v2;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
public void end(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v3;
java.lang.String v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>()>();
throw v3;
}
public io.vertx.core.Future end(java.lang.String, java.lang.String)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>()>();
throw v3;
}
public void end(java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v4;
java.lang.String v1, v2;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>()>();
throw v4;
}
public io.vertx.core.Future end(io.vertx.core.buffer.Buffer)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v2;
io.vertx.core.buffer.Buffer v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
public void end(io.vertx.core.buffer.Buffer, io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v3;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: io.vertx.core.Handler;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>()>();
throw v3;
}
public io.vertx.core.Future end()
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>()>();
throw v1;
}
public void end(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: io.vertx.core.Handler;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
public boolean writeQueueFull()
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.IllegalStateException v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>()>();
throw v1;
}
public io.vertx.core.http.StreamPriority getStreamPriority()
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
io.vertx.core.http.impl.HttpClientStream v1;
io.vertx.core.http.StreamPriority v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestPushPromise: io.vertx.core.http.impl.HttpClientStream stream>;
v2 = interfaceinvoke v1.<io.vertx.core.http.impl.HttpClientStream: io.vertx.core.http.StreamPriority priority()>();
return v2;
}
public io.vertx.core.http.HttpClientRequest writeCustomFrame(int, int, io.vertx.core.buffer.Buffer)
{
io.vertx.core.http.impl.HttpClientRequestPushPromise v0;
java.lang.UnsupportedOperationException v4;
io.vertx.core.buffer.Buffer v3;
int v1, v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestPushPromise;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: io.vertx.core.buffer.Buffer;
v4 = new java.lang.UnsupportedOperationException;
specialinvoke v4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Cannot write frame with HTTP/1.x ");
throw v4;
}
}