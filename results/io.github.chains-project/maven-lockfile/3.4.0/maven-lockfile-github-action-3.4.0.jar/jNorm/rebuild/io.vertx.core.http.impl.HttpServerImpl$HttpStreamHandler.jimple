class io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler extends java.lang.Object implements io.vertx.core.streams.ReadStream
{
private io.vertx.core.Handler handler;
private long demand;
private io.vertx.core.Handler endHandler;
final io.vertx.core.http.impl.HttpServerImpl this$0;
void <init>(io.vertx.core.http.impl.HttpServerImpl)
{
io.vertx.core.http.impl.HttpServerImpl v1;
io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler v0;
v0 := @this: io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler;
v1 := @parameter0: io.vertx.core.http.impl.HttpServerImpl;
v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.http.impl.HttpServerImpl this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: long demand> = 9223372036854775807L;
return;
}
io.vertx.core.Handler handler()
{
io.vertx.core.http.impl.HttpServerImpl v1;
java.lang.Throwable v3;
io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler v0;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler;
v1 = v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.http.impl.HttpServerImpl this$0>;
entermonitor v1;
label1:
v2 = v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.Handler handler>;
exitmonitor v1;
label2:
return v2;
label3:
v3 := @caughtexception;
exitmonitor v1;
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
boolean accept()
{
io.vertx.core.http.impl.HttpServerImpl v1;
java.lang.Throwable v10;
long v2, v6, v8, v9;
io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler v0;
byte v3, v7;
boolean v4, v5;
v0 := @this: io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler;
v1 = v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.http.impl.HttpServerImpl this$0>;
entermonitor v1;
label1:
v2 = v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: long demand>;
v3 = v2 cmp 0L;
if v3 <= 0 goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
v5 = v4;
if v4 == 0 goto label4;
v6 = v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: long demand>;
v7 = v6 cmp 9223372036854775807L;
if v7 == 0 goto label4;
v8 = v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: long demand>;
v9 = v8 - 1L;
v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: long demand> = v9;
label4:
exitmonitor v1;
label5:
return v5;
label6:
v10 := @caughtexception;
exitmonitor v1;
throw v10;
catch java.lang.Throwable from label1 to label5 with label6;
}
io.vertx.core.Handler endHandler()
{
io.vertx.core.http.impl.HttpServerImpl v1;
java.lang.Throwable v3;
io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler v0;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler;
v1 = v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.http.impl.HttpServerImpl this$0>;
entermonitor v1;
label1:
v2 = v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.Handler endHandler>;
exitmonitor v1;
label2:
return v2;
label3:
v3 := @caughtexception;
exitmonitor v1;
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerImpl v2, v3;
java.lang.Throwable v6;
java.lang.IllegalStateException v5;
io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler v0;
io.vertx.core.Handler v1;
boolean v4;
v0 := @this: io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.http.impl.HttpServerImpl this$0>;
entermonitor v2;
label1:
v3 = v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.http.impl.HttpServerImpl this$0>;
v4 = virtualinvoke v3.<io.vertx.core.http.impl.HttpServerImpl: boolean isListening()>();
if v4 == 0 goto label2;
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Please set handler before server is listening");
throw v5;
label2:
v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.Handler handler> = v1;
exitmonitor v2;
label3:
return v0;
label4:
v6 := @caughtexception;
exitmonitor v2;
throw v6;
catch java.lang.Throwable from label1 to label3 with label4;
}
public io.vertx.core.streams.ReadStream pause()
{
io.vertx.core.http.impl.HttpServerImpl v1;
java.lang.Throwable v2;
io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler v0;
v0 := @this: io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler;
v1 = v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.http.impl.HttpServerImpl this$0>;
entermonitor v1;
label1:
v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: long demand> = 0L;
exitmonitor v1;
label2:
return v0;
label3:
v2 := @caughtexception;
exitmonitor v1;
throw v2;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.streams.ReadStream fetch(long)
{
io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler v0;
byte v2, v6;
long v1, v3, v4, v5;
v0 := @this: io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: long demand>;
v4 = v3 + v1;
v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: long demand> = v4;
v5 = v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: long demand>;
v6 = v5 cmp 0L;
if v6 >= 0 goto label1;
v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: long demand> = 9223372036854775807L;
label1:
return v0;
}
public io.vertx.core.streams.ReadStream resume()
{
io.vertx.core.http.impl.HttpServerImpl v1;
java.lang.Throwable v2;
io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler v0;
v0 := @this: io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler;
v1 = v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.http.impl.HttpServerImpl this$0>;
entermonitor v1;
label1:
v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: long demand> = 9223372036854775807L;
exitmonitor v1;
label2:
return v0;
label3:
v2 := @caughtexception;
exitmonitor v1;
throw v2;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.streams.ReadStream endHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerImpl v2;
java.lang.Throwable v3;
io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.http.impl.HttpServerImpl this$0>;
entermonitor v2;
label1:
v0.<io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler: io.vertx.core.Handler endHandler> = v1;
exitmonitor v2;
label2:
return v0;
label3:
v3 := @caughtexception;
exitmonitor v2;
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.streams.ReadStream exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpServerImpl$HttpStreamHandler;
v1 := @parameter0: io.vertx.core.Handler;
return v0;
}
}