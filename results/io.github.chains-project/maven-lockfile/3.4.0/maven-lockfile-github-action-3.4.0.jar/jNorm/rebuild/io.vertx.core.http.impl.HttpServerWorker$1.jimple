class io.vertx.core.http.impl.HttpServerWorker$1 extends io.vertx.core.http.impl.Http1xOrH2CHandler
{
final io.netty.handler.timeout.IdleStateHandler val$idle;
final io.netty.channel.ChannelPipeline val$pipeline;
final io.netty.channel.Channel val$ch;
final io.vertx.core.net.impl.SslChannelProvider val$sslChannelProvider;
final io.vertx.core.http.impl.HttpServerWorker this$0;
void <init>(io.vertx.core.http.impl.HttpServerWorker, io.netty.handler.timeout.IdleStateHandler, io.netty.channel.ChannelPipeline, io.netty.channel.Channel, io.vertx.core.net.impl.SslChannelProvider)
{
io.netty.channel.Channel v4;
io.netty.handler.timeout.IdleStateHandler v2;
io.vertx.core.net.impl.SslChannelProvider v5;
io.vertx.core.http.impl.HttpServerWorker v1;
io.netty.channel.ChannelPipeline v3;
io.vertx.core.http.impl.HttpServerWorker$1 v0;
v0 := @this: io.vertx.core.http.impl.HttpServerWorker$1;
v1 := @parameter0: io.vertx.core.http.impl.HttpServerWorker;
v2 := @parameter1: io.netty.handler.timeout.IdleStateHandler;
v3 := @parameter2: io.netty.channel.ChannelPipeline;
v4 := @parameter3: io.netty.channel.Channel;
v5 := @parameter4: io.vertx.core.net.impl.SslChannelProvider;
v0.<io.vertx.core.http.impl.HttpServerWorker$1: io.vertx.core.http.impl.HttpServerWorker this$0> = v1;
v0.<io.vertx.core.http.impl.HttpServerWorker$1: io.netty.handler.timeout.IdleStateHandler val$idle> = v2;
v0.<io.vertx.core.http.impl.HttpServerWorker$1: io.netty.channel.ChannelPipeline val$pipeline> = v3;
v0.<io.vertx.core.http.impl.HttpServerWorker$1: io.netty.channel.Channel val$ch> = v4;
v0.<io.vertx.core.http.impl.HttpServerWorker$1: io.vertx.core.net.impl.SslChannelProvider val$sslChannelProvider> = v5;
specialinvoke v0.<io.vertx.core.http.impl.Http1xOrH2CHandler: void <init>()>();
return;
}
protected void configure(io.netty.channel.ChannelHandlerContext, boolean)
{
io.netty.channel.ChannelPipeline v4;
io.vertx.core.http.impl.HttpServerWorker$1 v0;
io.netty.channel.Channel v7, v9;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.timeout.IdleStateHandler v3, v5;
io.vertx.core.net.impl.SslChannelProvider v10;
io.vertx.core.http.impl.HttpServerWorker v6, v8;
boolean v2;
v0 := @this: io.vertx.core.http.impl.HttpServerWorker$1;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: boolean;
v3 = v0.<io.vertx.core.http.impl.HttpServerWorker$1: io.netty.handler.timeout.IdleStateHandler val$idle>;
if v3 == null goto label1;
v4 = v0.<io.vertx.core.http.impl.HttpServerWorker$1: io.netty.channel.ChannelPipeline val$pipeline>;
v5 = v0.<io.vertx.core.http.impl.HttpServerWorker$1: io.netty.handler.timeout.IdleStateHandler val$idle>;
interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v5);
label1:
if v2 == 0 goto label2;
v6 = v0.<io.vertx.core.http.impl.HttpServerWorker$1: io.vertx.core.http.impl.HttpServerWorker this$0>;
v7 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
specialinvoke v6.<io.vertx.core.http.impl.HttpServerWorker: void handleHttp2(io.netty.channel.Channel)>(v7);
goto label3;
label2:
v8 = v0.<io.vertx.core.http.impl.HttpServerWorker$1: io.vertx.core.http.impl.HttpServerWorker this$0>;
v9 = v0.<io.vertx.core.http.impl.HttpServerWorker$1: io.netty.channel.Channel val$ch>;
v10 = v0.<io.vertx.core.http.impl.HttpServerWorker$1: io.vertx.core.net.impl.SslChannelProvider val$sslChannelProvider>;
specialinvoke v8.<io.vertx.core.http.impl.HttpServerWorker: void handleHttp1(io.netty.channel.Channel,io.vertx.core.net.impl.SslChannelProvider)>(v9, v10);
label3:
return;
}
public void userEventTriggered(io.netty.channel.ChannelHandlerContext, java.lang.Object)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.timeout.IdleState v4, v5;
java.lang.Object v2;
io.vertx.core.http.impl.HttpServerWorker$1 v0;
boolean v3;
v0 := @this: io.vertx.core.http.impl.HttpServerWorker$1;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = v2 instanceof io.netty.handler.timeout.IdleStateEvent;
if v3 == 0 goto label1;
v4 = virtualinvoke v2.<io.netty.handler.timeout.IdleStateEvent: io.netty.handler.timeout.IdleState state()>();
v5 = <io.netty.handler.timeout.IdleState: io.netty.handler.timeout.IdleState ALL_IDLE>;
if v4 != v5 goto label1;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close()>();
label1:
return;
}
public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable) throws java.lang.Exception
{
java.lang.Throwable v2;
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.http.impl.HttpServerWorker v3;
io.vertx.core.http.impl.HttpServerWorker$1 v0;
v0 := @this: io.vertx.core.http.impl.HttpServerWorker$1;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Throwable;
specialinvoke v0.<io.vertx.core.http.impl.Http1xOrH2CHandler: void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)>(v1, v2);
v3 = v0.<io.vertx.core.http.impl.HttpServerWorker$1: io.vertx.core.http.impl.HttpServerWorker this$0>;
specialinvoke v3.<io.vertx.core.http.impl.HttpServerWorker: void handleException(java.lang.Throwable)>(v2);
return;
}
}