abstract class io.vertx.core.http.impl.VertxHttp2Stream extends java.lang.Object
{
private static final io.vertx.core.MultiMap EMPTY;
protected final io.vertx.core.http.impl.Http2ConnectionBase conn;
protected final io.vertx.core.impl.VertxInternal vertx;
protected final io.vertx.core.impl.ContextInternal context;
protected io.netty.handler.codec.http2.Http2Stream stream;
private io.vertx.core.http.StreamPriority priority;
private final io.vertx.core.streams.impl.InboundBuffer pending;
private boolean writable;
private long bytesRead;
private long bytesWritten;
protected boolean isConnect;
void <init>(io.vertx.core.http.impl.Http2ConnectionBase, io.vertx.core.impl.ContextInternal)
{
io.vertx.core.impl.VertxInternal v3;
io.vertx.core.streams.impl.InboundBuffer v10, v4, v6, v8;
io.vertx.core.http.StreamPriority v5;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.Handler v7, v9;
io.vertx.core.http.impl.VertxHttp2Stream v0;
io.vertx.core.http.impl.Http2ConnectionBase v1;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: io.vertx.core.http.impl.Http2ConnectionBase;
v2 := @parameter1: io.vertx.core.impl.ContextInternal;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.impl.Http2ConnectionBase conn> = v1;
v3 = virtualinvoke v1.<io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.impl.VertxInternal vertx()>();
v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.impl.VertxInternal vertx> = v3;
v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.impl.ContextInternal context> = v2;
v4 = new io.vertx.core.streams.impl.InboundBuffer;
specialinvoke v4.<io.vertx.core.streams.impl.InboundBuffer: void <init>(io.vertx.core.Context,long)>(v2, 5L);
v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.streams.impl.InboundBuffer pending> = v4;
v5 = <io.vertx.core.http.impl.HttpUtils: io.vertx.core.http.StreamPriority DEFAULT_STREAM_PRIORITY>;
v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.StreamPriority priority> = v5;
v0.<io.vertx.core.http.impl.VertxHttp2Stream: boolean writable> = 1;
v0.<io.vertx.core.http.impl.VertxHttp2Stream: boolean isConnect> = 0;
v6 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.streams.impl.InboundBuffer pending>;
v7 = staticinvoke <io.vertx.core.http.impl.VertxHttp2Stream$lambda_new_1__1084: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream,io.vertx.core.http.impl.Http2ConnectionBase)>(v0, v1);
virtualinvoke v6.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer handler(io.vertx.core.Handler)>(v7);
v8 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.streams.impl.InboundBuffer pending>;
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v9 = staticinvoke <io.vertx.core.http.impl.VertxHttp2Stream$reportException__1085: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.ContextInternal)>(v2);
virtualinvoke v8.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer exceptionHandler(io.vertx.core.Handler)>(v9);
v10 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.streams.impl.InboundBuffer pending>;
virtualinvoke v10.<io.vertx.core.streams.impl.InboundBuffer: boolean resume()>();
return;
}
void init(io.netty.handler.codec.http2.Http2Stream)
{
java.lang.Throwable v7;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v3;
io.netty.handler.codec.http2.Http2ConnectionEncoder v4;
io.netty.handler.codec.http2.Http2Connection$PropertyKey v9;
io.netty.handler.codec.http2.Http2Stream v1;
io.vertx.core.http.impl.VertxHttp2Stream v0;
io.netty.handler.codec.http2.Http2RemoteFlowController v5;
boolean v6;
io.vertx.core.http.impl.Http2ConnectionBase v2, v8;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
entermonitor v0;
label1:
v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.netty.handler.codec.http2.Http2Stream stream> = v1;
v2 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v3 = v2.<io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.http.impl.VertxHttp2ConnectionHandler handler>;
v4 = virtualinvoke v3.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>();
v5 = interfaceinvoke v4.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.handler.codec.http2.Http2RemoteFlowController flowController()>();
v6 = interfaceinvoke v5.<io.netty.handler.codec.http2.Http2RemoteFlowController: boolean isWritable(io.netty.handler.codec.http2.Http2Stream)>(v1);
v0.<io.vertx.core.http.impl.VertxHttp2Stream: boolean writable> = v6;
exitmonitor v0;
label2:
goto label4;
label3:
v7 := @caughtexception;
exitmonitor v0;
throw v7;
label4:
v8 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v9 = v8.<io.vertx.core.http.impl.Http2ConnectionBase: io.netty.handler.codec.http2.Http2Connection$PropertyKey streamKey>;
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Stream: java.lang.Object setProperty(io.netty.handler.codec.http2.Http2Connection$PropertyKey,java.lang.Object)>(v9, v0);
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
void onClose()
{
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.Handler v3;
io.vertx.core.http.impl.VertxHttp2Stream v0;
io.vertx.core.http.impl.Http2ConnectionBase v1;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
virtualinvoke v1.<io.vertx.core.http.impl.Http2ConnectionBase: void flushBytesWritten()>();
v2 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.impl.ContextInternal context>;
v3 = staticinvoke <io.vertx.core.http.impl.VertxHttp2Stream$lambda_onClose_2__1086: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream)>(v0);
interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: void execute(io.vertx.core.Handler)>(v3);
return;
}
void onException(java.lang.Throwable)
{
java.lang.Throwable v1;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.Handler v3;
io.vertx.core.http.impl.VertxHttp2Stream v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.impl.ContextInternal context>;
v3 = staticinvoke <io.vertx.core.http.impl.VertxHttp2Stream$handleException__1087: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream)>(v0);
interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: void emit(java.lang.Object,io.vertx.core.Handler)>(v1, v3);
return;
}
void onReset(long)
{
java.lang.Long v3;
io.vertx.core.impl.ContextInternal v2;
long v1;
io.vertx.core.Handler v4;
io.vertx.core.http.impl.VertxHttp2Stream v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.impl.ContextInternal context>;
v3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v1);
v4 = staticinvoke <io.vertx.core.http.impl.VertxHttp2Stream$handleReset__1088: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream)>(v0);
interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: void emit(java.lang.Object,io.vertx.core.Handler)>(v3, v4);
return;
}
void onPriorityChange(io.vertx.core.http.StreamPriority)
{
io.vertx.core.http.StreamPriority v1;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.Handler v3;
io.vertx.core.http.impl.VertxHttp2Stream v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: io.vertx.core.http.StreamPriority;
v2 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.impl.ContextInternal context>;
v3 = staticinvoke <io.vertx.core.http.impl.VertxHttp2Stream$lambda_onPriorityChange_3__1089: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream)>(v0);
interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: void emit(java.lang.Object,io.vertx.core.Handler)>(v1, v3);
return;
}
void onCustomFrame(io.vertx.core.http.HttpFrame)
{
io.vertx.core.http.HttpFrame v1;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.Handler v3;
io.vertx.core.http.impl.VertxHttp2Stream v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: io.vertx.core.http.HttpFrame;
v2 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.impl.ContextInternal context>;
v3 = staticinvoke <io.vertx.core.http.impl.VertxHttp2Stream$handleCustomFrame__1090: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream)>(v0);
interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: void emit(java.lang.Object,io.vertx.core.Handler)>(v1, v3);
return;
}
void onHeaders(io.netty.handler.codec.http2.Http2Headers, io.vertx.core.http.StreamPriority)
{
io.vertx.core.http.impl.VertxHttp2Stream v0;
io.netty.handler.codec.http2.Http2Headers v1;
io.vertx.core.http.StreamPriority v2;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Headers;
v2 := @parameter1: io.vertx.core.http.StreamPriority;
return;
}
void onData(io.vertx.core.buffer.Buffer)
{
io.vertx.core.streams.impl.InboundBuffer v5;
io.vertx.core.buffer.Buffer v1;
int v3;
io.vertx.core.impl.ContextInternal v4;
io.vertx.core.Handler v6;
io.vertx.core.http.impl.VertxHttp2Stream v0;
io.vertx.core.http.impl.Http2ConnectionBase v2;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v3 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: int length()>();
virtualinvoke v2.<io.vertx.core.http.impl.Http2ConnectionBase: void reportBytesRead(long)>(v3);
v4 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.impl.ContextInternal context>;
v5 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.streams.impl.InboundBuffer pending>;
virtualinvoke v5.<java.lang.Object: java.lang.Class getClass()>();
v6 = staticinvoke <io.vertx.core.http.impl.VertxHttp2Stream$write__1091: io.vertx.core.Handler bootstrap$(io.vertx.core.streams.impl.InboundBuffer)>(v5);
interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: void execute(java.lang.Object,io.vertx.core.Handler)>(v1, v6);
return;
}
void onWritabilityChanged()
{
io.vertx.core.impl.ContextInternal v1;
io.vertx.core.Handler v2;
io.vertx.core.http.impl.VertxHttp2Stream v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.impl.ContextInternal context>;
v2 = staticinvoke <io.vertx.core.http.impl.VertxHttp2Stream$lambda_onWritabilityChanged_4__1092: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream)>(v0);
interfaceinvoke v1.<io.vertx.core.impl.ContextInternal: void emit(java.lang.Object,io.vertx.core.Handler)>(null, v2);
return;
}
void onEnd()
{
io.vertx.core.MultiMap v1;
io.vertx.core.http.impl.VertxHttp2Stream v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 = <io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.MultiMap EMPTY>;
virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void onEnd(io.vertx.core.MultiMap)>(v1);
return;
}
void onEnd(io.vertx.core.MultiMap)
{
io.vertx.core.streams.impl.InboundBuffer v4;
io.vertx.core.MultiMap v1;
io.vertx.core.impl.ContextInternal v3;
io.vertx.core.Handler v5;
io.vertx.core.http.impl.VertxHttp2Stream v0;
io.vertx.core.http.impl.Http2ConnectionBase v2;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
virtualinvoke v2.<io.vertx.core.http.impl.Http2ConnectionBase: void flushBytesRead()>();
v3 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.impl.ContextInternal context>;
v4 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.streams.impl.InboundBuffer pending>;
virtualinvoke v4.<java.lang.Object: java.lang.Class getClass()>();
v5 = staticinvoke <io.vertx.core.http.impl.VertxHttp2Stream$write__1093: io.vertx.core.Handler bootstrap$(io.vertx.core.streams.impl.InboundBuffer)>(v4);
interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: void emit(java.lang.Object,io.vertx.core.Handler)>(v1, v5);
return;
}
public int id()
{
int v2;
io.netty.handler.codec.http2.Http2Stream v1;
io.vertx.core.http.impl.VertxHttp2Stream v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.netty.handler.codec.http2.Http2Stream stream>;
v2 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Stream: int id()>();
return v2;
}
long bytesWritten()
{
long v1;
io.vertx.core.http.impl.VertxHttp2Stream v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: long bytesWritten>;
return v1;
}
long bytesRead()
{
long v1;
io.vertx.core.http.impl.VertxHttp2Stream v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: long bytesRead>;
return v1;
}
public void doPause()
{
io.vertx.core.streams.impl.InboundBuffer v1;
io.vertx.core.http.impl.VertxHttp2Stream v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.streams.impl.InboundBuffer pending>;
virtualinvoke v1.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer pause()>();
return;
}
public void doFetch(long)
{
long v1;
io.vertx.core.streams.impl.InboundBuffer v2;
io.vertx.core.http.impl.VertxHttp2Stream v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.streams.impl.InboundBuffer pending>;
virtualinvoke v2.<io.vertx.core.streams.impl.InboundBuffer: boolean fetch(long)>(v1);
return;
}
public synchronized boolean isNotWritable()
{
io.vertx.core.http.impl.VertxHttp2Stream v0;
boolean v1, v2;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: boolean writable>;
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public final void writeFrame(int, int, io.netty.buffer.ByteBuf)
{
io.vertx.core.impl.ContextInternal v5;
io.netty.channel.EventLoop v6;
java.lang.Runnable v8;
io.netty.buffer.ByteBuf v3;
int v1, v2;
io.vertx.core.http.impl.VertxHttp2Stream v0;
boolean v7;
io.vertx.core.http.impl.Http2ConnectionBase v4;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.buffer.ByteBuf;
v4 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v5 = virtualinvoke v4.<io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.impl.ContextInternal getContext()>();
v6 = interfaceinvoke v5.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>();
v7 = interfaceinvoke v6.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v7 == 0 goto label1;
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void doWriteFrame(int,int,io.netty.buffer.ByteBuf)>(v1, v2, v3);
goto label2;
label1:
v8 = staticinvoke <io.vertx.core.http.impl.VertxHttp2Stream$lambda_writeFrame_5__1094: java.lang.Runnable bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream,int,int,io.netty.buffer.ByteBuf)>(v0, v1, v2, v3);
interfaceinvoke v6.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v8);
label2:
return;
}
private void doWriteFrame(int, int, io.netty.buffer.ByteBuf)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v5;
io.netty.buffer.ByteBuf v3;
int v1, v2;
io.netty.handler.codec.http2.Http2Stream v6;
io.vertx.core.http.impl.VertxHttp2Stream v0;
io.vertx.core.http.impl.Http2ConnectionBase v4;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.buffer.ByteBuf;
v4 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v5 = v4.<io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.http.impl.VertxHttp2ConnectionHandler handler>;
v6 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.netty.handler.codec.http2.Http2Stream stream>;
virtualinvoke v5.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeFrame(io.netty.handler.codec.http2.Http2Stream,byte,short,io.netty.buffer.ByteBuf)>(v6, v1, v2, v3);
return;
}
final void writeHeaders(io.netty.handler.codec.http2.Http2Headers, boolean, io.vertx.core.Handler)
{
io.vertx.core.impl.ContextInternal v5;
io.netty.channel.EventLoop v6;
java.lang.Runnable v8;
io.netty.handler.codec.http2.Http2Headers v1;
io.vertx.core.Handler v3;
io.vertx.core.http.impl.VertxHttp2Stream v0;
boolean v2, v7;
io.vertx.core.http.impl.Http2ConnectionBase v4;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Headers;
v2 := @parameter1: boolean;
v3 := @parameter2: io.vertx.core.Handler;
v4 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v5 = virtualinvoke v4.<io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.impl.ContextInternal getContext()>();
v6 = interfaceinvoke v5.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>();
v7 = interfaceinvoke v6.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v7 == 0 goto label1;
virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void doWriteHeaders(io.netty.handler.codec.http2.Http2Headers,boolean,io.vertx.core.Handler)>(v1, v2, v3);
goto label2;
label1:
v8 = staticinvoke <io.vertx.core.http.impl.VertxHttp2Stream$lambda_writeHeaders_6__1095: java.lang.Runnable bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream,io.netty.handler.codec.http2.Http2Headers,boolean,io.vertx.core.Handler)>(v0, v1, v2, v3);
interfaceinvoke v6.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v8);
label2:
return;
}
void doWriteHeaders(io.netty.handler.codec.http2.Http2Headers, boolean, io.vertx.core.Handler)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v7;
io.vertx.core.impl.future.PromiseInternal v4;
io.vertx.core.http.StreamPriority v11, v13, v9;
io.vertx.core.impl.ContextInternal v5;
short v12;
io.netty.handler.codec.http2.Http2Headers v1;
int v10;
io.netty.handler.codec.http2.Http2Stream v8;
io.vertx.core.Handler v3;
io.vertx.core.http.impl.VertxHttp2Stream v0;
boolean v14, v2;
io.vertx.core.http.impl.Http2ConnectionBase v6;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Headers;
v2 := @parameter1: boolean;
v3 := @parameter2: io.vertx.core.Handler;
if v3 != null goto label1;
v4 = null;
goto label2;
label1:
v5 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.impl.ContextInternal context>;
v4 = interfaceinvoke v5.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise(io.vertx.core.Handler)>(v3);
label2:
v6 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v7 = v6.<io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.http.impl.VertxHttp2ConnectionHandler handler>;
v8 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.netty.handler.codec.http2.Http2Stream stream>;
v9 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.StreamPriority priority>;
v10 = virtualinvoke v9.<io.vertx.core.http.StreamPriority: int getDependency()>();
v11 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.StreamPriority priority>;
v12 = virtualinvoke v11.<io.vertx.core.http.StreamPriority: short getWeight()>();
v13 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.StreamPriority priority>;
v14 = virtualinvoke v13.<io.vertx.core.http.StreamPriority: boolean isExclusive()>();
virtualinvoke v7.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeHeaders(io.netty.handler.codec.http2.Http2Stream,io.netty.handler.codec.http2.Http2Headers,boolean,int,short,boolean,io.netty.util.concurrent.FutureListener)>(v8, v1, v2, v10, v12, v14, v4);
if v2 == 0 goto label3;
virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void endWritten()>();
label3:
return;
}
protected void endWritten()
{
io.vertx.core.http.impl.VertxHttp2Stream v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
return;
}
private void writePriorityFrame(io.vertx.core.http.StreamPriority)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v3;
io.vertx.core.http.StreamPriority v1;
short v6;
int v5;
io.netty.handler.codec.http2.Http2Stream v4;
io.vertx.core.http.impl.VertxHttp2Stream v0;
boolean v7;
io.vertx.core.http.impl.Http2ConnectionBase v2;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: io.vertx.core.http.StreamPriority;
v2 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v3 = v2.<io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.http.impl.VertxHttp2ConnectionHandler handler>;
v4 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.netty.handler.codec.http2.Http2Stream stream>;
v5 = virtualinvoke v1.<io.vertx.core.http.StreamPriority: int getDependency()>();
v6 = virtualinvoke v1.<io.vertx.core.http.StreamPriority: short getWeight()>();
v7 = virtualinvoke v1.<io.vertx.core.http.StreamPriority: boolean isExclusive()>();
virtualinvoke v3.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writePriority(io.netty.handler.codec.http2.Http2Stream,int,short,boolean)>(v4, v5, v6, v7);
return;
}
final void writeData(io.netty.buffer.ByteBuf, boolean, io.vertx.core.Handler)
{
io.vertx.core.impl.ContextInternal v5;
io.netty.channel.EventLoop v6;
java.lang.Runnable v8;
io.netty.buffer.ByteBuf v1;
io.vertx.core.Handler v3;
io.vertx.core.http.impl.VertxHttp2Stream v0;
boolean v2, v7;
io.vertx.core.http.impl.Http2ConnectionBase v4;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: boolean;
v3 := @parameter2: io.vertx.core.Handler;
v4 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v5 = virtualinvoke v4.<io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.impl.ContextInternal getContext()>();
v6 = interfaceinvoke v5.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>();
v7 = interfaceinvoke v6.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v7 == 0 goto label1;
virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void doWriteData(io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>(v1, v2, v3);
goto label2;
label1:
v8 = staticinvoke <io.vertx.core.http.impl.VertxHttp2Stream$lambda_writeData_7__1096: java.lang.Runnable bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream,io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>(v0, v1, v2, v3);
interfaceinvoke v6.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v8);
label2:
return;
}
void doWriteData(io.netty.buffer.ByteBuf, boolean, io.vertx.core.Handler)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v12;
io.vertx.core.impl.future.PromiseInternal v9;
io.vertx.core.impl.ContextInternal v10;
long v6, v7;
io.netty.buffer.ByteBuf v1, v4;
int v5;
io.netty.handler.codec.http2.Http2Stream v13;
io.vertx.core.Handler v3;
io.vertx.core.http.impl.VertxHttp2Stream v0;
boolean v2;
io.vertx.core.http.impl.Http2ConnectionBase v11, v8;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: boolean;
v3 := @parameter2: io.vertx.core.Handler;
if v1 != null goto label1;
if v2 == 0 goto label1;
v4 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
goto label2;
label1:
v4 = v1;
label2:
v5 = virtualinvoke v4.<io.netty.buffer.ByteBuf: int readableBytes()>();
v6 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: long bytesWritten>;
v7 = v6 + v5;
v0.<io.vertx.core.http.impl.VertxHttp2Stream: long bytesWritten> = v7;
v8 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
virtualinvoke v8.<io.vertx.core.http.impl.Http2ConnectionBase: void reportBytesWritten(long)>(v5);
if v3 != null goto label3;
v9 = null;
goto label4;
label3:
v10 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.impl.ContextInternal context>;
v9 = interfaceinvoke v10.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise(io.vertx.core.Handler)>(v3);
label4:
v11 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v12 = v11.<io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.http.impl.VertxHttp2ConnectionHandler handler>;
v13 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.netty.handler.codec.http2.Http2Stream stream>;
virtualinvoke v12.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeData(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,boolean,io.netty.util.concurrent.FutureListener)>(v13, v4, v2, v9);
if v2 == 0 goto label5;
virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void endWritten()>();
label5:
return;
}
final void writeReset(long)
{
io.vertx.core.impl.ContextInternal v3;
long v1;
io.netty.channel.EventLoop v4;
io.vertx.core.http.impl.VertxHttp2Stream v0;
java.lang.Runnable v6;
boolean v5;
io.vertx.core.http.impl.Http2ConnectionBase v2;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.impl.ContextInternal getContext()>();
v4 = interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>();
v5 = interfaceinvoke v4.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v5 == 0 goto label1;
virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void doWriteReset(long)>(v1);
goto label2;
label1:
v6 = staticinvoke <io.vertx.core.http.impl.VertxHttp2Stream$lambda_writeReset_8__1097: java.lang.Runnable bootstrap$(io.vertx.core.http.impl.VertxHttp2Stream,long)>(v0, v1);
interfaceinvoke v4.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v6);
label2:
return;
}
protected void doWriteReset(long)
{
java.lang.Throwable v6;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v9;
long v1;
int v4, v5, v7;
io.netty.handler.codec.http2.Http2Stream v2, v3;
io.vertx.core.http.impl.VertxHttp2Stream v0;
io.vertx.core.http.impl.Http2ConnectionBase v8;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: long;
entermonitor v0;
label1:
v2 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.netty.handler.codec.http2.Http2Stream stream>;
if v2 == null goto label2;
v3 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.netty.handler.codec.http2.Http2Stream stream>;
v4 = interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Stream: int id()>();
goto label3;
label2:
v5 = (int) -1;
v4 = v5;
label3:
exitmonitor v0;
label4:
goto label6;
label5:
v6 := @caughtexception;
exitmonitor v0;
throw v6;
label6:
v7 = (int) -1;
if v4 == v7 goto label7;
v8 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v9 = v8.<io.vertx.core.http.impl.Http2ConnectionBase: io.vertx.core.http.impl.VertxHttp2ConnectionHandler handler>;
virtualinvoke v9.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void writeReset(int,long)>(v4, v1);
goto label8;
label7:
virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void handleReset(long)>(v1);
label8:
return;
catch java.lang.Throwable from label1 to label4 with label5;
}
void handleWritabilityChanged(boolean)
{
io.vertx.core.http.impl.VertxHttp2Stream v0;
boolean v1;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: boolean;
return;
}
void handleData(io.vertx.core.buffer.Buffer)
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.http.impl.VertxHttp2Stream v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
return;
}
void handleCustomFrame(io.vertx.core.http.HttpFrame)
{
io.vertx.core.http.HttpFrame v1;
io.vertx.core.http.impl.VertxHttp2Stream v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: io.vertx.core.http.HttpFrame;
return;
}
void handleEnd(io.vertx.core.MultiMap)
{
io.vertx.core.MultiMap v1;
io.vertx.core.http.impl.VertxHttp2Stream v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: io.vertx.core.MultiMap;
return;
}
void handleReset(long)
{
long v1;
io.vertx.core.http.impl.VertxHttp2Stream v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: long;
return;
}
void handleException(java.lang.Throwable)
{
java.lang.Throwable v1;
io.vertx.core.http.impl.VertxHttp2Stream v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: java.lang.Throwable;
return;
}
void handleClose()
{
io.vertx.core.http.impl.VertxHttp2Stream v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
return;
}
synchronized void priority(io.vertx.core.http.StreamPriority)
{
io.vertx.core.http.impl.VertxHttp2Stream v0;
io.vertx.core.http.StreamPriority v1;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: io.vertx.core.http.StreamPriority;
v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.StreamPriority priority> = v1;
return;
}
synchronized io.vertx.core.http.StreamPriority priority()
{
io.vertx.core.http.impl.VertxHttp2Stream v0;
io.vertx.core.http.StreamPriority v1;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.StreamPriority priority>;
return v1;
}
synchronized void updatePriority(io.vertx.core.http.StreamPriority)
{
io.vertx.core.http.StreamPriority v1, v2;
io.netty.handler.codec.http2.Http2Stream v4;
io.vertx.core.http.impl.VertxHttp2Stream v0;
boolean v3;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: io.vertx.core.http.StreamPriority;
v2 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.StreamPriority priority>;
v3 = virtualinvoke v2.<io.vertx.core.http.StreamPriority: boolean equals(java.lang.Object)>(v1);
if v3 != 0 goto label1;
v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.http.StreamPriority priority> = v1;
v4 = v0.<io.vertx.core.http.impl.VertxHttp2Stream: io.netty.handler.codec.http2.Http2Stream stream>;
if v4 == null goto label1;
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void writePriorityFrame(io.vertx.core.http.StreamPriority)>(v1);
label1:
return;
}
void handlePriorityChange(io.vertx.core.http.StreamPriority)
{
io.vertx.core.http.impl.VertxHttp2Stream v0;
io.vertx.core.http.StreamPriority v1;
v0 := @this: io.vertx.core.http.impl.VertxHttp2Stream;
v1 := @parameter0: io.vertx.core.http.StreamPriority;
return;
}
static void <clinit>()
{
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v0;
io.netty.handler.codec.http2.EmptyHttp2Headers v1;
v0 = new io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
v1 = <io.netty.handler.codec.http2.EmptyHttp2Headers: io.netty.handler.codec.http2.EmptyHttp2Headers INSTANCE>;
specialinvoke v0.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: void <init>(io.netty.handler.codec.http2.Http2Headers)>(v1);
<io.vertx.core.http.impl.VertxHttp2Stream: io.vertx.core.MultiMap EMPTY> = v0;
return;
}
}