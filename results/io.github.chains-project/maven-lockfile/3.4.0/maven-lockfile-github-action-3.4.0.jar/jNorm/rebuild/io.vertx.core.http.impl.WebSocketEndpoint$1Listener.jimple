class io.vertx.core.http.impl.WebSocketEndpoint$1Listener extends java.lang.Object implements io.vertx.core.Handler
{
final io.vertx.core.Handler val$handler;
final io.vertx.core.http.impl.WebSocketEndpoint this$0;
void <init>(io.vertx.core.http.impl.WebSocketEndpoint, io.vertx.core.Handler)
{
io.vertx.core.Handler v2;
io.vertx.core.http.impl.WebSocketEndpoint$1Listener v0;
io.vertx.core.http.impl.WebSocketEndpoint v1;
v0 := @this: io.vertx.core.http.impl.WebSocketEndpoint$1Listener;
v1 := @parameter0: io.vertx.core.http.impl.WebSocketEndpoint;
v2 := @parameter1: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.WebSocketEndpoint$1Listener: io.vertx.core.http.impl.WebSocketEndpoint this$0> = v1;
v0.<io.vertx.core.http.impl.WebSocketEndpoint$1Listener: io.vertx.core.Handler val$handler> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
private void onEvict()
{
java.lang.Throwable v13;
io.vertx.core.http.impl.WebSocketEndpoint$1Listener v0;
io.vertx.core.impl.ContextInternal v15;
java.util.Deque v11, v8;
io.vertx.core.http.impl.WebSocketEndpoint v1, v10, v14, v2, v3, v5, v7;
int v4, v6;
boolean v9;
java.lang.Object v12;
io.vertx.core.Handler v16;
v0 := @this: io.vertx.core.http.impl.WebSocketEndpoint$1Listener;
v1 = v0.<io.vertx.core.http.impl.WebSocketEndpoint$1Listener: io.vertx.core.http.impl.WebSocketEndpoint this$0>;
virtualinvoke v1.<io.vertx.core.http.impl.WebSocketEndpoint: boolean decRefCount()>();
v2 = v0.<io.vertx.core.http.impl.WebSocketEndpoint$1Listener: io.vertx.core.http.impl.WebSocketEndpoint this$0>;
entermonitor v2;
label1:
v3 = v0.<io.vertx.core.http.impl.WebSocketEndpoint$1Listener: io.vertx.core.http.impl.WebSocketEndpoint this$0>;
v4 = v3.<io.vertx.core.http.impl.WebSocketEndpoint: int inflightConnections>;
v5 = v0.<io.vertx.core.http.impl.WebSocketEndpoint$1Listener: io.vertx.core.http.impl.WebSocketEndpoint this$0>;
v6 = v5.<io.vertx.core.http.impl.WebSocketEndpoint: int maxPoolSize>;
if v4 > v6 goto label2;
v7 = v0.<io.vertx.core.http.impl.WebSocketEndpoint$1Listener: io.vertx.core.http.impl.WebSocketEndpoint this$0>;
v8 = v7.<io.vertx.core.http.impl.WebSocketEndpoint: java.util.Deque waiters>;
v9 = interfaceinvoke v8.<java.util.Deque: boolean isEmpty()>();
if v9 == 0 goto label4;
label2:
exitmonitor v2;
label3:
return;
label4:
v10 = v0.<io.vertx.core.http.impl.WebSocketEndpoint$1Listener: io.vertx.core.http.impl.WebSocketEndpoint this$0>;
v11 = v10.<io.vertx.core.http.impl.WebSocketEndpoint: java.util.Deque waiters>;
v12 = interfaceinvoke v11.<java.util.Deque: java.lang.Object poll()>();
exitmonitor v2;
label5:
goto label7;
label6:
v13 := @caughtexception;
exitmonitor v2;
throw v13;
label7:
v14 = v0.<io.vertx.core.http.impl.WebSocketEndpoint$1Listener: io.vertx.core.http.impl.WebSocketEndpoint this$0>;
v15 = v12.<io.vertx.core.http.impl.WebSocketEndpoint$Waiter: io.vertx.core.impl.ContextInternal context>;
v16 = v12.<io.vertx.core.http.impl.WebSocketEndpoint$Waiter: io.vertx.core.Handler handler>;
specialinvoke v14.<io.vertx.core.http.impl.WebSocketEndpoint: void tryConnect(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)>(v15, v16);
return;
catch java.lang.Throwable from label1 to label3 with label6;
catch java.lang.Throwable from label4 to label5 with label6;
}
public void handle(io.vertx.core.AsyncResult)
{
java.lang.Throwable v12;
io.vertx.core.http.impl.WebSocketEndpoint$1Listener v0;
io.vertx.core.Future v10, v13, v8;
io.vertx.core.http.impl.WebSocketEndpoint v4;
java.lang.Object v3;
io.vertx.core.AsyncResult v1;
io.vertx.core.Handler v11, v6, v7, v9;
boolean v2, v5;
v0 := @this: io.vertx.core.http.impl.WebSocketEndpoint$1Listener;
v1 := @parameter0: io.vertx.core.AsyncResult;
v2 = interfaceinvoke v1.<io.vertx.core.AsyncResult: boolean succeeded()>();
if v2 == 0 goto label2;
v3 = interfaceinvoke v1.<io.vertx.core.AsyncResult: java.lang.Object result()>();
v4 = v0.<io.vertx.core.http.impl.WebSocketEndpoint$1Listener: io.vertx.core.http.impl.WebSocketEndpoint this$0>;
v5 = virtualinvoke v4.<io.vertx.core.http.impl.WebSocketEndpoint: boolean incRefCount()>();
if v5 == 0 goto label1;
v6 = staticinvoke <io.vertx.core.http.impl.WebSocketEndpoint$1Listener$lambda_handle_0__1073: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.WebSocketEndpoint$1Listener)>(v0);
interfaceinvoke v3.<io.vertx.core.http.impl.HttpClientConnection: io.vertx.core.http.impl.HttpClientConnection evictionHandler(io.vertx.core.Handler)>(v6);
v7 = v0.<io.vertx.core.http.impl.WebSocketEndpoint$1Listener: io.vertx.core.Handler val$handler>;
v8 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture(java.lang.Object)>(v3);
interfaceinvoke v7.<io.vertx.core.Handler: void handle(java.lang.Object)>(v8);
goto label3;
label1:
interfaceinvoke v3.<io.vertx.core.http.impl.HttpClientConnection: io.vertx.core.Future close()>();
v9 = v0.<io.vertx.core.http.impl.WebSocketEndpoint$1Listener: io.vertx.core.Handler val$handler>;
v10 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.String)>("Connection closed");
interfaceinvoke v9.<io.vertx.core.Handler: void handle(java.lang.Object)>(v10);
goto label3;
label2:
v11 = v0.<io.vertx.core.http.impl.WebSocketEndpoint$1Listener: io.vertx.core.Handler val$handler>;
v12 = interfaceinvoke v1.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>();
v13 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>(v12);
interfaceinvoke v11.<io.vertx.core.Handler: void handle(java.lang.Object)>(v13);
label3:
return;
}
}