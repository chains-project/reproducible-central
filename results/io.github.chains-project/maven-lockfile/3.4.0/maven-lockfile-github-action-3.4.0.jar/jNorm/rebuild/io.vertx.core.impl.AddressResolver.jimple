public class io.vertx.core.impl.AddressResolver extends java.lang.Object
{
private static final io.vertx.core.impl.logging.Logger log;
private static final java.util.regex.Pattern NDOTS_OPTIONS_PATTERN;
private static final java.util.regex.Pattern ROTATE_OPTIONS_PATTERN;
public static final int DEFAULT_NDOTS_RESOLV_OPTION;
public static final boolean DEFAULT_ROTATE_RESOLV_OPTION;
private final io.vertx.core.Vertx vertx;
private final io.netty.resolver.AddressResolverGroup resolverGroup;
private final io.vertx.core.spi.resolver.ResolverProvider provider;
private static java.util.regex.Pattern resolvOption(java.lang.String)
{
java.lang.String v0, v1;
java.util.regex.Pattern v2;
v0 := @parameter0: java.lang.String;
v1 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("^[ \\t\\f]*options[^\n]+\u0001(?=$|\\s)");
v2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>(v1, 8);
return v2;
}
public void <init>(io.vertx.core.Vertx, io.vertx.core.dns.AddressResolverOptions)
{
io.vertx.core.spi.resolver.ResolverProvider v3, v4;
io.netty.resolver.AddressResolverGroup v5;
io.vertx.core.impl.AddressResolver v0;
io.vertx.core.Vertx v1;
io.vertx.core.dns.AddressResolverOptions v2;
v0 := @this: io.vertx.core.impl.AddressResolver;
v1 := @parameter0: io.vertx.core.Vertx;
v2 := @parameter1: io.vertx.core.dns.AddressResolverOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = staticinvoke <io.vertx.core.spi.resolver.ResolverProvider: io.vertx.core.spi.resolver.ResolverProvider factory(io.vertx.core.Vertx,io.vertx.core.dns.AddressResolverOptions)>(v1, v2);
v0.<io.vertx.core.impl.AddressResolver: io.vertx.core.spi.resolver.ResolverProvider provider> = v3;
v4 = v0.<io.vertx.core.impl.AddressResolver: io.vertx.core.spi.resolver.ResolverProvider provider>;
v5 = interfaceinvoke v4.<io.vertx.core.spi.resolver.ResolverProvider: io.netty.resolver.AddressResolverGroup resolver(io.vertx.core.dns.AddressResolverOptions)>(v2);
v0.<io.vertx.core.impl.AddressResolver: io.netty.resolver.AddressResolverGroup resolverGroup> = v5;
v0.<io.vertx.core.impl.AddressResolver: io.vertx.core.Vertx vertx> = v1;
return;
}
public void resolveHostname(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.impl.future.PromiseInternal v7;
io.vertx.core.impl.AddressResolver v0;
io.vertx.core.Vertx v3;
io.netty.channel.EventLoop v5;
io.vertx.core.Context v4;
io.vertx.core.Future v10, v8;
java.util.function.Function v9;
java.lang.String v1;
io.netty.util.concurrent.Future v6;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.impl.AddressResolver;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = v0.<io.vertx.core.impl.AddressResolver: io.vertx.core.Vertx vertx>;
v4 = interfaceinvoke v3.<io.vertx.core.Vertx: io.vertx.core.Context getOrCreateContext()>();
v5 = interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>();
v6 = virtualinvoke v0.<io.vertx.core.impl.AddressResolver: io.netty.util.concurrent.Future resolveHostname(io.netty.channel.EventLoop,java.lang.String)>(v5, v1);
v7 = interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
interfaceinvoke v6.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v7);
v8 = interfaceinvoke v7.<io.vertx.core.impl.future.PromiseInternal: io.vertx.core.Future future()>();
v9 = staticinvoke <io.vertx.core.impl.AddressResolver$getAddress__1448: java.util.function.Function bootstrap$()>();
v10 = interfaceinvoke v8.<io.vertx.core.Future: io.vertx.core.Future map(java.util.function.Function)>(v9);
interfaceinvoke v10.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return;
}
public io.netty.util.concurrent.Future resolveHostname(io.netty.channel.EventLoop, java.lang.String)
{
io.netty.resolver.AddressResolver v3;
io.vertx.core.impl.AddressResolver v0;
java.lang.String v2;
io.netty.channel.EventLoop v1;
io.netty.util.concurrent.Future v5;
java.net.InetSocketAddress v4;
v0 := @this: io.vertx.core.impl.AddressResolver;
v1 := @parameter0: io.netty.channel.EventLoop;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.core.impl.AddressResolver: io.netty.resolver.AddressResolver getResolver(io.netty.channel.EventLoop)>(v1);
v4 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>(v2, 0);
v5 = interfaceinvoke v3.<io.netty.resolver.AddressResolver: io.netty.util.concurrent.Future resolve(java.net.SocketAddress)>(v4);
return v5;
}
public void resolveHostnameAll(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.impl.future.PromiseInternal v7;
io.vertx.core.impl.AddressResolver v0;
io.vertx.core.Vertx v3;
io.netty.channel.EventLoop v5;
io.vertx.core.Context v4;
io.vertx.core.Future v8;
java.lang.String v1;
io.netty.util.concurrent.Future v6;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.impl.AddressResolver;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = v0.<io.vertx.core.impl.AddressResolver: io.vertx.core.Vertx vertx>;
v4 = interfaceinvoke v3.<io.vertx.core.Vertx: io.vertx.core.Context getOrCreateContext()>();
v5 = interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>();
v6 = virtualinvoke v0.<io.vertx.core.impl.AddressResolver: io.netty.util.concurrent.Future resolveHostnameAll(io.netty.channel.EventLoop,java.lang.String)>(v5, v1);
v7 = interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
interfaceinvoke v6.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v7);
v8 = interfaceinvoke v7.<io.vertx.core.impl.future.PromiseInternal: io.vertx.core.Future future()>();
interfaceinvoke v8.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return;
}
public io.netty.util.concurrent.Future resolveHostnameAll(io.netty.channel.EventLoop, java.lang.String)
{
io.netty.resolver.AddressResolver v3;
io.vertx.core.impl.AddressResolver v0;
java.lang.String v2;
io.netty.channel.EventLoop v1;
io.netty.util.concurrent.Future v5;
java.net.InetSocketAddress v4;
v0 := @this: io.vertx.core.impl.AddressResolver;
v1 := @parameter0: io.netty.channel.EventLoop;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.core.impl.AddressResolver: io.netty.resolver.AddressResolver getResolver(io.netty.channel.EventLoop)>(v1);
v4 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>(v2, 0);
v5 = interfaceinvoke v3.<io.netty.resolver.AddressResolver: io.netty.util.concurrent.Future resolveAll(java.net.SocketAddress)>(v4);
return v5;
}
public io.netty.resolver.AddressResolver getResolver(io.netty.channel.EventLoop)
{
io.netty.resolver.AddressResolver v3;
io.netty.resolver.AddressResolverGroup v2;
io.vertx.core.impl.AddressResolver v0;
io.netty.channel.EventLoop v1;
v0 := @this: io.vertx.core.impl.AddressResolver;
v1 := @parameter0: io.netty.channel.EventLoop;
v2 = v0.<io.vertx.core.impl.AddressResolver: io.netty.resolver.AddressResolverGroup resolverGroup>;
v3 = virtualinvoke v2.<io.netty.resolver.AddressResolverGroup: io.netty.resolver.AddressResolver getResolver(io.netty.util.concurrent.EventExecutor)>(v1);
return v3;
}
io.netty.resolver.AddressResolverGroup nettyAddressResolverGroup()
{
io.netty.resolver.AddressResolverGroup v1;
io.vertx.core.impl.AddressResolver v0;
v0 := @this: io.vertx.core.impl.AddressResolver;
v1 = v0.<io.vertx.core.impl.AddressResolver: io.netty.resolver.AddressResolverGroup resolverGroup>;
return v1;
}
public void close(io.vertx.core.Handler)
{
io.vertx.core.spi.resolver.ResolverProvider v2;
io.vertx.core.Handler v1;
io.vertx.core.impl.AddressResolver v0;
v0 := @this: io.vertx.core.impl.AddressResolver;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.impl.AddressResolver: io.vertx.core.spi.resolver.ResolverProvider provider>;
interfaceinvoke v2.<io.vertx.core.spi.resolver.ResolverProvider: void close(io.vertx.core.Handler)>(v1);
return;
}
public static int parseNdotsOptionFromResolvConf(java.lang.String)
{
java.util.regex.Matcher v4;
int v1, v2;
java.lang.String v0, v6;
java.util.regex.Pattern v3;
boolean v5;
v0 := @parameter0: java.lang.String;
v1 = (int) -1;
v2 = v1;
v3 = <io.vertx.core.impl.AddressResolver: java.util.regex.Pattern NDOTS_OPTIONS_PATTERN>;
v4 = virtualinvoke v3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v0);
label1:
v5 = virtualinvoke v4.<java.util.regex.Matcher: boolean find()>();
if v5 == 0 goto label2;
v6 = virtualinvoke v4.<java.util.regex.Matcher: java.lang.String group(int)>(1);
v2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v6);
goto label1;
label2:
return v2;
}
public static boolean parseRotateOptionFromResolvConf(java.lang.String)
{
java.util.regex.Matcher v2;
java.lang.String v0;
java.util.regex.Pattern v1;
boolean v3;
v0 := @parameter0: java.lang.String;
v1 = <io.vertx.core.impl.AddressResolver: java.util.regex.Pattern ROTATE_OPTIONS_PATTERN>;
v2 = virtualinvoke v1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v0);
v3 = virtualinvoke v2.<java.util.regex.Matcher: boolean find()>();
return v3;
}
static void <clinit>()
{
java.lang.Throwable v14;
byte[] v11;
int v12, v13, v3;
java.lang.String v9;
java.nio.file.Path v10;
boolean v4, v5, v7, v8;
io.vertx.core.impl.logging.Logger v0, v15;
java.io.File v6;
java.util.regex.Pattern v1, v2;
v0 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/AddressResolver;");
<io.vertx.core.impl.AddressResolver: io.vertx.core.impl.logging.Logger log> = v0;
v1 = staticinvoke <io.vertx.core.impl.AddressResolver: java.util.regex.Pattern resolvOption(java.lang.String)>("ndots:[ \\t\\f]*(\\d)+");
<io.vertx.core.impl.AddressResolver: java.util.regex.Pattern NDOTS_OPTIONS_PATTERN> = v1;
v2 = staticinvoke <io.vertx.core.impl.AddressResolver: java.util.regex.Pattern resolvOption(java.lang.String)>("rotate");
<io.vertx.core.impl.AddressResolver: java.util.regex.Pattern ROTATE_OPTIONS_PATTERN> = v2;
v3 = 1;
v4 = 0;
v5 = staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isLinux()>();
if v5 == 0 goto label5;
v6 = new java.io.File;
specialinvoke v6.<java.io.File: void <init>(java.lang.String)>("/etc/resolv.conf");
label1:
v7 = virtualinvoke v6.<java.io.File: boolean exists()>();
if v7 == 0 goto label5;
v8 = virtualinvoke v6.<java.io.File: boolean isFile()>();
if v8 == 0 goto label5;
v9 = new java.lang.String;
v10 = virtualinvoke v6.<java.io.File: java.nio.file.Path toPath()>();
v11 = staticinvoke <java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)>(v10);
specialinvoke v9.<java.lang.String: void <init>(byte[])>(v11);
v12 = staticinvoke <io.vertx.core.impl.AddressResolver: int parseNdotsOptionFromResolvConf(java.lang.String)>(v9);
v13 = (int) -1;
if v12 == v13 goto label2;
v3 = v12;
label2:
v4 = staticinvoke <io.vertx.core.impl.AddressResolver: boolean parseRotateOptionFromResolvConf(java.lang.String)>(v9);
label3:
goto label5;
label4:
v14 := @caughtexception;
v15 = <io.vertx.core.impl.AddressResolver: io.vertx.core.impl.logging.Logger log>;
interfaceinvoke v15.<io.vertx.core.impl.logging.Logger: void debug(java.lang.Object,java.lang.Throwable)>("Failed to load options from /etc/resolv/.conf", v14);
label5:
<io.vertx.core.impl.AddressResolver: int DEFAULT_NDOTS_RESOLV_OPTION> = v3;
<io.vertx.core.impl.AddressResolver: boolean DEFAULT_ROTATE_RESOLV_OPTION> = v4;
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
}