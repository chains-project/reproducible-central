public interface  io.vertx.core.impl.ContextInternal extends java.lang.Object implements io.vertx.core.Context
{
public static io.vertx.core.impl.ContextInternal current()
{
java.lang.ThreadLocal v3;
java.lang.Thread v0;
io.vertx.core.impl.ContextInternal v2, v5;
java.lang.Object v4;
boolean v1;
v0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v1 = v0 instanceof io.vertx.core.impl.VertxThread;
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<io.vertx.core.impl.VertxThread: io.vertx.core.impl.ContextInternal context()>();
return v2;
label1:
v3 = <io.vertx.core.impl.VertxImpl: java.lang.ThreadLocal nonVertxContextDispatch>;
v4 = virtualinvoke v3.<java.lang.ThreadLocal: java.lang.Object get()>();
if v4 == null goto label2;
v5 = v4.<io.vertx.core.impl.VertxImpl$ContextDispatch: io.vertx.core.impl.ContextInternal context>;
return v5;
label2:
return null;
}
public void runOnContext(io.vertx.core.Handler)
{
java.util.concurrent.Executor v2;
io.vertx.core.impl.ContextInternal v0;
io.vertx.core.Handler v1;
java.lang.Runnable v3;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: java.util.concurrent.Executor executor()>();
v3 = staticinvoke <io.vertx.core.impl.ContextInternal$lambda_runOnContext_0__3330: java.lang.Runnable bootstrap$(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)>(v0, v1);
interfaceinvoke v2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(v3);
return;
}
public abstract java.util.concurrent.Executor executor();
public abstract io.netty.channel.EventLoop nettyEventLoop();
public io.vertx.core.impl.future.PromiseInternal promise()
{
io.vertx.core.impl.ContextInternal v0;
io.vertx.core.impl.future.PromiseImpl v1;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 = new io.vertx.core.impl.future.PromiseImpl;
specialinvoke v1.<io.vertx.core.impl.future.PromiseImpl: void <init>(io.vertx.core.impl.ContextInternal)>(v0);
return v1;
}
public io.vertx.core.impl.future.PromiseInternal promise(io.vertx.core.Handler)
{
io.vertx.core.impl.future.PromiseInternal v4;
io.vertx.core.impl.ContextInternal v0, v3;
io.vertx.core.Handler v1;
io.vertx.core.Future v5;
boolean v2;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v1 instanceof io.vertx.core.impl.future.PromiseInternal;
if v2 == 0 goto label1;
v3 = interfaceinvoke v1.<io.vertx.core.impl.future.PromiseInternal: io.vertx.core.impl.ContextInternal context()>();
if v3 == null goto label1;
return v1;
label1:
v4 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v5 = interfaceinvoke v4.<io.vertx.core.impl.future.PromiseInternal: io.vertx.core.Future future()>();
interfaceinvoke v5.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
return v4;
}
public io.vertx.core.Future succeededFuture()
{
io.vertx.core.impl.ContextInternal v0;
io.vertx.core.impl.future.SucceededFuture v1;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 = new io.vertx.core.impl.future.SucceededFuture;
specialinvoke v1.<io.vertx.core.impl.future.SucceededFuture: void <init>(io.vertx.core.impl.ContextInternal,java.lang.Object)>(v0, null);
return v1;
}
public io.vertx.core.Future succeededFuture(java.lang.Object)
{
io.vertx.core.impl.ContextInternal v0;
java.lang.Object v1;
io.vertx.core.impl.future.SucceededFuture v2;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: java.lang.Object;
v2 = new io.vertx.core.impl.future.SucceededFuture;
specialinvoke v2.<io.vertx.core.impl.future.SucceededFuture: void <init>(io.vertx.core.impl.ContextInternal,java.lang.Object)>(v0, v1);
return v2;
}
public io.vertx.core.Future failedFuture(java.lang.Throwable)
{
java.lang.Throwable v1;
io.vertx.core.impl.ContextInternal v0;
io.vertx.core.impl.future.FailedFuture v2;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: java.lang.Throwable;
v2 = new io.vertx.core.impl.future.FailedFuture;
specialinvoke v2.<io.vertx.core.impl.future.FailedFuture: void <init>(io.vertx.core.impl.ContextInternal,java.lang.Throwable)>(v0, v1);
return v2;
}
public io.vertx.core.Future failedFuture(java.lang.String)
{
io.vertx.core.impl.ContextInternal v0;
java.lang.String v1;
io.vertx.core.impl.future.FailedFuture v2;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: java.lang.String;
v2 = new io.vertx.core.impl.future.FailedFuture;
specialinvoke v2.<io.vertx.core.impl.future.FailedFuture: void <init>(io.vertx.core.impl.ContextInternal,java.lang.String)>(v0, v1);
return v2;
}
public void executeBlocking(io.vertx.core.Handler, io.vertx.core.impl.TaskQueue, io.vertx.core.Handler)
{
io.vertx.core.impl.ContextInternal v0;
io.vertx.core.impl.TaskQueue v2;
io.vertx.core.Handler v1, v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: io.vertx.core.impl.TaskQueue;
v3 := @parameter2: io.vertx.core.Handler;
v4 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future executeBlocking(io.vertx.core.Handler,io.vertx.core.impl.TaskQueue)>(v1, v2);
staticinvoke <io.vertx.core.impl.ContextBase: void setResultHandler(io.vertx.core.impl.ContextInternal,io.vertx.core.Future,io.vertx.core.Handler)>(v0, v4, v3);
return;
}
public abstract io.vertx.core.Future executeBlocking(io.vertx.core.Handler, io.vertx.core.impl.TaskQueue);
public void executeBlockingInternal(io.vertx.core.Handler, io.vertx.core.Handler)
{
io.vertx.core.impl.ContextInternal v0;
io.vertx.core.Handler v1, v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future executeBlockingInternal(io.vertx.core.Handler)>(v1);
staticinvoke <io.vertx.core.impl.ContextBase: void setResultHandler(io.vertx.core.impl.ContextInternal,io.vertx.core.Future,io.vertx.core.Handler)>(v0, v3, v2);
return;
}
public void executeBlockingInternal(io.vertx.core.Handler, boolean, io.vertx.core.Handler)
{
io.vertx.core.impl.ContextInternal v0;
io.vertx.core.Handler v1, v3;
io.vertx.core.Future v4;
boolean v2;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: boolean;
v3 := @parameter2: io.vertx.core.Handler;
v4 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future executeBlockingInternal(io.vertx.core.Handler,boolean)>(v1, v2);
staticinvoke <io.vertx.core.impl.ContextBase: void setResultHandler(io.vertx.core.impl.ContextInternal,io.vertx.core.Future,io.vertx.core.Handler)>(v0, v4, v3);
return;
}
public void executeBlocking(io.vertx.core.Handler, boolean, io.vertx.core.Handler)
{
io.vertx.core.impl.ContextInternal v0;
io.vertx.core.Handler v1, v3;
io.vertx.core.Future v4;
boolean v2;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: boolean;
v3 := @parameter2: io.vertx.core.Handler;
v4 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future executeBlocking(io.vertx.core.Handler,boolean)>(v1, v2);
staticinvoke <io.vertx.core.impl.ContextBase: void setResultHandler(io.vertx.core.impl.ContextInternal,io.vertx.core.Future,io.vertx.core.Handler)>(v0, v4, v3);
return;
}
public abstract io.vertx.core.Future executeBlockingInternal(io.vertx.core.Handler);
public abstract io.vertx.core.Future executeBlockingInternal(io.vertx.core.Handler, boolean);
public abstract io.vertx.core.impl.Deployment getDeployment();
public abstract io.vertx.core.impl.VertxInternal owner();
public abstract boolean inThread();
public abstract void emit(java.lang.Object, io.vertx.core.Handler);
public void emit(io.vertx.core.Handler)
{
io.vertx.core.impl.ContextInternal v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: io.vertx.core.Handler;
interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: void emit(java.lang.Object,io.vertx.core.Handler)>(null, v1);
return;
}
public void execute(io.vertx.core.Handler)
{
io.vertx.core.impl.ContextInternal v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: io.vertx.core.Handler;
interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: void execute(java.lang.Object,io.vertx.core.Handler)>(null, v1);
return;
}
public abstract void execute(java.lang.Runnable);
public abstract void execute(java.lang.Object, io.vertx.core.Handler);
public boolean isRunningOnContext()
{
io.vertx.core.impl.ContextInternal v0, v1;
boolean v2, v3;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 = staticinvoke <io.vertx.core.impl.ContextInternal: io.vertx.core.impl.ContextInternal current()>();
if v1 != v0 goto label1;
v2 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: boolean inThread()>();
if v2 == 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public void dispatch(java.lang.Runnable)
{
java.lang.Throwable v3, v4;
io.vertx.core.impl.ContextInternal v0, v2;
java.lang.Runnable v1;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: java.lang.Runnable;
v2 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.ContextInternal beginDispatch()>();
label1:
interfaceinvoke v1.<java.lang.Runnable: void run()>();
label2:
interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: void endDispatch(io.vertx.core.impl.ContextInternal)>(v2);
goto label6;
label3:
v3 := @caughtexception;
interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: void reportException(java.lang.Throwable)>(v3);
label4:
interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: void endDispatch(io.vertx.core.impl.ContextInternal)>(v2);
goto label6;
label5:
v4 := @caughtexception;
interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: void endDispatch(io.vertx.core.impl.ContextInternal)>(v2);
throw v4;
label6:
return;
catch java.lang.Throwable from label1 to label2 with label3;
catch java.lang.Throwable from label3 to label4 with label5;
}
public void dispatch(io.vertx.core.Handler)
{
io.vertx.core.impl.ContextInternal v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: io.vertx.core.Handler;
interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: void dispatch(java.lang.Object,io.vertx.core.Handler)>(null, v1);
return;
}
public void dispatch(java.lang.Object, io.vertx.core.Handler)
{
java.lang.Throwable v4, v5;
io.vertx.core.impl.ContextInternal v0, v3;
java.lang.Object v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.ContextInternal beginDispatch()>();
label1:
interfaceinvoke v2.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label2:
interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: void endDispatch(io.vertx.core.impl.ContextInternal)>(v3);
goto label6;
label3:
v4 := @caughtexception;
interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: void reportException(java.lang.Throwable)>(v4);
label4:
interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: void endDispatch(io.vertx.core.impl.ContextInternal)>(v3);
goto label6;
label5:
v5 := @caughtexception;
interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: void endDispatch(io.vertx.core.impl.ContextInternal)>(v3);
throw v5;
label6:
return;
catch java.lang.Throwable from label1 to label2 with label3;
catch java.lang.Throwable from label3 to label4 with label5;
}
public io.vertx.core.impl.ContextInternal beginDispatch()
{
io.vertx.core.impl.ContextInternal v0, v2;
io.vertx.core.impl.VertxInternal v1;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.VertxInternal owner()>();
v2 = virtualinvoke v1.<io.vertx.core.impl.VertxImpl: io.vertx.core.impl.ContextInternal beginDispatch(io.vertx.core.impl.ContextInternal)>(v0);
return v2;
}
public void endDispatch(io.vertx.core.impl.ContextInternal)
{
io.vertx.core.impl.ContextInternal v0, v1;
io.vertx.core.impl.VertxInternal v2;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: io.vertx.core.impl.ContextInternal;
v2 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.VertxInternal owner()>();
virtualinvoke v2.<io.vertx.core.impl.VertxImpl: void endDispatch(io.vertx.core.impl.ContextInternal)>(v1);
return;
}
public abstract void reportException(java.lang.Throwable);
public abstract java.util.concurrent.ConcurrentMap contextData();
public java.lang.Object get(java.lang.Object)
{
io.vertx.core.impl.ContextInternal v0;
java.lang.Object v1, v3;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: java.lang.Object;
staticinvoke <io.quarkus.vertx.core.runtime.VertxLocalsHelper: void throwOnRootContextAccess()>();
v2 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: java.util.concurrent.ConcurrentMap contextData()>();
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v1);
return v3;
}
public void put(java.lang.Object, java.lang.Object)
{
io.vertx.core.impl.ContextInternal v0;
java.lang.Object v1, v2;
java.util.concurrent.ConcurrentMap v3;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
staticinvoke <io.quarkus.vertx.core.runtime.VertxLocalsHelper: void throwOnRootContextAccess()>();
v3 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: java.util.concurrent.ConcurrentMap contextData()>();
interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
return;
}
public boolean remove(java.lang.Object)
{
io.vertx.core.impl.ContextInternal v0;
java.lang.Object v1, v3;
boolean v4;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: java.lang.Object;
staticinvoke <io.quarkus.vertx.core.runtime.VertxLocalsHelper: void throwOnRootContextAccess()>();
v2 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: java.util.concurrent.ConcurrentMap contextData()>();
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public abstract java.util.concurrent.ConcurrentMap localContextData();
public java.lang.Object getLocal(java.lang.Object)
{
io.vertx.core.impl.ContextInternal v0;
java.lang.Object v1, v2;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <io.quarkus.vertx.core.runtime.VertxLocalsHelper: java.lang.Object getLocal(io.vertx.core.impl.ContextInternal,java.lang.Object)>(v0, v1);
return v2;
}
public void putLocal(java.lang.Object, java.lang.Object)
{
io.vertx.core.impl.ContextInternal v0;
java.lang.Object v1, v2;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
staticinvoke <io.quarkus.vertx.core.runtime.VertxLocalsHelper: void putLocal(io.vertx.core.impl.ContextInternal,java.lang.Object,java.lang.Object)>(v0, v1, v2);
return;
}
public boolean removeLocal(java.lang.Object)
{
io.vertx.core.impl.ContextInternal v0;
java.lang.Object v1;
boolean v2;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <io.quarkus.vertx.core.runtime.VertxLocalsHelper: boolean removeLocal(io.vertx.core.impl.ContextInternal,java.lang.Object)>(v0, v1);
return v2;
}
public abstract java.lang.ClassLoader classLoader();
public abstract io.vertx.core.impl.WorkerPool workerPool();
public abstract io.vertx.core.spi.tracing.VertxTracer tracer();
public abstract io.vertx.core.impl.ContextInternal duplicate();
public long setPeriodic(long, io.vertx.core.Handler)
{
java.util.concurrent.TimeUnit v4;
io.vertx.core.impl.VertxInternal v3;
io.vertx.core.impl.ContextInternal v0;
long v1, v5;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: long;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.VertxInternal owner()>();
v4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v5 = virtualinvoke v3.<io.vertx.core.impl.VertxImpl: long scheduleTimeout(io.vertx.core.impl.ContextInternal,boolean,long,java.util.concurrent.TimeUnit,boolean,io.vertx.core.Handler)>(v0, 1, v1, v4, 0, v2);
return v5;
}
public long setTimer(long, io.vertx.core.Handler)
{
java.util.concurrent.TimeUnit v4;
io.vertx.core.impl.VertxInternal v3;
io.vertx.core.impl.ContextInternal v0;
long v1, v5;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: long;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.VertxInternal owner()>();
v4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v5 = virtualinvoke v3.<io.vertx.core.impl.VertxImpl: long scheduleTimeout(io.vertx.core.impl.ContextInternal,boolean,long,java.util.concurrent.TimeUnit,boolean,io.vertx.core.Handler)>(v0, 0, v1, v4, 0, v2);
return v5;
}
public boolean isDeployment()
{
io.vertx.core.impl.ContextInternal v0;
io.vertx.core.impl.Deployment v1;
boolean v2;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.Deployment getDeployment()>();
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public java.lang.String deploymentID()
{
io.vertx.core.impl.ContextInternal v0;
java.lang.String v2;
io.vertx.core.impl.Deployment v1;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.Deployment getDeployment()>();
if v1 == null goto label1;
v2 = interfaceinvoke v1.<io.vertx.core.impl.Deployment: java.lang.String deploymentID()>();
goto label2;
label1:
v2 = null;
label2:
return v2;
}
public int getInstanceCount()
{
io.vertx.core.impl.Deployment v1;
io.vertx.core.DeploymentOptions v2, v3;
int v4;
io.vertx.core.impl.ContextInternal v0;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.Deployment getDeployment()>();
if v1 != null goto label1;
return 0;
label1:
v2 = interfaceinvoke v1.<io.vertx.core.impl.Deployment: io.vertx.core.DeploymentOptions deploymentOptions()>();
if v2 != null goto label2;
return 1;
label2:
v3 = interfaceinvoke v1.<io.vertx.core.impl.Deployment: io.vertx.core.DeploymentOptions deploymentOptions()>();
v4 = virtualinvoke v3.<io.vertx.core.DeploymentOptions: int getInstances()>();
return v4;
}
public abstract io.vertx.core.impl.CloseFuture closeFuture();
public void addCloseHook(io.vertx.core.Closeable)
{
io.vertx.core.impl.ContextInternal v0;
io.vertx.core.Closeable v1;
io.vertx.core.impl.CloseFuture v2;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: io.vertx.core.Closeable;
v2 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.CloseFuture closeFuture()>();
virtualinvoke v2.<io.vertx.core.impl.CloseFuture: void add(io.vertx.core.Closeable)>(v1);
return;
}
public void removeCloseHook(io.vertx.core.Closeable)
{
io.vertx.core.impl.ContextInternal v0;
io.vertx.core.Closeable v1;
io.vertx.core.impl.CloseFuture v2;
v0 := @this: io.vertx.core.impl.ContextInternal;
v1 := @parameter0: io.vertx.core.Closeable;
v2 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.CloseFuture closeFuture()>();
virtualinvoke v2.<io.vertx.core.impl.CloseFuture: boolean remove(io.vertx.core.Closeable)>(v1);
return;
}
public io.vertx.core.impl.ContextInternal unwrap()
{
io.vertx.core.impl.ContextInternal v0;
v0 := @this: io.vertx.core.impl.ContextInternal;
return v0;
}
public boolean isDuplicate()
{
io.vertx.core.impl.ContextInternal v0;
v0 := @this: io.vertx.core.impl.ContextInternal;
return 0;
}
}