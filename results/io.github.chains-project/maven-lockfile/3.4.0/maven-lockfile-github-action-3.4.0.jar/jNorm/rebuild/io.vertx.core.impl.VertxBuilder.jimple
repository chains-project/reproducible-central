public class io.vertx.core.impl.VertxBuilder extends java.lang.Object
{
private static final io.vertx.core.impl.logging.Logger log;
private io.vertx.core.VertxOptions options;
private io.vertx.core.json.JsonObject config;
private io.vertx.core.spi.transport.Transport transport;
private io.vertx.core.spi.cluster.ClusterManager clusterManager;
private io.vertx.core.spi.cluster.NodeSelector clusterNodeSelector;
private io.vertx.core.spi.tracing.VertxTracer tracer;
private io.vertx.core.spi.VertxThreadFactory threadFactory;
private io.vertx.core.spi.ExecutorServiceFactory executorServiceFactory;
private io.vertx.core.spi.metrics.VertxMetrics metrics;
private io.vertx.core.spi.file.FileResolver fileResolver;
public void <init>(io.vertx.core.json.JsonObject)
{
io.vertx.core.VertxOptions v2;
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.json.JsonObject v1;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 := @parameter0: io.vertx.core.json.JsonObject;
v2 = new io.vertx.core.VertxOptions;
specialinvoke v2.<io.vertx.core.VertxOptions: void <init>(io.vertx.core.json.JsonObject)>(v1);
specialinvoke v0.<io.vertx.core.impl.VertxBuilder: void <init>(io.vertx.core.VertxOptions)>(v2);
v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.json.JsonObject config> = v1;
return;
}
public void <init>(io.vertx.core.VertxOptions)
{
io.vertx.core.VertxOptions v1;
io.vertx.core.impl.VertxBuilder v0;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 := @parameter0: io.vertx.core.VertxOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.VertxOptions options> = v1;
return;
}
public void <init>()
{
io.vertx.core.VertxOptions v1;
io.vertx.core.impl.VertxBuilder v0;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 = new io.vertx.core.VertxOptions;
specialinvoke v1.<io.vertx.core.VertxOptions: void <init>()>();
specialinvoke v0.<io.vertx.core.impl.VertxBuilder: void <init>(io.vertx.core.VertxOptions)>(v1);
return;
}
public io.vertx.core.VertxOptions options()
{
io.vertx.core.VertxOptions v1;
io.vertx.core.impl.VertxBuilder v0;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.VertxOptions options>;
return v1;
}
public io.vertx.core.json.JsonObject config()
{
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.json.JsonObject v1;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.json.JsonObject config>;
return v1;
}
public io.vertx.core.spi.transport.Transport findTransport()
{
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.transport.Transport v1;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.transport.Transport transport>;
return v1;
}
public io.vertx.core.impl.VertxBuilder findTransport(io.vertx.core.spi.transport.Transport)
{
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.transport.Transport v1;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 := @parameter0: io.vertx.core.spi.transport.Transport;
v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.transport.Transport transport> = v1;
return v0;
}
public io.vertx.core.spi.cluster.ClusterManager clusterManager()
{
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.cluster.ClusterManager v1;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.cluster.ClusterManager clusterManager>;
return v1;
}
public io.vertx.core.impl.VertxBuilder clusterManager(io.vertx.core.spi.cluster.ClusterManager)
{
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.cluster.ClusterManager v1;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 := @parameter0: io.vertx.core.spi.cluster.ClusterManager;
v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.cluster.ClusterManager clusterManager> = v1;
return v0;
}
public io.vertx.core.spi.cluster.NodeSelector clusterNodeSelector()
{
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.cluster.NodeSelector v1;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.cluster.NodeSelector clusterNodeSelector>;
return v1;
}
public io.vertx.core.impl.VertxBuilder clusterNodeSelector(io.vertx.core.spi.cluster.NodeSelector)
{
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.cluster.NodeSelector v1;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 := @parameter0: io.vertx.core.spi.cluster.NodeSelector;
v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.cluster.NodeSelector clusterNodeSelector> = v1;
return v0;
}
public io.vertx.core.spi.tracing.VertxTracer tracer()
{
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.tracing.VertxTracer v1;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.tracing.VertxTracer tracer>;
return v1;
}
public io.vertx.core.impl.VertxBuilder tracer(io.vertx.core.spi.tracing.VertxTracer)
{
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.tracing.VertxTracer v1;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 := @parameter0: io.vertx.core.spi.tracing.VertxTracer;
v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.tracing.VertxTracer tracer> = v1;
return v0;
}
public io.vertx.core.spi.metrics.VertxMetrics metrics()
{
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.metrics.VertxMetrics v1;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.metrics.VertxMetrics metrics>;
return v1;
}
public io.vertx.core.impl.VertxBuilder metrics(io.vertx.core.spi.metrics.VertxMetrics)
{
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.metrics.VertxMetrics v1;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 := @parameter0: io.vertx.core.spi.metrics.VertxMetrics;
v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.metrics.VertxMetrics metrics> = v1;
return v0;
}
public io.vertx.core.spi.file.FileResolver fileResolver()
{
io.vertx.core.spi.file.FileResolver v1;
io.vertx.core.impl.VertxBuilder v0;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.file.FileResolver fileResolver>;
return v1;
}
public io.vertx.core.impl.VertxBuilder fileResolver(io.vertx.core.spi.file.FileResolver)
{
io.vertx.core.spi.file.FileResolver v1;
io.vertx.core.impl.VertxBuilder v0;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 := @parameter0: io.vertx.core.spi.file.FileResolver;
v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.file.FileResolver fileResolver> = v1;
return v0;
}
public io.vertx.core.spi.VertxThreadFactory threadFactory()
{
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.VertxThreadFactory v1;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.VertxThreadFactory threadFactory>;
return v1;
}
public io.vertx.core.impl.VertxBuilder threadFactory(io.vertx.core.spi.VertxThreadFactory)
{
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.VertxThreadFactory v1;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 := @parameter0: io.vertx.core.spi.VertxThreadFactory;
v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.VertxThreadFactory threadFactory> = v1;
return v0;
}
public io.vertx.core.spi.ExecutorServiceFactory executorServiceFactory()
{
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.ExecutorServiceFactory v1;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.ExecutorServiceFactory executorServiceFactory>;
return v1;
}
public io.vertx.core.impl.VertxBuilder executorServiceFactory(io.vertx.core.spi.ExecutorServiceFactory)
{
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.ExecutorServiceFactory v1;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 := @parameter0: io.vertx.core.spi.ExecutorServiceFactory;
v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.ExecutorServiceFactory executorServiceFactory> = v1;
return v0;
}
public io.vertx.core.Vertx vertx()
{
io.vertx.core.impl.VertxImpl v1;
io.vertx.core.spi.VertxThreadFactory v7;
io.vertx.core.VertxOptions v2;
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.ExecutorServiceFactory v8;
io.vertx.core.spi.tracing.VertxTracer v4;
io.vertx.core.spi.metrics.VertxMetrics v3;
io.vertx.core.spi.transport.Transport v5;
io.vertx.core.spi.file.FileResolver v6;
v0 := @this: io.vertx.core.impl.VertxBuilder;
specialinvoke v0.<io.vertx.core.impl.VertxBuilder: void checkBeforeInstantiating()>();
v1 = new io.vertx.core.impl.VertxImpl;
v2 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.VertxOptions options>;
v3 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.metrics.VertxMetrics metrics>;
v4 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.tracing.VertxTracer tracer>;
v5 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.transport.Transport transport>;
v6 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.file.FileResolver fileResolver>;
v7 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.VertxThreadFactory threadFactory>;
v8 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.ExecutorServiceFactory executorServiceFactory>;
specialinvoke v1.<io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.ClusterManager,io.vertx.core.spi.cluster.NodeSelector,io.vertx.core.spi.metrics.VertxMetrics,io.vertx.core.spi.tracing.VertxTracer,io.vertx.core.spi.transport.Transport,io.vertx.core.spi.file.FileResolver,io.vertx.core.spi.VertxThreadFactory,io.vertx.core.spi.ExecutorServiceFactory)>(v2, null, null, v3, v4, v5, v6, v7, v8);
virtualinvoke v1.<io.vertx.core.impl.VertxImpl: void init()>();
return v1;
}
public void clusteredVertx(io.vertx.core.Handler)
{
java.lang.IllegalStateException v3;
io.vertx.core.spi.VertxThreadFactory v14;
io.vertx.core.spi.metrics.VertxMetrics v10;
io.vertx.core.spi.transport.Transport v12;
io.vertx.core.spi.cluster.impl.DefaultNodeSelector v8;
io.vertx.core.spi.file.FileResolver v13;
io.vertx.core.impl.VertxImpl v4;
io.vertx.core.spi.cluster.NodeSelector v7, v9;
io.vertx.core.spi.cluster.ClusterManager v2, v6;
io.vertx.core.VertxOptions v16, v5;
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.ExecutorServiceFactory v15;
io.vertx.core.spi.tracing.VertxTracer v11;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 := @parameter0: io.vertx.core.Handler;
specialinvoke v0.<io.vertx.core.impl.VertxBuilder: void checkBeforeInstantiating()>();
v2 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.cluster.ClusterManager clusterManager>;
if v2 != null goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No ClusterManagerFactory instances found on classpath");
throw v3;
label1:
v4 = new io.vertx.core.impl.VertxImpl;
v5 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.VertxOptions options>;
v6 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.cluster.ClusterManager clusterManager>;
v7 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.cluster.NodeSelector clusterNodeSelector>;
if v7 != null goto label2;
v8 = new io.vertx.core.spi.cluster.impl.DefaultNodeSelector;
v9 = v8;
specialinvoke v8.<io.vertx.core.spi.cluster.impl.DefaultNodeSelector: void <init>()>();
goto label3;
label2:
v9 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.cluster.NodeSelector clusterNodeSelector>;
label3:
v10 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.metrics.VertxMetrics metrics>;
v11 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.tracing.VertxTracer tracer>;
v12 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.transport.Transport transport>;
v13 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.file.FileResolver fileResolver>;
v14 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.VertxThreadFactory threadFactory>;
v15 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.ExecutorServiceFactory executorServiceFactory>;
specialinvoke v4.<io.vertx.core.impl.VertxImpl: void <init>(io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.ClusterManager,io.vertx.core.spi.cluster.NodeSelector,io.vertx.core.spi.metrics.VertxMetrics,io.vertx.core.spi.tracing.VertxTracer,io.vertx.core.spi.transport.Transport,io.vertx.core.spi.file.FileResolver,io.vertx.core.spi.VertxThreadFactory,io.vertx.core.spi.ExecutorServiceFactory)>(v5, v6, v9, v10, v11, v12, v13, v14, v15);
v16 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.VertxOptions options>;
virtualinvoke v4.<io.vertx.core.impl.VertxImpl: void initClustered(io.vertx.core.VertxOptions,io.vertx.core.Handler)>(v16, v1);
return;
}
public io.vertx.core.impl.VertxBuilder init()
{
java.util.Collection v5;
io.vertx.core.VertxOptions v2, v3, v4;
io.vertx.core.impl.VertxBuilder v0;
java.util.ArrayList v1;
v0 := @this: io.vertx.core.impl.VertxBuilder;
specialinvoke v0.<io.vertx.core.impl.VertxBuilder: void initTransport()>();
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.VertxOptions options>;
staticinvoke <io.vertx.core.impl.VertxBuilder: void initMetrics(io.vertx.core.VertxOptions,java.util.Collection)>(v2, v1);
v3 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.VertxOptions options>;
staticinvoke <io.vertx.core.impl.VertxBuilder: void initTracing(io.vertx.core.VertxOptions,java.util.Collection)>(v3, v1);
v4 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.VertxOptions options>;
staticinvoke <io.vertx.core.impl.VertxBuilder: void initClusterManager(io.vertx.core.VertxOptions,java.util.Collection)>(v4, v1);
v5 = staticinvoke <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class)>(class "Lio/vertx/core/spi/VertxServiceProvider;");
interfaceinvoke v1.<java.util.Collection: boolean addAll(java.util.Collection)>(v5);
specialinvoke v0.<io.vertx.core.impl.VertxBuilder: void initProviders(java.util.Collection)>(v1);
specialinvoke v0.<io.vertx.core.impl.VertxBuilder: void initThreadFactory()>();
specialinvoke v0.<io.vertx.core.impl.VertxBuilder: void initExecutorServiceFactory()>();
specialinvoke v0.<io.vertx.core.impl.VertxBuilder: void initFileResolver()>();
return v0;
}
private void initProviders(java.util.Collection)
{
java.util.Iterator v2;
java.util.Collection v1;
io.vertx.core.impl.VertxBuilder v0;
java.lang.Object v4;
boolean v3;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 := @parameter0: java.util.Collection;
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v4.<io.vertx.core.spi.VertxServiceProvider: void init(io.vertx.core.impl.VertxBuilder)>(v0);
goto label1;
label2:
return;
}
private static void initMetrics(io.vertx.core.VertxOptions, java.util.Collection)
{
io.vertx.core.metrics.MetricsOptions v2;
io.vertx.core.spi.VertxMetricsFactory v3;
java.util.Collection v1;
io.vertx.core.VertxOptions v0;
v0 := @parameter0: io.vertx.core.VertxOptions;
v1 := @parameter1: java.util.Collection;
v2 = virtualinvoke v0.<io.vertx.core.VertxOptions: io.vertx.core.metrics.MetricsOptions getMetricsOptions()>();
if v2 == null goto label1;
v3 = virtualinvoke v2.<io.vertx.core.metrics.MetricsOptions: io.vertx.core.spi.VertxMetricsFactory getFactory()>();
if v3 == null goto label1;
interfaceinvoke v1.<java.util.Collection: boolean add(java.lang.Object)>(v3);
label1:
return;
}
private static void initTracing(io.vertx.core.VertxOptions, java.util.Collection)
{
io.vertx.core.tracing.TracingOptions v2;
io.vertx.core.spi.VertxTracerFactory v3;
java.util.Collection v1;
io.vertx.core.VertxOptions v0;
v0 := @parameter0: io.vertx.core.VertxOptions;
v1 := @parameter1: java.util.Collection;
v2 = virtualinvoke v0.<io.vertx.core.VertxOptions: io.vertx.core.tracing.TracingOptions getTracingOptions()>();
if v2 == null goto label1;
v3 = virtualinvoke v2.<io.vertx.core.tracing.TracingOptions: io.vertx.core.spi.VertxTracerFactory getFactory()>();
if v3 == null goto label1;
interfaceinvoke v1.<java.util.Collection: boolean add(java.lang.Object)>(v3);
label1:
return;
}
private static void initClusterManager(io.vertx.core.VertxOptions, java.util.Collection)
{
java.lang.IllegalStateException v7;
io.vertx.core.spi.cluster.ClusterManager v2;
java.util.Collection v1;
io.vertx.core.VertxOptions v0;
java.lang.Exception v6;
java.lang.Class v4;
java.lang.Object v5;
java.lang.String v3, v8;
v0 := @parameter0: io.vertx.core.VertxOptions;
v1 := @parameter1: java.util.Collection;
v2 = virtualinvoke v0.<io.vertx.core.VertxOptions: io.vertx.core.spi.cluster.ClusterManager getClusterManager()>();
if v2 != null goto label4;
v3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("vertx.cluster.managerClass");
if v3 == null goto label4;
label1:
v4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(v3);
v5 = virtualinvoke v4.<java.lang.Class: java.lang.Object newInstance()>();
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = new java.lang.IllegalStateException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to instantiate \u0001");
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>(v8, v6);
throw v7;
label4:
if v5 == null goto label5;
interfaceinvoke v1.<java.util.Collection: boolean add(java.lang.Object)>(v5);
label5:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
private void initTransport()
{
io.vertx.core.VertxOptions v2;
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.transport.Transport v1, v4;
boolean v3;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.transport.Transport transport>;
if v1 == null goto label1;
return;
label1:
v2 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.VertxOptions options>;
v3 = virtualinvoke v2.<io.vertx.core.VertxOptions: boolean getPreferNativeTransport()>();
v4 = staticinvoke <io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.transport.Transport findTransport(boolean)>(v3);
v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.transport.Transport transport> = v4;
return;
}
private void initFileResolver()
{
io.vertx.core.file.FileSystemOptions v4;
io.vertx.core.spi.file.FileResolver v1;
io.vertx.core.VertxOptions v3;
io.vertx.core.file.impl.FileResolverImpl v2;
io.vertx.core.impl.VertxBuilder v0;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.file.FileResolver fileResolver>;
if v1 == null goto label1;
return;
label1:
v2 = new io.vertx.core.file.impl.FileResolverImpl;
v3 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.VertxOptions options>;
v4 = virtualinvoke v3.<io.vertx.core.VertxOptions: io.vertx.core.file.FileSystemOptions getFileSystemOptions()>();
specialinvoke v2.<io.vertx.core.file.impl.FileResolverImpl: void <init>(io.vertx.core.file.FileSystemOptions)>(v4);
v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.file.FileResolver fileResolver> = v2;
return;
}
private void initThreadFactory()
{
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.VertxThreadFactory v1, v2;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.VertxThreadFactory threadFactory>;
if v1 == null goto label1;
return;
label1:
v2 = <io.vertx.core.spi.VertxThreadFactory: io.vertx.core.spi.VertxThreadFactory INSTANCE>;
v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.VertxThreadFactory threadFactory> = v2;
return;
}
private void initExecutorServiceFactory()
{
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.ExecutorServiceFactory v1, v2;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.ExecutorServiceFactory executorServiceFactory>;
if v1 == null goto label1;
return;
label1:
v2 = <io.vertx.core.spi.ExecutorServiceFactory: io.vertx.core.spi.ExecutorServiceFactory INSTANCE>;
v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.ExecutorServiceFactory executorServiceFactory> = v2;
return;
}
private void checkBeforeInstantiating()
{
io.vertx.core.impl.VertxBuilder v0;
v0 := @this: io.vertx.core.impl.VertxBuilder;
specialinvoke v0.<io.vertx.core.impl.VertxBuilder: void checkTracing()>();
specialinvoke v0.<io.vertx.core.impl.VertxBuilder: void checkMetrics()>();
return;
}
private void checkTracing()
{
io.vertx.core.impl.logging.Logger v4;
io.vertx.core.tracing.TracingOptions v2;
io.vertx.core.VertxOptions v1;
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.tracing.VertxTracer v3;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.VertxOptions options>;
v2 = virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.tracing.TracingOptions getTracingOptions()>();
if v2 == null goto label1;
v3 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.tracing.VertxTracer tracer>;
if v3 != null goto label1;
v4 = <io.vertx.core.impl.VertxBuilder: io.vertx.core.impl.logging.Logger log>;
interfaceinvoke v4.<io.vertx.core.impl.logging.Logger: void warn(java.lang.Object)>("Tracing options are configured but no tracer is instantiated. Make sure you have the VertxTracerFactory in your classpath and META-INF/services/io.vertx.core.spi.VertxServiceProvider contains the factory FQCN, or tracingOptions.getFactory() returns a non null value");
label1:
return;
}
private void checkMetrics()
{
io.vertx.core.impl.logging.Logger v7;
io.vertx.core.VertxOptions v1, v3;
io.vertx.core.impl.VertxBuilder v0;
io.vertx.core.spi.metrics.VertxMetrics v6;
io.vertx.core.metrics.MetricsOptions v2, v4;
boolean v5;
v0 := @this: io.vertx.core.impl.VertxBuilder;
v1 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.VertxOptions options>;
v2 = virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.metrics.MetricsOptions getMetricsOptions()>();
if v2 == null goto label1;
v3 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.VertxOptions options>;
v4 = virtualinvoke v3.<io.vertx.core.VertxOptions: io.vertx.core.metrics.MetricsOptions getMetricsOptions()>();
v5 = virtualinvoke v4.<io.vertx.core.metrics.MetricsOptions: boolean isEnabled()>();
if v5 == 0 goto label1;
v6 = v0.<io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.metrics.VertxMetrics metrics>;
if v6 != null goto label1;
v7 = <io.vertx.core.impl.VertxBuilder: io.vertx.core.impl.logging.Logger log>;
interfaceinvoke v7.<io.vertx.core.impl.logging.Logger: void warn(java.lang.Object)>("Metrics options are configured but no metrics object is instantiated. Make sure you have the VertxMetricsFactory in your classpath and META-INF/services/io.vertx.core.spi.VertxServiceProvider contains the factory FQCN, or metricsOptions.getFactory() returns a non null value");
label1:
return;
}
public static io.vertx.core.spi.transport.Transport nativeTransport()
{
java.lang.Throwable v3, v6;
io.vertx.core.impl.transports.EpollTransport v1;
io.vertx.core.impl.transports.KQueueTransport v4;
io.vertx.core.spi.transport.Transport v0;
boolean v2, v5;
v0 = null;
label1:
v1 = new io.vertx.core.impl.transports.EpollTransport;
specialinvoke v1.<io.vertx.core.impl.transports.EpollTransport: void <init>()>();
v2 = interfaceinvoke v1.<io.vertx.core.spi.transport.Transport: boolean isAvailable()>();
if v2 == 0 goto label3;
label2:
return v1;
label3:
v0 = v1;
label4:
goto label6;
label5:
v3 := @caughtexception;
label6:
v4 = new io.vertx.core.impl.transports.KQueueTransport;
specialinvoke v4.<io.vertx.core.impl.transports.KQueueTransport: void <init>()>();
v5 = interfaceinvoke v4.<io.vertx.core.spi.transport.Transport: boolean isAvailable()>();
if v5 == 0 goto label9;
label7:
return v4;
label8:
v6 := @caughtexception;
label9:
return v0;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
catch java.lang.Throwable from label6 to label7 with label8;
}
static io.vertx.core.spi.transport.Transport findTransport(boolean)
{
java.util.Iterator v2;
java.util.Collection v1;
io.vertx.core.spi.transport.Transport v6, v8, v9;
java.lang.Object v4;
boolean v0, v3, v5, v7;
v0 := @parameter0: boolean;
if v0 == 0 goto label4;
v1 = staticinvoke <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class)>(class "Lio/vertx/core/spi/transport/Transport;");
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<io.vertx.core.spi.transport.Transport: boolean isAvailable()>();
if v5 == 0 goto label1;
return v4;
label2:
v6 = staticinvoke <io.vertx.core.impl.VertxBuilder: io.vertx.core.spi.transport.Transport nativeTransport()>();
if v6 == null goto label3;
v7 = interfaceinvoke v6.<io.vertx.core.spi.transport.Transport: boolean isAvailable()>();
if v7 == 0 goto label3;
return v6;
label3:
v8 = <io.vertx.core.impl.transports.JDKTransport: io.vertx.core.spi.transport.Transport INSTANCE>;
return v8;
label4:
v9 = <io.vertx.core.impl.transports.JDKTransport: io.vertx.core.spi.transport.Transport INSTANCE>;
return v9;
}
static void <clinit>()
{
io.vertx.core.impl.logging.Logger v0;
v0 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/VertxBuilder;");
<io.vertx.core.impl.VertxBuilder: io.vertx.core.impl.logging.Logger log> = v0;
return;
}
}