class io.vertx.core.impl.VertxImpl$1$1 extends java.lang.Object implements io.netty.util.concurrent.GenericFutureListener
{
final io.vertx.core.impl.VertxImpl$1 this$1;
void <init>(io.vertx.core.impl.VertxImpl$1)
{
io.vertx.core.impl.VertxImpl$1$1 v0;
io.vertx.core.impl.VertxImpl$1 v1;
v0 := @this: io.vertx.core.impl.VertxImpl$1$1;
v1 := @parameter0: io.vertx.core.impl.VertxImpl$1;
v0.<io.vertx.core.impl.VertxImpl$1$1: io.vertx.core.impl.VertxImpl$1 this$1> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void operationComplete(io.netty.util.concurrent.Future) throws java.lang.Exception
{
java.lang.Throwable v4;
io.vertx.core.impl.VertxImpl$1 v11, v14, v17, v20, v22, v25, v5, v8;
java.lang.Runnable v27;
io.vertx.core.spi.metrics.VertxMetrics v10, v7;
java.lang.Thread v28;
java.util.concurrent.ThreadFactory v24;
boolean v2;
io.vertx.core.impl.logging.Logger v3;
io.vertx.core.impl.VertxImpl v12, v15, v18, v23, v6, v9;
io.vertx.core.impl.VertxImpl$1$1 v0;
io.vertx.core.spi.tracing.VertxTracer v13, v16;
io.vertx.core.impl.btc.BlockedThreadChecker v19;
io.netty.util.concurrent.Future v1;
io.vertx.core.Handler v21, v26;
v0 := @this: io.vertx.core.impl.VertxImpl$1$1;
v1 := @parameter0: io.netty.util.concurrent.Future;
v2 = interfaceinvoke v1.<io.netty.util.concurrent.Future: boolean isSuccess()>();
if v2 != 0 goto label1;
v3 = <io.vertx.core.impl.VertxImpl: io.vertx.core.impl.logging.Logger log>;
v4 = interfaceinvoke v1.<io.netty.util.concurrent.Future: java.lang.Throwable cause()>();
interfaceinvoke v3.<io.vertx.core.impl.logging.Logger: void warn(java.lang.Object,java.lang.Throwable)>("Failure in shutting down event loop group", v4);
label1:
v5 = v0.<io.vertx.core.impl.VertxImpl$1$1: io.vertx.core.impl.VertxImpl$1 this$1>;
v6 = v5.<io.vertx.core.impl.VertxImpl$1: io.vertx.core.impl.VertxImpl this$0>;
v7 = v6.<io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics metrics>;
if v7 == null goto label2;
v8 = v0.<io.vertx.core.impl.VertxImpl$1$1: io.vertx.core.impl.VertxImpl$1 this$1>;
v9 = v8.<io.vertx.core.impl.VertxImpl$1: io.vertx.core.impl.VertxImpl this$0>;
v10 = v9.<io.vertx.core.impl.VertxImpl: io.vertx.core.spi.metrics.VertxMetrics metrics>;
interfaceinvoke v10.<io.vertx.core.spi.metrics.VertxMetrics: void close()>();
label2:
v11 = v0.<io.vertx.core.impl.VertxImpl$1$1: io.vertx.core.impl.VertxImpl$1 this$1>;
v12 = v11.<io.vertx.core.impl.VertxImpl$1: io.vertx.core.impl.VertxImpl this$0>;
v13 = v12.<io.vertx.core.impl.VertxImpl: io.vertx.core.spi.tracing.VertxTracer tracer>;
if v13 == null goto label3;
v14 = v0.<io.vertx.core.impl.VertxImpl$1$1: io.vertx.core.impl.VertxImpl$1 this$1>;
v15 = v14.<io.vertx.core.impl.VertxImpl$1: io.vertx.core.impl.VertxImpl this$0>;
v16 = v15.<io.vertx.core.impl.VertxImpl: io.vertx.core.spi.tracing.VertxTracer tracer>;
interfaceinvoke v16.<io.vertx.core.spi.tracing.VertxTracer: void close()>();
label3:
v17 = v0.<io.vertx.core.impl.VertxImpl$1$1: io.vertx.core.impl.VertxImpl$1 this$1>;
v18 = v17.<io.vertx.core.impl.VertxImpl$1: io.vertx.core.impl.VertxImpl this$0>;
v19 = v18.<io.vertx.core.impl.VertxImpl: io.vertx.core.impl.btc.BlockedThreadChecker checker>;
virtualinvoke v19.<io.vertx.core.impl.btc.BlockedThreadChecker: void close()>();
v20 = v0.<io.vertx.core.impl.VertxImpl$1$1: io.vertx.core.impl.VertxImpl$1 this$1>;
v21 = v20.<io.vertx.core.impl.VertxImpl$1: io.vertx.core.Handler val$completionHandler>;
if v21 == null goto label4;
v22 = v0.<io.vertx.core.impl.VertxImpl$1$1: io.vertx.core.impl.VertxImpl$1 this$1>;
v23 = v22.<io.vertx.core.impl.VertxImpl$1: io.vertx.core.impl.VertxImpl this$0>;
v24 = v23.<io.vertx.core.impl.VertxImpl: java.util.concurrent.ThreadFactory eventLoopThreadFactory>;
v25 = v0.<io.vertx.core.impl.VertxImpl$1$1: io.vertx.core.impl.VertxImpl$1 this$1>;
v26 = v25.<io.vertx.core.impl.VertxImpl$1: io.vertx.core.Handler val$completionHandler>;
v27 = staticinvoke <io.vertx.core.impl.VertxImpl$1$1$lambda_operationComplete_0__1464: java.lang.Runnable bootstrap$(io.vertx.core.Handler)>(v26);
v28 = interfaceinvoke v24.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(v27);
virtualinvoke v28.<java.lang.Thread: void start()>();
label4:
return;
}
}