class io.vertx.core.impl.future.FutureImpl extends io.vertx.core.impl.future.FutureBase
{
private static final java.lang.Object NULL_VALUE;
private java.lang.Object value;
private io.vertx.core.impl.future.Listener listener;
void <init>()
{
io.vertx.core.impl.future.FutureImpl v0;
v0 := @this: io.vertx.core.impl.future.FutureImpl;
specialinvoke v0.<io.vertx.core.impl.future.FutureBase: void <init>()>();
return;
}
void <init>(io.vertx.core.impl.ContextInternal)
{
io.vertx.core.impl.future.FutureImpl v0;
io.vertx.core.impl.ContextInternal v1;
v0 := @this: io.vertx.core.impl.future.FutureImpl;
v1 := @parameter0: io.vertx.core.impl.ContextInternal;
specialinvoke v0.<io.vertx.core.impl.future.FutureBase: void <init>(io.vertx.core.impl.ContextInternal)>(v1);
return;
}
public synchronized java.lang.Object result()
{
io.vertx.core.impl.future.FutureImpl v0;
java.lang.Object v1, v3, v4, v5;
boolean v2;
v0 := @this: io.vertx.core.impl.future.FutureImpl;
v1 = v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value>;
v2 = v1 instanceof io.vertx.core.impl.future.FutureImpl$CauseHolder;
if v2 == 0 goto label1;
v3 = null;
goto label3;
label1:
v4 = v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value>;
v5 = <io.vertx.core.impl.future.FutureImpl: java.lang.Object NULL_VALUE>;
if v4 != v5 goto label2;
v3 = null;
goto label3;
label2:
v3 = v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value>;
label3:
return v3;
}
public synchronized java.lang.Throwable cause()
{
io.vertx.core.impl.future.FutureImpl v0;
java.lang.Throwable v4;
java.lang.Object v1, v3;
boolean v2;
v0 := @this: io.vertx.core.impl.future.FutureImpl;
v1 = v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value>;
v2 = v1 instanceof io.vertx.core.impl.future.FutureImpl$CauseHolder;
if v2 == 0 goto label1;
v3 = v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value>;
v4 = v3.<io.vertx.core.impl.future.FutureImpl$CauseHolder: java.lang.Throwable cause>;
goto label2;
label1:
v4 = null;
label2:
return v4;
}
public synchronized boolean succeeded()
{
io.vertx.core.impl.future.FutureImpl v0;
java.lang.Object v1, v2;
boolean v3, v4;
v0 := @this: io.vertx.core.impl.future.FutureImpl;
v1 = v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value>;
if v1 == null goto label1;
v2 = v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value>;
v3 = v2 instanceof io.vertx.core.impl.future.FutureImpl$CauseHolder;
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public synchronized boolean failed()
{
io.vertx.core.impl.future.FutureImpl v0;
java.lang.Object v1;
boolean v2;
v0 := @this: io.vertx.core.impl.future.FutureImpl;
v1 = v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value>;
v2 = v1 instanceof io.vertx.core.impl.future.FutureImpl$CauseHolder;
return v2;
}
public synchronized boolean isComplete()
{
io.vertx.core.impl.future.FutureImpl v0;
java.lang.Object v1;
boolean v2;
v0 := @this: io.vertx.core.impl.future.FutureImpl;
v1 = v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value>;
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public io.vertx.core.Future onSuccess(io.vertx.core.Handler)
{
io.vertx.core.impl.future.FutureImpl v0;
io.vertx.core.impl.future.FutureImpl$1 v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.impl.future.FutureImpl;
v1 := @parameter0: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "No null handler accepted");
v2 = new io.vertx.core.impl.future.FutureImpl$1;
specialinvoke v2.<io.vertx.core.impl.future.FutureImpl$1: void <init>(io.vertx.core.impl.future.FutureImpl,io.vertx.core.Handler)>(v0, v1);
virtualinvoke v0.<io.vertx.core.impl.future.FutureImpl: void addListener(io.vertx.core.impl.future.Listener)>(v2);
return v0;
}
public io.vertx.core.Future onFailure(io.vertx.core.Handler)
{
io.vertx.core.impl.future.FutureImpl v0;
io.vertx.core.impl.future.FutureImpl$2 v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.impl.future.FutureImpl;
v1 := @parameter0: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "No null handler accepted");
v2 = new io.vertx.core.impl.future.FutureImpl$2;
specialinvoke v2.<io.vertx.core.impl.future.FutureImpl$2: void <init>(io.vertx.core.impl.future.FutureImpl,io.vertx.core.Handler)>(v0, v1);
virtualinvoke v0.<io.vertx.core.impl.future.FutureImpl: void addListener(io.vertx.core.impl.future.Listener)>(v2);
return v0;
}
public io.vertx.core.Future onComplete(io.vertx.core.Handler)
{
io.vertx.core.impl.future.FutureImpl v0;
io.vertx.core.impl.future.FutureImpl$3 v3;
io.vertx.core.Handler v1;
boolean v2;
v0 := @this: io.vertx.core.impl.future.FutureImpl;
v1 := @parameter0: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "No null handler accepted");
v2 = v1 instanceof io.vertx.core.impl.future.Listener;
if v2 != 0 goto label1;
v3 = new io.vertx.core.impl.future.FutureImpl$3;
specialinvoke v3.<io.vertx.core.impl.future.FutureImpl$3: void <init>(io.vertx.core.impl.future.FutureImpl,io.vertx.core.Handler)>(v0, v1);
v1 = v3;
label1:
virtualinvoke v0.<io.vertx.core.impl.future.FutureImpl: void addListener(io.vertx.core.impl.future.Listener)>(v1);
return v0;
}
public void addListener(io.vertx.core.impl.future.Listener)
{
io.vertx.core.impl.future.FutureImpl v0;
java.lang.Throwable v11, v9;
io.vertx.core.impl.future.Listener v1, v3, v4, v6, v8;
io.vertx.core.impl.future.FutureImpl$ListenerArray v7;
java.lang.Object v12, v2;
boolean v10, v5;
v0 := @this: io.vertx.core.impl.future.FutureImpl;
v1 := @parameter0: io.vertx.core.impl.future.Listener;
entermonitor v0;
label01:
v2 = v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value>;
if v2 != null goto label07;
v3 = v0.<io.vertx.core.impl.future.FutureImpl: io.vertx.core.impl.future.Listener listener>;
if v3 != null goto label02;
v0.<io.vertx.core.impl.future.FutureImpl: io.vertx.core.impl.future.Listener listener> = v1;
goto label05;
label02:
v4 = v0.<io.vertx.core.impl.future.FutureImpl: io.vertx.core.impl.future.Listener listener>;
v5 = v4 instanceof io.vertx.core.impl.future.FutureImpl$ListenerArray;
if v5 == 0 goto label03;
v6 = v0.<io.vertx.core.impl.future.FutureImpl: io.vertx.core.impl.future.Listener listener>;
goto label04;
label03:
v7 = new io.vertx.core.impl.future.FutureImpl$ListenerArray;
specialinvoke v7.<io.vertx.core.impl.future.FutureImpl$ListenerArray: void <init>()>();
v6 = v7;
v8 = v0.<io.vertx.core.impl.future.FutureImpl: io.vertx.core.impl.future.Listener listener>;
virtualinvoke v7.<io.vertx.core.impl.future.FutureImpl$ListenerArray: boolean add(java.lang.Object)>(v8);
v0.<io.vertx.core.impl.future.FutureImpl: io.vertx.core.impl.future.Listener listener> = v7;
label04:
virtualinvoke v6.<io.vertx.core.impl.future.FutureImpl$ListenerArray: boolean add(java.lang.Object)>(v1);
label05:
exitmonitor v0;
label06:
return;
label07:
exitmonitor v0;
label08:
goto label10;
label09:
v9 := @caughtexception;
exitmonitor v0;
throw v9;
label10:
v10 = v2 instanceof io.vertx.core.impl.future.FutureImpl$CauseHolder;
if v10 == 0 goto label11;
v11 = v2.<io.vertx.core.impl.future.FutureImpl$CauseHolder: java.lang.Throwable cause>;
virtualinvoke v0.<io.vertx.core.impl.future.FutureImpl: void emitFailure(java.lang.Throwable,io.vertx.core.impl.future.Listener)>(v11, v1);
goto label13;
label11:
v12 = <io.vertx.core.impl.future.FutureImpl: java.lang.Object NULL_VALUE>;
if v2 != v12 goto label12;
v2 = null;
label12:
virtualinvoke v0.<io.vertx.core.impl.future.FutureImpl: void emitSuccess(java.lang.Object,io.vertx.core.impl.future.Listener)>(v2, v1);
label13:
return;
catch java.lang.Throwable from label01 to label06 with label09;
catch java.lang.Throwable from label07 to label08 with label09;
}
public boolean tryComplete(java.lang.Object)
{
io.vertx.core.impl.future.FutureImpl v0;
java.lang.Throwable v5;
java.lang.Object v1, v2, v3;
io.vertx.core.impl.future.Listener v4;
v0 := @this: io.vertx.core.impl.future.FutureImpl;
v1 := @parameter0: java.lang.Object;
entermonitor v0;
label1:
v2 = v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value>;
if v2 == null goto label3;
exitmonitor v0;
label2:
return 0;
label3:
if v1 != null goto label4;
v3 = <io.vertx.core.impl.future.FutureImpl: java.lang.Object NULL_VALUE>;
goto label5;
label4:
v3 = v1;
label5:
v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value> = v3;
v4 = v0.<io.vertx.core.impl.future.FutureImpl: io.vertx.core.impl.future.Listener listener>;
v0.<io.vertx.core.impl.future.FutureImpl: io.vertx.core.impl.future.Listener listener> = null;
exitmonitor v0;
label6:
goto label8;
label7:
v5 := @caughtexception;
exitmonitor v0;
throw v5;
label8:
if v4 == null goto label9;
virtualinvoke v0.<io.vertx.core.impl.future.FutureImpl: void emitSuccess(java.lang.Object,io.vertx.core.impl.future.Listener)>(v1, v4);
label9:
return 1;
catch java.lang.Throwable from label1 to label2 with label7;
catch java.lang.Throwable from label3 to label6 with label7;
}
public boolean tryFail(java.lang.Throwable)
{
io.vertx.core.impl.future.FutureImpl v0;
java.lang.Throwable v1, v6;
io.vertx.core.impl.NoStackTraceThrowable v2;
io.vertx.core.impl.future.FutureImpl$CauseHolder v4;
java.lang.Object v3;
io.vertx.core.impl.future.Listener v5;
v0 := @this: io.vertx.core.impl.future.FutureImpl;
v1 := @parameter0: java.lang.Throwable;
if v1 != null goto label1;
v2 = new io.vertx.core.impl.NoStackTraceThrowable;
specialinvoke v2.<io.vertx.core.impl.NoStackTraceThrowable: void <init>(java.lang.String)>(null);
v1 = v2;
label1:
entermonitor v0;
label2:
v3 = v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value>;
if v3 == null goto label4;
exitmonitor v0;
label3:
return 0;
label4:
v4 = new io.vertx.core.impl.future.FutureImpl$CauseHolder;
specialinvoke v4.<io.vertx.core.impl.future.FutureImpl$CauseHolder: void <init>(java.lang.Throwable)>(v1);
v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value> = v4;
v5 = v0.<io.vertx.core.impl.future.FutureImpl: io.vertx.core.impl.future.Listener listener>;
v0.<io.vertx.core.impl.future.FutureImpl: io.vertx.core.impl.future.Listener listener> = null;
exitmonitor v0;
label5:
goto label7;
label6:
v6 := @caughtexception;
exitmonitor v0;
throw v6;
label7:
if v5 == null goto label8;
virtualinvoke v0.<io.vertx.core.impl.future.FutureImpl: void emitFailure(java.lang.Throwable,io.vertx.core.impl.future.Listener)>(v1, v5);
label8:
return 1;
catch java.lang.Throwable from label2 to label3 with label6;
catch java.lang.Throwable from label4 to label5 with label6;
}
public java.lang.String toString()
{
io.vertx.core.impl.future.FutureImpl v0;
java.lang.Throwable v13, v4;
java.lang.Object v1, v11, v3, v7, v8, v9;
java.lang.StringBuilder v10;
java.lang.String v12, v5, v6;
boolean v2;
v0 := @this: io.vertx.core.impl.future.FutureImpl;
entermonitor v0;
label1:
v1 = v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value>;
v2 = v1 instanceof io.vertx.core.impl.future.FutureImpl$CauseHolder;
if v2 == 0 goto label3;
v3 = v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value>;
v4 = v3.<io.vertx.core.impl.future.FutureImpl$CauseHolder: java.lang.Throwable cause>;
v5 = virtualinvoke v4.<java.lang.Throwable: java.lang.String getMessage()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Future{cause=\u0001}");
exitmonitor v0;
label2:
return v6;
label3:
v7 = v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value>;
if v7 == null goto label7;
v8 = v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value>;
v9 = <io.vertx.core.impl.future.FutureImpl: java.lang.Object NULL_VALUE>;
if v8 != v9 goto label5;
exitmonitor v0;
label4:
return "Future{result=null}";
label5:
v10 = new java.lang.StringBuilder;
specialinvoke v10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Future{result=");
v11 = v0.<io.vertx.core.impl.future.FutureImpl: java.lang.Object value>;
virtualinvoke v0.<io.vertx.core.impl.future.FutureImpl: void formatValue(java.lang.Object,java.lang.StringBuilder)>(v11, v10);
virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");
v12 = virtualinvoke v10.<java.lang.StringBuilder: java.lang.String toString()>();
exitmonitor v0;
label6:
return v12;
label7:
exitmonitor v0;
label8:
return "Future{unresolved}";
label9:
v13 := @caughtexception;
exitmonitor v0;
throw v13;
catch java.lang.Throwable from label1 to label2 with label9;
catch java.lang.Throwable from label3 to label4 with label9;
catch java.lang.Throwable from label5 to label6 with label9;
catch java.lang.Throwable from label7 to label8 with label9;
}
protected void formatValue(java.lang.Object, java.lang.StringBuilder)
{
io.vertx.core.impl.future.FutureImpl v0;
java.lang.Object v1;
java.lang.StringBuilder v2;
v0 := @this: io.vertx.core.impl.future.FutureImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.StringBuilder;
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v1);
return;
}
static void <clinit>()
{
java.lang.Object v0;
v0 = new java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
<io.vertx.core.impl.future.FutureImpl: java.lang.Object NULL_VALUE> = v0;
return;
}
}