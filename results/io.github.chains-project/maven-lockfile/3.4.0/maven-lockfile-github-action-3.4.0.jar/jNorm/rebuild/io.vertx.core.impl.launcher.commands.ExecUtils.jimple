public class io.vertx.core.impl.launcher.commands.ExecUtils extends java.lang.Object
{
private static final java.lang.String SINGLE_QUOTE;
private static final java.lang.String DOUBLE_QUOTE;
public static final int VERTX_INITIALIZATION_EXIT_CODE;
public static final int VERTX_DEPLOYMENT_EXIT_CODE;
public static final int PROCESS_ERROR_EXIT_CODE;
public static final int SYSTEM_CONFIGURATION_EXIT_CODE;
private static java.lang.String osName;
public void <init>()
{
io.vertx.core.impl.launcher.commands.ExecUtils v0;
v0 := @this: io.vertx.core.impl.launcher.commands.ExecUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.String quoteArgument(java.lang.String)
{
int v6, v7;
java.lang.String v0, v1, v14, v17, v21, v27;
boolean v10, v12, v2, v22, v23, v3, v4, v5, v9;
java.lang.IllegalArgumentException v11;
java.lang.StringBuilder v13, v15, v16, v18, v19, v20, v24, v25, v26, v8;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: java.lang.String trim()>();
label1:
v2 = virtualinvoke v1.<java.lang.String: boolean startsWith(java.lang.String)>("\'");
if v2 == 0 goto label2;
v3 = virtualinvoke v1.<java.lang.String: boolean endsWith(java.lang.String)>("\'");
if v3 != 0 goto label3;
label2:
v4 = virtualinvoke v1.<java.lang.String: boolean startsWith(java.lang.String)>("\"");
if v4 == 0 goto label4;
v5 = virtualinvoke v1.<java.lang.String: boolean endsWith(java.lang.String)>("\"");
if v5 == 0 goto label4;
label3:
v6 = virtualinvoke v1.<java.lang.String: int length()>();
v7 = v6 - 1;
v1 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(1, v7);
goto label1;
label4:
v8 = new java.lang.StringBuilder;
specialinvoke v8.<java.lang.StringBuilder: void <init>()>();
v9 = virtualinvoke v1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\"");
if v9 == 0 goto label7;
v10 = virtualinvoke v1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'");
if v10 == 0 goto label5;
v11 = new java.lang.IllegalArgumentException;
specialinvoke v11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t handle single and double quotes in same argument");
throw v11;
label5:
v12 = staticinvoke <io.vertx.core.impl.Utils: boolean isWindows()>();
if v12 == 0 goto label6;
v13 = virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
v14 = virtualinvoke v1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\"", "\\\"");
v15 = virtualinvoke v13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v14);
v16 = virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
v17 = virtualinvoke v16.<java.lang.StringBuilder: java.lang.String toString()>();
return v17;
label6:
v18 = virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
v19 = virtualinvoke v18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v1);
v20 = virtualinvoke v19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
v21 = virtualinvoke v20.<java.lang.StringBuilder: java.lang.String toString()>();
return v21;
label7:
v22 = virtualinvoke v1.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'");
if v22 != 0 goto label8;
v23 = virtualinvoke v1.<java.lang.String: boolean contains(java.lang.CharSequence)>(" ");
if v23 == 0 goto label9;
label8:
v24 = virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
v25 = virtualinvoke v24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v1);
v26 = virtualinvoke v25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
v27 = virtualinvoke v26.<java.lang.StringBuilder: java.lang.String toString()>();
return v27;
label9:
return v1;
}
public static void addArgument(java.util.List, java.lang.String)
{
java.util.List v0;
java.lang.String v1, v2;
v0 := @parameter0: java.util.List;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: java.lang.String quoteArgument(java.lang.String)>(v1);
interfaceinvoke v0.<java.util.List: boolean add(java.lang.Object)>(v2);
return;
}
public static boolean isWindows()
{
java.lang.String v0;
boolean v1;
v0 = <io.vertx.core.impl.launcher.commands.ExecUtils: java.lang.String osName>;
v1 = virtualinvoke v0.<java.lang.String: boolean contains(java.lang.CharSequence)>("windows");
return v1;
}
public static boolean isLinux()
{
java.lang.String v0;
boolean v1;
v0 = <io.vertx.core.impl.launcher.commands.ExecUtils: java.lang.String osName>;
v1 = virtualinvoke v0.<java.lang.String: boolean contains(java.lang.CharSequence)>("nux");
return v1;
}
public static void exit(int)
{
int v0;
v0 := @parameter0: int;
staticinvoke <java.lang.System: void exit(int)>(v0);
return;
}
public static void exitBecauseOfVertxInitializationIssue()
{
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void exit(int)>(11);
return;
}
public static void exitBecauseOfVertxDeploymentIssue()
{
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void exit(int)>(15);
return;
}
public static void exitBecauseOfProcessIssue()
{
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void exit(int)>(12);
return;
}
public static void exitBecauseOfSystemConfigurationIssue()
{
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void exit(int)>(14);
return;
}
static void <clinit>()
{
java.lang.String v0, v1;
v0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");
v1 = virtualinvoke v0.<java.lang.String: java.lang.String toLowerCase()>();
<io.vertx.core.impl.launcher.commands.ExecUtils: java.lang.String osName> = v1;
return;
}
}