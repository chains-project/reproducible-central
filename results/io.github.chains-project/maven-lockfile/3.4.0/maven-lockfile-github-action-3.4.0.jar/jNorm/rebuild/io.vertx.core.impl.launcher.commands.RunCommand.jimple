public class io.vertx.core.impl.launcher.commands.RunCommand extends io.vertx.core.impl.launcher.commands.BareCommand implements io.vertx.core.Closeable
{
protected io.vertx.core.DeploymentOptions deploymentOptions;
protected boolean cluster;
protected boolean ha;
protected int instances;
protected java.lang.String config;
protected boolean worker;
protected java.lang.String mainVerticle;
protected java.util.List redeploy;
protected java.lang.String vertxApplicationBackgroundId;
protected java.lang.String onRedeployCommand;
protected io.vertx.core.impl.launcher.commands.Watcher watcher;
private long redeployScanPeriod;
private long redeployGracePeriod;
private long redeployTerminationPeriod;
public void <init>()
{
io.vertx.core.impl.launcher.commands.RunCommand v0;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
specialinvoke v0.<io.vertx.core.impl.launcher.commands.BareCommand: void <init>()>();
return;
}
public void setHighAvailability(boolean)
{
io.vertx.core.impl.launcher.commands.RunCommand v0;
boolean v1;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: boolean;
v0.<io.vertx.core.impl.launcher.commands.RunCommand: boolean ha> = v1;
return;
}
public void setCluster(boolean)
{
io.vertx.core.impl.launcher.commands.RunCommand v0;
boolean v1;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: boolean;
v0.<io.vertx.core.impl.launcher.commands.RunCommand: boolean cluster> = v1;
return;
}
public void setWorker(boolean)
{
io.vertx.core.impl.launcher.commands.RunCommand v0;
boolean v1;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: boolean;
v0.<io.vertx.core.impl.launcher.commands.RunCommand: boolean worker> = v1;
return;
}
public void setInstances(int)
{
int v1;
io.vertx.core.impl.launcher.commands.RunCommand v0;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: int;
v0.<io.vertx.core.impl.launcher.commands.RunCommand: int instances> = v1;
return;
}
public void setConfig(java.lang.String)
{
io.vertx.core.impl.launcher.commands.RunCommand v0;
java.lang.String v1, v2, v3, v4;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: java.lang.String;
if v1 == null goto label1;
v2 = virtualinvoke v1.<java.lang.String: java.lang.String trim()>();
v3 = virtualinvoke v2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("^\"|\"$", "");
v4 = virtualinvoke v3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("^\'|\'$", "");
v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String config> = v4;
goto label2;
label1:
v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String config> = null;
label2:
return;
}
public void setMainVerticle(java.lang.String)
{
io.vertx.core.impl.launcher.commands.RunCommand v0;
java.lang.String v1;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String mainVerticle> = v1;
return;
}
public void setRedeploy(java.util.List)
{
io.vertx.core.impl.launcher.commands.RunCommand v0;
java.util.List v1;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: java.util.List;
v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.util.List redeploy> = v1;
return;
}
public void setOnRedeployCommandOld(java.lang.String)
{
java.io.PrintStream v2;
io.vertx.core.impl.launcher.commands.RunCommand v0;
java.lang.String v1;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.io.PrintStream out>;
virtualinvoke v2.<java.io.PrintStream: void println(java.lang.String)>("[WARNING] the \'onRedeploy\' option is deprecated, and will be removed in vert.x 3.3. Use \'on-redeploy\' instead.");
virtualinvoke v0.<io.vertx.core.impl.launcher.commands.RunCommand: void setOnRedeployCommand(java.lang.String)>(v1);
return;
}
public void setOnRedeployCommand(java.lang.String)
{
io.vertx.core.impl.launcher.commands.RunCommand v0;
java.lang.String v1;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String onRedeployCommand> = v1;
return;
}
public void setRedeployScanPeriod(long)
{
io.vertx.core.impl.launcher.commands.RunCommand v0;
long v1;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: long;
v0.<io.vertx.core.impl.launcher.commands.RunCommand: long redeployScanPeriod> = v1;
return;
}
public void setRedeployGracePeriod(long)
{
io.vertx.core.impl.launcher.commands.RunCommand v0;
long v1;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: long;
v0.<io.vertx.core.impl.launcher.commands.RunCommand: long redeployGracePeriod> = v1;
return;
}
public void setRedeployStopWaitingTime(long)
{
io.vertx.core.impl.launcher.commands.RunCommand v0;
long v1;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: long;
v0.<io.vertx.core.impl.launcher.commands.RunCommand: long redeployTerminationPeriod> = v1;
return;
}
public void setUp(io.vertx.core.spi.launcher.ExecutionContext) throws io.vertx.core.cli.CLIException
{
io.vertx.core.cli.CommandLine v3;
io.vertx.core.cli.Option v11, v15, v19, v24, v27, v7;
boolean v12, v16, v20, v28, v29, v30, v4, v8;
io.vertx.core.impl.launcher.commands.RunCommand v0;
io.vertx.core.cli.CLI v10, v14, v18, v23, v26, v6;
io.vertx.core.spi.launcher.ExecutionContext v1, v13, v17, v2, v22, v25, v5, v9;
io.vertx.core.cli.CLIException v21, v31;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: io.vertx.core.spi.launcher.ExecutionContext;
specialinvoke v0.<io.vertx.core.impl.launcher.commands.BareCommand: void setUp(io.vertx.core.spi.launcher.ExecutionContext)>(v1);
v2 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.spi.launcher.ExecutionContext executionContext>;
v3 = virtualinvoke v2.<io.vertx.core.spi.launcher.ExecutionContext: io.vertx.core.cli.CommandLine commandLine()>();
v4 = virtualinvoke v0.<io.vertx.core.impl.launcher.commands.RunCommand: boolean isClustered()>();
if v4 != 0 goto label2;
v5 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.spi.launcher.ExecutionContext executionContext>;
v6 = virtualinvoke v5.<io.vertx.core.spi.launcher.ExecutionContext: io.vertx.core.cli.CLI cli()>();
v7 = interfaceinvoke v6.<io.vertx.core.cli.CLI: io.vertx.core.cli.Option getOption(java.lang.String)>("cluster-host");
v8 = interfaceinvoke v3.<io.vertx.core.cli.CommandLine: boolean isOptionAssigned(io.vertx.core.cli.Option)>(v7);
if v8 != 0 goto label1;
v9 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.spi.launcher.ExecutionContext executionContext>;
v10 = virtualinvoke v9.<io.vertx.core.spi.launcher.ExecutionContext: io.vertx.core.cli.CLI cli()>();
v11 = interfaceinvoke v10.<io.vertx.core.cli.CLI: io.vertx.core.cli.Option getOption(java.lang.String)>("cluster-port");
v12 = interfaceinvoke v3.<io.vertx.core.cli.CommandLine: boolean isOptionAssigned(io.vertx.core.cli.Option)>(v11);
if v12 != 0 goto label1;
v13 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.spi.launcher.ExecutionContext executionContext>;
v14 = virtualinvoke v13.<io.vertx.core.spi.launcher.ExecutionContext: io.vertx.core.cli.CLI cli()>();
v15 = interfaceinvoke v14.<io.vertx.core.cli.CLI: io.vertx.core.cli.Option getOption(java.lang.String)>("cluster-public-host");
v16 = interfaceinvoke v3.<io.vertx.core.cli.CommandLine: boolean isOptionAssigned(io.vertx.core.cli.Option)>(v15);
if v16 != 0 goto label1;
v17 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.spi.launcher.ExecutionContext executionContext>;
v18 = virtualinvoke v17.<io.vertx.core.spi.launcher.ExecutionContext: io.vertx.core.cli.CLI cli()>();
v19 = interfaceinvoke v18.<io.vertx.core.cli.CLI: io.vertx.core.cli.Option getOption(java.lang.String)>("cluster-public-port");
v20 = interfaceinvoke v3.<io.vertx.core.cli.CommandLine: boolean isOptionAssigned(io.vertx.core.cli.Option)>(v19);
if v20 == 0 goto label2;
label1:
v21 = new io.vertx.core.cli.CLIException;
specialinvoke v21.<io.vertx.core.cli.CLIException: void <init>(java.lang.String)>("The -cluster-xxx options require -cluster to be enabled");
throw v21;
label2:
v22 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.spi.launcher.ExecutionContext executionContext>;
v23 = virtualinvoke v22.<io.vertx.core.spi.launcher.ExecutionContext: io.vertx.core.cli.CLI cli()>();
v24 = interfaceinvoke v23.<io.vertx.core.cli.CLI: io.vertx.core.cli.Option getOption(java.lang.String)>("hagroup");
v25 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.spi.launcher.ExecutionContext executionContext>;
v26 = virtualinvoke v25.<io.vertx.core.spi.launcher.ExecutionContext: io.vertx.core.cli.CLI cli()>();
v27 = interfaceinvoke v26.<io.vertx.core.cli.CLI: io.vertx.core.cli.Option getOption(java.lang.String)>("quorum");
v28 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: boolean ha>;
if v28 != 0 goto label4;
v29 = interfaceinvoke v3.<io.vertx.core.cli.CommandLine: boolean isOptionAssigned(io.vertx.core.cli.Option)>(v24);
if v29 != 0 goto label3;
v30 = interfaceinvoke v3.<io.vertx.core.cli.CommandLine: boolean isOptionAssigned(io.vertx.core.cli.Option)>(v27);
if v30 == 0 goto label4;
label3:
v31 = new io.vertx.core.cli.CLIException;
specialinvoke v31.<io.vertx.core.cli.CLIException: void <init>(java.lang.String)>("The option -hagroup and -quorum requires -ha to be enabled");
throw v31;
label4:
return;
}
public boolean isClustered()
{
io.vertx.core.impl.launcher.commands.RunCommand v0;
boolean v1, v2, v3;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: boolean cluster>;
if v1 != 0 goto label1;
v2 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: boolean ha>;
if v2 == 0 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
public boolean getHA()
{
io.vertx.core.impl.launcher.commands.RunCommand v0;
boolean v1;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: boolean ha>;
return v1;
}
public void run()
{
java.lang.Runnable v6;
int v19;
io.vertx.core.json.JsonObject v4, v5;
boolean v15, v17, v3, v9;
io.vertx.core.Vertx v10, v7, v8;
io.vertx.core.impl.launcher.commands.RunCommand v0;
java.util.List v1, v2;
io.vertx.core.DeploymentOptions v11, v12, v13, v14, v16, v18, v20;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.util.List redeploy>;
if v1 == null goto label1;
v2 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.util.List redeploy>;
v3 = interfaceinvoke v2.<java.util.List: boolean isEmpty()>();
if v3 == 0 goto label5;
label1:
v4 = virtualinvoke v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.json.JsonObject getConfiguration()>();
if v4 != null goto label2;
v5 = new io.vertx.core.json.JsonObject;
specialinvoke v5.<io.vertx.core.json.JsonObject: void <init>()>();
v4 = v5;
label2:
virtualinvoke v0.<io.vertx.core.impl.launcher.commands.RunCommand: void afterConfigParsed(io.vertx.core.json.JsonObject)>(v4);
v6 = staticinvoke <io.vertx.core.impl.launcher.commands.RunCommand$afterStoppingVertx__1582: java.lang.Runnable bootstrap$(io.vertx.core.impl.launcher.commands.RunCommand)>(v0);
specialinvoke v0.<io.vertx.core.impl.launcher.commands.BareCommand: void run(java.lang.Runnable)>(v6);
v7 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.Vertx vertx>;
if v7 != null goto label3;
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void exitBecauseOfVertxInitializationIssue()>();
label3:
v8 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.Vertx vertx>;
v9 = v8 instanceof io.vertx.core.impl.VertxInternal;
if v9 == 0 goto label4;
v10 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.Vertx vertx>;
interfaceinvoke v10.<io.vertx.core.impl.VertxInternal: void addCloseHook(io.vertx.core.Closeable)>(v0);
label4:
v11 = new io.vertx.core.DeploymentOptions;
specialinvoke v11.<io.vertx.core.DeploymentOptions: void <init>()>();
v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.DeploymentOptions deploymentOptions> = v11;
v12 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.DeploymentOptions deploymentOptions>;
staticinvoke <io.vertx.core.impl.launcher.commands.RunCommand: void configureFromSystemProperties(java.lang.Object,java.lang.String)>(v12, "vertx.deployment.options.");
v13 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.DeploymentOptions deploymentOptions>;
v14 = virtualinvoke v13.<io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setConfig(io.vertx.core.json.JsonObject)>(v4);
v15 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: boolean worker>;
v16 = virtualinvoke v14.<io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setWorker(boolean)>(v15);
v17 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: boolean ha>;
v18 = virtualinvoke v16.<io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setHa(boolean)>(v17);
v19 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: int instances>;
virtualinvoke v18.<io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setInstances(int)>(v19);
v20 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.DeploymentOptions deploymentOptions>;
virtualinvoke v0.<io.vertx.core.impl.launcher.commands.RunCommand: void beforeDeployingVerticle(io.vertx.core.DeploymentOptions)>(v20);
virtualinvoke v0.<io.vertx.core.impl.launcher.commands.RunCommand: void deploy()>();
goto label6;
label5:
virtualinvoke v0.<io.vertx.core.impl.launcher.commands.RunCommand: void initializeRedeployment()>();
label6:
return;
}
protected synchronized void initializeRedeployment()
{
java.lang.IllegalStateException v2;
long v12, v13;
io.vertx.core.impl.launcher.commands.RunCommand$1 v15;
java.lang.String v11, v4, v5;
java.lang.Runtime v14;
java.util.UUID v3;
java.io.File v7;
io.vertx.core.impl.launcher.commands.RunCommand v0;
java.util.List v8;
io.vertx.core.impl.launcher.commands.Watcher v1, v16, v6;
io.vertx.core.Handler v10, v9;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.impl.launcher.commands.Watcher watcher>;
if v1 == null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Redeployment already started ? The watcher already exists");
throw v2;
label1:
v3 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();
v4 = virtualinvoke v3.<java.util.UUID: java.lang.String toString()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001-redeploy");
v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String vertxApplicationBackgroundId> = v5;
v6 = new io.vertx.core.impl.launcher.commands.Watcher;
v7 = virtualinvoke v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.io.File getCwd()>();
v8 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.util.List redeploy>;
v9 = staticinvoke <io.vertx.core.impl.launcher.commands.RunCommand$startAsBackgroundApplication__1583: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.launcher.commands.RunCommand)>(v0);
v10 = staticinvoke <io.vertx.core.impl.launcher.commands.RunCommand$stopBackgroundApplication__1584: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.launcher.commands.RunCommand)>(v0);
v11 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String onRedeployCommand>;
v12 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: long redeployGracePeriod>;
v13 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: long redeployScanPeriod>;
specialinvoke v6.<io.vertx.core.impl.launcher.commands.Watcher: void <init>(java.io.File,java.util.List,io.vertx.core.Handler,io.vertx.core.Handler,java.lang.String,long,long)>(v7, v8, v9, v10, v11, v12, v13);
v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.impl.launcher.commands.Watcher watcher> = v6;
v14 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
v15 = new io.vertx.core.impl.launcher.commands.RunCommand$1;
specialinvoke v15.<io.vertx.core.impl.launcher.commands.RunCommand$1: void <init>(io.vertx.core.impl.launcher.commands.RunCommand)>(v0);
virtualinvoke v14.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>(v15);
v16 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.impl.launcher.commands.Watcher watcher>;
virtualinvoke v16.<io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.impl.launcher.commands.Watcher watch()>();
return;
}
protected synchronized void shutdownRedeployment()
{
io.vertx.core.impl.launcher.commands.RunCommand v0;
io.vertx.core.impl.launcher.commands.Watcher v1, v2;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.impl.launcher.commands.Watcher watcher>;
if v1 == null goto label1;
v2 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.impl.launcher.commands.Watcher watcher>;
virtualinvoke v2.<io.vertx.core.impl.launcher.commands.Watcher: void close()>();
v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.impl.launcher.commands.Watcher watcher> = null;
label1:
return;
}
protected synchronized void stopBackgroundApplication(io.vertx.core.Handler)
{
io.vertx.core.spi.launcher.ExecutionContext v2;
java.lang.String[] v3;
long v5, v7;
io.vertx.core.impl.launcher.commands.RunCommand v0;
byte v6;
java.lang.InterruptedException v8;
java.lang.Thread v9;
java.lang.String v4;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.spi.launcher.ExecutionContext executionContext>;
v3 = newarray (java.lang.String)[2];
v4 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String vertxApplicationBackgroundId>;
v3[0] = v4;
v3[1] = "--redeploy";
virtualinvoke v2.<io.vertx.core.spi.launcher.ExecutionContext: void execute(java.lang.String,java.lang.String[])>("stop", v3);
v5 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: long redeployTerminationPeriod>;
v6 = v5 cmp 0L;
if v6 <= 0 goto label4;
label1:
v7 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: long redeployTerminationPeriod>;
staticinvoke <java.lang.Thread: void sleep(long)>(v7);
label2:
goto label4;
label3:
v8 := @caughtexception;
v9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v9.<java.lang.Thread: void interrupt()>();
label4:
if v1 == null goto label5;
interfaceinvoke v1.<io.vertx.core.Handler: void handle(java.lang.Object)>(null);
label5:
return;
catch java.lang.InterruptedException from label1 to label2 with label3;
}
protected void startAsBackgroundApplication(io.vertx.core.Handler)
{
io.vertx.core.cli.CommandLine v6;
java.util.stream.Collector v38, v54;
boolean v22, v25, v34, v48, v8;
io.vertx.core.impl.launcher.commands.RunCommand v0;
java.util.List v32, v33, v35, v49, v50, v7;
java.util.stream.Stream v36, v51, v53;
io.vertx.core.spi.launcher.ExecutionContext v5, v56;
java.lang.Object[] v58;
java.lang.String[] v57;
java.util.function.Function v52;
java.util.ArrayList v2;
int v12, v13, v18, v19, v20, v28, v29, v30, v45, v46;
java.lang.String v10, v11, v14, v15, v16, v17, v21, v23, v24, v26, v27, v3, v31, v37, v4, v40, v41, v42, v43, v44, v47, v9;
java.lang.Object v39, v55;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: io.vertx.core.Handler;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>("run");
v3 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String vertxApplicationBackgroundId>;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("--vertx-id=\u0001");
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v4);
v5 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.spi.launcher.ExecutionContext executionContext>;
v6 = virtualinvoke v5.<io.vertx.core.spi.launcher.ExecutionContext: io.vertx.core.cli.CommandLine commandLine()>();
v7 = interfaceinvoke v6.<io.vertx.core.cli.CommandLine: java.util.List allArguments()>();
interfaceinvoke v2.<java.util.List: boolean addAll(java.util.Collection)>(v7);
v8 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: boolean cluster>;
if v8 == 0 goto label01;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>("--cluster");
label01:
v9 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String clusterHost>;
if v9 == null goto label02;
v10 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String clusterHost>;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("--cluster-host=\u0001");
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v11);
label02:
v12 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: int clusterPort>;
if v12 == 0 goto label03;
v13 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: int clusterPort>;
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("--cluster-port=\u0001");
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v14);
label03:
v15 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String clusterPublicHost>;
if v15 == null goto label04;
v16 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String clusterPublicHost>;
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("--cluster-public-host=\u0001");
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v17);
label04:
v18 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: int clusterPublicPort>;
v19 = (int) -1;
if v18 == v19 goto label05;
v20 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: int clusterPublicPort>;
v21 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v20) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("--cluster-public-port=\u0001");
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v21);
label05:
v22 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: boolean ha>;
if v22 == 0 goto label06;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>("--ha");
label06:
v23 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String haGroup>;
if v23 == null goto label07;
v24 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String haGroup>;
v25 = virtualinvoke v24.<java.lang.String: boolean equals(java.lang.Object)>("__DEFAULT__");
if v25 != 0 goto label07;
v26 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String haGroup>;
v27 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v26) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("--hagroup=\u0001");
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v27);
label07:
v28 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: int quorum>;
v29 = (int) -1;
if v28 == v29 goto label08;
v30 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: int quorum>;
v31 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v30) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("--quorum=\u0001");
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v31);
label08:
v32 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.util.List classpath>;
if v32 == null goto label09;
v33 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.util.List classpath>;
v34 = interfaceinvoke v33.<java.util.List: boolean isEmpty()>();
if v34 != 0 goto label09;
v35 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.util.List classpath>;
v36 = interfaceinvoke v35.<java.util.List: java.util.stream.Stream stream()>();
v37 = <java.io.File: java.lang.String pathSeparator>;
v38 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(v37);
v39 = interfaceinvoke v36.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v38);
v40 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v39) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("--classpath=\u0001");
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v40);
label09:
v41 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String vertxOptions>;
if v41 == null goto label10;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>("--options");
v42 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String vertxOptions>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v42);
label10:
v43 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String config>;
if v43 == null goto label11;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>("--conf");
v44 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String config>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v44);
label11:
v45 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: int instances>;
if v45 == 1 goto label12;
v46 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: int instances>;
v47 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v46) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("--instances=\u0001");
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v47);
label12:
v48 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: boolean worker>;
if v48 == 0 goto label13;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>("--worker");
label13:
v49 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.util.List systemProperties>;
if v49 == null goto label14;
v50 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.util.List systemProperties>;
v51 = interfaceinvoke v50.<java.util.List: java.util.stream.Stream stream()>();
v52 = staticinvoke <io.vertx.core.impl.launcher.commands.RunCommand$lambda_startAsBackgroundApplication_0__1585: java.util.function.Function bootstrap$()>();
v53 = interfaceinvoke v51.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v52);
v54 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v55 = interfaceinvoke v53.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v54);
interfaceinvoke v2.<java.util.List: boolean addAll(java.util.Collection)>(v55);
label14:
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>("--redirect-output");
v56 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.spi.launcher.ExecutionContext executionContext>;
v57 = newarray (java.lang.String)[0];
v58 = interfaceinvoke v2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v57);
virtualinvoke v56.<io.vertx.core.spi.launcher.ExecutionContext: void execute(java.lang.String,java.lang.String[])>("start", v58);
if v1 == null goto label15;
interfaceinvoke v1.<io.vertx.core.Handler: void handle(java.lang.Object)>(null);
label15:
return;
}
protected void deploy()
{
io.vertx.core.impl.launcher.commands.RunCommand v0;
io.vertx.core.DeploymentOptions v3;
io.vertx.core.Vertx v2;
java.lang.String v1;
io.vertx.core.Handler v4;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String mainVerticle>;
v2 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.Vertx vertx>;
v3 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.DeploymentOptions deploymentOptions>;
v4 = staticinvoke <io.vertx.core.impl.launcher.commands.RunCommand$lambda_deploy_1__1586: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.launcher.commands.RunCommand)>(v0);
virtualinvoke v0.<io.vertx.core.impl.launcher.commands.RunCommand: void deploy(java.lang.String,io.vertx.core.Vertx,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>(v1, v2, v3, v4);
return;
}
private void handleDeployFailed(java.lang.Throwable)
{
io.vertx.core.spi.launcher.ExecutionContext v2, v5;
java.lang.Throwable v1;
io.vertx.core.Vertx v7;
io.vertx.core.impl.launcher.commands.RunCommand v0;
io.vertx.core.DeploymentOptions v9;
java.lang.Object v3, v6;
java.lang.String v8;
boolean v4;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.spi.launcher.ExecutionContext executionContext>;
v3 = virtualinvoke v2.<io.vertx.core.spi.launcher.ExecutionContext: java.lang.Object main()>();
v4 = v3 instanceof io.vertx.core.impl.launcher.VertxLifecycleHooks;
if v4 == 0 goto label1;
v5 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.spi.launcher.ExecutionContext executionContext>;
v6 = virtualinvoke v5.<io.vertx.core.spi.launcher.ExecutionContext: java.lang.Object main()>();
v7 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.Vertx vertx>;
v8 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String mainVerticle>;
v9 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.DeploymentOptions deploymentOptions>;
interfaceinvoke v6.<io.vertx.core.impl.launcher.VertxLifecycleHooks: void handleDeployFailed(io.vertx.core.Vertx,java.lang.String,io.vertx.core.DeploymentOptions,java.lang.Throwable)>(v7, v8, v9, v1);
goto label2;
label1:
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void exitBecauseOfVertxDeploymentIssue()>();
label2:
return;
}
protected io.vertx.core.json.JsonObject getConfiguration()
{
io.vertx.core.impl.launcher.commands.RunCommand v0;
io.vertx.core.json.JsonObject v2;
java.lang.String v1;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: java.lang.String config>;
v2 = virtualinvoke v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.json.JsonObject getJsonFromFileOrString(java.lang.String,java.lang.String)>(v1, "conf");
return v2;
}
protected void beforeDeployingVerticle(io.vertx.core.DeploymentOptions)
{
io.vertx.core.spi.launcher.ExecutionContext v2;
io.vertx.core.impl.launcher.commands.RunCommand v0;
io.vertx.core.DeploymentOptions v1;
java.lang.Object v3;
boolean v4;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: io.vertx.core.DeploymentOptions;
v2 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.spi.launcher.ExecutionContext executionContext>;
v3 = virtualinvoke v2.<io.vertx.core.spi.launcher.ExecutionContext: java.lang.Object main()>();
v4 = v3 instanceof io.vertx.core.impl.launcher.VertxLifecycleHooks;
if v4 == 0 goto label1;
interfaceinvoke v3.<io.vertx.core.impl.launcher.VertxLifecycleHooks: void beforeDeployingVerticle(io.vertx.core.DeploymentOptions)>(v1);
label1:
return;
}
protected void afterConfigParsed(io.vertx.core.json.JsonObject)
{
io.vertx.core.spi.launcher.ExecutionContext v2;
io.vertx.core.impl.launcher.commands.RunCommand v0;
io.vertx.core.json.JsonObject v1;
java.lang.Object v3;
boolean v4;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: io.vertx.core.json.JsonObject;
v2 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.spi.launcher.ExecutionContext executionContext>;
v3 = virtualinvoke v2.<io.vertx.core.spi.launcher.ExecutionContext: java.lang.Object main()>();
v4 = v3 instanceof io.vertx.core.impl.launcher.VertxLifecycleHooks;
if v4 == 0 goto label1;
interfaceinvoke v3.<io.vertx.core.impl.launcher.VertxLifecycleHooks: void afterConfigParsed(io.vertx.core.json.JsonObject)>(v1);
label1:
return;
}
protected void beforeStoppingVertx(io.vertx.core.Vertx)
{
io.vertx.core.spi.launcher.ExecutionContext v2;
io.vertx.core.impl.launcher.commands.RunCommand v0;
io.vertx.core.Vertx v1;
java.lang.Object v3;
boolean v4;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: io.vertx.core.Vertx;
v2 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.spi.launcher.ExecutionContext executionContext>;
v3 = virtualinvoke v2.<io.vertx.core.spi.launcher.ExecutionContext: java.lang.Object main()>();
v4 = v3 instanceof io.vertx.core.impl.launcher.VertxLifecycleHooks;
if v4 == 0 goto label1;
interfaceinvoke v3.<io.vertx.core.impl.launcher.VertxLifecycleHooks: void beforeStoppingVertx(io.vertx.core.Vertx)>(v1);
label1:
return;
}
protected void afterStoppingVertx()
{
io.vertx.core.spi.launcher.ExecutionContext v1;
io.vertx.core.impl.launcher.commands.RunCommand v0;
java.lang.Object v2;
boolean v3;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.spi.launcher.ExecutionContext executionContext>;
v2 = virtualinvoke v1.<io.vertx.core.spi.launcher.ExecutionContext: java.lang.Object main()>();
v3 = v2 instanceof io.vertx.core.impl.launcher.VertxLifecycleHooks;
if v3 == 0 goto label1;
interfaceinvoke v2.<io.vertx.core.impl.launcher.VertxLifecycleHooks: void afterStoppingVertx()>();
label1:
return;
}
public void close(io.vertx.core.Promise)
{
io.vertx.core.impl.launcher.commands.RunCommand v0;
io.vertx.core.Promise v1;
io.vertx.core.Vertx v2;
java.lang.Exception v3;
v0 := @this: io.vertx.core.impl.launcher.commands.RunCommand;
v1 := @parameter0: io.vertx.core.Promise;
label1:
v2 = v0.<io.vertx.core.impl.launcher.commands.RunCommand: io.vertx.core.Vertx vertx>;
virtualinvoke v0.<io.vertx.core.impl.launcher.commands.RunCommand: void beforeStoppingVertx(io.vertx.core.Vertx)>(v2);
interfaceinvoke v1.<io.vertx.core.Promise: void complete()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
interfaceinvoke v1.<io.vertx.core.Promise: void fail(java.lang.Throwable)>(v3);
label4:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
}