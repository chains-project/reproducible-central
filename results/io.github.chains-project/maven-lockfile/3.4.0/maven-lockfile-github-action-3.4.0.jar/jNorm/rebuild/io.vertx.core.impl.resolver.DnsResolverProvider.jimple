public class io.vertx.core.impl.resolver.DnsResolverProvider extends java.lang.Object implements io.vertx.core.spi.resolver.ResolverProvider
{
private final io.vertx.core.Vertx vertx;
private final java.util.List resolvers;
private io.netty.resolver.AddressResolverGroup resolverGroup;
private final java.util.List serverList;
public java.util.List nameServerAddresses()
{
java.util.List v1;
io.vertx.core.impl.resolver.DnsResolverProvider v0;
v0 := @this: io.vertx.core.impl.resolver.DnsResolverProvider;
v1 = v0.<io.vertx.core.impl.resolver.DnsResolverProvider: java.util.List serverList>;
return v1;
}
public void <init>(io.vertx.core.impl.VertxImpl, io.vertx.core.dns.AddressResolverOptions)
{
io.vertx.core.VertxException v22, v43, v51;
byte[] v19;
io.netty.resolver.dns.DnsServerAddressStreamProvider v33;
io.netty.resolver.dns.DefaultDnsCache v61, v62;
java.lang.Integer v53, v56, v59;
java.net.InetAddress v20;
io.vertx.core.impl.VertxImpl v1;
io.netty.resolver.dns.DnsNameResolverBuilder v63;
io.netty.resolver.HostsFileEntries v41;
long v68;
java.util.ArrayList v3, v5;
io.netty.resolver.dns.DnsServerAddresses v23, v31;
io.netty.channel.ChannelFactory v65, v66;
java.lang.String v13, v15, v34, v35, v44, v45, v49;
java.io.IOException v40, v42, v50;
io.vertx.core.impl.resolver.DnsResolverProvider$1 v64;
io.vertx.core.impl.resolver.DnsResolverProvider$2 v75;
java.net.UnknownHostException v21;
java.io.File v36, v37;
java.io.StringReader v47;
io.vertx.core.impl.resolver.DnsResolverProvider v0;
io.netty.resolver.dns.DnsServerAddressStream v24;
io.vertx.core.dns.AddressResolverOptions v2;
boolean v27, v29, v38, v39, v67, v70, v9;
java.net.InetSocketAddress v18, v26;
java.util.List v17, v28, v30, v32, v4, v6, v71, v72;
io.vertx.core.buffer.Buffer v46, v48;
java.util.HashSet v25;
int v11, v12, v14, v16, v52, v54, v55, v57, v58, v60, v69, v7, v73, v74;
java.util.Iterator v8;
java.lang.Object v10;
v0 := @this: io.vertx.core.impl.resolver.DnsResolverProvider;
v1 := @parameter0: io.vertx.core.impl.VertxImpl;
v2 := @parameter1: io.vertx.core.dns.AddressResolverOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v4 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>(v3);
v0.<io.vertx.core.impl.resolver.DnsResolverProvider: java.util.List resolvers> = v4;
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.core.impl.resolver.DnsResolverProvider: java.util.List serverList> = v5;
v6 = virtualinvoke v2.<io.vertx.core.dns.AddressResolverOptions: java.util.List getServers()>();
if v6 == null goto label06;
v7 = interfaceinvoke v6.<java.util.List: int size()>();
if v7 <= 0 goto label06;
v8 = interfaceinvoke v6.<java.util.List: java.util.Iterator iterator()>();
label01:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label08;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = virtualinvoke v10.<java.lang.String: int indexOf(int)>(58);
v12 = (int) -1;
if v11 == v12 goto label02;
v13 = virtualinvoke v10.<java.lang.String: java.lang.String substring(int,int)>(0, v11);
v14 = v11 + 1;
v15 = virtualinvoke v10.<java.lang.String: java.lang.String substring(int)>(v14);
v16 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v15);
goto label03;
label02:
v13 = v10;
v16 = 53;
label03:
v17 = v0.<io.vertx.core.impl.resolver.DnsResolverProvider: java.util.List serverList>;
v18 = new java.net.InetSocketAddress;
v19 = staticinvoke <io.netty.util.NetUtil: byte[] createByteArrayFromIpAddressString(java.lang.String)>(v13);
v20 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(v19);
specialinvoke v18.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(v20, v16);
interfaceinvoke v17.<java.util.List: boolean add(java.lang.Object)>(v18);
label04:
goto label01;
label05:
v21 := @caughtexception;
v22 = new io.vertx.core.VertxException;
specialinvoke v22.<io.vertx.core.VertxException: void <init>(java.lang.Throwable)>(v21);
throw v22;
label06:
v23 = staticinvoke <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: io.netty.resolver.dns.DnsServerAddresses defaultAddresses()>();
v24 = virtualinvoke v23.<io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddressStream stream()>();
v25 = new java.util.HashSet;
specialinvoke v25.<java.util.HashSet: void <init>()>();
label07:
v26 = interfaceinvoke v24.<io.netty.resolver.dns.DnsServerAddressStream: java.net.InetSocketAddress next()>();
v27 = interfaceinvoke v25.<java.util.Set: boolean contains(java.lang.Object)>(v26);
if v27 != 0 goto label08;
v28 = v0.<io.vertx.core.impl.resolver.DnsResolverProvider: java.util.List serverList>;
interfaceinvoke v28.<java.util.List: boolean add(java.lang.Object)>(v26);
interfaceinvoke v25.<java.util.Set: boolean add(java.lang.Object)>(v26);
goto label07;
label08:
v29 = virtualinvoke v2.<io.vertx.core.dns.AddressResolverOptions: boolean isRotateServers()>();
if v29 == 0 goto label09;
v30 = v0.<io.vertx.core.impl.resolver.DnsResolverProvider: java.util.List serverList>;
v31 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses rotational(java.lang.Iterable)>(v30);
goto label10;
label09:
v32 = v0.<io.vertx.core.impl.resolver.DnsResolverProvider: java.util.List serverList>;
v31 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses sequential(java.lang.Iterable)>(v32);
label10:
v33 = staticinvoke <io.vertx.core.impl.resolver.DnsResolverProvider$lambda_new_0__1541: io.netty.resolver.dns.DnsServerAddressStreamProvider bootstrap$(io.netty.resolver.dns.DnsServerAddresses)>(v31);
v34 = virtualinvoke v2.<io.vertx.core.dns.AddressResolverOptions: java.lang.String getHostsPath()>();
if v34 == null goto label16;
v35 = virtualinvoke v2.<io.vertx.core.dns.AddressResolverOptions: java.lang.String getHostsPath()>();
v36 = virtualinvoke v1.<io.vertx.core.impl.VertxImpl: java.io.File resolveFile(java.lang.String)>(v35);
v37 = virtualinvoke v36.<java.io.File: java.io.File getAbsoluteFile()>();
label11:
v38 = virtualinvoke v37.<java.io.File: boolean exists()>();
if v38 == 0 goto label12;
v39 = virtualinvoke v37.<java.io.File: boolean isFile()>();
if v39 != 0 goto label13;
label12:
v40 = new java.io.IOException;
specialinvoke v40.<java.io.IOException: void <init>()>();
throw v40;
label13:
v41 = staticinvoke <io.netty.resolver.HostsFileParser: io.netty.resolver.HostsFileEntries parse(java.io.File)>(v37);
label14:
goto label21;
label15:
v42 := @caughtexception;
v43 = new io.vertx.core.VertxException;
v44 = virtualinvoke v37.<java.io.File: java.lang.String getAbsolutePath()>();
v45 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v44) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot read hosts file \u0001");
specialinvoke v43.<io.vertx.core.VertxException: void <init>(java.lang.String)>(v45);
throw v43;
label16:
v46 = virtualinvoke v2.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.buffer.Buffer getHostsValue()>();
if v46 == null goto label20;
label17:
v47 = new java.io.StringReader;
v48 = virtualinvoke v2.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.buffer.Buffer getHostsValue()>();
v49 = interfaceinvoke v48.<io.vertx.core.buffer.Buffer: java.lang.String toString()>();
specialinvoke v47.<java.io.StringReader: void <init>(java.lang.String)>(v49);
v41 = staticinvoke <io.netty.resolver.HostsFileParser: io.netty.resolver.HostsFileEntries parse(java.io.Reader)>(v47);
label18:
goto label21;
label19:
v50 := @caughtexception;
v51 = new io.vertx.core.VertxException;
specialinvoke v51.<io.vertx.core.VertxException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot read hosts config ", v50);
throw v51;
label20:
v41 = staticinvoke <io.netty.resolver.HostsFileParser: io.netty.resolver.HostsFileEntries parseSilently()>();
label21:
v52 = virtualinvoke v2.<io.vertx.core.dns.AddressResolverOptions: int getCacheMinTimeToLive()>();
v53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v52);
v54 = staticinvoke <io.netty.util.internal.ObjectUtil: int intValue(java.lang.Integer,int)>(v53, 0);
v55 = virtualinvoke v2.<io.vertx.core.dns.AddressResolverOptions: int getCacheMaxTimeToLive()>();
v56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v55);
v57 = staticinvoke <io.netty.util.internal.ObjectUtil: int intValue(java.lang.Integer,int)>(v56, 2147483647);
v58 = virtualinvoke v2.<io.vertx.core.dns.AddressResolverOptions: int getCacheNegativeTimeToLive()>();
v59 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v58);
v60 = staticinvoke <io.netty.util.internal.ObjectUtil: int intValue(java.lang.Integer,int)>(v59, 0);
v61 = new io.netty.resolver.dns.DefaultDnsCache;
specialinvoke v61.<io.netty.resolver.dns.DefaultDnsCache: void <init>(int,int,int)>(v54, v57, v60);
v62 = new io.netty.resolver.dns.DefaultDnsCache;
specialinvoke v62.<io.netty.resolver.dns.DefaultDnsCache: void <init>(int,int,int)>(v54, v57, v60);
v0.<io.vertx.core.impl.resolver.DnsResolverProvider: io.vertx.core.Vertx vertx> = v1;
v63 = new io.netty.resolver.dns.DnsNameResolverBuilder;
specialinvoke v63.<io.netty.resolver.dns.DnsNameResolverBuilder: void <init>()>();
v64 = new io.vertx.core.impl.resolver.DnsResolverProvider$1;
specialinvoke v64.<io.vertx.core.impl.resolver.DnsResolverProvider$1: void <init>(io.vertx.core.impl.resolver.DnsResolverProvider,io.netty.resolver.HostsFileEntries)>(v0, v41);
virtualinvoke v63.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder hostsFileEntriesResolver(io.netty.resolver.HostsFileEntriesResolver)>(v64);
v65 = staticinvoke <io.vertx.core.impl.resolver.DnsResolverProvider$lambda_new_1__1542: io.netty.channel.ChannelFactory bootstrap$(io.vertx.core.impl.VertxImpl)>(v1);
virtualinvoke v63.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder channelFactory(io.netty.channel.ChannelFactory)>(v65);
v66 = staticinvoke <io.vertx.core.impl.resolver.DnsResolverProvider$lambda_new_2__1543: io.netty.channel.ChannelFactory bootstrap$(io.vertx.core.impl.VertxImpl)>(v1);
virtualinvoke v63.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder socketChannelFactory(io.netty.channel.ChannelFactory)>(v66);
virtualinvoke v63.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder nameServerProvider(io.netty.resolver.dns.DnsServerAddressStreamProvider)>(v33);
v67 = virtualinvoke v2.<io.vertx.core.dns.AddressResolverOptions: boolean isOptResourceEnabled()>();
virtualinvoke v63.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder optResourceEnabled(boolean)>(v67);
virtualinvoke v63.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder resolveCache(io.netty.resolver.dns.DnsCache)>(v61);
virtualinvoke v63.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder authoritativeDnsServerCache(io.netty.resolver.dns.DnsCache)>(v62);
v68 = virtualinvoke v2.<io.vertx.core.dns.AddressResolverOptions: long getQueryTimeout()>();
virtualinvoke v63.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder queryTimeoutMillis(long)>(v68);
v69 = virtualinvoke v2.<io.vertx.core.dns.AddressResolverOptions: int getMaxQueries()>();
virtualinvoke v63.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder maxQueriesPerResolve(int)>(v69);
v70 = virtualinvoke v2.<io.vertx.core.dns.AddressResolverOptions: boolean getRdFlag()>();
virtualinvoke v63.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder recursionDesired(boolean)>(v70);
v71 = virtualinvoke v2.<io.vertx.core.dns.AddressResolverOptions: java.util.List getSearchDomains()>();
if v71 == null goto label23;
v72 = virtualinvoke v2.<io.vertx.core.dns.AddressResolverOptions: java.util.List getSearchDomains()>();
virtualinvoke v63.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder searchDomains(java.lang.Iterable)>(v72);
v73 = virtualinvoke v2.<io.vertx.core.dns.AddressResolverOptions: int getNdots()>();
v74 = (int) -1;
if v73 != v74 goto label22;
v73 = <io.vertx.core.impl.AddressResolver: int DEFAULT_NDOTS_RESOLV_OPTION>;
label22:
virtualinvoke v63.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder ndots(int)>(v73);
label23:
v75 = new io.vertx.core.impl.resolver.DnsResolverProvider$2;
specialinvoke v75.<io.vertx.core.impl.resolver.DnsResolverProvider$2: void <init>(io.vertx.core.impl.resolver.DnsResolverProvider,io.netty.resolver.dns.DnsNameResolverBuilder,io.vertx.core.dns.AddressResolverOptions)>(v0, v63, v2);
v0.<io.vertx.core.impl.resolver.DnsResolverProvider: io.netty.resolver.AddressResolverGroup resolverGroup> = v75;
return;
catch java.net.UnknownHostException from label03 to label04 with label05;
catch java.io.IOException from label11 to label14 with label15;
catch java.io.IOException from label17 to label18 with label19;
}
public io.netty.resolver.AddressResolverGroup resolver(io.vertx.core.dns.AddressResolverOptions)
{
io.netty.resolver.AddressResolverGroup v2;
io.vertx.core.impl.resolver.DnsResolverProvider v0;
io.vertx.core.dns.AddressResolverOptions v1;
v0 := @this: io.vertx.core.impl.resolver.DnsResolverProvider;
v1 := @parameter0: io.vertx.core.dns.AddressResolverOptions;
v2 = v0.<io.vertx.core.impl.resolver.DnsResolverProvider: io.netty.resolver.AddressResolverGroup resolverGroup>;
return v2;
}
public void close(io.vertx.core.Handler)
{
io.vertx.core.impl.resolver.DnsResolverProvider v0;
java.lang.Object[] v6;
io.vertx.core.impl.resolver.DnsResolverProvider$ResolverRegistration v12;
io.vertx.core.Context v3;
java.lang.Runnable v13;
java.util.concurrent.atomic.AtomicInteger v8;
io.vertx.core.impl.resolver.DnsResolverProvider$ResolverRegistration[] v5;
int v10, v11, v7, v9;
boolean v15;
io.vertx.core.Vertx v2;
io.netty.channel.EventLoop v14, v16;
java.util.List v4;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.impl.resolver.DnsResolverProvider;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.impl.resolver.DnsResolverProvider: io.vertx.core.Vertx vertx>;
v3 = interfaceinvoke v2.<io.vertx.core.Vertx: io.vertx.core.Context getOrCreateContext()>();
v4 = v0.<io.vertx.core.impl.resolver.DnsResolverProvider: java.util.List resolvers>;
v5 = newarray (io.vertx.core.impl.resolver.DnsResolverProvider$ResolverRegistration)[0];
v6 = interfaceinvoke v4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v5);
v7 = lengthof v6;
if v7 != 0 goto label1;
interfaceinvoke v3.<io.vertx.core.Context: void runOnContext(io.vertx.core.Handler)>(v1);
return;
label1:
v8 = new java.util.concurrent.atomic.AtomicInteger;
v9 = lengthof v6;
specialinvoke v8.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(v9);
v10 = lengthof v6;
v11 = 0;
label2:
if v11 >= v10 goto label5;
v12 = v6[v11];
v13 = staticinvoke <io.vertx.core.impl.resolver.DnsResolverProvider$lambda_close_3__1544: java.lang.Runnable bootstrap$(io.vertx.core.impl.resolver.DnsResolverProvider$ResolverRegistration,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.Context,io.vertx.core.Handler)>(v12, v8, v3, v1);
v14 = v12.<io.vertx.core.impl.resolver.DnsResolverProvider$ResolverRegistration: io.netty.channel.EventLoop executor>;
v15 = interfaceinvoke v14.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v15 == 0 goto label3;
interfaceinvoke v13.<java.lang.Runnable: void run()>();
goto label4;
label3:
v16 = v12.<io.vertx.core.impl.resolver.DnsResolverProvider$ResolverRegistration: io.netty.channel.EventLoop executor>;
interfaceinvoke v16.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v13);
label4:
v11 = v11 + 1;
goto label2;
label5:
return;
}
}