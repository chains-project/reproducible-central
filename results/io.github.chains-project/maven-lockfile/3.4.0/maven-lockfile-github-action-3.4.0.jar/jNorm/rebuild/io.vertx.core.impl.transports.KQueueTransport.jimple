public class io.vertx.core.impl.transports.KQueueTransport extends java.lang.Object implements io.vertx.core.spi.transport.Transport
{
public void <init>()
{
io.vertx.core.impl.transports.KQueueTransport v0;
v0 := @this: io.vertx.core.impl.transports.KQueueTransport;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public boolean supportsDomainSockets()
{
io.vertx.core.impl.transports.KQueueTransport v0;
v0 := @this: io.vertx.core.impl.transports.KQueueTransport;
return 1;
}
public java.net.SocketAddress convert(io.vertx.core.net.SocketAddress)
{
io.vertx.core.impl.transports.KQueueTransport v0;
java.net.SocketAddress v5;
io.netty.channel.unix.DomainSocketAddress v3;
java.lang.String v4;
boolean v2;
io.vertx.core.net.SocketAddress v1;
v0 := @this: io.vertx.core.impl.transports.KQueueTransport;
v1 := @parameter0: io.vertx.core.net.SocketAddress;
v2 = interfaceinvoke v1.<io.vertx.core.net.SocketAddress: boolean isDomainSocket()>();
if v2 == 0 goto label1;
v3 = new io.netty.channel.unix.DomainSocketAddress;
v4 = interfaceinvoke v1.<io.vertx.core.net.SocketAddress: java.lang.String path()>();
specialinvoke v3.<io.netty.channel.unix.DomainSocketAddress: void <init>(java.lang.String)>(v4);
return v3;
label1:
v5 = specialinvoke v0.<io.vertx.core.spi.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress)>(v1);
return v5;
}
public io.vertx.core.net.SocketAddress convert(java.net.SocketAddress)
{
io.vertx.core.impl.transports.KQueueTransport v0;
java.net.SocketAddress v1;
java.lang.String v3;
io.vertx.core.net.impl.SocketAddressImpl v5;
boolean v2, v4;
io.vertx.core.net.SocketAddress v6;
v0 := @this: io.vertx.core.impl.transports.KQueueTransport;
v1 := @parameter0: java.net.SocketAddress;
v2 = v1 instanceof io.netty.channel.unix.DomainSocketAddress;
if v2 == 0 goto label2;
v3 = virtualinvoke v1.<io.netty.channel.unix.DomainSocketAddress: java.lang.String path()>();
v4 = virtualinvoke v3.<java.lang.String: boolean isEmpty()>();
if v4 == 0 goto label1;
return null;
label1:
v5 = new io.vertx.core.net.impl.SocketAddressImpl;
specialinvoke v5.<io.vertx.core.net.impl.SocketAddressImpl: void <init>(java.lang.String)>(v3);
return v5;
label2:
v6 = specialinvoke v0.<io.vertx.core.spi.transport.Transport: io.vertx.core.net.SocketAddress convert(java.net.SocketAddress)>(v1);
return v6;
}
public boolean isAvailable()
{
io.vertx.core.impl.transports.KQueueTransport v0;
boolean v1;
v0 := @this: io.vertx.core.impl.transports.KQueueTransport;
v1 = staticinvoke <io.netty.channel.kqueue.KQueue: boolean isAvailable()>();
return v1;
}
public java.lang.Throwable unavailabilityCause()
{
java.lang.Throwable v1;
io.vertx.core.impl.transports.KQueueTransport v0;
v0 := @this: io.vertx.core.impl.transports.KQueueTransport;
v1 = staticinvoke <io.netty.channel.kqueue.KQueue: java.lang.Throwable unavailabilityCause()>();
return v1;
}
public io.netty.channel.EventLoopGroup eventLoopGroup(int, int, java.util.concurrent.ThreadFactory, int)
{
io.vertx.core.impl.transports.KQueueTransport v0;
int v1, v2, v4;
java.util.concurrent.ThreadFactory v3;
io.netty.channel.kqueue.KQueueEventLoopGroup v5;
v0 := @this: io.vertx.core.impl.transports.KQueueTransport;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: java.util.concurrent.ThreadFactory;
v4 := @parameter3: int;
v5 = new io.netty.channel.kqueue.KQueueEventLoopGroup;
specialinvoke v5.<io.netty.channel.kqueue.KQueueEventLoopGroup: void <init>(int,java.util.concurrent.ThreadFactory)>(v2, v3);
virtualinvoke v5.<io.netty.channel.kqueue.KQueueEventLoopGroup: void setIoRatio(int)>(v4);
return v5;
}
public io.netty.channel.socket.DatagramChannel datagramChannel()
{
io.netty.channel.kqueue.KQueueDatagramChannel v1;
io.vertx.core.impl.transports.KQueueTransport v0;
v0 := @this: io.vertx.core.impl.transports.KQueueTransport;
v1 = new io.netty.channel.kqueue.KQueueDatagramChannel;
specialinvoke v1.<io.netty.channel.kqueue.KQueueDatagramChannel: void <init>()>();
return v1;
}
public io.netty.channel.socket.DatagramChannel datagramChannel(io.netty.channel.socket.InternetProtocolFamily)
{
io.netty.channel.kqueue.KQueueDatagramChannel v2;
io.netty.channel.socket.InternetProtocolFamily v1;
io.vertx.core.impl.transports.KQueueTransport v0;
v0 := @this: io.vertx.core.impl.transports.KQueueTransport;
v1 := @parameter0: io.netty.channel.socket.InternetProtocolFamily;
v2 = new io.netty.channel.kqueue.KQueueDatagramChannel;
specialinvoke v2.<io.netty.channel.kqueue.KQueueDatagramChannel: void <init>()>();
return v2;
}
public io.netty.channel.ChannelFactory channelFactory(boolean)
{
io.vertx.core.impl.transports.KQueueTransport v0;
io.netty.channel.ChannelFactory v2, v3;
boolean v1;
v0 := @this: io.vertx.core.impl.transports.KQueueTransport;
v1 := @parameter0: boolean;
if v1 == 0 goto label1;
v2 = staticinvoke <io.vertx.core.impl.transports.KQueueTransport$init__1552: io.netty.channel.ChannelFactory bootstrap$()>();
return v2;
label1:
v3 = staticinvoke <io.vertx.core.impl.transports.KQueueTransport$init__1551: io.netty.channel.ChannelFactory bootstrap$()>();
return v3;
}
public io.netty.channel.ChannelFactory serverChannelFactory(boolean)
{
io.vertx.core.impl.transports.KQueueTransport v0;
io.netty.channel.ChannelFactory v2, v3;
boolean v1;
v0 := @this: io.vertx.core.impl.transports.KQueueTransport;
v1 := @parameter0: boolean;
if v1 == 0 goto label1;
v2 = staticinvoke <io.vertx.core.impl.transports.KQueueTransport$init__1554: io.netty.channel.ChannelFactory bootstrap$()>();
return v2;
label1:
v3 = staticinvoke <io.vertx.core.impl.transports.KQueueTransport$init__1553: io.netty.channel.ChannelFactory bootstrap$()>();
return v3;
}
public void configure(io.vertx.core.net.NetServerOptions, boolean, io.netty.bootstrap.ServerBootstrap)
{
io.vertx.core.net.NetServerOptions v1;
io.vertx.core.impl.transports.KQueueTransport v0;
io.netty.channel.ChannelOption v4;
io.netty.bootstrap.ServerBootstrap v3;
java.lang.Boolean v6;
boolean v2, v5;
v0 := @this: io.vertx.core.impl.transports.KQueueTransport;
v1 := @parameter0: io.vertx.core.net.NetServerOptions;
v2 := @parameter1: boolean;
v3 := @parameter2: io.netty.bootstrap.ServerBootstrap;
if v2 != 0 goto label1;
v4 = <io.netty.channel.kqueue.KQueueChannelOption: io.netty.channel.ChannelOption SO_REUSEPORT>;
v5 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: boolean isReusePort()>();
v6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v5);
virtualinvoke v3.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v4, v6);
label1:
specialinvoke v0.<io.vertx.core.spi.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)>(v1, v2, v3);
return;
}
public void configure(io.netty.channel.socket.DatagramChannel, io.vertx.core.datagram.DatagramSocketOptions)
{
io.netty.channel.socket.DatagramChannel v1;
io.vertx.core.impl.transports.KQueueTransport v0;
io.netty.channel.ChannelOption v4;
io.netty.channel.socket.DatagramChannelConfig v3;
java.lang.Boolean v6;
io.vertx.core.datagram.DatagramSocketOptions v2;
boolean v5;
v0 := @this: io.vertx.core.impl.transports.KQueueTransport;
v1 := @parameter0: io.netty.channel.socket.DatagramChannel;
v2 := @parameter1: io.vertx.core.datagram.DatagramSocketOptions;
v3 = interfaceinvoke v1.<io.netty.channel.socket.DatagramChannel: io.netty.channel.socket.DatagramChannelConfig config()>();
v4 = <io.netty.channel.kqueue.KQueueChannelOption: io.netty.channel.ChannelOption SO_REUSEPORT>;
v5 = virtualinvoke v2.<io.vertx.core.datagram.DatagramSocketOptions: boolean isReusePort()>();
v6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v5);
interfaceinvoke v3.<io.netty.channel.socket.DatagramChannelConfig: boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)>(v4, v6);
specialinvoke v0.<io.vertx.core.spi.transport.Transport: void configure(io.netty.channel.socket.DatagramChannel,io.vertx.core.datagram.DatagramSocketOptions)>(v1, v2);
return;
}
}