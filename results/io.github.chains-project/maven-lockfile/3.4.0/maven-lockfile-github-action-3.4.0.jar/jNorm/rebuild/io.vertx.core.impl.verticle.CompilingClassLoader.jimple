public class io.vertx.core.impl.verticle.CompilingClassLoader extends java.lang.ClassLoader
{
private static final io.vertx.core.impl.logging.Logger log;
private static final java.lang.String JAVA_COMPILER_OPTIONS_PROP_NAME;
private static final java.util.List COMPILER_OPTIONS;
private final io.vertx.core.impl.verticle.JavaSourceContext javaSourceContext;
private final io.vertx.core.impl.verticle.MemoryFileManager fileManager;
public void <init>(java.lang.ClassLoader, java.lang.String)
{
java.net.URL v3;
io.vertx.core.impl.verticle.JavaSourceContext v15, v21;
javax.tools.DiagnosticCollector v16;
boolean v34, v37, v40, v42, v46, v9;
io.vertx.core.impl.logging.Logger v43, v48;
javax.tools.StandardLocation v20, v25;
javax.tools.JavaCompiler v17;
java.util.Set v23, v31;
java.lang.Exception v50;
javax.tools.JavaFileObject v28;
java.util.List v30, v35, v44;
java.lang.ClassLoader v1;
java.lang.Boolean v33;
java.lang.String v11, v13, v14, v2, v26, v39, v41, v5, v7, v8;
javax.tools.JavaFileObject$Kind v27;
java.util.Iterator v36, v45;
java.lang.RuntimeException v10, v18, v4, v49, v51;
java.io.File v12, v22, v6;
javax.tools.JavaCompiler$CompilationTask v32;
javax.tools.StandardJavaFileManager v19;
io.vertx.core.impl.verticle.MemoryFileManager v24, v29;
io.vertx.core.impl.verticle.CompilingClassLoader v0;
java.lang.Object v38, v47;
v0 := @this: io.vertx.core.impl.verticle.CompilingClassLoader;
v1 := @parameter0: java.lang.ClassLoader;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>(v1);
v3 = virtualinvoke v0.<io.vertx.core.impl.verticle.CompilingClassLoader: java.net.URL getResource(java.lang.String)>(v2);
if v3 != null goto label01;
v4 = new java.lang.RuntimeException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Resource not found: \u0001");
specialinvoke v4.<java.lang.RuntimeException: void <init>(java.lang.String)>(v5);
throw v4;
label01:
v6 = new java.io.File;
v7 = virtualinvoke v3.<java.net.URL: java.lang.String getFile()>();
v8 = staticinvoke <io.vertx.core.net.impl.URIDecoder: java.lang.String decodeURIComponent(java.lang.String,boolean)>(v7, 0);
specialinvoke v6.<java.io.File: void <init>(java.lang.String)>(v8);
v9 = virtualinvoke v6.<java.io.File: boolean canRead()>();
if v9 != 0 goto label02;
v10 = new java.lang.RuntimeException;
v11 = virtualinvoke v6.<java.io.File: java.lang.String getAbsolutePath()>();
v12 = new java.io.File;
specialinvoke v12.<java.io.File: void <init>(java.lang.String)>(".");
v13 = virtualinvoke v12.<java.io.File: java.lang.String getAbsolutePath()>();
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v11, v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("File not found: \u0001 current dir is: \u0001");
specialinvoke v10.<java.lang.RuntimeException: void <init>(java.lang.String)>(v14);
throw v10;
label02:
v15 = new io.vertx.core.impl.verticle.JavaSourceContext;
specialinvoke v15.<io.vertx.core.impl.verticle.JavaSourceContext: void <init>(java.io.File)>(v6);
v0.<io.vertx.core.impl.verticle.CompilingClassLoader: io.vertx.core.impl.verticle.JavaSourceContext javaSourceContext> = v15;
label03:
v16 = new javax.tools.DiagnosticCollector;
specialinvoke v16.<javax.tools.DiagnosticCollector: void <init>()>();
v17 = staticinvoke <javax.tools.ToolProvider: javax.tools.JavaCompiler getSystemJavaCompiler()>();
if v17 != null goto label04;
v18 = new java.lang.RuntimeException;
specialinvoke v18.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unable to detect java compiler, make sure you\'re using a JDK not a JRE!");
throw v18;
label04:
v19 = interfaceinvoke v17.<javax.tools.JavaCompiler: javax.tools.StandardJavaFileManager getStandardFileManager(javax.tools.DiagnosticListener,java.util.Locale,java.nio.charset.Charset)>(null, null, null);
v20 = <javax.tools.StandardLocation: javax.tools.StandardLocation SOURCE_PATH>;
v21 = v0.<io.vertx.core.impl.verticle.CompilingClassLoader: io.vertx.core.impl.verticle.JavaSourceContext javaSourceContext>;
v22 = virtualinvoke v21.<io.vertx.core.impl.verticle.JavaSourceContext: java.io.File getSourceRoot()>();
v23 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v22);
interfaceinvoke v19.<javax.tools.StandardJavaFileManager: void setLocation(javax.tools.JavaFileManager$Location,java.lang.Iterable)>(v20, v23);
v24 = new io.vertx.core.impl.verticle.MemoryFileManager;
specialinvoke v24.<io.vertx.core.impl.verticle.MemoryFileManager: void <init>(java.lang.ClassLoader,javax.tools.JavaFileManager)>(v1, v19);
v0.<io.vertx.core.impl.verticle.CompilingClassLoader: io.vertx.core.impl.verticle.MemoryFileManager fileManager> = v24;
v25 = <javax.tools.StandardLocation: javax.tools.StandardLocation SOURCE_PATH>;
v26 = virtualinvoke v0.<io.vertx.core.impl.verticle.CompilingClassLoader: java.lang.String resolveMainClassName()>();
v27 = <javax.tools.JavaFileObject$Kind: javax.tools.JavaFileObject$Kind SOURCE>;
v28 = interfaceinvoke v19.<javax.tools.StandardJavaFileManager: javax.tools.JavaFileObject getJavaFileForInput(javax.tools.JavaFileManager$Location,java.lang.String,javax.tools.JavaFileObject$Kind)>(v25, v26, v27);
v29 = v0.<io.vertx.core.impl.verticle.CompilingClassLoader: io.vertx.core.impl.verticle.MemoryFileManager fileManager>;
v30 = <io.vertx.core.impl.verticle.CompilingClassLoader: java.util.List COMPILER_OPTIONS>;
v31 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v28);
v32 = interfaceinvoke v17.<javax.tools.JavaCompiler: javax.tools.JavaCompiler$CompilationTask getTask(java.io.Writer,javax.tools.JavaFileManager,javax.tools.DiagnosticListener,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)>(null, v29, v16, v30, null, v31);
v33 = interfaceinvoke v32.<javax.tools.JavaCompiler$CompilationTask: java.lang.Boolean call()>();
v34 = virtualinvoke v33.<java.lang.Boolean: boolean booleanValue()>();
if v34 == 0 goto label07;
v35 = virtualinvoke v16.<javax.tools.DiagnosticCollector: java.util.List getDiagnostics()>();
v36 = interfaceinvoke v35.<java.util.List: java.util.Iterator iterator()>();
label05:
v37 = interfaceinvoke v36.<java.util.Iterator: boolean hasNext()>();
if v37 == 0 goto label11;
v38 = interfaceinvoke v36.<java.util.Iterator: java.lang.Object next()>();
v39 = interfaceinvoke v38.<javax.tools.Diagnostic: java.lang.String getCode()>();
if v39 == null goto label06;
v40 = virtualinvoke v39.<java.lang.String: boolean startsWith(java.lang.String)>("compiler.warn.annotation.method.not.found");
if v40 != 0 goto label05;
v41 = "compiler.warn.proc.processor.incompatible.source.version";
v42 = virtualinvoke v41.<java.lang.String: boolean equals(java.lang.Object)>(v39);
if v42 != 0 goto label05;
label06:
v43 = <io.vertx.core.impl.verticle.CompilingClassLoader: io.vertx.core.impl.logging.Logger log>;
interfaceinvoke v43.<io.vertx.core.impl.logging.Logger: void info(java.lang.Object)>(v38);
goto label05;
label07:
v44 = virtualinvoke v16.<javax.tools.DiagnosticCollector: java.util.List getDiagnostics()>();
v45 = interfaceinvoke v44.<java.util.List: java.util.Iterator iterator()>();
label08:
v46 = interfaceinvoke v45.<java.util.Iterator: boolean hasNext()>();
if v46 == 0 goto label09;
v47 = interfaceinvoke v45.<java.util.Iterator: java.lang.Object next()>();
v48 = <io.vertx.core.impl.verticle.CompilingClassLoader: io.vertx.core.impl.logging.Logger log>;
interfaceinvoke v48.<io.vertx.core.impl.logging.Logger: void warn(java.lang.Object)>(v47);
goto label08;
label09:
v49 = new java.lang.RuntimeException;
specialinvoke v49.<java.lang.RuntimeException: void <init>(java.lang.String)>("Compilation failed!");
throw v49;
label10:
v50 := @caughtexception;
v51 = new java.lang.RuntimeException;
specialinvoke v51.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Compilation failed", v50);
throw v51;
label11:
return;
catch java.lang.Exception from label03 to label10 with label10;
}
public java.lang.String resolveMainClassName()
{
java.lang.String v2;
io.vertx.core.impl.verticle.CompilingClassLoader v0;
io.vertx.core.impl.verticle.JavaSourceContext v1;
v0 := @this: io.vertx.core.impl.verticle.CompilingClassLoader;
v1 = v0.<io.vertx.core.impl.verticle.CompilingClassLoader: io.vertx.core.impl.verticle.JavaSourceContext javaSourceContext>;
v2 = virtualinvoke v1.<io.vertx.core.impl.verticle.JavaSourceContext: java.lang.String getClassName()>();
return v2;
}
protected java.lang.Class findClass(java.lang.String) throws java.lang.ClassNotFoundException
{
byte[] v2;
io.vertx.core.impl.verticle.CompilingClassLoader v0;
int v4;
java.lang.Class v5;
java.lang.ClassNotFoundException v3;
java.lang.String v1;
v0 := @this: io.vertx.core.impl.verticle.CompilingClassLoader;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.core.impl.verticle.CompilingClassLoader: byte[] getClassBytes(java.lang.String)>(v1);
if v2 != null goto label1;
v3 = new java.lang.ClassNotFoundException;
specialinvoke v3.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>(v1);
throw v3;
label1:
v4 = lengthof v2;
v5 = virtualinvoke v0.<io.vertx.core.impl.verticle.CompilingClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>(v1, v2, 0, v4);
return v5;
}
public byte[] getClassBytes(java.lang.String)
{
byte[] v3;
io.vertx.core.impl.verticle.MemoryFileManager v2;
io.vertx.core.impl.verticle.CompilingClassLoader v0;
java.lang.String v1;
v0 := @this: io.vertx.core.impl.verticle.CompilingClassLoader;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.impl.verticle.CompilingClassLoader: io.vertx.core.impl.verticle.MemoryFileManager fileManager>;
v3 = virtualinvoke v2.<io.vertx.core.impl.verticle.MemoryFileManager: byte[] getCompiledClass(java.lang.String)>(v1);
return v3;
}
static void <clinit>()
{
io.vertx.core.impl.logging.Logger v0;
java.lang.String[] v2;
java.util.ArrayList v3;
java.util.List v9;
int v4, v5, v6;
java.lang.String v1, v7, v8;
v0 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/verticle/CompilingClassLoader;");
<io.vertx.core.impl.verticle.CompilingClassLoader: io.vertx.core.impl.logging.Logger log> = v0;
v1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("vertx.javaCompilerOptions");
if v1 == null goto label3;
v2 = virtualinvoke v1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");
v3 = new java.util.ArrayList;
v4 = lengthof v2;
specialinvoke v3.<java.util.ArrayList: void <init>(int)>(v4);
v5 = lengthof v2;
v6 = 0;
label1:
if v6 >= v5 goto label2;
v7 = v2[v6];
v8 = virtualinvoke v7.<java.lang.String: java.lang.String trim()>();
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v8);
v6 = v6 + 1;
goto label1;
label2:
v9 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v3);
<io.vertx.core.impl.verticle.CompilingClassLoader: java.util.List COMPILER_OPTIONS> = v9;
goto label4;
label3:
<io.vertx.core.impl.verticle.CompilingClassLoader: java.util.List COMPILER_OPTIONS> = null;
label4:
return;
}
}