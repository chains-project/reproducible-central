public class io.vertx.core.logging.LoggerFactory extends java.lang.Object
{
public static final java.lang.String LOGGER_DELEGATE_FACTORY_CLASS_NAME;
private static volatile io.vertx.core.spi.logging.LogDelegateFactory delegateFactory;
private static final java.util.concurrent.ConcurrentMap loggers;
public void <init>()
{
io.vertx.core.logging.LoggerFactory v0;
v0 := @this: io.vertx.core.logging.LoggerFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static synchronized void initialise()
{
java.net.URL v5;
java.lang.Exception v3;
java.lang.Thread v0;
io.vertx.core.logging.JULLogDelegateFactory v8;
java.lang.ClassLoader v1;
java.lang.String v2;
boolean v4, v6, v7;
v0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v1 = virtualinvoke v0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
label1:
v2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("vertx.logger-delegate-factory-class-name");
label2:
goto label4;
label3:
v3 := @caughtexception;
v2 = null;
label4:
if v2 == null goto label5;
v4 = staticinvoke <io.vertx.core.logging.LoggerFactory: boolean configureWith(java.lang.String,boolean,java.lang.ClassLoader)>(v2, 0, v1);
if v4 == 0 goto label5;
return;
label5:
v5 = virtualinvoke v1.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>("vertx-default-jul-logging.properties");
if v5 != null goto label7;
v6 = staticinvoke <io.vertx.core.logging.LoggerFactory: boolean configureWith(java.lang.String,boolean,java.lang.ClassLoader)>("SLF4J", 1, v1);
if v6 != 0 goto label6;
v7 = staticinvoke <io.vertx.core.logging.LoggerFactory: boolean configureWith(java.lang.String,boolean,java.lang.ClassLoader)>("Log4j2", 1, v1);
if v7 == 0 goto label7;
label6:
return;
label7:
v8 = new io.vertx.core.logging.JULLogDelegateFactory;
specialinvoke v8.<io.vertx.core.logging.JULLogDelegateFactory: void <init>()>();
<io.vertx.core.logging.LoggerFactory: io.vertx.core.spi.logging.LogDelegateFactory delegateFactory> = v8;
return;
catch java.lang.Exception from label1 to label2 with label3;
}
private static boolean configureWith(java.lang.String, boolean, java.lang.ClassLoader)
{
java.lang.Throwable v7;
java.lang.Class v4;
java.lang.Object v5;
java.lang.ClassLoader v2;
java.lang.String v0, v3;
boolean v1, v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: boolean;
v2 := @parameter2: java.lang.ClassLoader;
label1:
if v1 == 0 goto label2;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("io.vertx.core.logging.\u0001LogDelegateFactory");
goto label3;
label2:
v3 = v0;
label3:
v4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(v3, 1, v2);
v5 = virtualinvoke v4.<java.lang.Class: java.lang.Object newInstance()>();
v6 = interfaceinvoke v5.<io.vertx.core.spi.logging.LogDelegateFactory: boolean isAvailable()>();
if v6 != 0 goto label5;
label4:
return 0;
label5:
<io.vertx.core.logging.LoggerFactory: io.vertx.core.spi.logging.LogDelegateFactory delegateFactory> = v5;
label6:
return 1;
label7:
v7 := @caughtexception;
return 0;
catch java.lang.Throwable from label1 to label4 with label7;
catch java.lang.Throwable from label5 to label6 with label7;
}
public static io.vertx.core.logging.Logger getLogger(java.lang.Class)
{
java.lang.Class v0, v2;
java.lang.String v3;
io.vertx.core.logging.Logger v4;
boolean v1;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: boolean isAnonymousClass()>();
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<java.lang.Class: java.lang.Class getEnclosingClass()>();
v3 = virtualinvoke v2.<java.lang.Class: java.lang.String getCanonicalName()>();
goto label2;
label1:
v3 = virtualinvoke v0.<java.lang.Class: java.lang.String getCanonicalName()>();
label2:
v4 = staticinvoke <io.vertx.core.logging.LoggerFactory: io.vertx.core.logging.Logger getLogger(java.lang.String)>(v3);
return v4;
}
public static io.vertx.core.logging.Logger getLogger(java.lang.String)
{
io.vertx.core.spi.logging.LogDelegate v4;
java.util.concurrent.ConcurrentMap v1, v6;
io.vertx.core.spi.logging.LogDelegateFactory v3;
java.lang.Object v2, v7;
java.lang.String v0;
io.vertx.core.logging.Logger v5;
v0 := @parameter0: java.lang.String;
v1 = <io.vertx.core.logging.LoggerFactory: java.util.concurrent.ConcurrentMap loggers>;
v2 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v0);
if v2 != null goto label1;
v3 = <io.vertx.core.logging.LoggerFactory: io.vertx.core.spi.logging.LogDelegateFactory delegateFactory>;
v4 = interfaceinvoke v3.<io.vertx.core.spi.logging.LogDelegateFactory: io.vertx.core.spi.logging.LogDelegate createDelegate(java.lang.String)>(v0);
v5 = new io.vertx.core.logging.Logger;
specialinvoke v5.<io.vertx.core.logging.Logger: void <init>(io.vertx.core.spi.logging.LogDelegate)>(v4);
v2 = v5;
v6 = <io.vertx.core.logging.LoggerFactory: java.util.concurrent.ConcurrentMap loggers>;
v7 = interfaceinvoke v6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v0, v5);
if v7 == null goto label1;
v2 = v7;
label1:
return v2;
}
public static void removeLogger(java.lang.String)
{
java.lang.String v0;
java.util.concurrent.ConcurrentMap v1;
v0 := @parameter0: java.lang.String;
v1 = <io.vertx.core.logging.LoggerFactory: java.util.concurrent.ConcurrentMap loggers>;
interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v0);
return;
}
static void <clinit>()
{
io.vertx.core.spi.logging.LogDelegate v4;
java.util.concurrent.ConcurrentHashMap v0;
io.vertx.core.spi.logging.LogDelegateFactory v1, v5;
java.lang.Class v2, v6;
java.lang.String v3, v7, v8;
v0 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
<io.vertx.core.logging.LoggerFactory: java.util.concurrent.ConcurrentMap loggers> = v0;
staticinvoke <io.vertx.core.logging.LoggerFactory: void initialise()>();
v1 = <io.vertx.core.logging.LoggerFactory: io.vertx.core.spi.logging.LogDelegateFactory delegateFactory>;
v2 = class "Lio/vertx/core/logging/LoggerFactory;";
v3 = virtualinvoke v2.<java.lang.Class: java.lang.String getName()>();
v4 = interfaceinvoke v1.<io.vertx.core.spi.logging.LogDelegateFactory: io.vertx.core.spi.logging.LogDelegate createDelegate(java.lang.String)>(v3);
v5 = <io.vertx.core.logging.LoggerFactory: io.vertx.core.spi.logging.LogDelegateFactory delegateFactory>;
v6 = virtualinvoke v5.<java.lang.Object: java.lang.Class getClass()>();
v7 = virtualinvoke v6.<java.lang.Class: java.lang.String getName()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Using \u0001");
interfaceinvoke v4.<io.vertx.core.spi.logging.LogDelegate: void debug(java.lang.Object)>(v8);
return;
}
}