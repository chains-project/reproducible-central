public class io.vertx.core.logging.SLF4JLogDelegateFactory extends java.lang.Object implements io.vertx.core.spi.logging.LogDelegateFactory
{
public void <init>()
{
io.vertx.core.logging.SLF4JLogDelegateFactory v0;
v0 := @this: io.vertx.core.logging.SLF4JLogDelegateFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public boolean isAvailable()
{
io.vertx.core.logging.SLF4JLogDelegateFactory v0;
org.slf4j.ILoggerFactory v1;
boolean v2, v3;
v0 := @this: io.vertx.core.logging.SLF4JLogDelegateFactory;
v1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.ILoggerFactory getILoggerFactory()>();
v2 = v1 instanceof org.slf4j.helpers.NOPLoggerFactory;
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public io.vertx.core.spi.logging.LogDelegate createDelegate(java.lang.String)
{
io.vertx.core.logging.SLF4JLogDelegate v2;
java.lang.String v1;
io.vertx.core.logging.SLF4JLogDelegateFactory v0;
v0 := @this: io.vertx.core.logging.SLF4JLogDelegateFactory;
v1 := @parameter0: java.lang.String;
v2 = new io.vertx.core.logging.SLF4JLogDelegate;
specialinvoke v2.<io.vertx.core.logging.SLF4JLogDelegate: void <init>(java.lang.String)>(v1);
return v2;
}
static void <clinit>()
{
java.io.PrintStream v0, v1;
java.lang.Throwable v3;
java.io.ByteArrayOutputStream v2;
v0 = <java.lang.System: java.io.PrintStream err>;
label1:
v1 = new java.io.PrintStream;
v2 = new java.io.ByteArrayOutputStream;
specialinvoke v2.<java.io.ByteArrayOutputStream: void <init>()>();
specialinvoke v1.<java.io.PrintStream: void <init>(java.io.OutputStream)>(v2);
staticinvoke <java.lang.System: void setErr(java.io.PrintStream)>(v1);
staticinvoke <org.slf4j.LoggerFactory: org.slf4j.ILoggerFactory getILoggerFactory()>();
label2:
staticinvoke <java.lang.System: void setErr(java.io.PrintStream)>(v0);
goto label4;
label3:
v3 := @caughtexception;
staticinvoke <java.lang.System: void setErr(java.io.PrintStream)>(v0);
throw v3;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}