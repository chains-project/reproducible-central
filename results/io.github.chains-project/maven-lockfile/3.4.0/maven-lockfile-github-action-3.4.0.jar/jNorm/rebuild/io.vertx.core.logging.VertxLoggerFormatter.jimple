public class io.vertx.core.logging.VertxLoggerFormatter extends java.util.logging.Formatter
{
public void <init>()
{
io.vertx.core.logging.VertxLoggerFormatter v0;
v0 := @this: io.vertx.core.logging.VertxLoggerFormatter;
specialinvoke v0.<java.util.logging.Formatter: void <init>()>();
return;
}
public java.lang.String format(java.util.logging.LogRecord)
{
java.lang.Throwable v19, v22;
long v2;
java.util.logging.Level v12;
java.lang.Thread v6;
java.lang.String v10, v14, v17, v18, v23, v25, v7;
java.io.PrintWriter v21;
io.vertx.core.logging.VertxLoggerFormatter v0;
java.io.StringWriter v20;
java.util.logging.LogRecord v1;
java.lang.Exception v24;
java.time.OffsetDateTime v3;
java.time.format.DateTimeFormatter v9;
java.lang.StringBuilder v11, v13, v15, v16, v4, v5, v8;
v0 := @this: io.vertx.core.logging.VertxLoggerFormatter;
v1 := @parameter0: java.util.logging.LogRecord;
v2 = virtualinvoke v1.<java.util.logging.LogRecord: long getMillis()>();
v3 = staticinvoke <io.vertx.core.logging.VertxLoggerFormatter: java.time.OffsetDateTime fromMillis(long)>(v2);
v4 = new java.lang.StringBuilder;
specialinvoke v4.<java.lang.StringBuilder: void <init>()>();
v5 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");
v6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v7 = virtualinvoke v6.<java.lang.Thread: java.lang.String getName()>();
v8 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v7);
virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");
v9 = <java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ISO_OFFSET_DATE_TIME>;
v10 = virtualinvoke v3.<java.time.OffsetDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>(v9);
v11 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v10);
virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
v12 = virtualinvoke v1.<java.util.logging.LogRecord: java.util.logging.Level getLevel()>();
v13 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v12);
virtualinvoke v13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");
v14 = virtualinvoke v1.<java.util.logging.LogRecord: java.lang.String getLoggerName()>();
v15 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v14);
v16 = virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
virtualinvoke v16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");
v17 = virtualinvoke v1.<java.util.logging.LogRecord: java.lang.String getMessage()>();
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v17);
v18 = <io.vertx.core.impl.Utils: java.lang.String LINE_SEPARATOR>;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v18);
v19 = virtualinvoke v1.<java.util.logging.LogRecord: java.lang.Throwable getThrown()>();
if v19 == null goto label4;
label1:
v20 = new java.io.StringWriter;
specialinvoke v20.<java.io.StringWriter: void <init>()>();
v21 = new java.io.PrintWriter;
specialinvoke v21.<java.io.PrintWriter: void <init>(java.io.Writer)>(v20);
v22 = virtualinvoke v1.<java.util.logging.LogRecord: java.lang.Throwable getThrown()>();
virtualinvoke v22.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>(v21);
virtualinvoke v21.<java.io.PrintWriter: void close()>();
v23 = virtualinvoke v20.<java.io.StringWriter: java.lang.String toString()>();
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v23);
label2:
goto label4;
label3:
v24 := @caughtexception;
virtualinvoke v24.<java.lang.Exception: void printStackTrace()>();
label4:
v25 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.String toString()>();
return v25;
catch java.lang.Exception from label1 to label2 with label3;
}
private static java.time.OffsetDateTime fromMillis(long)
{
java.time.OffsetDateTime v3;
long v0;
java.time.Instant v1;
java.time.ZoneId v2;
v0 := @parameter0: long;
v1 = staticinvoke <java.time.Instant: java.time.Instant ofEpochMilli(long)>(v0);
v2 = staticinvoke <java.time.ZoneId: java.time.ZoneId systemDefault()>();
v3 = staticinvoke <java.time.OffsetDateTime: java.time.OffsetDateTime ofInstant(java.time.Instant,java.time.ZoneId)>(v1, v2);
return v3;
}
}