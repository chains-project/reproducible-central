public class io.vertx.core.net.NetClientOptionsConverter extends java.lang.Object
{
private static final java.util.Base64$Decoder BASE64_DECODER;
private static final java.util.Base64$Encoder BASE64_ENCODER;
public void <init>()
{
io.vertx.core.net.NetClientOptionsConverter v0;
v0 := @this: io.vertx.core.net.NetClientOptionsConverter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void fromJson(java.lang.Iterable, io.vertx.core.net.NetClientOptions)
{
byte v6;
boolean v10, v11, v12, v14, v19, v22, v26, v3, v30, v32, v8, v9;
io.vertx.core.net.NetClientOptions v1;
long v28;
java.lang.Iterable v0;
java.util.ArrayList v15;
int v24, v7;
java.util.Iterator v2;
java.util.function.Consumer v17;
java.lang.Object v13, v16, v18, v20, v21, v23, v25, v27, v29, v31, v4, v5;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: io.vertx.core.net.NetClientOptions;
v2 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
label01:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label13;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v6 = -1;
v7 = virtualinvoke v5.<java.lang.String: int hashCode()>();
lookupswitch(v7)
{
case -1440254802: goto label06;
case -1234878470: goto label02;
case -731754975: goto label03;
case -307281987: goto label04;
case -279601860: goto label05;
default: goto label07;
};
label02:
v8 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("applicationLayerProtocols");
if v8 == 0 goto label07;
v6 = 0;
goto label07;
label03:
v9 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("hostnameVerificationAlgorithm");
if v9 == 0 goto label07;
v6 = 1;
goto label07;
label04:
v10 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("reconnectAttempts");
if v10 == 0 goto label07;
v6 = 2;
goto label07;
label05:
v11 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("reconnectInterval");
if v11 == 0 goto label07;
v6 = 3;
goto label07;
label06:
v12 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("registerWriteHandler");
if v12 == 0 goto label07;
v6 = 4;
label07:
tableswitch(v6)
{
case 0: goto label08;
case 1: goto label09;
case 2: goto label10;
case 3: goto label11;
case 4: goto label12;
default: goto label01;
};
label08:
v13 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v14 = v13 instanceof io.vertx.core.json.JsonArray;
if v14 == 0 goto label01;
v15 = new java.util.ArrayList;
specialinvoke v15.<java.util.ArrayList: void <init>()>();
v16 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v17 = staticinvoke <io.vertx.core.net.NetClientOptionsConverter$lambda_fromJson_0__1272: java.util.function.Consumer bootstrap$(java.util.ArrayList)>(v15);
interfaceinvoke v16.<java.lang.Iterable: void forEach(java.util.function.Consumer)>(v17);
virtualinvoke v1.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setApplicationLayerProtocols(java.util.List)>(v15);
goto label01;
label09:
v18 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v19 = v18 instanceof java.lang.String;
if v19 == 0 goto label01;
v20 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v1.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setHostnameVerificationAlgorithm(java.lang.String)>(v20);
goto label01;
label10:
v21 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v22 = v21 instanceof java.lang.Number;
if v22 == 0 goto label01;
v23 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v24 = virtualinvoke v23.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReconnectAttempts(int)>(v24);
goto label01;
label11:
v25 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v26 = v25 instanceof java.lang.Number;
if v26 == 0 goto label01;
v27 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v28 = virtualinvoke v27.<java.lang.Number: long longValue()>();
virtualinvoke v1.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setReconnectInterval(long)>(v28);
goto label01;
label12:
v29 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v30 = v29 instanceof java.lang.Boolean;
if v30 == 0 goto label01;
v31 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v32 = virtualinvoke v31.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.net.NetClientOptions: io.vertx.core.net.NetClientOptions setRegisterWriteHandler(boolean)>(v32);
goto label01;
label13:
return;
}
static void toJson(io.vertx.core.net.NetClientOptions, io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.net.NetClientOptions v0;
java.util.Map v2;
v0 := @parameter0: io.vertx.core.net.NetClientOptions;
v1 := @parameter1: io.vertx.core.json.JsonObject;
v2 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.util.Map getMap()>();
staticinvoke <io.vertx.core.net.NetClientOptionsConverter: void toJson(io.vertx.core.net.NetClientOptions,java.util.Map)>(v0, v2);
return;
}
static void toJson(io.vertx.core.net.NetClientOptions, java.util.Map)
{
long v10;
java.lang.Integer v9;
io.vertx.core.net.NetClientOptions v0;
java.util.function.Consumer v5;
io.vertx.core.json.JsonArray v3;
java.util.List v2, v4;
java.lang.Long v11;
java.util.Map v1;
int v8;
java.lang.Boolean v13;
java.lang.String v6, v7;
boolean v12;
v0 := @parameter0: io.vertx.core.net.NetClientOptions;
v1 := @parameter1: java.util.Map;
v2 = virtualinvoke v0.<io.vertx.core.net.NetClientOptions: java.util.List getApplicationLayerProtocols()>();
if v2 == null goto label1;
v3 = new io.vertx.core.json.JsonArray;
specialinvoke v3.<io.vertx.core.json.JsonArray: void <init>()>();
v4 = virtualinvoke v0.<io.vertx.core.net.NetClientOptions: java.util.List getApplicationLayerProtocols()>();
v5 = staticinvoke <io.vertx.core.net.NetClientOptionsConverter$lambda_toJson_1__1273: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>(v3);
interfaceinvoke v4.<java.util.List: void forEach(java.util.function.Consumer)>(v5);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("applicationLayerProtocols", v3);
label1:
v6 = virtualinvoke v0.<io.vertx.core.net.NetClientOptions: java.lang.String getHostnameVerificationAlgorithm()>();
if v6 == null goto label2;
v7 = virtualinvoke v0.<io.vertx.core.net.NetClientOptions: java.lang.String getHostnameVerificationAlgorithm()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostnameVerificationAlgorithm", v7);
label2:
v8 = virtualinvoke v0.<io.vertx.core.net.NetClientOptions: int getReconnectAttempts()>();
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectAttempts", v9);
v10 = virtualinvoke v0.<io.vertx.core.net.NetClientOptions: long getReconnectInterval()>();
v11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v10);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("reconnectInterval", v11);
v12 = virtualinvoke v0.<io.vertx.core.net.NetClientOptions: boolean isRegisterWriteHandler()>();
v13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v12);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("registerWriteHandler", v13);
return;
}
static void <clinit>()
{
java.util.Base64$Encoder v1;
java.util.Base64$Decoder v0;
v0 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Decoder BASE64_DECODER>;
<io.vertx.core.net.NetClientOptionsConverter: java.util.Base64$Decoder BASE64_DECODER> = v0;
v1 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Encoder BASE64_ENCODER>;
<io.vertx.core.net.NetClientOptionsConverter: java.util.Base64$Encoder BASE64_ENCODER> = v1;
return;
}
}