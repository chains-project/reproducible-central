public class io.vertx.core.net.NetServerOptions extends io.vertx.core.net.TCPSSLOptions
{
public static final int DEFAULT_PORT;
public static final java.lang.String DEFAULT_HOST;
public static final int DEFAULT_ACCEPT_BACKLOG;
public static final io.vertx.core.http.ClientAuth DEFAULT_CLIENT_AUTH;
public static final boolean DEFAULT_SNI;
public static final boolean DEFAULT_USE_PROXY_PROTOCOL;
public static final long DEFAULT_PROXY_PROTOCOL_TIMEOUT;
public static final java.util.concurrent.TimeUnit DEFAULT_PROXY_PROTOCOL_TIMEOUT_TIME_UNIT;
public static final boolean DEFAULT_REGISTER_WRITE_HANDLER;
private int port;
private java.lang.String host;
private int acceptBacklog;
private io.vertx.core.http.ClientAuth clientAuth;
private boolean sni;
private boolean useProxyProtocol;
private long proxyProtocolTimeout;
private java.util.concurrent.TimeUnit proxyProtocolTimeoutUnit;
private boolean registerWriteHandler;
public void <init>()
{
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: void <init>()>();
specialinvoke v0.<io.vertx.core.net.NetServerOptions: void init()>();
return;
}
public void <init>(io.vertx.core.net.NetServerOptions)
{
long v8;
java.util.concurrent.TimeUnit v10, v9;
io.vertx.core.net.NetServerOptions v0, v1;
int v2, v4;
io.vertx.core.http.ClientAuth v5;
java.lang.String v3;
boolean v11, v6, v7;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: io.vertx.core.net.NetServerOptions;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)>(v1);
v2 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: int getPort()>();
v0.<io.vertx.core.net.NetServerOptions: int port> = v2;
v3 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: java.lang.String getHost()>();
v0.<io.vertx.core.net.NetServerOptions: java.lang.String host> = v3;
v4 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: int getAcceptBacklog()>();
v0.<io.vertx.core.net.NetServerOptions: int acceptBacklog> = v4;
v5 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: io.vertx.core.http.ClientAuth getClientAuth()>();
v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.http.ClientAuth clientAuth> = v5;
v6 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: boolean isSni()>();
v0.<io.vertx.core.net.NetServerOptions: boolean sni> = v6;
v7 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: boolean isUseProxyProtocol()>();
v0.<io.vertx.core.net.NetServerOptions: boolean useProxyProtocol> = v7;
v8 = v1.<io.vertx.core.net.NetServerOptions: long proxyProtocolTimeout>;
v0.<io.vertx.core.net.NetServerOptions: long proxyProtocolTimeout> = v8;
v9 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: java.util.concurrent.TimeUnit getProxyProtocolTimeoutUnit()>();
if v9 == null goto label1;
v10 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: java.util.concurrent.TimeUnit getProxyProtocolTimeoutUnit()>();
goto label2;
label1:
v10 = <io.vertx.core.net.NetServerOptions: java.util.concurrent.TimeUnit DEFAULT_PROXY_PROTOCOL_TIMEOUT_TIME_UNIT>;
label2:
v0.<io.vertx.core.net.NetServerOptions: java.util.concurrent.TimeUnit proxyProtocolTimeoutUnit> = v10;
v11 = v1.<io.vertx.core.net.NetServerOptions: boolean registerWriteHandler>;
v0.<io.vertx.core.net.NetServerOptions: boolean registerWriteHandler> = v11;
return;
}
public void <init>(io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: io.vertx.core.json.JsonObject;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.json.JsonObject)>(v1);
specialinvoke v0.<io.vertx.core.net.NetServerOptions: void init()>();
staticinvoke <io.vertx.core.net.NetServerOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetServerOptions)>(v1, v0);
return;
}
public io.vertx.core.json.JsonObject toJson()
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.json.JsonObject toJson()>();
staticinvoke <io.vertx.core.net.NetServerOptionsConverter: void toJson(io.vertx.core.net.NetServerOptions,io.vertx.core.json.JsonObject)>(v0, v1);
return v1;
}
public io.vertx.core.net.NetServerOptions setSendBufferSize(int)
{
int v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setReceiveBufferSize(int)
{
int v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setReuseAddress(boolean)
{
io.vertx.core.net.NetServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setReusePort(boolean)
{
io.vertx.core.net.NetServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setTrafficClass(int)
{
int v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setTcpNoDelay(boolean)
{
io.vertx.core.net.NetServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setTcpKeepAlive(boolean)
{
io.vertx.core.net.NetServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setSoLinger(int)
{
int v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setIdleTimeout(int)
{
int v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setReadIdleTimeout(int)
{
int v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReadIdleTimeout(int)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setWriteIdleTimeout(int)
{
int v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setWriteIdleTimeout(int)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setSsl(boolean)
{
io.vertx.core.net.NetServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setUseAlpn(boolean)
{
io.vertx.core.net.NetServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)
{
io.vertx.core.net.SSLEngineOptions v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: io.vertx.core.net.SSLEngineOptions;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)
{
io.vertx.core.net.NetServerOptions v0;
io.vertx.core.net.JdkSSLEngineOptions v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: io.vertx.core.net.JdkSSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(v1);
return v2;
}
public io.vertx.core.net.NetServerOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)
{
io.vertx.core.net.NetServerOptions v0;
io.vertx.core.net.OpenSSLEngineOptions v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: io.vertx.core.net.OpenSSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(v1);
return v2;
}
public io.vertx.core.net.NetServerOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)
{
io.vertx.core.net.NetServerOptions v0;
io.vertx.core.net.KeyCertOptions v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: io.vertx.core.net.KeyCertOptions;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)
{
io.vertx.core.net.NetServerOptions v0;
io.vertx.core.net.JksOptions v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: io.vertx.core.net.JksOptions;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)
{
io.vertx.core.net.NetServerOptions v0;
io.vertx.core.net.PfxOptions v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: io.vertx.core.net.PfxOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(v1);
return v2;
}
public io.vertx.core.net.NetServerOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)
{
io.vertx.core.net.NetServerOptions v0;
io.vertx.core.net.PemKeyCertOptions v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: io.vertx.core.net.PemKeyCertOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(v1);
return v2;
}
public io.vertx.core.net.NetServerOptions setTrustOptions(io.vertx.core.net.TrustOptions)
{
io.vertx.core.net.TrustOptions v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: io.vertx.core.net.TrustOptions;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustOptions(io.vertx.core.net.TrustOptions)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)
{
io.vertx.core.net.NetServerOptions v0;
io.vertx.core.net.JksOptions v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: io.vertx.core.net.JksOptions;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)
{
io.vertx.core.net.NetServerOptions v0;
io.vertx.core.net.PfxOptions v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: io.vertx.core.net.PfxOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(v1);
return v2;
}
public io.vertx.core.net.NetServerOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)
{
io.vertx.core.net.NetServerOptions v0;
io.vertx.core.net.PemTrustOptions v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: io.vertx.core.net.PemTrustOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(v1);
return v2;
}
public io.vertx.core.net.NetServerOptions addEnabledCipherSuite(java.lang.String)
{
io.vertx.core.net.NetServerOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions addEnabledCipherSuite(java.lang.String)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions removeEnabledCipherSuite(java.lang.String)
{
io.vertx.core.net.NetServerOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions removeEnabledCipherSuite(java.lang.String)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions addEnabledSecureTransportProtocol(java.lang.String)
{
io.vertx.core.net.NetServerOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions addEnabledSecureTransportProtocol(java.lang.String)>(v1);
return v0;
}
public io.vertx.core.net.NetServerOptions removeEnabledSecureTransportProtocol(java.lang.String)
{
io.vertx.core.net.NetServerOptions v0;
java.lang.String v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions removeEnabledSecureTransportProtocol(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.net.NetServerOptions setTcpFastOpen(boolean)
{
io.vertx.core.net.NetServerOptions v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>(v1);
return v2;
}
public io.vertx.core.net.NetServerOptions setTcpCork(boolean)
{
io.vertx.core.net.NetServerOptions v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>(v1);
return v2;
}
public io.vertx.core.net.NetServerOptions setTcpQuickAck(boolean)
{
io.vertx.core.net.NetServerOptions v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>(v1);
return v2;
}
public io.vertx.core.net.NetServerOptions addCrlPath(java.lang.String) throws java.lang.NullPointerException
{
io.vertx.core.net.NetServerOptions v0;
java.lang.String v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions addCrlPath(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.net.NetServerOptions addCrlValue(io.vertx.core.buffer.Buffer) throws java.lang.NullPointerException
{
io.vertx.core.net.NetServerOptions v0;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions addCrlValue(io.vertx.core.buffer.Buffer)>(v1);
return v2;
}
public io.vertx.core.net.NetServerOptions setEnabledSecureTransportProtocols(java.util.Set)
{
java.util.Set v1;
io.vertx.core.net.NetServerOptions v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: java.util.Set;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>(v1);
return v2;
}
public io.vertx.core.net.NetServerOptions setSslHandshakeTimeout(long)
{
io.vertx.core.net.NetServerOptions v0;
long v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: long;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslHandshakeTimeout(long)>(v1);
return v2;
}
public io.vertx.core.net.NetServerOptions setSslHandshakeTimeoutUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.net.NetServerOptions v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslHandshakeTimeoutUnit(java.util.concurrent.TimeUnit)>(v1);
return v2;
}
public int getAcceptBacklog()
{
int v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 = v0.<io.vertx.core.net.NetServerOptions: int acceptBacklog>;
return v1;
}
public io.vertx.core.net.NetServerOptions setAcceptBacklog(int)
{
int v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.net.NetServerOptions: int acceptBacklog> = v1;
return v0;
}
public int getPort()
{
int v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 = v0.<io.vertx.core.net.NetServerOptions: int port>;
return v1;
}
public io.vertx.core.net.NetServerOptions setPort(int)
{
io.vertx.core.net.NetServerOptions v0;
int v1, v2;
java.lang.IllegalArgumentException v3;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: int;
v2 = (int) 65535;
if v1 <= v2 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("port must be <= 65535");
throw v3;
label1:
v0.<io.vertx.core.net.NetServerOptions: int port> = v1;
return v0;
}
public java.lang.String getHost()
{
io.vertx.core.net.NetServerOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 = v0.<io.vertx.core.net.NetServerOptions: java.lang.String host>;
return v1;
}
public io.vertx.core.net.NetServerOptions setHost(java.lang.String)
{
io.vertx.core.net.NetServerOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.net.NetServerOptions: java.lang.String host> = v1;
return v0;
}
public io.vertx.core.http.ClientAuth getClientAuth()
{
io.vertx.core.http.ClientAuth v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 = v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.http.ClientAuth clientAuth>;
return v1;
}
public io.vertx.core.net.NetServerOptions setClientAuth(io.vertx.core.http.ClientAuth)
{
io.vertx.core.http.ClientAuth v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: io.vertx.core.http.ClientAuth;
v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.http.ClientAuth clientAuth> = v1;
return v0;
}
public io.vertx.core.net.NetServerOptions setLogActivity(boolean)
{
io.vertx.core.net.NetServerOptions v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>(v1);
return v2;
}
public io.vertx.core.net.NetServerOptions setActivityLogDataFormat(io.netty.handler.logging.ByteBufFormat)
{
io.vertx.core.net.NetServerOptions v0;
io.netty.handler.logging.ByteBufFormat v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: io.netty.handler.logging.ByteBufFormat;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setActivityLogDataFormat(io.netty.handler.logging.ByteBufFormat)>(v1);
return v2;
}
public boolean isSni()
{
io.vertx.core.net.NetServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 = v0.<io.vertx.core.net.NetServerOptions: boolean sni>;
return v1;
}
public io.vertx.core.net.NetServerOptions setSni(boolean)
{
io.vertx.core.net.NetServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.net.NetServerOptions: boolean sni> = v1;
return v0;
}
public boolean isUseProxyProtocol()
{
io.vertx.core.net.NetServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 = v0.<io.vertx.core.net.NetServerOptions: boolean useProxyProtocol>;
return v1;
}
public io.vertx.core.net.NetServerOptions setUseProxyProtocol(boolean)
{
io.vertx.core.net.NetServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.net.NetServerOptions: boolean useProxyProtocol> = v1;
return v0;
}
public long getProxyProtocolTimeout()
{
io.vertx.core.net.NetServerOptions v0;
long v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 = v0.<io.vertx.core.net.NetServerOptions: long proxyProtocolTimeout>;
return v1;
}
public io.vertx.core.net.NetServerOptions setProxyProtocolTimeout(long)
{
io.vertx.core.net.NetServerOptions v0;
byte v2;
long v1;
java.lang.IllegalArgumentException v3;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("proxyProtocolTimeout must be >= 0");
throw v3;
label1:
v0.<io.vertx.core.net.NetServerOptions: long proxyProtocolTimeout> = v1;
return v0;
}
public io.vertx.core.net.NetServerOptions setProxyProtocolTimeoutUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
v0.<io.vertx.core.net.NetServerOptions: java.util.concurrent.TimeUnit proxyProtocolTimeoutUnit> = v1;
return v0;
}
public java.util.concurrent.TimeUnit getProxyProtocolTimeoutUnit()
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.net.NetServerOptions v0;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 = v0.<io.vertx.core.net.NetServerOptions: java.util.concurrent.TimeUnit proxyProtocolTimeoutUnit>;
return v1;
}
private void init()
{
java.util.concurrent.TimeUnit v3;
io.vertx.core.net.NetServerOptions v0;
int v1;
io.vertx.core.http.ClientAuth v2;
v0 := @this: io.vertx.core.net.NetServerOptions;
v0.<io.vertx.core.net.NetServerOptions: int port> = 0;
v0.<io.vertx.core.net.NetServerOptions: java.lang.String host> = "0.0.0.0";
v1 = (int) -1;
v0.<io.vertx.core.net.NetServerOptions: int acceptBacklog> = v1;
v2 = <io.vertx.core.net.NetServerOptions: io.vertx.core.http.ClientAuth DEFAULT_CLIENT_AUTH>;
v0.<io.vertx.core.net.NetServerOptions: io.vertx.core.http.ClientAuth clientAuth> = v2;
v0.<io.vertx.core.net.NetServerOptions: boolean sni> = 0;
v0.<io.vertx.core.net.NetServerOptions: boolean useProxyProtocol> = 0;
v0.<io.vertx.core.net.NetServerOptions: long proxyProtocolTimeout> = 10L;
v3 = <io.vertx.core.net.NetServerOptions: java.util.concurrent.TimeUnit DEFAULT_PROXY_PROTOCOL_TIMEOUT_TIME_UNIT>;
v0.<io.vertx.core.net.NetServerOptions: java.util.concurrent.TimeUnit proxyProtocolTimeoutUnit> = v3;
v0.<io.vertx.core.net.NetServerOptions: boolean registerWriteHandler> = 0;
return;
}
public boolean isRegisterWriteHandler()
{
io.vertx.core.net.NetServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 = v0.<io.vertx.core.net.NetServerOptions: boolean registerWriteHandler>;
return v1;
}
public io.vertx.core.net.NetServerOptions setRegisterWriteHandler(boolean)
{
io.vertx.core.net.NetServerOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.NetServerOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.net.NetServerOptions: boolean registerWriteHandler> = v1;
return v0;
}
static void <clinit>()
{
io.vertx.core.http.ClientAuth v0;
java.util.concurrent.TimeUnit v1;
v0 = <io.vertx.core.http.ClientAuth: io.vertx.core.http.ClientAuth NONE>;
<io.vertx.core.net.NetServerOptions: io.vertx.core.http.ClientAuth DEFAULT_CLIENT_AUTH> = v0;
v1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
<io.vertx.core.net.NetServerOptions: java.util.concurrent.TimeUnit DEFAULT_PROXY_PROTOCOL_TIMEOUT_TIME_UNIT> = v1;
return;
}
}