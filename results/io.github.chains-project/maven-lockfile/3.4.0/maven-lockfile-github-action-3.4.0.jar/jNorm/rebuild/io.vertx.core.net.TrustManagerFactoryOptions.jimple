class io.vertx.core.net.TrustManagerFactoryOptions extends java.lang.Object implements io.vertx.core.net.TrustOptions
{
private final javax.net.ssl.TrustManagerFactory trustManagerFactory;
void <init>(javax.net.ssl.TrustManagerFactory)
{
javax.net.ssl.TrustManagerFactory v1;
javax.net.ssl.TrustManager[] v2, v3;
int v4;
java.lang.IllegalArgumentException v5;
io.vertx.core.net.TrustManagerFactoryOptions v0;
v0 := @this: io.vertx.core.net.TrustManagerFactoryOptions;
v1 := @parameter0: javax.net.ssl.TrustManagerFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
if v1 == null goto label1;
v2 = virtualinvoke v1.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();
if v2 == null goto label1;
v3 = virtualinvoke v1.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();
v4 = lengthof v3;
if v4 != 0 goto label2;
label1:
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TrustManagerFactory is not present or is not initialized yet");
throw v5;
label2:
v0.<io.vertx.core.net.TrustManagerFactoryOptions: javax.net.ssl.TrustManagerFactory trustManagerFactory> = v1;
return;
}
void <init>(javax.net.ssl.TrustManager)
{
io.vertx.core.net.TrustManagerFactoryWrapper v2;
javax.net.ssl.TrustManager v1;
io.vertx.core.net.TrustManagerFactoryOptions v0;
v0 := @this: io.vertx.core.net.TrustManagerFactoryOptions;
v1 := @parameter0: javax.net.ssl.TrustManager;
v2 = new io.vertx.core.net.TrustManagerFactoryWrapper;
specialinvoke v2.<io.vertx.core.net.TrustManagerFactoryWrapper: void <init>(javax.net.ssl.TrustManager)>(v1);
specialinvoke v0.<io.vertx.core.net.TrustManagerFactoryOptions: void <init>(javax.net.ssl.TrustManagerFactory)>(v2);
return;
}
private void <init>(io.vertx.core.net.TrustManagerFactoryOptions)
{
javax.net.ssl.TrustManagerFactory v2;
io.vertx.core.net.TrustManagerFactoryOptions v0, v1;
v0 := @this: io.vertx.core.net.TrustManagerFactoryOptions;
v1 := @parameter0: io.vertx.core.net.TrustManagerFactoryOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = v1.<io.vertx.core.net.TrustManagerFactoryOptions: javax.net.ssl.TrustManagerFactory trustManagerFactory>;
v0.<io.vertx.core.net.TrustManagerFactoryOptions: javax.net.ssl.TrustManagerFactory trustManagerFactory> = v2;
return;
}
public io.vertx.core.net.TrustOptions copy()
{
io.vertx.core.net.TrustManagerFactoryOptions v0, v1;
v0 := @this: io.vertx.core.net.TrustManagerFactoryOptions;
v1 = new io.vertx.core.net.TrustManagerFactoryOptions;
specialinvoke v1.<io.vertx.core.net.TrustManagerFactoryOptions: void <init>(io.vertx.core.net.TrustManagerFactoryOptions)>(v0);
return v1;
}
public javax.net.ssl.TrustManagerFactory getTrustManagerFactory(io.vertx.core.Vertx)
{
io.vertx.core.Vertx v1;
javax.net.ssl.TrustManagerFactory v2;
io.vertx.core.net.TrustManagerFactoryOptions v0;
v0 := @this: io.vertx.core.net.TrustManagerFactoryOptions;
v1 := @parameter0: io.vertx.core.Vertx;
v2 = v0.<io.vertx.core.net.TrustManagerFactoryOptions: javax.net.ssl.TrustManagerFactory trustManagerFactory>;
return v2;
}
public java.util.function.Function trustManagerMapper(io.vertx.core.Vertx)
{
io.vertx.core.Vertx v1;
java.util.function.Function v2;
io.vertx.core.net.TrustManagerFactoryOptions v0;
v0 := @this: io.vertx.core.net.TrustManagerFactoryOptions;
v1 := @parameter0: io.vertx.core.Vertx;
v2 = staticinvoke <io.vertx.core.net.TrustManagerFactoryOptions$lambda_trustManagerMapper_0__1293: java.util.function.Function bootstrap$(io.vertx.core.net.TrustManagerFactoryOptions)>(v0);
return v2;
}
}