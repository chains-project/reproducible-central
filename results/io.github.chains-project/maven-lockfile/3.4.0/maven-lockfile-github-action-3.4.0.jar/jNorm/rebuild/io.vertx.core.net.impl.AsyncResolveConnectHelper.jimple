public class io.vertx.core.net.impl.AsyncResolveConnectHelper extends java.lang.Object
{
public void <init>()
{
io.vertx.core.net.impl.AsyncResolveConnectHelper v0;
v0 := @this: io.vertx.core.net.impl.AsyncResolveConnectHelper;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static io.netty.util.concurrent.Future doBind(io.vertx.core.impl.VertxInternal, io.vertx.core.net.SocketAddress, io.netty.bootstrap.ServerBootstrap)
{
java.net.SocketAddress v12;
io.vertx.core.spi.transport.Transport v11, v6;
java.net.InetAddress v16, v17;
io.netty.channel.ChannelFactory v8;
java.lang.String v19;
boolean v10, v7;
io.vertx.core.net.SocketAddress v1;
io.netty.channel.EventLoopGroup v3;
io.vertx.core.impl.VertxInternal v0;
io.netty.util.concurrent.Promise v5;
io.netty.util.concurrent.GenericFutureListener v14;
io.netty.channel.EventLoop v4;
io.vertx.core.Future v18;
java.lang.Exception v9;
io.netty.channel.ChannelFuture v13;
io.netty.bootstrap.ServerBootstrap v2;
io.vertx.core.Handler v15;
v0 := @parameter0: io.vertx.core.impl.VertxInternal;
v1 := @parameter1: io.vertx.core.net.SocketAddress;
v2 := @parameter2: io.netty.bootstrap.ServerBootstrap;
v3 = interfaceinvoke v0.<io.vertx.core.impl.VertxInternal: io.netty.channel.EventLoopGroup getAcceptorEventLoopGroup()>();
v4 = interfaceinvoke v3.<io.netty.channel.EventLoopGroup: io.netty.channel.EventLoop next()>();
v5 = interfaceinvoke v4.<io.netty.channel.EventLoop: io.netty.util.concurrent.Promise newPromise()>();
label1:
v6 = interfaceinvoke v0.<io.vertx.core.impl.VertxInternal: io.vertx.core.spi.transport.Transport transport()>();
v7 = interfaceinvoke v1.<io.vertx.core.net.SocketAddress: boolean isDomainSocket()>();
v8 = interfaceinvoke v6.<io.vertx.core.spi.transport.Transport: io.netty.channel.ChannelFactory serverChannelFactory(boolean)>(v7);
virtualinvoke v2.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.AbstractBootstrap channelFactory(io.netty.channel.ChannelFactory)>(v8);
label2:
goto label4;
label3:
v9 := @caughtexception;
interfaceinvoke v5.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v9);
return v5;
label4:
v10 = interfaceinvoke v1.<io.vertx.core.net.SocketAddress: boolean isDomainSocket()>();
if v10 == 0 goto label5;
v11 = interfaceinvoke v0.<io.vertx.core.impl.VertxInternal: io.vertx.core.spi.transport.Transport transport()>();
v12 = interfaceinvoke v11.<io.vertx.core.spi.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress)>(v1);
v13 = virtualinvoke v2.<io.netty.bootstrap.ServerBootstrap: io.netty.channel.ChannelFuture bind(java.net.SocketAddress)>(v12);
v14 = staticinvoke <io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_doBind_0__1319: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.netty.util.concurrent.Promise,io.netty.channel.ChannelFuture)>(v5, v13);
interfaceinvoke v13.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v14);
goto label7;
label5:
v15 = staticinvoke <io.vertx.core.net.impl.AsyncResolveConnectHelper$lambda_doBind_2__1318: io.vertx.core.Handler bootstrap$(io.vertx.core.net.SocketAddress,io.netty.bootstrap.ServerBootstrap,io.netty.util.concurrent.Promise)>(v1, v2, v5);
v16 = virtualinvoke v1.<io.vertx.core.net.impl.SocketAddressImpl: java.net.InetAddress ipAddress()>();
if v16 == null goto label6;
v17 = virtualinvoke v1.<io.vertx.core.net.impl.SocketAddressImpl: java.net.InetAddress ipAddress()>();
v18 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture(java.lang.Object)>(v17);
interfaceinvoke v15.<io.vertx.core.Handler: void handle(java.lang.Object)>(v18);
goto label7;
label6:
v19 = interfaceinvoke v1.<io.vertx.core.net.SocketAddress: java.lang.String host()>();
interfaceinvoke v0.<io.vertx.core.impl.VertxInternal: void resolveAddress(java.lang.String,io.vertx.core.Handler)>(v19, v15);
label7:
return v5;
catch java.lang.Exception from label1 to label2 with label3;
}
}