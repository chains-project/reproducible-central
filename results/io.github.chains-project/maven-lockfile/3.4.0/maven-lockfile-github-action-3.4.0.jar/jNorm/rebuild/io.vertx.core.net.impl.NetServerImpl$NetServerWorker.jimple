class io.vertx.core.net.impl.NetServerImpl$NetServerWorker extends java.lang.Object implements java.util.function.BiConsumer
{
private final io.vertx.core.impl.ContextInternal context;
private final io.vertx.core.Handler connectionHandler;
private final io.vertx.core.Handler exceptionHandler;
final io.vertx.core.net.impl.NetServerImpl this$0;
void <init>(io.vertx.core.net.impl.NetServerImpl, io.vertx.core.impl.ContextInternal, io.vertx.core.Handler, io.vertx.core.Handler)
{
io.vertx.core.net.impl.NetServerImpl v1;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.Handler v3, v4;
io.vertx.core.net.impl.NetServerImpl$NetServerWorker v0;
v0 := @this: io.vertx.core.net.impl.NetServerImpl$NetServerWorker;
v1 := @parameter0: io.vertx.core.net.impl.NetServerImpl;
v2 := @parameter1: io.vertx.core.impl.ContextInternal;
v3 := @parameter2: io.vertx.core.Handler;
v4 := @parameter3: io.vertx.core.Handler;
v0.<io.vertx.core.net.impl.NetServerImpl$NetServerWorker: io.vertx.core.net.impl.NetServerImpl this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.net.impl.NetServerImpl$NetServerWorker: io.vertx.core.impl.ContextInternal context> = v2;
v0.<io.vertx.core.net.impl.NetServerImpl$NetServerWorker: io.vertx.core.Handler connectionHandler> = v3;
v0.<io.vertx.core.net.impl.NetServerImpl$NetServerWorker: io.vertx.core.Handler exceptionHandler> = v4;
return;
}
public void accept(io.netty.channel.Channel, io.vertx.core.net.impl.SslChannelProvider)
{
io.vertx.core.net.impl.HAProxyMessageCompletionHandler v29;
io.vertx.core.net.impl.NetServerImpl v14, v20, v23, v3, v5;
long v16, v22;
byte v17;
boolean v4, v7, v8;
io.netty.util.concurrent.Promise v10;
io.netty.util.concurrent.GenericFutureListener v30;
io.netty.channel.ChannelPipeline v11, v18, v27;
io.netty.channel.EventLoop v9;
io.netty.channel.ChannelHandler[] v12, v28;
io.vertx.core.net.impl.NetServerImpl$NetServerWorker v0;
io.netty.channel.Channel v1;
java.util.concurrent.TimeUnit v25;
io.netty.handler.codec.haproxy.HAProxyMessageDecoder v13;
io.netty.handler.timeout.IdleStateHandler v19, v26;
io.vertx.core.net.NetServerOptions v15, v21, v24, v6;
io.vertx.core.net.impl.SslChannelProvider v2;
v0 := @this: io.vertx.core.net.impl.NetServerImpl$NetServerWorker;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.vertx.core.net.impl.SslChannelProvider;
v3 = v0.<io.vertx.core.net.impl.NetServerImpl$NetServerWorker: io.vertx.core.net.impl.NetServerImpl this$0>;
v4 = virtualinvoke v3.<io.vertx.core.net.impl.NetServerImpl: boolean accept()>();
if v4 != 0 goto label1;
interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelFuture close()>();
return;
label1:
v5 = v0.<io.vertx.core.net.impl.NetServerImpl$NetServerWorker: io.vertx.core.net.impl.NetServerImpl this$0>;
v6 = v5.<io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServerOptions options>;
v7 = virtualinvoke v6.<io.vertx.core.net.NetServerOptions: boolean isUseProxyProtocol()>();
v8 = staticinvoke <io.vertx.core.net.impl.HAProxyMessageCompletionHandler: boolean canUseProxyProtocol(boolean)>(v7);
if v8 == 0 goto label4;
v9 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v10 = interfaceinvoke v9.<io.netty.channel.EventLoop: io.netty.util.concurrent.Promise newPromise()>();
v11 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v12 = newarray (io.netty.channel.ChannelHandler)[1];
v13 = new io.netty.handler.codec.haproxy.HAProxyMessageDecoder;
specialinvoke v13.<io.netty.handler.codec.haproxy.HAProxyMessageDecoder: void <init>()>();
v12[0] = v13;
interfaceinvoke v11.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.channel.ChannelHandler[])>(v12);
v14 = v0.<io.vertx.core.net.impl.NetServerImpl$NetServerWorker: io.vertx.core.net.impl.NetServerImpl this$0>;
v15 = v14.<io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServerOptions options>;
v16 = virtualinvoke v15.<io.vertx.core.net.NetServerOptions: long getProxyProtocolTimeout()>();
v17 = v16 cmp 0L;
if v17 <= 0 goto label2;
v18 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v19 = new io.netty.handler.timeout.IdleStateHandler;
v20 = v0.<io.vertx.core.net.impl.NetServerImpl$NetServerWorker: io.vertx.core.net.impl.NetServerImpl this$0>;
v21 = v20.<io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServerOptions options>;
v22 = virtualinvoke v21.<io.vertx.core.net.NetServerOptions: long getProxyProtocolTimeout()>();
v23 = v0.<io.vertx.core.net.impl.NetServerImpl$NetServerWorker: io.vertx.core.net.impl.NetServerImpl this$0>;
v24 = v23.<io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServerOptions options>;
v25 = virtualinvoke v24.<io.vertx.core.net.NetServerOptions: java.util.concurrent.TimeUnit getProxyProtocolTimeoutUnit()>();
specialinvoke v19.<io.netty.handler.timeout.IdleStateHandler: void <init>(long,long,long,java.util.concurrent.TimeUnit)>(0L, 0L, v22, v25);
v26 = v19;
interfaceinvoke v18.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(java.lang.String,io.netty.channel.ChannelHandler)>("idle", v19);
goto label3;
label2:
v26 = null;
label3:
v27 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v28 = newarray (io.netty.channel.ChannelHandler)[1];
v29 = new io.vertx.core.net.impl.HAProxyMessageCompletionHandler;
specialinvoke v29.<io.vertx.core.net.impl.HAProxyMessageCompletionHandler: void <init>(io.netty.util.concurrent.Promise)>(v10);
v28[0] = v29;
interfaceinvoke v27.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.channel.ChannelHandler[])>(v28);
v30 = staticinvoke <io.vertx.core.net.impl.NetServerImpl$NetServerWorker$lambda_accept_0__1360: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.net.impl.NetServerImpl$NetServerWorker,io.netty.handler.timeout.IdleStateHandler,io.netty.channel.Channel,io.vertx.core.net.impl.SslChannelProvider)>(v0, v26, v1, v2);
interfaceinvoke v10.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)>(v30);
goto label5;
label4:
specialinvoke v0.<io.vertx.core.net.impl.NetServerImpl$NetServerWorker: void configurePipeline(io.netty.channel.Channel,io.vertx.core.net.impl.SslChannelProvider)>(v1, v2);
label5:
return;
}
private void configurePipeline(io.netty.channel.Channel, io.vertx.core.net.impl.SslChannelProvider)
{
io.vertx.core.net.impl.NetServerImpl v3;
io.netty.util.concurrent.GenericFutureListener v11;
io.vertx.core.net.impl.SslHandshakeCompletionHandler v10;
io.netty.channel.ChannelPipeline v6, v9;
io.vertx.core.net.impl.NetServerImpl$NetServerWorker v0;
io.netty.channel.Channel v1;
io.vertx.core.net.NetServerOptions v4;
io.netty.channel.ChannelPromise v8;
io.vertx.core.net.impl.SslChannelProvider v2;
io.netty.channel.ChannelHandler v7;
boolean v5;
v0 := @this: io.vertx.core.net.impl.NetServerImpl$NetServerWorker;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.vertx.core.net.impl.SslChannelProvider;
v3 = v0.<io.vertx.core.net.impl.NetServerImpl$NetServerWorker: io.vertx.core.net.impl.NetServerImpl this$0>;
v4 = v3.<io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServerOptions options>;
v5 = virtualinvoke v4.<io.vertx.core.net.NetServerOptions: boolean isSsl()>();
if v5 == 0 goto label1;
v6 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v7 = virtualinvoke v2.<io.vertx.core.net.impl.SslChannelProvider: io.netty.channel.ChannelHandler createServerHandler()>();
interfaceinvoke v6.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(java.lang.String,io.netty.channel.ChannelHandler)>("ssl", v7);
v8 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPromise newPromise()>();
v9 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v10 = new io.vertx.core.net.impl.SslHandshakeCompletionHandler;
specialinvoke v10.<io.vertx.core.net.impl.SslHandshakeCompletionHandler: void <init>(io.netty.util.concurrent.Promise)>(v8);
interfaceinvoke v9.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(java.lang.String,io.netty.channel.ChannelHandler)>("handshaker", v10);
v11 = staticinvoke <io.vertx.core.net.impl.NetServerImpl$NetServerWorker$lambda_configurePipeline_1__1361: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.net.impl.NetServerImpl$NetServerWorker,io.netty.channel.Channel,io.vertx.core.net.impl.SslChannelProvider)>(v0, v1, v2);
interfaceinvoke v8.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)>(v11);
goto label2;
label1:
specialinvoke v0.<io.vertx.core.net.impl.NetServerImpl$NetServerWorker: void connected(io.netty.channel.Channel,io.vertx.core.net.impl.SslChannelProvider)>(v1, v2);
label2:
return;
}
private void handleException(java.lang.Throwable)
{
java.lang.Throwable v1;
io.vertx.core.impl.ContextInternal v3;
io.vertx.core.Handler v2, v4;
io.vertx.core.net.impl.NetServerImpl$NetServerWorker v0;
v0 := @this: io.vertx.core.net.impl.NetServerImpl$NetServerWorker;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.vertx.core.net.impl.NetServerImpl$NetServerWorker: io.vertx.core.Handler exceptionHandler>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.net.impl.NetServerImpl$NetServerWorker: io.vertx.core.impl.ContextInternal context>;
v4 = staticinvoke <io.vertx.core.net.impl.NetServerImpl$NetServerWorker$lambda_handleException_2__1362: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.NetServerImpl$NetServerWorker,java.lang.Throwable)>(v0, v1);
interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: void emit(io.vertx.core.Handler)>(v4);
label1:
return;
}
private void connected(io.netty.channel.Channel, io.vertx.core.net.impl.SslChannelProvider)
{
io.vertx.core.net.impl.VertxHandler v11;
io.vertx.core.net.impl.NetServerImpl v3, v5, v8;
io.vertx.core.spi.metrics.TCPMetrics v9;
io.netty.channel.ChannelPipeline v14, v4;
java.util.function.Function v10;
io.vertx.core.net.impl.NetServerImpl$NetServerWorker v0;
io.netty.channel.Channel v1;
io.vertx.core.net.NetServerOptions v6;
io.vertx.core.net.impl.SslChannelProvider v2;
io.vertx.core.Handler v12, v13;
boolean v7;
v0 := @this: io.vertx.core.net.impl.NetServerImpl$NetServerWorker;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.vertx.core.net.impl.SslChannelProvider;
v3 = v0.<io.vertx.core.net.impl.NetServerImpl$NetServerWorker: io.vertx.core.net.impl.NetServerImpl this$0>;
v4 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v5 = v0.<io.vertx.core.net.impl.NetServerImpl$NetServerWorker: io.vertx.core.net.impl.NetServerImpl this$0>;
v6 = v5.<io.vertx.core.net.impl.NetServerImpl: io.vertx.core.net.NetServerOptions options>;
v7 = virtualinvoke v6.<io.vertx.core.net.NetServerOptions: boolean isSsl()>();
virtualinvoke v3.<io.vertx.core.net.impl.NetServerImpl: void initChannel(io.netty.channel.ChannelPipeline,boolean)>(v4, v7);
v8 = v0.<io.vertx.core.net.impl.NetServerImpl$NetServerWorker: io.vertx.core.net.impl.NetServerImpl this$0>;
v9 = virtualinvoke v8.<io.vertx.core.net.impl.NetServerImpl: io.vertx.core.spi.metrics.TCPMetrics getMetrics()>();
v10 = staticinvoke <io.vertx.core.net.impl.NetServerImpl$NetServerWorker$lambda_connected_3__1363: java.util.function.Function bootstrap$(io.vertx.core.net.impl.NetServerImpl$NetServerWorker,io.vertx.core.net.impl.SslChannelProvider,io.vertx.core.spi.metrics.TCPMetrics)>(v0, v2, v9);
v11 = staticinvoke <io.vertx.core.net.impl.VertxHandler: io.vertx.core.net.impl.VertxHandler create(java.util.function.Function)>(v10);
v12 = staticinvoke <io.vertx.core.net.impl.NetServerImpl$NetServerWorker$unregisterEventBusHandler__1364: io.vertx.core.Handler bootstrap$()>();
virtualinvoke v11.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.net.impl.VertxHandler removeHandler(io.vertx.core.Handler)>(v12);
v13 = staticinvoke <io.vertx.core.net.impl.NetServerImpl$NetServerWorker$lambda_connected_4__1365: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.NetServerImpl$NetServerWorker,io.vertx.core.spi.metrics.TCPMetrics)>(v0, v9);
virtualinvoke v11.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.net.impl.VertxHandler addHandler(io.vertx.core.Handler)>(v13);
v14 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v14.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(java.lang.String,io.netty.channel.ChannelHandler)>("handler", v11);
return;
}
}