public final class io.vertx.core.net.impl.SslChannelProvider$lambda_serverNameMapping_2__1378 extends java.lang.Object implements io.netty.util.AsyncMapping
{
io.vertx.core.net.impl.SslChannelProvider cap0;
public static io.netty.util.AsyncMapping bootstrap$(io.vertx.core.net.impl.SslChannelProvider)
{
io.vertx.core.net.impl.SslChannelProvider$lambda_serverNameMapping_2__1378 v1;
io.vertx.core.net.impl.SslChannelProvider v0;
v0 := @parameter0: io.vertx.core.net.impl.SslChannelProvider;
v1 = new io.vertx.core.net.impl.SslChannelProvider$lambda_serverNameMapping_2__1378;
specialinvoke v1.<io.vertx.core.net.impl.SslChannelProvider$lambda_serverNameMapping_2__1378: void <init>(io.vertx.core.net.impl.SslChannelProvider)>(v0);
return v1;
}
public void <init>(io.vertx.core.net.impl.SslChannelProvider)
{
io.vertx.core.net.impl.SslChannelProvider$lambda_serverNameMapping_2__1378 v0;
io.vertx.core.net.impl.SslChannelProvider v1;
v0 := @this: io.vertx.core.net.impl.SslChannelProvider$lambda_serverNameMapping_2__1378;
v1 := @parameter0: io.vertx.core.net.impl.SslChannelProvider;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.net.impl.SslChannelProvider$lambda_serverNameMapping_2__1378: io.vertx.core.net.impl.SslChannelProvider cap0> = v1;
return;
}
public io.netty.util.concurrent.Future map(java.lang.Object, io.netty.util.concurrent.Promise)
{
io.netty.util.concurrent.Promise v2;
io.vertx.core.net.impl.SslChannelProvider v3;
io.vertx.core.net.impl.SslChannelProvider$lambda_serverNameMapping_2__1378 v0;
java.lang.Object v1;
io.netty.util.concurrent.Future v4;
v0 := @this: io.vertx.core.net.impl.SslChannelProvider$lambda_serverNameMapping_2__1378;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 = v0.<io.vertx.core.net.impl.SslChannelProvider$lambda_serverNameMapping_2__1378: io.vertx.core.net.impl.SslChannelProvider cap0>;
v4 = specialinvoke v3.<io.vertx.core.net.impl.SslChannelProvider: io.netty.util.concurrent.Future lambda$serverNameMapping$2(java.lang.String,io.netty.util.concurrent.Promise)>(v1, v2);
return v4;
}
}