public class io.vertx.core.net.impl.SslChannelProvider extends java.lang.Object
{
private final long sslHandshakeTimeout;
private final java.util.concurrent.TimeUnit sslHandshakeTimeoutUnit;
private final java.util.concurrent.Executor workerPool;
private final boolean useWorkerPool;
private final boolean sni;
private final boolean useAlpn;
private final boolean trustAll;
private final io.vertx.core.net.impl.SslContextProvider sslContextProvider;
private final io.netty.handler.ssl.SslContext[] sslContexts;
private final java.util.Map[] sslContextMaps;
public void <init>(io.vertx.core.net.impl.SslContextProvider, long, java.util.concurrent.TimeUnit, boolean, boolean, boolean, java.util.concurrent.Executor, boolean)
{
java.util.Map[] v10;
java.util.concurrent.Executor v7;
java.util.concurrent.ConcurrentHashMap v11, v12;
long v2;
io.vertx.core.net.impl.SslContextProvider v1;
java.util.concurrent.TimeUnit v3;
io.vertx.core.net.impl.SslChannelProvider v0;
io.netty.handler.ssl.SslContext[] v9;
boolean v4, v5, v6, v8;
v0 := @this: io.vertx.core.net.impl.SslChannelProvider;
v1 := @parameter0: io.vertx.core.net.impl.SslContextProvider;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
v6 := @parameter5: boolean;
v7 := @parameter6: java.util.concurrent.Executor;
v8 := @parameter7: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v9 = newarray (io.netty.handler.ssl.SslContext)[2];
v0.<io.vertx.core.net.impl.SslChannelProvider: io.netty.handler.ssl.SslContext[] sslContexts> = v9;
v10 = newarray (java.util.Map)[2];
v11 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v11.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v10[0] = v11;
v12 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v12.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v10[1] = v12;
v0.<io.vertx.core.net.impl.SslChannelProvider: java.util.Map[] sslContextMaps> = v10;
v0.<io.vertx.core.net.impl.SslChannelProvider: java.util.concurrent.Executor workerPool> = v7;
v0.<io.vertx.core.net.impl.SslChannelProvider: boolean useWorkerPool> = v8;
v0.<io.vertx.core.net.impl.SslChannelProvider: boolean useAlpn> = v6;
v0.<io.vertx.core.net.impl.SslChannelProvider: boolean sni> = v4;
v0.<io.vertx.core.net.impl.SslChannelProvider: boolean trustAll> = v5;
v0.<io.vertx.core.net.impl.SslChannelProvider: long sslHandshakeTimeout> = v2;
v0.<io.vertx.core.net.impl.SslChannelProvider: java.util.concurrent.TimeUnit sslHandshakeTimeoutUnit> = v3;
v0.<io.vertx.core.net.impl.SslChannelProvider: io.vertx.core.net.impl.SslContextProvider sslContextProvider> = v1;
return;
}
public io.vertx.core.net.impl.SslContextProvider sslContextProvider()
{
io.vertx.core.net.impl.SslChannelProvider v0;
io.vertx.core.net.impl.SslContextProvider v1;
v0 := @this: io.vertx.core.net.impl.SslChannelProvider;
v1 = v0.<io.vertx.core.net.impl.SslChannelProvider: io.vertx.core.net.impl.SslContextProvider sslContextProvider>;
return v1;
}
public io.netty.handler.ssl.SslContext sslClientContext(java.lang.String, boolean)
{
io.netty.handler.ssl.SslContext v4;
io.vertx.core.net.impl.SslChannelProvider v0;
java.lang.String v1;
boolean v2, v3;
v0 := @this: io.vertx.core.net.impl.SslChannelProvider;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 = v0.<io.vertx.core.net.impl.SslChannelProvider: boolean trustAll>;
v4 = virtualinvoke v0.<io.vertx.core.net.impl.SslChannelProvider: io.netty.handler.ssl.SslContext sslClientContext(java.lang.String,boolean,boolean)>(v1, v2, v3);
return v4;
}
public io.netty.handler.ssl.SslContext sslClientContext(java.lang.String, boolean, boolean)
{
io.netty.handler.ssl.SslContext v11, v6;
io.vertx.core.net.impl.SslContextProvider v7;
io.vertx.core.net.impl.VertxSslContext v8;
io.vertx.core.net.impl.SslChannelProvider v0;
int v4;
io.netty.handler.ssl.SslContext[] v10, v5, v9;
java.lang.String v1;
boolean v2, v3;
v0 := @this: io.vertx.core.net.impl.SslChannelProvider;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 := @parameter2: boolean;
v4 = staticinvoke <io.vertx.core.net.impl.SslChannelProvider: int idx(boolean)>(v2);
v5 = v0.<io.vertx.core.net.impl.SslChannelProvider: io.netty.handler.ssl.SslContext[] sslContexts>;
v6 = v5[v4];
if v6 != null goto label1;
v7 = v0.<io.vertx.core.net.impl.SslChannelProvider: io.vertx.core.net.impl.SslContextProvider sslContextProvider>;
v8 = virtualinvoke v7.<io.vertx.core.net.impl.SslContextProvider: io.vertx.core.net.impl.VertxSslContext createClientContext(java.lang.String,boolean,boolean)>(v1, v2, v3);
v9 = v0.<io.vertx.core.net.impl.SslChannelProvider: io.netty.handler.ssl.SslContext[] sslContexts>;
v9[v4] = v8;
label1:
v10 = v0.<io.vertx.core.net.impl.SslChannelProvider: io.netty.handler.ssl.SslContext[] sslContexts>;
v11 = v10[v4];
return v11;
}
public io.netty.handler.ssl.SslContext sslServerContext(boolean)
{
io.netty.handler.ssl.SslContext v4, v9;
io.vertx.core.net.impl.SslContextProvider v6;
io.vertx.core.net.impl.VertxSslContext v7;
io.vertx.core.net.impl.SslChannelProvider v0;
int v2;
io.netty.handler.ssl.SslContext[] v3, v5, v8;
boolean v1;
v0 := @this: io.vertx.core.net.impl.SslChannelProvider;
v1 := @parameter0: boolean;
v2 = staticinvoke <io.vertx.core.net.impl.SslChannelProvider: int idx(boolean)>(v1);
v3 = v0.<io.vertx.core.net.impl.SslChannelProvider: io.netty.handler.ssl.SslContext[] sslContexts>;
v4 = v3[v2];
if v4 != null goto label1;
v5 = v0.<io.vertx.core.net.impl.SslChannelProvider: io.netty.handler.ssl.SslContext[] sslContexts>;
v6 = v0.<io.vertx.core.net.impl.SslChannelProvider: io.vertx.core.net.impl.SslContextProvider sslContextProvider>;
v7 = virtualinvoke v6.<io.vertx.core.net.impl.SslContextProvider: io.vertx.core.net.impl.VertxSslContext createServerContext(boolean)>(v1);
v5[v2] = v7;
label1:
v8 = v0.<io.vertx.core.net.impl.SslChannelProvider: io.netty.handler.ssl.SslContext[] sslContexts>;
v9 = v8[v2];
return v9;
}
public io.netty.util.AsyncMapping serverNameMapping()
{
io.netty.util.AsyncMapping v1;
io.vertx.core.net.impl.SslChannelProvider v0;
v0 := @this: io.vertx.core.net.impl.SslChannelProvider;
v1 = staticinvoke <io.vertx.core.net.impl.SslChannelProvider$lambda_serverNameMapping_2__1378: io.netty.util.AsyncMapping bootstrap$(io.vertx.core.net.impl.SslChannelProvider)>(v0);
return v1;
}
public io.netty.handler.ssl.SslHandler createClientSslHandler(io.vertx.core.net.SocketAddress, java.lang.String, boolean)
{
io.netty.handler.ssl.SslContext v4;
java.util.concurrent.Executor v6;
io.netty.buffer.ByteBufAllocator v10, v8;
long v13;
java.util.concurrent.TimeUnit v14;
io.vertx.core.net.impl.SslChannelProvider v0;
io.netty.handler.ssl.SslHandler v9;
int v12;
java.lang.String v11, v2;
boolean v3, v5, v7;
io.vertx.core.net.SocketAddress v1;
v0 := @this: io.vertx.core.net.impl.SslChannelProvider;
v1 := @parameter0: io.vertx.core.net.SocketAddress;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v4 = virtualinvoke v0.<io.vertx.core.net.impl.SslChannelProvider: io.netty.handler.ssl.SslContext sslClientContext(java.lang.String,boolean)>(v2, v3);
v5 = v0.<io.vertx.core.net.impl.SslChannelProvider: boolean useWorkerPool>;
if v5 == 0 goto label1;
v6 = v0.<io.vertx.core.net.impl.SslChannelProvider: java.util.concurrent.Executor workerPool>;
goto label2;
label1:
v6 = <io.netty.util.concurrent.ImmediateExecutor: io.netty.util.concurrent.ImmediateExecutor INSTANCE>;
label2:
v7 = interfaceinvoke v1.<io.vertx.core.net.SocketAddress: boolean isDomainSocket()>();
if v7 == 0 goto label3;
v8 = <io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBufAllocator DEFAULT>;
v9 = virtualinvoke v4.<io.netty.handler.ssl.SslContext: io.netty.handler.ssl.SslHandler newHandler(io.netty.buffer.ByteBufAllocator,java.util.concurrent.Executor)>(v8, v6);
goto label4;
label3:
v10 = <io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBufAllocator DEFAULT>;
v11 = interfaceinvoke v1.<io.vertx.core.net.SocketAddress: java.lang.String host()>();
v12 = interfaceinvoke v1.<io.vertx.core.net.SocketAddress: int port()>();
v9 = virtualinvoke v4.<io.netty.handler.ssl.SslContext: io.netty.handler.ssl.SslHandler newHandler(io.netty.buffer.ByteBufAllocator,java.lang.String,int,java.util.concurrent.Executor)>(v10, v11, v12, v6);
label4:
v13 = v0.<io.vertx.core.net.impl.SslChannelProvider: long sslHandshakeTimeout>;
v14 = v0.<io.vertx.core.net.impl.SslChannelProvider: java.util.concurrent.TimeUnit sslHandshakeTimeoutUnit>;
virtualinvoke v9.<io.netty.handler.ssl.SslHandler: void setHandshakeTimeout(long,java.util.concurrent.TimeUnit)>(v13, v14);
return v9;
}
public io.netty.channel.ChannelHandler createServerHandler()
{
io.netty.handler.ssl.SniHandler v2;
io.vertx.core.net.impl.SslChannelProvider v0;
io.netty.handler.ssl.SslHandler v4;
boolean v1, v3;
v0 := @this: io.vertx.core.net.impl.SslChannelProvider;
v1 = v0.<io.vertx.core.net.impl.SslChannelProvider: boolean sni>;
if v1 == 0 goto label1;
v2 = specialinvoke v0.<io.vertx.core.net.impl.SslChannelProvider: io.netty.handler.ssl.SniHandler createSniHandler()>();
return v2;
label1:
v3 = v0.<io.vertx.core.net.impl.SslChannelProvider: boolean useAlpn>;
v4 = specialinvoke v0.<io.vertx.core.net.impl.SslChannelProvider: io.netty.handler.ssl.SslHandler createServerSslHandler(boolean)>(v3);
return v4;
}
private io.netty.handler.ssl.SslHandler createServerSslHandler(boolean)
{
io.netty.handler.ssl.SslContext v2;
java.util.concurrent.Executor v4;
io.netty.buffer.ByteBufAllocator v5;
long v7;
java.util.concurrent.TimeUnit v8;
io.vertx.core.net.impl.SslChannelProvider v0;
io.netty.handler.ssl.SslHandler v6;
boolean v1, v3;
v0 := @this: io.vertx.core.net.impl.SslChannelProvider;
v1 := @parameter0: boolean;
v2 = virtualinvoke v0.<io.vertx.core.net.impl.SslChannelProvider: io.netty.handler.ssl.SslContext sslServerContext(boolean)>(v1);
v3 = v0.<io.vertx.core.net.impl.SslChannelProvider: boolean useWorkerPool>;
if v3 == 0 goto label1;
v4 = v0.<io.vertx.core.net.impl.SslChannelProvider: java.util.concurrent.Executor workerPool>;
goto label2;
label1:
v4 = <io.netty.util.concurrent.ImmediateExecutor: io.netty.util.concurrent.ImmediateExecutor INSTANCE>;
label2:
v5 = <io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBufAllocator DEFAULT>;
v6 = virtualinvoke v2.<io.netty.handler.ssl.SslContext: io.netty.handler.ssl.SslHandler newHandler(io.netty.buffer.ByteBufAllocator,java.util.concurrent.Executor)>(v5, v4);
v7 = v0.<io.vertx.core.net.impl.SslChannelProvider: long sslHandshakeTimeout>;
v8 = v0.<io.vertx.core.net.impl.SslChannelProvider: java.util.concurrent.TimeUnit sslHandshakeTimeoutUnit>;
virtualinvoke v6.<io.netty.handler.ssl.SslHandler: void setHandshakeTimeout(long,java.util.concurrent.TimeUnit)>(v7, v8);
return v6;
}
private io.netty.handler.ssl.SniHandler createSniHandler()
{
java.util.concurrent.Executor v2;
long v6, v7;
java.util.concurrent.TimeUnit v5;
io.vertx.core.net.impl.SslChannelProvider v0;
io.vertx.core.net.impl.VertxSniHandler v3;
io.netty.util.AsyncMapping v4;
boolean v1;
v0 := @this: io.vertx.core.net.impl.SslChannelProvider;
v1 = v0.<io.vertx.core.net.impl.SslChannelProvider: boolean useWorkerPool>;
if v1 == 0 goto label1;
v2 = v0.<io.vertx.core.net.impl.SslChannelProvider: java.util.concurrent.Executor workerPool>;
goto label2;
label1:
v2 = <io.netty.util.concurrent.ImmediateExecutor: io.netty.util.concurrent.ImmediateExecutor INSTANCE>;
label2:
v3 = new io.vertx.core.net.impl.VertxSniHandler;
v4 = virtualinvoke v0.<io.vertx.core.net.impl.SslChannelProvider: io.netty.util.AsyncMapping serverNameMapping()>();
v5 = v0.<io.vertx.core.net.impl.SslChannelProvider: java.util.concurrent.TimeUnit sslHandshakeTimeoutUnit>;
v6 = v0.<io.vertx.core.net.impl.SslChannelProvider: long sslHandshakeTimeout>;
v7 = virtualinvoke v5.<java.util.concurrent.TimeUnit: long toMillis(long)>(v6);
specialinvoke v3.<io.vertx.core.net.impl.VertxSniHandler: void <init>(io.netty.util.AsyncMapping,long,java.util.concurrent.Executor)>(v4, v7, v2);
return v3;
}
private static int idx(boolean)
{
byte v1;
boolean v0;
v0 := @parameter0: boolean;
if v0 == 0 goto label1;
v1 = 0;
goto label2;
label1:
v1 = 1;
label2:
return v1;
}
}