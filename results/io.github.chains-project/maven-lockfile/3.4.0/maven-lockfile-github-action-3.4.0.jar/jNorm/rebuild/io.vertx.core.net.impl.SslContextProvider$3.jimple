class io.vertx.core.net.impl.SslContextProvider$3 extends java.lang.Object implements javax.net.ssl.X509TrustManager
{
final javax.net.ssl.X509TrustManager val$x509TrustManager;
final java.util.List val$crls;
void <init>(javax.net.ssl.X509TrustManager, java.util.List)
{
java.util.List v2;
io.vertx.core.net.impl.SslContextProvider$3 v0;
javax.net.ssl.X509TrustManager v1;
v0 := @this: io.vertx.core.net.impl.SslContextProvider$3;
v1 := @parameter0: javax.net.ssl.X509TrustManager;
v2 := @parameter1: java.util.List;
v0.<io.vertx.core.net.impl.SslContextProvider$3: javax.net.ssl.X509TrustManager val$x509TrustManager> = v1;
v0.<io.vertx.core.net.impl.SslContextProvider$3: java.util.List val$crls> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String) throws java.security.cert.CertificateException
{
javax.net.ssl.X509TrustManager v3;
java.lang.String v2;
io.vertx.core.net.impl.SslContextProvider$3 v0;
java.security.cert.X509Certificate[] v1;
v0 := @this: io.vertx.core.net.impl.SslContextProvider$3;
v1 := @parameter0: java.security.cert.X509Certificate[];
v2 := @parameter1: java.lang.String;
specialinvoke v0.<io.vertx.core.net.impl.SslContextProvider$3: void checkRevoked(java.security.cert.X509Certificate[])>(v1);
v3 = v0.<io.vertx.core.net.impl.SslContextProvider$3: javax.net.ssl.X509TrustManager val$x509TrustManager>;
interfaceinvoke v3.<javax.net.ssl.X509TrustManager: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)>(v1, v2);
return;
}
public void checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String) throws java.security.cert.CertificateException
{
javax.net.ssl.X509TrustManager v3;
java.lang.String v2;
io.vertx.core.net.impl.SslContextProvider$3 v0;
java.security.cert.X509Certificate[] v1;
v0 := @this: io.vertx.core.net.impl.SslContextProvider$3;
v1 := @parameter0: java.security.cert.X509Certificate[];
v2 := @parameter1: java.lang.String;
specialinvoke v0.<io.vertx.core.net.impl.SslContextProvider$3: void checkRevoked(java.security.cert.X509Certificate[])>(v1);
v3 = v0.<io.vertx.core.net.impl.SslContextProvider$3: javax.net.ssl.X509TrustManager val$x509TrustManager>;
interfaceinvoke v3.<javax.net.ssl.X509TrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>(v1, v2);
return;
}
private void checkRevoked(java.security.cert.X509Certificate[]) throws java.security.cert.CertificateException
{
java.security.cert.X509Certificate v4;
java.util.Iterator v6;
java.security.cert.CertificateException v10;
java.util.List v5;
int v2, v3;
java.lang.Object v8;
io.vertx.core.net.impl.SslContextProvider$3 v0;
java.security.cert.X509Certificate[] v1;
boolean v7, v9;
v0 := @this: io.vertx.core.net.impl.SslContextProvider$3;
v1 := @parameter0: java.security.cert.X509Certificate[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label4;
v4 = v1[v3];
v5 = v0.<io.vertx.core.net.impl.SslContextProvider$3: java.util.List val$crls>;
v6 = interfaceinvoke v5.<java.util.List: java.util.Iterator iterator()>();
label2:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label3;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = virtualinvoke v8.<java.security.cert.CRL: boolean isRevoked(java.security.cert.Certificate)>(v4);
if v9 == 0 goto label2;
v10 = new java.security.cert.CertificateException;
specialinvoke v10.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Certificate revoked");
throw v10;
label3:
v3 = v3 + 1;
goto label1;
label4:
return;
}
public java.security.cert.X509Certificate[] getAcceptedIssuers()
{
io.vertx.core.net.impl.SslContextProvider$3 v0;
java.security.cert.X509Certificate[] v2;
javax.net.ssl.X509TrustManager v1;
v0 := @this: io.vertx.core.net.impl.SslContextProvider$3;
v1 = v0.<io.vertx.core.net.impl.SslContextProvider$3: javax.net.ssl.X509TrustManager val$x509TrustManager>;
v2 = interfaceinvoke v1.<javax.net.ssl.X509TrustManager: java.security.cert.X509Certificate[] getAcceptedIssuers()>();
return v2;
}
}