public class io.vertx.core.net.impl.SslContextProvider extends java.lang.Object
{
private final java.util.function.Supplier provider;
private final java.util.Set enabledProtocols;
private final java.util.List crls;
private final io.vertx.core.http.ClientAuth clientAuth;
private final java.util.Set enabledCipherSuites;
private final java.util.List applicationProtocols;
private final java.lang.String endpointIdentificationAlgorithm;
private final javax.net.ssl.KeyManagerFactory keyManagerFactory;
private final javax.net.ssl.TrustManagerFactory trustManagerFactory;
private final java.util.function.Function keyManagerFactoryMapper;
private final java.util.function.Function trustManagerMapper;
public void <init>(io.vertx.core.http.ClientAuth, java.lang.String, java.util.List, java.util.Set, java.util.Set, javax.net.ssl.KeyManagerFactory, java.util.function.Function, javax.net.ssl.TrustManagerFactory, java.util.function.Function, java.util.List, java.util.function.Supplier)
{
javax.net.ssl.TrustManagerFactory v8;
java.util.Set v4, v5;
javax.net.ssl.KeyManagerFactory v6;
java.util.function.Function v7, v9;
java.util.function.Supplier v11;
io.vertx.core.net.impl.SslContextProvider v0;
java.util.HashSet v12;
java.util.List v10, v3;
io.vertx.core.http.ClientAuth v1;
java.lang.String v2;
v0 := @this: io.vertx.core.net.impl.SslContextProvider;
v1 := @parameter0: io.vertx.core.http.ClientAuth;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.util.List;
v4 := @parameter3: java.util.Set;
v5 := @parameter4: java.util.Set;
v6 := @parameter5: javax.net.ssl.KeyManagerFactory;
v7 := @parameter6: java.util.function.Function;
v8 := @parameter7: javax.net.ssl.TrustManagerFactory;
v9 := @parameter8: java.util.function.Function;
v10 := @parameter9: java.util.List;
v11 := @parameter10: java.util.function.Supplier;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.net.impl.SslContextProvider: java.util.function.Supplier provider> = v11;
v0.<io.vertx.core.net.impl.SslContextProvider: io.vertx.core.http.ClientAuth clientAuth> = v1;
v0.<io.vertx.core.net.impl.SslContextProvider: java.lang.String endpointIdentificationAlgorithm> = v2;
v0.<io.vertx.core.net.impl.SslContextProvider: java.util.List applicationProtocols> = v3;
v12 = new java.util.HashSet;
specialinvoke v12.<java.util.HashSet: void <init>(java.util.Collection)>(v4);
v0.<io.vertx.core.net.impl.SslContextProvider: java.util.Set enabledCipherSuites> = v12;
v0.<io.vertx.core.net.impl.SslContextProvider: java.util.Set enabledProtocols> = v5;
v0.<io.vertx.core.net.impl.SslContextProvider: javax.net.ssl.KeyManagerFactory keyManagerFactory> = v6;
v0.<io.vertx.core.net.impl.SslContextProvider: javax.net.ssl.TrustManagerFactory trustManagerFactory> = v8;
v0.<io.vertx.core.net.impl.SslContextProvider: java.util.function.Function keyManagerFactoryMapper> = v7;
v0.<io.vertx.core.net.impl.SslContextProvider: java.util.function.Function trustManagerMapper> = v9;
v0.<io.vertx.core.net.impl.SslContextProvider: java.util.List crls> = v10;
return;
}
public io.vertx.core.net.impl.VertxSslContext createClientContext(java.lang.String, boolean, boolean)
{
io.vertx.core.VertxException v23;
io.vertx.core.net.impl.SslContextProvider$1 v21;
javax.net.ssl.TrustManager v16;
java.util.function.Supplier v4;
java.lang.String v1;
io.vertx.core.net.impl.VertxTrustManagerFactory v19;
boolean v2, v3;
io.netty.handler.ssl.SslContext v20;
javax.net.ssl.TrustManagerFactory v17, v18;
io.vertx.core.spi.tls.SslContextFactory v11, v6, v7, v9;
java.util.Set v8;
javax.net.ssl.KeyManagerFactory v12, v13;
io.vertx.core.net.impl.SslContextProvider v0;
java.lang.Exception v22;
java.util.List v10;
javax.net.ssl.TrustManager[] v14, v15;
java.lang.Object v5;
v0 := @this: io.vertx.core.net.impl.SslContextProvider;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 := @parameter2: boolean;
label1:
v4 = v0.<io.vertx.core.net.impl.SslContextProvider: java.util.function.Supplier provider>;
v5 = interfaceinvoke v4.<java.util.function.Supplier: java.lang.Object get()>();
v6 = interfaceinvoke v5.<io.vertx.core.spi.tls.SslContextFactory: io.vertx.core.spi.tls.SslContextFactory useAlpn(boolean)>(v2);
v7 = interfaceinvoke v6.<io.vertx.core.spi.tls.SslContextFactory: io.vertx.core.spi.tls.SslContextFactory forClient(boolean)>(1);
v8 = v0.<io.vertx.core.net.impl.SslContextProvider: java.util.Set enabledCipherSuites>;
v9 = interfaceinvoke v7.<io.vertx.core.spi.tls.SslContextFactory: io.vertx.core.spi.tls.SslContextFactory enabledCipherSuites(java.util.Set)>(v8);
v10 = v0.<io.vertx.core.net.impl.SslContextProvider: java.util.List applicationProtocols>;
v11 = interfaceinvoke v9.<io.vertx.core.spi.tls.SslContextFactory: io.vertx.core.spi.tls.SslContextFactory applicationProtocols(java.util.List)>(v10);
v12 = v0.<io.vertx.core.net.impl.SslContextProvider: javax.net.ssl.KeyManagerFactory keyManagerFactory>;
if v12 == null goto label2;
v13 = v0.<io.vertx.core.net.impl.SslContextProvider: javax.net.ssl.KeyManagerFactory keyManagerFactory>;
interfaceinvoke v11.<io.vertx.core.spi.tls.SslContextFactory: io.vertx.core.spi.tls.SslContextFactory keyMananagerFactory(javax.net.ssl.KeyManagerFactory)>(v13);
label2:
v14 = null;
if v3 == 0 goto label3;
v15 = newarray (javax.net.ssl.TrustManager)[1];
v16 = staticinvoke <io.vertx.core.net.impl.SslContextProvider: javax.net.ssl.TrustManager createTrustAllTrustManager()>();
v15[0] = v16;
v14 = v15;
goto label4;
label3:
v17 = v0.<io.vertx.core.net.impl.SslContextProvider: javax.net.ssl.TrustManagerFactory trustManagerFactory>;
if v17 == null goto label4;
v18 = v0.<io.vertx.core.net.impl.SslContextProvider: javax.net.ssl.TrustManagerFactory trustManagerFactory>;
v14 = virtualinvoke v18.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();
label4:
if v14 == null goto label5;
v19 = specialinvoke v0.<io.vertx.core.net.impl.SslContextProvider: io.vertx.core.net.impl.VertxTrustManagerFactory buildVertxTrustManagerFactory(javax.net.ssl.TrustManager[])>(v14);
interfaceinvoke v11.<io.vertx.core.spi.tls.SslContextFactory: io.vertx.core.spi.tls.SslContextFactory trustManagerFactory(javax.net.ssl.TrustManagerFactory)>(v19);
label5:
v20 = interfaceinvoke v11.<io.vertx.core.spi.tls.SslContextFactory: io.netty.handler.ssl.SslContext create()>();
v21 = new io.vertx.core.net.impl.SslContextProvider$1;
specialinvoke v21.<io.vertx.core.net.impl.SslContextProvider$1: void <init>(io.vertx.core.net.impl.SslContextProvider,io.netty.handler.ssl.SslContext,java.lang.String)>(v0, v20, v1);
label6:
return v21;
label7:
v22 := @caughtexception;
v23 = new io.vertx.core.VertxException;
specialinvoke v23.<io.vertx.core.VertxException: void <init>(java.lang.Throwable)>(v22);
throw v23;
catch java.lang.Exception from label1 to label6 with label7;
}
public io.vertx.core.net.impl.VertxSslContext createServerContext(boolean)
{
javax.net.ssl.TrustManagerFactory v3, v4;
javax.net.ssl.TrustManager[] v5;
javax.net.ssl.KeyManagerFactory v2;
io.vertx.core.net.impl.SslContextProvider v0;
boolean v1;
io.vertx.core.net.impl.VertxSslContext v6;
v0 := @this: io.vertx.core.net.impl.SslContextProvider;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.core.net.impl.SslContextProvider: javax.net.ssl.KeyManagerFactory keyManagerFactory>;
v3 = v0.<io.vertx.core.net.impl.SslContextProvider: javax.net.ssl.TrustManagerFactory trustManagerFactory>;
if v3 == null goto label1;
v4 = v0.<io.vertx.core.net.impl.SslContextProvider: javax.net.ssl.TrustManagerFactory trustManagerFactory>;
v5 = virtualinvoke v4.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();
goto label2;
label1:
v5 = null;
label2:
v6 = virtualinvoke v0.<io.vertx.core.net.impl.SslContextProvider: io.vertx.core.net.impl.VertxSslContext createServerContext(javax.net.ssl.KeyManagerFactory,javax.net.ssl.TrustManager[],java.lang.String,boolean)>(v2, v5, null, v1);
return v6;
}
public io.vertx.core.net.impl.VertxSslContext createServerContext(javax.net.ssl.KeyManagerFactory, javax.net.ssl.TrustManager[], java.lang.String, boolean)
{
io.vertx.core.VertxException v20;
io.vertx.core.net.impl.SslContextProvider$2 v18;
java.util.function.Supplier v5;
java.lang.String v3;
io.vertx.core.net.impl.VertxTrustManagerFactory v16;
boolean v4;
io.netty.handler.ssl.SslContext v17;
java.util.EnumMap v13;
io.vertx.core.spi.tls.SslContextFactory v10, v12, v7, v8;
java.util.Set v9;
javax.net.ssl.KeyManagerFactory v1;
io.vertx.core.net.impl.SslContextProvider v0;
java.lang.Exception v19;
java.util.List v11;
javax.net.ssl.TrustManager[] v2;
io.vertx.core.http.ClientAuth v14;
java.lang.Object v15, v6;
v0 := @this: io.vertx.core.net.impl.SslContextProvider;
v1 := @parameter0: javax.net.ssl.KeyManagerFactory;
v2 := @parameter1: javax.net.ssl.TrustManager[];
v3 := @parameter2: java.lang.String;
v4 := @parameter3: boolean;
label1:
v5 = v0.<io.vertx.core.net.impl.SslContextProvider: java.util.function.Supplier provider>;
v6 = interfaceinvoke v5.<java.util.function.Supplier: java.lang.Object get()>();
v7 = interfaceinvoke v6.<io.vertx.core.spi.tls.SslContextFactory: io.vertx.core.spi.tls.SslContextFactory useAlpn(boolean)>(v4);
v8 = interfaceinvoke v7.<io.vertx.core.spi.tls.SslContextFactory: io.vertx.core.spi.tls.SslContextFactory forClient(boolean)>(0);
v9 = v0.<io.vertx.core.net.impl.SslContextProvider: java.util.Set enabledCipherSuites>;
v10 = interfaceinvoke v8.<io.vertx.core.spi.tls.SslContextFactory: io.vertx.core.spi.tls.SslContextFactory enabledCipherSuites(java.util.Set)>(v9);
v11 = v0.<io.vertx.core.net.impl.SslContextProvider: java.util.List applicationProtocols>;
v12 = interfaceinvoke v10.<io.vertx.core.spi.tls.SslContextFactory: io.vertx.core.spi.tls.SslContextFactory applicationProtocols(java.util.List)>(v11);
v13 = <io.vertx.core.net.impl.SSLHelper: java.util.EnumMap CLIENT_AUTH_MAPPING>;
v14 = v0.<io.vertx.core.net.impl.SslContextProvider: io.vertx.core.http.ClientAuth clientAuth>;
v15 = virtualinvoke v13.<java.util.EnumMap: java.lang.Object get(java.lang.Object)>(v14);
interfaceinvoke v12.<io.vertx.core.spi.tls.SslContextFactory: io.vertx.core.spi.tls.SslContextFactory clientAuth(io.netty.handler.ssl.ClientAuth)>(v15);
if v3 == null goto label2;
interfaceinvoke v12.<io.vertx.core.spi.tls.SslContextFactory: io.vertx.core.spi.tls.SslContextFactory serverName(java.lang.String)>(v3);
label2:
if v1 == null goto label3;
interfaceinvoke v12.<io.vertx.core.spi.tls.SslContextFactory: io.vertx.core.spi.tls.SslContextFactory keyMananagerFactory(javax.net.ssl.KeyManagerFactory)>(v1);
label3:
if v2 == null goto label4;
v16 = specialinvoke v0.<io.vertx.core.net.impl.SslContextProvider: io.vertx.core.net.impl.VertxTrustManagerFactory buildVertxTrustManagerFactory(javax.net.ssl.TrustManager[])>(v2);
interfaceinvoke v12.<io.vertx.core.spi.tls.SslContextFactory: io.vertx.core.spi.tls.SslContextFactory trustManagerFactory(javax.net.ssl.TrustManagerFactory)>(v16);
label4:
v17 = interfaceinvoke v12.<io.vertx.core.spi.tls.SslContextFactory: io.netty.handler.ssl.SslContext create()>();
v18 = new io.vertx.core.net.impl.SslContextProvider$2;
specialinvoke v18.<io.vertx.core.net.impl.SslContextProvider$2: void <init>(io.vertx.core.net.impl.SslContextProvider,io.netty.handler.ssl.SslContext,java.lang.String)>(v0, v17, v3);
label5:
return v18;
label6:
v19 := @caughtexception;
v20 = new io.vertx.core.VertxException;
specialinvoke v20.<io.vertx.core.VertxException: void <init>(java.lang.Throwable)>(v19);
throw v20;
catch java.lang.Exception from label1 to label5 with label6;
}
public javax.net.ssl.KeyManagerFactory loadKeyManagerFactory(java.lang.String) throws java.lang.Exception
{
java.lang.Object v4;
java.lang.String v1;
java.util.function.Function v2, v3;
io.vertx.core.net.impl.SslContextProvider v0;
v0 := @this: io.vertx.core.net.impl.SslContextProvider;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.net.impl.SslContextProvider: java.util.function.Function keyManagerFactoryMapper>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.net.impl.SslContextProvider: java.util.function.Function keyManagerFactoryMapper>;
v4 = interfaceinvoke v3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v1);
return v4;
label1:
return null;
}
public javax.net.ssl.KeyManagerFactory resolveKeyManagerFactory(java.lang.String) throws java.lang.Exception
{
javax.net.ssl.KeyManagerFactory v2;
java.lang.String v1;
io.vertx.core.net.impl.SslContextProvider v0;
v0 := @this: io.vertx.core.net.impl.SslContextProvider;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.core.net.impl.SslContextProvider: javax.net.ssl.KeyManagerFactory loadKeyManagerFactory(java.lang.String)>(v1);
if v2 != null goto label1;
v2 = v0.<io.vertx.core.net.impl.SslContextProvider: javax.net.ssl.KeyManagerFactory keyManagerFactory>;
label1:
return v2;
}
public javax.net.ssl.TrustManager[] loadTrustManagers(java.lang.String) throws java.lang.Exception
{
java.lang.Object v4;
java.lang.String v1;
java.util.function.Function v2, v3;
io.vertx.core.net.impl.SslContextProvider v0;
v0 := @this: io.vertx.core.net.impl.SslContextProvider;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.net.impl.SslContextProvider: java.util.function.Function trustManagerMapper>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.net.impl.SslContextProvider: java.util.function.Function trustManagerMapper>;
v4 = interfaceinvoke v3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v1);
return v4;
label1:
return null;
}
public javax.net.ssl.TrustManager[] resolveTrustManagers(java.lang.String) throws java.lang.Exception
{
javax.net.ssl.TrustManagerFactory v3, v4;
javax.net.ssl.TrustManager[] v2;
java.lang.String v1;
io.vertx.core.net.impl.SslContextProvider v0;
v0 := @this: io.vertx.core.net.impl.SslContextProvider;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.core.net.impl.SslContextProvider: javax.net.ssl.TrustManager[] loadTrustManagers(java.lang.String)>(v1);
if v2 != null goto label1;
v3 = v0.<io.vertx.core.net.impl.SslContextProvider: javax.net.ssl.TrustManagerFactory trustManagerFactory>;
if v3 == null goto label1;
v4 = v0.<io.vertx.core.net.impl.SslContextProvider: javax.net.ssl.TrustManagerFactory trustManagerFactory>;
v2 = virtualinvoke v4.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();
label1:
return v2;
}
private io.vertx.core.net.impl.VertxTrustManagerFactory buildVertxTrustManagerFactory(javax.net.ssl.TrustManager[])
{
java.util.List v2, v3, v5;
javax.net.ssl.TrustManager[] v1;
int v4;
io.vertx.core.net.impl.VertxTrustManagerFactory v6;
io.vertx.core.net.impl.SslContextProvider v0;
v0 := @this: io.vertx.core.net.impl.SslContextProvider;
v1 := @parameter0: javax.net.ssl.TrustManager[];
v2 = v0.<io.vertx.core.net.impl.SslContextProvider: java.util.List crls>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.net.impl.SslContextProvider: java.util.List crls>;
v4 = interfaceinvoke v3.<java.util.List: int size()>();
if v4 <= 0 goto label1;
v5 = v0.<io.vertx.core.net.impl.SslContextProvider: java.util.List crls>;
v1 = staticinvoke <io.vertx.core.net.impl.SslContextProvider: javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[],java.util.List)>(v1, v5);
label1:
v6 = new io.vertx.core.net.impl.VertxTrustManagerFactory;
specialinvoke v6.<io.vertx.core.net.impl.VertxTrustManagerFactory: void <init>(javax.net.ssl.TrustManager[])>(v1);
return v6;
}
private static javax.net.ssl.TrustManager[] createUntrustRevokedCertTrustManager(javax.net.ssl.TrustManager[], java.util.List)
{
javax.net.ssl.TrustManager v5;
java.util.List v1;
javax.net.ssl.TrustManager[] v0;
int v3, v4;
java.lang.Object v2;
io.vertx.core.net.impl.SslContextProvider$3 v7;
boolean v6;
v0 := @parameter0: javax.net.ssl.TrustManager[];
v1 := @parameter1: java.util.List;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
v3 = 0;
label1:
v4 = lengthof v2;
if v3 >= v4 goto label3;
v5 = v2[v3];
v6 = v5 instanceof javax.net.ssl.X509TrustManager;
if v6 == 0 goto label2;
v7 = new io.vertx.core.net.impl.SslContextProvider$3;
specialinvoke v7.<io.vertx.core.net.impl.SslContextProvider$3: void <init>(javax.net.ssl.X509TrustManager,java.util.List)>(v5, v1);
v2[v3] = v7;
label2:
v3 = v3 + 1;
goto label1;
label3:
return v2;
}
private static javax.net.ssl.TrustManager createTrustAllTrustManager()
{
io.vertx.core.net.impl.SslContextProvider$4 v0;
v0 = new io.vertx.core.net.impl.SslContextProvider$4;
specialinvoke v0.<io.vertx.core.net.impl.SslContextProvider$4: void <init>()>();
return v0;
}
public void configureEngine(javax.net.ssl.SSLEngine, java.util.Set, java.lang.String, boolean)
{
java.lang.Object[] v10;
javax.net.ssl.SNIHostName v16;
javax.net.ssl.SSLParameters v13, v15;
java.lang.String[] v6, v9;
javax.net.ssl.SSLEngine v1;
int v8;
java.lang.String v11, v14, v3;
java.util.LinkedHashSet v5;
boolean v12, v4;
java.util.Set v2;
io.vertx.core.net.impl.SslContextProvider v0;
java.util.List v17, v7;
v0 := @this: io.vertx.core.net.impl.SslContextProvider;
v1 := @parameter0: javax.net.ssl.SSLEngine;
v2 := @parameter1: java.util.Set;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: boolean;
v5 = new java.util.LinkedHashSet;
specialinvoke v5.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(v2);
v6 = virtualinvoke v1.<javax.net.ssl.SSLEngine: java.lang.String[] getSupportedProtocols()>();
v7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v6);
interfaceinvoke v5.<java.util.Set: boolean retainAll(java.util.Collection)>(v7);
v8 = interfaceinvoke v5.<java.util.Set: int size()>();
v9 = newarray (java.lang.String)[v8];
v10 = interfaceinvoke v5.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(v9);
virtualinvoke v1.<javax.net.ssl.SSLEngine: void setEnabledProtocols(java.lang.String[])>(v10);
if v4 == 0 goto label1;
v11 = v0.<io.vertx.core.net.impl.SslContextProvider: java.lang.String endpointIdentificationAlgorithm>;
v12 = virtualinvoke v11.<java.lang.String: boolean isEmpty()>();
if v12 != 0 goto label1;
v13 = virtualinvoke v1.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLParameters getSSLParameters()>();
v14 = v0.<io.vertx.core.net.impl.SslContextProvider: java.lang.String endpointIdentificationAlgorithm>;
virtualinvoke v13.<javax.net.ssl.SSLParameters: void setEndpointIdentificationAlgorithm(java.lang.String)>(v14);
virtualinvoke v1.<javax.net.ssl.SSLEngine: void setSSLParameters(javax.net.ssl.SSLParameters)>(v13);
label1:
if v3 == null goto label2;
v15 = virtualinvoke v1.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLParameters getSSLParameters()>();
v16 = new javax.net.ssl.SNIHostName;
specialinvoke v16.<javax.net.ssl.SNIHostName: void <init>(java.lang.String)>(v3);
v17 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v16);
virtualinvoke v15.<javax.net.ssl.SSLParameters: void setServerNames(java.util.List)>(v17);
virtualinvoke v1.<javax.net.ssl.SSLEngine: void setSSLParameters(javax.net.ssl.SSLParameters)>(v15);
label2:
return;
}
}