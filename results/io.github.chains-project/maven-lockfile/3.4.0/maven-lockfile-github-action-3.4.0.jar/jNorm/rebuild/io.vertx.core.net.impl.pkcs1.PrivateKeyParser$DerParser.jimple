class io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser extends java.lang.Object
{
private static final int UNIVERSAL;
private static final int APPLICATION;
private static final int CONTEXT;
private static final int PRIVATE;
private static final int CONSTRUCTED;
private static final int ANY;
private static final int BOOLEAN;
private static final int INTEGER;
private static final int BIT_STRING;
private static final int OCTET_STRING;
private static final int NULL;
private static final int OBJECT_IDENTIFIER;
private static final int REAL;
private static final int ENUMERATED;
private static final int SEQUENCE;
private static final int SET;
private static final int NUMERIC_STRING;
private static final int PRINTABLE_STRING;
private static final int VIDEOTEX_STRING;
private static final int IA5_STRING;
private static final int GRAPHIC_STRING;
private static final int ISO646_STRING;
private static final int GENERAL_STRING;
private static final int UTF8_STRING;
private static final int UNIVERSAL_STRING;
private static final int BMP_STRING;
private static final int UTC_TIME;
private io.vertx.core.buffer.Buffer in;
private int pos;
void <init>(io.vertx.core.buffer.Buffer) throws io.vertx.core.VertxException
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser v0;
v0 := @this: io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: io.vertx.core.buffer.Buffer in> = v1;
return;
}
void <init>(byte[]) throws io.vertx.core.VertxException
{
byte[] v1;
io.vertx.core.buffer.Buffer v2;
io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser v0;
v0 := @this: io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser;
v1 := @parameter0: byte[];
v2 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>(v1);
specialinvoke v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: void <init>(io.vertx.core.buffer.Buffer)>(v2);
return;
}
private int readByte() throws io.vertx.core.VertxException
{
io.vertx.core.VertxException v5;
short v9;
io.vertx.core.buffer.Buffer v3, v6;
io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser v0;
int v1, v2, v4, v7, v8;
v0 := @this: io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser;
v1 = v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: int pos>;
v2 = v1 + 1;
v3 = v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: io.vertx.core.buffer.Buffer in>;
v4 = interfaceinvoke v3.<io.vertx.core.buffer.Buffer: int length()>();
if v2 < v4 goto label1;
v5 = new io.vertx.core.VertxException;
specialinvoke v5.<io.vertx.core.VertxException: void <init>(java.lang.String)>("Invalid DER: stream too short, missing tag");
throw v5;
label1:
v6 = v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: io.vertx.core.buffer.Buffer in>;
v7 = v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: int pos>;
v8 = v7 + 1;
v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: int pos> = v8;
v9 = interfaceinvoke v6.<io.vertx.core.buffer.Buffer: short getUnsignedByte(int)>(v7);
return v9;
}
private byte[] readBytes(int) throws io.vertx.core.VertxException
{
io.vertx.core.VertxException v6;
byte[] v14;
io.vertx.core.buffer.Buffer v11, v4, v7;
io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser v0;
int v1, v10, v12, v13, v2, v3, v5, v8, v9;
v0 := @this: io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser;
v1 := @parameter0: int;
v2 = v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: int pos>;
v3 = v2 + v1;
v4 = v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: io.vertx.core.buffer.Buffer in>;
v5 = interfaceinvoke v4.<io.vertx.core.buffer.Buffer: int length()>();
if v3 <= v5 goto label1;
v6 = new io.vertx.core.VertxException;
specialinvoke v6.<io.vertx.core.VertxException: void <init>(java.lang.String)>("Invalid DER: stream too short, missing tag");
throw v6;
label1:
v7 = v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: io.vertx.core.buffer.Buffer in>;
v8 = v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: int pos>;
v9 = v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: int pos>;
v10 = v9 + v1;
v11 = interfaceinvoke v7.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer slice(int,int)>(v8, v10);
v12 = v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: int pos>;
v13 = v12 + v1;
v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: int pos> = v13;
v14 = interfaceinvoke v11.<io.vertx.core.buffer.Buffer: byte[] getBytes()>();
return v14;
}
public io.vertx.core.net.impl.pkcs1.PrivateKeyParser$Asn1Object read() throws io.vertx.core.VertxException
{
byte[] v3;
io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser v0;
int v1, v2;
io.vertx.core.net.impl.pkcs1.PrivateKeyParser$Asn1Object v4;
v0 := @this: io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser;
v1 = specialinvoke v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: int readByte()>();
v2 = specialinvoke v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: int getLength()>();
v3 = specialinvoke v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: byte[] readBytes(int)>(v2);
v4 = new io.vertx.core.net.impl.pkcs1.PrivateKeyParser$Asn1Object;
specialinvoke v4.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$Asn1Object: void <init>(int,int,byte[])>(v1, v2, v3);
return v4;
}
private int getLength() throws io.vertx.core.VertxException
{
io.vertx.core.VertxException v5;
byte[] v7;
io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser v0;
int v1, v2, v3, v4, v9;
java.math.BigInteger v8;
java.lang.String v6;
v0 := @this: io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser;
v1 = specialinvoke v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: int readByte()>();
v2 = (int) -128;
v3 = v1 & v2;
if v3 != 0 goto label1;
return v1;
label1:
v4 = v1 & 127;
if v1 >= 255 goto label2;
if v4 <= 4 goto label3;
label2:
v5 = new io.vertx.core.VertxException;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid DER: length field too big (\u0001)");
specialinvoke v5.<io.vertx.core.VertxException: void <init>(java.lang.String)>(v6);
throw v5;
label3:
v7 = specialinvoke v0.<io.vertx.core.net.impl.pkcs1.PrivateKeyParser$DerParser: byte[] readBytes(int)>(v4);
v8 = new java.math.BigInteger;
specialinvoke v8.<java.math.BigInteger: void <init>(int,byte[])>(1, v7);
v9 = virtualinvoke v8.<java.math.BigInteger: int intValue()>();
return v9;
}
}