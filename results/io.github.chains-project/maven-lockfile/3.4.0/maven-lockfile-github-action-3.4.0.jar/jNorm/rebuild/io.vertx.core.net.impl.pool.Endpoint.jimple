public abstract class io.vertx.core.net.impl.pool.Endpoint extends java.lang.Object
{
private final java.lang.Runnable dispose;
private boolean closed;
private boolean disposed;
private long pendingRequestCount;
private long refCount;
public void <init>(java.lang.Runnable)
{
io.vertx.core.net.impl.pool.Endpoint v0;
java.lang.Runnable v1;
v0 := @this: io.vertx.core.net.impl.pool.Endpoint;
v1 := @parameter0: java.lang.Runnable;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.net.impl.pool.Endpoint: java.lang.Runnable dispose> = v1;
return;
}
public boolean getConnection(io.vertx.core.impl.ContextInternal, long, io.vertx.core.Handler)
{
java.lang.Throwable v7;
io.vertx.core.impl.ContextInternal v1;
long v2, v5, v6;
io.vertx.core.net.impl.pool.Endpoint v0;
io.vertx.core.Handler v3, v8;
boolean v4;
v0 := @this: io.vertx.core.net.impl.pool.Endpoint;
v1 := @parameter0: io.vertx.core.impl.ContextInternal;
v2 := @parameter1: long;
v3 := @parameter2: io.vertx.core.Handler;
entermonitor v0;
label1:
v4 = v0.<io.vertx.core.net.impl.pool.Endpoint: boolean disposed>;
if v4 == 0 goto label3;
exitmonitor v0;
label2:
return 0;
label3:
v5 = v0.<io.vertx.core.net.impl.pool.Endpoint: long pendingRequestCount>;
v6 = v5 + 1L;
v0.<io.vertx.core.net.impl.pool.Endpoint: long pendingRequestCount> = v6;
exitmonitor v0;
label4:
goto label6;
label5:
v7 := @caughtexception;
exitmonitor v0;
throw v7;
label6:
v8 = staticinvoke <io.vertx.core.net.impl.pool.Endpoint$lambda_getConnection_0__1397: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.pool.Endpoint,io.vertx.core.Handler)>(v0, v3);
virtualinvoke v0.<io.vertx.core.net.impl.pool.Endpoint: void requestConnection(io.vertx.core.impl.ContextInternal,long,io.vertx.core.Handler)>(v1, v2, v8);
return 1;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
public abstract void requestConnection(io.vertx.core.impl.ContextInternal, long, io.vertx.core.Handler);
protected boolean incRefCount()
{
java.lang.Throwable v5;
io.vertx.core.net.impl.pool.Endpoint v0;
long v1, v2;
boolean v3, v4;
v0 := @this: io.vertx.core.net.impl.pool.Endpoint;
entermonitor v0;
label1:
v1 = v0.<io.vertx.core.net.impl.pool.Endpoint: long refCount>;
v2 = v1 + 1L;
v0.<io.vertx.core.net.impl.pool.Endpoint: long refCount> = v2;
v3 = v0.<io.vertx.core.net.impl.pool.Endpoint: boolean closed>;
if v3 != 0 goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
exitmonitor v0;
label4:
return v4;
label5:
v5 := @caughtexception;
exitmonitor v0;
throw v5;
catch java.lang.Throwable from label1 to label4 with label5;
}
protected boolean decRefCount()
{
java.lang.Throwable v4;
io.vertx.core.net.impl.pool.Endpoint v0;
long v1, v2;
boolean v3;
v0 := @this: io.vertx.core.net.impl.pool.Endpoint;
entermonitor v0;
label1:
v1 = v0.<io.vertx.core.net.impl.pool.Endpoint: long refCount>;
v2 = v1 - 1L;
v0.<io.vertx.core.net.impl.pool.Endpoint: long refCount> = v2;
v3 = specialinvoke v0.<io.vertx.core.net.impl.pool.Endpoint: boolean checkDispose()>();
if v3 != 0 goto label3;
exitmonitor v0;
label2:
return 0;
label3:
exitmonitor v0;
label4:
goto label6;
label5:
v4 := @caughtexception;
exitmonitor v0;
throw v4;
label6:
specialinvoke v0.<io.vertx.core.net.impl.pool.Endpoint: void disposeInternal()>();
return 1;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
private void disposeInternal()
{
io.vertx.core.net.impl.pool.Endpoint v0;
java.lang.Runnable v1;
v0 := @this: io.vertx.core.net.impl.pool.Endpoint;
v1 = v0.<io.vertx.core.net.impl.pool.Endpoint: java.lang.Runnable dispose>;
interfaceinvoke v1.<java.lang.Runnable: void run()>();
virtualinvoke v0.<io.vertx.core.net.impl.pool.Endpoint: void dispose()>();
return;
}
private boolean checkDispose()
{
byte v3, v5;
io.vertx.core.net.impl.pool.Endpoint v0;
long v2, v4;
boolean v1;
v0 := @this: io.vertx.core.net.impl.pool.Endpoint;
v1 = v0.<io.vertx.core.net.impl.pool.Endpoint: boolean disposed>;
if v1 != 0 goto label1;
v2 = v0.<io.vertx.core.net.impl.pool.Endpoint: long refCount>;
v3 = v2 cmp 0L;
if v3 != 0 goto label1;
v4 = v0.<io.vertx.core.net.impl.pool.Endpoint: long pendingRequestCount>;
v5 = v4 cmp 0L;
if v5 != 0 goto label1;
v0.<io.vertx.core.net.impl.pool.Endpoint: boolean disposed> = 1;
return 1;
label1:
return 0;
}
protected void dispose()
{
io.vertx.core.net.impl.pool.Endpoint v0;
v0 := @this: io.vertx.core.net.impl.pool.Endpoint;
return;
}
protected void close()
{
java.lang.Throwable v3;
java.lang.IllegalStateException v2;
io.vertx.core.net.impl.pool.Endpoint v0;
boolean v1;
v0 := @this: io.vertx.core.net.impl.pool.Endpoint;
entermonitor v0;
label1:
v1 = v0.<io.vertx.core.net.impl.pool.Endpoint: boolean closed>;
if v1 == 0 goto label2;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
label2:
v0.<io.vertx.core.net.impl.pool.Endpoint: boolean closed> = 1;
exitmonitor v0;
label3:
goto label5;
label4:
v3 := @caughtexception;
exitmonitor v0;
throw v3;
label5:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
}