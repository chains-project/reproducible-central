class io.vertx.core.net.impl.pool.SimpleConnectionPool$Close extends java.lang.Object implements io.vertx.core.net.impl.pool.Executor$Action
{
private final io.vertx.core.Handler handler;
private void <init>(io.vertx.core.Handler)
{
io.vertx.core.net.impl.pool.SimpleConnectionPool$Close v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.net.impl.pool.SimpleConnectionPool$Close;
v1 := @parameter0: io.vertx.core.Handler;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Close: io.vertx.core.Handler handler> = v1;
return;
}
public io.vertx.core.net.impl.pool.Task execute(io.vertx.core.net.impl.pool.SimpleConnectionPool)
{
io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot v10;
java.util.ArrayList v6;
io.vertx.core.net.impl.pool.SimpleConnectionPool$Close$2 v20;
io.vertx.core.net.impl.pool.SimpleConnectionPool$Close$1 v3;
int v15, v16, v17, v7, v8;
boolean v2;
io.vertx.core.net.impl.pool.SimpleConnectionPool v1;
io.vertx.core.Promise v18;
io.vertx.core.net.impl.pool.SimpleConnectionPool$Close v0;
io.vertx.core.Future v19;
java.util.List v5;
io.vertx.core.net.impl.pool.PoolWaiter v12, v13, v14;
io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot[] v11, v9;
io.vertx.core.net.impl.pool.SimpleConnectionPool$Waiters v4;
v0 := @this: io.vertx.core.net.impl.pool.SimpleConnectionPool$Close;
v1 := @parameter0: io.vertx.core.net.impl.pool.SimpleConnectionPool;
v2 = v1.<io.vertx.core.net.impl.pool.SimpleConnectionPool: boolean closed>;
if v2 == 0 goto label1;
v3 = new io.vertx.core.net.impl.pool.SimpleConnectionPool$Close$1;
specialinvoke v3.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Close$1: void <init>(io.vertx.core.net.impl.pool.SimpleConnectionPool$Close)>(v0);
return v3;
label1:
v1.<io.vertx.core.net.impl.pool.SimpleConnectionPool: boolean closed> = 1;
v4 = v1.<io.vertx.core.net.impl.pool.SimpleConnectionPool: io.vertx.core.net.impl.pool.SimpleConnectionPool$Waiters waiters>;
v5 = virtualinvoke v4.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Waiters: java.util.List clear()>();
v6 = new java.util.ArrayList;
specialinvoke v6.<java.util.ArrayList: void <init>()>();
v7 = 0;
label2:
v8 = v1.<io.vertx.core.net.impl.pool.SimpleConnectionPool: int size>;
if v7 >= v8 goto label4;
v9 = v1.<io.vertx.core.net.impl.pool.SimpleConnectionPool: io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot[] slots>;
v10 = v9[v7];
v11 = v1.<io.vertx.core.net.impl.pool.SimpleConnectionPool: io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot[] slots>;
v11[v7] = null;
v12 = v10.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: io.vertx.core.net.impl.pool.PoolWaiter initiator>;
if v12 == null goto label3;
v13 = v10.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: io.vertx.core.net.impl.pool.PoolWaiter initiator>;
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v13);
v14 = v10.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: io.vertx.core.net.impl.pool.PoolWaiter initiator>;
v14.<io.vertx.core.net.impl.pool.PoolWaiter: boolean disposed> = 1;
v10.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: io.vertx.core.net.impl.pool.PoolWaiter initiator> = null;
label3:
v15 = v1.<io.vertx.core.net.impl.pool.SimpleConnectionPool: int capacity>;
v16 = v10.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: int capacity>;
v17 = v15 - v16;
v1.<io.vertx.core.net.impl.pool.SimpleConnectionPool: int capacity> = v17;
v18 = v10.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Slot: io.vertx.core.Promise result>;
v19 = interfaceinvoke v18.<io.vertx.core.Promise: io.vertx.core.Future future()>();
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v19);
v7 = v7 + 1;
goto label2;
label4:
v1.<io.vertx.core.net.impl.pool.SimpleConnectionPool: int size> = 0;
v20 = new io.vertx.core.net.impl.pool.SimpleConnectionPool$Close$2;
specialinvoke v20.<io.vertx.core.net.impl.pool.SimpleConnectionPool$Close$2: void <init>(io.vertx.core.net.impl.pool.SimpleConnectionPool$Close,java.util.List,java.util.List)>(v0, v5, v6);
return v20;
}
}