public class io.vertx.core.parsetools.impl.RecordParserImpl extends java.lang.Object implements io.vertx.core.parsetools.RecordParser
{
private static final io.vertx.core.buffer.Buffer EMPTY_BUFFER;
private io.vertx.core.buffer.Buffer buff;
private int pos;
private int start;
private int delimPos;
private boolean delimited;
private byte[] delim;
private int recordSize;
private int maxRecordSize;
private long demand;
private io.vertx.core.Handler eventHandler;
private io.vertx.core.Handler endHandler;
private io.vertx.core.Handler exceptionHandler;
private boolean parsing;
private boolean streamEnded;
private final io.vertx.core.streams.ReadStream stream;
private void <init>(io.vertx.core.streams.ReadStream)
{
io.vertx.core.streams.ReadStream v1;
io.vertx.core.parsetools.impl.RecordParserImpl v0;
io.vertx.core.buffer.Buffer v2;
v0 := @this: io.vertx.core.parsetools.impl.RecordParserImpl;
v1 := @parameter0: io.vertx.core.streams.ReadStream;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer EMPTY_BUFFER>;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer buff> = v2;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: long demand> = 9223372036854775807L;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.streams.ReadStream stream> = v1;
return;
}
public void setOutput(io.vertx.core.Handler)
{
io.vertx.core.parsetools.impl.RecordParserImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.parsetools.impl.RecordParserImpl;
v1 := @parameter0: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "output");
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.Handler eventHandler> = v1;
return;
}
public static io.vertx.core.buffer.Buffer latin1StringToBytes(java.lang.String)
{
byte[] v2;
char v5, v6;
io.vertx.core.buffer.Buffer v7;
int v1, v3, v4;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: int length()>();
v2 = newarray (byte)[v1];
v3 = 0;
label1:
v4 = virtualinvoke v0.<java.lang.String: int length()>();
if v3 >= v4 goto label2;
v5 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v3);
v6 = v5 & 255;
v2[v3] = v6;
v3 = v3 + 1;
goto label1;
label2:
v7 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>(v2);
return v7;
}
public static io.vertx.core.parsetools.RecordParser newDelimited(java.lang.String, io.vertx.core.streams.ReadStream, io.vertx.core.Handler)
{
io.vertx.core.buffer.Buffer v3;
io.vertx.core.streams.ReadStream v1;
io.vertx.core.parsetools.RecordParser v4;
java.lang.String v0;
io.vertx.core.Handler v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: io.vertx.core.streams.ReadStream;
v2 := @parameter2: io.vertx.core.Handler;
v3 = staticinvoke <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer latin1StringToBytes(java.lang.String)>(v0);
v4 = staticinvoke <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.parsetools.RecordParser newDelimited(io.vertx.core.buffer.Buffer,io.vertx.core.streams.ReadStream,io.vertx.core.Handler)>(v3, v1, v2);
return v4;
}
public static io.vertx.core.parsetools.RecordParser newDelimited(io.vertx.core.buffer.Buffer, io.vertx.core.streams.ReadStream, io.vertx.core.Handler)
{
io.vertx.core.parsetools.impl.RecordParserImpl v3;
io.vertx.core.buffer.Buffer v0;
io.vertx.core.streams.ReadStream v1;
io.vertx.core.Handler v2;
v0 := @parameter0: io.vertx.core.buffer.Buffer;
v1 := @parameter1: io.vertx.core.streams.ReadStream;
v2 := @parameter2: io.vertx.core.Handler;
v3 = new io.vertx.core.parsetools.impl.RecordParserImpl;
specialinvoke v3.<io.vertx.core.parsetools.impl.RecordParserImpl: void <init>(io.vertx.core.streams.ReadStream)>(v1);
virtualinvoke v3.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.parsetools.RecordParser handler(io.vertx.core.Handler)>(v2);
virtualinvoke v3.<io.vertx.core.parsetools.impl.RecordParserImpl: void delimitedMode(io.vertx.core.buffer.Buffer)>(v0);
return v3;
}
public static io.vertx.core.parsetools.RecordParser newFixed(int, io.vertx.core.streams.ReadStream, io.vertx.core.Handler)
{
io.vertx.core.parsetools.impl.RecordParserImpl v4;
int v0;
io.vertx.core.streams.ReadStream v1;
io.vertx.core.Handler v2;
boolean v3;
v0 := @parameter0: int;
v1 := @parameter1: io.vertx.core.streams.ReadStream;
v2 := @parameter2: io.vertx.core.Handler;
if v0 <= 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v3, "Size must be > 0");
v4 = new io.vertx.core.parsetools.impl.RecordParserImpl;
specialinvoke v4.<io.vertx.core.parsetools.impl.RecordParserImpl: void <init>(io.vertx.core.streams.ReadStream)>(v1);
virtualinvoke v4.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.parsetools.RecordParser handler(io.vertx.core.Handler)>(v2);
virtualinvoke v4.<io.vertx.core.parsetools.impl.RecordParserImpl: void fixedSizeMode(int)>(v0);
return v4;
}
public void delimitedMode(java.lang.String)
{
io.vertx.core.parsetools.impl.RecordParserImpl v0;
java.lang.String v1;
io.vertx.core.buffer.Buffer v2;
v0 := @this: io.vertx.core.parsetools.impl.RecordParserImpl;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer latin1StringToBytes(java.lang.String)>(v1);
virtualinvoke v0.<io.vertx.core.parsetools.impl.RecordParserImpl: void delimitedMode(io.vertx.core.buffer.Buffer)>(v2);
return;
}
public void delimitedMode(io.vertx.core.buffer.Buffer)
{
byte[] v2;
io.vertx.core.parsetools.impl.RecordParserImpl v0;
io.vertx.core.buffer.Buffer v1;
v0 := @this: io.vertx.core.parsetools.impl.RecordParserImpl;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "delim");
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: boolean delimited> = 1;
v2 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: byte[] getBytes()>();
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: byte[] delim> = v2;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int delimPos> = 0;
return;
}
public void fixedSizeMode(int)
{
int v1;
io.vertx.core.parsetools.impl.RecordParserImpl v0;
boolean v2;
v0 := @this: io.vertx.core.parsetools.impl.RecordParserImpl;
v1 := @parameter0: int;
if v1 <= 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v2, "Size must be > 0");
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: boolean delimited> = 0;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int recordSize> = v1;
return;
}
public io.vertx.core.parsetools.RecordParser maxRecordSize(int)
{
int v1;
io.vertx.core.parsetools.impl.RecordParserImpl v0;
boolean v2;
v0 := @this: io.vertx.core.parsetools.impl.RecordParserImpl;
v1 := @parameter0: int;
if v1 <= 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v2, "Size must be > 0");
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int maxRecordSize> = v1;
return v0;
}
private void handleParsing()
{
byte v14, v3;
io.vertx.core.streams.ReadStream v11, v23;
boolean v1, v12, v22, v35, v4, v7;
io.vertx.core.buffer.Buffer v10, v17, v19, v24, v27, v29, v31, v8;
java.lang.Throwable v36;
io.vertx.core.parsetools.impl.RecordParserImpl v0;
long v13, v15, v16, v2;
int v18, v20, v25, v26, v28, v30, v32, v33, v34, v5, v6, v9;
io.vertx.core.Handler v21;
v0 := @this: io.vertx.core.parsetools.impl.RecordParserImpl;
v1 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: boolean parsing>;
if v1 == 0 goto label01;
return;
label01:
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: boolean parsing> = 1;
label02:
v2 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: long demand>;
v3 = v2 cmp 0L;
if v3 <= 0 goto label10;
v4 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: boolean delimited>;
if v4 == 0 goto label03;
v5 = specialinvoke v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int parseDelimited()>();
goto label04;
label03:
v5 = specialinvoke v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int parseFixed()>();
label04:
v6 = (int) -1;
if v5 != v6 goto label07;
v7 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: boolean streamEnded>;
if v7 == 0 goto label05;
v8 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer buff>;
v9 = interfaceinvoke v8.<io.vertx.core.buffer.Buffer: int length()>();
if v9 == 0 goto label11;
v10 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer buff>;
v5 = interfaceinvoke v10.<io.vertx.core.buffer.Buffer: int length()>();
goto label07;
label05:
v11 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.streams.ReadStream stream>;
if v11 == null goto label06;
interfaceinvoke v11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>();
label06:
v12 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: boolean streamEnded>;
if v12 == 0 goto label11;
goto label02;
label07:
v13 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: long demand>;
v14 = v13 cmp 9223372036854775807L;
if v14 == 0 goto label08;
v15 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: long demand>;
v16 = v15 - 1L;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: long demand> = v16;
label08:
v17 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer buff>;
v18 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int start>;
v19 = interfaceinvoke v17.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer getBuffer(int,int)>(v18, v5);
v20 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int pos>;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int start> = v20;
v21 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.Handler eventHandler>;
if v21 == null goto label09;
interfaceinvoke v21.<io.vertx.core.Handler: void handle(java.lang.Object)>(v19);
label09:
v22 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: boolean streamEnded>;
if v22 != 0 goto label11;
goto label02;
label10:
v23 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.streams.ReadStream stream>;
if v23 == null goto label11;
interfaceinvoke v23.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>();
label11:
v24 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer buff>;
v25 = interfaceinvoke v24.<io.vertx.core.buffer.Buffer: int length()>();
v26 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int start>;
if v26 != v25 goto label12;
v27 = <io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer EMPTY_BUFFER>;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer buff> = v27;
goto label13;
label12:
v28 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int start>;
if v28 <= 0 goto label13;
v29 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer buff>;
v30 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int start>;
v31 = interfaceinvoke v29.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer getBuffer(int,int)>(v30, v25);
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer buff> = v31;
label13:
v32 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int pos>;
v33 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int start>;
v34 = v32 - v33;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int pos> = v34;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int start> = 0;
v35 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: boolean streamEnded>;
if v35 == 0 goto label14;
specialinvoke v0.<io.vertx.core.parsetools.impl.RecordParserImpl: void end()>();
label14:
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: boolean parsing> = 0;
goto label16;
label15:
v36 := @caughtexception;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: boolean parsing> = 0;
throw v36;
label16:
return;
catch java.lang.Throwable from label02 to label14 with label15;
}
private int parseDelimited()
{
byte[] v13, v18, v7;
io.vertx.core.parsetools.impl.RecordParserImpl v0;
byte v6, v9;
int v10, v11, v12, v14, v15, v16, v17, v19, v2, v20, v21, v22, v23, v24, v25, v26, v27, v3, v5, v8;
io.vertx.core.buffer.Buffer v1, v4;
v0 := @this: io.vertx.core.parsetools.impl.RecordParserImpl;
v1 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer buff>;
v2 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: int length()>();
label1:
v3 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int pos>;
if v3 >= v2 goto label4;
v4 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer buff>;
v5 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int pos>;
v6 = interfaceinvoke v4.<io.vertx.core.buffer.Buffer: byte getByte(int)>(v5);
v7 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: byte[] delim>;
v8 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int delimPos>;
v9 = v7[v8];
if v6 != v9 goto label2;
v10 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int delimPos>;
v11 = v10 + 1;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int delimPos> = v11;
v12 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int delimPos>;
v13 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: byte[] delim>;
v14 = lengthof v13;
if v12 != v14 goto label3;
v15 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int pos>;
v16 = v15 + 1;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int pos> = v16;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int delimPos> = 0;
v17 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int pos>;
v18 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: byte[] delim>;
v19 = lengthof v18;
v20 = v17 - v19;
return v20;
label2:
v21 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int delimPos>;
if v21 <= 0 goto label3;
v22 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int pos>;
v23 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int delimPos>;
v24 = v22 - v23;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int pos> = v24;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int delimPos> = 0;
label3:
v25 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int pos>;
v26 = v25 + 1;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int pos> = v26;
goto label1;
label4:
v27 = (int) -1;
return v27;
}
private int parseFixed()
{
io.vertx.core.parsetools.impl.RecordParserImpl v0;
io.vertx.core.buffer.Buffer v1;
int v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @this: io.vertx.core.parsetools.impl.RecordParserImpl;
v1 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer buff>;
v2 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: int length()>();
v3 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int start>;
v4 = v2 - v3;
v5 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int recordSize>;
if v4 < v5 goto label1;
v6 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int start>;
v7 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int recordSize>;
v8 = v6 + v7;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int pos> = v8;
return v8;
label1:
v9 = (int) -1;
return v9;
}
public void handle(io.vertx.core.buffer.Buffer)
{
io.vertx.core.parsetools.impl.RecordParserImpl v0;
java.lang.IllegalStateException v10;
io.vertx.core.buffer.Buffer v1, v2, v4, v5, v7;
int v3, v6, v8, v9;
io.vertx.core.Handler v11, v12;
v0 := @this: io.vertx.core.parsetools.impl.RecordParserImpl;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer buff>;
v3 = interfaceinvoke v2.<io.vertx.core.buffer.Buffer: int length()>();
if v3 != 0 goto label1;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer buff> = v1;
goto label2;
label1:
v4 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer buff>;
interfaceinvoke v4.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendBuffer(io.vertx.core.buffer.Buffer)>(v1);
label2:
specialinvoke v0.<io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()>();
v5 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer buff>;
if v5 == null goto label4;
v6 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int maxRecordSize>;
if v6 <= 0 goto label4;
v7 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer buff>;
v8 = interfaceinvoke v7.<io.vertx.core.buffer.Buffer: int length()>();
v9 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: int maxRecordSize>;
if v8 <= v9 goto label4;
v10 = new java.lang.IllegalStateException;
specialinvoke v10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The current record is too long");
v11 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.Handler exceptionHandler>;
if v11 == null goto label3;
v12 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.Handler exceptionHandler>;
interfaceinvoke v12.<io.vertx.core.Handler: void handle(java.lang.Object)>(v10);
goto label4;
label3:
throw v10;
label4:
return;
}
private void end()
{
io.vertx.core.parsetools.impl.RecordParserImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.parsetools.impl.RecordParserImpl;
v1 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.Handler endHandler>;
if v1 == null goto label1;
interfaceinvoke v1.<io.vertx.core.Handler: void handle(java.lang.Object)>(null);
label1:
return;
}
public io.vertx.core.parsetools.RecordParser exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.parsetools.impl.RecordParserImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.parsetools.impl.RecordParserImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.Handler exceptionHandler> = v1;
return v0;
}
public io.vertx.core.parsetools.RecordParser handler(io.vertx.core.Handler)
{
io.vertx.core.parsetools.impl.RecordParserImpl v0;
io.vertx.core.streams.ReadStream v10, v2, v3, v5, v7, v8, v9;
io.vertx.core.Handler v1, v4, v6;
v0 := @this: io.vertx.core.parsetools.impl.RecordParserImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.Handler eventHandler> = v1;
v2 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.streams.ReadStream stream>;
if v2 == null goto label2;
if v1 == null goto label1;
v3 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.streams.ReadStream stream>;
v4 = staticinvoke <io.vertx.core.parsetools.impl.RecordParserImpl$lambda_handler_0__947: io.vertx.core.Handler bootstrap$(io.vertx.core.parsetools.impl.RecordParserImpl)>(v0);
interfaceinvoke v3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream endHandler(io.vertx.core.Handler)>(v4);
v5 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.streams.ReadStream stream>;
v6 = staticinvoke <io.vertx.core.parsetools.impl.RecordParserImpl$lambda_handler_1__948: io.vertx.core.Handler bootstrap$(io.vertx.core.parsetools.impl.RecordParserImpl)>(v0);
interfaceinvoke v5.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream exceptionHandler(io.vertx.core.Handler)>(v6);
v7 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.streams.ReadStream stream>;
interfaceinvoke v7.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)>(v0);
goto label2;
label1:
v8 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.streams.ReadStream stream>;
interfaceinvoke v8.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)>(null);
v9 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.streams.ReadStream stream>;
interfaceinvoke v9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream endHandler(io.vertx.core.Handler)>(null);
v10 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.streams.ReadStream stream>;
interfaceinvoke v10.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream exceptionHandler(io.vertx.core.Handler)>(null);
label2:
return v0;
}
public io.vertx.core.parsetools.RecordParser pause()
{
io.vertx.core.parsetools.impl.RecordParserImpl v0;
v0 := @this: io.vertx.core.parsetools.impl.RecordParserImpl;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: long demand> = 0L;
return v0;
}
public io.vertx.core.parsetools.RecordParser fetch(long)
{
io.vertx.core.parsetools.impl.RecordParserImpl v0;
long v1, v4, v5, v6;
byte v2, v7;
boolean v3;
v0 := @this: io.vertx.core.parsetools.impl.RecordParserImpl;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v3, "Fetch amount must be > 0");
v4 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: long demand>;
v5 = v4 + v1;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: long demand> = v5;
v6 = v0.<io.vertx.core.parsetools.impl.RecordParserImpl: long demand>;
v7 = v6 cmp 0L;
if v7 >= 0 goto label3;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: long demand> = 9223372036854775807L;
label3:
specialinvoke v0.<io.vertx.core.parsetools.impl.RecordParserImpl: void handleParsing()>();
return v0;
}
public io.vertx.core.parsetools.RecordParser resume()
{
io.vertx.core.parsetools.RecordParser v1;
io.vertx.core.parsetools.impl.RecordParserImpl v0;
v0 := @this: io.vertx.core.parsetools.impl.RecordParserImpl;
v1 = virtualinvoke v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.parsetools.RecordParser fetch(long)>(9223372036854775807L);
return v1;
}
public io.vertx.core.parsetools.RecordParser endHandler(io.vertx.core.Handler)
{
io.vertx.core.parsetools.impl.RecordParserImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.parsetools.impl.RecordParserImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.Handler endHandler> = v1;
return v0;
}
static void <clinit>()
{
io.netty.buffer.ByteBuf v0;
io.vertx.core.buffer.Buffer v1;
v0 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
v1 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>(v0);
<io.vertx.core.parsetools.impl.RecordParserImpl: io.vertx.core.buffer.Buffer EMPTY_BUFFER> = v1;
return;
}
}