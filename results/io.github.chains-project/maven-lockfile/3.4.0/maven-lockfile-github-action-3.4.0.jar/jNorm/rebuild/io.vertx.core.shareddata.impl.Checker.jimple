class io.vertx.core.shareddata.impl.Checker extends java.lang.Object
{
private static final io.vertx.core.impl.logging.Logger log;
private static final java.util.Set IMMUTABLE_TYPES;
void <init>()
{
io.vertx.core.shareddata.impl.Checker v0;
v0 := @this: io.vertx.core.shareddata.impl.Checker;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void checkType(java.lang.Object)
{
java.lang.IllegalArgumentException v4;
java.lang.Class v5;
java.lang.Object v0;
java.lang.String v6, v7;
boolean v1, v2, v3;
v0 := @parameter0: java.lang.Object;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v0, "null not allowed for shareddata data structure");
v1 = v0 instanceof java.io.Serializable;
if v1 != 0 goto label1;
v2 = v0 instanceof io.vertx.core.shareddata.Shareable;
if v2 != 0 goto label1;
v3 = v0 instanceof io.vertx.core.shareddata.impl.ClusterSerializable;
if v3 != 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid type for shareddata data structure: \u0001");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v7);
throw v4;
label1:
return;
}
static java.lang.Object copyIfRequired(java.lang.Object)
{
java.lang.IllegalStateException v9;
java.util.Set v2;
java.lang.Class v3;
java.lang.Object v0, v1;
boolean v4, v5, v6, v7, v8;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
v1 = null;
goto label7;
label1:
v2 = <io.vertx.core.shareddata.impl.Checker: java.util.Set IMMUTABLE_TYPES>;
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v3);
if v4 == 0 goto label2;
v1 = v0;
goto label7;
label2:
v5 = v0 instanceof byte[];
if v5 == 0 goto label3;
v1 = staticinvoke <io.vertx.core.shareddata.impl.Checker: byte[] copyByteArray(byte[])>(v0);
goto label7;
label3:
v6 = v0 instanceof io.vertx.core.shareddata.Shareable;
if v6 == 0 goto label4;
v1 = interfaceinvoke v0.<io.vertx.core.shareddata.Shareable: io.vertx.core.shareddata.Shareable copy()>();
goto label7;
label4:
v7 = v0 instanceof io.vertx.core.shareddata.impl.ClusterSerializable;
if v7 == 0 goto label5;
v1 = staticinvoke <io.vertx.core.shareddata.impl.Checker: io.vertx.core.shareddata.impl.ClusterSerializable copyClusterSerializable(io.vertx.core.shareddata.impl.ClusterSerializable)>(v0);
goto label7;
label5:
v8 = v0 instanceof java.io.Serializable;
if v8 == 0 goto label6;
v1 = staticinvoke <io.vertx.core.shareddata.impl.Checker: java.lang.Object copySerializable(java.lang.Object)>(v0);
goto label7;
label6:
v9 = new java.lang.IllegalStateException;
specialinvoke v9.<java.lang.IllegalStateException: void <init>()>();
throw v9;
label7:
return v1;
}
private static byte[] copyByteArray(byte[])
{
byte[] v0, v2;
int v1, v3;
v0 := @parameter0: byte[];
v1 = lengthof v0;
v2 = newarray (byte)[v1];
v3 = lengthof v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, 0, v2, 0, v3);
return v2;
}
private static io.vertx.core.shareddata.impl.ClusterSerializable copyClusterSerializable(io.vertx.core.shareddata.impl.ClusterSerializable)
{
io.vertx.core.shareddata.impl.ClusterSerializable v0, v1;
v0 := @parameter0: io.vertx.core.shareddata.impl.ClusterSerializable;
staticinvoke <io.vertx.core.shareddata.impl.Checker: void logDeveloperInfo(java.lang.Object)>(v0);
v1 = staticinvoke <io.vertx.core.impl.ClusterSerializableUtils: io.vertx.core.shareddata.impl.ClusterSerializable copy(io.vertx.core.shareddata.impl.ClusterSerializable)>(v0);
return v1;
}
private static void logDeveloperInfo(java.lang.Object)
{
io.vertx.core.impl.logging.Logger v1, v3;
java.lang.Class v4;
java.lang.Object v0;
java.lang.String v5;
boolean v2;
v0 := @parameter0: java.lang.Object;
v1 = <io.vertx.core.shareddata.impl.Checker: io.vertx.core.impl.logging.Logger log>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.logging.Logger: boolean isDebugEnabled()>();
if v2 == 0 goto label1;
v3 = <io.vertx.core.shareddata.impl.Checker: io.vertx.core.impl.logging.Logger log>;
v4 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class,java.lang.Class)>(v4, class "Lio/vertx/core/shareddata/Shareable;") <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Copying \u0001 for shared data. Consider implementing \u0001 for better performance.");
interfaceinvoke v3.<io.vertx.core.impl.logging.Logger: void debug(java.lang.Object)>(v5);
label1:
return;
}
private static java.lang.Object copySerializable(java.lang.Object)
{
byte[] v1;
io.vertx.core.impl.SerializableUtils$ObjectInputStreamFactory v2;
java.lang.Object v0, v3;
v0 := @parameter0: java.lang.Object;
staticinvoke <io.vertx.core.shareddata.impl.Checker: void logDeveloperInfo(java.lang.Object)>(v0);
v1 = staticinvoke <io.vertx.core.impl.SerializableUtils: byte[] toBytes(java.lang.Object)>(v0);
v2 = staticinvoke <io.vertx.core.shareddata.impl.Checker$init__1192: io.vertx.core.impl.SerializableUtils$ObjectInputStreamFactory bootstrap$()>();
v3 = staticinvoke <io.vertx.core.impl.SerializableUtils: java.lang.Object fromBytes(byte[],io.vertx.core.impl.SerializableUtils$ObjectInputStreamFactory)>(v1, v2);
return v3;
}
static void <clinit>()
{
java.util.stream.Stream$Builder v1, v10, v11, v12, v2, v3, v4, v5, v6, v7, v8, v9;
java.util.stream.Collector v14;
io.vertx.core.impl.logging.Logger v0;
java.util.stream.Stream v13;
java.lang.Object v15;
v0 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/shareddata/impl/Checker;");
<io.vertx.core.shareddata.impl.Checker: io.vertx.core.impl.logging.Logger log> = v0;
v1 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream$Builder builder()>();
v2 = interfaceinvoke v1.<java.util.stream.Stream$Builder: java.util.stream.Stream$Builder add(java.lang.Object)>(class "Ljava/lang/String;");
v3 = interfaceinvoke v2.<java.util.stream.Stream$Builder: java.util.stream.Stream$Builder add(java.lang.Object)>(class "Ljava/lang/Integer;");
v4 = interfaceinvoke v3.<java.util.stream.Stream$Builder: java.util.stream.Stream$Builder add(java.lang.Object)>(class "Ljava/lang/Long;");
v5 = interfaceinvoke v4.<java.util.stream.Stream$Builder: java.util.stream.Stream$Builder add(java.lang.Object)>(class "Ljava/lang/Boolean;");
v6 = interfaceinvoke v5.<java.util.stream.Stream$Builder: java.util.stream.Stream$Builder add(java.lang.Object)>(class "Ljava/lang/Double;");
v7 = interfaceinvoke v6.<java.util.stream.Stream$Builder: java.util.stream.Stream$Builder add(java.lang.Object)>(class "Ljava/lang/Float;");
v8 = interfaceinvoke v7.<java.util.stream.Stream$Builder: java.util.stream.Stream$Builder add(java.lang.Object)>(class "Ljava/lang/Short;");
v9 = interfaceinvoke v8.<java.util.stream.Stream$Builder: java.util.stream.Stream$Builder add(java.lang.Object)>(class "Ljava/lang/Byte;");
v10 = interfaceinvoke v9.<java.util.stream.Stream$Builder: java.util.stream.Stream$Builder add(java.lang.Object)>(class "Ljava/lang/Character;");
v11 = interfaceinvoke v10.<java.util.stream.Stream$Builder: java.util.stream.Stream$Builder add(java.lang.Object)>(class "Ljava/math/BigInteger;");
v12 = interfaceinvoke v11.<java.util.stream.Stream$Builder: java.util.stream.Stream$Builder add(java.lang.Object)>(class "Ljava/math/BigDecimal;");
v13 = interfaceinvoke v12.<java.util.stream.Stream$Builder: java.util.stream.Stream build()>();
v14 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>();
v15 = interfaceinvoke v13.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v14);
<io.vertx.core.shareddata.impl.Checker: java.util.Set IMMUTABLE_TYPES> = v15;
return;
}
}