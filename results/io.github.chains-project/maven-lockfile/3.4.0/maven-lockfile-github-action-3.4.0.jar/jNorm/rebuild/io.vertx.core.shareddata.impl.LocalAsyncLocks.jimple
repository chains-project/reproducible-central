public class io.vertx.core.shareddata.impl.LocalAsyncLocks extends java.lang.Object
{
private final java.util.concurrent.ConcurrentMap waitersMap;
public void <init>()
{
java.util.concurrent.ConcurrentHashMap v1;
io.vertx.core.shareddata.impl.LocalAsyncLocks v0;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncLocks;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks: java.util.concurrent.ConcurrentMap waitersMap> = v1;
return;
}
public io.vertx.core.Future acquire(io.vertx.core.impl.ContextInternal, java.lang.String, long)
{
io.vertx.core.impl.future.PromiseInternal v4;
io.vertx.core.shareddata.impl.LocalAsyncLocks v0;
java.util.function.BiFunction v7;
io.vertx.core.impl.ContextInternal v1;
long v3;
io.vertx.core.Future v11;
java.util.concurrent.ConcurrentMap v6;
int v9;
java.lang.Object v10, v8;
io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter v5;
java.lang.String v2;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncLocks;
v1 := @parameter0: io.vertx.core.impl.ContextInternal;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: long;
v4 = interfaceinvoke v1.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v5 = new io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter;
specialinvoke v5.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: void <init>(io.vertx.core.shareddata.impl.LocalAsyncLocks,io.vertx.core.impl.ContextInternal,java.lang.String,long,io.vertx.core.Promise)>(v0, v1, v2, v3, v4);
v6 = v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks: java.util.concurrent.ConcurrentMap waitersMap>;
v7 = staticinvoke <io.vertx.core.shareddata.impl.LocalAsyncLocks$lambda_acquire_0__1193: java.util.function.BiFunction bootstrap$(io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter)>(v5);
v8 = interfaceinvoke v6.<java.util.concurrent.ConcurrentMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(v2, v7);
v9 = interfaceinvoke v8.<java.util.List: int size()>();
if v9 != 1 goto label1;
v10 = interfaceinvoke v8.<java.util.List: java.lang.Object get(int)>(0);
virtualinvoke v10.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: void acquireLock()>();
label1:
v11 = interfaceinvoke v4.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v11;
}
private void nextWaiter(java.lang.String)
{
io.vertx.core.shareddata.impl.LocalAsyncLocks v0;
java.util.function.BiFunction v3;
java.lang.Object v4, v5;
java.lang.String v1;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncLocks;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks: java.util.concurrent.ConcurrentMap waitersMap>;
v3 = staticinvoke <io.vertx.core.shareddata.impl.LocalAsyncLocks$lambda_nextWaiter_1__1194: java.util.function.BiFunction bootstrap$()>();
v4 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(v1, v3);
if v4 == null goto label1;
v5 = interfaceinvoke v4.<java.util.List: java.lang.Object get(int)>(0);
virtualinvoke v5.<io.vertx.core.shareddata.impl.LocalAsyncLocks$LockWaiter: void acquireLock()>();
label1:
return;
}
}