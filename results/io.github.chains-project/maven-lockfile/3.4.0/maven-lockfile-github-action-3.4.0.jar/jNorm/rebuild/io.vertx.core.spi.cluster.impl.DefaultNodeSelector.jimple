public class io.vertx.core.spi.cluster.impl.DefaultNodeSelector extends java.lang.Object implements io.vertx.core.spi.cluster.NodeSelector
{
private io.vertx.core.spi.cluster.impl.selector.Selectors selectors;
public void <init>()
{
io.vertx.core.spi.cluster.impl.DefaultNodeSelector v0;
v0 := @this: io.vertx.core.spi.cluster.impl.DefaultNodeSelector;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void init(io.vertx.core.Vertx, io.vertx.core.spi.cluster.ClusterManager)
{
io.vertx.core.spi.cluster.impl.selector.Selectors v3;
io.vertx.core.spi.cluster.impl.DefaultNodeSelector v0;
io.vertx.core.spi.cluster.ClusterManager v2;
io.vertx.core.Vertx v1;
v0 := @this: io.vertx.core.spi.cluster.impl.DefaultNodeSelector;
v1 := @parameter0: io.vertx.core.Vertx;
v2 := @parameter1: io.vertx.core.spi.cluster.ClusterManager;
v3 = new io.vertx.core.spi.cluster.impl.selector.Selectors;
specialinvoke v3.<io.vertx.core.spi.cluster.impl.selector.Selectors: void <init>(io.vertx.core.spi.cluster.ClusterManager)>(v2);
v0.<io.vertx.core.spi.cluster.impl.DefaultNodeSelector: io.vertx.core.spi.cluster.impl.selector.Selectors selectors> = v3;
return;
}
public void eventBusStarted()
{
io.vertx.core.spi.cluster.impl.DefaultNodeSelector v0;
v0 := @this: io.vertx.core.spi.cluster.impl.DefaultNodeSelector;
return;
}
public void selectForSend(io.vertx.core.eventbus.Message, io.vertx.core.Promise)
{
io.vertx.core.spi.cluster.impl.selector.Selectors v4;
io.vertx.core.spi.cluster.impl.DefaultNodeSelector v0;
io.vertx.core.Promise v2;
java.util.function.BiConsumer v5;
io.vertx.core.eventbus.Message v1;
boolean v3;
v0 := @this: io.vertx.core.spi.cluster.impl.DefaultNodeSelector;
v1 := @parameter0: io.vertx.core.eventbus.Message;
v2 := @parameter1: io.vertx.core.Promise;
v3 = interfaceinvoke v1.<io.vertx.core.eventbus.Message: boolean isSend()>();
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v3, "selectForSend used for publishing");
v4 = v0.<io.vertx.core.spi.cluster.impl.DefaultNodeSelector: io.vertx.core.spi.cluster.impl.selector.Selectors selectors>;
v5 = staticinvoke <io.vertx.core.spi.cluster.impl.DefaultNodeSelector$lambda_selectForSend_0__1180: java.util.function.BiConsumer bootstrap$()>();
virtualinvoke v4.<io.vertx.core.spi.cluster.impl.selector.Selectors: void withSelector(io.vertx.core.eventbus.Message,io.vertx.core.Promise,java.util.function.BiConsumer)>(v1, v2, v5);
return;
}
public void selectForPublish(io.vertx.core.eventbus.Message, io.vertx.core.Promise)
{
io.vertx.core.spi.cluster.impl.selector.Selectors v5;
io.vertx.core.spi.cluster.impl.DefaultNodeSelector v0;
io.vertx.core.Promise v2;
java.util.function.BiConsumer v6;
io.vertx.core.eventbus.Message v1;
boolean v3, v4;
v0 := @this: io.vertx.core.spi.cluster.impl.DefaultNodeSelector;
v1 := @parameter0: io.vertx.core.eventbus.Message;
v2 := @parameter1: io.vertx.core.Promise;
v3 = interfaceinvoke v1.<io.vertx.core.eventbus.Message: boolean isSend()>();
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v4, "selectForPublish used for sending");
v5 = v0.<io.vertx.core.spi.cluster.impl.DefaultNodeSelector: io.vertx.core.spi.cluster.impl.selector.Selectors selectors>;
v6 = staticinvoke <io.vertx.core.spi.cluster.impl.DefaultNodeSelector$lambda_selectForPublish_1__1181: java.util.function.BiConsumer bootstrap$()>();
virtualinvoke v5.<io.vertx.core.spi.cluster.impl.selector.Selectors: void withSelector(io.vertx.core.eventbus.Message,io.vertx.core.Promise,java.util.function.BiConsumer)>(v1, v2, v6);
return;
}
public void registrationsUpdated(io.vertx.core.spi.cluster.RegistrationUpdateEvent)
{
io.vertx.core.spi.cluster.impl.selector.Selectors v2;
java.util.List v4;
io.vertx.core.spi.cluster.impl.DefaultNodeSelector v0;
io.vertx.core.spi.cluster.RegistrationUpdateEvent v1;
java.lang.String v3;
v0 := @this: io.vertx.core.spi.cluster.impl.DefaultNodeSelector;
v1 := @parameter0: io.vertx.core.spi.cluster.RegistrationUpdateEvent;
v2 = v0.<io.vertx.core.spi.cluster.impl.DefaultNodeSelector: io.vertx.core.spi.cluster.impl.selector.Selectors selectors>;
v3 = virtualinvoke v1.<io.vertx.core.spi.cluster.RegistrationUpdateEvent: java.lang.String address()>();
v4 = virtualinvoke v1.<io.vertx.core.spi.cluster.RegistrationUpdateEvent: java.util.List registrations()>();
virtualinvoke v2.<io.vertx.core.spi.cluster.impl.selector.Selectors: void dataReceived(java.lang.String,java.util.List,boolean)>(v3, v4, 1);
return;
}
public void registrationsLost()
{
io.vertx.core.spi.cluster.impl.selector.Selectors v1;
io.vertx.core.spi.cluster.impl.DefaultNodeSelector v0;
v0 := @this: io.vertx.core.spi.cluster.impl.DefaultNodeSelector;
v1 = v0.<io.vertx.core.spi.cluster.impl.DefaultNodeSelector: io.vertx.core.spi.cluster.impl.selector.Selectors selectors>;
virtualinvoke v1.<io.vertx.core.spi.cluster.impl.selector.Selectors: void dataLost()>();
return;
}
public boolean wantsUpdatesFor(java.lang.String)
{
io.vertx.core.spi.cluster.impl.selector.Selectors v2;
io.vertx.core.spi.cluster.impl.DefaultNodeSelector v0;
java.lang.String v1;
boolean v3;
v0 := @this: io.vertx.core.spi.cluster.impl.DefaultNodeSelector;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.spi.cluster.impl.DefaultNodeSelector: io.vertx.core.spi.cluster.impl.selector.Selectors selectors>;
v3 = virtualinvoke v2.<io.vertx.core.spi.cluster.impl.selector.Selectors: boolean hasEntryFor(java.lang.String)>(v1);
return v3;
}
}