public interface  io.vertx.core.spi.tracing.TagExtractor extends java.lang.Object
{
public static io.vertx.core.spi.tracing.TagExtractor empty()
{
io.vertx.core.spi.tracing.TagExtractor v0;
v0 = <io.vertx.core.spi.tracing.Extractors: io.vertx.core.spi.tracing.TagExtractor EMPTY>;
return v0;
}
public int len(java.lang.Object)
{
java.lang.Object v1;
io.vertx.core.spi.tracing.TagExtractor v0;
v0 := @this: io.vertx.core.spi.tracing.TagExtractor;
v1 := @parameter0: java.lang.Object;
return 0;
}
public java.lang.String name(java.lang.Object, int)
{
java.lang.IndexOutOfBoundsException v3;
io.vertx.core.spi.tracing.TagExtractor v0;
int v2;
java.lang.Object v1;
java.lang.String v4;
v0 := @this: io.vertx.core.spi.tracing.TagExtractor;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: int;
v3 = new java.lang.IndexOutOfBoundsException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid tag index \u0001");
specialinvoke v3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v4);
throw v3;
}
public java.lang.String value(java.lang.Object, int)
{
java.lang.IndexOutOfBoundsException v3;
io.vertx.core.spi.tracing.TagExtractor v0;
int v2;
java.lang.Object v1;
java.lang.String v4;
v0 := @this: io.vertx.core.spi.tracing.TagExtractor;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: int;
v3 = new java.lang.IndexOutOfBoundsException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid tag index \u0001");
specialinvoke v3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v4);
throw v3;
}
public java.util.Map extract(java.lang.Object)
{
java.lang.Object v1;
java.util.HashMap v2;
io.vertx.core.spi.tracing.TagExtractor v0;
v0 := @this: io.vertx.core.spi.tracing.TagExtractor;
v1 := @parameter0: java.lang.Object;
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
interfaceinvoke v0.<io.vertx.core.spi.tracing.TagExtractor: void extractTo(java.lang.Object,java.util.Map)>(v1, v2);
return v2;
}
public void extractTo(java.lang.Object, java.util.Map)
{
io.vertx.core.spi.tracing.TagExtractor v0;
java.util.Map v2;
int v3, v4;
java.lang.Object v1;
java.lang.String v5, v6;
v0 := @this: io.vertx.core.spi.tracing.TagExtractor;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.util.Map;
v3 = interfaceinvoke v0.<io.vertx.core.spi.tracing.TagExtractor: int len(java.lang.Object)>(v1);
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = interfaceinvoke v0.<io.vertx.core.spi.tracing.TagExtractor: java.lang.String name(java.lang.Object,int)>(v1, v4);
v6 = interfaceinvoke v0.<io.vertx.core.spi.tracing.TagExtractor: java.lang.String value(java.lang.Object,int)>(v1, v4);
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v5, v6);
v4 = v4 + 1;
goto label1;
label2:
return;
}
public void extractTo(java.lang.Object, java.util.function.BiConsumer)
{
io.vertx.core.spi.tracing.TagExtractor v0;
int v3, v4;
java.util.function.BiConsumer v2;
java.lang.Object v1;
java.lang.String v5, v6;
v0 := @this: io.vertx.core.spi.tracing.TagExtractor;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.util.function.BiConsumer;
v3 = interfaceinvoke v0.<io.vertx.core.spi.tracing.TagExtractor: int len(java.lang.Object)>(v1);
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = interfaceinvoke v0.<io.vertx.core.spi.tracing.TagExtractor: java.lang.String name(java.lang.Object,int)>(v1, v4);
v6 = interfaceinvoke v0.<io.vertx.core.spi.tracing.TagExtractor: java.lang.String value(java.lang.Object,int)>(v1, v4);
interfaceinvoke v2.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(v5, v6);
v4 = v4 + 1;
goto label1;
label2:
return;
}
}