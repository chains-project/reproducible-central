public class io.vertx.core.streams.impl.PipeImpl extends java.lang.Object implements io.vertx.core.streams.Pipe
{
private final io.vertx.core.Promise result;
private final io.vertx.core.streams.ReadStream src;
private boolean endOnSuccess;
private boolean endOnFailure;
private io.vertx.core.streams.WriteStream dst;
public void <init>(io.vertx.core.streams.ReadStream)
{
io.vertx.core.streams.impl.PipeImpl v0;
io.vertx.core.Promise v2, v3, v5;
io.vertx.core.streams.ReadStream v1;
io.vertx.core.Handler v4, v6;
v0 := @this: io.vertx.core.streams.impl.PipeImpl;
v1 := @parameter0: io.vertx.core.streams.ReadStream;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.streams.impl.PipeImpl: boolean endOnSuccess> = 1;
v0.<io.vertx.core.streams.impl.PipeImpl: boolean endOnFailure> = 1;
v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.streams.ReadStream src> = v1;
v2 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.Promise result> = v2;
v3 = v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.Promise result>;
virtualinvoke v3.<java.lang.Object: java.lang.Class getClass()>();
v4 = staticinvoke <io.vertx.core.streams.impl.PipeImpl$tryComplete__1246: io.vertx.core.Handler bootstrap$(io.vertx.core.Promise)>(v3);
interfaceinvoke v1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream endHandler(io.vertx.core.Handler)>(v4);
v5 = v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.Promise result>;
virtualinvoke v5.<java.lang.Object: java.lang.Class getClass()>();
v6 = staticinvoke <io.vertx.core.streams.impl.PipeImpl$tryFail__1247: io.vertx.core.Handler bootstrap$(io.vertx.core.Promise)>(v5);
interfaceinvoke v1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream exceptionHandler(io.vertx.core.Handler)>(v6);
return;
}
public synchronized io.vertx.core.streams.Pipe endOnFailure(boolean)
{
io.vertx.core.streams.impl.PipeImpl v0;
boolean v1;
v0 := @this: io.vertx.core.streams.impl.PipeImpl;
v1 := @parameter0: boolean;
v0.<io.vertx.core.streams.impl.PipeImpl: boolean endOnFailure> = v1;
return v0;
}
public synchronized io.vertx.core.streams.Pipe endOnSuccess(boolean)
{
io.vertx.core.streams.impl.PipeImpl v0;
boolean v1;
v0 := @this: io.vertx.core.streams.impl.PipeImpl;
v1 := @parameter0: boolean;
v0.<io.vertx.core.streams.impl.PipeImpl: boolean endOnSuccess> = v1;
return v0;
}
public synchronized io.vertx.core.streams.Pipe endOnComplete(boolean)
{
io.vertx.core.streams.impl.PipeImpl v0;
boolean v1;
v0 := @this: io.vertx.core.streams.impl.PipeImpl;
v1 := @parameter0: boolean;
v0.<io.vertx.core.streams.impl.PipeImpl: boolean endOnSuccess> = v1;
v0.<io.vertx.core.streams.impl.PipeImpl: boolean endOnFailure> = v1;
return v0;
}
public void handleWriteResult(io.vertx.core.AsyncResult)
{
io.vertx.core.streams.impl.PipeImpl v0;
io.vertx.core.streams.impl.PipeImpl$WriteException v4;
java.lang.Throwable v5;
io.vertx.core.Promise v3;
io.vertx.core.AsyncResult v1;
boolean v2;
v0 := @this: io.vertx.core.streams.impl.PipeImpl;
v1 := @parameter0: io.vertx.core.AsyncResult;
v2 = interfaceinvoke v1.<io.vertx.core.AsyncResult: boolean failed()>();
if v2 == 0 goto label1;
v3 = v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.Promise result>;
v4 = new io.vertx.core.streams.impl.PipeImpl$WriteException;
v5 = interfaceinvoke v1.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>();
specialinvoke v4.<io.vertx.core.streams.impl.PipeImpl$WriteException: void <init>(java.lang.Throwable)>(v5);
interfaceinvoke v3.<io.vertx.core.Promise: boolean tryFail(java.lang.Throwable)>(v4);
label1:
return;
}
public void 'to'(io.vertx.core.streams.WriteStream, io.vertx.core.Handler)
{
io.vertx.core.streams.impl.PipeImpl v0;
java.lang.Throwable v6;
java.lang.IllegalStateException v5;
io.vertx.core.Promise v11;
io.vertx.core.Future v12;
java.lang.NullPointerException v3;
io.vertx.core.streams.WriteStream v1, v4;
io.vertx.core.streams.ReadStream v10, v8;
io.vertx.core.Handler v13, v2, v7, v9;
v0 := @this: io.vertx.core.streams.impl.PipeImpl;
v1 := @parameter0: io.vertx.core.streams.WriteStream;
v2 := @parameter1: io.vertx.core.Handler;
if v1 != null goto label1;
v3 = new java.lang.NullPointerException;
specialinvoke v3.<java.lang.NullPointerException: void <init>()>();
throw v3;
label1:
entermonitor v0;
label2:
v4 = v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.streams.WriteStream dst>;
if v4 == null goto label3;
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>()>();
throw v5;
label3:
v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.streams.WriteStream dst> = v1;
exitmonitor v0;
label4:
goto label6;
label5:
v6 := @caughtexception;
exitmonitor v0;
throw v6;
label6:
v7 = staticinvoke <io.vertx.core.streams.impl.PipeImpl$lambda_to_0__1248: io.vertx.core.Handler bootstrap$(io.vertx.core.streams.impl.PipeImpl)>(v0);
v8 = v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.streams.ReadStream src>;
v9 = staticinvoke <io.vertx.core.streams.impl.PipeImpl$lambda_to_1__1249: io.vertx.core.Handler bootstrap$(io.vertx.core.streams.impl.PipeImpl,io.vertx.core.streams.WriteStream,io.vertx.core.Handler)>(v0, v1, v7);
interfaceinvoke v8.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)>(v9);
v10 = v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.streams.ReadStream src>;
interfaceinvoke v10.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>();
v11 = v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.Promise result>;
v12 = interfaceinvoke v11.<io.vertx.core.Promise: io.vertx.core.Future future()>();
v13 = staticinvoke <io.vertx.core.streams.impl.PipeImpl$lambda_to_2__1250: io.vertx.core.Handler bootstrap$(io.vertx.core.streams.impl.PipeImpl,io.vertx.core.Handler)>(v0, v2);
interfaceinvoke v12.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v13);
return;
catch java.lang.Throwable from label2 to label4 with label5;
}
private void handleSuccess(io.vertx.core.Handler)
{
io.vertx.core.streams.impl.PipeImpl v0;
io.vertx.core.streams.WriteStream v3;
io.vertx.core.Handler v1;
io.vertx.core.Future v4;
boolean v2;
v0 := @this: io.vertx.core.streams.impl.PipeImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.streams.impl.PipeImpl: boolean endOnSuccess>;
if v2 == 0 goto label1;
v3 = v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.streams.WriteStream dst>;
interfaceinvoke v3.<io.vertx.core.streams.WriteStream: void end(io.vertx.core.Handler)>(v1);
goto label2;
label1:
v4 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>();
interfaceinvoke v1.<io.vertx.core.Handler: void handle(java.lang.Object)>(v4);
label2:
return;
}
private void handleFailure(java.lang.Throwable, io.vertx.core.Handler)
{
io.vertx.core.streams.impl.PipeImpl v0;
java.lang.Throwable v1;
io.vertx.core.streams.WriteStream v5;
io.vertx.core.Handler v2, v6;
io.vertx.core.Future v3;
boolean v4;
v0 := @this: io.vertx.core.streams.impl.PipeImpl;
v1 := @parameter0: java.lang.Throwable;
v2 := @parameter1: io.vertx.core.Handler;
v3 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>(v1);
v4 = v0.<io.vertx.core.streams.impl.PipeImpl: boolean endOnFailure>;
if v4 == 0 goto label1;
v5 = v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.streams.WriteStream dst>;
v6 = staticinvoke <io.vertx.core.streams.impl.PipeImpl$lambda_handleFailure_3__1251: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.Future)>(v2, v3);
interfaceinvoke v5.<io.vertx.core.streams.WriteStream: void end(io.vertx.core.Handler)>(v6);
goto label2;
label1:
interfaceinvoke v2.<io.vertx.core.Handler: void handle(java.lang.Object)>(v3);
label2:
return;
}
public void close()
{
io.vertx.core.VertxException v7;
io.vertx.core.streams.impl.PipeImpl v0;
java.lang.Throwable v6;
io.vertx.core.Promise v8;
io.vertx.core.streams.WriteStream v3, v4, v5;
io.vertx.core.streams.ReadStream v1, v10, v2;
boolean v9;
v0 := @this: io.vertx.core.streams.impl.PipeImpl;
entermonitor v0;
label1:
v1 = v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.streams.ReadStream src>;
interfaceinvoke v1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream exceptionHandler(io.vertx.core.Handler)>(null);
v2 = v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.streams.ReadStream src>;
interfaceinvoke v2.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)>(null);
v3 = v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.streams.WriteStream dst>;
if v3 == null goto label2;
v4 = v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.streams.WriteStream dst>;
interfaceinvoke v4.<io.vertx.core.streams.WriteStream: io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)>(null);
v5 = v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.streams.WriteStream dst>;
interfaceinvoke v5.<io.vertx.core.streams.WriteStream: io.vertx.core.streams.WriteStream exceptionHandler(io.vertx.core.Handler)>(null);
label2:
exitmonitor v0;
label3:
goto label5;
label4:
v6 := @caughtexception;
exitmonitor v0;
throw v6;
label5:
v7 = new io.vertx.core.VertxException;
specialinvoke v7.<io.vertx.core.VertxException: void <init>(java.lang.String,boolean)>("Pipe closed", 1);
v8 = v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.Promise result>;
v9 = interfaceinvoke v8.<io.vertx.core.Promise: boolean tryFail(java.lang.Throwable)>(v7);
if v9 == 0 goto label6;
v10 = v0.<io.vertx.core.streams.impl.PipeImpl: io.vertx.core.streams.ReadStream src>;
interfaceinvoke v10.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>();
label6:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
}