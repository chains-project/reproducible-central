public interface  io.vertx.ext.auth.authorization.AuthorizationProvider extends java.lang.Object
{
public static io.vertx.ext.auth.authorization.AuthorizationProvider create(java.lang.String, java.util.Set)
{
io.vertx.ext.auth.authorization.AuthorizationProvider$1 v4;
java.util.HashSet v2;
java.util.Set v1;
java.lang.Object v3;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.util.Set;
v2 = new java.util.HashSet;
v3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(v1);
specialinvoke v2.<java.util.HashSet: void <init>(java.util.Collection)>(v3);
v4 = new io.vertx.ext.auth.authorization.AuthorizationProvider$1;
specialinvoke v4.<io.vertx.ext.auth.authorization.AuthorizationProvider$1: void <init>(java.lang.String,java.util.Set)>(v0, v2);
return v4;
}
public abstract java.lang.String getId();
public abstract void getAuthorizations(io.vertx.ext.auth.User, io.vertx.core.Handler);
public io.vertx.core.Future getAuthorizations(io.vertx.ext.auth.User)
{
io.vertx.ext.auth.User v1;
io.vertx.core.Promise v2;
io.vertx.ext.auth.authorization.AuthorizationProvider v0;
io.vertx.core.Future v3;
v0 := @this: io.vertx.ext.auth.authorization.AuthorizationProvider;
v1 := @parameter0: io.vertx.ext.auth.User;
v2 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
interfaceinvoke v0.<io.vertx.ext.auth.authorization.AuthorizationProvider: void getAuthorizations(io.vertx.ext.auth.User,io.vertx.core.Handler)>(v1, v2);
v3 = interfaceinvoke v2.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v3;
}
}