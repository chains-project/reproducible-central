public class io.vertx.ext.auth.impl.asn.ASN1 extends java.lang.Object
{
public static final int ANY;
public static final int BOOLEAN;
public static final int INTEGER;
public static final int BIT_STRING;
public static final int OCTET_STRING;
public static final int NULL;
public static final int OBJECT_IDENTIFIER;
public static final int REAL;
public static final int ENUMERATED;
public static final int UTF8_STRING;
public static final int SEQUENCE;
public static final int SET;
public static final int NUMERIC_STRING;
public static final int PRINTABLE_STRING;
public static final int VIDEOTEX_STRING;
public static final int IA5_STRING;
public static final int UTC_TIME;
public static final int GRAPHIC_STRING;
public static final int ISO646_STRING;
public static final int GENERAL_STRING;
public static final int UNIVERSAL_STRING;
public static final int BMP_STRING;
public static final int CONSTRUCTED;
public static final int CONTEXT_SPECIFIC;
private static final int CLASS_MASK;
private static final int CONSTRUCTED_MASK;
private static final int NUMBER_MASK;
private static final int LEADING_BIT_MASK;
public void <init>()
{
io.vertx.ext.auth.impl.asn.ASN1 v0;
v0 := @this: io.vertx.ext.auth.impl.asn.ASN1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static byte[] length(int)
{
byte[] v1, v2;
int v0;
java.lang.IllegalArgumentException v3;
v0 := @parameter0: int;
if v0 > 127 goto label1;
v1 = newarray (byte)[1];
v1[0] = v0;
return v1;
label1:
if v0 >= 256 goto label2;
v2 = newarray (byte)[2];
v2[0] = -127;
v2[1] = v0;
return v2;
label2:
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("length >= 256");
throw v3;
}
public static byte[] sequence(byte[])
{
byte[] v0, v4, v7;
io.vertx.core.buffer.Buffer v1, v2, v5, v6;
int v3;
v0 := @parameter0: byte[];
v1 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer()>();
v2 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendByte(byte)>(48);
v3 = lengthof v0;
v4 = staticinvoke <io.vertx.ext.auth.impl.asn.ASN1: byte[] length(int)>(v3);
v5 = interfaceinvoke v2.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendBytes(byte[])>(v4);
v6 = interfaceinvoke v5.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer appendBytes(byte[])>(v0);
v7 = interfaceinvoke v6.<io.vertx.core.buffer.Buffer: byte[] getBytes()>();
return v7;
}
public static io.vertx.ext.auth.impl.asn.ASN1$ASN parseASN1(byte[])
{
byte[] v0;
io.vertx.ext.auth.impl.asn.ASN1$ASN v2;
io.vertx.core.buffer.Buffer v1;
v0 := @parameter0: byte[];
v1 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>(v0);
v2 = staticinvoke <io.vertx.ext.auth.impl.asn.ASN1: io.vertx.ext.auth.impl.asn.ASN1$ASN parseASN1(io.vertx.core.buffer.Buffer,int)>(v1, 0);
return v2;
}
public static io.vertx.ext.auth.impl.asn.ASN1$ASN parseASN1(io.vertx.core.buffer.Buffer)
{
io.vertx.ext.auth.impl.asn.ASN1$ASN v1;
io.vertx.core.buffer.Buffer v0;
v0 := @parameter0: io.vertx.core.buffer.Buffer;
v1 = staticinvoke <io.vertx.ext.auth.impl.asn.ASN1: io.vertx.ext.auth.impl.asn.ASN1$ASN parseASN1(io.vertx.core.buffer.Buffer,int)>(v0, 0);
return v1;
}
public static io.vertx.ext.auth.impl.asn.ASN1$ASN parseASN1(io.vertx.core.buffer.Buffer, int)
{
java.util.List v6;
io.vertx.core.buffer.Buffer v0;
int v1, v3, v5;
io.vertx.ext.auth.impl.asn.ASN1$ASNTag v2;
io.vertx.ext.auth.impl.asn.ASN1$ASN v7;
io.vertx.ext.auth.impl.asn.ASN1$ASNLength v4;
v0 := @parameter0: io.vertx.core.buffer.Buffer;
v1 := @parameter1: int;
v2 = staticinvoke <io.vertx.ext.auth.impl.asn.ASN1: io.vertx.ext.auth.impl.asn.ASN1$ASNTag readTag(io.vertx.core.buffer.Buffer,int)>(v0, v1);
v3 = v2.<io.vertx.ext.auth.impl.asn.ASN1$ASNTag: int nextPos>;
v4 = staticinvoke <io.vertx.ext.auth.impl.asn.ASN1: io.vertx.ext.auth.impl.asn.ASN1$ASNLength readLength(io.vertx.core.buffer.Buffer,int)>(v0, v3);
v5 = v4.<io.vertx.ext.auth.impl.asn.ASN1$ASNLength: int nextPos>;
v6 = staticinvoke <io.vertx.ext.auth.impl.asn.ASN1: java.util.List readValue(io.vertx.core.buffer.Buffer,int,io.vertx.ext.auth.impl.asn.ASN1$ASNTag,io.vertx.ext.auth.impl.asn.ASN1$ASNLength)>(v0, v5, v2, v4);
v7 = new io.vertx.ext.auth.impl.asn.ASN1$ASN;
specialinvoke v7.<io.vertx.ext.auth.impl.asn.ASN1$ASN: void <init>(io.vertx.ext.auth.impl.asn.ASN1$ASNTag,io.vertx.ext.auth.impl.asn.ASN1$ASNLength,java.util.List)>(v2, v4, v6);
return v7;
}
private static io.vertx.ext.auth.impl.asn.ASN1$ASNTag readTag(io.vertx.core.buffer.Buffer, int)
{
short v10, v12, v13, v3, v4, v8;
io.vertx.core.buffer.Buffer v0;
int v1, v11, v2, v7, v9;
io.vertx.ext.auth.impl.asn.ASN1$ASNTag v14;
boolean v5, v6;
v0 := @parameter0: io.vertx.core.buffer.Buffer;
v1 := @parameter1: int;
v2 = v1 + 1;
v3 = interfaceinvoke v0.<io.vertx.core.buffer.Buffer: short getUnsignedByte(int)>(v1);
v4 = v3 & 32;
if v4 <= 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
v6 = v5;
v7 = 0;
v8 = v3 & 31;
if v8 == 31 goto label3;
v7 = v3 & 31;
goto label4;
label3:
v9 = v2;
v2 = v2 + 1;
v10 = interfaceinvoke v0.<io.vertx.core.buffer.Buffer: short getUnsignedByte(int)>(v9);
v11 = v7 * 128;
v12 = v10 & -129;
v7 = v11 + v12;
v13 = v10 & 128;
if v13 != 0 goto label3;
label4:
v14 = new io.vertx.ext.auth.impl.asn.ASN1$ASNTag;
specialinvoke v14.<io.vertx.ext.auth.impl.asn.ASN1$ASNTag: void <init>(int,boolean,int,int)>(v3, v6, v7, v2);
return v14;
}
private static io.vertx.ext.auth.impl.asn.ASN1$ASNLength readLength(io.vertx.core.buffer.Buffer, int)
{
short v13, v3, v4, v9;
int v1, v10, v11, v12, v2, v7, v8;
boolean v15, v5, v6;
io.vertx.core.buffer.Buffer v0;
io.vertx.ext.auth.impl.asn.ASN1$ASNLength v14;
v0 := @parameter0: io.vertx.core.buffer.Buffer;
v1 := @parameter1: int;
v2 = v1 + 1;
v3 = interfaceinvoke v0.<io.vertx.core.buffer.Buffer: short getUnsignedByte(int)>(v1);
v4 = v3 & 128;
if v4 == 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
v6 = v5;
v7 = 0;
if v5 != 0 goto label3;
v8 = (int) -129;
v7 = v3 & v8;
goto label5;
label3:
v9 = v3 & -129;
label4:
v10 = v1 + v9;
if v2 > v10 goto label5;
v11 = v7 * 256;
v12 = v2;
v2 = v2 + 1;
v13 = interfaceinvoke v0.<io.vertx.core.buffer.Buffer: short getUnsignedByte(int)>(v12);
v7 = v11 + v13;
goto label4;
label5:
v14 = new io.vertx.ext.auth.impl.asn.ASN1$ASNLength;
if v6 == 0 goto label6;
if v7 != 0 goto label6;
v15 = 1;
goto label7;
label6:
v15 = 0;
label7:
specialinvoke v14.<io.vertx.ext.auth.impl.asn.ASN1$ASNLength: void <init>(boolean,int,int)>(v15, v7, v2);
return v14;
}
private static java.util.List readValue(io.vertx.core.buffer.Buffer, int, io.vertx.ext.auth.impl.asn.ASN1$ASNTag, io.vertx.ext.auth.impl.asn.ASN1$ASNLength)
{
byte[] v9;
java.util.ArrayList v4;
int v1, v10, v11, v14, v16, v18, v22, v24, v5, v7, v8;
io.vertx.ext.auth.impl.asn.ASN1$ASN v12;
boolean v20, v6;
io.vertx.core.buffer.Buffer v0;
io.vertx.ext.auth.impl.asn.ASN1$ASNTag v17, v19, v2, v21;
io.vertx.ext.auth.impl.asn.ASN1$ASNLength v13, v15, v23, v3;
v0 := @parameter0: io.vertx.core.buffer.Buffer;
v1 := @parameter1: int;
v2 := @parameter2: io.vertx.ext.auth.impl.asn.ASN1$ASNTag;
v3 := @parameter3: io.vertx.ext.auth.impl.asn.ASN1$ASNLength;
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
v5 = v1;
v6 = v2.<io.vertx.ext.auth.impl.asn.ASN1$ASNTag: boolean constructed>;
if v6 != 0 goto label1;
v7 = v3.<io.vertx.ext.auth.impl.asn.ASN1$ASNLength: int contentLength>;
v8 = v1 + v7;
v9 = interfaceinvoke v0.<io.vertx.core.buffer.Buffer: byte[] getBytes(int,int)>(v1, v8);
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v9);
goto label3;
label1:
v10 = v3.<io.vertx.ext.auth.impl.asn.ASN1$ASNLength: int contentLength>;
v11 = v1 + v10;
if v5 >= v11 goto label3;
v12 = staticinvoke <io.vertx.ext.auth.impl.asn.ASN1: io.vertx.ext.auth.impl.asn.ASN1$ASN parseASN1(io.vertx.core.buffer.Buffer,int)>(v0, v5);
v13 = v12.<io.vertx.ext.auth.impl.asn.ASN1$ASN: io.vertx.ext.auth.impl.asn.ASN1$ASNLength length>;
v14 = v13.<io.vertx.ext.auth.impl.asn.ASN1$ASNLength: int nextPos>;
v15 = v12.<io.vertx.ext.auth.impl.asn.ASN1$ASN: io.vertx.ext.auth.impl.asn.ASN1$ASNLength length>;
v16 = v15.<io.vertx.ext.auth.impl.asn.ASN1$ASNLength: int contentLength>;
v5 = v14 + v16;
v17 = v12.<io.vertx.ext.auth.impl.asn.ASN1$ASN: io.vertx.ext.auth.impl.asn.ASN1$ASNTag tag>;
v18 = v17.<io.vertx.ext.auth.impl.asn.ASN1$ASNTag: int type>;
if v18 != 0 goto label2;
v19 = v12.<io.vertx.ext.auth.impl.asn.ASN1$ASN: io.vertx.ext.auth.impl.asn.ASN1$ASNTag tag>;
v20 = v19.<io.vertx.ext.auth.impl.asn.ASN1$ASNTag: boolean constructed>;
if v20 != 0 goto label2;
v21 = v12.<io.vertx.ext.auth.impl.asn.ASN1$ASN: io.vertx.ext.auth.impl.asn.ASN1$ASNTag tag>;
v22 = v21.<io.vertx.ext.auth.impl.asn.ASN1$ASNTag: int number>;
if v22 != 0 goto label2;
v23 = v12.<io.vertx.ext.auth.impl.asn.ASN1$ASN: io.vertx.ext.auth.impl.asn.ASN1$ASNLength length>;
v24 = v23.<io.vertx.ext.auth.impl.asn.ASN1$ASNLength: int contentLength>;
if v24 == 0 goto label3;
label2:
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v12);
goto label1;
label3:
return v4;
}
}