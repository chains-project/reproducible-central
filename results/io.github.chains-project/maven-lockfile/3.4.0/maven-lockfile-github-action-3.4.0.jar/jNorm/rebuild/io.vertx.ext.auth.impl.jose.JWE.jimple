public final class io.vertx.ext.auth.impl.jose.JWE extends java.lang.Object
{
private final javax.crypto.Cipher cipher;
private final io.vertx.ext.auth.impl.jose.JWK jwk;
public void <init>(io.vertx.ext.auth.impl.jose.JWK)
{
io.vertx.ext.auth.impl.jose.JWK v1;
java.lang.RuntimeException v10;
java.lang.IllegalArgumentException v6;
io.vertx.ext.auth.impl.jose.JWE v0;
javax.crypto.Cipher v8;
java.security.GeneralSecurityException v9;
java.lang.String v2, v3, v4, v7;
boolean v5;
v0 := @this: io.vertx.ext.auth.impl.jose.JWE;
v1 := @parameter0: io.vertx.ext.auth.impl.jose.JWK;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = virtualinvoke v1.<io.vertx.ext.auth.impl.jose.JWK: java.lang.String use()>();
if v2 == null goto label1;
v3 = "enc";
v4 = virtualinvoke v1.<io.vertx.ext.auth.impl.jose.JWK: java.lang.String use()>();
v5 = virtualinvoke v3.<java.lang.String: boolean equals(java.lang.Object)>(v4);
if v5 == 0 goto label2;
label1:
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("JWK isn\'t meant to perform JWE operations");
throw v6;
label2:
v7 = virtualinvoke v1.<io.vertx.ext.auth.impl.jose.JWK: java.lang.String kty()>();
v8 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(v7);
v0.<io.vertx.ext.auth.impl.jose.JWE: javax.crypto.Cipher cipher> = v8;
label3:
goto label5;
label4:
v9 := @caughtexception;
v10 = new java.lang.RuntimeException;
specialinvoke v10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v9);
throw v10;
label5:
v0.<io.vertx.ext.auth.impl.jose.JWE: io.vertx.ext.auth.impl.jose.JWK jwk> = v1;
return;
catch java.security.NoSuchAlgorithmException from label2 to label3 with label4;
catch javax.crypto.NoSuchPaddingException from label2 to label3 with label4;
}
public byte[] encrypt(byte[]) throws java.security.InvalidKeyException, javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException
{
java.lang.Throwable v10;
byte[] v1, v9;
java.lang.IllegalStateException v4;
io.vertx.ext.auth.impl.jose.JWK v2;
java.security.PublicKey v3;
io.vertx.ext.auth.impl.jose.JWE v0;
javax.crypto.Cipher v5, v6, v7, v8;
v0 := @this: io.vertx.ext.auth.impl.jose.JWE;
v1 := @parameter0: byte[];
v2 = v0.<io.vertx.ext.auth.impl.jose.JWE: io.vertx.ext.auth.impl.jose.JWK jwk>;
v3 = virtualinvoke v2.<io.vertx.ext.auth.impl.jose.JWK: java.security.PublicKey publicKey()>();
if v3 != null goto label1;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Key doesn\'t contain a pubKey material");
throw v4;
label1:
v5 = v0.<io.vertx.ext.auth.impl.jose.JWE: javax.crypto.Cipher cipher>;
entermonitor v5;
label2:
v6 = v0.<io.vertx.ext.auth.impl.jose.JWE: javax.crypto.Cipher cipher>;
virtualinvoke v6.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, v3);
v7 = v0.<io.vertx.ext.auth.impl.jose.JWE: javax.crypto.Cipher cipher>;
virtualinvoke v7.<javax.crypto.Cipher: byte[] update(byte[])>(v1);
v8 = v0.<io.vertx.ext.auth.impl.jose.JWE: javax.crypto.Cipher cipher>;
v9 = virtualinvoke v8.<javax.crypto.Cipher: byte[] doFinal()>();
exitmonitor v5;
label3:
return v9;
label4:
v10 := @caughtexception;
exitmonitor v5;
throw v10;
catch java.lang.Throwable from label2 to label3 with label4;
}
public byte[] decrypt(byte[]) throws java.security.InvalidKeyException, javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException
{
java.lang.Throwable v10;
byte[] v1, v9;
java.lang.IllegalStateException v4;
io.vertx.ext.auth.impl.jose.JWK v2;
io.vertx.ext.auth.impl.jose.JWE v0;
javax.crypto.Cipher v5, v6, v7, v8;
java.security.PrivateKey v3;
v0 := @this: io.vertx.ext.auth.impl.jose.JWE;
v1 := @parameter0: byte[];
v2 = v0.<io.vertx.ext.auth.impl.jose.JWE: io.vertx.ext.auth.impl.jose.JWK jwk>;
v3 = virtualinvoke v2.<io.vertx.ext.auth.impl.jose.JWK: java.security.PrivateKey privateKey()>();
if v3 != null goto label1;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Key doesn\'t contain a secKey material");
throw v4;
label1:
v5 = v0.<io.vertx.ext.auth.impl.jose.JWE: javax.crypto.Cipher cipher>;
entermonitor v5;
label2:
v6 = v0.<io.vertx.ext.auth.impl.jose.JWE: javax.crypto.Cipher cipher>;
virtualinvoke v6.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, v3);
v7 = v0.<io.vertx.ext.auth.impl.jose.JWE: javax.crypto.Cipher cipher>;
virtualinvoke v7.<javax.crypto.Cipher: byte[] update(byte[])>(v1);
v8 = v0.<io.vertx.ext.auth.impl.jose.JWE: javax.crypto.Cipher cipher>;
v9 = virtualinvoke v8.<javax.crypto.Cipher: byte[] doFinal()>();
exitmonitor v5;
label3:
return v9;
label4:
v10 := @caughtexception;
exitmonitor v5;
throw v10;
catch java.lang.Throwable from label2 to label3 with label4;
}
public java.lang.String label()
{
io.vertx.ext.auth.impl.jose.JWK v1;
java.lang.String v2;
io.vertx.ext.auth.impl.jose.JWE v0;
v0 := @this: io.vertx.ext.auth.impl.jose.JWE;
v1 = v0.<io.vertx.ext.auth.impl.jose.JWE: io.vertx.ext.auth.impl.jose.JWK jwk>;
v2 = virtualinvoke v1.<io.vertx.ext.auth.impl.jose.JWK: java.lang.String label()>();
return v2;
}
}