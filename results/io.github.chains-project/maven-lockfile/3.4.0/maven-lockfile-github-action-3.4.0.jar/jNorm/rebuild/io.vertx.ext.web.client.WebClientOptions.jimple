public class io.vertx.ext.web.client.WebClientOptions extends io.vertx.core.http.HttpClientOptions
{
public static final boolean DEFAULT_USER_AGENT_ENABLED;
public static final java.lang.String DEFAULT_USER_AGENT;
public static final boolean DEFAULT_FOLLOW_REDIRECTS;
public static final io.vertx.uritemplate.ExpandOptions DEFAULT_EXPAND_OPTIONS;
private boolean userAgentEnabled;
private java.lang.String userAgent;
private boolean followRedirects;
private io.vertx.uritemplate.ExpandOptions templateExpandOptions;
public void <init>()
{
io.vertx.ext.web.client.WebClientOptions v0;
java.lang.String v1;
io.vertx.uritemplate.ExpandOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
specialinvoke v0.<io.vertx.core.http.HttpClientOptions: void <init>()>();
v0.<io.vertx.ext.web.client.WebClientOptions: boolean userAgentEnabled> = 1;
v1 = <io.vertx.ext.web.client.WebClientOptions: java.lang.String DEFAULT_USER_AGENT>;
v0.<io.vertx.ext.web.client.WebClientOptions: java.lang.String userAgent> = v1;
v0.<io.vertx.ext.web.client.WebClientOptions: boolean followRedirects> = 1;
v2 = <io.vertx.ext.web.client.WebClientOptions: io.vertx.uritemplate.ExpandOptions DEFAULT_EXPAND_OPTIONS>;
v0.<io.vertx.ext.web.client.WebClientOptions: io.vertx.uritemplate.ExpandOptions templateExpandOptions> = v2;
return;
}
public void <init>(io.vertx.ext.web.client.WebClientOptions)
{
io.vertx.ext.web.client.WebClientOptions v0, v1;
java.lang.String v2;
io.vertx.uritemplate.ExpandOptions v3;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.ext.web.client.WebClientOptions;
specialinvoke v0.<io.vertx.core.http.HttpClientOptions: void <init>(io.vertx.core.http.HttpClientOptions)>(v1);
v0.<io.vertx.ext.web.client.WebClientOptions: boolean userAgentEnabled> = 1;
v2 = <io.vertx.ext.web.client.WebClientOptions: java.lang.String DEFAULT_USER_AGENT>;
v0.<io.vertx.ext.web.client.WebClientOptions: java.lang.String userAgent> = v2;
v0.<io.vertx.ext.web.client.WebClientOptions: boolean followRedirects> = 1;
v3 = <io.vertx.ext.web.client.WebClientOptions: io.vertx.uritemplate.ExpandOptions DEFAULT_EXPAND_OPTIONS>;
v0.<io.vertx.ext.web.client.WebClientOptions: io.vertx.uritemplate.ExpandOptions templateExpandOptions> = v3;
virtualinvoke v0.<io.vertx.ext.web.client.WebClientOptions: void init(io.vertx.ext.web.client.WebClientOptions)>(v1);
return;
}
public void <init>(io.vertx.core.http.HttpClientOptions)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v1;
java.lang.String v2;
io.vertx.uritemplate.ExpandOptions v3;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.core.http.HttpClientOptions;
specialinvoke v0.<io.vertx.core.http.HttpClientOptions: void <init>(io.vertx.core.http.HttpClientOptions)>(v1);
v0.<io.vertx.ext.web.client.WebClientOptions: boolean userAgentEnabled> = 1;
v2 = <io.vertx.ext.web.client.WebClientOptions: java.lang.String DEFAULT_USER_AGENT>;
v0.<io.vertx.ext.web.client.WebClientOptions: java.lang.String userAgent> = v2;
v0.<io.vertx.ext.web.client.WebClientOptions: boolean followRedirects> = 1;
v3 = <io.vertx.ext.web.client.WebClientOptions: io.vertx.uritemplate.ExpandOptions DEFAULT_EXPAND_OPTIONS>;
v0.<io.vertx.ext.web.client.WebClientOptions: io.vertx.uritemplate.ExpandOptions templateExpandOptions> = v3;
return;
}
public void <init>(io.vertx.core.json.JsonObject)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.json.JsonObject v1;
java.lang.String v2;
io.vertx.uritemplate.ExpandOptions v3;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.core.json.JsonObject;
specialinvoke v0.<io.vertx.core.http.HttpClientOptions: void <init>(io.vertx.core.json.JsonObject)>(v1);
v0.<io.vertx.ext.web.client.WebClientOptions: boolean userAgentEnabled> = 1;
v2 = <io.vertx.ext.web.client.WebClientOptions: java.lang.String DEFAULT_USER_AGENT>;
v0.<io.vertx.ext.web.client.WebClientOptions: java.lang.String userAgent> = v2;
v0.<io.vertx.ext.web.client.WebClientOptions: boolean followRedirects> = 1;
v3 = <io.vertx.ext.web.client.WebClientOptions: io.vertx.uritemplate.ExpandOptions DEFAULT_EXPAND_OPTIONS>;
v0.<io.vertx.ext.web.client.WebClientOptions: io.vertx.uritemplate.ExpandOptions templateExpandOptions> = v3;
staticinvoke <io.vertx.ext.web.client.WebClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.ext.web.client.WebClientOptions)>(v1, v0);
return;
}
void init(io.vertx.ext.web.client.WebClientOptions)
{
io.vertx.ext.web.client.WebClientOptions v0, v1;
io.vertx.uritemplate.ExpandOptions v5, v6, v7;
java.lang.String v3;
boolean v2, v4;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.ext.web.client.WebClientOptions;
v2 = v1.<io.vertx.ext.web.client.WebClientOptions: boolean userAgentEnabled>;
v0.<io.vertx.ext.web.client.WebClientOptions: boolean userAgentEnabled> = v2;
v3 = v1.<io.vertx.ext.web.client.WebClientOptions: java.lang.String userAgent>;
v0.<io.vertx.ext.web.client.WebClientOptions: java.lang.String userAgent> = v3;
v4 = v1.<io.vertx.ext.web.client.WebClientOptions: boolean followRedirects>;
v0.<io.vertx.ext.web.client.WebClientOptions: boolean followRedirects> = v4;
v5 = v1.<io.vertx.ext.web.client.WebClientOptions: io.vertx.uritemplate.ExpandOptions templateExpandOptions>;
if v5 == null goto label1;
v6 = new io.vertx.uritemplate.ExpandOptions;
v7 = v1.<io.vertx.ext.web.client.WebClientOptions: io.vertx.uritemplate.ExpandOptions templateExpandOptions>;
specialinvoke v6.<io.vertx.uritemplate.ExpandOptions: void <init>(io.vertx.uritemplate.ExpandOptions)>(v7);
goto label2;
label1:
v6 = null;
label2:
v0.<io.vertx.ext.web.client.WebClientOptions: io.vertx.uritemplate.ExpandOptions templateExpandOptions> = v6;
return;
}
public io.vertx.core.json.JsonObject toJson()
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.json.JsonObject v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.json.JsonObject toJson()>();
staticinvoke <io.vertx.ext.web.client.WebClientOptionsConverter: void toJson(io.vertx.ext.web.client.WebClientOptions,io.vertx.core.json.JsonObject)>(v0, v1);
return v1;
}
public boolean isUserAgentEnabled()
{
io.vertx.ext.web.client.WebClientOptions v0;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 = v0.<io.vertx.ext.web.client.WebClientOptions: boolean userAgentEnabled>;
return v1;
}
public io.vertx.ext.web.client.WebClientOptions setUserAgentEnabled(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.ext.web.client.WebClientOptions: boolean userAgentEnabled> = v1;
return v0;
}
public java.lang.String getUserAgent()
{
io.vertx.ext.web.client.WebClientOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 = v0.<io.vertx.ext.web.client.WebClientOptions: java.lang.String userAgent>;
return v1;
}
public io.vertx.ext.web.client.WebClientOptions setUserAgent(java.lang.String)
{
io.vertx.ext.web.client.WebClientOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.ext.web.client.WebClientOptions: java.lang.String userAgent> = v1;
return v0;
}
public boolean isFollowRedirects()
{
io.vertx.ext.web.client.WebClientOptions v0;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 = v0.<io.vertx.ext.web.client.WebClientOptions: boolean followRedirects>;
return v1;
}
public io.vertx.ext.web.client.WebClientOptions setFollowRedirects(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.ext.web.client.WebClientOptions: boolean followRedirects> = v1;
return v0;
}
public io.vertx.uritemplate.ExpandOptions getTemplateExpandOptions()
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.uritemplate.ExpandOptions v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 = v0.<io.vertx.ext.web.client.WebClientOptions: io.vertx.uritemplate.ExpandOptions templateExpandOptions>;
return v1;
}
public io.vertx.ext.web.client.WebClientOptions setTemplateExpandOptions(io.vertx.uritemplate.ExpandOptions)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.uritemplate.ExpandOptions v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.uritemplate.ExpandOptions;
v0.<io.vertx.ext.web.client.WebClientOptions: io.vertx.uritemplate.ExpandOptions templateExpandOptions> = v1;
return v0;
}
public io.vertx.ext.web.client.WebClientOptions setMaxRedirects(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMaxRedirects(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setSendBufferSize(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSendBufferSize(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setReceiveBufferSize(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReceiveBufferSize(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setReuseAddress(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReuseAddress(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setTrafficClass(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTrafficClass(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setTcpNoDelay(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpNoDelay(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setTcpKeepAlive(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpKeepAlive(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setSoLinger(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSoLinger(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setIdleTimeout(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setIdleTimeout(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)
{
io.vertx.ext.web.client.WebClientOptions v0;
java.util.concurrent.TimeUnit v1;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setSsl(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSsl(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
io.vertx.core.net.KeyCertOptions v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.core.net.KeyCertOptions;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
io.vertx.core.net.JksOptions v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.core.net.JksOptions;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
io.vertx.core.net.PfxOptions v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.core.net.PfxOptions;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setTrustOptions(io.vertx.core.net.TrustOptions)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.net.TrustOptions v1;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.core.net.TrustOptions;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTrustOptions(io.vertx.core.net.TrustOptions)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
io.vertx.core.net.PemKeyCertOptions v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.core.net.PemKeyCertOptions;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
io.vertx.core.net.JksOptions v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.core.net.JksOptions;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
io.vertx.core.net.PfxOptions v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.core.net.PfxOptions;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
io.vertx.core.net.PemTrustOptions v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.core.net.PemTrustOptions;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions addEnabledCipherSuite(java.lang.String)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
java.lang.String v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions addEnabledCipherSuite(java.lang.String)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions addCrlPath(java.lang.String) throws java.lang.NullPointerException
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
java.lang.String v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions addCrlPath(java.lang.String)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions addCrlValue(io.vertx.core.buffer.Buffer) throws java.lang.NullPointerException
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
io.vertx.core.buffer.Buffer v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions addCrlValue(io.vertx.core.buffer.Buffer)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setConnectTimeout(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setConnectTimeout(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setTrustAll(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTrustAll(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setMaxPoolSize(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMaxPoolSize(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setHttp2MultiplexingLimit(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setHttp2MultiplexingLimit(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setHttp2MaxPoolSize(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setHttp2MaxPoolSize(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setHttp2ConnectionWindowSize(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setHttp2ConnectionWindowSize(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setKeepAlive(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setKeepAlive(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setPipelining(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPipelining(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setPipeliningLimit(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPipeliningLimit(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setVerifyHost(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setVerifyHost(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setTryUseCompression(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTryUseCompression(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setSendUnmaskedFrames(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSendUnmaskedFrames(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setMaxWebSocketFrameSize(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMaxWebSocketFrameSize(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setDefaultHost(java.lang.String)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
java.lang.String v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setDefaultHost(java.lang.String)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setDefaultPort(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setDefaultPort(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setMaxChunkSize(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMaxChunkSize(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setProtocolVersion(io.vertx.core.http.HttpVersion)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
io.vertx.core.http.HttpVersion v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.core.http.HttpVersion;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setProtocolVersion(io.vertx.core.http.HttpVersion)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setMaxHeaderSize(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMaxHeaderSize(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setMaxWaitQueueSize(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMaxWaitQueueSize(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setUseAlpn(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setUseAlpn(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.net.SSLEngineOptions v1;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.core.net.SSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
io.vertx.core.net.JdkSSLEngineOptions v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.core.net.JdkSSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.net.OpenSSLEngineOptions v1;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.core.net.OpenSSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setHttp2ClearTextUpgrade(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setHttp2ClearTextUpgrade(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setAlpnVersions(java.util.List)
{
io.vertx.ext.web.client.WebClientOptions v0;
java.util.List v1;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: java.util.List;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setAlpnVersions(java.util.List)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setMetricsName(java.lang.String)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
java.lang.String v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMetricsName(java.lang.String)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setProxyOptions(io.vertx.core.net.ProxyOptions)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.net.ProxyOptions v1;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.core.net.ProxyOptions;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setProxyOptions(io.vertx.core.net.ProxyOptions)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setLocalAddress(java.lang.String)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
java.lang.String v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setLocalAddress(java.lang.String)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setLogActivity(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setLogActivity(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions addEnabledSecureTransportProtocol(java.lang.String)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
java.lang.String v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions addEnabledSecureTransportProtocol(java.lang.String)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions removeEnabledSecureTransportProtocol(java.lang.String)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
java.lang.String v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions removeEnabledSecureTransportProtocol(java.lang.String)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setEnabledSecureTransportProtocols(java.util.Set)
{
io.vertx.ext.web.client.WebClientOptions v0;
java.util.Set v1;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: java.util.Set;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setEnabledSecureTransportProtocols(java.util.Set)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setReusePort(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReusePort(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setTcpFastOpen(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpFastOpen(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setTcpCork(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpCork(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setTcpQuickAck(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTcpQuickAck(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setHttp2KeepAliveTimeout(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setHttp2KeepAliveTimeout(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setForceSni(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setForceSni(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setDecoderInitialBufferSize(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setDecoderInitialBufferSize(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setPoolCleanerPeriod(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPoolCleanerPeriod(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setKeepAliveTimeout(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setKeepAliveTimeout(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setMaxWebSocketMessageSize(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMaxWebSocketMessageSize(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setMaxInitialLineLength(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMaxInitialLineLength(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setInitialSettings(io.vertx.core.http.Http2Settings)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.Http2Settings v1;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.core.http.Http2Settings;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setInitialSettings(io.vertx.core.http.Http2Settings)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setSslHandshakeTimeout(long)
{
io.vertx.ext.web.client.WebClientOptions v0;
long v1;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: long;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSslHandshakeTimeout(long)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setSslHandshakeTimeoutUnit(java.util.concurrent.TimeUnit)
{
io.vertx.ext.web.client.WebClientOptions v0;
java.util.concurrent.TimeUnit v1;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setSslHandshakeTimeoutUnit(java.util.concurrent.TimeUnit)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setTryUsePerFrameWebSocketCompression(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTryUsePerFrameWebSocketCompression(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setTryUsePerMessageWebSocketCompression(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTryUsePerMessageWebSocketCompression(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setWebSocketCompressionLevel(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setWebSocketCompressionLevel(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setWebSocketCompressionAllowClientNoContext(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setWebSocketCompressionAllowClientNoContext(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setWebSocketCompressionRequestServerNoContext(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setWebSocketCompressionRequestServerNoContext(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setReadIdleTimeout(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setReadIdleTimeout(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setWriteIdleTimeout(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setWriteIdleTimeout(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setMaxWebSockets(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setMaxWebSockets(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setNonProxyHosts(java.util.List)
{
io.vertx.ext.web.client.WebClientOptions v0;
java.util.List v1;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: java.util.List;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setNonProxyHosts(java.util.List)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions addNonProxyHost(java.lang.String)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
java.lang.String v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions addNonProxyHost(java.lang.String)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setWebSocketClosingTimeout(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setWebSocketClosingTimeout(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setTracingPolicy(io.vertx.core.tracing.TracingPolicy)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
io.vertx.core.tracing.TracingPolicy v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: io.vertx.core.tracing.TracingPolicy;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setTracingPolicy(io.vertx.core.tracing.TracingPolicy)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setPoolEventLoopSize(int)
{
int v1;
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setPoolEventLoopSize(int)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setShared(boolean)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
boolean v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setShared(boolean)>(v1);
return v2;
}
public io.vertx.ext.web.client.WebClientOptions setName(java.lang.String)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.http.HttpClientOptions v2;
java.lang.String v1;
v0 := @this: io.vertx.ext.web.client.WebClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpClientOptions setName(java.lang.String)>(v1);
return v2;
}
public static java.lang.String loadUserAgent()
{
int v2;
java.lang.String v0, v1;
v0 = "Vert.x-WebClient";
v1 = staticinvoke <io.vertx.core.impl.launcher.commands.VersionCommand: java.lang.String getVersion()>();
v2 = virtualinvoke v1.<java.lang.String: int length()>();
if v2 <= 0 goto label1;
v0 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>("Vert.x-WebClient", v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/\u0001");
label1:
return v0;
}
static void <clinit>()
{
java.lang.String v0;
v0 = staticinvoke <io.vertx.ext.web.client.WebClientOptions: java.lang.String loadUserAgent()>();
<io.vertx.ext.web.client.WebClientOptions: java.lang.String DEFAULT_USER_AGENT> = v0;
<io.vertx.ext.web.client.WebClientOptions: io.vertx.uritemplate.ExpandOptions DEFAULT_EXPAND_OPTIONS> = null;
return;
}
}