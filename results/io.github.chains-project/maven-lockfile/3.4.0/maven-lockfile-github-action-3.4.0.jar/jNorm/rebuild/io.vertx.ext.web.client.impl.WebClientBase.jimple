public class io.vertx.ext.web.client.impl.WebClientBase extends java.lang.Object implements io.vertx.ext.web.client.impl.WebClientInternal
{
final io.vertx.core.http.HttpClient client;
final io.vertx.ext.web.client.WebClientOptions options;
final java.util.List interceptors;
public void <init>(io.vertx.core.http.HttpClient, io.vertx.ext.web.client.WebClientOptions)
{
io.vertx.ext.web.client.WebClientOptions v2, v3;
io.vertx.ext.web.client.impl.WebClientBase v0;
io.vertx.ext.web.client.impl.predicate.PredicateInterceptor v7;
io.vertx.uritemplate.ExpandOptions v4, v5;
io.vertx.core.http.HttpClient v1;
java.util.concurrent.CopyOnWriteArrayList v6;
v0 := @this: io.vertx.ext.web.client.impl.WebClientBase;
v1 := @parameter0: io.vertx.core.http.HttpClient;
v2 := @parameter1: io.vertx.ext.web.client.WebClientOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new io.vertx.ext.web.client.WebClientOptions;
specialinvoke v3.<io.vertx.ext.web.client.WebClientOptions: void <init>(io.vertx.ext.web.client.WebClientOptions)>(v2);
v4 = virtualinvoke v3.<io.vertx.ext.web.client.WebClientOptions: io.vertx.uritemplate.ExpandOptions getTemplateExpandOptions()>();
if v4 != null goto label1;
v5 = new io.vertx.uritemplate.ExpandOptions;
specialinvoke v5.<io.vertx.uritemplate.ExpandOptions: void <init>()>();
virtualinvoke v3.<io.vertx.ext.web.client.WebClientOptions: io.vertx.ext.web.client.WebClientOptions setTemplateExpandOptions(io.vertx.uritemplate.ExpandOptions)>(v5);
label1:
v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.core.http.HttpClient client> = v1;
v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options> = v3;
v6 = new java.util.concurrent.CopyOnWriteArrayList;
specialinvoke v6.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();
v0.<io.vertx.ext.web.client.impl.WebClientBase: java.util.List interceptors> = v6;
v7 = new io.vertx.ext.web.client.impl.predicate.PredicateInterceptor;
specialinvoke v7.<io.vertx.ext.web.client.impl.predicate.PredicateInterceptor: void <init>()>();
virtualinvoke v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.impl.WebClientInternal addInterceptor(io.vertx.core.Handler)>(v7);
return;
}
void <init>(io.vertx.ext.web.client.impl.WebClientBase)
{
io.vertx.ext.web.client.WebClientOptions v3, v4;
java.util.List v6;
io.vertx.ext.web.client.impl.WebClientBase v0, v1;
io.vertx.core.http.HttpClient v2;
java.util.concurrent.CopyOnWriteArrayList v5;
v0 := @this: io.vertx.ext.web.client.impl.WebClientBase;
v1 := @parameter0: io.vertx.ext.web.client.impl.WebClientBase;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = v1.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.core.http.HttpClient client>;
v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.core.http.HttpClient client> = v2;
v3 = new io.vertx.ext.web.client.WebClientOptions;
v4 = v1.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
specialinvoke v3.<io.vertx.ext.web.client.WebClientOptions: void <init>(io.vertx.ext.web.client.WebClientOptions)>(v4);
v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options> = v3;
v5 = new java.util.concurrent.CopyOnWriteArrayList;
v6 = v1.<io.vertx.ext.web.client.impl.WebClientBase: java.util.List interceptors>;
specialinvoke v5.<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.util.Collection)>(v6);
v0.<io.vertx.ext.web.client.impl.WebClientBase: java.util.List interceptors> = v5;
return;
}
public io.vertx.ext.web.client.HttpRequest request(io.vertx.core.http.HttpMethod, io.vertx.core.net.SocketAddress, java.lang.String)
{
io.vertx.ext.web.client.WebClientOptions v4, v6;
io.vertx.ext.web.client.impl.WebClientBase v0;
io.vertx.ext.web.client.impl.HttpRequestImpl v8;
io.vertx.core.http.HttpMethod v1;
int v5;
java.lang.String v3, v7;
io.vertx.core.net.SocketAddress v2;
v0 := @this: io.vertx.ext.web.client.impl.WebClientBase;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: io.vertx.core.net.SocketAddress;
v3 := @parameter2: java.lang.String;
v4 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v5 = virtualinvoke v4.<io.vertx.ext.web.client.WebClientOptions: int getDefaultPort()>();
v6 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v7 = virtualinvoke v6.<io.vertx.ext.web.client.WebClientOptions: java.lang.String getDefaultHost()>();
v8 = virtualinvoke v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.impl.HttpRequestImpl request(io.vertx.core.http.HttpMethod,io.vertx.core.net.SocketAddress,int,java.lang.String,java.lang.String)>(v1, v2, v5, v7, v3);
return v8;
}
public io.vertx.ext.web.client.HttpRequest request(io.vertx.core.http.HttpMethod, io.vertx.core.net.SocketAddress, io.vertx.uritemplate.UriTemplate)
{
io.vertx.ext.web.client.WebClientOptions v10, v13, v15, v17, v5, v8;
io.vertx.uritemplate.UriTemplate v3;
io.vertx.core.MultiMap v18;
io.vertx.ext.web.codec.BodyCodec v12;
io.vertx.ext.web.client.impl.HttpRequestImpl v4;
int v9;
java.lang.Boolean v7;
java.lang.String v11;
boolean v14, v6;
io.vertx.core.net.SocketAddress v2;
io.vertx.core.net.ProxyOptions v16;
io.vertx.ext.web.client.impl.WebClientBase v0;
io.vertx.core.http.HttpMethod v1;
v0 := @this: io.vertx.ext.web.client.impl.WebClientBase;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: io.vertx.core.net.SocketAddress;
v3 := @parameter2: io.vertx.uritemplate.UriTemplate;
v4 = new io.vertx.ext.web.client.impl.HttpRequestImpl;
v5 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v6 = virtualinvoke v5.<io.vertx.ext.web.client.WebClientOptions: boolean isSsl()>();
v7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v6);
v8 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v9 = virtualinvoke v8.<io.vertx.ext.web.client.WebClientOptions: int getDefaultPort()>();
v10 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v11 = virtualinvoke v10.<io.vertx.ext.web.client.WebClientOptions: java.lang.String getDefaultHost()>();
v12 = <io.vertx.ext.web.codec.impl.BodyCodecImpl: io.vertx.ext.web.codec.BodyCodec BUFFER>;
v13 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v14 = virtualinvoke v13.<io.vertx.ext.web.client.WebClientOptions: boolean isFollowRedirects()>();
v15 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v16 = staticinvoke <io.vertx.ext.web.client.impl.WebClientBase: io.vertx.core.net.ProxyOptions buildProxyOptions(io.vertx.ext.web.client.WebClientOptions)>(v15);
v17 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v18 = staticinvoke <io.vertx.ext.web.client.impl.WebClientBase: io.vertx.core.MultiMap buildHeaders(io.vertx.ext.web.client.WebClientOptions)>(v17);
specialinvoke v4.<io.vertx.ext.web.client.impl.HttpRequestImpl: void <init>(io.vertx.ext.web.client.impl.WebClientBase,io.vertx.core.http.HttpMethod,io.vertx.core.net.SocketAddress,java.lang.Boolean,int,java.lang.String,java.lang.Object,io.vertx.ext.web.codec.BodyCodec,boolean,io.vertx.core.net.ProxyOptions,io.vertx.core.MultiMap)>(v0, v1, v2, v7, v9, v11, v3, v12, v14, v16, v18);
return v4;
}
public io.vertx.ext.web.client.HttpRequest request(io.vertx.core.http.HttpMethod, io.vertx.core.net.SocketAddress, io.vertx.core.http.RequestOptions)
{
io.vertx.ext.web.client.WebClientOptions v5, v8;
io.vertx.core.MultiMap v19, v21;
io.vertx.core.http.RequestOptions v3;
long v13;
java.lang.Integer v4;
io.vertx.ext.web.client.impl.HttpRequestImpl v11;
int v6, v9;
java.lang.Boolean v12, v14;
java.lang.String v10, v18, v7;
boolean v15;
io.vertx.core.net.SocketAddress v2;
io.vertx.core.net.ProxyOptions v16, v17;
io.vertx.ext.web.client.impl.WebClientBase v0;
io.vertx.ext.web.client.HttpRequest v20;
io.vertx.core.http.HttpMethod v1;
v0 := @this: io.vertx.ext.web.client.impl.WebClientBase;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: io.vertx.core.net.SocketAddress;
v3 := @parameter2: io.vertx.core.http.RequestOptions;
v4 = virtualinvoke v3.<io.vertx.core.http.RequestOptions: java.lang.Integer getPort()>();
if v4 != null goto label1;
v5 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v6 = virtualinvoke v5.<io.vertx.ext.web.client.WebClientOptions: int getDefaultPort()>();
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
label1:
v7 = virtualinvoke v3.<io.vertx.core.http.RequestOptions: java.lang.String getHost()>();
if v7 != null goto label2;
v8 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v7 = virtualinvoke v8.<io.vertx.ext.web.client.WebClientOptions: java.lang.String getDefaultHost()>();
label2:
v9 = virtualinvoke v4.<java.lang.Integer: int intValue()>();
v10 = virtualinvoke v3.<io.vertx.core.http.RequestOptions: java.lang.String getURI()>();
v11 = virtualinvoke v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.impl.HttpRequestImpl request(io.vertx.core.http.HttpMethod,io.vertx.core.net.SocketAddress,int,java.lang.String,java.lang.String)>(v1, v2, v9, v7, v10);
v12 = virtualinvoke v3.<io.vertx.core.http.RequestOptions: java.lang.Boolean isSsl()>();
virtualinvoke v11.<io.vertx.ext.web.client.impl.HttpRequestImpl: io.vertx.ext.web.client.HttpRequest ssl(java.lang.Boolean)>(v12);
v13 = virtualinvoke v3.<io.vertx.core.http.RequestOptions: long getTimeout()>();
virtualinvoke v11.<io.vertx.ext.web.client.impl.HttpRequestImpl: io.vertx.ext.web.client.HttpRequest timeout(long)>(v13);
v14 = virtualinvoke v3.<io.vertx.core.http.RequestOptions: java.lang.Boolean getFollowRedirects()>();
v15 = virtualinvoke v14.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v11.<io.vertx.ext.web.client.impl.HttpRequestImpl: io.vertx.ext.web.client.HttpRequest followRedirects(boolean)>(v15);
v16 = virtualinvoke v3.<io.vertx.core.http.RequestOptions: io.vertx.core.net.ProxyOptions getProxyOptions()>();
if v16 == null goto label3;
v17 = new io.vertx.core.net.ProxyOptions;
specialinvoke v17.<io.vertx.core.net.ProxyOptions: void <init>(io.vertx.core.net.ProxyOptions)>(v16);
virtualinvoke v11.<io.vertx.ext.web.client.impl.HttpRequestImpl: io.vertx.ext.web.client.HttpRequest proxy(io.vertx.core.net.ProxyOptions)>(v17);
label3:
v18 = virtualinvoke v3.<io.vertx.core.http.RequestOptions: java.lang.String getTraceOperation()>();
virtualinvoke v11.<io.vertx.ext.web.client.impl.HttpRequestImpl: io.vertx.ext.web.client.HttpRequest traceOperation(java.lang.String)>(v18);
v19 = virtualinvoke v3.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap getHeaders()>();
if v19 != null goto label4;
v20 = v11;
goto label5;
label4:
v21 = virtualinvoke v3.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap getHeaders()>();
v20 = virtualinvoke v11.<io.vertx.ext.web.client.impl.HttpRequestImpl: io.vertx.ext.web.client.HttpRequest putHeaders(io.vertx.core.MultiMap)>(v21);
label5:
return v20;
}
public io.vertx.ext.web.client.HttpRequest request(io.vertx.core.http.HttpMethod, io.vertx.core.net.SocketAddress, java.lang.String, java.lang.String)
{
io.vertx.ext.web.client.WebClientOptions v5;
io.vertx.ext.web.client.impl.WebClientBase v0;
io.vertx.ext.web.client.impl.HttpRequestImpl v7;
io.vertx.core.http.HttpMethod v1;
int v6;
java.lang.String v3, v4;
io.vertx.core.net.SocketAddress v2;
v0 := @this: io.vertx.ext.web.client.impl.WebClientBase;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: io.vertx.core.net.SocketAddress;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v6 = virtualinvoke v5.<io.vertx.ext.web.client.WebClientOptions: int getDefaultPort()>();
v7 = virtualinvoke v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.impl.HttpRequestImpl request(io.vertx.core.http.HttpMethod,io.vertx.core.net.SocketAddress,int,java.lang.String,java.lang.String)>(v1, v2, v6, v3, v4);
return v7;
}
public io.vertx.ext.web.client.HttpRequest request(io.vertx.core.http.HttpMethod, io.vertx.core.net.SocketAddress, java.lang.String, io.vertx.uritemplate.UriTemplate)
{
io.vertx.ext.web.client.WebClientOptions v5;
io.vertx.uritemplate.UriTemplate v4;
io.vertx.ext.web.client.impl.WebClientBase v0;
io.vertx.ext.web.client.HttpRequest v7;
io.vertx.core.http.HttpMethod v1;
int v6;
java.lang.String v3;
io.vertx.core.net.SocketAddress v2;
v0 := @this: io.vertx.ext.web.client.impl.WebClientBase;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: io.vertx.core.net.SocketAddress;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.vertx.uritemplate.UriTemplate;
v5 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v6 = virtualinvoke v5.<io.vertx.ext.web.client.WebClientOptions: int getDefaultPort()>();
v7 = virtualinvoke v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.HttpRequest request(io.vertx.core.http.HttpMethod,io.vertx.core.net.SocketAddress,int,java.lang.String,io.vertx.uritemplate.UriTemplate)>(v1, v2, v6, v3, v4);
return v7;
}
public io.vertx.ext.web.client.impl.HttpRequestImpl request(io.vertx.core.http.HttpMethod, io.vertx.core.net.SocketAddress, int, java.lang.String, java.lang.String)
{
io.vertx.ext.web.client.WebClientOptions v11, v13, v15, v7;
io.vertx.core.MultiMap v16;
io.vertx.ext.web.codec.BodyCodec v10;
io.vertx.ext.web.client.impl.HttpRequestImpl v6;
int v3;
java.lang.Boolean v9;
java.lang.String v4, v5;
boolean v12, v8;
io.vertx.core.net.SocketAddress v2;
io.vertx.core.net.ProxyOptions v14;
io.vertx.ext.web.client.impl.WebClientBase v0;
io.vertx.core.http.HttpMethod v1;
v0 := @this: io.vertx.ext.web.client.impl.WebClientBase;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: io.vertx.core.net.SocketAddress;
v3 := @parameter2: int;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: java.lang.String;
v6 = new io.vertx.ext.web.client.impl.HttpRequestImpl;
v7 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v8 = virtualinvoke v7.<io.vertx.ext.web.client.WebClientOptions: boolean isSsl()>();
v9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v8);
v10 = <io.vertx.ext.web.codec.impl.BodyCodecImpl: io.vertx.ext.web.codec.BodyCodec BUFFER>;
v11 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v12 = virtualinvoke v11.<io.vertx.ext.web.client.WebClientOptions: boolean isFollowRedirects()>();
v13 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v14 = staticinvoke <io.vertx.ext.web.client.impl.WebClientBase: io.vertx.core.net.ProxyOptions buildProxyOptions(io.vertx.ext.web.client.WebClientOptions)>(v13);
v15 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v16 = staticinvoke <io.vertx.ext.web.client.impl.WebClientBase: io.vertx.core.MultiMap buildHeaders(io.vertx.ext.web.client.WebClientOptions)>(v15);
specialinvoke v6.<io.vertx.ext.web.client.impl.HttpRequestImpl: void <init>(io.vertx.ext.web.client.impl.WebClientBase,io.vertx.core.http.HttpMethod,io.vertx.core.net.SocketAddress,java.lang.Boolean,int,java.lang.String,java.lang.Object,io.vertx.ext.web.codec.BodyCodec,boolean,io.vertx.core.net.ProxyOptions,io.vertx.core.MultiMap)>(v0, v1, v2, v9, v3, v4, v5, v10, v12, v14, v16);
return v6;
}
public io.vertx.ext.web.client.HttpRequest request(io.vertx.core.http.HttpMethod, io.vertx.core.net.SocketAddress, int, java.lang.String, io.vertx.uritemplate.UriTemplate)
{
io.vertx.ext.web.client.WebClientOptions v11, v13, v15, v7;
io.vertx.uritemplate.UriTemplate v5;
io.vertx.core.MultiMap v16;
io.vertx.ext.web.codec.BodyCodec v10;
io.vertx.ext.web.client.impl.HttpRequestImpl v6;
int v3;
java.lang.Boolean v9;
java.lang.String v4;
boolean v12, v8;
io.vertx.core.net.SocketAddress v2;
io.vertx.core.net.ProxyOptions v14;
io.vertx.ext.web.client.impl.WebClientBase v0;
io.vertx.core.http.HttpMethod v1;
v0 := @this: io.vertx.ext.web.client.impl.WebClientBase;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: io.vertx.core.net.SocketAddress;
v3 := @parameter2: int;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: io.vertx.uritemplate.UriTemplate;
v6 = new io.vertx.ext.web.client.impl.HttpRequestImpl;
v7 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v8 = virtualinvoke v7.<io.vertx.ext.web.client.WebClientOptions: boolean isSsl()>();
v9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v8);
v10 = <io.vertx.ext.web.codec.impl.BodyCodecImpl: io.vertx.ext.web.codec.BodyCodec BUFFER>;
v11 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v12 = virtualinvoke v11.<io.vertx.ext.web.client.WebClientOptions: boolean isFollowRedirects()>();
v13 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v14 = staticinvoke <io.vertx.ext.web.client.impl.WebClientBase: io.vertx.core.net.ProxyOptions buildProxyOptions(io.vertx.ext.web.client.WebClientOptions)>(v13);
v15 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v16 = staticinvoke <io.vertx.ext.web.client.impl.WebClientBase: io.vertx.core.MultiMap buildHeaders(io.vertx.ext.web.client.WebClientOptions)>(v15);
specialinvoke v6.<io.vertx.ext.web.client.impl.HttpRequestImpl: void <init>(io.vertx.ext.web.client.impl.WebClientBase,io.vertx.core.http.HttpMethod,io.vertx.core.net.SocketAddress,java.lang.Boolean,int,java.lang.String,java.lang.Object,io.vertx.ext.web.codec.BodyCodec,boolean,io.vertx.core.net.ProxyOptions,io.vertx.core.MultiMap)>(v0, v1, v2, v9, v3, v4, v5, v10, v12, v14, v16);
return v6;
}
public io.vertx.ext.web.client.HttpRequest requestAbs(io.vertx.core.http.HttpMethod, io.vertx.core.net.SocketAddress, java.lang.String)
{
io.vertx.core.VertxException v6;
io.vertx.ext.web.client.WebClientOptions v13, v15, v17;
io.vertx.core.MultiMap v18;
io.vertx.ext.web.codec.BodyCodec v12;
io.vertx.ext.web.client.impl.HttpRequestImpl v7;
int v9;
java.lang.Boolean v8;
java.lang.String v10, v11, v3;
boolean v14;
io.vertx.core.net.SocketAddress v2;
io.vertx.ext.web.client.impl.ClientUri v4;
io.vertx.core.net.ProxyOptions v16;
io.vertx.ext.web.client.impl.WebClientBase v0;
java.lang.Exception v5;
io.vertx.core.http.HttpMethod v1;
v0 := @this: io.vertx.ext.web.client.impl.WebClientBase;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: io.vertx.core.net.SocketAddress;
v3 := @parameter2: java.lang.String;
label1:
v4 = staticinvoke <io.vertx.ext.web.client.impl.ClientUri: io.vertx.ext.web.client.impl.ClientUri parse(java.lang.String)>(v3);
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = new io.vertx.core.VertxException;
specialinvoke v6.<io.vertx.core.VertxException: void <init>(java.lang.Throwable)>(v5);
throw v6;
label4:
v7 = new io.vertx.ext.web.client.impl.HttpRequestImpl;
v8 = v4.<io.vertx.ext.web.client.impl.ClientUri: java.lang.Boolean ssl>;
v9 = v4.<io.vertx.ext.web.client.impl.ClientUri: int port>;
v10 = v4.<io.vertx.ext.web.client.impl.ClientUri: java.lang.String host>;
v11 = v4.<io.vertx.ext.web.client.impl.ClientUri: java.lang.String uri>;
v12 = <io.vertx.ext.web.codec.impl.BodyCodecImpl: io.vertx.ext.web.codec.BodyCodec BUFFER>;
v13 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v14 = virtualinvoke v13.<io.vertx.ext.web.client.WebClientOptions: boolean isFollowRedirects()>();
v15 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v16 = staticinvoke <io.vertx.ext.web.client.impl.WebClientBase: io.vertx.core.net.ProxyOptions buildProxyOptions(io.vertx.ext.web.client.WebClientOptions)>(v15);
v17 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v18 = staticinvoke <io.vertx.ext.web.client.impl.WebClientBase: io.vertx.core.MultiMap buildHeaders(io.vertx.ext.web.client.WebClientOptions)>(v17);
specialinvoke v7.<io.vertx.ext.web.client.impl.HttpRequestImpl: void <init>(io.vertx.ext.web.client.impl.WebClientBase,io.vertx.core.http.HttpMethod,io.vertx.core.net.SocketAddress,java.lang.Boolean,int,java.lang.String,java.lang.Object,io.vertx.ext.web.codec.BodyCodec,boolean,io.vertx.core.net.ProxyOptions,io.vertx.core.MultiMap)>(v0, v1, v2, v8, v9, v10, v11, v12, v14, v16, v18);
return v7;
catch java.net.URISyntaxException from label1 to label2 with label3;
catch java.net.MalformedURLException from label1 to label2 with label3;
}
public io.vertx.ext.web.client.HttpRequest requestAbs(io.vertx.core.http.HttpMethod, io.vertx.core.net.SocketAddress, io.vertx.uritemplate.UriTemplate)
{
io.vertx.ext.web.client.WebClientOptions v10, v6, v8;
io.vertx.uritemplate.UriTemplate v3;
io.vertx.core.net.ProxyOptions v9;
io.vertx.ext.web.client.impl.WebClientBase v0;
io.vertx.core.MultiMap v11;
io.vertx.ext.web.codec.BodyCodec v5;
io.vertx.ext.web.client.impl.HttpRequestImpl v4;
io.vertx.core.http.HttpMethod v1;
boolean v7;
io.vertx.core.net.SocketAddress v2;
v0 := @this: io.vertx.ext.web.client.impl.WebClientBase;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: io.vertx.core.net.SocketAddress;
v3 := @parameter2: io.vertx.uritemplate.UriTemplate;
v4 = new io.vertx.ext.web.client.impl.HttpRequestImpl;
v5 = <io.vertx.ext.web.codec.impl.BodyCodecImpl: io.vertx.ext.web.codec.BodyCodec BUFFER>;
v6 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v7 = virtualinvoke v6.<io.vertx.ext.web.client.WebClientOptions: boolean isFollowRedirects()>();
v8 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v9 = staticinvoke <io.vertx.ext.web.client.impl.WebClientBase: io.vertx.core.net.ProxyOptions buildProxyOptions(io.vertx.ext.web.client.WebClientOptions)>(v8);
v10 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v11 = staticinvoke <io.vertx.ext.web.client.impl.WebClientBase: io.vertx.core.MultiMap buildHeaders(io.vertx.ext.web.client.WebClientOptions)>(v10);
specialinvoke v4.<io.vertx.ext.web.client.impl.HttpRequestImpl: void <init>(io.vertx.ext.web.client.impl.WebClientBase,io.vertx.core.http.HttpMethod,io.vertx.core.net.SocketAddress,io.vertx.uritemplate.UriTemplate,io.vertx.ext.web.codec.BodyCodec,boolean,io.vertx.core.net.ProxyOptions,io.vertx.core.MultiMap)>(v0, v1, v2, v3, v5, v7, v9, v11);
return v4;
}
public io.vertx.ext.web.client.impl.WebClientInternal addInterceptor(io.vertx.core.Handler)
{
java.lang.IllegalStateException v6;
java.lang.Object[] v7;
io.vertx.ext.web.client.impl.WebClientBase v0;
java.util.function.Predicate v4;
java.util.List v10, v2;
java.util.stream.Stream v3;
java.lang.Class v8;
java.lang.String v9;
io.vertx.core.Handler v1;
boolean v5;
v0 := @this: io.vertx.ext.web.client.impl.WebClientBase;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.ext.web.client.impl.WebClientBase: java.util.List interceptors>;
v3 = interfaceinvoke v2.<java.util.List: java.util.stream.Stream stream()>();
v4 = staticinvoke <io.vertx.ext.web.client.impl.WebClientBase$lambda_addInterceptor_0__827: java.util.function.Predicate bootstrap$(io.vertx.core.Handler)>(v1);
v5 = interfaceinvoke v3.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>(v4);
if v5 == 0 goto label1;
v6 = new java.lang.IllegalStateException;
v7 = newarray (java.lang.Object)[1];
v8 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v7[0] = v8;
v9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Client already contains a %s interceptor", v7);
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v9);
throw v6;
label1:
v10 = v0.<io.vertx.ext.web.client.impl.WebClientBase: java.util.List interceptors>;
interfaceinvoke v10.<java.util.List: boolean add(java.lang.Object)>(v1);
return v0;
}
public io.vertx.ext.web.client.impl.HttpContext createContext(io.vertx.core.Handler)
{
io.vertx.ext.web.client.WebClientOptions v4;
java.util.List v5;
io.vertx.ext.web.client.impl.WebClientBase v0;
io.vertx.core.Handler v1;
io.vertx.core.http.HttpClient v2;
io.vertx.ext.web.client.impl.HttpContext v3;
v0 := @this: io.vertx.ext.web.client.impl.WebClientBase;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.core.http.HttpClient client>;
v3 = new io.vertx.ext.web.client.impl.HttpContext;
v4 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.ext.web.client.WebClientOptions options>;
v5 = v0.<io.vertx.ext.web.client.impl.WebClientBase: java.util.List interceptors>;
specialinvoke v3.<io.vertx.ext.web.client.impl.HttpContext: void <init>(io.vertx.core.http.impl.HttpClientInternal,io.vertx.ext.web.client.WebClientOptions,java.util.List,io.vertx.core.Handler)>(v2, v4, v5, v1);
return v3;
}
public void close()
{
io.vertx.ext.web.client.impl.WebClientBase v0;
io.vertx.core.http.HttpClient v1;
v0 := @this: io.vertx.ext.web.client.impl.WebClientBase;
v1 = v0.<io.vertx.ext.web.client.impl.WebClientBase: io.vertx.core.http.HttpClient client>;
interfaceinvoke v1.<io.vertx.core.http.HttpClient: io.vertx.core.Future close()>();
return;
}
private static io.vertx.core.MultiMap buildHeaders(io.vertx.ext.web.client.WebClientOptions)
{
io.vertx.ext.web.client.WebClientOptions v0;
java.lang.CharSequence v2;
io.vertx.core.MultiMap v4, v5;
java.lang.String v3;
boolean v1;
v0 := @parameter0: io.vertx.ext.web.client.WebClientOptions;
v1 = virtualinvoke v0.<io.vertx.ext.web.client.WebClientOptions: boolean isUserAgentEnabled()>();
if v1 == 0 goto label1;
v2 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence USER_AGENT>;
v3 = virtualinvoke v0.<io.vertx.ext.web.client.WebClientOptions: java.lang.String getUserAgent()>();
v4 = staticinvoke <io.vertx.core.http.HttpHeaders: io.vertx.core.MultiMap set(java.lang.CharSequence,java.lang.CharSequence)>(v2, v3);
return v4;
label1:
v5 = staticinvoke <io.vertx.core.http.HttpHeaders: io.vertx.core.MultiMap headers()>();
return v5;
}
private static io.vertx.core.net.ProxyOptions buildProxyOptions(io.vertx.ext.web.client.WebClientOptions)
{
io.vertx.ext.web.client.WebClientOptions v0;
io.vertx.core.net.ProxyOptions v1, v2, v3;
v0 := @parameter0: io.vertx.ext.web.client.WebClientOptions;
v1 = virtualinvoke v0.<io.vertx.ext.web.client.WebClientOptions: io.vertx.core.net.ProxyOptions getProxyOptions()>();
if v1 == null goto label1;
v2 = new io.vertx.core.net.ProxyOptions;
v3 = virtualinvoke v0.<io.vertx.ext.web.client.WebClientOptions: io.vertx.core.net.ProxyOptions getProxyOptions()>();
specialinvoke v2.<io.vertx.core.net.ProxyOptions: void <init>(io.vertx.core.net.ProxyOptions)>(v3);
return v2;
label1:
return null;
}
}