class io.vertx.mutiny.core.Context$2 extends java.lang.Object implements io.vertx.core.Handler
{
final io.smallrye.mutiny.Uni val$blockingCodeHandler;
final io.vertx.mutiny.core.Context this$0;
void <init>(io.vertx.mutiny.core.Context, io.smallrye.mutiny.Uni)
{
io.vertx.mutiny.core.Context$2 v0;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.Context v1;
v0 := @this: io.vertx.mutiny.core.Context$2;
v1 := @parameter0: io.vertx.mutiny.core.Context;
v2 := @parameter1: io.smallrye.mutiny.Uni;
v0.<io.vertx.mutiny.core.Context$2: io.vertx.mutiny.core.Context this$0> = v1;
v0.<io.vertx.mutiny.core.Context$2: io.smallrye.mutiny.Uni val$blockingCodeHandler> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void handle(io.vertx.core.Promise)
{
java.util.function.Consumer v4, v5;
io.vertx.core.Promise v1;
io.vertx.mutiny.core.Context$2 v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.Context$2;
v1 := @parameter0: io.vertx.core.Promise;
v2 = v0.<io.vertx.mutiny.core.Context$2: io.smallrye.mutiny.Uni val$blockingCodeHandler>;
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = staticinvoke <io.vertx.mutiny.core.Context$2$lambda_handle_0__1654: java.util.function.Consumer bootstrap$(io.vertx.core.Promise)>(v1);
v5 = staticinvoke <io.vertx.mutiny.core.Context$2$lambda_handle_1__1655: java.util.function.Consumer bootstrap$(io.vertx.core.Promise)>(v1);
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer,java.util.function.Consumer)>(v4, v5);
return;
}
}