public class io.vertx.mutiny.core.dns.DnsClient extends java.lang.Object
{
public static final io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG;
private final io.vertx.core.dns.DnsClient delegate;
public void <init>(io.vertx.core.dns.DnsClient)
{
io.vertx.core.dns.DnsClient v1;
io.vertx.mutiny.core.dns.DnsClient v0;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: io.vertx.core.dns.DnsClient;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.dns.DnsClient: io.vertx.core.dns.DnsClient delegate> = v1;
return;
}
public void <init>(java.lang.Object)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.lang.Object v1;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.dns.DnsClient: io.vertx.core.dns.DnsClient delegate> = v1;
return;
}
void <init>()
{
io.vertx.mutiny.core.dns.DnsClient v0;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.dns.DnsClient: io.vertx.core.dns.DnsClient delegate> = null;
return;
}
public io.vertx.core.dns.DnsClient getDelegate()
{
io.vertx.core.dns.DnsClient v1;
io.vertx.mutiny.core.dns.DnsClient v0;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 = v0.<io.vertx.mutiny.core.dns.DnsClient: io.vertx.core.dns.DnsClient delegate>;
return v1;
}
public java.lang.String toString()
{
io.vertx.core.dns.DnsClient v1;
io.vertx.mutiny.core.dns.DnsClient v0;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 = v0.<io.vertx.mutiny.core.dns.DnsClient: io.vertx.core.dns.DnsClient delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
io.vertx.core.dns.DnsClient v4, v5;
io.vertx.mutiny.core.dns.DnsClient v0;
java.lang.Class v2, v3;
java.lang.Object v1;
boolean v6;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.mutiny.core.dns.DnsClient: io.vertx.core.dns.DnsClient delegate>;
v5 = v1.<io.vertx.mutiny.core.dns.DnsClient: io.vertx.core.dns.DnsClient delegate>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.vertx.core.dns.DnsClient v1;
io.vertx.mutiny.core.dns.DnsClient v0;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 = v0.<io.vertx.mutiny.core.dns.DnsClient: io.vertx.core.dns.DnsClient delegate>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public io.smallrye.mutiny.Uni lookup(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v2;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.dns.DnsClient$lambda_lookup_1__1665: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.dns.DnsClient,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.String lookupAndAwait(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni lookup(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.dns.DnsClient lookupAndForget(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni lookup(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni lookup4(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v2;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.dns.DnsClient$lambda_lookup4_2__1666: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.dns.DnsClient,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.String lookup4AndAwait(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni lookup4(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.dns.DnsClient lookup4AndForget(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni lookup4(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni lookup6(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v2;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.dns.DnsClient$lambda_lookup6_3__1667: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.dns.DnsClient,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.String lookup6AndAwait(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni lookup6(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.dns.DnsClient lookup6AndForget(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni lookup6(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni resolveA(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v2;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.dns.DnsClient$lambda_resolveA_4__1668: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.dns.DnsClient,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.util.List resolveAAndAwait(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni resolveA(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.dns.DnsClient resolveAAndForget(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni resolveA(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni resolveAAAA(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v2;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.dns.DnsClient$lambda_resolveAAAA_5__1669: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.dns.DnsClient,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.util.List resolveAAAAAndAwait(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni resolveAAAA(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.dns.DnsClient resolveAAAAAndForget(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni resolveAAAA(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni resolveCNAME(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v2;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.dns.DnsClient$lambda_resolveCNAME_6__1670: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.dns.DnsClient,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.util.List resolveCNAMEAndAwait(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni resolveCNAME(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.dns.DnsClient resolveCNAMEAndForget(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni resolveCNAME(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni resolveMX(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v2;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.dns.DnsClient$lambda_resolveMX_10__1671: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.dns.DnsClient,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.util.List resolveMXAndAwait(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni resolveMX(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.dns.DnsClient resolveMXAndForget(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni resolveMX(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni resolveTXT(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v2;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.dns.DnsClient$lambda_resolveTXT_11__1672: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.dns.DnsClient,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.util.List resolveTXTAndAwait(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni resolveTXT(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.dns.DnsClient resolveTXTAndForget(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni resolveTXT(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni resolvePTR(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v2;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.dns.DnsClient$lambda_resolvePTR_12__1673: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.dns.DnsClient,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.String resolvePTRAndAwait(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni resolvePTR(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.dns.DnsClient resolvePTRAndForget(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni resolvePTR(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni resolveNS(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v2;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.dns.DnsClient$lambda_resolveNS_13__1674: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.dns.DnsClient,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.util.List resolveNSAndAwait(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni resolveNS(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.dns.DnsClient resolveNSAndForget(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni resolveNS(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni resolveSRV(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v2;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.dns.DnsClient$lambda_resolveSRV_17__1675: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.dns.DnsClient,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.util.List resolveSRVAndAwait(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni resolveSRV(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.dns.DnsClient resolveSRVAndForget(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni resolveSRV(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni reverseLookup(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v2;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.dns.DnsClient$lambda_reverseLookup_18__1676: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.dns.DnsClient,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.String reverseLookupAndAwait(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni reverseLookup(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.dns.DnsClient reverseLookupAndForget(java.lang.String)
{
io.vertx.mutiny.core.dns.DnsClient v0;
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.dns.DnsClient;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.Uni reverseLookup(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public static io.vertx.mutiny.core.dns.DnsClient newInstance(io.vertx.core.dns.DnsClient)
{
io.vertx.core.dns.DnsClient v0;
io.vertx.mutiny.core.dns.DnsClient v1;
v0 := @parameter0: io.vertx.core.dns.DnsClient;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.dns.DnsClient;
specialinvoke v1.<io.vertx.mutiny.core.dns.DnsClient: void <init>(io.vertx.core.dns.DnsClient)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
static void <clinit>()
{
java.util.function.Function v1, v2;
io.smallrye.mutiny.vertx.TypeArg v0;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.dns.DnsClient$lambda_static_0__1683: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.dns.DnsClient$getDelegate__1684: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.dns.DnsClient: io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG> = v0;
return;
}
}