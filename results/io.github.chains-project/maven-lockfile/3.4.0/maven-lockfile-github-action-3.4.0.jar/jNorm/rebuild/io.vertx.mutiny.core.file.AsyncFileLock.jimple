public class io.vertx.mutiny.core.file.AsyncFileLock extends java.lang.Object
{
public static final io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG;
private final io.vertx.core.file.AsyncFileLock delegate;
public void <init>(io.vertx.core.file.AsyncFileLock)
{
io.vertx.core.file.AsyncFileLock v1;
io.vertx.mutiny.core.file.AsyncFileLock v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
v1 := @parameter0: io.vertx.core.file.AsyncFileLock;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.file.AsyncFileLock: io.vertx.core.file.AsyncFileLock delegate> = v1;
return;
}
public void <init>(java.lang.Object)
{
io.vertx.mutiny.core.file.AsyncFileLock v0;
java.lang.Object v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.file.AsyncFileLock: io.vertx.core.file.AsyncFileLock delegate> = v1;
return;
}
void <init>()
{
io.vertx.mutiny.core.file.AsyncFileLock v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.file.AsyncFileLock: io.vertx.core.file.AsyncFileLock delegate> = null;
return;
}
public io.vertx.core.file.AsyncFileLock getDelegate()
{
io.vertx.core.file.AsyncFileLock v1;
io.vertx.mutiny.core.file.AsyncFileLock v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFileLock: io.vertx.core.file.AsyncFileLock delegate>;
return v1;
}
public java.lang.String toString()
{
io.vertx.core.file.AsyncFileLock v1;
io.vertx.mutiny.core.file.AsyncFileLock v0;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFileLock: io.vertx.core.file.AsyncFileLock delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
io.vertx.mutiny.core.file.AsyncFileLock v0;
io.vertx.core.file.AsyncFileLock v4, v5;
java.lang.Class v2, v3;
java.lang.Object v1;
boolean v6;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.mutiny.core.file.AsyncFileLock: io.vertx.core.file.AsyncFileLock delegate>;
v5 = v1.<io.vertx.mutiny.core.file.AsyncFileLock: io.vertx.core.file.AsyncFileLock delegate>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.vertx.core.file.AsyncFileLock v1;
io.vertx.mutiny.core.file.AsyncFileLock v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFileLock: io.vertx.core.file.AsyncFileLock delegate>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public long position()
{
io.vertx.core.file.AsyncFileLock v1;
io.vertx.mutiny.core.file.AsyncFileLock v0;
long v2;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFileLock: io.vertx.core.file.AsyncFileLock delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.file.AsyncFileLock: long position()>();
return v2;
}
public long size()
{
io.vertx.core.file.AsyncFileLock v1;
io.vertx.mutiny.core.file.AsyncFileLock v0;
long v2;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFileLock: io.vertx.core.file.AsyncFileLock delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.file.AsyncFileLock: long size()>();
return v2;
}
public boolean isShared()
{
io.vertx.core.file.AsyncFileLock v1;
io.vertx.mutiny.core.file.AsyncFileLock v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFileLock: io.vertx.core.file.AsyncFileLock delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.file.AsyncFileLock: boolean isShared()>();
return v2;
}
public boolean overlaps(long, long)
{
io.vertx.mutiny.core.file.AsyncFileLock v0;
io.vertx.core.file.AsyncFileLock v3;
long v1, v2;
boolean v4;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 = v0.<io.vertx.mutiny.core.file.AsyncFileLock: io.vertx.core.file.AsyncFileLock delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.file.AsyncFileLock: boolean overlaps(long,long)>(v1, v2);
return v4;
}
public boolean isValidBlocking()
{
io.vertx.core.file.AsyncFileLock v1;
io.vertx.mutiny.core.file.AsyncFileLock v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFileLock: io.vertx.core.file.AsyncFileLock delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.file.AsyncFileLock: boolean isValidBlocking()>();
return v2;
}
public io.smallrye.mutiny.Uni isValid()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.file.AsyncFileLock v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
v1 = staticinvoke <io.vertx.mutiny.core.file.AsyncFileLock$lambda_isValid_1__2178: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.AsyncFileLock)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Boolean isValidAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.file.AsyncFileLock v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFileLock: io.smallrye.mutiny.Uni isValid()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void isValidAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.AsyncFileLock v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFileLock: io.smallrye.mutiny.Uni isValid()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public void releaseBlocking()
{
io.vertx.core.file.AsyncFileLock v1;
io.vertx.mutiny.core.file.AsyncFileLock v0;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
v1 = v0.<io.vertx.mutiny.core.file.AsyncFileLock: io.vertx.core.file.AsyncFileLock delegate>;
interfaceinvoke v1.<io.vertx.core.file.AsyncFileLock: void releaseBlocking()>();
return;
}
public io.smallrye.mutiny.Uni release()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.file.AsyncFileLock v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
v1 = staticinvoke <io.vertx.mutiny.core.file.AsyncFileLock$lambda_release_2__2179: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.AsyncFileLock)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void releaseAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.file.AsyncFileLock v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFileLock: io.smallrye.mutiny.Uni release()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void releaseAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.AsyncFileLock v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.file.AsyncFileLock;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.file.AsyncFileLock: io.smallrye.mutiny.Uni release()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public static io.vertx.mutiny.core.file.AsyncFileLock newInstance(io.vertx.core.file.AsyncFileLock)
{
io.vertx.core.file.AsyncFileLock v0;
io.vertx.mutiny.core.file.AsyncFileLock v1;
v0 := @parameter0: io.vertx.core.file.AsyncFileLock;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.file.AsyncFileLock;
specialinvoke v1.<io.vertx.mutiny.core.file.AsyncFileLock: void <init>(io.vertx.core.file.AsyncFileLock)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
static void <clinit>()
{
java.util.function.Function v1, v2;
io.smallrye.mutiny.vertx.TypeArg v0;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.file.AsyncFileLock$lambda_static_0__2180: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.file.AsyncFileLock$getDelegate__2181: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.file.AsyncFileLock: io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG> = v0;
return;
}
}