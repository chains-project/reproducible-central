public class io.vertx.mutiny.core.file.FileSystem extends java.lang.Object
{
public static final io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG;
private final io.vertx.core.file.FileSystem delegate;
public void <init>(io.vertx.core.file.FileSystem)
{
io.vertx.core.file.FileSystem v1;
io.vertx.mutiny.core.file.FileSystem v0;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: io.vertx.core.file.FileSystem;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate> = v1;
return;
}
public void <init>(java.lang.Object)
{
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v1;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate> = v1;
return;
}
void <init>()
{
io.vertx.mutiny.core.file.FileSystem v0;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate> = null;
return;
}
public io.vertx.core.file.FileSystem getDelegate()
{
io.vertx.core.file.FileSystem v1;
io.vertx.mutiny.core.file.FileSystem v0;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
return v1;
}
public java.lang.String toString()
{
io.vertx.core.file.FileSystem v1;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
io.vertx.core.file.FileSystem v4, v5;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Class v2, v3;
java.lang.Object v1;
boolean v6;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v5 = v1.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.vertx.core.file.FileSystem v1;
io.vertx.mutiny.core.file.FileSystem v0;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public io.smallrye.mutiny.Uni copy(java.lang.String, java.lang.String)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_copy_1__2130: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void copyAndAwait(java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v5;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni copy(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.file.FileSystem copyAndForget(java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni copy(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public io.smallrye.mutiny.Uni copy(java.lang.String, java.lang.String, io.vertx.core.file.CopyOptions)
{
java.util.function.Consumer v4;
io.vertx.core.file.CopyOptions v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.file.CopyOptions;
v4 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_copy_2__2131: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String,io.vertx.core.file.CopyOptions)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public java.lang.Void copyAndAwait(java.lang.String, java.lang.String, io.vertx.core.file.CopyOptions)
{
io.smallrye.mutiny.groups.UniAwait v5;
io.vertx.core.file.CopyOptions v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v6;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.file.CopyOptions;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni copy(java.lang.String,java.lang.String,io.vertx.core.file.CopyOptions)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public io.vertx.mutiny.core.file.FileSystem copyAndForget(java.lang.String, java.lang.String, io.vertx.core.file.CopyOptions)
{
java.util.function.Consumer v6;
io.vertx.core.file.CopyOptions v3;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.file.CopyOptions;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni copy(java.lang.String,java.lang.String,io.vertx.core.file.CopyOptions)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem copyBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.FileSystem v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
interfaceinvoke v3.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem copyBlocking(java.lang.String,java.lang.String)>(v1, v2);
return v0;
}
public io.smallrye.mutiny.Uni copyRecursive(java.lang.String, java.lang.String, boolean)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
boolean v3;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v4 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_copyRecursive_3__2132: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String,boolean)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public java.lang.Void copyRecursiveAndAwait(java.lang.String, java.lang.String, boolean)
{
io.smallrye.mutiny.groups.UniAwait v5;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v6;
java.lang.String v1, v2;
boolean v3;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni copyRecursive(java.lang.String,java.lang.String,boolean)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public io.vertx.mutiny.core.file.FileSystem copyRecursiveAndForget(java.lang.String, java.lang.String, boolean)
{
java.util.function.Consumer v6;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.String v1, v2;
boolean v3;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni copyRecursive(java.lang.String,java.lang.String,boolean)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem copyRecursiveBlocking(java.lang.String, java.lang.String, boolean)
{
io.vertx.core.file.FileSystem v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
boolean v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v4 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
interfaceinvoke v4.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem copyRecursiveBlocking(java.lang.String,java.lang.String,boolean)>(v1, v2, v3);
return v0;
}
public io.smallrye.mutiny.Uni move(java.lang.String, java.lang.String)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_move_4__2133: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void moveAndAwait(java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v5;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni move(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.file.FileSystem moveAndForget(java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni move(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public io.smallrye.mutiny.Uni move(java.lang.String, java.lang.String, io.vertx.core.file.CopyOptions)
{
java.util.function.Consumer v4;
io.vertx.core.file.CopyOptions v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.file.CopyOptions;
v4 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_move_5__2134: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String,io.vertx.core.file.CopyOptions)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public java.lang.Void moveAndAwait(java.lang.String, java.lang.String, io.vertx.core.file.CopyOptions)
{
io.smallrye.mutiny.groups.UniAwait v5;
io.vertx.core.file.CopyOptions v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v6;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.file.CopyOptions;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni move(java.lang.String,java.lang.String,io.vertx.core.file.CopyOptions)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public io.vertx.mutiny.core.file.FileSystem moveAndForget(java.lang.String, java.lang.String, io.vertx.core.file.CopyOptions)
{
java.util.function.Consumer v6;
io.vertx.core.file.CopyOptions v3;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.file.CopyOptions;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni move(java.lang.String,java.lang.String,io.vertx.core.file.CopyOptions)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem moveBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.FileSystem v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
interfaceinvoke v3.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem moveBlocking(java.lang.String,java.lang.String)>(v1, v2);
return v0;
}
public io.smallrye.mutiny.Uni truncate(java.lang.String, long)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.FileSystem v0;
long v2;
java.lang.String v1;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_truncate_6__2135: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,long)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void truncateAndAwait(java.lang.String, long)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v5;
long v2;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni truncate(java.lang.String,long)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.file.FileSystem truncateAndForget(java.lang.String, long)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v4;
long v2;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni truncate(java.lang.String,long)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem truncateBlocking(java.lang.String, long)
{
io.vertx.core.file.FileSystem v3;
io.vertx.mutiny.core.file.FileSystem v0;
long v2;
java.lang.String v1;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
interfaceinvoke v3.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem truncateBlocking(java.lang.String,long)>(v1, v2);
return v0;
}
public io.smallrye.mutiny.Uni chmod(java.lang.String, java.lang.String)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_chmod_7__2136: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void chmodAndAwait(java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v5;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni chmod(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.file.FileSystem chmodAndForget(java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni chmod(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem chmodBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.FileSystem v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
interfaceinvoke v3.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem chmodBlocking(java.lang.String,java.lang.String)>(v1, v2);
return v0;
}
public io.smallrye.mutiny.Uni chmodRecursive(java.lang.String, java.lang.String, java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2, v3;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_chmodRecursive_8__2137: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String,java.lang.String)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public java.lang.Void chmodRecursiveAndAwait(java.lang.String, java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v5;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v6;
java.lang.String v1, v2, v3;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni chmodRecursive(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public io.vertx.mutiny.core.file.FileSystem chmodRecursiveAndForget(java.lang.String, java.lang.String, java.lang.String)
{
java.util.function.Consumer v6;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.String v1, v2, v3;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni chmodRecursive(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem chmodRecursiveBlocking(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.FileSystem v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2, v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
interfaceinvoke v4.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem chmodRecursiveBlocking(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
return v0;
}
public io.smallrye.mutiny.Uni chown(java.lang.String, java.lang.String, java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2, v3;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_chown_9__2138: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String,java.lang.String)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public java.lang.Void chownAndAwait(java.lang.String, java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v5;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v6;
java.lang.String v1, v2, v3;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni chown(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public io.vertx.mutiny.core.file.FileSystem chownAndForget(java.lang.String, java.lang.String, java.lang.String)
{
java.util.function.Consumer v6;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.String v1, v2, v3;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni chown(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem chownBlocking(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.FileSystem v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2, v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
interfaceinvoke v4.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem chownBlocking(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
return v0;
}
public io.smallrye.mutiny.Uni props(java.lang.String)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_props_12__2139: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public io.vertx.mutiny.core.file.FileProps propsAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni props(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.file.FileSystem propsAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni props(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.vertx.mutiny.core.file.FileProps propsBlocking(java.lang.String)
{
io.vertx.mutiny.core.file.FileProps v4;
io.vertx.core.file.FileSystem v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
io.vertx.core.file.FileProps v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileProps propsBlocking(java.lang.String)>(v1);
v4 = staticinvoke <io.vertx.mutiny.core.file.FileProps: io.vertx.mutiny.core.file.FileProps newInstance(io.vertx.core.file.FileProps)>(v3);
return v4;
}
public io.smallrye.mutiny.Uni lprops(java.lang.String)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_lprops_15__2140: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public io.vertx.mutiny.core.file.FileProps lpropsAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni lprops(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.file.FileSystem lpropsAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni lprops(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.vertx.mutiny.core.file.FileProps lpropsBlocking(java.lang.String)
{
io.vertx.mutiny.core.file.FileProps v4;
io.vertx.core.file.FileSystem v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
io.vertx.core.file.FileProps v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileProps lpropsBlocking(java.lang.String)>(v1);
v4 = staticinvoke <io.vertx.mutiny.core.file.FileProps: io.vertx.mutiny.core.file.FileProps newInstance(io.vertx.core.file.FileProps)>(v3);
return v4;
}
public io.smallrye.mutiny.Uni link(java.lang.String, java.lang.String)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_link_16__2141: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void linkAndAwait(java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v5;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni link(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.file.FileSystem linkAndForget(java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni link(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem linkBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.FileSystem v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
interfaceinvoke v3.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem linkBlocking(java.lang.String,java.lang.String)>(v1, v2);
return v0;
}
public io.smallrye.mutiny.Uni symlink(java.lang.String, java.lang.String)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_symlink_17__2142: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void symlinkAndAwait(java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v5;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni symlink(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.file.FileSystem symlinkAndForget(java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni symlink(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem symlinkBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.FileSystem v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
interfaceinvoke v3.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem symlinkBlocking(java.lang.String,java.lang.String)>(v1, v2);
return v0;
}
public io.smallrye.mutiny.Uni unlink(java.lang.String)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_unlink_18__2143: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void unlinkAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni unlink(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.file.FileSystem unlinkAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni unlink(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem unlinkBlocking(java.lang.String)
{
io.vertx.core.file.FileSystem v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
interfaceinvoke v2.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem unlinkBlocking(java.lang.String)>(v1);
return v0;
}
public io.smallrye.mutiny.Uni readSymlink(java.lang.String)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_readSymlink_19__2144: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.String readSymlinkAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni readSymlink(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.file.FileSystem readSymlinkAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni readSymlink(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public java.lang.String readSymlinkBlocking(java.lang.String)
{
io.vertx.core.file.FileSystem v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.file.FileSystem: java.lang.String readSymlinkBlocking(java.lang.String)>(v1);
return v3;
}
public io.smallrye.mutiny.Uni delete(java.lang.String)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_delete_20__2145: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void deleteAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni delete(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.file.FileSystem deleteAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni delete(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem deleteBlocking(java.lang.String)
{
io.vertx.core.file.FileSystem v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
interfaceinvoke v2.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem deleteBlocking(java.lang.String)>(v1);
return v0;
}
public io.smallrye.mutiny.Uni deleteRecursive(java.lang.String, boolean)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
boolean v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_deleteRecursive_21__2146: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,boolean)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void deleteRecursiveAndAwait(java.lang.String, boolean)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v5;
java.lang.String v1;
boolean v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni deleteRecursive(java.lang.String,boolean)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.file.FileSystem deleteRecursiveAndForget(java.lang.String, boolean)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1;
boolean v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni deleteRecursive(java.lang.String,boolean)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem deleteRecursiveBlocking(java.lang.String, boolean)
{
io.vertx.core.file.FileSystem v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
boolean v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
interfaceinvoke v3.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem deleteRecursiveBlocking(java.lang.String,boolean)>(v1, v2);
return v0;
}
public io.smallrye.mutiny.Uni mkdir(java.lang.String)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_mkdir_22__2147: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void mkdirAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni mkdir(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.file.FileSystem mkdirAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni mkdir(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem mkdirBlocking(java.lang.String)
{
io.vertx.core.file.FileSystem v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
interfaceinvoke v2.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem mkdirBlocking(java.lang.String)>(v1);
return v0;
}
public io.smallrye.mutiny.Uni mkdir(java.lang.String, java.lang.String)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_mkdir_23__2148: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void mkdirAndAwait(java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v5;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni mkdir(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.file.FileSystem mkdirAndForget(java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni mkdir(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem mkdirBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.FileSystem v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
interfaceinvoke v3.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem mkdirBlocking(java.lang.String,java.lang.String)>(v1, v2);
return v0;
}
public io.smallrye.mutiny.Uni mkdirs(java.lang.String)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_mkdirs_24__2149: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void mkdirsAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni mkdirs(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.file.FileSystem mkdirsAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni mkdirs(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem mkdirsBlocking(java.lang.String)
{
io.vertx.core.file.FileSystem v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
interfaceinvoke v2.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem mkdirsBlocking(java.lang.String)>(v1);
return v0;
}
public io.smallrye.mutiny.Uni mkdirs(java.lang.String, java.lang.String)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_mkdirs_25__2150: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void mkdirsAndAwait(java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v5;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni mkdirs(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.file.FileSystem mkdirsAndForget(java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni mkdirs(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem mkdirsBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.FileSystem v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
interfaceinvoke v3.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem mkdirsBlocking(java.lang.String,java.lang.String)>(v1, v2);
return v0;
}
public io.smallrye.mutiny.Uni readDir(java.lang.String)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_readDir_26__2151: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.util.List readDirAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni readDir(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.file.FileSystem readDirAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni readDir(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public java.util.List readDirBlocking(java.lang.String)
{
java.util.List v3;
io.vertx.core.file.FileSystem v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.file.FileSystem: java.util.List readDirBlocking(java.lang.String)>(v1);
return v3;
}
public io.smallrye.mutiny.Uni readDir(java.lang.String, java.lang.String)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_readDir_27__2152: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.util.List readDirAndAwait(java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v5;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni readDir(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.file.FileSystem readDirAndForget(java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni readDir(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public java.util.List readDirBlocking(java.lang.String, java.lang.String)
{
java.util.List v4;
io.vertx.core.file.FileSystem v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.file.FileSystem: java.util.List readDirBlocking(java.lang.String,java.lang.String)>(v1, v2);
return v4;
}
public io.smallrye.mutiny.Uni readFile(java.lang.String)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_readFile_30__2153: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public io.vertx.mutiny.core.buffer.Buffer readFileAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni readFile(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.file.FileSystem readFileAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni readFile(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.vertx.mutiny.core.buffer.Buffer readFileBlocking(java.lang.String)
{
io.vertx.core.buffer.Buffer v3;
io.vertx.mutiny.core.buffer.Buffer v4;
io.vertx.core.file.FileSystem v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.file.FileSystem: io.vertx.core.buffer.Buffer readFileBlocking(java.lang.String)>(v1);
v4 = staticinvoke <io.vertx.mutiny.core.buffer.Buffer: io.vertx.mutiny.core.buffer.Buffer newInstance(io.vertx.core.buffer.Buffer)>(v3);
return v4;
}
public io.smallrye.mutiny.Uni writeFile(java.lang.String, io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.buffer.Buffer v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.mutiny.core.buffer.Buffer;
v3 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_writeFile_31__2154: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void writeFileAndAwait(java.lang.String, io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.buffer.Buffer v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v5;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.mutiny.core.buffer.Buffer;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni writeFile(java.lang.String,io.vertx.mutiny.core.buffer.Buffer)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.file.FileSystem writeFileAndForget(java.lang.String, io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.buffer.Buffer v2;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.mutiny.core.buffer.Buffer;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni writeFile(java.lang.String,io.vertx.mutiny.core.buffer.Buffer)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem writeFileBlocking(java.lang.String, io.vertx.mutiny.core.buffer.Buffer)
{
io.vertx.core.buffer.Buffer v4;
io.vertx.mutiny.core.buffer.Buffer v2;
io.vertx.core.file.FileSystem v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.mutiny.core.buffer.Buffer;
v3 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v4 = virtualinvoke v2.<io.vertx.mutiny.core.buffer.Buffer: io.vertx.core.buffer.Buffer getDelegate()>();
interfaceinvoke v3.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem writeFileBlocking(java.lang.String,io.vertx.core.buffer.Buffer)>(v1, v4);
return v0;
}
public io.smallrye.mutiny.Uni open(java.lang.String, io.vertx.core.file.OpenOptions)
{
java.util.function.Consumer v3;
io.vertx.core.file.OpenOptions v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.file.OpenOptions;
v3 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_open_34__2155: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,io.vertx.core.file.OpenOptions)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public io.vertx.mutiny.core.file.AsyncFile openAndAwait(java.lang.String, io.vertx.core.file.OpenOptions)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.core.file.OpenOptions v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v5;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.file.OpenOptions;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni open(java.lang.String,io.vertx.core.file.OpenOptions)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.file.FileSystem openAndForget(java.lang.String, io.vertx.core.file.OpenOptions)
{
java.util.function.Consumer v5;
io.vertx.core.file.OpenOptions v2;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.file.OpenOptions;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni open(java.lang.String,io.vertx.core.file.OpenOptions)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public io.vertx.mutiny.core.file.AsyncFile openBlocking(java.lang.String, io.vertx.core.file.OpenOptions)
{
io.vertx.core.file.AsyncFile v4;
io.vertx.core.file.OpenOptions v2;
io.vertx.mutiny.core.file.AsyncFile v5;
io.vertx.core.file.FileSystem v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.file.OpenOptions;
v3 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.file.FileSystem: io.vertx.core.file.AsyncFile openBlocking(java.lang.String,io.vertx.core.file.OpenOptions)>(v1, v2);
v5 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile: io.vertx.mutiny.core.file.AsyncFile newInstance(io.vertx.core.file.AsyncFile)>(v4);
return v5;
}
public io.smallrye.mutiny.Uni createFile(java.lang.String)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_createFile_35__2156: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void createFileAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni createFile(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.file.FileSystem createFileAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni createFile(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem createFileBlocking(java.lang.String)
{
io.vertx.core.file.FileSystem v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
interfaceinvoke v2.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem createFileBlocking(java.lang.String)>(v1);
return v0;
}
public io.smallrye.mutiny.Uni createFile(java.lang.String, java.lang.String)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_createFile_36__2157: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void createFileAndAwait(java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v5;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni createFile(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.file.FileSystem createFileAndForget(java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni createFile(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public io.vertx.mutiny.core.file.FileSystem createFileBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.FileSystem v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
interfaceinvoke v3.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystem createFileBlocking(java.lang.String,java.lang.String)>(v1, v2);
return v0;
}
public io.smallrye.mutiny.Uni exists(java.lang.String)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_exists_37__2158: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Boolean existsAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni exists(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.file.FileSystem existsAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni exists(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public boolean existsBlocking(java.lang.String)
{
io.vertx.core.file.FileSystem v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
boolean v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.file.FileSystem: boolean existsBlocking(java.lang.String)>(v1);
return v3;
}
public io.smallrye.mutiny.Uni fsProps(java.lang.String)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_fsProps_40__2159: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public io.vertx.mutiny.core.file.FileSystemProps fsPropsAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni fsProps(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.file.FileSystem fsPropsAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni fsProps(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.vertx.mutiny.core.file.FileSystemProps fsPropsBlocking(java.lang.String)
{
io.vertx.core.file.FileSystem v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
io.vertx.core.file.FileSystemProps v3;
io.vertx.mutiny.core.file.FileSystemProps v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.file.FileSystem: io.vertx.core.file.FileSystemProps fsPropsBlocking(java.lang.String)>(v1);
v4 = staticinvoke <io.vertx.mutiny.core.file.FileSystemProps: io.vertx.mutiny.core.file.FileSystemProps newInstance(io.vertx.core.file.FileSystemProps)>(v3);
return v4;
}
public io.smallrye.mutiny.Uni createTempDirectory(java.lang.String)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_createTempDirectory_41__2160: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.String createTempDirectoryAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni createTempDirectory(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.file.FileSystem createTempDirectoryAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni createTempDirectory(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public java.lang.String createTempDirectoryBlocking(java.lang.String)
{
io.vertx.core.file.FileSystem v2;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.file.FileSystem: java.lang.String createTempDirectoryBlocking(java.lang.String)>(v1);
return v3;
}
public io.smallrye.mutiny.Uni createTempDirectory(java.lang.String, java.lang.String)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_createTempDirectory_42__2161: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.String createTempDirectoryAndAwait(java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v5;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni createTempDirectory(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.file.FileSystem createTempDirectoryAndForget(java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni createTempDirectory(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public java.lang.String createTempDirectoryBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.FileSystem v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2, v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.file.FileSystem: java.lang.String createTempDirectoryBlocking(java.lang.String,java.lang.String)>(v1, v2);
return v4;
}
public io.smallrye.mutiny.Uni createTempDirectory(java.lang.String, java.lang.String, java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2, v3;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_createTempDirectory_43__2162: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String,java.lang.String)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public java.lang.String createTempDirectoryAndAwait(java.lang.String, java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v5;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v6;
java.lang.String v1, v2, v3;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni createTempDirectory(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public io.vertx.mutiny.core.file.FileSystem createTempDirectoryAndForget(java.lang.String, java.lang.String, java.lang.String)
{
java.util.function.Consumer v6;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.String v1, v2, v3;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni createTempDirectory(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return v0;
}
public java.lang.String createTempDirectoryBlocking(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.FileSystem v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2, v3, v5;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v5 = interfaceinvoke v4.<io.vertx.core.file.FileSystem: java.lang.String createTempDirectoryBlocking(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
return v5;
}
public io.smallrye.mutiny.Uni createTempFile(java.lang.String, java.lang.String)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_createTempFile_44__2163: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.String createTempFileAndAwait(java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v5;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni createTempFile(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.file.FileSystem createTempFileAndForget(java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1, v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni createTempFile(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public java.lang.String createTempFileBlocking(java.lang.String, java.lang.String)
{
io.vertx.core.file.FileSystem v3;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2, v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.file.FileSystem: java.lang.String createTempFileBlocking(java.lang.String,java.lang.String)>(v1, v2);
return v4;
}
public io.smallrye.mutiny.Uni createTempFile(java.lang.String, java.lang.String, java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2, v3;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_createTempFile_45__2164: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String,java.lang.String)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public java.lang.String createTempFileAndAwait(java.lang.String, java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v5;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v6;
java.lang.String v1, v2, v3;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni createTempFile(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public io.vertx.mutiny.core.file.FileSystem createTempFileAndForget(java.lang.String, java.lang.String, java.lang.String)
{
java.util.function.Consumer v6;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v5;
java.lang.String v1, v2, v3;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni createTempFile(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return v0;
}
public java.lang.String createTempFileBlocking(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.FileSystem v4;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2, v3, v5;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v5 = interfaceinvoke v4.<io.vertx.core.file.FileSystem: java.lang.String createTempFileBlocking(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
return v5;
}
public io.smallrye.mutiny.Uni createTempFile(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2, v3, v4;
io.smallrye.mutiny.Uni v6;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_createTempFile_46__2165: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.file.FileSystem,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(v0, v1, v2, v3, v4);
v6 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v5);
return v6;
}
public java.lang.String createTempFileAndAwait(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v6;
io.smallrye.mutiny.Uni v5;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.Object v7;
java.lang.String v1, v2, v3, v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni createTempFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3, v4);
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v7 = virtualinvoke v6.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v7;
}
public io.vertx.mutiny.core.file.FileSystem createTempFileAndForget(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
{
io.smallrye.mutiny.Uni v5;
java.util.function.Consumer v7;
io.vertx.mutiny.core.file.FileSystem v0;
io.smallrye.mutiny.groups.UniSubscribe v6;
java.lang.String v1, v2, v3, v4;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = virtualinvoke v0.<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.Uni createTempFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3, v4);
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v7 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v6.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v7);
return v0;
}
public java.lang.String createTempFileBlocking(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.file.FileSystem v5;
io.vertx.mutiny.core.file.FileSystem v0;
java.lang.String v1, v2, v3, v4, v6;
v0 := @this: io.vertx.mutiny.core.file.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = v0.<io.vertx.mutiny.core.file.FileSystem: io.vertx.core.file.FileSystem delegate>;
v6 = interfaceinvoke v5.<io.vertx.core.file.FileSystem: java.lang.String createTempFileBlocking(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3, v4);
return v6;
}
public static io.vertx.mutiny.core.file.FileSystem newInstance(io.vertx.core.file.FileSystem)
{
io.vertx.core.file.FileSystem v0;
io.vertx.mutiny.core.file.FileSystem v1;
v0 := @parameter0: io.vertx.core.file.FileSystem;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.file.FileSystem;
specialinvoke v1.<io.vertx.mutiny.core.file.FileSystem: void <init>(io.vertx.core.file.FileSystem)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
static void <clinit>()
{
java.util.function.Function v1, v2;
io.smallrye.mutiny.vertx.TypeArg v0;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$lambda_static_0__2176: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.file.FileSystem$getDelegate__2177: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.file.FileSystem: io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG> = v0;
return;
}
}