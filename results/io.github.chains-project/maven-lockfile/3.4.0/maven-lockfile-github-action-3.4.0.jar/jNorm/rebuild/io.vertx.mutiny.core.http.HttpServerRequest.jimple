public class io.vertx.mutiny.core.http.HttpServerRequest extends java.lang.Object implements io.vertx.mutiny.core.streams.ReadStream
{
public static final io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG;
private final io.vertx.core.http.HttpServerRequest delegate;
static final io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0;
static final io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_3;
static final io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_1;
static final io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_2;
private io.vertx.mutiny.core.http.HttpServerResponse cached_0;
private io.vertx.mutiny.core.MultiMap cached_1;
private io.vertx.mutiny.core.MultiMap cached_2;
private io.vertx.mutiny.core.net.SocketAddress cached_3;
private io.vertx.mutiny.core.net.SocketAddress cached_4;
private io.vertx.mutiny.core.MultiMap cached_5;
private java.lang.Integer cached_6;
private io.vertx.mutiny.core.http.HttpConnection cached_7;
private io.smallrye.mutiny.Multi multi;
public void <init>(io.vertx.core.http.HttpServerRequest)
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: io.vertx.core.http.HttpServerRequest;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate> = v1;
return;
}
public void <init>(java.lang.Object)
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.lang.Object v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate> = v1;
return;
}
void <init>()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate> = null;
return;
}
public io.vertx.core.http.HttpServerRequest getDelegate()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
return v1;
}
public java.lang.String toString()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
io.vertx.core.http.HttpServerRequest v4, v5;
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.lang.Class v2, v3;
java.lang.Object v1;
boolean v6;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v5 = v1.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public io.vertx.mutiny.core.streams.Pipe pipe()
{
io.vertx.mutiny.core.streams.Pipe v4;
io.vertx.core.http.HttpServerRequest v1;
io.vertx.core.streams.Pipe v2;
io.smallrye.mutiny.vertx.TypeArg v3;
io.vertx.mutiny.core.http.HttpServerRequest v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: io.vertx.core.streams.Pipe pipe()>();
v3 = <io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0>;
v4 = staticinvoke <io.vertx.mutiny.core.streams.Pipe: io.vertx.mutiny.core.streams.Pipe newInstance(io.vertx.core.streams.Pipe,io.smallrye.mutiny.vertx.TypeArg)>(v2, v3);
return v4;
}
public io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_pipeTo_9__1699: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerRequest,io.vertx.mutiny.core.streams.WriteStream)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void pipeToAndAwait(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void pipeToAndForget(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
private io.vertx.mutiny.core.http.HttpServerRequest __exceptionHandler(io.vertx.core.Handler)
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest exceptionHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerRequest exceptionHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpServerRequest v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.http.HttpServerRequest __exceptionHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.http.HttpServerRequest __handler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpServerRequest v2;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.Handler v1;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda___handler_10__1700: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest handler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerRequest handler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpServerRequest v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.http.HttpServerRequest __handler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.HttpServerRequest pause()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest pause()>();
return v0;
}
public io.vertx.mutiny.core.http.HttpServerRequest resume()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest resume()>();
return v0;
}
public io.vertx.mutiny.core.http.HttpServerRequest fetch(long)
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v2;
long v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: long;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest fetch(long)>(v1);
return v0;
}
private io.vertx.mutiny.core.http.HttpServerRequest __endHandler(io.vertx.core.Handler)
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest endHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerRequest endHandler(java.lang.Runnable)
{
io.vertx.mutiny.core.http.HttpServerRequest v0, v3;
io.vertx.core.Handler v2;
java.lang.Runnable v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_endHandler_11__1701: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.http.HttpServerRequest __endHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.core.http.HttpVersion version()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
io.vertx.core.http.HttpVersion v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpVersion version()>();
return v2;
}
public io.vertx.core.http.HttpMethod method()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
io.vertx.core.http.HttpMethod v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpMethod method()>();
return v2;
}
public boolean isSSL()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: boolean isSSL()>();
return v2;
}
public java.lang.String scheme()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: java.lang.String scheme()>();
return v2;
}
public java.lang.String uri()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: java.lang.String uri()>();
return v2;
}
public java.lang.String path()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: java.lang.String path()>();
return v2;
}
public java.lang.String query()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: java.lang.String query()>();
return v2;
}
public java.lang.String host()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: java.lang.String host()>();
return v2;
}
public long bytesRead()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
long v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: long bytesRead()>();
return v2;
}
public io.vertx.mutiny.core.http.HttpServerResponse response()
{
io.vertx.core.http.HttpServerRequest v3;
io.vertx.core.http.HttpServerResponse v4;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.mutiny.core.http.HttpServerResponse v1, v2, v5;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.http.HttpServerResponse cached_0>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.http.HttpServerResponse cached_0>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpServerResponse response()>();
v5 = staticinvoke <io.vertx.mutiny.core.http.HttpServerResponse: io.vertx.mutiny.core.http.HttpServerResponse newInstance(io.vertx.core.http.HttpServerResponse)>(v4);
v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.http.HttpServerResponse cached_0> = v5;
return v5;
}
public io.vertx.mutiny.core.MultiMap headers()
{
io.vertx.core.http.HttpServerRequest v3;
io.vertx.core.MultiMap v4;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.mutiny.core.MultiMap v1, v2, v5;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.MultiMap cached_1>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.MultiMap cached_1>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpServerRequest: io.vertx.core.MultiMap headers()>();
v5 = staticinvoke <io.vertx.mutiny.core.MultiMap: io.vertx.mutiny.core.MultiMap newInstance(io.vertx.core.MultiMap)>(v4);
v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.MultiMap cached_1> = v5;
return v5;
}
public java.lang.String getHeader(java.lang.String)
{
io.vertx.core.http.HttpServerRequest v2;
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.lang.String v1, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.http.HttpServerRequest: java.lang.String getHeader(java.lang.String)>(v1);
return v3;
}
public io.vertx.mutiny.core.http.HttpServerRequest setParamsCharset(java.lang.String)
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v2;
java.lang.String v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest setParamsCharset(java.lang.String)>(v1);
return v0;
}
public java.lang.String getParamsCharset()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: java.lang.String getParamsCharset()>();
return v2;
}
public io.vertx.mutiny.core.MultiMap params()
{
io.vertx.core.http.HttpServerRequest v3;
io.vertx.core.MultiMap v4;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.mutiny.core.MultiMap v1, v2, v5;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.MultiMap cached_2>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.MultiMap cached_2>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpServerRequest: io.vertx.core.MultiMap params()>();
v5 = staticinvoke <io.vertx.mutiny.core.MultiMap: io.vertx.mutiny.core.MultiMap newInstance(io.vertx.core.MultiMap)>(v4);
v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.MultiMap cached_2> = v5;
return v5;
}
public java.lang.String getParam(java.lang.String)
{
io.vertx.core.http.HttpServerRequest v2;
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.lang.String v1, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.http.HttpServerRequest: java.lang.String getParam(java.lang.String)>(v1);
return v3;
}
public java.lang.String getParam(java.lang.String, java.lang.String)
{
io.vertx.core.http.HttpServerRequest v3;
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.lang.String v1, v2, v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpServerRequest: java.lang.String getParam(java.lang.String,java.lang.String)>(v1, v2);
return v4;
}
public io.vertx.mutiny.core.net.SocketAddress remoteAddress()
{
io.vertx.core.http.HttpServerRequest v3;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.mutiny.core.net.SocketAddress v1, v2, v5;
io.vertx.core.net.SocketAddress v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.net.SocketAddress cached_3>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.net.SocketAddress cached_3>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpServerRequest: io.vertx.core.net.SocketAddress remoteAddress()>();
v5 = staticinvoke <io.vertx.mutiny.core.net.SocketAddress: io.vertx.mutiny.core.net.SocketAddress newInstance(io.vertx.core.net.SocketAddress)>(v4);
v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.net.SocketAddress cached_3> = v5;
return v5;
}
public io.vertx.mutiny.core.net.SocketAddress localAddress()
{
io.vertx.core.http.HttpServerRequest v3;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.mutiny.core.net.SocketAddress v1, v2, v5;
io.vertx.core.net.SocketAddress v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.net.SocketAddress cached_4>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.net.SocketAddress cached_4>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpServerRequest: io.vertx.core.net.SocketAddress localAddress()>();
v5 = staticinvoke <io.vertx.mutiny.core.net.SocketAddress: io.vertx.mutiny.core.net.SocketAddress newInstance(io.vertx.core.net.SocketAddress)>(v4);
v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.net.SocketAddress cached_4> = v5;
return v5;
}
public java.lang.String absoluteURI()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: java.lang.String absoluteURI()>();
return v2;
}
private io.vertx.mutiny.core.http.HttpServerRequest __bodyHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpServerRequest v2;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.Handler v1;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda___bodyHandler_12__1702: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest bodyHandler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerRequest bodyHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpServerRequest v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.http.HttpServerRequest __bodyHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni body()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_body_15__1703: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerRequest)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public io.vertx.mutiny.core.buffer.Buffer bodyAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.Uni body()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void bodyAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.Uni body()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.smallrye.mutiny.Uni end()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_end_16__1704: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerRequest)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void endAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.Uni end()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void endAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.Uni end()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.smallrye.mutiny.Uni toNetSocket()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_toNetSocket_19__1705: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerRequest)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public io.vertx.mutiny.core.net.NetSocket toNetSocketAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.Uni toNetSocket()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void toNetSocketAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.Uni toNetSocket()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.vertx.mutiny.core.http.HttpServerRequest setExpectMultipart(boolean)
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v2;
boolean v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest setExpectMultipart(boolean)>(v1);
return v0;
}
public boolean isExpectMultipart()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: boolean isExpectMultipart()>();
return v2;
}
private io.vertx.mutiny.core.http.HttpServerRequest __uploadHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpServerRequest v2;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.Handler v1;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda___uploadHandler_20__1706: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest uploadHandler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerRequest uploadHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpServerRequest v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.http.HttpServerRequest __uploadHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.MultiMap formAttributes()
{
io.vertx.core.http.HttpServerRequest v3;
io.vertx.core.MultiMap v4;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.mutiny.core.MultiMap v1, v2, v5;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.MultiMap cached_5>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.MultiMap cached_5>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpServerRequest: io.vertx.core.MultiMap formAttributes()>();
v5 = staticinvoke <io.vertx.mutiny.core.MultiMap: io.vertx.mutiny.core.MultiMap newInstance(io.vertx.core.MultiMap)>(v4);
v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.MultiMap cached_5> = v5;
return v5;
}
public java.lang.String getFormAttribute(java.lang.String)
{
io.vertx.core.http.HttpServerRequest v2;
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.lang.String v1, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.http.HttpServerRequest: java.lang.String getFormAttribute(java.lang.String)>(v1);
return v3;
}
public int streamId()
{
io.vertx.core.http.HttpServerRequest v4;
int v3, v5;
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.lang.Integer v1, v2, v6;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: java.lang.Integer cached_6>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: java.lang.Integer cached_6>;
v3 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
return v3;
label1:
v4 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v5 = interfaceinvoke v4.<io.vertx.core.http.HttpServerRequest: int streamId()>();
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v5);
v0.<io.vertx.mutiny.core.http.HttpServerRequest: java.lang.Integer cached_6> = v6;
return v5;
}
public io.smallrye.mutiny.Uni toWebSocket()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.util.function.Consumer v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_toWebSocket_23__1707: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerRequest)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public io.vertx.mutiny.core.http.ServerWebSocket toWebSocketAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.Uni toWebSocket()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void toWebSocketAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.Uni toWebSocket()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public boolean isEnded()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: boolean isEnded()>();
return v2;
}
private io.vertx.mutiny.core.http.HttpServerRequest __customFrameHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpServerRequest v2;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.Handler v1;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda___customFrameHandler_24__1708: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest customFrameHandler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerRequest customFrameHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpServerRequest v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.http.HttpServerRequest __customFrameHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.HttpConnection connection()
{
io.vertx.core.http.HttpServerRequest v3;
io.vertx.mutiny.core.http.HttpConnection v1, v2, v5;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpConnection v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.http.HttpConnection cached_7>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.http.HttpConnection cached_7>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpConnection connection()>();
v5 = staticinvoke <io.vertx.mutiny.core.http.HttpConnection: io.vertx.mutiny.core.http.HttpConnection newInstance(io.vertx.core.http.HttpConnection)>(v4);
v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.http.HttpConnection cached_7> = v5;
return v5;
}
public io.vertx.core.http.StreamPriority streamPriority()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
io.vertx.core.http.StreamPriority v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.StreamPriority streamPriority()>();
return v2;
}
private io.vertx.mutiny.core.http.HttpServerRequest __streamPriorityHandler(io.vertx.core.Handler)
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest streamPriorityHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerRequest streamPriorityHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpServerRequest v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.mutiny.core.http.HttpServerRequest __streamPriorityHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.Cookie getCookie(java.lang.String)
{
io.vertx.core.http.HttpServerRequest v2;
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.lang.String v1;
io.vertx.core.http.Cookie v3;
io.vertx.mutiny.core.http.Cookie v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.Cookie getCookie(java.lang.String)>(v1);
v4 = staticinvoke <io.vertx.mutiny.core.http.Cookie: io.vertx.mutiny.core.http.Cookie newInstance(io.vertx.core.http.Cookie)>(v3);
return v4;
}
public io.vertx.mutiny.core.http.Cookie getCookie(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.http.HttpServerRequest v4;
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.lang.String v1, v2, v3;
io.vertx.core.http.Cookie v5;
io.vertx.mutiny.core.http.Cookie v6;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v5 = interfaceinvoke v4.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.Cookie getCookie(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
v6 = staticinvoke <io.vertx.mutiny.core.http.Cookie: io.vertx.mutiny.core.http.Cookie newInstance(io.vertx.core.http.Cookie)>(v5);
return v6;
}
public int cookieCount()
{
int v2;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: int cookieCount()>();
return v2;
}
public java.util.Map cookieMap()
{
io.vertx.core.http.HttpServerRequest v1;
java.util.Set v3;
java.util.function.Function v5, v6;
java.util.stream.Stream v4;
java.util.Map v2;
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.lang.Object v8;
java.util.stream.Collector v7;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: java.util.Map cookieMap()>();
v3 = interfaceinvoke v2.<java.util.Map: java.util.Set entrySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.stream.Stream stream()>();
v5 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_cookieMap_25__1709: java.util.function.Function bootstrap$()>();
v6 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_cookieMap_26__1710: java.util.function.Function bootstrap$()>();
v7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>(v5, v6);
v8 = interfaceinvoke v4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v7);
return v8;
}
public java.util.Set cookies(java.lang.String)
{
io.vertx.core.http.HttpServerRequest v2;
java.util.Set v3;
java.util.function.Function v5;
java.util.stream.Stream v4, v6;
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.lang.Object v8;
java.lang.String v1;
java.util.stream.Collector v7;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.http.HttpServerRequest: java.util.Set cookies(java.lang.String)>(v1);
v4 = interfaceinvoke v3.<java.util.Set: java.util.stream.Stream stream()>();
v5 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_cookies_27__1711: java.util.function.Function bootstrap$()>();
v6 = interfaceinvoke v4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v5);
v7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>();
v8 = interfaceinvoke v6.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v7);
return v8;
}
public java.util.Set cookies()
{
io.vertx.core.http.HttpServerRequest v1;
java.util.Set v2;
java.util.function.Function v4;
java.util.stream.Stream v3, v5;
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.lang.Object v7;
java.util.stream.Collector v6;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: java.util.Set cookies()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.stream.Stream stream()>();
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_cookies_28__1712: java.util.function.Function bootstrap$()>();
v5 = interfaceinvoke v3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v4);
v6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>();
v7 = interfaceinvoke v5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v6);
return v7;
}
public io.vertx.mutiny.core.http.HttpServerRequest routed(java.lang.String)
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v2;
java.lang.String v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest routed(java.lang.String)>(v1);
return v0;
}
public java.lang.String getHeader(java.lang.CharSequence)
{
io.vertx.core.http.HttpServerRequest v2;
java.lang.CharSequence v1;
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.lang.String v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 := @parameter0: java.lang.CharSequence;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.http.HttpServerRequest: java.lang.String getHeader(java.lang.CharSequence)>(v1);
return v3;
}
public javax.net.ssl.SSLSession sslSession()
{
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.vertx.core.http.HttpServerRequest v1;
javax.net.ssl.SSLSession v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerRequest: javax.net.ssl.SSLSession sslSession()>();
return v2;
}
public synchronized io.smallrye.mutiny.Multi toMulti()
{
io.vertx.core.http.HttpServerRequest v3;
io.vertx.mutiny.core.http.HttpServerRequest v0;
java.util.function.Function v2;
io.smallrye.mutiny.Multi v1, v4, v5;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.Multi multi>;
if v1 != null goto label1;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$newInstance__1713: java.util.function.Function bootstrap$()>();
v3 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.vertx.core.http.HttpServerRequest delegate>;
v4 = staticinvoke <io.smallrye.mutiny.vertx.MultiHelper: io.smallrye.mutiny.Multi toMulti(io.vertx.core.streams.ReadStream,java.util.function.Function)>(v3, v2);
v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.Multi multi> = v4;
label1:
v5 = v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.Multi multi>;
return v5;
}
public java.lang.Iterable toBlockingIterable()
{
io.smallrye.mutiny.groups.MultiSubscribe v2;
io.smallrye.mutiny.helpers.BlockingIterable v3;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.Multi toMulti()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.helpers.BlockingIterable asIterable()>();
return v3;
}
public java.util.stream.Stream toBlockingStream()
{
io.smallrye.mutiny.groups.MultiSubscribe v2;
java.util.stream.Stream v3;
io.vertx.mutiny.core.http.HttpServerRequest v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerRequest;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.Multi toMulti()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSubscribe: java.util.stream.Stream asStream()>();
return v3;
}
public static io.vertx.mutiny.core.http.HttpServerRequest newInstance(io.vertx.core.http.HttpServerRequest)
{
io.vertx.mutiny.core.http.HttpServerRequest v1;
io.vertx.core.http.HttpServerRequest v0;
v0 := @parameter0: io.vertx.core.http.HttpServerRequest;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.http.HttpServerRequest;
specialinvoke v1.<io.vertx.mutiny.core.http.HttpServerRequest: void <init>(io.vertx.core.http.HttpServerRequest)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
static void <clinit>()
{
io.smallrye.mutiny.vertx.TypeArg v0, v12, v3, v6, v9;
java.util.function.Function v1, v10, v11, v13, v14, v2, v4, v5, v7, v8;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_static_0__1720: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$getDelegate__1721: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG> = v0;
v3 = new io.smallrye.mutiny.vertx.TypeArg;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_static_1__1722: java.util.function.Function bootstrap$()>();
v5 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_static_2__1723: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v4, v5);
<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0> = v3;
v6 = new io.smallrye.mutiny.vertx.TypeArg;
v7 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_static_3__1724: java.util.function.Function bootstrap$()>();
v8 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_static_4__1725: java.util.function.Function bootstrap$()>();
specialinvoke v6.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v7, v8);
<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_3> = v6;
v9 = new io.smallrye.mutiny.vertx.TypeArg;
v10 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_static_5__1726: java.util.function.Function bootstrap$()>();
v11 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_static_6__1727: java.util.function.Function bootstrap$()>();
specialinvoke v9.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v10, v11);
<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_1> = v9;
v12 = new io.smallrye.mutiny.vertx.TypeArg;
v13 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_static_7__1728: java.util.function.Function bootstrap$()>();
v14 = staticinvoke <io.vertx.mutiny.core.http.HttpServerRequest$lambda_static_8__1729: java.util.function.Function bootstrap$()>();
specialinvoke v12.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v13, v14);
<io.vertx.mutiny.core.http.HttpServerRequest: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_2> = v12;
return;
}
}