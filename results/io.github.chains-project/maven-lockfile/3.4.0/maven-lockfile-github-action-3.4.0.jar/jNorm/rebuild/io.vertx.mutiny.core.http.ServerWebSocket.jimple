public class io.vertx.mutiny.core.http.ServerWebSocket extends java.lang.Object implements io.vertx.mutiny.core.http.WebSocketBase
{
public static final io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG;
private final io.vertx.core.http.ServerWebSocket delegate;
static final io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0;
private io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber;
private io.vertx.mutiny.core.net.SocketAddress cached_0;
private io.vertx.mutiny.core.net.SocketAddress cached_1;
private io.smallrye.mutiny.Multi multi;
public void <init>(io.vertx.core.http.ServerWebSocket)
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.core.http.ServerWebSocket;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate> = v1;
return;
}
public void <init>(java.lang.Object)
{
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.Object v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate> = v1;
return;
}
void <init>()
{
io.vertx.mutiny.core.http.ServerWebSocket v0;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate> = null;
return;
}
public io.vertx.core.http.ServerWebSocket getDelegate()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
return v1;
}
public java.lang.String toString()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
io.vertx.core.http.ServerWebSocket v4, v5;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.Class v2, v3;
java.lang.Object v1;
boolean v6;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v5 = v1.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public synchronized io.smallrye.mutiny.vertx.WriteStreamSubscriber toSubscriber()
{
io.smallrye.mutiny.vertx.WriteStreamSubscriber v1, v4, v5;
io.vertx.core.http.ServerWebSocket v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.util.function.Function v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber>;
if v1 != null goto label1;
v2 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$getDelegate__1958: java.util.function.Function bootstrap$()>();
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket getDelegate()>();
v4 = staticinvoke <io.smallrye.mutiny.vertx.MutinyHelper: io.smallrye.mutiny.vertx.WriteStreamSubscriber toSubscriber(io.vertx.core.streams.WriteStream,java.util.function.Function)>(v3, v2);
v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber> = v4;
label1:
v5 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber>;
return v5;
}
public io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_write_3__1959: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.ServerWebSocket,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.buffer.Buffer v1;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void writeAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_end_4__1960: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.ServerWebSocket,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void endAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.buffer.Buffer v1;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void endAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public boolean writeQueueFull()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: boolean writeQueueFull()>();
return v2;
}
public io.vertx.mutiny.core.streams.Pipe pipe()
{
io.vertx.mutiny.core.streams.Pipe v4;
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.core.streams.Pipe v2;
io.smallrye.mutiny.vertx.TypeArg v3;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: io.vertx.core.streams.Pipe pipe()>();
v3 = <io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0>;
v4 = staticinvoke <io.vertx.mutiny.core.streams.Pipe: io.vertx.mutiny.core.streams.Pipe newInstance(io.vertx.core.streams.Pipe,io.smallrye.mutiny.vertx.TypeArg)>(v2, v3);
return v4;
}
public io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_pipeTo_5__1961: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.ServerWebSocket,io.vertx.mutiny.core.streams.WriteStream)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void pipeToAndAwait(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void pipeToAndForget(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public java.lang.String binaryHandlerID()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: java.lang.String binaryHandlerID()>();
return v2;
}
public java.lang.String textHandlerID()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: java.lang.String textHandlerID()>();
return v2;
}
public java.lang.String subProtocol()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: java.lang.String subProtocol()>();
return v2;
}
public java.lang.Short closeStatusCode()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.Short v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: java.lang.Short closeStatusCode()>();
return v2;
}
public java.lang.String closeReason()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: java.lang.String closeReason()>();
return v2;
}
public io.vertx.mutiny.core.MultiMap headers()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.core.MultiMap v2;
io.vertx.mutiny.core.MultiMap v3;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: io.vertx.core.MultiMap headers()>();
v3 = staticinvoke <io.vertx.mutiny.core.MultiMap: io.vertx.mutiny.core.MultiMap newInstance(io.vertx.core.MultiMap)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni writePing(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_writePing_6__1962: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.ServerWebSocket,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writePingAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.buffer.Buffer v1;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni writePing(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.http.WebSocketBase writePingAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni writePing(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni writePong(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_writePong_7__1963: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.ServerWebSocket,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writePongAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.buffer.Buffer v1;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni writePong(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.http.WebSocketBase writePongAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni writePong(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
private io.vertx.mutiny.core.http.WebSocketBase __textMessageHandler(io.vertx.core.Handler)
{
io.vertx.core.http.ServerWebSocket v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
interfaceinvoke v2.<io.vertx.core.http.ServerWebSocket: io.vertx.core.http.WebSocketBase textMessageHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.WebSocketBase textMessageHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.WebSocketBase v3;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.mutiny.core.http.WebSocketBase __textMessageHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.http.WebSocketBase __binaryMessageHandler(io.vertx.core.Handler)
{
io.vertx.core.http.ServerWebSocket v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.core.Handler v1;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda___binaryMessageHandler_8__1964: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.ServerWebSocket: io.vertx.core.http.WebSocketBase binaryMessageHandler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.WebSocketBase binaryMessageHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.WebSocketBase v3;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.mutiny.core.http.WebSocketBase __binaryMessageHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.http.WebSocketBase __pongHandler(io.vertx.core.Handler)
{
io.vertx.core.http.ServerWebSocket v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.core.Handler v1;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda___pongHandler_9__1965: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.ServerWebSocket: io.vertx.core.http.WebSocketBase pongHandler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.WebSocketBase pongHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.WebSocketBase v3;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.mutiny.core.http.WebSocketBase __pongHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni end()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_end_10__1966: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.ServerWebSocket)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void endAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni end()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void endAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni end()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.smallrye.mutiny.Uni close()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_close_11__1967: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.ServerWebSocket)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void closeAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni close()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void closeAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni close()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.smallrye.mutiny.Uni close(short)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
short v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: short;
v2 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_close_12__1968: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.ServerWebSocket,short)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void closeAndAwait(short)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
short v1;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: short;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni close(short)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void closeAndForget(short)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.ServerWebSocket v0;
short v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: short;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni close(short)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni close(short, java.lang.String)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
short v1;
java.lang.String v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: short;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_close_13__1969: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.ServerWebSocket,short,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void closeAndAwait(short, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.http.ServerWebSocket v0;
short v1;
java.lang.Object v5;
java.lang.String v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: short;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni close(short,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public void closeAndForget(short, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.http.ServerWebSocket v0;
short v1;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: short;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni close(short,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return;
}
public io.vertx.mutiny.core.net.SocketAddress remoteAddress()
{
io.vertx.core.http.ServerWebSocket v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.net.SocketAddress v1, v2, v5;
io.vertx.core.net.SocketAddress v4;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.mutiny.core.net.SocketAddress cached_0>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.mutiny.core.net.SocketAddress cached_0>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.ServerWebSocket: io.vertx.core.net.SocketAddress remoteAddress()>();
v5 = staticinvoke <io.vertx.mutiny.core.net.SocketAddress: io.vertx.mutiny.core.net.SocketAddress newInstance(io.vertx.core.net.SocketAddress)>(v4);
v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.mutiny.core.net.SocketAddress cached_0> = v5;
return v5;
}
public io.vertx.mutiny.core.net.SocketAddress localAddress()
{
io.vertx.core.http.ServerWebSocket v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.net.SocketAddress v1, v2, v5;
io.vertx.core.net.SocketAddress v4;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.mutiny.core.net.SocketAddress cached_1>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.mutiny.core.net.SocketAddress cached_1>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.ServerWebSocket: io.vertx.core.net.SocketAddress localAddress()>();
v5 = staticinvoke <io.vertx.mutiny.core.net.SocketAddress: io.vertx.mutiny.core.net.SocketAddress newInstance(io.vertx.core.net.SocketAddress)>(v4);
v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.mutiny.core.net.SocketAddress cached_1> = v5;
return v5;
}
public boolean isSsl()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: boolean isSsl()>();
return v2;
}
public boolean isClosed()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: boolean isClosed()>();
return v2;
}
private io.vertx.mutiny.core.http.ServerWebSocket __exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.http.ServerWebSocket v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
interfaceinvoke v2.<io.vertx.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket exceptionHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.ServerWebSocket exceptionHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.http.ServerWebSocket v0, v3;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.mutiny.core.http.ServerWebSocket __exceptionHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.http.ServerWebSocket __handler(io.vertx.core.Handler)
{
io.vertx.core.http.ServerWebSocket v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.core.Handler v1;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda___handler_14__1970: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket handler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.ServerWebSocket handler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.http.ServerWebSocket v0, v3;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.mutiny.core.http.ServerWebSocket __handler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.ServerWebSocket pause()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket pause()>();
return v0;
}
public io.vertx.mutiny.core.http.ServerWebSocket resume()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket resume()>();
return v0;
}
public io.vertx.mutiny.core.http.ServerWebSocket fetch(long)
{
io.vertx.core.http.ServerWebSocket v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
long v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: long;
v2 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
interfaceinvoke v2.<io.vertx.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket fetch(long)>(v1);
return v0;
}
private io.vertx.mutiny.core.http.ServerWebSocket __endHandler(io.vertx.core.Handler)
{
io.vertx.core.http.ServerWebSocket v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
interfaceinvoke v2.<io.vertx.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket endHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.ServerWebSocket endHandler(java.lang.Runnable)
{
io.vertx.mutiny.core.http.ServerWebSocket v0, v3;
io.vertx.core.Handler v2;
java.lang.Runnable v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_endHandler_15__1971: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.mutiny.core.http.ServerWebSocket __endHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.ServerWebSocket setWriteQueueMaxSize(int)
{
int v1;
io.vertx.core.http.ServerWebSocket v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: int;
v2 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
interfaceinvoke v2.<io.vertx.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket setWriteQueueMaxSize(int)>(v1);
return v0;
}
private io.vertx.mutiny.core.http.ServerWebSocket __drainHandler(io.vertx.core.Handler)
{
io.vertx.core.http.ServerWebSocket v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
interfaceinvoke v2.<io.vertx.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket drainHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.ServerWebSocket drainHandler(java.lang.Runnable)
{
io.vertx.mutiny.core.http.ServerWebSocket v0, v3;
io.vertx.core.Handler v2;
java.lang.Runnable v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_drainHandler_16__1972: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.mutiny.core.http.ServerWebSocket __drainHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni writeFrame(io.vertx.mutiny.core.http.WebSocketFrame)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.http.WebSocketFrame v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.http.WebSocketFrame;
v2 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_writeFrame_17__1973: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.ServerWebSocket,io.vertx.mutiny.core.http.WebSocketFrame)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeFrameAndAwait(io.vertx.mutiny.core.http.WebSocketFrame)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.http.WebSocketFrame v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.http.WebSocketFrame;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni writeFrame(io.vertx.mutiny.core.http.WebSocketFrame)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.http.ServerWebSocket writeFrameAndForget(io.vertx.mutiny.core.http.WebSocketFrame)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.http.WebSocketFrame v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.http.WebSocketFrame;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni writeFrame(io.vertx.mutiny.core.http.WebSocketFrame)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni writeFinalTextFrame(java.lang.String)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_writeFinalTextFrame_18__1974: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.ServerWebSocket,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeFinalTextFrameAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni writeFinalTextFrame(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.http.ServerWebSocket writeFinalTextFrameAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni writeFinalTextFrame(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni writeFinalBinaryFrame(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_writeFinalBinaryFrame_19__1975: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.ServerWebSocket,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeFinalBinaryFrameAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.buffer.Buffer v1;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni writeFinalBinaryFrame(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.http.ServerWebSocket writeFinalBinaryFrameAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni writeFinalBinaryFrame(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni writeBinaryMessage(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_writeBinaryMessage_20__1976: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.ServerWebSocket,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeBinaryMessageAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.buffer.Buffer v1;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni writeBinaryMessage(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.http.ServerWebSocket writeBinaryMessageAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni writeBinaryMessage(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni writeTextMessage(java.lang.String)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_writeTextMessage_21__1977: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.ServerWebSocket,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeTextMessageAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.Object v4;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni writeTextMessage(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.http.ServerWebSocket writeTextMessageAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni writeTextMessage(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
private io.vertx.mutiny.core.http.ServerWebSocket __closeHandler(io.vertx.core.Handler)
{
io.vertx.core.http.ServerWebSocket v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
interfaceinvoke v2.<io.vertx.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket closeHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.ServerWebSocket closeHandler(java.lang.Runnable)
{
io.vertx.mutiny.core.http.ServerWebSocket v0, v3;
io.vertx.core.Handler v2;
java.lang.Runnable v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_closeHandler_22__1978: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.mutiny.core.http.ServerWebSocket __closeHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.http.ServerWebSocket __frameHandler(io.vertx.core.Handler)
{
io.vertx.core.http.ServerWebSocket v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.core.Handler v1;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda___frameHandler_23__1979: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket frameHandler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.ServerWebSocket frameHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.http.ServerWebSocket v0, v3;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.mutiny.core.http.ServerWebSocket __frameHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public java.lang.String scheme()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: java.lang.String scheme()>();
return v2;
}
public java.lang.String host()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: java.lang.String host()>();
return v2;
}
public java.lang.String uri()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: java.lang.String uri()>();
return v2;
}
public java.lang.String path()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: java.lang.String path()>();
return v2;
}
public java.lang.String query()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: java.lang.String query()>();
return v2;
}
public void accept()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: void accept()>();
return;
}
public void reject()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: void reject()>();
return;
}
public void reject(int)
{
int v1;
io.vertx.core.http.ServerWebSocket v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: int;
v2 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
interfaceinvoke v2.<io.vertx.core.http.ServerWebSocket: void reject(int)>(v1);
return;
}
public io.smallrye.mutiny.Uni setHandshake(io.smallrye.mutiny.Uni)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.Uni v1, v3;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.smallrye.mutiny.Uni;
v2 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_setHandshake_24__1980: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.ServerWebSocket,io.smallrye.mutiny.Uni)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Integer setHandshakeAndAwait(io.smallrye.mutiny.Uni)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.lang.Object v4;
io.smallrye.mutiny.Uni v1, v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.smallrye.mutiny.Uni;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni setHandshake(io.smallrye.mutiny.Uni)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void setHandshakeAndForget(io.smallrye.mutiny.Uni)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v1, v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 := @parameter0: io.smallrye.mutiny.Uni;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Uni setHandshake(io.smallrye.mutiny.Uni)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public javax.net.ssl.SSLSession sslSession()
{
io.vertx.core.http.ServerWebSocket v1;
io.vertx.mutiny.core.http.ServerWebSocket v0;
javax.net.ssl.SSLSession v2;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.ServerWebSocket: javax.net.ssl.SSLSession sslSession()>();
return v2;
}
public synchronized io.smallrye.mutiny.Multi toMulti()
{
io.vertx.core.http.ServerWebSocket v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.util.function.Function v2;
io.smallrye.mutiny.Multi v1, v4, v5;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Multi multi>;
if v1 != null goto label1;
v2 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$newInstance__1981: java.util.function.Function bootstrap$()>();
v3 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.vertx.core.http.ServerWebSocket delegate>;
v4 = staticinvoke <io.smallrye.mutiny.vertx.MultiHelper: io.smallrye.mutiny.Multi toMulti(io.vertx.core.streams.ReadStream,java.util.function.Function)>(v3, v2);
v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Multi multi> = v4;
label1:
v5 = v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Multi multi>;
return v5;
}
public java.lang.Iterable toBlockingIterable()
{
io.smallrye.mutiny.groups.MultiSubscribe v2;
io.smallrye.mutiny.helpers.BlockingIterable v3;
io.vertx.mutiny.core.http.ServerWebSocket v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Multi toMulti()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.helpers.BlockingIterable asIterable()>();
return v3;
}
public java.util.stream.Stream toBlockingStream()
{
io.smallrye.mutiny.groups.MultiSubscribe v2;
io.vertx.mutiny.core.http.ServerWebSocket v0;
java.util.stream.Stream v3;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.vertx.mutiny.core.http.ServerWebSocket;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.Multi toMulti()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSubscribe: java.util.stream.Stream asStream()>();
return v3;
}
public static io.vertx.mutiny.core.http.ServerWebSocket newInstance(io.vertx.core.http.ServerWebSocket)
{
io.vertx.core.http.ServerWebSocket v0;
io.vertx.mutiny.core.http.ServerWebSocket v1;
v0 := @parameter0: io.vertx.core.http.ServerWebSocket;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.http.ServerWebSocket;
specialinvoke v1.<io.vertx.mutiny.core.http.ServerWebSocket: void <init>(io.vertx.core.http.ServerWebSocket)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
static void <clinit>()
{
io.smallrye.mutiny.vertx.TypeArg v0, v3;
java.util.function.Function v1, v2, v4, v5;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_static_0__1982: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$getDelegate__1983: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG> = v0;
v3 = new io.smallrye.mutiny.vertx.TypeArg;
v4 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_static_1__1984: java.util.function.Function bootstrap$()>();
v5 = staticinvoke <io.vertx.mutiny.core.http.ServerWebSocket$lambda_static_2__1985: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v4, v5);
<io.vertx.mutiny.core.http.ServerWebSocket: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0> = v3;
return;
}
}