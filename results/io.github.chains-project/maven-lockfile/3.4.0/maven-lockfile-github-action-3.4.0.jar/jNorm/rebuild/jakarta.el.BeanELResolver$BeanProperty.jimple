final class jakarta.el.BeanELResolver$BeanProperty extends java.lang.Object
{
private final java.lang.Class baseClass;
private final java.beans.PropertyDescriptor descriptor;
private java.lang.reflect.Method readMethod;
private java.lang.reflect.Method writeMethod;
public void <init>(java.lang.Class, java.beans.PropertyDescriptor)
{
jakarta.el.BeanELResolver$BeanProperty v0;
java.lang.Class v1;
java.beans.PropertyDescriptor v2;
v0 := @this: jakarta.el.BeanELResolver$BeanProperty;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.beans.PropertyDescriptor;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<jakarta.el.BeanELResolver$BeanProperty: java.lang.Class baseClass> = v1;
v0.<jakarta.el.BeanELResolver$BeanProperty: java.beans.PropertyDescriptor descriptor> = v2;
return;
}
public java.lang.Class getPropertyType()
{
jakarta.el.BeanELResolver$BeanProperty v0;
java.lang.Class v2;
java.beans.PropertyDescriptor v1;
v0 := @this: jakarta.el.BeanELResolver$BeanProperty;
v1 = v0.<jakarta.el.BeanELResolver$BeanProperty: java.beans.PropertyDescriptor descriptor>;
v2 = virtualinvoke v1.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();
return v2;
}
public boolean isReadOnly(java.lang.Object)
{
jakarta.el.BeanELResolver$BeanProperty v0;
java.lang.Object v1;
java.lang.reflect.Method v2;
boolean v3;
v0 := @this: jakarta.el.BeanELResolver$BeanProperty;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<jakarta.el.BeanELResolver$BeanProperty: java.lang.reflect.Method getWriteMethod(java.lang.Object)>(v1);
if v2 != null goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public java.lang.reflect.Method getReadMethod(java.lang.Object)
{
jakarta.el.BeanELResolver$BeanProperty v0;
java.beans.PropertyDescriptor v4;
java.lang.Class v3;
java.lang.Object v1;
java.lang.reflect.Method v2, v5, v6, v7;
v0 := @this: jakarta.el.BeanELResolver$BeanProperty;
v1 := @parameter0: java.lang.Object;
v2 = v0.<jakarta.el.BeanELResolver$BeanProperty: java.lang.reflect.Method readMethod>;
if v2 != null goto label1;
v3 = v0.<jakarta.el.BeanELResolver$BeanProperty: java.lang.Class baseClass>;
v4 = v0.<jakarta.el.BeanELResolver$BeanProperty: java.beans.PropertyDescriptor descriptor>;
v5 = virtualinvoke v4.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();
v6 = staticinvoke <jakarta.el.ELUtil: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.Object,java.lang.reflect.Method)>(v3, v1, v5);
v0.<jakarta.el.BeanELResolver$BeanProperty: java.lang.reflect.Method readMethod> = v6;
label1:
v7 = v0.<jakarta.el.BeanELResolver$BeanProperty: java.lang.reflect.Method readMethod>;
return v7;
}
public java.lang.reflect.Method getWriteMethod(java.lang.Object)
{
jakarta.el.BeanELResolver$BeanProperty v0;
java.beans.PropertyDescriptor v4;
java.lang.Class v3;
java.lang.Object v1;
java.lang.reflect.Method v2, v5, v6, v7;
v0 := @this: jakarta.el.BeanELResolver$BeanProperty;
v1 := @parameter0: java.lang.Object;
v2 = v0.<jakarta.el.BeanELResolver$BeanProperty: java.lang.reflect.Method writeMethod>;
if v2 != null goto label1;
v3 = v0.<jakarta.el.BeanELResolver$BeanProperty: java.lang.Class baseClass>;
v4 = v0.<jakarta.el.BeanELResolver$BeanProperty: java.beans.PropertyDescriptor descriptor>;
v5 = virtualinvoke v4.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();
v6 = staticinvoke <jakarta.el.ELUtil: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.Object,java.lang.reflect.Method)>(v3, v1, v5);
v0.<jakarta.el.BeanELResolver$BeanProperty: java.lang.reflect.Method writeMethod> = v6;
label1:
v7 = v0.<jakarta.el.BeanELResolver$BeanProperty: java.lang.reflect.Method writeMethod>;
return v7;
}
}