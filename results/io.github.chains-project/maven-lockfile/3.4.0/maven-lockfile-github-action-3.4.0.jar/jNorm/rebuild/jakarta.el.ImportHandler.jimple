public class jakarta.el.ImportHandler extends java.lang.Object
{
private java.util.Map classNameMap;
private java.util.Map classMap;
private java.util.Map staticNameMap;
private java.util.HashSet notAClass;
private java.util.List packages;
public void <init>()
{
java.util.HashSet v4;
jakarta.el.ImportHandler v0;
java.util.HashMap v1, v2, v3;
java.util.ArrayList v5;
v0 := @this: jakarta.el.ImportHandler;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
v0.<jakarta.el.ImportHandler: java.util.Map classNameMap> = v1;
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
v0.<jakarta.el.ImportHandler: java.util.Map classMap> = v2;
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>()>();
v0.<jakarta.el.ImportHandler: java.util.Map staticNameMap> = v3;
v4 = new java.util.HashSet;
specialinvoke v4.<java.util.HashSet: void <init>()>();
v0.<jakarta.el.ImportHandler: java.util.HashSet notAClass> = v4;
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>()>();
v0.<jakarta.el.ImportHandler: java.util.List packages> = v5;
virtualinvoke v0.<jakarta.el.ImportHandler: void importPackage(java.lang.String)>("java.lang");
return;
}
public void importStatic(java.lang.String) throws jakarta.el.ELException
{
jakarta.el.ELException v3;
java.util.Map v8;
int v2, v5;
jakarta.el.ImportHandler v0;
java.lang.String v1, v4, v6, v7;
v0 := @this: jakarta.el.ImportHandler;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: int lastIndexOf(int)>(46);
if v2 > 0 goto label1;
v3 = new jakarta.el.ELException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The name \u0001 is not a full static member name");
specialinvoke v3.<jakarta.el.ELException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
v5 = v2 + 1;
v6 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int)>(v5);
v7 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, v2);
v8 = v0.<jakarta.el.ImportHandler: java.util.Map staticNameMap>;
interfaceinvoke v8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v7);
return;
}
public void importClass(java.lang.String) throws jakarta.el.ELException
{
jakarta.el.ELException v3;
java.util.Map v7;
int v2, v5;
jakarta.el.ImportHandler v0;
java.lang.String v1, v4, v6;
v0 := @this: jakarta.el.ImportHandler;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: int lastIndexOf(int)>(46);
if v2 > 0 goto label1;
v3 = new jakarta.el.ELException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The name \u0001 is not a full class name");
specialinvoke v3.<jakarta.el.ELException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
v5 = v2 + 1;
v6 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int)>(v5);
v7 = v0.<jakarta.el.ImportHandler: java.util.Map classNameMap>;
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v1);
return;
}
public void importPackage(java.lang.String)
{
jakarta.el.ImportHandler v0;
java.util.List v2;
java.lang.String v1;
v0 := @this: jakarta.el.ImportHandler;
v1 := @parameter0: java.lang.String;
v2 = v0.<jakarta.el.ImportHandler: java.util.List packages>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v1);
return;
}
public java.lang.Class resolveClass(java.lang.String)
{
java.util.Iterator v6;
java.util.List v5;
java.util.Map v11, v2;
jakarta.el.ImportHandler v0;
java.lang.Class v10, v4;
java.lang.Object v3, v8;
java.lang.String v1, v9;
boolean v7;
v0 := @this: jakarta.el.ImportHandler;
v1 := @parameter0: java.lang.String;
v2 = v0.<jakarta.el.ImportHandler: java.util.Map classNameMap>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = specialinvoke v0.<jakarta.el.ImportHandler: java.lang.Class resolveClassFor(java.lang.String)>(v3);
return v4;
label1:
v5 = v0.<jakarta.el.ImportHandler: java.util.List packages>;
v6 = interfaceinvoke v5.<java.util.List: java.util.Iterator iterator()>();
label2:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label3;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object,java.lang.Object)>(v8, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.\u0001");
v10 = specialinvoke v0.<jakarta.el.ImportHandler: java.lang.Class resolveClassFor(java.lang.String)>(v9);
if v10 == null goto label2;
v11 = v0.<jakarta.el.ImportHandler: java.util.Map classNameMap>;
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v9);
return v10;
label3:
return null;
}
public java.lang.Class resolveStatic(java.lang.String)
{
java.util.Map v2;
jakarta.el.ImportHandler v0;
java.lang.Class v4;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: jakarta.el.ImportHandler;
v1 := @parameter0: java.lang.String;
v2 = v0.<jakarta.el.ImportHandler: java.util.Map staticNameMap>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = specialinvoke v0.<jakarta.el.ImportHandler: java.lang.Class resolveClassFor(java.lang.String)>(v3);
if v4 == null goto label1;
return v4;
label1:
return null;
}
private java.lang.Class resolveClassFor(java.lang.String)
{
java.util.Map v2, v6;
int v5;
jakarta.el.ImportHandler v0;
java.lang.Class v4;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: jakarta.el.ImportHandler;
v1 := @parameter0: java.lang.String;
v2 = v0.<jakarta.el.ImportHandler: java.util.Map classMap>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 == null goto label1;
return v3;
label1:
v4 = specialinvoke v0.<jakarta.el.ImportHandler: java.lang.Class getClassFor(java.lang.String)>(v1);
if v4 == null goto label2;
v5 = virtualinvoke v4.<java.lang.Class: int getModifiers()>();
specialinvoke v0.<jakarta.el.ImportHandler: void checkModifiers(int)>(v5);
v6 = v0.<jakarta.el.ImportHandler: java.util.Map classMap>;
interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v4);
label2:
return v4;
}
private java.lang.Class getClassFor(java.lang.String)
{
java.lang.Throwable v7;
java.util.HashSet v2, v8;
java.lang.Thread v4;
jakarta.el.ImportHandler v0;
java.lang.Class v6;
java.lang.ClassLoader v5;
java.lang.String v1;
boolean v3;
v0 := @this: jakarta.el.ImportHandler;
v1 := @parameter0: java.lang.String;
v2 = v0.<jakarta.el.ImportHandler: java.util.HashSet notAClass>;
v3 = virtualinvoke v2.<java.util.HashSet: boolean contains(java.lang.Object)>(v1);
if v3 != 0 goto label4;
label1:
v4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v5 = virtualinvoke v4.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
v6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(v1, 0, v5);
label2:
return v6;
label3:
v7 := @caughtexception;
v8 = v0.<jakarta.el.ImportHandler: java.util.HashSet notAClass>;
virtualinvoke v8.<java.util.HashSet: boolean add(java.lang.Object)>(v1);
label4:
return null;
catch java.lang.ClassNotFoundException from label1 to label2 with label3;
catch java.lang.NoClassDefFoundError from label1 to label2 with label3;
}
private void checkModifiers(int)
{
int v1;
jakarta.el.ImportHandler v0;
jakarta.el.ELException v5;
boolean v2, v3, v4;
v0 := @this: jakarta.el.ImportHandler;
v1 := @parameter0: int;
v2 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>(v1);
if v2 != 0 goto label1;
v3 = staticinvoke <java.lang.reflect.Modifier: boolean isInterface(int)>(v1);
if v3 != 0 goto label1;
v4 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(v1);
if v4 != 0 goto label2;
label1:
v5 = new jakarta.el.ELException;
specialinvoke v5.<jakarta.el.ELException: void <init>(java.lang.String)>("Imported class must be public, and cannot be abstract or an interface");
throw v5;
label2:
return;
}
}