class jakarta.el.StandardELContext$LocalBeanNameResolver extends jakarta.el.BeanNameResolver
{
final jakarta.el.StandardELContext this$0;
private void <init>(jakarta.el.StandardELContext)
{
jakarta.el.StandardELContext v1;
jakarta.el.StandardELContext$LocalBeanNameResolver v0;
v0 := @this: jakarta.el.StandardELContext$LocalBeanNameResolver;
v1 := @parameter0: jakarta.el.StandardELContext;
v0.<jakarta.el.StandardELContext$LocalBeanNameResolver: jakarta.el.StandardELContext this$0> = v1;
specialinvoke v0.<jakarta.el.BeanNameResolver: void <init>()>();
return;
}
public boolean isNameResolved(java.lang.String)
{
jakarta.el.StandardELContext$LocalBeanNameResolver v0;
java.util.Map v3;
jakarta.el.StandardELContext v2;
java.lang.String v1;
boolean v4;
v0 := @this: jakarta.el.StandardELContext$LocalBeanNameResolver;
v1 := @parameter0: java.lang.String;
v2 = v0.<jakarta.el.StandardELContext$LocalBeanNameResolver: jakarta.el.StandardELContext this$0>;
v3 = v2.<jakarta.el.StandardELContext: java.util.Map beans>;
v4 = interfaceinvoke v3.<java.util.Map: boolean containsKey(java.lang.Object)>(v1);
return v4;
}
public java.lang.Object getBean(java.lang.String)
{
jakarta.el.StandardELContext$LocalBeanNameResolver v0;
java.util.Map v3;
jakarta.el.StandardELContext v2;
java.lang.Object v4;
java.lang.String v1;
v0 := @this: jakarta.el.StandardELContext$LocalBeanNameResolver;
v1 := @parameter0: java.lang.String;
v2 = v0.<jakarta.el.StandardELContext$LocalBeanNameResolver: jakarta.el.StandardELContext this$0>;
v3 = v2.<jakarta.el.StandardELContext: java.util.Map beans>;
v4 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v4;
}
public void setBeanValue(java.lang.String, java.lang.Object)
{
jakarta.el.StandardELContext$LocalBeanNameResolver v0;
java.util.Map v4;
jakarta.el.StandardELContext v3;
java.lang.Object v2;
java.lang.String v1;
v0 := @this: jakarta.el.StandardELContext$LocalBeanNameResolver;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = v0.<jakarta.el.StandardELContext$LocalBeanNameResolver: jakarta.el.StandardELContext this$0>;
v4 = v3.<jakarta.el.StandardELContext: java.util.Map beans>;
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
return;
}
public boolean isReadOnly(java.lang.String)
{
java.lang.String v1;
jakarta.el.StandardELContext$LocalBeanNameResolver v0;
v0 := @this: jakarta.el.StandardELContext$LocalBeanNameResolver;
v1 := @parameter0: java.lang.String;
return 0;
}
public boolean canCreateBean(java.lang.String)
{
java.lang.String v1;
jakarta.el.StandardELContext$LocalBeanNameResolver v0;
v0 := @this: jakarta.el.StandardELContext$LocalBeanNameResolver;
v1 := @parameter0: java.lang.String;
return 1;
}
}