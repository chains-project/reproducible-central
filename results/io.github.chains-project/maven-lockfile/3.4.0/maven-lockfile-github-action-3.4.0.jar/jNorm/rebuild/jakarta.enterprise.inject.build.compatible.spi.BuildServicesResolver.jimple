final class jakarta.enterprise.inject.build.compatible.spi.BuildServicesResolver extends java.lang.Object
{
private static final java.lang.Object lock;
private static volatile java.util.Set discoveredBuildServices;
private static volatile jakarta.enterprise.inject.build.compatible.spi.BuildServices configuredBuildServices;
void <init>()
{
jakarta.enterprise.inject.build.compatible.spi.BuildServicesResolver v0;
v0 := @this: jakarta.enterprise.inject.build.compatible.spi.BuildServicesResolver;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static jakarta.enterprise.inject.build.compatible.spi.BuildServices get()
{
java.lang.Throwable v5;
java.util.Iterator v7;
java.util.Set v2, v4, v6;
jakarta.enterprise.inject.build.compatible.spi.BuildServices v0, v1, v9;
java.lang.Object v3, v8;
v0 = <jakarta.enterprise.inject.build.compatible.spi.BuildServicesResolver: jakarta.enterprise.inject.build.compatible.spi.BuildServices configuredBuildServices>;
if v0 == null goto label1;
v1 = <jakarta.enterprise.inject.build.compatible.spi.BuildServicesResolver: jakarta.enterprise.inject.build.compatible.spi.BuildServices configuredBuildServices>;
return v1;
label1:
v2 = <jakarta.enterprise.inject.build.compatible.spi.BuildServicesResolver: java.util.Set discoveredBuildServices>;
if v2 != null goto label6;
v3 = <jakarta.enterprise.inject.build.compatible.spi.BuildServicesResolver: java.lang.Object lock>;
entermonitor v3;
label2:
v4 = <jakarta.enterprise.inject.build.compatible.spi.BuildServicesResolver: java.util.Set discoveredBuildServices>;
if v4 != null goto label3;
staticinvoke <jakarta.enterprise.inject.build.compatible.spi.BuildServicesResolver: void discoverFactories()>();
label3:
exitmonitor v3;
label4:
goto label6;
label5:
v5 := @caughtexception;
exitmonitor v3;
throw v5;
label6:
v6 = <jakarta.enterprise.inject.build.compatible.spi.BuildServicesResolver: java.util.Set discoveredBuildServices>;
v7 = interfaceinvoke v6.<java.util.Set: java.util.Iterator iterator()>();
v8 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
<jakarta.enterprise.inject.build.compatible.spi.BuildServicesResolver: jakarta.enterprise.inject.build.compatible.spi.BuildServices configuredBuildServices> = v8;
v9 = <jakarta.enterprise.inject.build.compatible.spi.BuildServicesResolver: jakarta.enterprise.inject.build.compatible.spi.BuildServices configuredBuildServices>;
return v9;
catch java.lang.Throwable from label2 to label4 with label5;
}
private static void discoverFactories()
{
java.lang.IllegalStateException v14, v9;
java.util.TreeSet v0;
java.util.ServiceConfigurationError v13;
boolean v11, v8;
java.util.Iterator v10, v7;
java.util.function.ToIntFunction v1;
java.util.Set v15;
java.util.ServiceLoader v6;
java.lang.Class v4;
java.lang.Object v12;
java.lang.ClassLoader v5;
java.util.Comparator v2, v3;
v0 = new java.util.TreeSet;
v1 = staticinvoke <jakarta.enterprise.inject.build.compatible.spi.BuildServicesResolver$getPriority__2607: java.util.function.ToIntFunction bootstrap$()>();
v2 = staticinvoke <java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>(v1);
v3 = interfaceinvoke v2.<java.util.Comparator: java.util.Comparator reversed()>();
specialinvoke v0.<java.util.TreeSet: void <init>(java.util.Comparator)>(v3);
v4 = class "Ljakarta/enterprise/inject/build/compatible/spi/BuildServicesResolver;";
v5 = virtualinvoke v4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v6 = staticinvoke <jakarta.enterprise.inject.build.compatible.spi.SecurityActions: java.util.ServiceLoader loadService(java.lang.Class,java.lang.ClassLoader)>(class "Ljakarta/enterprise/inject/build/compatible/spi/BuildServices;", v5);
v7 = virtualinvoke v6.<java.util.ServiceLoader: java.util.Iterator iterator()>();
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 != 0 goto label1;
v9 = new java.lang.IllegalStateException;
specialinvoke v9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to locate AnnotationBuilderFactory implementation");
throw v9;
label1:
v10 = virtualinvoke v6.<java.util.ServiceLoader: java.util.Iterator iterator()>();
label2:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label4;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v0.<java.util.Set: boolean add(java.lang.Object)>(v12);
goto label2;
label3:
v13 := @caughtexception;
v14 = new java.lang.IllegalStateException;
specialinvoke v14.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v13);
throw v14;
label4:
v15 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v0);
<jakarta.enterprise.inject.build.compatible.spi.BuildServicesResolver: java.util.Set discoveredBuildServices> = v15;
return;
catch java.util.ServiceConfigurationError from label1 to label3 with label3;
}
static void <clinit>()
{
java.lang.Object v0;
v0 = new java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
<jakarta.enterprise.inject.build.compatible.spi.BuildServicesResolver: java.lang.Object lock> = v0;
return;
}
}