public interface  jakarta.enterprise.inject.spi.configurator.BeanConfigurator extends java.lang.Object
{
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator beanClass(java.lang.Class);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator addInjectionPoint(jakarta.enterprise.inject.spi.InjectionPoint);
public abstract transient jakarta.enterprise.inject.spi.configurator.BeanConfigurator addInjectionPoints(jakarta.enterprise.inject.spi.InjectionPoint[]);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator addInjectionPoints(java.util.Set);
public abstract transient jakarta.enterprise.inject.spi.configurator.BeanConfigurator injectionPoints(jakarta.enterprise.inject.spi.InjectionPoint[]);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator injectionPoints(java.util.Set);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator id(java.lang.String);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator createWith(java.util.function.Function);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator produceWith(java.util.function.Function);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator destroyWith(java.util.function.BiConsumer);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator disposeWith(java.util.function.BiConsumer);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator read(jakarta.enterprise.inject.spi.AnnotatedType);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator read(jakarta.enterprise.inject.spi.BeanAttributes);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator addType(java.lang.reflect.Type);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator addType(jakarta.enterprise.util.TypeLiteral);
public abstract transient jakarta.enterprise.inject.spi.configurator.BeanConfigurator addTypes(java.lang.reflect.Type[]);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator addTypes(java.util.Set);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator addTransitiveTypeClosure(java.lang.reflect.Type);
public abstract transient jakarta.enterprise.inject.spi.configurator.BeanConfigurator types(java.lang.reflect.Type[]);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator types(java.util.Set);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator scope(java.lang.Class);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator addQualifier(java.lang.'annotation'.Annotation);
public abstract transient jakarta.enterprise.inject.spi.configurator.BeanConfigurator addQualifiers(java.lang.'annotation'.Annotation[]);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator addQualifiers(java.util.Set);
public abstract transient jakarta.enterprise.inject.spi.configurator.BeanConfigurator qualifiers(java.lang.'annotation'.Annotation[]);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator qualifiers(java.util.Set);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator addStereotype(java.lang.Class);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator addStereotypes(java.util.Set);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator stereotypes(java.util.Set);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator name(java.lang.String);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator alternative(boolean);
public abstract jakarta.enterprise.inject.spi.configurator.BeanConfigurator priority(int);
}