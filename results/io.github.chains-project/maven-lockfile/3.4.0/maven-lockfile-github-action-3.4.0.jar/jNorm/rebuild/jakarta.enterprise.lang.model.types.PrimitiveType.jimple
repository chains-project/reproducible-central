public interface  jakarta.enterprise.lang.model.types.PrimitiveType extends java.lang.Object implements jakarta.enterprise.lang.model.types.Type
{
public abstract java.lang.String name();
public abstract jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind primitiveKind();
public boolean isBoolean()
{
jakarta.enterprise.lang.model.types.PrimitiveType v0;
jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind v1, v2;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.types.PrimitiveType;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.types.PrimitiveType: jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind primitiveKind()>();
v2 = <jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind: jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind BOOLEAN>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isByte()
{
jakarta.enterprise.lang.model.types.PrimitiveType v0;
jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind v1, v2;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.types.PrimitiveType;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.types.PrimitiveType: jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind primitiveKind()>();
v2 = <jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind: jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind BYTE>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isShort()
{
jakarta.enterprise.lang.model.types.PrimitiveType v0;
jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind v1, v2;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.types.PrimitiveType;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.types.PrimitiveType: jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind primitiveKind()>();
v2 = <jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind: jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind SHORT>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isInt()
{
jakarta.enterprise.lang.model.types.PrimitiveType v0;
jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind v1, v2;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.types.PrimitiveType;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.types.PrimitiveType: jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind primitiveKind()>();
v2 = <jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind: jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind INT>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isLong()
{
jakarta.enterprise.lang.model.types.PrimitiveType v0;
jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind v1, v2;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.types.PrimitiveType;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.types.PrimitiveType: jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind primitiveKind()>();
v2 = <jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind: jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind LONG>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isFloat()
{
jakarta.enterprise.lang.model.types.PrimitiveType v0;
jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind v1, v2;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.types.PrimitiveType;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.types.PrimitiveType: jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind primitiveKind()>();
v2 = <jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind: jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind FLOAT>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isDouble()
{
jakarta.enterprise.lang.model.types.PrimitiveType v0;
jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind v1, v2;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.types.PrimitiveType;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.types.PrimitiveType: jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind primitiveKind()>();
v2 = <jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind: jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind DOUBLE>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isChar()
{
jakarta.enterprise.lang.model.types.PrimitiveType v0;
jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind v1, v2;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.types.PrimitiveType;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.types.PrimitiveType: jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind primitiveKind()>();
v2 = <jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind: jakarta.enterprise.lang.model.types.PrimitiveType$PrimitiveKind CHAR>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public jakarta.enterprise.lang.model.types.Type$Kind kind()
{
jakarta.enterprise.lang.model.types.PrimitiveType v0;
jakarta.enterprise.lang.model.types.Type$Kind v1;
v0 := @this: jakarta.enterprise.lang.model.types.PrimitiveType;
v1 = <jakarta.enterprise.lang.model.types.Type$Kind: jakarta.enterprise.lang.model.types.Type$Kind PRIMITIVE>;
return v1;
}
public jakarta.enterprise.lang.model.types.PrimitiveType asPrimitive()
{
jakarta.enterprise.lang.model.types.PrimitiveType v0;
v0 := @this: jakarta.enterprise.lang.model.types.PrimitiveType;
return v0;
}
}