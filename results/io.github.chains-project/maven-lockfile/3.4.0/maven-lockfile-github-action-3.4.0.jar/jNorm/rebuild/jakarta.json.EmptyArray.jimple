final class jakarta.json.EmptyArray extends java.util.AbstractList implements jakarta.json.JsonArray, java.io.Serializable, java.util.RandomAccess
{
private static final long serialVersionUID;
void <init>()
{
jakarta.json.EmptyArray v0;
v0 := @this: jakarta.json.EmptyArray;
specialinvoke v0.<java.util.AbstractList: void <init>()>();
return;
}
public jakarta.json.JsonValue get(int)
{
java.lang.IndexOutOfBoundsException v2;
jakarta.json.EmptyArray v0;
int v1;
java.lang.String v3;
v0 := @this: jakarta.json.EmptyArray;
v1 := @parameter0: int;
v2 = new java.lang.IndexOutOfBoundsException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Index: \u0001");
specialinvoke v2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v3);
throw v2;
}
public int size()
{
jakarta.json.EmptyArray v0;
v0 := @this: jakarta.json.EmptyArray;
return 0;
}
public jakarta.json.JsonObject getJsonObject(int)
{
int v1;
jakarta.json.EmptyArray v0;
jakarta.json.JsonValue v2;
v0 := @this: jakarta.json.EmptyArray;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<jakarta.json.EmptyArray: jakarta.json.JsonValue get(int)>(v1);
return v2;
}
public jakarta.json.JsonArray getJsonArray(int)
{
int v1;
jakarta.json.EmptyArray v0;
jakarta.json.JsonValue v2;
v0 := @this: jakarta.json.EmptyArray;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<jakarta.json.EmptyArray: jakarta.json.JsonValue get(int)>(v1);
return v2;
}
public jakarta.json.JsonNumber getJsonNumber(int)
{
int v1;
jakarta.json.EmptyArray v0;
jakarta.json.JsonValue v2;
v0 := @this: jakarta.json.EmptyArray;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<jakarta.json.EmptyArray: jakarta.json.JsonValue get(int)>(v1);
return v2;
}
public jakarta.json.JsonString getJsonString(int)
{
int v1;
jakarta.json.EmptyArray v0;
jakarta.json.JsonValue v2;
v0 := @this: jakarta.json.EmptyArray;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<jakarta.json.EmptyArray: jakarta.json.JsonValue get(int)>(v1);
return v2;
}
public java.util.List getValuesAs(java.lang.Class)
{
jakarta.json.EmptyArray v0;
java.lang.Class v1;
java.util.List v2;
v0 := @this: jakarta.json.EmptyArray;
v1 := @parameter0: java.lang.Class;
v2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v2;
}
public java.lang.String getString(int)
{
jakarta.json.EmptyArray v0;
int v1;
java.lang.String v3;
jakarta.json.JsonString v2;
v0 := @this: jakarta.json.EmptyArray;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<jakarta.json.EmptyArray: jakarta.json.JsonString getJsonString(int)>(v1);
v3 = interfaceinvoke v2.<jakarta.json.JsonString: java.lang.String getString()>();
return v3;
}
public java.lang.String getString(int, java.lang.String)
{
int v1;
jakarta.json.EmptyArray v0;
java.lang.String v2;
v0 := @this: jakarta.json.EmptyArray;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
return v2;
}
public int getInt(int)
{
jakarta.json.EmptyArray v0;
int v1, v3;
jakarta.json.JsonNumber v2;
v0 := @this: jakarta.json.EmptyArray;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<jakarta.json.EmptyArray: jakarta.json.JsonNumber getJsonNumber(int)>(v1);
v3 = interfaceinvoke v2.<jakarta.json.JsonNumber: int intValue()>();
return v3;
}
public int getInt(int, int)
{
int v1, v2;
jakarta.json.EmptyArray v0;
v0 := @this: jakarta.json.EmptyArray;
v1 := @parameter0: int;
v2 := @parameter1: int;
return v2;
}
public boolean getBoolean(int)
{
jakarta.json.EmptyArray v0;
jakarta.json.JsonValue v2, v3;
int v1;
boolean v4;
v0 := @this: jakarta.json.EmptyArray;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<jakarta.json.EmptyArray: jakarta.json.JsonValue get(int)>(v1);
v3 = <jakarta.json.JsonValue: jakarta.json.JsonValue TRUE>;
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean getBoolean(int, boolean)
{
int v1;
jakarta.json.EmptyArray v0;
boolean v2;
v0 := @this: jakarta.json.EmptyArray;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
return v2;
}
public boolean isNull(int)
{
jakarta.json.EmptyArray v0;
jakarta.json.JsonValue v2, v3;
int v1;
boolean v4;
v0 := @this: jakarta.json.EmptyArray;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<jakarta.json.EmptyArray: jakarta.json.JsonValue get(int)>(v1);
v3 = <jakarta.json.JsonValue: jakarta.json.JsonValue NULL>;
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public jakarta.json.JsonValue$ValueType getValueType()
{
jakarta.json.JsonValue$ValueType v1;
jakarta.json.EmptyArray v0;
v0 := @this: jakarta.json.EmptyArray;
v1 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType ARRAY>;
return v1;
}
private java.lang.Object readResolve()
{
jakarta.json.EmptyArray v0;
jakarta.json.JsonArray v1;
v0 := @this: jakarta.json.EmptyArray;
v1 = <jakarta.json.JsonValue: jakarta.json.JsonArray EMPTY_JSON_ARRAY>;
return v1;
}
}