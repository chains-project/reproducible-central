final class jakarta.json.EmptyObject extends java.util.AbstractMap implements jakarta.json.JsonObject, java.io.Serializable
{
private static final long serialVersionUID;
void <init>()
{
jakarta.json.EmptyObject v0;
v0 := @this: jakarta.json.EmptyObject;
specialinvoke v0.<java.util.AbstractMap: void <init>()>();
return;
}
public java.util.Set entrySet()
{
java.util.Set v1;
jakarta.json.EmptyObject v0;
v0 := @this: jakarta.json.EmptyObject;
v1 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
return v1;
}
public jakarta.json.JsonArray getJsonArray(java.lang.String)
{
java.lang.Object v2;
java.lang.String v1;
jakarta.json.EmptyObject v0;
v0 := @this: jakarta.json.EmptyObject;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<jakarta.json.EmptyObject: java.lang.Object get(java.lang.Object)>(v1);
return v2;
}
public jakarta.json.JsonObject getJsonObject(java.lang.String)
{
java.lang.Object v2;
java.lang.String v1;
jakarta.json.EmptyObject v0;
v0 := @this: jakarta.json.EmptyObject;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<jakarta.json.EmptyObject: java.lang.Object get(java.lang.Object)>(v1);
return v2;
}
public jakarta.json.JsonNumber getJsonNumber(java.lang.String)
{
java.lang.Object v2;
java.lang.String v1;
jakarta.json.EmptyObject v0;
v0 := @this: jakarta.json.EmptyObject;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<jakarta.json.EmptyObject: java.lang.Object get(java.lang.Object)>(v1);
return v2;
}
public jakarta.json.JsonString getJsonString(java.lang.String)
{
java.lang.Object v2;
java.lang.String v1;
jakarta.json.EmptyObject v0;
v0 := @this: jakarta.json.EmptyObject;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<jakarta.json.EmptyObject: java.lang.Object get(java.lang.Object)>(v1);
return v2;
}
public java.lang.String getString(java.lang.String)
{
java.lang.String v1, v3;
jakarta.json.EmptyObject v0;
jakarta.json.JsonString v2;
v0 := @this: jakarta.json.EmptyObject;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<jakarta.json.EmptyObject: jakarta.json.JsonString getJsonString(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<jakarta.json.JsonString: java.lang.String getString()>();
return v3;
}
public java.lang.String getString(java.lang.String, java.lang.String)
{
java.lang.String v1, v2;
jakarta.json.EmptyObject v0;
v0 := @this: jakarta.json.EmptyObject;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
return v2;
}
public int getInt(java.lang.String)
{
int v3;
jakarta.json.JsonNumber v2;
java.lang.String v1;
jakarta.json.EmptyObject v0;
v0 := @this: jakarta.json.EmptyObject;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<jakarta.json.EmptyObject: jakarta.json.JsonNumber getJsonNumber(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<jakarta.json.JsonNumber: int intValue()>();
return v3;
}
public int getInt(java.lang.String, int)
{
int v2;
java.lang.String v1;
jakarta.json.EmptyObject v0;
v0 := @this: jakarta.json.EmptyObject;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
return v2;
}
public boolean getBoolean(java.lang.String)
{
java.lang.String v1;
jakarta.json.EmptyObject v0;
java.lang.NullPointerException v2;
v0 := @this: jakarta.json.EmptyObject;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>()>();
throw v2;
}
public boolean getBoolean(java.lang.String, boolean)
{
java.lang.String v1;
jakarta.json.EmptyObject v0;
boolean v2;
v0 := @this: jakarta.json.EmptyObject;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
return v2;
}
public boolean isNull(java.lang.String)
{
java.lang.String v1;
jakarta.json.EmptyObject v0;
java.lang.NullPointerException v2;
v0 := @this: jakarta.json.EmptyObject;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>()>();
throw v2;
}
public jakarta.json.JsonValue$ValueType getValueType()
{
jakarta.json.JsonValue$ValueType v1;
jakarta.json.EmptyObject v0;
v0 := @this: jakarta.json.EmptyObject;
v1 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType OBJECT>;
return v1;
}
private java.lang.Object readResolve()
{
jakarta.json.JsonObject v1;
jakarta.json.EmptyObject v0;
v0 := @this: jakarta.json.EmptyObject;
v1 = <jakarta.json.JsonValue: jakarta.json.JsonObject EMPTY_JSON_OBJECT>;
return v1;
}
}