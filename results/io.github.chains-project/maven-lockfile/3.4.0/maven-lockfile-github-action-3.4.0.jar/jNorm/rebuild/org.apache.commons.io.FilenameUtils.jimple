public class org.apache.commons.io.FilenameUtils extends java.lang.Object
{
private static final java.lang.String[] EMPTY_STRING_ARRAY;
private static final java.lang.String EMPTY_STRING;
private static final int NOT_FOUND;
public static final char EXTENSION_SEPARATOR;
public static final java.lang.String EXTENSION_SEPARATOR_STR;
private static final char UNIX_SEPARATOR;
private static final char WINDOWS_SEPARATOR;
private static final char SYSTEM_SEPARATOR;
private static final char OTHER_SEPARATOR;
private static final java.util.regex.Pattern IPV4_PATTERN;
private static final int IPV4_MAX_OCTET_VALUE;
private static final int IPV6_MAX_HEX_GROUPS;
private static final int IPV6_MAX_HEX_DIGITS_PER_GROUP;
private static final int MAX_UNSIGNED_SHORT;
private static final int BASE_16;
private static final java.util.regex.Pattern REG_NAME_PART_PATTERN;
public void <init>()
{
org.apache.commons.io.FilenameUtils v0;
v0 := @this: org.apache.commons.io.FilenameUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static boolean isSystemWindows()
{
char v0;
boolean v1;
v0 = <org.apache.commons.io.FilenameUtils: char SYSTEM_SEPARATOR>;
if v0 != 92 goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
private static boolean isSeparator(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if v0 == 47 goto label1;
if v0 != 92 goto label2;
label1:
v1 = 1;
goto label3;
label2:
v1 = 0;
label3:
return v1;
}
public static java.lang.String normalize(java.lang.String)
{
char v1;
java.lang.String v0, v2;
v0 := @parameter0: java.lang.String;
v1 = <org.apache.commons.io.FilenameUtils: char SYSTEM_SEPARATOR>;
v2 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,char,boolean)>(v0, v1, 1);
return v2;
}
public static java.lang.String normalize(java.lang.String, boolean)
{
char v2;
java.lang.String v0, v3;
boolean v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: boolean;
if v1 == 0 goto label1;
v2 = 47;
goto label2;
label1:
v2 = 92;
label2:
v3 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,char,boolean)>(v0, v2, 1);
return v3;
}
public static java.lang.String normalizeNoEndSeparator(java.lang.String)
{
char v1;
java.lang.String v0, v2;
v0 := @parameter0: java.lang.String;
v1 = <org.apache.commons.io.FilenameUtils: char SYSTEM_SEPARATOR>;
v2 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,char,boolean)>(v0, v1, 0);
return v2;
}
public static java.lang.String normalizeNoEndSeparator(java.lang.String, boolean)
{
char v2;
java.lang.String v0, v3;
boolean v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: boolean;
if v1 == 0 goto label1;
v2 = 47;
goto label2;
label1:
v2 = 92;
label2:
v3 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,char,boolean)>(v0, v2, 0);
return v3;
}
private static java.lang.String doNormalize(java.lang.String, char, boolean)
{
boolean v14, v2;
int v11, v12, v15, v17, v18, v19, v21, v23, v24, v25, v27, v29, v3, v30, v32, v33, v34, v35, v36, v38, v4, v40, v42, v43, v45, v46, v47, v49, v5, v50, v51, v52, v53, v54, v55, v56, v60, v7;
java.lang.String v0, v57, v58, v59;
char v1, v10, v13, v16, v20, v22, v26, v28, v31, v37, v39, v41, v44, v48, v8, v9;
char[] v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: char;
v2 := @parameter2: boolean;
if v0 != null goto label01;
return null;
label01:
staticinvoke <org.apache.commons.io.FilenameUtils: void requireNonNullChars(java.lang.String)>(v0);
v3 = virtualinvoke v0.<java.lang.String: int length()>();
if v3 != 0 goto label02;
return v0;
label02:
v4 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(v0);
if v4 >= 0 goto label03;
return null;
label03:
v5 = v3 + 2;
v6 = newarray (char)[v5];
v7 = virtualinvoke v0.<java.lang.String: int length()>();
virtualinvoke v0.<java.lang.String: void getChars(int,int,char[],int)>(0, v7, v6, 0);
v8 = <org.apache.commons.io.FilenameUtils: char SYSTEM_SEPARATOR>;
if v1 != v8 goto label04;
v9 = <org.apache.commons.io.FilenameUtils: char OTHER_SEPARATOR>;
goto label05;
label04:
v9 = <org.apache.commons.io.FilenameUtils: char SYSTEM_SEPARATOR>;
label05:
v10 = v9;
v11 = 0;
label06:
v12 = lengthof v6;
if v11 >= v12 goto label08;
v13 = v6[v11];
if v13 != v10 goto label07;
v6[v11] = v1;
label07:
v11 = v11 + 1;
goto label06;
label08:
v14 = 1;
v15 = v3 - 1;
v16 = v6[v15];
if v16 == v1 goto label09;
v17 = v3;
v3 = v3 + 1;
v6[v17] = v1;
v14 = 0;
label09:
if v4 == 0 goto label10;
v18 = v4;
goto label11;
label10:
v18 = 1;
label11:
v19 = v18;
label12:
if v19 >= v3 goto label14;
v20 = v6[v19];
if v20 != v1 goto label13;
v21 = v19 - 1;
v22 = v6[v21];
if v22 != v1 goto label13;
v23 = v19 - 1;
v24 = v3 - v19;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v6, v19, v6, v23, v24);
v3 = v3 - 1;
v19 = v19 - 1;
label13:
v19 = v19 + 1;
goto label12;
label14:
v25 = v4 + 1;
label15:
if v25 >= v3 goto label19;
v26 = v6[v25];
if v26 != v1 goto label18;
v27 = v25 - 1;
v28 = v6[v27];
if v28 != 46 goto label18;
v29 = v4 + 1;
if v25 == v29 goto label16;
v30 = v25 - 2;
v31 = v6[v30];
if v31 != v1 goto label18;
label16:
v32 = v3 - 1;
if v25 != v32 goto label17;
v14 = 1;
label17:
v33 = v25 + 1;
v34 = v25 - 1;
v35 = v3 - v25;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v6, v33, v6, v34, v35);
v3 = v3 - 2;
v25 = v25 - 1;
label18:
v25 = v25 + 1;
goto label15;
label19:
v36 = v4 + 2;
label20:
if v36 >= v3 goto label28;
v37 = v6[v36];
if v37 != v1 goto label27;
v38 = v36 - 1;
v39 = v6[v38];
if v39 != 46 goto label27;
v40 = v36 - 2;
v41 = v6[v40];
if v41 != 46 goto label27;
v42 = v4 + 2;
if v36 == v42 goto label21;
v43 = v36 - 3;
v44 = v6[v43];
if v44 != v1 goto label27;
label21:
v45 = v4 + 2;
if v36 != v45 goto label22;
return null;
label22:
v46 = v3 - 1;
if v36 != v46 goto label23;
v14 = 1;
label23:
v47 = v36 - 4;
label24:
if v47 < v4 goto label26;
v48 = v6[v47];
if v48 != v1 goto label25;
v49 = v36 + 1;
v50 = v47 + 1;
v51 = v3 - v36;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v6, v49, v6, v50, v51);
v52 = v36 - v47;
v3 = v3 - v52;
v36 = v47 + 1;
goto label27;
label25:
v47 = v47 - 1;
goto label24;
label26:
v53 = v36 + 1;
v54 = v3 - v36;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v6, v53, v6, v4, v54);
v55 = v36 + 1;
v56 = v55 - v4;
v3 = v3 - v56;
v36 = v4 + 1;
label27:
v36 = v36 + 1;
goto label20;
label28:
if v3 > 0 goto label29;
return "";
label29:
if v3 > v4 goto label30;
v57 = new java.lang.String;
specialinvoke v57.<java.lang.String: void <init>(char[],int,int)>(v6, 0, v3);
return v57;
label30:
if v14 == 0 goto label31;
if v2 == 0 goto label31;
v58 = new java.lang.String;
specialinvoke v58.<java.lang.String: void <init>(char[],int,int)>(v6, 0, v3);
return v58;
label31:
v59 = new java.lang.String;
v60 = v3 - 1;
specialinvoke v59.<java.lang.String: void <init>(char[],int,int)>(v6, 0, v60);
return v59;
}
public static java.lang.String concat(java.lang.String, java.lang.String)
{
char v7;
int v2, v4, v6;
java.lang.String v0, v1, v10, v11, v12, v3, v5, v9;
boolean v8;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(v1);
if v2 >= 0 goto label1;
return null;
label1:
if v2 <= 0 goto label2;
v3 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(v1);
return v3;
label2:
if v0 != null goto label3;
return null;
label3:
v4 = virtualinvoke v0.<java.lang.String: int length()>();
if v4 != 0 goto label4;
v5 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(v1);
return v5;
label4:
v6 = v4 - 1;
v7 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v6);
v8 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>(v7);
if v8 == 0 goto label5;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
v10 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(v9);
return v10;
label5:
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/\u0001");
v12 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(v11);
return v12;
}
public static boolean directoryContains(java.lang.String, java.lang.String)
{
org.apache.commons.io.IOCase v2, v4;
java.lang.String v0, v1;
boolean v3, v5;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v0, "canonicalParent");
if v1 != null goto label1;
return 0;
label1:
v2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM>;
v3 = virtualinvoke v2.<org.apache.commons.io.IOCase: boolean checkEquals(java.lang.String,java.lang.String)>(v0, v1);
if v3 == 0 goto label2;
return 0;
label2:
v4 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM>;
v5 = virtualinvoke v4.<org.apache.commons.io.IOCase: boolean checkStartsWith(java.lang.String,java.lang.String)>(v1, v0);
return v5;
}
public static java.lang.String separatorsToUnix(java.lang.String)
{
int v1, v2;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
if v0 == null goto label1;
v1 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(92);
v2 = (int) -1;
if v1 != v2 goto label2;
label1:
return v0;
label2:
v3 = virtualinvoke v0.<java.lang.String: java.lang.String replace(char,char)>(92, 47);
return v3;
}
public static java.lang.String separatorsToWindows(java.lang.String)
{
int v1, v2;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
if v0 == null goto label1;
v1 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(47);
v2 = (int) -1;
if v1 != v2 goto label2;
label1:
return v0;
label2:
v3 = virtualinvoke v0.<java.lang.String: java.lang.String replace(char,char)>(47, 92);
return v3;
}
public static java.lang.String separatorsToSystem(java.lang.String)
{
java.lang.String v0, v2;
boolean v1;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
return null;
label1:
v1 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()>();
if v1 == 0 goto label2;
v2 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String separatorsToWindows(java.lang.String)>(v0);
goto label3;
label2:
v2 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String separatorsToUnix(java.lang.String)>(v0);
label3:
return v2;
}
public static int getPrefixLength(java.lang.String)
{
byte v29, v6;
boolean v22, v24, v26, v27, v28, v44, v5;
org.apache.commons.io.FileSystem v21;
int v1, v10, v11, v12, v13, v14, v15, v16, v17, v18, v2, v25, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v4, v40, v41, v42, v45, v46, v7, v8, v9;
java.lang.String v0, v43;
char v19, v20, v23, v3;
v0 := @parameter0: java.lang.String;
if v0 != null goto label01;
v1 = (int) -1;
return v1;
label01:
v2 = virtualinvoke v0.<java.lang.String: int length()>();
if v2 != 0 goto label02;
return 0;
label02:
v3 = virtualinvoke v0.<java.lang.String: char charAt(int)>(0);
if v3 != 58 goto label03;
v4 = (int) -1;
return v4;
label03:
if v2 != 1 goto label07;
if v3 != 126 goto label04;
return 2;
label04:
v5 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>(v3);
if v5 == 0 goto label05;
v6 = 1;
goto label06;
label05:
v6 = 0;
label06:
return v6;
label07:
if v3 != 126 goto label13;
v7 = virtualinvoke v0.<java.lang.String: int indexOf(int,int)>(47, 1);
v8 = virtualinvoke v0.<java.lang.String: int indexOf(int,int)>(92, 1);
v9 = (int) -1;
if v7 != v9 goto label08;
v10 = (int) -1;
if v8 != v10 goto label08;
v11 = v2 + 1;
return v11;
label08:
v12 = (int) -1;
if v7 != v12 goto label09;
v13 = v8;
goto label10;
label09:
v13 = v7;
label10:
v14 = v13;
v15 = (int) -1;
if v8 != v15 goto label11;
v16 = v13;
goto label12;
label11:
v16 = v8;
label12:
v17 = staticinvoke <java.lang.Math: int min(int,int)>(v14, v16);
v18 = v17 + 1;
return v18;
label13:
v19 = virtualinvoke v0.<java.lang.String: char charAt(int)>(1);
if v19 != 58 goto label19;
v20 = staticinvoke <java.lang.Character: char toUpperCase(char)>(v3);
if v20 < 65 goto label17;
if v20 > 90 goto label17;
if v2 != 2 goto label14;
v21 = staticinvoke <org.apache.commons.io.FileSystem: org.apache.commons.io.FileSystem getCurrent()>();
v22 = virtualinvoke v21.<org.apache.commons.io.FileSystem: boolean supportsDriveLetter()>();
if v22 != 0 goto label14;
return 0;
label14:
if v2 == 2 goto label15;
v23 = virtualinvoke v0.<java.lang.String: char charAt(int)>(2);
v24 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>(v23);
if v24 != 0 goto label16;
label15:
return 2;
label16:
return 3;
label17:
if v20 != 47 goto label18;
return 1;
label18:
v25 = (int) -1;
return v25;
label19:
v26 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>(v3);
if v26 == 0 goto label20;
v27 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>(v19);
if v27 != 0 goto label23;
label20:
v28 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>(v3);
if v28 == 0 goto label21;
v29 = 1;
goto label22;
label21:
v29 = 0;
label22:
return v29;
label23:
v30 = virtualinvoke v0.<java.lang.String: int indexOf(int,int)>(47, 2);
v31 = virtualinvoke v0.<java.lang.String: int indexOf(int,int)>(92, 2);
v32 = (int) -1;
if v30 != v32 goto label24;
v33 = (int) -1;
if v31 == v33 goto label25;
label24:
if v30 == 2 goto label25;
if v31 != 2 goto label26;
label25:
v34 = (int) -1;
return v34;
label26:
v35 = (int) -1;
if v30 != v35 goto label27;
v36 = v31;
goto label28;
label27:
v36 = v30;
label28:
v37 = v36;
v38 = (int) -1;
if v31 != v38 goto label29;
v39 = v36;
goto label30;
label29:
v39 = v31;
label30:
v40 = staticinvoke <java.lang.Math: int min(int,int)>(v37, v39);
v41 = v40 + 1;
v42 = v41 - 1;
v43 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(2, v42);
v44 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isValidHostName(java.lang.String)>(v43);
if v44 == 0 goto label31;
v45 = v41;
goto label32;
label31:
v46 = (int) -1;
v45 = v46;
label32:
return v45;
}
public static int indexOfLastSeparator(java.lang.String)
{
int v1, v2, v3, v4;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
v1 = (int) -1;
return v1;
label1:
v2 = virtualinvoke v0.<java.lang.String: int lastIndexOf(int)>(47);
v3 = virtualinvoke v0.<java.lang.String: int lastIndexOf(int)>(92);
v4 = staticinvoke <java.lang.Math: int max(int,int)>(v2, v3);
return v4;
}
public static int indexOfExtension(java.lang.String) throws java.lang.IllegalArgumentException
{
java.lang.IllegalArgumentException v6;
int v1, v10, v3, v4, v5, v7, v8, v9;
java.lang.String v0;
boolean v2;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
v1 = (int) -1;
return v1;
label1:
v2 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()>();
if v2 == 0 goto label2;
v3 = staticinvoke <org.apache.commons.io.FilenameUtils: int getAdsCriticalOffset(java.lang.String)>(v0);
v4 = virtualinvoke v0.<java.lang.String: int indexOf(int,int)>(58, v3);
v5 = (int) -1;
if v4 == v5 goto label2;
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("NTFS ADS separator (\':\') in file name is forbidden.");
throw v6;
label2:
v7 = virtualinvoke v0.<java.lang.String: int lastIndexOf(int)>(46);
v8 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)>(v0);
if v8 <= v7 goto label3;
v9 = (int) -1;
v10 = v9;
goto label4;
label3:
v10 = v7;
label4:
return v10;
}
public static java.lang.String getPrefix(java.lang.String)
{
int v1, v2;
java.lang.String v0, v3, v4, v5;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
return null;
label1:
v1 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(v0);
if v1 >= 0 goto label2;
return null;
label2:
v2 = virtualinvoke v0.<java.lang.String: int length()>();
if v1 <= v2 goto label3;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/");
staticinvoke <org.apache.commons.io.FilenameUtils: void requireNonNullChars(java.lang.String)>(v3);
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/");
return v4;
label3:
v5 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v1);
staticinvoke <org.apache.commons.io.FilenameUtils: void requireNonNullChars(java.lang.String)>(v5);
return v5;
}
public static java.lang.String getPath(java.lang.String)
{
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doGetPath(java.lang.String,int)>(v0, 1);
return v1;
}
public static java.lang.String getPathNoEndSeparator(java.lang.String)
{
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doGetPath(java.lang.String,int)>(v0, 0);
return v1;
}
private static java.lang.String doGetPath(java.lang.String, int)
{
int v1, v2, v3, v4, v5;
java.lang.String v0, v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
if v0 != null goto label1;
return null;
label1:
v2 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(v0);
if v2 >= 0 goto label2;
return null;
label2:
v3 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)>(v0);
v4 = v3 + v1;
v5 = virtualinvoke v0.<java.lang.String: int length()>();
if v2 >= v5 goto label3;
if v3 < 0 goto label3;
if v2 < v4 goto label4;
label3:
return "";
label4:
v6 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v2, v4);
staticinvoke <org.apache.commons.io.FilenameUtils: void requireNonNullChars(java.lang.String)>(v6);
return v6;
}
public static java.lang.String getFullPath(java.lang.String)
{
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doGetFullPath(java.lang.String,boolean)>(v0, 1);
return v1;
}
public static java.lang.String getFullPathNoEndSeparator(java.lang.String)
{
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doGetFullPath(java.lang.String,boolean)>(v0, 0);
return v1;
}
private static java.lang.String doGetFullPath(java.lang.String, boolean)
{
int v2, v3, v5, v8;
java.lang.String v0, v4, v6, v9;
boolean v1, v7;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: boolean;
if v0 != null goto label1;
return null;
label1:
v2 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(v0);
if v2 >= 0 goto label2;
return null;
label2:
v3 = virtualinvoke v0.<java.lang.String: int length()>();
if v2 < v3 goto label4;
if v1 == 0 goto label3;
v4 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getPrefix(java.lang.String)>(v0);
return v4;
label3:
return v0;
label4:
v5 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)>(v0);
if v5 >= 0 goto label5;
v6 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v2);
return v6;
label5:
if v1 == 0 goto label6;
v7 = 1;
goto label7;
label6:
v7 = 0;
label7:
v8 = v5 + v7;
if v8 != 0 goto label8;
v8 = v8 + 1;
label8:
v9 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v8);
return v9;
}
public static java.lang.String getName(java.lang.String)
{
int v1, v2;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
return null;
label1:
staticinvoke <org.apache.commons.io.FilenameUtils: void requireNonNullChars(java.lang.String)>(v0);
v1 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)>(v0);
v2 = v1 + 1;
v3 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v2);
return v3;
}
private static void requireNonNullChars(java.lang.String)
{
int v1;
java.lang.String v0;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(0);
if v1 < 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null byte present in file/path name. There are no known legitimate use cases for such data, but several injection attacks may use it");
throw v2;
label1:
return;
}
public static java.lang.String getBaseName(java.lang.String)
{
java.lang.String v0, v1, v2;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getName(java.lang.String)>(v0);
v2 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String removeExtension(java.lang.String)>(v1);
return v2;
}
public static java.lang.String getExtension(java.lang.String) throws java.lang.IllegalArgumentException
{
int v1, v2, v3;
java.lang.String v0, v4;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
return null;
label1:
v1 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>(v0);
v2 = (int) -1;
if v1 != v2 goto label2;
return "";
label2:
v3 = v1 + 1;
v4 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v3);
return v4;
}
private static int getAdsCriticalOffset(java.lang.String)
{
char v1, v3;
int v10, v11, v2, v4, v5, v6, v7, v8, v9;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = <org.apache.commons.io.FilenameUtils: char SYSTEM_SEPARATOR>;
v2 = virtualinvoke v0.<java.lang.String: int lastIndexOf(int)>(v1);
v3 = <org.apache.commons.io.FilenameUtils: char OTHER_SEPARATOR>;
v4 = virtualinvoke v0.<java.lang.String: int lastIndexOf(int)>(v3);
v5 = (int) -1;
if v2 != v5 goto label2;
v6 = (int) -1;
if v4 != v6 goto label1;
return 0;
label1:
v7 = v4 + 1;
return v7;
label2:
v8 = (int) -1;
if v4 != v8 goto label3;
v9 = v2 + 1;
return v9;
label3:
v10 = staticinvoke <java.lang.Math: int max(int,int)>(v2, v4);
v11 = v10 + 1;
return v11;
}
public static java.lang.String removeExtension(java.lang.String)
{
int v1, v2;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
return null;
label1:
staticinvoke <org.apache.commons.io.FilenameUtils: void requireNonNullChars(java.lang.String)>(v0);
v1 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>(v0);
v2 = (int) -1;
if v1 != v2 goto label2;
return v0;
label2:
v3 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v1);
return v3;
}
public static boolean equals(java.lang.String, java.lang.String)
{
org.apache.commons.io.IOCase v2;
java.lang.String v0, v1;
boolean v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE>;
v3 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>(v0, v1, 0, v2);
return v3;
}
public static boolean equalsOnSystem(java.lang.String, java.lang.String)
{
org.apache.commons.io.IOCase v2;
java.lang.String v0, v1;
boolean v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM>;
v3 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>(v0, v1, 0, v2);
return v3;
}
public static boolean equalsNormalized(java.lang.String, java.lang.String)
{
org.apache.commons.io.IOCase v2;
java.lang.String v0, v1;
boolean v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE>;
v3 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>(v0, v1, 1, v2);
return v3;
}
public static boolean equalsNormalizedOnSystem(java.lang.String, java.lang.String)
{
org.apache.commons.io.IOCase v2;
java.lang.String v0, v1;
boolean v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM>;
v3 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>(v0, v1, 1, v2);
return v3;
}
public static boolean equals(java.lang.String, java.lang.String, boolean, org.apache.commons.io.IOCase)
{
org.apache.commons.io.IOCase v3;
java.lang.String v0, v1;
boolean v2, v4, v5;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: boolean;
v3 := @parameter3: org.apache.commons.io.IOCase;
if v0 == null goto label1;
if v1 != null goto label4;
label1:
if v0 != null goto label2;
if v1 != null goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
label4:
if v2 == 0 goto label6;
v0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(v0);
if v0 != null goto label5;
return 0;
label5:
v1 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(v1);
if v1 != null goto label6;
return 0;
label6:
if v3 != null goto label7;
v3 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE>;
label7:
v5 = virtualinvoke v3.<org.apache.commons.io.IOCase: boolean checkEquals(java.lang.String,java.lang.String)>(v0, v1);
return v5;
}
public static boolean isExtension(java.lang.String, java.lang.String)
{
int v3, v4;
java.lang.String v0, v1, v6;
boolean v2, v5, v7;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
return 0;
label1:
staticinvoke <org.apache.commons.io.FilenameUtils: void requireNonNullChars(java.lang.String)>(v0);
if v1 == null goto label2;
v2 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v2 == 0 goto label5;
label2:
v3 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>(v0);
v4 = (int) -1;
if v3 != v4 goto label3;
v5 = 1;
goto label4;
label3:
v5 = 0;
label4:
return v5;
label5:
v6 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)>(v0);
v7 = virtualinvoke v6.<java.lang.String: boolean equals(java.lang.Object)>(v1);
return v7;
}
public static transient boolean isExtension(java.lang.String, java.lang.String[])
{
java.lang.String[] v1;
int v2, v3, v4, v7, v8;
java.lang.String v0, v6, v9;
boolean v10, v5;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String[];
if v0 != null goto label1;
return 0;
label1:
staticinvoke <org.apache.commons.io.FilenameUtils: void requireNonNullChars(java.lang.String)>(v0);
if v1 == null goto label2;
v2 = lengthof v1;
if v2 != 0 goto label5;
label2:
v3 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>(v0);
v4 = (int) -1;
if v3 != v4 goto label3;
v5 = 1;
goto label4;
label3:
v5 = 0;
label4:
return v5;
label5:
v6 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)>(v0);
v7 = lengthof v1;
v8 = 0;
label6:
if v8 >= v7 goto label8;
v9 = v1[v8];
v10 = virtualinvoke v6.<java.lang.String: boolean equals(java.lang.Object)>(v9);
if v10 == 0 goto label7;
return 1;
label7:
v8 = v8 + 1;
goto label6;
label8:
return 0;
}
public static boolean isExtension(java.lang.String, java.util.Collection)
{
java.util.Iterator v7;
java.util.Collection v1;
int v3, v4;
java.lang.Object v9;
java.lang.String v0, v6;
boolean v10, v2, v5, v8;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.util.Collection;
if v0 != null goto label1;
return 0;
label1:
staticinvoke <org.apache.commons.io.FilenameUtils: void requireNonNullChars(java.lang.String)>(v0);
if v1 == null goto label2;
v2 = interfaceinvoke v1.<java.util.Collection: boolean isEmpty()>();
if v2 == 0 goto label5;
label2:
v3 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>(v0);
v4 = (int) -1;
if v3 != v4 goto label3;
v5 = 1;
goto label4;
label3:
v5 = 0;
label4:
return v5;
label5:
v6 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)>(v0);
v7 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
label6:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label7;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = virtualinvoke v6.<java.lang.String: boolean equals(java.lang.Object)>(v9);
if v10 == 0 goto label6;
return 1;
label7:
return 0;
}
public static boolean wildcardMatch(java.lang.String, java.lang.String)
{
org.apache.commons.io.IOCase v2;
java.lang.String v0, v1;
boolean v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE>;
v3 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)>(v0, v1, v2);
return v3;
}
public static boolean wildcardMatchOnSystem(java.lang.String, java.lang.String)
{
org.apache.commons.io.IOCase v2;
java.lang.String v0, v1;
boolean v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM>;
v3 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)>(v0, v1, v2);
return v3;
}
public static boolean wildcardMatch(java.lang.String, java.lang.String, org.apache.commons.io.IOCase)
{
int[] v24;
boolean v13, v16, v26, v31, v4, v9;
org.apache.commons.io.IOCase v2;
java.lang.String[] v3;
int v11, v14, v17, v18, v20, v21, v23, v28, v29, v30, v5, v6, v8;
java.lang.String v0, v1, v12, v15, v19, v22, v25, v27;
java.lang.Object v10;
java.util.ArrayDeque v7;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: org.apache.commons.io.IOCase;
if v0 != null goto label01;
if v1 != null goto label01;
return 1;
label01:
if v0 == null goto label02;
if v1 != null goto label03;
label02:
return 0;
label03:
if v2 != null goto label04;
v2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE>;
label04:
v3 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)>(v1);
v4 = 0;
v5 = 0;
v6 = 0;
v7 = new java.util.ArrayDeque;
v8 = lengthof v3;
specialinvoke v7.<java.util.ArrayDeque: void <init>(int)>(v8);
label05:
v9 = interfaceinvoke v7.<java.util.Deque: boolean isEmpty()>();
if v9 != 0 goto label06;
v10 = interfaceinvoke v7.<java.util.Deque: java.lang.Object pop()>();
v6 = v10[0];
v5 = v10[1];
v4 = 1;
label06:
v11 = lengthof v3;
if v6 >= v11 goto label12;
v12 = v3[v6];
v13 = virtualinvoke v12.<java.lang.String: boolean equals(java.lang.Object)>("?");
if v13 == 0 goto label07;
v5 = v5 + 1;
v14 = virtualinvoke v0.<java.lang.String: int length()>();
if v5 > v14 goto label12;
v4 = 0;
goto label11;
label07:
v15 = v3[v6];
v16 = virtualinvoke v15.<java.lang.String: boolean equals(java.lang.Object)>("*");
if v16 == 0 goto label08;
v4 = 1;
v17 = lengthof v3;
v18 = v17 - 1;
if v6 != v18 goto label11;
v5 = virtualinvoke v0.<java.lang.String: int length()>();
goto label11;
label08:
if v4 == 0 goto label09;
v19 = v3[v6];
v5 = virtualinvoke v2.<org.apache.commons.io.IOCase: int checkIndexOf(java.lang.String,int,java.lang.String)>(v0, v5, v19);
v20 = (int) -1;
if v5 == v20 goto label12;
v21 = v5 + 1;
v22 = v3[v6];
v23 = virtualinvoke v2.<org.apache.commons.io.IOCase: int checkIndexOf(java.lang.String,int,java.lang.String)>(v0, v21, v22);
if v23 < 0 goto label10;
v24 = newarray (int)[2];
v24[0] = v6;
v24[1] = v23;
interfaceinvoke v7.<java.util.Deque: void push(java.lang.Object)>(v24);
goto label10;
label09:
v25 = v3[v6];
v26 = virtualinvoke v2.<org.apache.commons.io.IOCase: boolean checkRegionMatches(java.lang.String,int,java.lang.String)>(v0, v5, v25);
if v26 == 0 goto label12;
label10:
v27 = v3[v6];
v28 = virtualinvoke v27.<java.lang.String: int length()>();
v5 = v5 + v28;
v4 = 0;
label11:
v6 = v6 + 1;
goto label06;
label12:
v29 = lengthof v3;
if v6 != v29 goto label13;
v30 = virtualinvoke v0.<java.lang.String: int length()>();
if v5 != v30 goto label13;
return 1;
label13:
v31 = interfaceinvoke v7.<java.util.Deque: boolean isEmpty()>();
if v31 == 0 goto label05;
return 0;
}
static java.lang.String[] splitOnTokens(java.lang.String)
{
java.lang.Object[] v18;
java.lang.String[] v17, v5;
java.util.ArrayList v7;
int v1, v10, v11, v13, v15, v2, v3, v4, v9;
java.lang.String v0, v14, v16;
char v12;
char[] v6;
java.lang.StringBuilder v8;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(63);
v2 = (int) -1;
if v1 != v2 goto label1;
v3 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(42);
v4 = (int) -1;
if v3 != v4 goto label1;
v5 = newarray (java.lang.String)[1];
v5[0] = v0;
return v5;
label1:
v6 = virtualinvoke v0.<java.lang.String: char[] toCharArray()>();
v7 = new java.util.ArrayList;
specialinvoke v7.<java.util.ArrayList: void <init>()>();
v8 = new java.lang.StringBuilder;
specialinvoke v8.<java.lang.StringBuilder: void <init>()>();
v9 = 0;
v10 = lengthof v6;
v11 = 0;
label2:
if v11 >= v10 goto label8;
v12 = v6[v11];
if v12 == 63 goto label3;
if v12 != 42 goto label6;
label3:
v13 = virtualinvoke v8.<java.lang.StringBuilder: int length()>();
if v13 == 0 goto label4;
v14 = virtualinvoke v8.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke v7.<java.util.ArrayList: boolean add(java.lang.Object)>(v14);
virtualinvoke v8.<java.lang.StringBuilder: void setLength(int)>(0);
label4:
if v12 != 63 goto label5;
virtualinvoke v7.<java.util.ArrayList: boolean add(java.lang.Object)>("?");
goto label7;
label5:
if v9 == 42 goto label7;
virtualinvoke v7.<java.util.ArrayList: boolean add(java.lang.Object)>("*");
goto label7;
label6:
virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v12);
label7:
v9 = v12;
v11 = v11 + 1;
goto label2;
label8:
v15 = virtualinvoke v8.<java.lang.StringBuilder: int length()>();
if v15 == 0 goto label9;
v16 = virtualinvoke v8.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke v7.<java.util.ArrayList: boolean add(java.lang.Object)>(v16);
label9:
v17 = <org.apache.commons.io.FilenameUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
v18 = virtualinvoke v7.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(v17);
return v18;
}
private static boolean isValidHostName(java.lang.String)
{
java.lang.String v0;
boolean v1, v2, v3;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isIPv6Address(java.lang.String)>(v0);
if v1 != 0 goto label1;
v2 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isRFC3986HostName(java.lang.String)>(v0);
if v2 == 0 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
private static boolean isIPv4Address(java.lang.String)
{
java.util.regex.Matcher v2;
int v4, v5, v7, v8;
java.lang.String v0, v6;
java.util.regex.Pattern v1;
boolean v3, v9;
v0 := @parameter0: java.lang.String;
v1 = <org.apache.commons.io.FilenameUtils: java.util.regex.Pattern IPV4_PATTERN>;
v2 = virtualinvoke v1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v0);
v3 = virtualinvoke v2.<java.util.regex.Matcher: boolean matches()>();
if v3 == 0 goto label1;
v4 = virtualinvoke v2.<java.util.regex.Matcher: int groupCount()>();
if v4 == 4 goto label2;
label1:
return 0;
label2:
v5 = 1;
label3:
if v5 > 4 goto label6;
v6 = virtualinvoke v2.<java.util.regex.Matcher: java.lang.String group(int)>(v5);
v7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v6);
if v7 <= 255 goto label4;
return 0;
label4:
v8 = virtualinvoke v6.<java.lang.String: int length()>();
if v8 <= 1 goto label5;
v9 = virtualinvoke v6.<java.lang.String: boolean startsWith(java.lang.String)>("0");
if v9 == 0 goto label5;
return 0;
label5:
v5 = v5 + 1;
goto label3;
label6:
return 1;
}
private static boolean isIPv6Address(java.lang.String)
{
boolean v1, v11, v12, v13, v22, v25, v26, v31, v4, v5, v6, v7;
java.util.List v10;
java.lang.Object[] v15;
java.lang.String[] v14, v8;
java.util.ArrayList v9;
int v16, v17, v18, v19, v2, v20, v23, v24, v27, v28, v3, v30;
java.lang.String v0, v21;
java.lang.NumberFormatException v29;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: boolean contains(java.lang.CharSequence)>("::");
if v1 == 0 goto label01;
v2 = virtualinvoke v0.<java.lang.String: int indexOf(java.lang.String)>("::");
v3 = virtualinvoke v0.<java.lang.String: int lastIndexOf(java.lang.String)>("::");
if v2 == v3 goto label01;
return 0;
label01:
v4 = virtualinvoke v0.<java.lang.String: boolean startsWith(java.lang.String)>(":");
if v4 == 0 goto label02;
v5 = virtualinvoke v0.<java.lang.String: boolean startsWith(java.lang.String)>("::");
if v5 == 0 goto label03;
label02:
v6 = virtualinvoke v0.<java.lang.String: boolean endsWith(java.lang.String)>(":");
if v6 == 0 goto label04;
v7 = virtualinvoke v0.<java.lang.String: boolean endsWith(java.lang.String)>("::");
if v7 != 0 goto label04;
label03:
return 0;
label04:
v8 = virtualinvoke v0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");
if v1 == 0 goto label07;
v9 = new java.util.ArrayList;
v10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v8);
specialinvoke v9.<java.util.ArrayList: void <init>(java.util.Collection)>(v10);
v11 = virtualinvoke v0.<java.lang.String: boolean endsWith(java.lang.String)>("::");
if v11 == 0 goto label05;
interfaceinvoke v9.<java.util.List: boolean add(java.lang.Object)>("");
goto label06;
label05:
v12 = virtualinvoke v0.<java.lang.String: boolean startsWith(java.lang.String)>("::");
if v12 == 0 goto label06;
v13 = interfaceinvoke v9.<java.util.List: boolean isEmpty()>();
if v13 != 0 goto label06;
interfaceinvoke v9.<java.util.List: java.lang.Object remove(int)>(0);
label06:
v14 = <org.apache.commons.io.FilenameUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
v15 = interfaceinvoke v9.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v14);
label07:
v16 = lengthof v15;
if v16 <= 8 goto label08;
return 0;
label08:
v17 = 0;
v18 = 0;
v19 = 0;
label09:
v20 = lengthof v15;
if v19 >= v20 goto label20;
v21 = v15[v19];
v22 = virtualinvoke v21.<java.lang.String: boolean isEmpty()>();
if v22 == 0 goto label10;
v18 = v18 + 1;
if v18 <= 1 goto label18;
return 0;
label10:
v18 = 0;
v23 = lengthof v15;
v24 = v23 - 1;
if v19 != v24 goto label12;
v25 = virtualinvoke v21.<java.lang.String: boolean contains(java.lang.CharSequence)>(".");
if v25 == 0 goto label12;
v26 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isIPv4Address(java.lang.String)>(v21);
if v26 != 0 goto label11;
return 0;
label11:
v17 = v17 + 2;
goto label19;
label12:
v27 = virtualinvoke v21.<java.lang.String: int length()>();
if v27 <= 4 goto label13;
return 0;
label13:
v28 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(v21, 16);
label14:
goto label16;
label15:
v29 := @caughtexception;
return 0;
label16:
if v28 < 0 goto label17;
v30 = (int) 65535;
if v28 <= v30 goto label18;
label17:
return 0;
label18:
v17 = v17 + 1;
label19:
v19 = v19 + 1;
goto label09;
label20:
if v17 > 8 goto label22;
if v17 >= 8 goto label21;
if v1 == 0 goto label22;
label21:
v31 = 1;
goto label23;
label22:
v31 = 0;
label23:
return v31;
catch java.lang.NumberFormatException from label13 to label14 with label15;
}
private static boolean isRFC3986HostName(java.lang.String)
{
java.lang.String[] v2;
java.util.regex.Matcher v12;
int v1, v3, v4, v7, v8;
java.lang.String v0, v11, v5;
java.util.regex.Pattern v10;
boolean v13, v6, v9;
v0 := @parameter0: java.lang.String;
v1 = (int) -1;
v2 = virtualinvoke v0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\.", v1);
v3 = 0;
label1:
v4 = lengthof v2;
if v3 >= v4 goto label6;
v5 = v2[v3];
v6 = virtualinvoke v5.<java.lang.String: boolean isEmpty()>();
if v6 == 0 goto label4;
v7 = lengthof v2;
v8 = v7 - 1;
if v3 != v8 goto label2;
v9 = 1;
goto label3;
label2:
v9 = 0;
label3:
return v9;
label4:
v10 = <org.apache.commons.io.FilenameUtils: java.util.regex.Pattern REG_NAME_PART_PATTERN>;
v11 = v2[v3];
v12 = virtualinvoke v10.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v11);
v13 = virtualinvoke v12.<java.util.regex.Matcher: boolean matches()>();
if v13 != 0 goto label5;
return 0;
label5:
v3 = v3 + 1;
goto label1;
label6:
return 1;
}
static void <clinit>()
{
char v2;
java.lang.String[] v0;
java.lang.String v1;
java.util.regex.Pattern v4, v5;
boolean v3;
v0 = newarray (java.lang.String)[0];
<org.apache.commons.io.FilenameUtils: java.lang.String[] EMPTY_STRING_ARRAY> = v0;
v1 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(46);
<org.apache.commons.io.FilenameUtils: java.lang.String EXTENSION_SEPARATOR_STR> = v1;
v2 = <java.io.File: char separatorChar>;
<org.apache.commons.io.FilenameUtils: char SYSTEM_SEPARATOR> = v2;
v3 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()>();
if v3 == 0 goto label1;
<org.apache.commons.io.FilenameUtils: char OTHER_SEPARATOR> = 47;
goto label2;
label1:
<org.apache.commons.io.FilenameUtils: char OTHER_SEPARATOR> = 92;
label2:
v4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$");
<org.apache.commons.io.FilenameUtils: java.util.regex.Pattern IPV4_PATTERN> = v4;
v5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[a-zA-Z0-9][a-zA-Z0-9-]*$");
<org.apache.commons.io.FilenameUtils: java.util.regex.Pattern REG_NAME_PART_PATTERN> = v5;
return;
}
}