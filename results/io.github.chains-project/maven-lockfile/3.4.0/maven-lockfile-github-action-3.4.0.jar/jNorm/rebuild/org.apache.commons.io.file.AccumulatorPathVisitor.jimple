public class org.apache.commons.io.file.AccumulatorPathVisitor extends org.apache.commons.io.file.CountingPathVisitor
{
private final java.util.List dirList;
private final java.util.List fileList;
public static org.apache.commons.io.file.AccumulatorPathVisitor withBigIntegerCounters()
{
org.apache.commons.io.file.Counters$PathCounters v1;
org.apache.commons.io.file.AccumulatorPathVisitor v0;
v0 = new org.apache.commons.io.file.AccumulatorPathVisitor;
v1 = staticinvoke <org.apache.commons.io.file.Counters: org.apache.commons.io.file.Counters$PathCounters bigIntegerPathCounters()>();
specialinvoke v0.<org.apache.commons.io.file.AccumulatorPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters)>(v1);
return v0;
}
public static org.apache.commons.io.file.AccumulatorPathVisitor withBigIntegerCounters(org.apache.commons.io.file.PathFilter, org.apache.commons.io.file.PathFilter)
{
org.apache.commons.io.file.Counters$PathCounters v3;
org.apache.commons.io.file.PathFilter v0, v1;
org.apache.commons.io.file.AccumulatorPathVisitor v2;
v0 := @parameter0: org.apache.commons.io.file.PathFilter;
v1 := @parameter1: org.apache.commons.io.file.PathFilter;
v2 = new org.apache.commons.io.file.AccumulatorPathVisitor;
v3 = staticinvoke <org.apache.commons.io.file.Counters: org.apache.commons.io.file.Counters$PathCounters bigIntegerPathCounters()>();
specialinvoke v2.<org.apache.commons.io.file.AccumulatorPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters,org.apache.commons.io.file.PathFilter,org.apache.commons.io.file.PathFilter)>(v3, v0, v1);
return v2;
}
public static org.apache.commons.io.file.AccumulatorPathVisitor withLongCounters()
{
org.apache.commons.io.file.Counters$PathCounters v1;
org.apache.commons.io.file.AccumulatorPathVisitor v0;
v0 = new org.apache.commons.io.file.AccumulatorPathVisitor;
v1 = staticinvoke <org.apache.commons.io.file.Counters: org.apache.commons.io.file.Counters$PathCounters longPathCounters()>();
specialinvoke v0.<org.apache.commons.io.file.AccumulatorPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters)>(v1);
return v0;
}
public static org.apache.commons.io.file.AccumulatorPathVisitor withLongCounters(org.apache.commons.io.file.PathFilter, org.apache.commons.io.file.PathFilter)
{
org.apache.commons.io.file.Counters$PathCounters v3;
org.apache.commons.io.file.PathFilter v0, v1;
org.apache.commons.io.file.AccumulatorPathVisitor v2;
v0 := @parameter0: org.apache.commons.io.file.PathFilter;
v1 := @parameter1: org.apache.commons.io.file.PathFilter;
v2 = new org.apache.commons.io.file.AccumulatorPathVisitor;
v3 = staticinvoke <org.apache.commons.io.file.Counters: org.apache.commons.io.file.Counters$PathCounters longPathCounters()>();
specialinvoke v2.<org.apache.commons.io.file.AccumulatorPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters,org.apache.commons.io.file.PathFilter,org.apache.commons.io.file.PathFilter)>(v3, v0, v1);
return v2;
}
public void <init>()
{
org.apache.commons.io.file.Counters$PathCounters v1;
org.apache.commons.io.file.AccumulatorPathVisitor v0;
java.util.ArrayList v2, v3;
v0 := @this: org.apache.commons.io.file.AccumulatorPathVisitor;
v1 = staticinvoke <org.apache.commons.io.file.Counters: org.apache.commons.io.file.Counters$PathCounters noopPathCounters()>();
specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters)>(v1);
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v0.<org.apache.commons.io.file.AccumulatorPathVisitor: java.util.List dirList> = v2;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v0.<org.apache.commons.io.file.AccumulatorPathVisitor: java.util.List fileList> = v3;
return;
}
public void <init>(org.apache.commons.io.file.Counters$PathCounters)
{
org.apache.commons.io.file.Counters$PathCounters v1;
org.apache.commons.io.file.AccumulatorPathVisitor v0;
java.util.ArrayList v2, v3;
v0 := @this: org.apache.commons.io.file.AccumulatorPathVisitor;
v1 := @parameter0: org.apache.commons.io.file.Counters$PathCounters;
specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters)>(v1);
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v0.<org.apache.commons.io.file.AccumulatorPathVisitor: java.util.List dirList> = v2;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v0.<org.apache.commons.io.file.AccumulatorPathVisitor: java.util.List fileList> = v3;
return;
}
public void <init>(org.apache.commons.io.file.Counters$PathCounters, org.apache.commons.io.file.PathFilter, org.apache.commons.io.file.PathFilter)
{
org.apache.commons.io.file.Counters$PathCounters v1;
org.apache.commons.io.file.PathFilter v2, v3;
org.apache.commons.io.file.AccumulatorPathVisitor v0;
java.util.ArrayList v4, v5;
v0 := @this: org.apache.commons.io.file.AccumulatorPathVisitor;
v1 := @parameter0: org.apache.commons.io.file.Counters$PathCounters;
v2 := @parameter1: org.apache.commons.io.file.PathFilter;
v3 := @parameter2: org.apache.commons.io.file.PathFilter;
specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters,org.apache.commons.io.file.PathFilter,org.apache.commons.io.file.PathFilter)>(v1, v2, v3);
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
v0.<org.apache.commons.io.file.AccumulatorPathVisitor: java.util.List dirList> = v4;
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>()>();
v0.<org.apache.commons.io.file.AccumulatorPathVisitor: java.util.List fileList> = v5;
return;
}
private void add(java.util.List, java.nio.file.Path)
{
java.util.List v1;
java.nio.file.Path v2, v3;
org.apache.commons.io.file.AccumulatorPathVisitor v0;
v0 := @this: org.apache.commons.io.file.AccumulatorPathVisitor;
v1 := @parameter0: java.util.List;
v2 := @parameter1: java.nio.file.Path;
v3 = interfaceinvoke v2.<java.nio.file.Path: java.nio.file.Path normalize()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v3);
return;
}
public boolean equals(java.lang.Object)
{
java.util.List v4, v5, v7, v8;
java.lang.Object v1;
org.apache.commons.io.file.AccumulatorPathVisitor v0;
boolean v10, v2, v3, v6, v9;
v0 := @this: org.apache.commons.io.file.AccumulatorPathVisitor;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
v2 = specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: boolean equals(java.lang.Object)>(v1);
if v2 != 0 goto label2;
return 0;
label2:
v3 = v1 instanceof org.apache.commons.io.file.AccumulatorPathVisitor;
if v3 != 0 goto label3;
return 0;
label3:
v4 = v0.<org.apache.commons.io.file.AccumulatorPathVisitor: java.util.List dirList>;
v5 = v1.<org.apache.commons.io.file.AccumulatorPathVisitor: java.util.List dirList>;
v6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v4, v5);
if v6 == 0 goto label4;
v7 = v0.<org.apache.commons.io.file.AccumulatorPathVisitor: java.util.List fileList>;
v8 = v1.<org.apache.commons.io.file.AccumulatorPathVisitor: java.util.List fileList>;
v9 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v7, v8);
if v9 == 0 goto label4;
v10 = 1;
goto label5;
label4:
v10 = 0;
label5:
return v10;
}
public java.util.List getDirList()
{
java.util.List v1;
org.apache.commons.io.file.AccumulatorPathVisitor v0;
v0 := @this: org.apache.commons.io.file.AccumulatorPathVisitor;
v1 = v0.<org.apache.commons.io.file.AccumulatorPathVisitor: java.util.List dirList>;
return v1;
}
public java.util.List getFileList()
{
java.util.List v1;
org.apache.commons.io.file.AccumulatorPathVisitor v0;
v0 := @this: org.apache.commons.io.file.AccumulatorPathVisitor;
v1 = v0.<org.apache.commons.io.file.AccumulatorPathVisitor: java.util.List fileList>;
return v1;
}
public int hashCode()
{
java.lang.Object[] v3;
java.util.List v4, v5;
int v1, v2, v6, v7;
org.apache.commons.io.file.AccumulatorPathVisitor v0;
v0 := @this: org.apache.commons.io.file.AccumulatorPathVisitor;
v1 = specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: int hashCode()>();
v2 = 31 * v1;
v3 = newarray (java.lang.Object)[2];
v4 = v0.<org.apache.commons.io.file.AccumulatorPathVisitor: java.util.List dirList>;
v3[0] = v4;
v5 = v0.<org.apache.commons.io.file.AccumulatorPathVisitor: java.util.List fileList>;
v3[1] = v5;
v6 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>(v3);
v7 = v2 + v6;
return v7;
}
public java.util.List relativizeDirectories(java.nio.file.Path, boolean, java.util.Comparator)
{
java.util.List v4, v5;
java.util.Comparator v3;
java.nio.file.Path v1;
org.apache.commons.io.file.AccumulatorPathVisitor v0;
boolean v2;
v0 := @this: org.apache.commons.io.file.AccumulatorPathVisitor;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: boolean;
v3 := @parameter2: java.util.Comparator;
v4 = virtualinvoke v0.<org.apache.commons.io.file.AccumulatorPathVisitor: java.util.List getDirList()>();
v5 = staticinvoke <org.apache.commons.io.file.PathUtils: java.util.List relativize(java.util.Collection,java.nio.file.Path,boolean,java.util.Comparator)>(v4, v1, v2, v3);
return v5;
}
public java.util.List relativizeFiles(java.nio.file.Path, boolean, java.util.Comparator)
{
java.util.List v4, v5;
java.util.Comparator v3;
java.nio.file.Path v1;
org.apache.commons.io.file.AccumulatorPathVisitor v0;
boolean v2;
v0 := @this: org.apache.commons.io.file.AccumulatorPathVisitor;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: boolean;
v3 := @parameter2: java.util.Comparator;
v4 = virtualinvoke v0.<org.apache.commons.io.file.AccumulatorPathVisitor: java.util.List getFileList()>();
v5 = staticinvoke <org.apache.commons.io.file.PathUtils: java.util.List relativize(java.util.Collection,java.nio.file.Path,boolean,java.util.Comparator)>(v4, v1, v2, v3);
return v5;
}
protected void updateDirCounter(java.nio.file.Path, java.io.IOException)
{
java.util.List v3;
java.io.IOException v2;
java.nio.file.Path v1;
org.apache.commons.io.file.AccumulatorPathVisitor v0;
v0 := @this: org.apache.commons.io.file.AccumulatorPathVisitor;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.io.IOException;
specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: void updateDirCounter(java.nio.file.Path,java.io.IOException)>(v1, v2);
v3 = v0.<org.apache.commons.io.file.AccumulatorPathVisitor: java.util.List dirList>;
specialinvoke v0.<org.apache.commons.io.file.AccumulatorPathVisitor: void add(java.util.List,java.nio.file.Path)>(v3, v1);
return;
}
protected void updateFileCounters(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
{
java.util.List v3;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.Path v1;
org.apache.commons.io.file.AccumulatorPathVisitor v0;
v0 := @this: org.apache.commons.io.file.AccumulatorPathVisitor;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: void updateFileCounters(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>(v1, v2);
v3 = v0.<org.apache.commons.io.file.AccumulatorPathVisitor: java.util.List fileList>;
specialinvoke v0.<org.apache.commons.io.file.AccumulatorPathVisitor: void add(java.util.List,java.nio.file.Path)>(v3, v1);
return;
}
}