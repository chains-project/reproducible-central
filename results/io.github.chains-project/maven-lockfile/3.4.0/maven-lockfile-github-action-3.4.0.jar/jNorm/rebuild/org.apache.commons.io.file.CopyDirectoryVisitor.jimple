public class org.apache.commons.io.file.CopyDirectoryVisitor extends org.apache.commons.io.file.CountingPathVisitor
{
private final java.nio.file.CopyOption[] copyOptions;
private final java.nio.file.Path sourceDirectory;
private final java.nio.file.Path targetDirectory;
public transient void <init>(org.apache.commons.io.file.Counters$PathCounters, java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[])
{
java.nio.file.CopyOption[] v4, v5;
org.apache.commons.io.file.Counters$PathCounters v1;
org.apache.commons.io.file.CopyDirectoryVisitor v0;
java.lang.Object v6;
java.nio.file.Path v2, v3;
v0 := @this: org.apache.commons.io.file.CopyDirectoryVisitor;
v1 := @parameter0: org.apache.commons.io.file.Counters$PathCounters;
v2 := @parameter1: java.nio.file.Path;
v3 := @parameter2: java.nio.file.Path;
v4 := @parameter3: java.nio.file.CopyOption[];
specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters)>(v1);
v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.Path sourceDirectory> = v2;
v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.Path targetDirectory> = v3;
if v4 != null goto label1;
v5 = <org.apache.commons.io.file.PathUtils: java.nio.file.CopyOption[] EMPTY_COPY_OPTIONS>;
goto label2;
label1:
v6 = virtualinvoke v4.<java.lang.Object: java.lang.Object clone()>();
label2:
v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.CopyOption[] copyOptions> = v6;
return;
}
public transient void <init>(org.apache.commons.io.file.Counters$PathCounters, org.apache.commons.io.file.PathFilter, org.apache.commons.io.file.PathFilter, java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[])
{
java.nio.file.CopyOption[] v6, v7;
org.apache.commons.io.file.Counters$PathCounters v1;
org.apache.commons.io.file.CopyDirectoryVisitor v0;
java.lang.Object v8;
java.nio.file.Path v4, v5;
org.apache.commons.io.file.PathFilter v2, v3;
v0 := @this: org.apache.commons.io.file.CopyDirectoryVisitor;
v1 := @parameter0: org.apache.commons.io.file.Counters$PathCounters;
v2 := @parameter1: org.apache.commons.io.file.PathFilter;
v3 := @parameter2: org.apache.commons.io.file.PathFilter;
v4 := @parameter3: java.nio.file.Path;
v5 := @parameter4: java.nio.file.Path;
v6 := @parameter5: java.nio.file.CopyOption[];
specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters,org.apache.commons.io.file.PathFilter,org.apache.commons.io.file.PathFilter)>(v1, v2, v3);
v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.Path sourceDirectory> = v4;
v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.Path targetDirectory> = v5;
if v6 != null goto label1;
v7 = <org.apache.commons.io.file.PathUtils: java.nio.file.CopyOption[] EMPTY_COPY_OPTIONS>;
goto label2;
label1:
v8 = virtualinvoke v6.<java.lang.Object: java.lang.Object clone()>();
label2:
v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.CopyOption[] copyOptions> = v8;
return;
}
protected void copy(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException
{
java.nio.file.CopyOption[] v3;
org.apache.commons.io.file.CopyDirectoryVisitor v0;
java.nio.file.Path v1, v2;
v0 := @this: org.apache.commons.io.file.CopyDirectoryVisitor;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.Path;
v3 = v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.CopyOption[] copyOptions>;
staticinvoke <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(v1, v2, v3);
return;
}
public boolean equals(java.lang.Object)
{
java.nio.file.CopyOption[] v5, v6;
org.apache.commons.io.file.CopyDirectoryVisitor v0;
java.lang.Class v3, v4;
java.lang.Object v1;
java.nio.file.Path v11, v12, v8, v9;
boolean v10, v13, v14, v2, v7;
v0 := @this: org.apache.commons.io.file.CopyDirectoryVisitor;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
v2 = specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: boolean equals(java.lang.Object)>(v1);
if v2 != 0 goto label2;
return 0;
label2:
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v3 == v4 goto label3;
return 0;
label3:
v5 = v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.CopyOption[] copyOptions>;
v6 = v1.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.CopyOption[] copyOptions>;
v7 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>(v5, v6);
if v7 == 0 goto label4;
v8 = v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.Path sourceDirectory>;
v9 = v1.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.Path sourceDirectory>;
v10 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v8, v9);
if v10 == 0 goto label4;
v11 = v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.Path targetDirectory>;
v12 = v1.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.Path targetDirectory>;
v13 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v11, v12);
if v13 == 0 goto label4;
v14 = 1;
goto label5;
label4:
v14 = 0;
label5:
return v14;
}
public java.nio.file.CopyOption[] getCopyOptions()
{
java.nio.file.CopyOption[] v1;
java.lang.Object v2;
org.apache.commons.io.file.CopyDirectoryVisitor v0;
v0 := @this: org.apache.commons.io.file.CopyDirectoryVisitor;
v1 = v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.CopyOption[] copyOptions>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Object clone()>();
return v2;
}
public java.nio.file.Path getSourceDirectory()
{
java.nio.file.Path v1;
org.apache.commons.io.file.CopyDirectoryVisitor v0;
v0 := @this: org.apache.commons.io.file.CopyDirectoryVisitor;
v1 = v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.Path sourceDirectory>;
return v1;
}
public java.nio.file.Path getTargetDirectory()
{
java.nio.file.Path v1;
org.apache.commons.io.file.CopyDirectoryVisitor v0;
v0 := @this: org.apache.commons.io.file.CopyDirectoryVisitor;
v1 = v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.Path targetDirectory>;
return v1;
}
public int hashCode()
{
java.nio.file.CopyOption[] v3;
java.lang.Object[] v7;
org.apache.commons.io.file.CopyDirectoryVisitor v0;
int v1, v10, v11, v2, v4, v5, v6;
java.nio.file.Path v8, v9;
v0 := @this: org.apache.commons.io.file.CopyDirectoryVisitor;
v1 = specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: int hashCode()>();
v2 = 31 * v1;
v3 = v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.CopyOption[] copyOptions>;
v4 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>(v3);
v5 = v2 + v4;
v6 = 31 * v5;
v7 = newarray (java.lang.Object)[2];
v8 = v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.Path sourceDirectory>;
v7[0] = v8;
v9 = v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.Path targetDirectory>;
v7[1] = v9;
v10 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>(v7);
v11 = v6 + v10;
return v11;
}
public java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
{
java.nio.file.LinkOption[] v4;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.FileVisitResult v7;
java.nio.file.attribute.FileAttribute[] v6;
org.apache.commons.io.file.CopyDirectoryVisitor v0;
java.nio.file.Path v1, v3;
boolean v5;
v0 := @this: org.apache.commons.io.file.CopyDirectoryVisitor;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = specialinvoke v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.Path resolveRelativeAsString(java.nio.file.Path)>(v1);
v4 = newarray (java.nio.file.LinkOption)[0];
v5 = staticinvoke <java.nio.file.Files: boolean notExists(java.nio.file.Path,java.nio.file.LinkOption[])>(v3, v4);
if v5 == 0 goto label1;
v6 = newarray (java.nio.file.attribute.FileAttribute)[0];
staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(v3, v6);
label1:
v7 = specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>(v1, v2);
return v7;
}
private java.nio.file.Path resolveRelativeAsString(java.nio.file.Path)
{
org.apache.commons.io.file.CopyDirectoryVisitor v0;
java.lang.String v5;
java.nio.file.Path v1, v2, v3, v4, v6;
v0 := @this: org.apache.commons.io.file.CopyDirectoryVisitor;
v1 := @parameter0: java.nio.file.Path;
v2 = v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.Path targetDirectory>;
v3 = v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.Path sourceDirectory>;
v4 = interfaceinvoke v3.<java.nio.file.Path: java.nio.file.Path relativize(java.nio.file.Path)>(v1);
v5 = interfaceinvoke v4.<java.nio.file.Path: java.lang.String toString()>();
v6 = interfaceinvoke v2.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>(v5);
return v6;
}
public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
{
java.nio.file.FileVisitResult v4;
org.apache.commons.io.file.CopyDirectoryVisitor v0;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.Path v1, v3;
v0 := @this: org.apache.commons.io.file.CopyDirectoryVisitor;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = specialinvoke v0.<org.apache.commons.io.file.CopyDirectoryVisitor: java.nio.file.Path resolveRelativeAsString(java.nio.file.Path)>(v1);
virtualinvoke v0.<org.apache.commons.io.file.CopyDirectoryVisitor: void copy(java.nio.file.Path,java.nio.file.Path)>(v1, v3);
v4 = specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>(v3, v2);
return v4;
}
}