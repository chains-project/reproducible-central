public class org.apache.commons.io.filefilter.CanWriteFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
{
public static final org.apache.commons.io.filefilter.IOFileFilter CAN_WRITE;
public static final org.apache.commons.io.filefilter.IOFileFilter CANNOT_WRITE;
private static final long serialVersionUID;
protected void <init>()
{
org.apache.commons.io.filefilter.CanWriteFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.CanWriteFileFilter;
specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();
return;
}
public boolean accept(java.io.File)
{
java.io.File v1;
org.apache.commons.io.filefilter.CanWriteFileFilter v0;
boolean v2;
v0 := @this: org.apache.commons.io.filefilter.CanWriteFileFilter;
v1 := @parameter0: java.io.File;
v2 = virtualinvoke v1.<java.io.File: boolean canWrite()>();
return v2;
}
public java.nio.file.FileVisitResult accept(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
{
java.nio.file.FileVisitResult v4;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.Path v1;
org.apache.commons.io.filefilter.CanWriteFileFilter v0;
boolean v3;
v0 := @this: org.apache.commons.io.filefilter.CanWriteFileFilter;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = staticinvoke <java.nio.file.Files: boolean isWritable(java.nio.file.Path)>(v1);
v4 = staticinvoke <org.apache.commons.io.filefilter.CanWriteFileFilter: java.nio.file.FileVisitResult toFileVisitResult(boolean,java.nio.file.Path)>(v3, v1);
return v4;
}
static void <clinit>()
{
org.apache.commons.io.filefilter.IOFileFilter v1, v2;
org.apache.commons.io.filefilter.CanWriteFileFilter v0;
v0 = new org.apache.commons.io.filefilter.CanWriteFileFilter;
specialinvoke v0.<org.apache.commons.io.filefilter.CanWriteFileFilter: void <init>()>();
<org.apache.commons.io.filefilter.CanWriteFileFilter: org.apache.commons.io.filefilter.IOFileFilter CAN_WRITE> = v0;
v1 = <org.apache.commons.io.filefilter.CanWriteFileFilter: org.apache.commons.io.filefilter.IOFileFilter CAN_WRITE>;
v2 = interfaceinvoke v1.<org.apache.commons.io.filefilter.IOFileFilter: org.apache.commons.io.filefilter.IOFileFilter negate()>();
<org.apache.commons.io.filefilter.CanWriteFileFilter: org.apache.commons.io.filefilter.IOFileFilter CANNOT_WRITE> = v2;
return;
}
}