public class org.apache.commons.io.filefilter.SizeFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
{
private static final long serialVersionUID;
private final boolean acceptLarger;
private final long size;
public void <init>(long)
{
long v1;
org.apache.commons.io.filefilter.SizeFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.SizeFileFilter;
v1 := @parameter0: long;
specialinvoke v0.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>(v1, 1);
return;
}
public void <init>(long, boolean)
{
byte v3;
long v1;
java.lang.IllegalArgumentException v4;
boolean v2;
org.apache.commons.io.filefilter.SizeFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.SizeFileFilter;
v1 := @parameter0: long;
v2 := @parameter1: boolean;
specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();
v3 = v1 cmp 0L;
if v3 >= 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The size must be non-negative");
throw v4;
label1:
v0.<org.apache.commons.io.filefilter.SizeFileFilter: long size> = v1;
v0.<org.apache.commons.io.filefilter.SizeFileFilter: boolean acceptLarger> = v2;
return;
}
public boolean accept(java.io.File)
{
long v2;
java.io.File v1;
boolean v3;
org.apache.commons.io.filefilter.SizeFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.SizeFileFilter;
v1 := @parameter0: java.io.File;
v2 = virtualinvoke v1.<java.io.File: long length()>();
v3 = specialinvoke v0.<org.apache.commons.io.filefilter.SizeFileFilter: boolean accept(long)>(v2);
return v3;
}
private boolean accept(long)
{
byte v4;
long v1, v3;
boolean v2, v5, v6;
org.apache.commons.io.filefilter.SizeFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.SizeFileFilter;
v1 := @parameter0: long;
v2 = v0.<org.apache.commons.io.filefilter.SizeFileFilter: boolean acceptLarger>;
v3 = v0.<org.apache.commons.io.filefilter.SizeFileFilter: long size>;
v4 = v1 cmp v3;
if v4 >= 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
if v2 == v5 goto label3;
v6 = 1;
goto label4;
label3:
v6 = 0;
label4:
return v6;
}
public java.nio.file.FileVisitResult accept(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
{
java.io.IOException v6;
long v3;
java.nio.file.attribute.BasicFileAttributes v2;
org.apache.commons.io.filefilter.SizeFileFilter v0;
java.nio.file.FileVisitResult v5, v7;
java.nio.file.Path v1;
boolean v4;
v0 := @this: org.apache.commons.io.filefilter.SizeFileFilter;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
label1:
v3 = staticinvoke <java.nio.file.Files: long size(java.nio.file.Path)>(v1);
v4 = specialinvoke v0.<org.apache.commons.io.filefilter.SizeFileFilter: boolean accept(long)>(v3);
v5 = staticinvoke <org.apache.commons.io.filefilter.SizeFileFilter: java.nio.file.FileVisitResult toFileVisitResult(boolean,java.nio.file.Path)>(v4, v1);
label2:
return v5;
label3:
v6 := @caughtexception;
v7 = virtualinvoke v0.<org.apache.commons.io.filefilter.SizeFileFilter: java.nio.file.FileVisitResult handle(java.lang.Throwable)>(v6);
return v7;
catch java.io.IOException from label1 to label2 with label3;
}
public java.lang.String toString()
{
long v4;
java.lang.String v2, v3, v5;
boolean v1;
org.apache.commons.io.filefilter.SizeFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.SizeFileFilter;
v1 = v0.<org.apache.commons.io.filefilter.SizeFileFilter: boolean acceptLarger>;
if v1 == 0 goto label1;
v2 = ">=";
goto label2;
label1:
v2 = "<";
label2:
v3 = specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: java.lang.String toString()>();
v4 = v0.<org.apache.commons.io.filefilter.SizeFileFilter: long size>;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,long)>(v3, v2, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001(\u0001\u0001)");
return v5;
}
public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
{
java.nio.file.FileVisitResult v5;
long v3;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.Path v1;
boolean v4;
org.apache.commons.io.filefilter.SizeFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.SizeFileFilter;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = staticinvoke <java.nio.file.Files: long size(java.nio.file.Path)>(v1);
v4 = specialinvoke v0.<org.apache.commons.io.filefilter.SizeFileFilter: boolean accept(long)>(v3);
v5 = staticinvoke <org.apache.commons.io.filefilter.SizeFileFilter: java.nio.file.FileVisitResult toFileVisitResult(boolean,java.nio.file.Path)>(v4, v1);
return v5;
}
}