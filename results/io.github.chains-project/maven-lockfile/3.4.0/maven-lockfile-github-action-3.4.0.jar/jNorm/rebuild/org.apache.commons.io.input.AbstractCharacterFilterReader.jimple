public abstract class org.apache.commons.io.input.AbstractCharacterFilterReader extends java.io.FilterReader
{
protected static final java.util.function.IntPredicate SKIP_NONE;
private final java.util.function.IntPredicate skip;
protected void <init>(java.io.Reader)
{
org.apache.commons.io.input.AbstractCharacterFilterReader v0;
java.io.Reader v1;
java.util.function.IntPredicate v2;
v0 := @this: org.apache.commons.io.input.AbstractCharacterFilterReader;
v1 := @parameter0: java.io.Reader;
v2 = <org.apache.commons.io.input.AbstractCharacterFilterReader: java.util.function.IntPredicate SKIP_NONE>;
specialinvoke v0.<org.apache.commons.io.input.AbstractCharacterFilterReader: void <init>(java.io.Reader,java.util.function.IntPredicate)>(v1, v2);
return;
}
protected void <init>(java.io.Reader, java.util.function.IntPredicate)
{
org.apache.commons.io.input.AbstractCharacterFilterReader v0;
java.io.Reader v1;
java.util.function.IntPredicate v2, v3;
v0 := @this: org.apache.commons.io.input.AbstractCharacterFilterReader;
v1 := @parameter0: java.io.Reader;
v2 := @parameter1: java.util.function.IntPredicate;
specialinvoke v0.<java.io.FilterReader: void <init>(java.io.Reader)>(v1);
if v2 != null goto label1;
v3 = <org.apache.commons.io.input.AbstractCharacterFilterReader: java.util.function.IntPredicate SKIP_NONE>;
goto label2;
label1:
v3 = v2;
label2:
v0.<org.apache.commons.io.input.AbstractCharacterFilterReader: java.util.function.IntPredicate skip> = v3;
return;
}
protected boolean filter(int)
{
int v1;
org.apache.commons.io.input.AbstractCharacterFilterReader v0;
java.util.function.IntPredicate v2;
boolean v3;
v0 := @this: org.apache.commons.io.input.AbstractCharacterFilterReader;
v1 := @parameter0: int;
v2 = v0.<org.apache.commons.io.input.AbstractCharacterFilterReader: java.util.function.IntPredicate skip>;
v3 = interfaceinvoke v2.<java.util.function.IntPredicate: boolean test(int)>(v1);
return v3;
}
public int read() throws java.io.IOException
{
int v2, v3;
org.apache.commons.io.input.AbstractCharacterFilterReader v0;
java.io.Reader v1;
boolean v4;
v0 := @this: org.apache.commons.io.input.AbstractCharacterFilterReader;
label1:
v1 = v0.<org.apache.commons.io.input.AbstractCharacterFilterReader: java.io.Reader in>;
v2 = virtualinvoke v1.<java.io.Reader: int read()>();
v3 = (int) -1;
if v2 == v3 goto label2;
v4 = virtualinvoke v0.<org.apache.commons.io.input.AbstractCharacterFilterReader: boolean filter(int)>(v2);
if v4 != 0 goto label1;
label2:
return v2;
}
public int read(char[], int, int) throws java.io.IOException
{
char v10, v12;
org.apache.commons.io.input.AbstractCharacterFilterReader v0;
int v13, v14, v2, v3, v4, v5, v6, v7, v8, v9;
char[] v1;
boolean v11;
v0 := @this: org.apache.commons.io.input.AbstractCharacterFilterReader;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = specialinvoke v0.<java.io.FilterReader: int read(char[],int,int)>(v1, v2, v3);
v5 = (int) -1;
if v4 != v5 goto label1;
v6 = (int) -1;
return v6;
label1:
v7 = v2 - 1;
v8 = v2;
label2:
v9 = v2 + v4;
if v8 >= v9 goto label4;
v10 = v1[v8];
v11 = virtualinvoke v0.<org.apache.commons.io.input.AbstractCharacterFilterReader: boolean filter(int)>(v10);
if v11 != 0 goto label3;
v7 = v7 + 1;
if v7 >= v8 goto label3;
v12 = v1[v8];
v1[v7] = v12;
label3:
v8 = v8 + 1;
goto label2;
label4:
v13 = v7 - v2;
v14 = v13 + 1;
return v14;
}
static void <clinit>()
{
java.util.function.IntPredicate v0;
v0 = staticinvoke <org.apache.commons.io.input.AbstractCharacterFilterReader$lambda_static_0__274: java.util.function.IntPredicate bootstrap$()>();
<org.apache.commons.io.input.AbstractCharacterFilterReader: java.util.function.IntPredicate SKIP_NONE> = v0;
return;
}
}