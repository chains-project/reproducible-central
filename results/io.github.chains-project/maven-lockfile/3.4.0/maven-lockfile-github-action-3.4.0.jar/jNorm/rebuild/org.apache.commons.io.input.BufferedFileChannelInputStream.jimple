public final class org.apache.commons.io.input.BufferedFileChannelInputStream extends java.io.InputStream
{
private final java.nio.ByteBuffer byteBuffer;
private final java.nio.channels.FileChannel fileChannel;
private static final java.lang.Class DIRECT_BUFFER_CLASS;
private static java.lang.Class getDirectBufferClass()
{
java.lang.Throwable v1;
java.lang.Class v0;
v0 = null;
label1:
v0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("sun.nio.ch.DirectBuffer");
label2:
goto label4;
label3:
v1 := @caughtexception;
label4:
return v0;
catch java.lang.IllegalAccessError from label1 to label2 with label3;
catch java.lang.ClassNotFoundException from label1 to label2 with label3;
}
private static boolean isDirectBuffer(java.lang.Object)
{
java.lang.Class v1, v2;
java.lang.Object v0;
boolean v3, v4;
v0 := @parameter0: java.lang.Object;
v1 = <org.apache.commons.io.input.BufferedFileChannelInputStream: java.lang.Class DIRECT_BUFFER_CLASS>;
if v1 == null goto label1;
v2 = <org.apache.commons.io.input.BufferedFileChannelInputStream: java.lang.Class DIRECT_BUFFER_CLASS>;
v3 = virtualinvoke v2.<java.lang.Class: boolean isInstance(java.lang.Object)>(v0);
if v3 == 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public void <init>(java.io.File) throws java.io.IOException
{
org.apache.commons.io.input.BufferedFileChannelInputStream v0;
java.io.File v1;
v0 := @this: org.apache.commons.io.input.BufferedFileChannelInputStream;
v1 := @parameter0: java.io.File;
specialinvoke v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: void <init>(java.io.File,int)>(v1, 8192);
return;
}
public void <init>(java.io.File, int) throws java.io.IOException
{
org.apache.commons.io.input.BufferedFileChannelInputStream v0;
int v2;
java.nio.file.Path v3;
java.io.File v1;
v0 := @this: org.apache.commons.io.input.BufferedFileChannelInputStream;
v1 := @parameter0: java.io.File;
v2 := @parameter1: int;
v3 = virtualinvoke v1.<java.io.File: java.nio.file.Path toPath()>();
specialinvoke v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: void <init>(java.nio.file.Path,int)>(v3, v2);
return;
}
public void <init>(java.nio.file.Path) throws java.io.IOException
{
org.apache.commons.io.input.BufferedFileChannelInputStream v0;
java.nio.file.Path v1;
v0 := @this: org.apache.commons.io.input.BufferedFileChannelInputStream;
v1 := @parameter0: java.nio.file.Path;
specialinvoke v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: void <init>(java.nio.file.Path,int)>(v1, 8192);
return;
}
public void <init>(java.nio.file.Path, int) throws java.io.IOException
{
org.apache.commons.io.input.BufferedFileChannelInputStream v0;
java.nio.file.StandardOpenOption v4;
java.nio.ByteBuffer v6, v7;
java.nio.file.OpenOption[] v3;
int v2;
java.nio.channels.FileChannel v5;
java.nio.file.Path v1;
v0 := @this: org.apache.commons.io.input.BufferedFileChannelInputStream;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: int;
specialinvoke v0.<java.io.InputStream: void <init>()>();
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "path");
v3 = newarray (java.nio.file.OpenOption)[1];
v4 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption READ>;
v3[0] = v4;
v5 = staticinvoke <java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.nio.file.OpenOption[])>(v1, v3);
v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.channels.FileChannel fileChannel> = v5;
v6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(v2);
v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.ByteBuffer byteBuffer> = v6;
v7 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.ByteBuffer byteBuffer>;
virtualinvoke v7.<java.nio.ByteBuffer: java.nio.ByteBuffer flip()>();
return;
}
public synchronized int available() throws java.io.IOException
{
int v2;
org.apache.commons.io.input.BufferedFileChannelInputStream v0;
java.nio.ByteBuffer v1;
v0 := @this: org.apache.commons.io.input.BufferedFileChannelInputStream;
v1 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.ByteBuffer byteBuffer>;
v2 = virtualinvoke v1.<java.nio.ByteBuffer: int remaining()>();
return v2;
}
private void clean(java.nio.ByteBuffer)
{
org.apache.commons.io.input.BufferedFileChannelInputStream v0;
java.nio.ByteBuffer v1;
boolean v2;
v0 := @this: org.apache.commons.io.input.BufferedFileChannelInputStream;
v1 := @parameter0: java.nio.ByteBuffer;
v2 = staticinvoke <org.apache.commons.io.input.BufferedFileChannelInputStream: boolean isDirectBuffer(java.lang.Object)>(v1);
if v2 == 0 goto label1;
specialinvoke v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: void cleanDirectBuffer(java.nio.ByteBuffer)>(v1);
label1:
return;
}
private void cleanDirectBuffer(java.nio.ByteBuffer)
{
java.lang.IllegalStateException v15, v23;
java.lang.Object[] v13, v21, v9;
java.lang.ReflectiveOperationException v14, v22;
java.nio.ByteBuffer v1;
java.lang.String v2, v3;
java.lang.reflect.Method v12, v18, v8;
boolean v4;
org.apache.commons.io.input.BufferedFileChannelInputStream v0;
java.lang.Class[] v11, v17, v7;
java.lang.reflect.Field v19;
java.lang.Class v16, v5, v6;
java.lang.Object v10, v20;
v0 := @this: org.apache.commons.io.input.BufferedFileChannelInputStream;
v1 := @parameter0: java.nio.ByteBuffer;
v2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.specification.version");
v3 = "1.8";
v4 = virtualinvoke v3.<java.lang.String: boolean equals(java.lang.Object)>(v2);
if v4 == 0 goto label4;
label1:
v5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("sun.misc.Cleaner");
v6 = <org.apache.commons.io.input.BufferedFileChannelInputStream: java.lang.Class DIRECT_BUFFER_CLASS>;
v7 = newarray (java.lang.Class)[0];
v8 = virtualinvoke v6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("cleaner", v7);
v9 = newarray (java.lang.Object)[0];
v10 = virtualinvoke v8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v1, v9);
if v10 == null goto label7;
v11 = newarray (java.lang.Class)[0];
v12 = virtualinvoke v5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("clean", v11);
v13 = newarray (java.lang.Object)[0];
virtualinvoke v12.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v10, v13);
label2:
goto label7;
label3:
v14 := @caughtexception;
v15 = new java.lang.IllegalStateException;
specialinvoke v15.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v14);
throw v15;
label4:
v16 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("sun.misc.Unsafe");
v17 = newarray (java.lang.Class)[1];
v17[0] = class "Ljava/nio/ByteBuffer;";
v18 = virtualinvoke v16.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("invokeCleaner", v17);
v19 = virtualinvoke v16.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("theUnsafe");
virtualinvoke v19.<java.lang.reflect.Field: void setAccessible(boolean)>(1);
v20 = virtualinvoke v19.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);
v21 = newarray (java.lang.Object)[1];
v21[0] = v1;
virtualinvoke v18.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v20, v21);
label5:
goto label7;
label6:
v22 := @caughtexception;
v23 = new java.lang.IllegalStateException;
specialinvoke v23.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v22);
throw v23;
label7:
return;
catch java.lang.ReflectiveOperationException from label1 to label2 with label3;
catch java.lang.ReflectiveOperationException from label4 to label5 with label6;
}
public synchronized void close() throws java.io.IOException
{
java.lang.Throwable v3;
org.apache.commons.io.input.BufferedFileChannelInputStream v0;
java.nio.channels.FileChannel v1;
java.nio.ByteBuffer v2, v4;
v0 := @this: org.apache.commons.io.input.BufferedFileChannelInputStream;
label1:
v1 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.channels.FileChannel fileChannel>;
virtualinvoke v1.<java.nio.channels.FileChannel: void close()>();
label2:
v2 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.ByteBuffer byteBuffer>;
specialinvoke v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: void clean(java.nio.ByteBuffer)>(v2);
goto label4;
label3:
v3 := @caughtexception;
v4 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.ByteBuffer byteBuffer>;
specialinvoke v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: void clean(java.nio.ByteBuffer)>(v4);
throw v3;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public synchronized int read() throws java.io.IOException
{
short v5;
org.apache.commons.io.input.BufferedFileChannelInputStream v0;
byte v4;
int v2;
java.nio.ByteBuffer v3;
boolean v1;
v0 := @this: org.apache.commons.io.input.BufferedFileChannelInputStream;
v1 = specialinvoke v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: boolean refill()>();
if v1 != 0 goto label1;
v2 = (int) -1;
return v2;
label1:
v3 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.ByteBuffer byteBuffer>;
v4 = virtualinvoke v3.<java.nio.ByteBuffer: byte get()>();
v5 = v4 & 255;
return v5;
}
public synchronized int read(byte[], int, int) throws java.io.IOException
{
byte[] v1;
java.lang.IndexOutOfBoundsException v7;
org.apache.commons.io.input.BufferedFileChannelInputStream v0;
java.nio.ByteBuffer v10, v13;
int v11, v12, v2, v3, v4, v5, v6, v9;
boolean v8;
v0 := @this: org.apache.commons.io.input.BufferedFileChannelInputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
if v2 < 0 goto label1;
if v3 < 0 goto label1;
v4 = v2 + v3;
if v4 < 0 goto label1;
v5 = v2 + v3;
v6 = lengthof v1;
if v5 <= v6 goto label2;
label1:
v7 = new java.lang.IndexOutOfBoundsException;
specialinvoke v7.<java.lang.IndexOutOfBoundsException: void <init>()>();
throw v7;
label2:
v8 = specialinvoke v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: boolean refill()>();
if v8 != 0 goto label3;
v9 = (int) -1;
return v9;
label3:
v10 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.ByteBuffer byteBuffer>;
v11 = virtualinvoke v10.<java.nio.ByteBuffer: int remaining()>();
v12 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v11);
v13 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.ByteBuffer byteBuffer>;
virtualinvoke v13.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(v1, v2, v12);
return v12;
}
private boolean refill() throws java.io.IOException
{
org.apache.commons.io.input.BufferedFileChannelInputStream v0;
java.nio.ByteBuffer v1, v3, v6, v7;
int v4;
java.nio.channels.FileChannel v5;
boolean v2, v8;
v0 := @this: org.apache.commons.io.input.BufferedFileChannelInputStream;
v1 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.ByteBuffer byteBuffer>;
v2 = virtualinvoke v1.<java.nio.ByteBuffer: boolean hasRemaining()>();
if v2 != 0 goto label5;
v3 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.ByteBuffer byteBuffer>;
virtualinvoke v3.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
v4 = 0;
label1:
if v4 != 0 goto label2;
v5 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.channels.FileChannel fileChannel>;
v6 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.ByteBuffer byteBuffer>;
v4 = virtualinvoke v5.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)>(v6);
goto label1;
label2:
v7 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.ByteBuffer byteBuffer>;
virtualinvoke v7.<java.nio.ByteBuffer: java.nio.ByteBuffer flip()>();
if v4 < 0 goto label3;
v8 = 1;
goto label4;
label3:
v8 = 0;
label4:
return v8;
label5:
return 1;
}
public synchronized long skip(long) throws java.io.IOException
{
long v1, v12, v15, v16;
java.nio.ByteBuffer v10, v13, v14, v3, v6, v7;
byte v2, v5;
int v11, v4, v8, v9;
org.apache.commons.io.input.BufferedFileChannelInputStream v0;
v0 := @this: org.apache.commons.io.input.BufferedFileChannelInputStream;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 > 0 goto label1;
return 0L;
label1:
v3 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.ByteBuffer byteBuffer>;
v4 = virtualinvoke v3.<java.nio.ByteBuffer: int remaining()>();
v5 = v4 cmp v1;
if v5 < 0 goto label2;
v6 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.ByteBuffer byteBuffer>;
v7 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.ByteBuffer byteBuffer>;
v8 = virtualinvoke v7.<java.nio.ByteBuffer: int position()>();
v9 = v8 + v1;
virtualinvoke v6.<java.nio.ByteBuffer: java.nio.ByteBuffer position(int)>(v9);
return v1;
label2:
v10 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.ByteBuffer byteBuffer>;
v11 = virtualinvoke v10.<java.nio.ByteBuffer: int remaining()>();
v12 = v1 - v11;
v13 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.ByteBuffer byteBuffer>;
virtualinvoke v13.<java.nio.ByteBuffer: java.nio.ByteBuffer position(int)>(0);
v14 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.ByteBuffer byteBuffer>;
virtualinvoke v14.<java.nio.ByteBuffer: java.nio.ByteBuffer flip()>();
v15 = specialinvoke v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: long skipFromFileChannel(long)>(v12);
v16 = v11 + v15;
return v16;
}
private long skipFromFileChannel(long) throws java.io.IOException
{
org.apache.commons.io.input.BufferedFileChannelInputStream v0;
long v1, v11, v3, v5, v6, v9;
byte v7;
java.nio.channels.FileChannel v10, v2, v4, v8;
v0 := @this: org.apache.commons.io.input.BufferedFileChannelInputStream;
v1 := @parameter0: long;
v2 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.channels.FileChannel fileChannel>;
v3 = virtualinvoke v2.<java.nio.channels.FileChannel: long position()>();
v4 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.channels.FileChannel fileChannel>;
v5 = virtualinvoke v4.<java.nio.channels.FileChannel: long size()>();
v6 = v5 - v3;
v7 = v1 cmp v6;
if v7 <= 0 goto label1;
v8 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.channels.FileChannel fileChannel>;
virtualinvoke v8.<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>(v5);
v9 = v5 - v3;
return v9;
label1:
v10 = v0.<org.apache.commons.io.input.BufferedFileChannelInputStream: java.nio.channels.FileChannel fileChannel>;
v11 = v3 + v1;
virtualinvoke v10.<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>(v11);
return v1;
}
static void <clinit>()
{
java.lang.Class v0;
v0 = staticinvoke <org.apache.commons.io.input.BufferedFileChannelInputStream: java.lang.Class getDirectBufferClass()>();
<org.apache.commons.io.input.BufferedFileChannelInputStream: java.lang.Class DIRECT_BUFFER_CLASS> = v0;
return;
}
}