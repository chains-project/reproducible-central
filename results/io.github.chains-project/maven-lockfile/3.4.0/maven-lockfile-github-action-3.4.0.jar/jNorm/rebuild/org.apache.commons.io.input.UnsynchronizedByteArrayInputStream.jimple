public class org.apache.commons.io.input.UnsynchronizedByteArrayInputStream extends java.io.InputStream
{
public static final int END_OF_STREAM;
private final byte[] data;
private final int eod;
private int offset;
private int markedOffset;
public void <init>(byte[])
{
byte[] v1;
org.apache.commons.io.input.UnsynchronizedByteArrayInputStream v0;
int v3, v4;
java.lang.Object v2;
v0 := @this: org.apache.commons.io.input.UnsynchronizedByteArrayInputStream;
v1 := @parameter0: byte[];
specialinvoke v0.<java.io.InputStream: void <init>()>();
v2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "data");
v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: byte[] data> = v2;
v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset> = 0;
v3 = lengthof v1;
v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int eod> = v3;
v4 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset>;
v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int markedOffset> = v4;
return;
}
public void <init>(byte[], int)
{
byte[] v1;
org.apache.commons.io.input.UnsynchronizedByteArrayInputStream v0;
java.lang.IllegalArgumentException v3;
int v2, v4, v5, v6, v7, v8;
v0 := @this: org.apache.commons.io.input.UnsynchronizedByteArrayInputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
specialinvoke v0.<java.io.InputStream: void <init>()>();
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "data");
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("offset cannot be negative");
throw v3;
label1:
v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: byte[] data> = v1;
v4 = lengthof v1;
if v4 <= 0 goto label2;
v5 = lengthof v1;
goto label3;
label2:
v5 = v2;
label3:
v6 = staticinvoke <java.lang.Math: int min(int,int)>(v2, v5);
v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset> = v6;
v7 = lengthof v1;
v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int eod> = v7;
v8 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset>;
v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int markedOffset> = v8;
return;
}
public void <init>(byte[], int, int)
{
byte[] v1;
org.apache.commons.io.input.UnsynchronizedByteArrayInputStream v0;
java.lang.IllegalArgumentException v4, v5;
int v10, v11, v12, v13, v14, v2, v3, v7, v8, v9;
java.lang.Object v6;
v0 := @this: org.apache.commons.io.input.UnsynchronizedByteArrayInputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<java.io.InputStream: void <init>()>();
if v2 >= 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("offset cannot be negative");
throw v4;
label1:
if v3 >= 0 goto label2;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("length cannot be negative");
throw v5;
label2:
v6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "data");
v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: byte[] data> = v6;
v7 = lengthof v1;
if v7 <= 0 goto label3;
v8 = lengthof v1;
goto label4;
label3:
v8 = v2;
label4:
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v2, v8);
v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset> = v9;
v10 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset>;
v11 = v10 + v3;
v12 = lengthof v1;
v13 = staticinvoke <java.lang.Math: int min(int,int)>(v11, v12);
v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int eod> = v13;
v14 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset>;
v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int markedOffset> = v14;
return;
}
public int available()
{
org.apache.commons.io.input.UnsynchronizedByteArrayInputStream v0;
int v1, v2, v3, v4, v5;
v0 := @this: org.apache.commons.io.input.UnsynchronizedByteArrayInputStream;
v1 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset>;
v2 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int eod>;
if v1 >= v2 goto label1;
v3 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int eod>;
v4 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset>;
v5 = v3 - v4;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public int read()
{
byte[] v3;
org.apache.commons.io.input.UnsynchronizedByteArrayInputStream v0;
short v7;
byte v6;
int v1, v2, v4, v5;
v0 := @this: org.apache.commons.io.input.UnsynchronizedByteArrayInputStream;
v1 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset>;
v2 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int eod>;
if v1 >= v2 goto label1;
v3 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: byte[] data>;
v4 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset>;
v5 = v4 + 1;
v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset> = v5;
v6 = v3[v4];
v7 = v6 & 255;
goto label2;
label1:
v7 = -1;
label2:
return v7;
}
public int read(byte[])
{
byte[] v1;
org.apache.commons.io.input.UnsynchronizedByteArrayInputStream v0;
int v2, v3;
v0 := @this: org.apache.commons.io.input.UnsynchronizedByteArrayInputStream;
v1 := @parameter0: byte[];
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "dest");
v2 = lengthof v1;
v3 = virtualinvoke v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int read(byte[],int,int)>(v1, 0, v2);
return v3;
}
public int read(byte[], int, int)
{
byte[] v1, v13;
java.lang.IndexOutOfBoundsException v6;
int v10, v11, v12, v14, v15, v16, v2, v3, v4, v5, v7, v8, v9;
org.apache.commons.io.input.UnsynchronizedByteArrayInputStream v0;
v0 := @this: org.apache.commons.io.input.UnsynchronizedByteArrayInputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "dest");
if v2 < 0 goto label1;
if v3 < 0 goto label1;
v4 = v2 + v3;
v5 = lengthof v1;
if v4 <= v5 goto label2;
label1:
v6 = new java.lang.IndexOutOfBoundsException;
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>()>();
throw v6;
label2:
v7 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset>;
v8 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int eod>;
if v7 < v8 goto label3;
v9 = (int) -1;
return v9;
label3:
v10 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int eod>;
v11 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset>;
v12 = v10 - v11;
if v3 >= v12 goto label4;
v12 = v3;
label4:
if v12 > 0 goto label5;
return 0;
label5:
v13 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: byte[] data>;
v14 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v13, v14, v1, v2, v12);
v15 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset>;
v16 = v15 + v12;
v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset> = v16;
return v12;
}
public long skip(long)
{
org.apache.commons.io.input.UnsynchronizedByteArrayInputStream v0;
long v1, v9;
java.lang.IllegalArgumentException v3;
byte v2, v7;
int v4, v5, v6, v8;
v0 := @this: org.apache.commons.io.input.UnsynchronizedByteArrayInputStream;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Skipping backward is not supported");
throw v3;
label1:
v4 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int eod>;
v5 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset>;
v6 = v4 - v5;
v7 = v1 cmp v6;
if v7 >= 0 goto label2;
v6 = v1;
label2:
v8 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset>;
v9 = v8 + v6;
v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset> = v9;
return v6;
}
public boolean markSupported()
{
org.apache.commons.io.input.UnsynchronizedByteArrayInputStream v0;
v0 := @this: org.apache.commons.io.input.UnsynchronizedByteArrayInputStream;
return 1;
}
public void mark(int)
{
int v1, v2;
org.apache.commons.io.input.UnsynchronizedByteArrayInputStream v0;
v0 := @this: org.apache.commons.io.input.UnsynchronizedByteArrayInputStream;
v1 := @parameter0: int;
v2 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset>;
v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int markedOffset> = v2;
return;
}
public void reset()
{
int v1;
org.apache.commons.io.input.UnsynchronizedByteArrayInputStream v0;
v0 := @this: org.apache.commons.io.input.UnsynchronizedByteArrayInputStream;
v1 = v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int markedOffset>;
v0.<org.apache.commons.io.input.UnsynchronizedByteArrayInputStream: int offset> = v1;
return;
}
}