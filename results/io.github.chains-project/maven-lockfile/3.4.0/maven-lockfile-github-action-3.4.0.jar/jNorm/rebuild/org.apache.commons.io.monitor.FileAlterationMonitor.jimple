public final class org.apache.commons.io.monitor.FileAlterationMonitor extends java.lang.Object implements java.lang.Runnable
{
private static final org.apache.commons.io.monitor.FileAlterationObserver[] EMPTY_ARRAY;
private final long interval;
private final java.util.List observers;
private java.lang.Thread thread;
private java.util.concurrent.ThreadFactory threadFactory;
private volatile boolean running;
public void <init>()
{
org.apache.commons.io.monitor.FileAlterationMonitor v0;
v0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;
specialinvoke v0.<org.apache.commons.io.monitor.FileAlterationMonitor: void <init>(long)>(10000L);
return;
}
public void <init>(long)
{
long v1;
java.util.concurrent.CopyOnWriteArrayList v2;
org.apache.commons.io.monitor.FileAlterationMonitor v0;
v0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;
v1 := @parameter0: long;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.CopyOnWriteArrayList;
specialinvoke v2.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();
v0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.List observers> = v2;
v0.<org.apache.commons.io.monitor.FileAlterationMonitor: long interval> = v1;
return;
}
public void <init>(long, java.util.Collection)
{
java.lang.Object[] v7;
java.util.Collection v2;
org.apache.commons.io.monitor.FileAlterationMonitor v0;
long v1;
java.util.List v4;
org.apache.commons.io.monitor.FileAlterationObserver[] v6;
java.util.Optional v3;
java.lang.Object v5;
v0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;
v1 := @parameter0: long;
v2 := @parameter1: java.util.Collection;
v3 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>(v2);
v4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v5 = virtualinvoke v3.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(v4);
v6 = <org.apache.commons.io.monitor.FileAlterationMonitor: org.apache.commons.io.monitor.FileAlterationObserver[] EMPTY_ARRAY>;
v7 = interfaceinvoke v5.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(v6);
specialinvoke v0.<org.apache.commons.io.monitor.FileAlterationMonitor: void <init>(long,org.apache.commons.io.monitor.FileAlterationObserver[])>(v1, v7);
return;
}
public transient void <init>(long, org.apache.commons.io.monitor.FileAlterationObserver[])
{
org.apache.commons.io.monitor.FileAlterationObserver[] v2;
org.apache.commons.io.monitor.FileAlterationMonitor v0;
org.apache.commons.io.monitor.FileAlterationObserver v5;
int v3, v4;
long v1;
v0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;
v1 := @parameter0: long;
v2 := @parameter1: org.apache.commons.io.monitor.FileAlterationObserver[];
specialinvoke v0.<org.apache.commons.io.monitor.FileAlterationMonitor: void <init>(long)>(v1);
if v2 == null goto label2;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
virtualinvoke v0.<org.apache.commons.io.monitor.FileAlterationMonitor: void addObserver(org.apache.commons.io.monitor.FileAlterationObserver)>(v5);
v4 = v4 + 1;
goto label1;
label2:
return;
}
public long getInterval()
{
long v1;
org.apache.commons.io.monitor.FileAlterationMonitor v0;
v0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;
v1 = v0.<org.apache.commons.io.monitor.FileAlterationMonitor: long interval>;
return v1;
}
public synchronized void setThreadFactory(java.util.concurrent.ThreadFactory)
{
java.util.concurrent.ThreadFactory v1;
org.apache.commons.io.monitor.FileAlterationMonitor v0;
v0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;
v1 := @parameter0: java.util.concurrent.ThreadFactory;
v0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.concurrent.ThreadFactory threadFactory> = v1;
return;
}
public void addObserver(org.apache.commons.io.monitor.FileAlterationObserver)
{
java.util.List v2;
org.apache.commons.io.monitor.FileAlterationMonitor v0;
org.apache.commons.io.monitor.FileAlterationObserver v1;
v0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;
v1 := @parameter0: org.apache.commons.io.monitor.FileAlterationObserver;
if v1 == null goto label1;
v2 = v0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.List observers>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v1);
label1:
return;
}
public void removeObserver(org.apache.commons.io.monitor.FileAlterationObserver)
{
java.util.List v2;
org.apache.commons.io.monitor.FileAlterationMonitor v0;
org.apache.commons.io.monitor.FileAlterationObserver v1;
boolean v3;
v0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;
v1 := @parameter0: org.apache.commons.io.monitor.FileAlterationObserver;
if v1 == null goto label2;
label1:
v2 = v0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.List observers>;
v3 = interfaceinvoke v2.<java.util.List: boolean remove(java.lang.Object)>(v1);
if v3 != 0 goto label1;
label2:
return;
}
public java.lang.Iterable getObservers()
{
java.util.List v1;
org.apache.commons.io.monitor.FileAlterationMonitor v0;
v0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;
v1 = v0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.List observers>;
return v1;
}
public synchronized void start() throws java.lang.Exception
{
java.lang.IllegalStateException v2;
java.util.Iterator v4;
org.apache.commons.io.monitor.FileAlterationMonitor v0;
java.util.List v3;
java.lang.Thread v10, v11, v9;
java.lang.Object v6;
java.util.concurrent.ThreadFactory v7, v8;
boolean v1, v5;
v0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;
v1 = v0.<org.apache.commons.io.monitor.FileAlterationMonitor: boolean running>;
if v1 == 0 goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Monitor is already running");
throw v2;
label1:
v3 = v0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.List observers>;
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label2:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label3;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v6.<org.apache.commons.io.monitor.FileAlterationObserver: void initialize()>();
goto label2;
label3:
v0.<org.apache.commons.io.monitor.FileAlterationMonitor: boolean running> = 1;
v7 = v0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.concurrent.ThreadFactory threadFactory>;
if v7 == null goto label4;
v8 = v0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.concurrent.ThreadFactory threadFactory>;
v9 = interfaceinvoke v8.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(v0);
v0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.lang.Thread thread> = v9;
goto label5;
label4:
v10 = new java.lang.Thread;
specialinvoke v10.<java.lang.Thread: void <init>(java.lang.Runnable)>(v0);
v0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.lang.Thread thread> = v10;
label5:
v11 = v0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.lang.Thread thread>;
virtualinvoke v11.<java.lang.Thread: void start()>();
return;
}
public synchronized void stop() throws java.lang.Exception
{
long v1;
org.apache.commons.io.monitor.FileAlterationMonitor v0;
v0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;
v1 = v0.<org.apache.commons.io.monitor.FileAlterationMonitor: long interval>;
virtualinvoke v0.<org.apache.commons.io.monitor.FileAlterationMonitor: void stop(long)>(v1);
return;
}
public synchronized void stop(long) throws java.lang.Exception
{
java.lang.IllegalStateException v3;
java.util.Iterator v9;
org.apache.commons.io.monitor.FileAlterationMonitor v0;
long v1;
java.util.List v8;
java.lang.InterruptedException v6;
java.lang.Thread v4, v5, v7;
java.lang.Object v11;
boolean v10, v2;
v0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;
v1 := @parameter0: long;
v2 = v0.<org.apache.commons.io.monitor.FileAlterationMonitor: boolean running>;
if v2 != 0 goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Monitor is not running");
throw v3;
label1:
v0.<org.apache.commons.io.monitor.FileAlterationMonitor: boolean running> = 0;
label2:
v4 = v0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.lang.Thread thread>;
virtualinvoke v4.<java.lang.Thread: void interrupt()>();
v5 = v0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.lang.Thread thread>;
virtualinvoke v5.<java.lang.Thread: void join(long)>(v1);
label3:
goto label5;
label4:
v6 := @caughtexception;
v7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v7.<java.lang.Thread: void interrupt()>();
label5:
v8 = v0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.List observers>;
v9 = interfaceinvoke v8.<java.util.List: java.util.Iterator iterator()>();
label6:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label7;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v11.<org.apache.commons.io.monitor.FileAlterationObserver: void destroy()>();
goto label6;
label7:
return;
catch java.lang.InterruptedException from label2 to label3 with label4;
}
public void run()
{
java.util.Iterator v3;
org.apache.commons.io.monitor.FileAlterationMonitor v0;
long v7;
java.util.List v2;
java.lang.InterruptedException v8;
java.lang.Object v5;
boolean v1, v4, v6;
v0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;
label1:
v1 = v0.<org.apache.commons.io.monitor.FileAlterationMonitor: boolean running>;
if v1 == 0 goto label7;
v2 = v0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.List observers>;
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label2:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label3;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v5.<org.apache.commons.io.monitor.FileAlterationObserver: void checkAndNotify()>();
goto label2;
label3:
v6 = v0.<org.apache.commons.io.monitor.FileAlterationMonitor: boolean running>;
if v6 == 0 goto label7;
label4:
v7 = v0.<org.apache.commons.io.monitor.FileAlterationMonitor: long interval>;
staticinvoke <java.lang.Thread: void sleep(long)>(v7);
label5:
goto label1;
label6:
v8 := @caughtexception;
goto label1;
label7:
return;
catch java.lang.InterruptedException from label4 to label5 with label6;
}
static void <clinit>()
{
org.apache.commons.io.monitor.FileAlterationObserver[] v0;
v0 = newarray (org.apache.commons.io.monitor.FileAlterationObserver)[0];
<org.apache.commons.io.monitor.FileAlterationMonitor: org.apache.commons.io.monitor.FileAlterationObserver[] EMPTY_ARRAY> = v0;
return;
}
}