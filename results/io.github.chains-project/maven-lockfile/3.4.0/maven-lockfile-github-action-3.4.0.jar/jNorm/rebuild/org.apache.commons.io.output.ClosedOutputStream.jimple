public class org.apache.commons.io.output.ClosedOutputStream extends java.io.OutputStream
{
public static final org.apache.commons.io.output.ClosedOutputStream CLOSED_OUTPUT_STREAM;
public void <init>()
{
org.apache.commons.io.output.ClosedOutputStream v0;
v0 := @this: org.apache.commons.io.output.ClosedOutputStream;
specialinvoke v0.<java.io.OutputStream: void <init>()>();
return;
}
public void write(int) throws java.io.IOException
{
org.apache.commons.io.output.ClosedOutputStream v0;
int v1;
java.io.IOException v2;
java.lang.String v3;
v0 := @this: org.apache.commons.io.output.ClosedOutputStream;
v1 := @parameter0: int;
v2 = new java.io.IOException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("write(\u0001) failed: stream is closed");
specialinvoke v2.<java.io.IOException: void <init>(java.lang.String)>(v3);
throw v2;
}
public void flush() throws java.io.IOException
{
org.apache.commons.io.output.ClosedOutputStream v0;
java.io.IOException v1;
v0 := @this: org.apache.commons.io.output.ClosedOutputStream;
v1 = new java.io.IOException;
specialinvoke v1.<java.io.IOException: void <init>(java.lang.String)>("flush() failed: stream is closed");
throw v1;
}
static void <clinit>()
{
org.apache.commons.io.output.ClosedOutputStream v0;
v0 = new org.apache.commons.io.output.ClosedOutputStream;
specialinvoke v0.<org.apache.commons.io.output.ClosedOutputStream: void <init>()>();
<org.apache.commons.io.output.ClosedOutputStream: org.apache.commons.io.output.ClosedOutputStream CLOSED_OUTPUT_STREAM> = v0;
return;
}
}