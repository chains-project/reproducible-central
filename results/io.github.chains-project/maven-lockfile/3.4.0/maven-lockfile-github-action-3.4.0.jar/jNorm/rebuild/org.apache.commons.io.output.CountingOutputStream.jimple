public class org.apache.commons.io.output.CountingOutputStream extends org.apache.commons.io.output.ProxyOutputStream
{
private long count;
public void <init>(java.io.OutputStream)
{
java.io.OutputStream v1;
org.apache.commons.io.output.CountingOutputStream v0;
v0 := @this: org.apache.commons.io.output.CountingOutputStream;
v1 := @parameter0: java.io.OutputStream;
specialinvoke v0.<org.apache.commons.io.output.ProxyOutputStream: void <init>(java.io.OutputStream)>(v1);
return;
}
protected synchronized void beforeWrite(int)
{
org.apache.commons.io.output.CountingOutputStream v0;
int v1;
long v2, v3;
v0 := @this: org.apache.commons.io.output.CountingOutputStream;
v1 := @parameter0: int;
v2 = v0.<org.apache.commons.io.output.CountingOutputStream: long count>;
v3 = v2 + v1;
v0.<org.apache.commons.io.output.CountingOutputStream: long count> = v3;
return;
}
public int getCount()
{
org.apache.commons.io.output.CountingOutputStream v0;
byte v2;
java.lang.ArithmeticException v3;
long v1;
java.lang.String v4;
v0 := @this: org.apache.commons.io.output.CountingOutputStream;
v1 = virtualinvoke v0.<org.apache.commons.io.output.CountingOutputStream: long getByteCount()>();
v2 = v1 cmp 2147483647L;
if v2 <= 0 goto label1;
v3 = new java.lang.ArithmeticException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The byte count \u0001 is too large to be converted to an int");
specialinvoke v3.<java.lang.ArithmeticException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return v1;
}
public int resetCount()
{
org.apache.commons.io.output.CountingOutputStream v0;
byte v2;
java.lang.ArithmeticException v3;
long v1;
java.lang.String v4;
v0 := @this: org.apache.commons.io.output.CountingOutputStream;
v1 = virtualinvoke v0.<org.apache.commons.io.output.CountingOutputStream: long resetByteCount()>();
v2 = v1 cmp 2147483647L;
if v2 <= 0 goto label1;
v3 = new java.lang.ArithmeticException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The byte count \u0001 is too large to be converted to an int");
specialinvoke v3.<java.lang.ArithmeticException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return v1;
}
public synchronized long getByteCount()
{
long v1;
org.apache.commons.io.output.CountingOutputStream v0;
v0 := @this: org.apache.commons.io.output.CountingOutputStream;
v1 = v0.<org.apache.commons.io.output.CountingOutputStream: long count>;
return v1;
}
public synchronized long resetByteCount()
{
long v1;
org.apache.commons.io.output.CountingOutputStream v0;
v0 := @this: org.apache.commons.io.output.CountingOutputStream;
v1 = v0.<org.apache.commons.io.output.CountingOutputStream: long count>;
v0.<org.apache.commons.io.output.CountingOutputStream: long count> = 0L;
return v1;
}
}