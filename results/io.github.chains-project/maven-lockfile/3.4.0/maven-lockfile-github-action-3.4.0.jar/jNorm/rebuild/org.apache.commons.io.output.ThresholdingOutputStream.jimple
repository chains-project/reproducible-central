public class org.apache.commons.io.output.ThresholdingOutputStream extends java.io.OutputStream
{
private static final org.apache.commons.io.function.IOFunction NOOP_OS_GETTER;
private final int threshold;
private final org.apache.commons.io.function.IOConsumer thresholdConsumer;
private final org.apache.commons.io.function.IOFunction outputStreamGetter;
private long written;
private boolean thresholdExceeded;
public void <init>(int)
{
int v1;
org.apache.commons.io.function.IOConsumer v2;
org.apache.commons.io.output.ThresholdingOutputStream v0;
org.apache.commons.io.function.IOFunction v3;
v0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;
v1 := @parameter0: int;
v2 = staticinvoke <org.apache.commons.io.function.IOConsumer: org.apache.commons.io.function.IOConsumer noop()>();
v3 = <org.apache.commons.io.output.ThresholdingOutputStream: org.apache.commons.io.function.IOFunction NOOP_OS_GETTER>;
specialinvoke v0.<org.apache.commons.io.output.ThresholdingOutputStream: void <init>(int,org.apache.commons.io.function.IOConsumer,org.apache.commons.io.function.IOFunction)>(v1, v2, v3);
return;
}
public void <init>(int, org.apache.commons.io.function.IOConsumer, org.apache.commons.io.function.IOFunction)
{
int v1;
org.apache.commons.io.function.IOConsumer v2, v4;
org.apache.commons.io.output.ThresholdingOutputStream v0;
org.apache.commons.io.function.IOFunction v3, v5;
v0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;
v1 := @parameter0: int;
v2 := @parameter1: org.apache.commons.io.function.IOConsumer;
v3 := @parameter2: org.apache.commons.io.function.IOFunction;
specialinvoke v0.<java.io.OutputStream: void <init>()>();
v0.<org.apache.commons.io.output.ThresholdingOutputStream: int threshold> = v1;
if v2 != null goto label1;
v4 = staticinvoke <org.apache.commons.io.function.IOConsumer: org.apache.commons.io.function.IOConsumer noop()>();
goto label2;
label1:
v4 = v2;
label2:
v0.<org.apache.commons.io.output.ThresholdingOutputStream: org.apache.commons.io.function.IOConsumer thresholdConsumer> = v4;
if v3 != null goto label3;
v5 = <org.apache.commons.io.output.ThresholdingOutputStream: org.apache.commons.io.function.IOFunction NOOP_OS_GETTER>;
goto label4;
label3:
v5 = v3;
label4:
v0.<org.apache.commons.io.output.ThresholdingOutputStream: org.apache.commons.io.function.IOFunction outputStreamGetter> = v5;
return;
}
protected void checkThreshold(int) throws java.io.IOException
{
byte v6;
int v1, v5;
long v3, v4;
org.apache.commons.io.output.ThresholdingOutputStream v0;
boolean v2;
v0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;
v1 := @parameter0: int;
v2 = v0.<org.apache.commons.io.output.ThresholdingOutputStream: boolean thresholdExceeded>;
if v2 != 0 goto label1;
v3 = v0.<org.apache.commons.io.output.ThresholdingOutputStream: long written>;
v4 = v3 + v1;
v5 = v0.<org.apache.commons.io.output.ThresholdingOutputStream: int threshold>;
v6 = v4 cmp v5;
if v6 <= 0 goto label1;
v0.<org.apache.commons.io.output.ThresholdingOutputStream: boolean thresholdExceeded> = 1;
virtualinvoke v0.<org.apache.commons.io.output.ThresholdingOutputStream: void thresholdReached()>();
label1:
return;
}
public void close() throws java.io.IOException
{
java.io.OutputStream v2;
java.io.IOException v1;
org.apache.commons.io.output.ThresholdingOutputStream v0;
v0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;
label1:
virtualinvoke v0.<org.apache.commons.io.output.ThresholdingOutputStream: void flush()>();
label2:
goto label4;
label3:
v1 := @caughtexception;
label4:
v2 = virtualinvoke v0.<org.apache.commons.io.output.ThresholdingOutputStream: java.io.OutputStream getStream()>();
virtualinvoke v2.<java.io.OutputStream: void close()>();
return;
catch java.io.IOException from label1 to label2 with label3;
}
public void flush() throws java.io.IOException
{
java.io.OutputStream v1;
org.apache.commons.io.output.ThresholdingOutputStream v0;
v0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;
v1 = virtualinvoke v0.<org.apache.commons.io.output.ThresholdingOutputStream: java.io.OutputStream getStream()>();
virtualinvoke v1.<java.io.OutputStream: void flush()>();
return;
}
public long getByteCount()
{
long v1;
org.apache.commons.io.output.ThresholdingOutputStream v0;
v0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;
v1 = v0.<org.apache.commons.io.output.ThresholdingOutputStream: long written>;
return v1;
}
protected java.io.OutputStream getStream() throws java.io.IOException
{
java.lang.Object v2;
org.apache.commons.io.output.ThresholdingOutputStream v0;
org.apache.commons.io.function.IOFunction v1;
v0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;
v1 = v0.<org.apache.commons.io.output.ThresholdingOutputStream: org.apache.commons.io.function.IOFunction outputStreamGetter>;
v2 = interfaceinvoke v1.<org.apache.commons.io.function.IOFunction: java.lang.Object apply(java.lang.Object)>(v0);
return v2;
}
public int getThreshold()
{
int v1;
org.apache.commons.io.output.ThresholdingOutputStream v0;
v0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;
v1 = v0.<org.apache.commons.io.output.ThresholdingOutputStream: int threshold>;
return v1;
}
public boolean isThresholdExceeded()
{
byte v3;
int v2;
long v1;
org.apache.commons.io.output.ThresholdingOutputStream v0;
boolean v4;
v0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;
v1 = v0.<org.apache.commons.io.output.ThresholdingOutputStream: long written>;
v2 = v0.<org.apache.commons.io.output.ThresholdingOutputStream: int threshold>;
v3 = v1 cmp v2;
if v3 <= 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
protected void resetByteCount()
{
org.apache.commons.io.output.ThresholdingOutputStream v0;
v0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;
v0.<org.apache.commons.io.output.ThresholdingOutputStream: boolean thresholdExceeded> = 0;
v0.<org.apache.commons.io.output.ThresholdingOutputStream: long written> = 0L;
return;
}
protected void setByteCount(long)
{
long v1;
org.apache.commons.io.output.ThresholdingOutputStream v0;
v0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;
v1 := @parameter0: long;
v0.<org.apache.commons.io.output.ThresholdingOutputStream: long written> = v1;
return;
}
protected void thresholdReached() throws java.io.IOException
{
org.apache.commons.io.function.IOConsumer v1;
org.apache.commons.io.output.ThresholdingOutputStream v0;
v0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;
v1 = v0.<org.apache.commons.io.output.ThresholdingOutputStream: org.apache.commons.io.function.IOConsumer thresholdConsumer>;
interfaceinvoke v1.<org.apache.commons.io.function.IOConsumer: void accept(java.lang.Object)>(v0);
return;
}
public void write(byte[]) throws java.io.IOException
{
java.io.OutputStream v3;
byte[] v1;
int v2, v5;
long v4, v6;
org.apache.commons.io.output.ThresholdingOutputStream v0;
v0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;
v1 := @parameter0: byte[];
v2 = lengthof v1;
virtualinvoke v0.<org.apache.commons.io.output.ThresholdingOutputStream: void checkThreshold(int)>(v2);
v3 = virtualinvoke v0.<org.apache.commons.io.output.ThresholdingOutputStream: java.io.OutputStream getStream()>();
virtualinvoke v3.<java.io.OutputStream: void write(byte[])>(v1);
v4 = v0.<org.apache.commons.io.output.ThresholdingOutputStream: long written>;
v5 = lengthof v1;
v6 = v4 + v5;
v0.<org.apache.commons.io.output.ThresholdingOutputStream: long written> = v6;
return;
}
public void write(byte[], int, int) throws java.io.IOException
{
java.io.OutputStream v4;
byte[] v1;
int v2, v3;
long v5, v6;
org.apache.commons.io.output.ThresholdingOutputStream v0;
v0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
virtualinvoke v0.<org.apache.commons.io.output.ThresholdingOutputStream: void checkThreshold(int)>(v3);
v4 = virtualinvoke v0.<org.apache.commons.io.output.ThresholdingOutputStream: java.io.OutputStream getStream()>();
virtualinvoke v4.<java.io.OutputStream: void write(byte[],int,int)>(v1, v2, v3);
v5 = v0.<org.apache.commons.io.output.ThresholdingOutputStream: long written>;
v6 = v5 + v3;
v0.<org.apache.commons.io.output.ThresholdingOutputStream: long written> = v6;
return;
}
public void write(int) throws java.io.IOException
{
java.io.OutputStream v2;
int v1;
long v3, v4;
org.apache.commons.io.output.ThresholdingOutputStream v0;
v0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;
v1 := @parameter0: int;
virtualinvoke v0.<org.apache.commons.io.output.ThresholdingOutputStream: void checkThreshold(int)>(1);
v2 = virtualinvoke v0.<org.apache.commons.io.output.ThresholdingOutputStream: java.io.OutputStream getStream()>();
virtualinvoke v2.<java.io.OutputStream: void write(int)>(v1);
v3 = v0.<org.apache.commons.io.output.ThresholdingOutputStream: long written>;
v4 = v3 + 1L;
v0.<org.apache.commons.io.output.ThresholdingOutputStream: long written> = v4;
return;
}
static void <clinit>()
{
org.apache.commons.io.function.IOFunction v0;
v0 = staticinvoke <org.apache.commons.io.output.ThresholdingOutputStream$lambda_static_0__263: org.apache.commons.io.function.IOFunction bootstrap$()>();
<org.apache.commons.io.output.ThresholdingOutputStream: org.apache.commons.io.function.IOFunction NOOP_OS_GETTER> = v0;
return;
}
}