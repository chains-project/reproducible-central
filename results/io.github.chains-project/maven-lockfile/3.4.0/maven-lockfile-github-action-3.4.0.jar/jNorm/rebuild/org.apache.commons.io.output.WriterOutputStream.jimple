public class org.apache.commons.io.output.WriterOutputStream extends java.io.OutputStream
{
private static final int BUFFER_SIZE;
private final java.io.Writer writer;
private final java.nio.charset.CharsetDecoder decoder;
private final boolean writeImmediately;
private final java.nio.ByteBuffer decoderIn;
private final java.nio.CharBuffer decoderOut;
public void <init>(java.io.Writer, java.nio.charset.CharsetDecoder)
{
java.io.Writer v1;
java.nio.charset.CharsetDecoder v2;
org.apache.commons.io.output.WriterOutputStream v0;
v0 := @this: org.apache.commons.io.output.WriterOutputStream;
v1 := @parameter0: java.io.Writer;
v2 := @parameter1: java.nio.charset.CharsetDecoder;
specialinvoke v0.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.CharsetDecoder,int,boolean)>(v1, v2, 1024, 0);
return;
}
public void <init>(java.io.Writer, java.nio.charset.CharsetDecoder, int, boolean)
{
java.nio.CharBuffer v7;
java.nio.charset.CharsetDecoder v2;
java.nio.ByteBuffer v5;
java.nio.charset.Charset v6;
int v3;
java.io.Writer v1;
boolean v4;
org.apache.commons.io.output.WriterOutputStream v0;
v0 := @this: org.apache.commons.io.output.WriterOutputStream;
v1 := @parameter0: java.io.Writer;
v2 := @parameter1: java.nio.charset.CharsetDecoder;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
specialinvoke v0.<java.io.OutputStream: void <init>()>();
v5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(128);
v0.<org.apache.commons.io.output.WriterOutputStream: java.nio.ByteBuffer decoderIn> = v5;
v6 = virtualinvoke v2.<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()>();
staticinvoke <org.apache.commons.io.output.WriterOutputStream: void checkIbmJdkWithBrokenUTF16(java.nio.charset.Charset)>(v6);
v0.<org.apache.commons.io.output.WriterOutputStream: java.io.Writer writer> = v1;
v0.<org.apache.commons.io.output.WriterOutputStream: java.nio.charset.CharsetDecoder decoder> = v2;
v0.<org.apache.commons.io.output.WriterOutputStream: boolean writeImmediately> = v4;
v7 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(v3);
v0.<org.apache.commons.io.output.WriterOutputStream: java.nio.CharBuffer decoderOut> = v7;
return;
}
public void <init>(java.io.Writer, java.nio.charset.Charset, int, boolean)
{
java.nio.charset.CharsetDecoder v10, v5, v7, v9;
java.nio.charset.Charset v2;
java.nio.charset.CodingErrorAction v6, v8;
int v3;
java.io.Writer v1;
boolean v4;
org.apache.commons.io.output.WriterOutputStream v0;
v0 := @this: org.apache.commons.io.output.WriterOutputStream;
v1 := @parameter0: java.io.Writer;
v2 := @parameter1: java.nio.charset.Charset;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 = virtualinvoke v2.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();
v6 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
v7 = virtualinvoke v5.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>(v6);
v8 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
v9 = virtualinvoke v7.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>(v8);
v10 = virtualinvoke v9.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder replaceWith(java.lang.String)>("?");
specialinvoke v0.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.CharsetDecoder,int,boolean)>(v1, v10, v3, v4);
return;
}
public void <init>(java.io.Writer, java.nio.charset.Charset)
{
java.io.Writer v1;
java.nio.charset.Charset v2;
org.apache.commons.io.output.WriterOutputStream v0;
v0 := @this: org.apache.commons.io.output.WriterOutputStream;
v1 := @parameter0: java.io.Writer;
v2 := @parameter1: java.nio.charset.Charset;
specialinvoke v0.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.Charset,int,boolean)>(v1, v2, 1024, 0);
return;
}
public void <init>(java.io.Writer, java.lang.String, int, boolean)
{
java.nio.charset.Charset v5;
int v3;
java.io.Writer v1;
java.lang.String v2;
boolean v4;
org.apache.commons.io.output.WriterOutputStream v0;
v0 := @this: org.apache.commons.io.output.WriterOutputStream;
v1 := @parameter0: java.io.Writer;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(v2);
specialinvoke v0.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.Charset,int,boolean)>(v1, v5, v3, v4);
return;
}
public void <init>(java.io.Writer, java.lang.String)
{
java.io.Writer v1;
java.lang.String v2;
org.apache.commons.io.output.WriterOutputStream v0;
v0 := @this: org.apache.commons.io.output.WriterOutputStream;
v1 := @parameter0: java.io.Writer;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.lang.String,int,boolean)>(v1, v2, 1024, 0);
return;
}
public void <init>(java.io.Writer)
{
java.io.Writer v1;
java.nio.charset.Charset v2;
org.apache.commons.io.output.WriterOutputStream v0;
v0 := @this: org.apache.commons.io.output.WriterOutputStream;
v1 := @parameter0: java.io.Writer;
v2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
specialinvoke v0.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.Charset,int,boolean)>(v1, v2, 1024, 0);
return;
}
public void write(byte[], int, int) throws java.io.IOException
{
byte[] v1;
java.nio.ByteBuffer v4, v7;
int v2, v3, v5, v6;
boolean v8;
org.apache.commons.io.output.WriterOutputStream v0;
v0 := @this: org.apache.commons.io.output.WriterOutputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
label1:
if v3 <= 0 goto label2;
v4 = v0.<org.apache.commons.io.output.WriterOutputStream: java.nio.ByteBuffer decoderIn>;
v5 = virtualinvoke v4.<java.nio.ByteBuffer: int remaining()>();
v6 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v5);
v7 = v0.<org.apache.commons.io.output.WriterOutputStream: java.nio.ByteBuffer decoderIn>;
virtualinvoke v7.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(v1, v2, v6);
specialinvoke v0.<org.apache.commons.io.output.WriterOutputStream: void processInput(boolean)>(0);
v3 = v3 - v6;
v2 = v2 + v6;
goto label1;
label2:
v8 = v0.<org.apache.commons.io.output.WriterOutputStream: boolean writeImmediately>;
if v8 == 0 goto label3;
specialinvoke v0.<org.apache.commons.io.output.WriterOutputStream: void flushOutput()>();
label3:
return;
}
public void write(byte[]) throws java.io.IOException
{
int v2;
byte[] v1;
org.apache.commons.io.output.WriterOutputStream v0;
v0 := @this: org.apache.commons.io.output.WriterOutputStream;
v1 := @parameter0: byte[];
v2 = lengthof v1;
virtualinvoke v0.<org.apache.commons.io.output.WriterOutputStream: void write(byte[],int,int)>(v1, 0, v2);
return;
}
public void write(int) throws java.io.IOException
{
int v1;
byte[] v2;
org.apache.commons.io.output.WriterOutputStream v0;
v0 := @this: org.apache.commons.io.output.WriterOutputStream;
v1 := @parameter0: int;
v2 = newarray (byte)[1];
v2[0] = v1;
virtualinvoke v0.<org.apache.commons.io.output.WriterOutputStream: void write(byte[],int,int)>(v2, 0, 1);
return;
}
public void flush() throws java.io.IOException
{
java.io.Writer v1;
org.apache.commons.io.output.WriterOutputStream v0;
v0 := @this: org.apache.commons.io.output.WriterOutputStream;
specialinvoke v0.<org.apache.commons.io.output.WriterOutputStream: void flushOutput()>();
v1 = v0.<org.apache.commons.io.output.WriterOutputStream: java.io.Writer writer>;
virtualinvoke v1.<java.io.Writer: void flush()>();
return;
}
public void close() throws java.io.IOException
{
java.io.Writer v1;
org.apache.commons.io.output.WriterOutputStream v0;
v0 := @this: org.apache.commons.io.output.WriterOutputStream;
specialinvoke v0.<org.apache.commons.io.output.WriterOutputStream: void processInput(boolean)>(1);
specialinvoke v0.<org.apache.commons.io.output.WriterOutputStream: void flushOutput()>();
v1 = v0.<org.apache.commons.io.output.WriterOutputStream: java.io.Writer writer>;
virtualinvoke v1.<java.io.Writer: void close()>();
return;
}
private void processInput(boolean) throws java.io.IOException
{
java.nio.CharBuffer v5;
java.io.IOException v9;
java.nio.charset.CharsetDecoder v3;
java.nio.ByteBuffer v10, v2, v4;
java.nio.charset.CoderResult v6;
boolean v1, v7, v8;
org.apache.commons.io.output.WriterOutputStream v0;
v0 := @this: org.apache.commons.io.output.WriterOutputStream;
v1 := @parameter0: boolean;
v2 = v0.<org.apache.commons.io.output.WriterOutputStream: java.nio.ByteBuffer decoderIn>;
virtualinvoke v2.<java.nio.ByteBuffer: java.nio.ByteBuffer flip()>();
label1:
v3 = v0.<org.apache.commons.io.output.WriterOutputStream: java.nio.charset.CharsetDecoder decoder>;
v4 = v0.<org.apache.commons.io.output.WriterOutputStream: java.nio.ByteBuffer decoderIn>;
v5 = v0.<org.apache.commons.io.output.WriterOutputStream: java.nio.CharBuffer decoderOut>;
v6 = virtualinvoke v3.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>(v4, v5, v1);
v7 = virtualinvoke v6.<java.nio.charset.CoderResult: boolean isOverflow()>();
if v7 == 0 goto label2;
specialinvoke v0.<org.apache.commons.io.output.WriterOutputStream: void flushOutput()>();
goto label1;
label2:
v8 = virtualinvoke v6.<java.nio.charset.CoderResult: boolean isUnderflow()>();
if v8 != 0 goto label3;
v9 = new java.io.IOException;
specialinvoke v9.<java.io.IOException: void <init>(java.lang.String)>("Unexpected coder result");
throw v9;
label3:
v10 = v0.<org.apache.commons.io.output.WriterOutputStream: java.nio.ByteBuffer decoderIn>;
virtualinvoke v10.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>();
return;
}
private void flushOutput() throws java.io.IOException
{
java.nio.CharBuffer v1, v4, v6, v8;
int v2, v7;
java.io.Writer v3;
char[] v5;
org.apache.commons.io.output.WriterOutputStream v0;
v0 := @this: org.apache.commons.io.output.WriterOutputStream;
v1 = v0.<org.apache.commons.io.output.WriterOutputStream: java.nio.CharBuffer decoderOut>;
v2 = virtualinvoke v1.<java.nio.CharBuffer: int position()>();
if v2 <= 0 goto label1;
v3 = v0.<org.apache.commons.io.output.WriterOutputStream: java.io.Writer writer>;
v4 = v0.<org.apache.commons.io.output.WriterOutputStream: java.nio.CharBuffer decoderOut>;
v5 = virtualinvoke v4.<java.nio.CharBuffer: char[] array()>();
v6 = v0.<org.apache.commons.io.output.WriterOutputStream: java.nio.CharBuffer decoderOut>;
v7 = virtualinvoke v6.<java.nio.CharBuffer: int position()>();
virtualinvoke v3.<java.io.Writer: void write(char[],int,int)>(v5, 0, v7);
v8 = v0.<org.apache.commons.io.output.WriterOutputStream: java.nio.CharBuffer decoderOut>;
virtualinvoke v8.<java.nio.CharBuffer: java.nio.CharBuffer rewind()>();
label1:
return;
}
private static void checkIbmJdkWithBrokenUTF16(java.nio.charset.Charset)
{
byte[] v5;
java.nio.ByteBuffer v7;
byte v13;
java.nio.charset.Charset v0;
int v11, v12, v14, v9;
java.lang.String v1, v18, v19, v2, v4, v8;
boolean v15, v20, v3;
java.lang.UnsupportedOperationException v17, v21;
java.nio.CharBuffer v10;
java.nio.charset.CharsetDecoder v6;
java.lang.IllegalArgumentException v16;
v0 := @parameter0: java.nio.charset.Charset;
v1 = "UTF-16";
v2 = virtualinvoke v0.<java.nio.charset.Charset: java.lang.String name()>();
v3 = virtualinvoke v1.<java.lang.String: boolean equals(java.lang.Object)>(v2);
if v3 != 0 goto label01;
return;
label01:
v4 = "v\u00e9s";
v5 = virtualinvoke v4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v0);
v6 = virtualinvoke v0.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();
v7 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(16);
v8 = "v\u00e9s";
v9 = virtualinvoke v8.<java.lang.String: int length()>();
v10 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(v9);
v11 = lengthof v5;
v12 = 0;
label02:
if v12 >= v11 goto label09;
v13 = v5[v12];
virtualinvoke v7.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(v13);
virtualinvoke v7.<java.nio.ByteBuffer: java.nio.ByteBuffer flip()>();
label03:
v14 = v11 - 1;
if v12 != v14 goto label04;
v15 = 1;
goto label05;
label04:
v15 = 0;
label05:
virtualinvoke v6.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>(v7, v10, v15);
label06:
goto label08;
label07:
v16 := @caughtexception;
v17 = new java.lang.UnsupportedOperationException;
specialinvoke v17.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("UTF-16 requested when running on an IBM JDK with broken UTF-16 support. Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream");
throw v17;
label08:
virtualinvoke v7.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>();
v12 = v12 + 1;
goto label02;
label09:
virtualinvoke v10.<java.nio.CharBuffer: java.nio.CharBuffer rewind()>();
v18 = "v\u00e9s";
v19 = virtualinvoke v10.<java.nio.CharBuffer: java.lang.String toString()>();
v20 = virtualinvoke v18.<java.lang.String: boolean equals(java.lang.Object)>(v19);
if v20 != 0 goto label10;
v21 = new java.lang.UnsupportedOperationException;
specialinvoke v21.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("UTF-16 requested when running on an IBM JDK with broken UTF-16 support. Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream");
throw v21;
label10:
return;
catch java.lang.IllegalArgumentException from label03 to label06 with label07;
}
}