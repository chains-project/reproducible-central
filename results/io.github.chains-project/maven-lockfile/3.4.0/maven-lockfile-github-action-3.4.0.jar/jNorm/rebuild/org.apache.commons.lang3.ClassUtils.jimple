public class org.apache.commons.lang3.ClassUtils extends java.lang.Object
{
public static final char PACKAGE_SEPARATOR_CHAR;
public static final java.lang.String PACKAGE_SEPARATOR;
public static final char INNER_CLASS_SEPARATOR_CHAR;
public static final java.lang.String INNER_CLASS_SEPARATOR;
private static final java.util.Map namePrimitiveMap;
private static final java.util.Map primitiveWrapperMap;
private static final java.util.Map wrapperPrimitiveMap;
private static final java.util.Map abbreviationMap;
private static final java.util.Map reverseAbbreviationMap;
public void <init>()
{
org.apache.commons.lang3.ClassUtils v0;
v0 := @this: org.apache.commons.lang3.ClassUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.String getShortClassName(java.lang.Object, java.lang.String)
{
java.lang.Class v2;
java.lang.Object v0;
java.lang.String v1, v3;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
return v1;
label1:
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.Class)>(v2);
return v3;
}
public static java.lang.String getShortClassName(java.lang.Class)
{
java.lang.Class v0;
java.lang.String v1, v2;
v0 := @parameter0: java.lang.Class;
if v0 != null goto label1;
return "";
label1:
v1 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.String)>(v1);
return v2;
}
public static java.lang.String getShortClassName(java.lang.String)
{
java.util.Map v11, v13;
int v10, v15, v16, v17, v18, v19, v21, v6, v7, v9;
java.lang.String v0, v20, v22;
boolean v1, v12, v3;
char v4, v5, v8;
java.lang.Object v14;
java.lang.StringBuilder v2;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v1 == 0 goto label1;
return "";
label1:
v2 = new java.lang.StringBuilder;
specialinvoke v2.<java.lang.StringBuilder: void <init>()>();
v3 = virtualinvoke v0.<java.lang.String: boolean startsWith(java.lang.String)>("[");
if v3 == 0 goto label5;
label2:
v4 = virtualinvoke v0.<java.lang.String: char charAt(int)>(0);
if v4 != 91 goto label3;
v0 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(1);
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");
goto label2;
label3:
v5 = virtualinvoke v0.<java.lang.String: char charAt(int)>(0);
if v5 != 76 goto label4;
v6 = virtualinvoke v0.<java.lang.String: int length()>();
v7 = v6 - 1;
v8 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v7);
if v8 != 59 goto label4;
v9 = virtualinvoke v0.<java.lang.String: int length()>();
v10 = v9 - 1;
v0 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(1, v10);
label4:
v11 = <org.apache.commons.lang3.ClassUtils: java.util.Map reverseAbbreviationMap>;
v12 = interfaceinvoke v11.<java.util.Map: boolean containsKey(java.lang.Object)>(v0);
if v12 == 0 goto label5;
v13 = <org.apache.commons.lang3.ClassUtils: java.util.Map reverseAbbreviationMap>;
v14 = interfaceinvoke v13.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
label5:
v15 = virtualinvoke v14.<java.lang.String: int lastIndexOf(int)>(46);
v16 = (int) -1;
if v15 != v16 goto label6;
v17 = 0;
goto label7;
label6:
v17 = v15 + 1;
label7:
v18 = virtualinvoke v14.<java.lang.String: int indexOf(int,int)>(36, v17);
v19 = v15 + 1;
v20 = virtualinvoke v14.<java.lang.String: java.lang.String substring(int)>(v19);
v21 = (int) -1;
if v18 == v21 goto label8;
v20 = virtualinvoke v20.<java.lang.String: java.lang.String replace(char,char)>(36, 46);
label8:
v22 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.StringBuilder)>(v20, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
return v22;
}
public static java.lang.String getSimpleName(java.lang.Class)
{
java.lang.Class v0;
java.lang.String v1;
v0 := @parameter0: java.lang.Class;
v1 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Class,java.lang.String)>(v0, "");
return v1;
}
public static java.lang.String getSimpleName(java.lang.Class, java.lang.String)
{
java.lang.Class v0;
java.lang.String v1, v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
v2 = v1;
goto label2;
label1:
v2 = virtualinvoke v0.<java.lang.Class: java.lang.String getSimpleName()>();
label2:
return v2;
}
public static java.lang.String getSimpleName(java.lang.Object)
{
java.lang.Object v0;
java.lang.String v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getSimpleName(java.lang.Object,java.lang.String)>(v0, "");
return v1;
}
public static java.lang.String getSimpleName(java.lang.Object, java.lang.String)
{
java.lang.Class v3;
java.lang.Object v0;
java.lang.String v1, v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
v2 = v1;
goto label2;
label1:
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v3.<java.lang.Class: java.lang.String getSimpleName()>();
label2:
return v2;
}
public static java.lang.String getName(java.lang.Class)
{
java.lang.Class v0;
java.lang.String v1;
v0 := @parameter0: java.lang.Class;
v1 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getName(java.lang.Class,java.lang.String)>(v0, "");
return v1;
}
public static java.lang.String getName(java.lang.Class, java.lang.String)
{
java.lang.Class v0;
java.lang.String v1, v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
v2 = v1;
goto label2;
label1:
v2 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
label2:
return v2;
}
public static java.lang.String getName(java.lang.Object)
{
java.lang.Object v0;
java.lang.String v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getName(java.lang.Object,java.lang.String)>(v0, "");
return v1;
}
public static java.lang.String getName(java.lang.Object, java.lang.String)
{
java.lang.Class v3;
java.lang.Object v0;
java.lang.String v1, v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
v2 = v1;
goto label2;
label1:
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
label2:
return v2;
}
public static java.lang.String getPackageName(java.lang.Object, java.lang.String)
{
java.lang.Class v2;
java.lang.Object v0;
java.lang.String v1, v3;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
return v1;
label1:
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.Class)>(v2);
return v3;
}
public static java.lang.String getPackageName(java.lang.Class)
{
java.lang.Class v0;
java.lang.String v1, v2;
v0 := @parameter0: java.lang.Class;
if v0 != null goto label1;
return "";
label1:
v1 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.String)>(v1);
return v2;
}
public static java.lang.String getPackageName(java.lang.String)
{
char v2, v3, v6;
int v4, v5, v7, v8;
java.lang.String v0, v9;
boolean v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v1 == 0 goto label1;
return "";
label1:
v2 = virtualinvoke v0.<java.lang.String: char charAt(int)>(0);
if v2 != 91 goto label2;
v0 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(1);
goto label1;
label2:
v3 = virtualinvoke v0.<java.lang.String: char charAt(int)>(0);
if v3 != 76 goto label3;
v4 = virtualinvoke v0.<java.lang.String: int length()>();
v5 = v4 - 1;
v6 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v5);
if v6 != 59 goto label3;
v0 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(1);
label3:
v7 = virtualinvoke v0.<java.lang.String: int lastIndexOf(int)>(46);
v8 = (int) -1;
if v7 != v8 goto label4;
return "";
label4:
v9 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v7);
return v9;
}
public static java.lang.String getAbbreviatedName(java.lang.Class, int)
{
int v1;
java.lang.Class v0;
java.lang.String v2, v3;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: int;
if v0 != null goto label1;
return "";
label1:
v2 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v3 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getAbbreviatedName(java.lang.String,int)>(v2, v1);
return v3;
}
public static java.lang.String getAbbreviatedName(java.lang.String, int)
{
int v1, v11, v12, v14, v16, v17, v18, v3, v5, v6, v7, v8, v9;
java.lang.String v0, v20;
boolean v15;
char v10, v13, v19;
java.lang.IllegalArgumentException v2;
char[] v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
if v1 > 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("len must be > 0");
throw v2;
label1:
if v0 != null goto label2;
return "";
label2:
v3 = virtualinvoke v0.<java.lang.String: int length()>();
if v3 > v1 goto label3;
return v0;
label3:
v4 = virtualinvoke v0.<java.lang.String: char[] toCharArray()>();
v5 = 0;
v6 = 0;
label4:
v7 = lengthof v4;
if v6 >= v7 goto label9;
v8 = v5;
label5:
v9 = lengthof v4;
if v6 >= v9 goto label6;
v10 = v4[v6];
if v10 == 46 goto label6;
v11 = v8;
v8 = v8 + 1;
v12 = v6;
v6 = v6 + 1;
v13 = v4[v12];
v4[v11] = v13;
goto label5;
label6:
v5 = v5 + 1;
v14 = lengthof v4;
v15 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean useFull(int,int,int,int)>(v8, v6, v14, v1);
if v15 != 0 goto label7;
if v5 <= v8 goto label8;
label7:
v5 = v8;
label8:
v16 = lengthof v4;
if v6 >= v16 goto label4;
v17 = v5;
v5 = v5 + 1;
v18 = v6;
v6 = v6 + 1;
v19 = v4[v18];
v4[v17] = v19;
goto label4;
label9:
v20 = new java.lang.String;
specialinvoke v20.<java.lang.String: void <init>(char[],int,int)>(v4, 0, v5);
return v20;
}
private static boolean useFull(int, int, int, int)
{
int v0, v1, v2, v3, v4, v5;
boolean v6;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v1 >= v2 goto label1;
v4 = v0 + v2;
v5 = v4 - v1;
if v5 > v3 goto label2;
label1:
v6 = 1;
goto label3;
label2:
v6 = 0;
label3:
return v6;
}
public static java.util.List getAllSuperclasses(java.lang.Class)
{
java.lang.Class v0, v2;
java.util.ArrayList v1;
v0 := @parameter0: java.lang.Class;
if v0 != null goto label1;
return null;
label1:
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = virtualinvoke v0.<java.lang.Class: java.lang.Class getSuperclass()>();
label2:
if v2 == null goto label3;
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v2);
v2 = virtualinvoke v2.<java.lang.Class: java.lang.Class getSuperclass()>();
goto label2;
label3:
return v1;
}
public static java.util.List getAllInterfaces(java.lang.Class)
{
java.lang.Class v0;
java.util.LinkedHashSet v1;
java.util.ArrayList v2;
v0 := @parameter0: java.lang.Class;
if v0 != null goto label1;
return null;
label1:
v1 = new java.util.LinkedHashSet;
specialinvoke v1.<java.util.LinkedHashSet: void <init>()>();
staticinvoke <org.apache.commons.lang3.ClassUtils: void getAllInterfaces(java.lang.Class,java.util.HashSet)>(v0, v1);
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>(java.util.Collection)>(v1);
return v2;
}
private static void getAllInterfaces(java.lang.Class, java.util.HashSet)
{
java.util.HashSet v1;
int v3, v4;
java.lang.Class[] v2;
java.lang.Class v0, v5;
boolean v6;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.util.HashSet;
label1:
if v0 == null goto label5;
v2 = virtualinvoke v0.<java.lang.Class: java.lang.Class[] getInterfaces()>();
v3 = lengthof v2;
v4 = 0;
label2:
if v4 >= v3 goto label4;
v5 = v2[v4];
v6 = virtualinvoke v1.<java.util.HashSet: boolean add(java.lang.Object)>(v5);
if v6 == 0 goto label3;
staticinvoke <org.apache.commons.lang3.ClassUtils: void getAllInterfaces(java.lang.Class,java.util.HashSet)>(v5, v1);
label3:
v4 = v4 + 1;
goto label2;
label4:
v0 = virtualinvoke v0.<java.lang.Class: java.lang.Class getSuperclass()>();
goto label1;
label5:
return;
}
public static java.util.List convertClassNamesToClasses(java.util.List)
{
java.util.Iterator v3;
java.lang.Exception v7;
java.util.ArrayList v1;
java.util.List v0;
int v2;
java.lang.Class v6;
java.lang.Object v5;
boolean v4;
v0 := @parameter0: java.util.List;
if v0 != null goto label1;
return null;
label1:
v1 = new java.util.ArrayList;
v2 = interfaceinvoke v0.<java.util.List: int size()>();
specialinvoke v1.<java.util.ArrayList: void <init>(int)>(v2);
v3 = interfaceinvoke v0.<java.util.List: java.util.Iterator iterator()>();
label2:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label6;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
label3:
v6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(v5);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v6);
label4:
goto label2;
label5:
v7 := @caughtexception;
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(null);
goto label2;
label6:
return v1;
catch java.lang.Exception from label3 to label4 with label5;
}
public static java.util.List convertClassesToClassNames(java.util.List)
{
java.util.List v0;
java.util.Iterator v3;
int v2;
java.lang.Object v5;
java.lang.String v6;
boolean v4;
java.util.ArrayList v1;
v0 := @parameter0: java.util.List;
if v0 != null goto label1;
return null;
label1:
v1 = new java.util.ArrayList;
v2 = interfaceinvoke v0.<java.util.List: int size()>();
specialinvoke v1.<java.util.ArrayList: void <init>(int)>(v2);
v3 = interfaceinvoke v0.<java.util.List: java.util.Iterator iterator()>();
label2:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label4;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
if v5 != null goto label3;
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(null);
goto label2;
label3:
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v6);
goto label2;
label4:
return v1;
}
public static transient boolean isAssignable(java.lang.Class[], java.lang.Class[])
{
java.lang.Class[] v0, v1;
boolean v2;
v0 := @parameter0: java.lang.Class[];
v1 := @parameter1: java.lang.Class[];
v2 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class[],java.lang.Class[],boolean)>(v0, v1, 1);
return v2;
}
public static boolean isAssignable(java.lang.Class[], java.lang.Class[], boolean)
{
java.lang.Class[] v0, v1;
int v4, v5;
java.lang.Class v6, v7;
boolean v2, v3, v8;
v0 := @parameter0: java.lang.Class[];
v1 := @parameter1: java.lang.Class[];
v2 := @parameter2: boolean;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isSameLength(java.lang.Object[],java.lang.Object[])>(v0, v1);
if v3 != 0 goto label1;
return 0;
label1:
if v0 != null goto label2;
v0 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;
label2:
if v1 != null goto label3;
v1 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;
label3:
v4 = 0;
label4:
v5 = lengthof v0;
if v4 >= v5 goto label6;
v6 = v0[v4];
v7 = v1[v4];
v8 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(v6, v7, v2);
if v8 != 0 goto label5;
return 0;
label5:
v4 = v4 + 1;
goto label4;
label6:
return 1;
}
public static boolean isPrimitiveOrWrapper(java.lang.Class)
{
java.lang.Class v0;
boolean v1, v2, v3;
v0 := @parameter0: java.lang.Class;
if v0 != null goto label1;
return 0;
label1:
v1 = virtualinvoke v0.<java.lang.Class: boolean isPrimitive()>();
if v1 != 0 goto label2;
v2 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>(v0);
if v2 == 0 goto label3;
label2:
v3 = 1;
goto label4;
label3:
v3 = 0;
label4:
return v3;
}
public static boolean isPrimitiveWrapper(java.lang.Class)
{
java.lang.Class v0;
boolean v2;
java.util.Map v1;
v0 := @parameter0: java.lang.Class;
v1 = <org.apache.commons.lang3.ClassUtils: java.util.Map wrapperPrimitiveMap>;
v2 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v0);
return v2;
}
public static boolean isAssignable(java.lang.Class, java.lang.Class)
{
java.lang.Class v0, v1;
boolean v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
v2 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class,boolean)>(v0, v1, 1);
return v2;
}
public static boolean isAssignable(java.lang.Class, java.lang.Class, boolean)
{
boolean v10, v11, v13, v15, v17, v19, v2, v20, v22, v24, v26, v27, v29, v3, v31, v33, v35, v37, v39, v4, v41, v43, v45, v46, v48, v5, v50, v52, v54, v56, v57, v59, v6, v61, v63, v65, v67, v69, v7, v70, v71, v8, v9;
java.lang.Class v0, v1, v12, v14, v16, v18, v21, v23, v25, v28, v30, v32, v34, v36, v38, v40, v42, v44, v47, v49, v51, v53, v55, v58, v60, v62, v64, v66, v68;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: boolean;
if v1 != null goto label01;
return 0;
label01:
if v0 != null goto label04;
v3 = virtualinvoke v1.<java.lang.Class: boolean isPrimitive()>();
if v3 != 0 goto label02;
v4 = 1;
goto label03;
label02:
v4 = 0;
label03:
return v4;
label04:
if v2 == 0 goto label06;
v5 = virtualinvoke v0.<java.lang.Class: boolean isPrimitive()>();
if v5 == 0 goto label05;
v6 = virtualinvoke v1.<java.lang.Class: boolean isPrimitive()>();
if v6 != 0 goto label05;
v0 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>(v0);
if v0 != null goto label05;
return 0;
label05:
v7 = virtualinvoke v1.<java.lang.Class: boolean isPrimitive()>();
if v7 == 0 goto label06;
v8 = virtualinvoke v0.<java.lang.Class: boolean isPrimitive()>();
if v8 != 0 goto label06;
v0 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class wrapperToPrimitive(java.lang.Class)>(v0);
if v0 != null goto label06;
return 0;
label06:
v9 = virtualinvoke v0.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v9 == 0 goto label07;
return 1;
label07:
v10 = virtualinvoke v0.<java.lang.Class: boolean isPrimitive()>();
if v10 == 0 goto label32;
v11 = virtualinvoke v1.<java.lang.Class: boolean isPrimitive()>();
if v11 != 0 goto label08;
return 0;
label08:
v12 = <java.lang.Integer: java.lang.Class TYPE>;
v13 = virtualinvoke v12.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v13 == 0 goto label12;
v14 = <java.lang.Long: java.lang.Class TYPE>;
v15 = virtualinvoke v14.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v15 != 0 goto label09;
v16 = <java.lang.Float: java.lang.Class TYPE>;
v17 = virtualinvoke v16.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v17 != 0 goto label09;
v18 = <java.lang.Double: java.lang.Class TYPE>;
v19 = virtualinvoke v18.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v19 == 0 goto label10;
label09:
v20 = 1;
goto label11;
label10:
v20 = 0;
label11:
return v20;
label12:
v21 = <java.lang.Long: java.lang.Class TYPE>;
v22 = virtualinvoke v21.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v22 == 0 goto label16;
v23 = <java.lang.Float: java.lang.Class TYPE>;
v24 = virtualinvoke v23.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v24 != 0 goto label13;
v25 = <java.lang.Double: java.lang.Class TYPE>;
v26 = virtualinvoke v25.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v26 == 0 goto label14;
label13:
v27 = 1;
goto label15;
label14:
v27 = 0;
label15:
return v27;
label16:
v28 = <java.lang.Boolean: java.lang.Class TYPE>;
v29 = virtualinvoke v28.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v29 == 0 goto label17;
return 0;
label17:
v30 = <java.lang.Double: java.lang.Class TYPE>;
v31 = virtualinvoke v30.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v31 == 0 goto label18;
return 0;
label18:
v32 = <java.lang.Float: java.lang.Class TYPE>;
v33 = virtualinvoke v32.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v33 == 0 goto label19;
v34 = <java.lang.Double: java.lang.Class TYPE>;
v35 = virtualinvoke v34.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
return v35;
label19:
v36 = <java.lang.Character: java.lang.Class TYPE>;
v37 = virtualinvoke v36.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v37 == 0 goto label23;
v38 = <java.lang.Integer: java.lang.Class TYPE>;
v39 = virtualinvoke v38.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v39 != 0 goto label20;
v40 = <java.lang.Long: java.lang.Class TYPE>;
v41 = virtualinvoke v40.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v41 != 0 goto label20;
v42 = <java.lang.Float: java.lang.Class TYPE>;
v43 = virtualinvoke v42.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v43 != 0 goto label20;
v44 = <java.lang.Double: java.lang.Class TYPE>;
v45 = virtualinvoke v44.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v45 == 0 goto label21;
label20:
v46 = 1;
goto label22;
label21:
v46 = 0;
label22:
return v46;
label23:
v47 = <java.lang.Short: java.lang.Class TYPE>;
v48 = virtualinvoke v47.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v48 == 0 goto label27;
v49 = <java.lang.Integer: java.lang.Class TYPE>;
v50 = virtualinvoke v49.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v50 != 0 goto label24;
v51 = <java.lang.Long: java.lang.Class TYPE>;
v52 = virtualinvoke v51.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v52 != 0 goto label24;
v53 = <java.lang.Float: java.lang.Class TYPE>;
v54 = virtualinvoke v53.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v54 != 0 goto label24;
v55 = <java.lang.Double: java.lang.Class TYPE>;
v56 = virtualinvoke v55.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v56 == 0 goto label25;
label24:
v57 = 1;
goto label26;
label25:
v57 = 0;
label26:
return v57;
label27:
v58 = <java.lang.Byte: java.lang.Class TYPE>;
v59 = virtualinvoke v58.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v59 == 0 goto label31;
v60 = <java.lang.Short: java.lang.Class TYPE>;
v61 = virtualinvoke v60.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v61 != 0 goto label28;
v62 = <java.lang.Integer: java.lang.Class TYPE>;
v63 = virtualinvoke v62.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v63 != 0 goto label28;
v64 = <java.lang.Long: java.lang.Class TYPE>;
v65 = virtualinvoke v64.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v65 != 0 goto label28;
v66 = <java.lang.Float: java.lang.Class TYPE>;
v67 = virtualinvoke v66.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v67 != 0 goto label28;
v68 = <java.lang.Double: java.lang.Class TYPE>;
v69 = virtualinvoke v68.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v69 == 0 goto label29;
label28:
v70 = 1;
goto label30;
label29:
v70 = 0;
label30:
return v70;
label31:
return 0;
label32:
v71 = virtualinvoke v1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v0);
return v71;
}
public static java.lang.Class primitiveToWrapper(java.lang.Class)
{
java.util.Map v2;
java.lang.Class v0;
java.lang.Object v3;
boolean v1;
v0 := @parameter0: java.lang.Class;
if v0 == null goto label1;
v1 = virtualinvoke v0.<java.lang.Class: boolean isPrimitive()>();
if v1 == 0 goto label1;
v2 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
label1:
return v3;
}
public static transient java.lang.Class[] primitivesToWrappers(java.lang.Class[])
{
java.lang.Class[] v0, v3;
int v1, v2, v4, v5;
java.lang.Class v6, v7;
v0 := @parameter0: java.lang.Class[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
return v0;
label2:
v2 = lengthof v0;
v3 = newarray (java.lang.Class)[v2];
v4 = 0;
label3:
v5 = lengthof v0;
if v4 >= v5 goto label4;
v6 = v0[v4];
v7 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>(v6);
v3[v4] = v7;
v4 = v4 + 1;
goto label3;
label4:
return v3;
}
public static java.lang.Class wrapperToPrimitive(java.lang.Class)
{
java.lang.Class v0;
java.lang.Object v2;
java.util.Map v1;
v0 := @parameter0: java.lang.Class;
v1 = <org.apache.commons.lang3.ClassUtils: java.util.Map wrapperPrimitiveMap>;
v2 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
return v2;
}
public static transient java.lang.Class[] wrappersToPrimitives(java.lang.Class[])
{
java.lang.Class[] v0, v3;
int v1, v2, v4, v5;
java.lang.Class v6, v7;
v0 := @parameter0: java.lang.Class[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
return v0;
label2:
v2 = lengthof v0;
v3 = newarray (java.lang.Class)[v2];
v4 = 0;
label3:
v5 = lengthof v0;
if v4 >= v5 goto label4;
v6 = v0[v4];
v7 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class wrapperToPrimitive(java.lang.Class)>(v6);
v3[v4] = v7;
v4 = v4 + 1;
goto label3;
label4:
return v3;
}
public static boolean isInnerClass(java.lang.Class)
{
java.lang.Class v0, v1;
boolean v2;
v0 := @parameter0: java.lang.Class;
if v0 == null goto label1;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.Class getEnclosingClass()>();
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static java.lang.Class getClass(java.lang.ClassLoader, java.lang.String, boolean) throws java.lang.ClassNotFoundException
{
java.util.Map v3, v5;
int v10, v12, v9;
java.lang.String v1, v11, v13, v14, v7;
boolean v2, v4;
java.lang.Class v15;
java.lang.ClassNotFoundException v16, v8;
java.lang.Object v6;
java.lang.ClassLoader v0;
v0 := @parameter0: java.lang.ClassLoader;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: boolean;
label1:
v3 = <org.apache.commons.lang3.ClassUtils: java.util.Map namePrimitiveMap>;
v4 = interfaceinvoke v3.<java.util.Map: boolean containsKey(java.lang.Object)>(v1);
if v4 == 0 goto label2;
v5 = <org.apache.commons.lang3.ClassUtils: java.util.Map namePrimitiveMap>;
v6 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
goto label3;
label2:
v7 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String toCanonicalName(java.lang.String)>(v1);
v6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(v7, v2, v0);
label3:
return v6;
label4:
v8 := @caughtexception;
v9 = virtualinvoke v1.<java.lang.String: int lastIndexOf(int)>(46);
v10 = (int) -1;
if v9 == v10 goto label8;
label5:
v11 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, v9);
v12 = v9 + 1;
v13 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int)>(v12);
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v11, v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001$\u0001");
v15 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)>(v0, v14, v2);
label6:
return v15;
label7:
v16 := @caughtexception;
label8:
throw v8;
catch java.lang.ClassNotFoundException from label1 to label3 with label4;
catch java.lang.ClassNotFoundException from label5 to label6 with label7;
}
public static java.lang.Class getClass(java.lang.ClassLoader, java.lang.String) throws java.lang.ClassNotFoundException
{
java.lang.Class v2;
java.lang.ClassLoader v0;
java.lang.String v1;
v0 := @parameter0: java.lang.ClassLoader;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)>(v0, v1, 1);
return v2;
}
public static java.lang.Class getClass(java.lang.String) throws java.lang.ClassNotFoundException
{
java.lang.Class v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.String,boolean)>(v0, 1);
return v1;
}
public static java.lang.Class getClass(java.lang.String, boolean) throws java.lang.ClassNotFoundException
{
java.lang.Thread v2;
java.lang.Class v4, v6;
java.lang.ClassLoader v3, v5;
java.lang.String v0;
boolean v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: boolean;
v2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v3 = virtualinvoke v2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
if v3 != null goto label1;
v4 = class "Lorg/apache/commons/lang3/ClassUtils;";
v5 = virtualinvoke v4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
goto label2;
label1:
v5 = v3;
label2:
v6 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class getClass(java.lang.ClassLoader,java.lang.String,boolean)>(v5, v0, v1);
return v6;
}
public static transient java.lang.reflect.Method getPublicMethod(java.lang.Class, java.lang.String, java.lang.Class[]) throws java.lang.NoSuchMethodException
{
java.lang.NoSuchMethodException v16, v20;
java.util.ArrayList v7;
int v13, v18, v5;
java.lang.String v1, v21, v22;
java.lang.reflect.Method v15, v3;
boolean v11, v14, v19, v6;
java.util.Iterator v10;
java.lang.Class[] v2;
java.util.List v8, v9;
java.lang.Class v0, v17, v4;
java.lang.Object v12;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Class[];
v3 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(v1, v2);
v4 = virtualinvoke v3.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
v5 = virtualinvoke v4.<java.lang.Class: int getModifiers()>();
v6 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(v5);
if v6 == 0 goto label1;
return v3;
label1:
v7 = new java.util.ArrayList;
v8 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.util.List getAllInterfaces(java.lang.Class)>(v0);
specialinvoke v7.<java.util.ArrayList: void <init>(java.util.Collection)>(v8);
v9 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.util.List getAllSuperclasses(java.lang.Class)>(v0);
interfaceinvoke v7.<java.util.List: boolean addAll(java.util.Collection)>(v9);
v10 = interfaceinvoke v7.<java.util.List: java.util.Iterator iterator()>();
label2:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label7;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
v13 = virtualinvoke v12.<java.lang.Class: int getModifiers()>();
v14 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(v13);
if v14 == 0 goto label2;
label3:
v15 = virtualinvoke v12.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(v1, v2);
label4:
goto label6;
label5:
v16 := @caughtexception;
goto label2;
label6:
v17 = virtualinvoke v15.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
v18 = virtualinvoke v17.<java.lang.Class: int getModifiers()>();
v19 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(v18);
if v19 == 0 goto label2;
return v15;
label7:
v20 = new java.lang.NoSuchMethodException;
v21 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.String toString(java.lang.Object)>(v2);
v22 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v1, v21) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Can\'t find a public method for \u0001 \u0001");
specialinvoke v20.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>(v22);
throw v20;
catch java.lang.NoSuchMethodException from label3 to label4 with label5;
}
private static java.lang.String toCanonicalName(java.lang.String)
{
java.lang.Object[] v2;
java.util.Map v8;
int v6, v7;
java.lang.Object v9;
java.lang.StringBuilder v10, v11, v4;
java.lang.String v0, v1;
boolean v3, v5;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String deleteWhitespace(java.lang.String)>(v0);
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "className", v2);
v3 = virtualinvoke v1.<java.lang.String: boolean endsWith(java.lang.String)>("[]");
if v3 == 0 goto label5;
v4 = new java.lang.StringBuilder;
specialinvoke v4.<java.lang.StringBuilder: void <init>()>();
label1:
v5 = virtualinvoke v1.<java.lang.String: boolean endsWith(java.lang.String)>("[]");
if v5 == 0 goto label2;
v6 = virtualinvoke v1.<java.lang.String: int length()>();
v7 = v6 - 2;
v1 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, v7);
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");
goto label1;
label2:
v8 = <org.apache.commons.lang3.ClassUtils: java.util.Map abbreviationMap>;
v9 = interfaceinvoke v8.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v9 == null goto label3;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v9);
goto label4;
label3:
v10 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("L");
v11 = virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v1);
virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");
label4:
v1 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.String toString()>();
label5:
return v1;
}
public static transient java.lang.Class[] toClass(java.lang.Object[])
{
java.lang.Object[] v0;
java.lang.Class[] v2, v4;
int v1, v3, v5, v6, v7;
java.lang.Class v9;
java.lang.Object v10, v8;
v0 := @parameter0: java.lang.Object[];
if v0 != null goto label1;
return null;
label1:
v1 = lengthof v0;
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.Class[] EMPTY_CLASS_ARRAY>;
return v2;
label2:
v3 = lengthof v0;
v4 = newarray (java.lang.Class)[v3];
v5 = 0;
label3:
v6 = lengthof v0;
if v5 >= v6 goto label6;
v7 = v5;
v8 = v0[v5];
if v8 != null goto label4;
v9 = null;
goto label5;
label4:
v10 = v0[v5];
v9 = virtualinvoke v10.<java.lang.Object: java.lang.Class getClass()>();
label5:
v4[v7] = v9;
v5 = v5 + 1;
goto label3;
label6:
return v4;
}
public static java.lang.String getShortCanonicalName(java.lang.Object, java.lang.String)
{
java.lang.Class v2;
java.lang.Object v0;
java.lang.String v1, v3, v4;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
return v1;
label1:
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v2.<java.lang.Class: java.lang.String getName()>();
v4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.String)>(v3);
return v4;
}
public static java.lang.String getCanonicalName(java.lang.Class)
{
java.lang.Class v0;
java.lang.String v1;
v0 := @parameter0: java.lang.Class;
v1 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getCanonicalName(java.lang.Class,java.lang.String)>(v0, "");
return v1;
}
public static java.lang.String getCanonicalName(java.lang.Class, java.lang.String)
{
java.lang.Class v0;
java.lang.String v1, v2, v3;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
return v1;
label1:
v2 = virtualinvoke v0.<java.lang.Class: java.lang.String getCanonicalName()>();
if v2 != null goto label2;
v3 = v1;
goto label3;
label2:
v3 = v2;
label3:
return v3;
}
public static java.lang.String getCanonicalName(java.lang.Object)
{
java.lang.Object v0;
java.lang.String v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getCanonicalName(java.lang.Object,java.lang.String)>(v0, "");
return v1;
}
public static java.lang.String getCanonicalName(java.lang.Object, java.lang.String)
{
java.lang.Class v2;
java.lang.Object v0;
java.lang.String v1, v3, v4;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
return v1;
label1:
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v2.<java.lang.Class: java.lang.String getCanonicalName()>();
if v3 != null goto label2;
v4 = v1;
goto label3;
label2:
v4 = v3;
label3:
return v4;
}
public static java.lang.String getShortCanonicalName(java.lang.Class)
{
java.lang.Class v0;
java.lang.String v1, v2;
v0 := @parameter0: java.lang.Class;
if v0 != null goto label1;
return "";
label1:
v1 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortCanonicalName(java.lang.String)>(v1);
return v2;
}
public static java.lang.String getShortCanonicalName(java.lang.String)
{
java.lang.String v0, v1, v2;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getCanonicalName(java.lang.String)>(v0);
v2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getShortClassName(java.lang.String)>(v1);
return v2;
}
public static java.lang.String getPackageCanonicalName(java.lang.Object, java.lang.String)
{
java.lang.Class v2;
java.lang.Object v0;
java.lang.String v1, v3, v4;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
return v1;
label1:
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v2.<java.lang.Class: java.lang.String getName()>();
v4 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.String)>(v3);
return v4;
}
public static java.lang.String getPackageCanonicalName(java.lang.Class)
{
java.lang.Class v0;
java.lang.String v1, v2;
v0 := @parameter0: java.lang.Class;
if v0 != null goto label1;
return "";
label1:
v1 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageCanonicalName(java.lang.String)>(v1);
return v2;
}
public static java.lang.String getPackageCanonicalName(java.lang.String)
{
java.lang.String v0, v1, v2;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getCanonicalName(java.lang.String)>(v0);
v2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.String getPackageName(java.lang.String)>(v1);
return v2;
}
private static java.lang.String getCanonicalName(java.lang.String)
{
java.util.Map v10;
int v14, v2, v7, v8;
java.lang.String v0, v1, v11, v15, v5;
boolean v3, v4, v6, v9;
java.lang.Object v12;
java.lang.StringBuilder v13;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String deleteWhitespace(java.lang.String)>(v0);
if v1 != null goto label01;
return null;
label01:
v2 = 0;
label02:
v3 = virtualinvoke v1.<java.lang.String: boolean startsWith(java.lang.String)>("[");
if v3 == 0 goto label03;
v2 = v2 + 1;
v1 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int)>(1);
goto label02;
label03:
if v2 >= 1 goto label04;
return v1;
label04:
v4 = virtualinvoke v1.<java.lang.String: boolean startsWith(java.lang.String)>("L");
if v4 == 0 goto label07;
v5 = v1;
v6 = virtualinvoke v1.<java.lang.String: boolean endsWith(java.lang.String)>(";");
if v6 == 0 goto label05;
v7 = virtualinvoke v1.<java.lang.String: int length()>();
v8 = v7 - 1;
goto label06;
label05:
v8 = virtualinvoke v1.<java.lang.String: int length()>();
label06:
virtualinvoke v5.<java.lang.String: java.lang.String substring(int,int)>(1, v8);
goto label08;
label07:
v9 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v9 != 0 goto label08;
v10 = <org.apache.commons.lang3.ClassUtils: java.util.Map reverseAbbreviationMap>;
v11 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, 1);
v12 = interfaceinvoke v10.<java.util.Map: java.lang.Object get(java.lang.Object)>(v11);
label08:
v13 = new java.lang.StringBuilder;
specialinvoke v13.<java.lang.StringBuilder: void <init>(java.lang.String)>(v12);
v14 = 0;
label09:
if v14 >= v2 goto label10;
virtualinvoke v13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");
v14 = v14 + 1;
goto label09;
label10:
v15 = virtualinvoke v13.<java.lang.StringBuilder: java.lang.String toString()>();
return v15;
}
public static java.lang.Iterable hierarchy(java.lang.Class)
{
java.lang.Class v0;
org.apache.commons.lang3.ClassUtils$Interfaces v1;
java.lang.Iterable v2;
v0 := @parameter0: java.lang.Class;
v1 = <org.apache.commons.lang3.ClassUtils$Interfaces: org.apache.commons.lang3.ClassUtils$Interfaces EXCLUDE>;
v2 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Iterable hierarchy(java.lang.Class,org.apache.commons.lang3.ClassUtils$Interfaces)>(v0, v1);
return v2;
}
public static java.lang.Iterable hierarchy(java.lang.Class, org.apache.commons.lang3.ClassUtils$Interfaces)
{
java.lang.Class v0;
org.apache.commons.lang3.ClassUtils$Interfaces v1, v3;
java.lang.Iterable v2, v4;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: org.apache.commons.lang3.ClassUtils$Interfaces;
v2 = staticinvoke <org.apache.commons.lang3.ClassUtils$lambda_hierarchy_0__125: java.lang.Iterable bootstrap$(java.lang.Class)>(v0);
v3 = <org.apache.commons.lang3.ClassUtils$Interfaces: org.apache.commons.lang3.ClassUtils$Interfaces INCLUDE>;
if v1 == v3 goto label1;
return v2;
label1:
v4 = staticinvoke <org.apache.commons.lang3.ClassUtils$lambda_hierarchy_1__126: java.lang.Iterable bootstrap$(java.lang.Iterable)>(v2);
return v4;
}
static void <clinit>()
{
java.util.Map v11, v13, v15, v17, v19, v22, v24, v26, v28, v3, v30, v32, v34, v36, v38, v42, v5, v50, v59, v60, v7, v9;
boolean v45, v49, v55;
java.util.Set v43, v53;
java.util.HashMap v2, v21, v41, v51, v52;
java.lang.String v0, v1;
java.util.Iterator v44, v54;
java.lang.Class v10, v12, v14, v16, v18, v20, v23, v25, v27, v29, v31, v33, v35, v37, v39, v4, v40, v6, v8;
java.lang.Object v46, v47, v48, v56, v57, v58;
v0 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(46);
<org.apache.commons.lang3.ClassUtils: java.lang.String PACKAGE_SEPARATOR> = v0;
v1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(36);
<org.apache.commons.lang3.ClassUtils: java.lang.String INNER_CLASS_SEPARATOR> = v1;
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
<org.apache.commons.lang3.ClassUtils: java.util.Map namePrimitiveMap> = v2;
v3 = <org.apache.commons.lang3.ClassUtils: java.util.Map namePrimitiveMap>;
v4 = <java.lang.Boolean: java.lang.Class TYPE>;
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", v4);
v5 = <org.apache.commons.lang3.ClassUtils: java.util.Map namePrimitiveMap>;
v6 = <java.lang.Byte: java.lang.Class TYPE>;
interfaceinvoke v5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", v6);
v7 = <org.apache.commons.lang3.ClassUtils: java.util.Map namePrimitiveMap>;
v8 = <java.lang.Character: java.lang.Class TYPE>;
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("char", v8);
v9 = <org.apache.commons.lang3.ClassUtils: java.util.Map namePrimitiveMap>;
v10 = <java.lang.Short: java.lang.Class TYPE>;
interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", v10);
v11 = <org.apache.commons.lang3.ClassUtils: java.util.Map namePrimitiveMap>;
v12 = <java.lang.Integer: java.lang.Class TYPE>;
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", v12);
v13 = <org.apache.commons.lang3.ClassUtils: java.util.Map namePrimitiveMap>;
v14 = <java.lang.Long: java.lang.Class TYPE>;
interfaceinvoke v13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", v14);
v15 = <org.apache.commons.lang3.ClassUtils: java.util.Map namePrimitiveMap>;
v16 = <java.lang.Double: java.lang.Class TYPE>;
interfaceinvoke v15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", v16);
v17 = <org.apache.commons.lang3.ClassUtils: java.util.Map namePrimitiveMap>;
v18 = <java.lang.Float: java.lang.Class TYPE>;
interfaceinvoke v17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", v18);
v19 = <org.apache.commons.lang3.ClassUtils: java.util.Map namePrimitiveMap>;
v20 = <java.lang.Void: java.lang.Class TYPE>;
interfaceinvoke v19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("void", v20);
v21 = new java.util.HashMap;
specialinvoke v21.<java.util.HashMap: void <init>()>();
<org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap> = v21;
v22 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;
v23 = <java.lang.Boolean: java.lang.Class TYPE>;
interfaceinvoke v22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v23, class "Ljava/lang/Boolean;");
v24 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;
v25 = <java.lang.Byte: java.lang.Class TYPE>;
interfaceinvoke v24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v25, class "Ljava/lang/Byte;");
v26 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;
v27 = <java.lang.Character: java.lang.Class TYPE>;
interfaceinvoke v26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v27, class "Ljava/lang/Character;");
v28 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;
v29 = <java.lang.Short: java.lang.Class TYPE>;
interfaceinvoke v28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v29, class "Ljava/lang/Short;");
v30 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;
v31 = <java.lang.Integer: java.lang.Class TYPE>;
interfaceinvoke v30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v31, class "Ljava/lang/Integer;");
v32 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;
v33 = <java.lang.Long: java.lang.Class TYPE>;
interfaceinvoke v32.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v33, class "Ljava/lang/Long;");
v34 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;
v35 = <java.lang.Double: java.lang.Class TYPE>;
interfaceinvoke v34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v35, class "Ljava/lang/Double;");
v36 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;
v37 = <java.lang.Float: java.lang.Class TYPE>;
interfaceinvoke v36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v37, class "Ljava/lang/Float;");
v38 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;
v39 = <java.lang.Void: java.lang.Class TYPE>;
v40 = <java.lang.Void: java.lang.Class TYPE>;
interfaceinvoke v38.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v39, v40);
v41 = new java.util.HashMap;
specialinvoke v41.<java.util.HashMap: void <init>()>();
<org.apache.commons.lang3.ClassUtils: java.util.Map wrapperPrimitiveMap> = v41;
v42 = <org.apache.commons.lang3.ClassUtils: java.util.Map primitiveWrapperMap>;
v43 = interfaceinvoke v42.<java.util.Map: java.util.Set entrySet()>();
v44 = interfaceinvoke v43.<java.util.Set: java.util.Iterator iterator()>();
label1:
v45 = interfaceinvoke v44.<java.util.Iterator: boolean hasNext()>();
if v45 == 0 goto label2;
v46 = interfaceinvoke v44.<java.util.Iterator: java.lang.Object next()>();
v47 = interfaceinvoke v46.<java.util.Map$Entry: java.lang.Object getKey()>();
v48 = interfaceinvoke v46.<java.util.Map$Entry: java.lang.Object getValue()>();
v49 = virtualinvoke v47.<java.lang.Object: boolean equals(java.lang.Object)>(v48);
if v49 != 0 goto label1;
v50 = <org.apache.commons.lang3.ClassUtils: java.util.Map wrapperPrimitiveMap>;
interfaceinvoke v50.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v48, v47);
goto label1;
label2:
v51 = new java.util.HashMap;
specialinvoke v51.<java.util.HashMap: void <init>()>();
interfaceinvoke v51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", "I");
interfaceinvoke v51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", "Z");
interfaceinvoke v51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", "F");
interfaceinvoke v51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", "J");
interfaceinvoke v51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", "S");
interfaceinvoke v51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", "B");
interfaceinvoke v51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", "D");
interfaceinvoke v51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("char", "C");
v52 = new java.util.HashMap;
specialinvoke v52.<java.util.HashMap: void <init>()>();
v53 = interfaceinvoke v51.<java.util.Map: java.util.Set entrySet()>();
v54 = interfaceinvoke v53.<java.util.Set: java.util.Iterator iterator()>();
label3:
v55 = interfaceinvoke v54.<java.util.Iterator: boolean hasNext()>();
if v55 == 0 goto label4;
v56 = interfaceinvoke v54.<java.util.Iterator: java.lang.Object next()>();
v57 = interfaceinvoke v56.<java.util.Map$Entry: java.lang.Object getValue()>();
v58 = interfaceinvoke v56.<java.util.Map$Entry: java.lang.Object getKey()>();
interfaceinvoke v52.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v57, v58);
goto label3;
label4:
v59 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v51);
<org.apache.commons.lang3.ClassUtils: java.util.Map abbreviationMap> = v59;
v60 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v52);
<org.apache.commons.lang3.ClassUtils: java.util.Map reverseAbbreviationMap> = v60;
return;
}
}