public class org.apache.commons.lang3.Conversion extends java.lang.Object
{
private static final boolean[] TTTT;
private static final boolean[] FTTT;
private static final boolean[] TFTT;
private static final boolean[] FFTT;
private static final boolean[] TTFT;
private static final boolean[] FTFT;
private static final boolean[] TFFT;
private static final boolean[] FFFT;
private static final boolean[] TTTF;
private static final boolean[] FTTF;
private static final boolean[] TFTF;
private static final boolean[] FFTF;
private static final boolean[] TTFF;
private static final boolean[] FTFF;
private static final boolean[] TFFF;
private static final boolean[] FFFF;
static final boolean $assertionsDisabled;
public void <init>()
{
org.apache.commons.lang3.Conversion v0;
v0 := @this: org.apache.commons.lang3.Conversion;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static int hexDigitToInt(char)
{
int v1;
char v0;
java.lang.String v3;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: char;
v1 = staticinvoke <java.lang.Character: int digit(char,int)>(v0, 16);
if v1 >= 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot interpret \'\u0001\' as a hexadecimal digit");
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
throw v2;
label1:
return v1;
}
public static int hexDigitMsb0ToInt(char)
{
char v0;
java.lang.String v2;
java.lang.IllegalArgumentException v1;
v0 := @parameter0: char;
tableswitch(v0)
{
case 48: goto label01;
case 49: goto label02;
case 50: goto label03;
case 51: goto label04;
case 52: goto label05;
case 53: goto label06;
case 54: goto label07;
case 55: goto label08;
case 56: goto label09;
case 57: goto label10;
case 58: goto label17;
case 59: goto label17;
case 60: goto label17;
case 61: goto label17;
case 62: goto label17;
case 63: goto label17;
case 64: goto label17;
case 65: goto label11;
case 66: goto label12;
case 67: goto label13;
case 68: goto label14;
case 69: goto label15;
case 70: goto label16;
case 71: goto label17;
case 72: goto label17;
case 73: goto label17;
case 74: goto label17;
case 75: goto label17;
case 76: goto label17;
case 77: goto label17;
case 78: goto label17;
case 79: goto label17;
case 80: goto label17;
case 81: goto label17;
case 82: goto label17;
case 83: goto label17;
case 84: goto label17;
case 85: goto label17;
case 86: goto label17;
case 87: goto label17;
case 88: goto label17;
case 89: goto label17;
case 90: goto label17;
case 91: goto label17;
case 92: goto label17;
case 93: goto label17;
case 94: goto label17;
case 95: goto label17;
case 96: goto label17;
case 97: goto label11;
case 98: goto label12;
case 99: goto label13;
case 100: goto label14;
case 101: goto label15;
case 102: goto label16;
default: goto label17;
};
label01:
return 0;
label02:
return 8;
label03:
return 4;
label04:
return 12;
label05:
return 2;
label06:
return 10;
label07:
return 6;
label08:
return 14;
label09:
return 1;
label10:
return 9;
label11:
return 5;
label12:
return 13;
label13:
return 3;
label14:
return 11;
label15:
return 7;
label16:
return 15;
label17:
v1 = new java.lang.IllegalArgumentException;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot interpret \'\u0001\' as a hexadecimal digit");
specialinvoke v1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v2);
throw v1;
}
public static boolean[] hexDigitToBinary(char)
{
java.lang.String v34;
boolean[] v1, v11, v13, v15, v17, v19, v21, v23, v25, v27, v29, v3, v31, v5, v7, v9;
char v0;
java.lang.IllegalArgumentException v33;
java.lang.Object v10, v12, v14, v16, v18, v2, v20, v22, v24, v26, v28, v30, v32, v4, v6, v8;
v0 := @parameter0: char;
tableswitch(v0)
{
case 48: goto label01;
case 49: goto label02;
case 50: goto label03;
case 51: goto label04;
case 52: goto label05;
case 53: goto label06;
case 54: goto label07;
case 55: goto label08;
case 56: goto label09;
case 57: goto label10;
case 58: goto label17;
case 59: goto label17;
case 60: goto label17;
case 61: goto label17;
case 62: goto label17;
case 63: goto label17;
case 64: goto label17;
case 65: goto label11;
case 66: goto label12;
case 67: goto label13;
case 68: goto label14;
case 69: goto label15;
case 70: goto label16;
case 71: goto label17;
case 72: goto label17;
case 73: goto label17;
case 74: goto label17;
case 75: goto label17;
case 76: goto label17;
case 77: goto label17;
case 78: goto label17;
case 79: goto label17;
case 80: goto label17;
case 81: goto label17;
case 82: goto label17;
case 83: goto label17;
case 84: goto label17;
case 85: goto label17;
case 86: goto label17;
case 87: goto label17;
case 88: goto label17;
case 89: goto label17;
case 90: goto label17;
case 91: goto label17;
case 92: goto label17;
case 93: goto label17;
case 94: goto label17;
case 95: goto label17;
case 96: goto label17;
case 97: goto label11;
case 98: goto label12;
case 99: goto label13;
case 100: goto label14;
case 101: goto label15;
case 102: goto label16;
default: goto label17;
};
label01:
v1 = <org.apache.commons.lang3.Conversion: boolean[] FFFF>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Object clone()>();
return v2;
label02:
v3 = <org.apache.commons.lang3.Conversion: boolean[] TFFF>;
v4 = virtualinvoke v3.<java.lang.Object: java.lang.Object clone()>();
return v4;
label03:
v5 = <org.apache.commons.lang3.Conversion: boolean[] FTFF>;
v6 = virtualinvoke v5.<java.lang.Object: java.lang.Object clone()>();
return v6;
label04:
v7 = <org.apache.commons.lang3.Conversion: boolean[] TTFF>;
v8 = virtualinvoke v7.<java.lang.Object: java.lang.Object clone()>();
return v8;
label05:
v9 = <org.apache.commons.lang3.Conversion: boolean[] FFTF>;
v10 = virtualinvoke v9.<java.lang.Object: java.lang.Object clone()>();
return v10;
label06:
v11 = <org.apache.commons.lang3.Conversion: boolean[] TFTF>;
v12 = virtualinvoke v11.<java.lang.Object: java.lang.Object clone()>();
return v12;
label07:
v13 = <org.apache.commons.lang3.Conversion: boolean[] FTTF>;
v14 = virtualinvoke v13.<java.lang.Object: java.lang.Object clone()>();
return v14;
label08:
v15 = <org.apache.commons.lang3.Conversion: boolean[] TTTF>;
v16 = virtualinvoke v15.<java.lang.Object: java.lang.Object clone()>();
return v16;
label09:
v17 = <org.apache.commons.lang3.Conversion: boolean[] FFFT>;
v18 = virtualinvoke v17.<java.lang.Object: java.lang.Object clone()>();
return v18;
label10:
v19 = <org.apache.commons.lang3.Conversion: boolean[] TFFT>;
v20 = virtualinvoke v19.<java.lang.Object: java.lang.Object clone()>();
return v20;
label11:
v21 = <org.apache.commons.lang3.Conversion: boolean[] FTFT>;
v22 = virtualinvoke v21.<java.lang.Object: java.lang.Object clone()>();
return v22;
label12:
v23 = <org.apache.commons.lang3.Conversion: boolean[] TTFT>;
v24 = virtualinvoke v23.<java.lang.Object: java.lang.Object clone()>();
return v24;
label13:
v25 = <org.apache.commons.lang3.Conversion: boolean[] FFTT>;
v26 = virtualinvoke v25.<java.lang.Object: java.lang.Object clone()>();
return v26;
label14:
v27 = <org.apache.commons.lang3.Conversion: boolean[] TFTT>;
v28 = virtualinvoke v27.<java.lang.Object: java.lang.Object clone()>();
return v28;
label15:
v29 = <org.apache.commons.lang3.Conversion: boolean[] FTTT>;
v30 = virtualinvoke v29.<java.lang.Object: java.lang.Object clone()>();
return v30;
label16:
v31 = <org.apache.commons.lang3.Conversion: boolean[] TTTT>;
v32 = virtualinvoke v31.<java.lang.Object: java.lang.Object clone()>();
return v32;
label17:
v33 = new java.lang.IllegalArgumentException;
v34 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot interpret \'\u0001\' as a hexadecimal digit");
specialinvoke v33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v34);
throw v33;
}
public static boolean[] hexDigitMsb0ToBinary(char)
{
java.lang.String v34;
boolean[] v1, v11, v13, v15, v17, v19, v21, v23, v25, v27, v29, v3, v31, v5, v7, v9;
char v0;
java.lang.IllegalArgumentException v33;
java.lang.Object v10, v12, v14, v16, v18, v2, v20, v22, v24, v26, v28, v30, v32, v4, v6, v8;
v0 := @parameter0: char;
tableswitch(v0)
{
case 48: goto label01;
case 49: goto label02;
case 50: goto label03;
case 51: goto label04;
case 52: goto label05;
case 53: goto label06;
case 54: goto label07;
case 55: goto label08;
case 56: goto label09;
case 57: goto label10;
case 58: goto label17;
case 59: goto label17;
case 60: goto label17;
case 61: goto label17;
case 62: goto label17;
case 63: goto label17;
case 64: goto label17;
case 65: goto label11;
case 66: goto label12;
case 67: goto label13;
case 68: goto label14;
case 69: goto label15;
case 70: goto label16;
case 71: goto label17;
case 72: goto label17;
case 73: goto label17;
case 74: goto label17;
case 75: goto label17;
case 76: goto label17;
case 77: goto label17;
case 78: goto label17;
case 79: goto label17;
case 80: goto label17;
case 81: goto label17;
case 82: goto label17;
case 83: goto label17;
case 84: goto label17;
case 85: goto label17;
case 86: goto label17;
case 87: goto label17;
case 88: goto label17;
case 89: goto label17;
case 90: goto label17;
case 91: goto label17;
case 92: goto label17;
case 93: goto label17;
case 94: goto label17;
case 95: goto label17;
case 96: goto label17;
case 97: goto label11;
case 98: goto label12;
case 99: goto label13;
case 100: goto label14;
case 101: goto label15;
case 102: goto label16;
default: goto label17;
};
label01:
v1 = <org.apache.commons.lang3.Conversion: boolean[] FFFF>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Object clone()>();
return v2;
label02:
v3 = <org.apache.commons.lang3.Conversion: boolean[] FFFT>;
v4 = virtualinvoke v3.<java.lang.Object: java.lang.Object clone()>();
return v4;
label03:
v5 = <org.apache.commons.lang3.Conversion: boolean[] FFTF>;
v6 = virtualinvoke v5.<java.lang.Object: java.lang.Object clone()>();
return v6;
label04:
v7 = <org.apache.commons.lang3.Conversion: boolean[] FFTT>;
v8 = virtualinvoke v7.<java.lang.Object: java.lang.Object clone()>();
return v8;
label05:
v9 = <org.apache.commons.lang3.Conversion: boolean[] FTFF>;
v10 = virtualinvoke v9.<java.lang.Object: java.lang.Object clone()>();
return v10;
label06:
v11 = <org.apache.commons.lang3.Conversion: boolean[] FTFT>;
v12 = virtualinvoke v11.<java.lang.Object: java.lang.Object clone()>();
return v12;
label07:
v13 = <org.apache.commons.lang3.Conversion: boolean[] FTTF>;
v14 = virtualinvoke v13.<java.lang.Object: java.lang.Object clone()>();
return v14;
label08:
v15 = <org.apache.commons.lang3.Conversion: boolean[] FTTT>;
v16 = virtualinvoke v15.<java.lang.Object: java.lang.Object clone()>();
return v16;
label09:
v17 = <org.apache.commons.lang3.Conversion: boolean[] TFFF>;
v18 = virtualinvoke v17.<java.lang.Object: java.lang.Object clone()>();
return v18;
label10:
v19 = <org.apache.commons.lang3.Conversion: boolean[] TFFT>;
v20 = virtualinvoke v19.<java.lang.Object: java.lang.Object clone()>();
return v20;
label11:
v21 = <org.apache.commons.lang3.Conversion: boolean[] TFTF>;
v22 = virtualinvoke v21.<java.lang.Object: java.lang.Object clone()>();
return v22;
label12:
v23 = <org.apache.commons.lang3.Conversion: boolean[] TFTT>;
v24 = virtualinvoke v23.<java.lang.Object: java.lang.Object clone()>();
return v24;
label13:
v25 = <org.apache.commons.lang3.Conversion: boolean[] TTFF>;
v26 = virtualinvoke v25.<java.lang.Object: java.lang.Object clone()>();
return v26;
label14:
v27 = <org.apache.commons.lang3.Conversion: boolean[] TTFT>;
v28 = virtualinvoke v27.<java.lang.Object: java.lang.Object clone()>();
return v28;
label15:
v29 = <org.apache.commons.lang3.Conversion: boolean[] TTTF>;
v30 = virtualinvoke v29.<java.lang.Object: java.lang.Object clone()>();
return v30;
label16:
v31 = <org.apache.commons.lang3.Conversion: boolean[] TTTT>;
v32 = virtualinvoke v31.<java.lang.Object: java.lang.Object clone()>();
return v32;
label17:
v33 = new java.lang.IllegalArgumentException;
v34 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot interpret \'\u0001\' as a hexadecimal digit");
specialinvoke v33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v34);
throw v33;
}
public static char binaryToHexDigit(boolean[])
{
boolean[] v0;
char v1;
v0 := @parameter0: boolean[];
v1 = staticinvoke <org.apache.commons.lang3.Conversion: char binaryToHexDigit(boolean[],int)>(v0, 0);
return v1;
}
public static char binaryToHexDigit(boolean[], int)
{
boolean v11, v12, v14, v17, v18, v20, v25, v27, v28, v30, v35, v36, v38, v7, v9;
int v1, v10, v16, v2, v22, v23, v24, v26, v32, v33, v34, v4, v5, v6, v8;
boolean[] v0;
char v13, v15, v19, v21, v29, v31, v37, v39;
java.lang.IllegalArgumentException v3;
v0 := @parameter0: boolean[];
v1 := @parameter1: int;
v2 = lengthof v0;
if v2 != 0 goto label01;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot convert an empty array.");
throw v3;
label01:
v4 = lengthof v0;
v5 = v1 + 3;
if v4 <= v5 goto label13;
v6 = v1 + 3;
v7 = v0[v6];
if v7 == 0 goto label13;
v8 = v1 + 2;
v9 = v0[v8];
if v9 == 0 goto label07;
v10 = v1 + 1;
v11 = v0[v10];
if v11 == 0 goto label04;
v12 = v0[v1];
if v12 == 0 goto label02;
v13 = 102;
goto label03;
label02:
v13 = 101;
label03:
return v13;
label04:
v14 = v0[v1];
if v14 == 0 goto label05;
v15 = 100;
goto label06;
label05:
v15 = 99;
label06:
return v15;
label07:
v16 = v1 + 1;
v17 = v0[v16];
if v17 == 0 goto label10;
v18 = v0[v1];
if v18 == 0 goto label08;
v19 = 98;
goto label09;
label08:
v19 = 97;
label09:
return v19;
label10:
v20 = v0[v1];
if v20 == 0 goto label11;
v21 = 57;
goto label12;
label11:
v21 = 56;
label12:
return v21;
label13:
v22 = lengthof v0;
v23 = v1 + 2;
if v22 <= v23 goto label19;
v24 = v1 + 2;
v25 = v0[v24];
if v25 == 0 goto label19;
v26 = v1 + 1;
v27 = v0[v26];
if v27 == 0 goto label16;
v28 = v0[v1];
if v28 == 0 goto label14;
v29 = 55;
goto label15;
label14:
v29 = 54;
label15:
return v29;
label16:
v30 = v0[v1];
if v30 == 0 goto label17;
v31 = 53;
goto label18;
label17:
v31 = 52;
label18:
return v31;
label19:
v32 = lengthof v0;
v33 = v1 + 1;
if v32 <= v33 goto label22;
v34 = v1 + 1;
v35 = v0[v34];
if v35 == 0 goto label22;
v36 = v0[v1];
if v36 == 0 goto label20;
v37 = 51;
goto label21;
label20:
v37 = 50;
label21:
return v37;
label22:
v38 = v0[v1];
if v38 == 0 goto label23;
v39 = 49;
goto label24;
label23:
v39 = 48;
label24:
return v39;
}
public static char binaryToHexDigitMsb0_4bits(boolean[])
{
boolean[] v0;
char v1;
v0 := @parameter0: boolean[];
v1 = staticinvoke <org.apache.commons.lang3.Conversion: char binaryToHexDigitMsb0_4bits(boolean[],int)>(v0, 0);
return v1;
}
public static char binaryToHexDigitMsb0_4bits(boolean[], int)
{
boolean v12, v14, v16, v17, v19, v22, v23, v25, v28, v30, v31, v33, v36, v37, v39;
int v1, v11, v13, v15, v2, v21, v27, v29, v35, v4, v6, v7, v9;
java.lang.String v10, v5;
boolean[] v0;
char v18, v20, v24, v26, v32, v34, v38, v40;
java.lang.IllegalArgumentException v3, v8;
v0 := @parameter0: boolean[];
v1 := @parameter1: int;
v2 = lengthof v0;
if v2 <= 8 goto label01;
v3 = new java.lang.IllegalArgumentException;
v4 = lengthof v0;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("src.length>8: src.length=\u0001");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v3;
label01:
v6 = lengthof v0;
v7 = v6 - v1;
if v7 >= 4 goto label02;
v8 = new java.lang.IllegalArgumentException;
v9 = lengthof v0;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v9, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("src.length-srcPos<4: src.length=\u0001, srcPos=\u0001");
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v8;
label02:
v11 = v1 + 3;
v12 = v0[v11];
if v12 == 0 goto label14;
v13 = v1 + 2;
v14 = v0[v13];
if v14 == 0 goto label08;
v15 = v1 + 1;
v16 = v0[v15];
if v16 == 0 goto label05;
v17 = v0[v1];
if v17 == 0 goto label03;
v18 = 102;
goto label04;
label03:
v18 = 55;
label04:
return v18;
label05:
v19 = v0[v1];
if v19 == 0 goto label06;
v20 = 98;
goto label07;
label06:
v20 = 51;
label07:
return v20;
label08:
v21 = v1 + 1;
v22 = v0[v21];
if v22 == 0 goto label11;
v23 = v0[v1];
if v23 == 0 goto label09;
v24 = 100;
goto label10;
label09:
v24 = 53;
label10:
return v24;
label11:
v25 = v0[v1];
if v25 == 0 goto label12;
v26 = 57;
goto label13;
label12:
v26 = 49;
label13:
return v26;
label14:
v27 = v1 + 2;
v28 = v0[v27];
if v28 == 0 goto label20;
v29 = v1 + 1;
v30 = v0[v29];
if v30 == 0 goto label17;
v31 = v0[v1];
if v31 == 0 goto label15;
v32 = 101;
goto label16;
label15:
v32 = 54;
label16:
return v32;
label17:
v33 = v0[v1];
if v33 == 0 goto label18;
v34 = 97;
goto label19;
label18:
v34 = 50;
label19:
return v34;
label20:
v35 = v1 + 1;
v36 = v0[v35];
if v36 == 0 goto label23;
v37 = v0[v1];
if v37 == 0 goto label21;
v38 = 99;
goto label22;
label21:
v38 = 52;
label22:
return v38;
label23:
v39 = v0[v1];
if v39 == 0 goto label24;
v40 = 56;
goto label25;
label24:
v40 = 48;
label25:
return v40;
}
public static char binaryBeMsb0ToHexDigit(boolean[])
{
boolean[] v0;
char v1;
v0 := @parameter0: boolean[];
v1 = staticinvoke <org.apache.commons.lang3.Conversion: char binaryBeMsb0ToHexDigit(boolean[],int)>(v0, 0);
return v1;
}
public static char binaryBeMsb0ToHexDigit(boolean[], int)
{
boolean v13, v15, v17, v19, v22, v25, v27, v30, v33, v35, v37, v40, v43, v45, v48;
int v1, v10, v11, v12, v14, v16, v18, v2, v21, v24, v26, v29, v32, v34, v36, v39, v4, v42, v44, v47, v5, v6, v7, v8;
boolean[] v0, v9;
char v20, v23, v28, v31, v38, v41, v46, v49;
java.lang.IllegalArgumentException v3;
v0 := @parameter0: boolean[];
v1 := @parameter1: int;
v2 = lengthof v0;
if v2 != 0 goto label01;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot convert an empty array.");
throw v3;
label01:
v4 = lengthof v0;
v5 = v4 - 1;
v6 = v5 - v1;
v7 = v6 + 1;
v8 = staticinvoke <java.lang.Math: int min(int,int)>(4, v7);
v9 = newarray (boolean)[4];
v10 = v6 + 1;
v11 = v10 - v8;
v12 = 4 - v8;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, v11, v9, v12, v8);
v13 = v9[0];
if v13 == 0 goto label13;
v14 = lengthof v9;
if v14 <= 1 goto label07;
v15 = v9[1];
if v15 == 0 goto label07;
v16 = lengthof v9;
if v16 <= 2 goto label04;
v17 = v9[2];
if v17 == 0 goto label04;
v18 = lengthof v9;
if v18 <= 3 goto label02;
v19 = v9[3];
if v19 == 0 goto label02;
v20 = 102;
goto label03;
label02:
v20 = 101;
label03:
return v20;
label04:
v21 = lengthof v9;
if v21 <= 3 goto label05;
v22 = v9[3];
if v22 == 0 goto label05;
v23 = 100;
goto label06;
label05:
v23 = 99;
label06:
return v23;
label07:
v24 = lengthof v9;
if v24 <= 2 goto label10;
v25 = v9[2];
if v25 == 0 goto label10;
v26 = lengthof v9;
if v26 <= 3 goto label08;
v27 = v9[3];
if v27 == 0 goto label08;
v28 = 98;
goto label09;
label08:
v28 = 97;
label09:
return v28;
label10:
v29 = lengthof v9;
if v29 <= 3 goto label11;
v30 = v9[3];
if v30 == 0 goto label11;
v31 = 57;
goto label12;
label11:
v31 = 56;
label12:
return v31;
label13:
v32 = lengthof v9;
if v32 <= 1 goto label19;
v33 = v9[1];
if v33 == 0 goto label19;
v34 = lengthof v9;
if v34 <= 2 goto label16;
v35 = v9[2];
if v35 == 0 goto label16;
v36 = lengthof v9;
if v36 <= 3 goto label14;
v37 = v9[3];
if v37 == 0 goto label14;
v38 = 55;
goto label15;
label14:
v38 = 54;
label15:
return v38;
label16:
v39 = lengthof v9;
if v39 <= 3 goto label17;
v40 = v9[3];
if v40 == 0 goto label17;
v41 = 53;
goto label18;
label17:
v41 = 52;
label18:
return v41;
label19:
v42 = lengthof v9;
if v42 <= 2 goto label22;
v43 = v9[2];
if v43 == 0 goto label22;
v44 = lengthof v9;
if v44 <= 3 goto label20;
v45 = v9[3];
if v45 == 0 goto label20;
v46 = 51;
goto label21;
label20:
v46 = 50;
label21:
return v46;
label22:
v47 = lengthof v9;
if v47 <= 3 goto label23;
v48 = v9[3];
if v48 == 0 goto label23;
v49 = 49;
goto label24;
label23:
v49 = 48;
label24:
return v49;
}
public static char intToHexDigit(int)
{
int v0;
char v1;
java.lang.String v3;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: int;
v1 = staticinvoke <java.lang.Character: char forDigit(int,int)>(v0, 16);
if v1 != 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("nibble value not between 0 and 15: \u0001");
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
throw v2;
label1:
return v1;
}
public static char intToHexDigitMsb0(int)
{
int v0;
java.lang.String v2;
java.lang.IllegalArgumentException v1;
v0 := @parameter0: int;
tableswitch(v0)
{
case 0: goto label01;
case 1: goto label02;
case 2: goto label03;
case 3: goto label04;
case 4: goto label05;
case 5: goto label06;
case 6: goto label07;
case 7: goto label08;
case 8: goto label09;
case 9: goto label10;
case 10: goto label11;
case 11: goto label12;
case 12: goto label13;
case 13: goto label14;
case 14: goto label15;
case 15: goto label16;
default: goto label17;
};
label01:
return 48;
label02:
return 56;
label03:
return 52;
label04:
return 99;
label05:
return 50;
label06:
return 97;
label07:
return 54;
label08:
return 101;
label09:
return 49;
label10:
return 57;
label11:
return 53;
label12:
return 100;
label13:
return 51;
label14:
return 98;
label15:
return 55;
label16:
return 102;
label17:
v1 = new java.lang.IllegalArgumentException;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("nibble value not between 0 and 15: \u0001");
specialinvoke v1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v2);
throw v1;
}
public static long intArrayToLong(int[], int, long, int, int)
{
long v10, v16, v17, v18, v19, v2, v20;
int[] v0;
int v1, v11, v12, v13, v14, v15, v3, v4, v5, v6, v7, v8;
java.lang.IllegalArgumentException v9;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 := @parameter2: long;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = lengthof v0;
if v5 != 0 goto label1;
if v1 == 0 goto label2;
label1:
if 0 != v4 goto label3;
label2:
return v2;
label3:
v6 = v4 - 1;
v7 = v6 * 32;
v8 = v7 + v3;
if v8 < 64 goto label4;
v9 = new java.lang.IllegalArgumentException;
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nInts-1)*32+dstPos is greater or equal to than 64");
throw v9;
label4:
v10 = v2;
v11 = 0;
label5:
if v11 >= v4 goto label6;
v12 = v11 * 32;
v13 = v12 + v3;
v14 = v11 + v1;
v15 = v0[v14];
v16 = 4294967295L & v15;
v17 = v16 << v13;
v18 = 4294967295L << v13;
v19 = v18 ^ -1L;
v20 = v10 & v19;
v10 = v20 | v17;
v11 = v11 + 1;
goto label5;
label6:
return v10;
}
public static long shortArrayToLong(short[], int, long, int, int)
{
long v10, v16, v17, v18, v19, v2, v20;
short v15;
int v1, v11, v12, v13, v14, v3, v4, v5, v6, v7, v8;
java.lang.IllegalArgumentException v9;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: int;
v2 := @parameter2: long;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = lengthof v0;
if v5 != 0 goto label1;
if v1 == 0 goto label2;
label1:
if 0 != v4 goto label3;
label2:
return v2;
label3:
v6 = v4 - 1;
v7 = v6 * 16;
v8 = v7 + v3;
if v8 < 64 goto label4;
v9 = new java.lang.IllegalArgumentException;
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nShorts-1)*16+dstPos is greater or equal to than 64");
throw v9;
label4:
v10 = v2;
v11 = 0;
label5:
if v11 >= v4 goto label6;
v12 = v11 * 16;
v13 = v12 + v3;
v14 = v11 + v1;
v15 = v0[v14];
v16 = 65535L & v15;
v17 = v16 << v13;
v18 = 65535L << v13;
v19 = v18 ^ -1L;
v20 = v10 & v19;
v10 = v20 | v17;
v11 = v11 + 1;
goto label5;
label6:
return v10;
}
public static int shortArrayToInt(short[], int, int, int, int)
{
short v15;
int v1, v10, v11, v12, v13, v14, v16, v17, v18, v19, v2, v20, v21, v22, v23, v3, v4, v5, v6, v7, v8;
java.lang.IllegalArgumentException v9;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = lengthof v0;
if v5 != 0 goto label1;
if v1 == 0 goto label2;
label1:
if 0 != v4 goto label3;
label2:
return v2;
label3:
v6 = v4 - 1;
v7 = v6 * 16;
v8 = v7 + v3;
if v8 < 32 goto label4;
v9 = new java.lang.IllegalArgumentException;
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nShorts-1)*16+dstPos is greater or equal to than 32");
throw v9;
label4:
v10 = v2;
v11 = 0;
label5:
if v11 >= v4 goto label6;
v12 = v11 * 16;
v13 = v12 + v3;
v14 = v11 + v1;
v15 = v0[v14];
v16 = (int) 65535;
v17 = v16 & v15;
v18 = v17 << v13;
v19 = (int) 65535;
v20 = v19 << v13;
v21 = (int) -1;
v22 = v20 ^ v21;
v23 = v10 & v22;
v10 = v23 | v18;
v11 = v11 + 1;
goto label5;
label6:
return v10;
}
public static long byteArrayToLong(byte[], int, long, int, int)
{
byte[] v0;
long v10, v16, v17, v18, v19, v2, v20;
byte v15;
int v1, v11, v12, v13, v14, v3, v4, v5, v6, v7, v8;
java.lang.IllegalArgumentException v9;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: long;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = lengthof v0;
if v5 != 0 goto label1;
if v1 == 0 goto label2;
label1:
if 0 != v4 goto label3;
label2:
return v2;
label3:
v6 = v4 - 1;
v7 = v6 * 8;
v8 = v7 + v3;
if v8 < 64 goto label4;
v9 = new java.lang.IllegalArgumentException;
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nBytes-1)*8+dstPos is greater or equal to than 64");
throw v9;
label4:
v10 = v2;
v11 = 0;
label5:
if v11 >= v4 goto label6;
v12 = v11 * 8;
v13 = v12 + v3;
v14 = v11 + v1;
v15 = v0[v14];
v16 = 255L & v15;
v17 = v16 << v13;
v18 = 255L << v13;
v19 = v18 ^ -1L;
v20 = v10 & v19;
v10 = v20 | v17;
v11 = v11 + 1;
goto label5;
label6:
return v10;
}
public static int byteArrayToInt(byte[], int, int, int, int)
{
byte[] v0;
short v16;
byte v15;
int v1, v10, v11, v12, v13, v14, v17, v18, v19, v2, v20, v21, v3, v4, v5, v6, v7, v8;
java.lang.IllegalArgumentException v9;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = lengthof v0;
if v5 != 0 goto label1;
if v1 == 0 goto label2;
label1:
if 0 != v4 goto label3;
label2:
return v2;
label3:
v6 = v4 - 1;
v7 = v6 * 8;
v8 = v7 + v3;
if v8 < 32 goto label4;
v9 = new java.lang.IllegalArgumentException;
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nBytes-1)*8+dstPos is greater or equal to than 32");
throw v9;
label4:
v10 = v2;
v11 = 0;
label5:
if v11 >= v4 goto label6;
v12 = v11 * 8;
v13 = v12 + v3;
v14 = v11 + v1;
v15 = v0[v14];
v16 = 255 & v15;
v17 = v16 << v13;
v18 = 255 << v13;
v19 = (int) -1;
v20 = v18 ^ v19;
v21 = v10 & v20;
v10 = v21 | v17;
v11 = v11 + 1;
goto label5;
label6:
return v10;
}
public static short byteArrayToShort(byte[], int, short, int, int)
{
byte[] v0;
short v15, v2;
byte v14;
int v1, v10, v11, v12, v13, v16, v17, v18, v19, v20, v21, v3, v4, v5, v6, v7, v8;
java.lang.IllegalArgumentException v9;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: short;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = lengthof v0;
if v5 != 0 goto label1;
if v1 == 0 goto label2;
label1:
if 0 != v4 goto label3;
label2:
return v2;
label3:
v6 = v4 - 1;
v7 = v6 * 8;
v8 = v7 + v3;
if v8 < 16 goto label4;
v9 = new java.lang.IllegalArgumentException;
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nBytes-1)*8+dstPos is greater or equal to than 16");
throw v9;
label4:
v10 = 0;
label5:
if v10 >= v4 goto label6;
v11 = v10 * 8;
v12 = v11 + v3;
v13 = v10 + v1;
v14 = v0[v13];
v15 = 255 & v14;
v16 = v15 << v12;
v17 = 255 << v12;
v18 = (int) -1;
v19 = v17 ^ v18;
v20 = v2 & v19;
v21 = v20 | v16;
v10 = v10 + 1;
goto label5;
label6:
return v21;
}
public static long hexToLong(java.lang.String, int, long, int, int)
{
long v16, v17, v18, v19, v2, v20, v9;
int v1, v10, v11, v12, v13, v15, v3, v4, v5, v6, v7;
java.lang.String v0;
char v14;
java.lang.IllegalArgumentException v8;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: long;
v3 := @parameter3: int;
v4 := @parameter4: int;
if 0 != v4 goto label1;
return v2;
label1:
v5 = v4 - 1;
v6 = v5 * 4;
v7 = v6 + v3;
if v7 < 64 goto label2;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nHexs-1)*4+dstPos is greater or equal to than 64");
throw v8;
label2:
v9 = v2;
v10 = 0;
label3:
if v10 >= v4 goto label4;
v11 = v10 * 4;
v12 = v11 + v3;
v13 = v10 + v1;
v14 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v13);
v15 = staticinvoke <org.apache.commons.lang3.Conversion: int hexDigitToInt(char)>(v14);
v16 = 15L & v15;
v17 = v16 << v12;
v18 = 15L << v12;
v19 = v18 ^ -1L;
v20 = v9 & v19;
v9 = v20 | v17;
v10 = v10 + 1;
goto label3;
label4:
return v9;
}
public static int hexToInt(java.lang.String, int, int, int, int)
{
int v1, v10, v11, v12, v13, v15, v16, v17, v18, v19, v2, v20, v21, v3, v4, v5, v6, v7, v9;
java.lang.String v0;
char v14;
java.lang.IllegalArgumentException v8;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 := @parameter4: int;
if 0 != v4 goto label1;
return v2;
label1:
v5 = v4 - 1;
v6 = v5 * 4;
v7 = v6 + v3;
if v7 < 32 goto label2;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nHexs-1)*4+dstPos is greater or equal to than 32");
throw v8;
label2:
v9 = v2;
v10 = 0;
label3:
if v10 >= v4 goto label4;
v11 = v10 * 4;
v12 = v11 + v3;
v13 = v10 + v1;
v14 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v13);
v15 = staticinvoke <org.apache.commons.lang3.Conversion: int hexDigitToInt(char)>(v14);
v16 = 15 & v15;
v17 = v16 << v12;
v18 = 15 << v12;
v19 = (int) -1;
v20 = v18 ^ v19;
v21 = v9 & v20;
v9 = v21 | v17;
v10 = v10 + 1;
goto label3;
label4:
return v9;
}
public static short hexToShort(java.lang.String, int, short, int, int)
{
short v2;
int v1, v10, v11, v12, v14, v15, v16, v17, v18, v19, v20, v21, v3, v4, v5, v6, v7, v9;
java.lang.String v0;
char v13;
java.lang.IllegalArgumentException v8;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: short;
v3 := @parameter3: int;
v4 := @parameter4: int;
if 0 != v4 goto label1;
return v2;
label1:
v5 = v4 - 1;
v6 = v5 * 4;
v7 = v6 + v3;
if v7 < 16 goto label2;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nHexs-1)*4+dstPos is greater or equal to than 16");
throw v8;
label2:
v9 = 0;
label3:
if v9 >= v4 goto label4;
v10 = v9 * 4;
v11 = v10 + v3;
v12 = v9 + v1;
v13 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v12);
v14 = staticinvoke <org.apache.commons.lang3.Conversion: int hexDigitToInt(char)>(v13);
v15 = 15 & v14;
v16 = v15 << v11;
v17 = 15 << v11;
v18 = (int) -1;
v19 = v17 ^ v18;
v20 = v2 & v19;
v21 = v20 | v16;
v9 = v9 + 1;
goto label3;
label4:
return v21;
}
public static byte hexToByte(java.lang.String, int, byte, int, int)
{
byte v2;
int v1, v10, v11, v12, v14, v15, v16, v17, v18, v19, v20, v21, v3, v4, v5, v6, v7, v9;
java.lang.String v0;
char v13;
java.lang.IllegalArgumentException v8;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: byte;
v3 := @parameter3: int;
v4 := @parameter4: int;
if 0 != v4 goto label1;
return v2;
label1:
v5 = v4 - 1;
v6 = v5 * 4;
v7 = v6 + v3;
if v7 < 8 goto label2;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nHexs-1)*4+dstPos is greater or equal to than 8");
throw v8;
label2:
v9 = 0;
label3:
if v9 >= v4 goto label4;
v10 = v9 * 4;
v11 = v10 + v3;
v12 = v9 + v1;
v13 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v12);
v14 = staticinvoke <org.apache.commons.lang3.Conversion: int hexDigitToInt(char)>(v13);
v15 = 15 & v14;
v16 = v15 << v11;
v17 = 15 << v11;
v18 = (int) -1;
v19 = v17 ^ v18;
v20 = v2 & v19;
v21 = v20 | v16;
v9 = v9 + 1;
goto label3;
label4:
return v21;
}
public static long binaryToLong(boolean[], int, long, int, int)
{
long v14, v15, v16, v17, v18, v2, v9;
int v1, v10, v11, v12, v3, v4, v5, v6, v7;
boolean v13;
boolean[] v0;
java.lang.IllegalArgumentException v8;
v0 := @parameter0: boolean[];
v1 := @parameter1: int;
v2 := @parameter2: long;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = lengthof v0;
if v5 != 0 goto label1;
if v1 == 0 goto label2;
label1:
if 0 != v4 goto label3;
label2:
return v2;
label3:
v6 = v4 - 1;
v7 = v6 + v3;
if v7 < 64 goto label4;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("nBools-1+dstPos is greater or equal to than 64");
throw v8;
label4:
v9 = v2;
v10 = 0;
label5:
if v10 >= v4 goto label8;
v11 = v10 + v3;
v12 = v10 + v1;
v13 = v0[v12];
if v13 == 0 goto label6;
v14 = 1L;
goto label7;
label6:
v14 = 0L;
label7:
v15 = v14 << v11;
v16 = 1L << v11;
v17 = v16 ^ -1L;
v18 = v9 & v17;
v9 = v18 | v15;
v10 = v10 + 1;
goto label5;
label8:
return v9;
}
public static int binaryToInt(boolean[], int, int, int, int)
{
int v1, v10, v11, v12, v15, v16, v17, v18, v19, v2, v3, v4, v5, v6, v7, v9;
boolean v13, v14;
boolean[] v0;
java.lang.IllegalArgumentException v8;
v0 := @parameter0: boolean[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = lengthof v0;
if v5 != 0 goto label1;
if v1 == 0 goto label2;
label1:
if 0 != v4 goto label3;
label2:
return v2;
label3:
v6 = v4 - 1;
v7 = v6 + v3;
if v7 < 32 goto label4;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("nBools-1+dstPos is greater or equal to than 32");
throw v8;
label4:
v9 = v2;
v10 = 0;
label5:
if v10 >= v4 goto label8;
v11 = v10 + v3;
v12 = v10 + v1;
v13 = v0[v12];
if v13 == 0 goto label6;
v14 = 1;
goto label7;
label6:
v14 = 0;
label7:
v15 = v14 << v11;
v16 = 1 << v11;
v17 = (int) -1;
v18 = v16 ^ v17;
v19 = v9 & v18;
v9 = v19 | v15;
v10 = v10 + 1;
goto label5;
label8:
return v9;
}
public static short binaryToShort(boolean[], int, short, int, int)
{
short v2;
int v1, v10, v11, v14, v15, v16, v17, v18, v19, v3, v4, v5, v6, v7, v9;
boolean v12, v13;
boolean[] v0;
java.lang.IllegalArgumentException v8;
v0 := @parameter0: boolean[];
v1 := @parameter1: int;
v2 := @parameter2: short;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = lengthof v0;
if v5 != 0 goto label1;
if v1 == 0 goto label2;
label1:
if 0 != v4 goto label3;
label2:
return v2;
label3:
v6 = v4 - 1;
v7 = v6 + v3;
if v7 < 16 goto label4;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("nBools-1+dstPos is greater or equal to than 16");
throw v8;
label4:
v9 = 0;
label5:
if v9 >= v4 goto label8;
v10 = v9 + v3;
v11 = v9 + v1;
v12 = v0[v11];
if v12 == 0 goto label6;
v13 = 1;
goto label7;
label6:
v13 = 0;
label7:
v14 = v13 << v10;
v15 = 1 << v10;
v16 = (int) -1;
v17 = v15 ^ v16;
v18 = v2 & v17;
v19 = v18 | v14;
v9 = v9 + 1;
goto label5;
label8:
return v19;
}
public static byte binaryToByte(boolean[], int, byte, int, int)
{
byte v2;
int v1, v10, v11, v14, v15, v16, v17, v18, v19, v3, v4, v5, v6, v7, v9;
boolean v12, v13;
boolean[] v0;
java.lang.IllegalArgumentException v8;
v0 := @parameter0: boolean[];
v1 := @parameter1: int;
v2 := @parameter2: byte;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = lengthof v0;
if v5 != 0 goto label1;
if v1 == 0 goto label2;
label1:
if 0 != v4 goto label3;
label2:
return v2;
label3:
v6 = v4 - 1;
v7 = v6 + v3;
if v7 < 8 goto label4;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("nBools-1+dstPos is greater or equal to than 8");
throw v8;
label4:
v9 = 0;
label5:
if v9 >= v4 goto label8;
v10 = v9 + v3;
v11 = v9 + v1;
v12 = v0[v11];
if v12 == 0 goto label6;
v13 = 1;
goto label7;
label6:
v13 = 0;
label7:
v14 = v13 << v10;
v15 = 1 << v10;
v16 = (int) -1;
v17 = v15 ^ v16;
v18 = v2 & v17;
v19 = v18 | v14;
v9 = v9 + 1;
goto label5;
label8:
return v19;
}
public static int[] longToIntArray(long, int, int[], int, int)
{
long v0, v13, v14;
java.lang.IllegalArgumentException v8;
int[] v2;
int v1, v10, v11, v12, v3, v4, v5, v6, v7, v9;
v0 := @parameter0: long;
v1 := @parameter1: int;
v2 := @parameter2: int[];
v3 := @parameter3: int;
v4 := @parameter4: int;
if 0 != v4 goto label1;
return v2;
label1:
v5 = v4 - 1;
v6 = v5 * 32;
v7 = v6 + v1;
if v7 < 64 goto label2;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nInts-1)*32+srcPos is greater or equal to than 64");
throw v8;
label2:
v9 = 0;
label3:
if v9 >= v4 goto label4;
v10 = v9 * 32;
v11 = v10 + v1;
v12 = v3 + v9;
v13 = v0 >> v11;
v14 = -1L & v13;
v2[v12] = v14;
v9 = v9 + 1;
goto label3;
label4:
return v2;
}
public static short[] longToShortArray(long, int, short[], int, int)
{
long v0;
java.lang.IllegalArgumentException v8;
int v1, v10, v11, v3, v4, v5, v6, v7, v9;
short[] v2;
v0 := @parameter0: long;
v1 := @parameter1: int;
v2 := @parameter2: short[];
v3 := @parameter3: int;
v4 := @parameter4: int;
if 0 != v4 goto label1;
return v2;
label1:
v5 = v4 - 1;
v6 = v5 * 16;
v7 = v6 + v1;
if v7 < 64 goto label2;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nShorts-1)*16+srcPos is greater or equal to than 64");
throw v8;
label2:
v9 = 0;
label3:
if v9 >= v4 goto label4;
v10 = v3 + v9;
v2[v10] = v11;
v9 = v9 + 1;
goto label3;
label4:
return v2;
}
public static short[] intToShortArray(int, int, short[], int, int)
{
int v0, v1, v10, v11, v12, v13, v14, v15, v3, v4, v5, v6, v7, v9;
java.lang.IllegalArgumentException v8;
short[] v2;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: short[];
v3 := @parameter3: int;
v4 := @parameter4: int;
if 0 != v4 goto label1;
return v2;
label1:
v5 = v4 - 1;
v6 = v5 * 16;
v7 = v6 + v1;
if v7 < 32 goto label2;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nShorts-1)*16+srcPos is greater or equal to than 32");
throw v8;
label2:
v9 = 0;
label3:
if v9 >= v4 goto label4;
v10 = v9 * 16;
v11 = v10 + v1;
v12 = v3 + v9;
v13 = v0 >> v11;
v14 = (int) 65535;
v15 = v14 & v13;
v2[v12] = v15;
v9 = v9 + 1;
goto label3;
label4:
return v2;
}
public static byte[] longToByteArray(long, int, byte[], int, int)
{
byte[] v2;
long v0;
java.lang.IllegalArgumentException v8;
int v1, v10, v11, v3, v4, v5, v6, v7, v9;
v0 := @parameter0: long;
v1 := @parameter1: int;
v2 := @parameter2: byte[];
v3 := @parameter3: int;
v4 := @parameter4: int;
if 0 != v4 goto label1;
return v2;
label1:
v5 = v4 - 1;
v6 = v5 * 8;
v7 = v6 + v1;
if v7 < 64 goto label2;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nBytes-1)*8+srcPos is greater or equal to than 64");
throw v8;
label2:
v9 = 0;
label3:
if v9 >= v4 goto label4;
v10 = v3 + v9;
v2[v10] = v11;
v9 = v9 + 1;
goto label3;
label4:
return v2;
}
public static byte[] intToByteArray(int, int, byte[], int, int)
{
byte[] v2;
java.lang.IllegalArgumentException v8;
int v0, v1, v10, v11, v12, v13, v14, v3, v4, v5, v6, v7, v9;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: byte[];
v3 := @parameter3: int;
v4 := @parameter4: int;
if 0 != v4 goto label1;
return v2;
label1:
v5 = v4 - 1;
v6 = v5 * 8;
v7 = v6 + v1;
if v7 < 32 goto label2;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nBytes-1)*8+srcPos is greater or equal to than 32");
throw v8;
label2:
v9 = 0;
label3:
if v9 >= v4 goto label4;
v10 = v9 * 8;
v11 = v10 + v1;
v12 = v3 + v9;
v13 = v0 >> v11;
v14 = 255 & v13;
v2[v12] = v14;
v9 = v9 + 1;
goto label3;
label4:
return v2;
}
public static byte[] shortToByteArray(short, int, byte[], int, int)
{
byte[] v2;
java.lang.IllegalArgumentException v8;
short v0;
int v1, v10, v11, v12, v13, v14, v3, v4, v5, v6, v7, v9;
v0 := @parameter0: short;
v1 := @parameter1: int;
v2 := @parameter2: byte[];
v3 := @parameter3: int;
v4 := @parameter4: int;
if 0 != v4 goto label1;
return v2;
label1:
v5 = v4 - 1;
v6 = v5 * 8;
v7 = v6 + v1;
if v7 < 16 goto label2;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nBytes-1)*8+srcPos is greater or equal to than 16");
throw v8;
label2:
v9 = 0;
label3:
if v9 >= v4 goto label4;
v10 = v9 * 8;
v11 = v10 + v1;
v12 = v3 + v9;
v13 = v0 >> v11;
v14 = 255 & v13;
v2[v12] = v14;
v9 = v9 + 1;
goto label3;
label4:
return v2;
}
public static java.lang.String longToHex(long, int, java.lang.String, int, int)
{
long v0, v14, v15;
int v1, v10, v11, v12, v13, v16, v18, v3, v4, v5, v6, v7;
java.lang.String v2, v20;
char v17, v19;
java.lang.IllegalArgumentException v8;
java.lang.StringBuilder v9;
v0 := @parameter0: long;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: int;
v4 := @parameter4: int;
if 0 != v4 goto label1;
return v2;
label1:
v5 = v4 - 1;
v6 = v5 * 4;
v7 = v6 + v1;
if v7 < 64 goto label2;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nHexs-1)*4+srcPos is greater or equal to than 64");
throw v8;
label2:
v9 = new java.lang.StringBuilder;
specialinvoke v9.<java.lang.StringBuilder: void <init>(java.lang.String)>(v2);
v10 = virtualinvoke v9.<java.lang.StringBuilder: int length()>();
v11 = 0;
label3:
if v11 >= v4 goto label6;
v12 = v11 * 4;
v13 = v12 + v1;
v14 = v0 >> v13;
v15 = 15L & v14;
v16 = v3 + v11;
if v16 != v10 goto label4;
v10 = v10 + 1;
v17 = staticinvoke <org.apache.commons.lang3.Conversion: char intToHexDigit(int)>(v15);
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v17);
goto label5;
label4:
v18 = v3 + v11;
v19 = staticinvoke <org.apache.commons.lang3.Conversion: char intToHexDigit(int)>(v15);
virtualinvoke v9.<java.lang.StringBuilder: void setCharAt(int,char)>(v18, v19);
label5:
v11 = v11 + 1;
goto label3;
label6:
v20 = virtualinvoke v9.<java.lang.StringBuilder: java.lang.String toString()>();
return v20;
}
public static java.lang.String intToHex(int, int, java.lang.String, int, int)
{
int v0, v1, v10, v11, v12, v13, v14, v15, v16, v18, v3, v4, v5, v6, v7;
java.lang.String v2, v20;
char v17, v19;
java.lang.IllegalArgumentException v8;
java.lang.StringBuilder v9;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: int;
v4 := @parameter4: int;
if 0 != v4 goto label1;
return v2;
label1:
v5 = v4 - 1;
v6 = v5 * 4;
v7 = v6 + v1;
if v7 < 32 goto label2;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nHexs-1)*4+srcPos is greater or equal to than 32");
throw v8;
label2:
v9 = new java.lang.StringBuilder;
specialinvoke v9.<java.lang.StringBuilder: void <init>(java.lang.String)>(v2);
v10 = virtualinvoke v9.<java.lang.StringBuilder: int length()>();
v11 = 0;
label3:
if v11 >= v4 goto label6;
v12 = v11 * 4;
v13 = v12 + v1;
v14 = v0 >> v13;
v15 = 15 & v14;
v16 = v3 + v11;
if v16 != v10 goto label4;
v10 = v10 + 1;
v17 = staticinvoke <org.apache.commons.lang3.Conversion: char intToHexDigit(int)>(v15);
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v17);
goto label5;
label4:
v18 = v3 + v11;
v19 = staticinvoke <org.apache.commons.lang3.Conversion: char intToHexDigit(int)>(v15);
virtualinvoke v9.<java.lang.StringBuilder: void setCharAt(int,char)>(v18, v19);
label5:
v11 = v11 + 1;
goto label3;
label6:
v20 = virtualinvoke v9.<java.lang.StringBuilder: java.lang.String toString()>();
return v20;
}
public static java.lang.String shortToHex(short, int, java.lang.String, int, int)
{
short v0;
int v1, v10, v11, v12, v13, v14, v15, v16, v18, v3, v4, v5, v6, v7;
java.lang.String v2, v20;
char v17, v19;
java.lang.IllegalArgumentException v8;
java.lang.StringBuilder v9;
v0 := @parameter0: short;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: int;
v4 := @parameter4: int;
if 0 != v4 goto label1;
return v2;
label1:
v5 = v4 - 1;
v6 = v5 * 4;
v7 = v6 + v1;
if v7 < 16 goto label2;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nHexs-1)*4+srcPos is greater or equal to than 16");
throw v8;
label2:
v9 = new java.lang.StringBuilder;
specialinvoke v9.<java.lang.StringBuilder: void <init>(java.lang.String)>(v2);
v10 = virtualinvoke v9.<java.lang.StringBuilder: int length()>();
v11 = 0;
label3:
if v11 >= v4 goto label6;
v12 = v11 * 4;
v13 = v12 + v1;
v14 = v0 >> v13;
v15 = 15 & v14;
v16 = v3 + v11;
if v16 != v10 goto label4;
v10 = v10 + 1;
v17 = staticinvoke <org.apache.commons.lang3.Conversion: char intToHexDigit(int)>(v15);
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v17);
goto label5;
label4:
v18 = v3 + v11;
v19 = staticinvoke <org.apache.commons.lang3.Conversion: char intToHexDigit(int)>(v15);
virtualinvoke v9.<java.lang.StringBuilder: void setCharAt(int,char)>(v18, v19);
label5:
v11 = v11 + 1;
goto label3;
label6:
v20 = virtualinvoke v9.<java.lang.StringBuilder: java.lang.String toString()>();
return v20;
}
public static java.lang.String byteToHex(byte, int, java.lang.String, int, int)
{
byte v0;
int v1, v10, v11, v12, v13, v14, v15, v16, v18, v3, v4, v5, v6, v7;
java.lang.String v2, v20;
char v17, v19;
java.lang.IllegalArgumentException v8;
java.lang.StringBuilder v9;
v0 := @parameter0: byte;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: int;
v4 := @parameter4: int;
if 0 != v4 goto label1;
return v2;
label1:
v5 = v4 - 1;
v6 = v5 * 4;
v7 = v6 + v1;
if v7 < 8 goto label2;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("(nHexs-1)*4+srcPos is greater or equal to than 8");
throw v8;
label2:
v9 = new java.lang.StringBuilder;
specialinvoke v9.<java.lang.StringBuilder: void <init>(java.lang.String)>(v2);
v10 = virtualinvoke v9.<java.lang.StringBuilder: int length()>();
v11 = 0;
label3:
if v11 >= v4 goto label6;
v12 = v11 * 4;
v13 = v12 + v1;
v14 = v0 >> v13;
v15 = 15 & v14;
v16 = v3 + v11;
if v16 != v10 goto label4;
v10 = v10 + 1;
v17 = staticinvoke <org.apache.commons.lang3.Conversion: char intToHexDigit(int)>(v15);
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v17);
goto label5;
label4:
v18 = v3 + v11;
v19 = staticinvoke <org.apache.commons.lang3.Conversion: char intToHexDigit(int)>(v15);
virtualinvoke v9.<java.lang.StringBuilder: void setCharAt(int,char)>(v18, v19);
label5:
v11 = v11 + 1;
goto label3;
label6:
v20 = virtualinvoke v9.<java.lang.StringBuilder: java.lang.String toString()>();
return v20;
}
public static boolean[] longToBinary(long, int, boolean[], int, int)
{
boolean[] v2;
long v0, v11, v12;
java.lang.IllegalArgumentException v7;
byte v13;
int v1, v10, v3, v4, v5, v6, v8, v9;
boolean v14;
v0 := @parameter0: long;
v1 := @parameter1: int;
v2 := @parameter2: boolean[];
v3 := @parameter3: int;
v4 := @parameter4: int;
if 0 != v4 goto label1;
return v2;
label1:
v5 = v4 - 1;
v6 = v5 + v1;
if v6 < 64 goto label2;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("nBools-1+srcPos is greater or equal to than 64");
throw v7;
label2:
v8 = 0;
label3:
if v8 >= v4 goto label6;
v9 = v8 + v1;
v10 = v3 + v8;
v11 = v0 >> v9;
v12 = 1L & v11;
v13 = v12 cmp 0L;
if v13 == 0 goto label4;
v14 = 1;
goto label5;
label4:
v14 = 0;
label5:
v2[v10] = v14;
v8 = v8 + 1;
goto label3;
label6:
return v2;
}
public static boolean[] intToBinary(int, int, boolean[], int, int)
{
boolean[] v2;
java.lang.IllegalArgumentException v7;
int v0, v1, v10, v11, v12, v3, v4, v5, v6, v8, v9;
boolean v13;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: boolean[];
v3 := @parameter3: int;
v4 := @parameter4: int;
if 0 != v4 goto label1;
return v2;
label1:
v5 = v4 - 1;
v6 = v5 + v1;
if v6 < 32 goto label2;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("nBools-1+srcPos is greater or equal to than 32");
throw v7;
label2:
v8 = 0;
label3:
if v8 >= v4 goto label6;
v9 = v8 + v1;
v10 = v3 + v8;
v11 = v0 >> v9;
v12 = 1 & v11;
if v12 == 0 goto label4;
v13 = 1;
goto label5;
label4:
v13 = 0;
label5:
v2[v10] = v13;
v8 = v8 + 1;
goto label3;
label6:
return v2;
}
public static boolean[] shortToBinary(short, int, boolean[], int, int)
{
java.lang.AssertionError v11;
short v0;
int v1, v10, v12, v13, v14, v15, v16, v3, v4, v5, v6, v9;
boolean v17, v8;
boolean[] v2;
java.lang.IllegalArgumentException v7;
v0 := @parameter0: short;
v1 := @parameter1: int;
v2 := @parameter2: boolean[];
v3 := @parameter3: int;
v4 := @parameter4: int;
if 0 != v4 goto label1;
return v2;
label1:
v5 = v4 - 1;
v6 = v5 + v1;
if v6 < 16 goto label2;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("nBools-1+srcPos is greater or equal to than 16");
throw v7;
label2:
v8 = <org.apache.commons.lang3.Conversion: boolean $assertionsDisabled>;
if v8 != 0 goto label3;
v9 = v4 - 1;
v10 = 16 - v1;
if v9 < v10 goto label3;
v11 = new java.lang.AssertionError;
specialinvoke v11.<java.lang.AssertionError: void <init>()>();
throw v11;
label3:
v12 = 0;
label4:
if v12 >= v4 goto label7;
v13 = v12 + v1;
v14 = v3 + v12;
v15 = v0 >> v13;
v16 = 1 & v15;
if v16 == 0 goto label5;
v17 = 1;
goto label6;
label5:
v17 = 0;
label6:
v2[v14] = v17;
v12 = v12 + 1;
goto label4;
label7:
return v2;
}
public static boolean[] byteToBinary(byte, int, boolean[], int, int)
{
boolean[] v2;
java.lang.IllegalArgumentException v7;
byte v0;
int v1, v10, v11, v12, v3, v4, v5, v6, v8, v9;
boolean v13;
v0 := @parameter0: byte;
v1 := @parameter1: int;
v2 := @parameter2: boolean[];
v3 := @parameter3: int;
v4 := @parameter4: int;
if 0 != v4 goto label1;
return v2;
label1:
v5 = v4 - 1;
v6 = v5 + v1;
if v6 < 8 goto label2;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("nBools-1+srcPos is greater or equal to than 8");
throw v7;
label2:
v8 = 0;
label3:
if v8 >= v4 goto label6;
v9 = v8 + v1;
v10 = v3 + v8;
v11 = v0 >> v9;
v12 = 1 & v11;
if v12 == 0 goto label4;
v13 = 1;
goto label5;
label4:
v13 = 0;
label5:
v2[v10] = v13;
v8 = v8 + 1;
goto label3;
label6:
return v2;
}
public static byte[] uuidToByteArray(java.util.UUID, byte[], int, int)
{
byte[] v1;
long v5, v7;
java.util.UUID v0;
java.lang.IllegalArgumentException v4;
int v2, v3, v6, v8, v9;
v0 := @parameter0: java.util.UUID;
v1 := @parameter1: byte[];
v2 := @parameter2: int;
v3 := @parameter3: int;
if 0 != v3 goto label1;
return v1;
label1:
if v3 <= 16 goto label2;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("nBytes is greater than 16");
throw v4;
label2:
v5 = virtualinvoke v0.<java.util.UUID: long getMostSignificantBits()>();
v6 = staticinvoke <java.lang.Math: int min(int,int)>(v3, 8);
staticinvoke <org.apache.commons.lang3.Conversion: byte[] longToByteArray(long,int,byte[],int,int)>(v5, 0, v1, v2, v6);
if v3 < 8 goto label3;
v7 = virtualinvoke v0.<java.util.UUID: long getLeastSignificantBits()>();
v8 = v2 + 8;
v9 = v3 - 8;
staticinvoke <org.apache.commons.lang3.Conversion: byte[] longToByteArray(long,int,byte[],int,int)>(v7, 0, v1, v8, v9);
label3:
return v1;
}
public static java.util.UUID byteArrayToUuid(byte[], int)
{
byte[] v0;
long v6, v8;
java.util.UUID v5;
java.lang.IllegalArgumentException v4;
int v1, v2, v3, v7;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 = lengthof v0;
v3 = v2 - v1;
if v3 >= 16 goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Need at least 16 bytes for UUID");
throw v4;
label1:
v5 = new java.util.UUID;
v6 = staticinvoke <org.apache.commons.lang3.Conversion: long byteArrayToLong(byte[],int,long,int,int)>(v0, v1, 0L, 0, 8);
v7 = v1 + 8;
v8 = staticinvoke <org.apache.commons.lang3.Conversion: long byteArrayToLong(byte[],int,long,int,int)>(v0, v7, 0L, 0, 8);
specialinvoke v5.<java.util.UUID: void <init>(long,long)>(v6, v8);
return v5;
}
static void <clinit>()
{
boolean v1, v2;
boolean[] v10, v11, v12, v13, v14, v15, v16, v17, v18, v3, v4, v5, v6, v7, v8, v9;
java.lang.Class v0;
v0 = class "Lorg/apache/commons/lang3/Conversion;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<org.apache.commons.lang3.Conversion: boolean $assertionsDisabled> = v2;
v3 = newarray (boolean)[4];
v3[0] = 1;
v3[1] = 1;
v3[2] = 1;
v3[3] = 1;
<org.apache.commons.lang3.Conversion: boolean[] TTTT> = v3;
v4 = newarray (boolean)[4];
v4[0] = 0;
v4[1] = 1;
v4[2] = 1;
v4[3] = 1;
<org.apache.commons.lang3.Conversion: boolean[] FTTT> = v4;
v5 = newarray (boolean)[4];
v5[0] = 1;
v5[1] = 0;
v5[2] = 1;
v5[3] = 1;
<org.apache.commons.lang3.Conversion: boolean[] TFTT> = v5;
v6 = newarray (boolean)[4];
v6[0] = 0;
v6[1] = 0;
v6[2] = 1;
v6[3] = 1;
<org.apache.commons.lang3.Conversion: boolean[] FFTT> = v6;
v7 = newarray (boolean)[4];
v7[0] = 1;
v7[1] = 1;
v7[2] = 0;
v7[3] = 1;
<org.apache.commons.lang3.Conversion: boolean[] TTFT> = v7;
v8 = newarray (boolean)[4];
v8[0] = 0;
v8[1] = 1;
v8[2] = 0;
v8[3] = 1;
<org.apache.commons.lang3.Conversion: boolean[] FTFT> = v8;
v9 = newarray (boolean)[4];
v9[0] = 1;
v9[1] = 0;
v9[2] = 0;
v9[3] = 1;
<org.apache.commons.lang3.Conversion: boolean[] TFFT> = v9;
v10 = newarray (boolean)[4];
v10[0] = 0;
v10[1] = 0;
v10[2] = 0;
v10[3] = 1;
<org.apache.commons.lang3.Conversion: boolean[] FFFT> = v10;
v11 = newarray (boolean)[4];
v11[0] = 1;
v11[1] = 1;
v11[2] = 1;
v11[3] = 0;
<org.apache.commons.lang3.Conversion: boolean[] TTTF> = v11;
v12 = newarray (boolean)[4];
v12[0] = 0;
v12[1] = 1;
v12[2] = 1;
v12[3] = 0;
<org.apache.commons.lang3.Conversion: boolean[] FTTF> = v12;
v13 = newarray (boolean)[4];
v13[0] = 1;
v13[1] = 0;
v13[2] = 1;
v13[3] = 0;
<org.apache.commons.lang3.Conversion: boolean[] TFTF> = v13;
v14 = newarray (boolean)[4];
v14[0] = 0;
v14[1] = 0;
v14[2] = 1;
v14[3] = 0;
<org.apache.commons.lang3.Conversion: boolean[] FFTF> = v14;
v15 = newarray (boolean)[4];
v15[0] = 1;
v15[1] = 1;
v15[2] = 0;
v15[3] = 0;
<org.apache.commons.lang3.Conversion: boolean[] TTFF> = v15;
v16 = newarray (boolean)[4];
v16[0] = 0;
v16[1] = 1;
v16[2] = 0;
v16[3] = 0;
<org.apache.commons.lang3.Conversion: boolean[] FTFF> = v16;
v17 = newarray (boolean)[4];
v17[0] = 1;
v17[1] = 0;
v17[2] = 0;
v17[3] = 0;
<org.apache.commons.lang3.Conversion: boolean[] TFFF> = v17;
v18 = newarray (boolean)[4];
v18[0] = 0;
v18[1] = 0;
v18[2] = 0;
v18[3] = 0;
<org.apache.commons.lang3.Conversion: boolean[] FFFF> = v18;
return;
}
}