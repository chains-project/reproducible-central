public class org.apache.commons.lang3.RandomUtils extends java.lang.Object
{
private static final java.util.Random RANDOM;
public void <init>()
{
org.apache.commons.lang3.RandomUtils v0;
v0 := @this: org.apache.commons.lang3.RandomUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static boolean nextBoolean()
{
java.util.Random v0;
boolean v1;
v0 = <org.apache.commons.lang3.RandomUtils: java.util.Random RANDOM>;
v1 = virtualinvoke v0.<java.util.Random: boolean nextBoolean()>();
return v1;
}
public static byte[] nextBytes(int)
{
byte[] v3;
java.lang.Object[] v2;
int v0;
java.util.Random v4;
boolean v1;
v0 := @parameter0: int;
if v0 < 0 goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v1, "Count cannot be negative.", v2);
v3 = newarray (byte)[v0];
v4 = <org.apache.commons.lang3.RandomUtils: java.util.Random RANDOM>;
virtualinvoke v4.<java.util.Random: void nextBytes(byte[])>(v3);
return v3;
}
public static int nextInt(int, int)
{
java.lang.Object[] v3, v5;
java.util.Random v6;
int v0, v1, v7, v8, v9;
boolean v2, v4;
v0 := @parameter0: int;
v1 := @parameter1: int;
if v1 < v0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
v3 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v2, "Start value must be smaller or equal to end value.", v3);
if v0 < 0 goto label3;
v4 = 1;
goto label4;
label3:
v4 = 0;
label4:
v5 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v4, "Both range values must be non-negative.", v5);
if v0 != v1 goto label5;
return v0;
label5:
v6 = <org.apache.commons.lang3.RandomUtils: java.util.Random RANDOM>;
v7 = v1 - v0;
v8 = virtualinvoke v6.<java.util.Random: int nextInt(int)>(v7);
v9 = v0 + v8;
return v9;
}
public static int nextInt()
{
int v0;
v0 = staticinvoke <org.apache.commons.lang3.RandomUtils: int nextInt(int,int)>(0, 2147483647);
return v0;
}
public static long nextLong(long, long)
{
java.lang.Object[] v4, v7;
long v0, v1, v10, v11, v9;
byte v2, v5, v8;
boolean v3, v6;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 = v1 cmp v0;
if v2 < 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
v4 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v3, "Start value must be smaller or equal to end value.", v4);
v5 = v0 cmp 0L;
if v5 < 0 goto label3;
v6 = 1;
goto label4;
label3:
v6 = 0;
label4:
v7 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v6, "Both range values must be non-negative.", v7);
v8 = v0 cmp v1;
if v8 != 0 goto label5;
return v0;
label5:
v9 = v1 - v0;
v10 = staticinvoke <org.apache.commons.lang3.RandomUtils: long nextLong(long)>(v9);
v11 = v0 + v10;
return v11;
}
public static long nextLong()
{
long v0;
v0 = staticinvoke <org.apache.commons.lang3.RandomUtils: long nextLong(long)>(9223372036854775807L);
return v0;
}
private static long nextLong(long)
{
java.util.Random v1;
long v0, v2, v3, v4, v5, v6, v7;
byte v8;
v0 := @parameter0: long;
label1:
v1 = <org.apache.commons.lang3.RandomUtils: java.util.Random RANDOM>;
v2 = virtualinvoke v1.<java.util.Random: long nextLong()>();
v3 = v2 >>> 1;
v4 = v3 % v0;
v5 = v3 - v4;
v6 = v0 - 1L;
v7 = v5 + v6;
v8 = v7 cmp 0L;
if v8 < 0 goto label1;
return v4;
}
public static double nextDouble(double, double)
{
java.lang.Object[] v4, v7;
java.util.Random v10;
byte v2, v5, v8;
boolean v3, v6;
double v0, v1, v11, v12, v13, v9;
v0 := @parameter0: double;
v1 := @parameter1: double;
v2 = v1 cmpl v0;
if v2 < 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
v4 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v3, "Start value must be smaller or equal to end value.", v4);
v5 = v0 cmpl 0.0;
if v5 < 0 goto label3;
v6 = 1;
goto label4;
label3:
v6 = 0;
label4:
v7 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v6, "Both range values must be non-negative.", v7);
v8 = v0 cmpl v1;
if v8 != 0 goto label5;
return v0;
label5:
v9 = v1 - v0;
v10 = <org.apache.commons.lang3.RandomUtils: java.util.Random RANDOM>;
v11 = virtualinvoke v10.<java.util.Random: double nextDouble()>();
v12 = v9 * v11;
v13 = v0 + v12;
return v13;
}
public static double nextDouble()
{
double v0;
v0 = staticinvoke <org.apache.commons.lang3.RandomUtils: double nextDouble(double,double)>(0.0, 1.7976931348623157E308);
return v0;
}
public static float nextFloat(float, float)
{
java.lang.Object[] v4, v7;
java.util.Random v10;
byte v2, v5, v8;
float v0, v1, v11, v12, v13, v9;
boolean v3, v6;
v0 := @parameter0: float;
v1 := @parameter1: float;
v2 = v1 cmpl v0;
if v2 < 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
v4 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v3, "Start value must be smaller or equal to end value.", v4);
v5 = v0 cmpl 0.0F;
if v5 < 0 goto label3;
v6 = 1;
goto label4;
label3:
v6 = 0;
label4:
v7 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v6, "Both range values must be non-negative.", v7);
v8 = v0 cmpl v1;
if v8 != 0 goto label5;
return v0;
label5:
v9 = v1 - v0;
v10 = <org.apache.commons.lang3.RandomUtils: java.util.Random RANDOM>;
v11 = virtualinvoke v10.<java.util.Random: float nextFloat()>();
v12 = v9 * v11;
v13 = v0 + v12;
return v13;
}
public static float nextFloat()
{
float v0;
v0 = staticinvoke <org.apache.commons.lang3.RandomUtils: float nextFloat(float,float)>(0.0F, 3.4028235E38F);
return v0;
}
static void <clinit>()
{
java.util.Random v0;
v0 = new java.util.Random;
specialinvoke v0.<java.util.Random: void <init>()>();
<org.apache.commons.lang3.RandomUtils: java.util.Random RANDOM> = v0;
return;
}
}