public abstract class org.apache.commons.lang3.concurrent.AtomicSafeInitializer extends java.lang.Object implements org.apache.commons.lang3.concurrent.ConcurrentInitializer
{
private final java.util.concurrent.atomic.AtomicReference factory;
private final java.util.concurrent.atomic.AtomicReference reference;
public void <init>()
{
java.util.concurrent.atomic.AtomicReference v1, v2;
org.apache.commons.lang3.concurrent.AtomicSafeInitializer v0;
v0 := @this: org.apache.commons.lang3.concurrent.AtomicSafeInitializer;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<org.apache.commons.lang3.concurrent.AtomicSafeInitializer: java.util.concurrent.atomic.AtomicReference factory> = v1;
v2 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v2.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<org.apache.commons.lang3.concurrent.AtomicSafeInitializer: java.util.concurrent.atomic.AtomicReference reference> = v2;
return;
}
public final java.lang.Object get() throws org.apache.commons.lang3.concurrent.ConcurrentException
{
org.apache.commons.lang3.concurrent.AtomicSafeInitializer v0;
java.lang.Object v2, v6;
java.util.concurrent.atomic.AtomicReference v1, v3, v5;
boolean v4;
v0 := @this: org.apache.commons.lang3.concurrent.AtomicSafeInitializer;
label1:
v1 = v0.<org.apache.commons.lang3.concurrent.AtomicSafeInitializer: java.util.concurrent.atomic.AtomicReference reference>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v2 != null goto label2;
v3 = v0.<org.apache.commons.lang3.concurrent.AtomicSafeInitializer: java.util.concurrent.atomic.AtomicReference factory>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v0);
if v4 == 0 goto label1;
v5 = v0.<org.apache.commons.lang3.concurrent.AtomicSafeInitializer: java.util.concurrent.atomic.AtomicReference reference>;
v6 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.AtomicSafeInitializer: java.lang.Object initialize()>();
virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v6);
goto label1;
label2:
return v2;
}
protected abstract java.lang.Object initialize() throws org.apache.commons.lang3.concurrent.ConcurrentException;
}