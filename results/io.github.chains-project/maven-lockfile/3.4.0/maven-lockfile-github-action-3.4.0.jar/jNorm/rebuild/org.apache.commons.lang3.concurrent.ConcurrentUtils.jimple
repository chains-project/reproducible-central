public class org.apache.commons.lang3.concurrent.ConcurrentUtils extends java.lang.Object
{
private void <init>()
{
org.apache.commons.lang3.concurrent.ConcurrentUtils v0;
v0 := @this: org.apache.commons.lang3.concurrent.ConcurrentUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static org.apache.commons.lang3.concurrent.ConcurrentException extractCause(java.util.concurrent.ExecutionException)
{
java.lang.Throwable v1, v4;
java.util.concurrent.ExecutionException v0;
org.apache.commons.lang3.concurrent.ConcurrentException v2;
java.lang.String v3;
v0 := @parameter0: java.util.concurrent.ExecutionException;
if v0 == null goto label1;
v1 = virtualinvoke v0.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();
if v1 != null goto label2;
label1:
return null;
label2:
staticinvoke <org.apache.commons.lang3.concurrent.ConcurrentUtils: void throwCause(java.util.concurrent.ExecutionException)>(v0);
v2 = new org.apache.commons.lang3.concurrent.ConcurrentException;
v3 = virtualinvoke v0.<java.util.concurrent.ExecutionException: java.lang.String getMessage()>();
v4 = virtualinvoke v0.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();
specialinvoke v2.<org.apache.commons.lang3.concurrent.ConcurrentException: void <init>(java.lang.String,java.lang.Throwable)>(v3, v4);
return v2;
}
public static org.apache.commons.lang3.concurrent.ConcurrentRuntimeException extractCauseUnchecked(java.util.concurrent.ExecutionException)
{
java.lang.Throwable v1, v4;
java.util.concurrent.ExecutionException v0;
org.apache.commons.lang3.concurrent.ConcurrentRuntimeException v2;
java.lang.String v3;
v0 := @parameter0: java.util.concurrent.ExecutionException;
if v0 == null goto label1;
v1 = virtualinvoke v0.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();
if v1 != null goto label2;
label1:
return null;
label2:
staticinvoke <org.apache.commons.lang3.concurrent.ConcurrentUtils: void throwCause(java.util.concurrent.ExecutionException)>(v0);
v2 = new org.apache.commons.lang3.concurrent.ConcurrentRuntimeException;
v3 = virtualinvoke v0.<java.util.concurrent.ExecutionException: java.lang.String getMessage()>();
v4 = virtualinvoke v0.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();
specialinvoke v2.<org.apache.commons.lang3.concurrent.ConcurrentRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v3, v4);
return v2;
}
public static void handleCause(java.util.concurrent.ExecutionException) throws org.apache.commons.lang3.concurrent.ConcurrentException
{
java.util.concurrent.ExecutionException v0;
org.apache.commons.lang3.concurrent.ConcurrentException v1;
v0 := @parameter0: java.util.concurrent.ExecutionException;
v1 = staticinvoke <org.apache.commons.lang3.concurrent.ConcurrentUtils: org.apache.commons.lang3.concurrent.ConcurrentException extractCause(java.util.concurrent.ExecutionException)>(v0);
if v1 == null goto label1;
throw v1;
label1:
return;
}
public static void handleCauseUnchecked(java.util.concurrent.ExecutionException)
{
java.util.concurrent.ExecutionException v0;
org.apache.commons.lang3.concurrent.ConcurrentRuntimeException v1;
v0 := @parameter0: java.util.concurrent.ExecutionException;
v1 = staticinvoke <org.apache.commons.lang3.concurrent.ConcurrentUtils: org.apache.commons.lang3.concurrent.ConcurrentRuntimeException extractCauseUnchecked(java.util.concurrent.ExecutionException)>(v0);
if v1 == null goto label1;
throw v1;
label1:
return;
}
static java.lang.Throwable checkedException(java.lang.Throwable)
{
java.lang.Throwable v0;
java.lang.Object[] v5;
java.lang.String v4;
boolean v1, v2, v3;
v0 := @parameter0: java.lang.Throwable;
if v0 == null goto label1;
v1 = v0 instanceof java.lang.RuntimeException;
if v1 != 0 goto label1;
v2 = v0 instanceof java.lang.Error;
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Throwable)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Not a checked exception: \u0001");
v5 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v3, v4, v5);
return v0;
}
private static void throwCause(java.util.concurrent.ExecutionException)
{
java.lang.Throwable v1, v3, v4, v6;
java.util.concurrent.ExecutionException v0;
boolean v2, v5;
v0 := @parameter0: java.util.concurrent.ExecutionException;
v1 = virtualinvoke v0.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();
v2 = v1 instanceof java.lang.RuntimeException;
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();
throw v3;
label1:
v4 = virtualinvoke v0.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();
v5 = v4 instanceof java.lang.Error;
if v5 == 0 goto label2;
v6 = virtualinvoke v0.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();
throw v6;
label2:
return;
}
public static java.lang.Object initialize(org.apache.commons.lang3.concurrent.ConcurrentInitializer) throws org.apache.commons.lang3.concurrent.ConcurrentException
{
java.lang.Object v1;
org.apache.commons.lang3.concurrent.ConcurrentInitializer v0;
v0 := @parameter0: org.apache.commons.lang3.concurrent.ConcurrentInitializer;
if v0 == null goto label1;
v1 = interfaceinvoke v0.<org.apache.commons.lang3.concurrent.ConcurrentInitializer: java.lang.Object get()>();
goto label2;
label1:
v1 = null;
label2:
return v1;
}
public static java.lang.Object initializeUnchecked(org.apache.commons.lang3.concurrent.ConcurrentInitializer)
{
java.lang.Throwable v4;
org.apache.commons.lang3.concurrent.ConcurrentRuntimeException v3;
org.apache.commons.lang3.concurrent.ConcurrentException v2;
java.lang.Object v1;
org.apache.commons.lang3.concurrent.ConcurrentInitializer v0;
v0 := @parameter0: org.apache.commons.lang3.concurrent.ConcurrentInitializer;
label1:
v1 = staticinvoke <org.apache.commons.lang3.concurrent.ConcurrentUtils: java.lang.Object initialize(org.apache.commons.lang3.concurrent.ConcurrentInitializer)>(v0);
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = new org.apache.commons.lang3.concurrent.ConcurrentRuntimeException;
v4 = virtualinvoke v2.<org.apache.commons.lang3.concurrent.ConcurrentException: java.lang.Throwable getCause()>();
specialinvoke v3.<org.apache.commons.lang3.concurrent.ConcurrentRuntimeException: void <init>(java.lang.Throwable)>(v4);
throw v3;
catch org.apache.commons.lang3.concurrent.ConcurrentException from label1 to label2 with label3;
}
public static java.lang.Object putIfAbsent(java.util.concurrent.ConcurrentMap, java.lang.Object, java.lang.Object)
{
java.lang.Object v1, v2, v3, v4;
java.util.concurrent.ConcurrentMap v0;
v0 := @parameter0: java.util.concurrent.ConcurrentMap;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Object;
if v0 != null goto label1;
return null;
label1:
v3 = interfaceinvoke v0.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v1, v2);
if v3 == null goto label2;
v4 = v3;
goto label3;
label2:
v4 = v2;
label3:
return v4;
}
public static java.lang.Object createIfAbsent(java.util.concurrent.ConcurrentMap, java.lang.Object, org.apache.commons.lang3.concurrent.ConcurrentInitializer) throws org.apache.commons.lang3.concurrent.ConcurrentException
{
java.lang.Object v1, v3, v4, v5;
java.util.concurrent.ConcurrentMap v0;
org.apache.commons.lang3.concurrent.ConcurrentInitializer v2;
v0 := @parameter0: java.util.concurrent.ConcurrentMap;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: org.apache.commons.lang3.concurrent.ConcurrentInitializer;
if v0 == null goto label1;
if v2 != null goto label2;
label1:
return null;
label2:
v3 = interfaceinvoke v0.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v1);
if v3 != null goto label3;
v4 = interfaceinvoke v2.<org.apache.commons.lang3.concurrent.ConcurrentInitializer: java.lang.Object get()>();
v5 = staticinvoke <org.apache.commons.lang3.concurrent.ConcurrentUtils: java.lang.Object putIfAbsent(java.util.concurrent.ConcurrentMap,java.lang.Object,java.lang.Object)>(v0, v1, v4);
return v5;
label3:
return v3;
}
public static java.lang.Object createIfAbsentUnchecked(java.util.concurrent.ConcurrentMap, java.lang.Object, org.apache.commons.lang3.concurrent.ConcurrentInitializer)
{
java.lang.Throwable v6;
org.apache.commons.lang3.concurrent.ConcurrentRuntimeException v5;
org.apache.commons.lang3.concurrent.ConcurrentException v4;
java.lang.Object v1, v3;
java.util.concurrent.ConcurrentMap v0;
org.apache.commons.lang3.concurrent.ConcurrentInitializer v2;
v0 := @parameter0: java.util.concurrent.ConcurrentMap;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: org.apache.commons.lang3.concurrent.ConcurrentInitializer;
label1:
v3 = staticinvoke <org.apache.commons.lang3.concurrent.ConcurrentUtils: java.lang.Object createIfAbsent(java.util.concurrent.ConcurrentMap,java.lang.Object,org.apache.commons.lang3.concurrent.ConcurrentInitializer)>(v0, v1, v2);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = new org.apache.commons.lang3.concurrent.ConcurrentRuntimeException;
v6 = virtualinvoke v4.<org.apache.commons.lang3.concurrent.ConcurrentException: java.lang.Throwable getCause()>();
specialinvoke v5.<org.apache.commons.lang3.concurrent.ConcurrentRuntimeException: void <init>(java.lang.Throwable)>(v6);
throw v5;
catch org.apache.commons.lang3.concurrent.ConcurrentException from label1 to label2 with label3;
}
public static java.util.concurrent.Future constantFuture(java.lang.Object)
{
java.lang.Object v0;
org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture v1;
v0 := @parameter0: java.lang.Object;
v1 = new org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture;
specialinvoke v1.<org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture: void <init>(java.lang.Object)>(v0);
return v1;
}
}