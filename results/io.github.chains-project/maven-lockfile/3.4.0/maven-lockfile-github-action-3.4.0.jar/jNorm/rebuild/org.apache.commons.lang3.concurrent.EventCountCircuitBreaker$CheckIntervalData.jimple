class org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData extends java.lang.Object
{
private final int eventCount;
private final long checkIntervalStart;
void <init>(int, long)
{
int v1;
long v2;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData v0;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData;
v1 := @parameter0: int;
v2 := @parameter1: long;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData: int eventCount> = v1;
v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData: long checkIntervalStart> = v2;
return;
}
public int getEventCount()
{
int v1;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData v0;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData;
v1 = v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData: int eventCount>;
return v1;
}
public long getCheckIntervalStart()
{
long v1;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData v0;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData;
v1 = v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData: long checkIntervalStart>;
return v1;
}
public org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData increment(int)
{
int v1, v3, v4;
long v5;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData v0, v2;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData;
v1 := @parameter0: int;
if v1 != 0 goto label1;
v2 = v0;
goto label2;
label1:
v2 = new org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData;
v3 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData: int getEventCount()>();
v4 = v3 + v1;
v5 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData: long getCheckIntervalStart()>();
specialinvoke v2.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData: void <init>(int,long)>(v4, v5);
label2:
return v2;
}
}