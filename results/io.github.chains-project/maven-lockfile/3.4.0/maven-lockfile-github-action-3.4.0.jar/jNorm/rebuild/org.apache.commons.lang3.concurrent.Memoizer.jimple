public class org.apache.commons.lang3.concurrent.Memoizer extends java.lang.Object implements org.apache.commons.lang3.concurrent.Computable
{
private final java.util.concurrent.ConcurrentMap cache;
private final org.apache.commons.lang3.concurrent.Computable computable;
private final boolean recalculate;
public void <init>(org.apache.commons.lang3.concurrent.Computable)
{
org.apache.commons.lang3.concurrent.Memoizer v0;
org.apache.commons.lang3.concurrent.Computable v1;
v0 := @this: org.apache.commons.lang3.concurrent.Memoizer;
v1 := @parameter0: org.apache.commons.lang3.concurrent.Computable;
specialinvoke v0.<org.apache.commons.lang3.concurrent.Memoizer: void <init>(org.apache.commons.lang3.concurrent.Computable,boolean)>(v1, 0);
return;
}
public void <init>(org.apache.commons.lang3.concurrent.Computable, boolean)
{
org.apache.commons.lang3.concurrent.Memoizer v0;
java.util.concurrent.ConcurrentHashMap v3;
boolean v2;
org.apache.commons.lang3.concurrent.Computable v1;
v0 := @this: org.apache.commons.lang3.concurrent.Memoizer;
v1 := @parameter0: org.apache.commons.lang3.concurrent.Computable;
v2 := @parameter1: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<org.apache.commons.lang3.concurrent.Memoizer: java.util.concurrent.ConcurrentMap cache> = v3;
v0.<org.apache.commons.lang3.concurrent.Memoizer: org.apache.commons.lang3.concurrent.Computable computable> = v1;
v0.<org.apache.commons.lang3.concurrent.Memoizer: boolean recalculate> = v2;
return;
}
public java.lang.Object compute(java.lang.Object) throws java.lang.InterruptedException
{
java.lang.Throwable v13;
java.util.concurrent.CancellationException v8;
org.apache.commons.lang3.concurrent.Memoizer v0;
java.util.concurrent.FutureTask v5;
java.util.concurrent.Callable v4;
java.lang.RuntimeException v14;
java.util.concurrent.ConcurrentMap v12, v2, v6, v9;
java.util.concurrent.ExecutionException v10;
java.lang.Object v1, v3, v7;
boolean v11;
v0 := @this: org.apache.commons.lang3.concurrent.Memoizer;
v1 := @parameter0: java.lang.Object;
label1:
v2 = v0.<org.apache.commons.lang3.concurrent.Memoizer: java.util.concurrent.ConcurrentMap cache>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v1);
if v3 != null goto label2;
v4 = staticinvoke <org.apache.commons.lang3.concurrent.Memoizer$lambda_compute_0__240: java.util.concurrent.Callable bootstrap$(org.apache.commons.lang3.concurrent.Memoizer,java.lang.Object)>(v0, v1);
v5 = new java.util.concurrent.FutureTask;
specialinvoke v5.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(v4);
v6 = v0.<org.apache.commons.lang3.concurrent.Memoizer: java.util.concurrent.ConcurrentMap cache>;
interfaceinvoke v6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v1, v5);
v3 = v5;
virtualinvoke v5.<java.util.concurrent.FutureTask: void run()>();
label2:
v7 = interfaceinvoke v3.<java.util.concurrent.Future: java.lang.Object get()>();
label3:
return v7;
label4:
v8 := @caughtexception;
v9 = v0.<org.apache.commons.lang3.concurrent.Memoizer: java.util.concurrent.ConcurrentMap cache>;
interfaceinvoke v9.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(v1, v3);
goto label1;
label5:
v10 := @caughtexception;
v11 = v0.<org.apache.commons.lang3.concurrent.Memoizer: boolean recalculate>;
if v11 == 0 goto label6;
v12 = v0.<org.apache.commons.lang3.concurrent.Memoizer: java.util.concurrent.ConcurrentMap cache>;
interfaceinvoke v12.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(v1, v3);
label6:
v13 = virtualinvoke v10.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();
v14 = specialinvoke v0.<org.apache.commons.lang3.concurrent.Memoizer: java.lang.RuntimeException launderException(java.lang.Throwable)>(v13);
throw v14;
catch java.util.concurrent.CancellationException from label2 to label3 with label4;
catch java.util.concurrent.ExecutionException from label2 to label3 with label5;
}
private java.lang.RuntimeException launderException(java.lang.Throwable)
{
java.lang.Throwable v1;
java.lang.IllegalStateException v4;
org.apache.commons.lang3.concurrent.Memoizer v0;
boolean v2, v3;
v0 := @this: org.apache.commons.lang3.concurrent.Memoizer;
v1 := @parameter0: java.lang.Throwable;
v2 = v1 instanceof java.lang.RuntimeException;
if v2 == 0 goto label1;
return v1;
label1:
v3 = v1 instanceof java.lang.Error;
if v3 == 0 goto label2;
throw v1;
label2:
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unchecked exception", v1);
throw v4;
}
}