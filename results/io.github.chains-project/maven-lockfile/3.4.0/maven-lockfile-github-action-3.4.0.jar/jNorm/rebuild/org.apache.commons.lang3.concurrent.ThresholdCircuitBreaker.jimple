public class org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker extends org.apache.commons.lang3.concurrent.AbstractCircuitBreaker
{
private static final long INITIAL_COUNT;
private final long threshold;
private final java.util.concurrent.atomic.AtomicLong used;
public void <init>(long)
{
org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker v0;
java.util.concurrent.atomic.AtomicLong v2;
long v1;
v0 := @this: org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker;
v1 := @parameter0: long;
specialinvoke v0.<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker: void <init>()>();
v2 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v2.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);
v0.<org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker: java.util.concurrent.atomic.AtomicLong used> = v2;
v0.<org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker: long threshold> = v1;
return;
}
public long getThreshold()
{
org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker v0;
long v1;
v0 := @this: org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker;
v1 = v0.<org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker: long threshold>;
return v1;
}
public boolean checkState()
{
org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker v0;
boolean v1;
v0 := @this: org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker;
v1 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker: boolean isOpen()>();
return v1;
}
public void close()
{
org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker v0;
java.util.concurrent.atomic.AtomicLong v1;
v0 := @this: org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker;
specialinvoke v0.<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker: void close()>();
v1 = v0.<org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker: java.util.concurrent.atomic.AtomicLong used>;
virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);
return;
}
public boolean incrementAndCheckState(java.lang.Long)
{
org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker v0;
long v2, v5, v6, v7;
java.util.concurrent.atomic.AtomicLong v4;
byte v3, v8;
java.lang.Long v1;
boolean v9;
v0 := @this: org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker;
v1 := @parameter0: java.lang.Long;
v2 = v0.<org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker: long threshold>;
v3 = v2 cmp 0L;
if v3 != 0 goto label1;
virtualinvoke v0.<org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker: void open()>();
label1:
v4 = v0.<org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker: java.util.concurrent.atomic.AtomicLong used>;
v5 = virtualinvoke v1.<java.lang.Long: long longValue()>();
v6 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v5);
v7 = v0.<org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker: long threshold>;
v8 = v6 cmp v7;
if v8 <= 0 goto label2;
virtualinvoke v0.<org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker: void open()>();
label2:
v9 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker: boolean checkState()>();
return v9;
}
}