public class org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor extends java.lang.Object
{
private final java.lang.Object lock;
private final java.lang.Object object;
private final java.util.function.Supplier readLockSupplier;
private final java.util.function.Supplier writeLockSupplier;
protected void <init>(java.lang.Object, java.lang.Object, java.util.function.Supplier, java.util.function.Supplier)
{
java.util.function.Supplier v3, v4;
org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor v0;
java.lang.Object v1, v2, v5, v6, v7, v8;
v0 := @this: org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.util.function.Supplier;
v4 := @parameter3: java.util.function.Supplier;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "object");
v0.<org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor: java.lang.Object object> = v5;
v6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "lock");
v0.<org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor: java.lang.Object lock> = v6;
v7 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v3, "readLockSupplier");
v0.<org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor: java.util.function.Supplier readLockSupplier> = v7;
v8 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v4, "writeLockSupplier");
v0.<org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor: java.util.function.Supplier writeLockSupplier> = v8;
return;
}
public void acceptReadLocked(org.apache.commons.lang3.function.FailableConsumer)
{
org.apache.commons.lang3.function.FailableConsumer v1;
java.util.function.Supplier v2;
org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor v0;
v0 := @this: org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor;
v1 := @parameter0: org.apache.commons.lang3.function.FailableConsumer;
v2 = v0.<org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor: java.util.function.Supplier readLockSupplier>;
virtualinvoke v0.<org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor: void lockAcceptUnlock(java.util.function.Supplier,org.apache.commons.lang3.function.FailableConsumer)>(v2, v1);
return;
}
public void acceptWriteLocked(org.apache.commons.lang3.function.FailableConsumer)
{
org.apache.commons.lang3.function.FailableConsumer v1;
java.util.function.Supplier v2;
org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor v0;
v0 := @this: org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor;
v1 := @parameter0: org.apache.commons.lang3.function.FailableConsumer;
v2 = v0.<org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor: java.util.function.Supplier writeLockSupplier>;
virtualinvoke v0.<org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor: void lockAcceptUnlock(java.util.function.Supplier,org.apache.commons.lang3.function.FailableConsumer)>(v2, v1);
return;
}
public java.lang.Object applyReadLocked(org.apache.commons.lang3.function.FailableFunction)
{
org.apache.commons.lang3.function.FailableFunction v1;
java.lang.Object v3;
java.util.function.Supplier v2;
org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor v0;
v0 := @this: org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor;
v1 := @parameter0: org.apache.commons.lang3.function.FailableFunction;
v2 = v0.<org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor: java.util.function.Supplier readLockSupplier>;
v3 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor: java.lang.Object lockApplyUnlock(java.util.function.Supplier,org.apache.commons.lang3.function.FailableFunction)>(v2, v1);
return v3;
}
public java.lang.Object applyWriteLocked(org.apache.commons.lang3.function.FailableFunction)
{
org.apache.commons.lang3.function.FailableFunction v1;
java.lang.Object v3;
java.util.function.Supplier v2;
org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor v0;
v0 := @this: org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor;
v1 := @parameter0: org.apache.commons.lang3.function.FailableFunction;
v2 = v0.<org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor: java.util.function.Supplier writeLockSupplier>;
v3 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor: java.lang.Object lockApplyUnlock(java.util.function.Supplier,org.apache.commons.lang3.function.FailableFunction)>(v2, v1);
return v3;
}
public java.lang.Object getLock()
{
java.lang.Object v1;
org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor v0;
v0 := @this: org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor;
v1 = v0.<org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor: java.lang.Object lock>;
return v1;
}
public java.lang.Object getObject()
{
java.lang.Object v1;
org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor v0;
v0 := @this: org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor;
v1 = v0.<org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor: java.lang.Object object>;
return v1;
}
protected void lockAcceptUnlock(java.util.function.Supplier, org.apache.commons.lang3.function.FailableConsumer)
{
java.lang.Throwable v5;
org.apache.commons.lang3.function.FailableConsumer v2;
java.lang.Object v3, v4;
java.lang.RuntimeException v6;
java.util.function.Supplier v1;
org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor v0;
v0 := @this: org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor;
v1 := @parameter0: java.util.function.Supplier;
v2 := @parameter1: org.apache.commons.lang3.function.FailableConsumer;
v3 = interfaceinvoke v1.<java.util.function.Supplier: java.lang.Object get()>();
interfaceinvoke v3.<java.util.concurrent.locks.Lock: void lock()>();
label1:
v4 = v0.<org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor: java.lang.Object object>;
interfaceinvoke v2.<org.apache.commons.lang3.function.FailableConsumer: void accept(java.lang.Object)>(v4);
label2:
interfaceinvoke v3.<java.util.concurrent.locks.Lock: void unlock()>();
goto label4;
label3:
v5 := @caughtexception;
v6 = staticinvoke <org.apache.commons.lang3.function.Failable: java.lang.RuntimeException rethrow(java.lang.Throwable)>(v5);
throw v6;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected java.lang.Object lockApplyUnlock(java.util.function.Supplier, org.apache.commons.lang3.function.FailableFunction)
{
java.lang.Throwable v6;
java.lang.RuntimeException v7;
java.util.function.Supplier v1;
org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor v0;
org.apache.commons.lang3.function.FailableFunction v2;
java.lang.Object v3, v4, v5;
v0 := @this: org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor;
v1 := @parameter0: java.util.function.Supplier;
v2 := @parameter1: org.apache.commons.lang3.function.FailableFunction;
v3 = interfaceinvoke v1.<java.util.function.Supplier: java.lang.Object get()>();
interfaceinvoke v3.<java.util.concurrent.locks.Lock: void lock()>();
label1:
v4 = v0.<org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor: java.lang.Object object>;
v5 = interfaceinvoke v2.<org.apache.commons.lang3.function.FailableFunction: java.lang.Object apply(java.lang.Object)>(v4);
label2:
interfaceinvoke v3.<java.util.concurrent.locks.Lock: void unlock()>();
return v5;
label3:
v6 := @caughtexception;
v7 = staticinvoke <org.apache.commons.lang3.function.Failable: java.lang.RuntimeException rethrow(java.lang.Throwable)>(v6);
throw v7;
catch java.lang.Throwable from label1 to label2 with label3;
}
}