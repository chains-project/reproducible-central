public class org.apache.commons.lang3.concurrent.locks.LockingVisitors extends java.lang.Object
{
public void <init>()
{
org.apache.commons.lang3.concurrent.locks.LockingVisitors v0;
v0 := @this: org.apache.commons.lang3.concurrent.locks.LockingVisitors;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static org.apache.commons.lang3.concurrent.locks.LockingVisitors$ReadWriteLockVisitor reentrantReadWriteLockVisitor(java.lang.Object)
{
java.lang.Object v0;
java.util.concurrent.locks.ReentrantReadWriteLock v2;
org.apache.commons.lang3.concurrent.locks.LockingVisitors$ReadWriteLockVisitor v1;
v0 := @parameter0: java.lang.Object;
v1 = new org.apache.commons.lang3.concurrent.locks.LockingVisitors$ReadWriteLockVisitor;
v2 = new java.util.concurrent.locks.ReentrantReadWriteLock;
specialinvoke v2.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();
specialinvoke v1.<org.apache.commons.lang3.concurrent.locks.LockingVisitors$ReadWriteLockVisitor: void <init>(java.lang.Object,java.util.concurrent.locks.ReadWriteLock)>(v0, v2);
return v1;
}
public static org.apache.commons.lang3.concurrent.locks.LockingVisitors$StampedLockVisitor stampedLockVisitor(java.lang.Object)
{
org.apache.commons.lang3.concurrent.locks.LockingVisitors$StampedLockVisitor v1;
java.lang.Object v0;
java.util.concurrent.locks.StampedLock v2;
v0 := @parameter0: java.lang.Object;
v1 = new org.apache.commons.lang3.concurrent.locks.LockingVisitors$StampedLockVisitor;
v2 = new java.util.concurrent.locks.StampedLock;
specialinvoke v2.<java.util.concurrent.locks.StampedLock: void <init>()>();
specialinvoke v1.<org.apache.commons.lang3.concurrent.locks.LockingVisitors$StampedLockVisitor: void <init>(java.lang.Object,java.util.concurrent.locks.StampedLock)>(v0, v2);
return v1;
}
}