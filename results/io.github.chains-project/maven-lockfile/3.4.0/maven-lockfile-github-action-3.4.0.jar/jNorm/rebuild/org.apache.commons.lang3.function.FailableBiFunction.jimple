public interface  org.apache.commons.lang3.function.FailableBiFunction extends java.lang.Object
{
public static final org.apache.commons.lang3.function.FailableBiFunction NOP;
public static org.apache.commons.lang3.function.FailableBiFunction 'nop'()
{
org.apache.commons.lang3.function.FailableBiFunction v0;
v0 = <org.apache.commons.lang3.function.FailableBiFunction: org.apache.commons.lang3.function.FailableBiFunction NOP>;
return v0;
}
public org.apache.commons.lang3.function.FailableBiFunction andThen(org.apache.commons.lang3.function.FailableFunction)
{
org.apache.commons.lang3.function.FailableBiFunction v0, v2;
org.apache.commons.lang3.function.FailableFunction v1;
v0 := @this: org.apache.commons.lang3.function.FailableBiFunction;
v1 := @parameter0: org.apache.commons.lang3.function.FailableFunction;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <org.apache.commons.lang3.function.FailableBiFunction$lambda_andThen_1__213: org.apache.commons.lang3.function.FailableBiFunction bootstrap$(org.apache.commons.lang3.function.FailableBiFunction,org.apache.commons.lang3.function.FailableFunction)>(v0, v1);
return v2;
}
public abstract java.lang.Object apply(java.lang.Object, java.lang.Object) throws java.lang.Throwable;
static void <clinit>()
{
org.apache.commons.lang3.function.FailableBiFunction v0;
v0 = staticinvoke <org.apache.commons.lang3.function.FailableBiFunction$lambda_static_0__214: org.apache.commons.lang3.function.FailableBiFunction bootstrap$()>();
<org.apache.commons.lang3.function.FailableBiFunction: org.apache.commons.lang3.function.FailableBiFunction NOP> = v0;
return;
}
}