public interface  org.apache.commons.lang3.function.FailableIntConsumer extends java.lang.Object
{
public static final org.apache.commons.lang3.function.FailableIntConsumer NOP;
public static org.apache.commons.lang3.function.FailableIntConsumer 'nop'()
{
org.apache.commons.lang3.function.FailableIntConsumer v0;
v0 = <org.apache.commons.lang3.function.FailableIntConsumer: org.apache.commons.lang3.function.FailableIntConsumer NOP>;
return v0;
}
public abstract void accept(int) throws java.lang.Throwable;
public org.apache.commons.lang3.function.FailableIntConsumer andThen(org.apache.commons.lang3.function.FailableIntConsumer)
{
org.apache.commons.lang3.function.FailableIntConsumer v0, v1, v2;
v0 := @this: org.apache.commons.lang3.function.FailableIntConsumer;
v1 := @parameter0: org.apache.commons.lang3.function.FailableIntConsumer;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <org.apache.commons.lang3.function.FailableIntConsumer$lambda_andThen_1__186: org.apache.commons.lang3.function.FailableIntConsumer bootstrap$(org.apache.commons.lang3.function.FailableIntConsumer,org.apache.commons.lang3.function.FailableIntConsumer)>(v0, v1);
return v2;
}
static void <clinit>()
{
org.apache.commons.lang3.function.FailableIntConsumer v0;
v0 = staticinvoke <org.apache.commons.lang3.function.FailableIntConsumer$lambda_static_0__187: org.apache.commons.lang3.function.FailableIntConsumer bootstrap$()>();
<org.apache.commons.lang3.function.FailableIntConsumer: org.apache.commons.lang3.function.FailableIntConsumer NOP> = v0;
return;
}
}