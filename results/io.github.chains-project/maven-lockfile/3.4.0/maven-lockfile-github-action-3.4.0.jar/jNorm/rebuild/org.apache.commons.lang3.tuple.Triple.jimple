public abstract class org.apache.commons.lang3.tuple.Triple extends java.lang.Object implements java.lang.Comparable, java.io.Serializable
{
private static final long serialVersionUID;
public static final org.apache.commons.lang3.tuple.Triple[] EMPTY_ARRAY;
public void <init>()
{
org.apache.commons.lang3.tuple.Triple v0;
v0 := @this: org.apache.commons.lang3.tuple.Triple;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static org.apache.commons.lang3.tuple.Triple[] emptyArray()
{
org.apache.commons.lang3.tuple.Triple[] v0;
v0 = <org.apache.commons.lang3.tuple.Triple: org.apache.commons.lang3.tuple.Triple[] EMPTY_ARRAY>;
return v0;
}
public static org.apache.commons.lang3.tuple.Triple of(java.lang.Object, java.lang.Object, java.lang.Object)
{
org.apache.commons.lang3.tuple.ImmutableTriple v3;
java.lang.Object v0, v1, v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Object;
v3 = new org.apache.commons.lang3.tuple.ImmutableTriple;
specialinvoke v3.<org.apache.commons.lang3.tuple.ImmutableTriple: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v1, v2);
return v3;
}
public int compareTo(org.apache.commons.lang3.tuple.Triple)
{
org.apache.commons.lang3.builder.CompareToBuilder v11, v2, v5, v8;
int v12;
java.lang.Object v10, v3, v4, v6, v7, v9;
org.apache.commons.lang3.tuple.Triple v0, v1;
v0 := @this: org.apache.commons.lang3.tuple.Triple;
v1 := @parameter0: org.apache.commons.lang3.tuple.Triple;
v2 = new org.apache.commons.lang3.builder.CompareToBuilder;
specialinvoke v2.<org.apache.commons.lang3.builder.CompareToBuilder: void <init>()>();
v3 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getLeft()>();
v4 = virtualinvoke v1.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getLeft()>();
v5 = virtualinvoke v2.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(v3, v4);
v6 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getMiddle()>();
v7 = virtualinvoke v1.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getMiddle()>();
v8 = virtualinvoke v5.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(v6, v7);
v9 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getRight()>();
v10 = virtualinvoke v1.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getRight()>();
v11 = virtualinvoke v8.<org.apache.commons.lang3.builder.CompareToBuilder: org.apache.commons.lang3.builder.CompareToBuilder append(java.lang.Object,java.lang.Object)>(v9, v10);
v12 = virtualinvoke v11.<org.apache.commons.lang3.builder.CompareToBuilder: int toComparison()>();
return v12;
}
public boolean equals(java.lang.Object)
{
java.lang.Object v1, v10, v3, v4, v6, v7, v9;
org.apache.commons.lang3.tuple.Triple v0;
boolean v11, v12, v2, v5, v8;
v0 := @this: org.apache.commons.lang3.tuple.Triple;
v1 := @parameter0: java.lang.Object;
if v1 != v0 goto label1;
return 1;
label1:
v2 = v1 instanceof org.apache.commons.lang3.tuple.Triple;
if v2 == 0 goto label4;
v3 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getLeft()>();
v4 = virtualinvoke v1.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getLeft()>();
v5 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v3, v4);
if v5 == 0 goto label2;
v6 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getMiddle()>();
v7 = virtualinvoke v1.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getMiddle()>();
v8 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v6, v7);
if v8 == 0 goto label2;
v9 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getRight()>();
v10 = virtualinvoke v1.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getRight()>();
v11 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v9, v10);
if v11 == 0 goto label2;
v12 = 1;
goto label3;
label2:
v12 = 0;
label3:
return v12;
label4:
return 0;
}
public abstract java.lang.Object getLeft();
public abstract java.lang.Object getMiddle();
public abstract java.lang.Object getRight();
public int hashCode()
{
int v2, v4, v5, v7, v8;
java.lang.Object v1, v3, v6;
org.apache.commons.lang3.tuple.Triple v0;
v0 := @this: org.apache.commons.lang3.tuple.Triple;
v1 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getLeft()>();
v2 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>(v1);
v3 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getMiddle()>();
v4 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>(v3);
v5 = v2 ^ v4;
v6 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getRight()>();
v7 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>(v6);
v8 = v5 ^ v7;
return v8;
}
public java.lang.String toString()
{
java.lang.Object v1, v2, v3;
java.lang.String v4;
org.apache.commons.lang3.tuple.Triple v0;
v0 := @this: org.apache.commons.lang3.tuple.Triple;
v1 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getLeft()>();
v2 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getMiddle()>();
v3 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getRight()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(\u0001,\u0001,\u0001)");
return v4;
}
public java.lang.String toString(java.lang.String)
{
java.lang.Object[] v2;
java.lang.Object v3, v4, v5;
java.lang.String v1, v6;
org.apache.commons.lang3.tuple.Triple v0;
v0 := @this: org.apache.commons.lang3.tuple.Triple;
v1 := @parameter0: java.lang.String;
v2 = newarray (java.lang.Object)[3];
v3 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getLeft()>();
v2[0] = v3;
v4 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getMiddle()>();
v2[1] = v4;
v5 = virtualinvoke v0.<org.apache.commons.lang3.tuple.Triple: java.lang.Object getRight()>();
v2[2] = v5;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v2);
return v6;
}
static void <clinit>()
{
org.apache.commons.lang3.tuple.Triple$TripleAdapter[] v0;
v0 = newarray (org.apache.commons.lang3.tuple.Triple$TripleAdapter)[0];
<org.apache.commons.lang3.tuple.Triple: org.apache.commons.lang3.tuple.Triple[] EMPTY_ARRAY> = v0;
return;
}
}