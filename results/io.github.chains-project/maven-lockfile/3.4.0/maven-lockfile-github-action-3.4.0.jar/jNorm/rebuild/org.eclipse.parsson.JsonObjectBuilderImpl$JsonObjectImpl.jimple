final class org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl extends java.util.AbstractMap implements jakarta.json.JsonObject
{
private final java.util.Map valueMap;
private final org.eclipse.parsson.api.BufferPool bufferPool;
private int hashCode;
void <init>(java.util.Map, org.eclipse.parsson.api.BufferPool)
{
org.eclipse.parsson.api.BufferPool v2;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
java.util.Map v1;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 := @parameter0: java.util.Map;
v2 := @parameter1: org.eclipse.parsson.api.BufferPool;
specialinvoke v0.<java.util.AbstractMap: void <init>()>();
v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: java.util.Map valueMap> = v1;
v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: org.eclipse.parsson.api.BufferPool bufferPool> = v2;
return;
}
public jakarta.json.JsonArray getJsonArray(java.lang.String)
{
java.lang.String v1;
jakarta.json.JsonValue v2;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: jakarta.json.JsonValue get(java.lang.Object)>(v1);
return v2;
}
public jakarta.json.JsonObject getJsonObject(java.lang.String)
{
java.lang.String v1;
jakarta.json.JsonValue v2;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: jakarta.json.JsonValue get(java.lang.Object)>(v1);
return v2;
}
public jakarta.json.JsonNumber getJsonNumber(java.lang.String)
{
java.lang.String v1;
jakarta.json.JsonValue v2;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: jakarta.json.JsonValue get(java.lang.Object)>(v1);
return v2;
}
public jakarta.json.JsonString getJsonString(java.lang.String)
{
java.lang.String v1;
jakarta.json.JsonValue v2;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: jakarta.json.JsonValue get(java.lang.Object)>(v1);
return v2;
}
public java.lang.String getString(java.lang.String)
{
java.lang.String v1, v3;
jakarta.json.JsonString v2;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: jakarta.json.JsonString getJsonString(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<jakarta.json.JsonString: java.lang.String getString()>();
return v3;
}
public java.lang.String getString(java.lang.String, java.lang.String)
{
jakarta.json.JsonValue v3;
java.lang.String v1, v2, v5;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
boolean v4;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: jakarta.json.JsonValue get(java.lang.Object)>(v1);
v4 = v3 instanceof jakarta.json.JsonString;
if v4 == 0 goto label1;
v5 = interfaceinvoke v3.<jakarta.json.JsonString: java.lang.String getString()>();
return v5;
label1:
return v2;
}
public int getInt(java.lang.String)
{
int v3;
jakarta.json.JsonNumber v2;
java.lang.String v1;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: jakarta.json.JsonNumber getJsonNumber(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<jakarta.json.JsonNumber: int intValue()>();
return v3;
}
public int getInt(java.lang.String, int)
{
jakarta.json.JsonValue v3;
int v2, v5;
java.lang.String v1;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
boolean v4;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: jakarta.json.JsonValue get(java.lang.Object)>(v1);
v4 = v3 instanceof jakarta.json.JsonNumber;
if v4 == 0 goto label1;
v5 = interfaceinvoke v3.<jakarta.json.JsonNumber: int intValue()>();
return v5;
label1:
return v2;
}
public boolean getBoolean(java.lang.String)
{
jakarta.json.JsonValue v2, v4, v5;
java.lang.String v1;
java.lang.ClassCastException v6;
java.lang.NullPointerException v3;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: jakarta.json.JsonValue get(java.lang.Object)>(v1);
if v2 != null goto label1;
v3 = new java.lang.NullPointerException;
specialinvoke v3.<java.lang.NullPointerException: void <init>()>();
throw v3;
label1:
v4 = <jakarta.json.JsonValue: jakarta.json.JsonValue TRUE>;
if v2 != v4 goto label2;
return 1;
label2:
v5 = <jakarta.json.JsonValue: jakarta.json.JsonValue FALSE>;
if v2 != v5 goto label3;
return 0;
label3:
v6 = new java.lang.ClassCastException;
specialinvoke v6.<java.lang.ClassCastException: void <init>()>();
throw v6;
}
public boolean getBoolean(java.lang.String, boolean)
{
jakarta.json.JsonValue v3, v4, v5;
java.lang.String v1;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
boolean v2;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 = virtualinvoke v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: jakarta.json.JsonValue get(java.lang.Object)>(v1);
v4 = <jakarta.json.JsonValue: jakarta.json.JsonValue TRUE>;
if v3 != v4 goto label1;
return 1;
label1:
v5 = <jakarta.json.JsonValue: jakarta.json.JsonValue FALSE>;
if v3 != v5 goto label2;
return 0;
label2:
return v2;
}
public boolean isNull(java.lang.String)
{
jakarta.json.JsonValue v2, v3;
java.lang.String v1;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
boolean v4;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: jakarta.json.JsonValue get(java.lang.Object)>(v1);
v3 = <jakarta.json.JsonValue: jakarta.json.JsonValue NULL>;
v4 = virtualinvoke v2.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
return v4;
}
public jakarta.json.JsonValue$ValueType getValueType()
{
jakarta.json.JsonValue$ValueType v1;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType OBJECT>;
return v1;
}
public java.util.Set entrySet()
{
java.util.Set v2;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
java.util.Map v1;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 = v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: java.util.Map valueMap>;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
return v2;
}
public int hashCode()
{
int v1, v2, v3;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 = v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: int hashCode>;
if v1 != 0 goto label1;
v2 = specialinvoke v0.<java.util.AbstractMap: int hashCode()>();
v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: int hashCode> = v2;
label1:
v3 = v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: int hashCode>;
return v3;
}
public java.lang.String toString()
{
java.lang.Throwable v4;
java.io.StringWriter v1;
java.lang.String v5;
org.eclipse.parsson.api.BufferPool v3;
org.eclipse.parsson.JsonWriterImpl v2;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 = new java.io.StringWriter;
specialinvoke v1.<java.io.StringWriter: void <init>()>();
v2 = new org.eclipse.parsson.JsonWriterImpl;
v3 = v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
specialinvoke v2.<org.eclipse.parsson.JsonWriterImpl: void <init>(java.io.Writer,org.eclipse.parsson.api.BufferPool)>(v1, v3);
label1:
interfaceinvoke v2.<jakarta.json.JsonWriter: void write(jakarta.json.JsonStructure)>(v0);
label2:
interfaceinvoke v2.<jakarta.json.JsonWriter: void close()>();
goto label4;
label3:
v4 := @caughtexception;
throw v4;
label4:
v5 = virtualinvoke v1.<java.io.StringWriter: java.lang.String toString()>();
return v5;
catch java.lang.Throwable from label1 to label2 with label3;
}
public jakarta.json.JsonObject asJsonObject()
{
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
return v0;
}
public int size()
{
int v2;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
java.util.Map v1;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 = v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: java.util.Map valueMap>;
v2 = interfaceinvoke v1.<java.util.Map: int size()>();
return v2;
}
public jakarta.json.JsonValue get(java.lang.Object)
{
java.util.Map v2;
java.lang.Object v1, v3;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 := @parameter0: java.lang.Object;
v2 = v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: java.util.Map valueMap>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v3;
}
public boolean containsKey(java.lang.Object)
{
java.util.Map v2;
java.lang.Object v1;
org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl v0;
boolean v3;
v0 := @this: org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl;
v1 := @parameter0: java.lang.Object;
v2 = v0.<org.eclipse.parsson.JsonObjectBuilderImpl$JsonObjectImpl: java.util.Map valueMap>;
v3 = interfaceinvoke v2.<java.util.Map: boolean containsKey(java.lang.Object)>(v1);
return v3;
}
}