class org.eclipse.parsson.JsonReaderImpl extends java.lang.Object implements jakarta.json.JsonReader
{
private final org.eclipse.parsson.JsonParserImpl parser;
private boolean readDone;
private final org.eclipse.parsson.api.BufferPool bufferPool;
void <init>(java.io.Reader, org.eclipse.parsson.api.BufferPool)
{
java.util.Map v3;
java.io.Reader v1;
org.eclipse.parsson.JsonReaderImpl v0;
org.eclipse.parsson.api.BufferPool v2;
v0 := @this: org.eclipse.parsson.JsonReaderImpl;
v1 := @parameter0: java.io.Reader;
v2 := @parameter1: org.eclipse.parsson.api.BufferPool;
v3 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
specialinvoke v0.<org.eclipse.parsson.JsonReaderImpl: void <init>(java.io.Reader,org.eclipse.parsson.api.BufferPool,boolean,java.util.Map)>(v1, v2, 0, v3);
return;
}
void <init>(java.io.Reader, org.eclipse.parsson.api.BufferPool, boolean, java.util.Map)
{
java.util.Map v4;
org.eclipse.parsson.JsonParserImpl v5;
java.io.Reader v1;
org.eclipse.parsson.JsonReaderImpl v0;
org.eclipse.parsson.api.BufferPool v2;
boolean v3;
v0 := @this: org.eclipse.parsson.JsonReaderImpl;
v1 := @parameter0: java.io.Reader;
v2 := @parameter1: org.eclipse.parsson.api.BufferPool;
v3 := @parameter2: boolean;
v4 := @parameter3: java.util.Map;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = new org.eclipse.parsson.JsonParserImpl;
specialinvoke v5.<org.eclipse.parsson.JsonParserImpl: void <init>(java.io.Reader,org.eclipse.parsson.api.BufferPool,boolean,java.util.Map)>(v1, v2, v3, v4);
v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser> = v5;
v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.api.BufferPool bufferPool> = v2;
return;
}
void <init>(java.io.InputStream, org.eclipse.parsson.api.BufferPool)
{
java.util.Map v3;
org.eclipse.parsson.JsonReaderImpl v0;
org.eclipse.parsson.api.BufferPool v2;
java.io.InputStream v1;
v0 := @this: org.eclipse.parsson.JsonReaderImpl;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: org.eclipse.parsson.api.BufferPool;
v3 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
specialinvoke v0.<org.eclipse.parsson.JsonReaderImpl: void <init>(java.io.InputStream,org.eclipse.parsson.api.BufferPool,boolean,java.util.Map)>(v1, v2, 0, v3);
return;
}
void <init>(java.io.InputStream, org.eclipse.parsson.api.BufferPool, boolean, java.util.Map)
{
java.util.Map v4;
org.eclipse.parsson.JsonParserImpl v5;
org.eclipse.parsson.JsonReaderImpl v0;
org.eclipse.parsson.api.BufferPool v2;
boolean v3;
java.io.InputStream v1;
v0 := @this: org.eclipse.parsson.JsonReaderImpl;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: org.eclipse.parsson.api.BufferPool;
v3 := @parameter2: boolean;
v4 := @parameter3: java.util.Map;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = new org.eclipse.parsson.JsonParserImpl;
specialinvoke v5.<org.eclipse.parsson.JsonParserImpl: void <init>(java.io.InputStream,org.eclipse.parsson.api.BufferPool,boolean,java.util.Map)>(v1, v2, v3, v4);
v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser> = v5;
v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.api.BufferPool bufferPool> = v2;
return;
}
void <init>(java.io.InputStream, java.nio.charset.Charset, org.eclipse.parsson.api.BufferPool)
{
java.nio.charset.Charset v2;
java.util.Map v4;
org.eclipse.parsson.JsonReaderImpl v0;
org.eclipse.parsson.api.BufferPool v3;
java.io.InputStream v1;
v0 := @this: org.eclipse.parsson.JsonReaderImpl;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: java.nio.charset.Charset;
v3 := @parameter2: org.eclipse.parsson.api.BufferPool;
v4 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
specialinvoke v0.<org.eclipse.parsson.JsonReaderImpl: void <init>(java.io.InputStream,java.nio.charset.Charset,org.eclipse.parsson.api.BufferPool,boolean,java.util.Map)>(v1, v2, v3, 0, v4);
return;
}
void <init>(java.io.InputStream, java.nio.charset.Charset, org.eclipse.parsson.api.BufferPool, boolean, java.util.Map)
{
java.nio.charset.Charset v2;
java.util.Map v5;
org.eclipse.parsson.JsonParserImpl v6;
org.eclipse.parsson.JsonReaderImpl v0;
org.eclipse.parsson.api.BufferPool v3;
boolean v4;
java.io.InputStream v1;
v0 := @this: org.eclipse.parsson.JsonReaderImpl;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: java.nio.charset.Charset;
v3 := @parameter2: org.eclipse.parsson.api.BufferPool;
v4 := @parameter3: boolean;
v5 := @parameter4: java.util.Map;
specialinvoke v0.<java.lang.Object: void <init>()>();
v6 = new org.eclipse.parsson.JsonParserImpl;
specialinvoke v6.<org.eclipse.parsson.JsonParserImpl: void <init>(java.io.InputStream,java.nio.charset.Charset,org.eclipse.parsson.api.BufferPool,boolean,java.util.Map)>(v1, v2, v3, v4, v5);
v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser> = v6;
v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.api.BufferPool bufferPool> = v3;
return;
}
public jakarta.json.JsonStructure read()
{
java.lang.IllegalStateException v14, v2;
org.eclipse.parsson.JsonReaderImpl v0;
jakarta.json.JsonObject v13;
jakarta.json.JsonException v19;
java.lang.String v16, v20, v3;
boolean v1, v5;
jakarta.json.stream.JsonLocation v18;
jakarta.json.stream.JsonParsingException v15;
org.eclipse.parsson.JsonParserImpl v12, v17, v4, v6, v9;
jakarta.json.stream.JsonParser$Event v11, v7, v8;
jakarta.json.JsonArray v10;
v0 := @this: org.eclipse.parsson.JsonReaderImpl;
v1 = v0.<org.eclipse.parsson.JsonReaderImpl: boolean readDone>;
if v1 == 0 goto label1;
v2 = new java.lang.IllegalStateException;
v3 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String READER_READ_ALREADY_CALLED()>();
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v3);
throw v2;
label1:
v0.<org.eclipse.parsson.JsonReaderImpl: boolean readDone> = 1;
v4 = v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser>;
v5 = virtualinvoke v4.<org.eclipse.parsson.JsonParserImpl: boolean hasNext()>();
if v5 == 0 goto label7;
label2:
v6 = v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser>;
v7 = virtualinvoke v6.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event next()>();
v8 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_ARRAY>;
if v7 != v8 goto label4;
v9 = v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser>;
v10 = virtualinvoke v9.<org.eclipse.parsson.JsonParserImpl: jakarta.json.JsonArray getArray()>();
label3:
return v10;
label4:
v11 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_OBJECT>;
if v7 != v11 goto label7;
v12 = v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser>;
v13 = virtualinvoke v12.<org.eclipse.parsson.JsonParserImpl: jakarta.json.JsonObject getObject()>();
label5:
return v13;
label6:
v14 := @caughtexception;
v15 = new jakarta.json.stream.JsonParsingException;
v16 = virtualinvoke v14.<java.lang.IllegalStateException: java.lang.String getMessage()>();
v17 = v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser>;
v18 = virtualinvoke v17.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonLocation getLastCharLocation()>();
specialinvoke v15.<jakarta.json.stream.JsonParsingException: void <init>(java.lang.String,java.lang.Throwable,jakarta.json.stream.JsonLocation)>(v16, v14, v18);
throw v15;
label7:
v19 = new jakarta.json.JsonException;
v20 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String INTERNAL_ERROR()>();
specialinvoke v19.<jakarta.json.JsonException: void <init>(java.lang.String)>(v20);
throw v19;
catch java.lang.IllegalStateException from label2 to label3 with label6;
catch java.lang.IllegalStateException from label4 to label5 with label6;
}
public jakarta.json.JsonObject readObject()
{
java.lang.IllegalStateException v2, v9;
org.eclipse.parsson.JsonReaderImpl v0;
jakarta.json.JsonObject v8;
jakarta.json.JsonException v14;
java.lang.String v11, v15, v3;
boolean v1, v5;
jakarta.json.stream.JsonLocation v13;
jakarta.json.stream.JsonParsingException v10;
org.eclipse.parsson.JsonParserImpl v12, v4, v6, v7;
v0 := @this: org.eclipse.parsson.JsonReaderImpl;
v1 = v0.<org.eclipse.parsson.JsonReaderImpl: boolean readDone>;
if v1 == 0 goto label1;
v2 = new java.lang.IllegalStateException;
v3 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String READER_READ_ALREADY_CALLED()>();
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v3);
throw v2;
label1:
v0.<org.eclipse.parsson.JsonReaderImpl: boolean readDone> = 1;
v4 = v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser>;
v5 = virtualinvoke v4.<org.eclipse.parsson.JsonParserImpl: boolean hasNext()>();
if v5 == 0 goto label5;
label2:
v6 = v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser>;
virtualinvoke v6.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event next()>();
v7 = v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser>;
v8 = virtualinvoke v7.<org.eclipse.parsson.JsonParserImpl: jakarta.json.JsonObject getObject()>();
label3:
return v8;
label4:
v9 := @caughtexception;
v10 = new jakarta.json.stream.JsonParsingException;
v11 = virtualinvoke v9.<java.lang.IllegalStateException: java.lang.String getMessage()>();
v12 = v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser>;
v13 = virtualinvoke v12.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonLocation getLastCharLocation()>();
specialinvoke v10.<jakarta.json.stream.JsonParsingException: void <init>(java.lang.String,java.lang.Throwable,jakarta.json.stream.JsonLocation)>(v11, v9, v13);
throw v10;
label5:
v14 = new jakarta.json.JsonException;
v15 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String INTERNAL_ERROR()>();
specialinvoke v14.<jakarta.json.JsonException: void <init>(java.lang.String)>(v15);
throw v14;
catch java.lang.IllegalStateException from label2 to label3 with label4;
}
public jakarta.json.JsonArray readArray()
{
java.lang.IllegalStateException v2, v9;
org.eclipse.parsson.JsonReaderImpl v0;
jakarta.json.JsonException v14;
java.lang.String v11, v15, v3;
boolean v1, v5;
jakarta.json.stream.JsonLocation v13;
jakarta.json.stream.JsonParsingException v10;
org.eclipse.parsson.JsonParserImpl v12, v4, v6, v7;
jakarta.json.JsonArray v8;
v0 := @this: org.eclipse.parsson.JsonReaderImpl;
v1 = v0.<org.eclipse.parsson.JsonReaderImpl: boolean readDone>;
if v1 == 0 goto label1;
v2 = new java.lang.IllegalStateException;
v3 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String READER_READ_ALREADY_CALLED()>();
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v3);
throw v2;
label1:
v0.<org.eclipse.parsson.JsonReaderImpl: boolean readDone> = 1;
v4 = v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser>;
v5 = virtualinvoke v4.<org.eclipse.parsson.JsonParserImpl: boolean hasNext()>();
if v5 == 0 goto label5;
label2:
v6 = v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser>;
virtualinvoke v6.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event next()>();
v7 = v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser>;
v8 = virtualinvoke v7.<org.eclipse.parsson.JsonParserImpl: jakarta.json.JsonArray getArray()>();
label3:
return v8;
label4:
v9 := @caughtexception;
v10 = new jakarta.json.stream.JsonParsingException;
v11 = virtualinvoke v9.<java.lang.IllegalStateException: java.lang.String getMessage()>();
v12 = v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser>;
v13 = virtualinvoke v12.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonLocation getLastCharLocation()>();
specialinvoke v10.<jakarta.json.stream.JsonParsingException: void <init>(java.lang.String,java.lang.Throwable,jakarta.json.stream.JsonLocation)>(v11, v9, v13);
throw v10;
label5:
v14 = new jakarta.json.JsonException;
v15 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String INTERNAL_ERROR()>();
specialinvoke v14.<jakarta.json.JsonException: void <init>(java.lang.String)>(v15);
throw v14;
catch java.lang.IllegalStateException from label2 to label3 with label4;
}
public jakarta.json.JsonValue readValue()
{
java.lang.IllegalStateException v2, v9;
jakarta.json.JsonValue v8;
org.eclipse.parsson.JsonReaderImpl v0;
jakarta.json.JsonException v14;
java.lang.String v11, v15, v3;
boolean v1, v5;
jakarta.json.stream.JsonLocation v13;
jakarta.json.stream.JsonParsingException v10;
org.eclipse.parsson.JsonParserImpl v12, v4, v6, v7;
v0 := @this: org.eclipse.parsson.JsonReaderImpl;
v1 = v0.<org.eclipse.parsson.JsonReaderImpl: boolean readDone>;
if v1 == 0 goto label1;
v2 = new java.lang.IllegalStateException;
v3 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String READER_READ_ALREADY_CALLED()>();
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v3);
throw v2;
label1:
v0.<org.eclipse.parsson.JsonReaderImpl: boolean readDone> = 1;
v4 = v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser>;
v5 = virtualinvoke v4.<org.eclipse.parsson.JsonParserImpl: boolean hasNext()>();
if v5 == 0 goto label5;
label2:
v6 = v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser>;
virtualinvoke v6.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event next()>();
v7 = v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser>;
v8 = virtualinvoke v7.<org.eclipse.parsson.JsonParserImpl: jakarta.json.JsonValue getValue()>();
label3:
return v8;
label4:
v9 := @caughtexception;
v10 = new jakarta.json.stream.JsonParsingException;
v11 = virtualinvoke v9.<java.lang.IllegalStateException: java.lang.String getMessage()>();
v12 = v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser>;
v13 = virtualinvoke v12.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonLocation getLastCharLocation()>();
specialinvoke v10.<jakarta.json.stream.JsonParsingException: void <init>(java.lang.String,java.lang.Throwable,jakarta.json.stream.JsonLocation)>(v11, v9, v13);
throw v10;
label5:
v14 = new jakarta.json.JsonException;
v15 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String INTERNAL_ERROR()>();
specialinvoke v14.<jakarta.json.JsonException: void <init>(java.lang.String)>(v15);
throw v14;
catch java.lang.IllegalStateException from label2 to label3 with label4;
}
public void close()
{
org.eclipse.parsson.JsonParserImpl v1;
org.eclipse.parsson.JsonReaderImpl v0;
v0 := @this: org.eclipse.parsson.JsonReaderImpl;
v0.<org.eclipse.parsson.JsonReaderImpl: boolean readDone> = 1;
v1 = v0.<org.eclipse.parsson.JsonReaderImpl: org.eclipse.parsson.JsonParserImpl parser>;
virtualinvoke v1.<org.eclipse.parsson.JsonParserImpl: void close()>();
return;
}
}