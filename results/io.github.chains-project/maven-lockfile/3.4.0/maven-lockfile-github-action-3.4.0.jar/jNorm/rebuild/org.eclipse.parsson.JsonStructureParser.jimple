class org.eclipse.parsson.JsonStructureParser extends java.lang.Object implements jakarta.json.stream.JsonParser
{
private org.eclipse.parsson.JsonStructureParser$Scope current;
private jakarta.json.stream.JsonParser$Event state;
private final java.util.Deque scopeStack;
void <init>(jakarta.json.JsonArray)
{
org.eclipse.parsson.JsonStructureParser v0;
java.util.ArrayDeque v2;
org.eclipse.parsson.JsonStructureParser$ArrayScope v3;
jakarta.json.JsonArray v1;
v0 := @this: org.eclipse.parsson.JsonStructureParser;
v1 := @parameter0: jakarta.json.JsonArray;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.ArrayDeque;
specialinvoke v2.<java.util.ArrayDeque: void <init>()>();
v0.<org.eclipse.parsson.JsonStructureParser: java.util.Deque scopeStack> = v2;
v3 = new org.eclipse.parsson.JsonStructureParser$ArrayScope;
specialinvoke v3.<org.eclipse.parsson.JsonStructureParser$ArrayScope: void <init>(jakarta.json.JsonArray)>(v1);
v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current> = v3;
return;
}
void <init>(jakarta.json.JsonObject)
{
org.eclipse.parsson.JsonStructureParser$ObjectScope v3;
org.eclipse.parsson.JsonStructureParser v0;
jakarta.json.JsonObject v1;
java.util.ArrayDeque v2;
v0 := @this: org.eclipse.parsson.JsonStructureParser;
v1 := @parameter0: jakarta.json.JsonObject;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.ArrayDeque;
specialinvoke v2.<java.util.ArrayDeque: void <init>()>();
v0.<org.eclipse.parsson.JsonStructureParser: java.util.Deque scopeStack> = v2;
v3 = new org.eclipse.parsson.JsonStructureParser$ObjectScope;
specialinvoke v3.<org.eclipse.parsson.JsonStructureParser$ObjectScope: void <init>(jakarta.json.JsonObject)>(v1);
v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current> = v3;
return;
}
public java.lang.String getString()
{
java.lang.IllegalStateException v13;
jakarta.json.JsonValue v11, v8;
int[] v1;
int v3, v4;
java.lang.String v12, v15, v6, v9;
org.eclipse.parsson.JsonStructureParser v0;
org.eclipse.parsson.JsonStructureParser$Scope v10, v5, v7;
jakarta.json.stream.JsonParser$Event v14, v2;
v0 := @this: org.eclipse.parsson.JsonStructureParser;
v1 = <org.eclipse.parsson.JsonStructureParser$1: int[] $SwitchMap$jakarta$json$stream$JsonParser$Event>;
v2 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v3 = virtualinvoke v2.<jakarta.json.stream.JsonParser$Event: int ordinal()>();
v4 = v1[v3];
tableswitch(v4)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label3;
default: goto label4;
};
label1:
v5 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v6 = v5.<org.eclipse.parsson.JsonStructureParser$ObjectScope: java.lang.String key>;
return v6;
label2:
v7 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v8 = virtualinvoke v7.<org.eclipse.parsson.JsonStructureParser$Scope: jakarta.json.JsonValue getJsonValue()>();
v9 = interfaceinvoke v8.<jakarta.json.JsonString: java.lang.String getString()>();
return v9;
label3:
v10 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v11 = virtualinvoke v10.<org.eclipse.parsson.JsonStructureParser$Scope: jakarta.json.JsonValue getJsonValue()>();
v12 = interfaceinvoke v11.<jakarta.json.JsonNumber: java.lang.String toString()>();
return v12;
label4:
v13 = new java.lang.IllegalStateException;
v14 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v15 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_GETSTRING_ERR(jakarta.json.stream.JsonParser$Event)>(v14);
specialinvoke v13.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v15);
throw v13;
}
public boolean isIntegralNumber()
{
java.lang.IllegalStateException v6;
jakarta.json.JsonValue v4;
org.eclipse.parsson.JsonStructureParser v0;
org.eclipse.parsson.JsonStructureParser$Scope v3;
jakarta.json.stream.JsonParser$Event v1, v2, v7;
java.lang.String v8;
boolean v5;
v0 := @this: org.eclipse.parsson.JsonStructureParser;
v1 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v2 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_NUMBER>;
if v1 != v2 goto label1;
v3 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v4 = virtualinvoke v3.<org.eclipse.parsson.JsonStructureParser$Scope: jakarta.json.JsonValue getJsonValue()>();
v5 = interfaceinvoke v4.<jakarta.json.JsonNumber: boolean isIntegral()>();
return v5;
label1:
v6 = new java.lang.IllegalStateException;
v7 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v8 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_ISINTEGRALNUMBER_ERR(jakarta.json.stream.JsonParser$Event)>(v7);
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v8);
throw v6;
}
public int getInt()
{
java.lang.IllegalStateException v6;
jakarta.json.JsonValue v4;
org.eclipse.parsson.JsonStructureParser v0;
org.eclipse.parsson.JsonStructureParser$Scope v3;
jakarta.json.stream.JsonParser$Event v1, v2, v7;
int v5;
java.lang.String v8;
v0 := @this: org.eclipse.parsson.JsonStructureParser;
v1 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v2 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_NUMBER>;
if v1 != v2 goto label1;
v3 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v4 = virtualinvoke v3.<org.eclipse.parsson.JsonStructureParser$Scope: jakarta.json.JsonValue getJsonValue()>();
v5 = interfaceinvoke v4.<jakarta.json.JsonNumber: int intValue()>();
return v5;
label1:
v6 = new java.lang.IllegalStateException;
v7 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v8 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_GETINT_ERR(jakarta.json.stream.JsonParser$Event)>(v7);
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v8);
throw v6;
}
public long getLong()
{
java.lang.IllegalStateException v6;
jakarta.json.JsonValue v4;
long v5;
org.eclipse.parsson.JsonStructureParser v0;
org.eclipse.parsson.JsonStructureParser$Scope v3;
jakarta.json.stream.JsonParser$Event v1, v2, v7;
java.lang.String v8;
v0 := @this: org.eclipse.parsson.JsonStructureParser;
v1 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v2 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_NUMBER>;
if v1 != v2 goto label1;
v3 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v4 = virtualinvoke v3.<org.eclipse.parsson.JsonStructureParser$Scope: jakarta.json.JsonValue getJsonValue()>();
v5 = interfaceinvoke v4.<jakarta.json.JsonNumber: long longValue()>();
return v5;
label1:
v6 = new java.lang.IllegalStateException;
v7 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v8 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_GETLONG_ERR(jakarta.json.stream.JsonParser$Event)>(v7);
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v8);
throw v6;
}
public java.math.BigDecimal getBigDecimal()
{
java.lang.IllegalStateException v6;
jakarta.json.JsonValue v4;
java.math.BigDecimal v5;
org.eclipse.parsson.JsonStructureParser v0;
org.eclipse.parsson.JsonStructureParser$Scope v3;
jakarta.json.stream.JsonParser$Event v1, v2, v7;
java.lang.String v8;
v0 := @this: org.eclipse.parsson.JsonStructureParser;
v1 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v2 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_NUMBER>;
if v1 != v2 goto label1;
v3 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v4 = virtualinvoke v3.<org.eclipse.parsson.JsonStructureParser$Scope: jakarta.json.JsonValue getJsonValue()>();
v5 = interfaceinvoke v4.<jakarta.json.JsonNumber: java.math.BigDecimal bigDecimalValue()>();
return v5;
label1:
v6 = new java.lang.IllegalStateException;
v7 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v8 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_GETBIGDECIMAL_ERR(jakarta.json.stream.JsonParser$Event)>(v7);
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v8);
throw v6;
}
public jakarta.json.stream.JsonLocation getLocation()
{
jakarta.json.stream.JsonLocation v1;
org.eclipse.parsson.JsonStructureParser v0;
v0 := @this: org.eclipse.parsson.JsonStructureParser;
v1 = <org.eclipse.parsson.JsonLocationImpl: jakarta.json.stream.JsonLocation UNKNOWN>;
return v1;
}
public boolean hasNext()
{
java.util.Deque v5;
org.eclipse.parsson.JsonStructureParser v0;
jakarta.json.stream.JsonParser$Event v1, v2, v3, v4;
boolean v6, v7;
v0 := @this: org.eclipse.parsson.JsonStructureParser;
v1 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v2 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event END_OBJECT>;
if v1 == v2 goto label1;
v3 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v4 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event END_ARRAY>;
if v3 != v4 goto label2;
label1:
v5 = v0.<org.eclipse.parsson.JsonStructureParser: java.util.Deque scopeStack>;
v6 = interfaceinvoke v5.<java.util.Deque: boolean isEmpty()>();
if v6 != 0 goto label3;
label2:
v7 = 1;
goto label4;
label3:
v7 = 0;
label4:
return v7;
}
public jakarta.json.stream.JsonParser$Event next()
{
org.eclipse.parsson.JsonStructureParser v0;
jakarta.json.stream.JsonParser$Event v3;
java.util.NoSuchElementException v2;
boolean v1;
v0 := @this: org.eclipse.parsson.JsonStructureParser;
v1 = virtualinvoke v0.<org.eclipse.parsson.JsonStructureParser: boolean hasNext()>();
if v1 != 0 goto label1;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>()>();
throw v2;
label1:
specialinvoke v0.<org.eclipse.parsson.JsonStructureParser: void transition()>();
v3 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
return v3;
}
private void transition()
{
jakarta.json.JsonValue v17, v26, v32, v41;
boolean v12, v14, v3, v44;
org.eclipse.parsson.JsonStructureParser v0;
java.util.Deque v23, v38, v9;
org.eclipse.parsson.JsonStructureParser$Scope v11, v13, v15, v16, v2, v24, v25, v27, v31, v39, v40, v42, v43, v45;
jakarta.json.stream.JsonParser$Event v1, v18, v19, v20, v21, v22, v28, v29, v30, v33, v34, v35, v36, v37, v4, v46, v47, v5, v6, v7, v8;
java.lang.Object v10;
v0 := @this: org.eclipse.parsson.JsonStructureParser;
v1 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
if v1 != null goto label03;
v2 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v3 = v2 instanceof org.eclipse.parsson.JsonStructureParser$ArrayScope;
if v3 == 0 goto label01;
v4 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_ARRAY>;
goto label02;
label01:
v4 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_OBJECT>;
label02:
v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state> = v4;
goto label12;
label03:
v5 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v6 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event END_OBJECT>;
if v5 == v6 goto label04;
v7 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v8 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event END_ARRAY>;
if v7 != v8 goto label05;
label04:
v9 = v0.<org.eclipse.parsson.JsonStructureParser: java.util.Deque scopeStack>;
v10 = interfaceinvoke v9.<java.util.Deque: java.lang.Object pop()>();
v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current> = v10;
label05:
v11 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v12 = v11 instanceof org.eclipse.parsson.JsonStructureParser$ArrayScope;
if v12 == 0 goto label08;
v13 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v14 = virtualinvoke v13.<org.eclipse.parsson.JsonStructureParser$Scope: boolean hasNext()>();
if v14 == 0 goto label07;
v15 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
virtualinvoke v15.<org.eclipse.parsson.JsonStructureParser$Scope: java.lang.Object next()>();
v16 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v17 = virtualinvoke v16.<org.eclipse.parsson.JsonStructureParser$Scope: jakarta.json.JsonValue getJsonValue()>();
v18 = staticinvoke <org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event getState(jakarta.json.JsonValue)>(v17);
v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state> = v18;
v19 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v20 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_ARRAY>;
if v19 == v20 goto label06;
v21 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v22 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_OBJECT>;
if v21 != v22 goto label12;
label06:
v23 = v0.<org.eclipse.parsson.JsonStructureParser: java.util.Deque scopeStack>;
v24 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
interfaceinvoke v23.<java.util.Deque: void push(java.lang.Object)>(v24);
v25 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v26 = virtualinvoke v25.<org.eclipse.parsson.JsonStructureParser$Scope: jakarta.json.JsonValue getJsonValue()>();
v27 = staticinvoke <org.eclipse.parsson.JsonStructureParser$Scope: org.eclipse.parsson.JsonStructureParser$Scope createScope(jakarta.json.JsonValue)>(v26);
v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current> = v27;
goto label12;
label07:
v28 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event END_ARRAY>;
v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state> = v28;
goto label12;
label08:
v29 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v30 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event KEY_NAME>;
if v29 != v30 goto label10;
v31 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v32 = virtualinvoke v31.<org.eclipse.parsson.JsonStructureParser$Scope: jakarta.json.JsonValue getJsonValue()>();
v33 = staticinvoke <org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event getState(jakarta.json.JsonValue)>(v32);
v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state> = v33;
v34 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v35 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_ARRAY>;
if v34 == v35 goto label09;
v36 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v37 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_OBJECT>;
if v36 != v37 goto label12;
label09:
v38 = v0.<org.eclipse.parsson.JsonStructureParser: java.util.Deque scopeStack>;
v39 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
interfaceinvoke v38.<java.util.Deque: void push(java.lang.Object)>(v39);
v40 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v41 = virtualinvoke v40.<org.eclipse.parsson.JsonStructureParser$Scope: jakarta.json.JsonValue getJsonValue()>();
v42 = staticinvoke <org.eclipse.parsson.JsonStructureParser$Scope: org.eclipse.parsson.JsonStructureParser$Scope createScope(jakarta.json.JsonValue)>(v41);
v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current> = v42;
goto label12;
label10:
v43 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v44 = virtualinvoke v43.<org.eclipse.parsson.JsonStructureParser$Scope: boolean hasNext()>();
if v44 == 0 goto label11;
v45 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
virtualinvoke v45.<org.eclipse.parsson.JsonStructureParser$Scope: java.lang.Object next()>();
v46 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event KEY_NAME>;
v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state> = v46;
goto label12;
label11:
v47 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event END_OBJECT>;
v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state> = v47;
label12:
return;
}
public void close()
{
org.eclipse.parsson.JsonStructureParser v0;
v0 := @this: org.eclipse.parsson.JsonStructureParser;
return;
}
public void skipObject()
{
jakarta.json.JsonValue v7;
int[] v9;
int v11, v12, v3;
boolean v14, v2;
org.eclipse.parsson.JsonStructureParser v0;
org.eclipse.parsson.JsonStructureParser$Scope v1, v13, v15, v6;
jakarta.json.stream.JsonParser$Event v10, v16, v17, v18, v19, v4, v5, v8;
v0 := @this: org.eclipse.parsson.JsonStructureParser;
v1 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v2 = v1 instanceof org.eclipse.parsson.JsonStructureParser$ObjectScope;
if v2 == 0 goto label7;
v3 = 1;
label1:
v4 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v5 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event KEY_NAME>;
if v4 != v5 goto label4;
v6 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v7 = virtualinvoke v6.<org.eclipse.parsson.JsonStructureParser$Scope: jakarta.json.JsonValue getJsonValue()>();
v8 = staticinvoke <org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event getState(jakarta.json.JsonValue)>(v7);
v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state> = v8;
v9 = <org.eclipse.parsson.JsonStructureParser$1: int[] $SwitchMap$jakarta$json$stream$JsonParser$Event>;
v10 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v11 = virtualinvoke v10.<jakarta.json.stream.JsonParser$Event: int ordinal()>();
v12 = v9[v11];
lookupswitch(v12)
{
case 4: goto label2;
case 5: goto label3;
default: goto label6;
};
label2:
v3 = v3 + 1;
goto label6;
label3:
v3 = v3 - 1;
goto label6;
label4:
v13 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v14 = virtualinvoke v13.<org.eclipse.parsson.JsonStructureParser$Scope: boolean hasNext()>();
if v14 == 0 goto label5;
v15 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
virtualinvoke v15.<org.eclipse.parsson.JsonStructureParser$Scope: java.lang.Object next()>();
v16 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event KEY_NAME>;
v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state> = v16;
goto label6;
label5:
v17 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event END_OBJECT>;
v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state> = v17;
v3 = v3 - 1;
label6:
v18 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v19 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event END_OBJECT>;
if v18 == v19 goto label7;
if v3 > 0 goto label1;
label7:
return;
}
public void skipArray()
{
jakarta.json.JsonValue v8;
int[] v10;
int v12, v13, v3;
boolean v2, v5;
org.eclipse.parsson.JsonStructureParser v0;
org.eclipse.parsson.JsonStructureParser$Scope v1, v4, v6, v7;
jakarta.json.stream.JsonParser$Event v11, v14, v15, v16, v9;
v0 := @this: org.eclipse.parsson.JsonStructureParser;
v1 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v2 = v1 instanceof org.eclipse.parsson.JsonStructureParser$ArrayScope;
if v2 == 0 goto label6;
v3 = 1;
label1:
v4 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v5 = virtualinvoke v4.<org.eclipse.parsson.JsonStructureParser$Scope: boolean hasNext()>();
if v5 == 0 goto label4;
v6 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
virtualinvoke v6.<org.eclipse.parsson.JsonStructureParser$Scope: java.lang.Object next()>();
v7 = v0.<org.eclipse.parsson.JsonStructureParser: org.eclipse.parsson.JsonStructureParser$Scope current>;
v8 = virtualinvoke v7.<org.eclipse.parsson.JsonStructureParser$Scope: jakarta.json.JsonValue getJsonValue()>();
v9 = staticinvoke <org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event getState(jakarta.json.JsonValue)>(v8);
v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state> = v9;
v10 = <org.eclipse.parsson.JsonStructureParser$1: int[] $SwitchMap$jakarta$json$stream$JsonParser$Event>;
v11 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v12 = virtualinvoke v11.<jakarta.json.stream.JsonParser$Event: int ordinal()>();
v13 = v10[v12];
lookupswitch(v13)
{
case 6: goto label2;
case 7: goto label3;
default: goto label5;
};
label2:
v3 = v3 + 1;
goto label5;
label3:
v3 = v3 - 1;
goto label5;
label4:
v14 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event END_ARRAY>;
v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state> = v14;
v3 = v3 - 1;
label5:
v15 = v0.<org.eclipse.parsson.JsonStructureParser: jakarta.json.stream.JsonParser$Event state>;
v16 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event END_ARRAY>;
if v15 != v16 goto label1;
if v3 != 0 goto label1;
label6:
return;
}
private static jakarta.json.stream.JsonParser$Event getState(jakarta.json.JsonValue)
{
jakarta.json.JsonValue v0;
int[] v1;
jakarta.json.stream.JsonParser$Event v10, v11, v5, v6, v7, v8, v9;
int v3, v4;
jakarta.json.JsonValue$ValueType v13, v2;
jakarta.json.JsonException v12;
java.lang.String v14;
v0 := @parameter0: jakarta.json.JsonValue;
v1 = <org.eclipse.parsson.JsonStructureParser$1: int[] $SwitchMap$jakarta$json$JsonValue$ValueType>;
v2 = interfaceinvoke v0.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v3 = virtualinvoke v2.<jakarta.json.JsonValue$ValueType: int ordinal()>();
v4 = v1[v3];
tableswitch(v4)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label3;
case 4: goto label4;
case 5: goto label5;
case 6: goto label6;
case 7: goto label7;
default: goto label8;
};
label1:
v5 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_ARRAY>;
return v5;
label2:
v6 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_OBJECT>;
return v6;
label3:
v7 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_STRING>;
return v7;
label4:
v8 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_NUMBER>;
return v8;
label5:
v9 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_TRUE>;
return v9;
label6:
v10 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_FALSE>;
return v10;
label7:
v11 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_NULL>;
return v11;
label8:
v12 = new jakarta.json.JsonException;
v13 = interfaceinvoke v0.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v14 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_STATE_ERR(jakarta.json.JsonValue$ValueType)>(v13);
specialinvoke v12.<jakarta.json.JsonException: void <init>(java.lang.String)>(v14);
throw v12;
}
}