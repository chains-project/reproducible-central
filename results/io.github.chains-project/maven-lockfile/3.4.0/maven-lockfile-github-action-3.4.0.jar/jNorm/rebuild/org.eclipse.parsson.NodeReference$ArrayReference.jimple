class org.eclipse.parsson.NodeReference$ArrayReference extends org.eclipse.parsson.NodeReference
{
private final jakarta.json.JsonArray array;
private final int index;
void <init>(jakarta.json.JsonArray, int)
{
int v2;
jakarta.json.JsonArray v1;
org.eclipse.parsson.NodeReference$ArrayReference v0;
v0 := @this: org.eclipse.parsson.NodeReference$ArrayReference;
v1 := @parameter0: jakarta.json.JsonArray;
v2 := @parameter1: int;
specialinvoke v0.<org.eclipse.parsson.NodeReference: void <init>()>();
v0.<org.eclipse.parsson.NodeReference$ArrayReference: jakarta.json.JsonArray array> = v1;
v0.<org.eclipse.parsson.NodeReference$ArrayReference: int index> = v2;
return;
}
public boolean contains()
{
org.eclipse.parsson.NodeReference$ArrayReference v0;
int v2, v3, v4, v6;
jakarta.json.JsonArray v1, v5;
boolean v7;
v0 := @this: org.eclipse.parsson.NodeReference$ArrayReference;
v1 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: jakarta.json.JsonArray array>;
if v1 == null goto label1;
v2 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: int index>;
v3 = (int) -1;
if v2 <= v3 goto label1;
v4 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: int index>;
v5 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: jakarta.json.JsonArray array>;
v6 = interfaceinvoke v5.<jakarta.json.JsonArray: int size()>();
if v4 >= v6 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
return v7;
}
public jakarta.json.JsonValue get()
{
org.eclipse.parsson.NodeReference$ArrayReference v0;
int v3, v5, v8;
java.lang.Object v9;
jakarta.json.JsonException v2;
java.lang.String v6;
jakarta.json.JsonArray v4, v7;
boolean v1;
v0 := @this: org.eclipse.parsson.NodeReference$ArrayReference;
v1 = virtualinvoke v0.<org.eclipse.parsson.NodeReference$ArrayReference: boolean contains()>();
if v1 != 0 goto label1;
v2 = new jakarta.json.JsonException;
v3 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: int index>;
v4 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: jakarta.json.JsonArray array>;
v5 = interfaceinvoke v4.<jakarta.json.JsonArray: int size()>();
v6 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String NODEREF_ARRAY_INDEX_ERR(int,int)>(v3, v5);
specialinvoke v2.<jakarta.json.JsonException: void <init>(java.lang.String)>(v6);
throw v2;
label1:
v7 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: jakarta.json.JsonArray array>;
v8 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: int index>;
v9 = interfaceinvoke v7.<jakarta.json.JsonArray: java.lang.Object get(int)>(v8);
return v9;
}
public jakarta.json.JsonArray add(jakarta.json.JsonValue)
{
jakarta.json.JsonValue v1;
org.eclipse.parsson.NodeReference$ArrayReference v0;
int v10, v12, v13, v15, v17, v5, v6, v7, v9;
jakarta.json.JsonException v14;
java.lang.String v18;
org.eclipse.parsson.JsonArrayBuilderImpl v2;
org.eclipse.parsson.api.BufferPool v4;
jakarta.json.JsonArray v11, v16, v19, v3, v8;
v0 := @this: org.eclipse.parsson.NodeReference$ArrayReference;
v1 := @parameter0: jakarta.json.JsonValue;
v2 = new org.eclipse.parsson.JsonArrayBuilderImpl;
v3 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: jakarta.json.JsonArray array>;
v4 = staticinvoke <org.eclipse.parsson.JsonUtil: org.eclipse.parsson.api.BufferPool getInternalBufferPool()>();
specialinvoke v2.<org.eclipse.parsson.JsonArrayBuilderImpl: void <init>(jakarta.json.JsonArray,org.eclipse.parsson.api.BufferPool)>(v3, v4);
v5 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: int index>;
v6 = (int) -1;
if v5 == v6 goto label1;
v7 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: int index>;
v8 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: jakarta.json.JsonArray array>;
v9 = interfaceinvoke v8.<jakarta.json.JsonArray: int size()>();
if v7 != v9 goto label2;
label1:
interfaceinvoke v2.<jakarta.json.JsonArrayBuilder: jakarta.json.JsonArrayBuilder add(jakarta.json.JsonValue)>(v1);
goto label4;
label2:
v10 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: int index>;
v11 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: jakarta.json.JsonArray array>;
v12 = interfaceinvoke v11.<jakarta.json.JsonArray: int size()>();
if v10 >= v12 goto label3;
v13 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: int index>;
interfaceinvoke v2.<jakarta.json.JsonArrayBuilder: jakarta.json.JsonArrayBuilder add(int,jakarta.json.JsonValue)>(v13, v1);
goto label4;
label3:
v14 = new jakarta.json.JsonException;
v15 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: int index>;
v16 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: jakarta.json.JsonArray array>;
v17 = interfaceinvoke v16.<jakarta.json.JsonArray: int size()>();
v18 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String NODEREF_ARRAY_INDEX_ERR(int,int)>(v15, v17);
specialinvoke v14.<jakarta.json.JsonException: void <init>(java.lang.String)>(v18);
throw v14;
label4:
v19 = interfaceinvoke v2.<jakarta.json.JsonArrayBuilder: jakarta.json.JsonArray build()>();
return v19;
}
public jakarta.json.JsonArray remove()
{
jakarta.json.JsonArrayBuilder v11;
org.eclipse.parsson.JsonArrayBuilderImpl v7;
org.eclipse.parsson.NodeReference$ArrayReference v0;
int v10, v3, v5;
jakarta.json.JsonException v2;
java.lang.String v6;
org.eclipse.parsson.api.BufferPool v9;
jakarta.json.JsonArray v12, v4, v8;
boolean v1;
v0 := @this: org.eclipse.parsson.NodeReference$ArrayReference;
v1 = virtualinvoke v0.<org.eclipse.parsson.NodeReference$ArrayReference: boolean contains()>();
if v1 != 0 goto label1;
v2 = new jakarta.json.JsonException;
v3 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: int index>;
v4 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: jakarta.json.JsonArray array>;
v5 = interfaceinvoke v4.<jakarta.json.JsonArray: int size()>();
v6 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String NODEREF_ARRAY_INDEX_ERR(int,int)>(v3, v5);
specialinvoke v2.<jakarta.json.JsonException: void <init>(java.lang.String)>(v6);
throw v2;
label1:
v7 = new org.eclipse.parsson.JsonArrayBuilderImpl;
v8 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: jakarta.json.JsonArray array>;
v9 = staticinvoke <org.eclipse.parsson.JsonUtil: org.eclipse.parsson.api.BufferPool getInternalBufferPool()>();
specialinvoke v7.<org.eclipse.parsson.JsonArrayBuilderImpl: void <init>(jakarta.json.JsonArray,org.eclipse.parsson.api.BufferPool)>(v8, v9);
v10 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: int index>;
v11 = interfaceinvoke v7.<jakarta.json.JsonArrayBuilder: jakarta.json.JsonArrayBuilder remove(int)>(v10);
v12 = interfaceinvoke v11.<jakarta.json.JsonArrayBuilder: jakarta.json.JsonArray build()>();
return v12;
}
public jakarta.json.JsonArray replace(jakarta.json.JsonValue)
{
jakarta.json.JsonValue v1;
jakarta.json.JsonArrayBuilder v12;
org.eclipse.parsson.JsonArrayBuilderImpl v8;
org.eclipse.parsson.NodeReference$ArrayReference v0;
int v11, v4, v6;
jakarta.json.JsonException v3;
java.lang.String v7;
org.eclipse.parsson.api.BufferPool v10;
jakarta.json.JsonArray v13, v5, v9;
boolean v2;
v0 := @this: org.eclipse.parsson.NodeReference$ArrayReference;
v1 := @parameter0: jakarta.json.JsonValue;
v2 = virtualinvoke v0.<org.eclipse.parsson.NodeReference$ArrayReference: boolean contains()>();
if v2 != 0 goto label1;
v3 = new jakarta.json.JsonException;
v4 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: int index>;
v5 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: jakarta.json.JsonArray array>;
v6 = interfaceinvoke v5.<jakarta.json.JsonArray: int size()>();
v7 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String NODEREF_ARRAY_INDEX_ERR(int,int)>(v4, v6);
specialinvoke v3.<jakarta.json.JsonException: void <init>(java.lang.String)>(v7);
throw v3;
label1:
v8 = new org.eclipse.parsson.JsonArrayBuilderImpl;
v9 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: jakarta.json.JsonArray array>;
v10 = staticinvoke <org.eclipse.parsson.JsonUtil: org.eclipse.parsson.api.BufferPool getInternalBufferPool()>();
specialinvoke v8.<org.eclipse.parsson.JsonArrayBuilderImpl: void <init>(jakarta.json.JsonArray,org.eclipse.parsson.api.BufferPool)>(v9, v10);
v11 = v0.<org.eclipse.parsson.NodeReference$ArrayReference: int index>;
v12 = interfaceinvoke v8.<jakarta.json.JsonArrayBuilder: jakarta.json.JsonArrayBuilder set(int,jakarta.json.JsonValue)>(v11, v1);
v13 = interfaceinvoke v12.<jakarta.json.JsonArrayBuilder: jakarta.json.JsonArray build()>();
return v13;
}
}