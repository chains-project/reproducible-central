abstract class org.eclipse.parsson.NodeReference extends java.lang.Object
{
void <init>()
{
org.eclipse.parsson.NodeReference v0;
v0 := @this: org.eclipse.parsson.NodeReference;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public abstract boolean contains();
public abstract jakarta.json.JsonValue get();
public abstract jakarta.json.JsonStructure add(jakarta.json.JsonValue);
public abstract jakarta.json.JsonStructure remove();
public abstract jakarta.json.JsonStructure replace(jakarta.json.JsonValue);
public static org.eclipse.parsson.NodeReference of(jakarta.json.JsonStructure)
{
jakarta.json.JsonStructure v0;
org.eclipse.parsson.NodeReference$RootReference v1;
v0 := @parameter0: jakarta.json.JsonStructure;
v1 = new org.eclipse.parsson.NodeReference$RootReference;
specialinvoke v1.<org.eclipse.parsson.NodeReference$RootReference: void <init>(jakarta.json.JsonStructure)>(v0);
return v1;
}
public static org.eclipse.parsson.NodeReference of(jakarta.json.JsonObject, java.lang.String)
{
jakarta.json.JsonObject v0;
java.lang.String v1;
org.eclipse.parsson.NodeReference$ObjectReference v2;
v0 := @parameter0: jakarta.json.JsonObject;
v1 := @parameter1: java.lang.String;
v2 = new org.eclipse.parsson.NodeReference$ObjectReference;
specialinvoke v2.<org.eclipse.parsson.NodeReference$ObjectReference: void <init>(jakarta.json.JsonObject,java.lang.String)>(v0, v1);
return v2;
}
public static org.eclipse.parsson.NodeReference of(jakarta.json.JsonArray, int)
{
int v1;
jakarta.json.JsonArray v0;
org.eclipse.parsson.NodeReference$ArrayReference v2;
v0 := @parameter0: jakarta.json.JsonArray;
v1 := @parameter1: int;
v2 = new org.eclipse.parsson.NodeReference$ArrayReference;
specialinvoke v2.<org.eclipse.parsson.NodeReference$ArrayReference: void <init>(jakarta.json.JsonArray,int)>(v0, v1);
return v2;
}
}