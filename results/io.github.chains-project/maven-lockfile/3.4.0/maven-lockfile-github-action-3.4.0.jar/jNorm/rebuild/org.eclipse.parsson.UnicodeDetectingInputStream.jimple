class org.eclipse.parsson.UnicodeDetectingInputStream extends java.io.FilterInputStream
{
private static final java.nio.charset.Charset UTF_32LE;
private static final java.nio.charset.Charset UTF_32BE;
private static final byte FF;
private static final byte FE;
private static final byte EF;
private static final byte BB;
private static final byte BF;
private static final byte NUL;
private final byte[] buf;
private int bufLen;
private int curIndex;
private final java.nio.charset.Charset charset;
void <init>(java.io.InputStream)
{
byte[] v2;
java.nio.charset.Charset v3;
org.eclipse.parsson.UnicodeDetectingInputStream v0;
java.io.InputStream v1;
v0 := @this: org.eclipse.parsson.UnicodeDetectingInputStream;
v1 := @parameter0: java.io.InputStream;
specialinvoke v0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(v1);
v2 = newarray (byte)[4];
v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf> = v2;
v3 = specialinvoke v0.<org.eclipse.parsson.UnicodeDetectingInputStream: java.nio.charset.Charset detectEncoding()>();
v0.<org.eclipse.parsson.UnicodeDetectingInputStream: java.nio.charset.Charset charset> = v3;
return;
}
java.nio.charset.Charset getCharset()
{
java.nio.charset.Charset v1;
org.eclipse.parsson.UnicodeDetectingInputStream v0;
v0 := @this: org.eclipse.parsson.UnicodeDetectingInputStream;
v1 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: java.nio.charset.Charset charset>;
return v1;
}
private void fillBuf()
{
byte[] v11, v12, v16, v17, v18, v19, v20, v21, v22, v7;
int v10, v14, v15, v2, v3, v5, v6, v9;
jakarta.json.JsonException v24;
java.lang.String v25;
java.io.IOException v23;
org.eclipse.parsson.UnicodeDetectingInputStream v0;
java.io.InputStream v1, v13, v4, v8;
v0 := @this: org.eclipse.parsson.UnicodeDetectingInputStream;
label01:
v1 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: java.io.InputStream in>;
v2 = virtualinvoke v1.<java.io.InputStream: int read()>();
v3 = (int) -1;
if v2 != v3 goto label03;
label02:
return;
label03:
v4 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: java.io.InputStream in>;
v5 = virtualinvoke v4.<java.io.InputStream: int read()>();
v6 = (int) -1;
if v5 != v6 goto label05;
v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int bufLen> = 1;
v7 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v7[0] = v2;
label04:
return;
label05:
v8 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: java.io.InputStream in>;
v9 = virtualinvoke v8.<java.io.InputStream: int read()>();
v10 = (int) -1;
if v9 != v10 goto label07;
v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int bufLen> = 2;
v11 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v11[0] = v2;
v12 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v12[1] = v5;
label06:
return;
label07:
v13 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: java.io.InputStream in>;
v14 = virtualinvoke v13.<java.io.InputStream: int read()>();
v15 = (int) -1;
if v14 != v15 goto label09;
v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int bufLen> = 3;
v16 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v16[0] = v2;
v17 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v17[1] = v5;
v18 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v18[2] = v9;
label08:
return;
label09:
v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int bufLen> = 4;
v19 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v19[0] = v2;
v20 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v20[1] = v5;
v21 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v21[2] = v9;
v22 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v22[3] = v14;
label10:
goto label12;
label11:
v23 := @caughtexception;
v24 = new jakarta.json.JsonException;
v25 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_INPUT_ENC_DETECT_IOERR()>();
specialinvoke v24.<jakarta.json.JsonException: void <init>(java.lang.String,java.lang.Throwable)>(v25, v23);
throw v24;
label12:
return;
catch java.io.IOException from label01 to label02 with label11;
catch java.io.IOException from label03 to label04 with label11;
catch java.io.IOException from label05 to label06 with label11;
catch java.io.IOException from label07 to label08 with label11;
catch java.io.IOException from label09 to label10 with label11;
}
private java.nio.charset.Charset detectEncoding()
{
byte[] v12, v16, v19, v22, v24, v27, v30, v34, v37, v41, v44, v47, v5, v51, v53, v55, v58, v60, v63, v65, v67, v7, v70, v72, v9;
byte v10, v13, v17, v20, v23, v25, v28, v31, v35, v38, v42, v45, v48, v52, v54, v56, v59, v6, v61, v64, v66, v68, v71, v73, v8;
jakarta.json.JsonException v2;
java.lang.String v3;
org.eclipse.parsson.UnicodeDetectingInputStream v0;
java.nio.charset.Charset v15, v26, v33, v40, v50, v57, v62, v69, v74, v75;
int v1, v11, v14, v18, v21, v29, v32, v36, v39, v4, v43, v46, v49;
v0 := @this: org.eclipse.parsson.UnicodeDetectingInputStream;
specialinvoke v0.<org.eclipse.parsson.UnicodeDetectingInputStream: void fillBuf()>();
v1 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int bufLen>;
if v1 >= 2 goto label01;
v2 = new jakarta.json.JsonException;
v3 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_INPUT_ENC_DETECT_FAILED()>();
specialinvoke v2.<jakarta.json.JsonException: void <init>(java.lang.String)>(v3);
throw v2;
label01:
v4 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int bufLen>;
if v4 != 4 goto label10;
v5 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v6 = v5[0];
if v6 != 0 goto label02;
v7 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v8 = v7[1];
if v8 != 0 goto label02;
v9 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v10 = v9[2];
v11 = (int) -2;
if v10 != v11 goto label02;
v12 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v13 = v12[3];
v14 = (int) -1;
if v13 != v14 goto label02;
v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int curIndex> = 4;
v15 = <org.eclipse.parsson.UnicodeDetectingInputStream: java.nio.charset.Charset UTF_32BE>;
return v15;
label02:
v16 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v17 = v16[0];
v18 = (int) -1;
if v17 != v18 goto label03;
v19 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v20 = v19[1];
v21 = (int) -2;
if v20 != v21 goto label03;
v22 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v23 = v22[2];
if v23 != 0 goto label03;
v24 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v25 = v24[3];
if v25 != 0 goto label03;
v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int curIndex> = 4;
v26 = <org.eclipse.parsson.UnicodeDetectingInputStream: java.nio.charset.Charset UTF_32LE>;
return v26;
label03:
v27 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v28 = v27[0];
v29 = (int) -2;
if v28 != v29 goto label04;
v30 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v31 = v30[1];
v32 = (int) -1;
if v31 != v32 goto label04;
v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int curIndex> = 2;
v33 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16BE>;
return v33;
label04:
v34 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v35 = v34[0];
v36 = (int) -1;
if v35 != v36 goto label05;
v37 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v38 = v37[1];
v39 = (int) -2;
if v38 != v39 goto label05;
v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int curIndex> = 2;
v40 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16LE>;
return v40;
label05:
v41 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v42 = v41[0];
v43 = (int) -17;
if v42 != v43 goto label06;
v44 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v45 = v44[1];
v46 = (int) -69;
if v45 != v46 goto label06;
v47 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v48 = v47[2];
v49 = (int) -65;
if v48 != v49 goto label06;
v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int curIndex> = 3;
v50 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
return v50;
label06:
v51 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v52 = v51[0];
if v52 != 0 goto label07;
v53 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v54 = v53[1];
if v54 != 0 goto label07;
v55 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v56 = v55[2];
if v56 != 0 goto label07;
v57 = <org.eclipse.parsson.UnicodeDetectingInputStream: java.nio.charset.Charset UTF_32BE>;
return v57;
label07:
v58 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v59 = v58[0];
if v59 != 0 goto label08;
v60 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v61 = v60[2];
if v61 != 0 goto label08;
v62 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16BE>;
return v62;
label08:
v63 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v64 = v63[1];
if v64 != 0 goto label09;
v65 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v66 = v65[2];
if v66 != 0 goto label09;
v67 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v68 = v67[3];
if v68 != 0 goto label09;
v69 = <org.eclipse.parsson.UnicodeDetectingInputStream: java.nio.charset.Charset UTF_32LE>;
return v69;
label09:
v70 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v71 = v70[1];
if v71 != 0 goto label10;
v72 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v73 = v72[3];
if v73 != 0 goto label10;
v74 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_16LE>;
return v74;
label10:
v75 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
return v75;
}
public int read() throws java.io.IOException
{
byte[] v3;
byte v6;
int v1, v2, v4, v5, v8;
org.eclipse.parsson.UnicodeDetectingInputStream v0;
java.io.InputStream v7;
v0 := @this: org.eclipse.parsson.UnicodeDetectingInputStream;
v1 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int curIndex>;
v2 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int bufLen>;
if v1 >= v2 goto label1;
v3 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v4 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int curIndex>;
v5 = v4 + 1;
v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int curIndex> = v5;
v6 = v3[v4];
return v6;
label1:
v7 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: java.io.InputStream in>;
v8 = virtualinvoke v7.<java.io.InputStream: int read()>();
return v8;
}
public int read(byte[], int, int) throws java.io.IOException
{
byte[] v1, v13;
java.lang.IndexOutOfBoundsException v8;
int v10, v11, v12, v14, v15, v16, v18, v2, v3, v4, v5, v6, v7, v9;
org.eclipse.parsson.UnicodeDetectingInputStream v0;
java.io.InputStream v17;
v0 := @this: org.eclipse.parsson.UnicodeDetectingInputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int curIndex>;
v5 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int bufLen>;
if v4 >= v5 goto label4;
if v3 != 0 goto label1;
return 0;
label1:
if v2 < 0 goto label2;
if v3 < 0 goto label2;
v6 = lengthof v1;
v7 = v6 - v2;
if v3 <= v7 goto label3;
label2:
v8 = new java.lang.IndexOutOfBoundsException;
specialinvoke v8.<java.lang.IndexOutOfBoundsException: void <init>()>();
throw v8;
label3:
v9 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int bufLen>;
v10 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int curIndex>;
v11 = v9 - v10;
v12 = staticinvoke <java.lang.Math: int min(int,int)>(v11, v3);
v13 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: byte[] buf>;
v14 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int curIndex>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v13, v14, v1, v2, v12);
v15 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int curIndex>;
v16 = v15 + v12;
v0.<org.eclipse.parsson.UnicodeDetectingInputStream: int curIndex> = v16;
return v12;
label4:
v17 = v0.<org.eclipse.parsson.UnicodeDetectingInputStream: java.io.InputStream in>;
v18 = virtualinvoke v17.<java.io.InputStream: int read(byte[],int,int)>(v1, v2, v3);
return v18;
}
static void <clinit>()
{
java.nio.charset.Charset v0, v1;
v0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-32LE");
<org.eclipse.parsson.UnicodeDetectingInputStream: java.nio.charset.Charset UTF_32LE> = v0;
v1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-32BE");
<org.eclipse.parsson.UnicodeDetectingInputStream: java.nio.charset.Charset UTF_32BE> = v1;
return;
}
}