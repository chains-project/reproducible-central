final class org.graalvm.collections.EconomicMapImpl extends java.lang.Object implements org.graalvm.collections.EconomicMap, org.graalvm.collections.EconomicSet
{
private static final int INITIAL_CAPACITY;
private static final int COMPRESS_IMMEDIATE_CAPACITY;
private static final int MIN_CAPACITY_INCREASE;
private static final int HASH_THRESHOLD;
private static final int HASH_THRESHOLD_IDENTITY_COMPARE;
private static final int MAX_ELEMENT_COUNT;
private static final int LARGE_HASH_THRESHOLD;
private static final int VERY_LARGE_HASH_THRESHOLD;
private int totalEntries;
private int deletedEntries;
private java.lang.Object[] entries;
private byte[] hashArray;
private final org.graalvm.collections.Equivalence strategy;
private final boolean isSet;
static final boolean $assertionsDisabled;
private static org.graalvm.collections.EconomicMapImpl intercept(org.graalvm.collections.EconomicMapImpl)
{
org.graalvm.collections.EconomicMapImpl v0;
v0 := @parameter0: org.graalvm.collections.EconomicMapImpl;
return v0;
}
public static org.graalvm.collections.EconomicMapImpl create(org.graalvm.collections.Equivalence, boolean)
{
org.graalvm.collections.EconomicMapImpl v2, v3;
org.graalvm.collections.Equivalence v0;
boolean v1;
v0 := @parameter0: org.graalvm.collections.Equivalence;
v1 := @parameter1: boolean;
v2 = new org.graalvm.collections.EconomicMapImpl;
specialinvoke v2.<org.graalvm.collections.EconomicMapImpl: void <init>(org.graalvm.collections.Equivalence,boolean)>(v0, v1);
v3 = staticinvoke <org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.EconomicMapImpl intercept(org.graalvm.collections.EconomicMapImpl)>(v2);
return v3;
}
public static org.graalvm.collections.EconomicMapImpl create(org.graalvm.collections.Equivalence, int, boolean)
{
int v1;
org.graalvm.collections.EconomicMapImpl v3, v4;
org.graalvm.collections.Equivalence v0;
boolean v2;
v0 := @parameter0: org.graalvm.collections.Equivalence;
v1 := @parameter1: int;
v2 := @parameter2: boolean;
v3 = new org.graalvm.collections.EconomicMapImpl;
specialinvoke v3.<org.graalvm.collections.EconomicMapImpl: void <init>(org.graalvm.collections.Equivalence,int,boolean)>(v0, v1, v2);
v4 = staticinvoke <org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.EconomicMapImpl intercept(org.graalvm.collections.EconomicMapImpl)>(v3);
return v4;
}
public static org.graalvm.collections.EconomicMapImpl create(org.graalvm.collections.Equivalence, org.graalvm.collections.UnmodifiableEconomicMap, boolean)
{
org.graalvm.collections.EconomicMapImpl v3, v4;
org.graalvm.collections.UnmodifiableEconomicMap v1;
org.graalvm.collections.Equivalence v0;
boolean v2;
v0 := @parameter0: org.graalvm.collections.Equivalence;
v1 := @parameter1: org.graalvm.collections.UnmodifiableEconomicMap;
v2 := @parameter2: boolean;
v3 = new org.graalvm.collections.EconomicMapImpl;
specialinvoke v3.<org.graalvm.collections.EconomicMapImpl: void <init>(org.graalvm.collections.Equivalence,org.graalvm.collections.UnmodifiableEconomicMap,boolean)>(v0, v1, v2);
v4 = staticinvoke <org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.EconomicMapImpl intercept(org.graalvm.collections.EconomicMapImpl)>(v3);
return v4;
}
public static org.graalvm.collections.EconomicMapImpl create(org.graalvm.collections.Equivalence, org.graalvm.collections.UnmodifiableEconomicSet, boolean)
{
org.graalvm.collections.EconomicMapImpl v3, v4;
org.graalvm.collections.Equivalence v0;
boolean v2;
org.graalvm.collections.UnmodifiableEconomicSet v1;
v0 := @parameter0: org.graalvm.collections.Equivalence;
v1 := @parameter1: org.graalvm.collections.UnmodifiableEconomicSet;
v2 := @parameter2: boolean;
v3 = new org.graalvm.collections.EconomicMapImpl;
specialinvoke v3.<org.graalvm.collections.EconomicMapImpl: void <init>(org.graalvm.collections.Equivalence,org.graalvm.collections.UnmodifiableEconomicSet,boolean)>(v0, v1, v2);
v4 = staticinvoke <org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.EconomicMapImpl intercept(org.graalvm.collections.EconomicMapImpl)>(v3);
return v4;
}
private void <init>(org.graalvm.collections.Equivalence, boolean)
{
org.graalvm.collections.EconomicMapImpl v0;
org.graalvm.collections.Equivalence v1, v3;
boolean v2;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: org.graalvm.collections.Equivalence;
v2 := @parameter1: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY>;
if v1 != v3 goto label1;
v0.<org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.Equivalence strategy> = null;
goto label2;
label1:
v0.<org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.Equivalence strategy> = v1;
label2:
v0.<org.graalvm.collections.EconomicMapImpl: boolean isSet> = v2;
return;
}
private void <init>(org.graalvm.collections.Equivalence, int, boolean)
{
int v2;
org.graalvm.collections.EconomicMapImpl v0;
org.graalvm.collections.Equivalence v1;
boolean v3;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: org.graalvm.collections.Equivalence;
v2 := @parameter1: int;
v3 := @parameter2: boolean;
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void <init>(org.graalvm.collections.Equivalence,boolean)>(v1, v3);
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void init(int)>(v2);
return;
}
private void <init>(org.graalvm.collections.Equivalence, org.graalvm.collections.UnmodifiableEconomicMap, boolean)
{
int v5;
org.graalvm.collections.EconomicMapImpl v0;
org.graalvm.collections.UnmodifiableEconomicMap v2;
org.graalvm.collections.Equivalence v1;
boolean v3, v4;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: org.graalvm.collections.Equivalence;
v2 := @parameter1: org.graalvm.collections.UnmodifiableEconomicMap;
v3 := @parameter2: boolean;
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void <init>(org.graalvm.collections.Equivalence,boolean)>(v1, v3);
v4 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: boolean initFrom(java.lang.Object)>(v2);
if v4 != 0 goto label1;
v5 = interfaceinvoke v2.<org.graalvm.collections.UnmodifiableEconomicMap: int size()>();
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void init(int)>(v5);
virtualinvoke v0.<org.graalvm.collections.EconomicMapImpl: void putAll(org.graalvm.collections.UnmodifiableEconomicMap)>(v2);
label1:
return;
}
private void <init>(org.graalvm.collections.Equivalence, org.graalvm.collections.UnmodifiableEconomicSet, boolean)
{
int v5;
org.graalvm.collections.EconomicMapImpl v0;
org.graalvm.collections.Equivalence v1;
boolean v3, v4;
org.graalvm.collections.UnmodifiableEconomicSet v2;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: org.graalvm.collections.Equivalence;
v2 := @parameter1: org.graalvm.collections.UnmodifiableEconomicSet;
v3 := @parameter2: boolean;
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void <init>(org.graalvm.collections.Equivalence,boolean)>(v1, v3);
v4 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: boolean initFrom(java.lang.Object)>(v2);
if v4 != 0 goto label1;
v5 = interfaceinvoke v2.<org.graalvm.collections.UnmodifiableEconomicSet: int size()>();
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void init(int)>(v5);
virtualinvoke v0.<org.graalvm.collections.EconomicMapImpl: void addAll(java.lang.Iterable)>(v2);
label1:
return;
}
private boolean initFrom(java.lang.Object)
{
byte[] v10, v11;
java.lang.Object[] v7, v8;
int v5, v6;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v1, v12, v9;
org.graalvm.collections.Equivalence v3, v4;
boolean v2;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof org.graalvm.collections.EconomicMapImpl;
if v2 == 0 goto label3;
v3 = v0.<org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.Equivalence strategy>;
v4 = v1.<org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.Equivalence strategy>;
if v3 != v4 goto label3;
v5 = v1.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries> = v5;
v6 = v1.<org.graalvm.collections.EconomicMapImpl: int deletedEntries>;
v0.<org.graalvm.collections.EconomicMapImpl: int deletedEntries> = v6;
v7 = v1.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
if v7 == null goto label1;
v8 = v1.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
v9 = virtualinvoke v8.<java.lang.Object: java.lang.Object clone()>();
v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries> = v9;
label1:
v10 = v1.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
if v10 == null goto label2;
v11 = v1.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
v12 = virtualinvoke v11.<java.lang.Object: java.lang.Object clone()>();
v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray> = v12;
label2:
return 1;
label3:
return 0;
}
private void init(int)
{
java.lang.Object[] v3;
int v1, v2;
org.graalvm.collections.EconomicMapImpl v0;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: int;
if v1 <= 4 goto label1;
v2 = v1 << 1;
v3 = newarray (java.lang.Object)[v2];
v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries> = v3;
label1:
return;
}
public java.lang.Object get(java.lang.Object)
{
int v2, v3;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v1, v4;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void checkKeyNonNull(java.lang.Object)>(v1);
v2 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int find(java.lang.Object)>(v1);
v3 = (int) -1;
if v2 == v3 goto label1;
v4 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getValue(int)>(v2);
return v4;
label1:
return null;
}
private int find(java.lang.Object)
{
int v3, v4;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v1;
boolean v2;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.lang.Object;
v2 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: boolean hasHashArray()>();
if v2 == 0 goto label1;
v3 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int findHash(java.lang.Object)>(v1);
return v3;
label1:
v4 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int findLinear(java.lang.Object)>(v1);
return v4;
}
private int findLinear(java.lang.Object)
{
java.lang.Object[] v4;
int v2, v3, v5, v8;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v1, v6;
boolean v7;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.lang.Object;
v2 = 0;
label1:
v3 = v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
if v2 >= v3 goto label3;
v4 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
v5 = v2 << 1;
v6 = v4[v5];
if v6 == null goto label2;
v7 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: boolean compareKeys(java.lang.Object,java.lang.Object)>(v1, v6);
if v7 == 0 goto label2;
return v2;
label2:
v2 = v2 + 1;
goto label1;
label3:
v8 = (int) -1;
return v8;
}
private boolean compareKeys(java.lang.Object, java.lang.Object)
{
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v1, v2;
org.graalvm.collections.Equivalence v3, v4, v5, v6, v7, v9;
boolean v10, v8;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
if v1 != v2 goto label1;
return 1;
label1:
v3 = v0.<org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.Equivalence strategy>;
if v3 == null goto label3;
v4 = v0.<org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.Equivalence strategy>;
v5 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY_WITH_SYSTEM_HASHCODE>;
if v4 == v5 goto label3;
v6 = v0.<org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.Equivalence strategy>;
v7 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence DEFAULT>;
if v6 != v7 goto label2;
v8 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v2);
return v8;
label2:
v9 = v0.<org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.Equivalence strategy>;
v10 = virtualinvoke v9.<org.graalvm.collections.Equivalence: boolean equals(java.lang.Object,java.lang.Object)>(v1, v2);
return v10;
label3:
return 0;
}
private int findHash(java.lang.Object)
{
int v10, v11, v2, v3, v4, v5;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v1, v6, v8;
boolean v7, v9;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.lang.Object;
v2 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int getHashIndex(java.lang.Object)>(v1);
v3 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int getHashArray(int)>(v2);
v4 = v3 - 1;
v5 = (int) -1;
if v4 == v5 goto label2;
v6 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getKey(int)>(v4);
v7 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: boolean compareKeys(java.lang.Object,java.lang.Object)>(v1, v6);
if v7 == 0 goto label1;
return v4;
label1:
v8 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getRawValue(int)>(v4);
v9 = v8 instanceof org.graalvm.collections.EconomicMapImpl$CollisionLink;
if v9 == 0 goto label2;
v10 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int findWithCollision(java.lang.Object,org.graalvm.collections.EconomicMapImpl$CollisionLink)>(v1, v8);
return v10;
label2:
v11 = (int) -1;
return v11;
}
private int findWithCollision(java.lang.Object, org.graalvm.collections.EconomicMapImpl$CollisionLink)
{
org.graalvm.collections.EconomicMapImpl$CollisionLink v2;
int v3, v8;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v1, v4, v6;
boolean v5, v7;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: org.graalvm.collections.EconomicMapImpl$CollisionLink;
label1:
v3 = v2.<org.graalvm.collections.EconomicMapImpl$CollisionLink: int next>;
v4 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getKey(int)>(v3);
v5 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: boolean compareKeys(java.lang.Object,java.lang.Object)>(v1, v4);
if v5 == 0 goto label2;
return v3;
label2:
v6 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getRawValue(int)>(v3);
v7 = v6 instanceof org.graalvm.collections.EconomicMapImpl$CollisionLink;
if v7 == 0 goto label3;
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getRawValue(int)>(v3);
goto label1;
label3:
v8 = (int) -1;
return v8;
}
private int getHashArray(int)
{
byte[] v10, v13, v20, v23, v29, v35, v4;
byte v11, v15, v21, v25, v31, v37, v5;
java.lang.Object[] v2, v7;
short v12, v16, v22, v26, v32, v38, v6;
int v1, v14, v17, v18, v19, v24, v27, v28, v3, v30, v33, v34, v36, v39, v40, v8, v9;
org.graalvm.collections.EconomicMapImpl v0;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: int;
v2 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
v3 = lengthof v2;
if v3 >= 512 goto label1;
v4 = v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
v5 = v4[v1];
v6 = v5 & 255;
return v6;
label1:
v7 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
v8 = lengthof v7;
if v8 >= 131072 goto label2;
v9 = v1 << 1;
v10 = v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
v11 = v10[v9];
v12 = v11 & 255;
v13 = v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
v14 = v9 + 1;
v15 = v13[v14];
v16 = v15 & 255;
v17 = v16 << 8;
v18 = v12 | v17;
return v18;
label2:
v19 = v1 << 2;
v20 = v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
v21 = v20[v19];
v22 = v21 & 255;
v23 = v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
v24 = v19 + 1;
v25 = v23[v24];
v26 = v25 & 255;
v27 = v26 << 8;
v28 = v22 | v27;
v29 = v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
v30 = v19 + 2;
v31 = v29[v30];
v32 = v31 & 255;
v33 = v32 << 16;
v34 = v28 | v33;
v35 = v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
v36 = v19 + 3;
v37 = v35[v36];
v38 = v37 & 255;
v39 = v38 << 24;
v40 = v34 | v39;
return v40;
}
private void setHashArray(int, int)
{
byte[] v10, v14, v15, v18, v21, v5, v9;
java.lang.Object[] v3, v6;
int v1, v11, v12, v13, v16, v17, v19, v2, v20, v22, v23, v4, v7, v8;
org.graalvm.collections.EconomicMapImpl v0;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
v4 = lengthof v3;
if v4 >= 512 goto label1;
v5 = v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
v5[v1] = v2;
goto label3;
label1:
v6 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
v7 = lengthof v6;
if v7 >= 131072 goto label2;
v8 = v1 << 1;
v9 = v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
v9[v8] = v2;
v10 = v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
v11 = v8 + 1;
v12 = v2 >> 8;
v10[v11] = v12;
goto label3;
label2:
v13 = v1 << 2;
v14 = v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
v14[v13] = v2;
v15 = v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
v16 = v13 + 1;
v17 = v2 >> 8;
v15[v16] = v17;
v18 = v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
v19 = v13 + 2;
v20 = v2 >> 16;
v18[v19] = v20;
v21 = v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
v22 = v13 + 3;
v23 = v2 >> 24;
v21[v22] = v23;
label3:
return;
}
private int findAndRemoveHash(java.lang.Object)
{
int v10, v12, v15, v16, v2, v3, v4, v5, v9;
org.graalvm.collections.EconomicMapImpl v0;
boolean v11, v14, v7;
java.lang.Object v1, v13, v6, v8;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.lang.Object;
v2 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int getHashIndex(java.lang.Object)>(v1);
v3 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int getHashArray(int)>(v2);
v4 = v3 - 1;
v5 = (int) -1;
if v4 == v5 goto label3;
v6 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getKey(int)>(v4);
v7 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: boolean compareKeys(java.lang.Object,java.lang.Object)>(v1, v6);
if v7 == 0 goto label2;
v8 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getRawValue(int)>(v4);
v9 = (int) -1;
v10 = v9;
v11 = v8 instanceof org.graalvm.collections.EconomicMapImpl$CollisionLink;
if v11 == 0 goto label1;
v10 = v8.<org.graalvm.collections.EconomicMapImpl$CollisionLink: int next>;
label1:
v12 = v10 + 1;
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void setHashArray(int,int)>(v2, v12);
return v4;
label2:
v13 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getRawValue(int)>(v4);
v14 = v13 instanceof org.graalvm.collections.EconomicMapImpl$CollisionLink;
if v14 == 0 goto label3;
v15 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int findAndRemoveWithCollision(java.lang.Object,org.graalvm.collections.EconomicMapImpl$CollisionLink,int)>(v1, v13, v4);
return v15;
label3:
v16 = (int) -1;
return v16;
}
private int findAndRemoveWithCollision(java.lang.Object, org.graalvm.collections.EconomicMapImpl$CollisionLink, int)
{
int v12, v16, v3, v4, v5;
org.graalvm.collections.EconomicMapImpl v0;
boolean v15, v7, v9;
org.graalvm.collections.EconomicMapImpl$CollisionLink v10, v2;
java.lang.Object v1, v11, v13, v14, v6, v8;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: org.graalvm.collections.EconomicMapImpl$CollisionLink;
v3 := @parameter2: int;
v4 = v3;
label1:
v5 = v2.<org.graalvm.collections.EconomicMapImpl$CollisionLink: int next>;
v6 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getKey(int)>(v5);
v7 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: boolean compareKeys(java.lang.Object,java.lang.Object)>(v1, v6);
if v7 == 0 goto label4;
v8 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getRawValue(int)>(v5);
v9 = v8 instanceof org.graalvm.collections.EconomicMapImpl$CollisionLink;
if v9 == 0 goto label2;
v10 = new org.graalvm.collections.EconomicMapImpl$CollisionLink;
v11 = v2.<org.graalvm.collections.EconomicMapImpl$CollisionLink: java.lang.Object value>;
v12 = v8.<org.graalvm.collections.EconomicMapImpl$CollisionLink: int next>;
specialinvoke v10.<org.graalvm.collections.EconomicMapImpl$CollisionLink: void <init>(java.lang.Object,int)>(v11, v12);
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void setRawValue(int,java.lang.Object)>(v4, v10);
goto label3;
label2:
v13 = v2.<org.graalvm.collections.EconomicMapImpl$CollisionLink: java.lang.Object value>;
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void setRawValue(int,java.lang.Object)>(v4, v13);
label3:
return v5;
label4:
v14 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getRawValue(int)>(v5);
v15 = v14 instanceof org.graalvm.collections.EconomicMapImpl$CollisionLink;
if v15 == 0 goto label5;
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getRawValue(int)>(v5);
v4 = v5;
goto label1;
label5:
v16 = (int) -1;
return v16;
}
private int getHashIndex(java.lang.Object)
{
int v10, v11, v12, v13, v7, v9;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v1;
org.graalvm.collections.Equivalence v2, v3, v4, v5, v6, v8;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.lang.Object;
v2 = v0.<org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.Equivalence strategy>;
if v2 == null goto label2;
v3 = v0.<org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.Equivalence strategy>;
v4 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence DEFAULT>;
if v3 == v4 goto label2;
v5 = v0.<org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.Equivalence strategy>;
v6 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY_WITH_SYSTEM_HASHCODE>;
if v5 != v6 goto label1;
v7 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(v1);
goto label3;
label1:
v8 = v0.<org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.Equivalence strategy>;
v7 = virtualinvoke v8.<org.graalvm.collections.Equivalence: int hashCode(java.lang.Object)>(v1);
goto label3;
label2:
v7 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
label3:
v9 = v7 >>> 16;
v10 = v7 ^ v9;
v11 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int getHashTableSize()>();
v12 = v11 - 1;
v13 = v10 & v12;
return v13;
}
public java.lang.Object put(java.lang.Object, java.lang.Object)
{
java.lang.Object[] v13, v7, v8, v9;
java.lang.AssertionError v17;
int v10, v11, v14, v15, v16, v18, v19, v21, v22, v23, v24, v25, v27, v28, v3, v4, v6;
org.graalvm.collections.EconomicMapImpl v0;
boolean v12, v20, v26;
java.lang.Object v1, v2, v5;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void checkKeyNonNull(java.lang.Object)>(v1);
v3 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int find(java.lang.Object)>(v1);
v4 = (int) -1;
if v3 == v4 goto label1;
v5 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getValue(int)>(v3);
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void setValue(int,java.lang.Object)>(v3, v2);
return v5;
label1:
v6 = v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
v7 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
if v7 != null goto label2;
v8 = newarray (java.lang.Object)[8];
v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries> = v8;
goto label4;
label2:
v9 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
v10 = lengthof v9;
v11 = v6 << 1;
if v10 != v11 goto label4;
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void grow()>();
v12 = <org.graalvm.collections.EconomicMapImpl: boolean $assertionsDisabled>;
if v12 != 0 goto label3;
v13 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
v14 = lengthof v13;
v15 = v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
v16 = v15 << 1;
if v14 > v16 goto label3;
v17 = new java.lang.AssertionError;
specialinvoke v17.<java.lang.AssertionError: void <init>()>();
throw v17;
label3:
v6 = v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
label4:
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void setKey(int,java.lang.Object)>(v6, v1);
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void setValue(int,java.lang.Object)>(v6, v2);
v18 = v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
v19 = v18 + 1;
v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries> = v19;
v20 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: boolean hasHashArray()>();
if v20 == 0 goto label7;
v21 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int getHashTableSize()>();
v22 = virtualinvoke v0.<org.graalvm.collections.EconomicMapImpl: int size()>();
v23 = virtualinvoke v0.<org.graalvm.collections.EconomicMapImpl: int size()>();
v24 = v23 >> 1;
v25 = v22 + v24;
if v21 >= v25 goto label5;
v26 = 1;
goto label6;
label5:
v26 = 0;
label6:
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void putHashEntry(java.lang.Object,int,boolean)>(v1, v6, v26);
goto label8;
label7:
v27 = v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
v28 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int getHashThreshold()>();
if v27 <= v28 goto label8;
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void createHash()>();
label8:
return null;
}
private int getHashThreshold()
{
org.graalvm.collections.EconomicMapImpl v0;
org.graalvm.collections.Equivalence v1, v2, v3;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 = v0.<org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.Equivalence strategy>;
if v1 == null goto label1;
v2 = v0.<org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.Equivalence strategy>;
v3 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY_WITH_SYSTEM_HASHCODE>;
if v2 != v3 goto label2;
label1:
return 8;
label2:
return 4;
}
private void grow()
{
java.lang.UnsupportedOperationException v7;
java.lang.Object[] v1, v10, v9;
int v11, v12, v2, v3, v4, v5, v6, v8;
org.graalvm.collections.EconomicMapImpl v0;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
v2 = lengthof v1;
v3 = v2 >> 1;
v4 = v2 >> 2;
v5 = staticinvoke <java.lang.Math: int max(int,int)>(8, v4);
v6 = v3 + v5;
if v6 <= 1073741823 goto label1;
v7 = new java.lang.UnsupportedOperationException;
specialinvoke v7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("map grown too large!");
throw v7;
label1:
v8 = v6 << 1;
v9 = newarray (java.lang.Object)[v8];
v10 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v10, 0, v9, 0, v2);
v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries> = v9;
if v2 >= 512 goto label2;
v11 = lengthof v9;
if v11 >= 512 goto label3;
label2:
if v2 >= 131072 goto label4;
v12 = lengthof v9;
if v12 <= 131072 goto label4;
label3:
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void createHash()>();
label4:
return;
}
private int maybeCompress(int)
{
java.lang.Object[] v2;
int v1, v10, v3, v4, v5, v6, v7, v8, v9;
org.graalvm.collections.EconomicMapImpl v0;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: int;
v2 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
v3 = lengthof v2;
if v3 == 8 goto label1;
v4 = v0.<org.graalvm.collections.EconomicMapImpl: int deletedEntries>;
v5 = v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
v6 = v5 >> 1;
v7 = v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
v8 = v7 >> 2;
v9 = v6 + v8;
if v4 < v9 goto label1;
v10 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int compressLarge(int)>(v1);
return v10;
label1:
return v1;
}
private int compressLarge(int)
{
java.lang.Object[] v9;
int v1, v10, v11, v12, v13, v15, v16, v17, v19, v2, v3, v4, v5, v6, v7, v8;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v14, v18;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: int;
v2 = 4;
v3 = v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
v4 = v0.<org.graalvm.collections.EconomicMapImpl: int deletedEntries>;
v5 = v3 - v4;
label1:
if v2 > v5 goto label2;
v6 = v2 >> 1;
v7 = staticinvoke <java.lang.Math: int max(int,int)>(8, v6);
v2 = v2 + v7;
goto label1;
label2:
v8 = v2 << 1;
v9 = newarray (java.lang.Object)[v8];
v10 = 0;
v11 = v5;
v12 = 0;
label3:
v13 = v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
if v12 >= v13 goto label6;
v14 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getKey(int)>(v12);
if v12 != v1 goto label4;
v11 = v10;
label4:
if v14 == null goto label5;
v15 = v10 << 1;
v9[v15] = v14;
v16 = v10 << 1;
v17 = v16 + 1;
v18 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getValue(int)>(v12);
v9[v17] = v18;
v10 = v10 + 1;
label5:
v12 = v12 + 1;
goto label3;
label6:
v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries> = v9;
v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries> = v10;
v0.<org.graalvm.collections.EconomicMapImpl: int deletedEntries> = 0;
v19 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int getHashThreshold()>();
if v10 > v19 goto label7;
v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray> = null;
goto label8;
label7:
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void createHash()>();
label8:
return v11;
}
private int getHashTableSize()
{
byte[] v10, v3, v7;
java.lang.Object[] v1, v5;
int v11, v12, v2, v4, v6, v8, v9;
org.graalvm.collections.EconomicMapImpl v0;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
v2 = lengthof v1;
if v2 >= 512 goto label1;
v3 = v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
v4 = lengthof v3;
return v4;
label1:
v5 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
v6 = lengthof v5;
if v6 >= 131072 goto label2;
v7 = v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
v8 = lengthof v7;
v9 = v8 >> 1;
return v9;
label2:
v10 = v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
v11 = lengthof v10;
v12 = v11 >> 2;
return v12;
}
private void createHash()
{
byte[] v9;
java.lang.Object[] v4, v7;
int v1, v10, v11, v2, v3, v5, v6, v8;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v12;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 = virtualinvoke v0.<org.graalvm.collections.EconomicMapImpl: int size()>();
v2 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int getHashThreshold()>();
label1:
if v2 > v1 goto label2;
v2 = v2 << 1;
goto label1;
label2:
v3 = v2 << 1;
v4 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
v5 = lengthof v4;
if v5 < 131072 goto label3;
v6 = v3 << 2;
goto label5;
label3:
v7 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
v8 = lengthof v7;
if v8 < 512 goto label4;
v6 = v3 << 1;
goto label5;
label4:
v6 = v3 << 1;
label5:
v9 = newarray (byte)[v6];
v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray> = v9;
v10 = 0;
label6:
v11 = v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
if v10 >= v11 goto label8;
v12 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getKey(int)>(v10);
if v12 == null goto label7;
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void putHashEntry(java.lang.Object,int,boolean)>(v12, v10, 0);
label7:
v10 = v10 + 1;
goto label6;
label8:
return;
}
private void putHashEntry(java.lang.Object, int, boolean)
{
java.lang.AssertionError v12;
int v10, v2, v4, v5, v6, v7, v8;
org.graalvm.collections.EconomicMapImpl v0;
boolean v11, v13, v18, v3;
org.graalvm.collections.EconomicMapImpl$CollisionLink v14, v16;
java.lang.Object v1, v15, v17, v19, v9;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: int;
v3 := @parameter2: boolean;
v4 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int getHashIndex(java.lang.Object)>(v1);
v5 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int getHashArray(int)>(v4);
v6 = v5 - 1;
v7 = (int) -1;
if v6 == v7 goto label1;
if v3 == 0 goto label1;
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void createHash()>();
return;
label1:
v8 = v2 + 1;
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void setHashArray(int,int)>(v4, v8);
v9 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getRawValue(int)>(v2);
v10 = (int) -1;
if v6 == v10 goto label4;
v11 = <org.graalvm.collections.EconomicMapImpl: boolean $assertionsDisabled>;
if v11 != 0 goto label2;
if v2 != v6 goto label2;
v12 = new java.lang.AssertionError;
specialinvoke v12.<java.lang.AssertionError: void <init>(java.lang.Object)>("this cannot happen and would create an endless collision link cycle");
throw v12;
label2:
v13 = v9 instanceof org.graalvm.collections.EconomicMapImpl$CollisionLink;
if v13 == 0 goto label3;
v14 = new org.graalvm.collections.EconomicMapImpl$CollisionLink;
v15 = v9.<org.graalvm.collections.EconomicMapImpl$CollisionLink: java.lang.Object value>;
specialinvoke v14.<org.graalvm.collections.EconomicMapImpl$CollisionLink: void <init>(java.lang.Object,int)>(v15, v6);
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void setRawValue(int,java.lang.Object)>(v2, v14);
goto label5;
label3:
v16 = new org.graalvm.collections.EconomicMapImpl$CollisionLink;
v17 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getRawValue(int)>(v2);
specialinvoke v16.<org.graalvm.collections.EconomicMapImpl$CollisionLink: void <init>(java.lang.Object,int)>(v17, v6);
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void setRawValue(int,java.lang.Object)>(v2, v16);
goto label5;
label4:
v18 = v9 instanceof org.graalvm.collections.EconomicMapImpl$CollisionLink;
if v18 == 0 goto label5;
v19 = v9.<org.graalvm.collections.EconomicMapImpl$CollisionLink: java.lang.Object value>;
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void setRawValue(int,java.lang.Object)>(v2, v19);
label5:
return;
}
public int size()
{
int v1, v2, v3;
org.graalvm.collections.EconomicMapImpl v0;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 = v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
v2 = v0.<org.graalvm.collections.EconomicMapImpl: int deletedEntries>;
v3 = v1 - v2;
return v3;
}
public boolean containsKey(java.lang.Object)
{
int v2, v3;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v1;
boolean v4;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.lang.Object;
v2 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int find(java.lang.Object)>(v1);
v3 = (int) -1;
if v2 == v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public void clear()
{
org.graalvm.collections.EconomicMapImpl v0;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries> = null;
v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray> = null;
v0.<org.graalvm.collections.EconomicMapImpl: int deletedEntries> = 0;
v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries> = 0;
return;
}
private boolean hasHashArray()
{
org.graalvm.collections.EconomicMapImpl v0;
byte[] v1;
boolean v2;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 = v0.<org.graalvm.collections.EconomicMapImpl: byte[] hashArray>;
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public java.lang.Object removeKey(java.lang.Object)
{
int v3, v4;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v1, v5;
boolean v2;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void checkKeyNonNull(java.lang.Object)>(v1);
v2 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: boolean hasHashArray()>();
if v2 == 0 goto label1;
v3 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int findAndRemoveHash(java.lang.Object)>(v1);
goto label2;
label1:
v3 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int findLinear(java.lang.Object)>(v1);
label2:
v4 = (int) -1;
if v3 == v4 goto label3;
v5 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getValue(int)>(v3);
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int remove(int)>(v3);
return v5;
label3:
return null;
}
private void checkKeyNonNull(java.lang.Object)
{
org.graalvm.collections.EconomicMapImpl v0;
java.lang.UnsupportedOperationException v2;
java.lang.Object v1;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.lang.Object;
if v1 != null goto label1;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("null not supported as key!");
throw v2;
label1:
return;
}
private int remove(int)
{
int v1, v10, v12, v14, v15, v16, v17, v18, v2, v20, v21, v22, v23, v24, v25, v3, v4, v5, v6, v8, v9;
org.graalvm.collections.EconomicMapImpl v0;
boolean v7;
java.lang.Object v11, v13, v19;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: int;
v2 = v1;
v3 = v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
v4 = v3 - v1;
v5 = v4 - 1;
v6 = v1 + 1;
if v5 > 8 goto label3;
v7 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: boolean hasHashArray()>();
if v7 != 0 goto label3;
label1:
v8 = v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
v9 = v8 - 1;
if v2 >= v9 goto label2;
v10 = v2 + 1;
v11 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getKey(int)>(v10);
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void setKey(int,java.lang.Object)>(v2, v11);
v12 = v2 + 1;
v13 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getRawValue(int)>(v12);
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void setRawValue(int,java.lang.Object)>(v2, v13);
v2 = v2 + 1;
goto label1;
label2:
v6 = v6 - 1;
label3:
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void setKey(int,java.lang.Object)>(v2, null);
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void setRawValue(int,java.lang.Object)>(v2, null);
v14 = v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
v15 = v14 - 1;
if v2 != v15 goto label5;
v16 = v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
v17 = v16 - 1;
v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries> = v17;
label4:
if v2 <= 0 goto label6;
v18 = v2 - 1;
v19 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getKey(int)>(v18);
if v19 != null goto label6;
v20 = v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
v21 = v20 - 1;
v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries> = v21;
v22 = v0.<org.graalvm.collections.EconomicMapImpl: int deletedEntries>;
v23 = v22 - 1;
v0.<org.graalvm.collections.EconomicMapImpl: int deletedEntries> = v23;
v2 = v2 - 1;
goto label4;
label5:
v24 = v0.<org.graalvm.collections.EconomicMapImpl: int deletedEntries>;
v25 = v24 + 1;
v0.<org.graalvm.collections.EconomicMapImpl: int deletedEntries> = v25;
v6 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: int maybeCompress(int)>(v6);
label6:
return v6;
}
public java.lang.Iterable getValues()
{
org.graalvm.collections.EconomicMapImpl v0;
org.graalvm.collections.EconomicMapImpl$1 v1;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 = new org.graalvm.collections.EconomicMapImpl$1;
specialinvoke v1.<org.graalvm.collections.EconomicMapImpl$1: void <init>(org.graalvm.collections.EconomicMapImpl)>(v0);
return v1;
}
public java.lang.Iterable getKeys()
{
org.graalvm.collections.EconomicMapImpl v0;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
return v0;
}
public boolean isEmpty()
{
int v1;
org.graalvm.collections.EconomicMapImpl v0;
boolean v2;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 = virtualinvoke v0.<org.graalvm.collections.EconomicMapImpl: int size()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public org.graalvm.collections.MapCursor getEntries()
{
org.graalvm.collections.EconomicMapImpl v0;
org.graalvm.collections.EconomicMapImpl$2 v1;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 = new org.graalvm.collections.EconomicMapImpl$2;
specialinvoke v1.<org.graalvm.collections.EconomicMapImpl$2: void <init>(org.graalvm.collections.EconomicMapImpl)>(v0);
return v1;
}
public void replaceAll(java.util.function.BiFunction)
{
java.util.function.BiFunction v1;
int v2, v3;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v4, v5, v6;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.util.function.BiFunction;
v2 = 0;
label1:
v3 = v0.<org.graalvm.collections.EconomicMapImpl: int totalEntries>;
if v2 >= v3 goto label3;
v4 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getKey(int)>(v2);
if v4 == null goto label2;
v5 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getValue(int)>(v2);
v6 = interfaceinvoke v1.<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>(v4, v5);
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void setValue(int,java.lang.Object)>(v2, v6);
label2:
v2 = v2 + 1;
goto label1;
label3:
return;
}
private java.lang.Object getKey(int)
{
java.lang.Object[] v2;
int v1, v3;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v4;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: int;
v2 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
v3 = v1 << 1;
v4 = v2[v3];
return v4;
}
private void setKey(int, java.lang.Object)
{
java.lang.Object[] v3;
int v1, v4;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v2;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.Object;
v3 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
v4 = v1 << 1;
v3[v4] = v2;
return;
}
private void setValue(int, java.lang.Object)
{
org.graalvm.collections.EconomicMapImpl$CollisionLink v5;
int v1, v6;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v2, v3;
boolean v4;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.Object;
v3 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getRawValue(int)>(v1);
v4 = v3 instanceof org.graalvm.collections.EconomicMapImpl$CollisionLink;
if v4 == 0 goto label1;
v5 = new org.graalvm.collections.EconomicMapImpl$CollisionLink;
v6 = v3.<org.graalvm.collections.EconomicMapImpl$CollisionLink: int next>;
specialinvoke v5.<org.graalvm.collections.EconomicMapImpl$CollisionLink: void <init>(java.lang.Object,int)>(v2, v6);
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void setRawValue(int,java.lang.Object)>(v1, v5);
goto label2;
label1:
specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: void setRawValue(int,java.lang.Object)>(v1, v2);
label2:
return;
}
private void setRawValue(int, java.lang.Object)
{
java.lang.Object[] v3;
int v1, v4, v5;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v2;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.Object;
v3 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
v4 = v1 << 1;
v5 = v4 + 1;
v3[v5] = v2;
return;
}
private java.lang.Object getRawValue(int)
{
java.lang.Object[] v2;
int v1, v3, v4;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v5;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: int;
v2 = v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object[] entries>;
v3 = v1 << 1;
v4 = v3 + 1;
v5 = v2[v4];
return v5;
}
private java.lang.Object getValue(int)
{
int v1;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v2, v4;
boolean v3;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: int;
v2 = specialinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object getRawValue(int)>(v1);
v3 = v2 instanceof org.graalvm.collections.EconomicMapImpl$CollisionLink;
if v3 == 0 goto label1;
v4 = v2.<org.graalvm.collections.EconomicMapImpl$CollisionLink: java.lang.Object value>;
return v4;
label1:
return v2;
}
public java.lang.String toString()
{
int v5;
org.graalvm.collections.EconomicMapImpl v0;
java.lang.String v18, v3, v7;
boolean v10, v2, v9;
org.graalvm.collections.MapCursor v8;
java.lang.Object v11, v13, v16;
java.lang.StringBuilder v1, v12, v14, v15, v17, v4, v6;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = v0.<org.graalvm.collections.EconomicMapImpl: boolean isSet>;
if v2 == 0 goto label1;
v3 = "set(size=";
goto label2;
label1:
v3 = "map(size=";
label2:
v4 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v3);
v5 = virtualinvoke v0.<org.graalvm.collections.EconomicMapImpl: int size()>();
v6 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v5);
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", {");
v7 = "";
v8 = virtualinvoke v0.<org.graalvm.collections.EconomicMapImpl: org.graalvm.collections.MapCursor getEntries()>();
label3:
v9 = interfaceinvoke v8.<org.graalvm.collections.MapCursor: boolean advance()>();
if v9 == 0 goto label6;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v7);
v10 = v0.<org.graalvm.collections.EconomicMapImpl: boolean isSet>;
if v10 == 0 goto label4;
v11 = interfaceinvoke v8.<org.graalvm.collections.MapCursor: java.lang.Object getKey()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v11);
goto label5;
label4:
v12 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");
v13 = interfaceinvoke v8.<org.graalvm.collections.MapCursor: java.lang.Object getKey()>();
v14 = virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v13);
v15 = virtualinvoke v14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");
v16 = interfaceinvoke v8.<org.graalvm.collections.MapCursor: java.lang.Object getValue()>();
v17 = virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v16);
virtualinvoke v17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
label5:
v7 = ",";
goto label3;
label6:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("})");
v18 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v18;
}
public java.util.Iterator iterator()
{
org.graalvm.collections.EconomicMapImpl v0;
org.graalvm.collections.EconomicMapImpl$3 v1;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 = new org.graalvm.collections.EconomicMapImpl$3;
specialinvoke v1.<org.graalvm.collections.EconomicMapImpl$3: void <init>(org.graalvm.collections.EconomicMapImpl)>(v0);
return v1;
}
public boolean contains(java.lang.Object)
{
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v1;
boolean v2;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<org.graalvm.collections.EconomicMapImpl: boolean containsKey(java.lang.Object)>(v1);
return v2;
}
public boolean add(java.lang.Object)
{
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v1, v2;
boolean v3;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v1);
if v2 != null goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public void remove(java.lang.Object)
{
org.graalvm.collections.EconomicMapImpl v0;
java.lang.Object v1;
v0 := @this: org.graalvm.collections.EconomicMapImpl;
v1 := @parameter0: java.lang.Object;
virtualinvoke v0.<org.graalvm.collections.EconomicMapImpl: java.lang.Object removeKey(java.lang.Object)>(v1);
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lorg/graalvm/collections/EconomicMapImpl;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<org.graalvm.collections.EconomicMapImpl: boolean $assertionsDisabled> = v2;
return;
}
}