class org.graalvm.collections.EconomicMapWrap$1 extends java.lang.Object implements org.graalvm.collections.MapCursor
{
private java.util.Map$Entry current;
final java.util.Iterator val$iterator;
final org.graalvm.collections.EconomicMapWrap this$0;
void <init>(org.graalvm.collections.EconomicMapWrap, java.util.Iterator)
{
org.graalvm.collections.EconomicMapWrap$1 v0;
java.util.Iterator v2;
org.graalvm.collections.EconomicMapWrap v1;
v0 := @this: org.graalvm.collections.EconomicMapWrap$1;
v1 := @parameter0: org.graalvm.collections.EconomicMapWrap;
v2 := @parameter1: java.util.Iterator;
v0.<org.graalvm.collections.EconomicMapWrap$1: org.graalvm.collections.EconomicMapWrap this$0> = v1;
v0.<org.graalvm.collections.EconomicMapWrap$1: java.util.Iterator val$iterator> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public boolean advance()
{
org.graalvm.collections.EconomicMapWrap$1 v0;
java.util.Iterator v1, v3;
java.lang.Object v4;
boolean v2;
v0 := @this: org.graalvm.collections.EconomicMapWrap$1;
v1 = v0.<org.graalvm.collections.EconomicMapWrap$1: java.util.Iterator val$iterator>;
v2 = interfaceinvoke v1.<java.util.Iterator: boolean hasNext()>();
if v2 == 0 goto label1;
v3 = v0.<org.graalvm.collections.EconomicMapWrap$1: java.util.Iterator val$iterator>;
v4 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v0.<org.graalvm.collections.EconomicMapWrap$1: java.util.Map$Entry current> = v4;
label1:
return v2;
}
public java.lang.Object getKey()
{
org.graalvm.collections.EconomicMapWrap$1 v0;
java.lang.Object v2;
java.util.Map$Entry v1;
v0 := @this: org.graalvm.collections.EconomicMapWrap$1;
v1 = v0.<org.graalvm.collections.EconomicMapWrap$1: java.util.Map$Entry current>;
v2 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getKey()>();
return v2;
}
public java.lang.Object getValue()
{
org.graalvm.collections.EconomicMapWrap$1 v0;
java.lang.Object v2;
java.util.Map$Entry v1;
v0 := @this: org.graalvm.collections.EconomicMapWrap$1;
v1 = v0.<org.graalvm.collections.EconomicMapWrap$1: java.util.Map$Entry current>;
v2 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getValue()>();
return v2;
}
public void remove()
{
org.graalvm.collections.EconomicMapWrap$1 v0;
java.util.Iterator v1;
v0 := @this: org.graalvm.collections.EconomicMapWrap$1;
v1 = v0.<org.graalvm.collections.EconomicMapWrap$1: java.util.Iterator val$iterator>;
interfaceinvoke v1.<java.util.Iterator: void remove()>();
return;
}
public java.lang.Object setValue(java.lang.Object)
{
org.graalvm.collections.EconomicMapWrap$1 v0;
java.util.Map$Entry v2;
java.lang.Object v1, v3;
v0 := @this: org.graalvm.collections.EconomicMapWrap$1;
v1 := @parameter0: java.lang.Object;
v2 = v0.<org.graalvm.collections.EconomicMapWrap$1: java.util.Map$Entry current>;
v3 = interfaceinvoke v2.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(v1);
return v3;
}
}