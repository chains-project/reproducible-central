public final class org.graalvm.polyglot.HostAccess$Builder extends java.lang.Object
{
private org.graalvm.collections.EconomicSet accessAnnotations;
private org.graalvm.collections.EconomicSet implementationAnnotations;
private org.graalvm.collections.EconomicMap excludeTypes;
private org.graalvm.collections.EconomicSet implementableTypes;
private org.graalvm.collections.EconomicSet members;
private java.util.List targetMappings;
private boolean allowPublic;
private boolean allowArrayAccess;
private boolean allowListAccess;
private boolean allowBufferAccess;
private boolean allowIterableAccess;
private boolean allowIteratorAccess;
private boolean allowMapAccess;
private boolean allowAllImplementations;
private boolean allowAllClassImplementations;
private boolean allowAccessInheritance;
private boolean methodScopingDefault;
private org.graalvm.collections.EconomicSet disableMethodScopingAnnotations;
private org.graalvm.collections.EconomicSet disableMethodScoping;
private java.lang.String name;
final org.graalvm.polyglot.HostAccess this$0;
void <init>(org.graalvm.polyglot.HostAccess)
{
org.graalvm.polyglot.HostAccess v1;
org.graalvm.polyglot.HostAccess$Builder v0;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: org.graalvm.polyglot.HostAccess;
v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
void <init>(org.graalvm.polyglot.HostAccess, org.graalvm.polyglot.HostAccess)
{
org.graalvm.polyglot.HostAccess$Builder v0;
org.graalvm.collections.EconomicSet v11, v12, v14, v15, v17, v3, v33, v35, v36, v38, v5, v9;
org.graalvm.collections.EconomicMap v21, v6, v8;
boolean v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32;
java.util.List v18, v20;
java.util.ArrayList v19;
org.graalvm.collections.Equivalence v10, v13, v16, v34, v37, v4, v7;
org.graalvm.polyglot.HostAccess v1, v2;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: org.graalvm.polyglot.HostAccess;
v2 := @parameter1: org.graalvm.polyglot.HostAccess;
v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = v2.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet accessAnnotations>;
v4 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY>;
v5 = staticinvoke <org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet copySet(org.graalvm.collections.EconomicSet,org.graalvm.collections.Equivalence)>(v3, v4);
v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet accessAnnotations> = v5;
v6 = v2.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicMap excludeTypes>;
v7 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY>;
v8 = staticinvoke <org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicMap copyMap(org.graalvm.collections.EconomicMap,org.graalvm.collections.Equivalence)>(v6, v7);
v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicMap excludeTypes> = v8;
v9 = v2.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet members>;
v10 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence DEFAULT>;
v11 = staticinvoke <org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet copySet(org.graalvm.collections.EconomicSet,org.graalvm.collections.Equivalence)>(v9, v10);
v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet members> = v11;
v12 = v2.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet implementableAnnotations>;
v13 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY>;
v14 = staticinvoke <org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet copySet(org.graalvm.collections.EconomicSet,org.graalvm.collections.Equivalence)>(v12, v13);
v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet implementationAnnotations> = v14;
v15 = v2.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet implementableTypes>;
v16 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY>;
v17 = staticinvoke <org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet copySet(org.graalvm.collections.EconomicSet,org.graalvm.collections.Equivalence)>(v15, v16);
v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet implementableTypes> = v17;
v18 = v2.<org.graalvm.polyglot.HostAccess: java.util.List targetMappings>;
if v18 == null goto label1;
v19 = new java.util.ArrayList;
v20 = v2.<org.graalvm.polyglot.HostAccess: java.util.List targetMappings>;
specialinvoke v19.<java.util.ArrayList: void <init>(java.util.Collection)>(v20);
goto label2;
label1:
v19 = null;
label2:
v0.<org.graalvm.polyglot.HostAccess$Builder: java.util.List targetMappings> = v19;
v21 = v2.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicMap excludeTypes>;
v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicMap excludeTypes> = v21;
v22 = v2.<org.graalvm.polyglot.HostAccess: boolean allowPublic>;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowPublic> = v22;
v23 = v2.<org.graalvm.polyglot.HostAccess: boolean allowListAccess>;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowListAccess> = v23;
v24 = v2.<org.graalvm.polyglot.HostAccess: boolean allowArrayAccess>;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowArrayAccess> = v24;
v25 = v2.<org.graalvm.polyglot.HostAccess: boolean allowBufferAccess>;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowBufferAccess> = v25;
v26 = v2.<org.graalvm.polyglot.HostAccess: boolean allowIterableAccess>;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowIterableAccess> = v26;
v27 = v2.<org.graalvm.polyglot.HostAccess: boolean allowIteratorAccess>;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowIteratorAccess> = v27;
v28 = v2.<org.graalvm.polyglot.HostAccess: boolean allowMapAccess>;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowMapAccess> = v28;
v29 = v2.<org.graalvm.polyglot.HostAccess: boolean allowAllInterfaceImplementations>;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowAllImplementations> = v29;
v30 = v2.<org.graalvm.polyglot.HostAccess: boolean allowAllClassImplementations>;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowAllClassImplementations> = v30;
v31 = v2.<org.graalvm.polyglot.HostAccess: boolean allowAccessInheritance>;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowAccessInheritance> = v31;
v32 = v2.<org.graalvm.polyglot.HostAccess: boolean methodScopingDefault>;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean methodScopingDefault> = v32;
v33 = v2.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet disableMethodScopingAnnotations>;
v34 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY>;
v35 = staticinvoke <org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet copySet(org.graalvm.collections.EconomicSet,org.graalvm.collections.Equivalence)>(v33, v34);
v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet disableMethodScopingAnnotations> = v35;
v36 = v2.<org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet disableMethodScoping>;
v37 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY>;
v38 = staticinvoke <org.graalvm.polyglot.HostAccess: org.graalvm.collections.EconomicSet copySet(org.graalvm.collections.EconomicSet,org.graalvm.collections.Equivalence)>(v36, v37);
v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet disableMethodScoping> = v38;
return;
}
public org.graalvm.polyglot.HostAccess$Builder allowAccessAnnotatedBy(java.lang.Class)
{
org.graalvm.polyglot.HostAccess$Builder v0;
java.lang.Class v1;
org.graalvm.collections.EconomicSet v2, v4, v5;
org.graalvm.collections.Equivalence v3;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: java.lang.Class;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet accessAnnotations>;
if v2 != null goto label1;
v3 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY>;
v4 = staticinvoke <org.graalvm.collections.EconomicSet: org.graalvm.collections.EconomicSet create(org.graalvm.collections.Equivalence)>(v3);
v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet accessAnnotations> = v4;
label1:
v5 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet accessAnnotations>;
interfaceinvoke v5.<org.graalvm.collections.EconomicSet: boolean add(java.lang.Object)>(v1);
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder allowPublicAccess(boolean)
{
org.graalvm.polyglot.HostAccess$Builder v0;
boolean v1;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: boolean;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowPublic> = v1;
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder allowAccess(java.lang.reflect.Executable)
{
org.graalvm.polyglot.HostAccess$Builder v0;
java.lang.reflect.Executable v1;
org.graalvm.collections.EconomicSet v2, v3, v4;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: java.lang.reflect.Executable;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet members>;
if v2 != null goto label1;
v3 = staticinvoke <org.graalvm.collections.EconomicSet: org.graalvm.collections.EconomicSet create()>();
v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet members> = v3;
label1:
v4 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet members>;
interfaceinvoke v4.<org.graalvm.collections.EconomicSet: boolean add(java.lang.Object)>(v1);
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder allowAccess(java.lang.reflect.Field)
{
org.graalvm.polyglot.HostAccess$Builder v0;
java.lang.reflect.Field v1;
org.graalvm.collections.EconomicSet v2, v3, v4;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: java.lang.reflect.Field;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet members>;
if v2 != null goto label1;
v3 = staticinvoke <org.graalvm.collections.EconomicSet: org.graalvm.collections.EconomicSet create()>();
v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet members> = v3;
label1:
v4 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet members>;
interfaceinvoke v4.<org.graalvm.collections.EconomicSet: boolean add(java.lang.Object)>(v1);
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder denyAccess(java.lang.Class)
{
java.lang.Class v1;
org.graalvm.polyglot.HostAccess$Builder v0, v2;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder denyAccess(java.lang.Class,boolean)>(v1, 1);
return v2;
}
public org.graalvm.polyglot.HostAccess$Builder denyAccess(java.lang.Class, boolean)
{
org.graalvm.polyglot.HostAccess$Builder v0;
org.graalvm.collections.EconomicMap v3, v5, v6;
java.lang.Boolean v7;
java.lang.Class v1;
org.graalvm.collections.Equivalence v4;
boolean v2;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: boolean;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v3 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicMap excludeTypes>;
if v3 != null goto label1;
v4 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY>;
v5 = staticinvoke <org.graalvm.collections.EconomicMap: org.graalvm.collections.EconomicMap create(org.graalvm.collections.Equivalence)>(v4);
v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicMap excludeTypes> = v5;
label1:
v6 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicMap excludeTypes>;
v7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v2);
interfaceinvoke v6.<org.graalvm.collections.EconomicMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v7);
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder allowAllImplementations(boolean)
{
org.graalvm.polyglot.HostAccess$Builder v0;
boolean v1;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: boolean;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowAllImplementations> = v1;
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder allowAllClassImplementations(boolean)
{
org.graalvm.polyglot.HostAccess$Builder v0;
boolean v1;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: boolean;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowAllClassImplementations> = v1;
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder allowImplementationsAnnotatedBy(java.lang.Class)
{
org.graalvm.polyglot.HostAccess$Builder v0;
java.lang.Class v1;
org.graalvm.collections.EconomicSet v2, v4, v5;
org.graalvm.collections.Equivalence v3;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: java.lang.Class;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet implementationAnnotations>;
if v2 != null goto label1;
v3 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY>;
v4 = staticinvoke <org.graalvm.collections.EconomicSet: org.graalvm.collections.EconomicSet create(org.graalvm.collections.Equivalence)>(v3);
v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet implementationAnnotations> = v4;
label1:
v5 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet implementationAnnotations>;
interfaceinvoke v5.<org.graalvm.collections.EconomicSet: boolean add(java.lang.Object)>(v1);
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder allowImplementations(java.lang.Class)
{
org.graalvm.polyglot.HostAccess$Builder v0;
java.lang.Class v1;
org.graalvm.collections.EconomicSet v2, v4, v5;
org.graalvm.collections.Equivalence v3;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: java.lang.Class;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet implementableTypes>;
if v2 != null goto label1;
v3 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY>;
v4 = staticinvoke <org.graalvm.collections.EconomicSet: org.graalvm.collections.EconomicSet create(org.graalvm.collections.Equivalence)>(v3);
v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet implementableTypes> = v4;
label1:
v5 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet implementableTypes>;
interfaceinvoke v5.<org.graalvm.collections.EconomicSet: boolean add(java.lang.Object)>(v1);
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder allowArrayAccess(boolean)
{
org.graalvm.polyglot.HostAccess$Builder v0;
boolean v1;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: boolean;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowArrayAccess> = v1;
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder allowListAccess(boolean)
{
org.graalvm.polyglot.HostAccess$Builder v0;
boolean v1;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: boolean;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowListAccess> = v1;
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder allowIterableAccess(boolean)
{
org.graalvm.polyglot.HostAccess$Builder v0;
boolean v1;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: boolean;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowIterableAccess> = v1;
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder allowIteratorAccess(boolean)
{
org.graalvm.polyglot.HostAccess$Builder v0;
boolean v1;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: boolean;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowIteratorAccess> = v1;
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder allowMapAccess(boolean)
{
org.graalvm.polyglot.HostAccess$Builder v0;
boolean v1;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: boolean;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowMapAccess> = v1;
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder allowBufferAccess(boolean)
{
org.graalvm.polyglot.HostAccess$Builder v0;
boolean v1;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: boolean;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowBufferAccess> = v1;
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder allowAccessInheritance(boolean)
{
org.graalvm.polyglot.HostAccess$Builder v0;
boolean v1;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: boolean;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowAccessInheritance> = v1;
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder targetTypeMapping(java.lang.Class, java.lang.Class, java.util.function.Predicate, java.util.function.Function)
{
org.graalvm.polyglot.HostAccess$Builder v0, v6;
java.util.function.Predicate v3;
java.lang.Class v1, v2;
java.util.function.Function v4;
org.graalvm.polyglot.HostAccess$TargetMappingPrecedence v5;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.Class;
v3 := @parameter2: java.util.function.Predicate;
v4 := @parameter3: java.util.function.Function;
v5 = <org.graalvm.polyglot.HostAccess$TargetMappingPrecedence: org.graalvm.polyglot.HostAccess$TargetMappingPrecedence HIGH>;
v6 = virtualinvoke v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.polyglot.HostAccess$Builder targetTypeMapping(java.lang.Class,java.lang.Class,java.util.function.Predicate,java.util.function.Function,org.graalvm.polyglot.HostAccess$TargetMappingPrecedence)>(v1, v2, v3, v4, v5);
return v6;
}
public org.graalvm.polyglot.HostAccess$Builder targetTypeMapping(java.lang.Class, java.lang.Class, java.util.function.Predicate, java.util.function.Function, org.graalvm.polyglot.HostAccess$TargetMappingPrecedence)
{
org.graalvm.polyglot.HostAccess$Builder v0;
java.util.function.Predicate v3;
java.lang.IllegalArgumentException v7;
java.util.function.Function v4;
java.util.ArrayList v9;
java.util.List v10, v8;
org.graalvm.polyglot.impl.AbstractPolyglotImpl v11;
java.lang.Class v1, v2;
java.lang.Object v12;
org.graalvm.polyglot.HostAccess$TargetMappingPrecedence v5;
boolean v6;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.Class;
v3 := @parameter2: java.util.function.Predicate;
v4 := @parameter3: java.util.function.Function;
v5 := @parameter4: org.graalvm.polyglot.HostAccess$TargetMappingPrecedence;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
virtualinvoke v4.<java.lang.Object: java.lang.Class getClass()>();
virtualinvoke v5.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v2.<java.lang.Class: boolean isPrimitive()>();
if v6 == 0 goto label1;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Primitive target type is not supported as target mapping. Use boxed primitives instead.");
throw v7;
label1:
v8 = v0.<org.graalvm.polyglot.HostAccess$Builder: java.util.List targetMappings>;
if v8 != null goto label2;
v9 = new java.util.ArrayList;
specialinvoke v9.<java.util.ArrayList: void <init>()>();
v0.<org.graalvm.polyglot.HostAccess$Builder: java.util.List targetMappings> = v9;
label2:
v10 = v0.<org.graalvm.polyglot.HostAccess$Builder: java.util.List targetMappings>;
v11 = staticinvoke <org.graalvm.polyglot.Engine: org.graalvm.polyglot.impl.AbstractPolyglotImpl getImpl()>();
v12 = virtualinvoke v11.<org.graalvm.polyglot.impl.AbstractPolyglotImpl: java.lang.Object newTargetTypeMapping(java.lang.Class,java.lang.Class,java.util.function.Predicate,java.util.function.Function,org.graalvm.polyglot.HostAccess$TargetMappingPrecedence)>(v1, v2, v3, v4, v5);
interfaceinvoke v10.<java.util.List: boolean add(java.lang.Object)>(v12);
return v0;
}
org.graalvm.polyglot.HostAccess$Builder name(java.lang.String)
{
java.lang.String v1;
org.graalvm.polyglot.HostAccess$Builder v0;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: java.lang.String;
v0.<org.graalvm.polyglot.HostAccess$Builder: java.lang.String name> = v1;
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder methodScoping(boolean)
{
org.graalvm.polyglot.HostAccess$Builder v0;
boolean v1;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: boolean;
v0.<org.graalvm.polyglot.HostAccess$Builder: boolean methodScopingDefault> = v1;
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder disableMethodScopingAnnotatedBy(java.lang.Class)
{
org.graalvm.polyglot.HostAccess$Builder v0;
java.lang.Class v1;
org.graalvm.collections.EconomicSet v2, v4, v5;
org.graalvm.collections.Equivalence v3;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: java.lang.Class;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet disableMethodScopingAnnotations>;
if v2 != null goto label1;
v3 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY>;
v4 = staticinvoke <org.graalvm.collections.EconomicSet: org.graalvm.collections.EconomicSet create(org.graalvm.collections.Equivalence)>(v3);
v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet disableMethodScopingAnnotations> = v4;
label1:
v5 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet disableMethodScopingAnnotations>;
interfaceinvoke v5.<org.graalvm.collections.EconomicSet: boolean add(java.lang.Object)>(v1);
return v0;
}
public org.graalvm.polyglot.HostAccess$Builder disableMethodScoping(java.lang.reflect.Executable)
{
org.graalvm.polyglot.HostAccess$Builder v0;
java.lang.reflect.Executable v1;
org.graalvm.collections.EconomicSet v2, v4, v5;
org.graalvm.collections.Equivalence v3;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 := @parameter0: java.lang.reflect.Executable;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet disableMethodScoping>;
if v2 != null goto label1;
v3 = <org.graalvm.collections.Equivalence: org.graalvm.collections.Equivalence IDENTITY>;
v4 = staticinvoke <org.graalvm.collections.EconomicSet: org.graalvm.collections.EconomicSet create(org.graalvm.collections.Equivalence)>(v3);
v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet disableMethodScoping> = v4;
label1:
v5 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet disableMethodScoping>;
interfaceinvoke v5.<org.graalvm.collections.EconomicSet: boolean add(java.lang.Object)>(v1);
return v0;
}
public org.graalvm.polyglot.HostAccess build()
{
org.graalvm.polyglot.HostAccess$Builder v0;
org.graalvm.collections.EconomicSet v2, v20, v21, v4, v5, v6;
org.graalvm.collections.EconomicMap v3;
java.lang.String v8;
boolean v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v9;
java.util.List v7;
org.graalvm.polyglot.HostAccess v1;
v0 := @this: org.graalvm.polyglot.HostAccess$Builder;
v1 = new org.graalvm.polyglot.HostAccess;
v2 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet accessAnnotations>;
v3 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicMap excludeTypes>;
v4 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet members>;
v5 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet implementationAnnotations>;
v6 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet implementableTypes>;
v7 = v0.<org.graalvm.polyglot.HostAccess$Builder: java.util.List targetMappings>;
v8 = v0.<org.graalvm.polyglot.HostAccess$Builder: java.lang.String name>;
v9 = v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowPublic>;
v10 = v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowAllImplementations>;
v11 = v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowAllClassImplementations>;
v12 = v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowArrayAccess>;
v13 = v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowListAccess>;
v14 = v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowBufferAccess>;
v15 = v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowIterableAccess>;
v16 = v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowIteratorAccess>;
v17 = v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowMapAccess>;
v18 = v0.<org.graalvm.polyglot.HostAccess$Builder: boolean allowAccessInheritance>;
v19 = v0.<org.graalvm.polyglot.HostAccess$Builder: boolean methodScopingDefault>;
v20 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet disableMethodScopingAnnotations>;
v21 = v0.<org.graalvm.polyglot.HostAccess$Builder: org.graalvm.collections.EconomicSet disableMethodScoping>;
specialinvoke v1.<org.graalvm.polyglot.HostAccess: void <init>(org.graalvm.collections.EconomicSet,org.graalvm.collections.EconomicMap,org.graalvm.collections.EconomicSet,org.graalvm.collections.EconomicSet,org.graalvm.collections.EconomicSet,java.util.List,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,org.graalvm.collections.EconomicSet,org.graalvm.collections.EconomicSet)>(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
return v1;
}
}