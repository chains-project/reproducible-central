public class org.kohsuke.github.GHPullRequest extends org.kohsuke.github.GHIssue implements org.kohsuke.github.Refreshable
{
private static final java.lang.String COMMENTS_ACTION;
private static final java.lang.String REQUEST_REVIEWERS;
private java.lang.String patch_url;
private java.lang.String diff_url;
private java.lang.String issue_url;
private org.kohsuke.github.GHCommitPointer base;
private java.lang.String merged_at;
private org.kohsuke.github.GHCommitPointer head;
private org.kohsuke.github.GHUser merged_by;
private int review_comments;
private int additions;
private int commits;
private boolean merged;
private boolean maintainer_can_modify;
boolean draft;
private java.lang.Boolean mergeable;
private int deletions;
private java.lang.String mergeable_state;
private int changed_files;
private java.lang.String merge_commit_sha;
private org.kohsuke.github.GHPullRequest$AutoMerge auto_merge;
private org.kohsuke.github.GHUser[] requested_reviewers;
private org.kohsuke.github.GHTeam[] requested_teams;
public void <init>()
{
org.kohsuke.github.GHPullRequest v0;
v0 := @this: org.kohsuke.github.GHPullRequest;
specialinvoke v0.<org.kohsuke.github.GHIssue: void <init>()>();
return;
}
org.kohsuke.github.GHPullRequest wrapUp(org.kohsuke.github.GHRepository)
{
org.kohsuke.github.GHPullRequest v0;
org.kohsuke.github.GHRepository v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 := @parameter0: org.kohsuke.github.GHRepository;
virtualinvoke v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHIssue wrap(org.kohsuke.github.GHRepository)>(v1);
return v0;
}
protected java.lang.String getApiRoute()
{
org.kohsuke.github.GHRepository v1, v10, v12;
java.net.URL v2;
java.lang.CharSequence[] v8;
int v14;
java.lang.String v11, v13, v15, v4, v6, v7, v9;
org.kohsuke.github.GitHub v5;
org.kohsuke.github.GHPullRequest v0;
java.lang.Object v3;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHRepository owner>;
if v1 != null goto label1;
v2 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: java.net.URL getUrl()>();
v3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "Missing instance URL!");
v4 = virtualinvoke v3.<java.net.URL: java.lang.String toString()>();
v5 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GitHub root()>();
v6 = virtualinvoke v5.<org.kohsuke.github.GitHub: java.lang.String getApiUrl()>();
v7 = virtualinvoke v4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(v6, "");
v8 = newarray (java.lang.CharSequence)[0];
v9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String prependIfMissing(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])>(v7, "/", v8);
return v9;
label1:
v10 = v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHRepository owner>;
v11 = virtualinvoke v10.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v12 = v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHRepository owner>;
v13 = virtualinvoke v12.<org.kohsuke.github.GHRepository: java.lang.String getName()>();
v14 = v0.<org.kohsuke.github.GHPullRequest: int number>;
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,int)>(v11, v13, v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("/repos/\u0001/\u0001/pulls/\u0001");
return v15;
}
public org.kohsuke.github.GHPullRequest$AutoMerge getAutoMerge()
{
org.kohsuke.github.GHPullRequest$AutoMerge v1;
org.kohsuke.github.GHPullRequest v0;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHPullRequest$AutoMerge auto_merge>;
return v1;
}
public java.net.URL getPatchUrl()
{
org.kohsuke.github.GHPullRequest v0;
java.lang.String v1;
java.net.URL v2;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = v0.<org.kohsuke.github.GHPullRequest: java.lang.String patch_url>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public java.net.URL getIssueUrl()
{
org.kohsuke.github.GHPullRequest v0;
java.lang.String v1;
java.net.URL v2;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = v0.<org.kohsuke.github.GHPullRequest: java.lang.String issue_url>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public org.kohsuke.github.GHCommitPointer getBase()
{
org.kohsuke.github.GHPullRequest v0;
org.kohsuke.github.GHCommitPointer v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHCommitPointer base>;
return v1;
}
public org.kohsuke.github.GHCommitPointer getHead()
{
org.kohsuke.github.GHPullRequest v0;
org.kohsuke.github.GHCommitPointer v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHCommitPointer head>;
return v1;
}
public java.util.Date getIssueUpdatedAt() throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v0;
java.util.Date v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = specialinvoke v0.<org.kohsuke.github.GHIssue: java.util.Date getUpdatedAt()>();
return v1;
}
public java.net.URL getDiffUrl()
{
org.kohsuke.github.GHPullRequest v0;
java.lang.String v1;
java.net.URL v2;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = v0.<org.kohsuke.github.GHPullRequest: java.lang.String diff_url>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public java.util.Date getMergedAt()
{
org.kohsuke.github.GHPullRequest v0;
java.lang.String v1;
java.util.Date v2;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = v0.<org.kohsuke.github.GHPullRequest: java.lang.String merged_at>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.util.Date parseDate(java.lang.String)>(v1);
return v2;
}
public org.kohsuke.github.GHUser getClosedBy()
{
org.kohsuke.github.GHPullRequest v0;
v0 := @this: org.kohsuke.github.GHPullRequest;
return null;
}
public org.kohsuke.github.GHIssue$PullRequest getPullRequest()
{
org.kohsuke.github.GHPullRequest v0;
v0 := @this: org.kohsuke.github.GHPullRequest;
return null;
}
public org.kohsuke.github.GHUser getMergedBy() throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v0;
org.kohsuke.github.GHUser v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
specialinvoke v0.<org.kohsuke.github.GHPullRequest: void populate()>();
v1 = v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHUser merged_by>;
return v1;
}
public int getReviewComments() throws java.io.IOException
{
int v1;
org.kohsuke.github.GHPullRequest v0;
v0 := @this: org.kohsuke.github.GHPullRequest;
specialinvoke v0.<org.kohsuke.github.GHPullRequest: void populate()>();
v1 = v0.<org.kohsuke.github.GHPullRequest: int review_comments>;
return v1;
}
public int getAdditions() throws java.io.IOException
{
int v1;
org.kohsuke.github.GHPullRequest v0;
v0 := @this: org.kohsuke.github.GHPullRequest;
specialinvoke v0.<org.kohsuke.github.GHPullRequest: void populate()>();
v1 = v0.<org.kohsuke.github.GHPullRequest: int additions>;
return v1;
}
public int getCommits() throws java.io.IOException
{
int v1;
org.kohsuke.github.GHPullRequest v0;
v0 := @this: org.kohsuke.github.GHPullRequest;
specialinvoke v0.<org.kohsuke.github.GHPullRequest: void populate()>();
v1 = v0.<org.kohsuke.github.GHPullRequest: int commits>;
return v1;
}
public boolean isMerged() throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v0;
boolean v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
specialinvoke v0.<org.kohsuke.github.GHPullRequest: void populate()>();
v1 = v0.<org.kohsuke.github.GHPullRequest: boolean merged>;
return v1;
}
public boolean canMaintainerModify() throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v0;
boolean v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
specialinvoke v0.<org.kohsuke.github.GHPullRequest: void populate()>();
v1 = v0.<org.kohsuke.github.GHPullRequest: boolean maintainer_can_modify>;
return v1;
}
public boolean isDraft() throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v0;
boolean v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
specialinvoke v0.<org.kohsuke.github.GHPullRequest: void populate()>();
v1 = v0.<org.kohsuke.github.GHPullRequest: boolean draft>;
return v1;
}
public java.lang.Boolean getMergeable() throws java.io.IOException
{
java.lang.Boolean v1, v2;
org.kohsuke.github.GHPullRequest v0;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = v0.<org.kohsuke.github.GHPullRequest: java.lang.Boolean mergeable>;
virtualinvoke v0.<org.kohsuke.github.GHPullRequest: void refresh(java.lang.Object)>(v1);
v2 = v0.<org.kohsuke.github.GHPullRequest: java.lang.Boolean mergeable>;
return v2;
}
java.lang.Boolean getMergeableNoRefresh() throws java.io.IOException
{
java.lang.Boolean v1;
org.kohsuke.github.GHPullRequest v0;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = v0.<org.kohsuke.github.GHPullRequest: java.lang.Boolean mergeable>;
return v1;
}
public int getDeletions() throws java.io.IOException
{
int v1;
org.kohsuke.github.GHPullRequest v0;
v0 := @this: org.kohsuke.github.GHPullRequest;
specialinvoke v0.<org.kohsuke.github.GHPullRequest: void populate()>();
v1 = v0.<org.kohsuke.github.GHPullRequest: int deletions>;
return v1;
}
public java.lang.String getMergeableState() throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
specialinvoke v0.<org.kohsuke.github.GHPullRequest: void populate()>();
v1 = v0.<org.kohsuke.github.GHPullRequest: java.lang.String mergeable_state>;
return v1;
}
public int getChangedFiles() throws java.io.IOException
{
int v1;
org.kohsuke.github.GHPullRequest v0;
v0 := @this: org.kohsuke.github.GHPullRequest;
specialinvoke v0.<org.kohsuke.github.GHPullRequest: void populate()>();
v1 = v0.<org.kohsuke.github.GHPullRequest: int changed_files>;
return v1;
}
public java.lang.String getMergeCommitSha() throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
specialinvoke v0.<org.kohsuke.github.GHPullRequest: void populate()>();
v1 = v0.<org.kohsuke.github.GHPullRequest: java.lang.String merge_commit_sha>;
return v1;
}
public java.util.List getRequestedReviewers() throws java.io.IOException
{
java.util.List v3, v4;
org.kohsuke.github.GHPullRequest v0;
org.kohsuke.github.GHUser[] v1, v2;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHUser[] requested_reviewers>;
virtualinvoke v0.<org.kohsuke.github.GHPullRequest: void refresh(java.lang.Object)>(v1);
v2 = v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHUser[] requested_reviewers>;
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
v4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v3);
return v4;
}
public java.util.List getRequestedTeams() throws java.io.IOException
{
java.util.List v3, v4;
org.kohsuke.github.GHPullRequest v0;
org.kohsuke.github.GHTeam[] v1, v2;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHTeam[] requested_teams>;
virtualinvoke v0.<org.kohsuke.github.GHPullRequest: void refresh(java.lang.Object)>(v1);
v2 = v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHTeam[] requested_teams>;
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
v4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v3);
return v4;
}
private void populate() throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = v0.<org.kohsuke.github.GHPullRequest: java.lang.String mergeable_state>;
if v1 == null goto label1;
return;
label1:
virtualinvoke v0.<org.kohsuke.github.GHPullRequest: void refresh()>();
return;
}
public void refresh() throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v0;
org.kohsuke.github.GHRepository v10;
java.net.URL v2;
org.kohsuke.github.internal.Previews v5;
org.kohsuke.github.GitHubRequest$Builder v6, v8;
java.lang.Object v9;
java.lang.String v7;
org.kohsuke.github.Requester v4;
org.kohsuke.github.GitHub v3;
boolean v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: boolean isOffline()>();
if v1 == 0 goto label1;
return;
label1:
v2 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: java.net.URL getUrl()>();
if v2 == null goto label2;
v3 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GitHub root()>();
v4 = virtualinvoke v3.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v5 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews SHADOW_CAT>;
v6 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v5);
v7 = virtualinvoke v2.<java.net.URL: java.lang.String toString()>();
v8 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder setRawUrlPath(java.lang.String)>(v7);
v9 = virtualinvoke v8.<org.kohsuke.github.Requester: java.lang.Object fetchInto(java.lang.Object)>(v0);
v10 = v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHRepository owner>;
virtualinvoke v9.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHPullRequest wrapUp(org.kohsuke.github.GHRepository)>(v10);
label2:
return;
}
public org.kohsuke.github.PagedIterable listFiles()
{
org.kohsuke.github.GHPullRequest v0;
java.lang.Object[] v3;
java.lang.String[] v6;
org.kohsuke.github.GitHubRequest$Builder v7;
java.lang.String v4, v5;
org.kohsuke.github.Requester v2;
org.kohsuke.github.PagedIterable v8;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = newarray (java.lang.Object)[1];
v4 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: java.lang.String getApiRoute()>();
v3[0] = v4;
v5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s/files", v3);
v6 = newarray (java.lang.String)[0];
v7 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v6);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHPullRequestFileDetail;", null);
return v8;
}
public org.kohsuke.github.PagedIterable listReviews()
{
org.kohsuke.github.GHPullRequest v0;
java.lang.Object[] v3;
java.lang.String[] v6;
org.kohsuke.github.GitHubRequest$Builder v7;
java.util.function.Consumer v8;
java.lang.String v4, v5;
org.kohsuke.github.Requester v2;
org.kohsuke.github.PagedIterable v9;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = newarray (java.lang.Object)[1];
v4 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: java.lang.String getApiRoute()>();
v3[0] = v4;
v5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s/reviews", v3);
v6 = newarray (java.lang.String)[0];
v7 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v6);
v8 = staticinvoke <org.kohsuke.github.GHPullRequest$lambda_listReviews_0__80: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHPullRequest)>(v0);
v9 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHPullRequestReview;", v8);
return v9;
}
public org.kohsuke.github.PagedIterable listReviewComments() throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v0;
java.lang.String[] v5;
org.kohsuke.github.GitHubRequest$Builder v6;
java.util.function.Consumer v7;
java.lang.String v3, v4;
org.kohsuke.github.Requester v2;
org.kohsuke.github.PagedIterable v8;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: java.lang.String getApiRoute()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/comments");
v5 = newarray (java.lang.String)[0];
v6 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v4, v5);
v7 = staticinvoke <org.kohsuke.github.GHPullRequest$lambda_listReviewComments_1__81: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHPullRequest)>(v0);
v8 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHPullRequestReviewComment;", v7);
return v8;
}
public org.kohsuke.github.PagedIterable listCommits()
{
org.kohsuke.github.GHPullRequest v0;
java.lang.Object[] v3;
java.lang.String[] v6;
org.kohsuke.github.GitHubRequest$Builder v7;
java.util.function.Consumer v8;
java.lang.String v4, v5;
org.kohsuke.github.Requester v2;
org.kohsuke.github.PagedIterable v9;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = newarray (java.lang.Object)[1];
v4 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: java.lang.String getApiRoute()>();
v3[0] = v4;
v5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s/commits", v3);
v6 = newarray (java.lang.String)[0];
v7 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v6);
v8 = staticinvoke <org.kohsuke.github.GHPullRequest$lambda_listCommits_2__82: java.util.function.Consumer bootstrap$(org.kohsuke.github.GHPullRequest)>(v0);
v9 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.PagedIterable toIterable(java.lang.Class,java.util.function.Consumer)>(class "[Lorg/kohsuke/github/GHPullRequestCommitDetail;", v8);
return v9;
}
public transient org.kohsuke.github.GHPullRequestReview createReview(java.lang.String, org.kohsuke.github.GHPullRequestReviewState, org.kohsuke.github.GHPullRequestReviewComment[]) throws java.io.IOException
{
java.util.List v4;
org.kohsuke.github.GHPullRequest v0;
org.kohsuke.github.GHPullRequestReview v5;
org.kohsuke.github.GHPullRequestReviewState v2;
java.lang.String v1;
org.kohsuke.github.GHPullRequestReviewComment[] v3;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.kohsuke.github.GHPullRequestReviewState;
v3 := @parameter2: org.kohsuke.github.GHPullRequestReviewComment[];
v4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v3);
v5 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHPullRequestReview createReview(java.lang.String,org.kohsuke.github.GHPullRequestReviewState,java.util.List)>(v1, v2, v4);
return v5;
}
public org.kohsuke.github.GHPullRequestReview createReview(java.lang.String, org.kohsuke.github.GHPullRequestReviewState, java.util.List) throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v0;
java.util.Iterator v6;
org.kohsuke.github.GHPullRequestReview v12;
org.kohsuke.github.GHPullRequestReviewState v2;
java.util.List v3;
org.kohsuke.github.GHPullRequestReviewBuilder v4, v5;
int v11;
java.lang.Object v8;
java.lang.String v1, v10, v9;
boolean v7;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.kohsuke.github.GHPullRequestReviewState;
v3 := @parameter2: java.util.List;
v4 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHPullRequestReviewBuilder createReview()>();
v5 = virtualinvoke v4.<org.kohsuke.github.GHPullRequestReviewBuilder: org.kohsuke.github.GHPullRequestReviewBuilder body(java.lang.String)>(v1);
v6 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = virtualinvoke v8.<org.kohsuke.github.GHPullRequestReviewComment: java.lang.String getBody()>();
v10 = virtualinvoke v8.<org.kohsuke.github.GHPullRequestReviewComment: java.lang.String getPath()>();
v11 = virtualinvoke v8.<org.kohsuke.github.GHPullRequestReviewComment: int getPosition()>();
virtualinvoke v5.<org.kohsuke.github.GHPullRequestReviewBuilder: org.kohsuke.github.GHPullRequestReviewBuilder comment(java.lang.String,java.lang.String,int)>(v9, v10, v11);
goto label1;
label2:
v12 = virtualinvoke v5.<org.kohsuke.github.GHPullRequestReviewBuilder: org.kohsuke.github.GHPullRequestReview create()>();
return v12;
}
public org.kohsuke.github.GHPullRequestReviewBuilder createReview()
{
org.kohsuke.github.GHPullRequest v0;
org.kohsuke.github.GHPullRequestReviewBuilder v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = new org.kohsuke.github.GHPullRequestReviewBuilder;
specialinvoke v1.<org.kohsuke.github.GHPullRequestReviewBuilder: void <init>(org.kohsuke.github.GHPullRequest)>(v0);
return v1;
}
public org.kohsuke.github.GHPullRequestReviewComment createReviewComment(java.lang.String, java.lang.String, java.lang.String, int) throws java.io.IOException
{
java.lang.String[] v14;
org.kohsuke.github.GitHubRequest$Builder v10, v11, v15, v7, v8, v9;
org.kohsuke.github.GHPullRequestReviewComment v17;
int v4;
java.lang.String v1, v12, v13, v2, v3;
org.kohsuke.github.GitHub v5;
org.kohsuke.github.GHPullRequest v0;
java.lang.Object v16;
org.kohsuke.github.Requester v6;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: int;
v5 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GitHub root()>();
v6 = virtualinvoke v5.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v7 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("body", v1);
v9 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("commit_id", v2);
v10 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("path", v3);
v11 = virtualinvoke v10.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,int)>("position", v4);
v12 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: java.lang.String getApiRoute()>();
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/comments");
v14 = newarray (java.lang.String)[0];
v15 = virtualinvoke v11.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v13, v14);
v16 = virtualinvoke v15.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHPullRequestReviewComment;");
v17 = virtualinvoke v16.<org.kohsuke.github.GHPullRequestReviewComment: org.kohsuke.github.GHPullRequestReviewComment wrapUp(org.kohsuke.github.GHPullRequest)>(v0);
return v17;
}
public void requestReviewers(java.util.List) throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v0;
java.lang.String[] v9;
org.kohsuke.github.GitHubRequest$Builder v10, v4, v6;
java.util.List v1, v5;
java.lang.String v7, v8;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 := @parameter0: java.util.List;
v2 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v5 = staticinvoke <org.kohsuke.github.GHPullRequest: java.util.List getLogins(java.util.Collection)>(v1);
v6 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.util.Collection)>("reviewers", v5);
v7 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: java.lang.String getApiRoute()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/requested_reviewers");
v9 = newarray (java.lang.String)[0];
v10 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v8, v9);
virtualinvoke v10.<org.kohsuke.github.Requester: void send()>();
return;
}
public void requestTeamReviewers(java.util.List) throws java.io.IOException
{
java.lang.String[] v14;
org.kohsuke.github.GitHubRequest$Builder v10, v11, v15;
java.util.ArrayList v2;
int v3;
java.lang.String v12, v13, v7;
org.kohsuke.github.GitHub v8;
boolean v5;
org.kohsuke.github.GHPullRequest v0;
java.util.Iterator v4;
java.util.List v1;
java.lang.Object v6;
org.kohsuke.github.Requester v9;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 := @parameter0: java.util.List;
v2 = new java.util.ArrayList;
v3 = interfaceinvoke v1.<java.util.List: int size()>();
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v3);
v4 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<org.kohsuke.github.GHTeam: java.lang.String getSlug()>();
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v7);
goto label1;
label2:
v8 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GitHub root()>();
v9 = virtualinvoke v8.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v10 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v11 = virtualinvoke v10.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.util.Collection)>("team_reviewers", v2);
v12 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: java.lang.String getApiRoute()>();
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/requested_reviewers");
v14 = newarray (java.lang.String)[0];
v15 = virtualinvoke v11.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v13, v14);
virtualinvoke v15.<org.kohsuke.github.Requester: void send()>();
return;
}
public org.kohsuke.github.GHPullRequest setBaseBranch(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v0;
java.lang.String[] v7;
org.kohsuke.github.GitHubRequest$Builder v4, v5, v8;
java.lang.Object v9;
java.lang.String v1, v6;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("PATCH");
v5 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("base", v1);
v6 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: java.lang.String getApiRoute()>();
v7 = newarray (java.lang.String)[0];
v8 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v6, v7);
v9 = virtualinvoke v8.<org.kohsuke.github.Requester: java.lang.Object fetch(java.lang.Class)>(class "Lorg/kohsuke/github/GHPullRequest;");
return v9;
}
public void updateBranch() throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v0;
org.kohsuke.github.internal.Previews v3;
java.lang.String[] v11;
org.kohsuke.github.GitHubRequest$Builder v12, v4, v5, v8;
java.lang.String v10, v7, v9;
org.kohsuke.github.GHCommitPointer v6;
org.kohsuke.github.Requester v2;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = <org.kohsuke.github.internal.Previews: org.kohsuke.github.internal.Previews LYDIAN>;
v4 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)>(v3);
v5 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("PUT");
v6 = v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHCommitPointer head>;
v7 = virtualinvoke v6.<org.kohsuke.github.GHCommitPointer: java.lang.String getSha()>();
v8 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("expected_head_sha", v7);
v9 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: java.lang.String getApiRoute()>();
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/update-branch");
v11 = newarray (java.lang.String)[0];
v12 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v10, v11);
virtualinvoke v12.<org.kohsuke.github.Requester: void send()>();
return;
}
public void merge(java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 := @parameter0: java.lang.String;
virtualinvoke v0.<org.kohsuke.github.GHPullRequest: void merge(java.lang.String,java.lang.String)>(v1, null);
return;
}
public void merge(java.lang.String, java.lang.String) throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v0;
java.lang.String v1, v2;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
virtualinvoke v0.<org.kohsuke.github.GHPullRequest: void merge(java.lang.String,java.lang.String,org.kohsuke.github.GHPullRequest$MergeMethod)>(v1, v2, null);
return;
}
public void merge(java.lang.String, java.lang.String, org.kohsuke.github.GHPullRequest$MergeMethod) throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v0;
java.lang.String[] v12;
org.kohsuke.github.GitHubRequest$Builder v13, v6, v7, v8, v9;
java.lang.String v1, v10, v11, v2;
org.kohsuke.github.GHPullRequest$MergeMethod v3;
org.kohsuke.github.Requester v5;
org.kohsuke.github.GitHub v4;
v0 := @this: org.kohsuke.github.GHPullRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: org.kohsuke.github.GHPullRequest$MergeMethod;
v4 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GitHub root()>();
v5 = virtualinvoke v4.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v6 = virtualinvoke v5.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("PUT");
v7 = virtualinvoke v6.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("commit_message", v1);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>("sha", v2);
v9 = virtualinvoke v8.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Enum)>("merge_method", v3);
v10 = virtualinvoke v0.<org.kohsuke.github.GHPullRequest: java.lang.String getApiRoute()>();
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/merge");
v12 = newarray (java.lang.String)[0];
v13 = virtualinvoke v9.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v11, v12);
virtualinvoke v13.<org.kohsuke.github.Requester: void send()>();
return;
}
}