public class org.kohsuke.github.GitHubRequest extends java.lang.Object implements org.kohsuke.github.connector.GitHubConnectorRequest
{
private static final java.util.Comparator nullableCaseInsensitiveComparator;
private static final java.util.List METHODS_WITHOUT_BODY;
private final java.util.List args;
private final java.util.Map headers;
private final java.util.Map injectedMappingValues;
private final java.lang.String apiUrl;
private final java.lang.String urlPath;
private final java.lang.String method;
private final org.kohsuke.github.RateLimitTarget rateLimitTarget;
private final byte[] body;
private final boolean forceBody;
private final java.net.URL url;
private void <init>(java.util.List, java.util.Map, java.util.Map, java.lang.String, java.lang.String, java.lang.String, org.kohsuke.github.RateLimitTarget, byte[], boolean)
{
byte[] v8;
java.net.URL v26;
java.util.ArrayList v10, v19;
java.util.LinkedHashMap v23;
java.util.Map v2, v22, v24, v3;
java.lang.String v25, v4, v5, v6;
boolean v16, v9;
java.util.Iterator v15;
java.util.Set v14;
org.kohsuke.github.GitHubRequest v0;
java.util.List v1, v11, v21;
java.util.TreeMap v12;
java.lang.Object v17, v18, v20;
java.util.Comparator v13;
org.kohsuke.github.RateLimitTarget v7;
v0 := @this: org.kohsuke.github.GitHubRequest;
v1 := @parameter0: java.util.List;
v2 := @parameter1: java.util.Map;
v3 := @parameter2: java.util.Map;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: java.lang.String;
v6 := @parameter5: java.lang.String;
v7 := @parameter6: org.kohsuke.github.RateLimitTarget;
v8 := @parameter7: byte[];
v9 := @parameter8: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v10 = new java.util.ArrayList;
specialinvoke v10.<java.util.ArrayList: void <init>(java.util.Collection)>(v1);
v11 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v10);
v0.<org.kohsuke.github.GitHubRequest: java.util.List args> = v11;
v12 = new java.util.TreeMap;
v13 = <org.kohsuke.github.GitHubRequest: java.util.Comparator nullableCaseInsensitiveComparator>;
specialinvoke v12.<java.util.TreeMap: void <init>(java.util.Comparator)>(v13);
v14 = interfaceinvoke v2.<java.util.Map: java.util.Set entrySet()>();
v15 = interfaceinvoke v14.<java.util.Set: java.util.Iterator iterator()>();
label1:
v16 = interfaceinvoke v15.<java.util.Iterator: boolean hasNext()>();
if v16 == 0 goto label2;
v17 = interfaceinvoke v15.<java.util.Iterator: java.lang.Object next()>();
v18 = interfaceinvoke v17.<java.util.Map$Entry: java.lang.Object getKey()>();
v19 = new java.util.ArrayList;
v20 = interfaceinvoke v17.<java.util.Map$Entry: java.lang.Object getValue()>();
specialinvoke v19.<java.util.ArrayList: void <init>(java.util.Collection)>(v20);
v21 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v19);
virtualinvoke v12.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v18, v21);
goto label1;
label2:
v22 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v12);
v0.<org.kohsuke.github.GitHubRequest: java.util.Map headers> = v22;
v23 = new java.util.LinkedHashMap;
specialinvoke v23.<java.util.LinkedHashMap: void <init>(java.util.Map)>(v3);
v24 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v23);
v0.<org.kohsuke.github.GitHubRequest: java.util.Map injectedMappingValues> = v24;
v0.<org.kohsuke.github.GitHubRequest: java.lang.String apiUrl> = v4;
v0.<org.kohsuke.github.GitHubRequest: java.lang.String urlPath> = v5;
v0.<org.kohsuke.github.GitHubRequest: java.lang.String method> = v6;
v0.<org.kohsuke.github.GitHubRequest: org.kohsuke.github.RateLimitTarget rateLimitTarget> = v7;
v0.<org.kohsuke.github.GitHubRequest: byte[] body> = v8;
v0.<org.kohsuke.github.GitHubRequest: boolean forceBody> = v9;
v25 = specialinvoke v0.<org.kohsuke.github.GitHubRequest: java.lang.String buildTailApiUrl()>();
v26 = staticinvoke <org.kohsuke.github.GitHubRequest: java.net.URL getApiURL(java.lang.String,java.lang.String)>(v4, v25);
v0.<org.kohsuke.github.GitHubRequest: java.net.URL url> = v26;
return;
}
static org.kohsuke.github.GitHubRequest$Builder newBuilder()
{
org.kohsuke.github.GitHubRequest$Builder v0;
v0 = new org.kohsuke.github.GitHubRequest$Builder;
specialinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: void <init>()>();
return v0;
}
static java.net.URL getApiURL(java.lang.String, java.lang.String)
{
java.net.URL v5;
java.lang.Exception v7;
org.kohsuke.github.GHException v8;
java.lang.String v0, v1, v3, v6;
boolean v2, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
label1:
v2 = virtualinvoke v1.<java.lang.String: boolean startsWith(java.lang.String)>("/");
if v2 != 0 goto label2;
v0 = "";
goto label3;
label2:
v3 = "github.com";
v4 = virtualinvoke v3.<java.lang.String: boolean equals(java.lang.Object)>(v0);
if v4 == 0 goto label3;
v0 = "https://api.github.com";
label3:
v5 = new java.net.URL;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
specialinvoke v5.<java.net.URL: void <init>(java.lang.String)>(v6);
label4:
return v5;
label5:
v7 := @caughtexception;
v8 = new org.kohsuke.github.GHException;
specialinvoke v8.<org.kohsuke.github.GHException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to build GitHub API URL", v7);
throw v8;
catch java.lang.Exception from label1 to label4 with label5;
}
static java.lang.String transformEnum(java.lang.Enum)
{
java.lang.Enum v0;
java.util.Locale v2;
java.lang.String v1, v3, v4;
v0 := @parameter0: java.lang.Enum;
v1 = virtualinvoke v0.<java.lang.Enum: java.lang.String toString()>();
v2 = <java.util.Locale: java.util.Locale ENGLISH>;
v3 = virtualinvoke v1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v2);
v4 = virtualinvoke v3.<java.lang.String: java.lang.String replace(char,char)>(95, 45);
return v4;
}
public java.lang.String method()
{
java.lang.String v1;
org.kohsuke.github.GitHubRequest v0;
v0 := @this: org.kohsuke.github.GitHubRequest;
v1 = v0.<org.kohsuke.github.GitHubRequest: java.lang.String method>;
return v1;
}
public org.kohsuke.github.RateLimitTarget rateLimitTarget()
{
org.kohsuke.github.RateLimitTarget v1;
org.kohsuke.github.GitHubRequest v0;
v0 := @this: org.kohsuke.github.GitHubRequest;
v1 = v0.<org.kohsuke.github.GitHubRequest: org.kohsuke.github.RateLimitTarget rateLimitTarget>;
return v1;
}
public java.util.List args()
{
java.util.List v1;
org.kohsuke.github.GitHubRequest v0;
v0 := @this: org.kohsuke.github.GitHubRequest;
v1 = v0.<org.kohsuke.github.GitHubRequest: java.util.List args>;
return v1;
}
public java.util.Map allHeaders()
{
java.util.Map v1;
org.kohsuke.github.GitHubRequest v0;
v0 := @this: org.kohsuke.github.GitHubRequest;
v1 = v0.<org.kohsuke.github.GitHubRequest: java.util.Map headers>;
return v1;
}
public java.lang.String header(java.lang.String)
{
java.util.Map v2;
java.lang.Object v3, v4;
java.lang.String v1;
org.kohsuke.github.GitHubRequest v0;
v0 := @this: org.kohsuke.github.GitHubRequest;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.kohsuke.github.GitHubRequest: java.util.Map headers>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(0);
return v4;
label1:
return null;
}
public java.util.Map injectedMappingValues()
{
java.util.Map v1;
org.kohsuke.github.GitHubRequest v0;
v0 := @this: org.kohsuke.github.GitHubRequest;
v1 = v0.<org.kohsuke.github.GitHubRequest: java.util.Map injectedMappingValues>;
return v1;
}
public java.lang.String apiUrl()
{
java.lang.String v1;
org.kohsuke.github.GitHubRequest v0;
v0 := @this: org.kohsuke.github.GitHubRequest;
v1 = v0.<org.kohsuke.github.GitHubRequest: java.lang.String apiUrl>;
return v1;
}
public java.lang.String urlPath()
{
java.lang.String v1;
org.kohsuke.github.GitHubRequest v0;
v0 := @this: org.kohsuke.github.GitHubRequest;
v1 = v0.<org.kohsuke.github.GitHubRequest: java.lang.String urlPath>;
return v1;
}
public java.lang.String contentType()
{
java.lang.String v1;
org.kohsuke.github.GitHubRequest v0;
v0 := @this: org.kohsuke.github.GitHubRequest;
v1 = virtualinvoke v0.<org.kohsuke.github.GitHubRequest: java.lang.String header(java.lang.String)>("Content-type");
return v1;
}
public java.io.InputStream body()
{
byte[] v1, v3;
java.io.ByteArrayInputStream v2;
org.kohsuke.github.GitHubRequest v0;
v0 := @this: org.kohsuke.github.GitHubRequest;
v1 = v0.<org.kohsuke.github.GitHubRequest: byte[] body>;
if v1 == null goto label1;
v2 = new java.io.ByteArrayInputStream;
v3 = v0.<org.kohsuke.github.GitHubRequest: byte[] body>;
specialinvoke v2.<java.io.ByteArrayInputStream: void <init>(byte[])>(v3);
goto label2;
label1:
v2 = null;
label2:
return v2;
}
public java.net.URL url()
{
java.net.URL v1;
org.kohsuke.github.GitHubRequest v0;
v0 := @this: org.kohsuke.github.GitHubRequest;
v1 = v0.<org.kohsuke.github.GitHubRequest: java.net.URL url>;
return v1;
}
public boolean hasBody()
{
java.util.List v2;
java.lang.String v3;
boolean v1, v4, v5;
org.kohsuke.github.GitHubRequest v0;
v0 := @this: org.kohsuke.github.GitHubRequest;
v1 = v0.<org.kohsuke.github.GitHubRequest: boolean forceBody>;
if v1 != 0 goto label1;
v2 = <org.kohsuke.github.GitHubRequest: java.util.List METHODS_WITHOUT_BODY>;
v3 = v0.<org.kohsuke.github.GitHubRequest: java.lang.String method>;
v4 = interfaceinvoke v2.<java.util.List: boolean contains(java.lang.Object)>(v3);
if v4 != 0 goto label2;
label1:
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
return v5;
}
org.kohsuke.github.GitHubRequest$Builder toBuilder()
{
byte[] v9;
org.kohsuke.github.GitHubRequest$Builder v1;
org.kohsuke.github.GitHubRequest v0;
java.util.List v2;
java.util.Map v3, v4;
java.lang.String v5, v6, v7;
org.kohsuke.github.RateLimitTarget v8;
boolean v10;
v0 := @this: org.kohsuke.github.GitHubRequest;
v1 = new org.kohsuke.github.GitHubRequest$Builder;
v2 = v0.<org.kohsuke.github.GitHubRequest: java.util.List args>;
v3 = v0.<org.kohsuke.github.GitHubRequest: java.util.Map headers>;
v4 = v0.<org.kohsuke.github.GitHubRequest: java.util.Map injectedMappingValues>;
v5 = v0.<org.kohsuke.github.GitHubRequest: java.lang.String apiUrl>;
v6 = v0.<org.kohsuke.github.GitHubRequest: java.lang.String urlPath>;
v7 = v0.<org.kohsuke.github.GitHubRequest: java.lang.String method>;
v8 = v0.<org.kohsuke.github.GitHubRequest: org.kohsuke.github.RateLimitTarget rateLimitTarget>;
v9 = v0.<org.kohsuke.github.GitHubRequest: byte[] body>;
v10 = v0.<org.kohsuke.github.GitHubRequest: boolean forceBody>;
specialinvoke v1.<org.kohsuke.github.GitHubRequest$Builder: void <init>(java.util.List,java.util.Map,java.util.Map,java.lang.String,java.lang.String,java.lang.String,org.kohsuke.github.RateLimitTarget,byte[],boolean)>(v2, v3, v4, v5, v6, v7, v8, v9, v10);
return v1;
}
private java.lang.String buildTailApiUrl()
{
java.util.ListIterator v12;
java.nio.charset.Charset v16, v21;
int v7, v8;
java.lang.String v1, v15, v17, v18, v20, v22, v23;
boolean v13, v2, v24, v4, v5, v9;
char v10;
org.kohsuke.github.GHException v26;
org.kohsuke.github.GitHubRequest v0;
java.util.List v11, v3;
java.lang.Object v14, v19;
java.lang.StringBuilder v6;
java.io.UnsupportedEncodingException v25;
v0 := @this: org.kohsuke.github.GitHubRequest;
v1 = v0.<org.kohsuke.github.GitHubRequest: java.lang.String urlPath>;
v2 = virtualinvoke v0.<org.kohsuke.github.GitHubRequest: boolean hasBody()>();
if v2 != 0 goto label10;
v3 = v0.<org.kohsuke.github.GitHubRequest: java.util.List args>;
v4 = interfaceinvoke v3.<java.util.List: boolean isEmpty()>();
if v4 != 0 goto label10;
v5 = virtualinvoke v1.<java.lang.String: boolean startsWith(java.lang.String)>("/");
if v5 == 0 goto label10;
label01:
v6 = new java.lang.StringBuilder;
specialinvoke v6.<java.lang.StringBuilder: void <init>()>();
v7 = virtualinvoke v1.<java.lang.String: int indexOf(int)>(63);
v8 = (int) -1;
if v7 == v8 goto label02;
v9 = 1;
goto label03;
label02:
v9 = 0;
label03:
if v9 == 0 goto label04;
v10 = 38;
goto label05;
label04:
v10 = 63;
label05:
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v10);
v11 = v0.<org.kohsuke.github.GitHubRequest: java.util.List args>;
v12 = interfaceinvoke v11.<java.util.List: java.util.ListIterator listIterator()>();
label06:
v13 = interfaceinvoke v12.<java.util.Iterator: boolean hasNext()>();
if v13 == 0 goto label07;
v14 = interfaceinvoke v12.<java.util.Iterator: java.lang.Object next()>();
v15 = v14.<org.kohsuke.github.GitHubRequest$Entry: java.lang.String key>;
v16 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
v17 = virtualinvoke v16.<java.nio.charset.Charset: java.lang.String name()>();
v18 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>(v15, v17);
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v18);
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);
v19 = v14.<org.kohsuke.github.GitHubRequest$Entry: java.lang.Object value>;
v20 = virtualinvoke v19.<java.lang.Object: java.lang.String toString()>();
v21 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
v22 = virtualinvoke v21.<java.nio.charset.Charset: java.lang.String name()>();
v23 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>(v20, v22);
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v23);
v24 = interfaceinvoke v12.<java.util.Iterator: boolean hasNext()>();
if v24 == 0 goto label06;
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(38);
goto label06;
label07:
v1 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.StringBuilder)>(v1, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
label08:
goto label10;
label09:
v25 := @caughtexception;
v26 = new org.kohsuke.github.GHException;
specialinvoke v26.<org.kohsuke.github.GHException: void <init>(java.lang.String,java.lang.Throwable)>("UTF-8 encoding required", v25);
throw v26;
label10:
return v1;
catch java.io.UnsupportedEncodingException from label01 to label08 with label09;
}
private static java.lang.String urlPathEncode(java.lang.String)
{
java.net.URISyntaxException v3;
java.lang.AssertionError v4;
java.lang.String v0, v2;
java.net.URI v1;
v0 := @parameter0: java.lang.String;
label1:
v1 = new java.net.URI;
specialinvoke v1.<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, null, v0, null, null);
v2 = virtualinvoke v1.<java.net.URI: java.lang.String toASCIIString()>();
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>(java.lang.Object)>(v3);
throw v4;
catch java.net.URISyntaxException from label1 to label2 with label3;
}
static void <clinit>()
{
java.util.List v3;
java.lang.String[] v2;
java.util.Comparator v0, v1;
v0 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;
v1 = staticinvoke <java.util.Comparator: java.util.Comparator nullsFirst(java.util.Comparator)>(v0);
<org.kohsuke.github.GitHubRequest: java.util.Comparator nullableCaseInsensitiveComparator> = v1;
v2 = newarray (java.lang.String)[2];
v2[0] = "GET";
v2[1] = "DELETE";
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
<org.kohsuke.github.GitHubRequest: java.util.List METHODS_WITHOUT_BODY> = v3;
return;
}
}