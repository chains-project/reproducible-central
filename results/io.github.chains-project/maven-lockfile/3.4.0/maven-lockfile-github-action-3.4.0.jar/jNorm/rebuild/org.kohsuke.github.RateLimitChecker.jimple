public abstract class org.kohsuke.github.RateLimitChecker extends java.lang.Object
{
private static final java.util.logging.Logger LOGGER;
public static final org.kohsuke.github.RateLimitChecker NONE;
public void <init>()
{
org.kohsuke.github.RateLimitChecker v0;
v0 := @this: org.kohsuke.github.RateLimitChecker;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
protected boolean checkRateLimit(org.kohsuke.github.GHRateLimit$Record, long) throws java.lang.InterruptedException
{
long v2;
org.kohsuke.github.RateLimitChecker v0;
org.kohsuke.github.GHRateLimit$Record v1;
v0 := @this: org.kohsuke.github.RateLimitChecker;
v1 := @parameter0: org.kohsuke.github.GHRateLimit$Record;
v2 := @parameter1: long;
return 0;
}
protected final boolean sleepUntilReset(org.kohsuke.github.GHRateLimit$Record) throws java.lang.InterruptedException
{
java.lang.Object[] v7;
java.util.Date v12, v2;
long v3, v4, v5;
java.lang.Integer v11, v9;
java.util.logging.Level v15;
org.kohsuke.github.RateLimitChecker v0;
byte v6;
int v10, v8;
java.lang.String v13;
java.util.logging.Logger v14;
org.kohsuke.github.GHRateLimit$Record v1;
v0 := @this: org.kohsuke.github.RateLimitChecker;
v1 := @parameter0: org.kohsuke.github.GHRateLimit$Record;
v2 = virtualinvoke v1.<org.kohsuke.github.GHRateLimit$Record: java.util.Date getResetDate()>();
v3 = virtualinvoke v2.<java.util.Date: long getTime()>();
v4 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v5 = v3 - v4;
v6 = v5 cmp 0L;
if v6 <= 0 goto label1;
v7 = newarray (java.lang.Object)[3];
v8 = virtualinvoke v1.<org.kohsuke.github.GHRateLimit$Record: int getRemaining()>();
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
v7[0] = v9;
v10 = virtualinvoke v1.<org.kohsuke.github.GHRateLimit$Record: int getLimit()>();
v11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v10);
v7[1] = v11;
v12 = virtualinvoke v1.<org.kohsuke.github.GHRateLimit$Record: java.util.Date getResetDate()>();
v7[2] = v12;
v13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("GitHub API - Current quota has %d remaining of %d. Waiting for quota to reset at %tT.", v7);
v14 = <org.kohsuke.github.RateLimitChecker: java.util.logging.Logger LOGGER>;
v15 = <java.util.logging.Level: java.util.logging.Level INFO>;
virtualinvoke v14.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>(v15, v13);
staticinvoke <java.lang.Thread: void sleep(long)>(v5);
return 1;
label1:
return 0;
}
static void <clinit>()
{
org.kohsuke.github.RateLimitChecker$1 v3;
java.lang.Class v0;
java.lang.String v1;
java.util.logging.Logger v2;
v0 = class "Lorg/kohsuke/github/RateLimitChecker;";
v1 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(v1);
<org.kohsuke.github.RateLimitChecker: java.util.logging.Logger LOGGER> = v2;
v3 = new org.kohsuke.github.RateLimitChecker$1;
specialinvoke v3.<org.kohsuke.github.RateLimitChecker$1: void <init>()>();
<org.kohsuke.github.RateLimitChecker: org.kohsuke.github.RateLimitChecker NONE> = v3;
return;
}
}