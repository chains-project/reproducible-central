class org.kohsuke.github.RateLimitHandler$1 extends org.kohsuke.github.RateLimitHandler
{
void <init>()
{
org.kohsuke.github.RateLimitHandler$1 v0;
v0 := @this: org.kohsuke.github.RateLimitHandler$1;
specialinvoke v0.<org.kohsuke.github.RateLimitHandler: void <init>()>();
return;
}
public void onError(java.io.IOException, java.net.HttpURLConnection) throws java.io.IOException
{
java.lang.Throwable v6;
java.net.HttpURLConnection v2;
java.lang.InterruptedException v4;
org.kohsuke.github.RateLimitHandler$1 v0;
java.io.IOException v1;
long v3;
java.io.InterruptedIOException v5;
v0 := @this: org.kohsuke.github.RateLimitHandler$1;
v1 := @parameter0: java.io.IOException;
v2 := @parameter1: java.net.HttpURLConnection;
label1:
v3 = specialinvoke v0.<org.kohsuke.github.RateLimitHandler$1: long parseWaitTime(java.net.HttpURLConnection)>(v2);
staticinvoke <java.lang.Thread: void sleep(long)>(v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
v5 = new java.io.InterruptedIOException;
specialinvoke v5.<java.io.InterruptedIOException: void <init>()>();
v6 = virtualinvoke v5.<java.io.InterruptedIOException: java.lang.Throwable initCause(java.lang.Throwable)>(v1);
throw v6;
label4:
return;
catch java.lang.InterruptedException from label1 to label2 with label3;
}
private long parseWaitTime(java.net.HttpURLConnection)
{
java.net.HttpURLConnection v1;
org.kohsuke.github.RateLimitHandler$1 v0;
long v3, v4, v5, v6, v7;
java.lang.String v2;
v0 := @this: org.kohsuke.github.RateLimitHandler$1;
v1 := @parameter0: java.net.HttpURLConnection;
v2 = virtualinvoke v1.<java.net.HttpURLConnection: java.lang.String getHeaderField(java.lang.String)>("X-RateLimit-Reset");
if v2 != null goto label1;
return 10000L;
label1:
v3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(v2);
v4 = v3 * 1000L;
v5 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v6 = v4 - v5;
v7 = staticinvoke <java.lang.Math: long max(long,long)>(10000L, v6);
return v7;
}
}