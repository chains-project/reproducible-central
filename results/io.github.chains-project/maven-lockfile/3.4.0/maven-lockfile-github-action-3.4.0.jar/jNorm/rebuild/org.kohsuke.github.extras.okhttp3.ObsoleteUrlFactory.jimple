public final class org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory extends java.lang.Object implements java.net.URLStreamHandlerFactory, java.lang.Cloneable
{
static final java.lang.String SELECTED_PROTOCOL;
static final java.lang.String RESPONSE_SOURCE;
static final java.util.Set METHODS;
static final java.util.TimeZone UTC;
static final int HTTP_CONTINUE;
static final java.lang.ThreadLocal STANDARD_DATE_FORMAT;
static final java.util.Comparator FIELD_NAME_COMPARATOR;
private okhttp3.OkHttpClient client;
public void <init>(okhttp3.OkHttpClient)
{
okhttp3.OkHttpClient v1;
org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory v0;
v0 := @this: org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory;
v1 := @parameter0: okhttp3.OkHttpClient;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory: okhttp3.OkHttpClient client> = v1;
return;
}
public okhttp3.OkHttpClient client()
{
okhttp3.OkHttpClient v1;
org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory v0;
v0 := @this: org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory;
v1 = v0.<org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory: okhttp3.OkHttpClient client>;
return v1;
}
public org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory setClient(okhttp3.OkHttpClient)
{
okhttp3.OkHttpClient v1;
org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory v0;
v0 := @this: org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory;
v1 := @parameter0: okhttp3.OkHttpClient;
v0.<org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory: okhttp3.OkHttpClient client> = v1;
return v0;
}
public org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory clone()
{
okhttp3.OkHttpClient v2;
org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory v0, v1;
v0 := @this: org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory;
v1 = new org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory;
v2 = v0.<org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory: okhttp3.OkHttpClient client>;
specialinvoke v1.<org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory: void <init>(okhttp3.OkHttpClient)>(v2);
return v1;
}
public java.net.HttpURLConnection open(java.net.URL)
{
java.net.HttpURLConnection v4;
okhttp3.OkHttpClient v2;
java.net.Proxy v3;
java.net.URL v1;
org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory v0;
v0 := @this: org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory;
v1 := @parameter0: java.net.URL;
v2 = v0.<org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory: okhttp3.OkHttpClient client>;
v3 = virtualinvoke v2.<okhttp3.OkHttpClient: java.net.Proxy proxy()>();
v4 = virtualinvoke v0.<org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory: java.net.HttpURLConnection open(java.net.URL,java.net.Proxy)>(v1, v3);
return v4;
}
java.net.HttpURLConnection open(java.net.URL, java.net.Proxy)
{
java.net.URL v1;
org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory$OkHttpsURLConnection v11;
java.lang.IllegalArgumentException v12;
okhttp3.OkHttpClient v4, v7;
java.net.Proxy v2;
org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory$OkHttpURLConnection v9;
java.lang.String v13, v3;
okhttp3.OkHttpClient$Builder v5, v6;
org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory v0;
boolean v10, v8;
v0 := @this: org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory;
v1 := @parameter0: java.net.URL;
v2 := @parameter1: java.net.Proxy;
v3 = virtualinvoke v1.<java.net.URL: java.lang.String getProtocol()>();
v4 = v0.<org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory: okhttp3.OkHttpClient client>;
v5 = virtualinvoke v4.<okhttp3.OkHttpClient: okhttp3.OkHttpClient$Builder newBuilder()>();
v6 = virtualinvoke v5.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder proxy(java.net.Proxy)>(v2);
v7 = virtualinvoke v6.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>();
v8 = virtualinvoke v3.<java.lang.String: boolean equals(java.lang.Object)>("http");
if v8 == 0 goto label1;
v9 = new org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory$OkHttpURLConnection;
specialinvoke v9.<org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory$OkHttpURLConnection: void <init>(java.net.URL,okhttp3.OkHttpClient)>(v1, v7);
return v9;
label1:
v10 = virtualinvoke v3.<java.lang.String: boolean equals(java.lang.Object)>("https");
if v10 == 0 goto label2;
v11 = new org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory$OkHttpsURLConnection;
specialinvoke v11.<org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory$OkHttpsURLConnection: void <init>(java.net.URL,okhttp3.OkHttpClient)>(v1, v7);
return v11;
label2:
v12 = new java.lang.IllegalArgumentException;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected protocol: \u0001");
specialinvoke v12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v13);
throw v12;
}
public java.net.URLStreamHandler createURLStreamHandler(java.lang.String)
{
org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory$1 v4;
java.lang.String v1;
org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory v0;
boolean v2, v3;
v0 := @this: org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: boolean equals(java.lang.Object)>("http");
if v2 != 0 goto label1;
v3 = virtualinvoke v1.<java.lang.String: boolean equals(java.lang.Object)>("https");
if v3 != 0 goto label1;
return null;
label1:
v4 = new org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory$1;
specialinvoke v4.<org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory$1: void <init>(org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory,java.lang.String)>(v0, v1);
return v4;
}
static java.lang.String format(java.util.Date)
{
java.lang.ThreadLocal v1;
java.util.Date v0;
java.lang.Object v2;
java.lang.String v3;
v0 := @parameter0: java.util.Date;
v1 = <org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory: java.lang.ThreadLocal STANDARD_DATE_FORMAT>;
v2 = virtualinvoke v1.<java.lang.ThreadLocal: java.lang.Object get()>();
v3 = virtualinvoke v2.<java.text.DateFormat: java.lang.String format(java.util.Date)>(v0);
return v3;
}
static boolean permitsRequestBody(java.lang.String)
{
java.lang.String v0;
boolean v1, v2, v3;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: boolean equals(java.lang.Object)>("GET");
if v1 != 0 goto label1;
v2 = virtualinvoke v0.<java.lang.String: boolean equals(java.lang.Object)>("HEAD");
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
static boolean hasBody(okhttp3.Response)
{
okhttp3.Request v1;
long v6;
okhttp3.Headers v5;
byte v7;
int v4;
okhttp3.Response v0;
java.lang.String v2, v8, v9;
boolean v10, v3;
v0 := @parameter0: okhttp3.Response;
v1 = virtualinvoke v0.<okhttp3.Response: okhttp3.Request request()>();
v2 = virtualinvoke v1.<okhttp3.Request: java.lang.String method()>();
v3 = virtualinvoke v2.<java.lang.String: boolean equals(java.lang.Object)>("HEAD");
if v3 == 0 goto label1;
return 0;
label1:
v4 = virtualinvoke v0.<okhttp3.Response: int code()>();
if v4 < 100 goto label2;
if v4 < 200 goto label3;
label2:
if v4 == 204 goto label3;
if v4 == 304 goto label3;
return 1;
label3:
v5 = virtualinvoke v0.<okhttp3.Response: okhttp3.Headers headers()>();
v6 = staticinvoke <org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory: long contentLength(okhttp3.Headers)>(v5);
v7 = v6 cmp -1L;
if v7 != 0 goto label4;
v8 = "chunked";
v9 = virtualinvoke v0.<okhttp3.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding");
v10 = virtualinvoke v8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v9);
if v10 == 0 goto label5;
label4:
return 1;
label5:
return 0;
}
static long contentLength(okhttp3.Headers)
{
java.lang.NumberFormatException v3;
long v2;
java.lang.String v1;
okhttp3.Headers v0;
v0 := @parameter0: okhttp3.Headers;
v1 = virtualinvoke v0.<okhttp3.Headers: java.lang.String get(java.lang.String)>("Content-Length");
if v1 != null goto label1;
return -1L;
label1:
v2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(v1);
label2:
return v2;
label3:
v3 := @caughtexception;
return -1L;
catch java.lang.NumberFormatException from label1 to label2 with label3;
}
static java.lang.String responseSourceHeader(okhttp3.Response)
{
int v4, v6, v8;
okhttp3.Response v0, v1, v2, v5;
java.lang.String v3, v7;
v0 := @parameter0: okhttp3.Response;
v1 = virtualinvoke v0.<okhttp3.Response: okhttp3.Response networkResponse()>();
if v1 != null goto label3;
v2 = virtualinvoke v0.<okhttp3.Response: okhttp3.Response cacheResponse()>();
if v2 != null goto label1;
v3 = "NONE";
goto label2;
label1:
v4 = virtualinvoke v0.<okhttp3.Response: int code()>();
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("CACHE \u0001");
label2:
return v3;
label3:
v5 = virtualinvoke v0.<okhttp3.Response: okhttp3.Response cacheResponse()>();
if v5 != null goto label4;
v6 = virtualinvoke v0.<okhttp3.Response: int code()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("NETWORK \u0001");
goto label5;
label4:
v8 = virtualinvoke v1.<okhttp3.Response: int code()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("CONDITIONAL_CACHE \u0001");
label5:
return v7;
}
static java.lang.String statusLineToString(okhttp3.Response)
{
int v4;
okhttp3.Response v0;
okhttp3.Protocol v1, v2;
java.lang.String v3, v5, v6;
v0 := @parameter0: okhttp3.Response;
v1 = virtualinvoke v0.<okhttp3.Response: okhttp3.Protocol protocol()>();
v2 = <okhttp3.Protocol: okhttp3.Protocol HTTP_1_0>;
if v1 != v2 goto label1;
v3 = "HTTP/1.0";
goto label2;
label1:
v3 = "HTTP/1.1";
label2:
v4 = virtualinvoke v0.<okhttp3.Response: int code()>();
v5 = virtualinvoke v0.<okhttp3.Response: java.lang.String message()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int,java.lang.String)>(v3, v4, v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 \u0001 \u0001");
return v6;
}
static java.lang.String toHumanReadableAscii(java.lang.String)
{
java.lang.Throwable v11;
okio.Buffer v4;
int v1, v12, v2, v3, v5, v6, v7, v8, v9;
java.lang.String v0, v10;
v0 := @parameter0: java.lang.String;
v1 = 0;
v2 = virtualinvoke v0.<java.lang.String: int length()>();
label01:
if v1 >= v2 goto label11;
v3 = virtualinvoke v0.<java.lang.String: int codePointAt(int)>(v1);
if v3 <= 31 goto label02;
if v3 < 127 goto label10;
label02:
v4 = new okio.Buffer;
specialinvoke v4.<okio.Buffer: void <init>()>();
label03:
virtualinvoke v4.<okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)>(v0, 0, v1);
virtualinvoke v4.<okio.Buffer: okio.Buffer writeUtf8CodePoint(int)>(63);
v5 = staticinvoke <java.lang.Character: int charCount(int)>(v3);
v6 = v1 + v5;
label04:
if v6 >= v2 goto label07;
v7 = virtualinvoke v0.<java.lang.String: int codePointAt(int)>(v6);
if v7 <= 31 goto label05;
if v7 >= 127 goto label05;
v8 = v7;
goto label06;
label05:
v8 = 63;
label06:
virtualinvoke v4.<okio.Buffer: okio.Buffer writeUtf8CodePoint(int)>(v8);
v9 = staticinvoke <java.lang.Character: int charCount(int)>(v7);
v6 = v6 + v9;
goto label04;
label07:
v10 = virtualinvoke v4.<okio.Buffer: java.lang.String readUtf8()>();
label08:
virtualinvoke v4.<okio.Buffer: void close()>();
return v10;
label09:
v11 := @caughtexception;
throw v11;
label10:
v12 = staticinvoke <java.lang.Character: int charCount(int)>(v3);
v1 = v1 + v12;
goto label01;
label11:
return v0;
catch java.lang.Throwable from label03 to label08 with label09;
}
static java.util.Map toMultimap(okhttp3.Headers, java.lang.String)
{
okhttp3.Headers v0;
java.util.ArrayList v8;
java.util.List v10, v11, v12;
java.util.TreeMap v2;
java.util.Map v13;
int v4, v5;
java.lang.Object v9;
java.lang.String v1, v6, v7;
java.util.Comparator v3;
v0 := @parameter0: okhttp3.Headers;
v1 := @parameter1: java.lang.String;
v2 = new java.util.TreeMap;
v3 = <org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory: java.util.Comparator FIELD_NAME_COMPARATOR>;
specialinvoke v2.<java.util.TreeMap: void <init>(java.util.Comparator)>(v3);
v4 = 0;
v5 = virtualinvoke v0.<okhttp3.Headers: int size()>();
label1:
if v4 >= v5 goto label3;
v6 = virtualinvoke v0.<okhttp3.Headers: java.lang.String name(int)>(v4);
v7 = virtualinvoke v0.<okhttp3.Headers: java.lang.String value(int)>(v4);
v8 = new java.util.ArrayList;
specialinvoke v8.<java.util.ArrayList: void <init>()>();
v9 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v6);
if v9 == null goto label2;
interfaceinvoke v8.<java.util.List: boolean addAll(java.util.Collection)>(v9);
label2:
interfaceinvoke v8.<java.util.List: boolean add(java.lang.Object)>(v7);
v10 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v8);
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v10);
v4 = v4 + 1;
goto label1;
label3:
if v1 == null goto label4;
v11 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v1);
v12 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v11);
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, v12);
label4:
v13 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v2);
return v13;
}
static java.lang.String getSystemProperty(java.lang.String, java.lang.String)
{
java.lang.RuntimeException v3;
java.lang.String v0, v1, v2, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
label1:
v2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(v0);
label2:
goto label4;
label3:
v3 := @caughtexception;
return v1;
label4:
if v2 == null goto label5;
v4 = v2;
goto label6;
label5:
v4 = v1;
label6:
return v4;
catch java.lang.SecurityException from label1 to label2 with label3;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
}
static java.lang.String defaultUserAgent()
{
java.lang.String v0, v1;
v0 = staticinvoke <org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory: java.lang.String getSystemProperty(java.lang.String,java.lang.String)>("http.agent", null);
if v0 == null goto label1;
v1 = staticinvoke <org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory: java.lang.String toHumanReadableAscii(java.lang.String)>(v0);
goto label2;
label1:
v1 = "ObsoleteUrlFactory";
label2:
return v1;
}
static java.io.IOException propagate(java.lang.Throwable) throws java.io.IOException
{
java.lang.Throwable v0;
java.lang.AssertionError v4;
boolean v1, v2, v3;
v0 := @parameter0: java.lang.Throwable;
v1 = v0 instanceof java.io.IOException;
if v1 == 0 goto label1;
throw v0;
label1:
v2 = v0 instanceof java.lang.Error;
if v2 == 0 goto label2;
throw v0;
label2:
v3 = v0 instanceof java.lang.RuntimeException;
if v3 == 0 goto label3;
throw v0;
label3:
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
}
static void <clinit>()
{
java.lang.ThreadLocal v5;
java.util.List v2;
java.util.TimeZone v3;
java.lang.String[] v1;
java.util.Comparator v6;
java.util.function.Supplier v4;
java.util.LinkedHashSet v0;
v0 = new java.util.LinkedHashSet;
v1 = newarray (java.lang.String)[8];
v1[0] = "OPTIONS";
v1[1] = "GET";
v1[2] = "HEAD";
v1[3] = "POST";
v1[4] = "PUT";
v1[5] = "DELETE";
v1[6] = "TRACE";
v1[7] = "PATCH";
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
specialinvoke v0.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(v2);
<org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory: java.util.Set METHODS> = v0;
v3 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");
<org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory: java.util.TimeZone UTC> = v3;
v4 = staticinvoke <org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory$lambda_static_0__90: java.util.function.Supplier bootstrap$()>();
v5 = staticinvoke <java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>(v4);
<org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory: java.lang.ThreadLocal STANDARD_DATE_FORMAT> = v5;
v6 = staticinvoke <org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory$lambda_static_1__91: java.util.Comparator bootstrap$()>();
<org.kohsuke.github.extras.okhttp3.ObsoleteUrlFactory: java.util.Comparator FIELD_NAME_COMPARATOR> = v6;
return;
}
}