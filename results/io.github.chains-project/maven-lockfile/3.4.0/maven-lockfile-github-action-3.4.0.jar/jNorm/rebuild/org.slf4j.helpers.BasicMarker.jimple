public class org.slf4j.helpers.BasicMarker extends java.lang.Object implements org.slf4j.Marker
{
private static final long serialVersionUID;
private final java.lang.String name;
private final java.util.List referenceList;
private static final java.lang.String OPEN;
private static final java.lang.String CLOSE;
private static final java.lang.String SEP;
void <init>(java.lang.String)
{
org.slf4j.helpers.BasicMarker v0;
java.lang.String v1;
java.lang.IllegalArgumentException v3;
java.util.concurrent.CopyOnWriteArrayList v2;
v0 := @this: org.slf4j.helpers.BasicMarker;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.CopyOnWriteArrayList;
specialinvoke v2.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();
v0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList> = v2;
if v1 != null goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A marker name cannot be null");
throw v3;
label1:
v0.<org.slf4j.helpers.BasicMarker: java.lang.String name> = v1;
return;
}
public java.lang.String getName()
{
org.slf4j.helpers.BasicMarker v0;
java.lang.String v1;
v0 := @this: org.slf4j.helpers.BasicMarker;
v1 = v0.<org.slf4j.helpers.BasicMarker: java.lang.String name>;
return v1;
}
public void add(org.slf4j.Marker)
{
java.util.List v5;
org.slf4j.Marker v1;
org.slf4j.helpers.BasicMarker v0;
java.lang.IllegalArgumentException v2;
boolean v3, v4;
v0 := @this: org.slf4j.helpers.BasicMarker;
v1 := @parameter0: org.slf4j.Marker;
if v1 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A null value cannot be added to a Marker as reference.");
throw v2;
label1:
v3 = virtualinvoke v0.<org.slf4j.helpers.BasicMarker: boolean contains(org.slf4j.Marker)>(v1);
if v3 == 0 goto label2;
return;
label2:
v4 = interfaceinvoke v1.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>(v0);
if v4 == 0 goto label3;
return;
label3:
v5 = v0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList>;
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v1);
return;
}
public boolean hasReferences()
{
java.util.List v1;
int v2;
org.slf4j.helpers.BasicMarker v0;
boolean v3;
v0 := @this: org.slf4j.helpers.BasicMarker;
v1 = v0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList>;
v2 = interfaceinvoke v1.<java.util.List: int size()>();
if v2 <= 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean hasChildren()
{
org.slf4j.helpers.BasicMarker v0;
boolean v1;
v0 := @this: org.slf4j.helpers.BasicMarker;
v1 = virtualinvoke v0.<org.slf4j.helpers.BasicMarker: boolean hasReferences()>();
return v1;
}
public java.util.Iterator iterator()
{
java.util.List v1;
org.slf4j.helpers.BasicMarker v0;
java.util.Iterator v2;
v0 := @this: org.slf4j.helpers.BasicMarker;
v1 = v0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList>;
v2 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
return v2;
}
public boolean remove(org.slf4j.Marker)
{
java.util.List v2;
org.slf4j.Marker v1;
org.slf4j.helpers.BasicMarker v0;
boolean v3;
v0 := @this: org.slf4j.helpers.BasicMarker;
v1 := @parameter0: org.slf4j.Marker;
v2 = v0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList>;
v3 = interfaceinvoke v2.<java.util.List: boolean remove(java.lang.Object)>(v1);
return v3;
}
public boolean contains(org.slf4j.Marker)
{
java.util.Iterator v6;
java.lang.IllegalArgumentException v2;
java.util.List v5;
org.slf4j.Marker v1;
java.lang.Object v8;
org.slf4j.helpers.BasicMarker v0;
boolean v3, v4, v7, v9;
v0 := @this: org.slf4j.helpers.BasicMarker;
v1 := @parameter0: org.slf4j.Marker;
if v1 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Other cannot be null");
throw v2;
label1:
v3 = virtualinvoke v0.<org.slf4j.helpers.BasicMarker: boolean equals(java.lang.Object)>(v1);
if v3 == 0 goto label2;
return 1;
label2:
v4 = virtualinvoke v0.<org.slf4j.helpers.BasicMarker: boolean hasReferences()>();
if v4 == 0 goto label4;
v5 = v0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList>;
v6 = interfaceinvoke v5.<java.util.List: java.util.Iterator iterator()>();
label3:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label4;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = interfaceinvoke v8.<org.slf4j.Marker: boolean contains(org.slf4j.Marker)>(v1);
if v9 == 0 goto label3;
return 1;
label4:
return 0;
}
public boolean contains(java.lang.String)
{
java.util.Iterator v7;
java.lang.IllegalArgumentException v2;
java.util.List v6;
java.lang.Object v9;
org.slf4j.helpers.BasicMarker v0;
java.lang.String v1, v3;
boolean v10, v4, v5, v8;
v0 := @this: org.slf4j.helpers.BasicMarker;
v1 := @parameter0: java.lang.String;
if v1 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Other cannot be null");
throw v2;
label1:
v3 = v0.<org.slf4j.helpers.BasicMarker: java.lang.String name>;
v4 = virtualinvoke v3.<java.lang.String: boolean equals(java.lang.Object)>(v1);
if v4 == 0 goto label2;
return 1;
label2:
v5 = virtualinvoke v0.<org.slf4j.helpers.BasicMarker: boolean hasReferences()>();
if v5 == 0 goto label4;
v6 = v0.<org.slf4j.helpers.BasicMarker: java.util.List referenceList>;
v7 = interfaceinvoke v6.<java.util.List: java.util.Iterator iterator()>();
label3:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label4;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = interfaceinvoke v9.<org.slf4j.Marker: boolean contains(java.lang.String)>(v1);
if v10 == 0 goto label3;
return 1;
label4:
return 0;
}
public boolean equals(java.lang.Object)
{
java.lang.Object v1;
org.slf4j.helpers.BasicMarker v0;
java.lang.String v3, v4;
boolean v2, v5;
v0 := @this: org.slf4j.helpers.BasicMarker;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 != null goto label2;
return 0;
label2:
v2 = v1 instanceof org.slf4j.Marker;
if v2 != 0 goto label3;
return 0;
label3:
v3 = v0.<org.slf4j.helpers.BasicMarker: java.lang.String name>;
v4 = interfaceinvoke v1.<org.slf4j.Marker: java.lang.String getName()>();
v5 = virtualinvoke v3.<java.lang.String: boolean equals(java.lang.Object)>(v4);
return v5;
}
public int hashCode()
{
int v2;
org.slf4j.helpers.BasicMarker v0;
java.lang.String v1;
v0 := @this: org.slf4j.helpers.BasicMarker;
v1 = v0.<org.slf4j.helpers.BasicMarker: java.lang.String name>;
v2 = virtualinvoke v1.<java.lang.String: int hashCode()>();
return v2;
}
public java.lang.String toString()
{
java.util.Iterator v3;
java.lang.Object v8;
java.lang.StringBuilder v4, v6;
org.slf4j.helpers.BasicMarker v0;
java.lang.String v11, v2, v5, v9;
boolean v1, v10, v7;
v0 := @this: org.slf4j.helpers.BasicMarker;
v1 = virtualinvoke v0.<org.slf4j.helpers.BasicMarker: boolean hasReferences()>();
if v1 != 0 goto label1;
v2 = virtualinvoke v0.<org.slf4j.helpers.BasicMarker: java.lang.String getName()>();
return v2;
label1:
v3 = virtualinvoke v0.<org.slf4j.helpers.BasicMarker: java.util.Iterator iterator()>();
v4 = new java.lang.StringBuilder;
v5 = virtualinvoke v0.<org.slf4j.helpers.BasicMarker: java.lang.String getName()>();
specialinvoke v4.<java.lang.StringBuilder: void <init>(java.lang.String)>(v5);
v6 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ ");
label2:
v7 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label3;
v8 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v9 = interfaceinvoke v8.<org.slf4j.Marker: java.lang.String getName()>();
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v9);
v10 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label2;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
goto label2;
label3:
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ]");
v11 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.String toString()>();
return v11;
}
}