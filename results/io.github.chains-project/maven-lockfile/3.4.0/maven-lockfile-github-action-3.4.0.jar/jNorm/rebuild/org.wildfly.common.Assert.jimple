public final class org.wildfly.common.Assert extends java.lang.Object
{
static final boolean $assertionsDisabled;
private void <init>()
{
org.wildfly.common.Assert v0;
v0 := @this: org.wildfly.common.Assert;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.Object checkNotNullParam(java.lang.String, java.lang.Object) throws java.lang.IllegalArgumentException
{
java.lang.Object v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.Object;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>(v0, v1);
return v1;
}
public static java.lang.Object checkNotNullParamWithNullPointerException(java.lang.String, java.lang.Object) throws java.lang.NullPointerException
{
org.wildfly.common._private.CommonMessages v2;
java.lang.Object v1;
java.lang.String v0;
java.lang.NullPointerException v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.Object;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
if v1 != null goto label1;
v2 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v3 = interfaceinvoke v2.<org.wildfly.common._private.CommonMessages: java.lang.NullPointerException nullParamNPE(java.lang.String)>(v0);
throw v3;
label1:
return v1;
}
private static void checkNotNullParamChecked(java.lang.String, java.lang.Object)
{
org.wildfly.common._private.CommonMessages v2;
java.lang.Object v1;
java.lang.String v0;
java.lang.IllegalArgumentException v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.Object;
if v1 != null goto label1;
v2 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v3 = interfaceinvoke v2.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException nullParam(java.lang.String)>(v0);
throw v3;
label1:
return;
}
public static java.lang.Object checkNotNullArrayParam(java.lang.String, int, java.lang.Object) throws java.lang.IllegalArgumentException
{
org.wildfly.common._private.CommonMessages v3;
int v1;
java.lang.Object v2;
java.lang.String v0;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.Object;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
if v2 != null goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException nullArrayParam(int,java.lang.String)>(v1, v0);
throw v4;
label1:
return v2;
}
public static java.lang.String checkNotEmptyParam(java.lang.String, java.lang.String)
{
org.wildfly.common._private.CommonMessages v3;
java.lang.String v0, v1;
java.lang.IllegalArgumentException v4;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("value", v1);
v2 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v2 == 0 goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException emptyParam(java.lang.String)>(v0);
throw v4;
label1:
return v1;
}
public static java.lang.CharSequence checkNotEmptyParam(java.lang.String, java.lang.CharSequence)
{
java.lang.CharSequence v1;
org.wildfly.common._private.CommonMessages v3;
int v2;
java.lang.String v0;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.CharSequence;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("value", v1);
v2 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v2 != 0 goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException emptyParam(java.lang.String)>(v0);
throw v4;
label1:
return v1;
}
public static java.util.Collection checkNotEmptyParam(java.lang.String, java.util.Collection)
{
org.wildfly.common._private.CommonMessages v3;
java.util.Collection v1;
java.lang.String v0;
java.lang.IllegalArgumentException v4;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.util.Collection;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("value", v1);
v2 = interfaceinvoke v1.<java.util.Collection: boolean isEmpty()>();
if v2 == 0 goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException emptyParam(java.lang.String)>(v0);
throw v4;
label1:
return v1;
}
public static java.util.Map checkNotEmptyParam(java.lang.String, java.util.Map)
{
org.wildfly.common._private.CommonMessages v3;
java.util.Map v1;
java.lang.String v0;
java.lang.IllegalArgumentException v4;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.util.Map;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("value", v1);
v2 = interfaceinvoke v1.<java.util.Map: boolean isEmpty()>();
if v2 == 0 goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException emptyParam(java.lang.String)>(v0);
throw v4;
label1:
return v1;
}
public static java.lang.Object[] checkNotEmptyParam(java.lang.String, java.lang.Object[])
{
java.lang.Object[] v1;
org.wildfly.common._private.CommonMessages v3;
int v2;
java.lang.String v0;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.Object[];
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("value", v1);
v2 = lengthof v1;
if v2 != 0 goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException emptyParam(java.lang.String)>(v0);
throw v4;
label1:
return v1;
}
public static boolean[] checkNotEmptyParam(java.lang.String, boolean[])
{
org.wildfly.common._private.CommonMessages v3;
boolean[] v1;
int v2;
java.lang.String v0;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: boolean[];
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("value", v1);
v2 = lengthof v1;
if v2 != 0 goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException emptyParam(java.lang.String)>(v0);
throw v4;
label1:
return v1;
}
public static byte[] checkNotEmptyParam(java.lang.String, byte[])
{
byte[] v1;
org.wildfly.common._private.CommonMessages v3;
int v2;
java.lang.String v0;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: byte[];
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("value", v1);
v2 = lengthof v1;
if v2 != 0 goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException emptyParam(java.lang.String)>(v0);
throw v4;
label1:
return v1;
}
public static short[] checkNotEmptyParam(java.lang.String, short[])
{
org.wildfly.common._private.CommonMessages v3;
int v2;
java.lang.String v0;
short[] v1;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: short[];
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("value", v1);
v2 = lengthof v1;
if v2 != 0 goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException emptyParam(java.lang.String)>(v0);
throw v4;
label1:
return v1;
}
public static int[] checkNotEmptyParam(java.lang.String, int[])
{
int[] v1;
org.wildfly.common._private.CommonMessages v3;
int v2;
java.lang.String v0;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int[];
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("value", v1);
v2 = lengthof v1;
if v2 != 0 goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException emptyParam(java.lang.String)>(v0);
throw v4;
label1:
return v1;
}
public static long[] checkNotEmptyParam(java.lang.String, long[])
{
long[] v1;
org.wildfly.common._private.CommonMessages v3;
int v2;
java.lang.String v0;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: long[];
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("value", v1);
v2 = lengthof v1;
if v2 != 0 goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException emptyParam(java.lang.String)>(v0);
throw v4;
label1:
return v1;
}
public static float[] checkNotEmptyParam(java.lang.String, float[])
{
org.wildfly.common._private.CommonMessages v3;
int v2;
float[] v1;
java.lang.String v0;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: float[];
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("value", v1);
v2 = lengthof v1;
if v2 != 0 goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException emptyParam(java.lang.String)>(v0);
throw v4;
label1:
return v1;
}
public static double[] checkNotEmptyParam(java.lang.String, double[])
{
org.wildfly.common._private.CommonMessages v3;
double[] v1;
int v2;
java.lang.String v0;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: double[];
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("value", v1);
v2 = lengthof v1;
if v2 != 0 goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException emptyParam(java.lang.String)>(v0);
throw v4;
label1:
return v1;
}
public static void checkMinimumParameter(java.lang.String, int, int) throws java.lang.IllegalArgumentException
{
org.wildfly.common._private.CommonMessages v3;
int v1, v2;
java.lang.String v0;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: int;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
if v2 >= v1 goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException paramLessThan(java.lang.String,long)>(v0, v1);
throw v4;
label1:
return;
}
public static void checkMinimumParameter(java.lang.String, long, long) throws java.lang.IllegalArgumentException
{
byte v3;
org.wildfly.common._private.CommonMessages v4;
long v1, v2;
java.lang.String v0;
java.lang.IllegalArgumentException v5;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: long;
v2 := @parameter2: long;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
v3 = v2 cmp v1;
if v3 >= 0 goto label1;
v4 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v5 = interfaceinvoke v4.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException paramLessThan(java.lang.String,long)>(v0, v1);
throw v5;
label1:
return;
}
public static void checkMinimumParameter(java.lang.String, float, float) throws java.lang.IllegalArgumentException
{
byte v3;
org.wildfly.common._private.CommonMessages v4;
float v1, v2;
java.lang.String v0;
java.lang.IllegalArgumentException v5;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: float;
v2 := @parameter2: float;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
v3 = v2 cmpg v1;
if v3 >= 0 goto label1;
v4 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v5 = interfaceinvoke v4.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException paramLessThan(java.lang.String,double)>(v0, v1);
throw v5;
label1:
return;
}
public static void checkMinimumParameter(java.lang.String, double, double) throws java.lang.IllegalArgumentException
{
byte v3;
org.wildfly.common._private.CommonMessages v4;
java.lang.String v0;
java.lang.IllegalArgumentException v5;
double v1, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: double;
v2 := @parameter2: double;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
v3 = v2 cmpg v1;
if v3 >= 0 goto label1;
v4 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v5 = interfaceinvoke v4.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException paramLessThan(java.lang.String,double)>(v0, v1);
throw v5;
label1:
return;
}
public static void checkMaximumParameter(java.lang.String, int, int) throws java.lang.IllegalArgumentException
{
org.wildfly.common._private.CommonMessages v3;
int v1, v2;
java.lang.String v0;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: int;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
if v2 <= v1 goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException paramGreaterThan(java.lang.String,long)>(v0, v1);
throw v4;
label1:
return;
}
public static void checkMaximumParameter(java.lang.String, long, long) throws java.lang.IllegalArgumentException
{
byte v3;
org.wildfly.common._private.CommonMessages v4;
long v1, v2;
java.lang.String v0;
java.lang.IllegalArgumentException v5;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: long;
v2 := @parameter2: long;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
v3 = v2 cmp v1;
if v3 <= 0 goto label1;
v4 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v5 = interfaceinvoke v4.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException paramGreaterThan(java.lang.String,long)>(v0, v1);
throw v5;
label1:
return;
}
public static void checkMaximumParameter(java.lang.String, float, float) throws java.lang.IllegalArgumentException
{
byte v3;
org.wildfly.common._private.CommonMessages v4;
float v1, v2;
java.lang.String v0;
java.lang.IllegalArgumentException v5;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: float;
v2 := @parameter2: float;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
v3 = v2 cmpl v1;
if v3 <= 0 goto label1;
v4 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v5 = interfaceinvoke v4.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException paramGreaterThan(java.lang.String,double)>(v0, v1);
throw v5;
label1:
return;
}
public static void checkMaximumParameter(java.lang.String, double, double) throws java.lang.IllegalArgumentException
{
byte v3;
org.wildfly.common._private.CommonMessages v4;
java.lang.String v0;
java.lang.IllegalArgumentException v5;
double v1, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: double;
v2 := @parameter2: double;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("name", v0);
v3 = v2 cmpl v1;
if v3 <= 0 goto label1;
v4 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v5 = interfaceinvoke v4.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException paramGreaterThan(java.lang.String,double)>(v0, v1);
throw v5;
label1:
return;
}
public static void checkArrayBounds(java.lang.Object[], int, int) throws java.lang.ArrayIndexOutOfBoundsException
{
java.lang.Object[] v0;
int v1, v2, v3;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: int;
v2 := @parameter2: int;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("array", v0);
v3 = lengthof v0;
staticinvoke <org.wildfly.common.Assert: void checkArrayBounds(int,int,int)>(v3, v1, v2);
return;
}
public static void checkArrayBounds(byte[], int, int) throws java.lang.ArrayIndexOutOfBoundsException
{
byte[] v0;
int v1, v2, v3;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("array", v0);
v3 = lengthof v0;
staticinvoke <org.wildfly.common.Assert: void checkArrayBounds(int,int,int)>(v3, v1, v2);
return;
}
public static void checkArrayBounds(char[], int, int) throws java.lang.ArrayIndexOutOfBoundsException
{
int v1, v2, v3;
char[] v0;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("array", v0);
v3 = lengthof v0;
staticinvoke <org.wildfly.common.Assert: void checkArrayBounds(int,int,int)>(v3, v1, v2);
return;
}
public static void checkArrayBounds(int[], int, int) throws java.lang.ArrayIndexOutOfBoundsException
{
int[] v0;
int v1, v2, v3;
v0 := @parameter0: int[];
v1 := @parameter1: int;
v2 := @parameter2: int;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("array", v0);
v3 = lengthof v0;
staticinvoke <org.wildfly.common.Assert: void checkArrayBounds(int,int,int)>(v3, v1, v2);
return;
}
public static void checkArrayBounds(long[], int, int) throws java.lang.ArrayIndexOutOfBoundsException
{
long[] v0;
int v1, v2, v3;
v0 := @parameter0: long[];
v1 := @parameter1: int;
v2 := @parameter2: int;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("array", v0);
v3 = lengthof v0;
staticinvoke <org.wildfly.common.Assert: void checkArrayBounds(int,int,int)>(v3, v1, v2);
return;
}
public static void checkArrayBounds(int, int, int) throws java.lang.ArrayIndexOutOfBoundsException
{
java.lang.ArrayIndexOutOfBoundsException v4, v7;
org.wildfly.common._private.CommonMessages v3, v6;
int v0, v1, v2, v5;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: int;
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("offs", 0, v1);
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("len", 0, v2);
if v1 <= v0 goto label1;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.ArrayIndexOutOfBoundsException arrayOffsetGreaterThanLength(int,int)>(v1, v0);
throw v4;
label1:
v5 = v1 + v2;
if v5 <= v0 goto label2;
v6 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v7 = interfaceinvoke v6.<org.wildfly.common._private.CommonMessages: java.lang.ArrayIndexOutOfBoundsException arrayOffsetLengthGreaterThanLength(int,int,int)>(v1, v2, v0);
throw v7;
label2:
return;
}
public static java.lang.Object assertNotNull(java.lang.Object)
{
org.wildfly.common._private.CommonMessages v3;
java.lang.Object v0;
java.lang.AssertionError v2;
java.lang.String v4;
boolean v1;
v0 := @parameter0: java.lang.Object;
v1 = <org.wildfly.common.Assert: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
if v0 != null goto label1;
v2 = new java.lang.AssertionError;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.String unexpectedNullValue()>();
specialinvoke v2.<java.lang.AssertionError: void <init>(java.lang.Object)>(v4);
throw v2;
label1:
return v0;
}
public static java.lang.Object assertHoldsLock(java.lang.Object)
{
org.wildfly.common._private.CommonMessages v5;
java.lang.Object v0, v2;
java.lang.AssertionError v4;
java.lang.String v6;
boolean v1, v3;
v0 := @parameter0: java.lang.Object;
v1 = <org.wildfly.common.Assert: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("monitor", v0);
v3 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(v2);
if v3 != 0 goto label1;
v4 = new java.lang.AssertionError;
v5 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v6 = interfaceinvoke v5.<org.wildfly.common._private.CommonMessages: java.lang.String expectedLockHold(java.lang.Object)>(v0);
specialinvoke v4.<java.lang.AssertionError: void <init>(java.lang.Object)>(v6);
throw v4;
label1:
return v0;
}
public static java.lang.Object assertNotHoldsLock(java.lang.Object)
{
org.wildfly.common._private.CommonMessages v5;
java.lang.Object v0, v2;
java.lang.AssertionError v4;
java.lang.String v6;
boolean v1, v3;
v0 := @parameter0: java.lang.Object;
v1 = <org.wildfly.common.Assert: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("monitor", v0);
v3 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(v2);
if v3 == 0 goto label1;
v4 = new java.lang.AssertionError;
v5 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v6 = interfaceinvoke v5.<org.wildfly.common._private.CommonMessages: java.lang.String expectedLockNotHold(java.lang.Object)>(v0);
specialinvoke v4.<java.lang.AssertionError: void <init>(java.lang.Object)>(v6);
throw v4;
label1:
return v0;
}
public static boolean assertTrue(boolean)
{
org.wildfly.common._private.CommonMessages v3;
java.lang.AssertionError v2;
java.lang.String v4;
boolean v0, v1;
v0 := @parameter0: boolean;
v1 = <org.wildfly.common.Assert: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
if v0 != 0 goto label1;
v2 = new java.lang.AssertionError;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.String expectedBoolean(boolean)>(v0);
specialinvoke v2.<java.lang.AssertionError: void <init>(java.lang.Object)>(v4);
throw v2;
label1:
return v0;
}
public static boolean assertFalse(boolean)
{
org.wildfly.common._private.CommonMessages v3;
java.lang.AssertionError v2;
java.lang.String v4;
boolean v0, v1;
v0 := @parameter0: boolean;
v1 = <org.wildfly.common.Assert: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
if v0 == 0 goto label1;
v2 = new java.lang.AssertionError;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.String expectedBoolean(boolean)>(v0);
specialinvoke v2.<java.lang.AssertionError: void <init>(java.lang.Object)>(v4);
throw v2;
label1:
return v0;
}
public static java.lang.IllegalStateException unreachableCode()
{
java.lang.IllegalStateException v1;
org.wildfly.common._private.CommonMessages v0;
v0 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v1 = interfaceinvoke v0.<org.wildfly.common._private.CommonMessages: java.lang.IllegalStateException unreachableCode()>();
return v1;
}
public static java.lang.IllegalStateException impossibleSwitchCase(java.lang.Object)
{
java.lang.IllegalStateException v2;
java.lang.Object v0;
org.wildfly.common._private.CommonMessages v1;
v0 := @parameter0: java.lang.Object;
staticinvoke <org.wildfly.common.Assert: void checkNotNullParamChecked(java.lang.String,java.lang.Object)>("obj", v0);
v1 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v2 = interfaceinvoke v1.<org.wildfly.common._private.CommonMessages: java.lang.IllegalStateException impossibleSwitchCase(java.lang.Object)>(v0);
return v2;
}
public static java.lang.IllegalStateException impossibleSwitchCase(int)
{
java.lang.IllegalStateException v3;
org.wildfly.common._private.CommonMessages v1;
int v0;
java.lang.Integer v2;
v0 := @parameter0: int;
v1 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v0);
v3 = interfaceinvoke v1.<org.wildfly.common._private.CommonMessages: java.lang.IllegalStateException impossibleSwitchCase(java.lang.Object)>(v2);
return v3;
}
public static java.lang.IllegalStateException impossibleSwitchCase(long)
{
java.lang.IllegalStateException v3;
java.lang.Long v2;
org.wildfly.common._private.CommonMessages v1;
long v0;
v0 := @parameter0: long;
v1 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v0);
v3 = interfaceinvoke v1.<org.wildfly.common._private.CommonMessages: java.lang.IllegalStateException impossibleSwitchCase(java.lang.Object)>(v2);
return v3;
}
public static java.lang.UnsupportedOperationException unsupported()
{
java.lang.Throwable v0;
java.lang.UnsupportedOperationException v6;
java.lang.StackTraceElement[] v1;
org.wildfly.common._private.CommonMessages v3;
java.lang.StackTraceElement v2;
java.lang.String v4, v5;
v0 = new java.lang.Throwable;
specialinvoke v0.<java.lang.Throwable: void <init>()>();
v1 = virtualinvoke v0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();
v2 = v1[1];
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = virtualinvoke v2.<java.lang.StackTraceElement: java.lang.String getMethodName()>();
v5 = virtualinvoke v2.<java.lang.StackTraceElement: java.lang.String getClassName()>();
v6 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.UnsupportedOperationException unsupported(java.lang.String,java.lang.String)>(v4, v5);
return v6;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lorg/wildfly/common/Assert;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<org.wildfly.common.Assert: boolean $assertionsDisabled> = v2;
return;
}
}