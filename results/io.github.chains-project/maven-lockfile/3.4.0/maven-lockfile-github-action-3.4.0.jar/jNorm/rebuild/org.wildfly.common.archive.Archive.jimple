public final class org.wildfly.common.archive.Archive extends java.lang.Object implements java.io.Closeable
{
public static final int GP_ENCRYPTED;
public static final int GP_IMPLODE_8K_DICTIONARY;
public static final int GP_IMPLODE_3_TREES;
public static final int GP_DEFLATE_COMP_OPT_MASK;
public static final int GP_DEFLATE_COMP_OPT_NORMAL;
public static final int GP_DEFLATE_COMP_OPT_MAXIMUM;
public static final int GP_DEFLATE_COMP_OPT_FAST;
public static final int GP_DEFLATE_COMP_OPT_SUPER_FAST;
public static final int GP_LZMA_EOS_USED;
public static final int GP_LATE_SIZES;
public static final int GP_COMPRESSED_PATCHED;
public static final int GP_STRONG_ENCRYPTION;
public static final int GP_UTF_8;
public static final int GP_CD_MASKED;
public static final int METHOD_STORED;
public static final int METHOD_SHRINK;
public static final int METHOD_REDUCE_1;
public static final int METHOD_REDUCE_2;
public static final int METHOD_REDUCE_3;
public static final int METHOD_REDUCE_4;
public static final int METHOD_IMPLODE;
public static final int METHOD_DEFLATE;
public static final int METHOD_DEFLATE64;
public static final int METHOD_BZIP2;
public static final int METHOD_LZMA;
public static final int MADE_BY_MS_DOS;
public static final int MADE_BY_UNIX;
public static final int MADE_BY_NTFS;
public static final int MADE_BY_OS_X;
public static final int SIG_LH;
public static final int LH_SIGNATURE;
public static final int LH_MIN_VERSION;
public static final int LH_GP_BITS;
public static final int LH_COMP_METHOD;
public static final int LH_MOD_TIME;
public static final int LH_MOD_DATE;
public static final int LH_CRC_32;
public static final int LH_COMPRESSED_SIZE;
public static final int LH_UNCOMPRESSED_SIZE;
public static final int LH_FILE_NAME_LENGTH;
public static final int LH_EXTRA_LENGTH;
public static final int LH_END;
public static final int SIG_DD;
public static final int DD_SIGNATURE;
public static final int DD_CRC_32;
public static final int DD_COMPRESSED_SIZE;
public static final int DD_UNCOMPRESSED_SIZE;
public static final int DD_END;
public static final int DD_ZIP64_COMPRESSED_SIZE;
public static final int DD_ZIP64_UNCOMPRESSED_SIZE;
public static final int DD_ZIP64_END;
public static final int SIG_CDE;
public static final int CDE_SIGNATURE;
public static final int CDE_VERSION_MADE_BY;
public static final int CDE_VERSION_NEEDED;
public static final int CDE_GP_BITS;
public static final int CDE_COMP_METHOD;
public static final int CDE_MOD_TIME;
public static final int CDE_MOD_DATE;
public static final int CDE_CRC_32;
public static final int CDE_COMPRESSED_SIZE;
public static final int CDE_UNCOMPRESSED_SIZE;
public static final int CDE_FILE_NAME_LENGTH;
public static final int CDE_EXTRA_LENGTH;
public static final int CDE_COMMENT_LENGTH;
public static final int CDE_FIRST_DISK_NUMBER;
public static final int CDE_INTERNAL_ATTRIBUTES;
public static final int CDE_EXTERNAL_ATTRIBUTES;
public static final int CDE_LOCAL_HEADER_OFFSET;
public static final int CDE_END;
public static final int SIG_EOCD;
public static final int EOCD_SIGNATURE;
public static final int EOCD_DISK_NUMBER;
public static final int EOCD_CD_FIRST_DISK_NUMBER;
public static final int EOCD_CDE_COUNT_THIS_DISK;
public static final int EOCD_CDE_COUNT_ALL;
public static final int EOCD_CD_SIZE;
public static final int EOCD_CD_START_OFFSET;
public static final int EOCD_COMMENT_LENGTH;
public static final int EOCD_END;
public static final int EXT_ID_ZIP64;
public static final int ZIP64_UNCOMPRESSED_SIZE;
public static final int ZIP64_COMPRESSED_SIZE;
public static final int ZIP64_LOCAL_HEADER_OFFSET;
public static final int ZIP64_FIRST_DISK_NUMBER;
public static final int ZIP64_END;
public static final int EXT_ID_UNIX;
public static final int UNIX_ACCESS_TIME;
public static final int UNIX_MODIFIED_TIME;
public static final int UNIX_UID;
public static final int UNIX_GID;
public static final int UNIX_END;
public static final int UNIX_DEV_MAJOR;
public static final int UNIX_DEV_MINOR;
public static final int UNIX_DEV_END;
public static final int SIG_EOCD_ZIP64;
public static final int EOCD_ZIP64_SIGNATURE;
public static final int EOCD_ZIP64_SIZE;
public static final int EOCD_ZIP64_VERSION_MADE_BY;
public static final int EOCD_ZIP64_VERSION_NEEDED;
public static final int EOCD_ZIP64_DISK_NUMBER;
public static final int EOCD_ZIP64_CD_FIRST_DISK_NUMBER;
public static final int EOCD_ZIP64_CDE_COUNT_THIS_DISK;
public static final int EOCD_ZIP64_CDE_COUNT_ALL;
public static final int EOCD_ZIP64_CD_SIZE;
public static final int EOCD_ZIP64_CD_START_OFFSET;
public static final int EOCD_ZIP64_END;
public static final int SIG_EOCDL_ZIP64;
public static final int EOCDL_ZIP64_SIGNATURE;
public static final int EOCDL_ZIP64_EOCD_DISK_NUMBER;
public static final int EOCDL_ZIP64_EOCD_OFFSET;
public static final int EOCDL_ZIP64_DISK_COUNT;
public static final int EOCDL_ZIP64_END;
private static final int BUF_SIZE_MAX;
private static final int BUF_SHIFT;
private static final int BUF_SIZE_MASK;
private final java.nio.ByteBuffer[] bufs;
private final long offset;
private final long length;
private final long cd;
private final org.wildfly.common.archive.Index index;
private static final java.nio.ByteBuffer EMPTY_BUF;
private void <init>(java.nio.ByteBuffer[], long, long, long, org.wildfly.common.archive.Index)
{
java.nio.ByteBuffer[] v1;
org.wildfly.common.archive.Archive v0;
org.wildfly.common.archive.Index v5;
long v2, v3, v4;
v0 := @this: org.wildfly.common.archive.Archive;
v1 := @parameter0: java.nio.ByteBuffer[];
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: long;
v5 := @parameter4: org.wildfly.common.archive.Index;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs> = v1;
v0.<org.wildfly.common.archive.Archive: long offset> = v2;
v0.<org.wildfly.common.archive.Archive: long length> = v3;
v0.<org.wildfly.common.archive.Archive: long cd> = v4;
v0.<org.wildfly.common.archive.Archive: org.wildfly.common.archive.Index index> = v5;
return;
}
public static org.wildfly.common.archive.Archive open(java.nio.file.Path) throws java.io.IOException
{
java.lang.Throwable v23;
long v10, v4, v5, v7;
java.nio.channels.FileChannel$MapMode v14, v18;
byte v12;
java.nio.file.OpenOption[] v1;
int v11, v13, v6, v8;
java.nio.file.Path v0;
java.nio.ByteBuffer[] v9;
org.wildfly.common.archive.Archive v22;
java.nio.file.StandardOpenOption v2;
java.nio.ByteOrder v16, v20;
java.nio.channels.FileChannel v3;
java.nio.MappedByteBuffer v15, v17, v19, v21;
v0 := @parameter0: java.nio.file.Path;
v1 = newarray (java.nio.file.OpenOption)[1];
v2 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption READ>;
v1[0] = v2;
v3 = staticinvoke <java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.nio.file.OpenOption[])>(v0, v1);
label1:
v4 = virtualinvoke v3.<java.nio.channels.FileChannel: long size()>();
v5 = v4 + 1073741823L;
v6 = <org.wildfly.common.archive.Archive: int BUF_SHIFT>;
v7 = v5 >> v6;
v8 = staticinvoke <java.lang.Math: int toIntExact(long)>(v7);
v9 = newarray (java.nio.ByteBuffer)[v8];
v10 = 0L;
v11 = 0;
label2:
v12 = v4 cmp 1073741823L;
if v12 <= 0 goto label3;
v13 = v11;
v11 = v11 + 1;
v14 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;
v15 = virtualinvoke v3.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>(v14, v10, 1073741824L);
v16 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;
v17 = virtualinvoke v15.<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer order(java.nio.ByteOrder)>(v16);
v9[v13] = v17;
v4 = v4 - 1073741824L;
v10 = v10 + 1073741824L;
goto label2;
label3:
v18 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;
v19 = virtualinvoke v3.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>(v18, v10, v4);
v20 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;
v21 = virtualinvoke v19.<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer order(java.nio.ByteOrder)>(v20);
v9[v11] = v21;
v22 = staticinvoke <org.wildfly.common.archive.Archive: org.wildfly.common.archive.Archive open(java.nio.ByteBuffer[])>(v9);
label4:
virtualinvoke v3.<java.nio.channels.FileChannel: void close()>();
return v22;
label5:
v23 := @caughtexception;
throw v23;
catch java.lang.Throwable from label1 to label4 with label5;
}
public static org.wildfly.common.archive.Archive open(java.nio.ByteBuffer) throws java.io.IOException
{
java.nio.ByteBuffer[] v5;
java.nio.ByteOrder v1, v2, v4;
org.wildfly.common.archive.Archive v6;
java.nio.ByteBuffer v0, v3;
v0 := @parameter0: java.nio.ByteBuffer;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("buf", v0);
v1 = virtualinvoke v0.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();
v2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;
if v1 != v2 goto label1;
v3 = virtualinvoke v0.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();
v4 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;
v0 = virtualinvoke v3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>(v4);
label1:
v5 = newarray (java.nio.ByteBuffer)[1];
v5[0] = v0;
v6 = staticinvoke <org.wildfly.common.archive.Archive: org.wildfly.common.archive.Archive open(java.nio.ByteBuffer[])>(v5);
return v6;
}
static org.wildfly.common.archive.Archive open(java.nio.ByteBuffer[]) throws java.io.IOException
{
java.nio.ByteBuffer[] v0;
org.wildfly.common.archive.Archive v2;
long v1;
v0 := @parameter0: java.nio.ByteBuffer[];
v1 = staticinvoke <org.wildfly.common.archive.Archive: long capacity(java.nio.ByteBuffer[])>(v0);
v2 = staticinvoke <org.wildfly.common.archive.Archive: org.wildfly.common.archive.Archive open(java.nio.ByteBuffer[],long,long)>(v0, 0L, v1);
return v2;
}
static org.wildfly.common.archive.Archive open(java.nio.ByteBuffer[], long, long) throws java.io.IOException
{
org.wildfly.common.archive.TinyIndex v55;
byte v39, v43, v44, v48, v52, v54, v57, v6, v7;
org.wildfly.common.archive.LargeIndex v58;
long v1, v10, v12, v13, v15, v16, v18, v19, v2, v22, v23, v24, v25, v27, v28, v3, v30, v31, v34, v35, v36, v37, v38, v4, v40, v41, v42, v45, v46, v49, v5, v50, v51, v61, v63, v64, v67, v70, v71, v72, v74, v75, v76, v78, v79, v80, v9;
java.io.IOException v21, v33, v53, v66, v8;
java.nio.ByteBuffer[] v0;
org.wildfly.common.archive.Index v56;
org.wildfly.common.archive.HugeIndex v59;
int v11, v14, v17, v20, v26, v29, v32, v47, v60, v62, v65, v68, v69, v73, v77, v81;
org.wildfly.common.archive.Archive v82;
v0 := @parameter0: java.nio.ByteBuffer[];
v1 := @parameter1: long;
v2 := @parameter2: long;
v3 = v2 - 22L;
label01:
v4 = v1 + v3;
v5 = staticinvoke <org.wildfly.common.archive.Archive: long getUnsignedInt(java.nio.ByteBuffer[],long)>(v0, v4);
v6 = v5 cmp 101010256L;
if v6 == 0 goto label03;
v7 = v3 cmp 0L;
if v7 != 0 goto label02;
v8 = new java.io.IOException;
specialinvoke v8.<java.io.IOException: void <init>(java.lang.String)>("Invalid archive");
throw v8;
label02:
v3 = v3 - 1L;
goto label01;
label03:
v9 = v1 + v3;
v10 = v9 + 10L;
v11 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v0, v10);
v12 = v1 + v3;
v13 = v12 + 6L;
v14 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v0, v13);
if v14 != 0 goto label04;
v15 = v1 + v3;
v16 = v15 + 4L;
v17 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v0, v16);
if v17 != 0 goto label04;
v18 = v1 + v3;
v19 = v18 + 8L;
v20 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v0, v19);
if v11 == v20 goto label05;
label04:
v21 = new java.io.IOException;
specialinvoke v21.<java.io.IOException: void <init>(java.lang.String)>("Multi-disk archives are not supported");
throw v21;
label05:
v22 = v3 - 20L;
v23 = -1L;
v24 = v1 + v22;
v25 = v24 + 0L;
v26 = staticinvoke <org.wildfly.common.archive.Archive: int getInt(java.nio.ByteBuffer[],long)>(v0, v25);
if v26 != 117853008 goto label08;
v27 = v1 + v22;
v28 = v27 + 16L;
v29 = staticinvoke <org.wildfly.common.archive.Archive: int getInt(java.nio.ByteBuffer[],long)>(v0, v28);
if v29 != 1 goto label06;
v30 = v1 + v22;
v31 = v30 + 4L;
v32 = staticinvoke <org.wildfly.common.archive.Archive: int getInt(java.nio.ByteBuffer[],long)>(v0, v31);
if v32 == 0 goto label07;
label06:
v33 = new java.io.IOException;
specialinvoke v33.<java.io.IOException: void <init>(java.lang.String)>("Multi-disk archives are not supported");
throw v33;
label07:
v34 = v1 + v22;
v35 = v34 + 8L;
v23 = staticinvoke <org.wildfly.common.archive.Archive: long getLong(java.nio.ByteBuffer[],long)>(v0, v35);
v36 = v1 + v23;
v37 = v36 + 0L;
v38 = staticinvoke <org.wildfly.common.archive.Archive: long getUnsignedInt(java.nio.ByteBuffer[],long)>(v0, v37);
v39 = v38 cmp 101075792L;
if v39 == 0 goto label08;
v23 = -1L;
label08:
v40 = v1 + v3;
v41 = v40 + 16L;
v42 = staticinvoke <org.wildfly.common.archive.Archive: long getUnsignedInt(java.nio.ByteBuffer[],long)>(v0, v41);
v43 = v42 cmp 4294967295L;
if v43 != 0 goto label09;
v44 = v23 cmp -1L;
if v44 == 0 goto label09;
v45 = v1 + v23;
v46 = v45 + 44L;
v42 = staticinvoke <org.wildfly.common.archive.Archive: long getLong(java.nio.ByteBuffer[],long)>(v0, v46);
label09:
v47 = (int) 65535;
if v11 != v47 goto label10;
v48 = v23 cmp -1L;
if v48 == 0 goto label10;
v49 = v1 + v23;
v50 = v49 + 28L;
v51 = staticinvoke <org.wildfly.common.archive.Archive: long getUnsignedInt(java.nio.ByteBuffer[],long)>(v0, v50);
v52 = v51 cmp 134217727L;
if v52 <= 0 goto label10;
v53 = new java.io.IOException;
specialinvoke v53.<java.io.IOException: void <init>(java.lang.String)>("Archive has too many entries");
throw v53;
label10:
v54 = v2 cmp 65534L;
if v54 > 0 goto label11;
v55 = new org.wildfly.common.archive.TinyIndex;
specialinvoke v55.<org.wildfly.common.archive.TinyIndex: void <init>(int)>(v51);
v56 = v55;
goto label13;
label11:
v57 = v2 cmp 68719476734L;
if v57 > 0 goto label12;
v58 = new org.wildfly.common.archive.LargeIndex;
specialinvoke v58.<org.wildfly.common.archive.LargeIndex: void <init>(int)>(v51);
v56 = v58;
goto label13;
label12:
v59 = new org.wildfly.common.archive.HugeIndex;
specialinvoke v59.<org.wildfly.common.archive.HugeIndex: void <init>(int)>(v51);
v56 = v59;
label13:
v60 = virtualinvoke v56.<org.wildfly.common.archive.Index: int getMask()>();
v61 = v42;
v62 = 0;
label14:
if v62 >= v51 goto label16;
v63 = v1 + v61;
v64 = v63 + 0L;
v65 = staticinvoke <org.wildfly.common.archive.Archive: int getInt(java.nio.ByteBuffer[],long)>(v0, v64);
if v65 == 33639248 goto label15;
v66 = new java.io.IOException;
specialinvoke v66.<java.io.IOException: void <init>(java.lang.String)>("Archive appears to be corrupted");
throw v66;
label15:
v67 = v1 + v61;
v68 = staticinvoke <org.wildfly.common.archive.Archive: int getHashCodeOfEntry(java.nio.ByteBuffer[],long)>(v0, v67);
v69 = v68 & v60;
virtualinvoke v56.<org.wildfly.common.archive.Index: void put(int,long)>(v69, v61);
v70 = v61 + 46L;
v71 = v1 + v61;
v72 = v71 + 28L;
v73 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v0, v72);
v74 = v70 + v73;
v75 = v1 + v61;
v76 = v75 + 30L;
v77 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v0, v76);
v78 = v74 + v77;
v79 = v1 + v61;
v80 = v79 + 32L;
v81 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v0, v80);
v61 = v78 + v81;
v62 = v62 + 1;
goto label14;
label16:
v82 = new org.wildfly.common.archive.Archive;
specialinvoke v82.<org.wildfly.common.archive.Archive: void <init>(java.nio.ByteBuffer[],long,long,long,org.wildfly.common.archive.Index)>(v0, v1, v2, v42, v56);
return v82;
}
private static java.lang.String getNameOfEntry(java.nio.ByteBuffer[], long)
{
byte[] v10;
long v1, v14, v2, v3, v5;
java.nio.charset.Charset v11;
int v13, v15, v4, v6, v7;
java.lang.String v17, v9;
boolean v8;
java.nio.ByteBuffer[] v0;
char v16;
char[] v12;
v0 := @parameter0: java.nio.ByteBuffer[];
v1 := @parameter1: long;
v2 = v1 + 46L;
v3 = v1 + 28L;
v4 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v0, v3);
v5 = v1 + 8L;
v6 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v0, v5);
v7 = v6 & 2048;
if v7 == 0 goto label1;
v8 = 1;
goto label2;
label1:
v8 = 0;
label2:
if v8 == 0 goto label3;
v9 = new java.lang.String;
v10 = staticinvoke <org.wildfly.common.archive.Archive: byte[] getBytes(java.nio.ByteBuffer[],long,int)>(v0, v2, v4);
v11 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
specialinvoke v9.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(v10, v11);
return v9;
label3:
v12 = newarray (char)[v4];
v13 = 0;
label4:
if v13 >= v4 goto label5;
v14 = v2 + v13;
v15 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedByte(java.nio.ByteBuffer[],long)>(v0, v14);
v16 = staticinvoke <org.wildfly.common.archive.Archive$Cp437: char charFor(int)>(v15);
v12[v13] = v16;
v13 = v13 + 1;
goto label4;
label5:
v17 = new java.lang.String;
specialinvoke v17.<java.lang.String: void <init>(char[])>(v12);
return v17;
}
private static int getHashCodeOfEntry(java.nio.ByteBuffer[], long)
{
long v1, v11, v2, v20, v25, v3, v5;
int v10, v12, v14, v16, v17, v19, v21, v22, v23, v24, v26, v4, v6, v7, v9;
boolean v13, v8;
java.nio.ByteBuffer[] v0;
char v15, v18, v27;
v0 := @parameter0: java.nio.ByteBuffer[];
v1 := @parameter1: long;
v2 = v1 + 46L;
v3 = v1 + 28L;
v4 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v0, v3);
v5 = v1 + 8L;
v6 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v0, v5);
v7 = v6 & 2048;
if v7 == 0 goto label1;
v8 = 1;
goto label2;
label1:
v8 = 0;
label2:
v9 = 0;
if v8 == 0 goto label6;
v10 = 0;
label3:
if v10 >= v4 goto label8;
v11 = v2 + v10;
v12 = staticinvoke <org.wildfly.common.archive.Archive$Utf8: int codePointAt(java.nio.ByteBuffer[],long)>(v0, v11);
v13 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(v12);
if v13 == 0 goto label4;
v14 = v9 * 31;
v15 = staticinvoke <java.lang.Character: char highSurrogate(int)>(v12);
v16 = v14 + v15;
v17 = v16 * 31;
v18 = staticinvoke <java.lang.Character: char lowSurrogate(int)>(v12);
v9 = v17 + v18;
goto label5;
label4:
v19 = v9 * 31;
v9 = v19 + v12;
label5:
v20 = v2 + v10;
v21 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedByte(java.nio.ByteBuffer[],long)>(v0, v20);
v22 = staticinvoke <org.wildfly.common.archive.Archive$Utf8: int getByteCount(int)>(v21);
v10 = v10 + v22;
goto label3;
label6:
v23 = 0;
label7:
if v23 >= v4 goto label8;
v24 = v9 * 31;
v25 = v2 + v23;
v26 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedByte(java.nio.ByteBuffer[],long)>(v0, v25);
v27 = staticinvoke <org.wildfly.common.archive.Archive$Cp437: char charFor(int)>(v26);
v9 = v24 + v27;
v23 = v23 + 1;
goto label7;
label8:
return v9;
}
public long getFirstEntryHandle()
{
org.wildfly.common.archive.Archive v0;
long v1;
v0 := @this: org.wildfly.common.archive.Archive;
v1 = v0.<org.wildfly.common.archive.Archive: long cd>;
return v1;
}
public long getNextEntryHandle(long)
{
long v1, v10, v11, v12, v14, v15, v18, v19, v2, v20, v4, v5, v6, v8;
byte v16;
int v13, v21, v7;
java.nio.ByteBuffer[] v17, v3, v9;
org.wildfly.common.archive.Archive v0;
v0 := @this: org.wildfly.common.archive.Archive;
v1 := @parameter0: long;
v2 = v1 + 46L;
v3 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v4 = v0.<org.wildfly.common.archive.Archive: long offset>;
v5 = v4 + v1;
v6 = v5 + 28L;
v7 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v3, v6);
v8 = v2 + v7;
v9 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v10 = v0.<org.wildfly.common.archive.Archive: long offset>;
v11 = v10 + v1;
v12 = v11 + 30L;
v13 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v9, v12);
v14 = v8 + v13;
v15 = v0.<org.wildfly.common.archive.Archive: long length>;
v16 = v14 cmp v15;
if v16 >= 0 goto label1;
v17 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v18 = v0.<org.wildfly.common.archive.Archive: long offset>;
v19 = v18 + v14;
v20 = v19 + 0L;
v21 = staticinvoke <org.wildfly.common.archive.Archive: int getInt(java.nio.ByteBuffer[],long)>(v17, v20);
if v21 == 33639248 goto label2;
label1:
return -1L;
label2:
return v14;
}
public long getEntryHandle(java.lang.String)
{
org.wildfly.common.archive.Archive v0;
org.wildfly.common.archive.Index v2, v6;
long v9;
byte v10;
int v3, v4, v5, v7, v8;
java.lang.String v1;
boolean v11;
v0 := @this: org.wildfly.common.archive.Archive;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.wildfly.common.archive.Archive: org.wildfly.common.archive.Index index>;
v3 = virtualinvoke v2.<org.wildfly.common.archive.Index: int getMask()>();
v4 = virtualinvoke v1.<java.lang.String: int hashCode()>();
v5 = 0;
label1:
if v5 >= v3 goto label4;
v6 = v0.<org.wildfly.common.archive.Archive: org.wildfly.common.archive.Index index>;
v7 = v4 + v5;
v8 = v7 & v3;
v9 = virtualinvoke v6.<org.wildfly.common.archive.Index: long get(int)>(v8);
v10 = v9 cmp -1L;
if v10 != 0 goto label2;
return -1L;
label2:
v11 = virtualinvoke v0.<org.wildfly.common.archive.Archive: boolean entryNameEquals(long,java.lang.String)>(v9, v1);
if v11 == 0 goto label3;
return v9;
label3:
v5 = v5 + 1;
goto label1;
label4:
return -1L;
}
public boolean entryNameEquals(long, java.lang.String)
{
byte v19, v32;
boolean v15, v33, v44;
java.nio.ByteBuffer[] v20, v26, v36, v4, v9;
long v1, v10, v11, v12, v17, v21, v22, v23, v27, v28, v29, v3, v37, v38, v39, v40, v5, v6, v7;
int v13, v14, v16, v18, v24, v25, v30, v31, v34, v35, v41, v43, v8;
java.lang.String v2;
org.wildfly.common.archive.Archive v0;
char v42;
v0 := @this: org.wildfly.common.archive.Archive;
v1 := @parameter0: long;
v2 := @parameter1: java.lang.String;
v3 = v1 + 46L;
v4 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v5 = v0.<org.wildfly.common.archive.Archive: long offset>;
v6 = v5 + v1;
v7 = v6 + 28L;
v8 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v4, v7);
v9 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v10 = v0.<org.wildfly.common.archive.Archive: long offset>;
v11 = v10 + v1;
v12 = v11 + 8L;
v13 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v9, v12);
v14 = v13 & 2048;
if v14 == 0 goto label01;
v15 = 1;
goto label02;
label01:
v15 = 0;
label02:
v16 = virtualinvoke v2.<java.lang.String: int length()>();
if v15 == 0 goto label08;
v17 = 0L;
v18 = 0;
label03:
v19 = v17 cmp v8;
if v19 >= 0 goto label05;
if v18 >= v16 goto label05;
v20 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v21 = v0.<org.wildfly.common.archive.Archive: long offset>;
v22 = v21 + v3;
v23 = v22 + v17;
v24 = staticinvoke <org.wildfly.common.archive.Archive$Utf8: int codePointAt(java.nio.ByteBuffer[],long)>(v20, v23);
v25 = virtualinvoke v2.<java.lang.String: int codePointAt(int)>(v18);
if v24 == v25 goto label04;
return 0;
label04:
v26 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v27 = v0.<org.wildfly.common.archive.Archive: long offset>;
v28 = v27 + v3;
v29 = v28 + v17;
v30 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedByte(java.nio.ByteBuffer[],long)>(v26, v29);
v31 = staticinvoke <org.wildfly.common.archive.Archive$Utf8: int getByteCount(int)>(v30);
v17 = v17 + v31;
v18 = virtualinvoke v2.<java.lang.String: int offsetByCodePoints(int,int)>(v18, 1);
goto label03;
label05:
v32 = v17 cmp v8;
if v32 != 0 goto label06;
if v18 != v16 goto label06;
v33 = 1;
goto label07;
label06:
v33 = 0;
label07:
return v33;
label08:
v34 = 0;
v35 = 0;
label09:
if v34 >= v8 goto label11;
if v35 >= v16 goto label11;
v36 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v37 = v0.<org.wildfly.common.archive.Archive: long offset>;
v38 = v37 + v34;
v39 = v38 + v1;
v40 = v39 + 46L;
v41 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedByte(java.nio.ByteBuffer[],long)>(v36, v40);
v42 = staticinvoke <org.wildfly.common.archive.Archive$Cp437: char charFor(int)>(v41);
v43 = virtualinvoke v2.<java.lang.String: int codePointAt(int)>(v35);
if v42 == v43 goto label10;
return 0;
label10:
v34 = v34 + 1;
v35 = virtualinvoke v2.<java.lang.String: int offsetByCodePoints(int,int)>(v35, 1);
goto label09;
label11:
if v34 != v8 goto label12;
if v35 != v16 goto label12;
v44 = 1;
goto label13;
label12:
v44 = 0;
label13:
return v44;
}
private long getLocalHeader(long)
{
java.nio.ByteBuffer[] v10, v2;
org.wildfly.common.archive.Archive v0;
long v1, v11, v12, v13, v3, v4, v5, v6, v8;
byte v7, v9;
v0 := @this: org.wildfly.common.archive.Archive;
v1 := @parameter0: long;
v2 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v3 = v0.<org.wildfly.common.archive.Archive: long offset>;
v4 = v3 + v1;
v5 = v4 + 42L;
v6 = staticinvoke <org.wildfly.common.archive.Archive: long getUnsignedInt(java.nio.ByteBuffer[],long)>(v2, v5);
v7 = v6 cmp 4294967295L;
if v7 != 0 goto label1;
v8 = specialinvoke v0.<org.wildfly.common.archive.Archive: long getExtraRecord(long,int)>(v1, 1);
v9 = v8 cmp -1L;
if v9 == 0 goto label1;
v10 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v11 = v0.<org.wildfly.common.archive.Archive: long offset>;
v12 = v11 + v8;
v13 = v12 + 16L;
v6 = staticinvoke <org.wildfly.common.archive.Archive: long getLong(java.nio.ByteBuffer[],long)>(v10, v13);
label1:
return v6;
}
public java.lang.String getEntryName(long)
{
java.nio.ByteBuffer[] v2;
org.wildfly.common.archive.Archive v0;
long v1;
java.lang.String v3;
v0 := @this: org.wildfly.common.archive.Archive;
v1 := @parameter0: long;
v2 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v3 = staticinvoke <org.wildfly.common.archive.Archive: java.lang.String getNameOfEntry(java.nio.ByteBuffer[],long)>(v2, v1);
return v3;
}
public java.nio.ByteBuffer getEntryContents(long) throws java.io.IOException
{
java.lang.Throwable v28;
java.util.zip.Inflater v21;
long v1, v10, v11, v15, v18, v19, v2, v23, v24, v3, v7, v9;
java.nio.ByteBuffer v20, v25;
byte v4, v5;
int v12, v13, v16;
java.util.zip.DataFormatException v26;
java.nio.ByteBuffer[] v17, v22, v8;
org.wildfly.common.archive.Archive v0;
java.io.IOException v14, v27, v29, v6;
v0 := @this: org.wildfly.common.archive.Archive;
v1 := @parameter0: long;
v2 = virtualinvoke v0.<org.wildfly.common.archive.Archive: long getUncompressedSize(long)>(v1);
v3 = virtualinvoke v0.<org.wildfly.common.archive.Archive: long getCompressedSize(long)>(v1);
v4 = v2 cmp 268435456L;
if v4 > 0 goto label01;
v5 = v3 cmp 268435456L;
if v5 <= 0 goto label02;
label01:
v6 = new java.io.IOException;
specialinvoke v6.<java.io.IOException: void <init>(java.lang.String)>("Entry is too large to read into RAM");
throw v6;
label02:
v7 = specialinvoke v0.<org.wildfly.common.archive.Archive: long getLocalHeader(long)>(v1);
v8 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v9 = v0.<org.wildfly.common.archive.Archive: long offset>;
v10 = v9 + v7;
v11 = v10 + 6L;
v12 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v8, v11);
v13 = v12 & 65;
if v13 == 0 goto label03;
v14 = new java.io.IOException;
specialinvoke v14.<java.io.IOException: void <init>(java.lang.String)>("Cannot read encrypted entries");
throw v14;
label03:
v15 = specialinvoke v0.<org.wildfly.common.archive.Archive: long getDataOffset(long)>(v7);
v16 = specialinvoke v0.<org.wildfly.common.archive.Archive: int getCompressionMethod(long)>(v1);
lookupswitch(v16)
{
case 0: goto label04;
case 8: goto label05;
default: goto label10;
};
label04:
v17 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v18 = v0.<org.wildfly.common.archive.Archive: long offset>;
v19 = v18 + v15;
v20 = staticinvoke <org.wildfly.common.archive.Archive: java.nio.ByteBuffer bufferOf(java.nio.ByteBuffer[],long,int)>(v17, v19, v2);
return v20;
label05:
v21 = new java.util.zip.Inflater;
specialinvoke v21.<java.util.zip.Inflater: void <init>(boolean)>(1);
label06:
v22 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v23 = v0.<org.wildfly.common.archive.Archive: long offset>;
v24 = v23 + v15;
v25 = staticinvoke <org.wildfly.common.archive.JDKSpecific: java.nio.ByteBuffer inflate(java.util.zip.Inflater,java.nio.ByteBuffer[],long,int,int)>(v21, v22, v24, v3, v2);
label07:
virtualinvoke v21.<java.util.zip.Inflater: void end()>();
return v25;
label08:
v26 := @caughtexception;
v27 = new java.io.IOException;
specialinvoke v27.<java.io.IOException: void <init>(java.lang.Throwable)>(v26);
throw v27;
label09:
v28 := @caughtexception;
virtualinvoke v21.<java.util.zip.Inflater: void end()>();
throw v28;
label10:
v29 = new java.io.IOException;
specialinvoke v29.<java.io.IOException: void <init>(java.lang.String)>("Unsupported compression scheme");
throw v29;
catch java.util.zip.DataFormatException from label06 to label07 with label08;
catch java.lang.Throwable from label06 to label07 with label09;
}
private long getDataOffset(long)
{
java.nio.ByteBuffer[] v3, v9;
org.wildfly.common.archive.Archive v0;
long v1, v10, v11, v12, v14, v2, v4, v5, v6, v8;
int v13, v7;
v0 := @this: org.wildfly.common.archive.Archive;
v1 := @parameter0: long;
v2 = v1 + 30L;
v3 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v4 = v0.<org.wildfly.common.archive.Archive: long offset>;
v5 = v4 + v1;
v6 = v5 + 26L;
v7 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v3, v6);
v8 = v2 + v7;
v9 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v10 = v0.<org.wildfly.common.archive.Archive: long offset>;
v11 = v10 + v1;
v12 = v11 + 28L;
v13 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v9, v12);
v14 = v8 + v13;
return v14;
}
public java.io.InputStream getEntryStream(long) throws java.io.IOException
{
java.util.zip.InflaterInputStream v17;
long v1, v11, v15, v16, v2, v20, v21, v3, v5, v6, v7;
int v12, v8, v9;
org.wildfly.common.archive.ByteBufferInputStream v13, v18;
java.nio.ByteBuffer[] v14, v19, v4;
org.wildfly.common.archive.Archive v0;
java.io.IOException v10, v22;
v0 := @this: org.wildfly.common.archive.Archive;
v1 := @parameter0: long;
v2 = virtualinvoke v0.<org.wildfly.common.archive.Archive: long getCompressedSize(long)>(v1);
v3 = specialinvoke v0.<org.wildfly.common.archive.Archive: long getLocalHeader(long)>(v1);
v4 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v5 = v0.<org.wildfly.common.archive.Archive: long offset>;
v6 = v5 + v3;
v7 = v6 + 6L;
v8 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v4, v7);
v9 = v8 & 65;
if v9 == 0 goto label1;
v10 = new java.io.IOException;
specialinvoke v10.<java.io.IOException: void <init>(java.lang.String)>("Cannot read encrypted entries");
throw v10;
label1:
v11 = specialinvoke v0.<org.wildfly.common.archive.Archive: long getDataOffset(long)>(v3);
v12 = specialinvoke v0.<org.wildfly.common.archive.Archive: int getCompressionMethod(long)>(v1);
lookupswitch(v12)
{
case 0: goto label2;
case 8: goto label3;
default: goto label4;
};
label2:
v13 = new org.wildfly.common.archive.ByteBufferInputStream;
v14 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v15 = v0.<org.wildfly.common.archive.Archive: long offset>;
v16 = v15 + v11;
specialinvoke v13.<org.wildfly.common.archive.ByteBufferInputStream: void <init>(java.nio.ByteBuffer[],long,long)>(v14, v16, v2);
return v13;
label3:
v17 = new java.util.zip.InflaterInputStream;
v18 = new org.wildfly.common.archive.ByteBufferInputStream;
v19 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v20 = v0.<org.wildfly.common.archive.Archive: long offset>;
v21 = v20 + v11;
specialinvoke v18.<org.wildfly.common.archive.ByteBufferInputStream: void <init>(java.nio.ByteBuffer[],long,long)>(v19, v21, v2);
specialinvoke v17.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>(v18);
return v17;
label4:
v22 = new java.io.IOException;
specialinvoke v22.<java.io.IOException: void <init>(java.lang.String)>("Unsupported compression scheme");
throw v22;
}
public org.wildfly.common.archive.Archive getNestedArchive(long) throws java.io.IOException
{
long v1, v10, v13, v16, v17, v2, v21, v22, v4, v5, v6;
java.nio.ByteBuffer v18;
byte v14;
int v11, v7, v8;
java.nio.ByteBuffer[] v15, v20, v3;
org.wildfly.common.archive.Archive v0, v19, v23;
java.io.IOException v12, v9;
v0 := @this: org.wildfly.common.archive.Archive;
v1 := @parameter0: long;
v2 = specialinvoke v0.<org.wildfly.common.archive.Archive: long getLocalHeader(long)>(v1);
v3 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v4 = v0.<org.wildfly.common.archive.Archive: long offset>;
v5 = v4 + v2;
v6 = v5 + 6L;
v7 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v3, v6);
v8 = v7 & 65;
if v8 == 0 goto label1;
v9 = new java.io.IOException;
specialinvoke v9.<java.io.IOException: void <init>(java.lang.String)>("Cannot read encrypted entries");
throw v9;
label1:
v10 = specialinvoke v0.<org.wildfly.common.archive.Archive: long getDataOffset(long)>(v2);
v11 = specialinvoke v0.<org.wildfly.common.archive.Archive: int getCompressionMethod(long)>(v1);
if v11 == 0 goto label2;
v12 = new java.io.IOException;
specialinvoke v12.<java.io.IOException: void <init>(java.lang.String)>("Cannot open compressed nested archive");
throw v12;
label2:
v13 = virtualinvoke v0.<org.wildfly.common.archive.Archive: long getUncompressedSize(long)>(v1);
v14 = v13 cmp 2147483647L;
if v14 >= 0 goto label3;
v15 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v16 = v0.<org.wildfly.common.archive.Archive: long offset>;
v17 = v16 + v10;
v18 = staticinvoke <org.wildfly.common.archive.Archive: java.nio.ByteBuffer sliceOf(java.nio.ByteBuffer[],long,int)>(v15, v17, v13);
if v18 == null goto label3;
v19 = staticinvoke <org.wildfly.common.archive.Archive: org.wildfly.common.archive.Archive open(java.nio.ByteBuffer)>(v18);
return v19;
label3:
v20 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v21 = v0.<org.wildfly.common.archive.Archive: long offset>;
v22 = v21 + v10;
v23 = staticinvoke <org.wildfly.common.archive.Archive: org.wildfly.common.archive.Archive open(java.nio.ByteBuffer[],long,long)>(v20, v22, v13);
return v23;
}
public boolean isCompressed(long)
{
org.wildfly.common.archive.Archive v0;
int v2;
long v1;
boolean v3;
v0 := @this: org.wildfly.common.archive.Archive;
v1 := @parameter0: long;
v2 = specialinvoke v0.<org.wildfly.common.archive.Archive: int getCompressionMethod(long)>(v1);
if v2 == 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
private int getCompressionMethod(long)
{
java.nio.ByteBuffer[] v2;
org.wildfly.common.archive.Archive v0;
int v6;
long v1, v3, v4, v5;
v0 := @this: org.wildfly.common.archive.Archive;
v1 := @parameter0: long;
v2 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v3 = v0.<org.wildfly.common.archive.Archive: long offset>;
v4 = v3 + v1;
v5 = v4 + 10L;
v6 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v2, v5);
return v6;
}
private long getExtraRecord(long, int)
{
java.nio.ByteBuffer[] v10, v16, v22, v29, v4;
long v1, v11, v12, v13, v15, v17, v18, v19, v23, v24, v25, v27, v28, v3, v30, v31, v32, v33, v5, v6, v7, v9;
int v14, v2, v20, v21, v26, v34, v8;
org.wildfly.common.archive.Archive v0;
v0 := @this: org.wildfly.common.archive.Archive;
v1 := @parameter0: long;
v2 := @parameter1: int;
v3 = v1 + 46L;
v4 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v5 = v0.<org.wildfly.common.archive.Archive: long offset>;
v6 = v5 + v1;
v7 = v6 + 28L;
v8 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v4, v7);
v9 = v3 + v8;
v10 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v11 = v0.<org.wildfly.common.archive.Archive: long offset>;
v12 = v11 + v1;
v13 = v12 + 32L;
v14 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v10, v13);
v15 = v9 + v14;
v16 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v17 = v0.<org.wildfly.common.archive.Archive: long offset>;
v18 = v17 + v1;
v19 = v18 + 30L;
v20 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v16, v19);
v21 = 0;
label1:
if v21 >= v20 goto label3;
v22 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v23 = v0.<org.wildfly.common.archive.Archive: long offset>;
v24 = v23 + v15;
v25 = v24 + v21;
v26 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v22, v25);
if v26 != v2 goto label2;
v27 = v15 + v21;
v28 = v27 + 4L;
return v28;
label2:
v29 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v30 = v0.<org.wildfly.common.archive.Archive: long offset>;
v31 = v30 + v15;
v32 = v31 + v21;
v33 = v32 + 2L;
v34 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v29, v33);
v21 = v21 + v34;
goto label1;
label3:
return -1L;
}
public long getUncompressedSize(long)
{
java.nio.ByteBuffer[] v10, v2;
org.wildfly.common.archive.Archive v0;
long v1, v11, v12, v13, v3, v4, v5, v6, v8;
byte v7, v9;
v0 := @this: org.wildfly.common.archive.Archive;
v1 := @parameter0: long;
v2 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v3 = v0.<org.wildfly.common.archive.Archive: long offset>;
v4 = v3 + v1;
v5 = v4 + 24L;
v6 = staticinvoke <org.wildfly.common.archive.Archive: long getUnsignedInt(java.nio.ByteBuffer[],long)>(v2, v5);
v7 = v6 cmp -1L;
if v7 != 0 goto label1;
v8 = specialinvoke v0.<org.wildfly.common.archive.Archive: long getExtraRecord(long,int)>(v1, 1);
v9 = v8 cmp -1L;
if v9 == 0 goto label1;
v10 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v11 = v0.<org.wildfly.common.archive.Archive: long offset>;
v12 = v11 + v8;
v13 = v12 + 0L;
v6 = staticinvoke <org.wildfly.common.archive.Archive: long getLong(java.nio.ByteBuffer[],long)>(v10, v13);
label1:
return v6;
}
public long getCompressedSize(long)
{
java.nio.ByteBuffer[] v10, v2;
org.wildfly.common.archive.Archive v0;
long v1, v11, v12, v13, v3, v4, v5, v6, v8;
byte v7, v9;
v0 := @this: org.wildfly.common.archive.Archive;
v1 := @parameter0: long;
v2 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v3 = v0.<org.wildfly.common.archive.Archive: long offset>;
v4 = v3 + v1;
v5 = v4 + 20L;
v6 = staticinvoke <org.wildfly.common.archive.Archive: long getUnsignedInt(java.nio.ByteBuffer[],long)>(v2, v5);
v7 = v6 cmp -1L;
if v7 != 0 goto label1;
v8 = specialinvoke v0.<org.wildfly.common.archive.Archive: long getExtraRecord(long,int)>(v1, 1);
v9 = v8 cmp -1L;
if v9 == 0 goto label1;
v10 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v11 = v0.<org.wildfly.common.archive.Archive: long offset>;
v12 = v11 + v8;
v13 = v12 + 8L;
v6 = staticinvoke <org.wildfly.common.archive.Archive: long getLong(java.nio.ByteBuffer[],long)>(v10, v13);
label1:
return v6;
}
public long getModifiedTime(long)
{
long v1, v10, v12, v13, v14, v17, v18, v19, v2, v21, v5, v6, v7, v8;
byte v3, v9;
int v15, v20;
java.nio.ByteBuffer[] v11, v16, v4;
org.wildfly.common.archive.Archive v0;
v0 := @this: org.wildfly.common.archive.Archive;
v1 := @parameter0: long;
v2 = specialinvoke v0.<org.wildfly.common.archive.Archive: long getExtraRecord(long,int)>(v1, 13);
v3 = v2 cmp -1L;
if v3 == 0 goto label1;
v4 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v5 = v0.<org.wildfly.common.archive.Archive: long offset>;
v6 = v5 + v2;
v7 = v6 + 4L;
v8 = staticinvoke <org.wildfly.common.archive.Archive: long getUnsignedInt(java.nio.ByteBuffer[],long)>(v4, v7);
v9 = v8 cmp 0L;
if v9 == 0 goto label1;
v10 = v8 * 1000L;
return v10;
label1:
v11 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v12 = v0.<org.wildfly.common.archive.Archive: long offset>;
v13 = v12 + v1;
v14 = v13 + 12L;
v15 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v11, v14);
v16 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v17 = v0.<org.wildfly.common.archive.Archive: long offset>;
v18 = v17 + v1;
v19 = v18 + 14L;
v20 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v16, v19);
v21 = staticinvoke <org.wildfly.common.archive.Archive: long dosTimeStamp(int,int)>(v15, v20);
return v21;
}
public void close()
{
org.wildfly.common.archive.Archive v0;
v0 := @this: org.wildfly.common.archive.Archive;
return;
}
private static long dosTimeStamp(int, int)
{
java.time.LocalDateTime v13;
long v16;
int v0, v1, v10, v11, v12, v2, v3, v4, v5, v6, v7, v8, v9;
java.time.ZoneOffset v14;
java.time.Instant v15;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 = v1 >> 9;
v3 = 1980 + v2;
v4 = v1 >> 5;
v5 = v4 & 15;
v6 = 1 + v5;
v7 = v1 & 31;
v8 = v0 >> 11;
v9 = v0 >> 5;
v10 = v9 & 63;
v11 = v0 & 31;
v12 = v11 << 1;
v13 = staticinvoke <java.time.LocalDateTime: java.time.LocalDateTime of(int,int,int,int,int,int)>(v3, v6, v7, v8, v10, v12);
v14 = <java.time.ZoneOffset: java.time.ZoneOffset UTC>;
v15 = virtualinvoke v13.<java.time.LocalDateTime: java.time.Instant toInstant(java.time.ZoneOffset)>(v14);
v16 = virtualinvoke v15.<java.time.Instant: long toEpochMilli()>();
return v16;
}
public boolean isDirectory(long)
{
java.nio.ByteBuffer[] v2, v7;
org.wildfly.common.archive.Archive v0;
long v1, v3, v4, v5, v8;
int v10, v11, v13, v6, v9;
boolean v12, v14;
v0 := @this: org.wildfly.common.archive.Archive;
v1 := @parameter0: long;
v2 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v3 = v0.<org.wildfly.common.archive.Archive: long offset>;
v4 = v3 + v1;
v5 = v4 + 4L;
v6 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v2, v5);
v7 = v0.<org.wildfly.common.archive.Archive: java.nio.ByteBuffer[] bufs>;
v8 = v1 + 38L;
v9 = staticinvoke <org.wildfly.common.archive.Archive: int getInt(java.nio.ByteBuffer[],long)>(v7, v8);
lookupswitch(v6)
{
case 3: goto label1;
default: goto label4;
};
label1:
v10 = (int) 61440;
v11 = v9 & v10;
if v11 != 16384 goto label2;
v12 = 1;
goto label3;
label2:
v12 = 0;
label3:
return v12;
label4:
v13 = v9 & 16;
if v13 == 0 goto label5;
v14 = 1;
goto label6;
label5:
v14 = 0;
label6:
return v14;
}
static int bufIdx(long)
{
int v1;
long v0, v2;
v0 := @parameter0: long;
v1 = <org.wildfly.common.archive.Archive: int BUF_SHIFT>;
v2 = v0 >>> v1;
return v2;
}
static int bufOffs(long)
{
int v1;
long v0;
v0 := @parameter0: long;
v1 = v0 & 1073741823;
return v1;
}
static byte getByte(java.nio.ByteBuffer[], long)
{
java.nio.ByteBuffer[] v0;
byte v5;
int v2, v4;
long v1;
java.nio.ByteBuffer v3;
v0 := @parameter0: java.nio.ByteBuffer[];
v1 := @parameter1: long;
v2 = staticinvoke <org.wildfly.common.archive.Archive: int bufIdx(long)>(v1);
v3 = v0[v2];
v4 = staticinvoke <org.wildfly.common.archive.Archive: int bufOffs(long)>(v1);
v5 = virtualinvoke v3.<java.nio.ByteBuffer: byte get(int)>(v4);
return v5;
}
static int getUnsignedByte(java.nio.ByteBuffer[], long)
{
java.nio.ByteBuffer[] v0;
short v3;
byte v2;
long v1;
v0 := @parameter0: java.nio.ByteBuffer[];
v1 := @parameter1: long;
v2 = staticinvoke <org.wildfly.common.archive.Archive: byte getByte(java.nio.ByteBuffer[],long)>(v0, v1);
v3 = v2 & 255;
return v3;
}
static int getUnsignedByte(java.nio.ByteBuffer, int)
{
short v3;
byte v2;
int v1;
java.nio.ByteBuffer v0;
v0 := @parameter0: java.nio.ByteBuffer;
v1 := @parameter1: int;
v2 = virtualinvoke v0.<java.nio.ByteBuffer: byte get(int)>(v1);
v3 = v2 & 255;
return v3;
}
static short getShort(java.nio.ByteBuffer[], long)
{
java.nio.ByteBuffer[] v0;
long v1, v3, v8;
java.nio.ByteBuffer v5;
byte v9;
int v10, v11, v2, v4, v6, v7;
v0 := @parameter0: java.nio.ByteBuffer[];
v1 := @parameter1: long;
v2 = staticinvoke <org.wildfly.common.archive.Archive: int bufIdx(long)>(v1);
v3 = v1 + 1L;
v4 = staticinvoke <org.wildfly.common.archive.Archive: int bufIdx(long)>(v3);
if v2 != v4 goto label1;
v5 = v0[v2];
v6 = staticinvoke <org.wildfly.common.archive.Archive: int bufOffs(long)>(v1);
virtualinvoke v5.<java.nio.ByteBuffer: short getShort(int)>(v6);
goto label2;
label1:
v7 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedByte(java.nio.ByteBuffer[],long)>(v0, v1);
v8 = v1 + 1L;
v9 = staticinvoke <org.wildfly.common.archive.Archive: byte getByte(java.nio.ByteBuffer[],long)>(v0, v8);
v10 = v9 << 8;
v11 = v7 | v10;
label2:
return v11;
}
static int getUnsignedShort(java.nio.ByteBuffer[], long)
{
java.nio.ByteBuffer[] v0;
short v2;
int v3, v4;
long v1;
v0 := @parameter0: java.nio.ByteBuffer[];
v1 := @parameter1: long;
v2 = staticinvoke <org.wildfly.common.archive.Archive: short getShort(java.nio.ByteBuffer[],long)>(v0, v1);
v3 = (int) 65535;
v4 = v2 & v3;
return v4;
}
static int getMedium(java.nio.ByteBuffer[], long)
{
java.nio.ByteBuffer[] v0;
int v2, v4, v5, v6;
long v1, v3;
v0 := @parameter0: java.nio.ByteBuffer[];
v1 := @parameter1: long;
v2 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedByte(java.nio.ByteBuffer[],long)>(v0, v1);
v3 = v1 + 1L;
v4 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v0, v3);
v5 = v4 << 8;
v6 = v2 | v5;
return v6;
}
static long getUnsignedMedium(java.nio.ByteBuffer[], long)
{
java.nio.ByteBuffer[] v0;
int v2, v4, v5, v6;
long v1, v3;
v0 := @parameter0: java.nio.ByteBuffer[];
v1 := @parameter1: long;
v2 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedByte(java.nio.ByteBuffer[],long)>(v0, v1);
v3 = v1 + 1L;
v4 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v0, v3);
v5 = v4 << 8;
v6 = v2 | v5;
return v6;
}
static int getInt(java.nio.ByteBuffer[], long)
{
java.nio.ByteBuffer[] v0;
long v1, v3, v9;
java.nio.ByteBuffer v5;
short v10;
int v11, v2, v4, v6, v7, v8;
v0 := @parameter0: java.nio.ByteBuffer[];
v1 := @parameter1: long;
v2 = staticinvoke <org.wildfly.common.archive.Archive: int bufIdx(long)>(v1);
v3 = v1 + 3L;
v4 = staticinvoke <org.wildfly.common.archive.Archive: int bufIdx(long)>(v3);
if v2 != v4 goto label1;
v5 = v0[v2];
v6 = staticinvoke <org.wildfly.common.archive.Archive: int bufOffs(long)>(v1);
v7 = virtualinvoke v5.<java.nio.ByteBuffer: int getInt(int)>(v6);
goto label2;
label1:
v8 = staticinvoke <org.wildfly.common.archive.Archive: int getUnsignedShort(java.nio.ByteBuffer[],long)>(v0, v1);
v9 = v1 + 2L;
v10 = staticinvoke <org.wildfly.common.archive.Archive: short getShort(java.nio.ByteBuffer[],long)>(v0, v9);
v11 = v10 << 16;
v7 = v8 | v11;
label2:
return v7;
}
static long getUnsignedInt(java.nio.ByteBuffer[], long)
{
java.nio.ByteBuffer[] v0;
int v2;
long v1, v3;
v0 := @parameter0: java.nio.ByteBuffer[];
v1 := @parameter1: long;
v2 = staticinvoke <org.wildfly.common.archive.Archive: int getInt(java.nio.ByteBuffer[],long)>(v0, v1);
v3 = v2 & 4294967295L;
return v3;
}
static long getLong(java.nio.ByteBuffer[], long)
{
java.nio.ByteBuffer[] v0;
long v1, v11, v3, v7, v8, v9;
java.nio.ByteBuffer v5;
int v10, v2, v4, v6;
v0 := @parameter0: java.nio.ByteBuffer[];
v1 := @parameter1: long;
v2 = staticinvoke <org.wildfly.common.archive.Archive: int bufIdx(long)>(v1);
v3 = v1 + 7L;
v4 = staticinvoke <org.wildfly.common.archive.Archive: int bufIdx(long)>(v3);
if v2 != v4 goto label1;
v5 = v0[v2];
v6 = staticinvoke <org.wildfly.common.archive.Archive: int bufOffs(long)>(v1);
v7 = virtualinvoke v5.<java.nio.ByteBuffer: long getLong(int)>(v6);
goto label2;
label1:
v8 = staticinvoke <org.wildfly.common.archive.Archive: long getUnsignedInt(java.nio.ByteBuffer[],long)>(v0, v1);
v9 = v1 + 4L;
v10 = staticinvoke <org.wildfly.common.archive.Archive: int getInt(java.nio.ByteBuffer[],long)>(v0, v9);
v11 = v10 << 32;
v7 = v8 | v11;
label2:
return v7;
}
static void readBytes(java.nio.ByteBuffer[], long, byte[], int, int)
{
byte[] v2;
java.nio.ByteBuffer[] v0;
long v1;
java.nio.ByteBuffer v7, v8;
int v10, v3, v4, v5, v6, v9;
v0 := @parameter0: java.nio.ByteBuffer[];
v1 := @parameter1: long;
v2 := @parameter2: byte[];
v3 := @parameter3: int;
v4 := @parameter4: int;
label1:
if v4 <= 0 goto label2;
v5 = staticinvoke <org.wildfly.common.archive.Archive: int bufIdx(long)>(v1);
v6 = staticinvoke <org.wildfly.common.archive.Archive: int bufOffs(long)>(v1);
v7 = v0[v5];
v8 = virtualinvoke v7.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();
virtualinvoke v8.<java.nio.ByteBuffer: java.nio.ByteBuffer position(int)>(v6);
v9 = virtualinvoke v8.<java.nio.ByteBuffer: int remaining()>();
v10 = staticinvoke <java.lang.Math: int min(int,int)>(v4, v9);
virtualinvoke v8.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(v2, 0, v10);
v4 = v4 - v10;
v1 = v1 + v10;
goto label1;
label2:
return;
}
static byte[] getBytes(java.nio.ByteBuffer[], long, int)
{
byte[] v3;
java.nio.ByteBuffer[] v0;
int v2;
long v1;
v0 := @parameter0: java.nio.ByteBuffer[];
v1 := @parameter1: long;
v2 := @parameter2: int;
v3 = newarray (byte)[v2];
staticinvoke <org.wildfly.common.archive.Archive: void readBytes(java.nio.ByteBuffer[],long,byte[],int,int)>(v0, v1, v3, 0, v2);
return v3;
}
static java.nio.ByteBuffer sliceOf(java.nio.ByteBuffer[], long, int)
{
java.nio.ByteBuffer[] v0;
long v1, v5, v6;
java.nio.ByteBuffer v13, v3, v8, v9;
int v10, v11, v12, v2, v4, v7;
v0 := @parameter0: java.nio.ByteBuffer[];
v1 := @parameter1: long;
v2 := @parameter2: int;
if v2 != 0 goto label1;
v3 = <org.wildfly.common.archive.Archive: java.nio.ByteBuffer EMPTY_BUF>;
return v3;
label1:
v4 = staticinvoke <org.wildfly.common.archive.Archive: int bufIdx(long)>(v1);
v5 = v1 + v2;
v6 = v5 - 1L;
v7 = staticinvoke <org.wildfly.common.archive.Archive: int bufIdx(long)>(v6);
if v4 != v7 goto label2;
v8 = v0[v4];
v9 = virtualinvoke v8.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();
v10 = staticinvoke <org.wildfly.common.archive.Archive: int bufOffs(long)>(v1);
virtualinvoke v9.<java.nio.ByteBuffer: java.nio.ByteBuffer position(int)>(v10);
v11 = virtualinvoke v9.<java.nio.ByteBuffer: int position()>();
v12 = v11 + v2;
virtualinvoke v9.<java.nio.ByteBuffer: java.nio.ByteBuffer limit(int)>(v12);
v13 = virtualinvoke v9.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();
return v13;
label2:
return null;
}
static java.nio.ByteBuffer bufferOf(java.nio.ByteBuffer[], long, int)
{
byte[] v4;
java.nio.ByteBuffer[] v0;
int v2;
long v1;
java.nio.ByteBuffer v3;
v0 := @parameter0: java.nio.ByteBuffer[];
v1 := @parameter1: long;
v2 := @parameter2: int;
v3 = staticinvoke <org.wildfly.common.archive.Archive: java.nio.ByteBuffer sliceOf(java.nio.ByteBuffer[],long,int)>(v0, v1, v2);
if v3 != null goto label1;
v4 = staticinvoke <org.wildfly.common.archive.Archive: byte[] getBytes(java.nio.ByteBuffer[],long,int)>(v0, v1, v2);
v3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(v4);
label1:
return v3;
}
static long capacity(java.nio.ByteBuffer[])
{
java.nio.ByteBuffer[] v0;
int v1, v2, v5;
long v3, v6;
java.nio.ByteBuffer v4;
v0 := @parameter0: java.nio.ByteBuffer[];
v1 = lengthof v0;
v2 = v1 - 1;
v3 = v2 * 1073741824L;
v4 = v0[v2];
v5 = virtualinvoke v4.<java.nio.ByteBuffer: int capacity()>();
v6 = v3 + v5;
return v6;
}
static void <clinit>()
{
int v0;
java.nio.ByteBuffer v1;
v0 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(1073741824);
<org.wildfly.common.archive.Archive: int BUF_SHIFT> = v0;
v1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(0);
<org.wildfly.common.archive.Archive: java.nio.ByteBuffer EMPTY_BUF> = v1;
return;
}
}