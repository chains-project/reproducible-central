final class org.wildfly.common.archive.JDKSpecific extends java.lang.Object
{
private void <init>()
{
org.wildfly.common.archive.JDKSpecific v0;
v0 := @this: org.wildfly.common.archive.JDKSpecific;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static java.nio.ByteBuffer inflate(java.util.zip.Inflater, java.nio.ByteBuffer[], long, int, int) throws java.util.zip.DataFormatException, java.io.IOException
{
byte[] v7, v8;
java.util.zip.Inflater v0;
long v2;
java.nio.ByteBuffer v18;
int v10, v11, v12, v13, v14, v3, v4, v5, v6, v9;
boolean v15, v16;
java.nio.ByteBuffer[] v1;
java.io.IOException v17;
v0 := @parameter0: java.util.zip.Inflater;
v1 := @parameter1: java.nio.ByteBuffer[];
v2 := @parameter2: long;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = 0;
v6 = staticinvoke <java.lang.Math: int min(int,int)>(16384, v3);
v7 = newarray (byte)[v6];
v8 = newarray (byte)[v4];
v9 = 0;
label1:
if v5 >= v3 goto label3;
v10 = v3 - v5;
v11 = lengthof v7;
v12 = staticinvoke <java.lang.Math: int min(int,int)>(v10, v11);
staticinvoke <org.wildfly.common.archive.Archive: void readBytes(java.nio.ByteBuffer[],long,byte[],int,int)>(v1, v2, v7, 0, v12);
v5 = v5 + v12;
virtualinvoke v0.<java.util.zip.Inflater: void setInput(byte[],int,int)>(v7, 0, v12);
label2:
v13 = v4 - v9;
v14 = virtualinvoke v0.<java.util.zip.Inflater: int inflate(byte[],int,int)>(v8, v9, v13);
v9 = v9 + v14;
v15 = virtualinvoke v0.<java.util.zip.Inflater: boolean needsInput()>();
if v15 == 0 goto label2;
goto label1;
label3:
v16 = virtualinvoke v0.<java.util.zip.Inflater: boolean finished()>();
if v16 != 0 goto label4;
v17 = new java.io.IOException;
specialinvoke v17.<java.io.IOException: void <init>(java.lang.String)>("Corrupted compression stream");
throw v17;
label4:
v18 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(v8);
return v18;
}
}