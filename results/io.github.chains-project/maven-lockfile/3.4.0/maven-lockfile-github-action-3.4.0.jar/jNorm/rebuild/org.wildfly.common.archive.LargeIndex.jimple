final class org.wildfly.common.archive.LargeIndex extends org.wildfly.common.archive.Index
{
private final int[] table;
void <init>(int)
{
int[] v3;
int v1, v2, v4;
org.wildfly.common.archive.LargeIndex v0;
v0 := @this: org.wildfly.common.archive.LargeIndex;
v1 := @parameter0: int;
specialinvoke v0.<org.wildfly.common.archive.Index: void <init>(int)>(v1);
v2 = virtualinvoke v0.<org.wildfly.common.archive.LargeIndex: int size()>();
v3 = newarray (int)[v2];
v4 = (int) -1;
staticinvoke <java.util.Arrays: void fill(int[],int)>(v3, v4);
v0.<org.wildfly.common.archive.LargeIndex: int[] table> = v3;
return;
}
long get(int)
{
int[] v2;
int v1, v3, v4, v5, v6;
org.wildfly.common.archive.LargeIndex v0;
v0 := @this: org.wildfly.common.archive.LargeIndex;
v1 := @parameter0: int;
v2 = v0.<org.wildfly.common.archive.LargeIndex: int[] table>;
v3 = v2[v1];
v4 = (int) -1;
if v3 == v4 goto label1;
v5 = (int) -1;
v6 = v3 & v5;
label1:
return v6;
}
void put(int, long)
{
long v2;
byte v5;
int[] v3;
int v1, v4, v6, v7, v8;
org.wildfly.common.archive.LargeIndex v0;
v0 := @this: org.wildfly.common.archive.LargeIndex;
v1 := @parameter0: int;
v2 := @parameter1: long;
v3 = v0.<org.wildfly.common.archive.LargeIndex: int[] table>;
v4 = v3[v1];
label1:
v5 = v4 cmp -1L;
if v5 == 0 goto label2;
v6 = v1 + 1;
v7 = virtualinvoke v0.<org.wildfly.common.archive.LargeIndex: int getMask()>();
v1 = v6 & v7;
v4 = v3[v1];
goto label1;
label2:
v8 = staticinvoke <java.lang.Math: int toIntExact(long)>(v2);
v3[v1] = v8;
return;
}
}