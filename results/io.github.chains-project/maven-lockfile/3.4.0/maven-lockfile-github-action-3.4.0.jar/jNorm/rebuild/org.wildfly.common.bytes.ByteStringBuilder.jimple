public final class org.wildfly.common.bytes.ByteStringBuilder extends java.lang.Object
{
private byte[] content;
private int length;
public void <init>()
{
byte[] v1;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = newarray (byte)[16];
v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content> = v1;
return;
}
public void <init>(byte[])
{
byte[] v1, v4, v6;
int v2, v5;
java.lang.Object v3;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: byte[];
specialinvoke v0.<java.lang.Object: void <init>()>();
if v1 == null goto label1;
v2 = lengthof v1;
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Object clone()>();
v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content> = v3;
v4 = v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content>;
v5 = lengthof v4;
v0.<org.wildfly.common.bytes.ByteStringBuilder: int length> = v5;
goto label2;
label1:
v6 = newarray (byte)[16];
v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content> = v6;
label2:
return;
}
public org.wildfly.common.bytes.ByteStringBuilder append(boolean)
{
java.lang.String v2;
boolean v1;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: boolean;
v2 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(v1);
virtualinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: org.wildfly.common.bytes.ByteStringBuilder appendLatin1(java.lang.String)>(v2);
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder append(byte)
{
byte v1;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: byte;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v1);
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder append(char)
{
char v1;
org.wildfly.common.bytes.ByteStringBuilder v0, v2;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: char;
v2 = virtualinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: org.wildfly.common.bytes.ByteStringBuilder appendUtf8Raw(int)>(v1);
return v2;
}
public org.wildfly.common.bytes.ByteStringBuilder appendUtf8Raw(int)
{
int v1, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v3, v4, v5, v6, v7, v8, v9;
org.wildfly.common.bytes.ByteStringBuilder v0;
java.lang.IllegalArgumentException v2, v27;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: int;
if v1 >= 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>()>();
throw v2;
label1:
if v1 >= 128 goto label2;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v1);
goto label6;
label2:
if v1 >= 2048 goto label3;
v3 = v1 >>> 6;
v4 = 31 & v3;
v5 = 192 | v4;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v5);
v6 = 63 & v1;
v7 = 128 | v6;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v7);
goto label6;
label3:
if v1 >= 65536 goto label4;
v8 = v1 >>> 12;
v9 = 15 & v8;
v10 = 224 | v9;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v10);
v11 = v1 >>> 6;
v12 = 63 & v11;
v13 = 128 | v12;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v13);
v14 = 63 & v1;
v15 = 128 | v14;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v15);
goto label6;
label4:
if v1 >= 1114112 goto label5;
v16 = v1 >>> 18;
v17 = 7 & v16;
v18 = 240 | v17;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v18);
v19 = v1 >>> 12;
v20 = 63 & v19;
v21 = 128 | v20;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v21);
v22 = v1 >>> 6;
v23 = 63 & v22;
v24 = 128 | v23;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v24);
v25 = 63 & v1;
v26 = 128 | v25;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v26);
goto label6;
label5:
v27 = new java.lang.IllegalArgumentException;
specialinvoke v27.<java.lang.IllegalArgumentException: void <init>()>();
throw v27;
label6:
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder appendUtf8(org.wildfly.common.iteration.CodePointIterator)
{
int v3;
org.wildfly.common.iteration.CodePointIterator v1;
boolean v2;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: org.wildfly.common.iteration.CodePointIterator;
label1:
v2 = virtualinvoke v1.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v2 == 0 goto label2;
v3 = virtualinvoke v1.<org.wildfly.common.iteration.CodePointIterator: int next()>();
virtualinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: org.wildfly.common.bytes.ByteStringBuilder appendUtf8Raw(int)>(v3);
goto label1;
label2:
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder appendLatin1(org.wildfly.common.iteration.CodePointIterator)
{
int v3;
java.lang.IllegalArgumentException v4;
org.wildfly.common.iteration.CodePointIterator v1;
boolean v2;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: org.wildfly.common.iteration.CodePointIterator;
label1:
v2 = virtualinvoke v1.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v2 == 0 goto label3;
v3 = virtualinvoke v1.<org.wildfly.common.iteration.CodePointIterator: int next()>();
if v3 <= 255 goto label2;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>()>();
throw v4;
label2:
virtualinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: org.wildfly.common.bytes.ByteStringBuilder append(byte)>(v3);
goto label1;
label3:
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder appendAscii(org.wildfly.common.iteration.CodePointIterator)
{
int v3;
java.lang.IllegalArgumentException v4;
org.wildfly.common.iteration.CodePointIterator v1;
boolean v2;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: org.wildfly.common.iteration.CodePointIterator;
label1:
v2 = virtualinvoke v1.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v2 == 0 goto label3;
v3 = virtualinvoke v1.<org.wildfly.common.iteration.CodePointIterator: int next()>();
if v3 <= 127 goto label2;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>()>();
throw v4;
label2:
virtualinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: org.wildfly.common.bytes.ByteStringBuilder append(byte)>(v3);
goto label1;
label3:
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder append(org.wildfly.common.iteration.ByteIterator)
{
org.wildfly.common.iteration.ByteIterator v1;
org.wildfly.common.bytes.ByteStringBuilder v0, v2;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: org.wildfly.common.iteration.ByteIterator;
v2 = virtualinvoke v1.<org.wildfly.common.iteration.ByteIterator: org.wildfly.common.bytes.ByteStringBuilder appendTo(org.wildfly.common.bytes.ByteStringBuilder)>(v0);
return v2;
}
public org.wildfly.common.bytes.ByteStringBuilder append(byte[])
{
byte[] v1, v4;
int v2, v3, v5;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: byte[];
v2 = v0.<org.wildfly.common.bytes.ByteStringBuilder: int length>;
v3 = lengthof v1;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void reserve(int,boolean)>(v3, 0);
v4 = v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v4, v2, v3);
v5 = v2 + v3;
v0.<org.wildfly.common.bytes.ByteStringBuilder: int length> = v5;
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder append(byte[], int, int)
{
byte[] v1, v5;
int v2, v3, v4, v6;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void reserve(int,boolean)>(v3, 0);
v4 = v0.<org.wildfly.common.bytes.ByteStringBuilder: int length>;
v5 = v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, v2, v5, v4, v3);
v6 = v4 + v3;
v0.<org.wildfly.common.bytes.ByteStringBuilder: int length> = v6;
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder appendLatin1(java.lang.CharSequence)
{
java.lang.CharSequence v1;
int v2, v3;
char v4;
java.lang.IllegalArgumentException v5;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: java.lang.CharSequence;
v2 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void reserve(int,boolean)>(v2, 0);
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v3);
if v4 <= 255 goto label2;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>()>();
throw v5;
label2:
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppendNoCheck(byte)>(v4);
v3 = v3 + 1;
goto label1;
label3:
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder appendLatin1(java.lang.CharSequence, int, int)
{
java.lang.CharSequence v1;
char v6;
java.lang.IllegalArgumentException v7;
int v2, v3, v4, v5;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void reserve(int,boolean)>(v3, 0);
v4 = 0;
label1:
if v4 >= v3 goto label3;
v5 = v4 + v2;
v6 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v5);
if v6 <= 255 goto label2;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>()>();
throw v7;
label2:
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppendNoCheck(byte)>(v6);
v4 = v4 + 1;
goto label1;
label3:
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder appendLatin1(java.lang.String)
{
int v2, v3;
char v4;
java.lang.String v1;
java.lang.IllegalArgumentException v5;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: int length()>();
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void reserve(int,boolean)>(v2, 0);
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v3);
if v4 <= 255 goto label2;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>()>();
throw v5;
label2:
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppendNoCheck(byte)>(v4);
v3 = v3 + 1;
goto label1;
label3:
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder appendLatin1(java.lang.String, int, int)
{
char v6;
java.lang.IllegalArgumentException v7;
int v2, v3, v4, v5;
java.lang.String v1;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void reserve(int,boolean)>(v3, 0);
v4 = 0;
label1:
if v4 >= v3 goto label3;
v5 = v4 + v2;
v6 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v5);
if v6 <= 255 goto label2;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>()>();
throw v7;
label2:
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppendNoCheck(byte)>(v6);
v4 = v4 + 1;
goto label1;
label3:
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder append(java.lang.CharSequence)
{
java.lang.CharSequence v1;
int v2;
org.wildfly.common.bytes.ByteStringBuilder v0, v3;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: java.lang.CharSequence;
v2 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v3 = virtualinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: org.wildfly.common.bytes.ByteStringBuilder append(java.lang.CharSequence,int,int)>(v1, 0, v2);
return v3;
}
public org.wildfly.common.bytes.ByteStringBuilder append(java.lang.CharSequence, int, int)
{
int v10, v11, v2, v3, v4, v5, v6, v8;
boolean v13, v9;
org.wildfly.common.bytes.ByteStringBuilder v0;
java.lang.CharSequence v1;
char v12, v7;
java.lang.IllegalArgumentException v14, v15;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = 0;
label1:
if v4 >= v3 goto label5;
v5 = v4;
v4 = v4 + 1;
v6 = v2 + v5;
v7 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v6);
v8 = v7;
v9 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(v7);
if v9 == 0 goto label4;
if v4 >= v3 goto label3;
v10 = v4;
v4 = v4 + 1;
v11 = v2 + v10;
v12 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v11);
v13 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(v12);
if v13 != 0 goto label2;
v14 = new java.lang.IllegalArgumentException;
specialinvoke v14.<java.lang.IllegalArgumentException: void <init>()>();
throw v14;
label2:
v8 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(v7, v12);
goto label4;
label3:
v15 = new java.lang.IllegalArgumentException;
specialinvoke v15.<java.lang.IllegalArgumentException: void <init>()>();
throw v15;
label4:
virtualinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: org.wildfly.common.bytes.ByteStringBuilder appendUtf8Raw(int)>(v8);
goto label1;
label5:
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder append(java.lang.String)
{
int v2;
java.lang.String v1;
org.wildfly.common.bytes.ByteStringBuilder v0, v3;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: int length()>();
v3 = virtualinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: org.wildfly.common.bytes.ByteStringBuilder append(java.lang.String,int,int)>(v1, 0, v2);
return v3;
}
public org.wildfly.common.bytes.ByteStringBuilder append(java.lang.String, int, int)
{
int v10, v11, v2, v3, v4, v5, v6, v8;
java.lang.String v1;
boolean v13, v9;
org.wildfly.common.bytes.ByteStringBuilder v0;
char v12, v7;
java.lang.IllegalArgumentException v14, v15;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = 0;
label1:
if v4 >= v3 goto label5;
v5 = v4;
v4 = v4 + 1;
v6 = v2 + v5;
v7 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v6);
v8 = v7;
v9 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(v7);
if v9 == 0 goto label4;
if v4 >= v3 goto label3;
v10 = v4;
v4 = v4 + 1;
v11 = v2 + v10;
v12 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v11);
v13 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(v12);
if v13 != 0 goto label2;
v14 = new java.lang.IllegalArgumentException;
specialinvoke v14.<java.lang.IllegalArgumentException: void <init>()>();
throw v14;
label2:
v8 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(v7, v12);
goto label4;
label3:
v15 = new java.lang.IllegalArgumentException;
specialinvoke v15.<java.lang.IllegalArgumentException: void <init>()>();
throw v15;
label4:
virtualinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: org.wildfly.common.bytes.ByteStringBuilder appendUtf8Raw(int)>(v8);
goto label1;
label5:
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder appendPackedUnsignedBE(int)
{
int v1, v10, v11, v12, v13, v14, v2, v3, v4, v5, v6, v7, v8, v9;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: int;
if v1 <= 0 goto label2;
v2 = staticinvoke <java.lang.Integer: int highestOneBit(int)>(v1);
v3 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(v2);
v4 = v3 + 1;
v5 = v4 + 7;
v6 = v5 / 7;
v7 = 0;
v8 = v6 - 1;
v9 = v8 * 7;
label1:
v10 = v6 - 1;
if v7 >= v10 goto label2;
v11 = v1 >>> v9;
v12 = 128 | v11;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v12);
v7 = v7 + 1;
v9 = v9 - 7;
goto label1;
label2:
v13 = (int) -129;
v14 = v13 & v1;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v14);
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder appendPackedUnsignedBE(long)
{
long v1, v3;
byte v2;
int v10, v11, v4, v5, v6, v7, v8, v9;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label2;
v3 = staticinvoke <java.lang.Long: long highestOneBit(long)>(v1);
v4 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(v3);
v5 = v4 + 1;
v6 = v5 + 7;
v7 = v6 / 7;
v8 = 0;
label1:
v9 = v7 - 1;
if v8 >= v9 goto label2;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v11);
v8 = v8 + 1;
goto label1;
label2:
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v10);
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder appendBE(short)
{
int v2;
short v1;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: short;
v2 = v1 >>> 8;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v2);
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v1);
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder appendNumber(int)
{
int v1;
java.lang.String v2;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: int;
v2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(v1);
virtualinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: org.wildfly.common.bytes.ByteStringBuilder appendLatin1(java.lang.String)>(v2);
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder appendBE(int)
{
int v1, v2, v3, v4;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: int;
v2 = v1 >>> 24;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v2);
v3 = v1 >>> 16;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v3);
v4 = v1 >>> 8;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v4);
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v1);
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder appendNumber(long)
{
long v1;
java.lang.String v2;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: long;
v2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(v1);
virtualinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: org.wildfly.common.bytes.ByteStringBuilder appendLatin1(java.lang.String)>(v2);
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder appendBE(long)
{
long v1;
int v2, v3, v4, v5, v6, v7, v8, v9;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: long;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v2);
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v3);
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v4);
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v5);
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v6);
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v7);
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v8);
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void doAppend(byte)>(v9);
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder appendObject(java.lang.Object)
{
java.lang.Object v1;
java.lang.String v2;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(v1);
virtualinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: org.wildfly.common.bytes.ByteStringBuilder appendLatin1(java.lang.String)>(v2);
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder append(org.wildfly.common.bytes.ByteStringBuilder)
{
byte[] v2;
int v3;
org.wildfly.common.bytes.ByteStringBuilder v0, v1;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: org.wildfly.common.bytes.ByteStringBuilder;
v2 = v1.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content>;
v3 = v1.<org.wildfly.common.bytes.ByteStringBuilder: int length>;
virtualinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: org.wildfly.common.bytes.ByteStringBuilder append(byte[],int,int)>(v2, 0, v3);
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder updateDigest(java.security.MessageDigest)
{
byte[] v2;
java.security.MessageDigest v1;
int v3;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: java.security.MessageDigest;
v2 = v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content>;
v3 = v0.<org.wildfly.common.bytes.ByteStringBuilder: int length>;
virtualinvoke v1.<java.security.MessageDigest: void update(byte[],int,int)>(v2, 0, v3);
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder appendDigestResult(java.security.MessageDigest) throws java.security.DigestException
{
byte[] v4;
java.security.MessageDigest v1;
int v2, v3, v5, v6, v7, v8;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: java.security.MessageDigest;
v2 = virtualinvoke v1.<java.security.MessageDigest: int getDigestLength()>();
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void reserve(int,boolean)>(v2, 0);
v3 = v0.<org.wildfly.common.bytes.ByteStringBuilder: int length>;
v4 = v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content>;
v5 = lengthof v4;
v6 = v5 - v3;
v7 = virtualinvoke v1.<java.security.MessageDigest: int digest(byte[],int,int)>(v4, v3, v6);
v8 = v3 + v7;
v0.<org.wildfly.common.bytes.ByteStringBuilder: int length> = v8;
return v0;
}
public org.wildfly.common.bytes.ByteStringBuilder updateMac(javax.crypto.Mac)
{
byte[] v2;
int v3;
javax.crypto.Mac v1;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: javax.crypto.Mac;
v2 = v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content>;
v3 = v0.<org.wildfly.common.bytes.ByteStringBuilder: int length>;
virtualinvoke v1.<javax.crypto.Mac: void update(byte[],int,int)>(v2, 0, v3);
return v0;
}
public byte[] toArray()
{
byte[] v1, v3;
int v2;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 = v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content>;
v2 = v0.<org.wildfly.common.bytes.ByteStringBuilder: int length>;
v3 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(v1, v2);
return v3;
}
public byte byteAt(int)
{
byte[] v4;
java.lang.IndexOutOfBoundsException v3;
byte v5;
int v1, v2;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: int;
if v1 < 0 goto label1;
v2 = v0.<org.wildfly.common.bytes.ByteStringBuilder: int length>;
if v1 <= v2 goto label2;
label1:
v3 = new java.lang.IndexOutOfBoundsException;
specialinvoke v3.<java.lang.IndexOutOfBoundsException: void <init>()>();
throw v3;
label2:
v4 = v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content>;
v5 = v4[v1];
return v5;
}
public int capacity()
{
int v2;
byte[] v1;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 = v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content>;
v2 = lengthof v1;
return v2;
}
public int length()
{
int v1;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 = v0.<org.wildfly.common.bytes.ByteStringBuilder: int length>;
return v1;
}
public void setLength(int)
{
int v1, v2, v3, v4;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: int;
v2 = v0.<org.wildfly.common.bytes.ByteStringBuilder: int length>;
if v1 <= v2 goto label1;
v3 = v0.<org.wildfly.common.bytes.ByteStringBuilder: int length>;
v4 = v1 - v3;
specialinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: void reserve(int,boolean)>(v4, 1);
label1:
v0.<org.wildfly.common.bytes.ByteStringBuilder: int length> = v1;
return;
}
public boolean contentEquals(byte[])
{
byte[] v1;
int v2;
boolean v3;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: byte[];
v2 = lengthof v1;
v3 = virtualinvoke v0.<org.wildfly.common.bytes.ByteStringBuilder: boolean contentEquals(byte[],int,int)>(v1, 0, v2);
return v3;
}
public boolean contentEquals(byte[], int, int)
{
byte[] v1, v6;
byte v7, v9;
int v2, v3, v4, v5, v8;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<org.wildfly.common.bytes.ByteStringBuilder: int length>;
if v3 == v4 goto label1;
return 0;
label1:
v5 = 0;
label2:
if v5 >= v3 goto label4;
v6 = v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content>;
v7 = v6[v5];
v8 = v2 + v5;
v9 = v1[v8];
if v7 == v9 goto label3;
return 0;
label3:
v5 = v5 + 1;
goto label2;
label4:
return 1;
}
private void reserve(int, boolean)
{
byte[] v13, v4;
java.lang.IllegalStateException v11;
org.wildfly.common._private.CommonMessages v10;
int v1, v12, v3, v5, v6, v7, v8, v9;
boolean v2;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
v3 = v0.<org.wildfly.common.bytes.ByteStringBuilder: int length>;
v4 = v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content>;
v5 = lengthof v4;
v6 = v5 - v3;
if v6 < v1 goto label2;
if v2 == 0 goto label1;
v7 = v3 + v1;
staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(v4, v3, v7, 0);
label1:
return;
label2:
if v2 == 0 goto label3;
staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(v4, v3, v5, 0);
label3:
v8 = v5 + 1;
v9 = v8 >> 1;
v5 = v5 + v9;
if v5 >= 0 goto label4;
v10 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v11 = interfaceinvoke v10.<org.wildfly.common._private.CommonMessages: java.lang.IllegalStateException tooLarge()>();
throw v11;
label4:
v12 = v5 - v3;
if v12 < v1 goto label3;
v13 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(v4, v5);
v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content> = v13;
return;
}
private void doAppend(byte)
{
byte[] v2, v8;
byte v1;
int v3, v4, v5, v6, v7, v9;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: byte;
v2 = v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content>;
v3 = lengthof v2;
v4 = v0.<org.wildfly.common.bytes.ByteStringBuilder: int length>;
if v4 != v3 goto label1;
v5 = v3 + 1;
v6 = v5 >> 1;
v7 = v3 + v6;
v8 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(v2, v7);
v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content> = v8;
v2 = v8;
label1:
v2[v4] = v1;
v9 = v4 + 1;
v0.<org.wildfly.common.bytes.ByteStringBuilder: int length> = v9;
return;
}
private void doAppendNoCheck(byte)
{
byte[] v2;
byte v1;
int v3, v4;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 := @parameter0: byte;
v2 = v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content>;
v3 = v0.<org.wildfly.common.bytes.ByteStringBuilder: int length>;
v4 = v3 + 1;
v0.<org.wildfly.common.bytes.ByteStringBuilder: int length> = v4;
v2[v3] = v1;
return;
}
public org.wildfly.common.iteration.ByteIterator iterate()
{
byte[] v1;
org.wildfly.common.iteration.ByteIterator v3;
int v2;
org.wildfly.common.bytes.ByteStringBuilder v0;
v0 := @this: org.wildfly.common.bytes.ByteStringBuilder;
v1 = v0.<org.wildfly.common.bytes.ByteStringBuilder: byte[] content>;
v2 = v0.<org.wildfly.common.bytes.ByteStringBuilder: int length>;
v3 = staticinvoke <org.wildfly.common.iteration.ByteIterator: org.wildfly.common.iteration.ByteIterator ofBytes(byte[],int,int)>(v1, 0, v2);
return v3;
}
}