final class org.wildfly.common.context.ContextPermissionCollection extends java.security.PermissionCollection
{
private static final long serialVersionUID;
private volatile org.wildfly.common.context.ContextPermissionCollection$State state;
private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater stateUpdater;
private static final org.wildfly.common.context.ContextPermissionCollection$State emptyState;
void <init>()
{
org.wildfly.common.context.ContextPermissionCollection v0;
org.wildfly.common.context.ContextPermissionCollection$State v1;
v0 := @this: org.wildfly.common.context.ContextPermissionCollection;
specialinvoke v0.<java.security.PermissionCollection: void <init>()>();
v1 = <org.wildfly.common.context.ContextPermissionCollection: org.wildfly.common.context.ContextPermissionCollection$State emptyState>;
v0.<org.wildfly.common.context.ContextPermissionCollection: org.wildfly.common.context.ContextPermissionCollection$State state> = v1;
return;
}
public void add(java.security.Permission) throws java.lang.SecurityException, java.lang.IllegalArgumentException
{
org.wildfly.common.context.ContextPermissionCollection v0;
java.security.Permission v1;
org.wildfly.common._private.CommonMessages v3;
java.lang.Class v4;
java.lang.IllegalArgumentException v5;
boolean v2;
v0 := @this: org.wildfly.common.context.ContextPermissionCollection;
v1 := @parameter0: java.security.Permission;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("permission", v1);
v2 = v1 instanceof org.wildfly.common.context.ContextPermission;
if v2 == 0 goto label1;
virtualinvoke v0.<org.wildfly.common.context.ContextPermissionCollection: void add(org.wildfly.common.context.ContextPermission)>(v1);
goto label2;
label1:
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v5 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException invalidPermissionType(java.lang.Class,java.lang.Class)>(class "Lorg/wildfly/common/context/ContextPermission;", v4);
throw v5;
label2:
return;
}
public void add(org.wildfly.common.context.ContextPermission) throws java.lang.SecurityException
{
java.util.Map v12, v16;
java.lang.SecurityException v4;
boolean v11, v13, v18, v2, v37;
org.wildfly.common.context.ContextPermissionCollection v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v36;
java.util.HashMap v20, v30;
org.wildfly.common._private.CommonMessages v3;
int v10, v15, v22, v23, v24, v25, v26, v27, v28, v31, v32, v33, v5, v9;
java.lang.String v6;
org.wildfly.common.context.ContextPermission v1, v14, v19, v21, v29, v34, v8;
org.wildfly.common.context.ContextPermissionCollection$State v35, v7;
java.lang.Object v17;
v0 := @this: org.wildfly.common.context.ContextPermissionCollection;
v1 := @parameter0: org.wildfly.common.context.ContextPermission;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("contextPermission", v1);
v2 = virtualinvoke v0.<org.wildfly.common.context.ContextPermissionCollection: boolean isReadOnly()>();
if v2 == 0 goto label01;
v3 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v4 = interfaceinvoke v3.<org.wildfly.common._private.CommonMessages: java.lang.SecurityException readOnlyPermissionCollection()>();
throw v4;
label01:
v5 = virtualinvoke v1.<org.wildfly.common.context.ContextPermission: int getActionBits()>();
if v5 != 0 goto label02;
return;
label02:
v6 = virtualinvoke v1.<org.wildfly.common.context.ContextPermission: java.lang.String getName()>();
label03:
v7 = v0.<org.wildfly.common.context.ContextPermissionCollection: org.wildfly.common.context.ContextPermissionCollection$State state>;
v8 = v7.<org.wildfly.common.context.ContextPermissionCollection$State: org.wildfly.common.context.ContextPermission globalPermission>;
if v8 != null goto label04;
v9 = 0;
goto label05;
label04:
v9 = virtualinvoke v8.<org.wildfly.common.context.ContextPermission: int getActionBits()>();
label05:
v10 = v9;
if v8 == null goto label06;
v11 = virtualinvoke v8.<org.wildfly.common.context.ContextPermission: boolean implies(org.wildfly.common.context.ContextPermission)>(v1);
if v11 == 0 goto label06;
return;
label06:
v12 = v7.<org.wildfly.common.context.ContextPermissionCollection$State: java.util.Map permissions>;
v13 = virtualinvoke v6.<java.lang.String: boolean equals(java.lang.Object)>("*");
if v13 == 0 goto label09;
if v8 != null goto label07;
v14 = v1;
goto label08;
label07:
v15 = virtualinvoke v1.<org.wildfly.common.context.ContextPermission: int getActionBits()>();
v14 = virtualinvoke v8.<org.wildfly.common.context.ContextPermission: org.wildfly.common.context.ContextPermission withActionBits(int)>(v15);
label08:
v16 = staticinvoke <org.wildfly.common.context.ContextPermissionCollection: java.util.Map cloneWithout(java.util.Map,org.wildfly.common.context.ContextPermission)>(v12, v14);
goto label14;
label09:
v14 = v8;
v17 = interfaceinvoke v12.<java.util.Map: java.lang.Object get(java.lang.Object)>(v6);
if v17 != null goto label11;
v18 = interfaceinvoke v12.<java.util.Map: boolean isEmpty()>();
if v18 == 0 goto label10;
v19 = virtualinvoke v1.<org.wildfly.common.context.ContextPermission: org.wildfly.common.context.ContextPermission withoutActionBits(int)>(v10);
v16 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>(v6, v19);
goto label14;
label10:
v20 = new java.util.HashMap;
specialinvoke v20.<java.util.HashMap: void <init>(java.util.Map)>(v12);
v16 = v20;
v21 = virtualinvoke v1.<org.wildfly.common.context.ContextPermission: org.wildfly.common.context.ContextPermission withoutActionBits(int)>(v10);
interfaceinvoke v20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v21);
goto label14;
label11:
v22 = virtualinvoke v17.<org.wildfly.common.context.ContextPermission: int getActionBits()>();
v23 = v22 | v10;
v24 = v23 & v5;
if v24 != v5 goto label12;
return;
label12:
v25 = interfaceinvoke v12.<java.util.Map: int size()>();
if v25 != 1 goto label13;
v26 = (int) -1;
v27 = v10 ^ v26;
v28 = v5 & v27;
v29 = virtualinvoke v17.<org.wildfly.common.context.ContextPermission: org.wildfly.common.context.ContextPermission withActionBits(int)>(v28);
v16 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>(v6, v29);
goto label14;
label13:
v30 = new java.util.HashMap;
specialinvoke v30.<java.util.HashMap: void <init>(java.util.Map)>(v12);
v16 = v30;
v31 = (int) -1;
v32 = v10 ^ v31;
v33 = v5 & v32;
v34 = virtualinvoke v17.<org.wildfly.common.context.ContextPermission: org.wildfly.common.context.ContextPermission withActionBits(int)>(v33);
interfaceinvoke v30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v34);
label14:
v35 = new org.wildfly.common.context.ContextPermissionCollection$State;
specialinvoke v35.<org.wildfly.common.context.ContextPermissionCollection$State: void <init>(org.wildfly.common.context.ContextPermission,java.util.Map)>(v14, v16);
v36 = <org.wildfly.common.context.ContextPermissionCollection: java.util.concurrent.atomic.AtomicReferenceFieldUpdater stateUpdater>;
v37 = virtualinvoke v36.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v7, v35);
if v37 == 0 goto label03;
return;
}
private static java.util.Map cloneWithout(java.util.Map, org.wildfly.common.context.ContextPermission)
{
java.util.HashMap v15;
java.util.Map v0, v12, v5;
int v8;
java.lang.String v10, v16, v18, v23;
boolean v14, v20, v22, v4, v7, v9;
java.util.Iterator v3;
java.util.Collection v2;
org.wildfly.common.context.ContextPermission v1, v11, v17, v19, v24;
java.lang.Object v13, v21, v6;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: org.wildfly.common.context.ContextPermission;
v2 = interfaceinvoke v0.<java.util.Map: java.util.Collection values()>();
v3 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 != 0 goto label2;
v5 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
return v5;
label2:
v6 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v1.<org.wildfly.common.context.ContextPermission: boolean implies(org.wildfly.common.context.ContextPermission)>(v6);
if v7 != 0 goto label1;
v8 = virtualinvoke v1.<org.wildfly.common.context.ContextPermission: int getActionBits()>();
label3:
v9 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v9 != 0 goto label4;
v10 = virtualinvoke v6.<org.wildfly.common.context.ContextPermission: java.lang.String getName()>();
v11 = virtualinvoke v6.<org.wildfly.common.context.ContextPermission: org.wildfly.common.context.ContextPermission withoutActionBits(int)>(v8);
v12 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>(v10, v11);
return v12;
label4:
v13 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v14 = virtualinvoke v1.<org.wildfly.common.context.ContextPermission: boolean implies(org.wildfly.common.context.ContextPermission)>(v13);
if v14 != 0 goto label3;
v15 = new java.util.HashMap;
specialinvoke v15.<java.util.HashMap: void <init>()>();
v16 = virtualinvoke v6.<org.wildfly.common.context.ContextPermission: java.lang.String getName()>();
v17 = virtualinvoke v6.<org.wildfly.common.context.ContextPermission: org.wildfly.common.context.ContextPermission withoutActionBits(int)>(v8);
virtualinvoke v15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v16, v17);
v18 = virtualinvoke v13.<org.wildfly.common.context.ContextPermission: java.lang.String getName()>();
v19 = virtualinvoke v13.<org.wildfly.common.context.ContextPermission: org.wildfly.common.context.ContextPermission withoutActionBits(int)>(v8);
virtualinvoke v15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v18, v19);
label5:
v20 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v20 == 0 goto label6;
v21 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v22 = virtualinvoke v1.<org.wildfly.common.context.ContextPermission: boolean implies(org.wildfly.common.context.ContextPermission)>(v21);
if v22 != 0 goto label5;
v23 = virtualinvoke v21.<org.wildfly.common.context.ContextPermission: java.lang.String getName()>();
v24 = virtualinvoke v21.<org.wildfly.common.context.ContextPermission: org.wildfly.common.context.ContextPermission withoutActionBits(int)>(v8);
virtualinvoke v15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v23, v24);
goto label5;
label6:
return v15;
}
public boolean implies(java.security.Permission)
{
org.wildfly.common.context.ContextPermissionCollection v0;
java.security.Permission v1;
boolean v2, v3, v4;
v0 := @this: org.wildfly.common.context.ContextPermissionCollection;
v1 := @parameter0: java.security.Permission;
v2 = v1 instanceof org.wildfly.common.context.ContextPermission;
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<org.wildfly.common.context.ContextPermissionCollection: boolean implies(org.wildfly.common.context.ContextPermission)>(v1);
if v3 == 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean implies(org.wildfly.common.context.ContextPermission)
{
org.wildfly.common.context.ContextPermissionCollection v0;
org.wildfly.common.context.ContextPermission v1, v3;
org.wildfly.common.context.ContextPermissionCollection$State v2;
java.util.Map v9;
int v11, v12, v13, v5, v6;
java.lang.Object v10;
java.lang.String v7;
boolean v14, v4, v8;
v0 := @this: org.wildfly.common.context.ContextPermissionCollection;
v1 := @parameter0: org.wildfly.common.context.ContextPermission;
if v1 != null goto label1;
return 0;
label1:
v2 = v0.<org.wildfly.common.context.ContextPermissionCollection: org.wildfly.common.context.ContextPermissionCollection$State state>;
v3 = v2.<org.wildfly.common.context.ContextPermissionCollection$State: org.wildfly.common.context.ContextPermission globalPermission>;
if v3 == null goto label3;
v4 = virtualinvoke v3.<org.wildfly.common.context.ContextPermission: boolean implies(org.wildfly.common.context.ContextPermission)>(v1);
if v4 == 0 goto label2;
return 1;
label2:
v5 = virtualinvoke v3.<org.wildfly.common.context.ContextPermission: int getActionBits()>();
goto label4;
label3:
v5 = 0;
label4:
v6 = virtualinvoke v1.<org.wildfly.common.context.ContextPermission: int getActionBits()>();
v7 = virtualinvoke v1.<org.wildfly.common.context.ContextPermission: java.lang.String getName()>();
v8 = virtualinvoke v7.<java.lang.String: boolean equals(java.lang.Object)>("*");
if v8 == 0 goto label5;
return 0;
label5:
v9 = v2.<org.wildfly.common.context.ContextPermissionCollection$State: java.util.Map permissions>;
v10 = interfaceinvoke v9.<java.util.Map: java.lang.Object get(java.lang.Object)>(v7);
if v10 != null goto label6;
return 0;
label6:
v11 = virtualinvoke v10.<org.wildfly.common.context.ContextPermission: int getActionBits()>();
v12 = v11 | v5;
v13 = v6 & v12;
if v13 != v6 goto label7;
v14 = 1;
goto label8;
label7:
v14 = 0;
label8:
return v14;
}
public java.util.Enumeration elements()
{
org.wildfly.common.context.ContextPermissionCollection v0;
org.wildfly.common.context.ContextPermissionCollection$1 v5;
java.util.Iterator v4;
org.wildfly.common.context.ContextPermissionCollection$State v1;
java.util.Collection v3;
java.util.Map v2;
v0 := @this: org.wildfly.common.context.ContextPermissionCollection;
v1 = v0.<org.wildfly.common.context.ContextPermissionCollection: org.wildfly.common.context.ContextPermissionCollection$State state>;
v2 = v1.<org.wildfly.common.context.ContextPermissionCollection$State: java.util.Map permissions>;
v3 = interfaceinvoke v2.<java.util.Map: java.util.Collection values()>();
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
v5 = new org.wildfly.common.context.ContextPermissionCollection$1;
specialinvoke v5.<org.wildfly.common.context.ContextPermissionCollection$1: void <init>(org.wildfly.common.context.ContextPermissionCollection,org.wildfly.common.context.ContextPermissionCollection$State,java.util.Iterator)>(v0, v1, v4);
return v5;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v0;
org.wildfly.common.context.ContextPermissionCollection$State v1;
java.util.Map v2;
v0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lorg/wildfly/common/context/ContextPermissionCollection;", class "Lorg/wildfly/common/context/ContextPermissionCollection$State;", "state");
<org.wildfly.common.context.ContextPermissionCollection: java.util.concurrent.atomic.AtomicReferenceFieldUpdater stateUpdater> = v0;
v1 = new org.wildfly.common.context.ContextPermissionCollection$State;
v2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
specialinvoke v1.<org.wildfly.common.context.ContextPermissionCollection$State: void <init>(org.wildfly.common.context.ContextPermission,java.util.Map)>(null, v2);
<org.wildfly.common.context.ContextPermissionCollection: org.wildfly.common.context.ContextPermissionCollection$State emptyState> = v1;
return;
}
}