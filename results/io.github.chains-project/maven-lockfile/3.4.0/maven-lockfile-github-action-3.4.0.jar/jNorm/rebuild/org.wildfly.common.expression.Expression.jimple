public final class org.wildfly.common.expression.Expression extends java.lang.Object
{
private final org.wildfly.common.expression.Node content;
private final java.util.Set referencedStrings;
private static final org.wildfly.common.expression.Expression EMPTY;
private static final java.util.EnumSet NO_FLAGS;
static final boolean $assertionsDisabled;
void <init>(org.wildfly.common.expression.Node)
{
org.wildfly.common.expression.Node v1;
org.wildfly.common.expression.Expression v0;
java.util.Iterator v6;
java.util.Set v4;
java.util.HashSet v2;
int v5;
java.lang.Object v7;
boolean v3;
v0 := @this: org.wildfly.common.expression.Expression;
v1 := @parameter0: org.wildfly.common.expression.Node;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.wildfly.common.expression.Expression: org.wildfly.common.expression.Node content> = v1;
v2 = new java.util.HashSet;
specialinvoke v2.<java.util.HashSet: void <init>()>();
virtualinvoke v1.<org.wildfly.common.expression.Node: void catalog(java.util.HashSet)>(v2);
v3 = virtualinvoke v2.<java.util.HashSet: boolean isEmpty()>();
if v3 == 0 goto label1;
v4 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
goto label3;
label1:
v5 = virtualinvoke v2.<java.util.HashSet: int size()>();
if v5 != 1 goto label2;
v6 = virtualinvoke v2.<java.util.HashSet: java.util.Iterator iterator()>();
v7 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v4 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v7);
goto label3;
label2:
v4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v2);
label3:
v0.<org.wildfly.common.expression.Expression: java.util.Set referencedStrings> = v4;
return;
}
public java.util.Set getReferencedStrings()
{
java.util.Set v1;
org.wildfly.common.expression.Expression v0;
v0 := @this: org.wildfly.common.expression.Expression;
v1 = v0.<org.wildfly.common.expression.Expression: java.util.Set referencedStrings>;
return v1;
}
public java.lang.String evaluateException(org.wildfly.common.function.ExceptionBiConsumer) throws java.lang.Exception
{
org.wildfly.common.expression.Node v3;
org.wildfly.common.expression.Expression v0;
org.wildfly.common.expression.ResolveContext v4;
java.lang.StringBuilder v2;
java.lang.String v5;
org.wildfly.common.function.ExceptionBiConsumer v1;
v0 := @this: org.wildfly.common.expression.Expression;
v1 := @parameter0: org.wildfly.common.function.ExceptionBiConsumer;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("expandFunction", v1);
v2 = new java.lang.StringBuilder;
specialinvoke v2.<java.lang.StringBuilder: void <init>()>();
v3 = v0.<org.wildfly.common.expression.Expression: org.wildfly.common.expression.Node content>;
v4 = new org.wildfly.common.expression.ResolveContext;
specialinvoke v4.<org.wildfly.common.expression.ResolveContext: void <init>(org.wildfly.common.function.ExceptionBiConsumer,java.lang.StringBuilder)>(v1, v2);
virtualinvoke v3.<org.wildfly.common.expression.Node: void emit(org.wildfly.common.expression.ResolveContext,org.wildfly.common.function.ExceptionBiConsumer)>(v4, v1);
v5 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.String toString()>();
return v5;
}
public java.lang.String evaluate(java.util.function.BiConsumer)
{
org.wildfly.common.expression.Expression v0;
java.util.function.BiConsumer v1;
java.lang.String v3;
org.wildfly.common.function.ExceptionBiConsumer v2;
v0 := @this: org.wildfly.common.expression.Expression;
v1 := @parameter0: java.util.function.BiConsumer;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <org.wildfly.common.expression.Expression$accept__3232: org.wildfly.common.function.ExceptionBiConsumer bootstrap$(java.util.function.BiConsumer)>(v1);
v3 = virtualinvoke v0.<org.wildfly.common.expression.Expression: java.lang.String evaluateException(org.wildfly.common.function.ExceptionBiConsumer)>(v2);
return v3;
}
public java.lang.String evaluateWithPropertiesAndEnvironment(boolean)
{
org.wildfly.common.expression.Expression v0;
java.util.function.BiConsumer v2;
java.lang.String v3;
boolean v1;
v0 := @this: org.wildfly.common.expression.Expression;
v1 := @parameter0: boolean;
v2 = staticinvoke <org.wildfly.common.expression.Expression$lambda_evaluateWithPropertiesAndEnvironment_0__3233: java.util.function.BiConsumer bootstrap$(boolean)>(v1);
v3 = virtualinvoke v0.<org.wildfly.common.expression.Expression: java.lang.String evaluate(java.util.function.BiConsumer)>(v2);
return v3;
}
public java.lang.String evaluateWithProperties(boolean)
{
org.wildfly.common.expression.Expression v0;
java.util.function.BiConsumer v2;
java.lang.String v3;
boolean v1;
v0 := @this: org.wildfly.common.expression.Expression;
v1 := @parameter0: boolean;
v2 = staticinvoke <org.wildfly.common.expression.Expression$lambda_evaluateWithProperties_1__3234: java.util.function.BiConsumer bootstrap$(boolean)>(v1);
v3 = virtualinvoke v0.<org.wildfly.common.expression.Expression: java.lang.String evaluate(java.util.function.BiConsumer)>(v2);
return v3;
}
public java.lang.String evaluateWithEnvironment(boolean)
{
org.wildfly.common.expression.Expression v0;
java.util.function.BiConsumer v2;
java.lang.String v3;
boolean v1;
v0 := @this: org.wildfly.common.expression.Expression;
v1 := @parameter0: boolean;
v2 = staticinvoke <org.wildfly.common.expression.Expression$lambda_evaluateWithEnvironment_2__3235: java.util.function.BiConsumer bootstrap$(boolean)>(v1);
v3 = virtualinvoke v0.<org.wildfly.common.expression.Expression: java.lang.String evaluate(java.util.function.BiConsumer)>(v2);
return v3;
}
public static transient org.wildfly.common.expression.Expression compile(java.lang.String, org.wildfly.common.expression.Expression$Flag[])
{
org.wildfly.common.expression.Expression$Flag v4;
org.wildfly.common.expression.Expression v5;
org.wildfly.common.expression.Expression$Flag[] v1;
int v2;
java.lang.String v0;
java.util.EnumSet v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: org.wildfly.common.expression.Expression$Flag[];
if v1 == null goto label1;
v2 = lengthof v1;
if v2 != 0 goto label2;
label1:
v3 = <org.wildfly.common.expression.Expression: java.util.EnumSet NO_FLAGS>;
goto label3;
label2:
v4 = v1[0];
v3 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum[])>(v4, v1);
label3:
v5 = staticinvoke <org.wildfly.common.expression.Expression: org.wildfly.common.expression.Expression compile(java.lang.String,java.util.EnumSet)>(v0, v3);
return v5;
}
public static org.wildfly.common.expression.Expression compile(java.lang.String, java.util.EnumSet)
{
org.wildfly.common.expression.Node v8, v9;
org.wildfly.common.expression.Expression$Itr v4, v5, v6;
org.wildfly.common.expression.Expression v10;
org.wildfly.common.expression.Expression$Flag v2;
java.lang.String v0, v7;
java.util.EnumSet v1;
boolean v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.util.EnumSet;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("string", v0);
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("flags", v1);
v2 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag NO_TRIM>;
v3 = virtualinvoke v1.<java.util.EnumSet: boolean contains(java.lang.Object)>(v2);
if v3 == 0 goto label1;
v4 = new org.wildfly.common.expression.Expression$Itr;
specialinvoke v4.<org.wildfly.common.expression.Expression$Itr: void <init>(java.lang.String)>(v0);
v5 = v4;
goto label2;
label1:
v6 = new org.wildfly.common.expression.Expression$Itr;
v7 = virtualinvoke v0.<java.lang.String: java.lang.String trim()>();
specialinvoke v6.<org.wildfly.common.expression.Expression$Itr: void <init>(java.lang.String)>(v7);
v5 = v6;
label2:
v8 = staticinvoke <org.wildfly.common.expression.Expression: org.wildfly.common.expression.Node parseString(org.wildfly.common.expression.Expression$Itr,boolean,boolean,boolean,java.util.EnumSet)>(v5, 1, 0, 0, v1);
v9 = <org.wildfly.common.expression.Node: org.wildfly.common.expression.Node NULL>;
if v8 != v9 goto label3;
v10 = <org.wildfly.common.expression.Expression: org.wildfly.common.expression.Expression EMPTY>;
goto label4;
label3:
v10 = new org.wildfly.common.expression.Expression;
specialinvoke v10.<org.wildfly.common.expression.Expression: void <init>(org.wildfly.common.expression.Node)>(v8);
label4:
return v10;
}
private static org.wildfly.common.expression.Node parseString(org.wildfly.common.expression.Expression$Itr, boolean, boolean, boolean, java.util.EnumSet)
{
java.util.EnumSet v4;
int v10, v141, v145, v167, v174, v18, v21, v22, v26, v29, v38, v42, v46, v5, v62, v65, v7, v71, v73, v77, v80, v88, v9, v90, v94;
org.wildfly.common.expression.Node v100, v106, v110, v123, v127, v142, v150, v157, v177, v33, v41, v50, v52, v56, v83;
java.lang.AssertionError v66, v81;
java.util.ArrayList v6;
java.lang.String v111, v117, v128, v134, v14, v140, v146, v149, v156, v161, v165, v17, v171, v173, v176, v20, v37, v61, v70, v76, v87, v93;
org.wildfly.common.expression.Expression$Flag v102, v107, v113, v119, v12, v124, v130, v136, v143, v151, v153, v158, v163, v169, v23, v30, v35, v43, v47, v53, v59, v68, v74, v85, v91, v96;
org.wildfly.common.expression.ExpressionNode v104, v121, v138, v40, v51, v57, v82, v98;
boolean v1, v103, v108, v11, v114, v120, v125, v13, v131, v137, v144, v152, v154, v159, v162, v164, v170, v2, v24, v25, v27, v28, v3, v31, v32, v34, v36, v44, v45, v48, v49, v54, v55, v58, v60, v64, v67, v69, v75, v79, v8, v84, v86, v92, v97;
org.wildfly.common.expression.Expression$Itr v0;
org.wildfly.common.expression.LiteralNode v101, v105, v109, v115, v116, v122, v126, v132, v133, v139, v148, v155, v16, v160, v168, v175, v19, v99;
java.lang.IllegalArgumentException v112, v118, v129, v135, v147, v15, v166, v172, v39, v63, v72, v78, v89, v95;
v0 := @parameter0: org.wildfly.common.expression.Expression$Itr;
v1 := @parameter1: boolean;
v2 := @parameter2: boolean;
v3 := @parameter3: boolean;
v4 := @parameter4: java.util.EnumSet;
v5 = 0;
v6 = new java.util.ArrayList;
specialinvoke v6.<java.util.ArrayList: void <init>()>();
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
label01:
v8 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: boolean hasNext()>();
if v8 == 0 goto label69;
v9 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
v10 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int next()>();
lookupswitch(v10)
{
case 36: goto label02;
case 58: goto label51;
case 92: goto label57;
case 123: goto label53;
case 125: goto label54;
default: goto label01;
};
label02:
if v1 == 0 goto label01;
v11 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: boolean hasNext()>();
if v11 != 0 goto label04;
v12 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag LENIENT_SYNTAX>;
v13 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v12);
if v13 != 0 goto label03;
v14 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
v15 = staticinvoke <org.wildfly.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v14, v9);
throw v15;
label03:
v16 = new org.wildfly.common.expression.LiteralNode;
v17 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
v18 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
specialinvoke v16.<org.wildfly.common.expression.LiteralNode: void <init>(java.lang.String,int,int)>(v17, v7, v18);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v16);
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label04:
if v9 <= v7 goto label05;
v19 = new org.wildfly.common.expression.LiteralNode;
v20 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
specialinvoke v19.<org.wildfly.common.expression.LiteralNode: void <init>(java.lang.String,int,int)>(v20, v7, v9);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v19);
label05:
v21 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
v22 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int next()>();
lookupswitch(v22)
{
case 36: goto label35;
case 58: goto label43;
case 123: goto label06;
case 125: goto label38;
default: goto label48;
};
label06:
v23 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag GENERAL_EXPANSION>;
v24 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v23);
if v24 == 0 goto label07;
v25 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: boolean hasNext()>();
if v25 == 0 goto label07;
v26 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int peekNext()>();
if v26 != 123 goto label07;
v27 = 1;
goto label08;
label07:
v27 = 0;
label08:
v28 = v27;
if v27 == 0 goto label09;
virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int next()>();
label09:
v29 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
v30 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag NO_RECURSE_KEY>;
v31 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v30);
if v31 != 0 goto label10;
v32 = 1;
goto label11;
label10:
v32 = 0;
label11:
v33 = staticinvoke <org.wildfly.common.expression.Expression: org.wildfly.common.expression.Node parseString(org.wildfly.common.expression.Expression$Itr,boolean,boolean,boolean,java.util.EnumSet)>(v0, v32, 1, 1, v4);
v34 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: boolean hasNext()>();
if v34 != 0 goto label13;
v35 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag LENIENT_SYNTAX>;
v36 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v35);
if v36 != 0 goto label12;
v37 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
v38 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
v39 = staticinvoke <org.wildfly.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v37, v38);
throw v39;
label12:
v40 = new org.wildfly.common.expression.ExpressionNode;
v41 = <org.wildfly.common.expression.Node: org.wildfly.common.expression.Node NULL>;
specialinvoke v40.<org.wildfly.common.expression.ExpressionNode: void <init>(boolean,org.wildfly.common.expression.Node,org.wildfly.common.expression.Node)>(v28, v33, v41);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v40);
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label13:
v42 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int peekNext()>();
if v42 != 58 goto label28;
v43 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag DOUBLE_COLON>;
v44 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v43);
if v44 == 0 goto label16;
v45 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: boolean hasNext()>();
if v45 == 0 goto label16;
v46 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int peekNext()>();
if v46 != 58 goto label16;
virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: void rewind(int)>(v29);
v47 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag NO_RECURSE_KEY>;
v48 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v47);
if v48 != 0 goto label14;
v49 = 1;
goto label15;
label14:
v49 = 0;
label15:
v50 = staticinvoke <org.wildfly.common.expression.Expression: org.wildfly.common.expression.Node parseString(org.wildfly.common.expression.Expression$Itr,boolean,boolean,boolean,java.util.EnumSet)>(v0, v49, 1, 0, v4);
v51 = new org.wildfly.common.expression.ExpressionNode;
v52 = <org.wildfly.common.expression.Node: org.wildfly.common.expression.Node NULL>;
specialinvoke v51.<org.wildfly.common.expression.ExpressionNode: void <init>(boolean,org.wildfly.common.expression.Node,org.wildfly.common.expression.Node)>(v28, v50, v52);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v51);
goto label19;
label16:
virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int next()>();
v53 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag NO_RECURSE_DEFAULT>;
v54 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v53);
if v54 != 0 goto label17;
v55 = 1;
goto label18;
label17:
v55 = 0;
label18:
v56 = staticinvoke <org.wildfly.common.expression.Expression: org.wildfly.common.expression.Node parseString(org.wildfly.common.expression.Expression$Itr,boolean,boolean,boolean,java.util.EnumSet)>(v0, v55, 1, 0, v4);
v57 = new org.wildfly.common.expression.ExpressionNode;
specialinvoke v57.<org.wildfly.common.expression.ExpressionNode: void <init>(boolean,org.wildfly.common.expression.Node,org.wildfly.common.expression.Node)>(v28, v33, v56);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v57);
label19:
v58 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: boolean hasNext()>();
if v58 != 0 goto label21;
v59 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag LENIENT_SYNTAX>;
v60 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v59);
if v60 != 0 goto label20;
v61 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
v62 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
v63 = staticinvoke <org.wildfly.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v61, v62);
throw v63;
label20:
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label21:
v64 = <org.wildfly.common.expression.Expression: boolean $assertionsDisabled>;
if v64 != 0 goto label22;
v65 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int peekNext()>();
if v65 == 125 goto label22;
v66 = new java.lang.AssertionError;
specialinvoke v66.<java.lang.AssertionError: void <init>()>();
throw v66;
label22:
virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int next()>();
if v28 == 0 goto label27;
v67 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: boolean hasNext()>();
if v67 != 0 goto label24;
v68 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag LENIENT_SYNTAX>;
v69 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v68);
if v69 != 0 goto label23;
v70 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
v71 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
v72 = staticinvoke <org.wildfly.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v70, v71);
throw v72;
label23:
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label24:
v73 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int peekNext()>();
if v73 != 125 goto label25;
virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int next()>();
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label25:
v74 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag LENIENT_SYNTAX>;
v75 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v74);
if v75 != 0 goto label26;
v76 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
v77 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
v78 = staticinvoke <org.wildfly.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v76, v77);
throw v78;
label26:
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label27:
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label28:
v79 = <org.wildfly.common.expression.Expression: boolean $assertionsDisabled>;
if v79 != 0 goto label29;
v80 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int peekNext()>();
if v80 == 125 goto label29;
v81 = new java.lang.AssertionError;
specialinvoke v81.<java.lang.AssertionError: void <init>()>();
throw v81;
label29:
virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int next()>();
v82 = new org.wildfly.common.expression.ExpressionNode;
v83 = <org.wildfly.common.expression.Node: org.wildfly.common.expression.Node NULL>;
specialinvoke v82.<org.wildfly.common.expression.ExpressionNode: void <init>(boolean,org.wildfly.common.expression.Node,org.wildfly.common.expression.Node)>(v28, v33, v83);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v82);
if v28 == 0 goto label34;
v84 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: boolean hasNext()>();
if v84 != 0 goto label31;
v85 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag LENIENT_SYNTAX>;
v86 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v85);
if v86 != 0 goto label30;
v87 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
v88 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
v89 = staticinvoke <org.wildfly.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v87, v88);
throw v89;
label30:
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label31:
v90 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int peekNext()>();
if v90 != 125 goto label32;
virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int next()>();
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label32:
v91 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag LENIENT_SYNTAX>;
v92 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v91);
if v92 != 0 goto label33;
v93 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
v94 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
v95 = staticinvoke <org.wildfly.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v93, v94);
throw v95;
label33:
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label34:
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label35:
v96 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag MINI_EXPRS>;
v97 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v96);
if v97 == 0 goto label36;
v98 = new org.wildfly.common.expression.ExpressionNode;
v99 = <org.wildfly.common.expression.LiteralNode: org.wildfly.common.expression.LiteralNode DOLLAR>;
v100 = <org.wildfly.common.expression.Node: org.wildfly.common.expression.Node NULL>;
specialinvoke v98.<org.wildfly.common.expression.ExpressionNode: void <init>(boolean,org.wildfly.common.expression.Node,org.wildfly.common.expression.Node)>(0, v99, v100);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v98);
goto label37;
label36:
v101 = <org.wildfly.common.expression.LiteralNode: org.wildfly.common.expression.LiteralNode DOLLAR>;
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v101);
label37:
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label38:
v102 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag MINI_EXPRS>;
v103 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v102);
if v103 == 0 goto label39;
v104 = new org.wildfly.common.expression.ExpressionNode;
v105 = <org.wildfly.common.expression.LiteralNode: org.wildfly.common.expression.LiteralNode CLOSE_BRACE>;
v106 = <org.wildfly.common.expression.Node: org.wildfly.common.expression.Node NULL>;
specialinvoke v104.<org.wildfly.common.expression.ExpressionNode: void <init>(boolean,org.wildfly.common.expression.Node,org.wildfly.common.expression.Node)>(0, v105, v106);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v104);
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label39:
if v2 == 0 goto label41;
v107 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag LENIENT_SYNTAX>;
v108 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v107);
if v108 == 0 goto label40;
v109 = <org.wildfly.common.expression.LiteralNode: org.wildfly.common.expression.LiteralNode DOLLAR>;
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v109);
virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int prev()>();
v110 = staticinvoke <org.wildfly.common.expression.Node: org.wildfly.common.expression.Node fromList(java.util.List)>(v6);
return v110;
label40:
v111 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
v112 = staticinvoke <org.wildfly.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v111, v21);
throw v112;
label41:
v113 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag LENIENT_SYNTAX>;
v114 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v113);
if v114 == 0 goto label42;
v115 = <org.wildfly.common.expression.LiteralNode: org.wildfly.common.expression.LiteralNode DOLLAR>;
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v115);
v116 = <org.wildfly.common.expression.LiteralNode: org.wildfly.common.expression.LiteralNode CLOSE_BRACE>;
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v116);
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label42:
v117 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
v118 = staticinvoke <org.wildfly.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v117, v21);
throw v118;
label43:
v119 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag MINI_EXPRS>;
v120 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v119);
if v120 == 0 goto label44;
v121 = new org.wildfly.common.expression.ExpressionNode;
v122 = <org.wildfly.common.expression.LiteralNode: org.wildfly.common.expression.LiteralNode COLON>;
v123 = <org.wildfly.common.expression.Node: org.wildfly.common.expression.Node NULL>;
specialinvoke v121.<org.wildfly.common.expression.ExpressionNode: void <init>(boolean,org.wildfly.common.expression.Node,org.wildfly.common.expression.Node)>(0, v122, v123);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v121);
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label44:
if v3 == 0 goto label46;
v124 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag LENIENT_SYNTAX>;
v125 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v124);
if v125 == 0 goto label45;
virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int prev()>();
v126 = <org.wildfly.common.expression.LiteralNode: org.wildfly.common.expression.LiteralNode DOLLAR>;
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v126);
v127 = staticinvoke <org.wildfly.common.expression.Node: org.wildfly.common.expression.Node fromList(java.util.List)>(v6);
return v127;
label45:
v128 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
v129 = staticinvoke <org.wildfly.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v128, v21);
throw v129;
label46:
v130 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag LENIENT_SYNTAX>;
v131 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v130);
if v131 == 0 goto label47;
v132 = <org.wildfly.common.expression.LiteralNode: org.wildfly.common.expression.LiteralNode DOLLAR>;
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v132);
v133 = <org.wildfly.common.expression.LiteralNode: org.wildfly.common.expression.LiteralNode COLON>;
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v133);
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label47:
v134 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
v135 = staticinvoke <org.wildfly.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v134, v21);
throw v135;
label48:
v136 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag MINI_EXPRS>;
v137 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v136);
if v137 == 0 goto label49;
v138 = new org.wildfly.common.expression.ExpressionNode;
v139 = new org.wildfly.common.expression.LiteralNode;
v140 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
v141 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
specialinvoke v139.<org.wildfly.common.expression.LiteralNode: void <init>(java.lang.String,int,int)>(v140, v21, v141);
v142 = <org.wildfly.common.expression.Node: org.wildfly.common.expression.Node NULL>;
specialinvoke v138.<org.wildfly.common.expression.ExpressionNode: void <init>(boolean,org.wildfly.common.expression.Node,org.wildfly.common.expression.Node)>(0, v139, v142);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v138);
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label49:
v143 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag LENIENT_SYNTAX>;
v144 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v143);
if v144 == 0 goto label50;
v145 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getPrevIdx()>();
v7 = v145 - 1;
goto label01;
label50:
v146 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
v147 = staticinvoke <org.wildfly.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v146, v21);
throw v147;
label51:
if v3 == 0 goto label01;
virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int prev()>();
if v9 <= v7 goto label52;
v148 = new org.wildfly.common.expression.LiteralNode;
v149 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
specialinvoke v148.<org.wildfly.common.expression.LiteralNode: void <init>(java.lang.String,int,int)>(v149, v7, v9);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v148);
label52:
v150 = staticinvoke <org.wildfly.common.expression.Node: org.wildfly.common.expression.Node fromList(java.util.List)>(v6);
return v150;
label53:
v151 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag NO_SMART_BRACES>;
v152 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v151);
if v152 != 0 goto label01;
v5 = v5 + 1;
goto label01;
label54:
v153 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag NO_SMART_BRACES>;
v154 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v153);
if v154 != 0 goto label55;
if v5 <= 0 goto label55;
v5 = v5 - 1;
goto label01;
label55:
if v2 == 0 goto label01;
virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int prev()>();
if v9 < v7 goto label56;
v155 = new org.wildfly.common.expression.LiteralNode;
v156 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
specialinvoke v155.<org.wildfly.common.expression.LiteralNode: void <init>(java.lang.String,int,int)>(v156, v7, v9);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v155);
label56:
v157 = staticinvoke <org.wildfly.common.expression.Node: org.wildfly.common.expression.Node fromList(java.util.List)>(v6);
return v157;
label57:
v158 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag ESCAPES>;
v159 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v158);
if v159 == 0 goto label01;
if v9 <= v7 goto label58;
v160 = new org.wildfly.common.expression.LiteralNode;
v161 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
specialinvoke v160.<org.wildfly.common.expression.LiteralNode: void <init>(java.lang.String,int,int)>(v161, v7, v9);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v160);
v7 = v9;
label58:
v162 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: boolean hasNext()>();
if v162 != 0 goto label59;
v163 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag LENIENT_SYNTAX>;
v164 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v163);
if v164 != 0 goto label01;
v165 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
v166 = staticinvoke <org.wildfly.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v165, v9);
throw v166;
label59:
v167 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int next()>();
lookupswitch(v167)
{
case 92: goto label65;
case 98: goto label63;
case 102: goto label64;
case 110: goto label60;
case 114: goto label61;
case 116: goto label62;
default: goto label66;
};
label60:
v168 = <org.wildfly.common.expression.LiteralNode: org.wildfly.common.expression.LiteralNode NEWLINE>;
goto label68;
label61:
v168 = <org.wildfly.common.expression.LiteralNode: org.wildfly.common.expression.LiteralNode CARRIAGE_RETURN>;
goto label68;
label62:
v168 = <org.wildfly.common.expression.LiteralNode: org.wildfly.common.expression.LiteralNode TAB>;
goto label68;
label63:
v168 = <org.wildfly.common.expression.LiteralNode: org.wildfly.common.expression.LiteralNode BACKSPACE>;
goto label68;
label64:
v168 = <org.wildfly.common.expression.LiteralNode: org.wildfly.common.expression.LiteralNode FORM_FEED>;
goto label68;
label65:
v168 = <org.wildfly.common.expression.LiteralNode: org.wildfly.common.expression.LiteralNode BACKSLASH>;
goto label68;
label66:
v169 = <org.wildfly.common.expression.Expression$Flag: org.wildfly.common.expression.Expression$Flag LENIENT_SYNTAX>;
v170 = virtualinvoke v4.<java.util.EnumSet: boolean contains(java.lang.Object)>(v169);
if v170 == 0 goto label67;
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getPrevIdx()>();
goto label01;
label67:
v171 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
v172 = staticinvoke <org.wildfly.common.expression.Expression: java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String,int)>(v171, v9);
throw v172;
label68:
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v168);
v7 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: int getNextIdx()>();
goto label01;
label69:
v173 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
v174 = virtualinvoke v173.<java.lang.String: int length()>();
if v174 <= v7 goto label70;
v175 = new org.wildfly.common.expression.LiteralNode;
v176 = virtualinvoke v0.<org.wildfly.common.expression.Expression$Itr: java.lang.String getStr()>();
specialinvoke v175.<org.wildfly.common.expression.LiteralNode: void <init>(java.lang.String,int,int)>(v176, v7, v174);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v175);
label70:
v177 = staticinvoke <org.wildfly.common.expression.Node: org.wildfly.common.expression.Node fromList(java.util.List)>(v6);
return v177;
}
private static java.lang.IllegalArgumentException invalidExpressionSyntax(java.lang.String, int)
{
org.wildfly.common._private.CommonMessages v2;
int v1, v10, v14, v15, v5, v6, v7, v8, v9;
java.lang.String v0, v20, v3;
boolean v16, v17, v18;
java.lang.IllegalArgumentException v19;
java.lang.StringBuilder v11, v12, v13, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v3 = interfaceinvoke v2.<org.wildfly.common._private.CommonMessages: java.lang.String invalidExpressionSyntax(int)>(v1);
v4 = new java.lang.StringBuilder;
v5 = virtualinvoke v3.<java.lang.String: int length()>();
v6 = virtualinvoke v0.<java.lang.String: int length()>();
v7 = v5 + v6;
v8 = virtualinvoke v0.<java.lang.String: int length()>();
v9 = v7 + v8;
v10 = v9 + 5;
specialinvoke v4.<java.lang.StringBuilder: void <init>(int)>(v10);
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v3);
v11 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);
v12 = virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);
virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v0);
v13 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);
virtualinvoke v13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);
v14 = 0;
label1:
if v14 >= v1 goto label4;
v15 = virtualinvoke v0.<java.lang.String: int codePointAt(int)>(v14);
v16 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(v15);
if v16 == 0 goto label2;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v15);
goto label3;
label2:
v17 = staticinvoke <java.lang.Character: boolean isValidCodePoint(int)>(v15);
if v17 == 0 goto label3;
v18 = staticinvoke <java.lang.Character: boolean isISOControl(int)>(v15);
if v18 != 0 goto label3;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
label3:
v14 = virtualinvoke v0.<java.lang.String: int offsetByCodePoints(int,int)>(v14, 1);
goto label1;
label4:
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(94);
v19 = new java.lang.IllegalArgumentException;
v20 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke v19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v20);
return v19;
}
static void <clinit>()
{
org.wildfly.common.expression.Node v4;
org.wildfly.common.expression.Expression v3;
java.lang.Class v0;
java.util.EnumSet v5;
boolean v1, v2;
v0 = class "Lorg/wildfly/common/expression/Expression;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<org.wildfly.common.expression.Expression: boolean $assertionsDisabled> = v2;
v3 = new org.wildfly.common.expression.Expression;
v4 = <org.wildfly.common.expression.Node: org.wildfly.common.expression.Node NULL>;
specialinvoke v3.<org.wildfly.common.expression.Expression: void <init>(org.wildfly.common.expression.Node)>(v4);
<org.wildfly.common.expression.Expression: org.wildfly.common.expression.Expression EMPTY> = v3;
v5 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(class "Lorg/wildfly/common/expression/Expression$Flag;");
<org.wildfly.common.expression.Expression: java.util.EnumSet NO_FLAGS> = v5;
return;
}
}