class org.wildfly.common.expression.ExpressionNode extends org.wildfly.common.expression.Node
{
private final boolean generalExpression;
private final org.wildfly.common.expression.Node key;
private final org.wildfly.common.expression.Node defaultValue;
void <init>(boolean, org.wildfly.common.expression.Node, org.wildfly.common.expression.Node)
{
org.wildfly.common.expression.Node v2, v3;
org.wildfly.common.expression.ExpressionNode v0;
boolean v1;
v0 := @this: org.wildfly.common.expression.ExpressionNode;
v1 := @parameter0: boolean;
v2 := @parameter1: org.wildfly.common.expression.Node;
v3 := @parameter2: org.wildfly.common.expression.Node;
specialinvoke v0.<org.wildfly.common.expression.Node: void <init>()>();
v0.<org.wildfly.common.expression.ExpressionNode: boolean generalExpression> = v1;
v0.<org.wildfly.common.expression.ExpressionNode: org.wildfly.common.expression.Node key> = v2;
v0.<org.wildfly.common.expression.ExpressionNode: org.wildfly.common.expression.Node defaultValue> = v3;
return;
}
void emit(org.wildfly.common.expression.ResolveContext, org.wildfly.common.function.ExceptionBiConsumer) throws java.lang.Exception
{
java.lang.Throwable v5;
org.wildfly.common.expression.ExpressionNode v0, v3;
org.wildfly.common.expression.ResolveContext v1;
java.lang.StringBuilder v4;
org.wildfly.common.function.ExceptionBiConsumer v2;
v0 := @this: org.wildfly.common.expression.ExpressionNode;
v1 := @parameter0: org.wildfly.common.expression.ResolveContext;
v2 := @parameter1: org.wildfly.common.function.ExceptionBiConsumer;
v3 = virtualinvoke v1.<org.wildfly.common.expression.ResolveContext: org.wildfly.common.expression.ExpressionNode setCurrent(org.wildfly.common.expression.ExpressionNode)>(v0);
label1:
v4 = virtualinvoke v1.<org.wildfly.common.expression.ResolveContext: java.lang.StringBuilder getStringBuilder()>();
interfaceinvoke v2.<org.wildfly.common.function.ExceptionBiConsumer: void accept(java.lang.Object,java.lang.Object)>(v1, v4);
label2:
virtualinvoke v1.<org.wildfly.common.expression.ResolveContext: org.wildfly.common.expression.ExpressionNode setCurrent(org.wildfly.common.expression.ExpressionNode)>(v3);
goto label4;
label3:
v5 := @caughtexception;
virtualinvoke v1.<org.wildfly.common.expression.ResolveContext: org.wildfly.common.expression.ExpressionNode setCurrent(org.wildfly.common.expression.ExpressionNode)>(v3);
throw v5;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
void catalog(java.util.HashSet)
{
org.wildfly.common.expression.Node v2, v4, v6, v7;
java.util.HashSet v1;
org.wildfly.common.expression.ExpressionNode v0;
java.lang.String v5;
boolean v3;
v0 := @this: org.wildfly.common.expression.ExpressionNode;
v1 := @parameter0: java.util.HashSet;
v2 = v0.<org.wildfly.common.expression.ExpressionNode: org.wildfly.common.expression.Node key>;
v3 = v2 instanceof org.wildfly.common.expression.LiteralNode;
if v3 == 0 goto label1;
v4 = v0.<org.wildfly.common.expression.ExpressionNode: org.wildfly.common.expression.Node key>;
v5 = virtualinvoke v4.<java.lang.Object: java.lang.String toString()>();
virtualinvoke v1.<java.util.HashSet: boolean add(java.lang.Object)>(v5);
goto label2;
label1:
v6 = v0.<org.wildfly.common.expression.ExpressionNode: org.wildfly.common.expression.Node key>;
virtualinvoke v6.<org.wildfly.common.expression.Node: void catalog(java.util.HashSet)>(v1);
label2:
v7 = v0.<org.wildfly.common.expression.ExpressionNode: org.wildfly.common.expression.Node defaultValue>;
virtualinvoke v7.<org.wildfly.common.expression.Node: void catalog(java.util.HashSet)>(v1);
return;
}
boolean isGeneralExpression()
{
org.wildfly.common.expression.ExpressionNode v0;
boolean v1;
v0 := @this: org.wildfly.common.expression.ExpressionNode;
v1 = v0.<org.wildfly.common.expression.ExpressionNode: boolean generalExpression>;
return v1;
}
org.wildfly.common.expression.Node getKey()
{
org.wildfly.common.expression.Node v1;
org.wildfly.common.expression.ExpressionNode v0;
v0 := @this: org.wildfly.common.expression.ExpressionNode;
v1 = v0.<org.wildfly.common.expression.ExpressionNode: org.wildfly.common.expression.Node key>;
return v1;
}
org.wildfly.common.expression.Node getDefaultValue()
{
org.wildfly.common.expression.Node v1;
org.wildfly.common.expression.ExpressionNode v0;
v0 := @this: org.wildfly.common.expression.ExpressionNode;
v1 = v0.<org.wildfly.common.expression.ExpressionNode: org.wildfly.common.expression.Node defaultValue>;
return v1;
}
public java.lang.String toString()
{
org.wildfly.common.expression.Node v2, v3;
java.lang.Object[] v1;
org.wildfly.common.expression.ExpressionNode v0;
java.lang.String v4;
v0 := @this: org.wildfly.common.expression.ExpressionNode;
v1 = newarray (java.lang.Object)[2];
v2 = v0.<org.wildfly.common.expression.ExpressionNode: org.wildfly.common.expression.Node key>;
v1[0] = v2;
v3 = v0.<org.wildfly.common.expression.ExpressionNode: org.wildfly.common.expression.Node defaultValue>;
v1[1] = v3;
v4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Expr<%s:%s>", v1);
return v4;
}
}