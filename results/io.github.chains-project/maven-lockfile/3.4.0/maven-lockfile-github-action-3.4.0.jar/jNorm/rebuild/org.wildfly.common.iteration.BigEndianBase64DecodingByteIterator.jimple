final class org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator extends org.wildfly.common.iteration.Base64DecodingByteIterator
{
private final org.wildfly.common.codec.Base64Alphabet alphabet;
void <init>(org.wildfly.common.iteration.CodePointIterator, boolean, org.wildfly.common.codec.Base64Alphabet)
{
org.wildfly.common.codec.Base64Alphabet v3;
org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator v0;
org.wildfly.common.iteration.CodePointIterator v1;
boolean v2;
v0 := @this: org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator;
v1 := @parameter0: org.wildfly.common.iteration.CodePointIterator;
v2 := @parameter1: boolean;
v3 := @parameter2: org.wildfly.common.codec.Base64Alphabet;
specialinvoke v0.<org.wildfly.common.iteration.Base64DecodingByteIterator: void <init>(org.wildfly.common.iteration.CodePointIterator,boolean)>(v1, v2);
v0.<org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator: org.wildfly.common.codec.Base64Alphabet alphabet> = v3;
return;
}
int calc0(int, int)
{
org.wildfly.common.codec.Base64Alphabet v3, v5;
org.wildfly.common.codec.DecodeException v10;
org.wildfly.common._private.CommonMessages v9;
org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator v0;
int v1, v11, v12, v13, v14, v2, v4, v6, v7, v8;
v0 := @this: org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator: org.wildfly.common.codec.Base64Alphabet alphabet>;
v4 = virtualinvoke v3.<org.wildfly.common.codec.Base64Alphabet: int decode(int)>(v1);
v5 = v0.<org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator: org.wildfly.common.codec.Base64Alphabet alphabet>;
v6 = virtualinvoke v5.<org.wildfly.common.codec.Base64Alphabet: int decode(int)>(v2);
v7 = (int) -1;
if v4 == v7 goto label1;
v8 = (int) -1;
if v6 != v8 goto label2;
label1:
v9 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v10 = interfaceinvoke v9.<org.wildfly.common._private.CommonMessages: org.wildfly.common.codec.DecodeException invalidBase64Character()>();
throw v10;
label2:
v11 = v4 << 2;
v12 = v6 >> 4;
v13 = v11 | v12;
v14 = v13 & 255;
return v14;
}
int calc1(int, int)
{
org.wildfly.common.codec.Base64Alphabet v3, v5;
org.wildfly.common.codec.DecodeException v10;
org.wildfly.common._private.CommonMessages v9;
org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator v0;
int v1, v11, v12, v13, v14, v2, v4, v6, v7, v8;
v0 := @this: org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator: org.wildfly.common.codec.Base64Alphabet alphabet>;
v4 = virtualinvoke v3.<org.wildfly.common.codec.Base64Alphabet: int decode(int)>(v1);
v5 = v0.<org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator: org.wildfly.common.codec.Base64Alphabet alphabet>;
v6 = virtualinvoke v5.<org.wildfly.common.codec.Base64Alphabet: int decode(int)>(v2);
v7 = (int) -1;
if v4 == v7 goto label1;
v8 = (int) -1;
if v6 != v8 goto label2;
label1:
v9 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v10 = interfaceinvoke v9.<org.wildfly.common._private.CommonMessages: org.wildfly.common.codec.DecodeException invalidBase64Character()>();
throw v10;
label2:
v11 = v4 << 4;
v12 = v6 >> 2;
v13 = v11 | v12;
v14 = v13 & 255;
return v14;
}
int calc2(int, int)
{
org.wildfly.common.codec.Base64Alphabet v3, v5;
org.wildfly.common.codec.DecodeException v10;
org.wildfly.common._private.CommonMessages v9;
org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator v0;
int v1, v11, v12, v13, v2, v4, v6, v7, v8;
v0 := @this: org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator: org.wildfly.common.codec.Base64Alphabet alphabet>;
v4 = virtualinvoke v3.<org.wildfly.common.codec.Base64Alphabet: int decode(int)>(v1);
v5 = v0.<org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator: org.wildfly.common.codec.Base64Alphabet alphabet>;
v6 = virtualinvoke v5.<org.wildfly.common.codec.Base64Alphabet: int decode(int)>(v2);
v7 = (int) -1;
if v4 == v7 goto label1;
v8 = (int) -1;
if v6 != v8 goto label2;
label1:
v9 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v10 = interfaceinvoke v9.<org.wildfly.common._private.CommonMessages: org.wildfly.common.codec.DecodeException invalidBase64Character()>();
throw v10;
label2:
v11 = v4 << 6;
v12 = v11 | v6;
v13 = v12 & 255;
return v13;
}
}