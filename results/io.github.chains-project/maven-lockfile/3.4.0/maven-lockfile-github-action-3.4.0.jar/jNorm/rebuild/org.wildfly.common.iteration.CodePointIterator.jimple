public abstract class org.wildfly.common.iteration.CodePointIterator extends java.lang.Object implements org.wildfly.common.iteration.BiDirIntIterator, org.wildfly.common.iteration.IndexIterator
{
private static final char[] NO_CHARS;
public static final org.wildfly.common.iteration.CodePointIterator EMPTY;
void <init>()
{
org.wildfly.common.iteration.CodePointIterator v0;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public abstract boolean hasNext();
public abstract boolean hasPrevious();
public abstract int next() throws java.util.NoSuchElementException;
public abstract int peekNext() throws java.util.NoSuchElementException;
public abstract int previous() throws java.util.NoSuchElementException;
public abstract int peekPrevious() throws java.util.NoSuchElementException;
public abstract long getIndex();
public final boolean contentEquals(org.wildfly.common.iteration.CodePointIterator)
{
org.wildfly.common.iteration.CodePointIterator v0, v1;
int v4, v5;
boolean v2, v3, v6, v7;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 := @parameter0: org.wildfly.common.iteration.CodePointIterator;
label1:
v2 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v2 == 0 goto label4;
v3 = virtualinvoke v1.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v3 != 0 goto label2;
return 0;
label2:
v4 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: int peekNext()>();
v5 = virtualinvoke v1.<org.wildfly.common.iteration.CodePointIterator: int peekNext()>();
if v4 == v5 goto label3;
return 0;
label3:
virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: int next()>();
virtualinvoke v1.<org.wildfly.common.iteration.CodePointIterator: int next()>();
goto label1;
label4:
v6 = virtualinvoke v1.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v6 != 0 goto label5;
v7 = 1;
goto label6;
label5:
v7 = 0;
label6:
return v7;
}
public boolean contentEquals(java.lang.String)
{
java.lang.String v1;
org.wildfly.common.iteration.CodePointIterator v0, v2;
boolean v3;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.CodePointIterator ofString(java.lang.String)>(v1);
v3 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: boolean contentEquals(org.wildfly.common.iteration.CodePointIterator)>(v2);
return v3;
}
public final org.wildfly.common.iteration.CodePointIterator limitedTo(long)
{
org.wildfly.common.iteration.LimitedCodePointIterator v5;
byte v2;
long v1;
org.wildfly.common.iteration.CodePointIterator v0, v4;
boolean v3;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v3 != 0 goto label2;
label1:
v4 = <org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.CodePointIterator EMPTY>;
return v4;
label2:
v5 = new org.wildfly.common.iteration.LimitedCodePointIterator;
specialinvoke v5.<org.wildfly.common.iteration.LimitedCodePointIterator: void <init>(org.wildfly.common.iteration.CodePointIterator,long)>(v0, v1);
return v5;
}
public final transient org.wildfly.common.iteration.CodePointIterator delimitedBy(int[])
{
int[] v1;
int v2;
org.wildfly.common.iteration.DelimitedCodePointIterator v5;
org.wildfly.common.iteration.CodePointIterator v0, v4;
boolean v3;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 := @parameter0: int[];
if v1 == null goto label1;
v2 = lengthof v1;
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v3 != 0 goto label2;
label1:
v4 = <org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.CodePointIterator EMPTY>;
return v4;
label2:
v5 = new org.wildfly.common.iteration.DelimitedCodePointIterator;
specialinvoke v5.<org.wildfly.common.iteration.DelimitedCodePointIterator: void <init>(org.wildfly.common.iteration.CodePointIterator,int[])>(v0, v1);
return v5;
}
public java.lang.StringBuilder drainTo(java.lang.StringBuilder)
{
int v3;
java.lang.StringBuilder v1;
org.wildfly.common.iteration.CodePointIterator v0;
boolean v2;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 := @parameter0: java.lang.StringBuilder;
label1:
v2 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v2 == 0 goto label2;
v3 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: int next()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>(v3);
goto label1;
label2:
return v1;
}
public org.wildfly.common.iteration.CodePointIterator skipAll()
{
org.wildfly.common.iteration.CodePointIterator v0;
boolean v1;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
label1:
v1 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v1 == 0 goto label2;
virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: int next()>();
goto label1;
label2:
return v0;
}
public java.lang.StringBuilder drainTo(java.lang.StringBuilder, java.lang.String, int, int)
{
org.wildfly.common.iteration.CodePointIterator v0;
int v10, v12, v13, v3, v4, v9;
java.lang.StringBuilder v1;
java.lang.String v2;
boolean v11, v5, v6, v7, v8;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
v4 := @parameter3: int;
if v2 == null goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
v6 = v5;
v7 = staticinvoke <java.lang.Character: boolean isValidCodePoint(int)>(v3);
v8 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v8 == 0 goto label8;
if v5 == 0 goto label3;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v2);
label3:
v9 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: int next()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>(v9);
v10 = 1;
label4:
v11 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v11 == 0 goto label8;
if v10 != v4 goto label7;
if v7 == 0 goto label5;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>(v3);
label5:
if v6 == 0 goto label6;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v2);
label6:
v12 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: int next()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>(v12);
v10 = 1;
goto label4;
label7:
v13 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: int next()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>(v13);
v10 = v10 + 1;
goto label4;
label8:
return v1;
}
public java.lang.StringBuilder drainTo(java.lang.StringBuilder, int, int)
{
int v2, v3;
java.lang.StringBuilder v1, v4;
org.wildfly.common.iteration.CodePointIterator v0;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: java.lang.StringBuilder drainTo(java.lang.StringBuilder,java.lang.String,int,int)>(v1, null, v2, v3);
return v4;
}
public java.lang.StringBuilder drainTo(java.lang.StringBuilder, java.lang.String, int)
{
int v3, v4;
java.lang.StringBuilder v1, v5;
java.lang.String v2;
org.wildfly.common.iteration.CodePointIterator v0;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
v4 = (int) -1;
v5 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: java.lang.StringBuilder drainTo(java.lang.StringBuilder,java.lang.String,int,int)>(v1, v2, v4, v3);
return v5;
}
public java.lang.String drainToString()
{
java.lang.StringBuilder v2, v3;
java.lang.String v4;
org.wildfly.common.iteration.CodePointIterator v0;
boolean v1;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v1 == 0 goto label1;
v2 = new java.lang.StringBuilder;
specialinvoke v2.<java.lang.StringBuilder: void <init>()>();
v3 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: java.lang.StringBuilder drainTo(java.lang.StringBuilder)>(v2);
v4 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.String toString()>();
goto label2;
label1:
v4 = "";
label2:
return v4;
}
public java.lang.String drainToString(java.lang.String, int, int)
{
org.wildfly.common.iteration.CodePointIterator v0;
int v2, v3;
java.lang.StringBuilder v5, v6;
java.lang.String v1, v7;
boolean v4;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v4 == 0 goto label1;
v5 = new java.lang.StringBuilder;
specialinvoke v5.<java.lang.StringBuilder: void <init>()>();
v6 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: java.lang.StringBuilder drainTo(java.lang.StringBuilder,java.lang.String,int,int)>(v5, v1, v2, v3);
v7 = virtualinvoke v6.<java.lang.StringBuilder: java.lang.String toString()>();
goto label2;
label1:
v7 = "";
label2:
return v7;
}
public java.lang.String drainToString(int, int)
{
int v1, v2;
java.lang.StringBuilder v4, v5;
java.lang.String v6;
org.wildfly.common.iteration.CodePointIterator v0;
boolean v3;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v3 == 0 goto label1;
v4 = new java.lang.StringBuilder;
specialinvoke v4.<java.lang.StringBuilder: void <init>()>();
v5 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: java.lang.StringBuilder drainTo(java.lang.StringBuilder,java.lang.String,int,int)>(v4, null, v1, v2);
v6 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.String toString()>();
goto label2;
label1:
v6 = "";
label2:
return v6;
}
public java.lang.String drainToString(java.lang.String, int)
{
org.wildfly.common.iteration.CodePointIterator v0;
int v2, v5;
java.lang.StringBuilder v4, v6;
java.lang.String v1, v7;
boolean v3;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v3 == 0 goto label1;
v4 = new java.lang.StringBuilder;
specialinvoke v4.<java.lang.StringBuilder: void <init>()>();
v5 = (int) -1;
v6 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: java.lang.StringBuilder drainTo(java.lang.StringBuilder,java.lang.String,int,int)>(v4, v1, v5, v2);
v7 = virtualinvoke v6.<java.lang.StringBuilder: java.lang.String toString()>();
goto label2;
label1:
v7 = "";
label2:
return v7;
}
public org.wildfly.common.iteration.ByteIterator base64Decode(org.wildfly.common.codec.Base64Alphabet, boolean)
{
org.wildfly.common.iteration.ByteIterator v4;
org.wildfly.common.codec.Base64Alphabet v1;
org.wildfly.common.iteration.CodePointIterator v0;
org.wildfly.common.iteration.LittleEndianBase64DecodingByteIterator v6;
org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator v7;
boolean v2, v3, v5;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 := @parameter0: org.wildfly.common.codec.Base64Alphabet;
v2 := @parameter1: boolean;
v3 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v3 != 0 goto label1;
v4 = <org.wildfly.common.iteration.ByteIterator: org.wildfly.common.iteration.ByteIterator EMPTY>;
return v4;
label1:
v5 = virtualinvoke v1.<org.wildfly.common.codec.Base64Alphabet: boolean isLittleEndian()>();
if v5 == 0 goto label2;
v6 = new org.wildfly.common.iteration.LittleEndianBase64DecodingByteIterator;
specialinvoke v6.<org.wildfly.common.iteration.LittleEndianBase64DecodingByteIterator: void <init>(org.wildfly.common.iteration.CodePointIterator,boolean,org.wildfly.common.codec.Base64Alphabet)>(v0, v2, v1);
return v6;
label2:
v7 = new org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator;
specialinvoke v7.<org.wildfly.common.iteration.BigEndianBase64DecodingByteIterator: void <init>(org.wildfly.common.iteration.CodePointIterator,boolean,org.wildfly.common.codec.Base64Alphabet)>(v0, v2, v1);
return v7;
}
public org.wildfly.common.iteration.ByteIterator base32Decode(org.wildfly.common.codec.Base32Alphabet, boolean)
{
org.wildfly.common.iteration.ByteIterator v4;
org.wildfly.common.iteration.BigEndianBase32DecodingByteIterator v7;
org.wildfly.common.codec.Base32Alphabet v1;
org.wildfly.common.iteration.CodePointIterator v0;
org.wildfly.common.iteration.LittleEndianBase32DecodingByteIterator v6;
boolean v2, v3, v5;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 := @parameter0: org.wildfly.common.codec.Base32Alphabet;
v2 := @parameter1: boolean;
v3 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v3 != 0 goto label1;
v4 = <org.wildfly.common.iteration.ByteIterator: org.wildfly.common.iteration.ByteIterator EMPTY>;
return v4;
label1:
v5 = virtualinvoke v1.<org.wildfly.common.codec.Base32Alphabet: boolean isLittleEndian()>();
if v5 == 0 goto label2;
v6 = new org.wildfly.common.iteration.LittleEndianBase32DecodingByteIterator;
specialinvoke v6.<org.wildfly.common.iteration.LittleEndianBase32DecodingByteIterator: void <init>(org.wildfly.common.iteration.CodePointIterator,boolean,org.wildfly.common.codec.Base32Alphabet)>(v0, v2, v1);
return v6;
label2:
v7 = new org.wildfly.common.iteration.BigEndianBase32DecodingByteIterator;
specialinvoke v7.<org.wildfly.common.iteration.BigEndianBase32DecodingByteIterator: void <init>(org.wildfly.common.iteration.CodePointIterator,boolean,org.wildfly.common.codec.Base32Alphabet)>(v0, v2, v1);
return v7;
}
public org.wildfly.common.iteration.ByteIterator hexDecode()
{
org.wildfly.common.iteration.ByteIterator v2;
org.wildfly.common.iteration.Base16DecodingByteIterator v3;
org.wildfly.common.iteration.CodePointIterator v0;
boolean v1;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v1 != 0 goto label1;
v2 = <org.wildfly.common.iteration.ByteIterator: org.wildfly.common.iteration.ByteIterator EMPTY>;
return v2;
label1:
v3 = new org.wildfly.common.iteration.Base16DecodingByteIterator;
specialinvoke v3.<org.wildfly.common.iteration.Base16DecodingByteIterator: void <init>(org.wildfly.common.iteration.CodePointIterator)>(v0);
return v3;
}
public org.wildfly.common.iteration.ByteIterator base64Decode(org.wildfly.common.codec.Base64Alphabet)
{
org.wildfly.common.iteration.ByteIterator v2;
org.wildfly.common.iteration.CodePointIterator v0;
org.wildfly.common.codec.Base64Alphabet v1;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 := @parameter0: org.wildfly.common.codec.Base64Alphabet;
v2 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.ByteIterator base64Decode(org.wildfly.common.codec.Base64Alphabet,boolean)>(v1, 1);
return v2;
}
public org.wildfly.common.iteration.ByteIterator base64Decode()
{
org.wildfly.common.iteration.ByteIterator v2;
org.wildfly.common.iteration.CodePointIterator v0;
org.wildfly.common.codec.Base64Alphabet v1;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 = <org.wildfly.common.codec.Base64Alphabet: org.wildfly.common.codec.Base64Alphabet STANDARD>;
v2 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.ByteIterator base64Decode(org.wildfly.common.codec.Base64Alphabet,boolean)>(v1, 1);
return v2;
}
public org.wildfly.common.iteration.ByteIterator base32Decode(org.wildfly.common.codec.Base32Alphabet)
{
org.wildfly.common.codec.Base32Alphabet v1;
org.wildfly.common.iteration.ByteIterator v2;
org.wildfly.common.iteration.CodePointIterator v0;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 := @parameter0: org.wildfly.common.codec.Base32Alphabet;
v2 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.ByteIterator base32Decode(org.wildfly.common.codec.Base32Alphabet,boolean)>(v1, 1);
return v2;
}
public org.wildfly.common.iteration.ByteIterator base32Decode()
{
org.wildfly.common.codec.Base32Alphabet v1;
org.wildfly.common.iteration.ByteIterator v2;
org.wildfly.common.iteration.CodePointIterator v0;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 = <org.wildfly.common.codec.Base32Alphabet: org.wildfly.common.codec.Base32Alphabet STANDARD>;
v2 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.ByteIterator base32Decode(org.wildfly.common.codec.Base32Alphabet,boolean)>(v1, 1);
return v2;
}
public org.wildfly.common.iteration.ByteIterator asLatin1()
{
org.wildfly.common.iteration.CodePointIterator v0;
org.wildfly.common.iteration.Latin1EncodingByteIterator v1;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 = new org.wildfly.common.iteration.Latin1EncodingByteIterator;
specialinvoke v1.<org.wildfly.common.iteration.Latin1EncodingByteIterator: void <init>(org.wildfly.common.iteration.CodePointIterator)>(v0);
return v1;
}
public org.wildfly.common.iteration.ByteIterator asUtf8()
{
org.wildfly.common.iteration.ByteIterator v1;
org.wildfly.common.iteration.CodePointIterator v0;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.ByteIterator asUtf8(boolean)>(0);
return v1;
}
public org.wildfly.common.iteration.ByteIterator asUtf8(boolean)
{
org.wildfly.common.iteration.Utf8EncodingByteIterator v2;
org.wildfly.common.iteration.CodePointIterator v0;
boolean v1;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 := @parameter0: boolean;
v2 = new org.wildfly.common.iteration.Utf8EncodingByteIterator;
specialinvoke v2.<org.wildfly.common.iteration.Utf8EncodingByteIterator: void <init>(org.wildfly.common.iteration.CodePointIterator,boolean)>(v0, v1);
return v2;
}
public static org.wildfly.common.iteration.CodePointIterator ofString(java.lang.String)
{
int v1;
java.lang.String v0;
org.wildfly.common.iteration.CodePointIterator v2;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: int length()>();
v2 = staticinvoke <org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.CodePointIterator ofString(java.lang.String,int,int)>(v0, 0, v1);
return v2;
}
public static org.wildfly.common.iteration.CodePointIterator ofString(java.lang.String, int, int)
{
org.wildfly.common.iteration.StringIterator v4;
int v1, v2;
java.lang.String v0;
org.wildfly.common.iteration.CodePointIterator v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: int;
if v2 != 0 goto label1;
v3 = <org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.CodePointIterator EMPTY>;
return v3;
label1:
v4 = new org.wildfly.common.iteration.StringIterator;
specialinvoke v4.<org.wildfly.common.iteration.StringIterator: void <init>(int,java.lang.String,int)>(v2, v0, v1);
return v4;
}
public static org.wildfly.common.iteration.CodePointIterator ofChars(char[])
{
int v1;
char[] v0;
org.wildfly.common.iteration.CodePointIterator v2;
v0 := @parameter0: char[];
v1 = lengthof v0;
v2 = staticinvoke <org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.CodePointIterator ofChars(char[],int,int)>(v0, 0, v1);
return v2;
}
public static org.wildfly.common.iteration.CodePointIterator ofChars(char[], int)
{
int v1, v2, v3;
char[] v0;
org.wildfly.common.iteration.CodePointIterator v4;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 = lengthof v0;
v3 = v2 - v1;
v4 = staticinvoke <org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.CodePointIterator ofChars(char[],int,int)>(v0, v1, v3);
return v4;
}
public static org.wildfly.common.iteration.CodePointIterator ofChars(char[], int, int)
{
int v1, v2;
char[] v0;
org.wildfly.common.iteration.CodePointIterator v3;
org.wildfly.common.iteration.CharArrayIterator v4;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v2 > 0 goto label1;
v3 = <org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.CodePointIterator EMPTY>;
return v3;
label1:
v4 = new org.wildfly.common.iteration.CharArrayIterator;
specialinvoke v4.<org.wildfly.common.iteration.CharArrayIterator: void <init>(int,char[],int)>(v2, v0, v1);
return v4;
}
public static org.wildfly.common.iteration.CodePointIterator ofUtf8Bytes(byte[])
{
int v1;
byte[] v0;
org.wildfly.common.iteration.CodePointIterator v2;
v0 := @parameter0: byte[];
v1 = lengthof v0;
v2 = staticinvoke <org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.CodePointIterator ofUtf8Bytes(byte[],int,int)>(v0, 0, v1);
return v2;
}
public static org.wildfly.common.iteration.CodePointIterator ofUtf8Bytes(byte[], int, int)
{
byte[] v0;
org.wildfly.common.iteration.ByteIterator v4;
int v1, v2;
org.wildfly.common.iteration.CodePointIterator v3, v5;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v2 > 0 goto label1;
v3 = <org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.CodePointIterator EMPTY>;
return v3;
label1:
v4 = staticinvoke <org.wildfly.common.iteration.ByteIterator: org.wildfly.common.iteration.ByteIterator ofBytes(byte[],int,int)>(v0, v1, v2);
v5 = virtualinvoke v4.<org.wildfly.common.iteration.ByteIterator: org.wildfly.common.iteration.CodePointIterator asUtf8String()>();
return v5;
}
public static org.wildfly.common.iteration.CodePointIterator ofLatin1Bytes(byte[])
{
int v1;
byte[] v0;
org.wildfly.common.iteration.CodePointIterator v2;
v0 := @parameter0: byte[];
v1 = lengthof v0;
v2 = staticinvoke <org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.CodePointIterator ofLatin1Bytes(byte[],int,int)>(v0, 0, v1);
return v2;
}
public static org.wildfly.common.iteration.CodePointIterator ofLatin1Bytes(byte[], int, int)
{
byte[] v0;
org.wildfly.common.iteration.ByteIterator v4;
int v1, v2;
org.wildfly.common.iteration.CodePointIterator v3, v5;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v2 > 0 goto label1;
v3 = <org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.CodePointIterator EMPTY>;
return v3;
label1:
v4 = staticinvoke <org.wildfly.common.iteration.ByteIterator: org.wildfly.common.iteration.ByteIterator ofBytes(byte[],int,int)>(v0, v1, v2);
v5 = virtualinvoke v4.<org.wildfly.common.iteration.ByteIterator: org.wildfly.common.iteration.CodePointIterator asLatin1String()>();
return v5;
}
public org.wildfly.common.iteration.CodePointIterator skipCrLf()
{
org.wildfly.common.iteration.CodePointIterator v0, v2;
java.util.function.IntPredicate v1;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 = staticinvoke <org.wildfly.common.iteration.CodePointIterator$lambda_skipCrLf_0__3228: java.util.function.IntPredicate bootstrap$()>();
v2 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.CodePointIterator skip(java.util.function.IntPredicate)>(v1);
return v2;
}
public org.wildfly.common.iteration.CodePointIterator skip(java.util.function.IntPredicate)
{
org.wildfly.common.iteration.CodePointIterator v0, v3;
org.wildfly.common.iteration.SkippingCodePointIterator v4;
java.util.function.IntPredicate v1;
boolean v2;
v0 := @this: org.wildfly.common.iteration.CodePointIterator;
v1 := @parameter0: java.util.function.IntPredicate;
v2 = virtualinvoke v0.<org.wildfly.common.iteration.CodePointIterator: boolean hasNext()>();
if v2 != 0 goto label1;
v3 = <org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.CodePointIterator EMPTY>;
return v3;
label1:
v4 = new org.wildfly.common.iteration.SkippingCodePointIterator;
specialinvoke v4.<org.wildfly.common.iteration.SkippingCodePointIterator: void <init>(org.wildfly.common.iteration.CodePointIterator,java.util.function.IntPredicate)>(v0, v1);
return v4;
}
static void <clinit>()
{
char[] v0, v2;
org.wildfly.common.iteration.CharArrayIterator v1;
v0 = newarray (char)[0];
<org.wildfly.common.iteration.CodePointIterator: char[] NO_CHARS> = v0;
v1 = new org.wildfly.common.iteration.CharArrayIterator;
v2 = <org.wildfly.common.iteration.CodePointIterator: char[] NO_CHARS>;
specialinvoke v1.<org.wildfly.common.iteration.CharArrayIterator: void <init>(int,char[],int)>(0, v2, 0);
<org.wildfly.common.iteration.CodePointIterator: org.wildfly.common.iteration.CodePointIterator EMPTY> = v1;
return;
}
}