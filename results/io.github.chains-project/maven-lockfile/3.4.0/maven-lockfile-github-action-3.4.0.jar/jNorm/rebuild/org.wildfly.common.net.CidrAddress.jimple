public final class org.wildfly.common.net.CidrAddress extends java.lang.Object implements java.io.Serializable, java.lang.Comparable
{
private static final long serialVersionUID;
public static final org.wildfly.common.net.CidrAddress INET4_ANY_CIDR;
public static final org.wildfly.common.net.CidrAddress INET6_ANY_CIDR;
private final java.net.InetAddress networkAddress;
private final byte[] cachedBytes;
private final int netmaskBits;
private java.net.Inet4Address broadcast;
private java.lang.String toString;
private int hashCode;
static final boolean $assertionsDisabled;
private void <init>(java.net.InetAddress, int)
{
java.net.InetAddress v1;
byte[] v3;
int v2;
org.wildfly.common.net.CidrAddress v0;
v0 := @this: org.wildfly.common.net.CidrAddress;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.wildfly.common.net.CidrAddress: java.net.InetAddress networkAddress> = v1;
v3 = virtualinvoke v1.<java.net.InetAddress: byte[] getAddress()>();
v0.<org.wildfly.common.net.CidrAddress: byte[] cachedBytes> = v3;
v0.<org.wildfly.common.net.CidrAddress: int netmaskBits> = v2;
return;
}
public static org.wildfly.common.net.CidrAddress create(java.net.InetAddress, int)
{
byte[] v8;
java.lang.IllegalStateException v16, v7;
java.net.InetAddress v0, v12;
int v1, v10, v2;
java.lang.String v9;
boolean v3, v5;
java.net.UnknownHostException v15;
java.net.Inet6Address v14;
org.wildfly.common.net.CidrAddress v11, v13, v4, v6;
v0 := @parameter0: java.net.InetAddress;
v1 := @parameter1: int;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("networkAddress", v0);
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("netmaskBits", 0, v1);
v2 = staticinvoke <org.wildfly.common.net.Inet: int getScopeId(java.net.InetAddress)>(v0);
v3 = v0 instanceof java.net.Inet4Address;
if v3 == 0 goto label1;
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("netmaskBits", 32, v1);
if v1 != 0 goto label3;
v4 = <org.wildfly.common.net.CidrAddress: org.wildfly.common.net.CidrAddress INET4_ANY_CIDR>;
return v4;
label1:
v5 = v0 instanceof java.net.Inet6Address;
if v5 == 0 goto label2;
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("netmaskBits", 128, v1);
if v1 != 0 goto label3;
if v2 != 0 goto label3;
v6 = <org.wildfly.common.net.CidrAddress: org.wildfly.common.net.CidrAddress INET6_ANY_CIDR>;
return v6;
label2:
v7 = staticinvoke <org.wildfly.common.Assert: java.lang.IllegalStateException unreachableCode()>();
throw v7;
label3:
v8 = virtualinvoke v0.<java.net.InetAddress: byte[] getAddress()>();
staticinvoke <org.wildfly.common.net.CidrAddress: byte[] maskBits0(byte[],int)>(v8, v1);
v9 = staticinvoke <org.wildfly.common.net.Inet: java.lang.String toOptimalString(byte[])>(v8);
label4:
v10 = lengthof v8;
if v10 != 4 goto label6;
v11 = new org.wildfly.common.net.CidrAddress;
v12 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])>(v9, v8);
specialinvoke v11.<org.wildfly.common.net.CidrAddress: void <init>(java.net.InetAddress,int)>(v12, v1);
label5:
return v11;
label6:
v13 = new org.wildfly.common.net.CidrAddress;
v14 = staticinvoke <java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String,byte[],int)>(v9, v8, v2);
specialinvoke v13.<org.wildfly.common.net.CidrAddress: void <init>(java.net.InetAddress,int)>(v14, v1);
label7:
return v13;
label8:
v15 := @caughtexception;
v16 = staticinvoke <org.wildfly.common.Assert: java.lang.IllegalStateException unreachableCode()>();
throw v16;
catch java.net.UnknownHostException from label4 to label5 with label8;
catch java.net.UnknownHostException from label6 to label7 with label8;
}
public static org.wildfly.common.net.CidrAddress create(byte[], int)
{
int v1;
byte[] v0;
org.wildfly.common.net.CidrAddress v2;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 = staticinvoke <org.wildfly.common.net.CidrAddress: org.wildfly.common.net.CidrAddress create(byte[],int,boolean)>(v0, v1, 1);
return v2;
}
static org.wildfly.common.net.CidrAddress create(byte[], int, boolean)
{
byte[] v0;
java.lang.IllegalStateException v13;
java.lang.IllegalArgumentException v7;
java.net.UnknownHostException v12;
java.net.InetAddress v11;
org.wildfly.common._private.CommonMessages v6;
int v1, v3;
java.lang.Object v8;
java.lang.String v9;
org.wildfly.common.net.CidrAddress v10, v4, v5;
boolean v2;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: boolean;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("networkAddress", v0);
staticinvoke <org.wildfly.common.Assert: void checkMinimumParameter(java.lang.String,int,int)>("netmaskBits", 0, v1);
v3 = lengthof v0;
if v3 != 4 goto label1;
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("netmaskBits", 32, v1);
if v1 != 0 goto label3;
v4 = <org.wildfly.common.net.CidrAddress: org.wildfly.common.net.CidrAddress INET4_ANY_CIDR>;
return v4;
label1:
if v3 != 16 goto label2;
staticinvoke <org.wildfly.common.Assert: void checkMaximumParameter(java.lang.String,int,int)>("netmaskBits", 128, v1);
if v1 != 0 goto label3;
v5 = <org.wildfly.common.net.CidrAddress: org.wildfly.common.net.CidrAddress INET6_ANY_CIDR>;
return v5;
label2:
v6 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v7 = interfaceinvoke v6.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException invalidAddressBytes(int)>(v3);
throw v7;
label3:
if v2 == 0 goto label4;
v8 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
goto label5;
label4:
v8 = v0;
label5:
staticinvoke <org.wildfly.common.net.CidrAddress: byte[] maskBits0(byte[],int)>(v8, v1);
v9 = staticinvoke <org.wildfly.common.net.Inet: java.lang.String toOptimalString(byte[])>(v8);
label6:
v10 = new org.wildfly.common.net.CidrAddress;
v11 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])>(v9, v8);
specialinvoke v10.<org.wildfly.common.net.CidrAddress: void <init>(java.net.InetAddress,int)>(v11, v1);
label7:
return v10;
label8:
v12 := @caughtexception;
v13 = staticinvoke <org.wildfly.common.Assert: java.lang.IllegalStateException unreachableCode()>();
throw v13;
catch java.net.UnknownHostException from label6 to label7 with label8;
}
public boolean matches(java.net.InetAddress)
{
java.net.InetAddress v1;
java.lang.IllegalStateException v6;
org.wildfly.common.net.CidrAddress v0;
boolean v2, v3, v4, v5;
v0 := @this: org.wildfly.common.net.CidrAddress;
v1 := @parameter0: java.net.InetAddress;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("address", v1);
v2 = v1 instanceof java.net.Inet4Address;
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<org.wildfly.common.net.CidrAddress: boolean matches(java.net.Inet4Address)>(v1);
return v3;
label1:
v4 = v1 instanceof java.net.Inet6Address;
if v4 == 0 goto label2;
v5 = virtualinvoke v0.<org.wildfly.common.net.CidrAddress: boolean matches(java.net.Inet6Address)>(v1);
return v5;
label2:
v6 = staticinvoke <org.wildfly.common.Assert: java.lang.IllegalStateException unreachableCode()>();
throw v6;
}
public boolean matches(byte[])
{
byte[] v1;
org.wildfly.common.net.CidrAddress v0;
boolean v2;
v0 := @this: org.wildfly.common.net.CidrAddress;
v1 := @parameter0: byte[];
v2 = virtualinvoke v0.<org.wildfly.common.net.CidrAddress: boolean matches(byte[],int)>(v1, 0);
return v2;
}
public boolean matches(byte[], int)
{
byte[] v1, v3, v8;
int v2, v4, v5, v6, v7, v9;
org.wildfly.common.net.CidrAddress v0;
boolean v10, v11;
v0 := @this: org.wildfly.common.net.CidrAddress;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("bytes", v1);
v3 = v0.<org.wildfly.common.net.CidrAddress: byte[] cachedBytes>;
v4 = lengthof v3;
v5 = lengthof v1;
if v4 != v5 goto label2;
v6 = virtualinvoke v0.<org.wildfly.common.net.CidrAddress: int getScopeId()>();
if v6 == 0 goto label1;
v7 = virtualinvoke v0.<org.wildfly.common.net.CidrAddress: int getScopeId()>();
if v7 != v2 goto label2;
label1:
v8 = v0.<org.wildfly.common.net.CidrAddress: byte[] cachedBytes>;
v9 = v0.<org.wildfly.common.net.CidrAddress: int netmaskBits>;
v10 = staticinvoke <org.wildfly.common.net.CidrAddress: boolean bitsMatch(byte[],byte[],int)>(v8, v1, v9);
if v10 == 0 goto label2;
v11 = 1;
goto label3;
label2:
v11 = 0;
label3:
return v11;
}
public boolean matches(java.net.Inet4Address)
{
byte[] v4, v5;
java.net.Inet4Address v1;
java.net.InetAddress v2;
int v6;
org.wildfly.common.net.CidrAddress v0;
boolean v3, v7, v8;
v0 := @this: org.wildfly.common.net.CidrAddress;
v1 := @parameter0: java.net.Inet4Address;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("address", v1);
v2 = v0.<org.wildfly.common.net.CidrAddress: java.net.InetAddress networkAddress>;
v3 = v2 instanceof java.net.Inet4Address;
if v3 == 0 goto label1;
v4 = v0.<org.wildfly.common.net.CidrAddress: byte[] cachedBytes>;
v5 = virtualinvoke v1.<java.net.Inet4Address: byte[] getAddress()>();
v6 = v0.<org.wildfly.common.net.CidrAddress: int netmaskBits>;
v7 = staticinvoke <org.wildfly.common.net.CidrAddress: boolean bitsMatch(byte[],byte[],int)>(v4, v5, v6);
if v7 == 0 goto label1;
v8 = 1;
goto label2;
label1:
v8 = 0;
label2:
return v8;
}
public boolean matches(java.net.Inet6Address)
{
byte[] v4, v5;
java.net.InetAddress v2;
java.net.Inet6Address v1;
int v10, v6, v8, v9;
org.wildfly.common.net.CidrAddress v0;
boolean v11, v3, v7;
v0 := @this: org.wildfly.common.net.CidrAddress;
v1 := @parameter0: java.net.Inet6Address;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("address", v1);
v2 = v0.<org.wildfly.common.net.CidrAddress: java.net.InetAddress networkAddress>;
v3 = v2 instanceof java.net.Inet6Address;
if v3 == 0 goto label2;
v4 = v0.<org.wildfly.common.net.CidrAddress: byte[] cachedBytes>;
v5 = virtualinvoke v1.<java.net.Inet6Address: byte[] getAddress()>();
v6 = v0.<org.wildfly.common.net.CidrAddress: int netmaskBits>;
v7 = staticinvoke <org.wildfly.common.net.CidrAddress: boolean bitsMatch(byte[],byte[],int)>(v4, v5, v6);
if v7 == 0 goto label2;
v8 = virtualinvoke v0.<org.wildfly.common.net.CidrAddress: int getScopeId()>();
if v8 == 0 goto label1;
v9 = virtualinvoke v0.<org.wildfly.common.net.CidrAddress: int getScopeId()>();
v10 = virtualinvoke v1.<java.net.Inet6Address: int getScopeId()>();
if v9 != v10 goto label2;
label1:
v11 = 1;
goto label3;
label2:
v11 = 0;
label3:
return v11;
}
public boolean matches(org.wildfly.common.net.CidrAddress)
{
byte[] v4;
int v2, v3, v6, v7, v8;
org.wildfly.common.net.CidrAddress v0, v1;
boolean v5, v9;
v0 := @this: org.wildfly.common.net.CidrAddress;
v1 := @parameter0: org.wildfly.common.net.CidrAddress;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("address", v1);
v2 = v0.<org.wildfly.common.net.CidrAddress: int netmaskBits>;
v3 = v1.<org.wildfly.common.net.CidrAddress: int netmaskBits>;
if v2 > v3 goto label2;
v4 = v1.<org.wildfly.common.net.CidrAddress: byte[] cachedBytes>;
v5 = virtualinvoke v0.<org.wildfly.common.net.CidrAddress: boolean matches(byte[])>(v4);
if v5 == 0 goto label2;
v6 = virtualinvoke v0.<org.wildfly.common.net.CidrAddress: int getScopeId()>();
if v6 == 0 goto label1;
v7 = virtualinvoke v0.<org.wildfly.common.net.CidrAddress: int getScopeId()>();
v8 = virtualinvoke v1.<org.wildfly.common.net.CidrAddress: int getScopeId()>();
if v7 != v8 goto label2;
label1:
v9 = 1;
goto label3;
label2:
v9 = 0;
label3:
return v9;
}
public java.net.InetAddress getNetworkAddress()
{
java.net.InetAddress v1;
org.wildfly.common.net.CidrAddress v0;
v0 := @this: org.wildfly.common.net.CidrAddress;
v1 = v0.<org.wildfly.common.net.CidrAddress: java.net.InetAddress networkAddress>;
return v1;
}
public java.net.Inet4Address getBroadcastAddress()
{
byte[] v3, v7;
java.lang.IllegalStateException v11;
java.net.Inet4Address v1, v5;
java.net.UnknownHostException v10;
java.net.InetAddress v9;
int v2, v4;
java.lang.Object v6;
java.lang.String v8;
org.wildfly.common.net.CidrAddress v0;
v0 := @this: org.wildfly.common.net.CidrAddress;
v1 = v0.<org.wildfly.common.net.CidrAddress: java.net.Inet4Address broadcast>;
if v1 != null goto label7;
v2 = v0.<org.wildfly.common.net.CidrAddress: int netmaskBits>;
if v2 < 31 goto label1;
return null;
label1:
v3 = v0.<org.wildfly.common.net.CidrAddress: byte[] cachedBytes>;
v4 = lengthof v3;
if v4 != 4 goto label6;
if v2 != 0 goto label2;
v5 = <org.wildfly.common.net.Inet: java.net.Inet4Address INET4_BROADCAST>;
v0.<org.wildfly.common.net.CidrAddress: java.net.Inet4Address broadcast> = v5;
return v5;
label2:
v6 = virtualinvoke v3.<java.lang.Object: java.lang.Object clone()>();
v7 = staticinvoke <org.wildfly.common.net.CidrAddress: byte[] maskBits1(byte[],int)>(v6, v2);
label3:
v8 = staticinvoke <org.wildfly.common.net.Inet: java.lang.String toOptimalString(byte[])>(v7);
v9 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])>(v8, v7);
v0.<org.wildfly.common.net.CidrAddress: java.net.Inet4Address broadcast> = v9;
label4:
return v9;
label5:
v10 := @caughtexception;
v11 = staticinvoke <org.wildfly.common.Assert: java.lang.IllegalStateException unreachableCode()>();
throw v11;
label6:
return null;
label7:
return v1;
catch java.net.UnknownHostException from label3 to label4 with label5;
}
public int getNetmaskBits()
{
int v1;
org.wildfly.common.net.CidrAddress v0;
v0 := @this: org.wildfly.common.net.CidrAddress;
v1 = v0.<org.wildfly.common.net.CidrAddress: int netmaskBits>;
return v1;
}
public int getScopeId()
{
int v2;
java.net.InetAddress v1;
org.wildfly.common.net.CidrAddress v0;
v0 := @this: org.wildfly.common.net.CidrAddress;
v1 = virtualinvoke v0.<org.wildfly.common.net.CidrAddress: java.net.InetAddress getNetworkAddress()>();
v2 = staticinvoke <org.wildfly.common.net.Inet: int getScopeId(java.net.InetAddress)>(v1);
return v2;
}
public int compareTo(org.wildfly.common.net.CidrAddress)
{
byte[] v2;
int v3, v4, v5;
org.wildfly.common.net.CidrAddress v0, v1;
v0 := @this: org.wildfly.common.net.CidrAddress;
v1 := @parameter0: org.wildfly.common.net.CidrAddress;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("other", v1);
if v0 != v1 goto label1;
return 0;
label1:
v2 = v1.<org.wildfly.common.net.CidrAddress: byte[] cachedBytes>;
v3 = v1.<org.wildfly.common.net.CidrAddress: int netmaskBits>;
v4 = virtualinvoke v1.<org.wildfly.common.net.CidrAddress: int getScopeId()>();
v5 = virtualinvoke v0.<org.wildfly.common.net.CidrAddress: int compareAddressBytesTo(byte[],int,int)>(v2, v3, v4);
return v5;
}
public int compareAddressBytesTo(byte[], int, int)
{
byte[] v1, v7;
byte v17, v19, v24, v26;
org.wildfly.common.net.CidrAddress v0;
short v18, v20;
org.wildfly.common._private.CommonMessages v5;
int v10, v11, v12, v13, v14, v15, v16, v2, v21, v22, v23, v25, v27, v28, v29, v3, v30, v31, v4, v8, v9;
java.lang.IllegalArgumentException v6;
v0 := @this: org.wildfly.common.net.CidrAddress;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("bytes", v1);
v4 = lengthof v1;
if v4 == 4 goto label1;
if v4 == 16 goto label1;
v5 = <org.wildfly.common._private.CommonMessages: org.wildfly.common._private.CommonMessages msg>;
v6 = interfaceinvoke v5.<org.wildfly.common._private.CommonMessages: java.lang.IllegalArgumentException invalidAddressBytes(int)>(v4);
throw v6;
label1:
v7 = v0.<org.wildfly.common.net.CidrAddress: byte[] cachedBytes>;
v8 = lengthof v7;
v9 = v8 - v4;
v10 = staticinvoke <java.lang.Integer: int signum(int)>(v9);
if v10 == 0 goto label2;
return v10;
label2:
v11 = virtualinvoke v0.<org.wildfly.common.net.CidrAddress: int getScopeId()>();
v12 = v3 - v11;
v13 = staticinvoke <java.lang.Integer: int signum(int)>(v12);
if v13 == 0 goto label3;
return v13;
label3:
v14 = v0.<org.wildfly.common.net.CidrAddress: int netmaskBits>;
v15 = staticinvoke <java.lang.Math: int min(int,int)>(v14, v2);
v16 = 0;
label4:
if v15 < 8 goto label6;
v17 = v7[v16];
v18 = v17 & 255;
v19 = v1[v16];
v20 = v19 & 255;
v21 = v18 - v20;
v22 = staticinvoke <java.lang.Integer: int signum(int)>(v21);
if v22 == 0 goto label5;
return v22;
label5:
v16 = v16 + 1;
v15 = v15 - 8;
goto label4;
label6:
if v15 <= 0 goto label8;
v23 = 1 << v15;
v24 = v7[v16];
v25 = v24 & v23;
v26 = v1[v16];
v27 = v26 & v23;
v28 = v25 - v27;
v29 = staticinvoke <java.lang.Integer: int signum(int)>(v28);
if v29 == 0 goto label7;
return v29;
label7:
v15 = v15 - 1;
goto label6;
label8:
v30 = v14 - v2;
v31 = staticinvoke <java.lang.Integer: int signum(int)>(v30);
return v31;
}
public boolean equals(java.lang.Object)
{
java.lang.Object v1;
org.wildfly.common.net.CidrAddress v0;
boolean v2, v3, v4;
v0 := @this: org.wildfly.common.net.CidrAddress;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof org.wildfly.common.net.CidrAddress;
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<org.wildfly.common.net.CidrAddress: boolean equals(org.wildfly.common.net.CidrAddress)>(v1);
if v3 == 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean equals(org.wildfly.common.net.CidrAddress)
{
byte[] v4, v5;
int v2, v3;
org.wildfly.common.net.CidrAddress v0, v1;
boolean v6, v7;
v0 := @this: org.wildfly.common.net.CidrAddress;
v1 := @parameter0: org.wildfly.common.net.CidrAddress;
if v1 == v0 goto label1;
if v1 == null goto label2;
v2 = v0.<org.wildfly.common.net.CidrAddress: int netmaskBits>;
v3 = v1.<org.wildfly.common.net.CidrAddress: int netmaskBits>;
if v2 != v3 goto label2;
v4 = v0.<org.wildfly.common.net.CidrAddress: byte[] cachedBytes>;
v5 = v1.<org.wildfly.common.net.CidrAddress: byte[] cachedBytes>;
v6 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(v4, v5);
if v6 == 0 goto label2;
label1:
v7 = 1;
goto label3;
label2:
v7 = 0;
label3:
return v7;
}
public int hashCode()
{
byte[] v3;
int v1, v2, v4;
org.wildfly.common.net.CidrAddress v0;
v0 := @this: org.wildfly.common.net.CidrAddress;
v1 = v0.<org.wildfly.common.net.CidrAddress: int hashCode>;
if v1 != 0 goto label2;
v2 = v0.<org.wildfly.common.net.CidrAddress: int netmaskBits>;
v3 = v0.<org.wildfly.common.net.CidrAddress: byte[] cachedBytes>;
v4 = staticinvoke <java.util.Arrays: int hashCode(byte[])>(v3);
v1 = staticinvoke <org.wildfly.common.math.HashMath: int multiHashOrdered(int,int)>(v2, v4);
if v1 != 0 goto label1;
v1 = 1;
label1:
v0.<org.wildfly.common.net.CidrAddress: int hashCode> = v1;
label2:
return v1;
}
public java.lang.String toString()
{
byte[] v10, v4;
java.lang.Object[] v3, v9;
java.lang.Integer v12, v14, v7;
int v13, v2, v6;
java.lang.String v1, v11, v15, v5, v8;
org.wildfly.common.net.CidrAddress v0;
v0 := @this: org.wildfly.common.net.CidrAddress;
v1 = v0.<org.wildfly.common.net.CidrAddress: java.lang.String toString>;
if v1 != null goto label2;
v2 = virtualinvoke v0.<org.wildfly.common.net.CidrAddress: int getScopeId()>();
if v2 != 0 goto label1;
v3 = newarray (java.lang.Object)[2];
v4 = v0.<org.wildfly.common.net.CidrAddress: byte[] cachedBytes>;
v5 = staticinvoke <org.wildfly.common.net.Inet: java.lang.String toOptimalString(byte[])>(v4);
v3[0] = v5;
v6 = v0.<org.wildfly.common.net.CidrAddress: int netmaskBits>;
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
v3[1] = v7;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s/%d", v3);
v0.<org.wildfly.common.net.CidrAddress: java.lang.String toString> = v8;
return v8;
label1:
v9 = newarray (java.lang.Object)[3];
v10 = v0.<org.wildfly.common.net.CidrAddress: byte[] cachedBytes>;
v11 = staticinvoke <org.wildfly.common.net.Inet: java.lang.String toOptimalString(byte[])>(v10);
v9[0] = v11;
v12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v9[1] = v12;
v13 = v0.<org.wildfly.common.net.CidrAddress: int netmaskBits>;
v14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v13);
v9[2] = v14;
v15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s%%%d/%d", v9);
v0.<org.wildfly.common.net.CidrAddress: java.lang.String toString> = v15;
return v15;
label2:
return v1;
}
java.lang.Object writeReplace()
{
byte[] v2;
org.wildfly.common.net.CidrAddress$Ser v1;
int v3;
org.wildfly.common.net.CidrAddress v0;
v0 := @this: org.wildfly.common.net.CidrAddress;
v1 = new org.wildfly.common.net.CidrAddress$Ser;
v2 = v0.<org.wildfly.common.net.CidrAddress: byte[] cachedBytes>;
v3 = v0.<org.wildfly.common.net.CidrAddress: int netmaskBits>;
specialinvoke v1.<org.wildfly.common.net.CidrAddress$Ser: void <init>(byte[],int)>(v2, v3);
return v1;
}
private static boolean bitsMatch(byte[], byte[], int)
{
byte[] v0, v1;
java.lang.AssertionError v11, v6;
short v15, v18;
byte v14, v17, v8, v9;
int v12, v13, v16, v19, v2, v3, v5, v7;
boolean v10, v4;
v0 := @parameter0: byte[];
v1 := @parameter1: byte[];
v2 := @parameter2: int;
v3 = lengthof v0;
v4 = <org.wildfly.common.net.CidrAddress: boolean $assertionsDisabled>;
if v4 != 0 goto label1;
v5 = lengthof v1;
if v3 == v5 goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
v7 = 0;
label2:
if v2 < 8 goto label4;
if v7 >= v3 goto label4;
v8 = v0[v7];
v9 = v1[v7];
if v8 == v9 goto label3;
return 0;
label3:
v7 = v7 + 1;
v2 = v2 - 8;
goto label2;
label4:
if v2 <= 0 goto label6;
v10 = <org.wildfly.common.net.CidrAddress: boolean $assertionsDisabled>;
if v10 != 0 goto label5;
if v2 < 8 goto label5;
v11 = new java.lang.AssertionError;
specialinvoke v11.<java.lang.AssertionError: void <init>()>();
throw v11;
label5:
v12 = 8 - v2;
v13 = 255 << v12;
v14 = v0[v7];
v15 = v14 & 255;
v16 = v15 & v13;
v17 = v1[v7];
v18 = v17 & 255;
v19 = v18 & v13;
if v16 == v19 goto label6;
return 0;
label6:
return 1;
}
private static byte[] maskBits0(byte[], int)
{
byte[] v0;
java.lang.AssertionError v5;
byte v9;
int v1, v10, v11, v2, v3, v6, v7, v8;
boolean v4;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 = lengthof v0;
v3 = 0;
label1:
if v1 < 8 goto label2;
if v3 >= v2 goto label2;
v3 = v3 + 1;
v1 = v1 - 8;
goto label1;
label2:
if v1 <= 0 goto label4;
v4 = <org.wildfly.common.net.CidrAddress: boolean $assertionsDisabled>;
if v4 != 0 goto label3;
if v1 < 8 goto label3;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label3:
v6 = 8 - v1;
v7 = 255 << v6;
v8 = v3;
v3 = v3 + 1;
v9 = v0[v8];
v10 = v9 & v7;
v0[v8] = v10;
label4:
if v3 >= v2 goto label5;
v11 = v3;
v3 = v3 + 1;
v0[v11] = 0;
goto label4;
label5:
return v0;
}
private static byte[] maskBits1(byte[], int)
{
byte[] v0;
java.lang.AssertionError v5;
byte v9;
int v1, v10, v11, v2, v3, v6, v7, v8;
boolean v4;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 = lengthof v0;
v3 = 0;
label1:
if v1 < 8 goto label2;
if v3 >= v2 goto label2;
v3 = v3 + 1;
v1 = v1 - 8;
goto label1;
label2:
if v1 <= 0 goto label4;
v4 = <org.wildfly.common.net.CidrAddress: boolean $assertionsDisabled>;
if v4 != 0 goto label3;
if v1 < 8 goto label3;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label3:
v6 = 8 - v1;
v7 = 255 >>> v6;
v8 = v3;
v3 = v3 + 1;
v9 = v0[v8];
v10 = v9 | v7;
v0[v8] = v10;
label4:
if v3 >= v2 goto label5;
v11 = v3;
v3 = v3 + 1;
v0[v11] = -1;
goto label4;
label5:
return v0;
}
static void <clinit>()
{
java.net.Inet6Address v6;
java.lang.Class v0;
java.net.Inet4Address v4;
org.wildfly.common.net.CidrAddress v3, v5;
boolean v1, v2;
v0 = class "Lorg/wildfly/common/net/CidrAddress;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<org.wildfly.common.net.CidrAddress: boolean $assertionsDisabled> = v2;
v3 = new org.wildfly.common.net.CidrAddress;
v4 = <org.wildfly.common.net.Inet: java.net.Inet4Address INET4_ANY>;
specialinvoke v3.<org.wildfly.common.net.CidrAddress: void <init>(java.net.InetAddress,int)>(v4, 0);
<org.wildfly.common.net.CidrAddress: org.wildfly.common.net.CidrAddress INET4_ANY_CIDR> = v3;
v5 = new org.wildfly.common.net.CidrAddress;
v6 = <org.wildfly.common.net.Inet: java.net.Inet6Address INET6_ANY>;
specialinvoke v5.<org.wildfly.common.net.CidrAddress: void <init>(java.net.InetAddress,int)>(v6, 0);
<org.wildfly.common.net.CidrAddress: org.wildfly.common.net.CidrAddress INET6_ANY_CIDR> = v5;
return;
}
}