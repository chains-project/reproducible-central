public final enum class org.yaml.snakeyaml.DumperOptions$Version extends java.lang.Enum
{
public static final enum org.yaml.snakeyaml.DumperOptions$Version V1_0;
public static final enum org.yaml.snakeyaml.DumperOptions$Version V1_1;
private final java.lang.Integer[] version;
private static final org.yaml.snakeyaml.DumperOptions$Version[] $VALUES;
public static org.yaml.snakeyaml.DumperOptions$Version[] values()
{
java.lang.Object v1;
org.yaml.snakeyaml.DumperOptions$Version[] v0;
v0 = <org.yaml.snakeyaml.DumperOptions$Version: org.yaml.snakeyaml.DumperOptions$Version[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static org.yaml.snakeyaml.DumperOptions$Version valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/yaml/snakeyaml/DumperOptions$Version;", v0);
return v1;
}
private void <init>(java.lang.String, int, java.lang.Integer[])
{
int v2;
org.yaml.snakeyaml.DumperOptions$Version v0;
java.lang.String v1;
java.lang.Integer[] v3;
v0 := @this: org.yaml.snakeyaml.DumperOptions$Version;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.Integer[];
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
v0.<org.yaml.snakeyaml.DumperOptions$Version: java.lang.Integer[] version> = v3;
return;
}
public int major()
{
int v3;
org.yaml.snakeyaml.DumperOptions$Version v0;
java.lang.Integer v2;
java.lang.Integer[] v1;
v0 := @this: org.yaml.snakeyaml.DumperOptions$Version;
v1 = v0.<org.yaml.snakeyaml.DumperOptions$Version: java.lang.Integer[] version>;
v2 = v1[0];
v3 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
return v3;
}
public int minor()
{
int v3;
org.yaml.snakeyaml.DumperOptions$Version v0;
java.lang.Integer v2;
java.lang.Integer[] v1;
v0 := @this: org.yaml.snakeyaml.DumperOptions$Version;
v1 = v0.<org.yaml.snakeyaml.DumperOptions$Version: java.lang.Integer[] version>;
v2 = v1[1];
v3 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
return v3;
}
public java.lang.String getRepresentation()
{
org.yaml.snakeyaml.DumperOptions$Version v0;
java.lang.String v5;
java.lang.Integer v2, v4;
java.lang.Integer[] v1, v3;
v0 := @this: org.yaml.snakeyaml.DumperOptions$Version;
v1 = v0.<org.yaml.snakeyaml.DumperOptions$Version: java.lang.Integer[] version>;
v2 = v1[0];
v3 = v0.<org.yaml.snakeyaml.DumperOptions$Version: java.lang.Integer[] version>;
v4 = v3[1];
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Integer,java.lang.Integer)>(v2, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.\u0001");
return v5;
}
public java.lang.String toString()
{
org.yaml.snakeyaml.DumperOptions$Version v0;
java.lang.String v1, v2;
v0 := @this: org.yaml.snakeyaml.DumperOptions$Version;
v1 = virtualinvoke v0.<org.yaml.snakeyaml.DumperOptions$Version: java.lang.String getRepresentation()>();
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Version: \u0001");
return v2;
}
private static org.yaml.snakeyaml.DumperOptions$Version[] $values()
{
org.yaml.snakeyaml.DumperOptions$Version v1, v2;
org.yaml.snakeyaml.DumperOptions$Version[] v0;
v0 = newarray (org.yaml.snakeyaml.DumperOptions$Version)[2];
v1 = <org.yaml.snakeyaml.DumperOptions$Version: org.yaml.snakeyaml.DumperOptions$Version V1_0>;
v0[0] = v1;
v2 = <org.yaml.snakeyaml.DumperOptions$Version: org.yaml.snakeyaml.DumperOptions$Version V1_1>;
v0[1] = v2;
return v0;
}
static void <clinit>()
{
org.yaml.snakeyaml.DumperOptions$Version v0, v4;
java.lang.Integer v2, v3, v6, v7;
org.yaml.snakeyaml.DumperOptions$Version[] v8;
java.lang.Integer[] v1, v5;
v0 = new org.yaml.snakeyaml.DumperOptions$Version;
v1 = newarray (java.lang.Integer)[2];
v2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
v1[0] = v2;
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
v1[1] = v3;
specialinvoke v0.<org.yaml.snakeyaml.DumperOptions$Version: void <init>(java.lang.String,int,java.lang.Integer[])>("V1_0", 0, v1);
<org.yaml.snakeyaml.DumperOptions$Version: org.yaml.snakeyaml.DumperOptions$Version V1_0> = v0;
v4 = new org.yaml.snakeyaml.DumperOptions$Version;
v5 = newarray (java.lang.Integer)[2];
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
v5[0] = v6;
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
v5[1] = v7;
specialinvoke v4.<org.yaml.snakeyaml.DumperOptions$Version: void <init>(java.lang.String,int,java.lang.Integer[])>("V1_1", 1, v5);
<org.yaml.snakeyaml.DumperOptions$Version: org.yaml.snakeyaml.DumperOptions$Version V1_1> = v4;
v8 = staticinvoke <org.yaml.snakeyaml.DumperOptions$Version: org.yaml.snakeyaml.DumperOptions$Version[] $values()>();
<org.yaml.snakeyaml.DumperOptions$Version: org.yaml.snakeyaml.DumperOptions$Version[] $VALUES> = v8;
return;
}
}