public class org.yaml.snakeyaml.comments.CommentEventsCollector extends java.lang.Object
{
private java.util.List commentLineList;
private final java.util.Queue eventSource;
private final org.yaml.snakeyaml.comments.CommentType[] expectedCommentTypes;
public transient void <init>(org.yaml.snakeyaml.parser.Parser, org.yaml.snakeyaml.comments.CommentType[])
{
org.yaml.snakeyaml.comments.CommentEventsCollector v0;
org.yaml.snakeyaml.comments.CommentType[] v2;
org.yaml.snakeyaml.parser.Parser v1;
org.yaml.snakeyaml.comments.CommentEventsCollector$1 v3;
java.util.ArrayList v4;
v0 := @this: org.yaml.snakeyaml.comments.CommentEventsCollector;
v1 := @parameter0: org.yaml.snakeyaml.parser.Parser;
v2 := @parameter1: org.yaml.snakeyaml.comments.CommentType[];
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new org.yaml.snakeyaml.comments.CommentEventsCollector$1;
specialinvoke v3.<org.yaml.snakeyaml.comments.CommentEventsCollector$1: void <init>(org.yaml.snakeyaml.comments.CommentEventsCollector,org.yaml.snakeyaml.parser.Parser)>(v0, v1);
v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.Queue eventSource> = v3;
v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.comments.CommentType[] expectedCommentTypes> = v2;
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List commentLineList> = v4;
return;
}
public transient void <init>(java.util.Queue, org.yaml.snakeyaml.comments.CommentType[])
{
org.yaml.snakeyaml.comments.CommentEventsCollector v0;
org.yaml.snakeyaml.comments.CommentType[] v2;
java.util.Queue v1;
java.util.ArrayList v3;
v0 := @this: org.yaml.snakeyaml.comments.CommentEventsCollector;
v1 := @parameter0: java.util.Queue;
v2 := @parameter1: org.yaml.snakeyaml.comments.CommentType[];
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.Queue eventSource> = v1;
v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.comments.CommentType[] expectedCommentTypes> = v2;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List commentLineList> = v3;
return;
}
private boolean isEventExpected(org.yaml.snakeyaml.events.Event)
{
org.yaml.snakeyaml.events.Event$ID v2;
org.yaml.snakeyaml.comments.CommentType[] v4;
org.yaml.snakeyaml.events.Event v1;
org.yaml.snakeyaml.comments.CommentEventsCollector v0;
org.yaml.snakeyaml.comments.CommentType v7, v8;
int v5, v6;
boolean v3;
v0 := @this: org.yaml.snakeyaml.comments.CommentEventsCollector;
v1 := @parameter0: org.yaml.snakeyaml.events.Event;
if v1 == null goto label1;
v2 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID Comment>;
v3 = virtualinvoke v1.<org.yaml.snakeyaml.events.Event: boolean is(org.yaml.snakeyaml.events.Event$ID)>(v2);
if v3 != 0 goto label2;
label1:
return 0;
label2:
v4 = v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.comments.CommentType[] expectedCommentTypes>;
v5 = lengthof v4;
v6 = 0;
label3:
if v6 >= v5 goto label5;
v7 = v4[v6];
v8 = virtualinvoke v1.<org.yaml.snakeyaml.events.CommentEvent: org.yaml.snakeyaml.comments.CommentType getCommentType()>();
if v8 != v7 goto label4;
return 1;
label4:
v6 = v6 + 1;
goto label3;
label5:
return 0;
}
public org.yaml.snakeyaml.comments.CommentEventsCollector collectEvents()
{
org.yaml.snakeyaml.comments.CommentEventsCollector v0;
v0 := @this: org.yaml.snakeyaml.comments.CommentEventsCollector;
virtualinvoke v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.events.Event collectEvents(org.yaml.snakeyaml.events.Event)>(null);
return v0;
}
public org.yaml.snakeyaml.events.Event collectEvents(org.yaml.snakeyaml.events.Event)
{
org.yaml.snakeyaml.comments.CommentLine v4, v9;
org.yaml.snakeyaml.events.Event v1;
org.yaml.snakeyaml.comments.CommentEventsCollector v0;
java.util.List v3, v8;
java.lang.Object v11, v6;
java.util.Queue v10, v5;
boolean v2, v7;
v0 := @this: org.yaml.snakeyaml.comments.CommentEventsCollector;
v1 := @parameter0: org.yaml.snakeyaml.events.Event;
if v1 == null goto label2;
v2 = specialinvoke v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: boolean isEventExpected(org.yaml.snakeyaml.events.Event)>(v1);
if v2 == 0 goto label1;
v3 = v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List commentLineList>;
v4 = new org.yaml.snakeyaml.comments.CommentLine;
specialinvoke v4.<org.yaml.snakeyaml.comments.CommentLine: void <init>(org.yaml.snakeyaml.events.CommentEvent)>(v1);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v4);
goto label2;
label1:
return v1;
label2:
v5 = v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.Queue eventSource>;
v6 = interfaceinvoke v5.<java.util.Queue: java.lang.Object peek()>();
v7 = specialinvoke v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: boolean isEventExpected(org.yaml.snakeyaml.events.Event)>(v6);
if v7 == 0 goto label3;
v8 = v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List commentLineList>;
v9 = new org.yaml.snakeyaml.comments.CommentLine;
v10 = v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.Queue eventSource>;
v11 = interfaceinvoke v10.<java.util.Queue: java.lang.Object poll()>();
specialinvoke v9.<org.yaml.snakeyaml.comments.CommentLine: void <init>(org.yaml.snakeyaml.events.CommentEvent)>(v11);
interfaceinvoke v8.<java.util.List: boolean add(java.lang.Object)>(v9);
goto label2;
label3:
return null;
}
public org.yaml.snakeyaml.events.Event collectEventsAndPoll(org.yaml.snakeyaml.events.Event)
{
org.yaml.snakeyaml.comments.CommentEventsCollector v0;
java.lang.Object v4;
java.util.Queue v3;
org.yaml.snakeyaml.events.Event v1, v2;
v0 := @this: org.yaml.snakeyaml.comments.CommentEventsCollector;
v1 := @parameter0: org.yaml.snakeyaml.events.Event;
v2 = virtualinvoke v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.events.Event collectEvents(org.yaml.snakeyaml.events.Event)>(v1);
if v2 != null goto label1;
v3 = v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.Queue eventSource>;
v4 = interfaceinvoke v3.<java.util.Queue: java.lang.Object poll()>();
label1:
return v4;
}
public java.util.List consume()
{
java.lang.Throwable v3;
org.yaml.snakeyaml.comments.CommentEventsCollector v0;
java.util.List v1;
java.util.ArrayList v2, v4;
v0 := @this: org.yaml.snakeyaml.comments.CommentEventsCollector;
label1:
v1 = v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List commentLineList>;
label2:
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List commentLineList> = v2;
return v1;
label3:
v3 := @caughtexception;
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List commentLineList> = v4;
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public boolean isEmpty()
{
org.yaml.snakeyaml.comments.CommentEventsCollector v0;
java.util.List v1;
boolean v2;
v0 := @this: org.yaml.snakeyaml.comments.CommentEventsCollector;
v1 = v0.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List commentLineList>;
v2 = interfaceinvoke v1.<java.util.List: boolean isEmpty()>();
return v2;
}
}