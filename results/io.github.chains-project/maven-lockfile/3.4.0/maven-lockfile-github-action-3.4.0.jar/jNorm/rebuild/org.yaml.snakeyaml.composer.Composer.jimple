public class org.yaml.snakeyaml.composer.Composer extends java.lang.Object
{
protected final org.yaml.snakeyaml.parser.Parser parser;
private final org.yaml.snakeyaml.resolver.Resolver resolver;
private final java.util.Map anchors;
private final java.util.Set recursiveNodes;
private int nonScalarAliasesCount;
private final org.yaml.snakeyaml.LoaderOptions loadingConfig;
private final org.yaml.snakeyaml.comments.CommentEventsCollector blockCommentsCollector;
private final org.yaml.snakeyaml.comments.CommentEventsCollector inlineCommentsCollector;
private int nestingDepth;
private final int nestingDepthLimit;
public void <init>(org.yaml.snakeyaml.parser.Parser, org.yaml.snakeyaml.resolver.Resolver, org.yaml.snakeyaml.LoaderOptions)
{
java.util.HashMap v7;
java.lang.NullPointerException v4, v5, v6;
java.util.HashSet v8;
org.yaml.snakeyaml.comments.CommentEventsCollector v13, v9;
org.yaml.snakeyaml.composer.Composer v0;
int v16;
org.yaml.snakeyaml.resolver.Resolver v2;
org.yaml.snakeyaml.parser.Parser v1;
org.yaml.snakeyaml.comments.CommentType[] v10, v14;
org.yaml.snakeyaml.LoaderOptions v3;
org.yaml.snakeyaml.comments.CommentType v11, v12, v15;
v0 := @this: org.yaml.snakeyaml.composer.Composer;
v1 := @parameter0: org.yaml.snakeyaml.parser.Parser;
v2 := @parameter1: org.yaml.snakeyaml.resolver.Resolver;
v3 := @parameter2: org.yaml.snakeyaml.LoaderOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.yaml.snakeyaml.composer.Composer: int nonScalarAliasesCount> = 0;
v0.<org.yaml.snakeyaml.composer.Composer: int nestingDepth> = 0;
if v1 != null goto label1;
v4 = new java.lang.NullPointerException;
specialinvoke v4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Parser must be provided");
throw v4;
label1:
if v2 != null goto label2;
v5 = new java.lang.NullPointerException;
specialinvoke v5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Resolver must be provided");
throw v5;
label2:
if v3 != null goto label3;
v6 = new java.lang.NullPointerException;
specialinvoke v6.<java.lang.NullPointerException: void <init>(java.lang.String)>("LoaderOptions must be provided");
throw v6;
label3:
v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser> = v1;
v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.resolver.Resolver resolver> = v2;
v7 = new java.util.HashMap;
specialinvoke v7.<java.util.HashMap: void <init>()>();
v0.<org.yaml.snakeyaml.composer.Composer: java.util.Map anchors> = v7;
v8 = new java.util.HashSet;
specialinvoke v8.<java.util.HashSet: void <init>()>();
v0.<org.yaml.snakeyaml.composer.Composer: java.util.Set recursiveNodes> = v8;
v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.LoaderOptions loadingConfig> = v3;
v9 = new org.yaml.snakeyaml.comments.CommentEventsCollector;
v10 = newarray (org.yaml.snakeyaml.comments.CommentType)[2];
v11 = <org.yaml.snakeyaml.comments.CommentType: org.yaml.snakeyaml.comments.CommentType BLANK_LINE>;
v10[0] = v11;
v12 = <org.yaml.snakeyaml.comments.CommentType: org.yaml.snakeyaml.comments.CommentType BLOCK>;
v10[1] = v12;
specialinvoke v9.<org.yaml.snakeyaml.comments.CommentEventsCollector: void <init>(org.yaml.snakeyaml.parser.Parser,org.yaml.snakeyaml.comments.CommentType[])>(v1, v10);
v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector blockCommentsCollector> = v9;
v13 = new org.yaml.snakeyaml.comments.CommentEventsCollector;
v14 = newarray (org.yaml.snakeyaml.comments.CommentType)[1];
v15 = <org.yaml.snakeyaml.comments.CommentType: org.yaml.snakeyaml.comments.CommentType IN_LINE>;
v14[0] = v15;
specialinvoke v13.<org.yaml.snakeyaml.comments.CommentEventsCollector: void <init>(org.yaml.snakeyaml.parser.Parser,org.yaml.snakeyaml.comments.CommentType[])>(v1, v14);
v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector inlineCommentsCollector> = v13;
v16 = virtualinvoke v3.<org.yaml.snakeyaml.LoaderOptions: int getNestingDepthLimit()>();
v0.<org.yaml.snakeyaml.composer.Composer: int nestingDepthLimit> = v16;
return;
}
public boolean checkNode()
{
org.yaml.snakeyaml.events.Event$ID v2, v6;
org.yaml.snakeyaml.composer.Composer v0;
org.yaml.snakeyaml.parser.Parser v1, v4, v5;
boolean v3, v7, v8;
v0 := @this: org.yaml.snakeyaml.composer.Composer;
v1 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v2 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID StreamStart>;
v3 = interfaceinvoke v1.<org.yaml.snakeyaml.parser.Parser: boolean checkEvent(org.yaml.snakeyaml.events.Event$ID)>(v2);
if v3 == 0 goto label1;
v4 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
interfaceinvoke v4.<org.yaml.snakeyaml.parser.Parser: org.yaml.snakeyaml.events.Event getEvent()>();
label1:
v5 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v6 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID StreamEnd>;
v7 = interfaceinvoke v5.<org.yaml.snakeyaml.parser.Parser: boolean checkEvent(org.yaml.snakeyaml.events.Event$ID)>(v6);
if v7 != 0 goto label2;
v8 = 1;
goto label3;
label2:
v8 = 0;
label3:
return v8;
}
public org.yaml.snakeyaml.nodes.Node getNode()
{
org.yaml.snakeyaml.DumperOptions$FlowStyle v12;
org.yaml.snakeyaml.nodes.MappingNode v10;
org.yaml.snakeyaml.comments.CommentEventsCollector v1, v15, v16, v18, v5;
org.yaml.snakeyaml.nodes.Node v14;
org.yaml.snakeyaml.composer.Composer v0;
java.util.Map v21;
org.yaml.snakeyaml.parser.Parser v13, v2, v20;
boolean v17, v4;
org.yaml.snakeyaml.events.Event$ID v3;
java.util.Set v22;
org.yaml.snakeyaml.nodes.Tag v11;
java.util.List v19, v6, v9;
org.yaml.snakeyaml.error.Mark v8;
java.lang.Object v7;
v0 := @this: org.yaml.snakeyaml.composer.Composer;
v1 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector blockCommentsCollector>;
virtualinvoke v1.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.comments.CommentEventsCollector collectEvents()>();
v2 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v3 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID StreamEnd>;
v4 = interfaceinvoke v2.<org.yaml.snakeyaml.parser.Parser: boolean checkEvent(org.yaml.snakeyaml.events.Event$ID)>(v3);
if v4 == 0 goto label1;
v5 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector blockCommentsCollector>;
v6 = virtualinvoke v5.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List consume()>();
v7 = interfaceinvoke v6.<java.util.List: java.lang.Object get(int)>(0);
v8 = virtualinvoke v7.<org.yaml.snakeyaml.comments.CommentLine: org.yaml.snakeyaml.error.Mark getStartMark()>();
v9 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v10 = new org.yaml.snakeyaml.nodes.MappingNode;
v11 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag COMMENT>;
v12 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle BLOCK>;
specialinvoke v10.<org.yaml.snakeyaml.nodes.MappingNode: void <init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v11, 0, v9, v8, null, v12);
virtualinvoke v10.<org.yaml.snakeyaml.nodes.Node: void setBlockComments(java.util.List)>(v6);
return v10;
label1:
v13 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
interfaceinvoke v13.<org.yaml.snakeyaml.parser.Parser: org.yaml.snakeyaml.events.Event getEvent()>();
v14 = specialinvoke v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.nodes.Node composeNode(org.yaml.snakeyaml.nodes.Node)>(null);
v15 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector blockCommentsCollector>;
virtualinvoke v15.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.comments.CommentEventsCollector collectEvents()>();
v16 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector blockCommentsCollector>;
v17 = virtualinvoke v16.<org.yaml.snakeyaml.comments.CommentEventsCollector: boolean isEmpty()>();
if v17 != 0 goto label2;
v18 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector blockCommentsCollector>;
v19 = virtualinvoke v18.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List consume()>();
virtualinvoke v14.<org.yaml.snakeyaml.nodes.Node: void setEndComments(java.util.List)>(v19);
label2:
v20 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
interfaceinvoke v20.<org.yaml.snakeyaml.parser.Parser: org.yaml.snakeyaml.events.Event getEvent()>();
v21 = v0.<org.yaml.snakeyaml.composer.Composer: java.util.Map anchors>;
interfaceinvoke v21.<java.util.Map: void clear()>();
v22 = v0.<org.yaml.snakeyaml.composer.Composer: java.util.Set recursiveNodes>;
interfaceinvoke v22.<java.util.Set: void clear()>();
return v14;
}
public org.yaml.snakeyaml.nodes.Node getSingleNode()
{
org.yaml.snakeyaml.composer.ComposerException v12;
org.yaml.snakeyaml.events.Event$ID v4, v7;
org.yaml.snakeyaml.events.Event v10;
org.yaml.snakeyaml.nodes.Node v2;
org.yaml.snakeyaml.error.Mark v11, v13;
org.yaml.snakeyaml.composer.Composer v0;
org.yaml.snakeyaml.parser.Parser v1, v14, v3, v6, v9;
boolean v5, v8;
v0 := @this: org.yaml.snakeyaml.composer.Composer;
v1 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
interfaceinvoke v1.<org.yaml.snakeyaml.parser.Parser: org.yaml.snakeyaml.events.Event getEvent()>();
v2 = null;
v3 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v4 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID StreamEnd>;
v5 = interfaceinvoke v3.<org.yaml.snakeyaml.parser.Parser: boolean checkEvent(org.yaml.snakeyaml.events.Event$ID)>(v4);
if v5 != 0 goto label1;
v2 = virtualinvoke v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.nodes.Node getNode()>();
label1:
v6 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v7 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID StreamEnd>;
v8 = interfaceinvoke v6.<org.yaml.snakeyaml.parser.Parser: boolean checkEvent(org.yaml.snakeyaml.events.Event$ID)>(v7);
if v8 != 0 goto label4;
v9 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v10 = interfaceinvoke v9.<org.yaml.snakeyaml.parser.Parser: org.yaml.snakeyaml.events.Event getEvent()>();
if v2 == null goto label2;
v11 = virtualinvoke v2.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
goto label3;
label2:
v11 = null;
label3:
v12 = new org.yaml.snakeyaml.composer.ComposerException;
v13 = virtualinvoke v10.<org.yaml.snakeyaml.events.Event: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v12.<org.yaml.snakeyaml.composer.ComposerException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)>("expected a single document in the stream", v11, "but found another document", v13);
throw v12;
label4:
v14 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
interfaceinvoke v14.<org.yaml.snakeyaml.parser.Parser: org.yaml.snakeyaml.events.Event getEvent()>();
return v2;
}
private org.yaml.snakeyaml.nodes.Node composeNode(org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.composer.ComposerException v12;
org.yaml.snakeyaml.events.Event v33, v8;
org.yaml.snakeyaml.comments.CommentEventsCollector v2, v29, v30, v31, v38;
org.yaml.snakeyaml.nodes.Node v1;
org.yaml.snakeyaml.composer.Composer v0;
java.util.Map v10, v15;
org.yaml.snakeyaml.parser.Parser v32, v35, v4, v40, v7;
boolean v11, v17, v28, v37, v42, v6;
org.yaml.snakeyaml.events.Event$ID v36, v41, v5;
java.util.Set v27, v3, v43;
java.util.List v39;
org.yaml.snakeyaml.error.Mark v14;
org.yaml.snakeyaml.error.YAMLException v23;
int v18, v19, v20, v22, v25;
java.lang.String v13, v26, v34, v9;
org.yaml.snakeyaml.LoaderOptions v21, v24;
java.lang.Object v16;
v0 := @this: org.yaml.snakeyaml.composer.Composer;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector blockCommentsCollector>;
virtualinvoke v2.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.comments.CommentEventsCollector collectEvents()>();
if v1 == null goto label1;
v3 = v0.<org.yaml.snakeyaml.composer.Composer: java.util.Set recursiveNodes>;
interfaceinvoke v3.<java.util.Set: boolean add(java.lang.Object)>(v1);
label1:
v4 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v5 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID Alias>;
v6 = interfaceinvoke v4.<org.yaml.snakeyaml.parser.Parser: boolean checkEvent(org.yaml.snakeyaml.events.Event$ID)>(v5);
if v6 == 0 goto label5;
v7 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v8 = interfaceinvoke v7.<org.yaml.snakeyaml.parser.Parser: org.yaml.snakeyaml.events.Event getEvent()>();
v9 = virtualinvoke v8.<org.yaml.snakeyaml.events.AliasEvent: java.lang.String getAnchor()>();
v10 = v0.<org.yaml.snakeyaml.composer.Composer: java.util.Map anchors>;
v11 = interfaceinvoke v10.<java.util.Map: boolean containsKey(java.lang.Object)>(v9);
if v11 != 0 goto label2;
v12 = new org.yaml.snakeyaml.composer.ComposerException;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("found undefined alias \u0001");
v14 = virtualinvoke v8.<org.yaml.snakeyaml.events.AliasEvent: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v12.<org.yaml.snakeyaml.composer.ComposerException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)>(null, null, v13, v14);
throw v12;
label2:
v15 = v0.<org.yaml.snakeyaml.composer.Composer: java.util.Map anchors>;
v16 = interfaceinvoke v15.<java.util.Map: java.lang.Object get(java.lang.Object)>(v9);
v17 = v16 instanceof org.yaml.snakeyaml.nodes.ScalarNode;
if v17 != 0 goto label3;
v18 = v0.<org.yaml.snakeyaml.composer.Composer: int nonScalarAliasesCount>;
v19 = v18 + 1;
v0.<org.yaml.snakeyaml.composer.Composer: int nonScalarAliasesCount> = v19;
v20 = v0.<org.yaml.snakeyaml.composer.Composer: int nonScalarAliasesCount>;
v21 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.LoaderOptions loadingConfig>;
v22 = virtualinvoke v21.<org.yaml.snakeyaml.LoaderOptions: int getMaxAliasesForCollections()>();
if v20 <= v22 goto label3;
v23 = new org.yaml.snakeyaml.error.YAMLException;
v24 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.LoaderOptions loadingConfig>;
v25 = virtualinvoke v24.<org.yaml.snakeyaml.LoaderOptions: int getMaxAliasesForCollections()>();
v26 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v25) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Number of aliases for non-scalar nodes exceeds the specified max=\u0001");
specialinvoke v23.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v26);
throw v23;
label3:
v27 = v0.<org.yaml.snakeyaml.composer.Composer: java.util.Set recursiveNodes>;
v28 = interfaceinvoke v27.<java.util.Set: boolean remove(java.lang.Object)>(v16);
if v28 == 0 goto label4;
virtualinvoke v16.<org.yaml.snakeyaml.nodes.Node: void setTwoStepsConstruction(boolean)>(1);
label4:
v29 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector blockCommentsCollector>;
virtualinvoke v29.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List consume()>();
v30 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector inlineCommentsCollector>;
v31 = virtualinvoke v30.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.comments.CommentEventsCollector collectEvents()>();
virtualinvoke v31.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List consume()>();
goto label9;
label5:
v32 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v33 = interfaceinvoke v32.<org.yaml.snakeyaml.parser.Parser: org.yaml.snakeyaml.events.Event peekEvent()>();
v34 = virtualinvoke v33.<org.yaml.snakeyaml.events.NodeEvent: java.lang.String getAnchor()>();
specialinvoke v0.<org.yaml.snakeyaml.composer.Composer: void increaseNestingDepth()>();
v35 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v36 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID Scalar>;
v37 = interfaceinvoke v35.<org.yaml.snakeyaml.parser.Parser: boolean checkEvent(org.yaml.snakeyaml.events.Event$ID)>(v36);
if v37 == 0 goto label6;
v38 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector blockCommentsCollector>;
v39 = virtualinvoke v38.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List consume()>();
v16 = virtualinvoke v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.nodes.Node composeScalarNode(java.lang.String,java.util.List)>(v34, v39);
goto label8;
label6:
v40 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v41 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID SequenceStart>;
v42 = interfaceinvoke v40.<org.yaml.snakeyaml.parser.Parser: boolean checkEvent(org.yaml.snakeyaml.events.Event$ID)>(v41);
if v42 == 0 goto label7;
v16 = virtualinvoke v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.nodes.Node composeSequenceNode(java.lang.String)>(v34);
goto label8;
label7:
v16 = virtualinvoke v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.nodes.Node composeMappingNode(java.lang.String)>(v34);
label8:
specialinvoke v0.<org.yaml.snakeyaml.composer.Composer: void decreaseNestingDepth()>();
label9:
v43 = v0.<org.yaml.snakeyaml.composer.Composer: java.util.Set recursiveNodes>;
interfaceinvoke v43.<java.util.Set: boolean remove(java.lang.Object)>(v1);
return v16;
}
protected org.yaml.snakeyaml.nodes.Node composeScalarNode(java.lang.String, java.util.List)
{
org.yaml.snakeyaml.composer.ComposerException v19;
org.yaml.snakeyaml.DumperOptions$ScalarStyle v26;
org.yaml.snakeyaml.events.Event v4;
org.yaml.snakeyaml.comments.CommentEventsCollector v28, v29;
org.yaml.snakeyaml.composer.Composer v0;
org.yaml.snakeyaml.inspector.TagInspector v17;
org.yaml.snakeyaml.nodes.NodeId v9;
java.util.Map v27;
org.yaml.snakeyaml.resolver.Resolver v8;
java.lang.String v1, v10, v20, v23, v5;
org.yaml.snakeyaml.parser.Parser v3;
boolean v12, v15, v18, v6, v7;
org.yaml.snakeyaml.LoaderOptions v16;
org.yaml.snakeyaml.nodes.Tag v13, v14;
org.yaml.snakeyaml.events.ImplicitTuple v11;
java.util.List v2, v30;
org.yaml.snakeyaml.error.Mark v21, v24, v25;
org.yaml.snakeyaml.nodes.ScalarNode v22;
v0 := @this: org.yaml.snakeyaml.composer.Composer;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.util.List;
v3 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v4 = interfaceinvoke v3.<org.yaml.snakeyaml.parser.Parser: org.yaml.snakeyaml.events.Event getEvent()>();
v5 = virtualinvoke v4.<org.yaml.snakeyaml.events.ScalarEvent: java.lang.String getTag()>();
v6 = 0;
if v5 == null goto label1;
v7 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("!");
if v7 == 0 goto label2;
label1:
v8 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.resolver.Resolver resolver>;
v9 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId scalar>;
v10 = virtualinvoke v4.<org.yaml.snakeyaml.events.ScalarEvent: java.lang.String getValue()>();
v11 = virtualinvoke v4.<org.yaml.snakeyaml.events.ScalarEvent: org.yaml.snakeyaml.events.ImplicitTuple getImplicit()>();
v12 = virtualinvoke v11.<org.yaml.snakeyaml.events.ImplicitTuple: boolean canOmitTagInPlainScalar()>();
v13 = virtualinvoke v8.<org.yaml.snakeyaml.resolver.Resolver: org.yaml.snakeyaml.nodes.Tag resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean)>(v9, v10, v12);
v6 = 1;
goto label3;
label2:
v14 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v14.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>(v5);
v13 = v14;
v15 = virtualinvoke v14.<org.yaml.snakeyaml.nodes.Tag: boolean isCustomGlobal()>();
if v15 == 0 goto label3;
v16 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.LoaderOptions loadingConfig>;
v17 = virtualinvoke v16.<org.yaml.snakeyaml.LoaderOptions: org.yaml.snakeyaml.inspector.TagInspector getTagInspector()>();
v18 = interfaceinvoke v17.<org.yaml.snakeyaml.inspector.TagInspector: boolean isGlobalTagAllowed(org.yaml.snakeyaml.nodes.Tag)>(v14);
if v18 != 0 goto label3;
v19 = new org.yaml.snakeyaml.composer.ComposerException;
v20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Global tag is not allowed: \u0001");
v21 = virtualinvoke v4.<org.yaml.snakeyaml.events.ScalarEvent: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v19.<org.yaml.snakeyaml.composer.ComposerException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)>(null, null, v20, v21);
throw v19;
label3:
v22 = new org.yaml.snakeyaml.nodes.ScalarNode;
v23 = virtualinvoke v4.<org.yaml.snakeyaml.events.ScalarEvent: java.lang.String getValue()>();
v24 = virtualinvoke v4.<org.yaml.snakeyaml.events.ScalarEvent: org.yaml.snakeyaml.error.Mark getStartMark()>();
v25 = virtualinvoke v4.<org.yaml.snakeyaml.events.ScalarEvent: org.yaml.snakeyaml.error.Mark getEndMark()>();
v26 = virtualinvoke v4.<org.yaml.snakeyaml.events.ScalarEvent: org.yaml.snakeyaml.DumperOptions$ScalarStyle getScalarStyle()>();
specialinvoke v22.<org.yaml.snakeyaml.nodes.ScalarNode: void <init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions$ScalarStyle)>(v13, v6, v23, v24, v25, v26);
if v1 == null goto label4;
virtualinvoke v22.<org.yaml.snakeyaml.nodes.Node: void setAnchor(java.lang.String)>(v1);
v27 = v0.<org.yaml.snakeyaml.composer.Composer: java.util.Map anchors>;
interfaceinvoke v27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v22);
label4:
virtualinvoke v22.<org.yaml.snakeyaml.nodes.Node: void setBlockComments(java.util.List)>(v2);
v28 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector inlineCommentsCollector>;
v29 = virtualinvoke v28.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.comments.CommentEventsCollector collectEvents()>();
v30 = virtualinvoke v29.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List consume()>();
virtualinvoke v22.<org.yaml.snakeyaml.nodes.Node: void setInLineComments(java.util.List)>(v30);
return v22;
}
protected org.yaml.snakeyaml.nodes.Node composeSequenceNode(java.lang.String)
{
org.yaml.snakeyaml.composer.ComposerException v16;
org.yaml.snakeyaml.nodes.SequenceNode v20;
org.yaml.snakeyaml.DumperOptions$FlowStyle v22;
org.yaml.snakeyaml.events.Event v3, v40;
org.yaml.snakeyaml.comments.CommentEventsCollector v24, v30, v36, v37, v42, v43, v45;
org.yaml.snakeyaml.nodes.Node v34;
org.yaml.snakeyaml.composer.Composer v0;
org.yaml.snakeyaml.nodes.NodeId v8;
java.util.Map v26;
org.yaml.snakeyaml.parser.Parser v2, v27, v31, v39;
boolean v12, v15, v23, v29, v33, v35, v44, v5, v6, v9;
org.yaml.snakeyaml.events.Event$ID v28, v32;
java.util.List v25, v38, v46;
org.yaml.snakeyaml.error.Mark v18, v21, v41;
java.util.ArrayList v19;
org.yaml.snakeyaml.inspector.TagInspector v14;
org.yaml.snakeyaml.resolver.Resolver v7;
java.lang.String v1, v17, v4;
org.yaml.snakeyaml.LoaderOptions v13;
org.yaml.snakeyaml.nodes.Tag v10, v11;
v0 := @this: org.yaml.snakeyaml.composer.Composer;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v3 = interfaceinvoke v2.<org.yaml.snakeyaml.parser.Parser: org.yaml.snakeyaml.events.Event getEvent()>();
v4 = virtualinvoke v3.<org.yaml.snakeyaml.events.SequenceStartEvent: java.lang.String getTag()>();
v5 = 0;
if v4 == null goto label1;
v6 = virtualinvoke v4.<java.lang.String: boolean equals(java.lang.Object)>("!");
if v6 == 0 goto label2;
label1:
v7 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.resolver.Resolver resolver>;
v8 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId sequence>;
v9 = virtualinvoke v3.<org.yaml.snakeyaml.events.SequenceStartEvent: boolean getImplicit()>();
v10 = virtualinvoke v7.<org.yaml.snakeyaml.resolver.Resolver: org.yaml.snakeyaml.nodes.Tag resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean)>(v8, null, v9);
v5 = 1;
goto label3;
label2:
v11 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v11.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>(v4);
v10 = v11;
v12 = virtualinvoke v11.<org.yaml.snakeyaml.nodes.Tag: boolean isCustomGlobal()>();
if v12 == 0 goto label3;
v13 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.LoaderOptions loadingConfig>;
v14 = virtualinvoke v13.<org.yaml.snakeyaml.LoaderOptions: org.yaml.snakeyaml.inspector.TagInspector getTagInspector()>();
v15 = interfaceinvoke v14.<org.yaml.snakeyaml.inspector.TagInspector: boolean isGlobalTagAllowed(org.yaml.snakeyaml.nodes.Tag)>(v11);
if v15 != 0 goto label3;
v16 = new org.yaml.snakeyaml.composer.ComposerException;
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Global tag is not allowed: \u0001");
v18 = virtualinvoke v3.<org.yaml.snakeyaml.events.SequenceStartEvent: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v16.<org.yaml.snakeyaml.composer.ComposerException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)>(null, null, v17, v18);
throw v16;
label3:
v19 = new java.util.ArrayList;
specialinvoke v19.<java.util.ArrayList: void <init>()>();
v20 = new org.yaml.snakeyaml.nodes.SequenceNode;
v21 = virtualinvoke v3.<org.yaml.snakeyaml.events.SequenceStartEvent: org.yaml.snakeyaml.error.Mark getStartMark()>();
v22 = virtualinvoke v3.<org.yaml.snakeyaml.events.SequenceStartEvent: org.yaml.snakeyaml.DumperOptions$FlowStyle getFlowStyle()>();
specialinvoke v20.<org.yaml.snakeyaml.nodes.SequenceNode: void <init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v10, v5, v19, v21, null, v22);
v23 = virtualinvoke v3.<org.yaml.snakeyaml.events.SequenceStartEvent: boolean isFlow()>();
if v23 == 0 goto label4;
v24 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector blockCommentsCollector>;
v25 = virtualinvoke v24.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List consume()>();
virtualinvoke v20.<org.yaml.snakeyaml.nodes.SequenceNode: void setBlockComments(java.util.List)>(v25);
label4:
if v1 == null goto label5;
virtualinvoke v20.<org.yaml.snakeyaml.nodes.SequenceNode: void setAnchor(java.lang.String)>(v1);
v26 = v0.<org.yaml.snakeyaml.composer.Composer: java.util.Map anchors>;
interfaceinvoke v26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v20);
label5:
v27 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v28 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID SequenceEnd>;
v29 = interfaceinvoke v27.<org.yaml.snakeyaml.parser.Parser: boolean checkEvent(org.yaml.snakeyaml.events.Event$ID)>(v28);
if v29 != 0 goto label6;
v30 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector blockCommentsCollector>;
virtualinvoke v30.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.comments.CommentEventsCollector collectEvents()>();
v31 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v32 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID SequenceEnd>;
v33 = interfaceinvoke v31.<org.yaml.snakeyaml.parser.Parser: boolean checkEvent(org.yaml.snakeyaml.events.Event$ID)>(v32);
if v33 != 0 goto label6;
v34 = specialinvoke v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.nodes.Node composeNode(org.yaml.snakeyaml.nodes.Node)>(v20);
virtualinvoke v19.<java.util.ArrayList: boolean add(java.lang.Object)>(v34);
goto label5;
label6:
v35 = virtualinvoke v3.<org.yaml.snakeyaml.events.SequenceStartEvent: boolean isFlow()>();
if v35 == 0 goto label7;
v36 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector inlineCommentsCollector>;
v37 = virtualinvoke v36.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.comments.CommentEventsCollector collectEvents()>();
v38 = virtualinvoke v37.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List consume()>();
virtualinvoke v20.<org.yaml.snakeyaml.nodes.SequenceNode: void setInLineComments(java.util.List)>(v38);
label7:
v39 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v40 = interfaceinvoke v39.<org.yaml.snakeyaml.parser.Parser: org.yaml.snakeyaml.events.Event getEvent()>();
v41 = virtualinvoke v40.<org.yaml.snakeyaml.events.Event: org.yaml.snakeyaml.error.Mark getEndMark()>();
virtualinvoke v20.<org.yaml.snakeyaml.nodes.SequenceNode: void setEndMark(org.yaml.snakeyaml.error.Mark)>(v41);
v42 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector inlineCommentsCollector>;
virtualinvoke v42.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.comments.CommentEventsCollector collectEvents()>();
v43 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector inlineCommentsCollector>;
v44 = virtualinvoke v43.<org.yaml.snakeyaml.comments.CommentEventsCollector: boolean isEmpty()>();
if v44 != 0 goto label8;
v45 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector inlineCommentsCollector>;
v46 = virtualinvoke v45.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List consume()>();
virtualinvoke v20.<org.yaml.snakeyaml.nodes.SequenceNode: void setInLineComments(java.util.List)>(v46);
label8:
return v20;
}
protected org.yaml.snakeyaml.nodes.Node composeMappingNode(java.lang.String)
{
org.yaml.snakeyaml.composer.ComposerException v16;
org.yaml.snakeyaml.DumperOptions$FlowStyle v22;
org.yaml.snakeyaml.events.Event v3, v39;
org.yaml.snakeyaml.comments.CommentEventsCollector v24, v30, v35, v36, v41, v42, v44;
org.yaml.snakeyaml.composer.Composer v0;
org.yaml.snakeyaml.nodes.NodeId v8;
java.util.Map v26;
org.yaml.snakeyaml.parser.Parser v2, v27, v31, v38;
boolean v12, v15, v23, v29, v33, v34, v43, v5, v6, v9;
org.yaml.snakeyaml.events.Event$ID v28, v32;
java.util.List v25, v37, v45;
org.yaml.snakeyaml.error.Mark v18, v21, v40;
org.yaml.snakeyaml.nodes.MappingNode v20;
java.util.ArrayList v19;
org.yaml.snakeyaml.inspector.TagInspector v14;
org.yaml.snakeyaml.resolver.Resolver v7;
java.lang.String v1, v17, v4;
org.yaml.snakeyaml.LoaderOptions v13;
org.yaml.snakeyaml.nodes.Tag v10, v11;
v0 := @this: org.yaml.snakeyaml.composer.Composer;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v3 = interfaceinvoke v2.<org.yaml.snakeyaml.parser.Parser: org.yaml.snakeyaml.events.Event getEvent()>();
v4 = virtualinvoke v3.<org.yaml.snakeyaml.events.MappingStartEvent: java.lang.String getTag()>();
v5 = 0;
if v4 == null goto label1;
v6 = virtualinvoke v4.<java.lang.String: boolean equals(java.lang.Object)>("!");
if v6 == 0 goto label2;
label1:
v7 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.resolver.Resolver resolver>;
v8 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId mapping>;
v9 = virtualinvoke v3.<org.yaml.snakeyaml.events.MappingStartEvent: boolean getImplicit()>();
v10 = virtualinvoke v7.<org.yaml.snakeyaml.resolver.Resolver: org.yaml.snakeyaml.nodes.Tag resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean)>(v8, null, v9);
v5 = 1;
goto label3;
label2:
v11 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v11.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>(v4);
v10 = v11;
v12 = virtualinvoke v11.<org.yaml.snakeyaml.nodes.Tag: boolean isCustomGlobal()>();
if v12 == 0 goto label3;
v13 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.LoaderOptions loadingConfig>;
v14 = virtualinvoke v13.<org.yaml.snakeyaml.LoaderOptions: org.yaml.snakeyaml.inspector.TagInspector getTagInspector()>();
v15 = interfaceinvoke v14.<org.yaml.snakeyaml.inspector.TagInspector: boolean isGlobalTagAllowed(org.yaml.snakeyaml.nodes.Tag)>(v11);
if v15 != 0 goto label3;
v16 = new org.yaml.snakeyaml.composer.ComposerException;
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Global tag is not allowed: \u0001");
v18 = virtualinvoke v3.<org.yaml.snakeyaml.events.MappingStartEvent: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v16.<org.yaml.snakeyaml.composer.ComposerException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)>(null, null, v17, v18);
throw v16;
label3:
v19 = new java.util.ArrayList;
specialinvoke v19.<java.util.ArrayList: void <init>()>();
v20 = new org.yaml.snakeyaml.nodes.MappingNode;
v21 = virtualinvoke v3.<org.yaml.snakeyaml.events.MappingStartEvent: org.yaml.snakeyaml.error.Mark getStartMark()>();
v22 = virtualinvoke v3.<org.yaml.snakeyaml.events.MappingStartEvent: org.yaml.snakeyaml.DumperOptions$FlowStyle getFlowStyle()>();
specialinvoke v20.<org.yaml.snakeyaml.nodes.MappingNode: void <init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v10, v5, v19, v21, null, v22);
v23 = virtualinvoke v3.<org.yaml.snakeyaml.events.MappingStartEvent: boolean isFlow()>();
if v23 == 0 goto label4;
v24 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector blockCommentsCollector>;
v25 = virtualinvoke v24.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List consume()>();
virtualinvoke v20.<org.yaml.snakeyaml.nodes.MappingNode: void setBlockComments(java.util.List)>(v25);
label4:
if v1 == null goto label5;
virtualinvoke v20.<org.yaml.snakeyaml.nodes.MappingNode: void setAnchor(java.lang.String)>(v1);
v26 = v0.<org.yaml.snakeyaml.composer.Composer: java.util.Map anchors>;
interfaceinvoke v26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v20);
label5:
v27 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v28 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID MappingEnd>;
v29 = interfaceinvoke v27.<org.yaml.snakeyaml.parser.Parser: boolean checkEvent(org.yaml.snakeyaml.events.Event$ID)>(v28);
if v29 != 0 goto label6;
v30 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector blockCommentsCollector>;
virtualinvoke v30.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.comments.CommentEventsCollector collectEvents()>();
v31 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v32 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID MappingEnd>;
v33 = interfaceinvoke v31.<org.yaml.snakeyaml.parser.Parser: boolean checkEvent(org.yaml.snakeyaml.events.Event$ID)>(v32);
if v33 != 0 goto label6;
virtualinvoke v0.<org.yaml.snakeyaml.composer.Composer: void composeMappingChildren(java.util.List,org.yaml.snakeyaml.nodes.MappingNode)>(v19, v20);
goto label5;
label6:
v34 = virtualinvoke v3.<org.yaml.snakeyaml.events.MappingStartEvent: boolean isFlow()>();
if v34 == 0 goto label7;
v35 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector inlineCommentsCollector>;
v36 = virtualinvoke v35.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.comments.CommentEventsCollector collectEvents()>();
v37 = virtualinvoke v36.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List consume()>();
virtualinvoke v20.<org.yaml.snakeyaml.nodes.MappingNode: void setInLineComments(java.util.List)>(v37);
label7:
v38 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.parser.Parser parser>;
v39 = interfaceinvoke v38.<org.yaml.snakeyaml.parser.Parser: org.yaml.snakeyaml.events.Event getEvent()>();
v40 = virtualinvoke v39.<org.yaml.snakeyaml.events.Event: org.yaml.snakeyaml.error.Mark getEndMark()>();
virtualinvoke v20.<org.yaml.snakeyaml.nodes.MappingNode: void setEndMark(org.yaml.snakeyaml.error.Mark)>(v40);
v41 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector inlineCommentsCollector>;
virtualinvoke v41.<org.yaml.snakeyaml.comments.CommentEventsCollector: org.yaml.snakeyaml.comments.CommentEventsCollector collectEvents()>();
v42 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector inlineCommentsCollector>;
v43 = virtualinvoke v42.<org.yaml.snakeyaml.comments.CommentEventsCollector: boolean isEmpty()>();
if v43 != 0 goto label8;
v44 = v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.comments.CommentEventsCollector inlineCommentsCollector>;
v45 = virtualinvoke v44.<org.yaml.snakeyaml.comments.CommentEventsCollector: java.util.List consume()>();
virtualinvoke v20.<org.yaml.snakeyaml.nodes.MappingNode: void setInLineComments(java.util.List)>(v45);
label8:
return v20;
}
protected void composeMappingChildren(java.util.List, org.yaml.snakeyaml.nodes.MappingNode)
{
org.yaml.snakeyaml.nodes.Tag v4, v5;
org.yaml.snakeyaml.nodes.MappingNode v2;
org.yaml.snakeyaml.nodes.NodeTuple v8;
org.yaml.snakeyaml.nodes.Node v3, v7;
java.util.List v1;
org.yaml.snakeyaml.composer.Composer v0;
boolean v6;
v0 := @this: org.yaml.snakeyaml.composer.Composer;
v1 := @parameter0: java.util.List;
v2 := @parameter1: org.yaml.snakeyaml.nodes.MappingNode;
v3 = virtualinvoke v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.nodes.Node composeKeyNode(org.yaml.snakeyaml.nodes.MappingNode)>(v2);
v4 = virtualinvoke v3.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
v5 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag MERGE>;
v6 = virtualinvoke v4.<org.yaml.snakeyaml.nodes.Tag: boolean equals(java.lang.Object)>(v5);
if v6 == 0 goto label1;
virtualinvoke v2.<org.yaml.snakeyaml.nodes.MappingNode: void setMerged(boolean)>(1);
label1:
v7 = virtualinvoke v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.nodes.Node composeValueNode(org.yaml.snakeyaml.nodes.MappingNode)>(v2);
v8 = new org.yaml.snakeyaml.nodes.NodeTuple;
specialinvoke v8.<org.yaml.snakeyaml.nodes.NodeTuple: void <init>(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)>(v3, v7);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v8);
return;
}
protected org.yaml.snakeyaml.nodes.Node composeKeyNode(org.yaml.snakeyaml.nodes.MappingNode)
{
org.yaml.snakeyaml.nodes.Node v2;
org.yaml.snakeyaml.composer.Composer v0;
org.yaml.snakeyaml.nodes.MappingNode v1;
v0 := @this: org.yaml.snakeyaml.composer.Composer;
v1 := @parameter0: org.yaml.snakeyaml.nodes.MappingNode;
v2 = specialinvoke v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.nodes.Node composeNode(org.yaml.snakeyaml.nodes.Node)>(v1);
return v2;
}
protected org.yaml.snakeyaml.nodes.Node composeValueNode(org.yaml.snakeyaml.nodes.MappingNode)
{
org.yaml.snakeyaml.nodes.Node v2;
org.yaml.snakeyaml.composer.Composer v0;
org.yaml.snakeyaml.nodes.MappingNode v1;
v0 := @this: org.yaml.snakeyaml.composer.Composer;
v1 := @parameter0: org.yaml.snakeyaml.nodes.MappingNode;
v2 = specialinvoke v0.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.nodes.Node composeNode(org.yaml.snakeyaml.nodes.Node)>(v1);
return v2;
}
private void increaseNestingDepth()
{
org.yaml.snakeyaml.composer.Composer v0;
int v1, v2, v4, v6, v7;
java.lang.String v5;
org.yaml.snakeyaml.error.YAMLException v3;
v0 := @this: org.yaml.snakeyaml.composer.Composer;
v1 = v0.<org.yaml.snakeyaml.composer.Composer: int nestingDepth>;
v2 = v0.<org.yaml.snakeyaml.composer.Composer: int nestingDepthLimit>;
if v1 <= v2 goto label1;
v3 = new org.yaml.snakeyaml.error.YAMLException;
v4 = v0.<org.yaml.snakeyaml.composer.Composer: int nestingDepthLimit>;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Nesting Depth exceeded max \u0001");
specialinvoke v3.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v5);
throw v3;
label1:
v6 = v0.<org.yaml.snakeyaml.composer.Composer: int nestingDepth>;
v7 = v6 + 1;
v0.<org.yaml.snakeyaml.composer.Composer: int nestingDepth> = v7;
return;
}
private void decreaseNestingDepth()
{
org.yaml.snakeyaml.composer.Composer v0;
int v1, v2, v3;
org.yaml.snakeyaml.error.YAMLException v4;
v0 := @this: org.yaml.snakeyaml.composer.Composer;
v1 = v0.<org.yaml.snakeyaml.composer.Composer: int nestingDepth>;
if v1 <= 0 goto label1;
v2 = v0.<org.yaml.snakeyaml.composer.Composer: int nestingDepth>;
v3 = v2 - 1;
v0.<org.yaml.snakeyaml.composer.Composer: int nestingDepth> = v3;
goto label2;
label1:
v4 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v4.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>("Nesting Depth cannot be negative");
throw v4;
label2:
return;
}
}