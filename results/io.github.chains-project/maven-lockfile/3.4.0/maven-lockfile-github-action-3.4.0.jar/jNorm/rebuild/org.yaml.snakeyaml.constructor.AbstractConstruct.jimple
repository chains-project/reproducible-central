public abstract class org.yaml.snakeyaml.constructor.AbstractConstruct extends java.lang.Object implements org.yaml.snakeyaml.constructor.Construct
{
public void <init>()
{
org.yaml.snakeyaml.constructor.AbstractConstruct v0;
v0 := @this: org.yaml.snakeyaml.constructor.AbstractConstruct;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void construct2ndStep(org.yaml.snakeyaml.nodes.Node, java.lang.Object)
{
java.lang.IllegalStateException v4;
org.yaml.snakeyaml.constructor.AbstractConstruct v0;
org.yaml.snakeyaml.nodes.Node v1;
java.lang.Class v5;
java.lang.Object v2;
java.lang.String v6, v7, v9;
boolean v3;
org.yaml.snakeyaml.error.YAMLException v8;
v0 := @this: org.yaml.snakeyaml.constructor.AbstractConstruct;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: boolean isTwoStepsConstruction()>();
if v3 == 0 goto label1;
v4 = new java.lang.IllegalStateException;
v5 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Not Implemented in \u0001");
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v7);
throw v4;
label1:
v8 = new org.yaml.snakeyaml.error.YAMLException;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.yaml.snakeyaml.nodes.Node)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected recursive structure for Node: \u0001");
specialinvoke v8.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v9);
throw v8;
}
}