public abstract class org.yaml.snakeyaml.constructor.BaseConstructor extends java.lang.Object
{
protected static final java.lang.Object NOT_INSTANTIATED_OBJECT;
protected final java.util.Map yamlClassConstructors;
protected final java.util.Map yamlConstructors;
protected final java.util.Map yamlMultiConstructors;
protected org.yaml.snakeyaml.composer.Composer composer;
final java.util.Map constructedObjects;
private final java.util.Set recursiveObjects;
private final java.util.ArrayList maps2fill;
private final java.util.ArrayList sets2fill;
protected org.yaml.snakeyaml.nodes.Tag rootTag;
private org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils;
private boolean explicitPropertyUtils;
private boolean allowDuplicateKeys;
private boolean wrappedToRootException;
private boolean enumCaseSensitive;
protected final java.util.Map typeDefinitions;
protected final java.util.Map typeTags;
protected org.yaml.snakeyaml.LoaderOptions loadingConfig;
public void <init>(org.yaml.snakeyaml.LoaderOptions)
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
java.util.HashMap v10, v11, v3, v4, v6;
java.lang.NullPointerException v5;
java.util.ArrayList v8, v9;
java.util.HashSet v7;
java.util.Map v12, v15;
java.util.EnumMap v2;
org.yaml.snakeyaml.LoaderOptions v1;
org.yaml.snakeyaml.nodes.Tag v14, v17;
org.yaml.snakeyaml.TypeDescription v13, v16;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.LoaderOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.EnumMap;
specialinvoke v2.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/yaml/snakeyaml/nodes/NodeId;");
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map yamlClassConstructors> = v2;
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>()>();
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map yamlConstructors> = v3;
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>()>();
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map yamlMultiConstructors> = v4;
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: boolean allowDuplicateKeys> = 1;
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: boolean wrappedToRootException> = 0;
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: boolean enumCaseSensitive> = 0;
if v1 != null goto label1;
v5 = new java.lang.NullPointerException;
specialinvoke v5.<java.lang.NullPointerException: void <init>(java.lang.String)>("LoaderOptions must be provided.");
throw v5;
label1:
v6 = new java.util.HashMap;
specialinvoke v6.<java.util.HashMap: void <init>()>();
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map constructedObjects> = v6;
v7 = new java.util.HashSet;
specialinvoke v7.<java.util.HashSet: void <init>()>();
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Set recursiveObjects> = v7;
v8 = new java.util.ArrayList;
specialinvoke v8.<java.util.ArrayList: void <init>()>();
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.ArrayList maps2fill> = v8;
v9 = new java.util.ArrayList;
specialinvoke v9.<java.util.ArrayList: void <init>()>();
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.ArrayList sets2fill> = v9;
v10 = new java.util.HashMap;
specialinvoke v10.<java.util.HashMap: void <init>()>();
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map typeDefinitions> = v10;
v11 = new java.util.HashMap;
specialinvoke v11.<java.util.HashMap: void <init>()>();
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map typeTags> = v11;
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.nodes.Tag rootTag> = null;
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: boolean explicitPropertyUtils> = 0;
v12 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map typeDefinitions>;
v13 = new org.yaml.snakeyaml.TypeDescription;
v14 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag OMAP>;
specialinvoke v13.<org.yaml.snakeyaml.TypeDescription: void <init>(java.lang.Class,org.yaml.snakeyaml.nodes.Tag,java.lang.Class)>(class "Ljava/util/SortedMap;", v14, class "Ljava/util/TreeMap;");
interfaceinvoke v12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/util/SortedMap;", v13);
v15 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map typeDefinitions>;
v16 = new org.yaml.snakeyaml.TypeDescription;
v17 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag SET>;
specialinvoke v16.<org.yaml.snakeyaml.TypeDescription: void <init>(java.lang.Class,org.yaml.snakeyaml.nodes.Tag,java.lang.Class)>(class "Ljava/util/SortedSet;", v17, class "Ljava/util/TreeSet;");
interfaceinvoke v15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/util/SortedSet;", v16);
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.LoaderOptions loadingConfig> = v1;
return;
}
public void setComposer(org.yaml.snakeyaml.composer.Composer)
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
org.yaml.snakeyaml.composer.Composer v1;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.composer.Composer;
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.composer.Composer composer> = v1;
return;
}
public boolean checkData()
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
org.yaml.snakeyaml.composer.Composer v1;
boolean v2;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.composer.Composer composer>;
v2 = virtualinvoke v1.<org.yaml.snakeyaml.composer.Composer: boolean checkNode()>();
return v2;
}
public java.lang.Object getData() throws java.util.NoSuchElementException
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
org.yaml.snakeyaml.nodes.Tag v6, v7;
org.yaml.snakeyaml.nodes.Node v5;
org.yaml.snakeyaml.composer.Composer v1, v4;
java.lang.Object v8;
java.util.NoSuchElementException v3;
boolean v2;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.composer.Composer composer>;
v2 = virtualinvoke v1.<org.yaml.snakeyaml.composer.Composer: boolean checkNode()>();
if v2 != 0 goto label1;
v3 = new java.util.NoSuchElementException;
specialinvoke v3.<java.util.NoSuchElementException: void <init>(java.lang.String)>("No document is available.");
throw v3;
label1:
v4 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.composer.Composer composer>;
v5 = virtualinvoke v4.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.nodes.Node getNode()>();
v6 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.nodes.Tag rootTag>;
if v6 == null goto label2;
v7 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.nodes.Tag rootTag>;
virtualinvoke v5.<org.yaml.snakeyaml.nodes.Node: void setTag(org.yaml.snakeyaml.nodes.Tag)>(v7);
label2:
v8 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructDocument(org.yaml.snakeyaml.nodes.Node)>(v5);
return v8;
}
public java.lang.Object getSingleData(java.lang.Class)
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
org.yaml.snakeyaml.nodes.Tag v12, v4, v5, v7, v8, v9;
org.yaml.snakeyaml.nodes.Node v3;
org.yaml.snakeyaml.composer.Composer v2;
java.util.Map v11;
java.lang.Class v1;
java.lang.Object v10, v13, v14;
boolean v6;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: java.lang.Class;
v2 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.composer.Composer composer>;
v3 = virtualinvoke v2.<org.yaml.snakeyaml.composer.Composer: org.yaml.snakeyaml.nodes.Node getSingleNode()>();
if v3 == null goto label3;
v4 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag NULL>;
v5 = virtualinvoke v3.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
v6 = virtualinvoke v4.<org.yaml.snakeyaml.nodes.Tag: boolean equals(java.lang.Object)>(v5);
if v6 != 0 goto label3;
if class "Ljava/lang/Object;" == v1 goto label1;
v7 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v7.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.Class)>(v1);
virtualinvoke v3.<org.yaml.snakeyaml.nodes.Node: void setTag(org.yaml.snakeyaml.nodes.Tag)>(v7);
goto label2;
label1:
v8 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.nodes.Tag rootTag>;
if v8 == null goto label2;
v9 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.nodes.Tag rootTag>;
virtualinvoke v3.<org.yaml.snakeyaml.nodes.Node: void setTag(org.yaml.snakeyaml.nodes.Tag)>(v9);
label2:
v10 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructDocument(org.yaml.snakeyaml.nodes.Node)>(v3);
return v10;
label3:
v11 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map yamlConstructors>;
v12 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag NULL>;
v13 = interfaceinvoke v11.<java.util.Map: java.lang.Object get(java.lang.Object)>(v12);
v14 = interfaceinvoke v13.<org.yaml.snakeyaml.constructor.Construct: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>(v3);
return v14;
}
protected final java.lang.Object constructDocument(org.yaml.snakeyaml.nodes.Node)
{
java.lang.Throwable v9;
java.util.Set v11, v4;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
java.lang.RuntimeException v5;
org.yaml.snakeyaml.nodes.Node v1;
java.util.Map v10, v3;
java.lang.Object v2;
boolean v6, v7;
org.yaml.snakeyaml.error.YAMLException v8;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
label1:
v2 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>(v1);
specialinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: void fillRecursive()>();
label2:
v3 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map constructedObjects>;
interfaceinvoke v3.<java.util.Map: void clear()>();
v4 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Set recursiveObjects>;
interfaceinvoke v4.<java.util.Set: void clear()>();
return v2;
label3:
v5 := @caughtexception;
v6 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: boolean wrappedToRootException>;
if v6 == 0 goto label4;
v7 = v5 instanceof org.yaml.snakeyaml.error.YAMLException;
if v7 != 0 goto label4;
v8 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v8.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.Throwable)>(v5);
throw v8;
label4:
throw v5;
label5:
v9 := @caughtexception;
v10 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map constructedObjects>;
interfaceinvoke v10.<java.util.Map: void clear()>();
v11 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Set recursiveObjects>;
interfaceinvoke v11.<java.util.Set: void clear()>();
throw v9;
catch java.lang.RuntimeException from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label5;
}
private void fillRecursive()
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
java.util.ArrayList v1, v11, v12, v14, v20, v3;
boolean v13, v16, v2, v5;
java.util.Iterator v15, v4;
java.lang.Object v10, v17, v18, v19, v6, v7, v8, v9;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.ArrayList maps2fill>;
v2 = virtualinvoke v1.<java.util.ArrayList: boolean isEmpty()>();
if v2 != 0 goto label3;
v3 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.ArrayList maps2fill>;
v4 = virtualinvoke v3.<java.util.ArrayList: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple: java.lang.Object _2()>();
v8 = virtualinvoke v6.<org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple: java.lang.Object _1()>();
v9 = virtualinvoke v7.<org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple: java.lang.Object _1()>();
v10 = virtualinvoke v7.<org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple: java.lang.Object _2()>();
interfaceinvoke v8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, v10);
goto label1;
label2:
v11 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.ArrayList maps2fill>;
virtualinvoke v11.<java.util.ArrayList: void clear()>();
label3:
v12 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.ArrayList sets2fill>;
v13 = virtualinvoke v12.<java.util.ArrayList: boolean isEmpty()>();
if v13 != 0 goto label6;
v14 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.ArrayList sets2fill>;
v15 = virtualinvoke v14.<java.util.ArrayList: java.util.Iterator iterator()>();
label4:
v16 = interfaceinvoke v15.<java.util.Iterator: boolean hasNext()>();
if v16 == 0 goto label5;
v17 = interfaceinvoke v15.<java.util.Iterator: java.lang.Object next()>();
v18 = virtualinvoke v17.<org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple: java.lang.Object _1()>();
v19 = virtualinvoke v17.<org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple: java.lang.Object _2()>();
interfaceinvoke v18.<java.util.Set: boolean add(java.lang.Object)>(v19);
goto label4;
label5:
v20 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.ArrayList sets2fill>;
virtualinvoke v20.<java.util.ArrayList: void clear()>();
label6:
return;
}
protected java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.nodes.Node v1;
java.util.Map v2, v4;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
java.lang.Object v5, v6;
boolean v3;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map constructedObjects>;
v3 = interfaceinvoke v2.<java.util.Map: boolean containsKey(java.lang.Object)>(v1);
if v3 == 0 goto label1;
v4 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map constructedObjects>;
v5 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v5;
label1:
v6 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObjectNoCheck(org.yaml.snakeyaml.nodes.Node)>(v1);
return v6;
}
protected java.lang.Object constructObjectNoCheck(org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
org.yaml.snakeyaml.nodes.Node v1;
java.util.Map v10, v13, v8;
boolean v15, v3, v9;
java.util.Set v14, v2, v6;
org.yaml.snakeyaml.constructor.Construct v7;
org.yaml.snakeyaml.constructor.ConstructorException v4;
org.yaml.snakeyaml.error.Mark v5;
java.lang.Object v11, v12;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Set recursiveObjects>;
v3 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v1);
if v3 == 0 goto label1;
v4 = new org.yaml.snakeyaml.constructor.ConstructorException;
v5 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v4.<org.yaml.snakeyaml.constructor.ConstructorException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)>(null, null, "found unconstructable recursive node", v5);
throw v4;
label1:
v6 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Set recursiveObjects>;
interfaceinvoke v6.<java.util.Set: boolean add(java.lang.Object)>(v1);
v7 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.constructor.Construct getConstructor(org.yaml.snakeyaml.nodes.Node)>(v1);
v8 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map constructedObjects>;
v9 = interfaceinvoke v8.<java.util.Map: boolean containsKey(java.lang.Object)>(v1);
if v9 == 0 goto label2;
v10 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map constructedObjects>;
v11 = interfaceinvoke v10.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
goto label3;
label2:
v11 = interfaceinvoke v7.<org.yaml.snakeyaml.constructor.Construct: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>(v1);
label3:
v12 = v11;
virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object finalizeConstruction(org.yaml.snakeyaml.nodes.Node,java.lang.Object)>(v1, v11);
v13 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map constructedObjects>;
interfaceinvoke v13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v11);
v14 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Set recursiveObjects>;
interfaceinvoke v14.<java.util.Set: boolean remove(java.lang.Object)>(v1);
v15 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: boolean isTwoStepsConstruction()>();
if v15 == 0 goto label4;
interfaceinvoke v7.<org.yaml.snakeyaml.constructor.Construct: void construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)>(v1, v11);
label4:
return v12;
}
protected org.yaml.snakeyaml.constructor.Construct getConstructor(org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
org.yaml.snakeyaml.nodes.Node v1;
org.yaml.snakeyaml.nodes.NodeId v4;
java.util.Map v15, v17, v3, v7, v9;
boolean v12, v14, v2;
java.util.Iterator v11;
java.util.Set v10;
org.yaml.snakeyaml.nodes.Tag v6;
java.lang.Object v13, v16, v18, v5, v8;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: boolean useClassConstructor()>();
if v2 == 0 goto label1;
v3 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map yamlClassConstructors>;
v4 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.NodeId getNodeId()>();
v5 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v4);
return v5;
label1:
v6 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
v7 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map yamlConstructors>;
v8 = interfaceinvoke v7.<java.util.Map: java.lang.Object get(java.lang.Object)>(v6);
if v8 != null goto label4;
v9 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map yamlMultiConstructors>;
v10 = interfaceinvoke v9.<java.util.Map: java.util.Set keySet()>();
v11 = interfaceinvoke v10.<java.util.Set: java.util.Iterator iterator()>();
label2:
v12 = interfaceinvoke v11.<java.util.Iterator: boolean hasNext()>();
if v12 == 0 goto label3;
v13 = interfaceinvoke v11.<java.util.Iterator: java.lang.Object next()>();
v14 = virtualinvoke v6.<org.yaml.snakeyaml.nodes.Tag: boolean startsWith(java.lang.String)>(v13);
if v14 == 0 goto label2;
v15 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map yamlMultiConstructors>;
v16 = interfaceinvoke v15.<java.util.Map: java.lang.Object get(java.lang.Object)>(v13);
return v16;
label3:
v17 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map yamlConstructors>;
v18 = interfaceinvoke v17.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);
return v18;
label4:
return v8;
}
protected java.lang.String constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)
{
org.yaml.snakeyaml.nodes.ScalarNode v1;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
java.lang.String v2;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.ScalarNode;
v2 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.ScalarNode: java.lang.String getValue()>();
return v2;
}
protected java.util.List createDefaultList(int)
{
int v1;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
java.util.ArrayList v2;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: int;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v1);
return v2;
}
protected java.util.Set createDefaultSet(int)
{
int v1;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
java.util.LinkedHashSet v2;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: int;
v2 = new java.util.LinkedHashSet;
specialinvoke v2.<java.util.LinkedHashSet: void <init>(int)>(v1);
return v2;
}
protected java.util.Map createDefaultMap(int)
{
int v1;
java.util.LinkedHashMap v2;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: int;
v2 = new java.util.LinkedHashMap;
specialinvoke v2.<java.util.LinkedHashMap: void <init>(int)>(v1);
return v2;
}
protected java.lang.Object createArray(java.lang.Class, int)
{
int v2;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
java.lang.Class v1, v3;
java.lang.Object v4;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: int;
v3 = virtualinvoke v1.<java.lang.Class: java.lang.Class getComponentType()>();
v4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v3, v2);
return v4;
}
protected java.lang.Object finalizeConstruction(org.yaml.snakeyaml.nodes.Node, java.lang.Object)
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
org.yaml.snakeyaml.nodes.Node v1;
java.util.Map v4, v6;
java.lang.Class v3;
java.lang.Object v2, v7, v8;
boolean v5;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.lang.Class getType()>();
v4 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map typeDefinitions>;
v5 = interfaceinvoke v4.<java.util.Map: boolean containsKey(java.lang.Object)>(v3);
if v5 == 0 goto label1;
v6 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map typeDefinitions>;
v7 = interfaceinvoke v6.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
v8 = virtualinvoke v7.<org.yaml.snakeyaml.TypeDescription: java.lang.Object finalizeConstruction(java.lang.Object)>(v2);
return v8;
label1:
return v2;
}
protected java.lang.Object newInstance(org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.nodes.Node v1;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
java.lang.Object v2;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object newInstance(java.lang.Class,org.yaml.snakeyaml.nodes.Node)>(class "Ljava/lang/Object;", v1);
return v2;
}
protected final java.lang.Object newInstance(java.lang.Class, org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.nodes.Node v2;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
java.lang.Class v1;
java.lang.Object v3;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: org.yaml.snakeyaml.nodes.Node;
v3 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object newInstance(java.lang.Class,org.yaml.snakeyaml.nodes.Node,boolean)>(v1, v2, 1);
return v3;
}
protected java.lang.Object newInstance(java.lang.Class, org.yaml.snakeyaml.nodes.Node, boolean)
{
java.lang.Object[] v15;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
java.lang.reflect.Constructor v14;
org.yaml.snakeyaml.nodes.Node v2;
java.util.Map v5, v7;
int v11;
boolean v10, v12, v3, v6;
java.lang.Class[] v13;
java.lang.Exception v17;
java.lang.Class v1, v4;
java.lang.Object v16, v19, v8, v9;
org.yaml.snakeyaml.error.YAMLException v18;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: org.yaml.snakeyaml.nodes.Node;
v3 := @parameter2: boolean;
label1:
v4 = virtualinvoke v2.<org.yaml.snakeyaml.nodes.Node: java.lang.Class getType()>();
v5 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map typeDefinitions>;
v6 = interfaceinvoke v5.<java.util.Map: boolean containsKey(java.lang.Object)>(v4);
if v6 == 0 goto label3;
v7 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map typeDefinitions>;
v8 = interfaceinvoke v7.<java.util.Map: java.lang.Object get(java.lang.Object)>(v4);
v9 = virtualinvoke v8.<org.yaml.snakeyaml.TypeDescription: java.lang.Object newInstance(org.yaml.snakeyaml.nodes.Node)>(v2);
if v9 == null goto label3;
label2:
return v9;
label3:
if v3 == 0 goto label6;
v10 = virtualinvoke v1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v4);
if v10 == 0 goto label6;
v11 = virtualinvoke v4.<java.lang.Class: int getModifiers()>();
v12 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>(v11);
if v12 != 0 goto label6;
v13 = newarray (java.lang.Class)[0];
v14 = virtualinvoke v4.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(v13);
virtualinvoke v14.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);
v15 = newarray (java.lang.Object)[0];
v16 = virtualinvoke v14.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v15);
label4:
return v16;
label5:
v17 := @caughtexception;
v18 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v18.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.Throwable)>(v17);
throw v18;
label6:
v19 = <org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object NOT_INSTANTIATED_OBJECT>;
return v19;
catch java.lang.Exception from label1 to label2 with label5;
catch java.lang.Exception from label3 to label4 with label5;
}
protected java.util.Set newSet(org.yaml.snakeyaml.nodes.CollectionNode)
{
java.util.List v4;
org.yaml.snakeyaml.nodes.CollectionNode v1;
int v5;
java.util.Set v6;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
java.lang.Object v2, v3;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.CollectionNode;
v2 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object newInstance(java.lang.Class,org.yaml.snakeyaml.nodes.Node)>(class "Ljava/util/Set;", v1);
v3 = <org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object NOT_INSTANTIATED_OBJECT>;
if v2 == v3 goto label1;
return v2;
label1:
v4 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.CollectionNode: java.util.List getValue()>();
v5 = interfaceinvoke v4.<java.util.List: int size()>();
v6 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Set createDefaultSet(int)>(v5);
return v6;
}
protected java.util.List newList(org.yaml.snakeyaml.nodes.SequenceNode)
{
java.util.List v4, v6;
org.yaml.snakeyaml.nodes.SequenceNode v1;
int v5;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
java.lang.Object v2, v3;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.SequenceNode;
v2 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object newInstance(java.lang.Class,org.yaml.snakeyaml.nodes.Node)>(class "Ljava/util/List;", v1);
v3 = <org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object NOT_INSTANTIATED_OBJECT>;
if v2 == v3 goto label1;
return v2;
label1:
v4 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List getValue()>();
v5 = interfaceinvoke v4.<java.util.List: int size()>();
v6 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.List createDefaultList(int)>(v5);
return v6;
}
protected java.util.Map newMap(org.yaml.snakeyaml.nodes.MappingNode)
{
java.util.List v4;
java.util.Map v6;
int v5;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
java.lang.Object v2, v3;
org.yaml.snakeyaml.nodes.MappingNode v1;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.MappingNode;
v2 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object newInstance(java.lang.Class,org.yaml.snakeyaml.nodes.Node)>(class "Ljava/util/Map;", v1);
v3 = <org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object NOT_INSTANTIATED_OBJECT>;
if v2 == v3 goto label1;
return v2;
label1:
v4 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List getValue()>();
v5 = interfaceinvoke v4.<java.util.List: int size()>();
v6 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map createDefaultMap(int)>(v5);
return v6;
}
protected java.util.List constructSequence(org.yaml.snakeyaml.nodes.SequenceNode)
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
java.util.List v2;
org.yaml.snakeyaml.nodes.SequenceNode v1;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.SequenceNode;
v2 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.List newList(org.yaml.snakeyaml.nodes.SequenceNode)>(v1);
virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: void constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.util.Collection)>(v1, v2);
return v2;
}
protected java.util.Set constructSet(org.yaml.snakeyaml.nodes.SequenceNode)
{
java.util.Set v2;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
org.yaml.snakeyaml.nodes.SequenceNode v1;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.SequenceNode;
v2 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Set newSet(org.yaml.snakeyaml.nodes.CollectionNode)>(v1);
virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: void constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.util.Collection)>(v1, v2);
return v2;
}
protected java.lang.Object constructArray(org.yaml.snakeyaml.nodes.SequenceNode)
{
java.util.List v3;
org.yaml.snakeyaml.nodes.SequenceNode v1;
int v4;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
java.lang.Class v2;
java.lang.Object v5, v6;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.SequenceNode;
v2 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.SequenceNode: java.lang.Class getType()>();
v3 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List getValue()>();
v4 = interfaceinvoke v3.<java.util.List: int size()>();
v5 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object createArray(java.lang.Class,int)>(v2, v4);
v6 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructArrayStep2(org.yaml.snakeyaml.nodes.SequenceNode,java.lang.Object)>(v1, v5);
return v6;
}
protected void constructSequenceStep2(org.yaml.snakeyaml.nodes.SequenceNode, java.util.Collection)
{
org.yaml.snakeyaml.nodes.SequenceNode v1;
java.util.Iterator v4;
java.util.Collection v2;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
java.util.List v3;
java.lang.Object v6, v7;
boolean v5;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.SequenceNode;
v2 := @parameter1: java.util.Collection;
v3 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List getValue()>();
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>(v6);
interfaceinvoke v2.<java.util.Collection: boolean add(java.lang.Object)>(v7);
goto label1;
label2:
return;
}
protected java.lang.Object constructArrayStep2(org.yaml.snakeyaml.nodes.SequenceNode, java.lang.Object)
{
org.yaml.snakeyaml.nodes.SequenceNode v1;
java.lang.NullPointerException v13;
byte v17;
boolean v12, v16, v19, v22, v25, v28, v31, v34, v37, v38, v8;
java.util.List v6;
float v29;
org.yaml.snakeyaml.error.YAMLException v39;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
long v26;
short v20;
int v23, v5;
java.lang.String v14;
double v32;
java.util.Iterator v7;
char v35;
java.lang.Class v10, v15, v18, v21, v24, v27, v3, v30, v33, v36, v4;
java.lang.Object v11, v2, v9;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.SequenceNode;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.SequenceNode: java.lang.Class getType()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.Class getComponentType()>();
v5 = 0;
v6 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List getValue()>();
v7 = interfaceinvoke v6.<java.util.List: java.util.Iterator iterator()>();
label01:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label14;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = virtualinvoke v9.<org.yaml.snakeyaml.nodes.Node: java.lang.Class getType()>();
if v10 != class "Ljava/lang/Object;" goto label02;
virtualinvoke v9.<org.yaml.snakeyaml.nodes.Node: void setType(java.lang.Class)>(v4);
label02:
v11 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>(v9);
v12 = virtualinvoke v4.<java.lang.Class: boolean isPrimitive()>();
if v12 == 0 goto label12;
if v11 != null goto label03;
v13 = new java.lang.NullPointerException;
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.yaml.snakeyaml.nodes.Node)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unable to construct element value for \u0001");
specialinvoke v13.<java.lang.NullPointerException: void <init>(java.lang.String)>(v14);
throw v13;
label03:
v15 = <java.lang.Byte: java.lang.Class TYPE>;
v16 = virtualinvoke v15.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
if v16 == 0 goto label04;
v17 = virtualinvoke v11.<java.lang.Number: byte byteValue()>();
staticinvoke <java.lang.reflect.Array: void setByte(java.lang.Object,int,byte)>(v2, v5, v17);
goto label13;
label04:
v18 = <java.lang.Short: java.lang.Class TYPE>;
v19 = virtualinvoke v18.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
if v19 == 0 goto label05;
v20 = virtualinvoke v11.<java.lang.Number: short shortValue()>();
staticinvoke <java.lang.reflect.Array: void setShort(java.lang.Object,int,short)>(v2, v5, v20);
goto label13;
label05:
v21 = <java.lang.Integer: java.lang.Class TYPE>;
v22 = virtualinvoke v21.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
if v22 == 0 goto label06;
v23 = virtualinvoke v11.<java.lang.Number: int intValue()>();
staticinvoke <java.lang.reflect.Array: void setInt(java.lang.Object,int,int)>(v2, v5, v23);
goto label13;
label06:
v24 = <java.lang.Long: java.lang.Class TYPE>;
v25 = virtualinvoke v24.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
if v25 == 0 goto label07;
v26 = virtualinvoke v11.<java.lang.Number: long longValue()>();
staticinvoke <java.lang.reflect.Array: void setLong(java.lang.Object,int,long)>(v2, v5, v26);
goto label13;
label07:
v27 = <java.lang.Float: java.lang.Class TYPE>;
v28 = virtualinvoke v27.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
if v28 == 0 goto label08;
v29 = virtualinvoke v11.<java.lang.Number: float floatValue()>();
staticinvoke <java.lang.reflect.Array: void setFloat(java.lang.Object,int,float)>(v2, v5, v29);
goto label13;
label08:
v30 = <java.lang.Double: java.lang.Class TYPE>;
v31 = virtualinvoke v30.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
if v31 == 0 goto label09;
v32 = virtualinvoke v11.<java.lang.Number: double doubleValue()>();
staticinvoke <java.lang.reflect.Array: void setDouble(java.lang.Object,int,double)>(v2, v5, v32);
goto label13;
label09:
v33 = <java.lang.Character: java.lang.Class TYPE>;
v34 = virtualinvoke v33.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
if v34 == 0 goto label10;
v35 = virtualinvoke v11.<java.lang.Character: char charValue()>();
staticinvoke <java.lang.reflect.Array: void setChar(java.lang.Object,int,char)>(v2, v5, v35);
goto label13;
label10:
v36 = <java.lang.Boolean: java.lang.Class TYPE>;
v37 = virtualinvoke v36.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
if v37 == 0 goto label11;
v38 = virtualinvoke v11.<java.lang.Boolean: boolean booleanValue()>();
staticinvoke <java.lang.reflect.Array: void setBoolean(java.lang.Object,int,boolean)>(v2, v5, v38);
goto label13;
label11:
v39 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v39.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>("unexpected primitive type");
throw v39;
label12:
staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(v2, v5, v11);
label13:
v5 = v5 + 1;
goto label01;
label14:
return v2;
}
protected java.util.Set constructSet(org.yaml.snakeyaml.nodes.MappingNode)
{
java.util.Set v2;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
org.yaml.snakeyaml.nodes.MappingNode v1;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.MappingNode;
v2 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Set newSet(org.yaml.snakeyaml.nodes.CollectionNode)>(v1);
virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)>(v1, v2);
return v2;
}
protected java.util.Map constructMapping(org.yaml.snakeyaml.nodes.MappingNode)
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
org.yaml.snakeyaml.nodes.MappingNode v1;
java.util.Map v2;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.MappingNode;
v2 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map newMap(org.yaml.snakeyaml.nodes.MappingNode)>(v1);
virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)>(v1, v2);
return v2;
}
protected void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode, java.util.Map)
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
org.yaml.snakeyaml.nodes.MappingNode v1;
org.yaml.snakeyaml.nodes.Node v14, v7, v8;
java.util.Map v2;
java.lang.String v13;
boolean v17, v19, v5;
java.util.Iterator v4;
org.yaml.snakeyaml.LoaderOptions v18;
org.yaml.snakeyaml.constructor.ConstructorException v11;
java.lang.Exception v10;
java.util.List v3;
org.yaml.snakeyaml.error.Mark v12, v15;
java.lang.Object v16, v6, v9;
org.yaml.snakeyaml.error.YAMLException v20;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.MappingNode;
v2 := @parameter1: java.util.Map;
v3 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List getValue()>();
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label8;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
v8 = virtualinvoke v6.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getValueNode()>();
v9 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>(v7);
if v9 == null goto label5;
label2:
virtualinvoke v9.<java.lang.Object: int hashCode()>();
label3:
goto label5;
label4:
v10 := @caughtexception;
v11 = new org.yaml.snakeyaml.constructor.ConstructorException;
v12 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: org.yaml.snakeyaml.error.Mark getStartMark()>();
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("found unacceptable key \u0001");
v14 = virtualinvoke v6.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
v15 = virtualinvoke v14.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v11.<org.yaml.snakeyaml.constructor.ConstructorException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)>("while constructing a mapping", v12, v13, v15, v10);
throw v11;
label5:
v16 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>(v8);
v17 = virtualinvoke v7.<org.yaml.snakeyaml.nodes.Node: boolean isTwoStepsConstruction()>();
if v17 == 0 goto label7;
v18 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.LoaderOptions loadingConfig>;
v19 = virtualinvoke v18.<org.yaml.snakeyaml.LoaderOptions: boolean getAllowRecursiveKeys()>();
if v19 == 0 goto label6;
virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: void postponeMapFilling(java.util.Map,java.lang.Object,java.lang.Object)>(v2, v9, v16);
goto label1;
label6:
v20 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v20.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>("Recursive key for mapping is detected but it is not configured to be allowed.");
throw v20;
label7:
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, v16);
goto label1;
label8:
return;
catch java.lang.Exception from label2 to label3 with label4;
}
protected void postponeMapFilling(java.util.Map, java.lang.Object, java.lang.Object)
{
java.util.Map v1;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple v5, v6;
java.lang.Object v2, v3;
java.util.ArrayList v4;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: java.util.Map;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.ArrayList maps2fill>;
v5 = new org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple;
v6 = new org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple;
specialinvoke v6.<org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple: void <init>(java.lang.Object,java.lang.Object)>(v2, v3);
specialinvoke v5.<org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple: void <init>(java.lang.Object,java.lang.Object)>(v1, v6);
virtualinvoke v4.<java.util.ArrayList: void add(int,java.lang.Object)>(0, v5);
return;
}
protected void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode, java.util.Set)
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
org.yaml.snakeyaml.nodes.MappingNode v1;
org.yaml.snakeyaml.nodes.Node v13, v7;
java.lang.String v12;
boolean v15, v5;
java.util.Iterator v4;
java.util.Set v2;
org.yaml.snakeyaml.constructor.ConstructorException v10;
java.lang.Exception v9;
java.util.List v3;
org.yaml.snakeyaml.error.Mark v11, v14;
java.lang.Object v6, v8;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.MappingNode;
v2 := @parameter1: java.util.Set;
v3 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List getValue()>();
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label7;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
v8 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>(v7);
if v8 == null goto label5;
label2:
virtualinvoke v8.<java.lang.Object: int hashCode()>();
label3:
goto label5;
label4:
v9 := @caughtexception;
v10 = new org.yaml.snakeyaml.constructor.ConstructorException;
v11 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: org.yaml.snakeyaml.error.Mark getStartMark()>();
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("found unacceptable key \u0001");
v13 = virtualinvoke v6.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
v14 = virtualinvoke v13.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v10.<org.yaml.snakeyaml.constructor.ConstructorException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)>("while constructing a Set", v11, v12, v14, v9);
throw v10;
label5:
v15 = virtualinvoke v7.<org.yaml.snakeyaml.nodes.Node: boolean isTwoStepsConstruction()>();
if v15 == 0 goto label6;
virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: void postponeSetFilling(java.util.Set,java.lang.Object)>(v2, v8);
goto label1;
label6:
interfaceinvoke v2.<java.util.Set: boolean add(java.lang.Object)>(v8);
goto label1;
label7:
return;
catch java.lang.Exception from label2 to label3 with label4;
}
protected void postponeSetFilling(java.util.Set, java.lang.Object)
{
java.util.Set v1;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple v4;
java.lang.Object v2;
java.util.ArrayList v3;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: java.util.Set;
v2 := @parameter1: java.lang.Object;
v3 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.ArrayList sets2fill>;
v4 = new org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple;
specialinvoke v4.<org.yaml.snakeyaml.constructor.BaseConstructor$RecursiveTuple: void <init>(java.lang.Object,java.lang.Object)>(v1, v2);
virtualinvoke v3.<java.util.ArrayList: void add(int,java.lang.Object)>(0, v4);
return;
}
public void setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)
{
java.util.Iterator v4;
java.util.Collection v3;
java.util.Map v2;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
java.lang.Object v6;
org.yaml.snakeyaml.introspector.PropertyUtils v1;
boolean v5;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.introspector.PropertyUtils;
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils> = v1;
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: boolean explicitPropertyUtils> = 1;
v2 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map typeDefinitions>;
v3 = interfaceinvoke v2.<java.util.Map: java.util.Collection values()>();
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v6.<org.yaml.snakeyaml.TypeDescription: void setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)>(v1);
goto label1;
label2:
return;
}
public final org.yaml.snakeyaml.introspector.PropertyUtils getPropertyUtils()
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
org.yaml.snakeyaml.introspector.PropertyUtils v1, v2, v3;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils>;
if v1 != null goto label1;
v2 = new org.yaml.snakeyaml.introspector.PropertyUtils;
specialinvoke v2.<org.yaml.snakeyaml.introspector.PropertyUtils: void <init>()>();
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils> = v2;
label1:
v3 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils>;
return v3;
}
public org.yaml.snakeyaml.TypeDescription addTypeDescription(org.yaml.snakeyaml.TypeDescription)
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
org.yaml.snakeyaml.nodes.Tag v3;
java.lang.NullPointerException v2;
java.util.Map v4, v7;
java.lang.Class v5, v8;
java.lang.Object v9;
org.yaml.snakeyaml.TypeDescription v1;
org.yaml.snakeyaml.introspector.PropertyUtils v6;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: org.yaml.snakeyaml.TypeDescription;
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>("TypeDescription is required.");
throw v2;
label1:
v3 = virtualinvoke v1.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.nodes.Tag getTag()>();
v4 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map typeTags>;
v5 = virtualinvoke v1.<org.yaml.snakeyaml.TypeDescription: java.lang.Class getType()>();
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, v5);
v6 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.introspector.PropertyUtils getPropertyUtils()>();
virtualinvoke v1.<org.yaml.snakeyaml.TypeDescription: void setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)>(v6);
v7 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: java.util.Map typeDefinitions>;
v8 = virtualinvoke v1.<org.yaml.snakeyaml.TypeDescription: java.lang.Class getType()>();
v9 = interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v8, v1);
return v9;
}
public final boolean isExplicitPropertyUtils()
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
boolean v1;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: boolean explicitPropertyUtils>;
return v1;
}
public boolean isAllowDuplicateKeys()
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
boolean v1;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: boolean allowDuplicateKeys>;
return v1;
}
public void setAllowDuplicateKeys(boolean)
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
boolean v1;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: boolean;
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: boolean allowDuplicateKeys> = v1;
return;
}
public boolean isWrappedToRootException()
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
boolean v1;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: boolean wrappedToRootException>;
return v1;
}
public void setWrappedToRootException(boolean)
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
boolean v1;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: boolean;
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: boolean wrappedToRootException> = v1;
return;
}
public boolean isEnumCaseSensitive()
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
boolean v1;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: boolean enumCaseSensitive>;
return v1;
}
public void setEnumCaseSensitive(boolean)
{
org.yaml.snakeyaml.constructor.BaseConstructor v0;
boolean v1;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 := @parameter0: boolean;
v0.<org.yaml.snakeyaml.constructor.BaseConstructor: boolean enumCaseSensitive> = v1;
return;
}
public org.yaml.snakeyaml.LoaderOptions getLoadingConfig()
{
org.yaml.snakeyaml.LoaderOptions v1;
org.yaml.snakeyaml.constructor.BaseConstructor v0;
v0 := @this: org.yaml.snakeyaml.constructor.BaseConstructor;
v1 = v0.<org.yaml.snakeyaml.constructor.BaseConstructor: org.yaml.snakeyaml.LoaderOptions loadingConfig>;
return v1;
}
static void <clinit>()
{
java.lang.Object v0;
v0 = new java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
<org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object NOT_INSTANTIATED_OBJECT> = v0;
return;
}
}