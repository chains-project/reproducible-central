public class org.yaml.snakeyaml.constructor.Constructor$ConstructMapping extends java.lang.Object implements org.yaml.snakeyaml.constructor.Construct
{
final org.yaml.snakeyaml.constructor.Constructor this$0;
protected void <init>(org.yaml.snakeyaml.constructor.Constructor)
{
org.yaml.snakeyaml.constructor.Constructor$ConstructMapping v0;
org.yaml.snakeyaml.constructor.Constructor v1;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor$ConstructMapping;
v1 := @parameter0: org.yaml.snakeyaml.constructor.Constructor;
v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: org.yaml.snakeyaml.constructor.Constructor this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.nodes.Node v1;
java.util.Map v7, v9;
java.lang.String v25;
boolean v12, v13, v21, v4, v5;
org.yaml.snakeyaml.constructor.Constructor$ConstructMapping v0;
org.yaml.snakeyaml.constructor.Constructor v14, v16, v18, v6, v8;
java.util.Set v15, v17;
org.yaml.snakeyaml.constructor.ConstructorException v23;
org.yaml.snakeyaml.nodes.Tag v24;
org.yaml.snakeyaml.error.Mark v26;
java.lang.Class v10, v11, v2, v3;
java.lang.Object v19, v20, v22;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor$ConstructMapping;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = class "Ljava/util/Map;";
v3 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.lang.Class getType()>();
v4 = virtualinvoke v2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v3);
if v4 == 0 goto label2;
v5 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: boolean isTwoStepsConstruction()>();
if v5 == 0 goto label1;
v6 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: org.yaml.snakeyaml.constructor.Constructor this$0>;
v7 = virtualinvoke v6.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map newMap(org.yaml.snakeyaml.nodes.MappingNode)>(v1);
return v7;
label1:
v8 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: org.yaml.snakeyaml.constructor.Constructor this$0>;
v9 = virtualinvoke v8.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map constructMapping(org.yaml.snakeyaml.nodes.MappingNode)>(v1);
return v9;
label2:
v10 = class "Ljava/util/Collection;";
v11 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.lang.Class getType()>();
v12 = virtualinvoke v10.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v11);
if v12 == 0 goto label4;
v13 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: boolean isTwoStepsConstruction()>();
if v13 == 0 goto label3;
v14 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: org.yaml.snakeyaml.constructor.Constructor this$0>;
v15 = virtualinvoke v14.<org.yaml.snakeyaml.constructor.Constructor: java.util.Set newSet(org.yaml.snakeyaml.nodes.CollectionNode)>(v1);
return v15;
label3:
v16 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: org.yaml.snakeyaml.constructor.Constructor this$0>;
v17 = virtualinvoke v16.<org.yaml.snakeyaml.constructor.Constructor: java.util.Set constructSet(org.yaml.snakeyaml.nodes.MappingNode)>(v1);
return v17;
label4:
v18 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: org.yaml.snakeyaml.constructor.Constructor this$0>;
v19 = virtualinvoke v18.<org.yaml.snakeyaml.constructor.Constructor: java.lang.Object newInstance(org.yaml.snakeyaml.nodes.Node)>(v1);
v20 = <org.yaml.snakeyaml.constructor.BaseConstructor: java.lang.Object NOT_INSTANTIATED_OBJECT>;
if v19 == v20 goto label6;
v21 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: boolean isTwoStepsConstruction()>();
if v21 == 0 goto label5;
return v19;
label5:
v22 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: java.lang.Object constructJavaBean2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.lang.Object)>(v1, v19);
return v22;
label6:
v23 = new org.yaml.snakeyaml.constructor.ConstructorException;
v24 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: org.yaml.snakeyaml.nodes.Tag getTag()>();
v25 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.yaml.snakeyaml.nodes.Tag)>(v24) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Can\'t create an instance for \u0001");
v26 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v23.<org.yaml.snakeyaml.constructor.ConstructorException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)>(null, null, v25, v26);
throw v23;
}
public void construct2ndStep(org.yaml.snakeyaml.nodes.Node, java.lang.Object)
{
org.yaml.snakeyaml.constructor.Constructor$ConstructMapping v0;
org.yaml.snakeyaml.constructor.Constructor v10, v6;
org.yaml.snakeyaml.nodes.Node v1;
java.lang.Class v3, v4, v7, v8;
java.lang.Object v2;
boolean v5, v9;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor$ConstructMapping;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 := @parameter1: java.lang.Object;
v3 = class "Ljava/util/Map;";
v4 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.lang.Class getType()>();
v5 = virtualinvoke v3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v4);
if v5 == 0 goto label1;
v6 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: org.yaml.snakeyaml.constructor.Constructor this$0>;
virtualinvoke v6.<org.yaml.snakeyaml.constructor.Constructor: void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)>(v1, v2);
goto label3;
label1:
v7 = class "Ljava/util/Set;";
v8 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.lang.Class getType()>();
v9 = virtualinvoke v7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v8);
if v9 == 0 goto label2;
v10 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: org.yaml.snakeyaml.constructor.Constructor this$0>;
virtualinvoke v10.<org.yaml.snakeyaml.constructor.Constructor: void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)>(v1, v2);
goto label3;
label2:
virtualinvoke v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: java.lang.Object constructJavaBean2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.lang.Object)>(v1, v2);
label3:
return;
}
protected java.lang.Object constructJavaBean2ndStep(org.yaml.snakeyaml.nodes.MappingNode, java.lang.Object)
{
org.yaml.snakeyaml.nodes.Node v11, v9;
org.yaml.snakeyaml.nodes.NodeId v25, v26, v29, v30;
java.util.Map v14;
org.yaml.snakeyaml.constructor.DuplicateKeyException v58;
org.yaml.snakeyaml.introspector.Property v16, v17;
org.yaml.snakeyaml.constructor.ConstructorException v60;
java.lang.Exception v59;
org.yaml.snakeyaml.error.Mark v62, v64;
org.yaml.snakeyaml.error.YAMLException v19;
java.lang.String v20, v21, v56, v61, v63;
org.yaml.snakeyaml.constructor.Constructor$ConstructMapping v0;
org.yaml.snakeyaml.constructor.Constructor v10, v13, v3, v44;
java.lang.Class[] v27;
boolean v18, v23, v24, v34, v40, v49, v54, v55, v57, v7;
java.util.List v5;
float v50;
org.yaml.snakeyaml.nodes.MappingNode v1;
int v28;
java.lang.Boolean v37, v42;
java.util.Iterator v6;
org.yaml.snakeyaml.nodes.Tag v52, v53;
java.lang.Class v22, v31, v32, v33, v35, v36, v38, v39, v4, v41, v46, v47, v48, v51;
java.lang.Object v12, v15, v2, v43, v45, v8;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor$ConstructMapping;
v1 := @parameter0: org.yaml.snakeyaml.nodes.MappingNode;
v2 := @parameter1: java.lang.Object;
v3 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: org.yaml.snakeyaml.constructor.Constructor this$0>;
virtualinvoke v3.<org.yaml.snakeyaml.constructor.Constructor: void flattenMapping(org.yaml.snakeyaml.nodes.MappingNode,boolean)>(v1, 1);
v4 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: java.lang.Class getType()>();
v5 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List getValue()>();
v6 = interfaceinvoke v5.<java.util.List: java.util.Iterator iterator()>();
label01:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label20;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = virtualinvoke v8.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getValueNode()>();
v10 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: org.yaml.snakeyaml.constructor.Constructor this$0>;
v11 = virtualinvoke v8.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
v12 = virtualinvoke v10.<org.yaml.snakeyaml.constructor.Constructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>(v11);
label02:
v13 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: org.yaml.snakeyaml.constructor.Constructor this$0>;
v14 = v13.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map typeDefinitions>;
v15 = interfaceinvoke v14.<java.util.Map: java.lang.Object get(java.lang.Object)>(v4);
if v15 != null goto label03;
v16 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: org.yaml.snakeyaml.introspector.Property getProperty(java.lang.Class,java.lang.String)>(v4, v12);
goto label04;
label03:
v16 = virtualinvoke v15.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.introspector.Property getProperty(java.lang.String)>(v12);
label04:
v17 = v16;
v18 = virtualinvoke v16.<org.yaml.snakeyaml.introspector.Property: boolean isWritable()>();
if v18 != 0 goto label05;
v19 = new org.yaml.snakeyaml.error.YAMLException;
v20 = virtualinvoke v4.<java.lang.Class: java.lang.String getName()>();
v21 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v12, v20) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No writable property \'\u0001\' on class: \u0001");
specialinvoke v19.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v21);
throw v19;
label05:
v22 = virtualinvoke v16.<org.yaml.snakeyaml.introspector.Property: java.lang.Class getType()>();
virtualinvoke v9.<org.yaml.snakeyaml.nodes.Node: void setType(java.lang.Class)>(v22);
if v15 == null goto label06;
v23 = virtualinvoke v15.<org.yaml.snakeyaml.TypeDescription: boolean setupPropertyType(java.lang.String,org.yaml.snakeyaml.nodes.Node)>(v12, v9);
if v23 == 0 goto label06;
v24 = 1;
goto label07;
label06:
v24 = 0;
label07:
if v24 != 0 goto label10;
v25 = virtualinvoke v9.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.NodeId getNodeId()>();
v26 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId scalar>;
if v25 == v26 goto label10;
v27 = virtualinvoke v17.<org.yaml.snakeyaml.introspector.Property: java.lang.Class[] getActualTypeArguments()>();
if v27 == null goto label10;
v28 = lengthof v27;
if v28 <= 0 goto label10;
v29 = virtualinvoke v9.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.NodeId getNodeId()>();
v30 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId sequence>;
if v29 != v30 goto label08;
v31 = v27[0];
virtualinvoke v9.<org.yaml.snakeyaml.nodes.SequenceNode: void setListType(java.lang.Class)>(v31);
goto label10;
label08:
v32 = class "Ljava/util/Map;";
v33 = virtualinvoke v9.<org.yaml.snakeyaml.nodes.Node: java.lang.Class getType()>();
v34 = virtualinvoke v32.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v33);
if v34 == 0 goto label09;
v35 = v27[0];
v36 = v27[1];
virtualinvoke v9.<org.yaml.snakeyaml.nodes.MappingNode: void setTypes(java.lang.Class,java.lang.Class)>(v35, v36);
v37 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
virtualinvoke v9.<org.yaml.snakeyaml.nodes.MappingNode: void setUseClassConstructor(java.lang.Boolean)>(v37);
goto label10;
label09:
v38 = class "Ljava/util/Collection;";
v39 = virtualinvoke v9.<org.yaml.snakeyaml.nodes.Node: java.lang.Class getType()>();
v40 = virtualinvoke v38.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v39);
if v40 == 0 goto label10;
v41 = v27[0];
virtualinvoke v9.<org.yaml.snakeyaml.nodes.MappingNode: void setOnlyKeyType(java.lang.Class)>(v41);
v42 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
virtualinvoke v9.<org.yaml.snakeyaml.nodes.MappingNode: void setUseClassConstructor(java.lang.Boolean)>(v42);
label10:
if v15 == null goto label11;
v43 = specialinvoke v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: java.lang.Object newInstance(org.yaml.snakeyaml.TypeDescription,java.lang.String,org.yaml.snakeyaml.nodes.Node)>(v15, v12, v9);
goto label12;
label11:
v44 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: org.yaml.snakeyaml.constructor.Constructor this$0>;
v43 = virtualinvoke v44.<org.yaml.snakeyaml.constructor.Constructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>(v9);
label12:
v45 = v43;
v46 = virtualinvoke v17.<org.yaml.snakeyaml.introspector.Property: java.lang.Class getType()>();
v47 = <java.lang.Float: java.lang.Class TYPE>;
if v46 == v47 goto label13;
v48 = virtualinvoke v17.<org.yaml.snakeyaml.introspector.Property: java.lang.Class getType()>();
if v48 != class "Ljava/lang/Float;" goto label14;
label13:
v49 = v45 instanceof java.lang.Double;
if v49 == 0 goto label14;
v50 = virtualinvoke v45.<java.lang.Double: float floatValue()>();
v45 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(v50);
label14:
v51 = virtualinvoke v17.<org.yaml.snakeyaml.introspector.Property: java.lang.Class getType()>();
if v51 != class "Ljava/lang/String;" goto label15;
v52 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag BINARY>;
v53 = virtualinvoke v9.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
v54 = virtualinvoke v52.<org.yaml.snakeyaml.nodes.Tag: boolean equals(java.lang.Object)>(v53);
if v54 == 0 goto label15;
v55 = v45 instanceof byte[];
if v55 == 0 goto label15;
v56 = new java.lang.String;
specialinvoke v56.<java.lang.String: void <init>(byte[])>(v45);
v45 = v56;
label15:
if v15 == null goto label16;
v57 = virtualinvoke v15.<org.yaml.snakeyaml.TypeDescription: boolean setProperty(java.lang.Object,java.lang.String,java.lang.Object)>(v2, v12, v45);
if v57 != 0 goto label01;
label16:
virtualinvoke v17.<org.yaml.snakeyaml.introspector.Property: void set(java.lang.Object,java.lang.Object)>(v2, v45);
label17:
goto label01;
label18:
v58 := @caughtexception;
throw v58;
label19:
v59 := @caughtexception;
v60 = new org.yaml.snakeyaml.constructor.ConstructorException;
v61 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Object)>(v12, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot create property=\u0001 for JavaBean=\u0001");
v62 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: org.yaml.snakeyaml.error.Mark getStartMark()>();
v63 = virtualinvoke v59.<java.lang.Exception: java.lang.String getMessage()>();
v64 = virtualinvoke v9.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v60.<org.yaml.snakeyaml.constructor.ConstructorException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)>(v61, v62, v63, v64, v59);
throw v60;
label20:
return v2;
catch org.yaml.snakeyaml.constructor.DuplicateKeyException from label02 to label17 with label18;
catch java.lang.Exception from label02 to label17 with label19;
}
private java.lang.Object newInstance(org.yaml.snakeyaml.TypeDescription, java.lang.String, org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.constructor.Constructor$ConstructMapping v0;
org.yaml.snakeyaml.constructor.Constructor v5, v7, v9;
org.yaml.snakeyaml.nodes.Node v3;
java.util.Map v6;
java.lang.Object v10, v4, v8;
org.yaml.snakeyaml.TypeDescription v1;
java.lang.String v2;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor$ConstructMapping;
v1 := @parameter0: org.yaml.snakeyaml.TypeDescription;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: org.yaml.snakeyaml.nodes.Node;
v4 = virtualinvoke v1.<org.yaml.snakeyaml.TypeDescription: java.lang.Object newInstance(java.lang.String,org.yaml.snakeyaml.nodes.Node)>(v2, v3);
if v4 == null goto label1;
v5 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: org.yaml.snakeyaml.constructor.Constructor this$0>;
v6 = v5.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map constructedObjects>;
interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, v4);
v7 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: org.yaml.snakeyaml.constructor.Constructor this$0>;
v8 = virtualinvoke v7.<org.yaml.snakeyaml.constructor.Constructor: java.lang.Object constructObjectNoCheck(org.yaml.snakeyaml.nodes.Node)>(v3);
return v8;
label1:
v9 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: org.yaml.snakeyaml.constructor.Constructor this$0>;
v10 = virtualinvoke v9.<org.yaml.snakeyaml.constructor.Constructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>(v3);
return v10;
}
protected org.yaml.snakeyaml.introspector.Property getProperty(java.lang.Class, java.lang.String)
{
org.yaml.snakeyaml.constructor.Constructor$ConstructMapping v0;
org.yaml.snakeyaml.constructor.Constructor v3;
org.yaml.snakeyaml.introspector.Property v5;
java.lang.Class v1;
java.lang.String v2;
org.yaml.snakeyaml.introspector.PropertyUtils v4;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor$ConstructMapping;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: org.yaml.snakeyaml.constructor.Constructor this$0>;
v4 = virtualinvoke v3.<org.yaml.snakeyaml.constructor.Constructor: org.yaml.snakeyaml.introspector.PropertyUtils getPropertyUtils()>();
v5 = virtualinvoke v4.<org.yaml.snakeyaml.introspector.PropertyUtils: org.yaml.snakeyaml.introspector.Property getProperty(java.lang.Class,java.lang.String)>(v1, v2);
return v5;
}
}