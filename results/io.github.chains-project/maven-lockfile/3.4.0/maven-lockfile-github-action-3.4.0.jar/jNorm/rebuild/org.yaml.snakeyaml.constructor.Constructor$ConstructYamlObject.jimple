public class org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject extends java.lang.Object implements org.yaml.snakeyaml.constructor.Construct
{
final org.yaml.snakeyaml.constructor.Constructor this$0;
protected void <init>(org.yaml.snakeyaml.constructor.Constructor)
{
org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject v0;
org.yaml.snakeyaml.constructor.Constructor v1;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject;
v1 := @parameter0: org.yaml.snakeyaml.constructor.Constructor;
v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject: org.yaml.snakeyaml.constructor.Constructor this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
private org.yaml.snakeyaml.constructor.Construct getConstructor(org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.constructor.Constructor v2, v4;
org.yaml.snakeyaml.nodes.Node v1;
org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject v0;
org.yaml.snakeyaml.nodes.NodeId v6;
java.util.Map v5;
java.lang.Class v3;
java.lang.Object v7;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject: org.yaml.snakeyaml.constructor.Constructor this$0>;
v3 = virtualinvoke v2.<org.yaml.snakeyaml.constructor.Constructor: java.lang.Class getClassForNode(org.yaml.snakeyaml.nodes.Node)>(v1);
virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: void setType(java.lang.Class)>(v3);
v4 = v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject: org.yaml.snakeyaml.constructor.Constructor this$0>;
v5 = v4.<org.yaml.snakeyaml.constructor.Constructor: java.util.Map yamlClassConstructors>;
v6 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.NodeId getNodeId()>();
v7 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v6);
return v7;
}
public java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.constructor.Construct v2;
org.yaml.snakeyaml.constructor.ConstructorException v4, v6;
org.yaml.snakeyaml.nodes.Tag v7;
java.lang.Exception v5;
org.yaml.snakeyaml.nodes.Node v1;
org.yaml.snakeyaml.error.Mark v10;
org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject v0;
java.lang.Object v3;
java.lang.String v8, v9;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
label1:
v2 = specialinvoke v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject: org.yaml.snakeyaml.constructor.Construct getConstructor(org.yaml.snakeyaml.nodes.Node)>(v1);
v3 = interfaceinvoke v2.<org.yaml.snakeyaml.constructor.Construct: java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)>(v1);
label2:
return v3;
label3:
v4 := @caughtexception;
throw v4;
label4:
v5 := @caughtexception;
v6 = new org.yaml.snakeyaml.constructor.ConstructorException;
v7 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
v8 = virtualinvoke v5.<java.lang.Exception: java.lang.String getMessage()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.yaml.snakeyaml.nodes.Tag,java.lang.String)>(v7, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Can\'t construct a java object for \u0001; exception=\u0001");
v10 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v6.<org.yaml.snakeyaml.constructor.ConstructorException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)>(null, null, v9, v10, v5);
throw v6;
catch org.yaml.snakeyaml.constructor.ConstructorException from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
public void construct2ndStep(org.yaml.snakeyaml.nodes.Node, java.lang.Object)
{
org.yaml.snakeyaml.constructor.Construct v3;
org.yaml.snakeyaml.constructor.ConstructorException v5;
org.yaml.snakeyaml.nodes.Tag v6;
java.lang.Exception v4;
org.yaml.snakeyaml.nodes.Node v1;
org.yaml.snakeyaml.error.Mark v9;
org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject v0;
java.lang.Object v2;
java.lang.String v7, v8;
v0 := @this: org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 := @parameter1: java.lang.Object;
label1:
v3 = specialinvoke v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject: org.yaml.snakeyaml.constructor.Construct getConstructor(org.yaml.snakeyaml.nodes.Node)>(v1);
interfaceinvoke v3.<org.yaml.snakeyaml.constructor.Construct: void construct2ndStep(org.yaml.snakeyaml.nodes.Node,java.lang.Object)>(v1, v2);
label2:
goto label4;
label3:
v4 := @caughtexception;
v5 = new org.yaml.snakeyaml.constructor.ConstructorException;
v6 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
v7 = virtualinvoke v4.<java.lang.Exception: java.lang.String getMessage()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.yaml.snakeyaml.nodes.Tag,java.lang.String)>(v6, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Can\'t construct a second step for a java object for \u0001; exception=\u0001");
v9 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v5.<org.yaml.snakeyaml.constructor.ConstructorException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)>(null, null, v8, v9, v4);
throw v5;
label4:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
}