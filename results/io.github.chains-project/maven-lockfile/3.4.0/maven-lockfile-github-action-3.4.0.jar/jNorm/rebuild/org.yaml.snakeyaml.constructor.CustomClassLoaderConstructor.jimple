public class org.yaml.snakeyaml.constructor.CustomClassLoaderConstructor extends org.yaml.snakeyaml.constructor.Constructor
{
private final java.lang.ClassLoader loader;
public void <init>(java.lang.ClassLoader, org.yaml.snakeyaml.LoaderOptions)
{
org.yaml.snakeyaml.constructor.CustomClassLoaderConstructor v0;
org.yaml.snakeyaml.LoaderOptions v2;
java.lang.ClassLoader v1;
v0 := @this: org.yaml.snakeyaml.constructor.CustomClassLoaderConstructor;
v1 := @parameter0: java.lang.ClassLoader;
v2 := @parameter1: org.yaml.snakeyaml.LoaderOptions;
specialinvoke v0.<org.yaml.snakeyaml.constructor.CustomClassLoaderConstructor: void <init>(java.lang.Class,java.lang.ClassLoader,org.yaml.snakeyaml.LoaderOptions)>(class "Ljava/lang/Object;", v1, v2);
return;
}
public void <init>(java.lang.Class, java.lang.ClassLoader, org.yaml.snakeyaml.LoaderOptions)
{
org.yaml.snakeyaml.constructor.CustomClassLoaderConstructor v0;
org.yaml.snakeyaml.LoaderOptions v3;
java.lang.Class v1;
java.lang.ClassLoader v2;
java.lang.NullPointerException v4;
v0 := @this: org.yaml.snakeyaml.constructor.CustomClassLoaderConstructor;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.ClassLoader;
v3 := @parameter2: org.yaml.snakeyaml.LoaderOptions;
specialinvoke v0.<org.yaml.snakeyaml.constructor.Constructor: void <init>(java.lang.Class,org.yaml.snakeyaml.LoaderOptions)>(v1, v3);
if v2 != null goto label1;
v4 = new java.lang.NullPointerException;
specialinvoke v4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Loader must be provided.");
throw v4;
label1:
v0.<org.yaml.snakeyaml.constructor.CustomClassLoaderConstructor: java.lang.ClassLoader loader> = v2;
return;
}
protected java.lang.Class getClassForName(java.lang.String) throws java.lang.ClassNotFoundException
{
org.yaml.snakeyaml.constructor.CustomClassLoaderConstructor v0;
java.lang.Class v3;
java.lang.ClassLoader v2;
java.lang.String v1;
v0 := @this: org.yaml.snakeyaml.constructor.CustomClassLoaderConstructor;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.yaml.snakeyaml.constructor.CustomClassLoaderConstructor: java.lang.ClassLoader loader>;
v3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(v1, 1, v2);
return v3;
}
}