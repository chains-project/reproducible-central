public class org.yaml.snakeyaml.constructor.SafeConstructor extends org.yaml.snakeyaml.constructor.BaseConstructor
{
public static final org.yaml.snakeyaml.constructor.SafeConstructor$ConstructUndefined undefinedConstructor;
private static final java.util.Map BOOL_VALUES;
private static final int[][] RADIX_MAX;
private static final java.util.regex.Pattern TIMESTAMP_REGEXP;
private static final java.util.regex.Pattern YMD_REGEXP;
public void <init>(org.yaml.snakeyaml.LoaderOptions)
{
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlPairs v25;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlInt v10;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlTimestamp v19;
org.yaml.snakeyaml.constructor.SafeConstructor v0;
org.yaml.snakeyaml.nodes.NodeId v41, v44, v47;
java.util.Map v11, v14, v17, v2, v20, v23, v26, v29, v32, v35, v38, v40, v43, v46, v5, v8;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlBinary v16;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlBool v7;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlFloat v13;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructUndefined v39, v42, v45, v48;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlOmap v22;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlNull v4;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlStr v31;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlMap v37;
org.yaml.snakeyaml.LoaderOptions v1;
org.yaml.snakeyaml.nodes.Tag v12, v15, v18, v21, v24, v27, v3, v30, v33, v36, v6, v9;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSet v28;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq v34;
v0 := @this: org.yaml.snakeyaml.constructor.SafeConstructor;
v1 := @parameter0: org.yaml.snakeyaml.LoaderOptions;
specialinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: void <init>(org.yaml.snakeyaml.LoaderOptions)>(v1);
v2 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map yamlConstructors>;
v3 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag NULL>;
v4 = new org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlNull;
specialinvoke v4.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlNull: void <init>(org.yaml.snakeyaml.constructor.SafeConstructor)>(v0);
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, v4);
v5 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map yamlConstructors>;
v6 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag BOOL>;
v7 = new org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlBool;
specialinvoke v7.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlBool: void <init>(org.yaml.snakeyaml.constructor.SafeConstructor)>(v0);
interfaceinvoke v5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v7);
v8 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map yamlConstructors>;
v9 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag INT>;
v10 = new org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlInt;
specialinvoke v10.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlInt: void <init>(org.yaml.snakeyaml.constructor.SafeConstructor)>(v0);
interfaceinvoke v8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, v10);
v11 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map yamlConstructors>;
v12 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag FLOAT>;
v13 = new org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlFloat;
specialinvoke v13.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlFloat: void <init>(org.yaml.snakeyaml.constructor.SafeConstructor)>(v0);
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v12, v13);
v14 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map yamlConstructors>;
v15 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag BINARY>;
v16 = new org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlBinary;
specialinvoke v16.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlBinary: void <init>(org.yaml.snakeyaml.constructor.SafeConstructor)>(v0);
interfaceinvoke v14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v15, v16);
v17 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map yamlConstructors>;
v18 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag TIMESTAMP>;
v19 = new org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlTimestamp;
specialinvoke v19.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlTimestamp: void <init>()>();
interfaceinvoke v17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v18, v19);
v20 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map yamlConstructors>;
v21 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag OMAP>;
v22 = new org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlOmap;
specialinvoke v22.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlOmap: void <init>(org.yaml.snakeyaml.constructor.SafeConstructor)>(v0);
interfaceinvoke v20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v21, v22);
v23 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map yamlConstructors>;
v24 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag PAIRS>;
v25 = new org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlPairs;
specialinvoke v25.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlPairs: void <init>(org.yaml.snakeyaml.constructor.SafeConstructor)>(v0);
interfaceinvoke v23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v24, v25);
v26 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map yamlConstructors>;
v27 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag SET>;
v28 = new org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSet;
specialinvoke v28.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSet: void <init>(org.yaml.snakeyaml.constructor.SafeConstructor)>(v0);
interfaceinvoke v26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v27, v28);
v29 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map yamlConstructors>;
v30 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag STR>;
v31 = new org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlStr;
specialinvoke v31.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlStr: void <init>(org.yaml.snakeyaml.constructor.SafeConstructor)>(v0);
interfaceinvoke v29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v30, v31);
v32 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map yamlConstructors>;
v33 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag SEQ>;
v34 = new org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq;
specialinvoke v34.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlSeq: void <init>(org.yaml.snakeyaml.constructor.SafeConstructor)>(v0);
interfaceinvoke v32.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v33, v34);
v35 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map yamlConstructors>;
v36 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag MAP>;
v37 = new org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlMap;
specialinvoke v37.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlMap: void <init>(org.yaml.snakeyaml.constructor.SafeConstructor)>(v0);
interfaceinvoke v35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v36, v37);
v38 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map yamlConstructors>;
v39 = <org.yaml.snakeyaml.constructor.SafeConstructor: org.yaml.snakeyaml.constructor.SafeConstructor$ConstructUndefined undefinedConstructor>;
interfaceinvoke v38.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, v39);
v40 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map yamlClassConstructors>;
v41 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId scalar>;
v42 = <org.yaml.snakeyaml.constructor.SafeConstructor: org.yaml.snakeyaml.constructor.SafeConstructor$ConstructUndefined undefinedConstructor>;
interfaceinvoke v40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v41, v42);
v43 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map yamlClassConstructors>;
v44 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId sequence>;
v45 = <org.yaml.snakeyaml.constructor.SafeConstructor: org.yaml.snakeyaml.constructor.SafeConstructor$ConstructUndefined undefinedConstructor>;
interfaceinvoke v43.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v44, v45);
v46 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map yamlClassConstructors>;
v47 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId mapping>;
v48 = <org.yaml.snakeyaml.constructor.SafeConstructor: org.yaml.snakeyaml.constructor.SafeConstructor$ConstructUndefined undefinedConstructor>;
interfaceinvoke v46.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v47, v48);
return;
}
protected void flattenMapping(org.yaml.snakeyaml.nodes.MappingNode)
{
org.yaml.snakeyaml.constructor.SafeConstructor v0;
org.yaml.snakeyaml.nodes.MappingNode v1;
v0 := @this: org.yaml.snakeyaml.constructor.SafeConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.MappingNode;
virtualinvoke v0.<org.yaml.snakeyaml.constructor.SafeConstructor: void flattenMapping(org.yaml.snakeyaml.nodes.MappingNode,boolean)>(v1, 0);
return;
}
protected void flattenMapping(org.yaml.snakeyaml.nodes.MappingNode, boolean)
{
java.util.List v6;
org.yaml.snakeyaml.constructor.SafeConstructor v0;
java.util.HashMap v4;
org.yaml.snakeyaml.nodes.MappingNode v1;
boolean v2, v3;
java.util.ArrayList v5;
v0 := @this: org.yaml.snakeyaml.constructor.SafeConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.MappingNode;
v2 := @parameter1: boolean;
virtualinvoke v0.<org.yaml.snakeyaml.constructor.SafeConstructor: void processDuplicateKeys(org.yaml.snakeyaml.nodes.MappingNode,boolean)>(v1, v2);
v3 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: boolean isMerged()>();
if v3 == 0 goto label1;
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>()>();
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>()>();
v6 = specialinvoke v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.List mergeNode(org.yaml.snakeyaml.nodes.MappingNode,boolean,java.util.Map,java.util.List,boolean)>(v1, 1, v4, v5, v2);
virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: void setValue(java.util.List)>(v6);
label1:
return;
}
protected void processDuplicateKeys(org.yaml.snakeyaml.nodes.MappingNode)
{
org.yaml.snakeyaml.constructor.SafeConstructor v0;
org.yaml.snakeyaml.nodes.MappingNode v1;
v0 := @this: org.yaml.snakeyaml.constructor.SafeConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.MappingNode;
virtualinvoke v0.<org.yaml.snakeyaml.constructor.SafeConstructor: void processDuplicateKeys(org.yaml.snakeyaml.nodes.MappingNode,boolean)>(v1, 0);
return;
}
protected void processDuplicateKeys(org.yaml.snakeyaml.nodes.MappingNode, boolean)
{
java.lang.Integer v30;
org.yaml.snakeyaml.nodes.Node v11, v28, v35;
org.yaml.snakeyaml.constructor.SafeConstructor v0;
boolean v14, v15, v2, v20, v22, v32, v38, v9;
org.yaml.snakeyaml.constructor.DuplicateKeyException v33;
org.yaml.snakeyaml.constructor.ConstructorException v25;
java.lang.Exception v24;
java.util.List v3;
org.yaml.snakeyaml.error.Mark v26, v29, v34, v36;
org.yaml.snakeyaml.error.YAMLException v17, v23;
java.util.HashMap v4;
java.util.TreeSet v6;
org.yaml.snakeyaml.nodes.MappingNode v1;
int v40, v5, v7;
java.lang.String v18, v27;
java.util.Iterator v37, v8;
org.yaml.snakeyaml.LoaderOptions v21;
org.yaml.snakeyaml.nodes.Tag v12, v13, v16;
java.lang.Object v10, v19, v31, v39;
v0 := @this: org.yaml.snakeyaml.constructor.SafeConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.MappingNode;
v2 := @parameter1: boolean;
v3 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List getValue()>();
v4 = new java.util.HashMap;
v5 = interfaceinvoke v3.<java.util.List: int size()>();
specialinvoke v4.<java.util.HashMap: void <init>(int)>(v5);
v6 = new java.util.TreeSet;
specialinvoke v6.<java.util.TreeSet: void <init>()>();
v7 = 0;
v8 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label01:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label10;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = virtualinvoke v10.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
v12 = virtualinvoke v11.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
v13 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag MERGE>;
v14 = virtualinvoke v12.<org.yaml.snakeyaml.nodes.Tag: boolean equals(java.lang.Object)>(v13);
if v14 != 0 goto label09;
if v2 == 0 goto label03;
v15 = v11 instanceof org.yaml.snakeyaml.nodes.ScalarNode;
if v15 == 0 goto label02;
virtualinvoke v11.<org.yaml.snakeyaml.nodes.Node: void setType(java.lang.Class)>(class "Ljava/lang/String;");
v16 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag STR>;
virtualinvoke v11.<org.yaml.snakeyaml.nodes.Node: void setTag(org.yaml.snakeyaml.nodes.Tag)>(v16);
goto label03;
label02:
v17 = new org.yaml.snakeyaml.error.YAMLException;
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.yaml.snakeyaml.nodes.Node)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Keys must be scalars but found: \u0001");
specialinvoke v17.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v18);
throw v17;
label03:
v19 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>(v11);
if v19 == null goto label07;
if v2 != 0 goto label07;
v20 = virtualinvoke v11.<org.yaml.snakeyaml.nodes.Node: boolean isTwoStepsConstruction()>();
if v20 == 0 goto label07;
v21 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor: org.yaml.snakeyaml.LoaderOptions loadingConfig>;
v22 = virtualinvoke v21.<org.yaml.snakeyaml.LoaderOptions: boolean getAllowRecursiveKeys()>();
if v22 != 0 goto label04;
v23 = new org.yaml.snakeyaml.error.YAMLException;
specialinvoke v23.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>("Recursive key for mapping is detected but it is not configured to be allowed.");
throw v23;
label04:
virtualinvoke v19.<java.lang.Object: int hashCode()>();
label05:
goto label07;
label06:
v24 := @caughtexception;
v25 = new org.yaml.snakeyaml.constructor.ConstructorException;
v26 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: org.yaml.snakeyaml.error.Mark getStartMark()>();
v27 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v19) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("found unacceptable key \u0001");
v28 = virtualinvoke v10.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
v29 = virtualinvoke v28.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v25.<org.yaml.snakeyaml.constructor.ConstructorException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.Throwable)>("while constructing a mapping", v26, v27, v29, v24);
throw v25;
label07:
v30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v7);
v31 = interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v19, v30);
if v31 == null goto label09;
v32 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.SafeConstructor: boolean isAllowDuplicateKeys()>();
if v32 != 0 goto label08;
v33 = new org.yaml.snakeyaml.constructor.DuplicateKeyException;
v34 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: org.yaml.snakeyaml.error.Mark getStartMark()>();
v35 = virtualinvoke v10.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
v36 = virtualinvoke v35.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v33.<org.yaml.snakeyaml.constructor.DuplicateKeyException: void <init>(org.yaml.snakeyaml.error.Mark,java.lang.Object,org.yaml.snakeyaml.error.Mark)>(v34, v19, v36);
throw v33;
label08:
virtualinvoke v6.<java.util.TreeSet: boolean add(java.lang.Object)>(v31);
label09:
v7 = v7 + 1;
goto label01;
label10:
v37 = virtualinvoke v6.<java.util.TreeSet: java.util.Iterator descendingIterator()>();
label11:
v38 = interfaceinvoke v37.<java.util.Iterator: boolean hasNext()>();
if v38 == 0 goto label12;
v39 = interfaceinvoke v37.<java.util.Iterator: java.lang.Object next()>();
v40 = virtualinvoke v39.<java.lang.Integer: int intValue()>();
interfaceinvoke v3.<java.util.List: java.lang.Object remove(int)>(v40);
goto label11;
label12:
return;
catch java.lang.Exception from label04 to label05 with label06;
}
private java.util.List mergeNode(org.yaml.snakeyaml.nodes.MappingNode, boolean, java.util.Map, java.util.List, boolean)
{
java.lang.Integer v42;
org.yaml.snakeyaml.nodes.Node v10, v11, v45;
int[] v15;
org.yaml.snakeyaml.constructor.SafeConstructor v0;
org.yaml.snakeyaml.nodes.NodeId v16, v26, v31;
java.util.Map v3;
boolean v14, v2, v21, v23, v34, v39, v5, v8;
org.yaml.snakeyaml.constructor.ConstructorException v24, v29;
java.util.List v19, v4, v6;
org.yaml.snakeyaml.error.Mark v25, v28, v30, v33;
org.yaml.snakeyaml.error.YAMLException v36;
org.yaml.snakeyaml.nodes.MappingNode v1;
int v17, v18, v40, v41, v44;
java.lang.String v27, v32, v37;
java.util.Iterator v20, v7;
org.yaml.snakeyaml.nodes.Tag v12, v13, v35;
java.lang.Object v22, v38, v43, v9;
v0 := @this: org.yaml.snakeyaml.constructor.SafeConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.MappingNode;
v2 := @parameter1: boolean;
v3 := @parameter2: java.util.Map;
v4 := @parameter3: java.util.List;
v5 := @parameter4: boolean;
v6 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List getValue()>();
v7 = interfaceinvoke v6.<java.util.List: java.util.Iterator iterator()>();
label01:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label11;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = virtualinvoke v9.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
v11 = virtualinvoke v9.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getValueNode()>();
v12 = virtualinvoke v10.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
v13 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag MERGE>;
v14 = virtualinvoke v12.<org.yaml.snakeyaml.nodes.Tag: boolean equals(java.lang.Object)>(v13);
if v14 == 0 goto label07;
interfaceinvoke v7.<java.util.Iterator: void remove()>();
v15 = <org.yaml.snakeyaml.constructor.SafeConstructor$1: int[] $SwitchMap$org$yaml$snakeyaml$nodes$NodeId>;
v16 = virtualinvoke v11.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.NodeId getNodeId()>();
v17 = virtualinvoke v16.<org.yaml.snakeyaml.nodes.NodeId: int ordinal()>();
v18 = v15[v17];
lookupswitch(v18)
{
case 1: goto label02;
case 2: goto label03;
default: goto label06;
};
label02:
specialinvoke v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.List mergeNode(org.yaml.snakeyaml.nodes.MappingNode,boolean,java.util.Map,java.util.List,boolean)>(v11, 0, v3, v4, v5);
goto label01;
label03:
v19 = virtualinvoke v11.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List getValue()>();
v20 = interfaceinvoke v19.<java.util.List: java.util.Iterator iterator()>();
label04:
v21 = interfaceinvoke v20.<java.util.Iterator: boolean hasNext()>();
if v21 == 0 goto label01;
v22 = interfaceinvoke v20.<java.util.Iterator: java.lang.Object next()>();
v23 = v22 instanceof org.yaml.snakeyaml.nodes.MappingNode;
if v23 != 0 goto label05;
v24 = new org.yaml.snakeyaml.constructor.ConstructorException;
v25 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: org.yaml.snakeyaml.error.Mark getStartMark()>();
v26 = virtualinvoke v22.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.NodeId getNodeId()>();
v27 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.yaml.snakeyaml.nodes.NodeId)>(v26) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected a mapping for merging, but found \u0001");
v28 = virtualinvoke v22.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v24.<org.yaml.snakeyaml.constructor.ConstructorException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)>("while constructing a mapping", v25, v27, v28);
throw v24;
label05:
specialinvoke v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.List mergeNode(org.yaml.snakeyaml.nodes.MappingNode,boolean,java.util.Map,java.util.List,boolean)>(v45, 0, v3, v4, v5);
goto label04;
label06:
v29 = new org.yaml.snakeyaml.constructor.ConstructorException;
v30 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: org.yaml.snakeyaml.error.Mark getStartMark()>();
v31 = virtualinvoke v11.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.NodeId getNodeId()>();
v32 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.yaml.snakeyaml.nodes.NodeId)>(v31) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected a mapping or list of mappings for merging, but found \u0001");
v33 = virtualinvoke v11.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v29.<org.yaml.snakeyaml.constructor.ConstructorException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)>("while constructing a mapping", v30, v32, v33);
throw v29;
label07:
if v5 == 0 goto label09;
v34 = v10 instanceof org.yaml.snakeyaml.nodes.ScalarNode;
if v34 == 0 goto label08;
virtualinvoke v10.<org.yaml.snakeyaml.nodes.Node: void setType(java.lang.Class)>(class "Ljava/lang/String;");
v35 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag STR>;
virtualinvoke v10.<org.yaml.snakeyaml.nodes.Node: void setTag(org.yaml.snakeyaml.nodes.Tag)>(v35);
goto label09;
label08:
v36 = new org.yaml.snakeyaml.error.YAMLException;
v37 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.yaml.snakeyaml.nodes.Node)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Keys must be scalars but found: \u0001");
specialinvoke v36.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v37);
throw v36;
label09:
v38 = virtualinvoke v0.<org.yaml.snakeyaml.constructor.SafeConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>(v10);
v39 = interfaceinvoke v3.<java.util.Map: boolean containsKey(java.lang.Object)>(v38);
if v39 != 0 goto label10;
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v9);
v40 = interfaceinvoke v4.<java.util.List: int size()>();
v41 = v40 - 1;
v42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v41);
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v38, v42);
goto label01;
label10:
if v2 == 0 goto label01;
v43 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v38);
v44 = virtualinvoke v43.<java.lang.Integer: int intValue()>();
interfaceinvoke v4.<java.util.List: java.lang.Object set(int,java.lang.Object)>(v44, v9);
goto label01;
label11:
return v4;
}
protected void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode, java.util.Map)
{
org.yaml.snakeyaml.constructor.SafeConstructor v0;
org.yaml.snakeyaml.nodes.MappingNode v1;
java.util.Map v2;
v0 := @this: org.yaml.snakeyaml.constructor.SafeConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.MappingNode;
v2 := @parameter1: java.util.Map;
virtualinvoke v0.<org.yaml.snakeyaml.constructor.SafeConstructor: void flattenMapping(org.yaml.snakeyaml.nodes.MappingNode)>(v1);
specialinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: void constructMapping2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Map)>(v1, v2);
return;
}
protected void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode, java.util.Set)
{
java.util.Set v2;
org.yaml.snakeyaml.constructor.SafeConstructor v0;
org.yaml.snakeyaml.nodes.MappingNode v1;
v0 := @this: org.yaml.snakeyaml.constructor.SafeConstructor;
v1 := @parameter0: org.yaml.snakeyaml.nodes.MappingNode;
v2 := @parameter1: java.util.Set;
virtualinvoke v0.<org.yaml.snakeyaml.constructor.SafeConstructor: void flattenMapping(org.yaml.snakeyaml.nodes.MappingNode)>(v1);
specialinvoke v0.<org.yaml.snakeyaml.constructor.BaseConstructor: void constructSet2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.util.Set)>(v1, v2);
return;
}
private static int maxLen(int, int)
{
int v0, v1, v3;
java.lang.String v2;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>(v0, v1);
v3 = virtualinvoke v2.<java.lang.String: int length()>();
return v3;
}
private static int maxLen(long, int)
{
int v1, v3;
long v0;
java.lang.String v2;
v0 := @parameter0: long;
v1 := @parameter1: int;
v2 = staticinvoke <java.lang.Long: java.lang.String toString(long,int)>(v0, v1);
v3 = virtualinvoke v2.<java.lang.String: int length()>();
return v3;
}
private java.lang.Number createNumber(int, java.lang.String, int)
{
int[][] v6, v8;
int[] v10, v9;
org.yaml.snakeyaml.constructor.SafeConstructor v0;
int v1, v11, v13, v3, v4, v5, v7;
java.math.BigInteger v14;
java.lang.String v2;
java.lang.Number v15, v16;
boolean v12;
java.lang.NumberFormatException v17;
v0 := @this: org.yaml.snakeyaml.constructor.SafeConstructor;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
if v2 == null goto label01;
v4 = virtualinvoke v2.<java.lang.String: int length()>();
goto label02;
label01:
v4 = 0;
label02:
v5 = v4;
if v1 >= 0 goto label03;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("-\u0001");
label03:
v6 = <org.yaml.snakeyaml.constructor.SafeConstructor: int[][] RADIX_MAX>;
v7 = lengthof v6;
if v3 >= v7 goto label04;
v8 = <org.yaml.snakeyaml.constructor.SafeConstructor: int[][] RADIX_MAX>;
v9 = v8[v3];
goto label05;
label04:
v9 = null;
label05:
v10 = v9;
if v9 == null goto label09;
v11 = v9[0];
if v5 <= v11 goto label06;
v12 = 1;
goto label07;
label06:
v12 = 0;
label07:
if v12 == 0 goto label09;
v13 = v10[1];
if v5 <= v13 goto label08;
v14 = new java.math.BigInteger;
specialinvoke v14.<java.math.BigInteger: void <init>(java.lang.String,int)>(v2, v3);
return v14;
label08:
v15 = staticinvoke <org.yaml.snakeyaml.constructor.SafeConstructor: java.lang.Number createLongOrBigInteger(java.lang.String,int)>(v2, v3);
return v15;
label09:
v16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>(v2, v3);
label10:
goto label12;
label11:
v17 := @caughtexception;
v16 = staticinvoke <org.yaml.snakeyaml.constructor.SafeConstructor: java.lang.Number createLongOrBigInteger(java.lang.String,int)>(v2, v3);
label12:
return v16;
catch java.lang.NumberFormatException from label09 to label10 with label11;
}
protected static java.lang.Number createLongOrBigInteger(java.lang.String, int)
{
java.lang.Long v2;
int v1;
java.lang.NumberFormatException v3;
java.math.BigInteger v4;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
label1:
v2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String,int)>(v0, v1);
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new java.math.BigInteger;
specialinvoke v4.<java.math.BigInteger: void <init>(java.lang.String,int)>(v0, v1);
return v4;
catch java.lang.NumberFormatException from label1 to label2 with label3;
}
static void <clinit>()
{
int[][] v14, v19;
java.util.HashMap v1;
int[] v15, v20;
java.util.Map v10, v12, v2, v4, v6, v8;
int v16, v17, v18, v21, v22;
java.lang.Boolean v11, v13, v3, v5, v7, v9;
java.util.regex.Pattern v23, v24;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructUndefined v0;
v0 = new org.yaml.snakeyaml.constructor.SafeConstructor$ConstructUndefined;
specialinvoke v0.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructUndefined: void <init>()>();
<org.yaml.snakeyaml.constructor.SafeConstructor: org.yaml.snakeyaml.constructor.SafeConstructor$ConstructUndefined undefinedConstructor> = v0;
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map BOOL_VALUES> = v1;
v2 = <org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map BOOL_VALUES>;
v3 = <java.lang.Boolean: java.lang.Boolean TRUE>;
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("yes", v3);
v4 = <org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map BOOL_VALUES>;
v5 = <java.lang.Boolean: java.lang.Boolean FALSE>;
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("no", v5);
v6 = <org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map BOOL_VALUES>;
v7 = <java.lang.Boolean: java.lang.Boolean TRUE>;
interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("true", v7);
v8 = <org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map BOOL_VALUES>;
v9 = <java.lang.Boolean: java.lang.Boolean FALSE>;
interfaceinvoke v8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("false", v9);
v10 = <org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map BOOL_VALUES>;
v11 = <java.lang.Boolean: java.lang.Boolean TRUE>;
interfaceinvoke v10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("on", v11);
v12 = <org.yaml.snakeyaml.constructor.SafeConstructor: java.util.Map BOOL_VALUES>;
v13 = <java.lang.Boolean: java.lang.Boolean FALSE>;
interfaceinvoke v12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("off", v13);
v14 = newmultiarray (int)[17][2];
<org.yaml.snakeyaml.constructor.SafeConstructor: int[][] RADIX_MAX> = v14;
v15 = newarray (int)[4];
v15[0] = 2;
v15[1] = 8;
v15[2] = 10;
v15[3] = 16;
v16 = lengthof v15;
v17 = 0;
label1:
if v17 >= v16 goto label2;
v18 = v15[v17];
v19 = <org.yaml.snakeyaml.constructor.SafeConstructor: int[][] RADIX_MAX>;
v20 = newarray (int)[2];
v21 = staticinvoke <org.yaml.snakeyaml.constructor.SafeConstructor: int maxLen(int,int)>(2147483647, v18);
v20[0] = v21;
v22 = staticinvoke <org.yaml.snakeyaml.constructor.SafeConstructor: int maxLen(long,int)>(9223372036854775807L, v18);
v20[1] = v22;
v19[v18] = v20;
v17 = v17 + 1;
goto label1;
label2:
v23 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:(?:[Tt]|[ \t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \t]*(?:Z|([-+][0-9][0-9]?)(?::([0-9][0-9])?)?))?)?$");
<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.regex.Pattern TIMESTAMP_REGEXP> = v23;
v24 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)$");
<org.yaml.snakeyaml.constructor.SafeConstructor: java.util.regex.Pattern YMD_REGEXP> = v24;
return;
}
}