public class org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder extends java.lang.Object
{
private static final java.lang.String systemLineSeparator;
private static final char[] map1;
private static final byte[] map2;
public static java.lang.String encodeString(java.lang.String)
{
byte[] v2;
char[] v3;
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 = new java.lang.String;
v2 = virtualinvoke v0.<java.lang.String: byte[] getBytes()>();
v3 = staticinvoke <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: char[] encode(byte[])>(v2);
specialinvoke v1.<java.lang.String: void <init>(char[])>(v3);
return v1;
}
public static java.lang.String encodeLines(byte[])
{
byte[] v0;
int v1;
java.lang.String v2, v3;
v0 := @parameter0: byte[];
v1 = lengthof v0;
v2 = <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: java.lang.String systemLineSeparator>;
v3 = staticinvoke <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: java.lang.String encodeLines(byte[],int,int,int,java.lang.String)>(v0, 0, v1, 76, v2);
return v3;
}
public static java.lang.String encodeLines(byte[], int, int, int, java.lang.String)
{
byte[] v0;
int v1, v10, v11, v12, v13, v14, v15, v16, v18, v19, v2, v20, v21, v3, v5, v6, v8, v9;
java.lang.String v23, v4;
java.lang.IllegalArgumentException v7;
char[] v22;
java.lang.StringBuilder v17;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 := @parameter4: java.lang.String;
v5 = v3 * 3;
v6 = v5 / 4;
if v6 > 0 goto label1;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>()>();
throw v7;
label1:
v8 = v2 + v6;
v9 = v8 - 1;
v10 = v9 / v6;
v11 = v2 + 2;
v12 = v11 / 3;
v13 = v12 * 4;
v14 = virtualinvoke v4.<java.lang.String: int length()>();
v15 = v10 * v14;
v16 = v13 + v15;
v17 = new java.lang.StringBuilder;
specialinvoke v17.<java.lang.StringBuilder: void <init>(int)>(v16);
v18 = 0;
label2:
if v18 >= v2 goto label3;
v19 = v2 - v18;
v20 = staticinvoke <java.lang.Math: int min(int,int)>(v19, v6);
v21 = v1 + v18;
v22 = staticinvoke <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: char[] encode(byte[],int,int)>(v0, v21, v20);
virtualinvoke v17.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>(v22);
virtualinvoke v17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v4);
v18 = v18 + v20;
goto label2;
label3:
v23 = virtualinvoke v17.<java.lang.StringBuilder: java.lang.String toString()>();
return v23;
}
public static char[] encode(byte[])
{
int v1;
byte[] v0;
char[] v2;
v0 := @parameter0: byte[];
v1 = lengthof v0;
v2 = staticinvoke <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: char[] encode(byte[],int,int)>(v0, 0, v1);
return v2;
}
public static char[] encode(byte[], int)
{
int v1;
byte[] v0;
char[] v2;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 = staticinvoke <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: char[] encode(byte[],int,int)>(v0, 0, v1);
return v2;
}
public static char[] encode(byte[], int, int)
{
byte[] v0;
byte v14, v17, v21;
short v15, v18, v19, v22, v24, v28, v32;
int v1, v10, v11, v12, v13, v16, v2, v20, v23, v25, v26, v27, v29, v3, v30, v31, v33, v36, v4, v41, v5, v6, v7, v8;
char v35, v38, v40, v43;
char[] v34, v37, v39, v42, v9;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = v2 * 4;
v4 = v3 + 2;
v5 = v4 / 3;
v6 = v2 + 2;
v7 = v6 / 3;
v8 = v7 * 4;
v9 = newarray (char)[v8];
v10 = v1;
v11 = v1 + v2;
v12 = 0;
label01:
if v10 >= v11 goto label10;
v13 = v10;
v10 = v10 + 1;
v14 = v0[v13];
v15 = v14 & 255;
if v10 >= v11 goto label02;
v16 = v10;
v10 = v10 + 1;
v17 = v0[v16];
v18 = v17 & 255;
goto label03;
label02:
v18 = 0;
label03:
v19 = v18;
if v10 >= v11 goto label04;
v20 = v10;
v10 = v10 + 1;
v21 = v0[v20];
v22 = v21 & 255;
goto label05;
label04:
v22 = 0;
label05:
v23 = v15 >>> 2;
v24 = v15 & 3;
v25 = v24 << 4;
v26 = v19 >>> 4;
v27 = v25 | v26;
v28 = v19 & 15;
v29 = v28 << 2;
v30 = v22 >>> 6;
v31 = v29 | v30;
v32 = v22 & 63;
v33 = v12 + 1;
v34 = <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: char[] map1>;
v35 = v34[v23];
v9[v12] = v35;
v36 = v33 + 1;
v37 = <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: char[] map1>;
v38 = v37[v27];
v9[v33] = v38;
if v36 >= v5 goto label06;
v39 = <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: char[] map1>;
v40 = v39[v31];
goto label07;
label06:
v40 = 61;
label07:
v9[v36] = v40;
v41 = v36 + 1;
if v41 >= v5 goto label08;
v42 = <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: char[] map1>;
v43 = v42[v32];
goto label09;
label08:
v43 = 61;
label09:
v9[v41] = v43;
v12 = v41 + 1;
goto label01;
label10:
return v9;
}
public static java.lang.String decodeString(java.lang.String)
{
byte[] v2;
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 = new java.lang.String;
v2 = staticinvoke <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: byte[] decode(java.lang.String)>(v0);
specialinvoke v1.<java.lang.String: void <init>(byte[])>(v2);
return v1;
}
public static byte[] decodeLines(java.lang.String)
{
byte[] v8;
char v6;
int v1, v3, v4, v5, v7;
char[] v2;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: int length()>();
v2 = newarray (char)[v1];
v3 = 0;
v4 = 0;
label1:
v5 = virtualinvoke v0.<java.lang.String: int length()>();
if v4 >= v5 goto label3;
v6 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v4);
if v6 == 32 goto label2;
if v6 == 13 goto label2;
if v6 == 10 goto label2;
if v6 == 9 goto label2;
v7 = v3;
v3 = v3 + 1;
v2[v7] = v6;
label2:
v4 = v4 + 1;
goto label1;
label3:
v8 = staticinvoke <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: byte[] decode(char[],int,int)>(v2, 0, v3);
return v8;
}
public static byte[] decode(java.lang.String)
{
byte[] v2;
char[] v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: char[] toCharArray()>();
v2 = staticinvoke <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: byte[] decode(char[])>(v1);
return v2;
}
public static byte[] decode(char[])
{
int v1;
byte[] v2;
char[] v0;
v0 := @parameter0: char[];
v1 = lengthof v0;
v2 = staticinvoke <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: byte[] decode(char[],int,int)>(v0, 0, v1);
return v2;
}
public static byte[] decode(char[], int, int)
{
byte[] v10, v23, v25, v27, v29;
byte v24, v26, v28, v30, v35, v39;
int v1, v11, v12, v13, v14, v17, v18, v19, v2, v20, v21, v3, v32, v33, v34, v36, v37, v38, v40, v41, v42, v43, v44, v5, v6, v8, v9;
char v15, v16, v7;
java.lang.IllegalArgumentException v22, v31, v4;
char[] v0;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = v2 % 4;
if v3 == 0 goto label01;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Length of Base64 encoded input string is not a multiple of 4.");
throw v4;
label01:
if v2 <= 0 goto label02;
v5 = v1 + v2;
v6 = v5 - 1;
v7 = v0[v6];
if v7 != 61 goto label02;
v2 = v2 - 1;
goto label01;
label02:
v8 = v2 * 3;
v9 = v8 / 4;
v10 = newarray (byte)[v9];
v11 = v1;
v12 = v1 + v2;
v13 = 0;
label03:
if v11 >= v12 goto label12;
v14 = v11 + 1;
v15 = v0[v11];
v11 = v14 + 1;
v16 = v0[v14];
if v11 >= v12 goto label04;
v17 = v11;
v11 = v11 + 1;
v18 = v0[v17];
goto label05;
label04:
v18 = 65;
label05:
v19 = v18;
if v11 >= v12 goto label06;
v20 = v11;
v11 = v11 + 1;
v21 = v0[v20];
goto label07;
label06:
v21 = 65;
label07:
if v15 > 127 goto label08;
if v16 > 127 goto label08;
if v19 > 127 goto label08;
if v21 <= 127 goto label09;
label08:
v22 = new java.lang.IllegalArgumentException;
specialinvoke v22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal character in Base64 encoded data.");
throw v22;
label09:
v23 = <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: byte[] map2>;
v24 = v23[v15];
v25 = <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: byte[] map2>;
v26 = v25[v16];
v27 = <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: byte[] map2>;
v28 = v27[v19];
v29 = <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: byte[] map2>;
v30 = v29[v21];
if v24 < 0 goto label10;
if v26 < 0 goto label10;
if v28 < 0 goto label10;
if v30 >= 0 goto label11;
label10:
v31 = new java.lang.IllegalArgumentException;
specialinvoke v31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal character in Base64 encoded data.");
throw v31;
label11:
v32 = v24 << 2;
v33 = v26 >>> 4;
v34 = v32 | v33;
v35 = v26 & 15;
v36 = v35 << 4;
v37 = v28 >>> 2;
v38 = v36 | v37;
v39 = v28 & 3;
v40 = v39 << 6;
v41 = v40 | v30;
v42 = v13;
v13 = v13 + 1;
v10[v42] = v34;
if v13 >= v9 goto label03;
v43 = v13;
v13 = v13 + 1;
v10[v43] = v38;
if v13 >= v9 goto label03;
v44 = v13;
v13 = v13 + 1;
v10[v44] = v41;
goto label03;
label12:
return v10;
}
private void <init>()
{
org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder v0;
v0 := @this: org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
int v2, v4;
char[] v1, v3;
java.lang.String v0;
v0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");
<org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: java.lang.String systemLineSeparator> = v0;
v1 = newarray (char)[64];
<org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: char[] map1> = v1;
v2 = 0;
label1:
v3 = <org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder: char[] map1>;
v4 = v2;
v2 = v2 + 1;
v3[v4] = 65;
goto label1;
}
}