public abstract class org.yaml.snakeyaml.introspector.Property extends java.lang.Object implements java.lang.Comparable
{
private final java.lang.String name;
private final java.lang.Class type;
public void <init>(java.lang.String, java.lang.Class)
{
org.yaml.snakeyaml.introspector.Property v0;
java.lang.Class v2;
java.lang.String v1;
v0 := @this: org.yaml.snakeyaml.introspector.Property;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.yaml.snakeyaml.introspector.Property: java.lang.String name> = v1;
v0.<org.yaml.snakeyaml.introspector.Property: java.lang.Class type> = v2;
return;
}
public java.lang.Class getType()
{
org.yaml.snakeyaml.introspector.Property v0;
java.lang.Class v1;
v0 := @this: org.yaml.snakeyaml.introspector.Property;
v1 = v0.<org.yaml.snakeyaml.introspector.Property: java.lang.Class type>;
return v1;
}
public abstract java.lang.Class[] getActualTypeArguments();
public java.lang.String getName()
{
org.yaml.snakeyaml.introspector.Property v0;
java.lang.String v1;
v0 := @this: org.yaml.snakeyaml.introspector.Property;
v1 = v0.<org.yaml.snakeyaml.introspector.Property: java.lang.String name>;
return v1;
}
public java.lang.String toString()
{
org.yaml.snakeyaml.introspector.Property v0;
java.lang.Class v2;
java.lang.String v1, v3;
v0 := @this: org.yaml.snakeyaml.introspector.Property;
v1 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.Property: java.lang.String getName()>();
v2 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.Property: java.lang.Class getType()>();
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Class)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 of \u0001");
return v3;
}
public int compareTo(org.yaml.snakeyaml.introspector.Property)
{
int v4;
org.yaml.snakeyaml.introspector.Property v0, v1;
java.lang.String v2, v3;
v0 := @this: org.yaml.snakeyaml.introspector.Property;
v1 := @parameter0: org.yaml.snakeyaml.introspector.Property;
v2 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.Property: java.lang.String getName()>();
v3 = virtualinvoke v1.<org.yaml.snakeyaml.introspector.Property: java.lang.String getName()>();
v4 = virtualinvoke v2.<java.lang.String: int compareTo(java.lang.String)>(v3);
return v4;
}
public boolean isWritable()
{
org.yaml.snakeyaml.introspector.Property v0;
v0 := @this: org.yaml.snakeyaml.introspector.Property;
return 1;
}
public boolean isReadable()
{
org.yaml.snakeyaml.introspector.Property v0;
v0 := @this: org.yaml.snakeyaml.introspector.Property;
return 1;
}
public abstract void set(java.lang.Object, java.lang.Object) throws java.lang.Exception;
public abstract java.lang.Object get(java.lang.Object);
public abstract java.util.List getAnnotations();
public abstract java.lang.'annotation'.Annotation getAnnotation(java.lang.Class);
public int hashCode()
{
int v2, v4, v5;
org.yaml.snakeyaml.introspector.Property v0;
java.lang.Class v3;
java.lang.String v1;
v0 := @this: org.yaml.snakeyaml.introspector.Property;
v1 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.Property: java.lang.String getName()>();
v2 = virtualinvoke v1.<java.lang.String: int hashCode()>();
v3 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.Property: java.lang.Class getType()>();
v4 = virtualinvoke v3.<java.lang.Object: int hashCode()>();
v5 = v2 + v4;
return v5;
}
public boolean equals(java.lang.Object)
{
org.yaml.snakeyaml.introspector.Property v0;
java.lang.Class v6, v7;
java.lang.Object v1;
java.lang.String v3, v4;
boolean v2, v5, v8, v9;
v0 := @this: org.yaml.snakeyaml.introspector.Property;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof org.yaml.snakeyaml.introspector.Property;
if v2 == 0 goto label3;
v3 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.Property: java.lang.String getName()>();
v4 = virtualinvoke v1.<org.yaml.snakeyaml.introspector.Property: java.lang.String getName()>();
v5 = virtualinvoke v3.<java.lang.String: boolean equals(java.lang.Object)>(v4);
if v5 == 0 goto label1;
v6 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.Property: java.lang.Class getType()>();
v7 = virtualinvoke v1.<org.yaml.snakeyaml.introspector.Property: java.lang.Class getType()>();
v8 = virtualinvoke v6.<java.lang.Object: boolean equals(java.lang.Object)>(v7);
if v8 == 0 goto label1;
v9 = 1;
goto label2;
label1:
v9 = 0;
label2:
return v9;
label3:
return 0;
}
}