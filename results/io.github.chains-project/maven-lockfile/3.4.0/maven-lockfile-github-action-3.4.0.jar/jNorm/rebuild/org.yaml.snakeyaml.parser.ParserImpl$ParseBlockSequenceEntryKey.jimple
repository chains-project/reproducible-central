class org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey extends java.lang.Object implements org.yaml.snakeyaml.parser.Production
{
final org.yaml.snakeyaml.parser.ParserImpl this$0;
private void <init>(org.yaml.snakeyaml.parser.ParserImpl)
{
org.yaml.snakeyaml.parser.ParserImpl v1;
org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey v0;
v0 := @this: org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey;
v1 := @parameter0: org.yaml.snakeyaml.parser.ParserImpl;
v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey: org.yaml.snakeyaml.parser.ParserImpl this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public org.yaml.snakeyaml.events.Event produce()
{
org.yaml.snakeyaml.parser.ParserImpl v1, v10, v14, v19, v23, v25, v30, v34, v40, v46, v47, v50, v6, v8, v9;
org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryValue v22;
org.yaml.snakeyaml.events.Event v24;
org.yaml.snakeyaml.events.SequenceEndEvent v43;
boolean v18, v29, v5;
org.yaml.snakeyaml.error.Mark v39, v44, v45;
org.yaml.snakeyaml.parser.ParserException v33;
java.lang.String v38;
org.yaml.snakeyaml.tokens.Token v12, v21, v32, v42;
org.yaml.snakeyaml.tokens.Token$ID v17, v28, v37, v4;
org.yaml.snakeyaml.events.CommentEvent v13;
org.yaml.snakeyaml.util.ArrayStack v35, v48, v51;
org.yaml.snakeyaml.scanner.Scanner v11, v15, v2, v20, v26, v31, v41;
org.yaml.snakeyaml.tokens.Token$ID[] v16, v27, v3;
java.lang.Object v36, v49;
org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey v0, v7;
v0 := @this: org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey;
v1 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v2 = v1.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.scanner.Scanner scanner>;
v3 = newarray (org.yaml.snakeyaml.tokens.Token$ID)[1];
v4 = <org.yaml.snakeyaml.tokens.Token$ID: org.yaml.snakeyaml.tokens.Token$ID Comment>;
v3[0] = v4;
v5 = interfaceinvoke v2.<org.yaml.snakeyaml.scanner.Scanner: boolean checkToken(org.yaml.snakeyaml.tokens.Token$ID[])>(v3);
if v5 == 0 goto label1;
v6 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v7 = new org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey;
v8 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
specialinvoke v7.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey: void <init>(org.yaml.snakeyaml.parser.ParserImpl)>(v8);
v6.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.parser.Production state> = v7;
v9 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v10 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v11 = v10.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.scanner.Scanner scanner>;
v12 = interfaceinvoke v11.<org.yaml.snakeyaml.scanner.Scanner: org.yaml.snakeyaml.tokens.Token getToken()>();
v13 = specialinvoke v9.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.events.CommentEvent produceCommentEvent(org.yaml.snakeyaml.tokens.CommentToken)>(v12);
return v13;
label1:
v14 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v15 = v14.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.scanner.Scanner scanner>;
v16 = newarray (org.yaml.snakeyaml.tokens.Token$ID)[1];
v17 = <org.yaml.snakeyaml.tokens.Token$ID: org.yaml.snakeyaml.tokens.Token$ID BlockEntry>;
v16[0] = v17;
v18 = interfaceinvoke v15.<org.yaml.snakeyaml.scanner.Scanner: boolean checkToken(org.yaml.snakeyaml.tokens.Token$ID[])>(v16);
if v18 == 0 goto label2;
v19 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v20 = v19.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.scanner.Scanner scanner>;
v21 = interfaceinvoke v20.<org.yaml.snakeyaml.scanner.Scanner: org.yaml.snakeyaml.tokens.Token getToken()>();
v22 = new org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryValue;
v23 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
specialinvoke v22.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryValue: void <init>(org.yaml.snakeyaml.parser.ParserImpl,org.yaml.snakeyaml.tokens.BlockEntryToken)>(v23, v21);
v24 = virtualinvoke v22.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryValue: org.yaml.snakeyaml.events.Event produce()>();
return v24;
label2:
v25 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v26 = v25.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.scanner.Scanner scanner>;
v27 = newarray (org.yaml.snakeyaml.tokens.Token$ID)[1];
v28 = <org.yaml.snakeyaml.tokens.Token$ID: org.yaml.snakeyaml.tokens.Token$ID BlockEnd>;
v27[0] = v28;
v29 = interfaceinvoke v26.<org.yaml.snakeyaml.scanner.Scanner: boolean checkToken(org.yaml.snakeyaml.tokens.Token$ID[])>(v27);
if v29 != 0 goto label3;
v30 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v31 = v30.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.scanner.Scanner scanner>;
v32 = interfaceinvoke v31.<org.yaml.snakeyaml.scanner.Scanner: org.yaml.snakeyaml.tokens.Token peekToken()>();
v33 = new org.yaml.snakeyaml.parser.ParserException;
v34 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v35 = v34.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.util.ArrayStack marks>;
v36 = virtualinvoke v35.<org.yaml.snakeyaml.util.ArrayStack: java.lang.Object pop()>();
v37 = virtualinvoke v32.<org.yaml.snakeyaml.tokens.Token: org.yaml.snakeyaml.tokens.Token$ID getTokenId()>();
v38 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.yaml.snakeyaml.tokens.Token$ID)>(v37) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected <block end>, but found \'\u0001\'");
v39 = virtualinvoke v32.<org.yaml.snakeyaml.tokens.Token: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v33.<org.yaml.snakeyaml.parser.ParserException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)>("while parsing a block collection", v36, v38, v39);
throw v33;
label3:
v40 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v41 = v40.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.scanner.Scanner scanner>;
v42 = interfaceinvoke v41.<org.yaml.snakeyaml.scanner.Scanner: org.yaml.snakeyaml.tokens.Token getToken()>();
v43 = new org.yaml.snakeyaml.events.SequenceEndEvent;
v44 = virtualinvoke v42.<org.yaml.snakeyaml.tokens.Token: org.yaml.snakeyaml.error.Mark getStartMark()>();
v45 = virtualinvoke v42.<org.yaml.snakeyaml.tokens.Token: org.yaml.snakeyaml.error.Mark getEndMark()>();
specialinvoke v43.<org.yaml.snakeyaml.events.SequenceEndEvent: void <init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)>(v44, v45);
v46 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v47 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v48 = v47.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.util.ArrayStack states>;
v49 = virtualinvoke v48.<org.yaml.snakeyaml.util.ArrayStack: java.lang.Object pop()>();
v46.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.parser.Production state> = v49;
v50 = v0.<org.yaml.snakeyaml.parser.ParserImpl$ParseBlockSequenceEntryKey: org.yaml.snakeyaml.parser.ParserImpl this$0>;
v51 = v50.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.util.ArrayStack marks>;
virtualinvoke v51.<org.yaml.snakeyaml.util.ArrayStack: java.lang.Object pop()>();
return v43;
}
}