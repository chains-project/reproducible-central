public final class org.yaml.snakeyaml.tokens.DirectiveToken extends org.yaml.snakeyaml.tokens.Token
{
private final java.lang.String name;
private final java.util.List value;
public void <init>(java.lang.String, java.util.List, org.yaml.snakeyaml.error.Mark, org.yaml.snakeyaml.error.Mark)
{
java.util.List v2;
org.yaml.snakeyaml.error.Mark v3, v4;
org.yaml.snakeyaml.tokens.DirectiveToken v0;
int v5, v7;
java.lang.String v1, v8;
org.yaml.snakeyaml.error.YAMLException v6;
v0 := @this: org.yaml.snakeyaml.tokens.DirectiveToken;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.util.List;
v3 := @parameter2: org.yaml.snakeyaml.error.Mark;
v4 := @parameter3: org.yaml.snakeyaml.error.Mark;
specialinvoke v0.<org.yaml.snakeyaml.tokens.Token: void <init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)>(v3, v4);
v0.<org.yaml.snakeyaml.tokens.DirectiveToken: java.lang.String name> = v1;
if v2 == null goto label1;
v5 = interfaceinvoke v2.<java.util.List: int size()>();
if v5 == 2 goto label1;
v6 = new org.yaml.snakeyaml.error.YAMLException;
v7 = interfaceinvoke v2.<java.util.List: int size()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Two strings must be provided instead of \u0001");
specialinvoke v6.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v8);
throw v6;
label1:
v0.<org.yaml.snakeyaml.tokens.DirectiveToken: java.util.List value> = v2;
return;
}
public java.lang.String getName()
{
java.lang.String v1;
org.yaml.snakeyaml.tokens.DirectiveToken v0;
v0 := @this: org.yaml.snakeyaml.tokens.DirectiveToken;
v1 = v0.<org.yaml.snakeyaml.tokens.DirectiveToken: java.lang.String name>;
return v1;
}
public java.util.List getValue()
{
java.util.List v1;
org.yaml.snakeyaml.tokens.DirectiveToken v0;
v0 := @this: org.yaml.snakeyaml.tokens.DirectiveToken;
v1 = v0.<org.yaml.snakeyaml.tokens.DirectiveToken: java.util.List value>;
return v1;
}
public org.yaml.snakeyaml.tokens.Token$ID getTokenId()
{
org.yaml.snakeyaml.tokens.Token$ID v1;
org.yaml.snakeyaml.tokens.DirectiveToken v0;
v0 := @this: org.yaml.snakeyaml.tokens.DirectiveToken;
v1 = <org.yaml.snakeyaml.tokens.Token$ID: org.yaml.snakeyaml.tokens.Token$ID Directive>;
return v1;
}
}