public final enum class com.fasterxml.jackson.'annotation'.JsonFormat$Shape extends java.lang.Enum
{
public static final enum com.fasterxml.jackson.'annotation'.JsonFormat$Shape ANY;
public static final enum com.fasterxml.jackson.'annotation'.JsonFormat$Shape NATURAL;
public static final enum com.fasterxml.jackson.'annotation'.JsonFormat$Shape SCALAR;
public static final enum com.fasterxml.jackson.'annotation'.JsonFormat$Shape ARRAY;
public static final enum com.fasterxml.jackson.'annotation'.JsonFormat$Shape OBJECT;
public static final enum com.fasterxml.jackson.'annotation'.JsonFormat$Shape NUMBER;
public static final enum com.fasterxml.jackson.'annotation'.JsonFormat$Shape NUMBER_FLOAT;
public static final enum com.fasterxml.jackson.'annotation'.JsonFormat$Shape NUMBER_INT;
public static final enum com.fasterxml.jackson.'annotation'.JsonFormat$Shape STRING;
public static final enum com.fasterxml.jackson.'annotation'.JsonFormat$Shape BOOLEAN;
public static final enum com.fasterxml.jackson.'annotation'.JsonFormat$Shape BINARY;
private static final com.fasterxml.jackson.'annotation'.JsonFormat$Shape[] $VALUES;
public static com.fasterxml.jackson.'annotation'.JsonFormat$Shape[] values()
{
java.lang.Object v1;
com.fasterxml.jackson.'annotation'.JsonFormat$Shape[] v0;
v0 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static com.fasterxml.jackson.'annotation'.JsonFormat$Shape valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/fasterxml/jackson/annotation/JsonFormat$Shape;", v0);
return v1;
}
private void <init>(java.lang.String, int)
{
int v2;
java.lang.String v1;
com.fasterxml.jackson.'annotation'.JsonFormat$Shape v0;
v0 := @this: com.fasterxml.jackson.'annotation'.JsonFormat$Shape;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
return;
}
public boolean isNumeric()
{
com.fasterxml.jackson.'annotation'.JsonFormat$Shape v0, v1, v2, v3;
boolean v4;
v0 := @this: com.fasterxml.jackson.'annotation'.JsonFormat$Shape;
v1 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape NUMBER>;
if v0 == v1 goto label1;
v2 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape NUMBER_INT>;
if v0 == v2 goto label1;
v3 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape NUMBER_FLOAT>;
if v0 != v3 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
public boolean isStructured()
{
com.fasterxml.jackson.'annotation'.JsonFormat$Shape v0, v1, v2;
boolean v3;
v0 := @this: com.fasterxml.jackson.'annotation'.JsonFormat$Shape;
v1 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape OBJECT>;
if v0 == v1 goto label1;
v2 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape ARRAY>;
if v0 != v2 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
private static com.fasterxml.jackson.'annotation'.JsonFormat$Shape[] $values()
{
com.fasterxml.jackson.'annotation'.JsonFormat$Shape[] v0;
com.fasterxml.jackson.'annotation'.JsonFormat$Shape v1, v10, v11, v2, v3, v4, v5, v6, v7, v8, v9;
v0 = newarray (com.fasterxml.jackson.'annotation'.JsonFormat$Shape)[11];
v1 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape ANY>;
v0[0] = v1;
v2 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape NATURAL>;
v0[1] = v2;
v3 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape SCALAR>;
v0[2] = v3;
v4 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape ARRAY>;
v0[3] = v4;
v5 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape OBJECT>;
v0[4] = v5;
v6 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape NUMBER>;
v0[5] = v6;
v7 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape NUMBER_FLOAT>;
v0[6] = v7;
v8 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape NUMBER_INT>;
v0[7] = v8;
v9 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape STRING>;
v0[8] = v9;
v10 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape BOOLEAN>;
v0[9] = v10;
v11 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape BINARY>;
v0[10] = v11;
return v0;
}
static void <clinit>()
{
com.fasterxml.jackson.'annotation'.JsonFormat$Shape[] v11;
com.fasterxml.jackson.'annotation'.JsonFormat$Shape v0, v1, v10, v2, v3, v4, v5, v6, v7, v8, v9;
v0 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;
specialinvoke v0.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("ANY", 0);
<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape ANY> = v0;
v1 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;
specialinvoke v1.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("NATURAL", 1);
<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape NATURAL> = v1;
v2 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;
specialinvoke v2.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("SCALAR", 2);
<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape SCALAR> = v2;
v3 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;
specialinvoke v3.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("ARRAY", 3);
<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape ARRAY> = v3;
v4 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;
specialinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("OBJECT", 4);
<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape OBJECT> = v4;
v5 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;
specialinvoke v5.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("NUMBER", 5);
<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape NUMBER> = v5;
v6 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;
specialinvoke v6.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("NUMBER_FLOAT", 6);
<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape NUMBER_FLOAT> = v6;
v7 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;
specialinvoke v7.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("NUMBER_INT", 7);
<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape NUMBER_INT> = v7;
v8 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;
specialinvoke v8.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("STRING", 8);
<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape STRING> = v8;
v9 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;
specialinvoke v9.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("BOOLEAN", 9);
<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape BOOLEAN> = v9;
v10 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;
specialinvoke v10.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("BINARY", 10);
<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape BINARY> = v10;
v11 = staticinvoke <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape[] $values()>();
<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape[] $VALUES> = v11;
return;
}
}