public final class com.fasterxml.jackson.core.Base64Variant extends java.lang.Object implements java.io.Serializable
{
private static final int INT_SPACE;
private static final long serialVersionUID;
protected static final char PADDING_CHAR_NONE;
public static final int BASE64_VALUE_INVALID;
public static final int BASE64_VALUE_PADDING;
private final transient int[] _asciiToBase64;
private final transient char[] _base64ToAsciiC;
private final transient byte[] _base64ToAsciiB;
final java.lang.String _name;
private final char _paddingChar;
private final int _maxLineLength;
private final boolean _writePadding;
private final com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour;
public void <init>(java.lang.String, java.lang.String, boolean, char, int)
{
com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour v22;
byte[] v18, v8;
int[] v13, v19, v20, v6;
int v14, v15, v21, v5, v9;
java.lang.String v1, v11, v2;
boolean v3;
char v17, v4;
java.lang.IllegalArgumentException v10;
com.fasterxml.jackson.core.Base64Variant v0;
char[] v12, v16, v7;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v4 := @parameter3: char;
v5 := @parameter4: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v6 = newarray (int)[128];
v0.<com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64> = v6;
v7 = newarray (char)[64];
v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC> = v7;
v8 = newarray (byte)[64];
v0.<com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB> = v8;
v0.<com.fasterxml.jackson.core.Base64Variant: java.lang.String _name> = v1;
v0.<com.fasterxml.jackson.core.Base64Variant: boolean _writePadding> = v3;
v0.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar> = v4;
v0.<com.fasterxml.jackson.core.Base64Variant: int _maxLineLength> = v5;
v9 = virtualinvoke v2.<java.lang.String: int length()>();
if v9 == 64 goto label1;
v10 = new java.lang.IllegalArgumentException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Base64Alphabet length must be exactly 64 (was \u0001)");
specialinvoke v10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v11);
throw v10;
label1:
v12 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
virtualinvoke v2.<java.lang.String: void getChars(int,int,char[],int)>(0, v9, v12, 0);
v13 = v0.<com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64>;
v14 = (int) -1;
staticinvoke <java.util.Arrays: void fill(int[],int)>(v13, v14);
v15 = 0;
label2:
if v15 >= v9 goto label3;
v16 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v17 = v16[v15];
v18 = v0.<com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;
v18[v15] = v17;
v19 = v0.<com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64>;
v19[v17] = v15;
v15 = v15 + 1;
goto label2;
label3:
if v3 == 0 goto label4;
v20 = v0.<com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64>;
v21 = (int) -2;
v20[v4] = v21;
if v3 == 0 goto label4;
v22 = <com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour PADDING_REQUIRED>;
goto label5;
label4:
v22 = <com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour PADDING_FORBIDDEN>;
label5:
v0.<com.fasterxml.jackson.core.Base64Variant: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour> = v22;
return;
}
public void <init>(com.fasterxml.jackson.core.Base64Variant, java.lang.String, int)
{
com.fasterxml.jackson.core.Base64Variant v0, v1;
int v3;
char v5;
java.lang.String v2;
boolean v4;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
v4 = v1.<com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;
v5 = v1.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;
specialinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void <init>(com.fasterxml.jackson.core.Base64Variant,java.lang.String,boolean,char,int)>(v1, v2, v4, v5, v3);
return;
}
public void <init>(com.fasterxml.jackson.core.Base64Variant, java.lang.String, boolean, char, int)
{
com.fasterxml.jackson.core.Base64Variant v0, v1;
com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour v6;
int v5;
char v4;
java.lang.String v2;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v4 := @parameter3: char;
v5 := @parameter4: int;
v6 = v1.<com.fasterxml.jackson.core.Base64Variant: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;
specialinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void <init>(com.fasterxml.jackson.core.Base64Variant,java.lang.String,boolean,char,com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour,int)>(v1, v2, v3, v4, v6, v5);
return;
}
private void <init>(com.fasterxml.jackson.core.Base64Variant, java.lang.String, boolean, char, com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour, int)
{
com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour v5;
byte[] v10, v11, v9;
int[] v16, v17, v7;
int v12, v15, v18, v6;
java.lang.String v2;
boolean v3;
char v4;
com.fasterxml.jackson.core.Base64Variant v0, v1;
char[] v13, v14, v8;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v4 := @parameter3: char;
v5 := @parameter4: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour;
v6 := @parameter5: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v7 = newarray (int)[128];
v0.<com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64> = v7;
v8 = newarray (char)[64];
v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC> = v8;
v9 = newarray (byte)[64];
v0.<com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB> = v9;
v0.<com.fasterxml.jackson.core.Base64Variant: java.lang.String _name> = v2;
v10 = v1.<com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;
v11 = v0.<com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;
v12 = lengthof v10;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v10, 0, v11, 0, v12);
v13 = v1.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v14 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v15 = lengthof v13;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v13, 0, v14, 0, v15);
v16 = v1.<com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64>;
v17 = v0.<com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64>;
v18 = lengthof v16;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v16, 0, v17, 0, v18);
v0.<com.fasterxml.jackson.core.Base64Variant: boolean _writePadding> = v3;
v0.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar> = v4;
v0.<com.fasterxml.jackson.core.Base64Variant: int _maxLineLength> = v6;
v0.<com.fasterxml.jackson.core.Base64Variant: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour> = v5;
return;
}
private void <init>(com.fasterxml.jackson.core.Base64Variant, com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour)
{
com.fasterxml.jackson.core.Base64Variant v0, v1;
com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour v2;
int v6;
char v5;
java.lang.String v3;
boolean v4;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour;
v3 = v1.<com.fasterxml.jackson.core.Base64Variant: java.lang.String _name>;
v4 = v1.<com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;
v5 = v1.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;
v6 = v1.<com.fasterxml.jackson.core.Base64Variant: int _maxLineLength>;
specialinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void <init>(com.fasterxml.jackson.core.Base64Variant,java.lang.String,boolean,char,com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour,int)>(v1, v3, v4, v5, v2, v6);
return;
}
public com.fasterxml.jackson.core.Base64Variant withPaddingAllowed()
{
com.fasterxml.jackson.core.Base64Variant v0, v2;
com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 = <com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour PADDING_ALLOWED>;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: com.fasterxml.jackson.core.Base64Variant withReadPadding(com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour)>(v1);
return v2;
}
public com.fasterxml.jackson.core.Base64Variant withPaddingRequired()
{
com.fasterxml.jackson.core.Base64Variant v0, v2;
com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 = <com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour PADDING_REQUIRED>;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: com.fasterxml.jackson.core.Base64Variant withReadPadding(com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour)>(v1);
return v2;
}
public com.fasterxml.jackson.core.Base64Variant withPaddingForbidden()
{
com.fasterxml.jackson.core.Base64Variant v0, v2;
com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 = <com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour PADDING_FORBIDDEN>;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: com.fasterxml.jackson.core.Base64Variant withReadPadding(com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour)>(v1);
return v2;
}
public com.fasterxml.jackson.core.Base64Variant withReadPadding(com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour)
{
com.fasterxml.jackson.core.Base64Variant v0, v3;
com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour v1, v2;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour;
v2 = v0.<com.fasterxml.jackson.core.Base64Variant: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;
if v1 != v2 goto label1;
v3 = v0;
goto label2;
label1:
v3 = new com.fasterxml.jackson.core.Base64Variant;
specialinvoke v3.<com.fasterxml.jackson.core.Base64Variant: void <init>(com.fasterxml.jackson.core.Base64Variant,com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour)>(v0, v1);
label2:
return v3;
}
public com.fasterxml.jackson.core.Base64Variant withWritePadding(boolean)
{
com.fasterxml.jackson.core.Base64Variant v0, v3;
int v6;
char v5;
java.lang.String v4;
boolean v1, v2;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: boolean;
v2 = v0.<com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;
if v1 != v2 goto label1;
v3 = v0;
goto label2;
label1:
v3 = new com.fasterxml.jackson.core.Base64Variant;
v4 = v0.<com.fasterxml.jackson.core.Base64Variant: java.lang.String _name>;
v5 = v0.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;
v6 = v0.<com.fasterxml.jackson.core.Base64Variant: int _maxLineLength>;
specialinvoke v3.<com.fasterxml.jackson.core.Base64Variant: void <init>(com.fasterxml.jackson.core.Base64Variant,java.lang.String,boolean,char,int)>(v0, v4, v1, v5, v6);
label2:
return v3;
}
protected java.lang.Object readResolve()
{
com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour v17, v7, v8;
int v10, v18, v9;
java.lang.String v1, v14;
boolean v11, v12, v15, v3, v4;
char v16, v5, v6;
com.fasterxml.jackson.core.Base64Variant v0, v13, v2;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 = v0.<com.fasterxml.jackson.core.Base64Variant: java.lang.String _name>;
v2 = staticinvoke <com.fasterxml.jackson.core.Base64Variants: com.fasterxml.jackson.core.Base64Variant valueOf(java.lang.String)>(v1);
v3 = v0.<com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;
v4 = v2.<com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;
if v3 != v4 goto label1;
v5 = v0.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;
v6 = v2.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;
if v5 != v6 goto label1;
v7 = v0.<com.fasterxml.jackson.core.Base64Variant: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;
v8 = v2.<com.fasterxml.jackson.core.Base64Variant: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;
if v7 != v8 goto label1;
v9 = v0.<com.fasterxml.jackson.core.Base64Variant: int _maxLineLength>;
v10 = v2.<com.fasterxml.jackson.core.Base64Variant: int _maxLineLength>;
if v9 != v10 goto label1;
v11 = v0.<com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;
v12 = v2.<com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;
if v11 == v12 goto label2;
label1:
v13 = new com.fasterxml.jackson.core.Base64Variant;
v14 = v0.<com.fasterxml.jackson.core.Base64Variant: java.lang.String _name>;
v15 = v0.<com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;
v16 = v0.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;
v17 = v0.<com.fasterxml.jackson.core.Base64Variant: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;
v18 = v0.<com.fasterxml.jackson.core.Base64Variant: int _maxLineLength>;
specialinvoke v13.<com.fasterxml.jackson.core.Base64Variant: void <init>(com.fasterxml.jackson.core.Base64Variant,java.lang.String,boolean,char,com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour,int)>(v2, v14, v15, v16, v17, v18);
return v13;
label2:
return v2;
}
public java.lang.String getName()
{
com.fasterxml.jackson.core.Base64Variant v0;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 = v0.<com.fasterxml.jackson.core.Base64Variant: java.lang.String _name>;
return v1;
}
public boolean usesPadding()
{
com.fasterxml.jackson.core.Base64Variant v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 = v0.<com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;
return v1;
}
public boolean requiresPaddingOnRead()
{
com.fasterxml.jackson.core.Base64Variant v0;
com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour v1, v2;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 = v0.<com.fasterxml.jackson.core.Base64Variant: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;
v2 = <com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour PADDING_REQUIRED>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean acceptsPaddingOnRead()
{
com.fasterxml.jackson.core.Base64Variant v0;
com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour v1, v2;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 = v0.<com.fasterxml.jackson.core.Base64Variant: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;
v2 = <com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour PADDING_FORBIDDEN>;
if v1 == v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean usesPaddingChar(char)
{
com.fasterxml.jackson.core.Base64Variant v0;
char v1, v2;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: char;
v2 = v0.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean usesPaddingChar(int)
{
com.fasterxml.jackson.core.Base64Variant v0;
int v1;
char v2;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour paddingReadBehaviour()
{
com.fasterxml.jackson.core.Base64Variant v0;
com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 = v0.<com.fasterxml.jackson.core.Base64Variant: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;
return v1;
}
public char getPaddingChar()
{
com.fasterxml.jackson.core.Base64Variant v0;
char v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 = v0.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;
return v1;
}
public byte getPaddingByte()
{
com.fasterxml.jackson.core.Base64Variant v0;
char v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 = v0.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;
return v1;
}
public int getMaxLineLength()
{
com.fasterxml.jackson.core.Base64Variant v0;
int v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 = v0.<com.fasterxml.jackson.core.Base64Variant: int _maxLineLength>;
return v1;
}
public int decodeBase64Char(char)
{
com.fasterxml.jackson.core.Base64Variant v0;
int[] v2;
int v3, v4;
char v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: char;
if v1 > 127 goto label1;
v2 = v0.<com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64>;
v3 = v2[v1];
goto label2;
label1:
v4 = (int) -1;
v3 = v4;
label2:
return v3;
}
public int decodeBase64Char(int)
{
com.fasterxml.jackson.core.Base64Variant v0;
int[] v2;
int v1, v3, v4;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: int;
if v1 > 127 goto label1;
v2 = v0.<com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64>;
v3 = v2[v1];
goto label2;
label1:
v4 = (int) -1;
v3 = v4;
label2:
return v3;
}
public int decodeBase64Byte(byte)
{
com.fasterxml.jackson.core.Base64Variant v0;
byte v1;
int[] v3;
int v2, v4;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: byte;
if v1 >= 0 goto label1;
v2 = (int) -1;
return v2;
label1:
v3 = v0.<com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64>;
v4 = v3[v1];
return v4;
}
public char encodeBase64BitsAsChar(int)
{
com.fasterxml.jackson.core.Base64Variant v0;
int v1;
char[] v2;
char v3;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v3 = v2[v1];
return v3;
}
public int encodeBase64Chunk(int, char[], int)
{
int v1, v11, v12, v14, v16, v17, v19, v21, v3, v4, v6, v7, v9;
char v13, v18, v22, v8;
com.fasterxml.jackson.core.Base64Variant v0;
char[] v10, v15, v2, v20, v5;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: int;
v2 := @parameter1: char[];
v3 := @parameter2: int;
v4 = v3 + 1;
v5 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v6 = v1 >> 18;
v7 = v6 & 63;
v8 = v5[v7];
v2[v3] = v8;
v9 = v4 + 1;
v10 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v11 = v1 >> 12;
v12 = v11 & 63;
v13 = v10[v12];
v2[v4] = v13;
v14 = v9 + 1;
v15 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v16 = v1 >> 6;
v17 = v16 & 63;
v18 = v15[v17];
v2[v9] = v18;
v19 = v14 + 1;
v20 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v21 = v1 & 63;
v22 = v20[v21];
v2[v14] = v22;
return v19;
}
public void encodeBase64Chunk(java.lang.StringBuilder, int)
{
int v12, v13, v16, v2, v4, v5, v8, v9;
char v10, v14, v17, v6;
com.fasterxml.jackson.core.Base64Variant v0;
char[] v11, v15, v3, v7;
java.lang.StringBuilder v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: int;
v3 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v4 = v2 >> 18;
v5 = v4 & 63;
v6 = v3[v5];
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v6);
v7 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v8 = v2 >> 12;
v9 = v8 & 63;
v10 = v7[v9];
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v10);
v11 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v12 = v2 >> 6;
v13 = v12 & 63;
v14 = v11[v13];
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v14);
v15 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v16 = v2 & 63;
v17 = v15[v16];
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v17);
return;
}
public int encodeBase64Partial(int, int, char[], int)
{
int v1, v10, v12, v13, v16, v17, v19, v2, v20, v23, v25, v26, v4, v5, v7, v8;
boolean v15;
char v14, v21, v22, v27, v9;
com.fasterxml.jackson.core.Base64Variant v0;
char[] v11, v18, v24, v3, v6;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: char[];
v4 := @parameter3: int;
v5 = v4 + 1;
v6 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v7 = v1 >> 18;
v8 = v7 & 63;
v9 = v6[v8];
v3[v4] = v9;
v10 = v5 + 1;
v11 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v12 = v1 >> 12;
v13 = v12 & 63;
v14 = v11[v13];
v3[v5] = v14;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: boolean usesPadding()>();
if v15 == 0 goto label3;
v16 = v10;
v17 = v10 + 1;
if v2 != 2 goto label1;
v18 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v19 = v1 >> 6;
v20 = v19 & 63;
v21 = v18[v20];
goto label2;
label1:
v21 = v0.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;
label2:
v3[v16] = v21;
v10 = v17 + 1;
v22 = v0.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;
v3[v17] = v22;
goto label4;
label3:
if v2 != 2 goto label4;
v23 = v10;
v10 = v10 + 1;
v24 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v25 = v1 >> 6;
v26 = v25 & 63;
v27 = v24[v26];
v3[v23] = v27;
label4:
return v10;
}
public void encodeBase64Partial(java.lang.StringBuilder, int, int)
{
int v10, v14, v15, v19, v2, v20, v3, v5, v6, v9;
boolean v12;
char v11, v16, v17, v21, v7;
com.fasterxml.jackson.core.Base64Variant v0;
char[] v13, v18, v4, v8;
java.lang.StringBuilder v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v5 = v2 >> 18;
v6 = v5 & 63;
v7 = v4[v6];
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v7);
v8 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v9 = v2 >> 12;
v10 = v9 & 63;
v11 = v8[v10];
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v11);
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: boolean usesPadding()>();
if v12 == 0 goto label3;
if v3 != 2 goto label1;
v13 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v14 = v2 >> 6;
v15 = v14 & 63;
v16 = v13[v15];
goto label2;
label1:
v16 = v0.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;
label2:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v16);
v17 = v0.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v17);
goto label4;
label3:
if v3 != 2 goto label4;
v18 = v0.<com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;
v19 = v2 >> 6;
v20 = v19 & 63;
v21 = v18[v20];
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v21);
label4:
return;
}
public byte encodeBase64BitsAsByte(int)
{
com.fasterxml.jackson.core.Base64Variant v0;
byte[] v2;
byte v3;
int v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;
v3 = v2[v1];
return v3;
}
public int encodeBase64Chunk(int, byte[], int)
{
byte[] v10, v15, v2, v20, v5;
byte v13, v18, v22, v8;
int v1, v11, v12, v14, v16, v17, v19, v21, v3, v4, v6, v7, v9;
com.fasterxml.jackson.core.Base64Variant v0;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: int;
v2 := @parameter1: byte[];
v3 := @parameter2: int;
v4 = v3 + 1;
v5 = v0.<com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;
v6 = v1 >> 18;
v7 = v6 & 63;
v8 = v5[v7];
v2[v3] = v8;
v9 = v4 + 1;
v10 = v0.<com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;
v11 = v1 >> 12;
v12 = v11 & 63;
v13 = v10[v12];
v2[v4] = v13;
v14 = v9 + 1;
v15 = v0.<com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;
v16 = v1 >> 6;
v17 = v16 & 63;
v18 = v15[v17];
v2[v9] = v18;
v19 = v14 + 1;
v20 = v0.<com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;
v21 = v1 & 63;
v22 = v20[v21];
v2[v14] = v22;
return v19;
}
public int encodeBase64Partial(int, int, byte[], int)
{
byte[] v11, v19, v24, v3, v6;
byte v14, v22, v27, v9;
int v1, v10, v12, v13, v17, v18, v2, v20, v21, v23, v25, v26, v4, v5, v7, v8;
boolean v15;
char v16;
com.fasterxml.jackson.core.Base64Variant v0;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: byte[];
v4 := @parameter3: int;
v5 = v4 + 1;
v6 = v0.<com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;
v7 = v1 >> 18;
v8 = v7 & 63;
v9 = v6[v8];
v3[v4] = v9;
v10 = v5 + 1;
v11 = v0.<com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;
v12 = v1 >> 12;
v13 = v12 & 63;
v14 = v11[v13];
v3[v5] = v14;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: boolean usesPadding()>();
if v15 == 0 goto label3;
v16 = v0.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;
v17 = v10;
v18 = v10 + 1;
if v2 != 2 goto label1;
v19 = v0.<com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;
v20 = v1 >> 6;
v21 = v20 & 63;
v22 = v19[v21];
goto label2;
label1:
v22 = v16;
label2:
v3[v17] = v22;
v10 = v18 + 1;
v3[v18] = v16;
goto label4;
label3:
if v2 != 2 goto label4;
v23 = v10;
v10 = v10 + 1;
v24 = v0.<com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;
v25 = v1 >> 6;
v26 = v25 & 63;
v27 = v24[v26];
v3[v23] = v27;
label4:
return v10;
}
public java.lang.String encode(byte[])
{
com.fasterxml.jackson.core.Base64Variant v0;
byte[] v1;
java.lang.String v2;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: byte[];
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: java.lang.String encode(byte[],boolean)>(v1, 0);
return v2;
}
public java.lang.String encode(byte[], boolean)
{
byte[] v1;
byte v14, v17, v21, v27, v29;
boolean v2;
com.fasterxml.jackson.core.Base64Variant v0;
java.lang.StringBuilder v4;
short v18, v22, v30;
int v10, v11, v12, v13, v15, v16, v19, v20, v23, v24, v25, v26, v28, v3, v31, v5, v6, v7, v8, v9;
java.lang.String v32;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: byte[];
v2 := @parameter1: boolean;
v3 = lengthof v1;
v4 = new java.lang.StringBuilder;
v5 = v3 >> 2;
v6 = v3 + v5;
v7 = v3 >> 3;
v8 = v6 + v7;
specialinvoke v4.<java.lang.StringBuilder: void <init>(int)>(v8);
if v2 == 0 goto label1;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);
label1:
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: int getMaxLineLength()>();
v10 = v9 >> 2;
v11 = 0;
v12 = v3 - 3;
label2:
if v11 > v12 goto label3;
v13 = v11 + 1;
v14 = v1[v11];
v15 = v14 << 8;
v16 = v13 + 1;
v17 = v1[v13];
v18 = v17 & 255;
v19 = v15 | v18;
v20 = v19 << 8;
v11 = v16 + 1;
v21 = v1[v16];
v22 = v21 & 255;
v23 = v20 | v22;
virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void encodeBase64Chunk(java.lang.StringBuilder,int)>(v4, v23);
v10 = v10 - 1;
if v10 > 0 goto label2;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(110);
v24 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: int getMaxLineLength()>();
v10 = v24 >> 2;
goto label2;
label3:
v25 = v3 - v11;
if v25 <= 0 goto label5;
v26 = v11 + 1;
v27 = v1[v11];
v28 = v27 << 16;
if v25 != 2 goto label4;
v29 = v1[v26];
v30 = v29 & 255;
v31 = v30 << 8;
v28 = v28 | v31;
label4:
virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void encodeBase64Partial(java.lang.StringBuilder,int,int)>(v4, v28, v25);
label5:
if v2 == 0 goto label6;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);
label6:
v32 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.String toString()>();
return v32;
}
public java.lang.String encode(byte[], boolean, java.lang.String)
{
byte[] v1;
byte v15, v18, v22, v28, v30;
boolean v2;
com.fasterxml.jackson.core.Base64Variant v0;
java.lang.StringBuilder v5;
short v19, v23, v31;
int v10, v11, v12, v13, v14, v16, v17, v20, v21, v24, v25, v26, v27, v29, v32, v4, v6, v7, v8, v9;
java.lang.String v3, v33;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: byte[];
v2 := @parameter1: boolean;
v3 := @parameter2: java.lang.String;
v4 = lengthof v1;
v5 = new java.lang.StringBuilder;
v6 = v4 >> 2;
v7 = v4 + v6;
v8 = v4 >> 3;
v9 = v7 + v8;
specialinvoke v5.<java.lang.StringBuilder: void <init>(int)>(v9);
if v2 == 0 goto label1;
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);
label1:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: int getMaxLineLength()>();
v11 = v10 >> 2;
v12 = 0;
v13 = v4 - 3;
label2:
if v12 > v13 goto label3;
v14 = v12 + 1;
v15 = v1[v12];
v16 = v15 << 8;
v17 = v14 + 1;
v18 = v1[v14];
v19 = v18 & 255;
v20 = v16 | v19;
v21 = v20 << 8;
v12 = v17 + 1;
v22 = v1[v17];
v23 = v22 & 255;
v24 = v21 | v23;
virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void encodeBase64Chunk(java.lang.StringBuilder,int)>(v5, v24);
v11 = v11 - 1;
if v11 > 0 goto label2;
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v3);
v25 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: int getMaxLineLength()>();
v11 = v25 >> 2;
goto label2;
label3:
v26 = v4 - v12;
if v26 <= 0 goto label5;
v27 = v12 + 1;
v28 = v1[v12];
v29 = v28 << 16;
if v26 != 2 goto label4;
v30 = v1[v27];
v31 = v30 & 255;
v32 = v31 << 8;
v29 = v29 | v32;
label4:
virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void encodeBase64Partial(java.lang.StringBuilder,int,int)>(v5, v29, v26);
label5:
if v2 == 0 goto label6;
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);
label6:
v33 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.String toString()>();
return v33;
}
public byte[] decode(java.lang.String) throws java.lang.IllegalArgumentException
{
com.fasterxml.jackson.core.Base64Variant v0;
byte[] v3;
com.fasterxml.jackson.core.util.ByteArrayBuilder v2;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: java.lang.String;
v2 = new com.fasterxml.jackson.core.util.ByteArrayBuilder;
specialinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void <init>()>();
virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void decode(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder)>(v1, v2);
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();
return v3;
}
public void decode(java.lang.String, com.fasterxml.jackson.core.util.ByteArrayBuilder) throws java.lang.IllegalArgumentException
{
boolean v13, v19, v21, v27, v32;
com.fasterxml.jackson.core.Base64Variant v0;
int v10, v11, v12, v14, v15, v17, v18, v24, v25, v26, v28, v3, v30, v31, v33, v34, v35, v4, v5, v7, v8;
java.lang.String v1, v23;
char v16, v20, v22, v29, v6, v9;
com.fasterxml.jackson.core.util.ByteArrayBuilder v2;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.fasterxml.jackson.core.util.ByteArrayBuilder;
v3 = 0;
v4 = virtualinvoke v1.<java.lang.String: int length()>();
label01:
if v3 >= v4 goto label17;
v5 = v3;
v3 = v3 + 1;
v6 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v5);
if v6 <= 32 goto label01;
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>(v6);
if v7 >= 0 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void _reportInvalidBase64(char,int,java.lang.String)>(v6, 0, null);
label02:
if v3 < v4 goto label03;
virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void _reportBase64EOF()>();
label03:
v8 = v3 + 1;
v9 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v3);
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>(v9);
if v10 >= 0 goto label04;
virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void _reportInvalidBase64(char,int,java.lang.String)>(v9, 1, null);
label04:
v11 = v7 << 6;
v12 = v11 | v10;
if v8 < v4 goto label06;
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: boolean requiresPaddingOnRead()>();
if v13 != 0 goto label05;
v14 = v12 >> 4;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void append(int)>(v14);
goto label17;
label05:
virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void _reportBase64EOF()>();
label06:
v15 = v8 + 1;
v16 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v8);
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>(v16);
if v17 >= 0 goto label11;
v18 = (int) -2;
if v17 == v18 goto label07;
virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void _reportInvalidBase64(char,int,java.lang.String)>(v16, 2, null);
label07:
v19 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: boolean acceptsPaddingOnRead()>();
if v19 != 0 goto label08;
virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void _reportBase64UnexpectedPadding()>();
label08:
if v15 < v4 goto label09;
virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void _reportBase64EOF()>();
label09:
v3 = v15 + 1;
v20 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v15);
v21 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: boolean usesPaddingChar(char)>(v20);
if v21 != 0 goto label10;
v22 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>();
v23 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v22) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected padding character \'\u0001\'");
virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void _reportInvalidBase64(char,int,java.lang.String)>(v20, 3, v23);
label10:
v24 = v12 >> 4;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void append(int)>(v24);
goto label01;
label11:
v25 = v12 << 6;
v26 = v25 | v17;
if v15 < v4 goto label13;
v27 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: boolean requiresPaddingOnRead()>();
if v27 != 0 goto label12;
v28 = v26 >> 2;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendTwoBytes(int)>(v28);
goto label17;
label12:
virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void _reportBase64EOF()>();
label13:
v3 = v15 + 1;
v29 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v15);
v30 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>(v29);
if v30 >= 0 goto label16;
v31 = (int) -2;
if v30 == v31 goto label14;
virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void _reportInvalidBase64(char,int,java.lang.String)>(v29, 3, null);
label14:
v32 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: boolean acceptsPaddingOnRead()>();
if v32 != 0 goto label15;
virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: void _reportBase64UnexpectedPadding()>();
label15:
v33 = v26 >> 2;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendTwoBytes(int)>(v33);
goto label01;
label16:
v34 = v26 << 6;
v35 = v34 | v30;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendThreeBytes(int)>(v35);
goto label01;
label17:
return;
}
public java.lang.String toString()
{
com.fasterxml.jackson.core.Base64Variant v0;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 = v0.<com.fasterxml.jackson.core.Base64Variant: java.lang.String _name>;
return v1;
}
public boolean equals(java.lang.Object)
{
com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour v10, v11;
int v6, v7;
java.lang.String v12, v13;
boolean v14, v15, v8, v9;
char v4, v5;
com.fasterxml.jackson.core.Base64Variant v0;
java.lang.Class v2, v3;
java.lang.Object v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: java.lang.Object;
if v1 != v0 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v1.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;
v5 = v0.<com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;
if v4 != v5 goto label4;
v6 = v1.<com.fasterxml.jackson.core.Base64Variant: int _maxLineLength>;
v7 = v0.<com.fasterxml.jackson.core.Base64Variant: int _maxLineLength>;
if v6 != v7 goto label4;
v8 = v1.<com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;
v9 = v0.<com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;
if v8 != v9 goto label4;
v10 = v1.<com.fasterxml.jackson.core.Base64Variant: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;
v11 = v0.<com.fasterxml.jackson.core.Base64Variant: com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;
if v10 != v11 goto label4;
v12 = v0.<com.fasterxml.jackson.core.Base64Variant: java.lang.String _name>;
v13 = v1.<com.fasterxml.jackson.core.Base64Variant: java.lang.String _name>;
v14 = virtualinvoke v12.<java.lang.String: boolean equals(java.lang.Object)>(v13);
if v14 == 0 goto label4;
v15 = 1;
goto label5;
label4:
v15 = 0;
label5:
return v15;
}
public int hashCode()
{
com.fasterxml.jackson.core.Base64Variant v0;
int v2;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 = v0.<com.fasterxml.jackson.core.Base64Variant: java.lang.String _name>;
v2 = virtualinvoke v1.<java.lang.String: int hashCode()>();
return v2;
}
protected void _reportInvalidBase64(char, int, java.lang.String) throws java.lang.IllegalArgumentException
{
char v1, v8;
java.lang.IllegalArgumentException v14;
com.fasterxml.jackson.core.Base64Variant v0;
int v2, v5, v9;
java.lang.String v12, v13, v3, v4, v6;
boolean v10, v11, v7;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 := @parameter0: char;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
if v1 > 32 goto label1;
v4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v1);
v5 = v2 + 1;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v4, v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Illegal white space character (code 0x\u0001) as character #\u0001 of 4-char base64 unit: can only used between units");
goto label5;
label1:
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: boolean usesPaddingChar(char)>(v1);
if v7 == 0 goto label2;
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>();
v9 = v2 + 1;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char,int)>(v8, v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected padding character (\'\u0001\') as character #\u0001 of 4-char base64 unit: padding only legal as 3rd or 4th character");
goto label5;
label2:
v10 = staticinvoke <java.lang.Character: boolean isDefined(char)>(v1);
if v10 == 0 goto label3;
v11 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(v1);
if v11 == 0 goto label4;
label3:
v12 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v1);
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Illegal character (code 0x\u0001) in base64 content");
goto label5;
label4:
v13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v1);
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char,java.lang.String)>(v1, v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Illegal character \'\u0001\' (code 0x\u0001) in base64 content");
label5:
if v3 == null goto label6;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v6, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001: \u0001");
label6:
v14 = new java.lang.IllegalArgumentException;
specialinvoke v14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v14;
}
protected void _reportBase64EOF() throws java.lang.IllegalArgumentException
{
com.fasterxml.jackson.core.Base64Variant v0;
java.lang.String v2;
java.lang.IllegalArgumentException v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 = new java.lang.IllegalArgumentException;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: java.lang.String missingPaddingMessage()>();
specialinvoke v1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v2);
throw v1;
}
protected void _reportBase64UnexpectedPadding() throws java.lang.IllegalArgumentException
{
com.fasterxml.jackson.core.Base64Variant v0;
java.lang.String v2;
java.lang.IllegalArgumentException v1;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 = new java.lang.IllegalArgumentException;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: java.lang.String unexpectedPaddingMessage()>();
specialinvoke v1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v2);
throw v1;
}
protected java.lang.String unexpectedPaddingMessage()
{
com.fasterxml.jackson.core.Base64Variant v0;
java.lang.Object[] v1;
java.lang.String v2, v3;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 = newarray (java.lang.Object)[1];
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: java.lang.String getName()>();
v1[0] = v2;
v3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected end of base64-encoded String: base64 variant \'%s\' expects no padding at the end while decoding. This Base64Variant might have been incorrectly configured", v1);
return v3;
}
public java.lang.String missingPaddingMessage()
{
com.fasterxml.jackson.core.Base64Variant v0;
java.lang.Object[] v1;
java.lang.Character v4;
char v3;
java.lang.String v2, v5;
v0 := @this: com.fasterxml.jackson.core.Base64Variant;
v1 = newarray (java.lang.Object)[2];
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: java.lang.String getName()>();
v1[0] = v2;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>();
v4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v3);
v1[1] = v4;
v5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected end of base64-encoded String: base64 variant \'%s\' expects padding (one or more \'%c\' characters) at the end. This Base64Variant might have been incorrectly configured", v1);
return v5;
}
}