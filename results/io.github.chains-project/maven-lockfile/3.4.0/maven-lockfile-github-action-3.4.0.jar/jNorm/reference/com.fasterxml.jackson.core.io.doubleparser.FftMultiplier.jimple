class com.fasterxml.jackson.core.io.doubleparser.FftMultiplier extends java.lang.Object
{
public static final double COS_0_25;
public static final double SIN_0_25;
private static final int FFT_THRESHOLD;
private static final int MAX_MAG_LENGTH;
private static final int ROOTS3_CACHE_SIZE;
private static final int ROOTS_CACHE2_SIZE;
private static final int TOOM_COOK_THRESHOLD;
private static volatile com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] ROOTS2_CACHE;
private static volatile com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] ROOTS3_CACHE;
static final boolean $assertionsDisabled;
void <init>()
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static int bitsPerFftPoint(int)
{
int v0;
v0 := @parameter0: int;
if v0 > 9728 goto label01;
return 19;
label01:
if v0 > 18432 goto label02;
return 18;
label02:
if v0 > 69632 goto label03;
return 17;
label03:
if v0 > 262144 goto label04;
return 16;
label04:
if v0 > 983040 goto label05;
return 15;
label05:
if v0 > 3670016 goto label06;
return 14;
label06:
if v0 > 13631488 goto label07;
return 13;
label07:
if v0 > 25165824 goto label08;
return 12;
label08:
if v0 > 92274688 goto label09;
return 11;
label09:
if v0 > 335544320 goto label10;
return 10;
label10:
if v0 > 1207959552 goto label11;
return 9;
label11:
return 8;
}
private static com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector calculateRootsOfUnity(int)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v1, v2;
int v0, v12, v5, v7, v8;
double v10, v11, v3, v4, v6, v9;
v0 := @parameter0: int;
if v0 != 1 goto label1;
v1 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
specialinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void <init>(int)>(1);
virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void real(int,double)>(0, 1.0);
virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void imag(int,double)>(0, 0.0);
return v1;
label1:
v2 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
specialinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void <init>(int)>(v0);
virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void set(int,double,double)>(0, 1.0, 0.0);
v3 = <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: double COS_0_25>;
v4 = <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: double SIN_0_25>;
v5 = v0 / 2;
virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void set(int,double,double)>(v5, v3, v4);
v6 = 1.5707963267948966 / v0;
v7 = 1;
label2:
v8 = v0 / 2;
if v7 >= v8 goto label3;
v9 = v6 * v7;
v10 = staticinvoke <java.lang.Math: double cos(double)>(v9);
v11 = staticinvoke <java.lang.Math: double sin(double)>(v9);
virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void set(int,double,double)>(v7, v10, v11);
v12 = v0 - v7;
virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void set(int,double,double)>(v12, v11, v10);
v7 = v7 + 1;
goto label2;
label3:
return v2;
}
private static void fft(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[])
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v10, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] v1;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0, v13;
int v11, v12, v14, v15, v16, v17, v18, v19, v2, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v3, v30, v31, v4;
v0 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[];
v2 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length>;
v3 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(v2);
v4 = 31 - v3;
v5 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v5.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void <init>()>();
v6 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v6.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void <init>()>();
v7 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v7.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void <init>()>();
v8 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v8.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void <init>()>();
v9 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v9.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void <init>()>();
v10 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v10.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void <init>()>();
v11 = v4;
label1:
if v11 < 2 goto label6;
v12 = v11 - 2;
v13 = v1[v12];
v14 = 1 << v11;
v15 = 0;
label2:
if v15 >= v2 goto label5;
v16 = 0;
label3:
v17 = v14 / 4;
if v16 >= v17 goto label4;
virtualinvoke v9.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void set(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v13, v16);
virtualinvoke v9.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void squareInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v10);
v18 = v15 + v16;
v19 = v15 + v16;
v20 = v14 / 4;
v21 = v19 + v20;
v22 = v15 + v16;
v23 = v14 / 2;
v24 = v22 + v23;
v25 = v15 + v16;
v26 = v14 * 3;
v27 = v26 / 4;
v28 = v25 + v27;
virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void addInto(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v18, v0, v21, v5);
virtualinvoke v5.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void add(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v0, v24);
virtualinvoke v5.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void add(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v0, v28);
virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void subtractTimesIInto(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v18, v0, v21, v6);
virtualinvoke v6.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void subtract(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v0, v24);
virtualinvoke v6.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void addTimesI(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v0, v28);
virtualinvoke v6.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void multiplyConjugate(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v9);
virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void subtractInto(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v18, v0, v21, v7);
virtualinvoke v7.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void add(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v0, v24);
virtualinvoke v7.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void subtract(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v0, v28);
virtualinvoke v7.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void multiplyConjugate(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v10);
virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void addTimesIInto(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v18, v0, v21, v8);
virtualinvoke v8.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void subtract(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v0, v24);
virtualinvoke v8.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void subtractTimesI(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v0, v28);
virtualinvoke v8.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void multiply(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v9);
virtualinvoke v5.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void copyInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v0, v18);
virtualinvoke v6.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void copyInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v0, v21);
virtualinvoke v7.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void copyInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v0, v24);
virtualinvoke v8.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void copyInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v0, v28);
v16 = v16 + 1;
goto label3;
label4:
v15 = v15 + v14;
goto label2;
label5:
v11 = v11 - 2;
goto label1;
label6:
if v11 <= 0 goto label8;
v29 = 0;
label7:
if v29 >= v2 goto label8;
virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void copyInto(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v29, v5);
v30 = v29 + 1;
virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void copyInto(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v30, v6);
virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void add(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v29, v6);
v31 = v29 + 1;
virtualinvoke v5.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void subtractInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v6, v0, v31);
v29 = v29 + 2;
goto label7;
label8:
return;
}
private static void fft3(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, int, double)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0, v1, v2;
int v3, v8, v9;
double v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v4, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v5, v50, v51, v52, v53, v6, v7;
v0 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v2 := @parameter2: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v3 := @parameter3: int;
v4 := @parameter4: double;
v5 = v3 * -0.5;
v6 = staticinvoke <java.lang.Math: double sqrt(double)>(3.0);
v7 = v5 * v6;
v8 = 0;
label1:
v9 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length>;
if v8 >= v9 goto label2;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double real(int)>(v8);
v11 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double real(int)>(v8);
v12 = v10 + v11;
v13 = virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double real(int)>(v8);
v14 = v12 + v13;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double imag(int)>(v8);
v16 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double imag(int)>(v8);
v17 = v15 + v16;
v18 = virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double imag(int)>(v8);
v19 = v17 + v18;
v20 = virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double imag(int)>(v8);
v21 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double imag(int)>(v8);
v22 = v20 - v21;
v23 = v7 * v22;
v24 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double real(int)>(v8);
v25 = virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double real(int)>(v8);
v26 = v24 - v25;
v27 = v7 * v26;
v28 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double real(int)>(v8);
v29 = virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double real(int)>(v8);
v30 = v28 + v29;
v31 = 0.5 * v30;
v32 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double imag(int)>(v8);
v33 = virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double imag(int)>(v8);
v34 = v32 + v33;
v35 = 0.5 * v34;
v36 = virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double real(int)>(v8);
v37 = v36 - v31;
v38 = v37 + v23;
v39 = virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double imag(int)>(v8);
v40 = v39 + v27;
v41 = v40 - v35;
v42 = virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double real(int)>(v8);
v43 = v42 - v31;
v44 = v43 - v23;
v45 = virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double imag(int)>(v8);
v46 = v45 - v27;
v47 = v46 - v35;
v48 = v14 * v4;
virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void real(int,double)>(v8, v48);
v49 = v19 * v4;
virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void imag(int,double)>(v8, v49);
v50 = v38 * v4;
virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void real(int,double)>(v8, v50);
v51 = v41 * v4;
virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void imag(int,double)>(v8, v51);
v52 = v44 * v4;
virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void real(int,double)>(v8, v52);
v53 = v47 * v4;
virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void imag(int,double)>(v8, v53);
v8 = v8 + 1;
goto label1;
label2:
return;
}
private static void fftMixedRadix(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[], com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0, v2, v5, v6, v8;
int v10, v12, v13, v14, v15, v16, v17, v18, v19, v3, v4, v7, v9;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v11;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] v1;
v0 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[];
v2 := @parameter2: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length>;
v4 = v3 / 3;
v5 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
specialinvoke v5.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void <init>(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int,int)>(v0, 0, v4);
v6 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v7 = v4 * 2;
specialinvoke v6.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void <init>(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int,int)>(v0, v4, v7);
v8 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v9 = v4 * 2;
v10 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length>;
specialinvoke v8.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void <init>(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int,int)>(v0, v9, v10);
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: void fft3(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int,double)>(v5, v6, v8, 1, 1.0);
v11 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v11.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void <init>()>();
v12 = 0;
label1:
v13 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length>;
v14 = v13 / 4;
if v12 >= v14 goto label2;
virtualinvoke v11.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void set(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v2, v12);
virtualinvoke v6.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void multiplyConjugate(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v12, v11);
virtualinvoke v8.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void multiplyConjugate(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v12, v11);
virtualinvoke v8.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void multiplyConjugate(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v12, v11);
v12 = v12 + 1;
goto label1;
label2:
v15 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length>;
v16 = v15 / 4;
label3:
if v16 >= v4 goto label4;
v17 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length>;
v18 = v17 / 4;
v19 = v16 - v18;
virtualinvoke v11.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void set(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v2, v19);
virtualinvoke v6.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void multiplyConjugateTimesI(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v16, v11);
virtualinvoke v8.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void multiplyConjugateTimesI(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v16, v11);
virtualinvoke v8.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void multiplyConjugateTimesI(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v16, v11);
v16 = v16 + 1;
goto label3;
label4:
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: void fft(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[])>(v5, v1);
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: void fft(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[])>(v6, v1);
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: void fft(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[])>(v8, v1);
return;
}
static java.math.BigInteger fromFftVector(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, int, int)
{
byte[] v14;
java.math.BigInteger v46;
boolean v3;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
long v10, v11, v12, v13, v18, v30, v31, v43, v44, v45, v7, v8, v9;
java.lang.AssertionError v4;
int v1, v15, v16, v17, v19, v2, v20, v21, v22, v23, v24, v25, v26, v27, v28, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v47, v6;
java.lang.String v5;
double v29;
v0 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
if v2 <= 25 goto label1;
v4 = new java.lang.AssertionError;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 does not fit into an int with slack");
specialinvoke v4.<java.lang.AssertionError: void <init>(java.lang.Object)>(v5);
throw v4;
label1:
v6 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length>;
v7 = 2147483648L / v2;
v8 = v7 + 1L;
v9 = staticinvoke <java.lang.Math: long min(long,long)>(v6, v8);
v10 = v47 * v2;
v11 = v10 + 31L;
v12 = 8L * v11;
v13 = v12 / 32L;
v14 = newarray (byte)[v13];
v15 = 1 << v2;
v16 = v15 - 1;
v17 = 32 - v2;
v18 = 0L;
v19 = lengthof v14;
v20 = v19 * 8;
v21 = v20 - v2;
v22 = v21 >> 3;
v23 = staticinvoke <java.lang.Math: int max(int,int)>(0, v22);
v24 = lengthof v14;
v25 = v24 - 4;
v26 = staticinvoke <java.lang.Math: int min(int,int)>(v23, v25);
v27 = 0;
label2:
if v27 > 1 goto label5;
v28 = 0;
label3:
if v28 >= v9 goto label4;
v29 = virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double part(int,int)>(v28, v27);
v30 = staticinvoke <java.lang.Math: long round(double)>(v29);
v31 = v30 + v18;
v18 = v31 >> v2;
v32 = v21 >> 3;
v33 = staticinvoke <java.lang.Math: int max(int,int)>(0, v32);
v34 = lengthof v14;
v35 = v34 - 4;
v36 = staticinvoke <java.lang.Math: int min(int,int)>(v33, v35);
v37 = v26 - v36;
v38 = v37 << 3;
v39 = 0 >>> v38;
v40 = v17 - v21;
v41 = v36 << 3;
v42 = v40 + v41;
v43 = v31 & v16;
v44 = v43 << v42;
v45 = v39 | v44;
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: void writeIntBE(byte[],int,int)>(v14, v36, v45);
v26 = v36;
v21 = v21 - v2;
v28 = v28 + 1;
goto label3;
label4:
v27 = v27 + 1;
goto label2;
label5:
v46 = new java.math.BigInteger;
specialinvoke v46.<java.math.BigInteger: void <init>(int,byte[])>(v1, v14);
return v46;
}
private static com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] getRootsOfUnity2(int)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v10, v12, v5, v8;
int v0, v1, v11, v3, v7;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] v2, v4, v6, v9;
v0 := @parameter0: int;
v1 = v0 + 1;
v2 = newarray (com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)[v1];
v3 = v0;
label1:
if v3 < 0 goto label5;
if v3 >= 20 goto label3;
v4 = <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] ROOTS2_CACHE>;
v5 = v4[v3];
if v5 != null goto label2;
v6 = <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] ROOTS2_CACHE>;
v7 = 1 << v3;
v8 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector calculateRootsOfUnity(int)>(v7);
v6[v3] = v8;
label2:
v9 = <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] ROOTS2_CACHE>;
v10 = v9[v3];
v2[v3] = v10;
goto label4;
label3:
v11 = 1 << v3;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector calculateRootsOfUnity(int)>(v11);
v2[v3] = v12;
label4:
v3 = v3 - 2;
goto label1;
label5:
return v2;
}
private static com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector getRootsOfUnity3(int)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v2, v5, v7, v9;
int v0, v4, v8;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] v1, v3, v6;
v0 := @parameter0: int;
if v0 >= 20 goto label2;
v1 = <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] ROOTS3_CACHE>;
v2 = v1[v0];
if v2 != null goto label1;
v3 = <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] ROOTS3_CACHE>;
v4 = 3 << v0;
v5 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector calculateRootsOfUnity(int)>(v4);
v3[v0] = v5;
label1:
v6 = <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] ROOTS3_CACHE>;
v7 = v6[v0];
return v7;
label2:
v8 = 3 << v0;
v9 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector calculateRootsOfUnity(int)>(v8);
return v9;
}
private static void ifft(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[])
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v10, v11, v12, v18, v19, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] v1;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0, v21;
int v13, v14, v15, v16, v17, v2, v20, v22, v23, v24, v25, v26, v27, v28, v29, v3, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v4;
v0 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[];
v2 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length>;
v3 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(v2);
v4 = 31 - v3;
v5 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v5.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void <init>()>();
v6 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v6.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void <init>()>();
v7 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v7.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void <init>()>();
v8 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v8.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void <init>()>();
v9 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v9.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void <init>()>();
v10 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v10.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void <init>()>();
v11 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v11.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void <init>()>();
v12 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v12.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void <init>()>();
v13 = 1;
v14 = v4 % 2;
if v14 == 0 goto label03;
v15 = 0;
label01:
if v15 >= v2 goto label02;
v16 = v15 + 1;
virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void copyInto(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v16, v7);
virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void copyInto(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v15, v5);
virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void add(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v15, v7);
v17 = v15 + 1;
virtualinvoke v5.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void subtractInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v7, v0, v17);
v15 = v15 + 2;
goto label01;
label02:
v13 = 2;
label03:
v18 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v18.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void <init>()>();
v19 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v19.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void <init>()>();
label04:
if v13 > v4 goto label09;
v20 = v13 - 1;
v21 = v1[v20];
v22 = v13 + 1;
v23 = 1 << v22;
v24 = 0;
label05:
if v24 >= v2 goto label08;
v25 = 0;
label06:
v26 = v23 / 4;
if v25 >= v26 goto label07;
virtualinvoke v18.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void set(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v21, v25);
virtualinvoke v18.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void squareInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v19);
v27 = v24 + v25;
v28 = v24 + v25;
v29 = v23 / 4;
v30 = v28 + v29;
v31 = v24 + v25;
v32 = v23 / 2;
v33 = v31 + v32;
v34 = v24 + v25;
v35 = v23 * 3;
v36 = v35 / 4;
v37 = v34 + v36;
virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void copyInto(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v27, v5);
virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void multiplyInto(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v30, v18, v6);
virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void multiplyInto(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v33, v19, v7);
virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void multiplyConjugateInto(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v37, v18, v8);
virtualinvoke v5.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void addInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v6, v9);
virtualinvoke v9.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void add(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v7);
virtualinvoke v9.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void add(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v8);
virtualinvoke v5.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void addTimesIInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v6, v10);
virtualinvoke v10.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void subtract(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v7);
virtualinvoke v10.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void subtractTimesI(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v8);
virtualinvoke v5.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void subtractInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v6, v11);
virtualinvoke v11.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void add(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v7);
virtualinvoke v11.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void subtract(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v8);
virtualinvoke v5.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void subtractTimesIInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v6, v12);
virtualinvoke v12.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void subtract(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v7);
virtualinvoke v12.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void addTimesI(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v8);
virtualinvoke v9.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void copyInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v0, v27);
virtualinvoke v10.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void copyInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v0, v30);
virtualinvoke v11.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void copyInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v0, v33);
virtualinvoke v12.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void copyInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v0, v37);
v25 = v25 + 1;
goto label06;
label07:
v24 = v24 + v23;
goto label05;
label08:
v13 = v13 + 2;
goto label04;
label09:
v38 = 0;
label10:
if v38 >= v2 goto label11;
v39 = neg v4;
virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void timesTwoToThe(int,int)>(v38, v39);
v38 = v38 + 1;
goto label10;
label11:
return;
}
private static void ifftMixedRadix(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[], com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0, v2, v5, v6, v8;
int v10, v12, v13, v14, v15, v16, v17, v18, v19, v20, v3, v4, v7, v9;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v11;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] v1;
v0 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[];
v2 := @parameter2: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length>;
v4 = v3 / 3;
v5 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
specialinvoke v5.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void <init>(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int,int)>(v0, 0, v4);
v6 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v7 = v4 * 2;
specialinvoke v6.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void <init>(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int,int)>(v0, v4, v7);
v8 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v9 = v4 * 2;
v10 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length>;
specialinvoke v8.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void <init>(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int,int)>(v0, v9, v10);
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: void ifft(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[])>(v5, v1);
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: void ifft(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[])>(v6, v1);
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: void ifft(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[])>(v8, v1);
v11 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v11.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void <init>()>();
v12 = 0;
label1:
v13 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length>;
v14 = v13 / 4;
if v12 >= v14 goto label2;
virtualinvoke v11.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void set(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v2, v12);
virtualinvoke v6.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void multiply(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v12, v11);
virtualinvoke v8.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void multiply(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v12, v11);
virtualinvoke v8.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void multiply(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v12, v11);
v12 = v12 + 1;
goto label1;
label2:
v15 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length>;
v16 = v15 / 4;
label3:
if v16 >= v4 goto label4;
v17 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length>;
v18 = v17 / 4;
v19 = v16 - v18;
virtualinvoke v11.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: void set(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int)>(v2, v19);
virtualinvoke v6.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void multiplyByIAnd(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v16, v11);
virtualinvoke v8.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void multiplyByIAnd(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v16, v11);
virtualinvoke v8.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void multiplyByIAnd(int,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)>(v16, v11);
v16 = v16 + 1;
goto label3;
label4:
v20 = (int) -1;
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: void fft3(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int,double)>(v5, v6, v8, v20, 0.3333333333333333);
return;
}
static java.math.BigInteger multiply(java.math.BigInteger, java.math.BigInteger)
{
long v8;
byte v9;
int v11, v12, v2, v3, v6, v7;
java.lang.ArithmeticException v10;
java.math.BigInteger v0, v1, v13, v14, v4, v5;
v0 := @parameter0: java.math.BigInteger;
v1 := @parameter1: java.math.BigInteger;
v2 = virtualinvoke v1.<java.math.BigInteger: int signum()>();
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<java.math.BigInteger: int signum()>();
if v3 != 0 goto label2;
label1:
v4 = <java.math.BigInteger: java.math.BigInteger ZERO>;
return v4;
label2:
if v1 != v0 goto label3;
v5 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: java.math.BigInteger square(java.math.BigInteger)>(v1);
return v5;
label3:
v6 = virtualinvoke v0.<java.math.BigInteger: int bitLength()>();
v7 = virtualinvoke v1.<java.math.BigInteger: int bitLength()>();
v8 = v6 + v7;
v9 = v8 cmp 2147483648L;
if v9 <= 0 goto label4;
v10 = new java.lang.ArithmeticException;
specialinvoke v10.<java.lang.ArithmeticException: void <init>(java.lang.String)>("BigInteger would overflow supported range");
throw v10;
label4:
if v6 <= 1920 goto label6;
if v7 <= 1920 goto label6;
v11 = (int) 33220;
if v6 > v11 goto label5;
v12 = (int) 33220;
if v7 <= v12 goto label6;
label5:
v13 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: java.math.BigInteger multiplyFft(java.math.BigInteger,java.math.BigInteger)>(v0, v1);
return v13;
label6:
v14 = virtualinvoke v0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(v1);
return v14;
}
static java.math.BigInteger multiplyFft(java.math.BigInteger, java.math.BigInteger)
{
byte[] v10, v7;
java.math.BigInteger v0, v1, v34, v41, v6, v9;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] v27, v35;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v29, v31, v32, v33, v36, v37, v38, v39, v40;
int v11, v12, v13, v14, v15, v16, v17, v18, v19, v2, v20, v21, v22, v23, v24, v25, v26, v28, v3, v30, v4, v5, v8;
v0 := @parameter0: java.math.BigInteger;
v1 := @parameter1: java.math.BigInteger;
v2 = virtualinvoke v0.<java.math.BigInteger: int signum()>();
v3 = virtualinvoke v1.<java.math.BigInteger: int signum()>();
v4 = v2 * v3;
v5 = virtualinvoke v0.<java.math.BigInteger: int signum()>();
if v5 >= 0 goto label1;
v6 = virtualinvoke v0.<java.math.BigInteger: java.math.BigInteger negate()>();
goto label2;
label1:
v6 = v0;
label2:
v7 = virtualinvoke v6.<java.math.BigInteger: byte[] toByteArray()>();
v8 = virtualinvoke v1.<java.math.BigInteger: int signum()>();
if v8 >= 0 goto label3;
v9 = virtualinvoke v1.<java.math.BigInteger: java.math.BigInteger negate()>();
goto label4;
label3:
v9 = v1;
label4:
v10 = virtualinvoke v9.<java.math.BigInteger: byte[] toByteArray()>();
v11 = lengthof v7;
v12 = lengthof v10;
v13 = staticinvoke <java.lang.Math: int max(int,int)>(v11, v12);
v14 = v13 * 8;
v15 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: int bitsPerFftPoint(int)>(v14);
v16 = v14 + v15;
v17 = v16 - 1;
v18 = v17 / v15;
v19 = v18 + 1;
v20 = v19 - 1;
v21 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(v20);
v22 = 32 - v21;
v23 = 1 << v22;
v24 = v23 * 3;
v25 = v24 / 4;
if v19 >= v25 goto label5;
if v22 <= 3 goto label5;
v26 = v22 - 2;
v27 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] getRootsOfUnity2(int)>(v26);
v28 = v22 - 2;
v29 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector getRootsOfUnity3(int)>(v28);
v30 = v22 - 4;
v31 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector getRootsOfUnity3(int)>(v30);
v32 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector toFftVector(byte[],int,int)>(v7, v25, v15);
virtualinvoke v32.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void applyWeights(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)>(v29);
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: void fftMixedRadix(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[],com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)>(v32, v27, v31);
v33 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector toFftVector(byte[],int,int)>(v10, v25, v15);
virtualinvoke v33.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void applyWeights(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)>(v29);
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: void fftMixedRadix(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[],com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)>(v33, v27, v31);
virtualinvoke v32.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void multiplyPointwise(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)>(v33);
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: void ifftMixedRadix(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[],com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)>(v32, v27, v31);
virtualinvoke v32.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void applyInverseWeights(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)>(v29);
v34 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: java.math.BigInteger fromFftVector(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int,int)>(v32, v4, v15);
return v34;
label5:
v35 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] getRootsOfUnity2(int)>(v22);
v36 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector toFftVector(byte[],int,int)>(v7, v23, v15);
v37 = v35[v22];
virtualinvoke v36.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void applyWeights(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)>(v37);
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: void fft(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[])>(v36, v35);
v38 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector toFftVector(byte[],int,int)>(v10, v23, v15);
v39 = v35[v22];
virtualinvoke v38.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void applyWeights(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)>(v39);
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: void fft(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[])>(v38, v35);
virtualinvoke v36.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void multiplyPointwise(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)>(v38);
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: void ifft(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[])>(v36, v35);
v40 = v35[v22];
virtualinvoke v36.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void applyInverseWeights(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)>(v40);
v41 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: java.math.BigInteger fromFftVector(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int,int)>(v36, v4, v15);
return v41;
}
static java.math.BigInteger square(java.math.BigInteger)
{
int v1, v3, v4;
java.math.BigInteger v0, v2, v5;
v0 := @parameter0: java.math.BigInteger;
v1 = virtualinvoke v0.<java.math.BigInteger: int signum()>();
if v1 != 0 goto label1;
v2 = <java.math.BigInteger: java.math.BigInteger ZERO>;
return v2;
label1:
v3 = virtualinvoke v0.<java.math.BigInteger: int bitLength()>();
v4 = (int) 33220;
if v3 >= v4 goto label2;
v5 = virtualinvoke v0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(v0);
goto label3;
label2:
v5 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: java.math.BigInteger squareFft(java.math.BigInteger)>(v0);
label3:
return v5;
}
static java.math.BigInteger squareFft(java.math.BigInteger)
{
byte[] v1;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v15, v19, v21, v23, v25, v26;
int v10, v11, v12, v13, v14, v16, v18, v2, v20, v3, v4, v5, v6, v7, v8, v9;
java.math.BigInteger v0, v22, v27;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] v17, v24;
v0 := @parameter0: java.math.BigInteger;
v1 = virtualinvoke v0.<java.math.BigInteger: byte[] toByteArray()>();
v2 = lengthof v1;
v3 = v2 * 8;
v4 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: int bitsPerFftPoint(int)>(v3);
v5 = v3 + v4;
v6 = v5 - 1;
v7 = v6 / v4;
v8 = v7 + 1;
v9 = v8 - 1;
v10 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(v9);
v11 = 32 - v10;
v12 = 1 << v11;
v13 = v12 * 3;
v14 = v13 / 4;
if v8 >= v14 goto label1;
v15 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector toFftVector(byte[],int,int)>(v1, v14, v4);
v16 = v11 - 2;
v17 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] getRootsOfUnity2(int)>(v16);
v18 = v11 - 2;
v19 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector getRootsOfUnity3(int)>(v18);
v20 = v11 - 4;
v21 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector getRootsOfUnity3(int)>(v20);
virtualinvoke v15.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void applyWeights(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)>(v19);
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: void fftMixedRadix(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[],com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)>(v15, v17, v21);
virtualinvoke v15.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void squarePointwise()>();
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: void ifftMixedRadix(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[],com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)>(v15, v17, v21);
virtualinvoke v15.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void applyInverseWeights(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)>(v19);
v22 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: java.math.BigInteger fromFftVector(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int,int)>(v15, 1, v4);
return v22;
label1:
v23 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector toFftVector(byte[],int,int)>(v1, v12, v4);
v24 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] getRootsOfUnity2(int)>(v11);
v25 = v24[v11];
virtualinvoke v23.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void applyWeights(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)>(v25);
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: void fft(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[])>(v23, v24);
virtualinvoke v23.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void squarePointwise()>();
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: void ifft(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[])>(v23, v24);
v26 = v24[v11];
virtualinvoke v23.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void applyInverseWeights(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)>(v26);
v27 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: java.math.BigInteger fromFftVector(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector,int,int)>(v23, 1, v4);
return v27;
}
static com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector toFftVector(byte[], int, int)
{
byte[] v0, v8;
boolean v3;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v6;
java.lang.AssertionError v4;
int v1, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v2, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v7, v9;
java.lang.String v5;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = <com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
if v2 <= 25 goto label1;
v4 = new java.lang.AssertionError;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 does not fit into an int with slack");
specialinvoke v4.<java.lang.AssertionError: void <init>(java.lang.Object)>(v5);
throw v4;
label1:
v6 = new com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
specialinvoke v6.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void <init>(int)>(v1);
v7 = lengthof v0;
if v7 >= 4 goto label2;
v8 = newarray (byte)[4];
v9 = lengthof v0;
v10 = 4 - v9;
v11 = lengthof v0;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, 0, v8, v10, v11);
v0 = v8;
label2:
v12 = 1 << v2;
v13 = v12 / 2;
v14 = v12 - 1;
v15 = 32 - v2;
v16 = lengthof v0;
v17 = v16 * 8;
v18 = 0;
v19 = 0;
v20 = v17 - v2;
label3:
v21 = neg v2;
if v20 <= v21 goto label4;
v22 = v20 >> 3;
v23 = staticinvoke <java.lang.Math: int max(int,int)>(0, v22);
v24 = lengthof v0;
v25 = v24 - 4;
v26 = staticinvoke <java.lang.Math: int min(int,int)>(v23, v25);
v27 = v15 - v20;
v28 = v26 << 3;
v29 = v27 + v28;
v30 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: int readIntBE(byte[],int)>(v0, v26);
v31 = v30 >>> v29;
v32 = v31 & v14;
v33 = v32 + v18;
v34 = v13 - v33;
v18 = v34 >>> 31;
v35 = neg v18;
v36 = v12 & v35;
v37 = v33 - v36;
virtualinvoke v6.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void real(int,double)>(v19, v37);
v19 = v19 + 1;
v20 = v20 - v2;
goto label3;
label4:
if v18 <= 0 goto label5;
virtualinvoke v6.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void real(int,double)>(v19, v18);
label5:
return v6;
}
static void <clinit>()
{
java.lang.Class v0;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] v5, v6;
boolean v1, v2;
double v3, v4;
v0 = class "Lcom/fasterxml/jackson/core/io/doubleparser/FftMultiplier;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <java.lang.Math: double cos(double)>(0.7853981633974483);
<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: double COS_0_25> = v3;
v4 = staticinvoke <java.lang.Math: double sin(double)>(0.7853981633974483);
<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: double SIN_0_25> = v4;
v5 = newarray (com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)[20];
<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] ROOTS2_CACHE> = v5;
v6 = newarray (com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)[20];
<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector[] ROOTS3_CACHE> = v6;
return;
}
}