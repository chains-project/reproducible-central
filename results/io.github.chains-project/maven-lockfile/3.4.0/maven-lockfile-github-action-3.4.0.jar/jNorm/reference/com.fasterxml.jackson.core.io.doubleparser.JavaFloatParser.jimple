public class com.fasterxml.jackson.core.io.doubleparser.JavaFloatParser extends java.lang.Object
{
private static final com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromByteArray BYTE_ARRAY_PARSER;
private static final com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromCharArray CHAR_ARRAY_PARSER;
private static final com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromCharSequence CHAR_SEQUENCE_PARSER;
private void <init>()
{
com.fasterxml.jackson.core.io.doubleparser.JavaFloatParser v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaFloatParser;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static float parseFloat(java.lang.CharSequence) throws java.lang.NumberFormatException
{
int v1;
float v2;
java.lang.CharSequence v0;
v0 := @parameter0: java.lang.CharSequence;
v1 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v2 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaFloatParser: float parseFloat(java.lang.CharSequence,int,int)>(v0, 0, v1);
return v2;
}
public static float parseFloat(java.lang.CharSequence, int, int) throws java.lang.NumberFormatException
{
java.lang.CharSequence v0;
int v1, v2;
float v5;
com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromCharSequence v3;
long v4;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = <com.fasterxml.jackson.core.io.doubleparser.JavaFloatParser: com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromCharSequence CHAR_SEQUENCE_PARSER>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromCharSequence: long parseFloatingPointLiteral(java.lang.CharSequence,int,int)>(v0, v1, v2);
v5 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(v4);
return v5;
}
public static float parseFloat(byte[]) throws java.lang.NumberFormatException
{
int v1;
byte[] v0;
float v2;
v0 := @parameter0: byte[];
v1 = lengthof v0;
v2 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaFloatParser: float parseFloat(byte[],int,int)>(v0, 0, v1);
return v2;
}
public static float parseFloat(byte[], int, int) throws java.lang.NumberFormatException
{
byte[] v0;
com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromByteArray v3;
int v1, v2;
float v5;
long v4;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = <com.fasterxml.jackson.core.io.doubleparser.JavaFloatParser: com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromByteArray BYTE_ARRAY_PARSER>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromByteArray: long parseFloatingPointLiteral(byte[],int,int)>(v0, v1, v2);
v5 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(v4);
return v5;
}
public static float parseFloat(char[]) throws java.lang.NumberFormatException
{
int v1;
char[] v0;
float v2;
v0 := @parameter0: char[];
v1 = lengthof v0;
v2 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaFloatParser: float parseFloat(char[],int,int)>(v0, 0, v1);
return v2;
}
public static float parseFloat(char[], int, int) throws java.lang.NumberFormatException
{
com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromCharArray v3;
int v1, v2;
char[] v0;
float v5;
long v4;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = <com.fasterxml.jackson.core.io.doubleparser.JavaFloatParser: com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromCharArray CHAR_ARRAY_PARSER>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromCharArray: long parseFloatingPointLiteral(char[],int,int)>(v0, v1, v2);
v5 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(v4);
return v5;
}
static void <clinit>()
{
com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromCharSequence v2;
com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromByteArray v0;
com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromCharArray v1;
v0 = new com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromByteArray;
specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromByteArray: void <init>()>();
<com.fasterxml.jackson.core.io.doubleparser.JavaFloatParser: com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromByteArray BYTE_ARRAY_PARSER> = v0;
v1 = new com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromCharArray;
specialinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromCharArray: void <init>()>();
<com.fasterxml.jackson.core.io.doubleparser.JavaFloatParser: com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromCharArray CHAR_ARRAY_PARSER> = v1;
v2 = new com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromCharSequence;
specialinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromCharSequence: void <init>()>();
<com.fasterxml.jackson.core.io.doubleparser.JavaFloatParser: com.fasterxml.jackson.core.io.doubleparser.JavaFloatBitsFromCharSequence CHAR_SEQUENCE_PARSER> = v2;
return;
}
}