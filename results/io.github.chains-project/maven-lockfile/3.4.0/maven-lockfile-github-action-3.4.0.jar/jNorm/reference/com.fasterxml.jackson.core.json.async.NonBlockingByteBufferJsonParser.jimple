public class com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser extends com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase implements com.fasterxml.jackson.core.async.ByteBufferFeeder
{
private java.nio.ByteBuffer _inputBuffer;
public void <init>(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)
{
byte[] v4;
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v3;
com.fasterxml.jackson.core.io.IOContext v1;
int v2;
com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser v0;
java.nio.ByteBuffer v5;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.io.IOContext;
v2 := @parameter1: int;
v3 := @parameter2: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void <init>(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>(v1, v2, v3);
v4 = <com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: byte[] NO_BYTES>;
v5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(v4);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: java.nio.ByteBuffer _inputBuffer> = v5;
return;
}
public com.fasterxml.jackson.core.async.NonBlockingInputFeeder getNonBlockingInputFeeder()
{
com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser;
return v0;
}
public void feedInput(java.nio.ByteBuffer) throws java.io.IOException
{
long v13, v15;
java.lang.Integer v10, v11, v7;
com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser v0;
java.nio.ByteBuffer v1;
int v14, v16, v17, v18, v19, v2, v20, v3, v4, v5, v6, v8, v9;
boolean v12;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser;
v1 := @parameter0: java.nio.ByteBuffer;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: int _inputPtr>;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: int _inputEnd>;
if v2 >= v3 goto label1;
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: int _inputEnd>;
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: int _inputPtr>;
v6 = v4 - v5;
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: void _reportError(java.lang.String,java.lang.Object)>("Still have %d undecoded bytes, should not call \'feedInput\'", v7);
label1:
v8 = virtualinvoke v1.<java.nio.ByteBuffer: int position()>();
v9 = virtualinvoke v1.<java.nio.ByteBuffer: int limit()>();
if v9 >= v8 goto label2;
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v9);
v11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: void _reportError(java.lang.String,java.lang.Object,java.lang.Object)>("Input end (%d) may not be before start (%d)", v10, v11);
label2:
v12 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: boolean _endOfInput>;
if v12 == 0 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: void _reportError(java.lang.String)>("Already closed, can not feed more input");
label3:
v13 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: long _currInputProcessed>;
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: int _origBufferLen>;
v15 = v13 + v14;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: long _currInputProcessed> = v15;
v16 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: int _inputEnd>;
v17 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: int _currInputRowStart>;
v18 = v16 - v17;
v19 = v8 - v18;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: int _currInputRowStart> = v19;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: int _currBufferStart> = v8;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: java.nio.ByteBuffer _inputBuffer> = v1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: int _inputPtr> = v8;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: int _inputEnd> = v9;
v20 = v9 - v8;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: int _origBufferLen> = v20;
return;
}
public int releaseBuffered(java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v1;
int v2, v3, v4;
java.nio.channels.WritableByteChannel v5;
com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser v0;
java.nio.ByteBuffer v6;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser;
v1 := @parameter0: java.io.OutputStream;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: int _inputEnd>;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: int _inputPtr>;
v4 = v2 - v3;
if v4 <= 0 goto label1;
v5 = staticinvoke <java.nio.channels.Channels: java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream)>(v1);
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: java.nio.ByteBuffer _inputBuffer>;
interfaceinvoke v5.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>(v6);
label1:
return v4;
}
protected byte getNextSignedByteFromBuffer()
{
byte v4;
int v2, v3;
com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser v0;
java.nio.ByteBuffer v1;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: java.nio.ByteBuffer _inputBuffer>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: int _inputPtr>;
v3 = v2 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: int _inputPtr> = v3;
v4 = virtualinvoke v1.<java.nio.ByteBuffer: byte get(int)>(v2);
return v4;
}
protected int getNextUnsignedByteFromBuffer()
{
short v5;
byte v4;
int v2, v3;
com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser v0;
java.nio.ByteBuffer v1;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: java.nio.ByteBuffer _inputBuffer>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: int _inputPtr>;
v3 = v2 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: int _inputPtr> = v3;
v4 = virtualinvoke v1.<java.nio.ByteBuffer: byte get(int)>(v2);
v5 = v4 & 255;
return v5;
}
protected byte getByteFromBuffer(int)
{
byte v3;
int v1;
com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser v0;
java.nio.ByteBuffer v2;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser: java.nio.ByteBuffer _inputBuffer>;
v3 = virtualinvoke v2.<java.nio.ByteBuffer: byte get(int)>(v1);
return v3;
}
}