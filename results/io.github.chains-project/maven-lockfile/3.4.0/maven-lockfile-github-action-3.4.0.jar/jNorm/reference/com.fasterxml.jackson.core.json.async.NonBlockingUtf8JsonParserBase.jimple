public abstract class com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase extends com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase
{
private static final int FEAT_MASK_TRAILING_COMMA;
private static final int FEAT_MASK_LEADING_ZEROS;
private static final int FEAT_MASK_ALLOW_MISSING;
private static final int FEAT_MASK_ALLOW_SINGLE_QUOTES;
private static final int FEAT_MASK_ALLOW_UNQUOTED_NAMES;
private static final int FEAT_MASK_ALLOW_JAVA_COMMENTS;
private static final int FEAT_MASK_ALLOW_YAML_COMMENTS;
private static final int[] _icUTF8;
protected static final int[] _icLatin1;
protected int _origBufferLen;
protected void <init>(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)
{
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v3;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
com.fasterxml.jackson.core.io.IOContext v1;
int v2;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: com.fasterxml.jackson.core.io.IOContext;
v2 := @parameter1: int;
v3 := @parameter2: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void <init>(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>(v1, v2, v3);
return;
}
public final boolean needMoreInput()
{
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v1, v2;
boolean v3, v4;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v1 < v2 goto label1;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean _endOfInput>;
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public void endOfInput()
{
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean _endOfInput> = 1;
return;
}
protected char _decodeEscaped() throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
staticinvoke <com.fasterxml.jackson.core.util.VersionUtil: void throwInternal()>();
return 32;
}
public com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException
{
long v13, v15;
int v1, v14, v16, v17, v2;
com.fasterxml.jackson.core.JsonToken v10, v11, v12, v18, v19, v20, v21, v22, v23, v24, v5, v6, v7, v8, v9;
boolean v3, v4;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v1 < v2 goto label04;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean _closed>;
if v3 == 0 goto label01;
return null;
label01:
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean _endOfInput>;
if v4 == 0 goto label03;
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
if v5 != v6 goto label02;
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishTokenWithEOF()>();
return v7;
label02:
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _eofAsNextToken()>();
return v8;
label03:
v9 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
return v9;
label04:
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v11 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
if v10 != v11 goto label05;
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishToken()>();
return v12;
label05:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _numTypesValid> = 0;
v13 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: long _currInputProcessed>;
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v15 = v13 + v14;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: long _tokenInputTotal> = v15;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte[] _binaryValue> = null;
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
v17 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _majorState>;
tableswitch(v17)
{
case 0: goto label06;
case 1: goto label07;
case 2: goto label08;
case 3: goto label09;
case 4: goto label10;
case 5: goto label11;
case 6: goto label12;
default: goto label13;
};
label06:
v18 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startDocument(int)>(v16);
return v18;
label07:
v19 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startValue(int)>(v16);
return v19;
label08:
v20 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFieldName(int)>(v16);
return v20;
label09:
v21 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFieldNameAfterComma(int)>(v16);
return v21;
label10:
v22 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startValueExpectColon(int)>(v16);
return v22;
label11:
v23 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startValue(int)>(v16);
return v23;
label12:
v24 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startValueExpectComma(int)>(v16);
return v24;
label13:
staticinvoke <com.fasterxml.jackson.core.util.VersionUtil: void throwInternal()>();
return null;
}
protected abstract byte getNextSignedByteFromBuffer();
protected abstract int getNextUnsignedByteFromBuffer();
protected abstract byte getByteFromBuffer(int);
protected final com.fasterxml.jackson.core.JsonToken _finishToken() throws java.io.IOException
{
byte v60, v67, v75;
com.fasterxml.jackson.core.util.TextBuffer v47, v49, v58, v85;
char[] v48;
boolean v68, v76;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v1, v10, v13, v14, v15, v17, v18, v19, v2, v21, v23, v25, v27, v29, v32, v35, v38, v39, v4, v41, v43, v50, v53, v55, v59, v6, v61, v62, v65, v66, v70, v73, v74, v78, v8, v81, v82, v83, v86, v9, v91, v93, v95, v97, v99;
com.fasterxml.jackson.core.JsonToken v100, v11, v12, v16, v20, v22, v24, v26, v28, v3, v30, v31, v33, v34, v36, v37, v40, v42, v44, v45, v46, v5, v51, v52, v54, v56, v57, v63, v64, v69, v7, v71, v72, v77, v79, v80, v84, v87, v88, v89, v90, v92, v94, v96, v98;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState>;
tableswitch(v1)
{
case 1: goto label01;
case 2: goto label43;
case 3: goto label43;
case 4: goto label02;
case 5: goto label03;
case 6: goto label43;
case 7: goto label04;
case 8: goto label05;
case 9: goto label06;
case 10: goto label07;
case 11: goto label43;
case 12: goto label08;
case 13: goto label10;
case 14: goto label11;
case 15: goto label09;
case 16: goto label12;
case 17: goto label13;
case 18: goto label14;
case 19: goto label15;
case 20: goto label43;
case 21: goto label43;
case 22: goto label16;
case 23: goto label17;
case 24: goto label18;
case 25: goto label19;
case 26: goto label20;
case 27: goto label43;
case 28: goto label43;
case 29: goto label43;
case 30: goto label21;
case 31: goto label22;
case 32: goto label23;
case 33: goto label43;
case 34: goto label43;
case 35: goto label43;
case 36: goto label43;
case 37: goto label43;
case 38: goto label43;
case 39: goto label43;
case 40: goto label24;
case 41: goto label33;
case 42: goto label25;
case 43: goto label27;
case 44: goto label30;
case 45: goto label36;
case 46: goto label43;
case 47: goto label43;
case 48: goto label43;
case 49: goto label43;
case 50: goto label37;
case 51: goto label38;
case 52: goto label39;
case 53: goto label40;
case 54: goto label41;
case 55: goto label42;
default: goto label43;
};
label01:
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v3 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishBOM(int)>(v2);
return v3;
label02:
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFieldName(int)>(v4);
return v5;
label03:
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
v7 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFieldNameAfterComma(int)>(v6);
return v7;
label04:
v8 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quadLength>;
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pendingBytes>;
v11 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _parseEscapedName(int,int,int)>(v8, v9, v10);
return v11;
label05:
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishFieldWithEscape()>();
return v12;
label06:
v13 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quadLength>;
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v15 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pendingBytes>;
v16 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishAposName(int,int,int)>(v13, v14, v15);
return v16;
label07:
v17 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quadLength>;
v18 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v19 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pendingBytes>;
v20 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishUnquotedName(int,int,int)>(v17, v18, v19);
return v20;
label08:
v21 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
v22 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startValue(int)>(v21);
return v22;
label09:
v23 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
v24 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startValueAfterComma(int)>(v23);
return v24;
label10:
v25 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
v26 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startValueExpectComma(int)>(v25);
return v26;
label11:
v27 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
v28 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startValueExpectColon(int)>(v27);
return v28;
label12:
v29 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v30 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
v31 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishKeywordToken(java.lang.String,int,com.fasterxml.jackson.core.JsonToken)>("null", v29, v30);
return v31;
label13:
v32 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v33 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
v34 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishKeywordToken(java.lang.String,int,com.fasterxml.jackson.core.JsonToken)>("true", v32, v33);
return v34;
label14:
v35 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v36 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
v37 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishKeywordToken(java.lang.String,int,com.fasterxml.jackson.core.JsonToken)>("false", v35, v36);
return v37;
label15:
v38 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _nonStdTokenType>;
v39 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v40 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNonStdToken(int,int)>(v38, v39);
return v40;
label16:
v41 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
v42 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberPlus(int)>(v41);
return v42;
label17:
v43 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
v44 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberMinus(int)>(v43);
return v44;
label18:
v45 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberLeadingZeroes()>();
return v45;
label19:
v46 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberLeadingNegZeroes()>();
return v46;
label20:
v47 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v48 = virtualinvoke v47.<com.fasterxml.jackson.core.util.TextBuffer: char[] getBufferWithoutReset()>();
v49 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v50 = virtualinvoke v49.<com.fasterxml.jackson.core.util.TextBuffer: int getCurrentSegmentSize()>();
v51 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberIntegralPart(char[],int)>(v48, v50);
return v51;
label21:
v52 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishFloatFraction()>();
return v52;
label22:
v53 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
v54 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishFloatExponent(boolean,int)>(1, v53);
return v54;
label23:
v55 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
v56 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishFloatExponent(boolean,int)>(0, v55);
return v56;
label24:
v57 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishRegularString()>();
return v57;
label25:
v58 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v59 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v60 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v61 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _decodeUTF8_2(int,int)>(v59, v60);
virtualinvoke v58.<com.fasterxml.jackson.core.util.TextBuffer: void append(char)>(v61);
v62 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorStateAfterSplit>;
if v62 != 45 goto label26;
v63 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishAposString()>();
return v63;
label26:
v64 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishRegularString()>();
return v64;
label27:
v65 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v66 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pendingBytes>;
v67 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v68 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean _decodeSplitUTF8_3(int,int,int)>(v65, v66, v67);
if v68 != 0 goto label28;
v69 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
return v69;
label28:
v70 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorStateAfterSplit>;
if v70 != 45 goto label29;
v71 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishAposString()>();
return v71;
label29:
v72 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishRegularString()>();
return v72;
label30:
v73 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v74 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pendingBytes>;
v75 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v76 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean _decodeSplitUTF8_4(int,int,int)>(v73, v74, v75);
if v76 != 0 goto label31;
v77 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
return v77;
label31:
v78 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorStateAfterSplit>;
if v78 != 45 goto label32;
v79 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishAposString()>();
return v79;
label32:
v80 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishRegularString()>();
return v80;
label33:
v81 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quoted32>;
v82 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quotedDigits>;
v83 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _decodeSplitEscaped(int,int)>(v81, v82);
if v83 >= 0 goto label34;
v84 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
return v84;
label34:
v85 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v85.<com.fasterxml.jackson.core.util.TextBuffer: void append(char)>(v83);
v86 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorStateAfterSplit>;
if v86 != 45 goto label35;
v87 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishAposString()>();
return v87;
label35:
v88 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishRegularString()>();
return v88;
label36:
v89 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishAposString()>();
return v89;
label37:
v90 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishErrorToken()>();
return v90;
label38:
v91 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v92 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startSlashComment(int)>(v91);
return v92;
label39:
v93 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v94 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishCComment(int,boolean)>(v93, 1);
return v94;
label40:
v95 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v96 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishCComment(int,boolean)>(v95, 0);
return v96;
label41:
v97 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v98 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishCppComment(int)>(v97);
return v98;
label42:
v99 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v100 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishHashComment(int)>(v99);
return v100;
label43:
staticinvoke <com.fasterxml.jackson.core.util.VersionUtil: void throwInternal()>();
return null;
}
protected final com.fasterxml.jackson.core.JsonToken _finishTokenWithEOF() throws java.io.IOException
{
boolean v21;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v11, v14, v15, v2, v20, v29, v5, v8;
com.fasterxml.jackson.core.JsonToken v1, v10, v12, v13, v16, v17, v18, v22, v23, v24, v25, v26, v27, v28, v3, v31, v4, v6, v7, v9;
java.lang.String v30;
com.fasterxml.jackson.core.util.TextBuffer v19;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState>;
tableswitch(v2)
{
case 3: goto label01;
case 4: goto label16;
case 5: goto label16;
case 6: goto label16;
case 7: goto label16;
case 8: goto label16;
case 9: goto label16;
case 10: goto label16;
case 11: goto label16;
case 12: goto label02;
case 13: goto label16;
case 14: goto label16;
case 15: goto label16;
case 16: goto label03;
case 17: goto label04;
case 18: goto label05;
case 19: goto label06;
case 20: goto label16;
case 21: goto label16;
case 22: goto label16;
case 23: goto label16;
case 24: goto label08;
case 25: goto label08;
case 26: goto label09;
case 27: goto label16;
case 28: goto label16;
case 29: goto label16;
case 30: goto label11;
case 31: goto label13;
case 32: goto label12;
case 33: goto label16;
case 34: goto label16;
case 35: goto label16;
case 36: goto label16;
case 37: goto label16;
case 38: goto label16;
case 39: goto label16;
case 40: goto label16;
case 41: goto label16;
case 42: goto label16;
case 43: goto label16;
case 44: goto label16;
case 45: goto label16;
case 46: goto label16;
case 47: goto label16;
case 48: goto label16;
case 49: goto label16;
case 50: goto label07;
case 51: goto label16;
case 52: goto label14;
case 53: goto label14;
case 54: goto label15;
case 55: goto label15;
default: goto label16;
};
label01:
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _eofAsNextToken()>();
return v3;
label02:
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _eofAsNextToken()>();
return v4;
label03:
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishKeywordTokenWithEOF(java.lang.String,int,com.fasterxml.jackson.core.JsonToken)>("null", v5, v6);
return v7;
label04:
v8 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v9 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishKeywordTokenWithEOF(java.lang.String,int,com.fasterxml.jackson.core.JsonToken)>("true", v8, v9);
return v10;
label05:
v11 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v12 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishKeywordTokenWithEOF(java.lang.String,int,com.fasterxml.jackson.core.JsonToken)>("false", v11, v12);
return v13;
label06:
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _nonStdTokenType>;
v15 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNonStdTokenWithEOF(int,int)>(v14, v15);
return v16;
label07:
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishErrorTokenWithEOF()>();
return v17;
label08:
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueCompleteInt(int,java.lang.String)>(0, "0");
return v18;
label09:
v19 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v20 = virtualinvoke v19.<com.fasterxml.jackson.core.util.TextBuffer: int getCurrentSegmentSize()>();
v21 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean _numberNegative>;
if v21 == 0 goto label10;
v20 = v20 - 1;
label10:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = v20;
v22 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
v23 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken)>(v22);
return v23;
label11:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _expLength> = 0;
label12:
v24 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
v25 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken)>(v24);
return v25;
label13:
v26 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(": was expecting fraction after exponent marker", v26);
label14:
v27 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(": was expecting closing \'*/\' for comment", v27);
label15:
v28 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _eofAsNextToken()>();
return v28;
label16:
v29 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState>;
v30 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v29) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(": was expecting rest of token (internal state: \u0001)");
v31 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(v30, v31);
return v1;
}
private final com.fasterxml.jackson.core.JsonToken _startDocument(int) throws java.io.IOException
{
int v1, v10, v11, v12, v2, v3, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v15, v16, v17, v4;
boolean v13, v14;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 = v1 & 255;
if v2 != 239 goto label1;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState>;
if v3 == 1 goto label1;
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishBOM(int)>(1);
return v4;
label1:
if v2 > 32 goto label8;
if v2 == 32 goto label4;
if v2 != 10 goto label2;
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRow>;
v6 = v5 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRow> = v6;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowStart> = v7;
goto label4;
label2:
if v2 != 13 goto label3;
v8 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowAlt>;
v9 = v8 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowAlt> = v9;
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowStart> = v10;
goto label4;
label3:
if v2 == 9 goto label4;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _throwInvalidSpace(int)>(v2);
label4:
v11 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v12 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v11 < v12 goto label7;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 3;
v13 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean _closed>;
if v13 == 0 goto label5;
return null;
label5:
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean _endOfInput>;
if v14 == 0 goto label6;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _eofAsNextToken()>();
return v15;
label6:
v16 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
return v16;
label7:
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
goto label1;
label8:
v17 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startValue(int)>(v2);
return v17;
}
private final com.fasterxml.jackson.core.JsonToken _finishBOM(int) throws java.io.IOException
{
long v5, v6;
java.lang.Integer v8, v9;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v1, v2, v3, v4;
com.fasterxml.jackson.core.JsonToken v10, v7;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
label1:
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v2 >= v3 goto label6;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
tableswitch(v1)
{
case 1: goto label4;
case 2: goto label3;
case 3: goto label2;
default: goto label5;
};
label2:
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: long _currInputProcessed>;
v6 = v5 - 3L;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: long _currInputProcessed> = v6;
v7 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startDocument(int)>(v4);
return v7;
label3:
if v4 == 191 goto label5;
v8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportError(java.lang.String,java.lang.Object)>("Unexpected byte 0x%02x following 0xEF 0xBB; should get 0xBF as third byte of UTF-8 BOM", v8);
goto label5;
label4:
if v4 == 187 goto label5;
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportError(java.lang.String,java.lang.Object)>("Unexpected byte 0x%02x following 0xEF; should get 0xBB as second byte UTF-8 BOM", v9);
label5:
v1 = v1 + 1;
goto label1;
label6:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32> = v1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 1;
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v10;
return v10;
}
private final com.fasterxml.jackson.core.JsonToken _startFieldName(int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v1, v5, v6, v7;
com.fasterxml.jackson.core.JsonToken v10, v2, v3, v4, v9;
java.lang.String v8;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
if v1 > 32 goto label1;
v1 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _skipWS(int)>(v1);
if v1 > 0 goto label1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 4;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
return v2;
label1:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _updateTokenLocation()>();
if v1 == 34 goto label3;
if v1 != 125 goto label2;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _closeObjectScope()>();
return v3;
label2:
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _handleOddName(int)>(v1);
return v4;
label3:
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v6 = v5 + 13;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v6 > v7 goto label4;
v8 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _fastParseName()>();
if v8 == null goto label4;
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _fieldComplete(java.lang.String)>(v8);
return v9;
label4:
v10 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _parseEscapedName(int,int,int)>(0, 0, 0);
return v10;
}
private final com.fasterxml.jackson.core.JsonToken _startFieldNameAfterComma(int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadContext v6;
byte v12;
int v1, v10, v13, v14, v16, v17, v18, v21, v22, v23, v9;
com.fasterxml.jackson.core.JsonToken v11, v15, v19, v2, v20, v25, v26, v3, v4, v5;
java.lang.String v24, v7, v8;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
if v1 > 32 goto label01;
v1 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _skipWS(int)>(v1);
if v1 > 0 goto label01;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 5;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
return v2;
label01:
if v1 == 44 goto label05;
if v1 != 125 goto label02;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _closeObjectScope()>();
return v3;
label02:
if v1 != 35 goto label03;
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishHashComment(int)>(5);
return v4;
label03:
if v1 != 47 goto label04;
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startSlashComment(int)>(5);
return v5;
label04:
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v7 = virtualinvoke v6.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String typeDesc()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("was expecting comma to separate \u0001 entries");
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportUnexpectedChar(int,java.lang.String)>(v1, v8);
label05:
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v9 < v10 goto label06;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 4;
v11 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v11;
return v11;
label06:
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v9);
v13 = v12;
v14 = v9 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v14;
if v12 > 32 goto label07;
v13 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _skipWS(int)>(v12);
if v13 > 0 goto label07;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 4;
v15 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
return v15;
label07:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _updateTokenLocation()>();
if v13 == 34 goto label09;
if v13 != 125 goto label08;
v16 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _features>;
v17 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_TRAILING_COMMA>;
v18 = v16 & v17;
if v18 == 0 goto label08;
v19 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _closeObjectScope()>();
return v19;
label08:
v20 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _handleOddName(int)>(v13);
return v20;
label09:
v21 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v22 = v21 + 13;
v23 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v22 > v23 goto label10;
v24 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _fastParseName()>();
if v24 == null goto label10;
v25 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _fieldComplete(java.lang.String)>(v24);
return v25;
label10:
v26 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _parseEscapedName(int,int,int)>(0, 0, 0);
return v26;
}
private final com.fasterxml.jackson.core.JsonToken _startValue(int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadContext v3;
com.fasterxml.jackson.core.JsonParser$Feature v10;
com.fasterxml.jackson.core.json.JsonReadFeature v9;
int v1;
com.fasterxml.jackson.core.JsonToken v12, v13, v14, v15, v16, v17, v18, v19, v2, v20, v21, v22, v4, v5, v6, v7, v8;
boolean v11;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
if v1 > 32 goto label01;
v1 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _skipWS(int)>(v1);
if v1 > 0 goto label01;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 12;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
return v2;
label01:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _updateTokenLocation()>();
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
virtualinvoke v3.<com.fasterxml.jackson.core.json.JsonReadContext: boolean expectComma()>();
if v1 != 34 goto label02;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startString()>();
return v4;
label02:
tableswitch(v1)
{
case 35: goto label03;
case 36: goto label17;
case 37: goto label17;
case 38: goto label17;
case 39: goto label17;
case 40: goto label17;
case 41: goto label17;
case 42: goto label17;
case 43: goto label04;
case 44: goto label17;
case 45: goto label05;
case 46: goto label07;
case 47: goto label06;
case 48: goto label08;
case 49: goto label09;
case 50: goto label09;
case 51: goto label09;
case 52: goto label09;
case 53: goto label09;
case 54: goto label09;
case 55: goto label09;
case 56: goto label09;
case 57: goto label09;
case 58: goto label17;
case 59: goto label17;
case 60: goto label17;
case 61: goto label17;
case 62: goto label17;
case 63: goto label17;
case 64: goto label17;
case 65: goto label17;
case 66: goto label17;
case 67: goto label17;
case 68: goto label17;
case 69: goto label17;
case 70: goto label17;
case 71: goto label17;
case 72: goto label17;
case 73: goto label17;
case 74: goto label17;
case 75: goto label17;
case 76: goto label17;
case 77: goto label17;
case 78: goto label17;
case 79: goto label17;
case 80: goto label17;
case 81: goto label17;
case 82: goto label17;
case 83: goto label17;
case 84: goto label17;
case 85: goto label17;
case 86: goto label17;
case 87: goto label17;
case 88: goto label17;
case 89: goto label17;
case 90: goto label17;
case 91: goto label13;
case 92: goto label17;
case 93: goto label14;
case 94: goto label17;
case 95: goto label17;
case 96: goto label17;
case 97: goto label17;
case 98: goto label17;
case 99: goto label17;
case 100: goto label17;
case 101: goto label17;
case 102: goto label10;
case 103: goto label17;
case 104: goto label17;
case 105: goto label17;
case 106: goto label17;
case 107: goto label17;
case 108: goto label17;
case 109: goto label17;
case 110: goto label11;
case 111: goto label17;
case 112: goto label17;
case 113: goto label17;
case 114: goto label17;
case 115: goto label17;
case 116: goto label12;
case 117: goto label17;
case 118: goto label17;
case 119: goto label17;
case 120: goto label17;
case 121: goto label17;
case 122: goto label17;
case 123: goto label15;
case 124: goto label17;
case 125: goto label16;
default: goto label17;
};
label03:
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishHashComment(int)>(12);
return v5;
label04:
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startPositiveNumber()>();
return v6;
label05:
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startNegativeNumber()>();
return v7;
label06:
v8 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startSlashComment(int)>(12);
return v8;
label07:
v9 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS>;
v10 = virtualinvoke v9.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v10);
if v11 == 0 goto label17;
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFloatThatStartsWithPeriod()>();
return v12;
label08:
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startNumberLeadingZero()>();
return v13;
label09:
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startPositiveNumber(int)>(v1);
return v14;
label10:
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFalseToken()>();
return v15;
label11:
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startNullToken()>();
return v16;
label12:
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startTrueToken()>();
return v17;
label13:
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startArrayScope()>();
return v18;
label14:
v19 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _closeArrayScope()>();
return v19;
label15:
v20 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startObjectScope()>();
return v20;
label16:
v21 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _closeObjectScope()>();
return v21;
label17:
v22 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startUnexpectedValue(boolean,int)>(0, v1);
return v22;
}
private final com.fasterxml.jackson.core.JsonToken _startValueExpectComma(int) throws java.io.IOException
{
byte v14;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
com.fasterxml.jackson.core.json.JsonReadContext v10, v7;
int v1, v11, v12, v15, v16, v29, v30, v31, v34, v35, v36;
com.fasterxml.jackson.core.JsonToken v13, v17, v18, v19, v2, v20, v21, v22, v23, v24, v25, v26, v27, v28, v3, v32, v33, v37, v38, v4, v5, v6;
java.lang.String v8, v9;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
if v1 > 32 goto label01;
v1 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _skipWS(int)>(v1);
if v1 > 0 goto label01;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 13;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
return v2;
label01:
if v1 == 44 goto label06;
if v1 != 93 goto label02;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _closeArrayScope()>();
return v3;
label02:
if v1 != 125 goto label03;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _closeObjectScope()>();
return v4;
label03:
if v1 != 47 goto label04;
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startSlashComment(int)>(13);
return v5;
label04:
if v1 != 35 goto label05;
v6 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishHashComment(int)>(13);
return v6;
label05:
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v8 = virtualinvoke v7.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String typeDesc()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("was expecting comma to separate \u0001 entries");
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportUnexpectedChar(int,java.lang.String)>(v1, v9);
label06:
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
virtualinvoke v10.<com.fasterxml.jackson.core.json.JsonReadContext: boolean expectComma()>();
v11 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v12 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v11 < v12 goto label07;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 15;
v13 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v13;
return v13;
label07:
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v11);
v15 = v14;
v16 = v11 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v16;
if v14 > 32 goto label08;
v15 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _skipWS(int)>(v14);
if v15 > 0 goto label08;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 15;
v17 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
return v17;
label08:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _updateTokenLocation()>();
if v15 != 34 goto label09;
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startString()>();
return v18;
label09:
tableswitch(v15)
{
case 35: goto label10;
case 36: goto label23;
case 37: goto label23;
case 38: goto label23;
case 39: goto label23;
case 40: goto label23;
case 41: goto label23;
case 42: goto label23;
case 43: goto label11;
case 44: goto label23;
case 45: goto label12;
case 46: goto label23;
case 47: goto label13;
case 48: goto label14;
case 49: goto label15;
case 50: goto label15;
case 51: goto label15;
case 52: goto label15;
case 53: goto label15;
case 54: goto label15;
case 55: goto label15;
case 56: goto label15;
case 57: goto label15;
case 58: goto label23;
case 59: goto label23;
case 60: goto label23;
case 61: goto label23;
case 62: goto label23;
case 63: goto label23;
case 64: goto label23;
case 65: goto label23;
case 66: goto label23;
case 67: goto label23;
case 68: goto label23;
case 69: goto label23;
case 70: goto label23;
case 71: goto label23;
case 72: goto label23;
case 73: goto label23;
case 74: goto label23;
case 75: goto label23;
case 76: goto label23;
case 77: goto label23;
case 78: goto label23;
case 79: goto label23;
case 80: goto label23;
case 81: goto label23;
case 82: goto label23;
case 83: goto label23;
case 84: goto label23;
case 85: goto label23;
case 86: goto label23;
case 87: goto label23;
case 88: goto label23;
case 89: goto label23;
case 90: goto label23;
case 91: goto label19;
case 92: goto label23;
case 93: goto label20;
case 94: goto label23;
case 95: goto label23;
case 96: goto label23;
case 97: goto label23;
case 98: goto label23;
case 99: goto label23;
case 100: goto label23;
case 101: goto label23;
case 102: goto label16;
case 103: goto label23;
case 104: goto label23;
case 105: goto label23;
case 106: goto label23;
case 107: goto label23;
case 108: goto label23;
case 109: goto label23;
case 110: goto label17;
case 111: goto label23;
case 112: goto label23;
case 113: goto label23;
case 114: goto label23;
case 115: goto label23;
case 116: goto label18;
case 117: goto label23;
case 118: goto label23;
case 119: goto label23;
case 120: goto label23;
case 121: goto label23;
case 122: goto label23;
case 123: goto label21;
case 124: goto label23;
case 125: goto label22;
default: goto label23;
};
label10:
v19 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishHashComment(int)>(15);
return v19;
label11:
v20 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startPositiveNumber()>();
return v20;
label12:
v21 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startNegativeNumber()>();
return v21;
label13:
v22 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startSlashComment(int)>(15);
return v22;
label14:
v23 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startNumberLeadingZero()>();
return v23;
label15:
v24 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startPositiveNumber(int)>(v15);
return v24;
label16:
v25 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFalseToken()>();
return v25;
label17:
v26 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startNullToken()>();
return v26;
label18:
v27 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startTrueToken()>();
return v27;
label19:
v28 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startArrayScope()>();
return v28;
label20:
v29 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _features>;
v30 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_TRAILING_COMMA>;
v31 = v29 & v30;
if v31 == 0 goto label23;
v32 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _closeArrayScope()>();
return v32;
label21:
v33 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startObjectScope()>();
return v33;
label22:
v34 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _features>;
v35 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_TRAILING_COMMA>;
v36 = v34 & v35;
if v36 == 0 goto label23;
v37 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _closeObjectScope()>();
return v37;
label23:
v38 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startUnexpectedValue(boolean,int)>(1, v15);
return v38;
}
private final com.fasterxml.jackson.core.JsonToken _startValueExpectColon(int) throws java.io.IOException
{
byte v8;
int v1, v10, v5, v6, v9;
com.fasterxml.jackson.core.JsonToken v11, v12, v13, v14, v15, v16, v17, v18, v19, v2, v20, v21, v22, v23, v24, v3, v4, v7;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
if v1 > 32 goto label01;
v1 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _skipWS(int)>(v1);
if v1 > 0 goto label01;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 14;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
return v2;
label01:
if v1 == 58 goto label04;
if v1 != 47 goto label02;
v3 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startSlashComment(int)>(14);
return v3;
label02:
if v1 != 35 goto label03;
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishHashComment(int)>(14);
return v4;
label03:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportUnexpectedChar(int,java.lang.String)>(v1, "was expecting a colon to separate field name and value");
label04:
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v5 < v6 goto label05;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 12;
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v7;
return v7;
label05:
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v5);
v9 = v8;
v10 = v5 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v10;
if v8 > 32 goto label06;
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _skipWS(int)>(v8);
if v9 > 0 goto label06;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 12;
v11 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
return v11;
label06:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _updateTokenLocation()>();
if v9 != 34 goto label07;
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startString()>();
return v12;
label07:
lookupswitch(v9)
{
case 35: goto label08;
case 43: goto label09;
case 45: goto label10;
case 47: goto label11;
case 48: goto label12;
case 49: goto label13;
case 50: goto label13;
case 51: goto label13;
case 52: goto label13;
case 53: goto label13;
case 54: goto label13;
case 55: goto label13;
case 56: goto label13;
case 57: goto label13;
case 91: goto label17;
case 102: goto label14;
case 110: goto label15;
case 116: goto label16;
case 123: goto label18;
default: goto label19;
};
label08:
v13 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishHashComment(int)>(12);
return v13;
label09:
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startPositiveNumber()>();
return v14;
label10:
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startNegativeNumber()>();
return v15;
label11:
v16 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startSlashComment(int)>(12);
return v16;
label12:
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startNumberLeadingZero()>();
return v17;
label13:
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startPositiveNumber(int)>(v9);
return v18;
label14:
v19 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFalseToken()>();
return v19;
label15:
v20 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startNullToken()>();
return v20;
label16:
v21 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startTrueToken()>();
return v21;
label17:
v22 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startArrayScope()>();
return v22;
label18:
v23 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startObjectScope()>();
return v23;
label19:
v24 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startUnexpectedValue(boolean,int)>(0, v9);
return v24;
}
private final com.fasterxml.jackson.core.JsonToken _startValueAfterComma(int) throws java.io.IOException
{
int v1, v14, v15, v16, v19, v20, v21;
com.fasterxml.jackson.core.JsonToken v10, v11, v12, v13, v17, v18, v2, v22, v23, v3, v4, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
if v1 > 32 goto label01;
v1 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _skipWS(int)>(v1);
if v1 > 0 goto label01;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 15;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;
return v2;
label01:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _updateTokenLocation()>();
if v1 != 34 goto label02;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startString()>();
return v3;
label02:
tableswitch(v1)
{
case 35: goto label03;
case 36: goto label16;
case 37: goto label16;
case 38: goto label16;
case 39: goto label16;
case 40: goto label16;
case 41: goto label16;
case 42: goto label16;
case 43: goto label04;
case 44: goto label16;
case 45: goto label05;
case 46: goto label16;
case 47: goto label06;
case 48: goto label07;
case 49: goto label08;
case 50: goto label08;
case 51: goto label08;
case 52: goto label08;
case 53: goto label08;
case 54: goto label08;
case 55: goto label08;
case 56: goto label08;
case 57: goto label08;
case 58: goto label16;
case 59: goto label16;
case 60: goto label16;
case 61: goto label16;
case 62: goto label16;
case 63: goto label16;
case 64: goto label16;
case 65: goto label16;
case 66: goto label16;
case 67: goto label16;
case 68: goto label16;
case 69: goto label16;
case 70: goto label16;
case 71: goto label16;
case 72: goto label16;
case 73: goto label16;
case 74: goto label16;
case 75: goto label16;
case 76: goto label16;
case 77: goto label16;
case 78: goto label16;
case 79: goto label16;
case 80: goto label16;
case 81: goto label16;
case 82: goto label16;
case 83: goto label16;
case 84: goto label16;
case 85: goto label16;
case 86: goto label16;
case 87: goto label16;
case 88: goto label16;
case 89: goto label16;
case 90: goto label16;
case 91: goto label12;
case 92: goto label16;
case 93: goto label13;
case 94: goto label16;
case 95: goto label16;
case 96: goto label16;
case 97: goto label16;
case 98: goto label16;
case 99: goto label16;
case 100: goto label16;
case 101: goto label16;
case 102: goto label09;
case 103: goto label16;
case 104: goto label16;
case 105: goto label16;
case 106: goto label16;
case 107: goto label16;
case 108: goto label16;
case 109: goto label16;
case 110: goto label10;
case 111: goto label16;
case 112: goto label16;
case 113: goto label16;
case 114: goto label16;
case 115: goto label16;
case 116: goto label11;
case 117: goto label16;
case 118: goto label16;
case 119: goto label16;
case 120: goto label16;
case 121: goto label16;
case 122: goto label16;
case 123: goto label14;
case 124: goto label16;
case 125: goto label15;
default: goto label16;
};
label03:
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishHashComment(int)>(15);
return v4;
label04:
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startPositiveNumber()>();
return v5;
label05:
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startNegativeNumber()>();
return v6;
label06:
v7 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startSlashComment(int)>(15);
return v7;
label07:
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startNumberLeadingZero()>();
return v8;
label08:
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startPositiveNumber(int)>(v1);
return v9;
label09:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFalseToken()>();
return v10;
label10:
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startNullToken()>();
return v11;
label11:
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startTrueToken()>();
return v12;
label12:
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startArrayScope()>();
return v13;
label13:
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _features>;
v15 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_TRAILING_COMMA>;
v16 = v14 & v15;
if v16 == 0 goto label16;
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _closeArrayScope()>();
return v17;
label14:
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startObjectScope()>();
return v18;
label15:
v19 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _features>;
v20 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_TRAILING_COMMA>;
v21 = v19 & v20;
if v21 == 0 goto label16;
v22 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _closeObjectScope()>();
return v22;
label16:
v23 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startUnexpectedValue(boolean,int)>(1, v1);
return v23;
}
protected com.fasterxml.jackson.core.JsonToken _startUnexpectedValue(boolean, int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadContext v3, v5;
int v10, v11, v14, v15, v16, v2, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v12, v13, v17, v18, v19, v20;
java.lang.String v21, v22;
boolean v1, v4, v6;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: boolean;
v2 := @parameter1: int;
lookupswitch(v2)
{
case 39: goto label3;
case 43: goto label4;
case 44: goto label2;
case 73: goto label6;
case 78: goto label5;
case 93: goto label1;
case 125: goto label7;
default: goto label7;
};
label1:
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inArray()>();
if v4 == 0 goto label7;
label2:
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();
if v6 != 0 goto label7;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _features>;
v8 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_ALLOW_MISSING>;
v9 = v7 & v8;
if v9 == 0 goto label7;
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v11 = v10 - 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v11;
v12 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken)>(v12);
return v13;
label3:
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _features>;
v15 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_ALLOW_SINGLE_QUOTES>;
v16 = v14 & v15;
if v16 == 0 goto label7;
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startAposString()>();
return v17;
label4:
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNonStdToken(int,int)>(2, 1);
return v18;
label5:
v19 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNonStdToken(int,int)>(0, 1);
return v19;
label6:
v20 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNonStdToken(int,int)>(1, 1);
return v20;
label7:
v21 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _validJsonValueList()>();
v22 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v21) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected a valid value \u0001");
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportUnexpectedChar(int,java.lang.String)>(v2, v22);
return null;
}
private final int _skipWS(int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v1, v2, v3, v4, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v10;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
label1:
if v1 == 32 goto label4;
if v1 != 10 goto label2;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRow>;
v3 = v2 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRow> = v3;
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowStart> = v4;
goto label4;
label2:
if v1 != 13 goto label3;
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowAlt>;
v6 = v5 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowAlt> = v6;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowStart> = v7;
goto label4;
label3:
if v1 == 9 goto label4;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _throwInvalidSpace(int)>(v1);
label4:
v8 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v8 < v9 goto label5;
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v10;
return 0;
label5:
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
if v1 <= 32 goto label1;
return v1;
}
private final com.fasterxml.jackson.core.JsonToken _startSlashComment(int) throws java.io.IOException
{
short v11;
byte v8;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v1, v2, v3, v4, v5, v6;
com.fasterxml.jackson.core.JsonToken v10, v7, v9;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _features>;
v3 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_ALLOW_JAVA_COMMENTS>;
v4 = v2 & v3;
if v4 != 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportUnexpectedChar(int,java.lang.String)>(47, "maybe a (non-standard) comment? (not recognized as one since Feature \'ALLOW_COMMENTS\' not enabled for parser)");
label1:
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v5 < v6 goto label2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32> = v1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 51;
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v7;
return v7;
label2:
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
if v8 != 42 goto label3;
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishCComment(int,boolean)>(v1, 0);
return v9;
label3:
if v8 != 47 goto label4;
v10 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishCppComment(int)>(v1);
return v10;
label4:
v11 = v8 & 255;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportUnexpectedChar(int,java.lang.String)>(v11, "was expecting either \'*\' or \'/\' for a comment");
return null;
}
private final com.fasterxml.jackson.core.JsonToken _finishHashComment(int) throws java.io.IOException
{
int v1, v10, v11, v12, v13, v14, v2, v3, v4, v5, v6, v8, v9;
com.fasterxml.jackson.core.JsonToken v15, v7;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _features>;
v3 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_ALLOW_YAML_COMMENTS>;
v4 = v2 & v3;
if v4 != 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportUnexpectedChar(int,java.lang.String)>(35, "maybe a (non-standard) comment? (not recognized as one since Feature \'ALLOW_YAML_COMMENTS\' not enabled for parser)");
label1:
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v5 < v6 goto label2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 55;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32> = v1;
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v7;
return v7;
label2:
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
if v8 >= 32 goto label1;
if v8 != 10 goto label3;
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRow>;
v10 = v9 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRow> = v10;
v11 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowStart> = v11;
goto label5;
label3:
if v8 != 13 goto label4;
v12 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowAlt>;
v13 = v12 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowAlt> = v13;
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowStart> = v14;
goto label5;
label4:
if v8 == 9 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _throwInvalidSpace(int)>(v8);
goto label1;
label5:
v15 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startAfterComment(int)>(v1);
return v15;
}
private final com.fasterxml.jackson.core.JsonToken _finishCppComment(int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v1, v10, v11, v2, v3, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v12, v4;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
label1:
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v2 < v3 goto label2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 54;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32> = v1;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v4;
return v4;
label2:
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
if v5 >= 32 goto label1;
if v5 != 10 goto label3;
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRow>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRow> = v7;
v8 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowStart> = v8;
goto label5;
label3:
if v5 != 13 goto label4;
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowAlt>;
v10 = v9 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowAlt> = v10;
v11 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowStart> = v11;
goto label5;
label4:
if v5 == 9 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _throwInvalidSpace(int)>(v5);
goto label1;
label5:
v12 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startAfterComment(int)>(v1);
return v12;
}
private final com.fasterxml.jackson.core.JsonToken _finishCComment(int, boolean) throws java.io.IOException
{
byte v5;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v1, v10, v11, v12, v13, v3, v4, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v14, v6;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
label01:
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v3 < v4 goto label04;
if v2 == 0 goto label02;
v5 = 52;
goto label03;
label02:
v5 = 53;
label03:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = v5;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32> = v1;
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v6;
return v6;
label04:
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
if v7 >= 32 goto label07;
if v7 != 10 goto label05;
v8 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRow>;
v9 = v8 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRow> = v9;
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowStart> = v10;
goto label09;
label05:
if v7 != 13 goto label06;
v11 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowAlt>;
v12 = v11 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowAlt> = v12;
v13 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _currInputRowStart> = v13;
goto label09;
label06:
if v7 == 9 goto label09;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _throwInvalidSpace(int)>(v7);
goto label09;
label07:
if v7 != 42 goto label08;
v2 = 1;
goto label01;
label08:
if v7 != 47 goto label09;
if v2 != 0 goto label10;
label09:
v2 = 0;
goto label01;
label10:
v14 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startAfterComment(int)>(v1);
return v14;
}
private final com.fasterxml.jackson.core.JsonToken _startAfterComment(int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v1, v2, v3, v5;
com.fasterxml.jackson.core.JsonToken v10, v11, v4, v6, v7, v8, v9;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v2 < v3 goto label1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = v1;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v4;
return v4;
label1:
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
tableswitch(v1)
{
case 4: goto label2;
case 5: goto label3;
case 6: goto label8;
case 7: goto label8;
case 8: goto label8;
case 9: goto label8;
case 10: goto label8;
case 11: goto label8;
case 12: goto label4;
case 13: goto label5;
case 14: goto label6;
case 15: goto label7;
default: goto label8;
};
label2:
v6 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFieldName(int)>(v5);
return v6;
label3:
v7 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFieldNameAfterComma(int)>(v5);
return v7;
label4:
v8 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startValue(int)>(v5);
return v8;
label5:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startValueExpectComma(int)>(v5);
return v9;
label6:
v10 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startValueExpectColon(int)>(v5);
return v10;
label7:
v11 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startValueAfterComma(int)>(v5);
return v11;
label8:
staticinvoke <com.fasterxml.jackson.core.util.VersionUtil: void throwInternal()>();
return null;
}
protected com.fasterxml.jackson.core.JsonToken _startFalseToken() throws java.io.IOException
{
short v13;
byte v11, v12, v5, v7, v9;
int v1, v10, v2, v3, v4, v6, v8;
com.fasterxml.jackson.core.JsonToken v14, v15, v16, v17;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v2 = v1 + 4;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v2 >= v3 goto label2;
v4 = v1 + 1;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v1);
if v5 != 97 goto label2;
v6 = v4 + 1;
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v4);
if v7 != 108 goto label2;
v8 = v6 + 1;
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v6);
if v9 != 115 goto label2;
v10 = v8 + 1;
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v8);
if v11 != 101 goto label2;
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v10);
v13 = v12 & 255;
if v13 < 48 goto label1;
if v13 == 93 goto label1;
if v13 != 125 goto label2;
label1:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v10;
v14 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken)>(v14);
return v15;
label2:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 18;
v16 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishKeywordToken(java.lang.String,int,com.fasterxml.jackson.core.JsonToken)>("false", 1, v16);
return v17;
}
protected com.fasterxml.jackson.core.JsonToken _startTrueToken() throws java.io.IOException
{
short v11;
byte v10, v5, v7, v9;
int v1, v2, v3, v4, v6, v8;
com.fasterxml.jackson.core.JsonToken v12, v13, v14, v15;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v2 = v1 + 3;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v2 >= v3 goto label2;
v4 = v1 + 1;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v1);
if v5 != 114 goto label2;
v6 = v4 + 1;
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v4);
if v7 != 117 goto label2;
v8 = v6 + 1;
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v6);
if v9 != 101 goto label2;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v8);
v11 = v10 & 255;
if v11 < 48 goto label1;
if v11 == 93 goto label1;
if v11 != 125 goto label2;
label1:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v8;
v12 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken)>(v12);
return v13;
label2:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 17;
v14 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishKeywordToken(java.lang.String,int,com.fasterxml.jackson.core.JsonToken)>("true", 1, v14);
return v15;
}
protected com.fasterxml.jackson.core.JsonToken _startNullToken() throws java.io.IOException
{
short v11;
byte v10, v5, v7, v9;
int v1, v2, v3, v4, v6, v8;
com.fasterxml.jackson.core.JsonToken v12, v13, v14, v15;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v2 = v1 + 3;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v2 >= v3 goto label2;
v4 = v1 + 1;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v1);
if v5 != 117 goto label2;
v6 = v4 + 1;
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v4);
if v7 != 108 goto label2;
v8 = v6 + 1;
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v6);
if v9 != 108 goto label2;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v8);
v11 = v10 & 255;
if v11 < 48 goto label1;
if v11 == 93 goto label1;
if v11 != 125 goto label2;
label1:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v8;
v12 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken)>(v12);
return v13;
label2:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 16;
v14 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishKeywordToken(java.lang.String,int,com.fasterxml.jackson.core.JsonToken)>("null", 1, v14);
return v15;
}
protected com.fasterxml.jackson.core.JsonToken _finishKeywordToken(java.lang.String, int, com.fasterxml.jackson.core.JsonToken) throws java.io.IOException
{
byte v9;
int v12, v13, v2, v4, v5, v6, v8;
com.fasterxml.jackson.core.JsonToken v10, v15, v3, v7;
java.lang.String v1;
char v11;
com.fasterxml.jackson.core.util.TextBuffer v14;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: com.fasterxml.jackson.core.JsonToken;
v4 = virtualinvoke v1.<java.lang.String: int length()>();
label1:
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v5 < v6 goto label2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32> = v2;
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v7;
return v7;
label2:
v8 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v8);
if v2 != v4 goto label4;
if v9 < 48 goto label3;
if v9 == 93 goto label3;
if v9 != 125 goto label5;
label3:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken)>(v3);
return v10;
label4:
v11 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v2);
if v9 != v11 goto label5;
v2 = v2 + 1;
v12 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v13 = v12 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v13;
goto label1;
label5:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 50;
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v14.<com.fasterxml.jackson.core.util.TextBuffer: void resetWithCopy(java.lang.String,int,int)>(v1, 0, v2);
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishErrorToken()>();
return v15;
}
protected com.fasterxml.jackson.core.JsonToken _finishKeywordTokenWithEOF(java.lang.String, int, com.fasterxml.jackson.core.JsonToken) throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v2, v4;
com.fasterxml.jackson.core.JsonToken v3, v6;
java.lang.String v1;
com.fasterxml.jackson.core.util.TextBuffer v5;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: com.fasterxml.jackson.core.JsonToken;
v4 = virtualinvoke v1.<java.lang.String: int length()>();
if v2 != v4 goto label1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v3;
return v3;
label1:
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v5.<com.fasterxml.jackson.core.util.TextBuffer: void resetWithCopy(java.lang.String,int,int)>(v1, 0, v2);
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishErrorTokenWithEOF()>();
return v6;
}
protected com.fasterxml.jackson.core.JsonToken _finishNonStdToken(int, int) throws java.io.IOException
{
byte v9;
int v1, v12, v13, v2, v4, v5, v6, v8;
com.fasterxml.jackson.core.JsonToken v10, v15, v7;
java.lang.String v3;
char v11;
com.fasterxml.jackson.core.util.TextBuffer v14;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _nonStdToken(int)>(v1);
v4 = virtualinvoke v3.<java.lang.String: int length()>();
label1:
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v5 < v6 goto label2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _nonStdTokenType> = v1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32> = v2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 19;
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v7;
return v7;
label2:
v8 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v8);
if v2 != v4 goto label4;
if v9 < 48 goto label3;
if v9 == 93 goto label3;
if v9 != 125 goto label5;
label3:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueNonStdNumberComplete(int)>(v1);
return v10;
label4:
v11 = virtualinvoke v3.<java.lang.String: char charAt(int)>(v2);
if v9 != v11 goto label5;
v2 = v2 + 1;
v12 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v13 = v12 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v13;
goto label1;
label5:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 50;
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v14.<com.fasterxml.jackson.core.util.TextBuffer: void resetWithCopy(java.lang.String,int,int)>(v3, 0, v2);
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishErrorToken()>();
return v15;
}
protected com.fasterxml.jackson.core.JsonToken _finishNonStdTokenWithEOF(int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.util.TextBuffer v6;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v1, v2, v4;
com.fasterxml.jackson.core.JsonToken v5, v7;
java.lang.String v3;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _nonStdToken(int)>(v1);
v4 = virtualinvoke v3.<java.lang.String: int length()>();
if v2 != v4 goto label1;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueNonStdNumberComplete(int)>(v1);
return v5;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v6.<com.fasterxml.jackson.core.util.TextBuffer: void resetWithCopy(java.lang.String,int,int)>(v3, 0, v2);
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishErrorTokenWithEOF()>();
return v7;
}
protected com.fasterxml.jackson.core.JsonToken _finishErrorToken() throws java.io.IOException
{
com.fasterxml.jackson.core.util.TextBuffer v5, v6, v8;
byte v3;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v1, v2, v7;
com.fasterxml.jackson.core.JsonToken v10, v11;
java.lang.String v9;
boolean v4;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
label1:
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v1 >= v2 goto label3;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v4 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>(v3);
if v4 == 0 goto label2;
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v5.<com.fasterxml.jackson.core.util.TextBuffer: void append(char)>(v3);
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v7 = virtualinvoke v6.<com.fasterxml.jackson.core.util.TextBuffer: int size()>();
if v7 < 256 goto label1;
label2:
v8 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _reportErrorToken(java.lang.String)>(v9);
return v10;
label3:
v11 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v11;
return v11;
}
protected com.fasterxml.jackson.core.JsonToken _finishErrorTokenWithEOF() throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
com.fasterxml.jackson.core.JsonToken v3;
java.lang.String v2;
com.fasterxml.jackson.core.util.TextBuffer v1;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _reportErrorToken(java.lang.String)>(v2);
return v3;
}
protected com.fasterxml.jackson.core.JsonToken _reportErrorToken(java.lang.String) throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
com.fasterxml.jackson.core.JsonToken v5;
java.lang.String v1, v3, v4;
com.fasterxml.jackson.core.util.TextBuffer v2;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _validJsonTokenList()>();
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportError(java.lang.String,java.lang.Object,java.lang.Object)>("Unrecognized token \'%s\': was expecting %s", v3, v4);
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
return v5;
}
protected com.fasterxml.jackson.core.JsonToken _startFloatThatStartsWithPeriod() throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
char[] v2;
com.fasterxml.jackson.core.JsonToken v3;
com.fasterxml.jackson.core.util.TextBuffer v1;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean _numberNegative> = 0;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = 0;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFloat(char[],int,int)>(v2, 0, 46);
return v3;
}
protected com.fasterxml.jackson.core.JsonToken _startPositiveNumber(int) throws java.io.IOException
{
short v11;
byte v10, v27;
int v1, v12, v13, v15, v16, v18, v20, v21, v22, v23, v26, v4, v5, v8, v9;
com.fasterxml.jackson.core.JsonToken v14, v17, v25, v29, v30, v7;
com.fasterxml.jackson.core.util.TextBuffer v19, v2, v24, v28, v6;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
char[] v3;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean _numberNegative> = 0;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v3[0] = v1;
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v4 < v5 goto label1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 26;
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v6.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(1);
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v7;
return v7;
label1:
v8 = 1;
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v9);
v11 = v10 & 255;
label2:
if v11 >= 48 goto label3;
if v11 != 46 goto label8;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = v8;
v12 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v13 = v12 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v13;
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFloat(char[],int,int)>(v3, v8, v11);
return v14;
label3:
if v11 <= 57 goto label5;
if v11 == 101 goto label4;
if v11 != 69 goto label8;
label4:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = v8;
v15 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v16 = v15 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v16;
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFloat(char[],int,int)>(v3, v8, v11);
return v17;
label5:
v18 = lengthof v3;
if v8 < v18 goto label6;
v19 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v19.<com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();
label6:
v20 = v8;
v8 = v8 + 1;
v3[v20] = v11;
v21 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v22 = v21 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v22;
v23 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v22 < v23 goto label7;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 26;
v24 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v24.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v8);
v25 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v25;
return v25;
label7:
v26 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v27 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v26);
v11 = v27 & 255;
goto label2;
label8:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = v8;
v28 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v28.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v8);
v29 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
v30 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken)>(v29);
return v30;
}
protected com.fasterxml.jackson.core.JsonToken _startNegativeNumber() throws java.io.IOException
{
byte v33;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
short v14;
int v1, v10, v13, v15, v16, v17, v18, v2, v20, v21, v22, v24, v26, v27, v28, v29, v32, v34, v4, v9;
com.fasterxml.jackson.core.JsonToken v12, v19, v23, v3, v31, v36, v37, v5, v6;
com.fasterxml.jackson.core.util.TextBuffer v11, v25, v30, v35, v7;
char[] v8;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean _numberNegative> = 1;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v1 < v2 goto label01;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 23;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v3;
return v3;
label01:
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
if v4 > 48 goto label03;
if v4 != 48 goto label02;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberLeadingNegZeroes()>();
return v5;
label02:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v4, "expected digit (0-9) to follow minus sign, for valid numeric value");
goto label05;
label03:
if v4 <= 57 goto label05;
if v4 != 73 goto label04;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNonStdToken(int,int)>(3, 2);
return v6;
label04:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v4, "expected digit (0-9) to follow minus sign, for valid numeric value");
label05:
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v8 = virtualinvoke v7.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v8[0] = 45;
v8[1] = v4;
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v9 < v10 goto label06;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 26;
v11 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v11.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(2);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = 1;
v12 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v12;
return v12;
label06:
v13 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v13);
v15 = 2;
label07:
if v14 >= 48 goto label08;
if v14 != 46 goto label13;
v16 = v15 - 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = v16;
v17 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v18 = v17 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v18;
v19 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFloat(char[],int,int)>(v8, v15, v14);
return v19;
label08:
if v14 <= 57 goto label10;
if v14 == 101 goto label09;
if v14 != 69 goto label13;
label09:
v20 = v15 - 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = v20;
v21 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v22 = v21 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v22;
v23 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFloat(char[],int,int)>(v8, v15, v14);
return v23;
label10:
v24 = lengthof v8;
if v15 < v24 goto label11;
v25 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v8 = virtualinvoke v25.<com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();
label11:
v26 = v15;
v15 = v15 + 1;
v8[v26] = v14;
v27 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v28 = v27 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v28;
v29 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v28 < v29 goto label12;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 26;
v30 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v30.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v15);
v31 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v31;
return v31;
label12:
v32 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v33 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v32);
v14 = v33 & 255;
goto label07;
label13:
v34 = v15 - 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = v34;
v35 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v35.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v15);
v36 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
v37 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken)>(v36);
return v37;
}
protected com.fasterxml.jackson.core.JsonToken _startPositiveNumber() throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadFeature v10, v5;
byte v39;
boolean v12, v7;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
com.fasterxml.jackson.core.JsonParser$Feature v11, v6;
short v20;
int v1, v15, v16, v19, v2, v21, v22, v23, v24, v26, v27, v28, v30, v32, v33, v34, v35, v38, v4, v40;
com.fasterxml.jackson.core.JsonToken v18, v25, v29, v3, v37, v42, v43, v8, v9;
com.fasterxml.jackson.core.util.TextBuffer v13, v17, v31, v36, v41;
char[] v14;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean _numberNegative> = 0;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v1 < v2 goto label01;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 22;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v3;
return v3;
label01:
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
if v4 > 48 goto label04;
if v4 != 48 goto label03;
v5 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v6);
if v7 != 0 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(43, "JSON spec does not allow numbers to have plus signs: enable `JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS` to allow");
label02:
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberLeadingPosZeroes()>();
return v8;
label03:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v4, "expected digit (0-9) to follow plus sign, for valid numeric value");
goto label06;
label04:
if v4 <= 57 goto label06;
if v4 != 73 goto label05;
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNonStdToken(int,int)>(2, 2);
return v9;
label05:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v4, "expected digit (0-9) to follow plus sign, for valid numeric value");
label06:
v10 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v11);
if v12 != 0 goto label07;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(43, "JSON spec does not allow numbers to have plus signs: enable `JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS` to allow");
label07:
v13 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v14 = virtualinvoke v13.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v14[0] = 43;
v14[1] = v4;
v15 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v16 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v15 < v16 goto label08;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 26;
v17 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v17.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(2);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = 1;
v18 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v18;
return v18;
label08:
v19 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v20 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v19);
v21 = 2;
label09:
if v20 >= 48 goto label10;
if v20 != 46 goto label15;
v22 = v21 - 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = v22;
v23 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v24 = v23 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v24;
v25 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFloat(char[],int,int)>(v14, v21, v20);
return v25;
label10:
if v20 <= 57 goto label12;
if v20 == 101 goto label11;
if v20 != 69 goto label15;
label11:
v26 = v21 - 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = v26;
v27 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v28 = v27 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v28;
v29 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFloat(char[],int,int)>(v14, v21, v20);
return v29;
label12:
v30 = lengthof v14;
if v21 < v30 goto label13;
v31 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v14 = virtualinvoke v31.<com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();
label13:
v32 = v21;
v21 = v21 + 1;
v14[v32] = v20;
v33 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v34 = v33 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v34;
v35 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v34 < v35 goto label14;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 26;
v36 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v36.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v21);
v37 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v37;
return v37;
label14:
v38 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v39 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v38);
v20 = v39 & 255;
goto label09;
label15:
v40 = v21 - 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = v40;
v41 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v41.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v21);
v42 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
v43 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken)>(v42);
return v43;
}
protected com.fasterxml.jackson.core.JsonToken _startNumberLeadingZero() throws java.io.IOException
{
com.fasterxml.jackson.core.util.TextBuffer v10, v7;
short v6;
byte v5;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v1, v2, v4;
char[] v11, v8;
com.fasterxml.jackson.core.JsonToken v12, v13, v14, v3, v9;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v1 < v2 goto label1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 24;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v3;
return v3;
label1:
v4 = v1 + 1;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v1);
v6 = v5 & 255;
if v6 >= 48 goto label2;
if v6 != 46 goto label6;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v4;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = 1;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v8 = virtualinvoke v7.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v8[0] = 48;
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFloat(char[],int,int)>(v8, 1, v6);
return v9;
label2:
if v6 <= 57 goto label5;
if v6 == 101 goto label3;
if v6 != 69 goto label4;
label3:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v4;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = 1;
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v11[0] = 48;
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFloat(char[],int,int)>(v11, 1, v6);
return v12;
label4:
if v6 == 93 goto label6;
if v6 == 125 goto label6;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v6, "expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow \'0\'");
goto label6;
label5:
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberLeadingZeroes()>();
return v13;
label6:
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueCompleteInt(int,java.lang.String)>(0, "0");
return v14;
}
protected com.fasterxml.jackson.core.JsonToken _finishNumberMinus(int) throws java.io.IOException
{
int v1;
com.fasterxml.jackson.core.JsonToken v2;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberPlusMinus(int,boolean)>(v1, 1);
return v2;
}
protected com.fasterxml.jackson.core.JsonToken _finishNumberPlus(int) throws java.io.IOException
{
int v1;
com.fasterxml.jackson.core.JsonToken v2;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberPlusMinus(int,boolean)>(v1, 0);
return v2;
}
protected com.fasterxml.jackson.core.JsonToken _finishNumberPlusMinus(int, boolean) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser$Feature v15, v25, v5, v9;
com.fasterxml.jackson.core.json.JsonReadFeature v14, v24, v4, v8;
byte v21;
int v1, v11, v12, v17, v18;
com.fasterxml.jackson.core.JsonToken v13, v19, v22, v3, v30, v7;
java.lang.String v20, v23;
boolean v10, v16, v2, v26, v6;
char v29;
com.fasterxml.jackson.core.util.TextBuffer v27;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
char[] v28;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
if v1 > 48 goto label09;
if v1 != 48 goto label03;
if v2 == 0 goto label01;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberLeadingNegZeroes()>();
return v3;
label01:
v4 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v5);
if v6 != 0 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(43, "JSON spec does not allow numbers to have plus signs: enable `JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS` to allow");
label02:
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberLeadingPosZeroes()>();
return v7;
label03:
if v1 != 46 goto label06;
v8 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v9);
if v10 == 0 goto label06;
if v2 == 0 goto label04;
v11 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v12 = v11 - 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v12;
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberLeadingNegZeroes()>();
return v13;
label04:
v14 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v15 = virtualinvoke v14.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v15);
if v16 != 0 goto label05;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(43, "JSON spec does not allow numbers to have plus signs: enable `JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS` to allow");
label05:
v17 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v18 = v17 - 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v18;
v19 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberLeadingPosZeroes()>();
return v19;
label06:
if v2 == 0 goto label07;
v20 = "expected digit (0-9) to follow minus sign, for valid numeric value";
goto label08;
label07:
v20 = "expected digit (0-9) for valid numeric value";
label08:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v1, v20);
goto label15;
label09:
if v1 <= 57 goto label15;
if v1 != 73 goto label12;
if v2 == 0 goto label10;
v21 = 3;
goto label11;
label10:
v21 = 2;
label11:
v22 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNonStdToken(int,int)>(v21, 2);
return v22;
label12:
if v2 == 0 goto label13;
v23 = "expected digit (0-9) to follow minus sign, for valid numeric value";
goto label14;
label13:
v23 = "expected digit (0-9) for valid numeric value";
label14:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v1, v23);
label15:
if v2 != 0 goto label16;
v24 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v25 = virtualinvoke v24.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v26 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v25);
if v26 != 0 goto label16;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(43, "JSON spec does not allow numbers to have plus signs: enable `JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS` to allow");
label16:
v27 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v28 = virtualinvoke v27.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
if v2 == 0 goto label17;
v29 = 45;
goto label18;
label17:
v29 = 43;
label18:
v28[0] = v29;
v28[1] = v1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = 1;
v30 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberIntegralPart(char[],int)>(v28, 2);
return v30;
}
protected com.fasterxml.jackson.core.JsonToken _finishNumberLeadingZeroes() throws java.io.IOException
{
int v1, v11, v12, v13, v17, v18, v2, v4;
com.fasterxml.jackson.core.JsonToken v10, v16, v19, v3, v7;
com.fasterxml.jackson.core.util.TextBuffer v14, v5, v8;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
char[] v15, v6, v9;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
label1:
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v1 < v2 goto label2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 24;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v3;
return v3;
label2:
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
if v4 >= 48 goto label3;
if v4 != 46 goto label8;
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v6[0] = 48;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = 1;
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFloat(char[],int,int)>(v6, 1, v4);
return v7;
label3:
if v4 <= 57 goto label6;
if v4 == 101 goto label4;
if v4 != 69 goto label5;
label4:
v8 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v9[0] = 48;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = 1;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFloat(char[],int,int)>(v9, 1, v4);
return v10;
label5:
if v4 == 93 goto label8;
if v4 == 125 goto label8;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v4, "expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow \'0\'");
goto label8;
label6:
v11 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _features>;
v12 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_LEADING_ZEROS>;
v13 = v11 & v12;
if v13 != 0 goto label7;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void reportInvalidNumber(java.lang.String)>("Leading zeroes not allowed");
label7:
if v4 == 48 goto label1;
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v15 = virtualinvoke v14.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v15[0] = v4;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = 1;
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberIntegralPart(char[],int)>(v15, 1);
return v16;
label8:
v17 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v18 = v17 - 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v18;
v19 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueCompleteInt(int,java.lang.String)>(0, "0");
return v19;
}
protected com.fasterxml.jackson.core.JsonToken _finishNumberLeadingNegZeroes() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonToken v1;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberLeadingPosNegZeroes(boolean)>(1);
return v1;
}
protected com.fasterxml.jackson.core.JsonToken _finishNumberLeadingPosZeroes() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonToken v1;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberLeadingPosNegZeroes(boolean)>(0);
return v1;
}
protected com.fasterxml.jackson.core.JsonToken _finishNumberLeadingPosNegZeroes(boolean) throws java.io.IOException
{
byte v4;
int v15, v16, v17, v2, v22, v23, v3, v6;
com.fasterxml.jackson.core.JsonToken v10, v14, v21, v24, v5;
boolean v1;
char v13, v20, v9;
com.fasterxml.jackson.core.util.TextBuffer v11, v18, v7;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
char[] v12, v19, v8;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: boolean;
label01:
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v2 < v3 goto label04;
if v1 == 0 goto label02;
v4 = 25;
goto label03;
label02:
v4 = 24;
label03:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = v4;
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v5;
return v5;
label04:
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
if v6 >= 48 goto label07;
if v6 != 46 goto label16;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v8 = virtualinvoke v7.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
if v1 == 0 goto label05;
v9 = 45;
goto label06;
label05:
v9 = 43;
label06:
v8[0] = v9;
v8[1] = 48;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = 1;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFloat(char[],int,int)>(v8, 2, v6);
return v10;
label07:
if v6 <= 57 goto label12;
if v6 == 101 goto label08;
if v6 != 69 goto label11;
label08:
v11 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v12 = virtualinvoke v11.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
if v1 == 0 goto label09;
v13 = 45;
goto label10;
label09:
v13 = 43;
label10:
v12[0] = v13;
v12[1] = 48;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = 1;
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFloat(char[],int,int)>(v12, 2, v6);
return v14;
label11:
if v6 == 93 goto label16;
if v6 == 125 goto label16;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v6, "expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow \'0\'");
goto label16;
label12:
v15 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _features>;
v16 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_LEADING_ZEROS>;
v17 = v15 & v16;
if v17 != 0 goto label13;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void reportInvalidNumber(java.lang.String)>("Leading zeroes not allowed");
label13:
if v6 == 48 goto label01;
v18 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v19 = virtualinvoke v18.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
if v1 == 0 goto label14;
v20 = 45;
goto label15;
label14:
v20 = 43;
label15:
v19[0] = v20;
v19[1] = v6;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = 1;
v21 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishNumberIntegralPart(char[],int)>(v19, 2);
return v21;
label16:
v22 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v23 = v22 - 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v23;
v24 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueCompleteInt(int,java.lang.String)>(0, "0");
return v24;
}
protected com.fasterxml.jackson.core.JsonToken _finishNumberIntegralPart(char[], int) throws java.io.IOException
{
short v12;
byte v11, v4, v5;
int v10, v13, v14, v15, v17, v18, v19, v2, v21, v22, v23, v25, v26, v6, v7;
com.fasterxml.jackson.core.JsonToken v16, v20, v28, v29, v9;
boolean v3;
com.fasterxml.jackson.core.util.TextBuffer v24, v27, v8;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
char[] v1;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean _numberNegative>;
if v3 == 0 goto label1;
v4 = -1;
goto label2;
label1:
v4 = 0;
label2:
v5 = v4;
label3:
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v6 < v7 goto label4;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 26;
v8 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v8.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v2);
v9 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v9;
return v9;
label4:
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v10);
v12 = v11 & 255;
if v12 >= 48 goto label5;
if v12 != 46 goto label9;
v13 = v2 + v5;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = v13;
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v15 = v14 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v15;
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFloat(char[],int,int)>(v1, v2, v12);
return v16;
label5:
if v12 <= 57 goto label7;
if v12 == 101 goto label6;
if v12 != 69 goto label9;
label6:
v17 = v2 + v5;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = v17;
v18 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v19 = v18 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v19;
v20 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startFloat(char[],int,int)>(v1, v2, v12);
return v20;
label7:
v21 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v22 = v21 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v22;
v23 = lengthof v1;
if v2 < v23 goto label8;
v24 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v24.<com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();
label8:
v25 = v2;
v2 = v2 + 1;
v1[v25] = v12;
goto label3;
label9:
v26 = v2 + v5;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _intLength> = v26;
v27 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v27.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v2);
v28 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
v29 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken)>(v28);
return v29;
}
protected com.fasterxml.jackson.core.JsonToken _startFloat(char[], int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadFeature v13;
byte v12, v27;
boolean v15;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
com.fasterxml.jackson.core.JsonParser$Feature v14;
short v42;
int v16, v18, v19, v2, v20, v22, v23, v24, v28, v3, v30, v31, v32, v35, v37, v38, v39, v4, v43, v44, v5, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v11, v26, v34, v41, v46, v47;
com.fasterxml.jackson.core.util.TextBuffer v10, v17, v21, v25, v29, v33, v36, v40, v45, v6;
char[] v1;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = 0;
if v3 != 46 goto label07;
v5 = lengthof v1;
if v2 < v5 goto label01;
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v6.<com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();
label01:
v7 = v2;
v2 = v2 + 1;
v1[v7] = 46;
label02:
v8 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v8 < v9 goto label03;
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v10.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v2);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 30;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _fractLength> = v4;
v11 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v11;
return v11;
label03:
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
if v12 < 48 goto label04;
if v12 <= 57 goto label05;
label04:
v3 = v12 & 255;
if v4 != 0 goto label07;
v13 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS>;
v14 = virtualinvoke v13.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v14);
if v15 != 0 goto label07;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v3, "Decimal point not followed by a digit");
goto label07;
label05:
v16 = lengthof v1;
if v2 < v16 goto label06;
v17 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v17.<com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();
label06:
v18 = v2;
v2 = v2 + 1;
v1[v18] = v12;
v4 = v4 + 1;
goto label02;
label07:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _fractLength> = v4;
v19 = 0;
if v3 == 101 goto label08;
if v3 != 69 goto label18;
label08:
v20 = lengthof v1;
if v2 < v20 goto label09;
v21 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v21.<com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();
label09:
v22 = v2;
v2 = v2 + 1;
v1[v22] = v3;
v23 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v24 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v23 < v24 goto label10;
v25 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v25.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v2);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 31;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _expLength> = 0;
v26 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v26;
return v26;
label10:
v27 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
if v27 == 45 goto label11;
if v27 != 43 goto label14;
label11:
v28 = lengthof v1;
if v2 < v28 goto label12;
v29 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v29.<com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();
label12:
v30 = v2;
v2 = v2 + 1;
v1[v30] = v27;
v31 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v32 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v31 < v32 goto label13;
v33 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v33.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v2);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 32;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _expLength> = 0;
v34 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v34;
return v34;
label13:
v27 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
label14:
if v27 < 48 goto label17;
if v27 > 57 goto label17;
v19 = v19 + 1;
v35 = lengthof v1;
if v2 < v35 goto label15;
v36 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v1 = virtualinvoke v36.<com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();
label15:
v37 = v2;
v2 = v2 + 1;
v1[v37] = v27;
v38 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v39 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v38 < v39 goto label16;
v40 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v40.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v2);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 32;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _expLength> = v19;
v41 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v41;
return v41;
label16:
v27 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
goto label14;
label17:
v42 = v27 & 255;
if v19 != 0 goto label18;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v42, "Exponent indicator not followed by a digit");
label18:
v43 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v44 = v43 - 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v44;
v45 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v45.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v2);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _expLength> = v19;
v46 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
v47 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken)>(v46);
return v47;
}
protected com.fasterxml.jackson.core.JsonToken _finishFloatFraction() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser$Feature v16;
com.fasterxml.jackson.core.json.JsonReadFeature v15;
byte v6;
int v1, v10, v11, v12, v20, v21, v23, v25, v26, v5, v8;
com.fasterxml.jackson.core.JsonToken v14, v22, v24, v28, v29;
boolean v17, v7;
com.fasterxml.jackson.core.util.TextBuffer v13, v18, v19, v2, v27, v4, v9;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
char[] v3;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _fractLength>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.util.TextBuffer: char[] getBufferWithoutReset()>();
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.util.TextBuffer: int getCurrentSegmentSize()>();
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v7 = 1;
label01:
if v7 == 0 goto label08;
if v6 < 48 goto label04;
if v6 > 57 goto label04;
v1 = v1 + 1;
v8 = lengthof v3;
if v5 < v8 goto label02;
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v9.<com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();
label02:
v10 = v5;
v5 = v5 + 1;
v3[v10] = v6;
v11 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v12 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v11 < v12 goto label03;
v13 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v13.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v5);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _fractLength> = v1;
v14 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
return v14;
label03:
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
goto label01;
label04:
if v6 == 102 goto label05;
if v6 == 100 goto label05;
if v6 == 70 goto label05;
if v6 != 68 goto label06;
label05:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v6, "JSON does not support parsing numbers that have \'f\' or \'d\' suffixes");
goto label01;
label06:
if v6 != 46 goto label07;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v6, "Cannot parse number with more than one decimal point");
goto label01;
label07:
v7 = 0;
goto label01;
label08:
if v1 != 0 goto label09;
v15 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS>;
v16 = virtualinvoke v15.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v16);
if v17 != 0 goto label09;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v6, "Decimal point not followed by a digit");
label09:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _fractLength> = v1;
v18 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v18.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v5);
if v6 == 101 goto label10;
if v6 != 69 goto label12;
label10:
v19 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v19.<com.fasterxml.jackson.core.util.TextBuffer: void append(char)>(v6);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _expLength> = 0;
v20 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v21 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v20 < v21 goto label11;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 31;
v22 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
return v22;
label11:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 32;
v23 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
v24 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishFloatExponent(boolean,int)>(1, v23);
return v24;
label12:
v25 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v26 = v25 - 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v26;
v27 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v27.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v5);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _expLength> = 0;
v28 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
v29 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken)>(v28);
return v29;
}
protected com.fasterxml.jackson.core.JsonToken _finishFloatExponent(boolean, int) throws java.io.IOException
{
byte v20, v7;
int v11, v12, v13, v15, v16, v17, v2, v21, v22, v23, v4, v5;
com.fasterxml.jackson.core.JsonToken v19, v25, v26, v6;
boolean v1;
com.fasterxml.jackson.core.util.TextBuffer v10, v14, v18, v24, v3, v8;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
char[] v9;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: boolean;
v2 := @parameter1: int;
if v1 == 0 goto label3;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 32;
if v2 == 45 goto label1;
if v2 != 43 goto label3;
label1:
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v3.<com.fasterxml.jackson.core.util.TextBuffer: void append(char)>(v2);
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v4 < v5 goto label2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 32;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _expLength> = 0;
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
return v6;
label2:
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v2 = v7;
label3:
v8 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.util.TextBuffer: char[] getBufferWithoutReset()>();
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.util.TextBuffer: int getCurrentSegmentSize()>();
v12 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _expLength>;
label4:
if v2 < 48 goto label7;
if v2 > 57 goto label7;
v12 = v12 + 1;
v13 = lengthof v9;
if v11 < v13 goto label5;
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v9 = virtualinvoke v14.<com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();
label5:
v15 = v11;
v11 = v11 + 1;
v9[v15] = v2;
v16 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v17 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v16 < v17 goto label6;
v18 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v18.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v11);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _expLength> = v12;
v19 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
return v19;
label6:
v20 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v2 = v20;
goto label4;
label7:
v21 = v2 & 255;
if v12 != 0 goto label8;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v21, "Exponent indicator not followed by a digit");
label8:
v22 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v23 = v22 - 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v23;
v24 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v24.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v11);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _expLength> = v12;
v25 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
v26 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken)>(v25);
return v26;
}
private final java.lang.String _fastParseName() throws java.io.IOException
{
byte v14, v20, v26, v4, v8;
int[] v1;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
short v15, v21, v27, v5, v9;
int v10, v11, v12, v13, v16, v17, v18, v19, v2, v22, v23, v24, v25, v28, v3, v6, v7;
java.lang.String v29, v30, v31, v32, v33;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _icLatin1>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v3 = v2 + 1;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v2);
v5 = v4 & 255;
v6 = v1[v5];
if v6 != 0 goto label09;
v7 = v3 + 1;
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v3);
v9 = v8 & 255;
v10 = v1[v9];
if v10 != 0 goto label07;
v11 = v5 << 8;
v12 = v11 | v9;
v13 = v7 + 1;
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v7);
v15 = v14 & 255;
v16 = v1[v15];
if v16 != 0 goto label05;
v17 = v12 << 8;
v18 = v17 | v15;
v19 = v13 + 1;
v20 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v13);
v21 = v20 & 255;
v22 = v1[v21];
if v22 != 0 goto label03;
v23 = v18 << 8;
v24 = v23 | v21;
v25 = v19 + 1;
v26 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v19);
v27 = v26 & 255;
v28 = v1[v27];
if v28 != 0 goto label01;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quad1> = v24;
v29 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _parseMediumName(int,int)>(v25, v27);
return v29;
label01:
if v27 != 34 goto label02;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v25;
v30 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _findName(int,int)>(v24, 4);
return v30;
label02:
return null;
label03:
if v21 != 34 goto label04;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v19;
v31 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _findName(int,int)>(v18, 3);
return v31;
label04:
return null;
label05:
if v15 != 34 goto label06;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v13;
v32 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _findName(int,int)>(v12, 2);
return v32;
label06:
return null;
label07:
if v9 != 34 goto label08;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v7;
v33 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _findName(int,int)>(v5, 1);
return v33;
label08:
return null;
label09:
if v5 != 34 goto label10;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v3;
return "";
label10:
return null;
}
private final java.lang.String _parseMediumName(int, int) throws java.io.IOException
{
byte v11, v17, v23, v5;
int[] v3;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
short v12, v18, v24, v6;
int v1, v10, v13, v14, v15, v16, v19, v2, v20, v21, v22, v25, v27, v29, v31, v33, v4, v7, v8, v9;
java.lang.String v26, v28, v30, v32, v34;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _icLatin1>;
v4 = v1 + 1;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v1);
v6 = v5 & 255;
v7 = v3[v6];
if v7 != 0 goto label7;
v8 = v2 << 8;
v9 = v8 | v6;
v10 = v4 + 1;
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v4);
v12 = v11 & 255;
v13 = v3[v12];
if v13 != 0 goto label5;
v14 = v9 << 8;
v15 = v14 | v12;
v16 = v10 + 1;
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v10);
v18 = v17 & 255;
v19 = v3[v18];
if v19 != 0 goto label3;
v20 = v15 << 8;
v21 = v20 | v18;
v22 = v16 + 1;
v23 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v16);
v24 = v23 & 255;
v25 = v3[v24];
if v25 != 0 goto label1;
v26 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _parseMediumName2(int,int,int)>(v22, v24, v21);
return v26;
label1:
if v24 != 34 goto label2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v22;
v27 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quad1>;
v28 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _findName(int,int,int)>(v27, v21, 4);
return v28;
label2:
return null;
label3:
if v18 != 34 goto label4;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v16;
v29 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quad1>;
v30 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _findName(int,int,int)>(v29, v15, 3);
return v30;
label4:
return null;
label5:
if v12 != 34 goto label6;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v10;
v31 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quad1>;
v32 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _findName(int,int,int)>(v31, v9, 2);
return v32;
label6:
return null;
label7:
if v6 != 34 goto label8;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v4;
v33 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quad1>;
v34 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _findName(int,int,int)>(v33, v2, 1);
return v34;
label8:
return null;
}
private final java.lang.String _parseMediumName2(int, int, int) throws java.io.IOException
{
byte v14, v22, v30, v6;
int[] v4;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
short v15, v23, v31, v7;
int v1, v11, v12, v13, v16, v17, v19, v2, v20, v21, v24, v25, v27, v28, v29, v3, v32, v5, v8, v9;
java.lang.String v10, v18, v26, v33;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _icLatin1>;
v5 = v1 + 1;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v1);
v7 = v6 & 255;
v8 = v4[v7];
if v8 == 0 goto label2;
if v7 != 34 goto label1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v5;
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quad1>;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _findName(int,int,int,int)>(v9, v3, v2, 1);
return v10;
label1:
return null;
label2:
v11 = v2 << 8;
v12 = v11 | v7;
v13 = v5 + 1;
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v5);
v15 = v14 & 255;
v16 = v4[v15];
if v16 == 0 goto label4;
if v15 != 34 goto label3;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v13;
v17 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quad1>;
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _findName(int,int,int,int)>(v17, v3, v12, 2);
return v18;
label3:
return null;
label4:
v19 = v12 << 8;
v20 = v19 | v15;
v21 = v13 + 1;
v22 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v13);
v23 = v22 & 255;
v24 = v4[v23];
if v24 == 0 goto label6;
if v23 != 34 goto label5;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v21;
v25 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quad1>;
v26 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _findName(int,int,int,int)>(v25, v3, v20, 3);
return v26;
label5:
return null;
label6:
v27 = v20 << 8;
v28 = v27 | v23;
v29 = v21 + 1;
v30 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v21);
v31 = v30 & 255;
if v31 != 34 goto label7;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v29;
v32 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quad1>;
v33 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _findName(int,int,int,int)>(v32, v3, v28, 4);
return v33;
label7:
return null;
}
private final com.fasterxml.jackson.core.JsonToken _parseEscapedName(int, int, int) throws java.io.IOException
{
int[] v14, v19, v39, v4, v5;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v43;
int v1, v10, v11, v12, v13, v15, v17, v18, v2, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v3, v30, v31, v32, v33, v34, v35, v36, v37, v38, v40, v41, v6, v7, v9;
com.fasterxml.jackson.core.JsonToken v16, v42, v45, v8;
java.lang.String v44;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _quadBuffer>;
v5 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _icLatin1>;
label01:
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v6 < v7 goto label02;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quadLength> = v1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32> = v2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pendingBytes> = v3;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 7;
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v8;
return v8;
label02:
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
v10 = v5[v9];
if v10 != 0 goto label05;
if v3 >= 4 goto label03;
v3 = v3 + 1;
v11 = v2 << 8;
v2 = v11 | v9;
goto label01;
label03:
v12 = lengthof v4;
if v1 < v12 goto label04;
v13 = lengthof v4;
v14 = staticinvoke <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] growArrayBy(int[],int)>(v4, v13);
v4 = v14;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _quadBuffer> = v14;
label04:
v15 = v1;
v1 = v1 + 1;
v4[v15] = v2;
v2 = v9;
v3 = 1;
goto label01;
label05:
if v9 == 34 goto label15;
if v9 == 92 goto label06;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _throwUnquotedSpace(int,java.lang.String)>(v9, "name");
goto label07;
label06:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _decodeCharEscape()>();
if v9 >= 0 goto label07;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 8;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorStateAfterSplit> = 7;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quadLength> = v1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32> = v2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pendingBytes> = v3;
v16 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v16;
return v16;
label07:
v17 = lengthof v4;
if v1 < v17 goto label08;
v18 = lengthof v4;
v19 = staticinvoke <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] growArrayBy(int[],int)>(v4, v18);
v4 = v19;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _quadBuffer> = v19;
label08:
if v9 <= 127 goto label13;
if v3 < 4 goto label09;
v20 = v1;
v1 = v1 + 1;
v4[v20] = v2;
v2 = 0;
v3 = 0;
label09:
if v9 >= 2048 goto label10;
v21 = v2 << 8;
v22 = v9 >> 6;
v23 = 192 | v22;
v2 = v21 | v23;
v3 = v3 + 1;
goto label12;
label10:
v24 = v2 << 8;
v25 = v9 >> 12;
v26 = 224 | v25;
v27 = v24 | v26;
v28 = v3 + 1;
if v28 < 4 goto label11;
v29 = v1;
v1 = v1 + 1;
v4[v29] = v27;
v27 = 0;
v28 = 0;
label11:
v30 = v27 << 8;
v31 = v9 >> 6;
v32 = v31 & 63;
v33 = 128 | v32;
v2 = v30 | v33;
v3 = v28 + 1;
label12:
v34 = v9 & 63;
v9 = 128 | v34;
label13:
if v3 >= 4 goto label14;
v3 = v3 + 1;
v35 = v2 << 8;
v2 = v35 | v9;
goto label01;
label14:
v36 = v1;
v1 = v1 + 1;
v4[v36] = v2;
v2 = v9;
v3 = 1;
goto label01;
label15:
if v3 <= 0 goto label17;
v37 = lengthof v4;
if v1 < v37 goto label16;
v38 = lengthof v4;
v39 = staticinvoke <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] growArrayBy(int[],int)>(v4, v38);
v4 = v39;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _quadBuffer> = v39;
label16:
v40 = v1;
v1 = v1 + 1;
v41 = staticinvoke <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _padLastQuad(int,int)>(v2, v3);
v4[v40] = v41;
goto label18;
label17:
if v1 != 0 goto label18;
v42 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _fieldComplete(java.lang.String)>("");
return v42;
label18:
v43 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v44 = virtualinvoke v43.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int[],int)>(v4, v1);
if v44 != null goto label19;
v44 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _addName(int[],int,int)>(v4, v1, v3);
label19:
v45 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _fieldComplete(java.lang.String)>(v44);
return v45;
}
private com.fasterxml.jackson.core.JsonToken _handleOddName(int) throws java.io.IOException
{
int[] v15;
int v1, v12, v13, v14, v16, v2, v3, v4, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v10, v11, v17, v5, v6;
char v18;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
lookupswitch(v1)
{
case 35: goto label1;
case 39: goto label3;
case 47: goto label2;
case 93: goto label4;
default: goto label5;
};
label1:
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _features>;
v3 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_ALLOW_YAML_COMMENTS>;
v4 = v2 & v3;
if v4 == 0 goto label5;
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishHashComment(int)>(4);
return v5;
label2:
v6 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _startSlashComment(int)>(4);
return v6;
label3:
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _features>;
v8 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_ALLOW_SINGLE_QUOTES>;
v9 = v7 & v8;
if v9 == 0 goto label5;
v10 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishAposName(int,int,int)>(0, 0, 0);
return v10;
label4:
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _closeArrayScope()>();
return v11;
label5:
v12 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _features>;
v13 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_ALLOW_UNQUOTED_NAMES>;
v14 = v12 & v13;
if v14 != 0 goto label6;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportUnexpectedChar(int,java.lang.String)>(v18, "was expecting double-quote to start field name");
label6:
v15 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeUtf8JsNames()>();
v16 = v15[v1];
if v16 == 0 goto label7;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportUnexpectedChar(int,java.lang.String)>(v1, "was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name");
label7:
v17 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishUnquotedName(int,int,int)>(0, v1, 1);
return v17;
}
private com.fasterxml.jackson.core.JsonToken _finishUnquotedName(int, int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v24;
short v11;
byte v10;
int[] v18, v22, v4, v5;
int v1, v12, v13, v14, v15, v16, v17, v19, v2, v20, v21, v23, v3, v6, v7, v9;
com.fasterxml.jackson.core.JsonToken v26, v8;
java.lang.String v25;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _quadBuffer>;
v5 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeUtf8JsNames()>();
label1:
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v6 < v7 goto label2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quadLength> = v1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32> = v2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pendingBytes> = v3;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 10;
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v8;
return v8;
label2:
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v9);
v11 = v10 & 255;
v12 = v5[v11];
if v12 != 0 goto label5;
v13 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v14 = v13 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v14;
if v3 >= 4 goto label3;
v3 = v3 + 1;
v15 = v2 << 8;
v2 = v15 | v11;
goto label1;
label3:
v16 = lengthof v4;
if v1 < v16 goto label4;
v17 = lengthof v4;
v18 = staticinvoke <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] growArrayBy(int[],int)>(v4, v17);
v4 = v18;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _quadBuffer> = v18;
label4:
v19 = v1;
v1 = v1 + 1;
v4[v19] = v2;
v2 = v11;
v3 = 1;
goto label1;
label5:
if v3 <= 0 goto label7;
v20 = lengthof v4;
if v1 < v20 goto label6;
v21 = lengthof v4;
v22 = staticinvoke <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] growArrayBy(int[],int)>(v4, v21);
v4 = v22;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _quadBuffer> = v22;
label6:
v23 = v1;
v1 = v1 + 1;
v4[v23] = v2;
label7:
v24 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v25 = virtualinvoke v24.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int[],int)>(v4, v1);
if v25 != null goto label8;
v25 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _addName(int[],int,int)>(v4, v1, v3);
label8:
v26 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _fieldComplete(java.lang.String)>(v25);
return v26;
}
private com.fasterxml.jackson.core.JsonToken _finishAposName(int, int, int) throws java.io.IOException
{
int[] v14, v26, v36, v4, v40, v5;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v44;
int v1, v10, v12, v13, v15, v16, v17, v18, v19, v2, v20, v21, v22, v23, v24, v25, v27, v28, v29, v3, v30, v31, v32, v33, v34, v35, v37, v38, v39, v41, v42, v6, v7, v9;
com.fasterxml.jackson.core.JsonToken v11, v43, v46, v8;
java.lang.String v45;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _quadBuffer>;
v5 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _icLatin1>;
label01:
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v6 < v7 goto label02;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quadLength> = v1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32> = v2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pendingBytes> = v3;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 9;
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v8;
return v8;
label02:
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
if v9 == 39 goto label14;
if v9 == 34 goto label11;
v10 = v5[v9];
if v10 == 0 goto label11;
if v9 == 92 goto label03;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _throwUnquotedSpace(int,java.lang.String)>(v9, "name");
goto label04;
label03:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _decodeCharEscape()>();
if v9 >= 0 goto label04;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 8;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorStateAfterSplit> = 9;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quadLength> = v1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32> = v2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pendingBytes> = v3;
v11 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v11;
return v11;
label04:
if v9 <= 127 goto label11;
if v3 < 4 goto label06;
v12 = lengthof v4;
if v1 < v12 goto label05;
v13 = lengthof v4;
v14 = staticinvoke <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] growArrayBy(int[],int)>(v4, v13);
v4 = v14;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _quadBuffer> = v14;
label05:
v15 = v1;
v1 = v1 + 1;
v4[v15] = v2;
v2 = 0;
v3 = 0;
label06:
if v9 >= 2048 goto label07;
v16 = v2 << 8;
v17 = v9 >> 6;
v18 = 192 | v17;
v2 = v16 | v18;
v3 = v3 + 1;
goto label10;
label07:
v19 = v2 << 8;
v20 = v9 >> 12;
v21 = 224 | v20;
v22 = v19 | v21;
v23 = v3 + 1;
if v23 < 4 goto label09;
v24 = lengthof v4;
if v1 < v24 goto label08;
v25 = lengthof v4;
v26 = staticinvoke <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] growArrayBy(int[],int)>(v4, v25);
v4 = v26;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _quadBuffer> = v26;
label08:
v27 = v1;
v1 = v1 + 1;
v4[v27] = v22;
v22 = 0;
v23 = 0;
label09:
v28 = v22 << 8;
v29 = v9 >> 6;
v30 = v29 & 63;
v31 = 128 | v30;
v2 = v28 | v31;
v3 = v23 + 1;
label10:
v32 = v9 & 63;
v9 = 128 | v32;
label11:
if v3 >= 4 goto label12;
v3 = v3 + 1;
v33 = v2 << 8;
v2 = v33 | v9;
goto label01;
label12:
v34 = lengthof v4;
if v1 < v34 goto label13;
v35 = lengthof v4;
v36 = staticinvoke <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] growArrayBy(int[],int)>(v4, v35);
v4 = v36;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _quadBuffer> = v36;
label13:
v37 = v1;
v1 = v1 + 1;
v4[v37] = v2;
v2 = v9;
v3 = 1;
goto label01;
label14:
if v3 <= 0 goto label16;
v38 = lengthof v4;
if v1 < v38 goto label15;
v39 = lengthof v4;
v40 = staticinvoke <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] growArrayBy(int[],int)>(v4, v39);
v4 = v40;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _quadBuffer> = v40;
label15:
v41 = v1;
v1 = v1 + 1;
v42 = staticinvoke <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _padLastQuad(int,int)>(v2, v3);
v4[v41] = v42;
goto label17;
label16:
if v1 != 0 goto label17;
v43 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _fieldComplete(java.lang.String)>("");
return v43;
label17:
v44 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;
v45 = virtualinvoke v44.<com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int[],int)>(v4, v1);
if v45 != null goto label18;
v45 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: java.lang.String _addName(int[],int,int)>(v4, v1, v3);
label18:
v46 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _fieldComplete(java.lang.String)>(v45);
return v46;
}
protected final com.fasterxml.jackson.core.JsonToken _finishFieldWithEscape() throws java.io.IOException
{
int[] v12, v23, v34, v6, v8, v9;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v1, v10, v11, v13, v14, v15, v16, v17, v18, v19, v2, v20, v21, v22, v24, v25, v26, v27, v28, v29, v3, v30, v31, v32, v33, v35, v36, v37, v38, v40, v5, v7;
com.fasterxml.jackson.core.JsonToken v39, v4, v41;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quoted32>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quotedDigits>;
v3 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _decodeSplitEscaped(int,int)>(v1, v2);
if v3 >= 0 goto label01;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 8;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
return v4;
label01:
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quadLength>;
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _quadBuffer>;
v7 = lengthof v6;
if v5 < v7 goto label02;
v8 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _quadBuffer>;
v9 = staticinvoke <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] growArrayBy(int[],int)>(v8, 32);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _quadBuffer> = v9;
label02:
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32>;
v11 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pendingBytes>;
if v3 <= 127 goto label07;
if v11 < 4 goto label03;
v12 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _quadBuffer>;
v13 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quadLength>;
v14 = v13 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quadLength> = v14;
v12[v13] = v10;
v10 = 0;
v11 = 0;
label03:
if v3 >= 2048 goto label04;
v15 = v10 << 8;
v16 = v3 >> 6;
v17 = 192 | v16;
v10 = v15 | v17;
v11 = v11 + 1;
goto label06;
label04:
v18 = v10 << 8;
v19 = v3 >> 12;
v20 = 224 | v19;
v21 = v18 | v20;
v22 = v11 + 1;
if v22 < 4 goto label05;
v23 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _quadBuffer>;
v24 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quadLength>;
v25 = v24 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quadLength> = v25;
v23[v24] = v21;
v21 = 0;
v22 = 0;
label05:
v26 = v21 << 8;
v27 = v3 >> 6;
v28 = v27 & 63;
v29 = 128 | v28;
v10 = v26 | v29;
v11 = v22 + 1;
label06:
v30 = v3 & 63;
v3 = 128 | v30;
label07:
if v11 >= 4 goto label08;
v31 = v11 + 1;
v32 = v10 << 8;
v33 = v32 | v3;
goto label09;
label08:
v34 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _quadBuffer>;
v35 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quadLength>;
v36 = v35 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quadLength> = v36;
v34[v35] = v10;
v33 = v3;
v31 = 1;
label09:
v37 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorStateAfterSplit>;
if v37 != 9 goto label10;
v38 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quadLength>;
v39 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishAposName(int,int,int)>(v38, v33, v31);
return v39;
label10:
v40 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quadLength>;
v41 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _parseEscapedName(int,int,int)>(v40, v33, v31);
return v41;
}
private int _decodeSplitEscaped(int, int) throws java.io.IOException
{
byte v6;
int v1, v10, v11, v12, v13, v14, v15, v16, v17, v18, v2, v3, v4, v5, v7, v9;
char v8;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v3 < v4 goto label01;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quoted32> = v1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quotedDigits> = v2;
v5 = (int) -1;
return v5;
label01:
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v7 = (int) -1;
if v2 != v7 goto label11;
lookupswitch(v6)
{
case 34: goto label07;
case 47: goto label07;
case 92: goto label07;
case 98: goto label02;
case 102: goto label05;
case 110: goto label04;
case 114: goto label06;
case 116: goto label03;
case 117: goto label09;
default: goto label08;
};
label02:
return 8;
label03:
return 9;
label04:
return 10;
label05:
return 12;
label06:
return 13;
label07:
return v6;
label08:
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: char _handleUnrecognizedCharacterEscape(char)>(v6);
return v8;
label09:
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v9 < v10 goto label10;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quotedDigits> = 0;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quoted32> = 0;
v11 = (int) -1;
return v11;
label10:
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v2 = 0;
label11:
v12 = v6 & 255;
label12:
v13 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int charToHex(int)>(v12);
if v13 >= 0 goto label13;
v14 = v12 & 255;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportUnexpectedChar(int,java.lang.String)>(v14, "expected a hex-digit for character escape sequence");
label13:
v15 = v1 << 4;
v1 = v15 | v13;
v2 = v2 + 1;
if v2 != 4 goto label14;
return v1;
label14:
v16 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v17 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v16 < v17 goto label15;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quotedDigits> = v2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _quoted32> = v1;
v18 = (int) -1;
return v18;
label15:
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int getNextUnsignedByteFromBuffer()>();
goto label12;
}
protected com.fasterxml.jackson.core.JsonToken _startString() throws java.io.IOException
{
short v11;
byte v10;
int[] v5;
int v1, v12, v13, v17, v2, v6, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v15, v16, v19;
com.fasterxml.jackson.core.util.TextBuffer v14, v18, v3;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
char[] v4;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v2 = 0;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v5 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _icUTF8>;
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
v7 = lengthof v4;
v8 = v1 + v7;
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v6, v8);
label1:
if v1 >= v9 goto label3;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v1);
v11 = v10 & 255;
v12 = v5[v11];
if v12 == 0 goto label2;
if v11 != 34 goto label3;
v13 = v1 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v13;
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v14.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v2);
v15 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken)>(v15);
return v16;
label2:
v1 = v1 + 1;
v17 = v2;
v2 = v2 + 1;
v4[v17] = v11;
goto label1;
label3:
v18 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v18.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v2);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v1;
v19 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishRegularString()>();
return v19;
}
private final com.fasterxml.jackson.core.JsonToken _finishRegularString() throws java.io.IOException
{
byte v20, v38, v40, v41, v43, v45, v46;
int[] v1;
boolean v31, v32;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v12, v14, v15, v16, v17, v18, v19, v21, v22, v23, v28, v29, v30, v36, v37, v39, v42, v44, v47, v48, v49, v5, v50, v51, v52, v54, v55, v56, v58, v6, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v11, v25, v26, v33;
com.fasterxml.jackson.core.util.TextBuffer v10, v13, v2, v24, v27, v34, v35, v4, v53, v57;
char[] v3;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _icUTF8>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.util.TextBuffer: char[] getBufferWithoutReset()>();
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.util.TextBuffer: int getCurrentSegmentSize()>();
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
v8 = v7 - 5;
label01:
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v6 < v9 goto label02;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v6;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 40;
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v10.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v5);
v11 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v11;
return v11;
label02:
v12 = lengthof v3;
if v5 < v12 goto label03;
v13 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v13.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v5 = 0;
label03:
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
v15 = lengthof v3;
v16 = v15 - v5;
v17 = v6 + v16;
v18 = staticinvoke <java.lang.Math: int min(int,int)>(v14, v17);
label04:
if v6 >= v18 goto label01;
v19 = v6;
v6 = v6 + 1;
v20 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v19);
v21 = v20 & 255;
v22 = v1[v21];
if v22 != 0 goto label05;
v23 = v5;
v5 = v5 + 1;
v3[v23] = v21;
goto label04;
label05:
if v21 != 34 goto label06;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v6;
v24 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v24.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v5);
v25 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v26 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken)>(v25);
return v26;
label06:
if v6 < v8 goto label10;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v6;
v27 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v27.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v5);
v28 = v21;
v29 = v1[v21];
v30 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v6 >= v30 goto label07;
v31 = 1;
goto label08;
label07:
v31 = 0;
label08:
v32 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean _decodeSplitMultiByte(int,int,boolean)>(v28, v29, v31);
if v32 != 0 goto label09;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorStateAfterSplit> = 40;
v33 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v33;
return v33;
label09:
v34 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v34.<com.fasterxml.jackson.core.util.TextBuffer: char[] getBufferWithoutReset()>();
v35 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v35.<com.fasterxml.jackson.core.util.TextBuffer: int getCurrentSegmentSize()>();
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
goto label01;
label10:
v36 = v1[v21];
tableswitch(v36)
{
case 1: goto label11;
case 2: goto label12;
case 3: goto label13;
case 4: goto label14;
default: goto label16;
};
label11:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v6;
v21 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _decodeFastCharEscape()>();
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
goto label18;
label12:
v37 = v6;
v6 = v6 + 1;
v38 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v37);
v21 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _decodeUTF8_2(int,int)>(v21, v38);
goto label18;
label13:
v39 = v6 + 1;
v40 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v6);
v6 = v39 + 1;
v41 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v39);
v21 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _decodeUTF8_3(int,int,int)>(v21, v40, v41);
goto label18;
label14:
v42 = v6 + 1;
v43 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v6);
v44 = v42 + 1;
v45 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v42);
v6 = v44 + 1;
v46 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v44);
v47 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _decodeUTF8_4(int,int,int,int)>(v21, v43, v45, v46);
v48 = v5;
v5 = v5 + 1;
v49 = v47 >> 10;
v50 = (int) 55296;
v51 = v50 | v49;
v3[v48] = v51;
v52 = lengthof v3;
if v5 < v52 goto label15;
v53 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v53.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v5 = 0;
label15:
v54 = v47 & 1023;
v55 = (int) 56320;
v21 = v55 | v54;
goto label18;
label16:
if v21 >= 32 goto label17;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _throwUnquotedSpace(int,java.lang.String)>(v21, "string value");
goto label18;
label17:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportInvalidChar(int)>(v21);
label18:
v56 = lengthof v3;
if v5 < v56 goto label19;
v57 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v57.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v5 = 0;
label19:
v58 = v5;
v5 = v5 + 1;
v3[v58] = v21;
goto label01;
}
protected com.fasterxml.jackson.core.JsonToken _startAposString() throws java.io.IOException
{
short v11;
byte v10;
int[] v5;
int v1, v12, v16, v17, v2, v6, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v14, v15, v19;
com.fasterxml.jackson.core.util.TextBuffer v13, v18, v3;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
char[] v4;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v2 = 0;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v5 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _icUTF8>;
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
v7 = lengthof v4;
v8 = v1 + v7;
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v6, v8);
label1:
if v1 >= v9 goto label3;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v1);
v11 = v10 & 255;
if v11 != 39 goto label2;
v12 = v1 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v12;
v13 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v13.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v2);
v14 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken)>(v14);
return v15;
label2:
v16 = v5[v11];
if v16 != 0 goto label3;
v1 = v1 + 1;
v17 = v2;
v2 = v2 + 1;
v4[v17] = v11;
goto label1;
label3:
v18 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v18.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v2);
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v1;
v19 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _finishAposString()>();
return v19;
}
private final com.fasterxml.jackson.core.JsonToken _finishAposString() throws java.io.IOException
{
byte v20, v38, v40, v41, v43, v45, v46;
int[] v1;
boolean v31, v32;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v12, v14, v15, v16, v17, v18, v19, v21, v22, v26, v28, v29, v30, v36, v37, v39, v42, v44, v47, v48, v49, v5, v50, v51, v52, v54, v55, v56, v58, v6, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v11, v24, v25, v33;
com.fasterxml.jackson.core.util.TextBuffer v10, v13, v2, v23, v27, v34, v35, v4, v53, v57;
char[] v3;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = <com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _icUTF8>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.util.TextBuffer: char[] getBufferWithoutReset()>();
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.util.TextBuffer: int getCurrentSegmentSize()>();
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
v8 = v7 - 5;
label01:
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v6 < v9 goto label02;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v6;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 45;
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v10.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v5);
v11 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v11;
return v11;
label02:
v12 = lengthof v3;
if v5 < v12 goto label03;
v13 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v13.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v5 = 0;
label03:
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
v15 = lengthof v3;
v16 = v15 - v5;
v17 = v6 + v16;
v18 = staticinvoke <java.lang.Math: int min(int,int)>(v14, v17);
label04:
if v6 >= v18 goto label01;
v19 = v6;
v6 = v6 + 1;
v20 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v19);
v21 = v20 & 255;
v22 = v1[v21];
if v22 == 0 goto label05;
if v21 != 34 goto label07;
label05:
if v21 != 39 goto label06;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v6;
v23 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v23.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v5);
v24 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v25 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _valueComplete(com.fasterxml.jackson.core.JsonToken)>(v24);
return v25;
label06:
v26 = v5;
v5 = v5 + 1;
v3[v26] = v21;
goto label04;
label07:
if v6 < v8 goto label11;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v6;
v27 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v27.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v5);
v28 = v21;
v29 = v1[v21];
v30 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v6 >= v30 goto label08;
v31 = 1;
goto label09;
label08:
v31 = 0;
label09:
v32 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean _decodeSplitMultiByte(int,int,boolean)>(v28, v29, v31);
if v32 != 0 goto label10;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorStateAfterSplit> = 45;
v33 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.JsonToken _currToken> = v33;
return v33;
label10:
v34 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v34.<com.fasterxml.jackson.core.util.TextBuffer: char[] getBufferWithoutReset()>();
v35 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v35.<com.fasterxml.jackson.core.util.TextBuffer: int getCurrentSegmentSize()>();
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
goto label01;
label11:
v36 = v1[v21];
tableswitch(v36)
{
case 1: goto label12;
case 2: goto label13;
case 3: goto label14;
case 4: goto label15;
default: goto label17;
};
label12:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr> = v6;
v21 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _decodeFastCharEscape()>();
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
goto label19;
label13:
v37 = v6;
v6 = v6 + 1;
v38 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v37);
v21 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _decodeUTF8_2(int,int)>(v21, v38);
goto label19;
label14:
v39 = v6 + 1;
v40 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v6);
v6 = v39 + 1;
v41 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v39);
v21 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _decodeUTF8_3(int,int,int)>(v21, v40, v41);
goto label19;
label15:
v42 = v6 + 1;
v43 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v6);
v44 = v42 + 1;
v45 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v42);
v6 = v44 + 1;
v46 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getByteFromBuffer(int)>(v44);
v47 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _decodeUTF8_4(int,int,int,int)>(v21, v43, v45, v46);
v48 = v5;
v5 = v5 + 1;
v49 = v47 >> 10;
v50 = (int) 55296;
v51 = v50 | v49;
v3[v48] = v51;
v52 = lengthof v3;
if v5 < v52 goto label16;
v53 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v53.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v5 = 0;
label16:
v54 = v47 & 1023;
v55 = (int) 56320;
v21 = v55 | v54;
goto label19;
label17:
if v21 >= 32 goto label18;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _throwUnquotedSpace(int,java.lang.String)>(v21, "string value");
goto label19;
label18:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportInvalidChar(int)>(v21);
label19:
v56 = lengthof v3;
if v5 < v56 goto label20;
v57 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v3 = virtualinvoke v57.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v5 = 0;
label20:
v58 = v5;
v5 = v5 + 1;
v3[v58] = v21;
goto label01;
}
private final boolean _decodeSplitMultiByte(int, int, boolean) throws java.io.IOException
{
byte v11, v14, v7;
int v1, v10, v13, v2, v4, v5, v8;
boolean v12, v15, v3;
com.fasterxml.jackson.core.util.TextBuffer v16, v6, v9;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: boolean;
tableswitch(v2)
{
case 1: goto label01;
case 2: goto label03;
case 3: goto label05;
case 4: goto label07;
default: goto label09;
};
label01:
v4 = (int) -1;
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _decodeSplitEscaped(int,int)>(0, v4);
if v5 >= 0 goto label02;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 41;
return 0;
label02:
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v6.<com.fasterxml.jackson.core.util.TextBuffer: void append(char)>(v5);
return 1;
label03:
if v3 == 0 goto label04;
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v8 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _decodeUTF8_2(int,int)>(v1, v7);
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v9.<com.fasterxml.jackson.core.util.TextBuffer: void append(char)>(v8);
return 1;
label04:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 42;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32> = v1;
return 0;
label05:
v10 = v1 & 15;
if v3 == 0 goto label06;
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v12 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean _decodeSplitUTF8_3(int,int,int)>(v10, 1, v11);
return v12;
label06:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 43;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32> = v10;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pendingBytes> = 1;
return 0;
label07:
v13 = v1 & 7;
if v3 == 0 goto label08;
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v15 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: boolean _decodeSplitUTF8_4(int,int,int)>(v13, 1, v14);
return v15;
label08:
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32> = v13;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pendingBytes> = 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 44;
return 0;
label09:
if v1 >= 32 goto label10;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _throwUnquotedSpace(int,java.lang.String)>(v1, "string value");
goto label11;
label10:
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportInvalidChar(int)>(v1);
label11:
v16 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v16.<com.fasterxml.jackson.core.util.TextBuffer: void append(char)>(v1);
return 1;
}
private final boolean _decodeSplitUTF8_3(int, int, int) throws java.io.IOException
{
byte v11;
int v1, v10, v12, v13, v14, v16, v17, v18, v2, v3, v4, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.util.TextBuffer v15;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
if v2 != 1 goto label3;
v4 = v3 & 192;
if v4 == 128 goto label1;
v5 = v3 & 255;
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportInvalidOther(int,int)>(v5, v6);
label1:
v7 = v1 << 6;
v8 = v3 & 63;
v1 = v7 | v8;
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v9 < v10 goto label2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 43;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32> = v1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pendingBytes> = 2;
return 0;
label2:
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v3 = v11;
label3:
v12 = v3 & 192;
if v12 == 128 goto label4;
v13 = v3 & 255;
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportInvalidOther(int,int)>(v13, v14);
label4:
v15 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v16 = v1 << 6;
v17 = v3 & 63;
v18 = v16 | v17;
virtualinvoke v15.<com.fasterxml.jackson.core.util.TextBuffer: void append(char)>(v18);
return 1;
}
private final boolean _decodeSplitUTF8_4(int, int, int) throws java.io.IOException
{
byte v11, v19;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v1, v10, v12, v13, v14, v15, v16, v17, v18, v2, v20, v21, v22, v23, v24, v25, v26, v28, v29, v3, v30, v31, v32, v33, v4, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.util.TextBuffer v27, v34;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
if v2 != 1 goto label3;
v4 = v3 & 192;
if v4 == 128 goto label1;
v5 = v3 & 255;
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportInvalidOther(int,int)>(v5, v6);
label1:
v7 = v1 << 6;
v8 = v3 & 63;
v1 = v7 | v8;
v9 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v10 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v9 < v10 goto label2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 44;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32> = v1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pendingBytes> = 2;
return 0;
label2:
v2 = 2;
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v3 = v11;
label3:
if v2 != 2 goto label6;
v12 = v3 & 192;
if v12 == 128 goto label4;
v13 = v3 & 255;
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportInvalidOther(int,int)>(v13, v14);
label4:
v15 = v1 << 6;
v16 = v3 & 63;
v1 = v15 | v16;
v17 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v18 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
if v17 < v18 goto label5;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _minorState> = 44;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pending32> = v1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _pendingBytes> = 3;
return 0;
label5:
v19 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v3 = v19;
label6:
v20 = v3 & 192;
if v20 == 128 goto label7;
v21 = v3 & 255;
v22 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportInvalidOther(int,int)>(v21, v22);
label7:
v23 = v1 << 6;
v24 = v3 & 63;
v25 = v23 | v24;
v26 = v25 - 65536;
v27 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v28 = v26 >> 10;
v29 = (int) 55296;
v30 = v29 | v28;
virtualinvoke v27.<com.fasterxml.jackson.core.util.TextBuffer: void append(char)>(v30);
v31 = v26 & 1023;
v32 = (int) 56320;
v33 = v32 | v31;
v34 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v34.<com.fasterxml.jackson.core.util.TextBuffer: void append(char)>(v33);
return 1;
}
private final int _decodeCharEscape() throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v1, v2, v3, v4, v5, v6;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputEnd>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
v3 = v1 - v2;
if v3 >= 5 goto label1;
v4 = (int) -1;
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _decodeSplitEscaped(int,int)>(0, v4);
return v5;
label1:
v6 = specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _decodeFastCharEscape()>();
return v6;
}
private final int _decodeFastCharEscape() throws java.io.IOException
{
short v14;
byte v1, v3;
int v10, v11, v12, v13, v15, v4, v5, v6, v7, v8, v9;
char v16, v2;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
lookupswitch(v1)
{
case 34: goto label6;
case 47: goto label6;
case 92: goto label6;
case 98: goto label1;
case 102: goto label4;
case 110: goto label3;
case 114: goto label5;
case 116: goto label2;
case 117: goto label8;
default: goto label7;
};
label1:
return 8;
label2:
return 9;
label3:
return 10;
label4:
return 12;
label5:
return 13;
label6:
return v16;
label7:
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: char _handleUnrecognizedCharacterEscape(char)>(v1);
return v2;
label8:
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v4 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int charToHex(int)>(v3);
if v4 < 0 goto label9;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v5 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int charToHex(int)>(v3);
if v5 < 0 goto label9;
v6 = v4 << 4;
v7 = v6 | v5;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v8 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int charToHex(int)>(v3);
if v8 < 0 goto label9;
v9 = v7 << 4;
v10 = v9 | v8;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: byte getNextSignedByteFromBuffer()>();
v11 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int charToHex(int)>(v3);
if v11 < 0 goto label9;
v12 = v10 << 4;
v13 = v12 | v11;
return v13;
label9:
v14 = v3 & 255;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportUnexpectedChar(int,java.lang.String)>(v14, "expected a hex-digit for character escape sequence");
v15 = (int) -1;
return v15;
}
private final int _decodeUTF8_2(int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
int v1, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v2 & 192;
if v3 == 128 goto label1;
v4 = v2 & 255;
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportInvalidOther(int,int)>(v4, v5);
label1:
v6 = v1 & 31;
v7 = v6 << 6;
v8 = v2 & 63;
v9 = v7 | v8;
return v9;
}
private final int _decodeUTF8_3(int, int, int) throws java.io.IOException
{
int v1, v10, v11, v12, v13, v14, v15, v16, v2, v3, v4, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v1 & 15;
v5 = v2 & 192;
if v5 == 128 goto label1;
v6 = v2 & 255;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportInvalidOther(int,int)>(v6, v7);
label1:
v8 = v4 << 6;
v9 = v2 & 63;
v10 = v8 | v9;
v11 = v3 & 192;
if v11 == 128 goto label2;
v12 = v3 & 255;
v13 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportInvalidOther(int,int)>(v12, v13);
label2:
v14 = v10 << 6;
v15 = v3 & 63;
v16 = v14 | v15;
return v16;
}
private final int _decodeUTF8_4(int, int, int, int) throws java.io.IOException
{
int v1, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v2, v20, v21, v22, v23, v24, v3, v4, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = v2 & 192;
if v5 == 128 goto label1;
v6 = v2 & 255;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportInvalidOther(int,int)>(v6, v7);
label1:
v8 = v1 & 7;
v9 = v8 << 6;
v10 = v2 & 63;
v11 = v9 | v10;
v12 = v3 & 192;
if v12 == 128 goto label2;
v13 = v3 & 255;
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportInvalidOther(int,int)>(v13, v14);
label2:
v15 = v11 << 6;
v16 = v3 & 63;
v17 = v15 | v16;
v18 = v4 & 192;
if v18 == 128 goto label3;
v19 = v4 & 255;
v20 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int _inputPtr>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void _reportInvalidOther(int,int)>(v19, v20);
label3:
v21 = v17 << 6;
v22 = v4 & 63;
v23 = v21 | v22;
v24 = v23 - 65536;
return v24;
}
static void <clinit>()
{
com.fasterxml.jackson.core.JsonParser$Feature v0, v10, v12, v2, v4, v6, v8;
int[] v14, v15;
int v1, v11, v13, v3, v5, v7, v9;
v0 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_TRAILING_COMMA>;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_TRAILING_COMMA> = v1;
v2 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_NUMERIC_LEADING_ZEROS>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_LEADING_ZEROS> = v3;
v4 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_MISSING_VALUES>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_ALLOW_MISSING> = v5;
v6 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_SINGLE_QUOTES>;
v7 = virtualinvoke v6.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_ALLOW_SINGLE_QUOTES> = v7;
v8 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_UNQUOTED_FIELD_NAMES>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_ALLOW_UNQUOTED_NAMES> = v9;
v10 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_COMMENTS>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_ALLOW_JAVA_COMMENTS> = v11;
v12 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_YAML_COMMENTS>;
v13 = virtualinvoke v12.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int FEAT_MASK_ALLOW_YAML_COMMENTS> = v13;
v14 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeUtf8()>();
<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _icUTF8> = v14;
v15 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeLatin1()>();
<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: int[] _icLatin1> = v15;
return;
}
}