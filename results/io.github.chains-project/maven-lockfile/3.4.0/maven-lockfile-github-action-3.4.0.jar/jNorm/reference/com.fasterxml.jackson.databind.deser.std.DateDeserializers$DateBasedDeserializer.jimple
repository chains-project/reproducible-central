public abstract class com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer implements com.fasterxml.jackson.databind.deser.ContextualDeserializer
{
protected final java.text.DateFormat _customFormat;
protected final java.lang.String _formatString;
protected void <init>(java.lang.Class)
{
com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer v0;
java.lang.Class v1;
v0 := @this: com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer;
v1 := @parameter0: java.lang.Class;
specialinvoke v0.<com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer: void <init>(java.lang.Class)>(v1);
v0.<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: java.text.DateFormat _customFormat> = null;
v0.<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: java.lang.String _formatString> = null;
return;
}
protected void <init>(com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer, java.text.DateFormat, java.lang.String)
{
com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer v0, v1;
java.lang.Class v4;
java.lang.String v3;
java.text.DateFormat v2;
v0 := @this: com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer;
v1 := @parameter0: com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer;
v2 := @parameter1: java.text.DateFormat;
v3 := @parameter2: java.lang.String;
v4 = v1.<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: java.lang.Class _valueClass>;
specialinvoke v0.<com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer: void <init>(java.lang.Class)>(v4);
v0.<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: java.text.DateFormat _customFormat> = v2;
v0.<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: java.lang.String _formatString> = v3;
return;
}
protected abstract com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer withDateFormat(java.text.DateFormat, java.lang.String);
public com.fasterxml.jackson.databind.type.LogicalType logicalType()
{
com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer v0;
com.fasterxml.jackson.databind.type.LogicalType v1;
v0 := @this: com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer;
v1 = <com.fasterxml.jackson.databind.type.LogicalType: com.fasterxml.jackson.databind.type.LogicalType DateTime>;
return v1;
}
public com.fasterxml.jackson.databind.JsonDeserializer createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.'annotation'.JsonFormat$Value v4;
com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer v0, v13, v24, v33;
java.util.Locale v10, v18;
java.text.DateFormat v15, v26;
boolean v12, v17, v22, v31, v32, v7, v9;
java.util.TimeZone v5;
com.fasterxml.jackson.databind.BeanProperty v2;
java.text.SimpleDateFormat v11;
com.fasterxml.jackson.databind.DeserializationConfig v14, v25;
java.lang.Boolean v6;
java.lang.String v23, v27, v8;
com.fasterxml.jackson.databind.DeserializationContext v1;
java.lang.Class v16, v28, v3;
java.lang.Object v21, v30;
com.fasterxml.jackson.databind.util.StdDateFormat v19, v20, v29;
v0 := @this: com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer;
v1 := @parameter0: com.fasterxml.jackson.databind.DeserializationContext;
v2 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: java.lang.Class handledType()>();
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: com.fasterxml.jackson.'annotation'.JsonFormat$Value findFormatOverrides(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class)>(v1, v2, v3);
if v4 == null goto label14;
v5 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.TimeZone getTimeZone()>();
v6 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.lang.Boolean getLenient()>();
v7 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasPattern()>();
if v7 == 0 goto label05;
v8 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.lang.String getPattern()>();
v9 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasLocale()>();
if v9 == 0 goto label01;
v10 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.Locale getLocale()>();
goto label02;
label01:
v10 = virtualinvoke v1.<com.fasterxml.jackson.databind.DeserializationContext: java.util.Locale getLocale()>();
label02:
v11 = new java.text.SimpleDateFormat;
specialinvoke v11.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>(v8, v10);
if v5 != null goto label03;
v5 = virtualinvoke v1.<com.fasterxml.jackson.databind.DeserializationContext: java.util.TimeZone getTimeZone()>();
label03:
virtualinvoke v11.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>(v5);
if v6 == null goto label04;
v12 = virtualinvoke v6.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v11.<java.text.SimpleDateFormat: void setLenient(boolean)>(v12);
label04:
v13 = virtualinvoke v0.<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer withDateFormat(java.text.DateFormat,java.lang.String)>(v11, v8);
return v13;
label05:
if v5 == null goto label10;
v14 = virtualinvoke v1.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.DeserializationConfig getConfig()>();
v15 = virtualinvoke v14.<com.fasterxml.jackson.databind.DeserializationConfig: java.text.DateFormat getDateFormat()>();
v16 = virtualinvoke v15.<java.lang.Object: java.lang.Class getClass()>();
if v16 != class "Lcom/fasterxml/jackson/databind/util/StdDateFormat;" goto label08;
v17 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasLocale()>();
if v17 == 0 goto label06;
v18 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.Locale getLocale()>();
goto label07;
label06:
v18 = virtualinvoke v1.<com.fasterxml.jackson.databind.DeserializationContext: java.util.Locale getLocale()>();
label07:
v19 = virtualinvoke v15.<com.fasterxml.jackson.databind.util.StdDateFormat: com.fasterxml.jackson.databind.util.StdDateFormat withTimeZone(java.util.TimeZone)>(v5);
v20 = virtualinvoke v19.<com.fasterxml.jackson.databind.util.StdDateFormat: com.fasterxml.jackson.databind.util.StdDateFormat withLocale(java.util.Locale)>(v18);
if v6 == null goto label09;
virtualinvoke v20.<com.fasterxml.jackson.databind.util.StdDateFormat: com.fasterxml.jackson.databind.util.StdDateFormat withLenient(java.lang.Boolean)>(v6);
goto label09;
label08:
v21 = virtualinvoke v15.<java.text.DateFormat: java.lang.Object clone()>();
virtualinvoke v21.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(v5);
if v6 == null goto label09;
v22 = virtualinvoke v6.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v21.<java.text.DateFormat: void setLenient(boolean)>(v22);
label09:
v23 = v0.<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: java.lang.String _formatString>;
v24 = virtualinvoke v0.<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer withDateFormat(java.text.DateFormat,java.lang.String)>(v21, v23);
return v24;
label10:
if v6 == null goto label14;
v25 = virtualinvoke v1.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.DeserializationConfig getConfig()>();
v26 = virtualinvoke v25.<com.fasterxml.jackson.databind.DeserializationConfig: java.text.DateFormat getDateFormat()>();
v27 = v0.<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: java.lang.String _formatString>;
v28 = virtualinvoke v26.<java.lang.Object: java.lang.Class getClass()>();
if v28 != class "Lcom/fasterxml/jackson/databind/util/StdDateFormat;" goto label11;
v29 = virtualinvoke v26.<com.fasterxml.jackson.databind.util.StdDateFormat: com.fasterxml.jackson.databind.util.StdDateFormat withLenient(java.lang.Boolean)>(v6);
v27 = virtualinvoke v29.<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.String toPattern()>();
goto label12;
label11:
v30 = virtualinvoke v26.<java.text.DateFormat: java.lang.Object clone()>();
v31 = virtualinvoke v6.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v30.<java.text.DateFormat: void setLenient(boolean)>(v31);
v32 = v30 instanceof java.text.SimpleDateFormat;
if v32 == 0 goto label12;
virtualinvoke v29.<java.text.SimpleDateFormat: java.lang.String toPattern()>();
label12:
if v27 != null goto label13;
v27 = "[unknown]";
label13:
v33 = virtualinvoke v0.<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer withDateFormat(java.text.DateFormat,java.lang.String)>(v30, v27);
return v33;
label14:
return v0;
}
protected java.util.Date _parseDate(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext) throws java.io.IOException
{
java.lang.Throwable v22;
java.lang.Object[] v19;
java.util.Date v13, v16, v23;
com.fasterxml.jackson.databind.cfg.CoercionAction v9;
com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer v0;
int[] v10;
int v11, v12;
com.fasterxml.jackson.core.JsonToken v4;
java.lang.String v20, v6, v7;
java.text.ParseException v17;
java.text.DateFormat v14, v15, v3;
boolean v5, v8;
com.fasterxml.jackson.databind.DeserializationContext v2;
com.fasterxml.jackson.core.JsonParser v1;
java.lang.Class v18;
java.lang.Object v21;
v0 := @this: com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer;
v1 := @parameter0: com.fasterxml.jackson.core.JsonParser;
v2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;
v3 = v0.<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: java.text.DateFormat _customFormat>;
if v3 == null goto label10;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v5 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: boolean hasToken(com.fasterxml.jackson.core.JsonToken)>(v4);
if v5 == 0 goto label10;
v6 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();
v7 = virtualinvoke v6.<java.lang.String: java.lang.String trim()>();
v8 = virtualinvoke v7.<java.lang.String: boolean isEmpty()>();
if v8 == 0 goto label03;
v9 = virtualinvoke v0.<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: com.fasterxml.jackson.databind.cfg.CoercionAction _checkFromStringCoercion(com.fasterxml.jackson.databind.DeserializationContext,java.lang.String)>(v2, v7);
v10 = <com.fasterxml.jackson.databind.deser.std.DateDeserializers$1: int[] $SwitchMap$com$fasterxml$jackson$databind$cfg$CoercionAction>;
v11 = virtualinvoke v9.<com.fasterxml.jackson.databind.cfg.CoercionAction: int ordinal()>();
v12 = v10[v11];
tableswitch(v12)
{
case 1: goto label01;
case 2: goto label02;
case 3: goto label02;
default: goto label02;
};
label01:
v13 = new java.util.Date;
specialinvoke v13.<java.util.Date: void <init>(long)>(0L);
return v13;
label02:
return null;
label03:
v14 = v0.<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: java.text.DateFormat _customFormat>;
entermonitor v14;
label04:
v15 = v0.<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: java.text.DateFormat _customFormat>;
v16 = virtualinvoke v15.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(v7);
label05:
exitmonitor v14;
label06:
return v16;
label07:
v17 := @caughtexception;
v18 = virtualinvoke v0.<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: java.lang.Class handledType()>();
v19 = newarray (java.lang.Object)[1];
v20 = v0.<com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer: java.lang.String _formatString>;
v19[0] = v20;
v21 = virtualinvoke v2.<com.fasterxml.jackson.databind.DeserializationContext: java.lang.Object handleWeirdStringValue(java.lang.Class,java.lang.String,java.lang.String,java.lang.Object[])>(v18, v7, "expected format \"%s\"", v19);
exitmonitor v14;
label08:
return v21;
label09:
v22 := @caughtexception;
exitmonitor v14;
throw v22;
label10:
v23 = specialinvoke v0.<com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer: java.util.Date _parseDate(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>(v1, v2);
return v23;
catch java.text.ParseException from label04 to label05 with label07;
catch java.lang.Throwable from label04 to label06 with label09;
catch java.lang.Throwable from label07 to label08 with label09;
}
}