class com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector extends com.fasterxml.jackson.databind.introspect.AnnotationCollector
{
protected final java.util.HashMap _annotations;
public void <init>(java.lang.Object, java.lang.Class, java.lang.'annotation'.Annotation, java.lang.Class, java.lang.'annotation'.Annotation)
{
java.util.HashMap v6, v7, v8;
java.lang.'annotation'.Annotation v3, v5;
com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector v0;
java.lang.Class v2, v4;
java.lang.Object v1;
v0 := @this: com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Class;
v3 := @parameter2: java.lang.'annotation'.Annotation;
v4 := @parameter3: java.lang.Class;
v5 := @parameter4: java.lang.'annotation'.Annotation;
specialinvoke v0.<com.fasterxml.jackson.databind.introspect.AnnotationCollector: void <init>(java.lang.Object)>(v1);
v6 = new java.util.HashMap;
specialinvoke v6.<java.util.HashMap: void <init>()>();
v0.<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector: java.util.HashMap _annotations> = v6;
v7 = v0.<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector: java.util.HashMap _annotations>;
virtualinvoke v7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v2, v3);
v8 = v0.<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector: java.util.HashMap _annotations>;
virtualinvoke v8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v4, v5);
return;
}
public com.fasterxml.jackson.databind.util.Annotations asAnnotations()
{
com.fasterxml.jackson.databind.introspect.AnnotationMap v13;
java.util.Iterator v5;
java.util.Set v4;
java.util.HashMap v1, v14, v3;
com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations v8;
int v2;
com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector v0;
java.lang.Object v10, v11, v12, v6, v7, v9;
v0 := @this: com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector;
v1 = v0.<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector: java.util.HashMap _annotations>;
v2 = virtualinvoke v1.<java.util.HashMap: int size()>();
if v2 != 2 goto label1;
v3 = v0.<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector: java.util.HashMap _annotations>;
v4 = virtualinvoke v3.<java.util.HashMap: java.util.Set entrySet()>();
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
v6 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = new com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations;
v9 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getKey()>();
v10 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getValue()>();
v11 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getKey()>();
v12 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getValue()>();
specialinvoke v8.<com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations: void <init>(java.lang.Class,java.lang.'annotation'.Annotation,java.lang.Class,java.lang.'annotation'.Annotation)>(v9, v10, v11, v12);
return v8;
label1:
v13 = new com.fasterxml.jackson.databind.introspect.AnnotationMap;
v14 = v0.<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector: java.util.HashMap _annotations>;
specialinvoke v13.<com.fasterxml.jackson.databind.introspect.AnnotationMap: void <init>(java.util.HashMap)>(v14);
return v13;
}
public com.fasterxml.jackson.databind.introspect.AnnotationMap asAnnotationMap()
{
com.fasterxml.jackson.databind.introspect.AnnotationMap v1;
java.util.Iterator v4;
java.util.Collection v3;
com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector v0;
java.lang.Object v6;
java.util.HashMap v2;
boolean v5;
v0 := @this: com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector;
v1 = new com.fasterxml.jackson.databind.introspect.AnnotationMap;
specialinvoke v1.<com.fasterxml.jackson.databind.introspect.AnnotationMap: void <init>()>();
v2 = v0.<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector: java.util.HashMap _annotations>;
v3 = virtualinvoke v2.<java.util.HashMap: java.util.Collection values()>();
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v1.<com.fasterxml.jackson.databind.introspect.AnnotationMap: boolean add(java.lang.'annotation'.Annotation)>(v6);
goto label1;
label2:
return v1;
}
public boolean isPresent(java.lang.'annotation'.Annotation)
{
java.lang.'annotation'.Annotation v1;
com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector v0;
java.lang.Class v3;
java.util.HashMap v2;
boolean v4;
v0 := @this: com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector;
v1 := @parameter0: java.lang.'annotation'.Annotation;
v2 = v0.<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector: java.util.HashMap _annotations>;
v3 = interfaceinvoke v1.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
v4 = virtualinvoke v2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(v3);
return v4;
}
public com.fasterxml.jackson.databind.introspect.AnnotationCollector addOrOverride(java.lang.'annotation'.Annotation)
{
java.lang.'annotation'.Annotation v1;
com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector v0;
java.lang.Class v3;
java.util.HashMap v2;
v0 := @this: com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector;
v1 := @parameter0: java.lang.'annotation'.Annotation;
v2 = v0.<com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector: java.util.HashMap _annotations>;
v3 = interfaceinvoke v1.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
virtualinvoke v2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, v1);
return v0;
}
}