public abstract class com.fasterxml.jackson.databind.node.BaseJsonNode extends com.fasterxml.jackson.databind.JsonNode implements java.io.Serializable
{
private static final long serialVersionUID;
java.lang.Object writeReplace()
{
com.fasterxml.jackson.databind.node.NodeSerialization v1;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 = staticinvoke <com.fasterxml.jackson.databind.node.NodeSerialization: com.fasterxml.jackson.databind.node.NodeSerialization 'from'(java.lang.Object)>(v0);
return v1;
}
protected void <init>()
{
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
specialinvoke v0.<com.fasterxml.jackson.databind.JsonNode: void <init>()>();
return;
}
public final com.fasterxml.jackson.databind.JsonNode findPath(java.lang.String)
{
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
com.fasterxml.jackson.databind.JsonNode v2;
com.fasterxml.jackson.databind.node.MissingNode v3;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.node.BaseJsonNode: com.fasterxml.jackson.databind.JsonNode findValue(java.lang.String)>(v1);
if v2 != null goto label1;
v3 = staticinvoke <com.fasterxml.jackson.databind.node.MissingNode: com.fasterxml.jackson.databind.node.MissingNode getInstance()>();
return v3;
label1:
return v2;
}
public abstract int hashCode();
public com.fasterxml.jackson.databind.JsonNode required(java.lang.String)
{
java.lang.Object[] v2;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
java.lang.Class v3;
java.lang.Object v5;
java.lang.String v1, v4;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 := @parameter0: java.lang.String;
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getSimpleName()>();
v2[0] = v4;
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.Object _reportRequiredViolation(java.lang.String,java.lang.Object[])>("Node of type `%s` has no fields", v2);
return v5;
}
public com.fasterxml.jackson.databind.JsonNode required(int)
{
java.lang.Object[] v2;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
int v1;
java.lang.Class v3;
java.lang.Object v5;
java.lang.String v4;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 := @parameter0: int;
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getSimpleName()>();
v2[0] = v4;
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.Object _reportRequiredViolation(java.lang.String,java.lang.Object[])>("Node of type `%s` has no indexed values", v2);
return v5;
}
public com.fasterxml.jackson.core.JsonParser traverse()
{
com.fasterxml.jackson.databind.node.TreeTraversingParser v1;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 = new com.fasterxml.jackson.databind.node.TreeTraversingParser;
specialinvoke v1.<com.fasterxml.jackson.databind.node.TreeTraversingParser: void <init>(com.fasterxml.jackson.databind.JsonNode)>(v0);
return v1;
}
public com.fasterxml.jackson.core.JsonParser traverse(com.fasterxml.jackson.core.ObjectCodec)
{
com.fasterxml.jackson.core.ObjectCodec v1;
com.fasterxml.jackson.databind.node.TreeTraversingParser v2;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 := @parameter0: com.fasterxml.jackson.core.ObjectCodec;
v2 = new com.fasterxml.jackson.databind.node.TreeTraversingParser;
specialinvoke v2.<com.fasterxml.jackson.databind.node.TreeTraversingParser: void <init>(com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.core.ObjectCodec)>(v0, v1);
return v2;
}
public abstract com.fasterxml.jackson.core.JsonToken asToken();
public com.fasterxml.jackson.core.JsonParser$NumberType numberType()
{
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
return null;
}
public com.fasterxml.jackson.databind.node.ObjectNode withObject(com.fasterxml.jackson.core.JsonPointer, com.fasterxml.jackson.databind.JsonNode$OverwriteMode, boolean)
{
java.lang.Object[] v10, v6;
com.fasterxml.jackson.databind.node.ObjectNode v9;
com.fasterxml.jackson.core.JsonPointer v1;
com.fasterxml.jackson.databind.JsonNode$OverwriteMode v2;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
java.lang.Class v11, v7;
java.lang.String v12, v8;
boolean v3, v4, v5;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 := @parameter0: com.fasterxml.jackson.core.JsonPointer;
v2 := @parameter1: com.fasterxml.jackson.databind.JsonNode$OverwriteMode;
v3 := @parameter2: boolean;
v4 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonPointer: boolean matches()>();
if v4 == 0 goto label2;
v5 = v0 instanceof com.fasterxml.jackson.databind.node.ObjectNode;
if v5 == 0 goto label1;
return v0;
label1:
v6 = newarray (java.lang.Object)[1];
v7 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v8 = virtualinvoke v7.<java.lang.Class: java.lang.String getName()>();
v6[0] = v8;
virtualinvoke v0.<com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.Object _reportWrongNodeType(java.lang.String,java.lang.Object[])>("Can only call `withObject()` with empty JSON Pointer on `ObjectNode`, not `%s`", v6);
label2:
v9 = virtualinvoke v0.<com.fasterxml.jackson.databind.node.BaseJsonNode: com.fasterxml.jackson.databind.node.ObjectNode _withObject(com.fasterxml.jackson.core.JsonPointer,com.fasterxml.jackson.core.JsonPointer,com.fasterxml.jackson.databind.JsonNode$OverwriteMode,boolean)>(v1, v1, v2, v3);
if v9 != null goto label3;
v10 = newarray (java.lang.Object)[2];
v11 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v12 = virtualinvoke v11.<java.lang.Class: java.lang.String getName()>();
v10[0] = v12;
v10[1] = v1;
virtualinvoke v0.<com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.Object _reportWrongNodeType(java.lang.String,java.lang.Object[])>("Cannot replace context node (of type `%s`) using `withObject()` with  JSON Pointer \'%s\'", v10);
label3:
return v9;
}
protected com.fasterxml.jackson.databind.node.ObjectNode _withObject(com.fasterxml.jackson.core.JsonPointer, com.fasterxml.jackson.core.JsonPointer, com.fasterxml.jackson.databind.JsonNode$OverwriteMode, boolean)
{
com.fasterxml.jackson.core.JsonPointer v1, v2;
com.fasterxml.jackson.databind.JsonNode$OverwriteMode v3;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
boolean v4;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 := @parameter0: com.fasterxml.jackson.core.JsonPointer;
v2 := @parameter1: com.fasterxml.jackson.core.JsonPointer;
v3 := @parameter2: com.fasterxml.jackson.databind.JsonNode$OverwriteMode;
v4 := @parameter3: boolean;
return null;
}
protected void _withXxxVerifyReplace(com.fasterxml.jackson.core.JsonPointer, com.fasterxml.jackson.core.JsonPointer, com.fasterxml.jackson.databind.JsonNode$OverwriteMode, boolean, com.fasterxml.jackson.databind.JsonNode)
{
java.lang.Object[] v7;
com.fasterxml.jackson.core.JsonPointer v1, v2;
com.fasterxml.jackson.databind.JsonNode$OverwriteMode v3;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
com.fasterxml.jackson.databind.JsonNode v5;
java.lang.Class v8;
java.lang.String v10, v9;
boolean v4, v6;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 := @parameter0: com.fasterxml.jackson.core.JsonPointer;
v2 := @parameter1: com.fasterxml.jackson.core.JsonPointer;
v3 := @parameter2: com.fasterxml.jackson.databind.JsonNode$OverwriteMode;
v4 := @parameter3: boolean;
v5 := @parameter4: com.fasterxml.jackson.databind.JsonNode;
v6 = virtualinvoke v0.<com.fasterxml.jackson.databind.node.BaseJsonNode: boolean _withXxxMayReplace(com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode$OverwriteMode)>(v5, v3);
if v6 != 0 goto label1;
v7 = newarray (java.lang.Object)[4];
v8 = virtualinvoke v5.<java.lang.Object: java.lang.Class getClass()>();
v9 = virtualinvoke v8.<java.lang.Class: java.lang.String getName()>();
v7[0] = v9;
v10 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonPointer: java.lang.String getMatchingProperty()>();
v7[1] = v10;
v7[2] = v1;
v7[3] = v3;
virtualinvoke v0.<com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.Object _reportWrongNodeType(java.lang.String,java.lang.Object[])>("Cannot replace `JsonNode` of type `%s` for property \"%s\" in JSON Pointer \"%s\" (mode `OverwriteMode.%s`)", v7);
label1:
return;
}
protected boolean _withXxxMayReplace(com.fasterxml.jackson.databind.JsonNode, com.fasterxml.jackson.databind.JsonNode$OverwriteMode)
{
int[] v3;
com.fasterxml.jackson.databind.JsonNode$OverwriteMode v2;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
int v4, v5;
com.fasterxml.jackson.databind.JsonNode v1;
boolean v6, v7, v8;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 := @parameter0: com.fasterxml.jackson.databind.JsonNode;
v2 := @parameter1: com.fasterxml.jackson.databind.JsonNode$OverwriteMode;
v3 = <com.fasterxml.jackson.databind.node.BaseJsonNode$1: int[] $SwitchMap$com$fasterxml$jackson$databind$JsonNode$OverwriteMode>;
v4 = virtualinvoke v2.<com.fasterxml.jackson.databind.JsonNode$OverwriteMode: int ordinal()>();
v5 = v3[v4];
tableswitch(v5)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label3;
case 4: goto label6;
default: goto label6;
};
label1:
return 0;
label2:
v6 = virtualinvoke v1.<com.fasterxml.jackson.databind.JsonNode: boolean isNull()>();
return v6;
label3:
v7 = virtualinvoke v1.<com.fasterxml.jackson.databind.JsonNode: boolean isContainerNode()>();
if v7 != 0 goto label4;
v8 = 1;
goto label5;
label4:
v8 = 0;
label5:
return v8;
label6:
return 1;
}
public com.fasterxml.jackson.databind.node.ArrayNode withArray(com.fasterxml.jackson.core.JsonPointer, com.fasterxml.jackson.databind.JsonNode$OverwriteMode, boolean)
{
java.lang.Object[] v10, v6;
com.fasterxml.jackson.databind.node.ArrayNode v9;
com.fasterxml.jackson.core.JsonPointer v1;
com.fasterxml.jackson.databind.JsonNode$OverwriteMode v2;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
java.lang.Class v11, v7;
java.lang.String v12, v8;
boolean v3, v4, v5;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 := @parameter0: com.fasterxml.jackson.core.JsonPointer;
v2 := @parameter1: com.fasterxml.jackson.databind.JsonNode$OverwriteMode;
v3 := @parameter2: boolean;
v4 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonPointer: boolean matches()>();
if v4 == 0 goto label2;
v5 = v0 instanceof com.fasterxml.jackson.databind.node.ArrayNode;
if v5 == 0 goto label1;
return v0;
label1:
v6 = newarray (java.lang.Object)[1];
v7 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v8 = virtualinvoke v7.<java.lang.Class: java.lang.String getName()>();
v6[0] = v8;
virtualinvoke v0.<com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.Object _reportWrongNodeType(java.lang.String,java.lang.Object[])>("Can only call `withArray()` with empty JSON Pointer on `ArrayNode`, not `%s`", v6);
label2:
v9 = virtualinvoke v0.<com.fasterxml.jackson.databind.node.BaseJsonNode: com.fasterxml.jackson.databind.node.ArrayNode _withArray(com.fasterxml.jackson.core.JsonPointer,com.fasterxml.jackson.core.JsonPointer,com.fasterxml.jackson.databind.JsonNode$OverwriteMode,boolean)>(v1, v1, v2, v3);
if v9 != null goto label3;
v10 = newarray (java.lang.Object)[2];
v11 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v12 = virtualinvoke v11.<java.lang.Class: java.lang.String getName()>();
v10[0] = v12;
v10[1] = v1;
virtualinvoke v0.<com.fasterxml.jackson.databind.node.BaseJsonNode: java.lang.Object _reportWrongNodeType(java.lang.String,java.lang.Object[])>("Cannot replace context node (of type `%s`) using `withArray()` with  JSON Pointer \'%s\'", v10);
label3:
return v9;
}
protected com.fasterxml.jackson.databind.node.ArrayNode _withArray(com.fasterxml.jackson.core.JsonPointer, com.fasterxml.jackson.core.JsonPointer, com.fasterxml.jackson.databind.JsonNode$OverwriteMode, boolean)
{
com.fasterxml.jackson.core.JsonPointer v1, v2;
com.fasterxml.jackson.databind.JsonNode$OverwriteMode v3;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
boolean v4;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 := @parameter0: com.fasterxml.jackson.core.JsonPointer;
v2 := @parameter1: com.fasterxml.jackson.core.JsonPointer;
v3 := @parameter2: com.fasterxml.jackson.databind.JsonNode$OverwriteMode;
v4 := @parameter3: boolean;
return null;
}
public abstract void serialize(com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException;
public abstract void serializeWithType(com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer) throws java.io.IOException;
public java.lang.String toString()
{
java.lang.String v1;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 = staticinvoke <com.fasterxml.jackson.databind.node.InternalNodeMapper: java.lang.String nodeToString(com.fasterxml.jackson.databind.node.BaseJsonNode)>(v0);
return v1;
}
public java.lang.String toPrettyString()
{
java.lang.String v1;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 = staticinvoke <com.fasterxml.jackson.databind.node.InternalNodeMapper: java.lang.String nodeToPrettyString(com.fasterxml.jackson.databind.node.BaseJsonNode)>(v0);
return v1;
}
protected transient java.lang.Object _reportWrongNodeType(java.lang.String, java.lang.Object[])
{
java.lang.UnsupportedOperationException v3;
java.lang.Object[] v2;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
java.lang.String v1, v4;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object[];
v3 = new java.lang.UnsupportedOperationException;
v4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v2);
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v4);
throw v3;
}
protected transient java.lang.Object _reportWrongNodeOperation(java.lang.String, java.lang.Object[])
{
java.lang.UnsupportedOperationException v3;
java.lang.Object[] v2;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
java.lang.String v1, v4;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object[];
v3 = new java.lang.UnsupportedOperationException;
v4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v2);
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v4);
throw v3;
}
protected com.fasterxml.jackson.core.JsonPointer _jsonPointerIfValid(java.lang.String)
{
com.fasterxml.jackson.core.JsonPointer v4;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
char v3;
java.lang.String v1;
boolean v2;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v2 != 0 goto label1;
v3 = virtualinvoke v1.<java.lang.String: char charAt(int)>(0);
if v3 != 47 goto label2;
label1:
v4 = staticinvoke <com.fasterxml.jackson.core.JsonPointer: com.fasterxml.jackson.core.JsonPointer compile(java.lang.String)>(v1);
return v4;
label2:
return null;
}
protected java.math.BigInteger _bigIntFromBigDec(java.math.BigDecimal)
{
java.math.BigDecimal v1;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
int v3;
java.math.BigInteger v5;
com.fasterxml.jackson.core.StreamReadConstraints v2;
com.fasterxml.jackson.core.exc.StreamConstraintsException v4;
v0 := @this: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 := @parameter0: java.math.BigDecimal;
label1:
v2 = staticinvoke <com.fasterxml.jackson.core.StreamReadConstraints: com.fasterxml.jackson.core.StreamReadConstraints defaults()>();
v3 = virtualinvoke v1.<java.math.BigDecimal: int scale()>();
virtualinvoke v2.<com.fasterxml.jackson.core.StreamReadConstraints: void validateBigIntegerScale(int)>(v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
staticinvoke <com.fasterxml.jackson.databind.util.ExceptionUtil: java.lang.Object throwSneaky(java.io.IOException)>(v4);
label4:
v5 = virtualinvoke v1.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();
return v5;
catch com.fasterxml.jackson.core.exc.StreamConstraintsException from label1 to label2 with label3;
}
}