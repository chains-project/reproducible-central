public final class com.fasterxml.jackson.databind.ser.SerializerCache extends java.lang.Object
{
public static final int DEFAULT_MAX_CACHED;
private final com.fasterxml.jackson.databind.util.LRUMap _sharedMap;
private final java.util.concurrent.atomic.AtomicReference _readOnlyMap;
public void <init>()
{
com.fasterxml.jackson.databind.ser.SerializerCache v0;
v0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;
specialinvoke v0.<com.fasterxml.jackson.databind.ser.SerializerCache: void <init>(int)>(4000);
return;
}
public void <init>(int)
{
com.fasterxml.jackson.databind.ser.SerializerCache v0;
com.fasterxml.jackson.databind.util.LRUMap v4;
int v1, v2, v3;
java.util.concurrent.atomic.AtomicReference v5;
v0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;
v1 := @parameter0: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = v1 >> 2;
v3 = staticinvoke <java.lang.Math: int min(int,int)>(64, v2);
v4 = new com.fasterxml.jackson.databind.util.LRUMap;
specialinvoke v4.<com.fasterxml.jackson.databind.util.LRUMap: void <init>(int,int)>(v3, v1);
v0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.util.LRUMap _sharedMap> = v4;
v5 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v5.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap> = v5;
return;
}
public com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap getReadOnlyLookupMap()
{
com.fasterxml.jackson.databind.ser.SerializerCache v0;
com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap v3;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;
v1 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v2 == null goto label1;
return v2;
label1:
v3 = specialinvoke v0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap _makeReadOnlyLookupMap()>();
return v3;
}
private final synchronized com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap _makeReadOnlyLookupMap()
{
com.fasterxml.jackson.databind.ser.SerializerCache v0;
com.fasterxml.jackson.databind.util.LRUMap v3;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1, v4;
v0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;
v1 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v2 != null goto label1;
v3 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.util.LRUMap _sharedMap>;
v2 = staticinvoke <com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap 'from'(com.fasterxml.jackson.databind.util.LRUMap)>(v3);
v4 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap>;
virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v2);
label1:
return v2;
}
public synchronized int size()
{
com.fasterxml.jackson.databind.util.LRUMap v1;
int v2;
com.fasterxml.jackson.databind.ser.SerializerCache v0;
v0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;
v1 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.util.LRUMap _sharedMap>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.util.LRUMap: int size()>();
return v2;
}
public com.fasterxml.jackson.databind.JsonSerializer untypedValueSerializer(java.lang.Class)
{
java.lang.Throwable v5;
com.fasterxml.jackson.databind.ser.SerializerCache v0;
com.fasterxml.jackson.databind.util.TypeKey v3;
com.fasterxml.jackson.databind.util.LRUMap v2;
java.lang.Class v1;
java.lang.Object v4;
v0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;
v1 := @parameter0: java.lang.Class;
entermonitor v0;
label1:
v2 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.util.LRUMap _sharedMap>;
v3 = new com.fasterxml.jackson.databind.util.TypeKey;
specialinvoke v3.<com.fasterxml.jackson.databind.util.TypeKey: void <init>(java.lang.Class,boolean)>(v1, 0);
v4 = virtualinvoke v2.<com.fasterxml.jackson.databind.util.LRUMap: java.lang.Object get(java.lang.Object)>(v3);
exitmonitor v0;
label2:
return v4;
label3:
v5 := @caughtexception;
exitmonitor v0;
throw v5;
catch java.lang.Throwable from label1 to label2 with label3;
}
public com.fasterxml.jackson.databind.JsonSerializer untypedValueSerializer(com.fasterxml.jackson.databind.JavaType)
{
java.lang.Throwable v5;
com.fasterxml.jackson.databind.ser.SerializerCache v0;
com.fasterxml.jackson.databind.util.TypeKey v3;
com.fasterxml.jackson.databind.util.LRUMap v2;
java.lang.Object v4;
com.fasterxml.jackson.databind.JavaType v1;
v0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;
v1 := @parameter0: com.fasterxml.jackson.databind.JavaType;
entermonitor v0;
label1:
v2 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.util.LRUMap _sharedMap>;
v3 = new com.fasterxml.jackson.databind.util.TypeKey;
specialinvoke v3.<com.fasterxml.jackson.databind.util.TypeKey: void <init>(com.fasterxml.jackson.databind.JavaType,boolean)>(v1, 0);
v4 = virtualinvoke v2.<com.fasterxml.jackson.databind.util.LRUMap: java.lang.Object get(java.lang.Object)>(v3);
exitmonitor v0;
label2:
return v4;
label3:
v5 := @caughtexception;
exitmonitor v0;
throw v5;
catch java.lang.Throwable from label1 to label2 with label3;
}
public com.fasterxml.jackson.databind.JsonSerializer typedValueSerializer(com.fasterxml.jackson.databind.JavaType)
{
java.lang.Throwable v5;
com.fasterxml.jackson.databind.ser.SerializerCache v0;
com.fasterxml.jackson.databind.util.TypeKey v3;
com.fasterxml.jackson.databind.util.LRUMap v2;
java.lang.Object v4;
com.fasterxml.jackson.databind.JavaType v1;
v0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;
v1 := @parameter0: com.fasterxml.jackson.databind.JavaType;
entermonitor v0;
label1:
v2 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.util.LRUMap _sharedMap>;
v3 = new com.fasterxml.jackson.databind.util.TypeKey;
specialinvoke v3.<com.fasterxml.jackson.databind.util.TypeKey: void <init>(com.fasterxml.jackson.databind.JavaType,boolean)>(v1, 1);
v4 = virtualinvoke v2.<com.fasterxml.jackson.databind.util.LRUMap: java.lang.Object get(java.lang.Object)>(v3);
exitmonitor v0;
label2:
return v4;
label3:
v5 := @caughtexception;
exitmonitor v0;
throw v5;
catch java.lang.Throwable from label1 to label2 with label3;
}
public com.fasterxml.jackson.databind.JsonSerializer typedValueSerializer(java.lang.Class)
{
java.lang.Throwable v5;
com.fasterxml.jackson.databind.ser.SerializerCache v0;
com.fasterxml.jackson.databind.util.TypeKey v3;
com.fasterxml.jackson.databind.util.LRUMap v2;
java.lang.Class v1;
java.lang.Object v4;
v0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;
v1 := @parameter0: java.lang.Class;
entermonitor v0;
label1:
v2 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.util.LRUMap _sharedMap>;
v3 = new com.fasterxml.jackson.databind.util.TypeKey;
specialinvoke v3.<com.fasterxml.jackson.databind.util.TypeKey: void <init>(java.lang.Class,boolean)>(v1, 1);
v4 = virtualinvoke v2.<com.fasterxml.jackson.databind.util.LRUMap: java.lang.Object get(java.lang.Object)>(v3);
exitmonitor v0;
label2:
return v4;
label3:
v5 := @caughtexception;
exitmonitor v0;
throw v5;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void addTypedSerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)
{
java.lang.Throwable v7;
com.fasterxml.jackson.databind.util.TypeKey v4;
java.util.concurrent.atomic.AtomicReference v6;
com.fasterxml.jackson.databind.ser.SerializerCache v0;
com.fasterxml.jackson.databind.util.LRUMap v3;
com.fasterxml.jackson.databind.JsonSerializer v2;
java.lang.Object v5;
com.fasterxml.jackson.databind.JavaType v1;
v0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;
v1 := @parameter0: com.fasterxml.jackson.databind.JavaType;
v2 := @parameter1: com.fasterxml.jackson.databind.JsonSerializer;
entermonitor v0;
label1:
v3 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.util.LRUMap _sharedMap>;
v4 = new com.fasterxml.jackson.databind.util.TypeKey;
specialinvoke v4.<com.fasterxml.jackson.databind.util.TypeKey: void <init>(com.fasterxml.jackson.databind.JavaType,boolean)>(v1, 1);
v5 = virtualinvoke v3.<com.fasterxml.jackson.databind.util.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v4, v2);
if v5 != null goto label2;
v6 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap>;
virtualinvoke v6.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);
label2:
exitmonitor v0;
label3:
goto label5;
label4:
v7 := @caughtexception;
exitmonitor v0;
throw v7;
label5:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
public void addTypedSerializer(java.lang.Class, com.fasterxml.jackson.databind.JsonSerializer)
{
java.lang.Throwable v7;
com.fasterxml.jackson.databind.util.TypeKey v4;
java.util.concurrent.atomic.AtomicReference v6;
com.fasterxml.jackson.databind.ser.SerializerCache v0;
com.fasterxml.jackson.databind.util.LRUMap v3;
com.fasterxml.jackson.databind.JsonSerializer v2;
java.lang.Class v1;
java.lang.Object v5;
v0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: com.fasterxml.jackson.databind.JsonSerializer;
entermonitor v0;
label1:
v3 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.util.LRUMap _sharedMap>;
v4 = new com.fasterxml.jackson.databind.util.TypeKey;
specialinvoke v4.<com.fasterxml.jackson.databind.util.TypeKey: void <init>(java.lang.Class,boolean)>(v1, 1);
v5 = virtualinvoke v3.<com.fasterxml.jackson.databind.util.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v4, v2);
if v5 != null goto label2;
v6 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap>;
virtualinvoke v6.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);
label2:
exitmonitor v0;
label3:
goto label5;
label4:
v7 := @caughtexception;
exitmonitor v0;
throw v7;
label5:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
public void addAndResolveNonTypedSerializer(java.lang.Class, com.fasterxml.jackson.databind.JsonSerializer, com.fasterxml.jackson.databind.SerializerProvider) throws com.fasterxml.jackson.databind.JsonMappingException
{
java.lang.Throwable v9;
com.fasterxml.jackson.databind.util.TypeKey v5;
java.util.concurrent.atomic.AtomicReference v7;
com.fasterxml.jackson.databind.ser.SerializerCache v0;
com.fasterxml.jackson.databind.util.LRUMap v4;
com.fasterxml.jackson.databind.JsonSerializer v2;
java.lang.Class v1;
java.lang.Object v6;
com.fasterxml.jackson.databind.SerializerProvider v3;
boolean v8;
v0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: com.fasterxml.jackson.databind.JsonSerializer;
v3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;
entermonitor v0;
label1:
v4 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.util.LRUMap _sharedMap>;
v5 = new com.fasterxml.jackson.databind.util.TypeKey;
specialinvoke v5.<com.fasterxml.jackson.databind.util.TypeKey: void <init>(java.lang.Class,boolean)>(v1, 0);
v6 = virtualinvoke v4.<com.fasterxml.jackson.databind.util.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v5, v2);
if v6 != null goto label2;
v7 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap>;
virtualinvoke v7.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);
label2:
v8 = v2 instanceof com.fasterxml.jackson.databind.ser.ResolvableSerializer;
if v8 == 0 goto label3;
interfaceinvoke v2.<com.fasterxml.jackson.databind.ser.ResolvableSerializer: void resolve(com.fasterxml.jackson.databind.SerializerProvider)>(v3);
label3:
exitmonitor v0;
label4:
goto label6;
label5:
v9 := @caughtexception;
exitmonitor v0;
throw v9;
label6:
return;
catch java.lang.Throwable from label1 to label4 with label5;
}
public void addAndResolveNonTypedSerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer, com.fasterxml.jackson.databind.SerializerProvider) throws com.fasterxml.jackson.databind.JsonMappingException
{
java.lang.Throwable v9;
com.fasterxml.jackson.databind.util.TypeKey v5;
java.util.concurrent.atomic.AtomicReference v7;
com.fasterxml.jackson.databind.ser.SerializerCache v0;
com.fasterxml.jackson.databind.util.LRUMap v4;
com.fasterxml.jackson.databind.JsonSerializer v2;
java.lang.Object v6;
com.fasterxml.jackson.databind.JavaType v1;
com.fasterxml.jackson.databind.SerializerProvider v3;
boolean v8;
v0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;
v1 := @parameter0: com.fasterxml.jackson.databind.JavaType;
v2 := @parameter1: com.fasterxml.jackson.databind.JsonSerializer;
v3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;
entermonitor v0;
label1:
v4 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.util.LRUMap _sharedMap>;
v5 = new com.fasterxml.jackson.databind.util.TypeKey;
specialinvoke v5.<com.fasterxml.jackson.databind.util.TypeKey: void <init>(com.fasterxml.jackson.databind.JavaType,boolean)>(v1, 0);
v6 = virtualinvoke v4.<com.fasterxml.jackson.databind.util.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v5, v2);
if v6 != null goto label2;
v7 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap>;
virtualinvoke v7.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);
label2:
v8 = v2 instanceof com.fasterxml.jackson.databind.ser.ResolvableSerializer;
if v8 == 0 goto label3;
interfaceinvoke v2.<com.fasterxml.jackson.databind.ser.ResolvableSerializer: void resolve(com.fasterxml.jackson.databind.SerializerProvider)>(v3);
label3:
exitmonitor v0;
label4:
goto label6;
label5:
v9 := @caughtexception;
exitmonitor v0;
throw v9;
label6:
return;
catch java.lang.Throwable from label1 to label4 with label5;
}
public void addAndResolveNonTypedSerializer(java.lang.Class, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer, com.fasterxml.jackson.databind.SerializerProvider) throws com.fasterxml.jackson.databind.JsonMappingException
{
java.lang.Throwable v13;
com.fasterxml.jackson.databind.util.TypeKey v6, v9;
java.util.concurrent.atomic.AtomicReference v11;
com.fasterxml.jackson.databind.ser.SerializerCache v0;
com.fasterxml.jackson.databind.util.LRUMap v5, v8;
com.fasterxml.jackson.databind.JsonSerializer v3;
java.lang.Class v1;
java.lang.Object v10, v7;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.SerializerProvider v4;
boolean v12;
v0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 := @parameter2: com.fasterxml.jackson.databind.JsonSerializer;
v4 := @parameter3: com.fasterxml.jackson.databind.SerializerProvider;
entermonitor v0;
label1:
v5 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.util.LRUMap _sharedMap>;
v6 = new com.fasterxml.jackson.databind.util.TypeKey;
specialinvoke v6.<com.fasterxml.jackson.databind.util.TypeKey: void <init>(java.lang.Class,boolean)>(v1, 0);
v7 = virtualinvoke v5.<com.fasterxml.jackson.databind.util.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v3);
v8 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.util.LRUMap _sharedMap>;
v9 = new com.fasterxml.jackson.databind.util.TypeKey;
specialinvoke v9.<com.fasterxml.jackson.databind.util.TypeKey: void <init>(com.fasterxml.jackson.databind.JavaType,boolean)>(v2, 0);
v10 = virtualinvoke v8.<com.fasterxml.jackson.databind.util.LRUMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, v3);
if v7 == null goto label2;
if v10 != null goto label3;
label2:
v11 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap>;
virtualinvoke v11.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);
label3:
v12 = v3 instanceof com.fasterxml.jackson.databind.ser.ResolvableSerializer;
if v12 == 0 goto label4;
interfaceinvoke v3.<com.fasterxml.jackson.databind.ser.ResolvableSerializer: void resolve(com.fasterxml.jackson.databind.SerializerProvider)>(v4);
label4:
exitmonitor v0;
label5:
goto label7;
label6:
v13 := @caughtexception;
exitmonitor v0;
throw v13;
label7:
return;
catch java.lang.Throwable from label1 to label5 with label6;
}
public synchronized void flush()
{
com.fasterxml.jackson.databind.util.LRUMap v1;
com.fasterxml.jackson.databind.ser.SerializerCache v0;
java.util.concurrent.atomic.AtomicReference v2;
v0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;
v1 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.util.LRUMap _sharedMap>;
virtualinvoke v1.<com.fasterxml.jackson.databind.util.LRUMap: void clear()>();
v2 = v0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);
return;
}
}