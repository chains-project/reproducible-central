public class com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer extends com.fasterxml.jackson.databind.ser.std.StdArraySerializers$TypedPrimitiveArraySerializer
{
private static final com.fasterxml.jackson.databind.JavaType VALUE_TYPE;
public void <init>()
{
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer;
specialinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$TypedPrimitiveArraySerializer: void <init>(java.lang.Class)>(class "[S");
return;
}
public void <init>(com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer, com.fasterxml.jackson.databind.BeanProperty, java.lang.Boolean)
{
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer v0, v1;
com.fasterxml.jackson.databind.BeanProperty v2;
java.lang.Boolean v3;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer;
v2 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;
v3 := @parameter2: java.lang.Boolean;
specialinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$TypedPrimitiveArraySerializer: void <init>(com.fasterxml.jackson.databind.ser.std.StdArraySerializers$TypedPrimitiveArraySerializer,com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>(v1, v2, v3);
return;
}
public com.fasterxml.jackson.databind.JsonSerializer _withResolved(com.fasterxml.jackson.databind.BeanProperty, java.lang.Boolean)
{
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer v0, v3;
com.fasterxml.jackson.databind.BeanProperty v1;
java.lang.Boolean v2;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.BeanProperty;
v2 := @parameter1: java.lang.Boolean;
v3 = new com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer;
specialinvoke v3.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: void <init>(com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer,com.fasterxml.jackson.databind.BeanProperty,java.lang.Boolean)>(v0, v1, v2);
return v3;
}
public com.fasterxml.jackson.databind.JavaType getContentType()
{
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer v0;
com.fasterxml.jackson.databind.JavaType v1;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer;
v1 = <com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: com.fasterxml.jackson.databind.JavaType VALUE_TYPE>;
return v1;
}
public com.fasterxml.jackson.databind.JsonSerializer getContentSerializer()
{
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer;
return null;
}
public boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider, short[])
{
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer v0;
int v3;
com.fasterxml.jackson.databind.SerializerProvider v1;
short[] v2;
boolean v4;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: short[];
v3 = lengthof v2;
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean hasSingleElement(short[])
{
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer v0;
int v2;
short[] v1;
boolean v3;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer;
v1 := @parameter0: short[];
v2 = lengthof v1;
if v2 != 1 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public final void serialize(short[], com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
{
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer v0;
com.fasterxml.jackson.core.JsonGenerator v2;
int v4;
com.fasterxml.jackson.databind.SerializerProvider v3;
short[] v1;
boolean v5;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer;
v1 := @parameter0: short[];
v2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;
v3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;
v4 = lengthof v1;
if v4 != 1 goto label1;
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: boolean _shouldUnwrapSingle(com.fasterxml.jackson.databind.SerializerProvider)>(v3);
if v5 == 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: void serializeContents(short[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>(v1, v2, v3);
return;
label1:
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray(java.lang.Object,int)>(v1, v4);
virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: void serializeContents(short[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>(v1, v2, v3);
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();
return;
}
public void serializeContents(short[], com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
{
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer v0;
short v6;
com.fasterxml.jackson.core.JsonGenerator v2;
int v4, v5;
com.fasterxml.jackson.databind.SerializerProvider v3;
short[] v1;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer;
v1 := @parameter0: short[];
v2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;
v3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;
v4 = 0;
v5 = lengthof v1;
label1:
if v4 >= v5 goto label2;
v6 = v1[v4];
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>(v6);
v4 = v4 + 1;
goto label1;
label2:
return;
}
public com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)
{
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer v0;
java.lang.reflect.Type v2;
com.fasterxml.jackson.databind.JsonNode v5;
com.fasterxml.jackson.databind.SerializerProvider v1;
com.fasterxml.jackson.databind.node.ObjectNode v3, v4;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: java.lang.reflect.Type;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("array", 1);
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String)>("integer");
v5 = virtualinvoke v3.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>("items", v4);
return v5;
}
public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer v0;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes v3;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 = <com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes INTEGER>;
virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: void visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)>(v1, v2, v3);
return;
}
static void <clinit>()
{
java.lang.Class v1;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.type.TypeFactory v0;
v0 = staticinvoke <com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.TypeFactory defaultInstance()>();
v1 = <java.lang.Short: java.lang.Class TYPE>;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType uncheckedSimpleType(java.lang.Class)>(v1);
<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: com.fasterxml.jackson.databind.JavaType VALUE_TYPE> = v2;
return;
}
}