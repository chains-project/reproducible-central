public final class com.fasterxml.jackson.databind.ser.std.StringSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer
{
private static final long serialVersionUID;
public void <init>()
{
com.fasterxml.jackson.databind.ser.std.StringSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StringSerializer;
specialinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdScalarSerializer: void <init>(java.lang.Class,boolean)>(class "Ljava/lang/String;", 0);
return;
}
public boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)
{
com.fasterxml.jackson.databind.ser.std.StringSerializer v0;
java.lang.Object v2;
com.fasterxml.jackson.databind.SerializerProvider v1;
boolean v3;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StringSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v2.<java.lang.String: boolean isEmpty()>();
return v3;
}
public void serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerator v2;
com.fasterxml.jackson.databind.ser.std.StringSerializer v0;
java.lang.Object v1;
com.fasterxml.jackson.databind.SerializerProvider v3;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StringSerializer;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;
v3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(v1);
return;
}
public final void serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerator v2;
com.fasterxml.jackson.databind.ser.std.StringSerializer v0;
java.lang.Object v1;
com.fasterxml.jackson.databind.SerializerProvider v3;
com.fasterxml.jackson.databind.jsontype.TypeSerializer v4;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StringSerializer;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;
v3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;
v4 := @parameter3: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(v1);
return;
}
public com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)
{
java.lang.reflect.Type v2;
com.fasterxml.jackson.databind.ser.std.StringSerializer v0;
com.fasterxml.jackson.databind.SerializerProvider v1;
com.fasterxml.jackson.databind.node.ObjectNode v3;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StringSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: java.lang.reflect.Type;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.StringSerializer: com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("string", 1);
return v3;
}
public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.ser.std.StringSerializer v0;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StringSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.StringSerializer: void visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)>(v1, v2);
return;
}
}