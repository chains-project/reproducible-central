public class com.fasterxml.jackson.databind.ser.std.UUIDSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer implements com.fasterxml.jackson.databind.ser.ContextualSerializer
{
static final char[] HEX_CHARS;
protected final java.lang.Boolean _asBinary;
public void <init>()
{
com.fasterxml.jackson.databind.ser.std.UUIDSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.UUIDSerializer;
specialinvoke v0.<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void <init>(java.lang.Boolean)>(null);
return;
}
protected void <init>(java.lang.Boolean)
{
java.lang.Boolean v1;
com.fasterxml.jackson.databind.ser.std.UUIDSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.UUIDSerializer;
v1 := @parameter0: java.lang.Boolean;
specialinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdScalarSerializer: void <init>(java.lang.Class)>(class "Ljava/util/UUID;");
v0.<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: java.lang.Boolean _asBinary> = v1;
return;
}
public boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.util.UUID)
{
byte v4, v6;
com.fasterxml.jackson.databind.ser.std.UUIDSerializer v0;
long v3, v5;
com.fasterxml.jackson.databind.SerializerProvider v1;
java.util.UUID v2;
v0 := @this: com.fasterxml.jackson.databind.ser.std.UUIDSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: java.util.UUID;
v3 = virtualinvoke v2.<java.util.UUID: long getLeastSignificantBits()>();
v4 = v3 cmp 0L;
if v4 != 0 goto label1;
v5 = virtualinvoke v2.<java.util.UUID: long getMostSignificantBits()>();
v6 = v5 cmp 0L;
if v6 != 0 goto label1;
return 1;
label1:
return 0;
}
public com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.ser.std.UUIDSerializer v0, v11;
com.fasterxml.jackson.databind.BeanProperty v2;
com.fasterxml.jackson.'annotation'.JsonFormat$Value v4;
com.fasterxml.jackson.'annotation'.JsonFormat$Shape v6, v7, v8;
java.lang.Boolean v5, v9;
java.lang.Class v3;
com.fasterxml.jackson.databind.SerializerProvider v1;
boolean v10;
v0 := @this: com.fasterxml.jackson.databind.ser.std.UUIDSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: java.lang.Class handledType()>();
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: com.fasterxml.jackson.'annotation'.JsonFormat$Value findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class)>(v1, v2, v3);
v5 = null;
if v4 == null goto label2;
v6 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: com.fasterxml.jackson.'annotation'.JsonFormat$Shape getShape()>();
v7 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape BINARY>;
if v6 != v7 goto label1;
v5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
goto label2;
label1:
v8 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape STRING>;
if v6 != v8 goto label2;
v5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
label2:
v9 = v0.<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: java.lang.Boolean _asBinary>;
v10 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v5, v9);
if v10 != 0 goto label3;
v11 = new com.fasterxml.jackson.databind.ser.std.UUIDSerializer;
specialinvoke v11.<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void <init>(java.lang.Boolean)>(v5);
return v11;
label3:
return v0;
}
public void serialize(java.util.UUID, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
{
byte[] v5;
com.fasterxml.jackson.databind.ser.std.UUIDSerializer v0;
com.fasterxml.jackson.core.JsonGenerator v2;
long v10, v11, v12, v7, v8;
java.util.UUID v1;
int v9;
char[] v6;
com.fasterxml.jackson.databind.SerializerProvider v3;
boolean v4;
v0 := @this: com.fasterxml.jackson.databind.ser.std.UUIDSerializer;
v1 := @parameter0: java.util.UUID;
v2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;
v3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: boolean _writeAsBinary(com.fasterxml.jackson.core.JsonGenerator)>(v2);
if v4 == 0 goto label1;
v5 = staticinvoke <com.fasterxml.jackson.databind.ser.std.UUIDSerializer: byte[] _asBytes(java.util.UUID)>(v1);
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeBinary(byte[])>(v5);
return;
label1:
v6 = newarray (char)[36];
v7 = virtualinvoke v1.<java.util.UUID: long getMostSignificantBits()>();
v8 = v7 >> 32;
staticinvoke <com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendInt(int,char[],int)>(v8, v6, 0);
v6[8] = 45;
v9 = v7 >>> 16;
staticinvoke <com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendShort(int,char[],int)>(v9, v6, 9);
v6[13] = 45;
staticinvoke <com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendShort(int,char[],int)>(v7, v6, 14);
v6[18] = 45;
v10 = virtualinvoke v1.<java.util.UUID: long getLeastSignificantBits()>();
v11 = v10 >>> 48;
staticinvoke <com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendShort(int,char[],int)>(v11, v6, 19);
v6[23] = 45;
v12 = v10 >>> 32;
staticinvoke <com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendShort(int,char[],int)>(v12, v6, 24);
staticinvoke <com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendInt(int,char[],int)>(v10, v6, 28);
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeString(char[],int,int)>(v6, 0, 36);
return;
}
protected boolean _writeAsBinary(com.fasterxml.jackson.core.JsonGenerator)
{
com.fasterxml.jackson.databind.ser.std.UUIDSerializer v0;
com.fasterxml.jackson.core.JsonGenerator v1;
java.lang.Boolean v2, v3;
boolean v4, v5, v6, v7;
v0 := @this: com.fasterxml.jackson.databind.ser.std.UUIDSerializer;
v1 := @parameter0: com.fasterxml.jackson.core.JsonGenerator;
v2 = v0.<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: java.lang.Boolean _asBinary>;
if v2 == null goto label1;
v3 = v0.<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: java.lang.Boolean _asBinary>;
v4 = virtualinvoke v3.<java.lang.Boolean: boolean booleanValue()>();
return v4;
label1:
v5 = v1 instanceof com.fasterxml.jackson.databind.util.TokenBuffer;
if v5 != 0 goto label2;
v6 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: boolean canWriteBinaryNatively()>();
if v6 == 0 goto label2;
v7 = 1;
goto label3;
label2:
v7 = 0;
label3:
return v7;
}
public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.ser.std.UUIDSerializer v0;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat v3;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
v0 := @this: com.fasterxml.jackson.databind.ser.std.UUIDSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 = <com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat UUID>;
virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)>(v1, v2, v3);
return;
}
private static void _appendInt(int, char[], int)
{
int v0, v2, v3, v4;
char[] v1;
v0 := @parameter0: int;
v1 := @parameter1: char[];
v2 := @parameter2: int;
v3 = v0 >> 16;
staticinvoke <com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendShort(int,char[],int)>(v3, v1, v2);
v4 = v2 + 4;
staticinvoke <com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendShort(int,char[],int)>(v0, v1, v4);
return;
}
private static void _appendShort(int, char[], int)
{
int v0, v10, v12, v14, v15, v17, v19, v2, v4, v5, v7, v9;
char v11, v16, v20, v6;
char[] v1, v13, v18, v3, v8;
v0 := @parameter0: int;
v1 := @parameter1: char[];
v2 := @parameter2: int;
v3 = <com.fasterxml.jackson.databind.ser.std.UUIDSerializer: char[] HEX_CHARS>;
v4 = v0 >> 12;
v5 = v4 & 15;
v6 = v3[v5];
v1[v2] = v6;
v7 = v2 + 1;
v8 = <com.fasterxml.jackson.databind.ser.std.UUIDSerializer: char[] HEX_CHARS>;
v9 = v0 >> 8;
v10 = v9 & 15;
v11 = v8[v10];
v1[v7] = v11;
v12 = v7 + 1;
v13 = <com.fasterxml.jackson.databind.ser.std.UUIDSerializer: char[] HEX_CHARS>;
v14 = v0 >> 4;
v15 = v14 & 15;
v16 = v13[v15];
v1[v12] = v16;
v17 = v12 + 1;
v18 = <com.fasterxml.jackson.databind.ser.std.UUIDSerializer: char[] HEX_CHARS>;
v19 = v0 & 15;
v20 = v18[v19];
v1[v17] = v20;
return;
}
private static final byte[] _asBytes(java.util.UUID)
{
byte[] v1;
long v2, v3, v4, v5;
java.util.UUID v0;
v0 := @parameter0: java.util.UUID;
v1 = newarray (byte)[16];
v2 = virtualinvoke v0.<java.util.UUID: long getMostSignificantBits()>();
v3 = virtualinvoke v0.<java.util.UUID: long getLeastSignificantBits()>();
v4 = v2 >> 32;
staticinvoke <com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendInt(int,byte[],int)>(v4, v1, 0);
staticinvoke <com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendInt(int,byte[],int)>(v2, v1, 4);
v5 = v3 >> 32;
staticinvoke <com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendInt(int,byte[],int)>(v5, v1, 8);
staticinvoke <com.fasterxml.jackson.databind.ser.std.UUIDSerializer: void _appendInt(int,byte[],int)>(v3, v1, 12);
return v1;
}
private static final void _appendInt(int, byte[], int)
{
byte[] v1;
int v0, v2, v3, v4, v5, v6, v7, v8;
v0 := @parameter0: int;
v1 := @parameter1: byte[];
v2 := @parameter2: int;
v3 = v0 >> 24;
v1[v2] = v3;
v4 = v2 + 1;
v5 = v0 >> 16;
v1[v4] = v5;
v6 = v4 + 1;
v7 = v0 >> 8;
v1[v6] = v7;
v8 = v6 + 1;
v1[v8] = v0;
return;
}
static void <clinit>()
{
char[] v1;
java.lang.String v0;
v0 = "0123456789abcdef";
v1 = virtualinvoke v0.<java.lang.String: char[] toCharArray()>();
<com.fasterxml.jackson.databind.ser.std.UUIDSerializer: char[] HEX_CHARS> = v1;
return;
}
}