final class com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$SerializationProxy extends java.lang.Object implements java.io.Serializable
{
final int concurrencyLevel;
final java.util.Map data;
final long capacity;
static final long serialVersionUID;
void <init>(com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap)
{
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap v1;
java.util.concurrent.atomic.AtomicLong v4;
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$SerializationProxy v0;
int v2;
java.util.HashMap v3;
long v5;
v0 := @this: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$SerializationProxy;
v1 := @parameter0: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = v1.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap: int concurrencyLevel>;
v0.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$SerializationProxy: int concurrencyLevel> = v2;
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>(java.util.Map)>(v1);
v0.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$SerializationProxy: java.util.Map data> = v3;
v4 = v1.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap: java.util.concurrent.atomic.AtomicLong capacity>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLong: long get()>();
v0.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$SerializationProxy: long capacity> = v5;
return;
}
java.lang.Object readResolve()
{
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap v4;
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$SerializationProxy v0;
java.util.Map v5;
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$Builder v1, v3;
long v2;
v0 := @this: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$SerializationProxy;
v1 = new com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$Builder;
specialinvoke v1.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$Builder: void <init>()>();
v2 = v0.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$SerializationProxy: long capacity>;
v3 = virtualinvoke v1.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$Builder: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$Builder maximumCapacity(long)>(v2);
v4 = virtualinvoke v3.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$Builder: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap build()>();
v5 = v0.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$SerializationProxy: java.util.Map data>;
virtualinvoke v4.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap: void putAll(java.util.Map)>(v5);
return v4;
}
}