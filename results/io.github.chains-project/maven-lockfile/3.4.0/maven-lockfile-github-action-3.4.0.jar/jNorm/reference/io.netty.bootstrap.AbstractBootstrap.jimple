public abstract class io.netty.bootstrap.AbstractBootstrap extends java.lang.Object implements java.lang.Cloneable
{
private static final java.util.Map$Entry[] EMPTY_OPTION_ARRAY;
private static final java.util.Map$Entry[] EMPTY_ATTRIBUTE_ARRAY;
volatile io.netty.channel.EventLoopGroup group;
private volatile io.netty.bootstrap.ChannelFactory channelFactory;
private volatile java.net.SocketAddress localAddress;
private final java.util.Map options;
private final java.util.Map attrs;
private volatile io.netty.channel.ChannelHandler handler;
void <init>()
{
java.util.LinkedHashMap v1;
java.util.concurrent.ConcurrentHashMap v2;
io.netty.bootstrap.AbstractBootstrap v0;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.LinkedHashMap;
specialinvoke v1.<java.util.LinkedHashMap: void <init>()>();
v0.<io.netty.bootstrap.AbstractBootstrap: java.util.Map options> = v1;
v2 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.netty.bootstrap.AbstractBootstrap: java.util.Map attrs> = v2;
return;
}
void <init>(io.netty.bootstrap.AbstractBootstrap)
{
java.lang.Throwable v11;
io.netty.channel.EventLoopGroup v4;
java.net.SocketAddress v7;
java.util.concurrent.ConcurrentHashMap v3;
io.netty.bootstrap.ChannelFactory v5;
java.util.LinkedHashMap v2;
java.util.Map v10, v12, v13, v8, v9;
io.netty.bootstrap.AbstractBootstrap v0, v1;
io.netty.channel.ChannelHandler v6;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 := @parameter0: io.netty.bootstrap.AbstractBootstrap;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.LinkedHashMap;
specialinvoke v2.<java.util.LinkedHashMap: void <init>()>();
v0.<io.netty.bootstrap.AbstractBootstrap: java.util.Map options> = v2;
v3 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.netty.bootstrap.AbstractBootstrap: java.util.Map attrs> = v3;
v4 = v1.<io.netty.bootstrap.AbstractBootstrap: io.netty.channel.EventLoopGroup group>;
v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.channel.EventLoopGroup group> = v4;
v5 = v1.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.ChannelFactory channelFactory>;
v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.ChannelFactory channelFactory> = v5;
v6 = v1.<io.netty.bootstrap.AbstractBootstrap: io.netty.channel.ChannelHandler handler>;
v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.channel.ChannelHandler handler> = v6;
v7 = v1.<io.netty.bootstrap.AbstractBootstrap: java.net.SocketAddress localAddress>;
v0.<io.netty.bootstrap.AbstractBootstrap: java.net.SocketAddress localAddress> = v7;
v8 = v1.<io.netty.bootstrap.AbstractBootstrap: java.util.Map options>;
entermonitor v8;
label1:
v9 = v0.<io.netty.bootstrap.AbstractBootstrap: java.util.Map options>;
v10 = v1.<io.netty.bootstrap.AbstractBootstrap: java.util.Map options>;
interfaceinvoke v9.<java.util.Map: void putAll(java.util.Map)>(v10);
exitmonitor v8;
label2:
goto label4;
label3:
v11 := @caughtexception;
exitmonitor v8;
throw v11;
label4:
v12 = v0.<io.netty.bootstrap.AbstractBootstrap: java.util.Map attrs>;
v13 = v1.<io.netty.bootstrap.AbstractBootstrap: java.util.Map attrs>;
interfaceinvoke v12.<java.util.Map: void putAll(java.util.Map)>(v13);
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.netty.bootstrap.AbstractBootstrap group(io.netty.channel.EventLoopGroup)
{
java.lang.IllegalStateException v3;
io.netty.channel.EventLoopGroup v1, v2;
io.netty.bootstrap.AbstractBootstrap v0, v4;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 := @parameter0: io.netty.channel.EventLoopGroup;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "group");
v2 = v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.channel.EventLoopGroup group>;
if v2 == null goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("group set already");
throw v3;
label1:
v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.channel.EventLoopGroup group> = v1;
v4 = specialinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrap self()>();
return v4;
}
private io.netty.bootstrap.AbstractBootstrap self()
{
io.netty.bootstrap.AbstractBootstrap v0;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
return v0;
}
public io.netty.bootstrap.AbstractBootstrap channel(java.lang.Class)
{
io.netty.channel.ReflectiveChannelFactory v2;
io.netty.bootstrap.AbstractBootstrap v0, v4;
java.lang.Class v1;
java.lang.Object v3;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 := @parameter0: java.lang.Class;
v2 = new io.netty.channel.ReflectiveChannelFactory;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "channelClass");
specialinvoke v2.<io.netty.channel.ReflectiveChannelFactory: void <init>(java.lang.Class)>(v3);
v4 = virtualinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrap channelFactory(io.netty.channel.ChannelFactory)>(v2);
return v4;
}
public io.netty.bootstrap.AbstractBootstrap channelFactory(io.netty.bootstrap.ChannelFactory)
{
java.lang.IllegalStateException v3;
io.netty.bootstrap.AbstractBootstrap v0, v4;
io.netty.bootstrap.ChannelFactory v1, v2;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 := @parameter0: io.netty.bootstrap.ChannelFactory;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "channelFactory");
v2 = v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.ChannelFactory channelFactory>;
if v2 == null goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("channelFactory set already");
throw v3;
label1:
v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.ChannelFactory channelFactory> = v1;
v4 = specialinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrap self()>();
return v4;
}
public io.netty.bootstrap.AbstractBootstrap channelFactory(io.netty.channel.ChannelFactory)
{
io.netty.bootstrap.AbstractBootstrap v0, v2;
io.netty.channel.ChannelFactory v1;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 := @parameter0: io.netty.channel.ChannelFactory;
v2 = virtualinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrap channelFactory(io.netty.bootstrap.ChannelFactory)>(v1);
return v2;
}
public io.netty.bootstrap.AbstractBootstrap localAddress(java.net.SocketAddress)
{
io.netty.bootstrap.AbstractBootstrap v0, v2;
java.net.SocketAddress v1;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 := @parameter0: java.net.SocketAddress;
v0.<io.netty.bootstrap.AbstractBootstrap: java.net.SocketAddress localAddress> = v1;
v2 = specialinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrap self()>();
return v2;
}
public io.netty.bootstrap.AbstractBootstrap localAddress(int)
{
int v1;
io.netty.bootstrap.AbstractBootstrap v0, v3;
java.net.InetSocketAddress v2;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 := @parameter0: int;
v2 = new java.net.InetSocketAddress;
specialinvoke v2.<java.net.InetSocketAddress: void <init>(int)>(v1);
v3 = virtualinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrap localAddress(java.net.SocketAddress)>(v2);
return v3;
}
public io.netty.bootstrap.AbstractBootstrap localAddress(java.lang.String, int)
{
int v2;
io.netty.bootstrap.AbstractBootstrap v0, v4;
java.lang.String v1;
java.net.InetSocketAddress v3;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = staticinvoke <io.netty.util.internal.SocketUtils: java.net.InetSocketAddress socketAddress(java.lang.String,int)>(v1, v2);
v4 = virtualinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrap localAddress(java.net.SocketAddress)>(v3);
return v4;
}
public io.netty.bootstrap.AbstractBootstrap localAddress(java.net.InetAddress, int)
{
java.net.InetAddress v1;
int v2;
io.netty.bootstrap.AbstractBootstrap v0, v4;
java.net.InetSocketAddress v3;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: int;
v3 = new java.net.InetSocketAddress;
specialinvoke v3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(v1, v2);
v4 = virtualinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrap localAddress(java.net.SocketAddress)>(v3);
return v4;
}
public io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption, java.lang.Object)
{
java.lang.Throwable v6;
io.netty.channel.ChannelOption v1;
java.util.Map v3, v4, v5;
io.netty.bootstrap.AbstractBootstrap v0, v7;
java.lang.Object v2;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 := @parameter0: io.netty.channel.ChannelOption;
v2 := @parameter1: java.lang.Object;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "option");
v3 = v0.<io.netty.bootstrap.AbstractBootstrap: java.util.Map options>;
entermonitor v3;
label1:
if v2 != null goto label2;
v4 = v0.<io.netty.bootstrap.AbstractBootstrap: java.util.Map options>;
interfaceinvoke v4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
goto label3;
label2:
v5 = v0.<io.netty.bootstrap.AbstractBootstrap: java.util.Map options>;
interfaceinvoke v5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
label3:
exitmonitor v3;
label4:
goto label6;
label5:
v6 := @caughtexception;
exitmonitor v3;
throw v6;
label6:
v7 = specialinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrap self()>();
return v7;
catch java.lang.Throwable from label1 to label4 with label5;
}
public io.netty.bootstrap.AbstractBootstrap attr(io.netty.util.AttributeKey, java.lang.Object)
{
io.netty.util.AttributeKey v1;
java.util.Map v3, v4;
io.netty.bootstrap.AbstractBootstrap v0, v5;
java.lang.Object v2;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 := @parameter0: io.netty.util.AttributeKey;
v2 := @parameter1: java.lang.Object;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "key");
if v2 != null goto label1;
v3 = v0.<io.netty.bootstrap.AbstractBootstrap: java.util.Map attrs>;
interfaceinvoke v3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
goto label2;
label1:
v4 = v0.<io.netty.bootstrap.AbstractBootstrap: java.util.Map attrs>;
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
label2:
v5 = specialinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrap self()>();
return v5;
}
public io.netty.bootstrap.AbstractBootstrap validate()
{
java.lang.IllegalStateException v2, v4;
io.netty.channel.EventLoopGroup v1;
io.netty.bootstrap.AbstractBootstrap v0, v5;
io.netty.bootstrap.ChannelFactory v3;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 = v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.channel.EventLoopGroup group>;
if v1 != null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("group not set");
throw v2;
label1:
v3 = v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.ChannelFactory channelFactory>;
if v3 != null goto label2;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("channel or channelFactory not set");
throw v4;
label2:
v5 = specialinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrap self()>();
return v5;
}
public abstract io.netty.bootstrap.AbstractBootstrap clone();
public io.netty.channel.ChannelFuture register()
{
io.netty.bootstrap.AbstractBootstrap v0;
io.netty.channel.ChannelFuture v1;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
virtualinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrap validate()>();
v1 = virtualinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.channel.ChannelFuture initAndRegister()>();
return v1;
}
public io.netty.channel.ChannelFuture bind()
{
java.lang.IllegalStateException v2;
java.net.SocketAddress v1;
io.netty.bootstrap.AbstractBootstrap v0;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
virtualinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrap validate()>();
v1 = v0.<io.netty.bootstrap.AbstractBootstrap: java.net.SocketAddress localAddress>;
if v1 != null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("localAddress not set");
throw v2;
label1:
v3 = specialinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.channel.ChannelFuture doBind(java.net.SocketAddress)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture bind(int)
{
int v1;
io.netty.bootstrap.AbstractBootstrap v0;
java.net.InetSocketAddress v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 := @parameter0: int;
v2 = new java.net.InetSocketAddress;
specialinvoke v2.<java.net.InetSocketAddress: void <init>(int)>(v1);
v3 = virtualinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.channel.ChannelFuture bind(java.net.SocketAddress)>(v2);
return v3;
}
public io.netty.channel.ChannelFuture bind(java.lang.String, int)
{
int v2;
io.netty.bootstrap.AbstractBootstrap v0;
java.lang.String v1;
java.net.InetSocketAddress v3;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = staticinvoke <io.netty.util.internal.SocketUtils: java.net.InetSocketAddress socketAddress(java.lang.String,int)>(v1, v2);
v4 = virtualinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.channel.ChannelFuture bind(java.net.SocketAddress)>(v3);
return v4;
}
public io.netty.channel.ChannelFuture bind(java.net.InetAddress, int)
{
java.net.InetAddress v1;
int v2;
io.netty.bootstrap.AbstractBootstrap v0;
java.net.InetSocketAddress v3;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: int;
v3 = new java.net.InetSocketAddress;
specialinvoke v3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(v1, v2);
v4 = virtualinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.channel.ChannelFuture bind(java.net.SocketAddress)>(v3);
return v4;
}
public io.netty.channel.ChannelFuture bind(java.net.SocketAddress)
{
java.net.SocketAddress v1;
io.netty.bootstrap.AbstractBootstrap v0;
java.lang.Object v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 := @parameter0: java.net.SocketAddress;
virtualinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrap validate()>();
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "localAddress");
v3 = specialinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.channel.ChannelFuture doBind(java.net.SocketAddress)>(v2);
return v3;
}
private io.netty.channel.ChannelFuture doBind(java.net.SocketAddress)
{
java.lang.Throwable v4;
java.net.SocketAddress v1;
io.netty.bootstrap.AbstractBootstrap$PendingRegistrationPromise v7;
io.netty.channel.ChannelFuture v2;
io.netty.channel.Channel v3;
io.netty.channel.ChannelPromise v6;
io.netty.bootstrap.AbstractBootstrap v0;
io.netty.bootstrap.AbstractBootstrap$1 v8;
boolean v5;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 := @parameter0: java.net.SocketAddress;
v2 = virtualinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.channel.ChannelFuture initAndRegister()>();
v3 = interfaceinvoke v2.<io.netty.channel.ChannelFuture: io.netty.channel.Channel channel()>();
v4 = interfaceinvoke v2.<io.netty.channel.ChannelFuture: java.lang.Throwable cause()>();
if v4 == null goto label1;
return v2;
label1:
v5 = interfaceinvoke v2.<io.netty.channel.ChannelFuture: boolean isDone()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v3.<io.netty.channel.Channel: io.netty.channel.ChannelPromise newPromise()>();
staticinvoke <io.netty.bootstrap.AbstractBootstrap: void doBind0(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v2, v3, v1, v6);
return v6;
label2:
v7 = new io.netty.bootstrap.AbstractBootstrap$PendingRegistrationPromise;
specialinvoke v7.<io.netty.bootstrap.AbstractBootstrap$PendingRegistrationPromise: void <init>(io.netty.channel.Channel)>(v3);
v8 = new io.netty.bootstrap.AbstractBootstrap$1;
specialinvoke v8.<io.netty.bootstrap.AbstractBootstrap$1: void <init>(io.netty.bootstrap.AbstractBootstrap,io.netty.bootstrap.AbstractBootstrap$PendingRegistrationPromise,io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress)>(v0, v7, v2, v3, v1);
interfaceinvoke v2.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v8);
return v7;
}
final io.netty.channel.ChannelFuture initAndRegister()
{
java.lang.Throwable v15, v3;
io.netty.bootstrap.AbstractBootstrapConfig v12;
io.netty.bootstrap.ChannelFactory v2;
io.netty.util.concurrent.GlobalEventExecutor v10, v6;
io.netty.channel.ChannelPromise v11, v7;
io.netty.bootstrap.FailedChannel v9;
io.netty.bootstrap.AbstractBootstrap v0;
io.netty.channel.DefaultChannelPromise v5, v8;
boolean v16;
io.netty.channel.EventLoopGroup v13;
io.netty.channel.Channel$Unsafe v17, v4;
io.netty.channel.ChannelFuture v14;
io.netty.channel.Channel v1;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 = null;
label1:
v2 = v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.ChannelFactory channelFactory>;
v1 = interfaceinvoke v2.<io.netty.bootstrap.ChannelFactory: io.netty.channel.Channel newChannel()>();
virtualinvoke v0.<io.netty.bootstrap.AbstractBootstrap: void init(io.netty.channel.Channel)>(v1);
label2:
goto label5;
label3:
v3 := @caughtexception;
if v1 == null goto label4;
v4 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.Channel$Unsafe unsafe()>();
interfaceinvoke v4.<io.netty.channel.Channel$Unsafe: void closeForcibly()>();
v5 = new io.netty.channel.DefaultChannelPromise;
v6 = <io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.GlobalEventExecutor INSTANCE>;
specialinvoke v5.<io.netty.channel.DefaultChannelPromise: void <init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)>(v1, v6);
v7 = virtualinvoke v5.<io.netty.channel.DefaultChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v3);
return v7;
label4:
v8 = new io.netty.channel.DefaultChannelPromise;
v9 = new io.netty.bootstrap.FailedChannel;
specialinvoke v9.<io.netty.bootstrap.FailedChannel: void <init>()>();
v10 = <io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.GlobalEventExecutor INSTANCE>;
specialinvoke v8.<io.netty.channel.DefaultChannelPromise: void <init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)>(v9, v10);
v11 = virtualinvoke v8.<io.netty.channel.DefaultChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v3);
return v11;
label5:
v12 = virtualinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrapConfig config()>();
v13 = virtualinvoke v12.<io.netty.bootstrap.AbstractBootstrapConfig: io.netty.channel.EventLoopGroup group()>();
v14 = interfaceinvoke v13.<io.netty.channel.EventLoopGroup: io.netty.channel.ChannelFuture register(io.netty.channel.Channel)>(v1);
v15 = interfaceinvoke v14.<io.netty.channel.ChannelFuture: java.lang.Throwable cause()>();
if v15 == null goto label7;
v16 = interfaceinvoke v1.<io.netty.channel.Channel: boolean isRegistered()>();
if v16 == 0 goto label6;
interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelFuture close()>();
goto label7;
label6:
v17 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.Channel$Unsafe unsafe()>();
interfaceinvoke v17.<io.netty.channel.Channel$Unsafe: void closeForcibly()>();
label7:
return v14;
catch java.lang.Throwable from label1 to label2 with label3;
}
abstract void init(io.netty.channel.Channel) throws java.lang.Exception;
private static void doBind0(io.netty.channel.ChannelFuture, io.netty.channel.Channel, java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
io.netty.channel.Channel v1;
io.netty.channel.ChannelPromise v3;
java.net.SocketAddress v2;
io.netty.channel.EventLoop v4;
io.netty.bootstrap.AbstractBootstrap$2 v5;
io.netty.channel.ChannelFuture v0;
v0 := @parameter0: io.netty.channel.ChannelFuture;
v1 := @parameter1: io.netty.channel.Channel;
v2 := @parameter2: java.net.SocketAddress;
v3 := @parameter3: io.netty.channel.ChannelPromise;
v4 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v5 = new io.netty.bootstrap.AbstractBootstrap$2;
specialinvoke v5.<io.netty.bootstrap.AbstractBootstrap$2: void <init>(io.netty.channel.ChannelFuture,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v0, v1, v2, v3);
interfaceinvoke v4.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v5);
return;
}
public io.netty.bootstrap.AbstractBootstrap handler(io.netty.channel.ChannelHandler)
{
io.netty.bootstrap.AbstractBootstrap v0, v3;
io.netty.channel.ChannelHandler v1;
java.lang.Object v2;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 := @parameter0: io.netty.channel.ChannelHandler;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "handler");
v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.channel.ChannelHandler handler> = v2;
v3 = specialinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrap self()>();
return v3;
}
public final io.netty.channel.EventLoopGroup group()
{
io.netty.bootstrap.AbstractBootstrap v0;
io.netty.channel.EventLoopGroup v1;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 = v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.channel.EventLoopGroup group>;
return v1;
}
public abstract io.netty.bootstrap.AbstractBootstrapConfig config();
final java.util.Map$Entry[] newOptionsArray()
{
io.netty.bootstrap.AbstractBootstrap v0;
java.util.Map$Entry[] v2;
java.util.Map v1;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 = v0.<io.netty.bootstrap.AbstractBootstrap: java.util.Map options>;
v2 = staticinvoke <io.netty.bootstrap.AbstractBootstrap: java.util.Map$Entry[] newOptionsArray(java.util.Map)>(v1);
return v2;
}
static java.util.Map$Entry[] newOptionsArray(java.util.Map)
{
java.lang.Throwable v5;
java.util.LinkedHashMap v1;
java.lang.Object[] v4;
java.util.Map v0;
java.util.Set v2;
java.util.Map$Entry[] v3;
v0 := @parameter0: java.util.Map;
entermonitor v0;
label1:
v1 = new java.util.LinkedHashMap;
specialinvoke v1.<java.util.LinkedHashMap: void <init>(java.util.Map)>(v0);
v2 = virtualinvoke v1.<java.util.LinkedHashMap: java.util.Set entrySet()>();
v3 = <io.netty.bootstrap.AbstractBootstrap: java.util.Map$Entry[] EMPTY_OPTION_ARRAY>;
v4 = interfaceinvoke v2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(v3);
exitmonitor v0;
label2:
return v4;
label3:
v5 := @caughtexception;
exitmonitor v0;
throw v5;
catch java.lang.Throwable from label1 to label2 with label3;
}
final java.util.Map$Entry[] newAttributesArray()
{
io.netty.bootstrap.AbstractBootstrap v0;
java.util.Map$Entry[] v2;
java.util.Map v1;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 = virtualinvoke v0.<io.netty.bootstrap.AbstractBootstrap: java.util.Map attrs0()>();
v2 = staticinvoke <io.netty.bootstrap.AbstractBootstrap: java.util.Map$Entry[] newAttributesArray(java.util.Map)>(v1);
return v2;
}
static java.util.Map$Entry[] newAttributesArray(java.util.Map)
{
java.lang.Object[] v3;
java.util.Map v0;
java.util.Set v1;
java.util.Map$Entry[] v2;
v0 := @parameter0: java.util.Map;
v1 = interfaceinvoke v0.<java.util.Map: java.util.Set entrySet()>();
v2 = <io.netty.bootstrap.AbstractBootstrap: java.util.Map$Entry[] EMPTY_ATTRIBUTE_ARRAY>;
v3 = interfaceinvoke v1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(v2);
return v3;
}
final java.util.Map options0()
{
io.netty.bootstrap.AbstractBootstrap v0;
java.util.Map v1;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 = v0.<io.netty.bootstrap.AbstractBootstrap: java.util.Map options>;
return v1;
}
final java.util.Map attrs0()
{
io.netty.bootstrap.AbstractBootstrap v0;
java.util.Map v1;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 = v0.<io.netty.bootstrap.AbstractBootstrap: java.util.Map attrs>;
return v1;
}
final java.net.SocketAddress localAddress()
{
io.netty.bootstrap.AbstractBootstrap v0;
java.net.SocketAddress v1;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 = v0.<io.netty.bootstrap.AbstractBootstrap: java.net.SocketAddress localAddress>;
return v1;
}
final io.netty.bootstrap.ChannelFactory channelFactory()
{
io.netty.bootstrap.AbstractBootstrap v0;
io.netty.bootstrap.ChannelFactory v1;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 = v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.ChannelFactory channelFactory>;
return v1;
}
final io.netty.channel.ChannelHandler handler()
{
io.netty.bootstrap.AbstractBootstrap v0;
io.netty.channel.ChannelHandler v1;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 = v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.channel.ChannelHandler handler>;
return v1;
}
final java.util.Map options()
{
java.lang.Throwable v4;
java.util.Map v1, v2, v3;
io.netty.bootstrap.AbstractBootstrap v0;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 = v0.<io.netty.bootstrap.AbstractBootstrap: java.util.Map options>;
entermonitor v1;
label1:
v2 = v0.<io.netty.bootstrap.AbstractBootstrap: java.util.Map options>;
v3 = staticinvoke <io.netty.bootstrap.AbstractBootstrap: java.util.Map copiedMap(java.util.Map)>(v2);
exitmonitor v1;
label2:
return v3;
label3:
v4 := @caughtexception;
exitmonitor v1;
throw v4;
catch java.lang.Throwable from label1 to label2 with label3;
}
final java.util.Map attrs()
{
io.netty.bootstrap.AbstractBootstrap v0;
java.util.Map v1, v2;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 = v0.<io.netty.bootstrap.AbstractBootstrap: java.util.Map attrs>;
v2 = staticinvoke <io.netty.bootstrap.AbstractBootstrap: java.util.Map copiedMap(java.util.Map)>(v1);
return v2;
}
static java.util.Map copiedMap(java.util.Map)
{
java.util.Map v0, v2, v4;
java.util.HashMap v3;
boolean v1;
v0 := @parameter0: java.util.Map;
v1 = interfaceinvoke v0.<java.util.Map: boolean isEmpty()>();
if v1 == 0 goto label1;
v2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
return v2;
label1:
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>(java.util.Map)>(v0);
v4 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v3);
return v4;
}
static void setAttributes(io.netty.channel.Channel, java.util.Map$Entry[])
{
io.netty.util.Attribute v6;
java.util.Map$Entry v4;
io.netty.channel.Channel v0;
int v2, v3;
java.lang.Object v5, v7;
java.util.Map$Entry[] v1;
v0 := @parameter0: io.netty.channel.Channel;
v1 := @parameter1: java.util.Map$Entry[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v6 = interfaceinvoke v0.<io.netty.channel.Channel: io.netty.util.Attribute attr(io.netty.util.AttributeKey)>(v5);
v7 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
interfaceinvoke v6.<io.netty.util.Attribute: void set(java.lang.Object)>(v7);
v3 = v3 + 1;
goto label1;
label2:
return;
}
static void setChannelOptions(io.netty.channel.Channel, java.util.Map$Entry[], io.netty.util.internal.logging.InternalLogger)
{
java.util.Map$Entry v5;
io.netty.channel.Channel v0;
io.netty.util.internal.logging.InternalLogger v2;
int v3, v4;
java.lang.Object v6, v7;
java.util.Map$Entry[] v1;
v0 := @parameter0: io.netty.channel.Channel;
v1 := @parameter1: java.util.Map$Entry[];
v2 := @parameter2: io.netty.util.internal.logging.InternalLogger;
v3 = lengthof v1;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v1[v4];
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
staticinvoke <io.netty.bootstrap.AbstractBootstrap: void setChannelOption(io.netty.channel.Channel,io.netty.channel.ChannelOption,java.lang.Object,io.netty.util.internal.logging.InternalLogger)>(v0, v6, v7, v2);
v4 = v4 + 1;
goto label1;
label2:
return;
}
private static void setChannelOption(io.netty.channel.Channel, io.netty.channel.ChannelOption, java.lang.Object, io.netty.util.internal.logging.InternalLogger)
{
java.lang.Throwable v6;
java.lang.Object[] v7;
io.netty.channel.ChannelOption v1;
io.netty.channel.Channel v0;
io.netty.channel.ChannelConfig v4;
io.netty.util.internal.logging.InternalLogger v3;
java.lang.Object v2;
boolean v5;
v0 := @parameter0: io.netty.channel.Channel;
v1 := @parameter1: io.netty.channel.ChannelOption;
v2 := @parameter2: java.lang.Object;
v3 := @parameter3: io.netty.util.internal.logging.InternalLogger;
label1:
v4 = interfaceinvoke v0.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v5 = interfaceinvoke v4.<io.netty.channel.ChannelConfig: boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)>(v1, v2);
if v5 != 0 goto label4;
interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Unknown channel option \'{}\' for channel \'{}\'", v1, v0);
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = newarray (java.lang.Object)[4];
v7[0] = v1;
v7[1] = v2;
v7[2] = v0;
v7[3] = v6;
interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object[])>("Failed to set channel option \'{}\' with value \'{}\' for channel \'{}\'", v7);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public java.lang.String toString()
{
io.netty.bootstrap.AbstractBootstrapConfig v2;
io.netty.bootstrap.AbstractBootstrap v0;
java.lang.String v1, v3;
v0 := @this: io.netty.bootstrap.AbstractBootstrap;
v1 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Object)>(v0);
v2 = virtualinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrapConfig config()>();
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,io.netty.bootstrap.AbstractBootstrapConfig)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001(\u0001)");
return v3;
}
static void <clinit>()
{
java.util.Map$Entry[] v0, v1;
v0 = newarray (java.util.Map$Entry)[0];
<io.netty.bootstrap.AbstractBootstrap: java.util.Map$Entry[] EMPTY_OPTION_ARRAY> = v0;
v1 = newarray (java.util.Map$Entry)[0];
<io.netty.bootstrap.AbstractBootstrap: java.util.Map$Entry[] EMPTY_ATTRIBUTE_ARRAY> = v1;
return;
}
}