public class io.netty.bootstrap.Bootstrap extends io.netty.bootstrap.AbstractBootstrap
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final io.netty.resolver.AddressResolverGroup DEFAULT_RESOLVER;
private final io.netty.bootstrap.BootstrapConfig config;
private volatile io.netty.resolver.AddressResolverGroup resolver;
private volatile java.net.SocketAddress remoteAddress;
public void <init>()
{
io.netty.bootstrap.Bootstrap v0;
io.netty.resolver.AddressResolverGroup v2;
io.netty.bootstrap.BootstrapConfig v1;
v0 := @this: io.netty.bootstrap.Bootstrap;
specialinvoke v0.<io.netty.bootstrap.AbstractBootstrap: void <init>()>();
v1 = new io.netty.bootstrap.BootstrapConfig;
specialinvoke v1.<io.netty.bootstrap.BootstrapConfig: void <init>(io.netty.bootstrap.Bootstrap)>(v0);
v0.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.BootstrapConfig config> = v1;
v2 = <io.netty.bootstrap.Bootstrap: io.netty.resolver.AddressResolverGroup DEFAULT_RESOLVER>;
v0.<io.netty.bootstrap.Bootstrap: io.netty.resolver.AddressResolverGroup resolver> = v2;
return;
}
private void <init>(io.netty.bootstrap.Bootstrap)
{
io.netty.bootstrap.Bootstrap v0, v1;
io.netty.resolver.AddressResolverGroup v3, v4;
java.net.SocketAddress v5;
io.netty.bootstrap.BootstrapConfig v2;
v0 := @this: io.netty.bootstrap.Bootstrap;
v1 := @parameter0: io.netty.bootstrap.Bootstrap;
specialinvoke v0.<io.netty.bootstrap.AbstractBootstrap: void <init>(io.netty.bootstrap.AbstractBootstrap)>(v1);
v2 = new io.netty.bootstrap.BootstrapConfig;
specialinvoke v2.<io.netty.bootstrap.BootstrapConfig: void <init>(io.netty.bootstrap.Bootstrap)>(v0);
v0.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.BootstrapConfig config> = v2;
v3 = <io.netty.bootstrap.Bootstrap: io.netty.resolver.AddressResolverGroup DEFAULT_RESOLVER>;
v0.<io.netty.bootstrap.Bootstrap: io.netty.resolver.AddressResolverGroup resolver> = v3;
v4 = v1.<io.netty.bootstrap.Bootstrap: io.netty.resolver.AddressResolverGroup resolver>;
v0.<io.netty.bootstrap.Bootstrap: io.netty.resolver.AddressResolverGroup resolver> = v4;
v5 = v1.<io.netty.bootstrap.Bootstrap: java.net.SocketAddress remoteAddress>;
v0.<io.netty.bootstrap.Bootstrap: java.net.SocketAddress remoteAddress> = v5;
return;
}
public io.netty.bootstrap.Bootstrap resolver(io.netty.resolver.AddressResolverGroup)
{
io.netty.bootstrap.Bootstrap v0;
io.netty.resolver.AddressResolverGroup v1, v2;
v0 := @this: io.netty.bootstrap.Bootstrap;
v1 := @parameter0: io.netty.resolver.AddressResolverGroup;
if v1 != null goto label1;
v2 = <io.netty.bootstrap.Bootstrap: io.netty.resolver.AddressResolverGroup DEFAULT_RESOLVER>;
goto label2;
label1:
v2 = v1;
label2:
v0.<io.netty.bootstrap.Bootstrap: io.netty.resolver.AddressResolverGroup resolver> = v2;
return v0;
}
public io.netty.bootstrap.Bootstrap remoteAddress(java.net.SocketAddress)
{
io.netty.bootstrap.Bootstrap v0;
java.net.SocketAddress v1;
v0 := @this: io.netty.bootstrap.Bootstrap;
v1 := @parameter0: java.net.SocketAddress;
v0.<io.netty.bootstrap.Bootstrap: java.net.SocketAddress remoteAddress> = v1;
return v0;
}
public io.netty.bootstrap.Bootstrap remoteAddress(java.lang.String, int)
{
io.netty.bootstrap.Bootstrap v0;
int v2;
java.lang.String v1;
java.net.InetSocketAddress v3;
v0 := @this: io.netty.bootstrap.Bootstrap;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>(v1, v2);
v0.<io.netty.bootstrap.Bootstrap: java.net.SocketAddress remoteAddress> = v3;
return v0;
}
public io.netty.bootstrap.Bootstrap remoteAddress(java.net.InetAddress, int)
{
java.net.InetAddress v1;
io.netty.bootstrap.Bootstrap v0;
int v2;
java.net.InetSocketAddress v3;
v0 := @this: io.netty.bootstrap.Bootstrap;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: int;
v3 = new java.net.InetSocketAddress;
specialinvoke v3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(v1, v2);
v0.<io.netty.bootstrap.Bootstrap: java.net.SocketAddress remoteAddress> = v3;
return v0;
}
public io.netty.channel.ChannelFuture connect()
{
io.netty.bootstrap.Bootstrap v0;
java.lang.IllegalStateException v2;
java.net.SocketAddress v1, v4;
io.netty.bootstrap.BootstrapConfig v3;
io.netty.channel.ChannelFuture v5;
v0 := @this: io.netty.bootstrap.Bootstrap;
virtualinvoke v0.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.Bootstrap validate()>();
v1 = v0.<io.netty.bootstrap.Bootstrap: java.net.SocketAddress remoteAddress>;
if v1 != null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("remoteAddress not set");
throw v2;
label1:
v3 = v0.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.BootstrapConfig config>;
v4 = virtualinvoke v3.<io.netty.bootstrap.BootstrapConfig: java.net.SocketAddress localAddress()>();
v5 = specialinvoke v0.<io.netty.bootstrap.Bootstrap: io.netty.channel.ChannelFuture doResolveAndConnect(java.net.SocketAddress,java.net.SocketAddress)>(v1, v4);
return v5;
}
public io.netty.channel.ChannelFuture connect(java.lang.String, int)
{
io.netty.bootstrap.Bootstrap v0;
int v2;
java.lang.String v1;
java.net.InetSocketAddress v3;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.bootstrap.Bootstrap;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>(v1, v2);
v4 = virtualinvoke v0.<io.netty.bootstrap.Bootstrap: io.netty.channel.ChannelFuture connect(java.net.SocketAddress)>(v3);
return v4;
}
public io.netty.channel.ChannelFuture connect(java.net.InetAddress, int)
{
java.net.InetAddress v1;
io.netty.bootstrap.Bootstrap v0;
int v2;
java.net.InetSocketAddress v3;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.bootstrap.Bootstrap;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: int;
v3 = new java.net.InetSocketAddress;
specialinvoke v3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(v1, v2);
v4 = virtualinvoke v0.<io.netty.bootstrap.Bootstrap: io.netty.channel.ChannelFuture connect(java.net.SocketAddress)>(v3);
return v4;
}
public io.netty.channel.ChannelFuture connect(java.net.SocketAddress)
{
io.netty.bootstrap.Bootstrap v0;
java.net.SocketAddress v1, v3;
io.netty.bootstrap.BootstrapConfig v2;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.bootstrap.Bootstrap;
v1 := @parameter0: java.net.SocketAddress;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "remoteAddress");
virtualinvoke v0.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.Bootstrap validate()>();
v2 = v0.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.BootstrapConfig config>;
v3 = virtualinvoke v2.<io.netty.bootstrap.BootstrapConfig: java.net.SocketAddress localAddress()>();
v4 = specialinvoke v0.<io.netty.bootstrap.Bootstrap: io.netty.channel.ChannelFuture doResolveAndConnect(java.net.SocketAddress,java.net.SocketAddress)>(v1, v3);
return v4;
}
public io.netty.channel.ChannelFuture connect(java.net.SocketAddress, java.net.SocketAddress)
{
io.netty.bootstrap.Bootstrap v0;
java.net.SocketAddress v1, v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.bootstrap.Bootstrap;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "remoteAddress");
virtualinvoke v0.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.Bootstrap validate()>();
v3 = specialinvoke v0.<io.netty.bootstrap.Bootstrap: io.netty.channel.ChannelFuture doResolveAndConnect(java.net.SocketAddress,java.net.SocketAddress)>(v1, v2);
return v3;
}
private io.netty.channel.ChannelFuture doResolveAndConnect(java.net.SocketAddress, java.net.SocketAddress)
{
java.net.SocketAddress v1, v2;
io.netty.bootstrap.AbstractBootstrap$PendingRegistrationPromise v9;
io.netty.channel.ChannelFuture v3, v8;
io.netty.channel.Channel v4;
io.netty.bootstrap.Bootstrap v0;
io.netty.channel.ChannelPromise v7;
boolean v5, v6;
io.netty.bootstrap.Bootstrap$1 v10;
v0 := @this: io.netty.bootstrap.Bootstrap;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
v3 = virtualinvoke v0.<io.netty.bootstrap.Bootstrap: io.netty.channel.ChannelFuture initAndRegister()>();
v4 = interfaceinvoke v3.<io.netty.channel.ChannelFuture: io.netty.channel.Channel channel()>();
v5 = interfaceinvoke v3.<io.netty.channel.ChannelFuture: boolean isDone()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v3.<io.netty.channel.ChannelFuture: boolean isSuccess()>();
if v6 != 0 goto label1;
return v3;
label1:
v7 = interfaceinvoke v4.<io.netty.channel.Channel: io.netty.channel.ChannelPromise newPromise()>();
v8 = specialinvoke v0.<io.netty.bootstrap.Bootstrap: io.netty.channel.ChannelFuture doResolveAndConnect0(io.netty.channel.Channel,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v4, v1, v2, v7);
return v8;
label2:
v9 = new io.netty.bootstrap.AbstractBootstrap$PendingRegistrationPromise;
specialinvoke v9.<io.netty.bootstrap.AbstractBootstrap$PendingRegistrationPromise: void <init>(io.netty.channel.Channel)>(v4);
v10 = new io.netty.bootstrap.Bootstrap$1;
specialinvoke v10.<io.netty.bootstrap.Bootstrap$1: void <init>(io.netty.bootstrap.Bootstrap,io.netty.bootstrap.AbstractBootstrap$PendingRegistrationPromise,io.netty.channel.Channel,java.net.SocketAddress,java.net.SocketAddress)>(v0, v9, v4, v1, v2);
interfaceinvoke v3.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v10);
return v9;
}
private io.netty.channel.ChannelFuture doResolveAndConnect0(io.netty.channel.Channel, java.net.SocketAddress, java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v14, v17, v8;
java.net.SocketAddress v2, v3;
io.netty.bootstrap.Bootstrap$2 v16;
io.netty.channel.ChannelPromise v4, v9;
boolean v10, v11, v13;
io.netty.resolver.AddressResolver v7;
io.netty.channel.EventLoop v5;
io.netty.channel.Channel v1;
io.netty.bootstrap.Bootstrap v0;
io.netty.resolver.AddressResolverGroup v6;
java.lang.Object v15;
io.netty.util.concurrent.Future v12;
v0 := @this: io.netty.bootstrap.Bootstrap;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: java.net.SocketAddress;
v3 := @parameter2: java.net.SocketAddress;
v4 := @parameter3: io.netty.channel.ChannelPromise;
label01:
v5 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
label02:
v6 = v0.<io.netty.bootstrap.Bootstrap: io.netty.resolver.AddressResolverGroup resolver>;
v7 = virtualinvoke v6.<io.netty.resolver.AddressResolverGroup: io.netty.resolver.AddressResolver getResolver(io.netty.util.concurrent.EventExecutor)>(v5);
label03:
goto label06;
label04:
v8 := @caughtexception;
interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelFuture close()>();
v9 = interfaceinvoke v4.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v8);
label05:
return v9;
label06:
v10 = interfaceinvoke v7.<io.netty.resolver.AddressResolver: boolean isSupported(java.net.SocketAddress)>(v2);
if v10 == 0 goto label07;
v11 = interfaceinvoke v7.<io.netty.resolver.AddressResolver: boolean isResolved(java.net.SocketAddress)>(v2);
if v11 == 0 goto label09;
label07:
staticinvoke <io.netty.bootstrap.Bootstrap: void doConnect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v2, v3, v4);
label08:
return v4;
label09:
v12 = interfaceinvoke v7.<io.netty.resolver.AddressResolver: io.netty.util.concurrent.Future resolve(java.net.SocketAddress)>(v2);
v13 = interfaceinvoke v12.<io.netty.util.concurrent.Future: boolean isDone()>();
if v13 == 0 goto label12;
v14 = interfaceinvoke v12.<io.netty.util.concurrent.Future: java.lang.Throwable cause()>();
if v14 == null goto label10;
interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelFuture close()>();
interfaceinvoke v4.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v14);
goto label11;
label10:
v15 = interfaceinvoke v12.<io.netty.util.concurrent.Future: java.lang.Object getNow()>();
staticinvoke <io.netty.bootstrap.Bootstrap: void doConnect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v15, v3, v4);
label11:
return v4;
label12:
v16 = new io.netty.bootstrap.Bootstrap$2;
specialinvoke v16.<io.netty.bootstrap.Bootstrap$2: void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.Channel,io.netty.channel.ChannelPromise,java.net.SocketAddress)>(v0, v1, v4, v3);
interfaceinvoke v12.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v16);
label13:
goto label15;
label14:
v17 := @caughtexception;
interfaceinvoke v4.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v17);
label15:
return v4;
catch java.lang.Throwable from label02 to label03 with label04;
catch java.lang.Throwable from label01 to label05 with label14;
catch java.lang.Throwable from label06 to label08 with label14;
catch java.lang.Throwable from label09 to label11 with label14;
catch java.lang.Throwable from label12 to label13 with label14;
}
private static void doConnect(java.net.SocketAddress, java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
io.netty.channel.Channel v3;
io.netty.bootstrap.Bootstrap$3 v5;
io.netty.channel.ChannelPromise v2;
java.net.SocketAddress v0, v1;
io.netty.channel.EventLoop v4;
v0 := @parameter0: java.net.SocketAddress;
v1 := @parameter1: java.net.SocketAddress;
v2 := @parameter2: io.netty.channel.ChannelPromise;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.Channel channel()>();
v4 = interfaceinvoke v3.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v5 = new io.netty.bootstrap.Bootstrap$3;
specialinvoke v5.<io.netty.bootstrap.Bootstrap$3: void <init>(java.net.SocketAddress,io.netty.channel.Channel,java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v1, v3, v0, v2);
interfaceinvoke v4.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v5);
return;
}
void init(io.netty.channel.Channel)
{
io.netty.channel.ChannelPipeline v2;
io.netty.channel.ChannelHandler[] v3;
io.netty.channel.Channel v1;
io.netty.bootstrap.Bootstrap v0;
io.netty.util.internal.logging.InternalLogger v7;
io.netty.channel.ChannelHandler v5;
io.netty.bootstrap.BootstrapConfig v4;
java.util.Map$Entry[] v6, v8;
v0 := @this: io.netty.bootstrap.Bootstrap;
v1 := @parameter0: io.netty.channel.Channel;
v2 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v3 = newarray (io.netty.channel.ChannelHandler)[1];
v4 = v0.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.BootstrapConfig config>;
v5 = virtualinvoke v4.<io.netty.bootstrap.BootstrapConfig: io.netty.channel.ChannelHandler handler()>();
v3[0] = v5;
interfaceinvoke v2.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.channel.ChannelHandler[])>(v3);
v6 = virtualinvoke v0.<io.netty.bootstrap.Bootstrap: java.util.Map$Entry[] newOptionsArray()>();
v7 = <io.netty.bootstrap.Bootstrap: io.netty.util.internal.logging.InternalLogger logger>;
staticinvoke <io.netty.bootstrap.Bootstrap: void setChannelOptions(io.netty.channel.Channel,java.util.Map$Entry[],io.netty.util.internal.logging.InternalLogger)>(v1, v6, v7);
v8 = virtualinvoke v0.<io.netty.bootstrap.Bootstrap: java.util.Map$Entry[] newAttributesArray()>();
staticinvoke <io.netty.bootstrap.Bootstrap: void setAttributes(io.netty.channel.Channel,java.util.Map$Entry[])>(v1, v8);
return;
}
public io.netty.bootstrap.Bootstrap validate()
{
io.netty.bootstrap.Bootstrap v0;
java.lang.IllegalStateException v3;
io.netty.channel.ChannelHandler v2;
io.netty.bootstrap.BootstrapConfig v1;
v0 := @this: io.netty.bootstrap.Bootstrap;
specialinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrap validate()>();
v1 = v0.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.BootstrapConfig config>;
v2 = virtualinvoke v1.<io.netty.bootstrap.BootstrapConfig: io.netty.channel.ChannelHandler handler()>();
if v2 != null goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("handler not set");
throw v3;
label1:
return v0;
}
public io.netty.bootstrap.Bootstrap clone()
{
io.netty.bootstrap.Bootstrap v0, v1;
v0 := @this: io.netty.bootstrap.Bootstrap;
v1 = new io.netty.bootstrap.Bootstrap;
specialinvoke v1.<io.netty.bootstrap.Bootstrap: void <init>(io.netty.bootstrap.Bootstrap)>(v0);
return v1;
}
public io.netty.bootstrap.Bootstrap clone(io.netty.channel.EventLoopGroup)
{
io.netty.bootstrap.Bootstrap v0, v2;
io.netty.channel.EventLoopGroup v1;
v0 := @this: io.netty.bootstrap.Bootstrap;
v1 := @parameter0: io.netty.channel.EventLoopGroup;
v2 = new io.netty.bootstrap.Bootstrap;
specialinvoke v2.<io.netty.bootstrap.Bootstrap: void <init>(io.netty.bootstrap.Bootstrap)>(v0);
v2.<io.netty.bootstrap.Bootstrap: io.netty.channel.EventLoopGroup group> = v1;
return v2;
}
public final io.netty.bootstrap.BootstrapConfig config()
{
io.netty.bootstrap.Bootstrap v0;
io.netty.bootstrap.BootstrapConfig v1;
v0 := @this: io.netty.bootstrap.Bootstrap;
v1 = v0.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.BootstrapConfig config>;
return v1;
}
final java.net.SocketAddress remoteAddress()
{
io.netty.bootstrap.Bootstrap v0;
java.net.SocketAddress v1;
v0 := @this: io.netty.bootstrap.Bootstrap;
v1 = v0.<io.netty.bootstrap.Bootstrap: java.net.SocketAddress remoteAddress>;
return v1;
}
final io.netty.resolver.AddressResolverGroup resolver()
{
io.netty.bootstrap.Bootstrap v0;
io.netty.resolver.AddressResolverGroup v1;
v0 := @this: io.netty.bootstrap.Bootstrap;
v1 = v0.<io.netty.bootstrap.Bootstrap: io.netty.resolver.AddressResolverGroup resolver>;
return v1;
}
static void <clinit>()
{
io.netty.resolver.DefaultAddressResolverGroup v1;
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/bootstrap/Bootstrap;");
<io.netty.bootstrap.Bootstrap: io.netty.util.internal.logging.InternalLogger logger> = v0;
v1 = <io.netty.resolver.DefaultAddressResolverGroup: io.netty.resolver.DefaultAddressResolverGroup INSTANCE>;
<io.netty.bootstrap.Bootstrap: io.netty.resolver.AddressResolverGroup DEFAULT_RESOLVER> = v1;
return;
}
}