public class io.netty.bootstrap.ServerBootstrap extends io.netty.bootstrap.AbstractBootstrap
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private final java.util.Map childOptions;
private final java.util.Map childAttrs;
private final io.netty.bootstrap.ServerBootstrapConfig config;
private volatile io.netty.channel.EventLoopGroup childGroup;
private volatile io.netty.channel.ChannelHandler childHandler;
public void <init>()
{
java.util.LinkedHashMap v1;
java.util.concurrent.ConcurrentHashMap v2;
io.netty.bootstrap.ServerBootstrap v0;
io.netty.bootstrap.ServerBootstrapConfig v3;
v0 := @this: io.netty.bootstrap.ServerBootstrap;
specialinvoke v0.<io.netty.bootstrap.AbstractBootstrap: void <init>()>();
v1 = new java.util.LinkedHashMap;
specialinvoke v1.<java.util.LinkedHashMap: void <init>()>();
v0.<io.netty.bootstrap.ServerBootstrap: java.util.Map childOptions> = v1;
v2 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.netty.bootstrap.ServerBootstrap: java.util.Map childAttrs> = v2;
v3 = new io.netty.bootstrap.ServerBootstrapConfig;
specialinvoke v3.<io.netty.bootstrap.ServerBootstrapConfig: void <init>(io.netty.bootstrap.ServerBootstrap)>(v0);
v0.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.ServerBootstrapConfig config> = v3;
return;
}
private void <init>(io.netty.bootstrap.ServerBootstrap)
{
java.lang.Throwable v10;
io.netty.channel.EventLoopGroup v5;
java.util.concurrent.ConcurrentHashMap v3;
java.util.LinkedHashMap v2;
java.util.Map v11, v12, v7, v8, v9;
io.netty.bootstrap.ServerBootstrap v0, v1;
io.netty.channel.ChannelHandler v6;
io.netty.bootstrap.ServerBootstrapConfig v4;
v0 := @this: io.netty.bootstrap.ServerBootstrap;
v1 := @parameter0: io.netty.bootstrap.ServerBootstrap;
specialinvoke v0.<io.netty.bootstrap.AbstractBootstrap: void <init>(io.netty.bootstrap.AbstractBootstrap)>(v1);
v2 = new java.util.LinkedHashMap;
specialinvoke v2.<java.util.LinkedHashMap: void <init>()>();
v0.<io.netty.bootstrap.ServerBootstrap: java.util.Map childOptions> = v2;
v3 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.netty.bootstrap.ServerBootstrap: java.util.Map childAttrs> = v3;
v4 = new io.netty.bootstrap.ServerBootstrapConfig;
specialinvoke v4.<io.netty.bootstrap.ServerBootstrapConfig: void <init>(io.netty.bootstrap.ServerBootstrap)>(v0);
v0.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.ServerBootstrapConfig config> = v4;
v5 = v1.<io.netty.bootstrap.ServerBootstrap: io.netty.channel.EventLoopGroup childGroup>;
v0.<io.netty.bootstrap.ServerBootstrap: io.netty.channel.EventLoopGroup childGroup> = v5;
v6 = v1.<io.netty.bootstrap.ServerBootstrap: io.netty.channel.ChannelHandler childHandler>;
v0.<io.netty.bootstrap.ServerBootstrap: io.netty.channel.ChannelHandler childHandler> = v6;
v7 = v1.<io.netty.bootstrap.ServerBootstrap: java.util.Map childOptions>;
entermonitor v7;
label1:
v8 = v0.<io.netty.bootstrap.ServerBootstrap: java.util.Map childOptions>;
v9 = v1.<io.netty.bootstrap.ServerBootstrap: java.util.Map childOptions>;
interfaceinvoke v8.<java.util.Map: void putAll(java.util.Map)>(v9);
exitmonitor v7;
label2:
goto label4;
label3:
v10 := @caughtexception;
exitmonitor v7;
throw v10;
label4:
v11 = v0.<io.netty.bootstrap.ServerBootstrap: java.util.Map childAttrs>;
v12 = v1.<io.netty.bootstrap.ServerBootstrap: java.util.Map childAttrs>;
interfaceinvoke v11.<java.util.Map: void putAll(java.util.Map)>(v12);
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.netty.bootstrap.ServerBootstrap group(io.netty.channel.EventLoopGroup)
{
io.netty.bootstrap.ServerBootstrap v0, v2;
io.netty.channel.EventLoopGroup v1;
v0 := @this: io.netty.bootstrap.ServerBootstrap;
v1 := @parameter0: io.netty.channel.EventLoopGroup;
v2 = virtualinvoke v0.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.ServerBootstrap group(io.netty.channel.EventLoopGroup,io.netty.channel.EventLoopGroup)>(v1, v1);
return v2;
}
public io.netty.bootstrap.ServerBootstrap group(io.netty.channel.EventLoopGroup, io.netty.channel.EventLoopGroup)
{
java.lang.IllegalStateException v4;
io.netty.channel.EventLoopGroup v1, v2, v3;
io.netty.bootstrap.ServerBootstrap v0;
java.lang.Object v5;
v0 := @this: io.netty.bootstrap.ServerBootstrap;
v1 := @parameter0: io.netty.channel.EventLoopGroup;
v2 := @parameter1: io.netty.channel.EventLoopGroup;
specialinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrap group(io.netty.channel.EventLoopGroup)>(v1);
v3 = v0.<io.netty.bootstrap.ServerBootstrap: io.netty.channel.EventLoopGroup childGroup>;
if v3 == null goto label1;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("childGroup set already");
throw v4;
label1:
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "childGroup");
v0.<io.netty.bootstrap.ServerBootstrap: io.netty.channel.EventLoopGroup childGroup> = v5;
return v0;
}
public io.netty.bootstrap.ServerBootstrap childOption(io.netty.channel.ChannelOption, java.lang.Object)
{
java.lang.Throwable v6;
io.netty.channel.ChannelOption v1;
java.util.Map v3, v4, v5;
io.netty.bootstrap.ServerBootstrap v0;
java.lang.Object v2;
v0 := @this: io.netty.bootstrap.ServerBootstrap;
v1 := @parameter0: io.netty.channel.ChannelOption;
v2 := @parameter1: java.lang.Object;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "childOption");
v3 = v0.<io.netty.bootstrap.ServerBootstrap: java.util.Map childOptions>;
entermonitor v3;
label1:
if v2 != null goto label2;
v4 = v0.<io.netty.bootstrap.ServerBootstrap: java.util.Map childOptions>;
interfaceinvoke v4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
goto label3;
label2:
v5 = v0.<io.netty.bootstrap.ServerBootstrap: java.util.Map childOptions>;
interfaceinvoke v5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
label3:
exitmonitor v3;
label4:
goto label6;
label5:
v6 := @caughtexception;
exitmonitor v3;
throw v6;
label6:
return v0;
catch java.lang.Throwable from label1 to label4 with label5;
}
public io.netty.bootstrap.ServerBootstrap childAttr(io.netty.util.AttributeKey, java.lang.Object)
{
io.netty.util.AttributeKey v1;
java.util.Map v3, v4;
io.netty.bootstrap.ServerBootstrap v0;
java.lang.Object v2;
v0 := @this: io.netty.bootstrap.ServerBootstrap;
v1 := @parameter0: io.netty.util.AttributeKey;
v2 := @parameter1: java.lang.Object;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "childKey");
if v2 != null goto label1;
v3 = v0.<io.netty.bootstrap.ServerBootstrap: java.util.Map childAttrs>;
interfaceinvoke v3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
goto label2;
label1:
v4 = v0.<io.netty.bootstrap.ServerBootstrap: java.util.Map childAttrs>;
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
label2:
return v0;
}
public io.netty.bootstrap.ServerBootstrap childHandler(io.netty.channel.ChannelHandler)
{
io.netty.bootstrap.ServerBootstrap v0;
io.netty.channel.ChannelHandler v1;
java.lang.Object v2;
v0 := @this: io.netty.bootstrap.ServerBootstrap;
v1 := @parameter0: io.netty.channel.ChannelHandler;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "childHandler");
v0.<io.netty.bootstrap.ServerBootstrap: io.netty.channel.ChannelHandler childHandler> = v2;
return v0;
}
void init(io.netty.channel.Channel)
{
io.netty.channel.EventLoopGroup v6;
io.netty.channel.ChannelPipeline v5;
io.netty.channel.ChannelHandler[] v12;
io.netty.channel.Channel v1;
io.netty.bootstrap.ServerBootstrap$1 v13;
io.netty.util.internal.logging.InternalLogger v3;
java.util.Map v10, v8;
io.netty.bootstrap.ServerBootstrap v0;
io.netty.channel.ChannelHandler v7;
java.util.Map$Entry[] v11, v2, v4, v9;
v0 := @this: io.netty.bootstrap.ServerBootstrap;
v1 := @parameter0: io.netty.channel.Channel;
v2 = virtualinvoke v0.<io.netty.bootstrap.ServerBootstrap: java.util.Map$Entry[] newOptionsArray()>();
v3 = <io.netty.bootstrap.ServerBootstrap: io.netty.util.internal.logging.InternalLogger logger>;
staticinvoke <io.netty.bootstrap.ServerBootstrap: void setChannelOptions(io.netty.channel.Channel,java.util.Map$Entry[],io.netty.util.internal.logging.InternalLogger)>(v1, v2, v3);
v4 = virtualinvoke v0.<io.netty.bootstrap.ServerBootstrap: java.util.Map$Entry[] newAttributesArray()>();
staticinvoke <io.netty.bootstrap.ServerBootstrap: void setAttributes(io.netty.channel.Channel,java.util.Map$Entry[])>(v1, v4);
v5 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v6 = v0.<io.netty.bootstrap.ServerBootstrap: io.netty.channel.EventLoopGroup childGroup>;
v7 = v0.<io.netty.bootstrap.ServerBootstrap: io.netty.channel.ChannelHandler childHandler>;
v8 = v0.<io.netty.bootstrap.ServerBootstrap: java.util.Map childOptions>;
v9 = staticinvoke <io.netty.bootstrap.ServerBootstrap: java.util.Map$Entry[] newOptionsArray(java.util.Map)>(v8);
v10 = v0.<io.netty.bootstrap.ServerBootstrap: java.util.Map childAttrs>;
v11 = staticinvoke <io.netty.bootstrap.ServerBootstrap: java.util.Map$Entry[] newAttributesArray(java.util.Map)>(v10);
v12 = newarray (io.netty.channel.ChannelHandler)[1];
v13 = new io.netty.bootstrap.ServerBootstrap$1;
specialinvoke v13.<io.netty.bootstrap.ServerBootstrap$1: void <init>(io.netty.bootstrap.ServerBootstrap,io.netty.channel.EventLoopGroup,io.netty.channel.ChannelHandler,java.util.Map$Entry[],java.util.Map$Entry[])>(v0, v6, v7, v9, v11);
v12[0] = v13;
interfaceinvoke v5.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.channel.ChannelHandler[])>(v12);
return;
}
public io.netty.bootstrap.ServerBootstrap validate()
{
java.lang.IllegalStateException v2;
io.netty.channel.EventLoopGroup v3, v6;
io.netty.util.internal.logging.InternalLogger v4;
io.netty.bootstrap.ServerBootstrap v0;
io.netty.channel.ChannelHandler v1;
io.netty.bootstrap.ServerBootstrapConfig v5;
v0 := @this: io.netty.bootstrap.ServerBootstrap;
specialinvoke v0.<io.netty.bootstrap.AbstractBootstrap: io.netty.bootstrap.AbstractBootstrap validate()>();
v1 = v0.<io.netty.bootstrap.ServerBootstrap: io.netty.channel.ChannelHandler childHandler>;
if v1 != null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("childHandler not set");
throw v2;
label1:
v3 = v0.<io.netty.bootstrap.ServerBootstrap: io.netty.channel.EventLoopGroup childGroup>;
if v3 != null goto label2;
v4 = <io.netty.bootstrap.ServerBootstrap: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v4.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String)>("childGroup is not set. Using parentGroup instead.");
v5 = v0.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.ServerBootstrapConfig config>;
v6 = virtualinvoke v5.<io.netty.bootstrap.ServerBootstrapConfig: io.netty.channel.EventLoopGroup group()>();
v0.<io.netty.bootstrap.ServerBootstrap: io.netty.channel.EventLoopGroup childGroup> = v6;
label2:
return v0;
}
public io.netty.bootstrap.ServerBootstrap clone()
{
io.netty.bootstrap.ServerBootstrap v0, v1;
v0 := @this: io.netty.bootstrap.ServerBootstrap;
v1 = new io.netty.bootstrap.ServerBootstrap;
specialinvoke v1.<io.netty.bootstrap.ServerBootstrap: void <init>(io.netty.bootstrap.ServerBootstrap)>(v0);
return v1;
}
public io.netty.channel.EventLoopGroup childGroup()
{
io.netty.bootstrap.ServerBootstrap v0;
io.netty.channel.EventLoopGroup v1;
v0 := @this: io.netty.bootstrap.ServerBootstrap;
v1 = v0.<io.netty.bootstrap.ServerBootstrap: io.netty.channel.EventLoopGroup childGroup>;
return v1;
}
final io.netty.channel.ChannelHandler childHandler()
{
io.netty.bootstrap.ServerBootstrap v0;
io.netty.channel.ChannelHandler v1;
v0 := @this: io.netty.bootstrap.ServerBootstrap;
v1 = v0.<io.netty.bootstrap.ServerBootstrap: io.netty.channel.ChannelHandler childHandler>;
return v1;
}
final java.util.Map childOptions()
{
java.lang.Throwable v4;
java.util.Map v1, v2, v3;
io.netty.bootstrap.ServerBootstrap v0;
v0 := @this: io.netty.bootstrap.ServerBootstrap;
v1 = v0.<io.netty.bootstrap.ServerBootstrap: java.util.Map childOptions>;
entermonitor v1;
label1:
v2 = v0.<io.netty.bootstrap.ServerBootstrap: java.util.Map childOptions>;
v3 = staticinvoke <io.netty.bootstrap.ServerBootstrap: java.util.Map copiedMap(java.util.Map)>(v2);
exitmonitor v1;
label2:
return v3;
label3:
v4 := @caughtexception;
exitmonitor v1;
throw v4;
catch java.lang.Throwable from label1 to label2 with label3;
}
final java.util.Map childAttrs()
{
io.netty.bootstrap.ServerBootstrap v0;
java.util.Map v1, v2;
v0 := @this: io.netty.bootstrap.ServerBootstrap;
v1 = v0.<io.netty.bootstrap.ServerBootstrap: java.util.Map childAttrs>;
v2 = staticinvoke <io.netty.bootstrap.ServerBootstrap: java.util.Map copiedMap(java.util.Map)>(v1);
return v2;
}
public final io.netty.bootstrap.ServerBootstrapConfig config()
{
io.netty.bootstrap.ServerBootstrap v0;
io.netty.bootstrap.ServerBootstrapConfig v1;
v0 := @this: io.netty.bootstrap.ServerBootstrap;
v1 = v0.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.ServerBootstrapConfig config>;
return v1;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/bootstrap/ServerBootstrap;");
<io.netty.bootstrap.ServerBootstrap: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}