abstract class io.netty.buffer.PoolArena extends io.netty.buffer.SizeClasses implements io.netty.buffer.PoolArenaMetric
{
private static final boolean HAS_UNSAFE;
final io.netty.buffer.PooledByteBufAllocator parent;
final int numSmallSubpagePools;
final int directMemoryCacheAlignment;
private final io.netty.buffer.PoolSubpage[] smallSubpagePools;
private final io.netty.buffer.PoolChunkList q050;
private final io.netty.buffer.PoolChunkList q025;
private final io.netty.buffer.PoolChunkList q000;
private final io.netty.buffer.PoolChunkList qInit;
private final io.netty.buffer.PoolChunkList q075;
private final io.netty.buffer.PoolChunkList q100;
private final java.util.List chunkListMetrics;
private long allocationsNormal;
private final io.netty.util.internal.LongCounter allocationsSmall;
private final io.netty.util.internal.LongCounter allocationsHuge;
private final io.netty.util.internal.LongCounter activeBytesHuge;
private long deallocationsSmall;
private long deallocationsNormal;
private final io.netty.util.internal.LongCounter deallocationsHuge;
final java.util.concurrent.atomic.AtomicInteger numThreadCaches;
private final java.util.concurrent.locks.ReentrantLock lock;
static final boolean $assertionsDisabled;
protected void <init>(io.netty.buffer.PooledByteBufAllocator, int, int, int, int)
{
io.netty.buffer.PoolChunkList v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v43, v44, v45, v46, v47, v48;
io.netty.buffer.PoolSubpage v19;
java.util.concurrent.atomic.AtomicInteger v10;
io.netty.buffer.PoolSubpage[] v14, v16, v18;
io.netty.buffer.PoolArena v0;
io.netty.buffer.PooledByteBufAllocator v1;
java.util.List v49;
io.netty.util.internal.LongCounter v6, v7, v8, v9;
java.util.ArrayList v42;
int v12, v13, v15, v17, v2, v3, v4, v5;
java.util.concurrent.locks.ReentrantLock v11;
v0 := @this: io.netty.buffer.PoolArena;
v1 := @parameter0: io.netty.buffer.PooledByteBufAllocator;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: int;
specialinvoke v0.<io.netty.buffer.SizeClasses: void <init>(int,int,int,int)>(v2, v3, v4, v5);
v6 = staticinvoke <io.netty.util.internal.PlatformDependent: io.netty.util.internal.LongCounter newLongCounter()>();
v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter allocationsSmall> = v6;
v7 = staticinvoke <io.netty.util.internal.PlatformDependent: io.netty.util.internal.LongCounter newLongCounter()>();
v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter allocationsHuge> = v7;
v8 = staticinvoke <io.netty.util.internal.PlatformDependent: io.netty.util.internal.LongCounter newLongCounter()>();
v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter activeBytesHuge> = v8;
v9 = staticinvoke <io.netty.util.internal.PlatformDependent: io.netty.util.internal.LongCounter newLongCounter()>();
v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter deallocationsHuge> = v9;
v10 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v10.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.netty.buffer.PoolArena: java.util.concurrent.atomic.AtomicInteger numThreadCaches> = v10;
v11 = new java.util.concurrent.locks.ReentrantLock;
specialinvoke v11.<java.util.concurrent.locks.ReentrantLock: void <init>()>();
v0.<io.netty.buffer.PoolArena: java.util.concurrent.locks.ReentrantLock lock> = v11;
v0.<io.netty.buffer.PoolArena: io.netty.buffer.PooledByteBufAllocator parent> = v1;
v0.<io.netty.buffer.PoolArena: int directMemoryCacheAlignment> = v5;
v12 = v0.<io.netty.buffer.PoolArena: int nSubpages>;
v0.<io.netty.buffer.PoolArena: int numSmallSubpagePools> = v12;
v13 = v0.<io.netty.buffer.PoolArena: int numSmallSubpagePools>;
v14 = specialinvoke v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolSubpage[] newSubpagePoolArray(int)>(v13);
v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolSubpage[] smallSubpagePools> = v14;
v15 = 0;
label1:
v16 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolSubpage[] smallSubpagePools>;
v17 = lengthof v16;
if v15 >= v17 goto label2;
v18 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolSubpage[] smallSubpagePools>;
v19 = specialinvoke v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolSubpage newSubpagePoolHead()>();
v18[v15] = v19;
v15 = v15 + 1;
goto label1;
label2:
v20 = new io.netty.buffer.PoolChunkList;
specialinvoke v20.<io.netty.buffer.PoolChunkList: void <init>(io.netty.buffer.PoolArena,io.netty.buffer.PoolChunkList,int,int,int)>(v0, null, 100, 2147483647, v4);
v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q100> = v20;
v21 = new io.netty.buffer.PoolChunkList;
v22 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q100>;
specialinvoke v21.<io.netty.buffer.PoolChunkList: void <init>(io.netty.buffer.PoolArena,io.netty.buffer.PoolChunkList,int,int,int)>(v0, v22, 75, 100, v4);
v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q075> = v21;
v23 = new io.netty.buffer.PoolChunkList;
v24 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q075>;
specialinvoke v23.<io.netty.buffer.PoolChunkList: void <init>(io.netty.buffer.PoolArena,io.netty.buffer.PoolChunkList,int,int,int)>(v0, v24, 50, 100, v4);
v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q050> = v23;
v25 = new io.netty.buffer.PoolChunkList;
v26 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q050>;
specialinvoke v25.<io.netty.buffer.PoolChunkList: void <init>(io.netty.buffer.PoolArena,io.netty.buffer.PoolChunkList,int,int,int)>(v0, v26, 25, 75, v4);
v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q025> = v25;
v27 = new io.netty.buffer.PoolChunkList;
v28 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q025>;
specialinvoke v27.<io.netty.buffer.PoolChunkList: void <init>(io.netty.buffer.PoolArena,io.netty.buffer.PoolChunkList,int,int,int)>(v0, v28, 1, 50, v4);
v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q000> = v27;
v29 = new io.netty.buffer.PoolChunkList;
v30 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q000>;
specialinvoke v29.<io.netty.buffer.PoolChunkList: void <init>(io.netty.buffer.PoolArena,io.netty.buffer.PoolChunkList,int,int,int)>(v0, v30, -2147483648, 25, v4);
v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList qInit> = v29;
v31 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q100>;
v32 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q075>;
virtualinvoke v31.<io.netty.buffer.PoolChunkList: void prevList(io.netty.buffer.PoolChunkList)>(v32);
v33 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q075>;
v34 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q050>;
virtualinvoke v33.<io.netty.buffer.PoolChunkList: void prevList(io.netty.buffer.PoolChunkList)>(v34);
v35 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q050>;
v36 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q025>;
virtualinvoke v35.<io.netty.buffer.PoolChunkList: void prevList(io.netty.buffer.PoolChunkList)>(v36);
v37 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q025>;
v38 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q000>;
virtualinvoke v37.<io.netty.buffer.PoolChunkList: void prevList(io.netty.buffer.PoolChunkList)>(v38);
v39 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q000>;
virtualinvoke v39.<io.netty.buffer.PoolChunkList: void prevList(io.netty.buffer.PoolChunkList)>(null);
v40 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList qInit>;
v41 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList qInit>;
virtualinvoke v40.<io.netty.buffer.PoolChunkList: void prevList(io.netty.buffer.PoolChunkList)>(v41);
v42 = new java.util.ArrayList;
specialinvoke v42.<java.util.ArrayList: void <init>(int)>(6);
v43 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList qInit>;
interfaceinvoke v42.<java.util.List: boolean add(java.lang.Object)>(v43);
v44 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q000>;
interfaceinvoke v42.<java.util.List: boolean add(java.lang.Object)>(v44);
v45 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q025>;
interfaceinvoke v42.<java.util.List: boolean add(java.lang.Object)>(v45);
v46 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q050>;
interfaceinvoke v42.<java.util.List: boolean add(java.lang.Object)>(v46);
v47 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q075>;
interfaceinvoke v42.<java.util.List: boolean add(java.lang.Object)>(v47);
v48 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q100>;
interfaceinvoke v42.<java.util.List: boolean add(java.lang.Object)>(v48);
v49 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v42);
v0.<io.netty.buffer.PoolArena: java.util.List chunkListMetrics> = v49;
return;
}
private io.netty.buffer.PoolSubpage newSubpagePoolHead()
{
io.netty.buffer.PoolSubpage v1;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
v1 = new io.netty.buffer.PoolSubpage;
specialinvoke v1.<io.netty.buffer.PoolSubpage: void <init>()>();
v1.<io.netty.buffer.PoolSubpage: io.netty.buffer.PoolSubpage prev> = v1;
v1.<io.netty.buffer.PoolSubpage: io.netty.buffer.PoolSubpage next> = v1;
return v1;
}
private io.netty.buffer.PoolSubpage[] newSubpagePoolArray(int)
{
int v1;
io.netty.buffer.PoolSubpage[] v2;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
v1 := @parameter0: int;
v2 = newarray (io.netty.buffer.PoolSubpage)[v1];
return v2;
}
abstract boolean isDirect();
io.netty.buffer.PooledByteBuf allocate(io.netty.buffer.PoolThreadCache, int, int)
{
io.netty.buffer.PoolThreadCache v1;
io.netty.buffer.PoolArena v0;
int v2, v3;
io.netty.buffer.PooledByteBuf v4;
v0 := @this: io.netty.buffer.PoolArena;
v1 := @parameter0: io.netty.buffer.PoolThreadCache;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = virtualinvoke v0.<io.netty.buffer.PoolArena: io.netty.buffer.PooledByteBuf newByteBuf(int)>(v3);
specialinvoke v0.<io.netty.buffer.PoolArena: void allocate(io.netty.buffer.PoolThreadCache,io.netty.buffer.PooledByteBuf,int)>(v1, v4, v2);
return v4;
}
private void allocate(io.netty.buffer.PoolThreadCache, io.netty.buffer.PooledByteBuf, int)
{
io.netty.buffer.PoolArena v0;
io.netty.buffer.PooledByteBuf v2;
io.netty.buffer.PoolThreadCache v1;
int v3, v4, v5, v6, v7, v8;
v0 := @this: io.netty.buffer.PoolArena;
v1 := @parameter0: io.netty.buffer.PoolThreadCache;
v2 := @parameter1: io.netty.buffer.PooledByteBuf;
v3 := @parameter2: int;
v4 = virtualinvoke v0.<io.netty.buffer.PoolArena: int size2SizeIdx(int)>(v3);
v5 = v0.<io.netty.buffer.PoolArena: int smallMaxSizeIdx>;
if v4 > v5 goto label1;
specialinvoke v0.<io.netty.buffer.PoolArena: void tcacheAllocateSmall(io.netty.buffer.PoolThreadCache,io.netty.buffer.PooledByteBuf,int,int)>(v1, v2, v3, v4);
goto label5;
label1:
v6 = v0.<io.netty.buffer.PoolArena: int nSizes>;
if v4 >= v6 goto label2;
specialinvoke v0.<io.netty.buffer.PoolArena: void tcacheAllocateNormal(io.netty.buffer.PoolThreadCache,io.netty.buffer.PooledByteBuf,int,int)>(v1, v2, v3, v4);
goto label5;
label2:
v7 = v0.<io.netty.buffer.PoolArena: int directMemoryCacheAlignment>;
if v7 <= 0 goto label3;
v8 = virtualinvoke v0.<io.netty.buffer.PoolArena: int normalizeSize(int)>(v3);
goto label4;
label3:
v8 = v3;
label4:
specialinvoke v0.<io.netty.buffer.PoolArena: void allocateHuge(io.netty.buffer.PooledByteBuf,int)>(v2, v8);
label5:
return;
}
private void tcacheAllocateSmall(io.netty.buffer.PoolThreadCache, io.netty.buffer.PooledByteBuf, int, int)
{
java.lang.Throwable v23, v24;
long v18;
java.lang.AssertionError v14, v21;
io.netty.buffer.PoolSubpage v6, v7;
byte v20;
int v12, v13, v16, v3, v4;
java.lang.String v17;
boolean v10, v11, v15, v19, v5, v8, v9;
io.netty.buffer.PoolArena v0;
io.netty.buffer.PooledByteBuf v2;
io.netty.buffer.PoolThreadCache v1;
io.netty.buffer.PoolChunk v22;
v0 := @this: io.netty.buffer.PoolArena;
v1 := @parameter0: io.netty.buffer.PoolThreadCache;
v2 := @parameter1: io.netty.buffer.PooledByteBuf;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = virtualinvoke v1.<io.netty.buffer.PoolThreadCache: boolean allocateSmall(io.netty.buffer.PoolArena,io.netty.buffer.PooledByteBuf,int,int)>(v0, v2, v3, v4);
if v5 == 0 goto label01;
return;
label01:
v6 = virtualinvoke v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolSubpage findSubpagePoolHead(int)>(v4);
virtualinvoke v6.<io.netty.buffer.PoolSubpage: void lock()>();
label02:
v7 = v6.<io.netty.buffer.PoolSubpage: io.netty.buffer.PoolSubpage next>;
if v7 != v6 goto label03;
v8 = 1;
goto label04;
label03:
v8 = 0;
label04:
v9 = v8;
if v8 != 0 goto label08;
v10 = <io.netty.buffer.PoolArena: boolean $assertionsDisabled>;
if v10 != 0 goto label06;
v11 = v7.<io.netty.buffer.PoolSubpage: boolean doNotDestroy>;
if v11 == 0 goto label05;
v12 = v7.<io.netty.buffer.PoolSubpage: int elemSize>;
v13 = virtualinvoke v0.<io.netty.buffer.PoolArena: int sizeIdx2size(int)>(v4);
if v12 == v13 goto label06;
label05:
v14 = new java.lang.AssertionError;
v15 = v7.<io.netty.buffer.PoolSubpage: boolean doNotDestroy>;
v16 = v7.<io.netty.buffer.PoolSubpage: int elemSize>;
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (boolean,int,int)>(v15, v16, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("doNotDestroy=\u0001, elemSize=\u0001, sizeIdx=\u0001");
specialinvoke v14.<java.lang.AssertionError: void <init>(java.lang.Object)>(v17);
throw v14;
label06:
v18 = virtualinvoke v7.<io.netty.buffer.PoolSubpage: long allocate()>();
v19 = <io.netty.buffer.PoolArena: boolean $assertionsDisabled>;
if v19 != 0 goto label07;
v20 = v18 cmp 0L;
if v20 >= 0 goto label07;
v21 = new java.lang.AssertionError;
specialinvoke v21.<java.lang.AssertionError: void <init>()>();
throw v21;
label07:
v22 = v7.<io.netty.buffer.PoolSubpage: io.netty.buffer.PoolChunk chunk>;
virtualinvoke v22.<io.netty.buffer.PoolChunk: void initBufWithSubpage(io.netty.buffer.PooledByteBuf,java.nio.ByteBuffer,long,int,io.netty.buffer.PoolThreadCache)>(v2, null, v18, v3, v1);
label08:
virtualinvoke v6.<io.netty.buffer.PoolSubpage: void unlock()>();
goto label10;
label09:
v23 := @caughtexception;
virtualinvoke v6.<io.netty.buffer.PoolSubpage: void unlock()>();
throw v23;
label10:
if v9 == 0 goto label14;
virtualinvoke v0.<io.netty.buffer.PoolArena: void lock()>();
label11:
specialinvoke v0.<io.netty.buffer.PoolArena: void allocateNormal(io.netty.buffer.PooledByteBuf,int,int,io.netty.buffer.PoolThreadCache)>(v2, v3, v4, v1);
label12:
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
goto label14;
label13:
v24 := @caughtexception;
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
throw v24;
label14:
specialinvoke v0.<io.netty.buffer.PoolArena: void incSmallAllocation()>();
return;
catch java.lang.Throwable from label02 to label08 with label09;
catch java.lang.Throwable from label11 to label12 with label13;
}
private void tcacheAllocateNormal(io.netty.buffer.PoolThreadCache, io.netty.buffer.PooledByteBuf, int, int)
{
java.lang.Throwable v8;
io.netty.buffer.PoolArena v0;
io.netty.buffer.PooledByteBuf v2;
long v6, v7;
io.netty.buffer.PoolThreadCache v1;
int v3, v4;
boolean v5;
v0 := @this: io.netty.buffer.PoolArena;
v1 := @parameter0: io.netty.buffer.PoolThreadCache;
v2 := @parameter1: io.netty.buffer.PooledByteBuf;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = virtualinvoke v1.<io.netty.buffer.PoolThreadCache: boolean allocateNormal(io.netty.buffer.PoolArena,io.netty.buffer.PooledByteBuf,int,int)>(v0, v2, v3, v4);
if v5 == 0 goto label1;
return;
label1:
virtualinvoke v0.<io.netty.buffer.PoolArena: void lock()>();
label2:
specialinvoke v0.<io.netty.buffer.PoolArena: void allocateNormal(io.netty.buffer.PooledByteBuf,int,int,io.netty.buffer.PoolThreadCache)>(v2, v3, v4, v1);
v6 = v0.<io.netty.buffer.PoolArena: long allocationsNormal>;
v7 = v6 + 1L;
v0.<io.netty.buffer.PoolArena: long allocationsNormal> = v7;
label3:
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
goto label5;
label4:
v8 := @caughtexception;
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
throw v8;
label5:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
private void allocateNormal(io.netty.buffer.PooledByteBuf, int, int, io.netty.buffer.PoolThreadCache)
{
io.netty.buffer.PoolChunkList v11, v13, v15, v17, v27, v9;
java.lang.AssertionError v26, v8;
int v19, v2, v20, v21, v22, v3;
boolean v10, v12, v14, v16, v18, v24, v25, v5, v7;
java.util.concurrent.locks.ReentrantLock v6;
io.netty.buffer.PoolArena v0;
io.netty.buffer.PooledByteBuf v1;
io.netty.buffer.PoolThreadCache v4;
io.netty.buffer.PoolChunk v23;
v0 := @this: io.netty.buffer.PoolArena;
v1 := @parameter0: io.netty.buffer.PooledByteBuf;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: io.netty.buffer.PoolThreadCache;
v5 = <io.netty.buffer.PoolArena: boolean $assertionsDisabled>;
if v5 != 0 goto label1;
v6 = v0.<io.netty.buffer.PoolArena: java.util.concurrent.locks.ReentrantLock lock>;
v7 = virtualinvoke v6.<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>();
if v7 != 0 goto label1;
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>()>();
throw v8;
label1:
v9 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q050>;
v10 = virtualinvoke v9.<io.netty.buffer.PoolChunkList: boolean allocate(io.netty.buffer.PooledByteBuf,int,int,io.netty.buffer.PoolThreadCache)>(v1, v2, v3, v4);
if v10 != 0 goto label2;
v11 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q025>;
v12 = virtualinvoke v11.<io.netty.buffer.PoolChunkList: boolean allocate(io.netty.buffer.PooledByteBuf,int,int,io.netty.buffer.PoolThreadCache)>(v1, v2, v3, v4);
if v12 != 0 goto label2;
v13 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q000>;
v14 = virtualinvoke v13.<io.netty.buffer.PoolChunkList: boolean allocate(io.netty.buffer.PooledByteBuf,int,int,io.netty.buffer.PoolThreadCache)>(v1, v2, v3, v4);
if v14 != 0 goto label2;
v15 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList qInit>;
v16 = virtualinvoke v15.<io.netty.buffer.PoolChunkList: boolean allocate(io.netty.buffer.PooledByteBuf,int,int,io.netty.buffer.PoolThreadCache)>(v1, v2, v3, v4);
if v16 != 0 goto label2;
v17 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q075>;
v18 = virtualinvoke v17.<io.netty.buffer.PoolChunkList: boolean allocate(io.netty.buffer.PooledByteBuf,int,int,io.netty.buffer.PoolThreadCache)>(v1, v2, v3, v4);
if v18 == 0 goto label3;
label2:
return;
label3:
v19 = v0.<io.netty.buffer.PoolArena: int pageSize>;
v20 = v0.<io.netty.buffer.PoolArena: int nPSizes>;
v21 = v0.<io.netty.buffer.PoolArena: int pageShifts>;
v22 = v0.<io.netty.buffer.PoolArena: int chunkSize>;
v23 = virtualinvoke v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunk newChunk(int,int,int,int)>(v19, v20, v21, v22);
v24 = virtualinvoke v23.<io.netty.buffer.PoolChunk: boolean allocate(io.netty.buffer.PooledByteBuf,int,int,io.netty.buffer.PoolThreadCache)>(v1, v2, v3, v4);
v25 = <io.netty.buffer.PoolArena: boolean $assertionsDisabled>;
if v25 != 0 goto label4;
if v24 != 0 goto label4;
v26 = new java.lang.AssertionError;
specialinvoke v26.<java.lang.AssertionError: void <init>()>();
throw v26;
label4:
v27 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList qInit>;
virtualinvoke v27.<io.netty.buffer.PoolChunkList: void add(io.netty.buffer.PoolChunk)>(v23);
return;
}
private void incSmallAllocation()
{
io.netty.util.internal.LongCounter v1;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
v1 = v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter allocationsSmall>;
interfaceinvoke v1.<io.netty.util.internal.LongCounter: void increment()>();
return;
}
private void allocateHuge(io.netty.buffer.PooledByteBuf, int)
{
io.netty.buffer.PoolArena v0;
int v2, v5;
io.netty.buffer.PoolChunk v3;
io.netty.buffer.PooledByteBuf v1;
io.netty.util.internal.LongCounter v4, v6;
v0 := @this: io.netty.buffer.PoolArena;
v1 := @parameter0: io.netty.buffer.PooledByteBuf;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunk newUnpooledChunk(int)>(v2);
v4 = v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter activeBytesHuge>;
v5 = virtualinvoke v3.<io.netty.buffer.PoolChunk: int chunkSize()>();
interfaceinvoke v4.<io.netty.util.internal.LongCounter: void add(long)>(v5);
virtualinvoke v1.<io.netty.buffer.PooledByteBuf: void initUnpooled(io.netty.buffer.PoolChunk,int)>(v3, v2);
v6 = v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter allocationsHuge>;
interfaceinvoke v6.<io.netty.util.internal.LongCounter: void increment()>();
return;
}
void free(io.netty.buffer.PoolChunk, java.nio.ByteBuffer, long, int, io.netty.buffer.PoolThreadCache)
{
io.netty.buffer.PoolArena v0;
io.netty.util.internal.LongCounter v10, v8;
long v3;
java.nio.ByteBuffer v2;
io.netty.buffer.PoolThreadCache v5;
int v4, v7, v9;
io.netty.buffer.PoolChunk v1;
io.netty.buffer.PoolArena$SizeClass v11;
boolean v12, v6;
v0 := @this: io.netty.buffer.PoolArena;
v1 := @parameter0: io.netty.buffer.PoolChunk;
v2 := @parameter1: java.nio.ByteBuffer;
v3 := @parameter2: long;
v4 := @parameter3: int;
v5 := @parameter4: io.netty.buffer.PoolThreadCache;
v6 = v1.<io.netty.buffer.PoolChunk: boolean unpooled>;
if v6 == 0 goto label1;
v7 = virtualinvoke v1.<io.netty.buffer.PoolChunk: int chunkSize()>();
virtualinvoke v0.<io.netty.buffer.PoolArena: void destroyChunk(io.netty.buffer.PoolChunk)>(v1);
v8 = v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter activeBytesHuge>;
v9 = neg v7;
interfaceinvoke v8.<io.netty.util.internal.LongCounter: void add(long)>(v9);
v10 = v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter deallocationsHuge>;
interfaceinvoke v10.<io.netty.util.internal.LongCounter: void increment()>();
goto label3;
label1:
v11 = staticinvoke <io.netty.buffer.PoolArena: io.netty.buffer.PoolArena$SizeClass sizeClass(long)>(v3);
if v5 == null goto label2;
v12 = virtualinvoke v5.<io.netty.buffer.PoolThreadCache: boolean add(io.netty.buffer.PoolArena,io.netty.buffer.PoolChunk,java.nio.ByteBuffer,long,int,io.netty.buffer.PoolArena$SizeClass)>(v0, v1, v2, v3, v4, v11);
if v12 == 0 goto label2;
return;
label2:
virtualinvoke v0.<io.netty.buffer.PoolArena: void freeChunk(io.netty.buffer.PoolChunk,long,int,io.netty.buffer.PoolArena$SizeClass,java.nio.ByteBuffer,boolean)>(v1, v3, v4, v11, v2, 0);
label3:
return;
}
private static io.netty.buffer.PoolArena$SizeClass sizeClass(long)
{
long v0;
io.netty.buffer.PoolArena$SizeClass v2;
boolean v1;
v0 := @parameter0: long;
v1 = staticinvoke <io.netty.buffer.PoolChunk: boolean isSubpage(long)>(v0);
if v1 == 0 goto label1;
v2 = <io.netty.buffer.PoolArena$SizeClass: io.netty.buffer.PoolArena$SizeClass Small>;
goto label2;
label1:
v2 = <io.netty.buffer.PoolArena$SizeClass: io.netty.buffer.PoolArena$SizeClass Normal>;
label2:
return v2;
}
void freeChunk(io.netty.buffer.PoolChunk, long, int, io.netty.buffer.PoolArena$SizeClass, java.nio.ByteBuffer, boolean)
{
java.lang.Throwable v18;
io.netty.buffer.PoolChunkList v15;
java.lang.Error v14;
long v10, v11, v12, v13, v2;
java.nio.ByteBuffer v5;
int[] v7;
int v3, v8, v9;
io.netty.buffer.PoolArena$SizeClass v4;
boolean v16, v17, v6;
io.netty.buffer.PoolArena v0;
io.netty.buffer.PoolChunk v1;
v0 := @this: io.netty.buffer.PoolArena;
v1 := @parameter0: io.netty.buffer.PoolChunk;
v2 := @parameter1: long;
v3 := @parameter2: int;
v4 := @parameter3: io.netty.buffer.PoolArena$SizeClass;
v5 := @parameter4: java.nio.ByteBuffer;
v6 := @parameter5: boolean;
virtualinvoke v0.<io.netty.buffer.PoolArena: void lock()>();
label01:
if v6 != 0 goto label05;
v7 = <io.netty.buffer.PoolArena$1: int[] $SwitchMap$io$netty$buffer$PoolArena$SizeClass>;
v8 = virtualinvoke v4.<io.netty.buffer.PoolArena$SizeClass: int ordinal()>();
v9 = v7[v8];
lookupswitch(v9)
{
case 1: goto label02;
case 2: goto label03;
default: goto label04;
};
label02:
v10 = v0.<io.netty.buffer.PoolArena: long deallocationsNormal>;
v11 = v10 + 1L;
v0.<io.netty.buffer.PoolArena: long deallocationsNormal> = v11;
goto label05;
label03:
v12 = v0.<io.netty.buffer.PoolArena: long deallocationsSmall>;
v13 = v12 + 1L;
v0.<io.netty.buffer.PoolArena: long deallocationsSmall> = v13;
goto label05;
label04:
v14 = new java.lang.Error;
specialinvoke v14.<java.lang.Error: void <init>()>();
throw v14;
label05:
v15 = v1.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolChunkList parent>;
v16 = virtualinvoke v15.<io.netty.buffer.PoolChunkList: boolean free(io.netty.buffer.PoolChunk,long,int,java.nio.ByteBuffer)>(v1, v2, v3, v5);
if v16 != 0 goto label06;
v17 = 1;
goto label07;
label06:
v17 = 0;
label07:
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
goto label09;
label08:
v18 := @caughtexception;
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
throw v18;
label09:
if v17 == 0 goto label10;
virtualinvoke v0.<io.netty.buffer.PoolArena: void destroyChunk(io.netty.buffer.PoolChunk)>(v1);
label10:
return;
catch java.lang.Throwable from label01 to label07 with label08;
}
io.netty.buffer.PoolSubpage findSubpagePoolHead(int)
{
io.netty.buffer.PoolArena v0;
int v1;
io.netty.buffer.PoolSubpage[] v2;
io.netty.buffer.PoolSubpage v3;
v0 := @this: io.netty.buffer.PoolArena;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolSubpage[] smallSubpagePools>;
v3 = v2[v1];
return v3;
}
void reallocate(io.netty.buffer.PooledByteBuf, int, boolean)
{
long v10;
java.lang.AssertionError v6;
java.nio.ByteBuffer v9;
int v12, v13, v16, v2, v5, v7;
boolean v3, v4;
io.netty.buffer.PoolArena v0;
io.netty.buffer.PooledByteBuf v1;
io.netty.buffer.PooledByteBufAllocator v14;
io.netty.buffer.PoolThreadCache v15, v17;
io.netty.buffer.PoolChunk v8;
java.lang.Object v11;
v0 := @this: io.netty.buffer.PoolArena;
v1 := @parameter0: io.netty.buffer.PooledByteBuf;
v2 := @parameter1: int;
v3 := @parameter2: boolean;
v4 = <io.netty.buffer.PoolArena: boolean $assertionsDisabled>;
if v4 != 0 goto label2;
if v2 < 0 goto label1;
v5 = virtualinvoke v1.<io.netty.buffer.PooledByteBuf: int maxCapacity()>();
if v2 <= v5 goto label2;
label1:
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label2:
v7 = v1.<io.netty.buffer.PooledByteBuf: int length>;
if v7 != v2 goto label3;
return;
label3:
v8 = v1.<io.netty.buffer.PooledByteBuf: io.netty.buffer.PoolChunk chunk>;
v9 = v1.<io.netty.buffer.PooledByteBuf: java.nio.ByteBuffer tmpNioBuf>;
v10 = v1.<io.netty.buffer.PooledByteBuf: long handle>;
v11 = v1.<io.netty.buffer.PooledByteBuf: java.lang.Object memory>;
v12 = v1.<io.netty.buffer.PooledByteBuf: int offset>;
v13 = v1.<io.netty.buffer.PooledByteBuf: int maxLength>;
v14 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PooledByteBufAllocator parent>;
v15 = virtualinvoke v14.<io.netty.buffer.PooledByteBufAllocator: io.netty.buffer.PoolThreadCache threadCache()>();
specialinvoke v0.<io.netty.buffer.PoolArena: void allocate(io.netty.buffer.PoolThreadCache,io.netty.buffer.PooledByteBuf,int)>(v15, v1, v2);
if v2 <= v7 goto label4;
v16 = v7;
goto label5;
label4:
virtualinvoke v1.<io.netty.buffer.PooledByteBuf: void trimIndicesToCapacity(int)>(v2);
v16 = v2;
label5:
virtualinvoke v0.<io.netty.buffer.PoolArena: void memoryCopy(java.lang.Object,int,io.netty.buffer.PooledByteBuf,int)>(v11, v12, v1, v16);
if v3 == 0 goto label6;
v17 = v1.<io.netty.buffer.PooledByteBuf: io.netty.buffer.PoolThreadCache cache>;
virtualinvoke v0.<io.netty.buffer.PoolArena: void free(io.netty.buffer.PoolChunk,java.nio.ByteBuffer,long,int,io.netty.buffer.PoolThreadCache)>(v8, v9, v10, v13, v17);
label6:
return;
}
public int numThreadCaches()
{
int v2;
java.util.concurrent.atomic.AtomicInteger v1;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
v1 = v0.<io.netty.buffer.PoolArena: java.util.concurrent.atomic.AtomicInteger numThreadCaches>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
return v2;
}
public int numTinySubpages()
{
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
return 0;
}
public int numSmallSubpages()
{
int v2;
io.netty.buffer.PoolSubpage[] v1;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
v1 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolSubpage[] smallSubpagePools>;
v2 = lengthof v1;
return v2;
}
public int numChunkLists()
{
int v2;
java.util.List v1;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
v1 = v0.<io.netty.buffer.PoolArena: java.util.List chunkListMetrics>;
v2 = interfaceinvoke v1.<java.util.List: int size()>();
return v2;
}
public java.util.List tinySubpages()
{
java.util.List v1;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
v1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v1;
}
public java.util.List smallSubpages()
{
io.netty.buffer.PoolSubpage[] v1;
java.util.List v2;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
v1 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolSubpage[] smallSubpagePools>;
v2 = staticinvoke <io.netty.buffer.PoolArena: java.util.List subPageMetricList(io.netty.buffer.PoolSubpage[])>(v1);
return v2;
}
public java.util.List chunkLists()
{
java.util.List v1;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
v1 = v0.<io.netty.buffer.PoolArena: java.util.List chunkListMetrics>;
return v1;
}
private static java.util.List subPageMetricList(io.netty.buffer.PoolSubpage[])
{
int v2, v3;
io.netty.buffer.PoolSubpage[] v0;
io.netty.buffer.PoolSubpage v4, v5, v6;
java.util.ArrayList v1;
v0 := @parameter0: io.netty.buffer.PoolSubpage[];
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = lengthof v0;
v3 = 0;
label1:
if v3 >= v2 goto label4;
v4 = v0[v3];
v5 = v4.<io.netty.buffer.PoolSubpage: io.netty.buffer.PoolSubpage next>;
if v5 == v4 goto label3;
v6 = v4.<io.netty.buffer.PoolSubpage: io.netty.buffer.PoolSubpage next>;
label2:
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v6);
v6 = v6.<io.netty.buffer.PoolSubpage: io.netty.buffer.PoolSubpage next>;
if v6 != v4 goto label2;
label3:
v3 = v3 + 1;
goto label1;
label4:
return v1;
}
public long numAllocations()
{
java.lang.Throwable v2;
io.netty.buffer.PoolArena v0;
io.netty.util.internal.LongCounter v3, v6;
long v1, v4, v5, v7, v8;
v0 := @this: io.netty.buffer.PoolArena;
virtualinvoke v0.<io.netty.buffer.PoolArena: void lock()>();
label1:
v1 = v0.<io.netty.buffer.PoolArena: long allocationsNormal>;
label2:
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
goto label4;
label3:
v2 := @caughtexception;
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
throw v2;
label4:
v3 = v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter allocationsSmall>;
v4 = interfaceinvoke v3.<io.netty.util.internal.LongCounter: long value()>();
v5 = v4 + v1;
v6 = v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter allocationsHuge>;
v7 = interfaceinvoke v6.<io.netty.util.internal.LongCounter: long value()>();
v8 = v5 + v7;
return v8;
catch java.lang.Throwable from label1 to label2 with label3;
}
public long numTinyAllocations()
{
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
return 0L;
}
public long numSmallAllocations()
{
io.netty.util.internal.LongCounter v1;
long v2;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
v1 = v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter allocationsSmall>;
v2 = interfaceinvoke v1.<io.netty.util.internal.LongCounter: long value()>();
return v2;
}
public long numNormalAllocations()
{
java.lang.Throwable v2;
long v1;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
virtualinvoke v0.<io.netty.buffer.PoolArena: void lock()>();
label1:
v1 = v0.<io.netty.buffer.PoolArena: long allocationsNormal>;
label2:
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
return v1;
label3:
v2 := @caughtexception;
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
throw v2;
catch java.lang.Throwable from label1 to label2 with label3;
}
public long numDeallocations()
{
java.lang.Throwable v4;
io.netty.buffer.PoolArena v0;
io.netty.util.internal.LongCounter v5;
long v1, v2, v3, v6, v7;
v0 := @this: io.netty.buffer.PoolArena;
virtualinvoke v0.<io.netty.buffer.PoolArena: void lock()>();
label1:
v1 = v0.<io.netty.buffer.PoolArena: long deallocationsSmall>;
v2 = v0.<io.netty.buffer.PoolArena: long deallocationsNormal>;
v3 = v1 + v2;
label2:
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
goto label4;
label3:
v4 := @caughtexception;
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
throw v4;
label4:
v5 = v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter deallocationsHuge>;
v6 = interfaceinvoke v5.<io.netty.util.internal.LongCounter: long value()>();
v7 = v3 + v6;
return v7;
catch java.lang.Throwable from label1 to label2 with label3;
}
public long numTinyDeallocations()
{
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
return 0L;
}
public long numSmallDeallocations()
{
java.lang.Throwable v2;
long v1;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
virtualinvoke v0.<io.netty.buffer.PoolArena: void lock()>();
label1:
v1 = v0.<io.netty.buffer.PoolArena: long deallocationsSmall>;
label2:
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
return v1;
label3:
v2 := @caughtexception;
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
throw v2;
catch java.lang.Throwable from label1 to label2 with label3;
}
public long numNormalDeallocations()
{
java.lang.Throwable v2;
long v1;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
virtualinvoke v0.<io.netty.buffer.PoolArena: void lock()>();
label1:
v1 = v0.<io.netty.buffer.PoolArena: long deallocationsNormal>;
label2:
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
return v1;
label3:
v2 := @caughtexception;
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
throw v2;
catch java.lang.Throwable from label1 to label2 with label3;
}
public long numHugeAllocations()
{
io.netty.util.internal.LongCounter v1;
long v2;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
v1 = v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter allocationsHuge>;
v2 = interfaceinvoke v1.<io.netty.util.internal.LongCounter: long value()>();
return v2;
}
public long numHugeDeallocations()
{
io.netty.util.internal.LongCounter v1;
long v2;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
v1 = v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter deallocationsHuge>;
v2 = interfaceinvoke v1.<io.netty.util.internal.LongCounter: long value()>();
return v2;
}
public long numActiveAllocations()
{
java.lang.Throwable v15;
io.netty.util.internal.LongCounter v1, v3, v6;
long v10, v11, v12, v13, v14, v16, v2, v4, v5, v7, v8, v9;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
v1 = v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter allocationsSmall>;
v2 = interfaceinvoke v1.<io.netty.util.internal.LongCounter: long value()>();
v3 = v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter allocationsHuge>;
v4 = interfaceinvoke v3.<io.netty.util.internal.LongCounter: long value()>();
v5 = v2 + v4;
v6 = v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter deallocationsHuge>;
v7 = interfaceinvoke v6.<io.netty.util.internal.LongCounter: long value()>();
v8 = v5 - v7;
virtualinvoke v0.<io.netty.buffer.PoolArena: void lock()>();
label1:
v9 = v0.<io.netty.buffer.PoolArena: long allocationsNormal>;
v10 = v0.<io.netty.buffer.PoolArena: long deallocationsSmall>;
v11 = v0.<io.netty.buffer.PoolArena: long deallocationsNormal>;
v12 = v10 + v11;
v13 = v9 - v12;
v14 = v8 + v13;
label2:
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
goto label4;
label3:
v15 := @caughtexception;
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
throw v15;
label4:
v16 = staticinvoke <java.lang.Math: long max(long,long)>(v14, 0L);
return v16;
catch java.lang.Throwable from label1 to label2 with label3;
}
public long numActiveTinyAllocations()
{
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
return 0L;
}
public long numActiveSmallAllocations()
{
io.netty.buffer.PoolArena v0;
long v1, v2, v3, v4;
v0 := @this: io.netty.buffer.PoolArena;
v1 = virtualinvoke v0.<io.netty.buffer.PoolArena: long numSmallAllocations()>();
v2 = virtualinvoke v0.<io.netty.buffer.PoolArena: long numSmallDeallocations()>();
v3 = v1 - v2;
v4 = staticinvoke <java.lang.Math: long max(long,long)>(v3, 0L);
return v4;
}
public long numActiveNormalAllocations()
{
java.lang.Throwable v4;
io.netty.buffer.PoolArena v0;
long v1, v2, v3, v5;
v0 := @this: io.netty.buffer.PoolArena;
virtualinvoke v0.<io.netty.buffer.PoolArena: void lock()>();
label1:
v1 = v0.<io.netty.buffer.PoolArena: long allocationsNormal>;
v2 = v0.<io.netty.buffer.PoolArena: long deallocationsNormal>;
v3 = v1 - v2;
label2:
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
goto label4;
label3:
v4 := @caughtexception;
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
throw v4;
label4:
v5 = staticinvoke <java.lang.Math: long max(long,long)>(v3, 0L);
return v5;
catch java.lang.Throwable from label1 to label2 with label3;
}
public long numActiveHugeAllocations()
{
io.netty.buffer.PoolArena v0;
long v1, v2, v3, v4;
v0 := @this: io.netty.buffer.PoolArena;
v1 = virtualinvoke v0.<io.netty.buffer.PoolArena: long numHugeAllocations()>();
v2 = virtualinvoke v0.<io.netty.buffer.PoolArena: long numHugeDeallocations()>();
v3 = v1 - v2;
v4 = staticinvoke <java.lang.Math: long max(long,long)>(v3, 0L);
return v4;
}
public long numActiveBytes()
{
java.lang.Throwable v12;
java.util.Iterator v8;
io.netty.buffer.PoolArena v0;
io.netty.util.internal.LongCounter v1;
long v13, v2;
java.util.List v4, v6;
int v11, v3, v5;
java.lang.Object v10, v7;
boolean v9;
v0 := @this: io.netty.buffer.PoolArena;
v1 = v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter activeBytesHuge>;
v2 = interfaceinvoke v1.<io.netty.util.internal.LongCounter: long value()>();
virtualinvoke v0.<io.netty.buffer.PoolArena: void lock()>();
label1:
v3 = 0;
label2:
v4 = v0.<io.netty.buffer.PoolArena: java.util.List chunkListMetrics>;
v5 = interfaceinvoke v4.<java.util.List: int size()>();
if v3 >= v5 goto label5;
v6 = v0.<io.netty.buffer.PoolArena: java.util.List chunkListMetrics>;
v7 = interfaceinvoke v6.<java.util.List: java.lang.Object get(int)>(v3);
v8 = interfaceinvoke v7.<io.netty.buffer.PoolChunkListMetric: java.util.Iterator iterator()>();
label3:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label4;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = interfaceinvoke v10.<io.netty.buffer.PoolChunkMetric: int chunkSize()>();
v2 = v2 + v11;
goto label3;
label4:
v3 = v3 + 1;
goto label2;
label5:
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
goto label7;
label6:
v12 := @caughtexception;
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
throw v12;
label7:
v13 = staticinvoke <java.lang.Math: long max(long,long)>(0L, v2);
return v13;
catch java.lang.Throwable from label1 to label5 with label6;
}
public long numPinnedBytes()
{
java.lang.Throwable v11;
java.util.Iterator v8;
io.netty.buffer.PoolArena v0;
io.netty.util.internal.LongCounter v1;
long v12, v2;
java.util.List v4, v6;
int v10, v3, v5;
io.netty.buffer.PoolChunkMetric v13;
java.lang.Object v7;
boolean v9;
v0 := @this: io.netty.buffer.PoolArena;
v1 = v0.<io.netty.buffer.PoolArena: io.netty.util.internal.LongCounter activeBytesHuge>;
v2 = interfaceinvoke v1.<io.netty.util.internal.LongCounter: long value()>();
virtualinvoke v0.<io.netty.buffer.PoolArena: void lock()>();
label1:
v3 = 0;
label2:
v4 = v0.<io.netty.buffer.PoolArena: java.util.List chunkListMetrics>;
v5 = interfaceinvoke v4.<java.util.List: int size()>();
if v3 >= v5 goto label5;
v6 = v0.<io.netty.buffer.PoolArena: java.util.List chunkListMetrics>;
v7 = interfaceinvoke v6.<java.util.List: java.lang.Object get(int)>(v3);
v8 = interfaceinvoke v7.<io.netty.buffer.PoolChunkListMetric: java.util.Iterator iterator()>();
label3:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label4;
interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v10 = virtualinvoke v13.<io.netty.buffer.PoolChunk: int pinnedBytes()>();
v2 = v2 + v10;
goto label3;
label4:
v3 = v3 + 1;
goto label2;
label5:
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
goto label7;
label6:
v11 := @caughtexception;
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
throw v11;
label7:
v12 = staticinvoke <java.lang.Math: long max(long,long)>(0L, v2);
return v12;
catch java.lang.Throwable from label1 to label5 with label6;
}
protected abstract io.netty.buffer.PoolChunk newChunk(int, int, int, int);
protected abstract io.netty.buffer.PoolChunk newUnpooledChunk(int);
protected abstract io.netty.buffer.PooledByteBuf newByteBuf(int);
protected abstract void memoryCopy(java.lang.Object, int, io.netty.buffer.PooledByteBuf, int);
protected abstract void destroyChunk(io.netty.buffer.PoolChunk);
public java.lang.String toString()
{
java.lang.Throwable v22;
io.netty.buffer.PoolChunkList v11, v14, v17, v2, v5, v8;
io.netty.buffer.PoolSubpage[] v19;
java.lang.String v1, v10, v12, v13, v15, v16, v18, v20, v21, v3, v4, v6, v7, v9;
io.netty.buffer.PoolArena v0;
java.lang.StringBuilder v23;
v0 := @this: io.netty.buffer.PoolArena;
virtualinvoke v0.<io.netty.buffer.PoolArena: void lock()>();
label1:
v1 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
v2 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList qInit>;
v3 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
v4 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
v5 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q000>;
v6 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
v7 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
v8 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q025>;
v9 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
v10 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
v11 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q050>;
v12 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
v13 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
v14 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q075>;
v15 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
v16 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
v17 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q100>;
v18 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
v19 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolSubpage[] smallSubpagePools>;
staticinvoke <io.netty.buffer.PoolArena: void appendPoolSubPages(java.lang.StringBuilder,io.netty.buffer.PoolSubpage[])>(v23, v19);
v20 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
virtualinvoke v23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v20);
v21 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,io.netty.buffer.PoolChunkList,java.lang.String,java.lang.String,io.netty.buffer.PoolChunkList,java.lang.String,java.lang.String,io.netty.buffer.PoolChunkList,java.lang.String,java.lang.String,io.netty.buffer.PoolChunkList,java.lang.String,java.lang.String,io.netty.buffer.PoolChunkList,java.lang.String,java.lang.String,io.netty.buffer.PoolChunkList,java.lang.String)>(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Chunk(s) at 0~25%:\u0001\u0001\u0001Chunk(s) at 0~50%:\u0001\u0001\u0001Chunk(s) at 25~75%:\u0001\u0001\u0001Chunk(s) at 50~100%:\u0001\u0001\u0001Chunk(s) at 75~100%:\u0001\u0001\u0001Chunk(s) at 100%:\u0001\u0001\u0001small subpages:");
label2:
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
return v21;
label3:
v22 := @caughtexception;
virtualinvoke v0.<io.netty.buffer.PoolArena: void unlock()>();
throw v22;
catch java.lang.Throwable from label1 to label2 with label3;
}
private static void appendPoolSubPages(java.lang.StringBuilder, io.netty.buffer.PoolSubpage[])
{
io.netty.buffer.PoolSubpage v4, v5, v9;
int v2, v3;
io.netty.buffer.PoolSubpage[] v1;
java.lang.StringBuilder v0, v7, v8;
java.lang.String v6;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: io.netty.buffer.PoolSubpage[];
v2 = 0;
label1:
v3 = lengthof v1;
if v2 >= v3 goto label4;
v4 = v1[v2];
v5 = v4.<io.netty.buffer.PoolSubpage: io.netty.buffer.PoolSubpage next>;
if v5 == v4 goto label3;
v6 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
v7 = virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v6);
v8 = virtualinvoke v7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v2);
virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");
v9 = v4.<io.netty.buffer.PoolSubpage: io.netty.buffer.PoolSubpage next>;
label2:
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v9);
v9 = v9.<io.netty.buffer.PoolSubpage: io.netty.buffer.PoolSubpage next>;
if v9 != v4 goto label2;
label3:
v2 = v2 + 1;
goto label1;
label4:
return;
}
protected final void finalize() throws java.lang.Throwable
{
java.lang.Throwable v9;
io.netty.buffer.PoolChunkList v12, v13, v14, v15, v16, v17, v3, v4, v5, v6, v7, v8;
io.netty.buffer.PoolSubpage[] v1, v10;
io.netty.buffer.PoolChunkList[] v11, v2;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
label1:
specialinvoke v0.<java.lang.Object: void finalize()>();
label2:
v1 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolSubpage[] smallSubpagePools>;
staticinvoke <io.netty.buffer.PoolArena: void destroyPoolSubPages(io.netty.buffer.PoolSubpage[])>(v1);
v2 = newarray (io.netty.buffer.PoolChunkList)[6];
v3 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList qInit>;
v2[0] = v3;
v4 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q000>;
v2[1] = v4;
v5 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q025>;
v2[2] = v5;
v6 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q050>;
v2[3] = v6;
v7 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q075>;
v2[4] = v7;
v8 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q100>;
v2[5] = v8;
specialinvoke v0.<io.netty.buffer.PoolArena: void destroyPoolChunkLists(io.netty.buffer.PoolChunkList[])>(v2);
goto label4;
label3:
v9 := @caughtexception;
v10 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolSubpage[] smallSubpagePools>;
staticinvoke <io.netty.buffer.PoolArena: void destroyPoolSubPages(io.netty.buffer.PoolSubpage[])>(v10);
v11 = newarray (io.netty.buffer.PoolChunkList)[6];
v12 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList qInit>;
v11[0] = v12;
v13 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q000>;
v11[1] = v13;
v14 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q025>;
v11[2] = v14;
v15 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q050>;
v11[3] = v15;
v16 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q075>;
v11[4] = v16;
v17 = v0.<io.netty.buffer.PoolArena: io.netty.buffer.PoolChunkList q100>;
v11[5] = v17;
specialinvoke v0.<io.netty.buffer.PoolArena: void destroyPoolChunkLists(io.netty.buffer.PoolChunkList[])>(v11);
throw v9;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private static void destroyPoolSubPages(io.netty.buffer.PoolSubpage[])
{
int v1, v2;
io.netty.buffer.PoolSubpage[] v0;
io.netty.buffer.PoolSubpage v3;
v0 := @parameter0: io.netty.buffer.PoolSubpage[];
v1 = lengthof v0;
v2 = 0;
label1:
if v2 >= v1 goto label2;
v3 = v0[v2];
virtualinvoke v3.<io.netty.buffer.PoolSubpage: void destroy()>();
v2 = v2 + 1;
goto label1;
label2:
return;
}
private transient void destroyPoolChunkLists(io.netty.buffer.PoolChunkList[])
{
io.netty.buffer.PoolArena v0;
int v2, v3;
io.netty.buffer.PoolChunkList v4;
io.netty.buffer.PoolChunkList[] v1;
v0 := @this: io.netty.buffer.PoolArena;
v1 := @parameter0: io.netty.buffer.PoolChunkList[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
virtualinvoke v4.<io.netty.buffer.PoolChunkList: void destroy(io.netty.buffer.PoolArena)>(v0);
v3 = v3 + 1;
goto label1;
label2:
return;
}
void lock()
{
java.util.concurrent.locks.ReentrantLock v1;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
v1 = v0.<io.netty.buffer.PoolArena: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke v1.<java.util.concurrent.locks.ReentrantLock: void lock()>();
return;
}
void unlock()
{
java.util.concurrent.locks.ReentrantLock v1;
io.netty.buffer.PoolArena v0;
v0 := @this: io.netty.buffer.PoolArena;
v1 = v0.<io.netty.buffer.PoolArena: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke v1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2, v3;
v0 = class "Lio/netty/buffer/PoolArena;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.buffer.PoolArena: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean hasUnsafe()>();
<io.netty.buffer.PoolArena: boolean HAS_UNSAFE> = v3;
return;
}
}