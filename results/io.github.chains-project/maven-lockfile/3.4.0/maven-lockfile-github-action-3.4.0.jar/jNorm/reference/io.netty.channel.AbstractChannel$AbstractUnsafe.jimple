public abstract class io.netty.channel.AbstractChannel$AbstractUnsafe extends java.lang.Object implements io.netty.channel.Channel$Unsafe
{
private volatile io.netty.channel.ChannelOutboundBuffer outboundBuffer;
private io.netty.channel.RecvByteBufAllocator$Handle recvHandle;
private boolean inFlush0;
private boolean neverRegistered;
static final boolean $assertionsDisabled;
final io.netty.channel.AbstractChannel this$0;
protected void <init>(io.netty.channel.AbstractChannel)
{
io.netty.channel.ChannelOutboundBuffer v2;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel v1, v3;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: io.netty.channel.AbstractChannel;
v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new io.netty.channel.ChannelOutboundBuffer;
v3 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
specialinvoke v2.<io.netty.channel.ChannelOutboundBuffer: void <init>(io.netty.channel.AbstractChannel)>(v3);
v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.ChannelOutboundBuffer outboundBuffer> = v2;
v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: boolean neverRegistered> = 1;
return;
}
private void assertEventLoop()
{
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel v2, v4;
java.lang.AssertionError v7;
io.netty.channel.EventLoop v5;
boolean v1, v3, v6;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 = <io.netty.channel.AbstractChannel$AbstractUnsafe: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v3 = v2.<io.netty.channel.AbstractChannel: boolean registered>;
if v3 == 0 goto label1;
v4 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v5 = v4.<io.netty.channel.AbstractChannel: io.netty.channel.EventLoop eventLoop>;
v6 = interfaceinvoke v5.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v6 != 0 goto label1;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label1:
return;
}
public io.netty.channel.RecvByteBufAllocator$Handle recvBufAllocHandle()
{
io.netty.channel.RecvByteBufAllocator$Handle v1, v5, v6;
io.netty.channel.ChannelConfig v3;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel v2;
io.netty.channel.RecvByteBufAllocator v4;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.RecvByteBufAllocator$Handle recvHandle>;
if v1 != null goto label1;
v2 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v3 = virtualinvoke v2.<io.netty.channel.AbstractChannel: io.netty.channel.ChannelConfig config()>();
v4 = interfaceinvoke v3.<io.netty.channel.ChannelConfig: io.netty.channel.RecvByteBufAllocator getRecvByteBufAllocator()>();
v5 = interfaceinvoke v4.<io.netty.channel.RecvByteBufAllocator: io.netty.channel.RecvByteBufAllocator$Handle newHandle()>();
v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.RecvByteBufAllocator$Handle recvHandle> = v5;
label1:
v6 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.RecvByteBufAllocator$Handle recvHandle>;
return v6;
}
public final io.netty.channel.ChannelOutboundBuffer outboundBuffer()
{
io.netty.channel.ChannelOutboundBuffer v1;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.ChannelOutboundBuffer outboundBuffer>;
return v1;
}
public final java.net.SocketAddress localAddress()
{
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel v1;
java.net.SocketAddress v2;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v2 = virtualinvoke v1.<io.netty.channel.AbstractChannel: java.net.SocketAddress localAddress0()>();
return v2;
}
public final java.net.SocketAddress remoteAddress()
{
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel v1;
java.net.SocketAddress v2;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v2 = virtualinvoke v1.<io.netty.channel.AbstractChannel: java.net.SocketAddress remoteAddress0()>();
return v2;
}
public final void register(io.netty.channel.EventLoop, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v15;
java.lang.IllegalStateException v5, v8;
io.netty.channel.AbstractChannel$AbstractUnsafe$1 v14;
io.netty.channel.AbstractChannel v12, v17, v18, v3, v6;
io.netty.channel.ChannelPromise v2;
java.lang.String v10, v11;
boolean v13, v4, v7;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.EventLoop v1;
io.netty.channel.AbstractChannel$CloseFuture v19;
io.netty.util.internal.logging.InternalLogger v16;
java.lang.Class v9;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: io.netty.channel.EventLoop;
v2 := @parameter1: io.netty.channel.ChannelPromise;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "eventLoop");
v3 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v4 = virtualinvoke v3.<io.netty.channel.AbstractChannel: boolean isRegistered()>();
if v4 == 0 goto label1;
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("registered to an event loop already");
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v5);
return;
label1:
v6 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v7 = virtualinvoke v6.<io.netty.channel.AbstractChannel: boolean isCompatible(io.netty.channel.EventLoop)>(v1);
if v7 != 0 goto label2;
v8 = new java.lang.IllegalStateException;
v9 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v10 = virtualinvoke v9.<java.lang.Class: java.lang.String getName()>();
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("incompatible event loop type: \u0001");
specialinvoke v8.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v11);
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v8);
return;
label2:
v12 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v12.<io.netty.channel.AbstractChannel: io.netty.channel.EventLoop eventLoop> = v1;
v13 = interfaceinvoke v1.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v13 == 0 goto label3;
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void register0(io.netty.channel.ChannelPromise)>(v2);
goto label6;
label3:
v14 = new io.netty.channel.AbstractChannel$AbstractUnsafe$1;
specialinvoke v14.<io.netty.channel.AbstractChannel$AbstractUnsafe$1: void <init>(io.netty.channel.AbstractChannel$AbstractUnsafe,io.netty.channel.ChannelPromise)>(v0, v2);
interfaceinvoke v1.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v14);
label4:
goto label6;
label5:
v15 := @caughtexception;
v16 = <io.netty.channel.AbstractChannel: io.netty.util.internal.logging.InternalLogger logger>;
v17 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
interfaceinvoke v16.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Force-closing a channel whose registration task was not accepted by an event loop: {}", v17, v15);
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void closeForcibly()>();
v18 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v19 = v18.<io.netty.channel.AbstractChannel: io.netty.channel.AbstractChannel$CloseFuture closeFuture>;
virtualinvoke v19.<io.netty.channel.AbstractChannel$CloseFuture: boolean setClosed()>();
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)>(v2, v15);
label6:
return;
catch java.lang.Throwable from label3 to label4 with label5;
}
private void register0(io.netty.channel.ChannelPromise)
{
java.lang.Throwable v18;
io.netty.channel.AbstractChannel v11, v13, v15, v19, v5, v6, v7, v9;
io.netty.channel.ChannelPromise v1;
boolean v12, v17, v2, v3, v4;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel$CloseFuture v20;
io.netty.channel.ChannelConfig v16;
io.netty.channel.DefaultChannelPipeline v10, v14, v8;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
label1:
v2 = interfaceinvoke v1.<io.netty.channel.ChannelPromise: boolean setUncancellable()>();
if v2 == 0 goto label2;
v3 = virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: boolean ensureOpen(io.netty.channel.ChannelPromise)>(v1);
if v3 != 0 goto label3;
label2:
return;
label3:
v4 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: boolean neverRegistered>;
v5 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
virtualinvoke v5.<io.netty.channel.AbstractChannel: void doRegister()>();
v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: boolean neverRegistered> = 0;
v6 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v6.<io.netty.channel.AbstractChannel: boolean registered> = 1;
v7 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v8 = v7.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
virtualinvoke v8.<io.netty.channel.DefaultChannelPipeline: void invokeHandlerAddedIfNeeded()>();
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void safeSetSuccess(io.netty.channel.ChannelPromise)>(v1);
v9 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v10 = v9.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
virtualinvoke v10.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline fireChannelRegistered()>();
v11 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v12 = virtualinvoke v11.<io.netty.channel.AbstractChannel: boolean isActive()>();
if v12 == 0 goto label7;
if v4 == 0 goto label4;
v13 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v14 = v13.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
virtualinvoke v14.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline fireChannelActive()>();
goto label7;
label4:
v15 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v16 = virtualinvoke v15.<io.netty.channel.AbstractChannel: io.netty.channel.ChannelConfig config()>();
v17 = interfaceinvoke v16.<io.netty.channel.ChannelConfig: boolean isAutoRead()>();
if v17 == 0 goto label7;
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void beginRead()>();
label5:
goto label7;
label6:
v18 := @caughtexception;
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void closeForcibly()>();
v19 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v20 = v19.<io.netty.channel.AbstractChannel: io.netty.channel.AbstractChannel$CloseFuture closeFuture>;
virtualinvoke v20.<io.netty.channel.AbstractChannel$CloseFuture: boolean setClosed()>();
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)>(v1, v18);
label7:
return;
catch java.lang.Throwable from label1 to label2 with label6;
catch java.lang.Throwable from label3 to label5 with label6;
}
public final void bind(java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v21;
io.netty.channel.ChannelOption v8;
java.net.SocketAddress v1;
io.netty.channel.AbstractChannel v18, v20, v22, v6;
io.netty.channel.AbstractChannel$AbstractUnsafe$2 v24;
java.net.InetAddress v12;
io.netty.channel.ChannelPromise v2;
java.lang.Boolean v5;
java.lang.String v17;
boolean v10, v11, v13, v14, v15, v19, v23, v3, v4;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.ChannelConfig v7;
io.netty.util.internal.logging.InternalLogger v16;
java.lang.Object v9;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: io.netty.channel.ChannelPromise;
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void assertEventLoop()>();
v3 = interfaceinvoke v2.<io.netty.channel.ChannelPromise: boolean setUncancellable()>();
if v3 == 0 goto label1;
v4 = virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: boolean ensureOpen(io.netty.channel.ChannelPromise)>(v2);
if v4 != 0 goto label2;
label1:
return;
label2:
v5 = <java.lang.Boolean: java.lang.Boolean TRUE>;
v6 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v7 = virtualinvoke v6.<io.netty.channel.AbstractChannel: io.netty.channel.ChannelConfig config()>();
v8 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_BROADCAST>;
v9 = interfaceinvoke v7.<io.netty.channel.ChannelConfig: java.lang.Object getOption(io.netty.channel.ChannelOption)>(v8);
v10 = virtualinvoke v5.<java.lang.Boolean: boolean equals(java.lang.Object)>(v9);
if v10 == 0 goto label3;
v11 = v1 instanceof java.net.InetSocketAddress;
if v11 == 0 goto label3;
v12 = virtualinvoke v1.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
v13 = virtualinvoke v12.<java.net.InetAddress: boolean isAnyLocalAddress()>();
if v13 != 0 goto label3;
v14 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean isWindows()>();
if v14 != 0 goto label3;
v15 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean maybeSuperUser()>();
if v15 != 0 goto label3;
v16 = <io.netty.channel.AbstractChannel: io.netty.util.internal.logging.InternalLogger logger>;
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.net.SocketAddress)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("A non-root user can\'t receive a broadcast packet if the socket is not bound to a wildcard address; binding to a non-wildcard address (\u0001) anyway as requested.");
interfaceinvoke v16.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String)>(v17);
label3:
v18 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v19 = virtualinvoke v18.<io.netty.channel.AbstractChannel: boolean isActive()>();
label4:
v20 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
virtualinvoke v20.<io.netty.channel.AbstractChannel: void doBind(java.net.SocketAddress)>(v1);
label5:
goto label7;
label6:
v21 := @caughtexception;
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)>(v2, v21);
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void closeIfClosed()>();
return;
label7:
if v19 != 0 goto label8;
v22 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v23 = virtualinvoke v22.<io.netty.channel.AbstractChannel: boolean isActive()>();
if v23 == 0 goto label8;
v24 = new io.netty.channel.AbstractChannel$AbstractUnsafe$2;
specialinvoke v24.<io.netty.channel.AbstractChannel$AbstractUnsafe$2: void <init>(io.netty.channel.AbstractChannel$AbstractUnsafe)>(v0);
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void invokeLater(java.lang.Runnable)>(v24);
label8:
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void safeSetSuccess(io.netty.channel.ChannelPromise)>(v2);
return;
catch java.lang.Throwable from label4 to label5 with label6;
}
public final void disconnect(io.netty.channel.ChannelPromise)
{
java.lang.Throwable v8;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel v3, v5, v6, v7, v9;
io.netty.channel.AbstractChannel$AbstractUnsafe$3 v11;
io.netty.channel.ChannelPromise v1;
boolean v10, v2, v4;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void assertEventLoop()>();
v2 = interfaceinvoke v1.<io.netty.channel.ChannelPromise: boolean setUncancellable()>();
if v2 != 0 goto label1;
return;
label1:
v3 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v4 = virtualinvoke v3.<io.netty.channel.AbstractChannel: boolean isActive()>();
label2:
v5 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
virtualinvoke v5.<io.netty.channel.AbstractChannel: void doDisconnect()>();
v6 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v6.<io.netty.channel.AbstractChannel: java.net.SocketAddress remoteAddress> = null;
v7 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v7.<io.netty.channel.AbstractChannel: java.net.SocketAddress localAddress> = null;
label3:
goto label5;
label4:
v8 := @caughtexception;
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)>(v1, v8);
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void closeIfClosed()>();
return;
label5:
if v4 == 0 goto label6;
v9 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v10 = virtualinvoke v9.<io.netty.channel.AbstractChannel: boolean isActive()>();
if v10 != 0 goto label6;
v11 = new io.netty.channel.AbstractChannel$AbstractUnsafe$3;
specialinvoke v11.<io.netty.channel.AbstractChannel$AbstractUnsafe$3: void <init>(io.netty.channel.AbstractChannel$AbstractUnsafe)>(v0);
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void invokeLater(java.lang.Runnable)>(v11);
label6:
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void safeSetSuccess(io.netty.channel.ChannelPromise)>(v1);
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void closeIfClosed()>();
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
public void close(io.netty.channel.ChannelPromise)
{
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.StacklessClosedChannelException v2;
io.netty.channel.ChannelPromise v1;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void assertEventLoop()>();
v2 = staticinvoke <io.netty.channel.StacklessClosedChannelException: io.netty.channel.StacklessClosedChannelException newInstance(java.lang.Class,java.lang.String)>(class "Lio/netty/channel/AbstractChannel;", "close(ChannelPromise)");
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void close(io.netty.channel.ChannelPromise,java.lang.Throwable,java.nio.channels.ClosedChannelException,boolean)>(v1, v2, v2, 0);
return;
}
public final void shutdownOutput(io.netty.channel.ChannelPromise)
{
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.ChannelPromise v1;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void assertEventLoop()>();
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void shutdownOutput(io.netty.channel.ChannelPromise,java.lang.Throwable)>(v1, null);
return;
}
private void shutdownOutput(io.netty.channel.ChannelPromise, java.lang.Throwable)
{
java.lang.Throwable v11, v14, v2;
io.netty.channel.AbstractChannel v12, v15, v8, v9;
io.netty.channel.ChannelPromise v1;
io.netty.channel.socket.ChannelOutputShutdownException v6, v7;
boolean v3;
java.nio.channels.ClosedChannelException v5;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.ChannelOutboundBuffer v4;
io.netty.channel.DefaultChannelPipeline v10, v13, v16;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 := @parameter1: java.lang.Throwable;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelPromise: boolean setUncancellable()>();
if v3 != 0 goto label01;
return;
label01:
v4 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.ChannelOutboundBuffer outboundBuffer>;
if v4 != null goto label02;
v5 = new java.nio.channels.ClosedChannelException;
specialinvoke v5.<java.nio.channels.ClosedChannelException: void <init>()>();
interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v5);
return;
label02:
v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.ChannelOutboundBuffer outboundBuffer> = null;
if v2 != null goto label03;
v6 = new io.netty.channel.socket.ChannelOutputShutdownException;
specialinvoke v6.<io.netty.channel.socket.ChannelOutputShutdownException: void <init>(java.lang.String)>("Channel output shutdown");
goto label04;
label03:
v6 = new io.netty.channel.socket.ChannelOutputShutdownException;
specialinvoke v6.<io.netty.channel.socket.ChannelOutputShutdownException: void <init>(java.lang.String,java.lang.Throwable)>("Channel output shutdown", v2);
label04:
v7 = v6;
label05:
v8 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
virtualinvoke v8.<io.netty.channel.AbstractChannel: void doShutdownOutput()>();
interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
label06:
v9 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v10 = v9.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void closeOutboundBufferForShutdown(io.netty.channel.ChannelPipeline,io.netty.channel.ChannelOutboundBuffer,java.lang.Throwable)>(v10, v4, v6);
goto label10;
label07:
v11 := @caughtexception;
interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v11);
label08:
v12 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v13 = v12.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void closeOutboundBufferForShutdown(io.netty.channel.ChannelPipeline,io.netty.channel.ChannelOutboundBuffer,java.lang.Throwable)>(v13, v4, v7);
goto label10;
label09:
v14 := @caughtexception;
v15 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v16 = v15.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void closeOutboundBufferForShutdown(io.netty.channel.ChannelPipeline,io.netty.channel.ChannelOutboundBuffer,java.lang.Throwable)>(v16, v4, v7);
throw v14;
label10:
return;
catch java.lang.Throwable from label05 to label06 with label07;
catch java.lang.Throwable from label07 to label08 with label09;
}
private void closeOutboundBufferForShutdown(io.netty.channel.ChannelPipeline, io.netty.channel.ChannelOutboundBuffer, java.lang.Throwable)
{
io.netty.channel.ChannelOutboundBuffer v2;
java.lang.Throwable v3;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.ChannelPipeline v1;
io.netty.channel.socket.ChannelOutputShutdownEvent v4;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPipeline;
v2 := @parameter1: io.netty.channel.ChannelOutboundBuffer;
v3 := @parameter2: java.lang.Throwable;
virtualinvoke v2.<io.netty.channel.ChannelOutboundBuffer: void failFlushed(java.lang.Throwable,boolean)>(v3, 0);
virtualinvoke v2.<io.netty.channel.ChannelOutboundBuffer: void close(java.lang.Throwable,boolean)>(v3, 1);
v4 = <io.netty.channel.socket.ChannelOutputShutdownEvent: io.netty.channel.socket.ChannelOutputShutdownEvent INSTANCE>;
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireUserEventTriggered(java.lang.Object)>(v4);
return;
}
private void close(io.netty.channel.ChannelPromise, java.lang.Throwable, java.nio.channels.ClosedChannelException, boolean)
{
java.lang.Throwable v2, v21;
io.netty.channel.AbstractChannel$AbstractUnsafe$6 v23;
io.netty.channel.AbstractChannel v12, v15, v16, v6, v8;
io.netty.channel.AbstractChannel$AbstractUnsafe$5 v20;
io.netty.channel.AbstractChannel$AbstractUnsafe$4 v14;
io.netty.channel.ChannelPromise v1;
boolean v10, v11, v17, v22, v4, v5, v7;
java.util.concurrent.Executor v19;
java.nio.channels.ClosedChannelException v3;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel$CloseFuture v13, v9;
io.netty.channel.ChannelOutboundBuffer v18;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 := @parameter1: java.lang.Throwable;
v3 := @parameter2: java.nio.channels.ClosedChannelException;
v4 := @parameter3: boolean;
v5 = interfaceinvoke v1.<io.netty.channel.ChannelPromise: boolean setUncancellable()>();
if v5 != 0 goto label01;
return;
label01:
v6 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v7 = v6.<io.netty.channel.AbstractChannel: boolean closeInitiated>;
if v7 == 0 goto label04;
v8 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v9 = v8.<io.netty.channel.AbstractChannel: io.netty.channel.AbstractChannel$CloseFuture closeFuture>;
v10 = virtualinvoke v9.<io.netty.channel.AbstractChannel$CloseFuture: boolean isDone()>();
if v10 == 0 goto label02;
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void safeSetSuccess(io.netty.channel.ChannelPromise)>(v1);
goto label03;
label02:
v11 = v1 instanceof io.netty.channel.VoidChannelPromise;
if v11 != 0 goto label03;
v12 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v13 = v12.<io.netty.channel.AbstractChannel: io.netty.channel.AbstractChannel$CloseFuture closeFuture>;
v14 = new io.netty.channel.AbstractChannel$AbstractUnsafe$4;
specialinvoke v14.<io.netty.channel.AbstractChannel$AbstractUnsafe$4: void <init>(io.netty.channel.AbstractChannel$AbstractUnsafe,io.netty.channel.ChannelPromise)>(v0, v1);
virtualinvoke v13.<io.netty.channel.AbstractChannel$CloseFuture: io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)>(v14);
label03:
return;
label04:
v15 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v15.<io.netty.channel.AbstractChannel: boolean closeInitiated> = 1;
v16 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v17 = virtualinvoke v16.<io.netty.channel.AbstractChannel: boolean isActive()>();
v18 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.ChannelOutboundBuffer outboundBuffer>;
v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.ChannelOutboundBuffer outboundBuffer> = null;
v19 = virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: java.util.concurrent.Executor prepareToClose()>();
if v19 == null goto label05;
v20 = new io.netty.channel.AbstractChannel$AbstractUnsafe$5;
specialinvoke v20.<io.netty.channel.AbstractChannel$AbstractUnsafe$5: void <init>(io.netty.channel.AbstractChannel$AbstractUnsafe,io.netty.channel.ChannelPromise,io.netty.channel.ChannelOutboundBuffer,java.lang.Throwable,boolean,java.nio.channels.ClosedChannelException,boolean)>(v0, v1, v18, v2, v4, v3, v17);
interfaceinvoke v19.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(v20);
goto label11;
label05:
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void doClose0(io.netty.channel.ChannelPromise)>(v1);
label06:
if v18 == null goto label09;
virtualinvoke v18.<io.netty.channel.ChannelOutboundBuffer: void failFlushed(java.lang.Throwable,boolean)>(v2, v4);
virtualinvoke v18.<io.netty.channel.ChannelOutboundBuffer: void close(java.nio.channels.ClosedChannelException)>(v3);
goto label09;
label07:
v21 := @caughtexception;
if v18 == null goto label08;
virtualinvoke v18.<io.netty.channel.ChannelOutboundBuffer: void failFlushed(java.lang.Throwable,boolean)>(v2, v4);
virtualinvoke v18.<io.netty.channel.ChannelOutboundBuffer: void close(java.nio.channels.ClosedChannelException)>(v3);
label08:
throw v21;
label09:
v22 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: boolean inFlush0>;
if v22 == 0 goto label10;
v23 = new io.netty.channel.AbstractChannel$AbstractUnsafe$6;
specialinvoke v23.<io.netty.channel.AbstractChannel$AbstractUnsafe$6: void <init>(io.netty.channel.AbstractChannel$AbstractUnsafe,boolean)>(v0, v17);
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void invokeLater(java.lang.Runnable)>(v23);
goto label11;
label10:
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void fireChannelInactiveAndDeregister(boolean)>(v17);
label11:
return;
catch java.lang.Throwable from label05 to label06 with label07;
}
private void doClose0(io.netty.channel.ChannelPromise)
{
java.lang.Throwable v5;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel v2, v3, v6;
io.netty.channel.AbstractChannel$CloseFuture v4, v7;
io.netty.channel.ChannelPromise v1;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
label1:
v2 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
virtualinvoke v2.<io.netty.channel.AbstractChannel: void doClose()>();
v3 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v4 = v3.<io.netty.channel.AbstractChannel: io.netty.channel.AbstractChannel$CloseFuture closeFuture>;
virtualinvoke v4.<io.netty.channel.AbstractChannel$CloseFuture: boolean setClosed()>();
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void safeSetSuccess(io.netty.channel.ChannelPromise)>(v1);
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v7 = v6.<io.netty.channel.AbstractChannel: io.netty.channel.AbstractChannel$CloseFuture closeFuture>;
virtualinvoke v7.<io.netty.channel.AbstractChannel$CloseFuture: boolean setClosed()>();
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)>(v1, v5);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void fireChannelInactiveAndDeregister(boolean)
{
io.netty.channel.ChannelPromise v2;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel v3;
boolean v1, v4, v5;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: boolean;
v2 = virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.ChannelPromise voidPromise()>();
if v1 == 0 goto label1;
v3 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v4 = virtualinvoke v3.<io.netty.channel.AbstractChannel: boolean isActive()>();
if v4 != 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void deregister(io.netty.channel.ChannelPromise,boolean)>(v2, v5);
return;
}
public final void closeForcibly()
{
io.netty.util.internal.logging.InternalLogger v3;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel v1;
java.lang.Exception v2;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void assertEventLoop()>();
label1:
v1 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
virtualinvoke v1.<io.netty.channel.AbstractChannel: void doClose()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = <io.netty.channel.AbstractChannel: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Throwable)>("Failed to close a channel.", v2);
label4:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
public final void deregister(io.netty.channel.ChannelPromise)
{
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.ChannelPromise v1;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void assertEventLoop()>();
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void deregister(io.netty.channel.ChannelPromise,boolean)>(v1, 0);
return;
}
private void deregister(io.netty.channel.ChannelPromise, boolean)
{
io.netty.channel.ChannelPromise v1;
io.netty.channel.AbstractChannel$AbstractUnsafe$7 v6;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel v4;
boolean v2, v3, v5;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 := @parameter1: boolean;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelPromise: boolean setUncancellable()>();
if v3 != 0 goto label1;
return;
label1:
v4 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v5 = v4.<io.netty.channel.AbstractChannel: boolean registered>;
if v5 != 0 goto label2;
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void safeSetSuccess(io.netty.channel.ChannelPromise)>(v1);
return;
label2:
v6 = new io.netty.channel.AbstractChannel$AbstractUnsafe$7;
specialinvoke v6.<io.netty.channel.AbstractChannel$AbstractUnsafe$7: void <init>(io.netty.channel.AbstractChannel$AbstractUnsafe,boolean,io.netty.channel.ChannelPromise)>(v0, v2, v1);
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void invokeLater(java.lang.Runnable)>(v6);
return;
}
public final void beginRead()
{
io.netty.channel.ChannelPromise v4;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel v1;
io.netty.channel.AbstractChannel$AbstractUnsafe$8 v3;
java.lang.Exception v2;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void assertEventLoop()>();
label1:
v1 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
virtualinvoke v1.<io.netty.channel.AbstractChannel: void doBeginRead()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = new io.netty.channel.AbstractChannel$AbstractUnsafe$8;
specialinvoke v3.<io.netty.channel.AbstractChannel$AbstractUnsafe$8: void <init>(io.netty.channel.AbstractChannel$AbstractUnsafe,java.lang.Exception)>(v0, v2);
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void invokeLater(java.lang.Runnable)>(v3);
v4 = virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.ChannelPromise voidPromise()>();
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void close(io.netty.channel.ChannelPromise)>(v4);
label4:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
public final void write(java.lang.Object, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v16, v17, v5, v7, v9;
io.netty.channel.AbstractChannel v11, v12, v4, v8;
io.netty.channel.MessageSizeEstimator$Handle v14;
io.netty.channel.ChannelPromise v2;
int v15;
java.nio.channels.ClosedChannelException v10, v6;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.ChannelOutboundBuffer v3;
java.lang.Object v1;
io.netty.channel.DefaultChannelPipeline v13;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.ChannelPromise;
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void assertEventLoop()>();
v3 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.ChannelOutboundBuffer outboundBuffer>;
if v3 != null goto label05;
label01:
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v1);
label02:
v4 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v5 = v4.<io.netty.channel.AbstractChannel: java.lang.Throwable initialCloseCause>;
v6 = specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: java.nio.channels.ClosedChannelException newClosedChannelException(java.lang.Throwable,java.lang.String)>(v5, "write(Object, ChannelPromise)");
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)>(v2, v6);
goto label04;
label03:
v7 := @caughtexception;
v8 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v9 = v8.<io.netty.channel.AbstractChannel: java.lang.Throwable initialCloseCause>;
v10 = specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: java.nio.channels.ClosedChannelException newClosedChannelException(java.lang.Throwable,java.lang.String)>(v9, "write(Object, ChannelPromise)");
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)>(v2, v10);
throw v7;
label04:
return;
label05:
v11 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v1 = virtualinvoke v11.<io.netty.channel.AbstractChannel: java.lang.Object filterOutboundMessage(java.lang.Object)>(v1);
v12 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v13 = v12.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v14 = virtualinvoke v13.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.MessageSizeEstimator$Handle estimatorHandle()>();
v15 = interfaceinvoke v14.<io.netty.channel.MessageSizeEstimator$Handle: int size(java.lang.Object)>(v1);
if v15 >= 0 goto label12;
v15 = 0;
label06:
goto label12;
label07:
v16 := @caughtexception;
label08:
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v1);
label09:
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)>(v2, v16);
goto label11;
label10:
v17 := @caughtexception;
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)>(v2, v16);
throw v17;
label11:
return;
label12:
virtualinvoke v3.<io.netty.channel.ChannelOutboundBuffer: void addMessage(java.lang.Object,int,io.netty.channel.ChannelPromise)>(v1, v15, v2);
return;
catch java.lang.Throwable from label01 to label02 with label03;
catch java.lang.Throwable from label05 to label06 with label07;
catch java.lang.Throwable from label08 to label09 with label10;
}
public final void flush()
{
io.netty.channel.ChannelOutboundBuffer v1;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void assertEventLoop()>();
v1 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.ChannelOutboundBuffer outboundBuffer>;
if v1 != null goto label1;
return;
label1:
virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: void addFlush()>();
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void flush0()>();
return;
}
protected void flush0()
{
java.lang.Throwable v11, v13, v15, v16;
io.netty.channel.AbstractChannel v10, v14, v4, v7;
java.nio.channels.NotYetConnectedException v9;
boolean v1, v3, v5, v6, v8;
java.nio.channels.ClosedChannelException v12;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.ChannelOutboundBuffer v2;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: boolean inFlush0>;
if v1 == 0 goto label01;
return;
label01:
v2 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.ChannelOutboundBuffer outboundBuffer>;
if v2 == null goto label02;
v3 = virtualinvoke v2.<io.netty.channel.ChannelOutboundBuffer: boolean isEmpty()>();
if v3 == 0 goto label03;
label02:
return;
label03:
v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: boolean inFlush0> = 1;
v4 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v5 = virtualinvoke v4.<io.netty.channel.AbstractChannel: boolean isActive()>();
if v5 != 0 goto label09;
label04:
v6 = virtualinvoke v2.<io.netty.channel.ChannelOutboundBuffer: boolean isEmpty()>();
if v6 != 0 goto label06;
v7 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v8 = virtualinvoke v7.<io.netty.channel.AbstractChannel: boolean isOpen()>();
if v8 == 0 goto label05;
v9 = new java.nio.channels.NotYetConnectedException;
specialinvoke v9.<java.nio.channels.NotYetConnectedException: void <init>()>();
virtualinvoke v2.<io.netty.channel.ChannelOutboundBuffer: void failFlushed(java.lang.Throwable,boolean)>(v9, 1);
goto label06;
label05:
v10 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v11 = v10.<io.netty.channel.AbstractChannel: java.lang.Throwable initialCloseCause>;
v12 = specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: java.nio.channels.ClosedChannelException newClosedChannelException(java.lang.Throwable,java.lang.String)>(v11, "flush0()");
virtualinvoke v2.<io.netty.channel.ChannelOutboundBuffer: void failFlushed(java.lang.Throwable,boolean)>(v12, 0);
label06:
v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: boolean inFlush0> = 0;
goto label08;
label07:
v13 := @caughtexception;
v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: boolean inFlush0> = 0;
throw v13;
label08:
return;
label09:
v14 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
virtualinvoke v14.<io.netty.channel.AbstractChannel: void doWrite(io.netty.channel.ChannelOutboundBuffer)>(v2);
label10:
v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: boolean inFlush0> = 0;
goto label14;
label11:
v15 := @caughtexception;
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void handleWriteError(java.lang.Throwable)>(v15);
label12:
v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: boolean inFlush0> = 0;
goto label14;
label13:
v16 := @caughtexception;
v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: boolean inFlush0> = 0;
throw v16;
label14:
return;
catch java.lang.Throwable from label04 to label06 with label07;
catch java.lang.Throwable from label09 to label10 with label11;
catch java.lang.Throwable from label11 to label12 with label13;
}
protected final void handleWriteError(java.lang.Throwable)
{
java.lang.Throwable v1, v10;
java.nio.channels.ClosedChannelException v13, v8;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel v11, v3, v6;
io.netty.channel.ChannelConfig v4;
io.netty.channel.ChannelPromise v12, v7, v9;
boolean v2, v5;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: java.lang.Throwable;
v2 = v1 instanceof java.io.IOException;
if v2 == 0 goto label1;
v3 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v4 = virtualinvoke v3.<io.netty.channel.AbstractChannel: io.netty.channel.ChannelConfig config()>();
v5 = interfaceinvoke v4.<io.netty.channel.ChannelConfig: boolean isAutoClose()>();
if v5 == 0 goto label1;
v6 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v6.<io.netty.channel.AbstractChannel: java.lang.Throwable initialCloseCause> = v1;
v7 = virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.ChannelPromise voidPromise()>();
v8 = specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: java.nio.channels.ClosedChannelException newClosedChannelException(java.lang.Throwable,java.lang.String)>(v1, "flush0()");
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void close(io.netty.channel.ChannelPromise,java.lang.Throwable,java.nio.channels.ClosedChannelException,boolean)>(v7, v1, v8, 0);
goto label4;
label1:
v9 = virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.ChannelPromise voidPromise()>();
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void shutdownOutput(io.netty.channel.ChannelPromise,java.lang.Throwable)>(v9, v1);
label2:
goto label4;
label3:
v10 := @caughtexception;
v11 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v11.<io.netty.channel.AbstractChannel: java.lang.Throwable initialCloseCause> = v1;
v12 = virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.ChannelPromise voidPromise()>();
v13 = specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: java.nio.channels.ClosedChannelException newClosedChannelException(java.lang.Throwable,java.lang.String)>(v1, "flush0()");
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void close(io.netty.channel.ChannelPromise,java.lang.Throwable,java.nio.channels.ClosedChannelException,boolean)>(v12, v10, v13, 0);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private java.nio.channels.ClosedChannelException newClosedChannelException(java.lang.Throwable, java.lang.String)
{
java.lang.Throwable v1;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.StacklessClosedChannelException v3;
java.lang.String v2;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: java.lang.Throwable;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.netty.channel.StacklessClosedChannelException: io.netty.channel.StacklessClosedChannelException newInstance(java.lang.Class,java.lang.String)>(class "Lio/netty/channel/AbstractChannel$AbstractUnsafe;", v2);
if v1 == null goto label1;
virtualinvoke v3.<java.nio.channels.ClosedChannelException: java.lang.Throwable initCause(java.lang.Throwable)>(v1);
label1:
return v3;
}
public final io.netty.channel.ChannelPromise voidPromise()
{
io.netty.channel.VoidChannelPromise v2;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel v1;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void assertEventLoop()>();
v1 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v2 = v1.<io.netty.channel.AbstractChannel: io.netty.channel.VoidChannelPromise unsafeVoidPromise>;
return v2;
}
protected final boolean ensureOpen(io.netty.channel.ChannelPromise)
{
java.lang.Throwable v5;
io.netty.channel.ChannelPromise v1;
java.nio.channels.ClosedChannelException v6;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel v2, v4;
boolean v3;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v3 = virtualinvoke v2.<io.netty.channel.AbstractChannel: boolean isOpen()>();
if v3 == 0 goto label1;
return 1;
label1:
v4 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v5 = v4.<io.netty.channel.AbstractChannel: java.lang.Throwable initialCloseCause>;
v6 = specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: java.nio.channels.ClosedChannelException newClosedChannelException(java.lang.Throwable,java.lang.String)>(v5, "ensureOpen(ChannelPromise)");
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)>(v1, v6);
return 0;
}
protected final void safeSetSuccess(io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v1;
io.netty.util.internal.logging.InternalLogger v4;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
boolean v2, v3;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = v1 instanceof io.netty.channel.VoidChannelPromise;
if v2 != 0 goto label1;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelPromise: boolean trySuccess()>();
if v3 != 0 goto label1;
v4 = <io.netty.channel.AbstractChannel: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v4.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object)>("Failed to mark a promise as success because it is done already: {}", v1);
label1:
return;
}
protected final void safeSetFailure(io.netty.channel.ChannelPromise, java.lang.Throwable)
{
java.lang.Throwable v2;
io.netty.channel.ChannelPromise v1;
io.netty.util.internal.logging.InternalLogger v5;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
boolean v3, v4;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 := @parameter1: java.lang.Throwable;
v3 = v1 instanceof io.netty.channel.VoidChannelPromise;
if v3 != 0 goto label1;
v4 = interfaceinvoke v1.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v2);
if v4 != 0 goto label1;
v5 = <io.netty.channel.AbstractChannel: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Failed to mark a promise as failure because it\'s done already: {}", v1, v2);
label1:
return;
}
protected final void closeIfClosed()
{
io.netty.channel.ChannelPromise v3;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel v1;
boolean v2;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v2 = virtualinvoke v1.<io.netty.channel.AbstractChannel: boolean isOpen()>();
if v2 == 0 goto label1;
return;
label1:
v3 = virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.ChannelPromise voidPromise()>();
virtualinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void close(io.netty.channel.ChannelPromise)>(v3);
return;
}
private void invokeLater(java.lang.Runnable)
{
java.util.concurrent.RejectedExecutionException v4;
io.netty.util.internal.logging.InternalLogger v5;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel v2;
io.netty.channel.EventLoop v3;
java.lang.Runnable v1;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: java.lang.Runnable;
label1:
v2 = v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: io.netty.channel.AbstractChannel this$0>;
v3 = virtualinvoke v2.<io.netty.channel.AbstractChannel: io.netty.channel.EventLoop eventLoop()>();
interfaceinvoke v3.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v1);
label2:
goto label4;
label3:
v4 := @caughtexception;
v5 = <io.netty.channel.AbstractChannel: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Throwable)>("Can\'t invoke task later as EventLoop rejected it", v4);
label4:
return;
catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
}
protected final java.lang.Throwable annotateConnectException(java.lang.Throwable, java.net.SocketAddress)
{
java.lang.Throwable v1;
io.netty.channel.AbstractChannel$AnnotatedNoRouteToHostException v6;
java.net.SocketAddress v2;
io.netty.channel.AbstractChannel$AnnotatedSocketException v8;
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
io.netty.channel.AbstractChannel$AnnotatedConnectException v4;
boolean v3, v5, v7;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
v1 := @parameter0: java.lang.Throwable;
v2 := @parameter1: java.net.SocketAddress;
v3 = v1 instanceof java.net.ConnectException;
if v3 == 0 goto label1;
v4 = new io.netty.channel.AbstractChannel$AnnotatedConnectException;
specialinvoke v4.<io.netty.channel.AbstractChannel$AnnotatedConnectException: void <init>(java.net.ConnectException,java.net.SocketAddress)>(v1, v2);
return v4;
label1:
v5 = v1 instanceof java.net.NoRouteToHostException;
if v5 == 0 goto label2;
v6 = new io.netty.channel.AbstractChannel$AnnotatedNoRouteToHostException;
specialinvoke v6.<io.netty.channel.AbstractChannel$AnnotatedNoRouteToHostException: void <init>(java.net.NoRouteToHostException,java.net.SocketAddress)>(v1, v2);
return v6;
label2:
v7 = v1 instanceof java.net.SocketException;
if v7 == 0 goto label3;
v8 = new io.netty.channel.AbstractChannel$AnnotatedSocketException;
specialinvoke v8.<io.netty.channel.AbstractChannel$AnnotatedSocketException: void <init>(java.net.SocketException,java.net.SocketAddress)>(v1, v2);
return v8;
label3:
return v1;
}
protected java.util.concurrent.Executor prepareToClose()
{
io.netty.channel.AbstractChannel$AbstractUnsafe v0;
v0 := @this: io.netty.channel.AbstractChannel$AbstractUnsafe;
return null;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/channel/AbstractChannel;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.channel.AbstractChannel$AbstractUnsafe: boolean $assertionsDisabled> = v2;
return;
}
}