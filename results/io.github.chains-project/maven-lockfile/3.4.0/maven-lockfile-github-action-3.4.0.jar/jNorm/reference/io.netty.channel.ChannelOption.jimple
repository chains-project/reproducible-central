public class io.netty.channel.ChannelOption extends io.netty.util.AbstractConstant
{
private static final io.netty.util.ConstantPool pool;
public static final io.netty.channel.ChannelOption ALLOCATOR;
public static final io.netty.channel.ChannelOption RCVBUF_ALLOCATOR;
public static final io.netty.channel.ChannelOption MESSAGE_SIZE_ESTIMATOR;
public static final io.netty.channel.ChannelOption CONNECT_TIMEOUT_MILLIS;
public static final io.netty.channel.ChannelOption MAX_MESSAGES_PER_READ;
public static final io.netty.channel.ChannelOption MAX_MESSAGES_PER_WRITE;
public static final io.netty.channel.ChannelOption WRITE_SPIN_COUNT;
public static final io.netty.channel.ChannelOption WRITE_BUFFER_HIGH_WATER_MARK;
public static final io.netty.channel.ChannelOption WRITE_BUFFER_LOW_WATER_MARK;
public static final io.netty.channel.ChannelOption WRITE_BUFFER_WATER_MARK;
public static final io.netty.channel.ChannelOption ALLOW_HALF_CLOSURE;
public static final io.netty.channel.ChannelOption AUTO_READ;
public static final io.netty.channel.ChannelOption AUTO_CLOSE;
public static final io.netty.channel.ChannelOption SO_BROADCAST;
public static final io.netty.channel.ChannelOption SO_KEEPALIVE;
public static final io.netty.channel.ChannelOption SO_SNDBUF;
public static final io.netty.channel.ChannelOption SO_RCVBUF;
public static final io.netty.channel.ChannelOption SO_REUSEADDR;
public static final io.netty.channel.ChannelOption SO_LINGER;
public static final io.netty.channel.ChannelOption SO_BACKLOG;
public static final io.netty.channel.ChannelOption SO_TIMEOUT;
public static final io.netty.channel.ChannelOption IP_TOS;
public static final io.netty.channel.ChannelOption IP_MULTICAST_ADDR;
public static final io.netty.channel.ChannelOption IP_MULTICAST_IF;
public static final io.netty.channel.ChannelOption IP_MULTICAST_TTL;
public static final io.netty.channel.ChannelOption IP_MULTICAST_LOOP_DISABLED;
public static final io.netty.channel.ChannelOption TCP_NODELAY;
public static final io.netty.channel.ChannelOption TCP_FASTOPEN_CONNECT;
public static final io.netty.channel.ChannelOption TCP_FASTOPEN;
public static final io.netty.channel.ChannelOption DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION;
public static final io.netty.channel.ChannelOption SINGLE_EVENTEXECUTOR_PER_GROUP;
public static io.netty.channel.ChannelOption valueOf(java.lang.String)
{
io.netty.util.Constant v2;
java.lang.String v0;
io.netty.util.ConstantPool v1;
v0 := @parameter0: java.lang.String;
v1 = <io.netty.channel.ChannelOption: io.netty.util.ConstantPool pool>;
v2 = virtualinvoke v1.<io.netty.util.ConstantPool: io.netty.util.Constant valueOf(java.lang.String)>(v0);
return v2;
}
public static io.netty.channel.ChannelOption valueOf(java.lang.Class, java.lang.String)
{
io.netty.util.Constant v3;
io.netty.util.ConstantPool v2;
java.lang.Class v0;
java.lang.String v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 = <io.netty.channel.ChannelOption: io.netty.util.ConstantPool pool>;
v3 = virtualinvoke v2.<io.netty.util.ConstantPool: io.netty.util.Constant valueOf(java.lang.Class,java.lang.String)>(v0, v1);
return v3;
}
public static boolean exists(java.lang.String)
{
java.lang.String v0;
io.netty.util.ConstantPool v1;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 = <io.netty.channel.ChannelOption: io.netty.util.ConstantPool pool>;
v2 = virtualinvoke v1.<io.netty.util.ConstantPool: boolean exists(java.lang.String)>(v0);
return v2;
}
public static io.netty.channel.ChannelOption newInstance(java.lang.String)
{
io.netty.util.Constant v2;
java.lang.String v0;
io.netty.util.ConstantPool v1;
v0 := @parameter0: java.lang.String;
v1 = <io.netty.channel.ChannelOption: io.netty.util.ConstantPool pool>;
v2 = virtualinvoke v1.<io.netty.util.ConstantPool: io.netty.util.Constant newInstance(java.lang.String)>(v0);
return v2;
}
private void <init>(int, java.lang.String)
{
int v1;
java.lang.String v2;
io.netty.channel.ChannelOption v0;
v0 := @this: io.netty.channel.ChannelOption;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<io.netty.util.AbstractConstant: void <init>(int,java.lang.String)>(v1, v2);
return;
}
protected void <init>(java.lang.String)
{
io.netty.channel.ChannelOption v0;
io.netty.util.ConstantPool v2;
int v3;
java.lang.String v1;
v0 := @this: io.netty.channel.ChannelOption;
v1 := @parameter0: java.lang.String;
v2 = <io.netty.channel.ChannelOption: io.netty.util.ConstantPool pool>;
v3 = virtualinvoke v2.<io.netty.util.ConstantPool: int nextId()>();
specialinvoke v0.<io.netty.channel.ChannelOption: void <init>(int,java.lang.String)>(v3, v1);
return;
}
public void validate(java.lang.Object)
{
java.lang.Object v1;
io.netty.channel.ChannelOption v0;
v0 := @this: io.netty.channel.ChannelOption;
v1 := @parameter0: java.lang.Object;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "value");
return;
}
static void <clinit>()
{
io.netty.channel.ChannelOption$1 v0;
io.netty.channel.ChannelOption v1, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v2, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v3, v30, v31, v4, v5, v6, v7, v8, v9;
v0 = new io.netty.channel.ChannelOption$1;
specialinvoke v0.<io.netty.channel.ChannelOption$1: void <init>()>();
<io.netty.channel.ChannelOption: io.netty.util.ConstantPool pool> = v0;
v1 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("ALLOCATOR");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption ALLOCATOR> = v1;
v2 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("RCVBUF_ALLOCATOR");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption RCVBUF_ALLOCATOR> = v2;
v3 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("MESSAGE_SIZE_ESTIMATOR");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption MESSAGE_SIZE_ESTIMATOR> = v3;
v4 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("CONNECT_TIMEOUT_MILLIS");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption CONNECT_TIMEOUT_MILLIS> = v4;
v5 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("MAX_MESSAGES_PER_READ");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption MAX_MESSAGES_PER_READ> = v5;
v6 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("MAX_MESSAGES_PER_WRITE");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption MAX_MESSAGES_PER_WRITE> = v6;
v7 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("WRITE_SPIN_COUNT");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption WRITE_SPIN_COUNT> = v7;
v8 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("WRITE_BUFFER_HIGH_WATER_MARK");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption WRITE_BUFFER_HIGH_WATER_MARK> = v8;
v9 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("WRITE_BUFFER_LOW_WATER_MARK");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption WRITE_BUFFER_LOW_WATER_MARK> = v9;
v10 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("WRITE_BUFFER_WATER_MARK");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption WRITE_BUFFER_WATER_MARK> = v10;
v11 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("ALLOW_HALF_CLOSURE");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption ALLOW_HALF_CLOSURE> = v11;
v12 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("AUTO_READ");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption AUTO_READ> = v12;
v13 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("AUTO_CLOSE");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption AUTO_CLOSE> = v13;
v14 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("SO_BROADCAST");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_BROADCAST> = v14;
v15 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("SO_KEEPALIVE");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_KEEPALIVE> = v15;
v16 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("SO_SNDBUF");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_SNDBUF> = v16;
v17 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("SO_RCVBUF");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_RCVBUF> = v17;
v18 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("SO_REUSEADDR");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_REUSEADDR> = v18;
v19 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("SO_LINGER");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_LINGER> = v19;
v20 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("SO_BACKLOG");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_BACKLOG> = v20;
v21 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("SO_TIMEOUT");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_TIMEOUT> = v21;
v22 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("IP_TOS");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_TOS> = v22;
v23 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("IP_MULTICAST_ADDR");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_MULTICAST_ADDR> = v23;
v24 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("IP_MULTICAST_IF");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_MULTICAST_IF> = v24;
v25 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("IP_MULTICAST_TTL");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_MULTICAST_TTL> = v25;
v26 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("IP_MULTICAST_LOOP_DISABLED");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_MULTICAST_LOOP_DISABLED> = v26;
v27 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("TCP_NODELAY");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption TCP_NODELAY> = v27;
v28 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("TCP_FASTOPEN_CONNECT");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption TCP_FASTOPEN_CONNECT> = v28;
v29 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.Class,java.lang.String)>(class "Lio/netty/channel/ChannelOption;", "TCP_FASTOPEN");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption TCP_FASTOPEN> = v29;
v30 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION> = v30;
v31 = staticinvoke <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption valueOf(java.lang.String)>("SINGLE_EVENTEXECUTOR_PER_GROUP");
<io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SINGLE_EVENTEXECUTOR_PER_GROUP> = v31;
return;
}
}