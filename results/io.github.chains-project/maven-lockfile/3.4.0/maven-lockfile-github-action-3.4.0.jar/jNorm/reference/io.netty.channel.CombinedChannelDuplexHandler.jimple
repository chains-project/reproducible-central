public class io.netty.channel.CombinedChannelDuplexHandler extends io.netty.channel.ChannelDuplexHandler
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx;
private io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx;
private volatile boolean handlerAdded;
private io.netty.channel.ChannelInboundHandler inboundHandler;
private io.netty.channel.ChannelOutboundHandler outboundHandler;
static final boolean $assertionsDisabled;
protected void <init>()
{
io.netty.channel.CombinedChannelDuplexHandler v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
specialinvoke v0.<io.netty.channel.ChannelDuplexHandler: void <init>()>();
virtualinvoke v0.<io.netty.channel.CombinedChannelDuplexHandler: void ensureNotSharable()>();
return;
}
public void <init>(io.netty.channel.ChannelInboundHandler, io.netty.channel.ChannelOutboundHandler)
{
io.netty.channel.ChannelInboundHandler v1;
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelOutboundHandler v2;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelInboundHandler;
v2 := @parameter1: io.netty.channel.ChannelOutboundHandler;
specialinvoke v0.<io.netty.channel.ChannelDuplexHandler: void <init>()>();
virtualinvoke v0.<io.netty.channel.CombinedChannelDuplexHandler: void ensureNotSharable()>();
virtualinvoke v0.<io.netty.channel.CombinedChannelDuplexHandler: void init(io.netty.channel.ChannelInboundHandler,io.netty.channel.ChannelOutboundHandler)>(v1, v2);
return;
}
protected final void init(io.netty.channel.ChannelInboundHandler, io.netty.channel.ChannelOutboundHandler)
{
io.netty.channel.ChannelInboundHandler v1;
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelOutboundHandler v2;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelInboundHandler;
v2 := @parameter1: io.netty.channel.ChannelOutboundHandler;
specialinvoke v0.<io.netty.channel.CombinedChannelDuplexHandler: void validate(io.netty.channel.ChannelInboundHandler,io.netty.channel.ChannelOutboundHandler)>(v1, v2);
v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelInboundHandler inboundHandler> = v1;
v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelOutboundHandler outboundHandler> = v2;
return;
}
private void validate(io.netty.channel.ChannelInboundHandler, io.netty.channel.ChannelOutboundHandler)
{
java.lang.IllegalStateException v4;
io.netty.channel.ChannelInboundHandler v1, v3;
java.lang.String v11, v12, v16, v17, v6, v7;
boolean v13, v8;
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelOutboundHandler v2;
java.lang.IllegalArgumentException v14, v9;
java.lang.Class v10, v15, v5;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelInboundHandler;
v2 := @parameter1: io.netty.channel.ChannelOutboundHandler;
v3 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelInboundHandler inboundHandler>;
if v3 == null goto label1;
v4 = new java.lang.IllegalStateException;
v5 = class "Lio/netty/channel/CombinedChannelDuplexHandler;";
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getSimpleName()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("init() can not be invoked if \u0001 was constructed with non-default constructor.");
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v7);
throw v4;
label1:
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "inboundHandler");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "outboundHandler");
v8 = v1 instanceof io.netty.channel.ChannelOutboundHandler;
if v8 == 0 goto label2;
v9 = new java.lang.IllegalArgumentException;
v10 = class "Lio/netty/channel/ChannelOutboundHandler;";
v11 = virtualinvoke v10.<java.lang.Class: java.lang.String getSimpleName()>();
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("inboundHandler must not implement \u0001 to get combined.");
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v12);
throw v9;
label2:
v13 = v2 instanceof io.netty.channel.ChannelInboundHandler;
if v13 == 0 goto label3;
v14 = new java.lang.IllegalArgumentException;
v15 = class "Lio/netty/channel/ChannelInboundHandler;";
v16 = virtualinvoke v15.<java.lang.Class: java.lang.String getSimpleName()>();
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("outboundHandler must not implement \u0001 to get combined.");
specialinvoke v14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v17);
throw v14;
label3:
return;
}
protected final io.netty.channel.ChannelInboundHandler inboundHandler()
{
io.netty.channel.ChannelInboundHandler v1;
io.netty.channel.CombinedChannelDuplexHandler v0;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelInboundHandler inboundHandler>;
return v1;
}
protected final io.netty.channel.ChannelOutboundHandler outboundHandler()
{
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelOutboundHandler v1;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelOutboundHandler outboundHandler>;
return v1;
}
private void checkAdded()
{
java.lang.IllegalStateException v2;
io.netty.channel.CombinedChannelDuplexHandler v0;
boolean v1;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler: boolean handlerAdded>;
if v1 != 0 goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("handler not added to pipeline yet");
throw v2;
label1:
return;
}
public final void removeInboundHandler()
{
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v1;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
specialinvoke v0.<io.netty.channel.CombinedChannelDuplexHandler: void checkAdded()>();
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
virtualinvoke v1.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: void remove()>();
return;
}
public final void removeOutboundHandler()
{
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v1;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
specialinvoke v0.<io.netty.channel.CombinedChannelDuplexHandler: void checkAdded()>();
v1 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
virtualinvoke v1.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: void remove()>();
return;
}
public void handlerAdded(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
java.lang.Throwable v17;
java.lang.IllegalStateException v3;
io.netty.channel.ChannelInboundHandler v12, v13, v2;
io.netty.channel.ChannelHandlerContext v1;
java.lang.String v5, v7, v8;
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelOutboundHandler v10, v15, v18;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v14, v16, v19, v9;
java.lang.Class v4, v6;
io.netty.channel.CombinedChannelDuplexHandler$1 v11;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelInboundHandler inboundHandler>;
if v2 != null goto label1;
v3 = new java.lang.IllegalStateException;
v4 = class "Lio/netty/channel/ChannelPipeline;";
v5 = virtualinvoke v4.<java.lang.Class: java.lang.String getSimpleName()>();
v6 = class "Lio/netty/channel/CombinedChannelDuplexHandler;";
v7 = virtualinvoke v6.<java.lang.Class: java.lang.String getSimpleName()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v5, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("init() must be invoked before being added to a \u0001 if \u0001 was constructed with the default constructor.");
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v8);
throw v3;
label1:
v9 = new io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext;
v10 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelOutboundHandler outboundHandler>;
specialinvoke v9.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: void <init>(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelHandler)>(v1, v10);
v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx> = v9;
v11 = new io.netty.channel.CombinedChannelDuplexHandler$1;
v12 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelInboundHandler inboundHandler>;
specialinvoke v11.<io.netty.channel.CombinedChannelDuplexHandler$1: void <init>(io.netty.channel.CombinedChannelDuplexHandler,io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelHandler)>(v0, v1, v12);
v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx> = v11;
v0.<io.netty.channel.CombinedChannelDuplexHandler: boolean handlerAdded> = 1;
label2:
v13 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelInboundHandler inboundHandler>;
v14 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
interfaceinvoke v13.<io.netty.channel.ChannelInboundHandler: void handlerAdded(io.netty.channel.ChannelHandlerContext)>(v14);
label3:
v15 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelOutboundHandler outboundHandler>;
v16 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
interfaceinvoke v15.<io.netty.channel.ChannelOutboundHandler: void handlerAdded(io.netty.channel.ChannelHandlerContext)>(v16);
goto label5;
label4:
v17 := @caughtexception;
v18 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelOutboundHandler outboundHandler>;
v19 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
interfaceinvoke v18.<io.netty.channel.ChannelOutboundHandler: void handlerAdded(io.netty.channel.ChannelHandlerContext)>(v19);
throw v17;
label5:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
public void handlerRemoved(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
java.lang.Throwable v4;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v2, v3, v5;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
label1:
v2 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
virtualinvoke v2.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: void remove()>();
label2:
v3 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
virtualinvoke v3.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: void remove()>();
goto label4;
label3:
v4 := @caughtexception;
v5 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
virtualinvoke v5.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: void remove()>();
throw v4;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void channelRegistered(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelInboundHandler v8;
java.lang.AssertionError v5;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v10, v3, v6, v9;
io.netty.channel.ChannelHandlerContext v1, v4;
boolean v2, v7;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = <io.netty.channel.CombinedChannelDuplexHandler: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
v4 = v3.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
if v1 == v4 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
v7 = v6.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v7 != 0 goto label2;
v8 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelInboundHandler inboundHandler>;
v9 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
interfaceinvoke v8.<io.netty.channel.ChannelInboundHandler: void channelRegistered(io.netty.channel.ChannelHandlerContext)>(v9);
goto label3;
label2:
v10 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
virtualinvoke v10.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRegistered()>();
label3:
return;
}
public void channelUnregistered(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelInboundHandler v8;
java.lang.AssertionError v5;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v10, v3, v6, v9;
io.netty.channel.ChannelHandlerContext v1, v4;
boolean v2, v7;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = <io.netty.channel.CombinedChannelDuplexHandler: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
v4 = v3.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
if v1 == v4 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
v7 = v6.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v7 != 0 goto label2;
v8 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelInboundHandler inboundHandler>;
v9 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
interfaceinvoke v8.<io.netty.channel.ChannelInboundHandler: void channelUnregistered(io.netty.channel.ChannelHandlerContext)>(v9);
goto label3;
label2:
v10 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
virtualinvoke v10.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelUnregistered()>();
label3:
return;
}
public void channelActive(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelInboundHandler v8;
java.lang.AssertionError v5;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v10, v3, v6, v9;
io.netty.channel.ChannelHandlerContext v1, v4;
boolean v2, v7;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = <io.netty.channel.CombinedChannelDuplexHandler: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
v4 = v3.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
if v1 == v4 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
v7 = v6.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v7 != 0 goto label2;
v8 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelInboundHandler inboundHandler>;
v9 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
interfaceinvoke v8.<io.netty.channel.ChannelInboundHandler: void channelActive(io.netty.channel.ChannelHandlerContext)>(v9);
goto label3;
label2:
v10 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
virtualinvoke v10.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelActive()>();
label3:
return;
}
public void channelInactive(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelInboundHandler v8;
java.lang.AssertionError v5;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v10, v3, v6, v9;
io.netty.channel.ChannelHandlerContext v1, v4;
boolean v2, v7;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = <io.netty.channel.CombinedChannelDuplexHandler: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
v4 = v3.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
if v1 == v4 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
v7 = v6.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v7 != 0 goto label2;
v8 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelInboundHandler inboundHandler>;
v9 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
interfaceinvoke v8.<io.netty.channel.ChannelInboundHandler: void channelInactive(io.netty.channel.ChannelHandlerContext)>(v9);
goto label3;
label2:
v10 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
virtualinvoke v10.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelInactive()>();
label3:
return;
}
public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable) throws java.lang.Exception
{
java.lang.Throwable v2;
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelInboundHandler v9;
java.lang.AssertionError v6;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v10, v11, v4, v7;
io.netty.channel.ChannelHandlerContext v1, v5;
boolean v3, v8;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Throwable;
v3 = <io.netty.channel.CombinedChannelDuplexHandler: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
v4 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
v5 = v4.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
if v1 == v5 goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
v7 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
v8 = v7.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v8 != 0 goto label2;
v9 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelInboundHandler inboundHandler>;
v10 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
interfaceinvoke v9.<io.netty.channel.ChannelInboundHandler: void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)>(v10, v2);
goto label3;
label2:
v11 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
virtualinvoke v11.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)>(v2);
label3:
return;
}
public void userEventTriggered(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelInboundHandler v9;
java.lang.AssertionError v6;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v10, v11, v4, v7;
io.netty.channel.ChannelHandlerContext v1, v5;
java.lang.Object v2;
boolean v3, v8;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = <io.netty.channel.CombinedChannelDuplexHandler: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
v4 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
v5 = v4.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
if v1 == v5 goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
v7 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
v8 = v7.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v8 != 0 goto label2;
v9 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelInboundHandler inboundHandler>;
v10 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
interfaceinvoke v9.<io.netty.channel.ChannelInboundHandler: void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)>(v10, v2);
goto label3;
label2:
v11 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
virtualinvoke v11.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)>(v2);
label3:
return;
}
public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelInboundHandler v9;
java.lang.AssertionError v6;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v10, v11, v4, v7;
io.netty.channel.ChannelHandlerContext v1, v5;
java.lang.Object v2;
boolean v3, v8;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = <io.netty.channel.CombinedChannelDuplexHandler: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
v4 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
v5 = v4.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
if v1 == v5 goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
v7 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
v8 = v7.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v8 != 0 goto label2;
v9 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelInboundHandler inboundHandler>;
v10 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
interfaceinvoke v9.<io.netty.channel.ChannelInboundHandler: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>(v10, v2);
goto label3;
label2:
v11 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
virtualinvoke v11.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>(v2);
label3:
return;
}
public void channelReadComplete(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelInboundHandler v8;
java.lang.AssertionError v5;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v10, v3, v6, v9;
io.netty.channel.ChannelHandlerContext v1, v4;
boolean v2, v7;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = <io.netty.channel.CombinedChannelDuplexHandler: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
v4 = v3.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
if v1 == v4 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
v7 = v6.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v7 != 0 goto label2;
v8 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelInboundHandler inboundHandler>;
v9 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
interfaceinvoke v8.<io.netty.channel.ChannelInboundHandler: void channelReadComplete(io.netty.channel.ChannelHandlerContext)>(v9);
goto label3;
label2:
v10 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
virtualinvoke v10.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelReadComplete()>();
label3:
return;
}
public void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelInboundHandler v8;
java.lang.AssertionError v5;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v10, v3, v6, v9;
io.netty.channel.ChannelHandlerContext v1, v4;
boolean v2, v7;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = <io.netty.channel.CombinedChannelDuplexHandler: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
v4 = v3.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
if v1 == v4 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
v7 = v6.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v7 != 0 goto label2;
v8 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelInboundHandler inboundHandler>;
v9 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
interfaceinvoke v8.<io.netty.channel.ChannelInboundHandler: void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)>(v9);
goto label3;
label2:
v10 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext inboundCtx>;
virtualinvoke v10.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()>();
label3:
return;
}
public void bind(io.netty.channel.ChannelHandlerContext, java.net.SocketAddress, io.netty.channel.ChannelPromise) throws java.lang.Exception
{
io.netty.channel.CombinedChannelDuplexHandler v0;
java.net.SocketAddress v2;
io.netty.channel.ChannelOutboundHandler v10;
java.lang.AssertionError v7;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v11, v12, v5, v8;
io.netty.channel.ChannelHandlerContext v1, v6;
io.netty.channel.ChannelPromise v3;
boolean v4, v9;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.net.SocketAddress;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = <io.netty.channel.CombinedChannelDuplexHandler: boolean $assertionsDisabled>;
if v4 != 0 goto label1;
v5 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
v6 = v5.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
if v1 == v6 goto label1;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label1:
v8 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
v9 = v8.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v9 != 0 goto label2;
v10 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelOutboundHandler outboundHandler>;
v11 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
interfaceinvoke v10.<io.netty.channel.ChannelOutboundHandler: void bind(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v11, v2, v3);
goto label3;
label2:
v12 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
virtualinvoke v12.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v2, v3);
label3:
return;
}
public void connect(io.netty.channel.ChannelHandlerContext, java.net.SocketAddress, java.net.SocketAddress, io.netty.channel.ChannelPromise) throws java.lang.Exception
{
io.netty.channel.CombinedChannelDuplexHandler v0;
java.net.SocketAddress v2, v3;
io.netty.channel.ChannelOutboundHandler v11;
java.lang.AssertionError v8;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v12, v13, v6, v9;
io.netty.channel.ChannelHandlerContext v1, v7;
io.netty.channel.ChannelPromise v4;
boolean v10, v5;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.net.SocketAddress;
v3 := @parameter2: java.net.SocketAddress;
v4 := @parameter3: io.netty.channel.ChannelPromise;
v5 = <io.netty.channel.CombinedChannelDuplexHandler: boolean $assertionsDisabled>;
if v5 != 0 goto label1;
v6 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
v7 = v6.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
if v1 == v7 goto label1;
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>()>();
throw v8;
label1:
v9 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
v10 = v9.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v10 != 0 goto label2;
v11 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelOutboundHandler outboundHandler>;
v12 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
interfaceinvoke v11.<io.netty.channel.ChannelOutboundHandler: void connect(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v12, v2, v3, v4);
goto label3;
label2:
v13 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
virtualinvoke v13.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v2, v3, v4);
label3:
return;
}
public void disconnect(io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelPromise) throws java.lang.Exception
{
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelOutboundHandler v9;
java.lang.AssertionError v6;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v10, v11, v4, v7;
io.netty.channel.ChannelHandlerContext v1, v5;
io.netty.channel.ChannelPromise v2;
boolean v3, v8;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = <io.netty.channel.CombinedChannelDuplexHandler: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
v4 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
v5 = v4.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
if v1 == v5 goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
v7 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
v8 = v7.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v8 != 0 goto label2;
v9 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelOutboundHandler outboundHandler>;
v10 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
interfaceinvoke v9.<io.netty.channel.ChannelOutboundHandler: void disconnect(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)>(v10, v2);
goto label3;
label2:
v11 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
virtualinvoke v11.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)>(v2);
label3:
return;
}
public void close(io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelPromise) throws java.lang.Exception
{
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelOutboundHandler v9;
java.lang.AssertionError v6;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v10, v11, v4, v7;
io.netty.channel.ChannelHandlerContext v1, v5;
io.netty.channel.ChannelPromise v2;
boolean v3, v8;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = <io.netty.channel.CombinedChannelDuplexHandler: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
v4 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
v5 = v4.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
if v1 == v5 goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
v7 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
v8 = v7.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v8 != 0 goto label2;
v9 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelOutboundHandler outboundHandler>;
v10 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
interfaceinvoke v9.<io.netty.channel.ChannelOutboundHandler: void close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)>(v10, v2);
goto label3;
label2:
v11 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
virtualinvoke v11.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)>(v2);
label3:
return;
}
public void deregister(io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelPromise) throws java.lang.Exception
{
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelOutboundHandler v9;
java.lang.AssertionError v6;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v10, v11, v4, v7;
io.netty.channel.ChannelHandlerContext v1, v5;
io.netty.channel.ChannelPromise v2;
boolean v3, v8;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = <io.netty.channel.CombinedChannelDuplexHandler: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
v4 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
v5 = v4.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
if v1 == v5 goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
v7 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
v8 = v7.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v8 != 0 goto label2;
v9 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelOutboundHandler outboundHandler>;
v10 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
interfaceinvoke v9.<io.netty.channel.ChannelOutboundHandler: void deregister(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)>(v10, v2);
goto label3;
label2:
v11 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
virtualinvoke v11.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)>(v2);
label3:
return;
}
public void read(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelOutboundHandler v8;
java.lang.AssertionError v5;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v10, v3, v6, v9;
io.netty.channel.ChannelHandlerContext v1, v4;
boolean v2, v7;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = <io.netty.channel.CombinedChannelDuplexHandler: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
v4 = v3.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
if v1 == v4 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
v7 = v6.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v7 != 0 goto label2;
v8 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelOutboundHandler outboundHandler>;
v9 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
interfaceinvoke v8.<io.netty.channel.ChannelOutboundHandler: void read(io.netty.channel.ChannelHandlerContext)>(v9);
goto label3;
label2:
v10 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
virtualinvoke v10.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext read()>();
label3:
return;
}
public void write(io.netty.channel.ChannelHandlerContext, java.lang.Object, io.netty.channel.ChannelPromise) throws java.lang.Exception
{
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelOutboundHandler v10;
java.lang.AssertionError v7;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v11, v12, v5, v8;
io.netty.channel.ChannelHandlerContext v1, v6;
io.netty.channel.ChannelPromise v3;
java.lang.Object v2;
boolean v4, v9;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = <io.netty.channel.CombinedChannelDuplexHandler: boolean $assertionsDisabled>;
if v4 != 0 goto label1;
v5 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
v6 = v5.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
if v1 == v6 goto label1;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label1:
v8 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
v9 = v8.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v9 != 0 goto label2;
v10 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelOutboundHandler outboundHandler>;
v11 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
interfaceinvoke v10.<io.netty.channel.ChannelOutboundHandler: void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>(v11, v2, v3);
goto label3;
label2:
v12 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
virtualinvoke v12.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v2, v3);
label3:
return;
}
public void flush(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.CombinedChannelDuplexHandler v0;
io.netty.channel.ChannelOutboundHandler v8;
java.lang.AssertionError v5;
io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext v10, v3, v6, v9;
io.netty.channel.ChannelHandlerContext v1, v4;
boolean v2, v7;
v0 := @this: io.netty.channel.CombinedChannelDuplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = <io.netty.channel.CombinedChannelDuplexHandler: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
v4 = v3.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext ctx>;
if v1 == v4 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
v7 = v6.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: boolean removed>;
if v7 != 0 goto label2;
v8 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.ChannelOutboundHandler outboundHandler>;
v9 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
interfaceinvoke v8.<io.netty.channel.ChannelOutboundHandler: void flush(io.netty.channel.ChannelHandlerContext)>(v9);
goto label3;
label2:
v10 = v0.<io.netty.channel.CombinedChannelDuplexHandler: io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext outboundCtx>;
virtualinvoke v10.<io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>();
label3:
return;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v3;
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/channel/CombinedChannelDuplexHandler;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.channel.CombinedChannelDuplexHandler: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/channel/CombinedChannelDuplexHandler;");
<io.netty.channel.CombinedChannelDuplexHandler: io.netty.util.internal.logging.InternalLogger logger> = v3;
return;
}
}