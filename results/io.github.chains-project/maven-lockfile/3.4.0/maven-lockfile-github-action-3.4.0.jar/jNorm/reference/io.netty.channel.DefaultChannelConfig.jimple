public class io.netty.channel.DefaultChannelConfig extends java.lang.Object implements io.netty.channel.ChannelConfig
{
private static final io.netty.channel.MessageSizeEstimator DEFAULT_MSG_SIZE_ESTIMATOR;
private static final int DEFAULT_CONNECT_TIMEOUT;
private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater AUTOREAD_UPDATER;
private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater WATERMARK_UPDATER;
protected final io.netty.channel.Channel channel;
private volatile io.netty.buffer.ByteBufAllocator allocator;
private volatile io.netty.channel.RecvByteBufAllocator rcvBufAllocator;
private volatile io.netty.channel.MessageSizeEstimator msgSizeEstimator;
private volatile int connectTimeoutMillis;
private volatile int writeSpinCount;
private volatile int maxMessagesPerWrite;
private volatile int autoRead;
private volatile boolean autoClose;
private volatile io.netty.channel.WriteBufferWaterMark writeBufferWaterMark;
private volatile boolean pinEventExecutor;
public void <init>(io.netty.channel.Channel)
{
io.netty.channel.Channel v1;
io.netty.channel.AdaptiveRecvByteBufAllocator v2;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: io.netty.channel.Channel;
v2 = new io.netty.channel.AdaptiveRecvByteBufAllocator;
specialinvoke v2.<io.netty.channel.AdaptiveRecvByteBufAllocator: void <init>()>();
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: void <init>(io.netty.channel.Channel,io.netty.channel.RecvByteBufAllocator)>(v1, v2);
return;
}
protected void <init>(io.netty.channel.Channel, io.netty.channel.RecvByteBufAllocator)
{
io.netty.channel.Channel v1;
io.netty.channel.MessageSizeEstimator v4;
io.netty.channel.WriteBufferWaterMark v5;
io.netty.buffer.ByteBufAllocator v3;
io.netty.channel.DefaultChannelConfig v0;
io.netty.channel.ChannelMetadata v6;
io.netty.channel.RecvByteBufAllocator v2;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.channel.RecvByteBufAllocator;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = <io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBufAllocator DEFAULT>;
v0.<io.netty.channel.DefaultChannelConfig: io.netty.buffer.ByteBufAllocator allocator> = v3;
v4 = <io.netty.channel.DefaultChannelConfig: io.netty.channel.MessageSizeEstimator DEFAULT_MSG_SIZE_ESTIMATOR>;
v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.MessageSizeEstimator msgSizeEstimator> = v4;
v0.<io.netty.channel.DefaultChannelConfig: int connectTimeoutMillis> = 30000;
v0.<io.netty.channel.DefaultChannelConfig: int writeSpinCount> = 16;
v0.<io.netty.channel.DefaultChannelConfig: int maxMessagesPerWrite> = 2147483647;
v0.<io.netty.channel.DefaultChannelConfig: int autoRead> = 1;
v0.<io.netty.channel.DefaultChannelConfig: boolean autoClose> = 1;
v5 = <io.netty.channel.WriteBufferWaterMark: io.netty.channel.WriteBufferWaterMark DEFAULT>;
v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.WriteBufferWaterMark writeBufferWaterMark> = v5;
v0.<io.netty.channel.DefaultChannelConfig: boolean pinEventExecutor> = 1;
v6 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelMetadata metadata()>();
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: void setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator,io.netty.channel.ChannelMetadata)>(v2, v6);
v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.Channel channel> = v1;
return;
}
public java.util.Map getOptions()
{
io.netty.channel.ChannelOption v10, v11, v12, v13, v14, v2, v3, v4, v5, v6, v7, v8, v9;
io.netty.channel.DefaultChannelConfig v0;
io.netty.channel.ChannelOption[] v1;
java.util.Map v15;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 = newarray (io.netty.channel.ChannelOption)[13];
v2 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption CONNECT_TIMEOUT_MILLIS>;
v1[0] = v2;
v3 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption MAX_MESSAGES_PER_READ>;
v1[1] = v3;
v4 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption WRITE_SPIN_COUNT>;
v1[2] = v4;
v5 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption ALLOCATOR>;
v1[3] = v5;
v6 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption AUTO_READ>;
v1[4] = v6;
v7 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption AUTO_CLOSE>;
v1[5] = v7;
v8 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption RCVBUF_ALLOCATOR>;
v1[6] = v8;
v9 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption WRITE_BUFFER_HIGH_WATER_MARK>;
v1[7] = v9;
v10 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption WRITE_BUFFER_LOW_WATER_MARK>;
v1[8] = v10;
v11 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption WRITE_BUFFER_WATER_MARK>;
v1[9] = v11;
v12 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption MESSAGE_SIZE_ESTIMATOR>;
v1[10] = v12;
v13 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SINGLE_EVENTEXECUTOR_PER_GROUP>;
v1[11] = v13;
v14 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption MAX_MESSAGES_PER_WRITE>;
v1[12] = v14;
v15 = virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])>(null, v1);
return v15;
}
protected transient java.util.Map getOptions(java.util.Map, io.netty.channel.ChannelOption[])
{
java.util.IdentityHashMap v3;
io.netty.channel.ChannelOption v6;
io.netty.channel.DefaultChannelConfig v0;
io.netty.channel.ChannelOption[] v2;
java.util.Map v1;
int v4, v5;
java.lang.Object v7;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: java.util.Map;
v2 := @parameter1: io.netty.channel.ChannelOption[];
if v1 != null goto label1;
v3 = new java.util.IdentityHashMap;
specialinvoke v3.<java.util.IdentityHashMap: void <init>()>();
v1 = v3;
label1:
v4 = lengthof v2;
v5 = 0;
label2:
if v5 >= v4 goto label3;
v6 = v2[v5];
v7 = virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: java.lang.Object getOption(io.netty.channel.ChannelOption)>(v6);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v7);
v5 = v5 + 1;
goto label2;
label3:
return v1;
}
public boolean setOptions(java.util.Map)
{
java.util.Iterator v4;
io.netty.channel.DefaultChannelConfig v0;
java.util.Set v3;
java.util.Map v1;
java.lang.Object v6, v7, v8;
boolean v2, v5, v9;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: java.util.Map;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "options");
v2 = 1;
v3 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getKey()>();
v8 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getValue()>();
v9 = virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)>(v7, v8);
if v9 != 0 goto label1;
v2 = 0;
goto label1;
label2:
return v2;
}
public java.lang.Object getOption(io.netty.channel.ChannelOption)
{
io.netty.buffer.ByteBufAllocator v12;
io.netty.channel.DefaultChannelConfig v0;
java.lang.Integer v10, v23, v26, v36, v4, v7;
io.netty.channel.MessageSizeEstimator v30;
boolean v16, v19, v32;
io.netty.channel.RecvByteBufAllocator v14;
io.netty.channel.WriteBufferWaterMark v28;
io.netty.channel.ChannelOption v1, v11, v13, v15, v18, v2, v21, v24, v27, v29, v31, v34, v5, v8;
int v22, v25, v3, v35, v6, v9;
java.lang.Boolean v17, v20, v33;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: io.netty.channel.ChannelOption;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "option");
v2 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption CONNECT_TIMEOUT_MILLIS>;
if v1 != v2 goto label01;
v3 = virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: int getConnectTimeoutMillis()>();
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
return v4;
label01:
v5 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption MAX_MESSAGES_PER_READ>;
if v1 != v5 goto label02;
v6 = virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: int getMaxMessagesPerRead()>();
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
return v7;
label02:
v8 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption WRITE_SPIN_COUNT>;
if v1 != v8 goto label03;
v9 = virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: int getWriteSpinCount()>();
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v9);
return v10;
label03:
v11 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption ALLOCATOR>;
if v1 != v11 goto label04;
v12 = virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.buffer.ByteBufAllocator getAllocator()>();
return v12;
label04:
v13 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption RCVBUF_ALLOCATOR>;
if v1 != v13 goto label05;
v14 = virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.RecvByteBufAllocator getRecvByteBufAllocator()>();
return v14;
label05:
v15 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption AUTO_READ>;
if v1 != v15 goto label06;
v16 = virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: boolean isAutoRead()>();
v17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v16);
return v17;
label06:
v18 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption AUTO_CLOSE>;
if v1 != v18 goto label07;
v19 = virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: boolean isAutoClose()>();
v20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v19);
return v20;
label07:
v21 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption WRITE_BUFFER_HIGH_WATER_MARK>;
if v1 != v21 goto label08;
v22 = virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: int getWriteBufferHighWaterMark()>();
v23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v22);
return v23;
label08:
v24 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption WRITE_BUFFER_LOW_WATER_MARK>;
if v1 != v24 goto label09;
v25 = virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: int getWriteBufferLowWaterMark()>();
v26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v25);
return v26;
label09:
v27 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption WRITE_BUFFER_WATER_MARK>;
if v1 != v27 goto label10;
v28 = virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.WriteBufferWaterMark getWriteBufferWaterMark()>();
return v28;
label10:
v29 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption MESSAGE_SIZE_ESTIMATOR>;
if v1 != v29 goto label11;
v30 = virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.MessageSizeEstimator getMessageSizeEstimator()>();
return v30;
label11:
v31 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SINGLE_EVENTEXECUTOR_PER_GROUP>;
if v1 != v31 goto label12;
v32 = specialinvoke v0.<io.netty.channel.DefaultChannelConfig: boolean getPinEventExecutorPerGroup()>();
v33 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v32);
return v33;
label12:
v34 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption MAX_MESSAGES_PER_WRITE>;
if v1 != v34 goto label13;
v35 = virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: int getMaxMessagesPerWrite()>();
v36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v35);
return v36;
label13:
return null;
}
public boolean setOption(io.netty.channel.ChannelOption, java.lang.Object)
{
io.netty.channel.ChannelOption v1, v10, v11, v13, v15, v17, v19, v20, v21, v23, v3, v5, v7, v9;
io.netty.channel.DefaultChannelConfig v0;
int v16, v18, v24, v4, v6, v8;
boolean v12, v14, v22;
java.lang.Object v2;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: io.netty.channel.ChannelOption;
v2 := @parameter1: java.lang.Object;
virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: void validate(io.netty.channel.ChannelOption,java.lang.Object)>(v1, v2);
v3 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption CONNECT_TIMEOUT_MILLIS>;
if v1 != v3 goto label01;
v4 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setConnectTimeoutMillis(int)>(v4);
goto label14;
label01:
v5 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption MAX_MESSAGES_PER_READ>;
if v1 != v5 goto label02;
v6 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setMaxMessagesPerRead(int)>(v6);
goto label14;
label02:
v7 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption WRITE_SPIN_COUNT>;
if v1 != v7 goto label03;
v8 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setWriteSpinCount(int)>(v8);
goto label14;
label03:
v9 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption ALLOCATOR>;
if v1 != v9 goto label04;
virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator)>(v2);
goto label14;
label04:
v10 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption RCVBUF_ALLOCATOR>;
if v1 != v10 goto label05;
virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator)>(v2);
goto label14;
label05:
v11 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption AUTO_READ>;
if v1 != v11 goto label06;
v12 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setAutoRead(boolean)>(v12);
goto label14;
label06:
v13 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption AUTO_CLOSE>;
if v1 != v13 goto label07;
v14 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setAutoClose(boolean)>(v14);
goto label14;
label07:
v15 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption WRITE_BUFFER_HIGH_WATER_MARK>;
if v1 != v15 goto label08;
v16 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setWriteBufferHighWaterMark(int)>(v16);
goto label14;
label08:
v17 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption WRITE_BUFFER_LOW_WATER_MARK>;
if v1 != v17 goto label09;
v18 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setWriteBufferLowWaterMark(int)>(v18);
goto label14;
label09:
v19 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption WRITE_BUFFER_WATER_MARK>;
if v1 != v19 goto label10;
virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark)>(v2);
goto label14;
label10:
v20 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption MESSAGE_SIZE_ESTIMATOR>;
if v1 != v20 goto label11;
virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator)>(v2);
goto label14;
label11:
v21 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SINGLE_EVENTEXECUTOR_PER_GROUP>;
if v1 != v21 goto label12;
v22 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setPinEventExecutorPerGroup(boolean)>(v22);
goto label14;
label12:
v23 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption MAX_MESSAGES_PER_WRITE>;
if v1 != v23 goto label13;
v24 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setMaxMessagesPerWrite(int)>(v24);
goto label14;
label13:
return 0;
label14:
return 1;
}
protected void validate(io.netty.channel.ChannelOption, java.lang.Object)
{
io.netty.channel.ChannelOption v1;
io.netty.channel.DefaultChannelConfig v0;
java.lang.Object v2, v3;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: io.netty.channel.ChannelOption;
v2 := @parameter1: java.lang.Object;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "option");
virtualinvoke v3.<io.netty.channel.ChannelOption: void validate(java.lang.Object)>(v2);
return;
}
public int getConnectTimeoutMillis()
{
int v1;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 = v0.<io.netty.channel.DefaultChannelConfig: int connectTimeoutMillis>;
return v1;
}
public io.netty.channel.ChannelConfig setConnectTimeoutMillis(int)
{
int v1;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: int;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v1, "connectTimeoutMillis");
v0.<io.netty.channel.DefaultChannelConfig: int connectTimeoutMillis> = v1;
return v0;
}
public int getMaxMessagesPerRead()
{
java.lang.IllegalStateException v4;
io.netty.channel.DefaultChannelConfig v0;
int v2;
io.netty.channel.RecvByteBufAllocator v1;
java.lang.ClassCastException v3;
v0 := @this: io.netty.channel.DefaultChannelConfig;
label1:
v1 = virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.RecvByteBufAllocator getRecvByteBufAllocator()>();
v2 = interfaceinvoke v1.<io.netty.channel.MaxMessagesRecvByteBufAllocator: int maxMessagesPerRead()>();
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("getRecvByteBufAllocator() must return an object of type MaxMessagesRecvByteBufAllocator", v3);
throw v4;
catch java.lang.ClassCastException from label1 to label2 with label3;
}
public io.netty.channel.ChannelConfig setMaxMessagesPerRead(int)
{
java.lang.IllegalStateException v4;
io.netty.channel.DefaultChannelConfig v0;
int v1;
io.netty.channel.RecvByteBufAllocator v2;
java.lang.ClassCastException v3;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: int;
label1:
v2 = virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.RecvByteBufAllocator getRecvByteBufAllocator()>();
interfaceinvoke v2.<io.netty.channel.MaxMessagesRecvByteBufAllocator: io.netty.channel.MaxMessagesRecvByteBufAllocator maxMessagesPerRead(int)>(v1);
label2:
return v0;
label3:
v3 := @caughtexception;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("getRecvByteBufAllocator() must return an object of type MaxMessagesRecvByteBufAllocator", v3);
throw v4;
catch java.lang.ClassCastException from label1 to label2 with label3;
}
public int getMaxMessagesPerWrite()
{
int v1;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 = v0.<io.netty.channel.DefaultChannelConfig: int maxMessagesPerWrite>;
return v1;
}
public io.netty.channel.ChannelConfig setMaxMessagesPerWrite(int)
{
int v1, v2;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: int;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v1, "maxMessagesPerWrite");
v0.<io.netty.channel.DefaultChannelConfig: int maxMessagesPerWrite> = v2;
return v0;
}
public int getWriteSpinCount()
{
int v1;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 = v0.<io.netty.channel.DefaultChannelConfig: int writeSpinCount>;
return v1;
}
public io.netty.channel.ChannelConfig setWriteSpinCount(int)
{
int v1;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: int;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v1, "writeSpinCount");
if v1 != 2147483647 goto label1;
v1 = v1 - 1;
label1:
v0.<io.netty.channel.DefaultChannelConfig: int writeSpinCount> = v1;
return v0;
}
public io.netty.buffer.ByteBufAllocator getAllocator()
{
io.netty.buffer.ByteBufAllocator v1;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 = v0.<io.netty.channel.DefaultChannelConfig: io.netty.buffer.ByteBufAllocator allocator>;
return v1;
}
public io.netty.channel.ChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator)
{
java.lang.Object v2;
io.netty.buffer.ByteBufAllocator v1;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "allocator");
v0.<io.netty.channel.DefaultChannelConfig: io.netty.buffer.ByteBufAllocator allocator> = v2;
return v0;
}
public io.netty.channel.RecvByteBufAllocator getRecvByteBufAllocator()
{
io.netty.channel.RecvByteBufAllocator v1;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 = v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.RecvByteBufAllocator rcvBufAllocator>;
return v1;
}
public io.netty.channel.ChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator)
{
java.lang.Object v2;
io.netty.channel.RecvByteBufAllocator v1;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: io.netty.channel.RecvByteBufAllocator;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "allocator");
v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.RecvByteBufAllocator rcvBufAllocator> = v2;
return v0;
}
private void setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator, io.netty.channel.ChannelMetadata)
{
io.netty.channel.DefaultChannelConfig v0;
int v4;
io.netty.channel.ChannelMetadata v2;
io.netty.channel.RecvByteBufAllocator v1;
boolean v3;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: io.netty.channel.RecvByteBufAllocator;
v2 := @parameter1: io.netty.channel.ChannelMetadata;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "allocator");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "metadata");
v3 = v1 instanceof io.netty.channel.MaxMessagesRecvByteBufAllocator;
if v3 == 0 goto label1;
v4 = virtualinvoke v2.<io.netty.channel.ChannelMetadata: int defaultMaxMessagesPerRead()>();
interfaceinvoke v1.<io.netty.channel.MaxMessagesRecvByteBufAllocator: io.netty.channel.MaxMessagesRecvByteBufAllocator maxMessagesPerRead(int)>(v4);
label1:
virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator)>(v1);
return;
}
public boolean isAutoRead()
{
int v1;
boolean v2;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 = v0.<io.netty.channel.DefaultChannelConfig: int autoRead>;
if v1 != 1 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public io.netty.channel.ChannelConfig setAutoRead(boolean)
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v2;
io.netty.channel.DefaultChannelConfig v0;
io.netty.channel.Channel v7;
byte v3;
int v4;
boolean v1, v5, v6;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: boolean;
v2 = <io.netty.channel.DefaultChannelConfig: java.util.concurrent.atomic.AtomicIntegerFieldUpdater AUTOREAD_UPDATER>;
if v1 == 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
v4 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndSet(java.lang.Object,int)>(v0, v3);
if v4 != 1 goto label3;
v5 = 1;
goto label4;
label3:
v5 = 0;
label4:
v6 = v5;
if v1 == 0 goto label5;
if v5 != 0 goto label5;
v7 = v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.Channel channel>;
interfaceinvoke v7.<io.netty.channel.Channel: io.netty.channel.Channel read()>();
goto label6;
label5:
if v1 != 0 goto label6;
if v6 == 0 goto label6;
virtualinvoke v0.<io.netty.channel.DefaultChannelConfig: void autoReadCleared()>();
label6:
return v0;
}
protected void autoReadCleared()
{
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
return;
}
public boolean isAutoClose()
{
boolean v1;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 = v0.<io.netty.channel.DefaultChannelConfig: boolean autoClose>;
return v1;
}
public io.netty.channel.ChannelConfig setAutoClose(boolean)
{
boolean v1;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: boolean;
v0.<io.netty.channel.DefaultChannelConfig: boolean autoClose> = v1;
return v0;
}
public int getWriteBufferHighWaterMark()
{
int v2;
io.netty.channel.WriteBufferWaterMark v1;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 = v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.WriteBufferWaterMark writeBufferWaterMark>;
v2 = virtualinvoke v1.<io.netty.channel.WriteBufferWaterMark: int high()>();
return v2;
}
public io.netty.channel.ChannelConfig setWriteBufferHighWaterMark(int)
{
io.netty.channel.WriteBufferWaterMark v2, v8;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v7;
io.netty.channel.DefaultChannelConfig v0;
java.lang.IllegalArgumentException v4;
int v1, v3, v5, v9;
java.lang.String v6;
boolean v10;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: int;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v1, "writeBufferHighWaterMark");
label1:
v2 = v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.WriteBufferWaterMark writeBufferWaterMark>;
v3 = virtualinvoke v2.<io.netty.channel.WriteBufferWaterMark: int low()>();
if v1 >= v3 goto label2;
v4 = new java.lang.IllegalArgumentException;
v5 = virtualinvoke v2.<io.netty.channel.WriteBufferWaterMark: int low()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v5, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("writeBufferHighWaterMark cannot be less than writeBufferLowWaterMark (\u0001): \u0001");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v4;
label2:
v7 = <io.netty.channel.DefaultChannelConfig: java.util.concurrent.atomic.AtomicReferenceFieldUpdater WATERMARK_UPDATER>;
v8 = new io.netty.channel.WriteBufferWaterMark;
v9 = virtualinvoke v2.<io.netty.channel.WriteBufferWaterMark: int low()>();
specialinvoke v8.<io.netty.channel.WriteBufferWaterMark: void <init>(int,int,boolean)>(v9, v1, 0);
v10 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v2, v8);
if v10 == 0 goto label1;
return v0;
}
public int getWriteBufferLowWaterMark()
{
int v2;
io.netty.channel.WriteBufferWaterMark v1;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 = v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.WriteBufferWaterMark writeBufferWaterMark>;
v2 = virtualinvoke v1.<io.netty.channel.WriteBufferWaterMark: int low()>();
return v2;
}
public io.netty.channel.ChannelConfig setWriteBufferLowWaterMark(int)
{
io.netty.channel.WriteBufferWaterMark v2, v8;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v7;
io.netty.channel.DefaultChannelConfig v0;
java.lang.IllegalArgumentException v4;
int v1, v3, v5, v9;
java.lang.String v6;
boolean v10;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: int;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v1, "writeBufferLowWaterMark");
label1:
v2 = v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.WriteBufferWaterMark writeBufferWaterMark>;
v3 = virtualinvoke v2.<io.netty.channel.WriteBufferWaterMark: int high()>();
if v1 <= v3 goto label2;
v4 = new java.lang.IllegalArgumentException;
v5 = virtualinvoke v2.<io.netty.channel.WriteBufferWaterMark: int high()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v5, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("writeBufferLowWaterMark cannot be greater than writeBufferHighWaterMark (\u0001): \u0001");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v4;
label2:
v7 = <io.netty.channel.DefaultChannelConfig: java.util.concurrent.atomic.AtomicReferenceFieldUpdater WATERMARK_UPDATER>;
v8 = new io.netty.channel.WriteBufferWaterMark;
v9 = virtualinvoke v2.<io.netty.channel.WriteBufferWaterMark: int high()>();
specialinvoke v8.<io.netty.channel.WriteBufferWaterMark: void <init>(int,int,boolean)>(v1, v9, 0);
v10 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v2, v8);
if v10 == 0 goto label1;
return v0;
}
public io.netty.channel.ChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark)
{
io.netty.channel.WriteBufferWaterMark v1;
java.lang.Object v2;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: io.netty.channel.WriteBufferWaterMark;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "writeBufferWaterMark");
v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.WriteBufferWaterMark writeBufferWaterMark> = v2;
return v0;
}
public io.netty.channel.WriteBufferWaterMark getWriteBufferWaterMark()
{
io.netty.channel.WriteBufferWaterMark v1;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 = v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.WriteBufferWaterMark writeBufferWaterMark>;
return v1;
}
public io.netty.channel.MessageSizeEstimator getMessageSizeEstimator()
{
io.netty.channel.MessageSizeEstimator v1;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 = v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.MessageSizeEstimator msgSizeEstimator>;
return v1;
}
public io.netty.channel.ChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator)
{
io.netty.channel.MessageSizeEstimator v1;
java.lang.Object v2;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: io.netty.channel.MessageSizeEstimator;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "estimator");
v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.MessageSizeEstimator msgSizeEstimator> = v2;
return v0;
}
private io.netty.channel.ChannelConfig setPinEventExecutorPerGroup(boolean)
{
boolean v1;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 := @parameter0: boolean;
v0.<io.netty.channel.DefaultChannelConfig: boolean pinEventExecutor> = v1;
return v0;
}
private boolean getPinEventExecutorPerGroup()
{
boolean v1;
io.netty.channel.DefaultChannelConfig v0;
v0 := @this: io.netty.channel.DefaultChannelConfig;
v1 = v0.<io.netty.channel.DefaultChannelConfig: boolean pinEventExecutor>;
return v1;
}
static void <clinit>()
{
io.netty.channel.MessageSizeEstimator v0;
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v1;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v2;
v0 = <io.netty.channel.DefaultMessageSizeEstimator: io.netty.channel.MessageSizeEstimator DEFAULT>;
<io.netty.channel.DefaultChannelConfig: io.netty.channel.MessageSizeEstimator DEFAULT_MSG_SIZE_ESTIMATOR> = v0;
v1 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lio/netty/channel/DefaultChannelConfig;", "autoRead");
<io.netty.channel.DefaultChannelConfig: java.util.concurrent.atomic.AtomicIntegerFieldUpdater AUTOREAD_UPDATER> = v1;
v2 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lio/netty/channel/DefaultChannelConfig;", class "Lio/netty/channel/WriteBufferWaterMark;", "writeBufferWaterMark");
<io.netty.channel.DefaultChannelConfig: java.util.concurrent.atomic.AtomicReferenceFieldUpdater WATERMARK_UPDATER> = v2;
return;
}
}