public class io.netty.channel.DefaultChannelPipeline extends java.lang.Object implements io.netty.channel.ChannelPipeline
{
static final io.netty.util.internal.logging.InternalLogger logger;
private static final java.lang.String HEAD_NAME;
private static final java.lang.String TAIL_NAME;
private static final io.netty.util.concurrent.FastThreadLocal nameCaches;
private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater ESTIMATOR;
final io.netty.channel.DefaultChannelPipeline$HeadContext head;
final io.netty.channel.DefaultChannelPipeline$TailContext tail;
private final io.netty.channel.Channel channel;
private final io.netty.channel.ChannelFuture succeededFuture;
private final io.netty.channel.VoidChannelPromise voidPromise;
private final boolean touch;
private java.util.Map childExecutors;
private volatile io.netty.channel.MessageSizeEstimator$Handle estimatorHandle;
private boolean firstRegistration;
private io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback pendingHandlerCallbackHead;
private boolean registered;
static final boolean $assertionsDisabled;
protected void <init>(io.netty.channel.Channel)
{
io.netty.channel.SucceededChannelFuture v4;
io.netty.channel.DefaultChannelPipeline$TailContext v10, v6, v9;
io.netty.channel.Channel v1;
io.netty.channel.VoidChannelPromise v5;
io.netty.channel.DefaultChannelPipeline$HeadContext v11, v7, v8;
java.lang.Object v3;
io.netty.channel.DefaultChannelPipeline v0;
boolean v2;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.Channel;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.netty.util.ResourceLeakDetector: boolean isEnabled()>();
v0.<io.netty.channel.DefaultChannelPipeline: boolean touch> = v2;
v0.<io.netty.channel.DefaultChannelPipeline: boolean firstRegistration> = 1;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "channel");
v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.Channel channel> = v3;
v4 = new io.netty.channel.SucceededChannelFuture;
specialinvoke v4.<io.netty.channel.SucceededChannelFuture: void <init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)>(v1, null);
v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture succeededFuture> = v4;
v5 = new io.netty.channel.VoidChannelPromise;
specialinvoke v5.<io.netty.channel.VoidChannelPromise: void <init>(io.netty.channel.Channel,boolean)>(v1, 1);
v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.VoidChannelPromise voidPromise> = v5;
v6 = new io.netty.channel.DefaultChannelPipeline$TailContext;
specialinvoke v6.<io.netty.channel.DefaultChannelPipeline$TailContext: void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.channel.DefaultChannelPipeline)>(v0, v0);
v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail> = v6;
v7 = new io.netty.channel.DefaultChannelPipeline$HeadContext;
specialinvoke v7.<io.netty.channel.DefaultChannelPipeline$HeadContext: void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.channel.DefaultChannelPipeline)>(v0, v0);
v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head> = v7;
v8 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
v9 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v8.<io.netty.channel.DefaultChannelPipeline$HeadContext: io.netty.channel.AbstractChannelHandlerContext next> = v9;
v10 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v11 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
v10.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.AbstractChannelHandlerContext prev> = v11;
return;
}
final io.netty.channel.MessageSizeEstimator$Handle estimatorHandle()
{
io.netty.channel.Channel v2;
io.netty.channel.MessageSizeEstimator v4;
io.netty.channel.ChannelConfig v3;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v5;
io.netty.channel.DefaultChannelPipeline v0;
boolean v6;
io.netty.channel.MessageSizeEstimator$Handle v1;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.MessageSizeEstimator$Handle estimatorHandle>;
if v1 != null goto label1;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.Channel channel>;
v3 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v4 = interfaceinvoke v3.<io.netty.channel.ChannelConfig: io.netty.channel.MessageSizeEstimator getMessageSizeEstimator()>();
v1 = interfaceinvoke v4.<io.netty.channel.MessageSizeEstimator: io.netty.channel.MessageSizeEstimator$Handle newHandle()>();
v5 = <io.netty.channel.DefaultChannelPipeline: java.util.concurrent.atomic.AtomicReferenceFieldUpdater ESTIMATOR>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, null, v1);
if v6 != 0 goto label1;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.MessageSizeEstimator$Handle estimatorHandle>;
label1:
return v1;
}
final java.lang.Object touch(java.lang.Object, io.netty.channel.AbstractChannelHandlerContext)
{
io.netty.channel.AbstractChannelHandlerContext v2;
java.lang.Object v1, v4;
io.netty.channel.DefaultChannelPipeline v0;
boolean v3;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.AbstractChannelHandlerContext;
v3 = v0.<io.netty.channel.DefaultChannelPipeline: boolean touch>;
if v3 == 0 goto label1;
v4 = staticinvoke <io.netty.util.ReferenceCountUtil: java.lang.Object touch(java.lang.Object,java.lang.Object)>(v1, v2);
goto label2;
label1:
v4 = v1;
label2:
return v4;
}
private io.netty.channel.AbstractChannelHandlerContext newContext(io.netty.util.concurrent.EventExecutorGroup, java.lang.String, io.netty.channel.ChannelHandler)
{
io.netty.util.concurrent.EventExecutor v5;
io.netty.channel.ChannelHandler v3;
io.netty.channel.DefaultChannelHandlerContext v4;
java.lang.String v2;
io.netty.util.concurrent.EventExecutorGroup v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.util.concurrent.EventExecutorGroup;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.netty.channel.ChannelHandler;
v4 = new io.netty.channel.DefaultChannelHandlerContext;
v5 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.util.concurrent.EventExecutor childExecutor(io.netty.util.concurrent.EventExecutorGroup)>(v1);
specialinvoke v4.<io.netty.channel.DefaultChannelHandlerContext: void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.util.concurrent.EventExecutor,java.lang.String,io.netty.channel.ChannelHandler)>(v0, v5, v2, v3);
return v4;
}
private io.netty.util.concurrent.EventExecutor childExecutor(io.netty.util.concurrent.EventExecutorGroup)
{
io.netty.util.concurrent.EventExecutor v7;
java.util.IdentityHashMap v9;
io.netty.channel.ChannelOption v4;
io.netty.util.concurrent.EventExecutorGroup v1;
io.netty.channel.Channel v2;
io.netty.channel.ChannelConfig v3;
java.util.Map v8;
java.lang.Object v10, v5;
io.netty.channel.DefaultChannelPipeline v0;
boolean v6;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.util.concurrent.EventExecutorGroup;
if v1 != null goto label1;
return null;
label1:
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.Channel channel>;
v3 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v4 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SINGLE_EVENTEXECUTOR_PER_GROUP>;
v5 = interfaceinvoke v3.<io.netty.channel.ChannelConfig: java.lang.Object getOption(io.netty.channel.ChannelOption)>(v4);
if v5 == null goto label2;
v6 = virtualinvoke v5.<java.lang.Boolean: boolean booleanValue()>();
if v6 != 0 goto label2;
v7 = interfaceinvoke v1.<io.netty.util.concurrent.EventExecutorGroup: io.netty.util.concurrent.EventExecutor next()>();
return v7;
label2:
v8 = v0.<io.netty.channel.DefaultChannelPipeline: java.util.Map childExecutors>;
if v8 != null goto label3;
v9 = new java.util.IdentityHashMap;
specialinvoke v9.<java.util.IdentityHashMap: void <init>(int)>(4);
v0.<io.netty.channel.DefaultChannelPipeline: java.util.Map childExecutors> = v9;
v8 = v9;
label3:
v10 = interfaceinvoke v8.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v10 != null goto label4;
v10 = interfaceinvoke v1.<io.netty.util.concurrent.EventExecutorGroup: io.netty.util.concurrent.EventExecutor next()>();
interfaceinvoke v8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v10);
label4:
return v10;
}
public final io.netty.channel.Channel channel()
{
io.netty.channel.Channel v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.Channel channel>;
return v1;
}
public final io.netty.channel.ChannelPipeline addFirst(java.lang.String, io.netty.channel.ChannelHandler)
{
io.netty.channel.ChannelHandler v2;
io.netty.channel.ChannelPipeline v3;
java.lang.String v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.channel.ChannelHandler;
v3 = virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline addFirst(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>(null, v1, v2);
return v3;
}
public final io.netty.channel.ChannelPipeline addFirst(io.netty.util.concurrent.EventExecutorGroup, java.lang.String, io.netty.channel.ChannelHandler)
{
io.netty.util.concurrent.EventExecutor v7;
java.lang.Throwable v9;
io.netty.util.concurrent.EventExecutorGroup v1;
io.netty.channel.AbstractChannelHandlerContext v5;
io.netty.channel.ChannelHandler v3;
java.lang.String v2, v4;
io.netty.channel.DefaultChannelPipeline v0;
boolean v6, v8;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.util.concurrent.EventExecutorGroup;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.netty.channel.ChannelHandler;
entermonitor v0;
label1:
staticinvoke <io.netty.channel.DefaultChannelPipeline: void checkMultiplicity(io.netty.channel.ChannelHandler)>(v3);
v4 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: java.lang.String filterName(java.lang.String,io.netty.channel.ChannelHandler)>(v2, v3);
v5 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext newContext(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>(v1, v4, v3);
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void addFirst0(io.netty.channel.AbstractChannelHandlerContext)>(v5);
v6 = v0.<io.netty.channel.DefaultChannelPipeline: boolean registered>;
if v6 != 0 goto label3;
virtualinvoke v5.<io.netty.channel.AbstractChannelHandlerContext: void setAddPending()>();
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerCallbackLater(io.netty.channel.AbstractChannelHandlerContext,boolean)>(v5, 1);
exitmonitor v0;
label2:
return v0;
label3:
v7 = virtualinvoke v5.<io.netty.channel.AbstractChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v8 = interfaceinvoke v7.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v8 != 0 goto label5;
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerAddedInEventLoop(io.netty.channel.AbstractChannelHandlerContext,io.netty.util.concurrent.EventExecutor)>(v5, v7);
exitmonitor v0;
label4:
return v0;
label5:
exitmonitor v0;
label6:
goto label8;
label7:
v9 := @caughtexception;
exitmonitor v0;
throw v9;
label8:
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>(v5);
return v0;
catch java.lang.Throwable from label1 to label2 with label7;
catch java.lang.Throwable from label3 to label4 with label7;
catch java.lang.Throwable from label5 to label6 with label7;
}
private void addFirst0(io.netty.channel.AbstractChannelHandlerContext)
{
io.netty.channel.DefaultChannelPipeline$HeadContext v2, v4, v5;
io.netty.channel.AbstractChannelHandlerContext v1, v3;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.AbstractChannelHandlerContext;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
v3 = v2.<io.netty.channel.DefaultChannelPipeline$HeadContext: io.netty.channel.AbstractChannelHandlerContext next>;
v4 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext prev> = v4;
v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next> = v3;
v5 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
v5.<io.netty.channel.DefaultChannelPipeline$HeadContext: io.netty.channel.AbstractChannelHandlerContext next> = v1;
v3.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext prev> = v1;
return;
}
public final io.netty.channel.ChannelPipeline addLast(java.lang.String, io.netty.channel.ChannelHandler)
{
io.netty.channel.ChannelHandler v2;
io.netty.channel.ChannelPipeline v3;
java.lang.String v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.channel.ChannelHandler;
v3 = virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>(null, v1, v2);
return v3;
}
public final io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup, java.lang.String, io.netty.channel.ChannelHandler)
{
io.netty.util.concurrent.EventExecutor v7;
java.lang.Throwable v9;
io.netty.util.concurrent.EventExecutorGroup v1;
io.netty.channel.AbstractChannelHandlerContext v5;
io.netty.channel.ChannelHandler v3;
java.lang.String v2, v4;
io.netty.channel.DefaultChannelPipeline v0;
boolean v6, v8;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.util.concurrent.EventExecutorGroup;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.netty.channel.ChannelHandler;
entermonitor v0;
label1:
staticinvoke <io.netty.channel.DefaultChannelPipeline: void checkMultiplicity(io.netty.channel.ChannelHandler)>(v3);
v4 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: java.lang.String filterName(java.lang.String,io.netty.channel.ChannelHandler)>(v2, v3);
v5 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext newContext(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>(v1, v4, v3);
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void addLast0(io.netty.channel.AbstractChannelHandlerContext)>(v5);
v6 = v0.<io.netty.channel.DefaultChannelPipeline: boolean registered>;
if v6 != 0 goto label3;
virtualinvoke v5.<io.netty.channel.AbstractChannelHandlerContext: void setAddPending()>();
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerCallbackLater(io.netty.channel.AbstractChannelHandlerContext,boolean)>(v5, 1);
exitmonitor v0;
label2:
return v0;
label3:
v7 = virtualinvoke v5.<io.netty.channel.AbstractChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v8 = interfaceinvoke v7.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v8 != 0 goto label5;
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerAddedInEventLoop(io.netty.channel.AbstractChannelHandlerContext,io.netty.util.concurrent.EventExecutor)>(v5, v7);
exitmonitor v0;
label4:
return v0;
label5:
exitmonitor v0;
label6:
goto label8;
label7:
v9 := @caughtexception;
exitmonitor v0;
throw v9;
label8:
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>(v5);
return v0;
catch java.lang.Throwable from label1 to label2 with label7;
catch java.lang.Throwable from label3 to label4 with label7;
catch java.lang.Throwable from label5 to label6 with label7;
}
private void addLast0(io.netty.channel.AbstractChannelHandlerContext)
{
io.netty.channel.DefaultChannelPipeline$TailContext v2, v4, v5;
io.netty.channel.AbstractChannelHandlerContext v1, v3;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.AbstractChannelHandlerContext;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v3 = v2.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.AbstractChannelHandlerContext prev>;
v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext prev> = v3;
v4 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next> = v4;
v3.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next> = v1;
v5 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v5.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.AbstractChannelHandlerContext prev> = v1;
return;
}
public final io.netty.channel.ChannelPipeline addBefore(java.lang.String, java.lang.String, io.netty.channel.ChannelHandler)
{
io.netty.channel.ChannelHandler v3;
io.netty.channel.ChannelPipeline v4;
java.lang.String v1, v2;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.netty.channel.ChannelHandler;
v4 = virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline addBefore(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)>(null, v1, v2, v3);
return v4;
}
public final io.netty.channel.ChannelPipeline addBefore(io.netty.util.concurrent.EventExecutorGroup, java.lang.String, java.lang.String, io.netty.channel.ChannelHandler)
{
io.netty.util.concurrent.EventExecutor v9;
java.lang.Throwable v11;
io.netty.util.concurrent.EventExecutorGroup v1;
io.netty.channel.AbstractChannelHandlerContext v6, v7;
io.netty.channel.ChannelHandler v4;
java.lang.String v2, v3, v5;
io.netty.channel.DefaultChannelPipeline v0;
boolean v10, v8;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.util.concurrent.EventExecutorGroup;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.netty.channel.ChannelHandler;
entermonitor v0;
label1:
staticinvoke <io.netty.channel.DefaultChannelPipeline: void checkMultiplicity(io.netty.channel.ChannelHandler)>(v4);
v5 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: java.lang.String filterName(java.lang.String,io.netty.channel.ChannelHandler)>(v3, v4);
v6 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext getContextOrDie(java.lang.String)>(v2);
v7 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext newContext(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>(v1, v5, v4);
staticinvoke <io.netty.channel.DefaultChannelPipeline: void addBefore0(io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext)>(v6, v7);
v8 = v0.<io.netty.channel.DefaultChannelPipeline: boolean registered>;
if v8 != 0 goto label3;
virtualinvoke v7.<io.netty.channel.AbstractChannelHandlerContext: void setAddPending()>();
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerCallbackLater(io.netty.channel.AbstractChannelHandlerContext,boolean)>(v7, 1);
exitmonitor v0;
label2:
return v0;
label3:
v9 = virtualinvoke v7.<io.netty.channel.AbstractChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v10 = interfaceinvoke v9.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v10 != 0 goto label5;
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerAddedInEventLoop(io.netty.channel.AbstractChannelHandlerContext,io.netty.util.concurrent.EventExecutor)>(v7, v9);
exitmonitor v0;
label4:
return v0;
label5:
exitmonitor v0;
label6:
goto label8;
label7:
v11 := @caughtexception;
exitmonitor v0;
throw v11;
label8:
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>(v7);
return v0;
catch java.lang.Throwable from label1 to label2 with label7;
catch java.lang.Throwable from label3 to label4 with label7;
catch java.lang.Throwable from label5 to label6 with label7;
}
private static void addBefore0(io.netty.channel.AbstractChannelHandlerContext, io.netty.channel.AbstractChannelHandlerContext)
{
io.netty.channel.AbstractChannelHandlerContext v0, v1, v2, v3;
v0 := @parameter0: io.netty.channel.AbstractChannelHandlerContext;
v1 := @parameter1: io.netty.channel.AbstractChannelHandlerContext;
v2 = v0.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext prev>;
v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext prev> = v2;
v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next> = v0;
v3 = v0.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext prev>;
v3.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next> = v1;
v0.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext prev> = v1;
return;
}
private java.lang.String filterName(java.lang.String, io.netty.channel.ChannelHandler)
{
io.netty.channel.ChannelHandler v2;
java.lang.String v1, v3;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.channel.ChannelHandler;
if v1 != null goto label1;
v3 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>(v2);
return v3;
label1:
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void checkDuplicateName(java.lang.String)>(v1);
return v1;
}
public final io.netty.channel.ChannelPipeline addAfter(java.lang.String, java.lang.String, io.netty.channel.ChannelHandler)
{
io.netty.channel.ChannelHandler v3;
io.netty.channel.ChannelPipeline v4;
java.lang.String v1, v2;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.netty.channel.ChannelHandler;
v4 = virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline addAfter(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)>(null, v1, v2, v3);
return v4;
}
public final io.netty.channel.ChannelPipeline addAfter(io.netty.util.concurrent.EventExecutorGroup, java.lang.String, java.lang.String, io.netty.channel.ChannelHandler)
{
io.netty.util.concurrent.EventExecutor v9;
java.lang.Throwable v11;
io.netty.util.concurrent.EventExecutorGroup v1;
io.netty.channel.AbstractChannelHandlerContext v6, v7;
io.netty.channel.ChannelHandler v4;
java.lang.String v2, v3, v5;
io.netty.channel.DefaultChannelPipeline v0;
boolean v10, v8;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.util.concurrent.EventExecutorGroup;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.netty.channel.ChannelHandler;
entermonitor v0;
label1:
staticinvoke <io.netty.channel.DefaultChannelPipeline: void checkMultiplicity(io.netty.channel.ChannelHandler)>(v4);
v5 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: java.lang.String filterName(java.lang.String,io.netty.channel.ChannelHandler)>(v3, v4);
v6 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext getContextOrDie(java.lang.String)>(v2);
v7 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext newContext(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>(v1, v5, v4);
staticinvoke <io.netty.channel.DefaultChannelPipeline: void addAfter0(io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext)>(v6, v7);
v8 = v0.<io.netty.channel.DefaultChannelPipeline: boolean registered>;
if v8 != 0 goto label3;
virtualinvoke v7.<io.netty.channel.AbstractChannelHandlerContext: void setAddPending()>();
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerCallbackLater(io.netty.channel.AbstractChannelHandlerContext,boolean)>(v7, 1);
exitmonitor v0;
label2:
return v0;
label3:
v9 = virtualinvoke v7.<io.netty.channel.AbstractChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v10 = interfaceinvoke v9.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v10 != 0 goto label5;
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerAddedInEventLoop(io.netty.channel.AbstractChannelHandlerContext,io.netty.util.concurrent.EventExecutor)>(v7, v9);
exitmonitor v0;
label4:
return v0;
label5:
exitmonitor v0;
label6:
goto label8;
label7:
v11 := @caughtexception;
exitmonitor v0;
throw v11;
label8:
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>(v7);
return v0;
catch java.lang.Throwable from label1 to label2 with label7;
catch java.lang.Throwable from label3 to label4 with label7;
catch java.lang.Throwable from label5 to label6 with label7;
}
private static void addAfter0(io.netty.channel.AbstractChannelHandlerContext, io.netty.channel.AbstractChannelHandlerContext)
{
io.netty.channel.AbstractChannelHandlerContext v0, v1, v2, v3;
v0 := @parameter0: io.netty.channel.AbstractChannelHandlerContext;
v1 := @parameter1: io.netty.channel.AbstractChannelHandlerContext;
v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext prev> = v0;
v2 = v0.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next>;
v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next> = v2;
v3 = v0.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next>;
v3.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext prev> = v1;
v0.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next> = v1;
return;
}
public final io.netty.channel.ChannelPipeline addFirst(io.netty.channel.ChannelHandler)
{
io.netty.channel.ChannelHandler v1;
io.netty.channel.ChannelPipeline v2;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.ChannelHandler;
v2 = virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline addFirst(java.lang.String,io.netty.channel.ChannelHandler)>(null, v1);
return v2;
}
public final transient io.netty.channel.ChannelPipeline addFirst(io.netty.channel.ChannelHandler[])
{
io.netty.channel.ChannelPipeline v2;
io.netty.channel.ChannelHandler[] v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.ChannelHandler[];
v2 = virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline addFirst(io.netty.util.concurrent.EventExecutorGroup,io.netty.channel.ChannelHandler[])>(null, v1);
return v2;
}
public final transient io.netty.channel.ChannelPipeline addFirst(io.netty.util.concurrent.EventExecutorGroup, io.netty.channel.ChannelHandler[])
{
io.netty.util.concurrent.EventExecutorGroup v1;
io.netty.channel.ChannelHandler[] v2;
int v3, v5, v6, v8;
io.netty.channel.ChannelHandler v4, v7, v9;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.util.concurrent.EventExecutorGroup;
v2 := @parameter1: io.netty.channel.ChannelHandler[];
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "handlers");
v3 = lengthof v2;
if v3 == 0 goto label1;
v4 = v2[0];
if v4 != null goto label2;
label1:
return v0;
label2:
v5 = 1;
label3:
v6 = lengthof v2;
if v5 >= v6 goto label4;
v7 = v2[v5];
if v7 == null goto label4;
v5 = v5 + 1;
goto label3;
label4:
v8 = v5 - 1;
label5:
if v8 < 0 goto label6;
v9 = v2[v8];
virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline addFirst(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>(v1, null, v9);
v8 = v8 - 1;
goto label5;
label6:
return v0;
}
public final io.netty.channel.ChannelPipeline addLast(io.netty.channel.ChannelHandler)
{
io.netty.channel.ChannelHandler v1;
io.netty.channel.ChannelPipeline v2;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.ChannelHandler;
v2 = virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline addLast(java.lang.String,io.netty.channel.ChannelHandler)>(null, v1);
return v2;
}
public final transient io.netty.channel.ChannelPipeline addLast(io.netty.channel.ChannelHandler[])
{
io.netty.channel.ChannelPipeline v2;
io.netty.channel.ChannelHandler[] v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.ChannelHandler[];
v2 = virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup,io.netty.channel.ChannelHandler[])>(null, v1);
return v2;
}
public final transient io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup, io.netty.channel.ChannelHandler[])
{
int v3, v4;
io.netty.channel.ChannelHandler v5;
io.netty.util.concurrent.EventExecutorGroup v1;
io.netty.channel.ChannelHandler[] v2;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.util.concurrent.EventExecutorGroup;
v2 := @parameter1: io.netty.channel.ChannelHandler[];
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "handlers");
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
if v5 == null goto label2;
virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>(v1, null, v5);
v4 = v4 + 1;
goto label1;
label2:
return v0;
}
private java.lang.String generateName(io.netty.channel.ChannelHandler)
{
io.netty.util.concurrent.FastThreadLocal v2;
int v10, v7, v8;
io.netty.channel.AbstractChannelHandlerContext v12, v6;
io.netty.channel.ChannelHandler v1;
java.lang.Class v4;
java.lang.Object v3, v5;
java.lang.String v11, v9;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.ChannelHandler;
v2 = <io.netty.channel.DefaultChannelPipeline: io.netty.util.concurrent.FastThreadLocal nameCaches>;
v3 = virtualinvoke v2.<io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>();
v4 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v5 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v4);
if v5 != null goto label1;
v5 = staticinvoke <io.netty.channel.DefaultChannelPipeline: java.lang.String generateName0(java.lang.Class)>(v4);
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v4, v5);
label1:
v6 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext context0(java.lang.String)>(v5);
if v6 == null goto label4;
v7 = virtualinvoke v5.<java.lang.String: int length()>();
v8 = v7 - 1;
v9 = virtualinvoke v5.<java.lang.String: java.lang.String substring(int,int)>(0, v8);
v10 = 1;
label2:
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v9, v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
v12 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext context0(java.lang.String)>(v11);
if v12 != null goto label3;
v5 = v11;
goto label4;
label3:
v10 = v10 + 1;
goto label2;
label4:
return v5;
}
private static java.lang.String generateName0(java.lang.Class)
{
java.lang.Class v0;
java.lang.String v1, v2;
v0 := @parameter0: java.lang.Class;
v1 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(v0);
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001#0");
return v2;
}
public final io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)
{
io.netty.channel.AbstractChannelHandlerContext v2;
io.netty.channel.ChannelHandler v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.ChannelHandler;
v2 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext getContextOrDie(io.netty.channel.ChannelHandler)>(v1);
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext remove(io.netty.channel.AbstractChannelHandlerContext)>(v2);
return v0;
}
public final io.netty.channel.ChannelHandler remove(java.lang.String)
{
io.netty.channel.AbstractChannelHandlerContext v2, v3;
io.netty.channel.ChannelHandler v4;
java.lang.String v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext getContextOrDie(java.lang.String)>(v1);
v3 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext remove(io.netty.channel.AbstractChannelHandlerContext)>(v2);
v4 = virtualinvoke v3.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
return v4;
}
public final io.netty.channel.ChannelHandler remove(java.lang.Class)
{
io.netty.channel.AbstractChannelHandlerContext v2, v3;
io.netty.channel.ChannelHandler v4;
java.lang.Class v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Class;
v2 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext getContextOrDie(java.lang.Class)>(v1);
v3 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext remove(io.netty.channel.AbstractChannelHandlerContext)>(v2);
v4 = virtualinvoke v3.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
return v4;
}
public final io.netty.channel.ChannelHandler removeIfExists(java.lang.String)
{
io.netty.channel.ChannelHandlerContext v2;
io.netty.channel.ChannelHandler v3;
java.lang.String v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.String)>(v1);
v3 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelHandler removeIfExists(io.netty.channel.ChannelHandlerContext)>(v2);
return v3;
}
public final io.netty.channel.ChannelHandler removeIfExists(java.lang.Class)
{
io.netty.channel.ChannelHandlerContext v2;
io.netty.channel.ChannelHandler v3;
java.lang.Class v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.Class)>(v1);
v3 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelHandler removeIfExists(io.netty.channel.ChannelHandlerContext)>(v2);
return v3;
}
public final io.netty.channel.ChannelHandler removeIfExists(io.netty.channel.ChannelHandler)
{
io.netty.channel.ChannelHandlerContext v2;
io.netty.channel.ChannelHandler v1, v3;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.ChannelHandler;
v2 = virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelHandlerContext context(io.netty.channel.ChannelHandler)>(v1);
v3 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelHandler removeIfExists(io.netty.channel.ChannelHandlerContext)>(v2);
return v3;
}
private io.netty.channel.ChannelHandler removeIfExists(io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.AbstractChannelHandlerContext v2;
io.netty.channel.ChannelHandler v3;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
if v1 != null goto label1;
return null;
label1:
v2 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext remove(io.netty.channel.AbstractChannelHandlerContext)>(v1);
v3 = virtualinvoke v2.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
return v3;
}
private io.netty.channel.AbstractChannelHandlerContext remove(io.netty.channel.AbstractChannelHandlerContext)
{
io.netty.util.concurrent.EventExecutor v7;
java.lang.Throwable v10;
io.netty.channel.DefaultChannelPipeline$TailContext v4;
java.lang.AssertionError v5;
io.netty.channel.DefaultChannelPipeline$HeadContext v3;
io.netty.channel.AbstractChannelHandlerContext v1;
io.netty.channel.DefaultChannelPipeline$2 v9;
io.netty.channel.DefaultChannelPipeline v0;
boolean v2, v6, v8;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.AbstractChannelHandlerContext;
v2 = <io.netty.channel.DefaultChannelPipeline: boolean $assertionsDisabled>;
if v2 != 0 goto label02;
v3 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
if v1 == v3 goto label01;
v4 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
if v1 != v4 goto label02;
label01:
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label02:
entermonitor v0;
label03:
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void atomicRemoveFromHandlerList(io.netty.channel.AbstractChannelHandlerContext)>(v1);
v6 = v0.<io.netty.channel.DefaultChannelPipeline: boolean registered>;
if v6 != 0 goto label05;
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerCallbackLater(io.netty.channel.AbstractChannelHandlerContext,boolean)>(v1, 0);
exitmonitor v0;
label04:
return v1;
label05:
v7 = virtualinvoke v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v8 = interfaceinvoke v7.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v8 != 0 goto label07;
v9 = new io.netty.channel.DefaultChannelPipeline$2;
specialinvoke v9.<io.netty.channel.DefaultChannelPipeline$2: void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.channel.AbstractChannelHandlerContext)>(v0, v1);
interfaceinvoke v7.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v9);
exitmonitor v0;
label06:
return v1;
label07:
exitmonitor v0;
label08:
goto label10;
label09:
v10 := @caughtexception;
exitmonitor v0;
throw v10;
label10:
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)>(v1);
return v1;
catch java.lang.Throwable from label03 to label04 with label09;
catch java.lang.Throwable from label05 to label06 with label09;
catch java.lang.Throwable from label07 to label08 with label09;
}
private synchronized void atomicRemoveFromHandlerList(io.netty.channel.AbstractChannelHandlerContext)
{
io.netty.channel.AbstractChannelHandlerContext v1, v2, v3;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.AbstractChannelHandlerContext;
v2 = v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext prev>;
v3 = v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next>;
v2.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next> = v3;
v3.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext prev> = v2;
return;
}
public final io.netty.channel.ChannelHandler removeFirst()
{
io.netty.channel.DefaultChannelPipeline$TailContext v3;
io.netty.channel.DefaultChannelPipeline$HeadContext v1, v5;
io.netty.channel.AbstractChannelHandlerContext v2, v6, v7;
io.netty.channel.ChannelHandler v8;
java.util.NoSuchElementException v4;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
v2 = v1.<io.netty.channel.DefaultChannelPipeline$HeadContext: io.netty.channel.AbstractChannelHandlerContext next>;
v3 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
if v2 != v3 goto label1;
v4 = new java.util.NoSuchElementException;
specialinvoke v4.<java.util.NoSuchElementException: void <init>()>();
throw v4;
label1:
v5 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
v6 = v5.<io.netty.channel.DefaultChannelPipeline$HeadContext: io.netty.channel.AbstractChannelHandlerContext next>;
v7 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext remove(io.netty.channel.AbstractChannelHandlerContext)>(v6);
v8 = virtualinvoke v7.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
return v8;
}
public final io.netty.channel.ChannelHandler removeLast()
{
io.netty.channel.DefaultChannelPipeline$TailContext v3, v5;
io.netty.channel.DefaultChannelPipeline$HeadContext v1;
io.netty.channel.AbstractChannelHandlerContext v2, v6, v7;
io.netty.channel.ChannelHandler v8;
java.util.NoSuchElementException v4;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
v2 = v1.<io.netty.channel.DefaultChannelPipeline$HeadContext: io.netty.channel.AbstractChannelHandlerContext next>;
v3 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
if v2 != v3 goto label1;
v4 = new java.util.NoSuchElementException;
specialinvoke v4.<java.util.NoSuchElementException: void <init>()>();
throw v4;
label1:
v5 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v6 = v5.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.AbstractChannelHandlerContext prev>;
v7 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext remove(io.netty.channel.AbstractChannelHandlerContext)>(v6);
v8 = virtualinvoke v7.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
return v8;
}
public final io.netty.channel.ChannelPipeline replace(io.netty.channel.ChannelHandler, java.lang.String, io.netty.channel.ChannelHandler)
{
io.netty.channel.AbstractChannelHandlerContext v4;
io.netty.channel.ChannelHandler v1, v3;
java.lang.String v2;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.ChannelHandler;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.netty.channel.ChannelHandler;
v4 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext getContextOrDie(io.netty.channel.ChannelHandler)>(v1);
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelHandler replace(io.netty.channel.AbstractChannelHandlerContext,java.lang.String,io.netty.channel.ChannelHandler)>(v4, v2, v3);
return v0;
}
public final io.netty.channel.ChannelHandler replace(java.lang.String, java.lang.String, io.netty.channel.ChannelHandler)
{
io.netty.channel.AbstractChannelHandlerContext v4;
io.netty.channel.ChannelHandler v3, v5;
java.lang.String v1, v2;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.netty.channel.ChannelHandler;
v4 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext getContextOrDie(java.lang.String)>(v1);
v5 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelHandler replace(io.netty.channel.AbstractChannelHandlerContext,java.lang.String,io.netty.channel.ChannelHandler)>(v4, v2, v3);
return v5;
}
public final io.netty.channel.ChannelHandler replace(java.lang.Class, java.lang.String, io.netty.channel.ChannelHandler)
{
io.netty.channel.AbstractChannelHandlerContext v4;
io.netty.channel.ChannelHandler v3, v5;
java.lang.Class v1;
java.lang.String v2;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.netty.channel.ChannelHandler;
v4 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext getContextOrDie(java.lang.Class)>(v1);
v5 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelHandler replace(io.netty.channel.AbstractChannelHandlerContext,java.lang.String,io.netty.channel.ChannelHandler)>(v4, v2, v3);
return v5;
}
private io.netty.channel.ChannelHandler replace(io.netty.channel.AbstractChannelHandlerContext, java.lang.String, io.netty.channel.ChannelHandler)
{
io.netty.util.concurrent.EventExecutor v10, v14;
java.lang.Throwable v18;
io.netty.channel.DefaultChannelPipeline$TailContext v6;
java.lang.AssertionError v7;
io.netty.channel.DefaultChannelPipeline$HeadContext v5;
io.netty.channel.AbstractChannelHandlerContext v1, v11;
java.lang.String v2, v8;
boolean v12, v15, v4, v9;
io.netty.channel.ChannelHandler v13, v17, v19, v3;
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.DefaultChannelPipeline$3 v16;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.AbstractChannelHandlerContext;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.netty.channel.ChannelHandler;
v4 = <io.netty.channel.DefaultChannelPipeline: boolean $assertionsDisabled>;
if v4 != 0 goto label02;
v5 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
if v1 == v5 goto label01;
v6 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
if v1 != v6 goto label02;
label01:
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label02:
entermonitor v0;
label03:
staticinvoke <io.netty.channel.DefaultChannelPipeline: void checkMultiplicity(io.netty.channel.ChannelHandler)>(v3);
if v2 != null goto label04;
v2 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: java.lang.String generateName(io.netty.channel.ChannelHandler)>(v3);
goto label05;
label04:
v8 = virtualinvoke v1.<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name()>();
v9 = virtualinvoke v8.<java.lang.String: boolean equals(java.lang.Object)>(v2);
if v9 != 0 goto label05;
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void checkDuplicateName(java.lang.String)>(v2);
label05:
v10 = v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor>;
v11 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext newContext(io.netty.util.concurrent.EventExecutorGroup,java.lang.String,io.netty.channel.ChannelHandler)>(v10, v2, v3);
staticinvoke <io.netty.channel.DefaultChannelPipeline: void replace0(io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext)>(v1, v11);
v12 = v0.<io.netty.channel.DefaultChannelPipeline: boolean registered>;
if v12 != 0 goto label07;
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerCallbackLater(io.netty.channel.AbstractChannelHandlerContext,boolean)>(v11, 1);
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerCallbackLater(io.netty.channel.AbstractChannelHandlerContext,boolean)>(v1, 0);
v13 = virtualinvoke v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
exitmonitor v0;
label06:
return v13;
label07:
v14 = virtualinvoke v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v15 = interfaceinvoke v14.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v15 != 0 goto label09;
v16 = new io.netty.channel.DefaultChannelPipeline$3;
specialinvoke v16.<io.netty.channel.DefaultChannelPipeline$3: void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.channel.AbstractChannelHandlerContext,io.netty.channel.AbstractChannelHandlerContext)>(v0, v11, v1);
interfaceinvoke v14.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v16);
v17 = virtualinvoke v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
exitmonitor v0;
label08:
return v17;
label09:
exitmonitor v0;
label10:
goto label12;
label11:
v18 := @caughtexception;
exitmonitor v0;
throw v18;
label12:
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)>(v11);
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)>(v1);
v19 = virtualinvoke v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
return v19;
catch java.lang.Throwable from label03 to label06 with label11;
catch java.lang.Throwable from label07 to label08 with label11;
catch java.lang.Throwable from label09 to label10 with label11;
}
private static void replace0(io.netty.channel.AbstractChannelHandlerContext, io.netty.channel.AbstractChannelHandlerContext)
{
io.netty.channel.AbstractChannelHandlerContext v0, v1, v2, v3;
v0 := @parameter0: io.netty.channel.AbstractChannelHandlerContext;
v1 := @parameter1: io.netty.channel.AbstractChannelHandlerContext;
v2 = v0.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext prev>;
v3 = v0.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next>;
v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext prev> = v2;
v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next> = v3;
v2.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next> = v1;
v3.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext prev> = v1;
v0.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext prev> = v1;
v0.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next> = v1;
return;
}
private static void checkMultiplicity(io.netty.channel.ChannelHandler)
{
io.netty.channel.ChannelPipelineException v4;
io.netty.channel.ChannelHandler v0;
java.lang.Class v5;
java.lang.String v6, v7;
boolean v1, v2, v3;
v0 := @parameter0: io.netty.channel.ChannelHandler;
v1 = v0 instanceof io.netty.channel.ChannelHandlerAdapter;
if v1 == 0 goto label2;
v2 = virtualinvoke v0.<io.netty.channel.ChannelHandlerAdapter: boolean isSharable()>();
if v2 != 0 goto label1;
v3 = v0.<io.netty.channel.ChannelHandlerAdapter: boolean added>;
if v3 == 0 goto label1;
v4 = new io.netty.channel.ChannelPipelineException;
v5 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a @Sharable handler, so can\'t be added or removed multiple times.");
specialinvoke v4.<io.netty.channel.ChannelPipelineException: void <init>(java.lang.String)>(v7);
throw v4;
label1:
v0.<io.netty.channel.ChannelHandlerAdapter: boolean added> = 1;
label2:
return;
}
private void callHandlerAdded0(io.netty.channel.AbstractChannelHandlerContext)
{
java.lang.Throwable v2, v4;
io.netty.channel.AbstractChannelHandlerContext v1;
java.lang.String v13, v14, v18, v19, v8, v9;
boolean v3, v6;
io.netty.channel.ChannelPipelineException v10, v15;
io.netty.util.internal.logging.InternalLogger v5, v7;
io.netty.channel.ChannelHandler v11, v16;
java.lang.Class v12, v17;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.AbstractChannelHandlerContext;
label1:
virtualinvoke v1.<io.netty.channel.AbstractChannelHandlerContext: void callHandlerAdded()>();
label2:
goto label9;
label3:
v2 := @caughtexception;
v3 = 0;
label4:
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void atomicRemoveFromHandlerList(io.netty.channel.AbstractChannelHandlerContext)>(v1);
virtualinvoke v1.<io.netty.channel.AbstractChannelHandlerContext: void callHandlerRemoved()>();
v3 = 1;
label5:
goto label7;
label6:
v4 := @caughtexception;
v5 = <io.netty.channel.DefaultChannelPipeline: io.netty.util.internal.logging.InternalLogger logger>;
v6 = interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: boolean isWarnEnabled()>();
if v6 == 0 goto label7;
v7 = <io.netty.channel.DefaultChannelPipeline: io.netty.util.internal.logging.InternalLogger logger>;
v8 = virtualinvoke v1.<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to remove a handler: \u0001");
interfaceinvoke v7.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Throwable)>(v9, v4);
label7:
if v3 == 0 goto label8;
v10 = new io.netty.channel.ChannelPipelineException;
v11 = virtualinvoke v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
v12 = virtualinvoke v11.<java.lang.Object: java.lang.Class getClass()>();
v13 = virtualinvoke v12.<java.lang.Class: java.lang.String getName()>();
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.handlerAdded() has thrown an exception; removed.");
specialinvoke v10.<io.netty.channel.ChannelPipelineException: void <init>(java.lang.String,java.lang.Throwable)>(v14, v2);
virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline fireExceptionCaught(java.lang.Throwable)>(v10);
goto label9;
label8:
v15 = new io.netty.channel.ChannelPipelineException;
v16 = virtualinvoke v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
v17 = virtualinvoke v16.<java.lang.Object: java.lang.Class getClass()>();
v18 = virtualinvoke v17.<java.lang.Class: java.lang.String getName()>();
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v18) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.handlerAdded() has thrown an exception; also failed to remove.");
specialinvoke v15.<io.netty.channel.ChannelPipelineException: void <init>(java.lang.String,java.lang.Throwable)>(v19, v2);
virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline fireExceptionCaught(java.lang.Throwable)>(v15);
label9:
return;
catch java.lang.Throwable from label1 to label2 with label3;
catch java.lang.Throwable from label4 to label5 with label6;
}
private void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)
{
java.lang.Throwable v2;
io.netty.channel.ChannelPipelineException v3;
io.netty.channel.AbstractChannelHandlerContext v1;
io.netty.channel.ChannelHandler v4;
java.lang.Class v5;
java.lang.String v6, v7;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.AbstractChannelHandlerContext;
label1:
virtualinvoke v1.<io.netty.channel.AbstractChannelHandlerContext: void callHandlerRemoved()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = new io.netty.channel.ChannelPipelineException;
v4 = virtualinvoke v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
v5 = virtualinvoke v4.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.handlerRemoved() has thrown an exception.");
specialinvoke v3.<io.netty.channel.ChannelPipelineException: void <init>(java.lang.String,java.lang.Throwable)>(v7, v2);
virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline fireExceptionCaught(java.lang.Throwable)>(v3);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
final void invokeHandlerAddedIfNeeded()
{
io.netty.channel.Channel v2;
java.lang.AssertionError v5;
io.netty.channel.EventLoop v3;
io.netty.channel.DefaultChannelPipeline v0;
boolean v1, v4, v6;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = <io.netty.channel.DefaultChannelPipeline: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.Channel channel>;
v3 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v4 = interfaceinvoke v3.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v4 != 0 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = v0.<io.netty.channel.DefaultChannelPipeline: boolean firstRegistration>;
if v6 == 0 goto label2;
v0.<io.netty.channel.DefaultChannelPipeline: boolean firstRegistration> = 0;
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerAddedForAllHandlers()>();
label2:
return;
}
public final io.netty.channel.ChannelHandler first()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelHandler v2;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelHandlerContext firstContext()>();
if v1 != null goto label1;
return null;
label1:
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
return v2;
}
public final io.netty.channel.ChannelHandlerContext firstContext()
{
io.netty.channel.DefaultChannelPipeline$HeadContext v1, v4;
io.netty.channel.DefaultChannelPipeline$TailContext v3;
io.netty.channel.AbstractChannelHandlerContext v2, v5;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
v2 = v1.<io.netty.channel.DefaultChannelPipeline$HeadContext: io.netty.channel.AbstractChannelHandlerContext next>;
v3 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
if v2 != v3 goto label1;
return null;
label1:
v4 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
v5 = v4.<io.netty.channel.DefaultChannelPipeline$HeadContext: io.netty.channel.AbstractChannelHandlerContext next>;
return v5;
}
public final io.netty.channel.ChannelHandler last()
{
io.netty.channel.DefaultChannelPipeline$HeadContext v3;
io.netty.channel.DefaultChannelPipeline$TailContext v1;
io.netty.channel.AbstractChannelHandlerContext v2;
io.netty.channel.ChannelHandler v4;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v2 = v1.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.AbstractChannelHandlerContext prev>;
v3 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
if v2 != v3 goto label1;
return null;
label1:
v4 = virtualinvoke v2.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
return v4;
}
public final io.netty.channel.ChannelHandlerContext lastContext()
{
io.netty.channel.DefaultChannelPipeline$HeadContext v3;
io.netty.channel.DefaultChannelPipeline$TailContext v1;
io.netty.channel.AbstractChannelHandlerContext v2;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v2 = v1.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.AbstractChannelHandlerContext prev>;
v3 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
if v2 != v3 goto label1;
return null;
label1:
return v2;
}
public final io.netty.channel.ChannelHandler get(java.lang.String)
{
io.netty.channel.ChannelHandlerContext v2;
io.netty.channel.ChannelHandler v3;
java.lang.String v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.String)>(v1);
if v2 != null goto label1;
return null;
label1:
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
return v3;
}
public final io.netty.channel.ChannelHandler get(java.lang.Class)
{
io.netty.channel.ChannelHandlerContext v2;
io.netty.channel.ChannelHandler v3;
java.lang.Class v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.Class)>(v1);
if v2 != null goto label1;
return null;
label1:
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
return v3;
}
public final io.netty.channel.ChannelHandlerContext context(java.lang.String)
{
io.netty.channel.AbstractChannelHandlerContext v3;
java.lang.Object v2;
java.lang.String v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "name");
v3 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext context0(java.lang.String)>(v2);
return v3;
}
public final io.netty.channel.ChannelHandlerContext context(io.netty.channel.ChannelHandler)
{
io.netty.channel.DefaultChannelPipeline$HeadContext v2;
io.netty.channel.AbstractChannelHandlerContext v3;
io.netty.channel.ChannelHandler v1, v4;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.ChannelHandler;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "handler");
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
v3 = v2.<io.netty.channel.DefaultChannelPipeline$HeadContext: io.netty.channel.AbstractChannelHandlerContext next>;
label1:
if v3 != null goto label2;
return null;
label2:
v4 = virtualinvoke v3.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
if v4 != v1 goto label3;
return v3;
label3:
v3 = v3.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next>;
goto label1;
}
public final io.netty.channel.ChannelHandlerContext context(java.lang.Class)
{
io.netty.channel.DefaultChannelPipeline$HeadContext v2;
io.netty.channel.AbstractChannelHandlerContext v3;
io.netty.channel.ChannelHandler v4;
java.lang.Class v1, v5;
io.netty.channel.DefaultChannelPipeline v0;
boolean v6;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Class;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "handlerType");
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
v3 = v2.<io.netty.channel.DefaultChannelPipeline$HeadContext: io.netty.channel.AbstractChannelHandlerContext next>;
label1:
if v3 != null goto label2;
return null;
label2:
v4 = virtualinvoke v3.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
v5 = virtualinvoke v4.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v5);
if v6 == 0 goto label3;
return v3;
label3:
v3 = v3.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next>;
goto label1;
}
public final java.util.List names()
{
io.netty.channel.DefaultChannelPipeline$HeadContext v2;
io.netty.channel.AbstractChannelHandlerContext v3;
java.lang.String v4;
io.netty.channel.DefaultChannelPipeline v0;
java.util.ArrayList v1;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
v3 = v2.<io.netty.channel.DefaultChannelPipeline$HeadContext: io.netty.channel.AbstractChannelHandlerContext next>;
label1:
if v3 != null goto label2;
return v1;
label2:
v4 = virtualinvoke v3.<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v4);
v3 = v3.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next>;
goto label1;
}
public final java.util.Map toMap()
{
java.util.LinkedHashMap v1;
io.netty.channel.DefaultChannelPipeline$HeadContext v2;
io.netty.channel.DefaultChannelPipeline$TailContext v4;
io.netty.channel.AbstractChannelHandlerContext v3;
io.netty.channel.ChannelHandler v6;
java.lang.String v5;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = new java.util.LinkedHashMap;
specialinvoke v1.<java.util.LinkedHashMap: void <init>()>();
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
v3 = v2.<io.netty.channel.DefaultChannelPipeline$HeadContext: io.netty.channel.AbstractChannelHandlerContext next>;
label1:
v4 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
if v3 != v4 goto label2;
return v1;
label2:
v5 = virtualinvoke v3.<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name()>();
v6 = virtualinvoke v3.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v5, v6);
v3 = v3.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next>;
goto label1;
}
public final java.util.Iterator iterator()
{
java.util.Iterator v3;
java.util.Map v1;
java.util.Set v2;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: java.util.Map toMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
return v3;
}
public final java.lang.String toString()
{
io.netty.channel.DefaultChannelPipeline$TailContext v4, v9;
io.netty.channel.DefaultChannelPipeline$HeadContext v2;
io.netty.channel.AbstractChannelHandlerContext v3;
io.netty.channel.ChannelHandler v6;
java.lang.Class v7;
java.lang.StringBuilder v11, v12;
java.lang.String v1, v10, v5, v8;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Object)>(v0);
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
v3 = v2.<io.netty.channel.DefaultChannelPipeline$HeadContext: io.netty.channel.AbstractChannelHandlerContext next>;
label1:
v4 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
if v3 == v4 goto label2;
v5 = virtualinvoke v3.<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name()>();
v6 = virtualinvoke v3.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
v7 = virtualinvoke v6.<java.lang.Object: java.lang.Class getClass()>();
v8 = virtualinvoke v7.<java.lang.Class: java.lang.String getName()>();
virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);
v3 = v3.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next>;
v9 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
if v3 == v9 goto label2;
virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
goto label1;
label2:
virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>(v1, v5, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001{(\u0001 = \u0001");
return v10;
}
public final io.netty.channel.ChannelPipeline fireChannelRegistered()
{
io.netty.channel.DefaultChannelPipeline$HeadContext v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
staticinvoke <io.netty.channel.AbstractChannelHandlerContext: void invokeChannelRegistered(io.netty.channel.AbstractChannelHandlerContext)>(v1);
return v0;
}
public final io.netty.channel.ChannelPipeline fireChannelUnregistered()
{
io.netty.channel.DefaultChannelPipeline$HeadContext v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
staticinvoke <io.netty.channel.AbstractChannelHandlerContext: void invokeChannelUnregistered(io.netty.channel.AbstractChannelHandlerContext)>(v1);
return v0;
}
private synchronized void destroy()
{
io.netty.channel.AbstractChannelHandlerContext v2;
io.netty.channel.DefaultChannelPipeline$HeadContext v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
v2 = v1.<io.netty.channel.DefaultChannelPipeline$HeadContext: io.netty.channel.AbstractChannelHandlerContext next>;
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void destroyUp(io.netty.channel.AbstractChannelHandlerContext,boolean)>(v2, 0);
return;
}
private void destroyUp(io.netty.channel.AbstractChannelHandlerContext, boolean)
{
io.netty.util.concurrent.EventExecutor v6;
io.netty.channel.DefaultChannelPipeline$TailContext v4;
java.lang.Thread v3;
io.netty.channel.AbstractChannelHandlerContext v1, v5;
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.DefaultChannelPipeline$4 v8;
boolean v2, v7;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.AbstractChannelHandlerContext;
v2 := @parameter1: boolean;
v3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v4 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
label1:
if v1 != v4 goto label2;
v5 = v4.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext prev>;
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void destroyDown(java.lang.Thread,io.netty.channel.AbstractChannelHandlerContext,boolean)>(v3, v5, v2);
goto label4;
label2:
v6 = virtualinvoke v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
if v2 != 0 goto label3;
v7 = interfaceinvoke v6.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop(java.lang.Thread)>(v3);
if v7 != 0 goto label3;
v8 = new io.netty.channel.DefaultChannelPipeline$4;
specialinvoke v8.<io.netty.channel.DefaultChannelPipeline$4: void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.channel.AbstractChannelHandlerContext)>(v0, v1);
interfaceinvoke v6.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v8);
goto label4;
label3:
v1 = v1.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next>;
v2 = 0;
goto label1;
label4:
return;
}
private void destroyDown(java.lang.Thread, io.netty.channel.AbstractChannelHandlerContext, boolean)
{
io.netty.util.concurrent.EventExecutor v5;
io.netty.channel.DefaultChannelPipeline$HeadContext v4;
java.lang.Thread v1;
io.netty.channel.AbstractChannelHandlerContext v2;
io.netty.channel.DefaultChannelPipeline$5 v7;
io.netty.channel.DefaultChannelPipeline v0;
boolean v3, v6;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Thread;
v2 := @parameter1: io.netty.channel.AbstractChannelHandlerContext;
v3 := @parameter2: boolean;
v4 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
label1:
if v2 == v4 goto label5;
v5 = virtualinvoke v2.<io.netty.channel.AbstractChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
if v3 != 0 goto label2;
v6 = interfaceinvoke v5.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop(java.lang.Thread)>(v1);
if v6 == 0 goto label3;
label2:
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void atomicRemoveFromHandlerList(io.netty.channel.AbstractChannelHandlerContext)>(v2);
specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: void callHandlerRemoved0(io.netty.channel.AbstractChannelHandlerContext)>(v2);
goto label4;
label3:
v7 = new io.netty.channel.DefaultChannelPipeline$5;
specialinvoke v7.<io.netty.channel.DefaultChannelPipeline$5: void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.channel.AbstractChannelHandlerContext)>(v0, v2);
interfaceinvoke v5.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v7);
goto label5;
label4:
v2 = v2.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext prev>;
v3 = 0;
goto label1;
label5:
return;
}
public final io.netty.channel.ChannelPipeline fireChannelActive()
{
io.netty.channel.DefaultChannelPipeline$HeadContext v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
staticinvoke <io.netty.channel.AbstractChannelHandlerContext: void invokeChannelActive(io.netty.channel.AbstractChannelHandlerContext)>(v1);
return v0;
}
public final io.netty.channel.ChannelPipeline fireChannelInactive()
{
io.netty.channel.DefaultChannelPipeline$HeadContext v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
staticinvoke <io.netty.channel.AbstractChannelHandlerContext: void invokeChannelInactive(io.netty.channel.AbstractChannelHandlerContext)>(v1);
return v0;
}
public final io.netty.channel.ChannelPipeline fireExceptionCaught(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.channel.DefaultChannelPipeline$HeadContext v2;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
staticinvoke <io.netty.channel.AbstractChannelHandlerContext: void invokeExceptionCaught(io.netty.channel.AbstractChannelHandlerContext,java.lang.Throwable)>(v2, v1);
return v0;
}
public final io.netty.channel.ChannelPipeline fireUserEventTriggered(java.lang.Object)
{
io.netty.channel.DefaultChannelPipeline$HeadContext v2;
java.lang.Object v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
staticinvoke <io.netty.channel.AbstractChannelHandlerContext: void invokeUserEventTriggered(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object)>(v2, v1);
return v0;
}
public final io.netty.channel.ChannelPipeline fireChannelRead(java.lang.Object)
{
io.netty.channel.DefaultChannelPipeline$HeadContext v2;
java.lang.Object v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
staticinvoke <io.netty.channel.AbstractChannelHandlerContext: void invokeChannelRead(io.netty.channel.AbstractChannelHandlerContext,java.lang.Object)>(v2, v1);
return v0;
}
public final io.netty.channel.ChannelPipeline fireChannelReadComplete()
{
io.netty.channel.DefaultChannelPipeline$HeadContext v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
staticinvoke <io.netty.channel.AbstractChannelHandlerContext: void invokeChannelReadComplete(io.netty.channel.AbstractChannelHandlerContext)>(v1);
return v0;
}
public final io.netty.channel.ChannelPipeline fireChannelWritabilityChanged()
{
io.netty.channel.DefaultChannelPipeline$HeadContext v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
staticinvoke <io.netty.channel.AbstractChannelHandlerContext: void invokeChannelWritabilityChanged(io.netty.channel.AbstractChannelHandlerContext)>(v1);
return v0;
}
public final io.netty.channel.ChannelFuture bind(java.net.SocketAddress)
{
java.net.SocketAddress v1;
io.netty.channel.DefaultChannelPipeline$TailContext v2;
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.net.SocketAddress;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v3 = virtualinvoke v2.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.ChannelFuture bind(java.net.SocketAddress)>(v1);
return v3;
}
public final io.netty.channel.ChannelFuture connect(java.net.SocketAddress)
{
java.net.SocketAddress v1;
io.netty.channel.DefaultChannelPipeline$TailContext v2;
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.net.SocketAddress;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v3 = virtualinvoke v2.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.ChannelFuture connect(java.net.SocketAddress)>(v1);
return v3;
}
public final io.netty.channel.ChannelFuture connect(java.net.SocketAddress, java.net.SocketAddress)
{
java.net.SocketAddress v1, v2;
io.netty.channel.DefaultChannelPipeline$TailContext v3;
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
v3 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v4 = virtualinvoke v3.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)>(v1, v2);
return v4;
}
public final io.netty.channel.ChannelFuture disconnect()
{
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.DefaultChannelPipeline$TailContext v1;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v2 = virtualinvoke v1.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.ChannelFuture disconnect()>();
return v2;
}
public final io.netty.channel.ChannelFuture close()
{
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.DefaultChannelPipeline$TailContext v1;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v2 = virtualinvoke v1.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.ChannelFuture close()>();
return v2;
}
public final io.netty.channel.ChannelFuture deregister()
{
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.DefaultChannelPipeline$TailContext v1;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v2 = virtualinvoke v1.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.ChannelFuture deregister()>();
return v2;
}
public final io.netty.channel.ChannelPipeline flush()
{
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.DefaultChannelPipeline$TailContext v1;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
virtualinvoke v1.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.ChannelHandlerContext flush()>();
return v0;
}
public final io.netty.channel.ChannelFuture bind(java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v2;
java.net.SocketAddress v1;
io.netty.channel.DefaultChannelPipeline$TailContext v3;
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v4 = virtualinvoke v3.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v1, v2);
return v4;
}
public final io.netty.channel.ChannelFuture connect(java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v2;
java.net.SocketAddress v1;
io.netty.channel.DefaultChannelPipeline$TailContext v3;
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v4 = virtualinvoke v3.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.ChannelFuture connect(java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v1, v2);
return v4;
}
public final io.netty.channel.ChannelFuture connect(java.net.SocketAddress, java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v3;
java.net.SocketAddress v1, v2;
io.netty.channel.DefaultChannelPipeline$TailContext v4;
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.ChannelFuture v5;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v5 = virtualinvoke v4.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v1, v2, v3);
return v5;
}
public final io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v1;
io.netty.channel.DefaultChannelPipeline$TailContext v2;
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v3 = virtualinvoke v2.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)>(v1);
return v3;
}
public final io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v1;
io.netty.channel.DefaultChannelPipeline$TailContext v2;
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v3 = virtualinvoke v2.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)>(v1);
return v3;
}
public final io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v1;
io.netty.channel.DefaultChannelPipeline$TailContext v2;
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v3 = virtualinvoke v2.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)>(v1);
return v3;
}
public final io.netty.channel.ChannelPipeline read()
{
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.DefaultChannelPipeline$TailContext v1;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
virtualinvoke v1.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.ChannelHandlerContext read()>();
return v0;
}
public final io.netty.channel.ChannelFuture write(java.lang.Object)
{
io.netty.channel.DefaultChannelPipeline$TailContext v2;
java.lang.Object v1;
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v3 = virtualinvoke v2.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.ChannelFuture write(java.lang.Object)>(v1);
return v3;
}
public final io.netty.channel.ChannelFuture write(java.lang.Object, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v2;
io.netty.channel.DefaultChannelPipeline$TailContext v3;
java.lang.Object v1;
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v4 = virtualinvoke v3.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v1, v2);
return v4;
}
public final io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v2;
io.netty.channel.DefaultChannelPipeline$TailContext v3;
java.lang.Object v1;
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v4 = virtualinvoke v3.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)>(v1, v2);
return v4;
}
public final io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)
{
io.netty.channel.DefaultChannelPipeline$TailContext v2;
java.lang.Object v1;
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
v3 = virtualinvoke v2.<io.netty.channel.DefaultChannelPipeline$TailContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)>(v1);
return v3;
}
public final io.netty.channel.ChannelPromise newPromise()
{
io.netty.channel.Channel v2;
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.DefaultChannelPromise v1;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = new io.netty.channel.DefaultChannelPromise;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.Channel channel>;
specialinvoke v1.<io.netty.channel.DefaultChannelPromise: void <init>(io.netty.channel.Channel)>(v2);
return v1;
}
public final io.netty.channel.ChannelProgressivePromise newProgressivePromise()
{
io.netty.channel.Channel v2;
io.netty.channel.DefaultChannelProgressivePromise v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = new io.netty.channel.DefaultChannelProgressivePromise;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.Channel channel>;
specialinvoke v1.<io.netty.channel.DefaultChannelProgressivePromise: void <init>(io.netty.channel.Channel)>(v2);
return v1;
}
public final io.netty.channel.ChannelFuture newSucceededFuture()
{
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.ChannelFuture v1;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture succeededFuture>;
return v1;
}
public final io.netty.channel.ChannelFuture newFailedFuture(java.lang.Throwable)
{
io.netty.channel.Channel v3;
java.lang.Throwable v1;
io.netty.channel.FailedChannelFuture v2;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Throwable;
v2 = new io.netty.channel.FailedChannelFuture;
v3 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.Channel channel>;
specialinvoke v2.<io.netty.channel.FailedChannelFuture: void <init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor,java.lang.Throwable)>(v3, null, v1);
return v2;
}
public final io.netty.channel.ChannelPromise voidPromise()
{
io.netty.channel.VoidChannelPromise v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.VoidChannelPromise voidPromise>;
return v1;
}
private void checkDuplicateName(java.lang.String)
{
io.netty.channel.AbstractChannelHandlerContext v2;
java.lang.String v1, v4;
java.lang.IllegalArgumentException v3;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.AbstractChannelHandlerContext context0(java.lang.String)>(v1);
if v2 == null goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Duplicate handler name: \u0001");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return;
}
private io.netty.channel.AbstractChannelHandlerContext context0(java.lang.String)
{
io.netty.channel.DefaultChannelPipeline$HeadContext v2;
io.netty.channel.DefaultChannelPipeline$TailContext v4;
io.netty.channel.AbstractChannelHandlerContext v3;
java.lang.String v1, v5;
io.netty.channel.DefaultChannelPipeline v0;
boolean v6;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$HeadContext head>;
v3 = v2.<io.netty.channel.DefaultChannelPipeline$HeadContext: io.netty.channel.AbstractChannelHandlerContext next>;
label1:
v4 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$TailContext tail>;
if v3 == v4 goto label3;
v5 = virtualinvoke v3.<io.netty.channel.AbstractChannelHandlerContext: java.lang.String name()>();
v6 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>(v1);
if v6 == 0 goto label2;
return v3;
label2:
v3 = v3.<io.netty.channel.AbstractChannelHandlerContext: io.netty.channel.AbstractChannelHandlerContext next>;
goto label1;
label3:
return null;
}
private io.netty.channel.AbstractChannelHandlerContext getContextOrDie(java.lang.String)
{
io.netty.channel.ChannelHandlerContext v2;
java.lang.String v1;
java.util.NoSuchElementException v3;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.String)>(v1);
if v2 != null goto label1;
v3 = new java.util.NoSuchElementException;
specialinvoke v3.<java.util.NoSuchElementException: void <init>(java.lang.String)>(v1);
throw v3;
label1:
return v2;
}
private io.netty.channel.AbstractChannelHandlerContext getContextOrDie(io.netty.channel.ChannelHandler)
{
io.netty.channel.ChannelHandlerContext v2;
io.netty.channel.ChannelHandler v1;
java.lang.Class v4;
java.lang.String v5;
java.util.NoSuchElementException v3;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.ChannelHandler;
v2 = virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelHandlerContext context(io.netty.channel.ChannelHandler)>(v1);
if v2 != null goto label1;
v3 = new java.util.NoSuchElementException;
v4 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v5 = virtualinvoke v4.<java.lang.Class: java.lang.String getName()>();
specialinvoke v3.<java.util.NoSuchElementException: void <init>(java.lang.String)>(v5);
throw v3;
label1:
return v2;
}
private io.netty.channel.AbstractChannelHandlerContext getContextOrDie(java.lang.Class)
{
io.netty.channel.ChannelHandlerContext v2;
java.lang.Class v1;
java.lang.String v4;
java.util.NoSuchElementException v3;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.Class)>(v1);
if v2 != null goto label1;
v3 = new java.util.NoSuchElementException;
v4 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
specialinvoke v3.<java.util.NoSuchElementException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return v2;
}
private void callHandlerAddedForAllHandlers()
{
java.lang.Throwable v5;
io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback v4, v6;
java.lang.AssertionError v3;
io.netty.channel.DefaultChannelPipeline v0;
boolean v1, v2;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
entermonitor v0;
label1:
v1 = <io.netty.channel.DefaultChannelPipeline: boolean $assertionsDisabled>;
if v1 != 0 goto label2;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: boolean registered>;
if v2 == 0 goto label2;
v3 = new java.lang.AssertionError;
specialinvoke v3.<java.lang.AssertionError: void <init>()>();
throw v3;
label2:
v0.<io.netty.channel.DefaultChannelPipeline: boolean registered> = 1;
v4 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback pendingHandlerCallbackHead>;
v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback pendingHandlerCallbackHead> = null;
exitmonitor v0;
label3:
goto label5;
label4:
v5 := @caughtexception;
exitmonitor v0;
throw v5;
label5:
v6 = v4;
label6:
if v6 == null goto label7;
virtualinvoke v6.<io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback: void execute()>();
v6 = v6.<io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback: io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback next>;
goto label6;
label7:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
private void callHandlerCallbackLater(io.netty.channel.AbstractChannelHandlerContext, boolean)
{
io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback v10, v11, v7, v9;
java.lang.AssertionError v5;
io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask v8;
io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask v6;
io.netty.channel.AbstractChannelHandlerContext v1;
io.netty.channel.DefaultChannelPipeline v0;
boolean v2, v3, v4;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.AbstractChannelHandlerContext;
v2 := @parameter1: boolean;
v3 = <io.netty.channel.DefaultChannelPipeline: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
v4 = v0.<io.netty.channel.DefaultChannelPipeline: boolean registered>;
if v4 == 0 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
if v2 == 0 goto label2;
v6 = new io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask;
v7 = v6;
specialinvoke v6.<io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask: void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.channel.AbstractChannelHandlerContext)>(v0, v1);
goto label3;
label2:
v8 = new io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask;
v7 = v8;
specialinvoke v8.<io.netty.channel.DefaultChannelPipeline$PendingHandlerRemovedTask: void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.channel.AbstractChannelHandlerContext)>(v0, v1);
label3:
v9 = v7;
v10 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback pendingHandlerCallbackHead>;
if v10 != null goto label4;
v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback pendingHandlerCallbackHead> = v7;
goto label6;
label4:
v11 = v10.<io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback: io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback next>;
if v11 == null goto label5;
v10 = v10.<io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback: io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback next>;
goto label4;
label5:
v10.<io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback: io.netty.channel.DefaultChannelPipeline$PendingHandlerCallback next> = v9;
label6:
return;
}
private void callHandlerAddedInEventLoop(io.netty.channel.AbstractChannelHandlerContext, io.netty.util.concurrent.EventExecutor)
{
io.netty.util.concurrent.EventExecutor v2;
io.netty.channel.DefaultChannelPipeline$6 v3;
io.netty.channel.AbstractChannelHandlerContext v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.AbstractChannelHandlerContext;
v2 := @parameter1: io.netty.util.concurrent.EventExecutor;
virtualinvoke v1.<io.netty.channel.AbstractChannelHandlerContext: void setAddPending()>();
v3 = new io.netty.channel.DefaultChannelPipeline$6;
specialinvoke v3.<io.netty.channel.DefaultChannelPipeline$6: void <init>(io.netty.channel.DefaultChannelPipeline,io.netty.channel.AbstractChannelHandlerContext)>(v0, v1);
interfaceinvoke v2.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v3);
return;
}
protected void onUnhandledInboundException(java.lang.Throwable)
{
java.lang.Throwable v1, v3;
io.netty.util.internal.logging.InternalLogger v2;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Throwable;
label1:
v2 = <io.netty.channel.DefaultChannelPipeline: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Throwable)>("An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.", v1);
label2:
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v1);
goto label4;
label3:
v3 := @caughtexception;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v1);
throw v3;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected void onUnhandledInboundChannelActive()
{
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
return;
}
protected void onUnhandledInboundChannelInactive()
{
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
return;
}
protected void onUnhandledInboundMessage(java.lang.Object)
{
java.lang.Throwable v3;
io.netty.util.internal.logging.InternalLogger v2;
java.lang.Object v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Object;
label1:
v2 = <io.netty.channel.DefaultChannelPipeline: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("Discarded inbound message {} that reached at the tail of the pipeline. Please check your pipeline configuration.", v1);
label2:
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v1);
goto label4;
label3:
v3 := @caughtexception;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v1);
throw v3;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected void onUnhandledInboundMessage(io.netty.channel.ChannelHandlerContext, java.lang.Object)
{
io.netty.channel.ChannelPipeline v6;
io.netty.channel.Channel v8;
io.netty.channel.ChannelHandlerContext v1;
java.util.List v7;
io.netty.util.internal.logging.InternalLogger v3, v5;
java.lang.Object v2;
io.netty.channel.DefaultChannelPipeline v0;
boolean v4;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
virtualinvoke v0.<io.netty.channel.DefaultChannelPipeline: void onUnhandledInboundMessage(java.lang.Object)>(v2);
v3 = <io.netty.channel.DefaultChannelPipeline: io.netty.util.internal.logging.InternalLogger logger>;
v4 = interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v4 == 0 goto label1;
v5 = <io.netty.channel.DefaultChannelPipeline: io.netty.util.internal.logging.InternalLogger logger>;
v6 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
v7 = interfaceinvoke v6.<io.netty.channel.ChannelPipeline: java.util.List names()>();
v8 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Discarded message pipeline : {}. Channel : {}.", v7, v8);
label1:
return;
}
protected void onUnhandledInboundChannelReadComplete()
{
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
return;
}
protected void onUnhandledInboundUserEventTriggered(java.lang.Object)
{
java.lang.Object v1;
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: java.lang.Object;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v1);
return;
}
protected void onUnhandledChannelWritabilityChanged()
{
io.netty.channel.DefaultChannelPipeline v0;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
return;
}
protected void incrementPendingOutboundBytes(long)
{
io.netty.channel.Channel v2;
io.netty.channel.ChannelOutboundBuffer v4;
long v1;
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.Channel$Unsafe v3;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: long;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.Channel channel>;
v3 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.Channel$Unsafe unsafe()>();
v4 = interfaceinvoke v3.<io.netty.channel.Channel$Unsafe: io.netty.channel.ChannelOutboundBuffer outboundBuffer()>();
if v4 == null goto label1;
virtualinvoke v4.<io.netty.channel.ChannelOutboundBuffer: void incrementPendingOutboundBytes(long)>(v1);
label1:
return;
}
protected void decrementPendingOutboundBytes(long)
{
io.netty.channel.Channel v2;
io.netty.channel.ChannelOutboundBuffer v4;
long v1;
io.netty.channel.DefaultChannelPipeline v0;
io.netty.channel.Channel$Unsafe v3;
v0 := @this: io.netty.channel.DefaultChannelPipeline;
v1 := @parameter0: long;
v2 = v0.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.Channel channel>;
v3 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.Channel$Unsafe unsafe()>();
v4 = interfaceinvoke v3.<io.netty.channel.Channel$Unsafe: io.netty.channel.ChannelOutboundBuffer outboundBuffer()>();
if v4 == null goto label1;
virtualinvoke v4.<io.netty.channel.ChannelOutboundBuffer: void decrementPendingOutboundBytes(long)>(v1);
label1:
return;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v7;
io.netty.util.internal.logging.InternalLogger v3;
java.lang.Class v0;
java.lang.String v4, v5;
io.netty.channel.DefaultChannelPipeline$1 v6;
boolean v1, v2;
v0 = class "Lio/netty/channel/DefaultChannelPipeline;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.channel.DefaultChannelPipeline: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/channel/DefaultChannelPipeline;");
<io.netty.channel.DefaultChannelPipeline: io.netty.util.internal.logging.InternalLogger logger> = v3;
v4 = staticinvoke <io.netty.channel.DefaultChannelPipeline: java.lang.String generateName0(java.lang.Class)>(class "Lio/netty/channel/DefaultChannelPipeline$HeadContext;");
<io.netty.channel.DefaultChannelPipeline: java.lang.String HEAD_NAME> = v4;
v5 = staticinvoke <io.netty.channel.DefaultChannelPipeline: java.lang.String generateName0(java.lang.Class)>(class "Lio/netty/channel/DefaultChannelPipeline$TailContext;");
<io.netty.channel.DefaultChannelPipeline: java.lang.String TAIL_NAME> = v5;
v6 = new io.netty.channel.DefaultChannelPipeline$1;
specialinvoke v6.<io.netty.channel.DefaultChannelPipeline$1: void <init>()>();
<io.netty.channel.DefaultChannelPipeline: io.netty.util.concurrent.FastThreadLocal nameCaches> = v6;
v7 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lio/netty/channel/DefaultChannelPipeline;", class "Lio/netty/channel/MessageSizeEstimator$Handle;", "estimatorHandle");
<io.netty.channel.DefaultChannelPipeline: java.util.concurrent.atomic.AtomicReferenceFieldUpdater ESTIMATOR> = v7;
return;
}
}