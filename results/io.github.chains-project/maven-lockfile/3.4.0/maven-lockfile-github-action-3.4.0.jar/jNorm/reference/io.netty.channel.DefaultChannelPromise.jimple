public class io.netty.channel.DefaultChannelPromise extends io.netty.util.concurrent.DefaultPromise implements io.netty.channel.ChannelPromise, io.netty.channel.ChannelFlushPromiseNotifier$FlushCheckpoint
{
private final io.netty.channel.Channel channel;
private long checkpoint;
public void <init>(io.netty.channel.Channel)
{
io.netty.channel.Channel v1;
java.lang.Object v2;
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
v1 := @parameter0: io.netty.channel.Channel;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "channel");
v0.<io.netty.channel.DefaultChannelPromise: io.netty.channel.Channel channel> = v2;
return;
}
public void <init>(io.netty.channel.Channel, io.netty.util.concurrent.EventExecutor)
{
io.netty.channel.Channel v1;
io.netty.util.concurrent.EventExecutor v2;
java.lang.Object v3;
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.util.concurrent.EventExecutor;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: void <init>(io.netty.util.concurrent.EventExecutor)>(v2);
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "channel");
v0.<io.netty.channel.DefaultChannelPromise: io.netty.channel.Channel channel> = v3;
return;
}
protected io.netty.util.concurrent.EventExecutor executor()
{
io.netty.channel.Channel v2;
io.netty.util.concurrent.EventExecutor v1;
io.netty.channel.EventLoop v3;
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
v1 = specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.EventExecutor executor()>();
if v1 != null goto label1;
v2 = virtualinvoke v0.<io.netty.channel.DefaultChannelPromise: io.netty.channel.Channel channel()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
return v3;
label1:
return v1;
}
public io.netty.channel.Channel channel()
{
io.netty.channel.Channel v1;
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
v1 = v0.<io.netty.channel.DefaultChannelPromise: io.netty.channel.Channel channel>;
return v1;
}
public io.netty.channel.ChannelPromise setSuccess()
{
io.netty.channel.ChannelPromise v1;
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
v1 = virtualinvoke v0.<io.netty.channel.DefaultChannelPromise: io.netty.channel.ChannelPromise setSuccess(java.lang.Void)>(null);
return v1;
}
public io.netty.channel.ChannelPromise setSuccess(java.lang.Void)
{
java.lang.Void v1;
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
v1 := @parameter0: java.lang.Void;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(v1);
return v0;
}
public boolean trySuccess()
{
io.netty.channel.DefaultChannelPromise v0;
boolean v1;
v0 := @this: io.netty.channel.DefaultChannelPromise;
v1 = virtualinvoke v0.<io.netty.channel.DefaultChannelPromise: boolean trySuccess(java.lang.Object)>(null);
return v1;
}
public io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
v1 := @parameter0: java.lang.Throwable;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v1);
return v0;
}
public io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)
{
io.netty.util.concurrent.GenericFutureListener v1;
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
v1 := @parameter0: io.netty.util.concurrent.GenericFutureListener;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)>(v1);
return v0;
}
public transient io.netty.channel.ChannelPromise addListeners(io.netty.util.concurrent.GenericFutureListener[])
{
io.netty.util.concurrent.GenericFutureListener[] v1;
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
v1 := @parameter0: io.netty.util.concurrent.GenericFutureListener[];
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise addListeners(io.netty.util.concurrent.GenericFutureListener[])>(v1);
return v0;
}
public io.netty.channel.ChannelPromise removeListener(io.netty.util.concurrent.GenericFutureListener)
{
io.netty.util.concurrent.GenericFutureListener v1;
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
v1 := @parameter0: io.netty.util.concurrent.GenericFutureListener;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise removeListener(io.netty.util.concurrent.GenericFutureListener)>(v1);
return v0;
}
public transient io.netty.channel.ChannelPromise removeListeners(io.netty.util.concurrent.GenericFutureListener[])
{
io.netty.util.concurrent.GenericFutureListener[] v1;
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
v1 := @parameter0: io.netty.util.concurrent.GenericFutureListener[];
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise removeListeners(io.netty.util.concurrent.GenericFutureListener[])>(v1);
return v0;
}
public io.netty.channel.ChannelPromise sync() throws java.lang.InterruptedException
{
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise sync()>();
return v0;
}
public io.netty.channel.ChannelPromise syncUninterruptibly()
{
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise syncUninterruptibly()>();
return v0;
}
public io.netty.channel.ChannelPromise await() throws java.lang.InterruptedException
{
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise await()>();
return v0;
}
public io.netty.channel.ChannelPromise awaitUninterruptibly()
{
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise awaitUninterruptibly()>();
return v0;
}
public long flushCheckpoint()
{
long v1;
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
v1 = v0.<io.netty.channel.DefaultChannelPromise: long checkpoint>;
return v1;
}
public void flushCheckpoint(long)
{
long v1;
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
v1 := @parameter0: long;
v0.<io.netty.channel.DefaultChannelPromise: long checkpoint> = v1;
return;
}
public io.netty.channel.ChannelPromise promise()
{
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
return v0;
}
protected void checkDeadLock()
{
io.netty.channel.Channel v1;
io.netty.channel.DefaultChannelPromise v0;
boolean v2;
v0 := @this: io.netty.channel.DefaultChannelPromise;
v1 = virtualinvoke v0.<io.netty.channel.DefaultChannelPromise: io.netty.channel.Channel channel()>();
v2 = interfaceinvoke v1.<io.netty.channel.Channel: boolean isRegistered()>();
if v2 == 0 goto label1;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: void checkDeadLock()>();
label1:
return;
}
public io.netty.channel.ChannelPromise unvoid()
{
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
return v0;
}
public boolean isVoid()
{
io.netty.channel.DefaultChannelPromise v0;
v0 := @this: io.netty.channel.DefaultChannelPromise;
return 0;
}
}