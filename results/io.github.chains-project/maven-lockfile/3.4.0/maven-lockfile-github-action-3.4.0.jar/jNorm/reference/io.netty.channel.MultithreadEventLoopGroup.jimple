public abstract class io.netty.channel.MultithreadEventLoopGroup extends io.netty.util.concurrent.MultithreadEventExecutorGroup implements io.netty.channel.EventLoopGroup
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final int DEFAULT_EVENT_LOOP_THREADS;
protected transient void <init>(int, java.util.concurrent.Executor, java.lang.Object[])
{
java.lang.Object[] v3;
io.netty.channel.MultithreadEventLoopGroup v0;
java.util.concurrent.Executor v2;
int v1, v4;
v0 := @this: io.netty.channel.MultithreadEventLoopGroup;
v1 := @parameter0: int;
v2 := @parameter1: java.util.concurrent.Executor;
v3 := @parameter2: java.lang.Object[];
if v1 != 0 goto label1;
v4 = <io.netty.channel.MultithreadEventLoopGroup: int DEFAULT_EVENT_LOOP_THREADS>;
goto label2;
label1:
v4 = v1;
label2:
specialinvoke v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: void <init>(int,java.util.concurrent.Executor,java.lang.Object[])>(v4, v2, v3);
return;
}
protected transient void <init>(int, java.util.concurrent.ThreadFactory, java.lang.Object[])
{
java.lang.Object[] v3;
io.netty.channel.MultithreadEventLoopGroup v0;
int v1, v4;
java.util.concurrent.ThreadFactory v2;
v0 := @this: io.netty.channel.MultithreadEventLoopGroup;
v1 := @parameter0: int;
v2 := @parameter1: java.util.concurrent.ThreadFactory;
v3 := @parameter2: java.lang.Object[];
if v1 != 0 goto label1;
v4 = <io.netty.channel.MultithreadEventLoopGroup: int DEFAULT_EVENT_LOOP_THREADS>;
goto label2;
label1:
v4 = v1;
label2:
specialinvoke v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])>(v4, v2, v3);
return;
}
protected transient void <init>(int, java.util.concurrent.Executor, io.netty.util.concurrent.EventExecutorChooserFactory, java.lang.Object[])
{
java.lang.Object[] v4;
io.netty.channel.MultithreadEventLoopGroup v0;
java.util.concurrent.Executor v2;
int v1, v5;
io.netty.util.concurrent.EventExecutorChooserFactory v3;
v0 := @this: io.netty.channel.MultithreadEventLoopGroup;
v1 := @parameter0: int;
v2 := @parameter1: java.util.concurrent.Executor;
v3 := @parameter2: io.netty.util.concurrent.EventExecutorChooserFactory;
v4 := @parameter3: java.lang.Object[];
if v1 != 0 goto label1;
v5 = <io.netty.channel.MultithreadEventLoopGroup: int DEFAULT_EVENT_LOOP_THREADS>;
goto label2;
label1:
v5 = v1;
label2:
specialinvoke v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: void <init>(int,java.util.concurrent.Executor,io.netty.util.concurrent.EventExecutorChooserFactory,java.lang.Object[])>(v5, v2, v3, v4);
return;
}
protected java.util.concurrent.ThreadFactory newDefaultThreadFactory()
{
java.lang.Class v2;
io.netty.util.concurrent.DefaultThreadFactory v1;
io.netty.channel.MultithreadEventLoopGroup v0;
v0 := @this: io.netty.channel.MultithreadEventLoopGroup;
v1 = new io.netty.util.concurrent.DefaultThreadFactory;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
specialinvoke v1.<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.Class,int)>(v2, 10);
return v1;
}
public io.netty.channel.EventLoop next()
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.channel.MultithreadEventLoopGroup v0;
v0 := @this: io.netty.channel.MultithreadEventLoopGroup;
v1 = specialinvoke v0.<io.netty.util.concurrent.MultithreadEventExecutorGroup: io.netty.util.concurrent.EventExecutor next()>();
return v1;
}
protected abstract transient io.netty.channel.EventLoop newChild(java.util.concurrent.Executor, java.lang.Object[]) throws java.lang.Exception;
public io.netty.channel.ChannelFuture register(io.netty.channel.Channel)
{
io.netty.channel.Channel v1;
io.netty.channel.MultithreadEventLoopGroup v0;
io.netty.channel.EventLoop v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.MultithreadEventLoopGroup;
v1 := @parameter0: io.netty.channel.Channel;
v2 = virtualinvoke v0.<io.netty.channel.MultithreadEventLoopGroup: io.netty.channel.EventLoop next()>();
v3 = interfaceinvoke v2.<io.netty.channel.EventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.Channel)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture register(io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v1;
io.netty.channel.MultithreadEventLoopGroup v0;
io.netty.channel.EventLoop v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.MultithreadEventLoopGroup;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = virtualinvoke v0.<io.netty.channel.MultithreadEventLoopGroup: io.netty.channel.EventLoop next()>();
v3 = interfaceinvoke v2.<io.netty.channel.EventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.ChannelPromise)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture register(io.netty.channel.Channel, io.netty.channel.ChannelPromise)
{
io.netty.channel.Channel v1;
io.netty.channel.ChannelPromise v2;
io.netty.channel.MultithreadEventLoopGroup v0;
io.netty.channel.EventLoop v3;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.channel.MultithreadEventLoopGroup;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = virtualinvoke v0.<io.netty.channel.MultithreadEventLoopGroup: io.netty.channel.EventLoop next()>();
v4 = interfaceinvoke v3.<io.netty.channel.EventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)>(v1, v2);
return v4;
}
static void <clinit>()
{
java.lang.Integer v9;
io.netty.util.internal.logging.InternalLogger v0, v5, v7;
int v1, v2, v3, v4, v8;
boolean v6;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/channel/MultithreadEventLoopGroup;");
<io.netty.channel.MultithreadEventLoopGroup: io.netty.util.internal.logging.InternalLogger logger> = v0;
v1 = staticinvoke <io.netty.util.NettyRuntime: int availableProcessors()>();
v2 = v1 * 2;
v3 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>("io.netty.eventLoopThreads", v2);
v4 = staticinvoke <java.lang.Math: int max(int,int)>(1, v3);
<io.netty.channel.MultithreadEventLoopGroup: int DEFAULT_EVENT_LOOP_THREADS> = v4;
v5 = <io.netty.channel.MultithreadEventLoopGroup: io.netty.util.internal.logging.InternalLogger logger>;
v6 = interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v6 == 0 goto label1;
v7 = <io.netty.channel.MultithreadEventLoopGroup: io.netty.util.internal.logging.InternalLogger logger>;
v8 = <io.netty.channel.MultithreadEventLoopGroup: int DEFAULT_EVENT_LOOP_THREADS>;
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
interfaceinvoke v7.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("-Dio.netty.eventLoopThreads: {}", v9);
label1:
return;
}
}