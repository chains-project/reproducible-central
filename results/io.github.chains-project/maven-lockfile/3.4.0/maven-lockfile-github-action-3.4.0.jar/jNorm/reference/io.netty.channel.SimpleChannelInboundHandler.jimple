public abstract class io.netty.channel.SimpleChannelInboundHandler extends io.netty.channel.ChannelInboundHandlerAdapter
{
private final io.netty.util.internal.TypeParameterMatcher matcher;
private final boolean autoRelease;
protected void <init>()
{
io.netty.channel.SimpleChannelInboundHandler v0;
v0 := @this: io.netty.channel.SimpleChannelInboundHandler;
specialinvoke v0.<io.netty.channel.SimpleChannelInboundHandler: void <init>(boolean)>(1);
return;
}
protected void <init>(boolean)
{
io.netty.util.internal.TypeParameterMatcher v2;
io.netty.channel.SimpleChannelInboundHandler v0;
boolean v1;
v0 := @this: io.netty.channel.SimpleChannelInboundHandler;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.TypeParameterMatcher: io.netty.util.internal.TypeParameterMatcher find(java.lang.Object,java.lang.Class,java.lang.String)>(v0, class "Lio/netty/channel/SimpleChannelInboundHandler;", "I");
v0.<io.netty.channel.SimpleChannelInboundHandler: io.netty.util.internal.TypeParameterMatcher matcher> = v2;
v0.<io.netty.channel.SimpleChannelInboundHandler: boolean autoRelease> = v1;
return;
}
protected void <init>(java.lang.Class)
{
java.lang.Class v1;
io.netty.channel.SimpleChannelInboundHandler v0;
v0 := @this: io.netty.channel.SimpleChannelInboundHandler;
v1 := @parameter0: java.lang.Class;
specialinvoke v0.<io.netty.channel.SimpleChannelInboundHandler: void <init>(java.lang.Class,boolean)>(v1, 1);
return;
}
protected void <init>(java.lang.Class, boolean)
{
io.netty.channel.SimpleChannelInboundHandler v0;
io.netty.util.internal.TypeParameterMatcher v3;
java.lang.Class v1;
boolean v2;
v0 := @this: io.netty.channel.SimpleChannelInboundHandler;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: boolean;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void <init>()>();
v3 = staticinvoke <io.netty.util.internal.TypeParameterMatcher: io.netty.util.internal.TypeParameterMatcher get(java.lang.Class)>(v1);
v0.<io.netty.channel.SimpleChannelInboundHandler: io.netty.util.internal.TypeParameterMatcher matcher> = v3;
v0.<io.netty.channel.SimpleChannelInboundHandler: boolean autoRelease> = v2;
return;
}
public boolean acceptInboundMessage(java.lang.Object) throws java.lang.Exception
{
io.netty.channel.SimpleChannelInboundHandler v0;
io.netty.util.internal.TypeParameterMatcher v2;
java.lang.Object v1;
boolean v3;
v0 := @this: io.netty.channel.SimpleChannelInboundHandler;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.channel.SimpleChannelInboundHandler: io.netty.util.internal.TypeParameterMatcher matcher>;
v3 = virtualinvoke v2.<io.netty.util.internal.TypeParameterMatcher: boolean match(java.lang.Object)>(v1);
return v3;
}
public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
java.lang.Throwable v6;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.SimpleChannelInboundHandler v0;
java.lang.Object v2;
boolean v3, v4, v5, v7;
v0 := @this: io.netty.channel.SimpleChannelInboundHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = 1;
label1:
v4 = virtualinvoke v0.<io.netty.channel.SimpleChannelInboundHandler: boolean acceptInboundMessage(java.lang.Object)>(v2);
if v4 == 0 goto label2;
virtualinvoke v0.<io.netty.channel.SimpleChannelInboundHandler: void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)>(v1, v2);
goto label3;
label2:
v3 = 0;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>(v2);
label3:
v5 = v0.<io.netty.channel.SimpleChannelInboundHandler: boolean autoRelease>;
if v5 == 0 goto label6;
if v3 == 0 goto label6;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v2);
goto label6;
label4:
v6 := @caughtexception;
v7 = v0.<io.netty.channel.SimpleChannelInboundHandler: boolean autoRelease>;
if v7 == 0 goto label5;
if v3 == 0 goto label5;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v2);
label5:
throw v6;
label6:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
protected abstract void channelRead0(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception;
}