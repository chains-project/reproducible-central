public class io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe extends io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe
{
final io.netty.channel.nio.AbstractNioByteChannel this$0;
protected void <init>(io.netty.channel.nio.AbstractNioByteChannel)
{
io.netty.channel.nio.AbstractNioByteChannel v1;
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe v0;
v0 := @this: io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe;
v1 := @parameter0: io.netty.channel.nio.AbstractNioByteChannel;
v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.nio.AbstractNioByteChannel this$0> = v1;
specialinvoke v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: void <init>(io.netty.channel.nio.AbstractNioChannel)>(v1);
return;
}
private void closeOnRead(io.netty.channel.ChannelPipeline)
{
io.netty.channel.socket.ChannelInputShutdownReadComplete v13;
io.netty.channel.ChannelPipeline v1;
io.netty.channel.socket.ChannelInputShutdownEvent v8;
io.netty.channel.ChannelConfig v5;
io.netty.channel.ChannelPromise v9;
io.netty.channel.nio.AbstractNioByteChannel v10, v12, v2, v4, v7;
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe v0;
boolean v11, v3, v6;
v0 := @this: io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPipeline;
v2 = v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.nio.AbstractNioByteChannel this$0>;
v3 = virtualinvoke v2.<io.netty.channel.nio.AbstractNioByteChannel: boolean isInputShutdown0()>();
if v3 != 0 goto label2;
v4 = v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.nio.AbstractNioByteChannel this$0>;
v5 = virtualinvoke v4.<io.netty.channel.nio.AbstractNioByteChannel: io.netty.channel.ChannelConfig config()>();
v6 = staticinvoke <io.netty.channel.nio.AbstractNioByteChannel: boolean isAllowHalfClosure(io.netty.channel.ChannelConfig)>(v5);
if v6 == 0 goto label1;
v7 = v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.nio.AbstractNioByteChannel this$0>;
virtualinvoke v7.<io.netty.channel.nio.AbstractNioByteChannel: io.netty.channel.ChannelFuture shutdownInput()>();
v8 = <io.netty.channel.socket.ChannelInputShutdownEvent: io.netty.channel.socket.ChannelInputShutdownEvent INSTANCE>;
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireUserEventTriggered(java.lang.Object)>(v8);
goto label3;
label1:
v9 = virtualinvoke v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.ChannelPromise voidPromise()>();
virtualinvoke v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: void close(io.netty.channel.ChannelPromise)>(v9);
goto label3;
label2:
v10 = v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.nio.AbstractNioByteChannel this$0>;
v11 = v10.<io.netty.channel.nio.AbstractNioByteChannel: boolean inputClosedSeenErrorOnRead>;
if v11 != 0 goto label3;
v12 = v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.nio.AbstractNioByteChannel this$0>;
v12.<io.netty.channel.nio.AbstractNioByteChannel: boolean inputClosedSeenErrorOnRead> = 1;
v13 = <io.netty.channel.socket.ChannelInputShutdownReadComplete: io.netty.channel.socket.ChannelInputShutdownReadComplete INSTANCE>;
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireUserEventTriggered(java.lang.Object)>(v13);
label3:
return;
}
private void handleReadException(io.netty.channel.ChannelPipeline, io.netty.buffer.ByteBuf, java.lang.Throwable, boolean, io.netty.channel.RecvByteBufAllocator$Handle)
{
java.lang.Throwable v3;
io.netty.channel.ChannelPipeline v1;
io.netty.channel.RecvByteBufAllocator$Handle v5;
io.netty.buffer.ByteBuf v2;
io.netty.channel.nio.AbstractNioByteChannel v7;
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe v0;
boolean v4, v6, v8, v9;
v0 := @this: io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPipeline;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: java.lang.Throwable;
v4 := @parameter3: boolean;
v5 := @parameter4: io.netty.channel.RecvByteBufAllocator$Handle;
if v2 == null goto label2;
v6 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v6 == 0 goto label1;
v7 = v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.nio.AbstractNioByteChannel this$0>;
v7.<io.netty.channel.nio.AbstractNioByteChannel: boolean readPending> = 0;
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelRead(java.lang.Object)>(v2);
goto label2;
label1:
virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean release()>();
label2:
interfaceinvoke v5.<io.netty.channel.RecvByteBufAllocator$Handle: void readComplete()>();
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelReadComplete()>();
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireExceptionCaught(java.lang.Throwable)>(v3);
if v4 != 0 goto label3;
v8 = v3 instanceof java.lang.OutOfMemoryError;
if v8 != 0 goto label3;
v9 = v3 instanceof java.io.IOException;
if v9 == 0 goto label4;
label3:
specialinvoke v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: void closeOnRead(io.netty.channel.ChannelPipeline)>(v1);
label4:
return;
}
public final void read()
{
java.lang.Throwable v23, v27;
io.netty.buffer.ByteBufAllocator v8;
io.netty.buffer.ByteBuf v10;
int v13, v14, v15;
boolean v11, v16, v19, v21, v22, v25, v26, v29, v30, v4;
io.netty.channel.ChannelPipeline v7;
io.netty.channel.RecvByteBufAllocator$Handle v9;
io.netty.channel.ChannelConfig v2;
io.netty.channel.nio.AbstractNioByteChannel v1, v12, v17, v18, v20, v24, v28, v3, v5, v6;
io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe v0;
v0 := @this: io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe;
v1 = v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.nio.AbstractNioByteChannel this$0>;
v2 = virtualinvoke v1.<io.netty.channel.nio.AbstractNioByteChannel: io.netty.channel.ChannelConfig config()>();
v3 = v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.nio.AbstractNioByteChannel this$0>;
v4 = virtualinvoke v3.<io.netty.channel.nio.AbstractNioByteChannel: boolean shouldBreakReadReady(io.netty.channel.ChannelConfig)>(v2);
if v4 == 0 goto label01;
v5 = v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.nio.AbstractNioByteChannel this$0>;
virtualinvoke v5.<io.netty.channel.nio.AbstractNioByteChannel: void clearReadPending()>();
return;
label01:
v6 = v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.nio.AbstractNioByteChannel this$0>;
v7 = virtualinvoke v6.<io.netty.channel.nio.AbstractNioByteChannel: io.netty.channel.ChannelPipeline pipeline()>();
v8 = interfaceinvoke v2.<io.netty.channel.ChannelConfig: io.netty.buffer.ByteBufAllocator getAllocator()>();
v9 = virtualinvoke v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.RecvByteBufAllocator$Handle recvBufAllocHandle()>();
interfaceinvoke v9.<io.netty.channel.RecvByteBufAllocator$Handle: void reset(io.netty.channel.ChannelConfig)>(v2);
v10 = null;
v11 = 0;
label02:
v10 = interfaceinvoke v9.<io.netty.channel.RecvByteBufAllocator$Handle: io.netty.buffer.ByteBuf allocate(io.netty.buffer.ByteBufAllocator)>(v8);
v12 = v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.nio.AbstractNioByteChannel this$0>;
v13 = virtualinvoke v12.<io.netty.channel.nio.AbstractNioByteChannel: int doReadBytes(io.netty.buffer.ByteBuf)>(v10);
interfaceinvoke v9.<io.netty.channel.RecvByteBufAllocator$Handle: void lastBytesRead(int)>(v13);
v14 = interfaceinvoke v9.<io.netty.channel.RecvByteBufAllocator$Handle: int lastBytesRead()>();
if v14 > 0 goto label05;
virtualinvoke v10.<io.netty.buffer.ByteBuf: boolean release()>();
v10 = null;
v15 = interfaceinvoke v9.<io.netty.channel.RecvByteBufAllocator$Handle: int lastBytesRead()>();
if v15 >= 0 goto label03;
v16 = 1;
goto label04;
label03:
v16 = 0;
label04:
v11 = v16;
if v16 == 0 goto label06;
v17 = v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.nio.AbstractNioByteChannel this$0>;
v17.<io.netty.channel.nio.AbstractNioByteChannel: boolean readPending> = 0;
goto label06;
label05:
interfaceinvoke v9.<io.netty.channel.RecvByteBufAllocator$Handle: void incMessagesRead(int)>(1);
v18 = v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.nio.AbstractNioByteChannel this$0>;
v18.<io.netty.channel.nio.AbstractNioByteChannel: boolean readPending> = 0;
interfaceinvoke v7.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelRead(java.lang.Object)>(v10);
v10 = null;
v19 = interfaceinvoke v9.<io.netty.channel.RecvByteBufAllocator$Handle: boolean continueReading()>();
if v19 != 0 goto label02;
label06:
interfaceinvoke v9.<io.netty.channel.RecvByteBufAllocator$Handle: void readComplete()>();
interfaceinvoke v7.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelReadComplete()>();
if v11 == 0 goto label07;
specialinvoke v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: void closeOnRead(io.netty.channel.ChannelPipeline)>(v7);
label07:
v20 = v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.nio.AbstractNioByteChannel this$0>;
v21 = v20.<io.netty.channel.nio.AbstractNioByteChannel: boolean readPending>;
if v21 != 0 goto label12;
v22 = interfaceinvoke v2.<io.netty.channel.ChannelConfig: boolean isAutoRead()>();
if v22 != 0 goto label12;
virtualinvoke v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: void removeReadOp()>();
goto label12;
label08:
v23 := @caughtexception;
specialinvoke v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: void handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean,io.netty.channel.RecvByteBufAllocator$Handle)>(v7, v10, v23, v11, v9);
label09:
v24 = v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.nio.AbstractNioByteChannel this$0>;
v25 = v24.<io.netty.channel.nio.AbstractNioByteChannel: boolean readPending>;
if v25 != 0 goto label12;
v26 = interfaceinvoke v2.<io.netty.channel.ChannelConfig: boolean isAutoRead()>();
if v26 != 0 goto label12;
virtualinvoke v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: void removeReadOp()>();
goto label12;
label10:
v27 := @caughtexception;
v28 = v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: io.netty.channel.nio.AbstractNioByteChannel this$0>;
v29 = v28.<io.netty.channel.nio.AbstractNioByteChannel: boolean readPending>;
if v29 != 0 goto label11;
v30 = interfaceinvoke v2.<io.netty.channel.ChannelConfig: boolean isAutoRead()>();
if v30 != 0 goto label11;
virtualinvoke v0.<io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe: void removeReadOp()>();
label11:
throw v27;
label12:
return;
catch java.lang.Throwable from label02 to label07 with label08;
catch java.lang.Throwable from label08 to label09 with label10;
}
}