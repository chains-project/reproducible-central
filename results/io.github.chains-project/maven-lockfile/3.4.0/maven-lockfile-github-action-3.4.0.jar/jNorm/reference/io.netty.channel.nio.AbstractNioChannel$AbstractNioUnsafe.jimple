public abstract class io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe extends io.netty.channel.AbstractChannel$AbstractUnsafe implements io.netty.channel.nio.AbstractNioChannel$NioUnsafe
{
static final boolean $assertionsDisabled;
final io.netty.channel.nio.AbstractNioChannel this$0;
protected void <init>(io.netty.channel.nio.AbstractNioChannel)
{
io.netty.channel.nio.AbstractNioChannel v1;
io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe v0;
v0 := @this: io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe;
v1 := @parameter0: io.netty.channel.nio.AbstractNioChannel;
v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0> = v1;
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void <init>(io.netty.channel.AbstractChannel)>(v1);
return;
}
protected final void removeReadOp()
{
io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe v0;
java.nio.channels.SelectionKey v2;
int v10, v11, v12, v4, v6, v7, v9;
io.netty.channel.nio.AbstractNioChannel v1, v5, v8;
boolean v3;
v0 := @this: io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe;
v1 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v2 = virtualinvoke v1.<io.netty.channel.nio.AbstractNioChannel: java.nio.channels.SelectionKey selectionKey()>();
v3 = virtualinvoke v2.<java.nio.channels.SelectionKey: boolean isValid()>();
if v3 != 0 goto label1;
return;
label1:
v4 = virtualinvoke v2.<java.nio.channels.SelectionKey: int interestOps()>();
v5 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v6 = v5.<io.netty.channel.nio.AbstractNioChannel: int readInterestOp>;
v7 = v4 & v6;
if v7 == 0 goto label2;
v8 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v9 = v8.<io.netty.channel.nio.AbstractNioChannel: int readInterestOp>;
v10 = (int) -1;
v11 = v9 ^ v10;
v12 = v4 & v11;
virtualinvoke v2.<java.nio.channels.SelectionKey: java.nio.channels.SelectionKey interestOps(int)>(v12);
label2:
return;
}
public final java.nio.channels.SelectableChannel ch()
{
io.netty.channel.nio.AbstractNioChannel v1;
io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe v0;
java.nio.channels.SelectableChannel v2;
v0 := @this: io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe;
v1 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v2 = virtualinvoke v1.<io.netty.channel.nio.AbstractNioChannel: java.nio.channels.SelectableChannel javaChannel()>();
return v2;
}
public final void connect(java.net.SocketAddress, java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v25, v26;
java.net.SocketAddress v1, v2;
io.netty.util.concurrent.ScheduledFuture v23;
io.netty.channel.ChannelPromise v3, v7;
int v17;
java.nio.channels.ConnectionPendingException v8;
io.netty.channel.nio.AbstractNioChannel v11, v13, v14, v15, v18, v19, v6, v9;
boolean v10, v12, v4, v5;
io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe v0;
java.util.concurrent.TimeUnit v22;
io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$1 v21;
io.netty.channel.ChannelConfig v16;
io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$2 v24;
io.netty.channel.nio.NioEventLoop v20;
v0 := @this: io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = interfaceinvoke v3.<io.netty.channel.ChannelPromise: boolean setUncancellable()>();
if v4 == 0 goto label1;
v5 = virtualinvoke v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: boolean ensureOpen(io.netty.channel.ChannelPromise)>(v3);
if v5 != 0 goto label2;
label1:
return;
label2:
v6 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v7 = v6.<io.netty.channel.nio.AbstractNioChannel: io.netty.channel.ChannelPromise connectPromise>;
if v7 == null goto label3;
v8 = new java.nio.channels.ConnectionPendingException;
specialinvoke v8.<java.nio.channels.ConnectionPendingException: void <init>()>();
throw v8;
label3:
v9 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v10 = virtualinvoke v9.<io.netty.channel.nio.AbstractNioChannel: boolean isActive()>();
v11 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v12 = virtualinvoke v11.<io.netty.channel.nio.AbstractNioChannel: boolean doConnect(java.net.SocketAddress,java.net.SocketAddress)>(v1, v2);
if v12 == 0 goto label4;
specialinvoke v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: void fulfillConnectPromise(io.netty.channel.ChannelPromise,boolean)>(v3, v10);
goto label8;
label4:
v13 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v13.<io.netty.channel.nio.AbstractNioChannel: io.netty.channel.ChannelPromise connectPromise> = v3;
v14 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v14.<io.netty.channel.nio.AbstractNioChannel: java.net.SocketAddress requestedRemoteAddress> = v1;
v15 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v16 = virtualinvoke v15.<io.netty.channel.nio.AbstractNioChannel: io.netty.channel.ChannelConfig config()>();
v17 = interfaceinvoke v16.<io.netty.channel.ChannelConfig: int getConnectTimeoutMillis()>();
if v17 <= 0 goto label5;
v18 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v19 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v20 = virtualinvoke v19.<io.netty.channel.nio.AbstractNioChannel: io.netty.channel.nio.NioEventLoop eventLoop()>();
v21 = new io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$1;
specialinvoke v21.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$1: void <init>(io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe,java.net.SocketAddress)>(v0, v1);
v22 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v23 = virtualinvoke v20.<io.netty.channel.nio.NioEventLoop: io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v21, v17, v22);
v18.<io.netty.channel.nio.AbstractNioChannel: io.netty.util.concurrent.Future connectTimeoutFuture> = v23;
label5:
v24 = new io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$2;
specialinvoke v24.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$2: void <init>(io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe)>(v0);
interfaceinvoke v3.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)>(v24);
label6:
goto label8;
label7:
v25 := @caughtexception;
v26 = virtualinvoke v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: java.lang.Throwable annotateConnectException(java.lang.Throwable,java.net.SocketAddress)>(v25, v1);
interfaceinvoke v3.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v26);
virtualinvoke v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: void closeIfClosed()>();
label8:
return;
catch java.lang.Throwable from label2 to label6 with label7;
}
private void fulfillConnectPromise(io.netty.channel.ChannelPromise, boolean)
{
io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe v0;
io.netty.channel.ChannelPipeline v7;
io.netty.channel.ChannelPromise v1, v8;
io.netty.channel.nio.AbstractNioChannel v3, v6;
boolean v2, v4, v5;
v0 := @this: io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 := @parameter1: boolean;
if v1 != null goto label1;
return;
label1:
v3 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v4 = virtualinvoke v3.<io.netty.channel.nio.AbstractNioChannel: boolean isActive()>();
v5 = interfaceinvoke v1.<io.netty.channel.ChannelPromise: boolean trySuccess()>();
if v2 != 0 goto label2;
if v4 == 0 goto label2;
v6 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v7 = virtualinvoke v6.<io.netty.channel.nio.AbstractNioChannel: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v7.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelActive()>();
label2:
if v5 != 0 goto label3;
v8 = virtualinvoke v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.ChannelPromise voidPromise()>();
virtualinvoke v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: void close(io.netty.channel.ChannelPromise)>(v8);
label3:
return;
}
private void fulfillConnectPromise(io.netty.channel.ChannelPromise, java.lang.Throwable)
{
java.lang.Throwable v2;
io.netty.channel.ChannelPromise v1;
io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe v0;
v0 := @this: io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 := @parameter1: java.lang.Throwable;
if v1 != null goto label1;
return;
label1:
interfaceinvoke v1.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v2);
virtualinvoke v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: void closeIfClosed()>();
return;
}
public final void finishConnect()
{
java.net.SocketAddress v20;
io.netty.channel.ChannelPromise v10, v18;
boolean v1, v4, v7;
java.lang.Throwable v16, v21, v27;
java.lang.AssertionError v5;
io.netty.channel.nio.AbstractNioChannel v11, v13, v15, v17, v19, v2, v22, v24, v26, v28, v30, v32, v6, v8, v9;
io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe v0;
io.netty.channel.nio.NioEventLoop v3;
io.netty.util.concurrent.Future v12, v14, v23, v25, v29, v31;
v0 := @this: io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe;
v1 = <io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v3 = virtualinvoke v2.<io.netty.channel.nio.AbstractNioChannel: io.netty.channel.nio.NioEventLoop eventLoop()>();
v4 = virtualinvoke v3.<io.netty.channel.nio.NioEventLoop: boolean inEventLoop()>();
if v4 != 0 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v7 = virtualinvoke v6.<io.netty.channel.nio.AbstractNioChannel: boolean isActive()>();
v8 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
virtualinvoke v8.<io.netty.channel.nio.AbstractNioChannel: void doFinishConnect()>();
v9 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v10 = v9.<io.netty.channel.nio.AbstractNioChannel: io.netty.channel.ChannelPromise connectPromise>;
specialinvoke v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: void fulfillConnectPromise(io.netty.channel.ChannelPromise,boolean)>(v10, v7);
label2:
v11 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v12 = v11.<io.netty.channel.nio.AbstractNioChannel: io.netty.util.concurrent.Future connectTimeoutFuture>;
if v12 == null goto label3;
v13 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v14 = v13.<io.netty.channel.nio.AbstractNioChannel: io.netty.util.concurrent.Future connectTimeoutFuture>;
interfaceinvoke v14.<io.netty.util.concurrent.Future: boolean cancel(boolean)>(0);
label3:
v15 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v15.<io.netty.channel.nio.AbstractNioChannel: io.netty.channel.ChannelPromise connectPromise> = null;
goto label9;
label4:
v16 := @caughtexception;
v17 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v18 = v17.<io.netty.channel.nio.AbstractNioChannel: io.netty.channel.ChannelPromise connectPromise>;
v19 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v20 = v19.<io.netty.channel.nio.AbstractNioChannel: java.net.SocketAddress requestedRemoteAddress>;
v21 = virtualinvoke v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: java.lang.Throwable annotateConnectException(java.lang.Throwable,java.net.SocketAddress)>(v16, v20);
specialinvoke v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: void fulfillConnectPromise(io.netty.channel.ChannelPromise,java.lang.Throwable)>(v18, v21);
label5:
v22 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v23 = v22.<io.netty.channel.nio.AbstractNioChannel: io.netty.util.concurrent.Future connectTimeoutFuture>;
if v23 == null goto label6;
v24 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v25 = v24.<io.netty.channel.nio.AbstractNioChannel: io.netty.util.concurrent.Future connectTimeoutFuture>;
interfaceinvoke v25.<io.netty.util.concurrent.Future: boolean cancel(boolean)>(0);
label6:
v26 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v26.<io.netty.channel.nio.AbstractNioChannel: io.netty.channel.ChannelPromise connectPromise> = null;
goto label9;
label7:
v27 := @caughtexception;
v28 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v29 = v28.<io.netty.channel.nio.AbstractNioChannel: io.netty.util.concurrent.Future connectTimeoutFuture>;
if v29 == null goto label8;
v30 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v31 = v30.<io.netty.channel.nio.AbstractNioChannel: io.netty.util.concurrent.Future connectTimeoutFuture>;
interfaceinvoke v31.<io.netty.util.concurrent.Future: boolean cancel(boolean)>(0);
label8:
v32 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v32.<io.netty.channel.nio.AbstractNioChannel: io.netty.channel.ChannelPromise connectPromise> = null;
throw v27;
label9:
return;
catch java.lang.Throwable from label1 to label2 with label4;
catch java.lang.Throwable from label4 to label5 with label7;
}
protected final void flush0()
{
io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe v0;
boolean v1;
v0 := @this: io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe;
v1 = specialinvoke v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: boolean isFlushPending()>();
if v1 != 0 goto label1;
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void flush0()>();
label1:
return;
}
public final void forceFlush()
{
io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe v0;
v0 := @this: io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe;
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void flush0()>();
return;
}
private boolean isFlushPending()
{
io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe v0;
java.nio.channels.SelectionKey v2;
int v4, v5;
io.netty.channel.nio.AbstractNioChannel v1;
boolean v3, v6;
v0 := @this: io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe;
v1 = v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: io.netty.channel.nio.AbstractNioChannel this$0>;
v2 = virtualinvoke v1.<io.netty.channel.nio.AbstractNioChannel: java.nio.channels.SelectionKey selectionKey()>();
v3 = virtualinvoke v2.<java.nio.channels.SelectionKey: boolean isValid()>();
if v3 == 0 goto label1;
v4 = virtualinvoke v2.<java.nio.channels.SelectionKey: int interestOps()>();
v5 = v4 & 4;
if v5 == 0 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
return v6;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/channel/nio/AbstractNioChannel;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: boolean $assertionsDisabled> = v2;
return;
}
}