public abstract class io.netty.channel.oio.AbstractOioByteChannel extends io.netty.channel.oio.AbstractOioChannel
{
private static final io.netty.channel.ChannelMetadata METADATA;
private static final java.lang.String EXPECTED_TYPES;
protected void <init>(io.netty.channel.Channel)
{
io.netty.channel.Channel v1;
io.netty.channel.oio.AbstractOioByteChannel v0;
v0 := @this: io.netty.channel.oio.AbstractOioByteChannel;
v1 := @parameter0: io.netty.channel.Channel;
specialinvoke v0.<io.netty.channel.oio.AbstractOioChannel: void <init>(io.netty.channel.Channel)>(v1);
return;
}
public io.netty.channel.ChannelMetadata metadata()
{
io.netty.channel.ChannelMetadata v1;
io.netty.channel.oio.AbstractOioByteChannel v0;
v0 := @this: io.netty.channel.oio.AbstractOioByteChannel;
v1 = <io.netty.channel.oio.AbstractOioByteChannel: io.netty.channel.ChannelMetadata METADATA>;
return v1;
}
protected abstract boolean isInputShutdown();
protected abstract io.netty.channel.ChannelFuture shutdownInput();
private void closeOnRead(io.netty.channel.ChannelPipeline)
{
io.netty.channel.socket.ChannelInputShutdownReadComplete v12;
io.netty.channel.ChannelOption v5;
io.netty.channel.ChannelPipeline v1;
io.netty.channel.socket.ChannelInputShutdownEvent v8;
io.netty.channel.Channel$Unsafe v10, v9;
io.netty.channel.oio.AbstractOioByteChannel v0;
io.netty.channel.ChannelConfig v4;
io.netty.channel.ChannelPromise v11;
java.lang.Boolean v3;
java.lang.Object v6;
boolean v2, v7;
v0 := @this: io.netty.channel.oio.AbstractOioByteChannel;
v1 := @parameter0: io.netty.channel.ChannelPipeline;
v2 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: boolean isOpen()>();
if v2 == 0 goto label3;
v3 = <java.lang.Boolean: java.lang.Boolean TRUE>;
v4 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: io.netty.channel.ChannelConfig config()>();
v5 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption ALLOW_HALF_CLOSURE>;
v6 = interfaceinvoke v4.<io.netty.channel.ChannelConfig: java.lang.Object getOption(io.netty.channel.ChannelOption)>(v5);
v7 = virtualinvoke v3.<java.lang.Boolean: boolean equals(java.lang.Object)>(v6);
if v7 == 0 goto label1;
virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: io.netty.channel.ChannelFuture shutdownInput()>();
v8 = <io.netty.channel.socket.ChannelInputShutdownEvent: io.netty.channel.socket.ChannelInputShutdownEvent INSTANCE>;
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireUserEventTriggered(java.lang.Object)>(v8);
goto label2;
label1:
v9 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: io.netty.channel.Channel$Unsafe unsafe()>();
v10 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: io.netty.channel.Channel$Unsafe unsafe()>();
v11 = interfaceinvoke v10.<io.netty.channel.Channel$Unsafe: io.netty.channel.ChannelPromise voidPromise()>();
interfaceinvoke v9.<io.netty.channel.Channel$Unsafe: void close(io.netty.channel.ChannelPromise)>(v11);
label2:
v12 = <io.netty.channel.socket.ChannelInputShutdownReadComplete: io.netty.channel.socket.ChannelInputShutdownReadComplete INSTANCE>;
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireUserEventTriggered(java.lang.Object)>(v12);
label3:
return;
}
private void handleReadException(io.netty.channel.ChannelPipeline, io.netty.buffer.ByteBuf, java.lang.Throwable, boolean, io.netty.channel.RecvByteBufAllocator$Handle)
{
java.lang.Throwable v3;
io.netty.channel.ChannelPipeline v1;
io.netty.channel.RecvByteBufAllocator$Handle v5;
io.netty.channel.oio.AbstractOioByteChannel v0;
io.netty.buffer.ByteBuf v2;
boolean v4, v6, v7, v8;
v0 := @this: io.netty.channel.oio.AbstractOioByteChannel;
v1 := @parameter0: io.netty.channel.ChannelPipeline;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: java.lang.Throwable;
v4 := @parameter3: boolean;
v5 := @parameter4: io.netty.channel.RecvByteBufAllocator$Handle;
if v2 == null goto label2;
v6 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v6 == 0 goto label1;
v0.<io.netty.channel.oio.AbstractOioByteChannel: boolean readPending> = 0;
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelRead(java.lang.Object)>(v2);
goto label2;
label1:
virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean release()>();
label2:
interfaceinvoke v5.<io.netty.channel.RecvByteBufAllocator$Handle: void readComplete()>();
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelReadComplete()>();
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireExceptionCaught(java.lang.Throwable)>(v3);
if v4 != 0 goto label3;
v7 = v3 instanceof java.lang.OutOfMemoryError;
if v7 != 0 goto label3;
v8 = v3 instanceof java.io.IOException;
if v8 == 0 goto label4;
label3:
specialinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: void closeOnRead(io.netty.channel.ChannelPipeline)>(v1);
label4:
return;
}
protected void doRead()
{
io.netty.buffer.ByteBufAllocator v5;
boolean v10, v13, v15, v17, v2, v22, v23, v24, v25, v26, v28, v29, v3, v30, v32, v33, v34, v9;
io.netty.channel.ChannelPipeline v4;
java.lang.Throwable v27, v31;
io.netty.buffer.ByteBuf v8;
int v11, v12, v14, v16, v18, v19, v20, v21;
io.netty.channel.Channel$Unsafe v6;
io.netty.channel.RecvByteBufAllocator$Handle v7;
io.netty.channel.oio.AbstractOioByteChannel v0;
io.netty.channel.ChannelConfig v1;
v0 := @this: io.netty.channel.oio.AbstractOioByteChannel;
v1 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: io.netty.channel.ChannelConfig config()>();
v2 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: boolean isInputShutdown()>();
if v2 != 0 goto label01;
v3 = v0.<io.netty.channel.oio.AbstractOioByteChannel: boolean readPending>;
if v3 != 0 goto label02;
label01:
return;
label02:
v0.<io.netty.channel.oio.AbstractOioByteChannel: boolean readPending> = 0;
v4 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: io.netty.channel.ChannelPipeline pipeline()>();
v5 = interfaceinvoke v1.<io.netty.channel.ChannelConfig: io.netty.buffer.ByteBufAllocator getAllocator()>();
v6 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: io.netty.channel.Channel$Unsafe unsafe()>();
v7 = interfaceinvoke v6.<io.netty.channel.Channel$Unsafe: io.netty.channel.RecvByteBufAllocator$Handle recvBufAllocHandle()>();
interfaceinvoke v7.<io.netty.channel.RecvByteBufAllocator$Handle: void reset(io.netty.channel.ChannelConfig)>(v1);
v8 = null;
v9 = 0;
v10 = 0;
label03:
v8 = interfaceinvoke v7.<io.netty.channel.RecvByteBufAllocator$Handle: io.netty.buffer.ByteBuf allocate(io.netty.buffer.ByteBufAllocator)>(v5);
label04:
v11 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: int doReadBytes(io.netty.buffer.ByteBuf)>(v8);
interfaceinvoke v7.<io.netty.channel.RecvByteBufAllocator$Handle: void lastBytesRead(int)>(v11);
v12 = interfaceinvoke v7.<io.netty.channel.RecvByteBufAllocator$Handle: int lastBytesRead()>();
if v12 > 0 goto label07;
v13 = virtualinvoke v8.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v13 != 0 goto label11;
virtualinvoke v8.<io.netty.buffer.ByteBuf: boolean release()>();
v8 = null;
v14 = interfaceinvoke v7.<io.netty.channel.RecvByteBufAllocator$Handle: int lastBytesRead()>();
if v14 >= 0 goto label05;
v15 = 1;
goto label06;
label05:
v15 = 0;
label06:
v9 = v15;
if v15 == 0 goto label11;
v0.<io.netty.channel.oio.AbstractOioByteChannel: boolean readPending> = 0;
goto label11;
label07:
v10 = 1;
v16 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: int available()>();
if v16 <= 0 goto label11;
v17 = virtualinvoke v8.<io.netty.buffer.ByteBuf: boolean isWritable()>();
if v17 != 0 goto label10;
v18 = virtualinvoke v8.<io.netty.buffer.ByteBuf: int capacity()>();
v19 = virtualinvoke v8.<io.netty.buffer.ByteBuf: int maxCapacity()>();
if v18 != v19 goto label08;
interfaceinvoke v7.<io.netty.channel.RecvByteBufAllocator$Handle: void incMessagesRead(int)>(1);
v0.<io.netty.channel.oio.AbstractOioByteChannel: boolean readPending> = 0;
interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelRead(java.lang.Object)>(v8);
v8 = interfaceinvoke v7.<io.netty.channel.RecvByteBufAllocator$Handle: io.netty.buffer.ByteBuf allocate(io.netty.buffer.ByteBufAllocator)>(v5);
goto label10;
label08:
v20 = virtualinvoke v8.<io.netty.buffer.ByteBuf: int writerIndex()>();
v21 = v20 + v16;
if v21 <= v19 goto label09;
virtualinvoke v8.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf capacity(int)>(v19);
goto label10;
label09:
virtualinvoke v8.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf ensureWritable(int)>(v16);
label10:
v22 = interfaceinvoke v7.<io.netty.channel.RecvByteBufAllocator$Handle: boolean continueReading()>();
if v22 != 0 goto label04;
label11:
if v8 == null goto label14;
v23 = virtualinvoke v8.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v23 == 0 goto label12;
v0.<io.netty.channel.oio.AbstractOioByteChannel: boolean readPending> = 0;
interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelRead(java.lang.Object)>(v8);
goto label13;
label12:
virtualinvoke v8.<io.netty.buffer.ByteBuf: boolean release()>();
label13:
v8 = null;
label14:
if v10 == 0 goto label15;
interfaceinvoke v7.<io.netty.channel.RecvByteBufAllocator$Handle: void readComplete()>();
interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelReadComplete()>();
label15:
if v9 == 0 goto label16;
specialinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: void closeOnRead(io.netty.channel.ChannelPipeline)>(v4);
label16:
v24 = v0.<io.netty.channel.oio.AbstractOioByteChannel: boolean readPending>;
if v24 != 0 goto label17;
v25 = interfaceinvoke v1.<io.netty.channel.ChannelConfig: boolean isAutoRead()>();
if v25 != 0 goto label17;
if v10 != 0 goto label24;
v26 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: boolean isActive()>();
if v26 == 0 goto label24;
label17:
virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: io.netty.channel.Channel read()>();
goto label24;
label18:
v27 := @caughtexception;
specialinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: void handleReadException(io.netty.channel.ChannelPipeline,io.netty.buffer.ByteBuf,java.lang.Throwable,boolean,io.netty.channel.RecvByteBufAllocator$Handle)>(v4, v8, v27, v9, v7);
label19:
v28 = v0.<io.netty.channel.oio.AbstractOioByteChannel: boolean readPending>;
if v28 != 0 goto label20;
v29 = interfaceinvoke v1.<io.netty.channel.ChannelConfig: boolean isAutoRead()>();
if v29 != 0 goto label20;
if v10 != 0 goto label24;
v30 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: boolean isActive()>();
if v30 == 0 goto label24;
label20:
virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: io.netty.channel.Channel read()>();
goto label24;
label21:
v31 := @caughtexception;
v32 = v0.<io.netty.channel.oio.AbstractOioByteChannel: boolean readPending>;
if v32 != 0 goto label22;
v33 = interfaceinvoke v1.<io.netty.channel.ChannelConfig: boolean isAutoRead()>();
if v33 != 0 goto label22;
if v10 != 0 goto label23;
v34 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: boolean isActive()>();
if v34 == 0 goto label23;
label22:
virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: io.netty.channel.Channel read()>();
label23:
throw v31;
label24:
return;
catch java.lang.Throwable from label03 to label16 with label18;
catch java.lang.Throwable from label18 to label19 with label21;
}
protected void doWrite(io.netty.channel.ChannelOutboundBuffer) throws java.lang.Exception
{
java.lang.UnsupportedOperationException v11;
long v10, v8, v9;
io.netty.channel.ChannelOutboundBuffer v1;
io.netty.channel.oio.AbstractOioByteChannel v0;
int v4, v5, v6;
java.lang.Object v2;
java.lang.String v12, v13;
boolean v3, v7;
v0 := @this: io.netty.channel.oio.AbstractOioByteChannel;
v1 := @parameter0: io.netty.channel.ChannelOutboundBuffer;
label1:
v2 = virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: java.lang.Object current()>();
if v2 == null goto label6;
v3 = v2 instanceof io.netty.buffer.ByteBuf;
if v3 == 0 goto label4;
v4 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
label2:
if v4 <= 0 goto label3;
virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: void doWriteBytes(io.netty.buffer.ByteBuf)>(v2);
v5 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
v6 = v4 - v5;
virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: void progress(long)>(v6);
v4 = v5;
goto label2;
label3:
virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: boolean remove()>();
goto label1;
label4:
v7 = v2 instanceof io.netty.channel.FileRegion;
if v7 == 0 goto label5;
v8 = interfaceinvoke v2.<io.netty.channel.FileRegion: long transferred()>();
virtualinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: void doWriteFileRegion(io.netty.channel.FileRegion)>(v2);
v9 = interfaceinvoke v2.<io.netty.channel.FileRegion: long transferred()>();
v10 = v9 - v8;
virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: void progress(long)>(v10);
virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: boolean remove()>();
goto label1;
label5:
v11 = new java.lang.UnsupportedOperationException;
v12 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Object)>(v2);
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unsupported message type: \u0001");
specialinvoke v11.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v13);
virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: boolean remove(java.lang.Throwable)>(v11);
goto label1;
label6:
return;
}
protected final java.lang.Object filterOutboundMessage(java.lang.Object) throws java.lang.Exception
{
java.lang.UnsupportedOperationException v4;
io.netty.channel.oio.AbstractOioByteChannel v0;
java.lang.Object v1;
java.lang.String v5, v6, v7;
boolean v2, v3;
v0 := @this: io.netty.channel.oio.AbstractOioByteChannel;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof io.netty.buffer.ByteBuf;
if v2 != 0 goto label1;
v3 = v1 instanceof io.netty.channel.FileRegion;
if v3 == 0 goto label2;
label1:
return v1;
label2:
v4 = new java.lang.UnsupportedOperationException;
v5 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Object)>(v1);
v6 = <io.netty.channel.oio.AbstractOioByteChannel: java.lang.String EXPECTED_TYPES>;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v5, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unsupported message type: \u0001\u0001");
specialinvoke v4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v7);
throw v4;
}
protected abstract int available();
protected abstract int doReadBytes(io.netty.buffer.ByteBuf) throws java.lang.Exception;
protected abstract void doWriteBytes(io.netty.buffer.ByteBuf) throws java.lang.Exception;
protected abstract void doWriteFileRegion(io.netty.channel.FileRegion) throws java.lang.Exception;
static void <clinit>()
{
io.netty.channel.ChannelMetadata v0;
java.lang.String v1, v2, v3;
v0 = new io.netty.channel.ChannelMetadata;
specialinvoke v0.<io.netty.channel.ChannelMetadata: void <init>(boolean)>(0);
<io.netty.channel.oio.AbstractOioByteChannel: io.netty.channel.ChannelMetadata METADATA> = v0;
v1 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(class "Lio/netty/buffer/ByteBuf;");
v2 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(class "Lio/netty/channel/FileRegion;");
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(" (expected: \u0001, \u0001)");
<io.netty.channel.oio.AbstractOioByteChannel: java.lang.String EXPECTED_TYPES> = v3;
return;
}
}