public class io.netty.channel.pool.FixedChannelPool extends io.netty.channel.pool.SimpleChannelPool
{
private final io.netty.util.concurrent.EventExecutor executor;
private final long acquireTimeoutNanos;
private final java.lang.Runnable timeoutTask;
private final java.util.Queue pendingAcquireQueue;
private final int maxConnections;
private final int maxPendingAcquires;
private final java.util.concurrent.atomic.AtomicInteger acquiredChannelCount;
private int pendingAcquireCount;
private boolean closed;
static final boolean $assertionsDisabled;
public void <init>(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, int)
{
io.netty.bootstrap.Bootstrap v1;
io.netty.channel.pool.FixedChannelPool v0;
int v3;
io.netty.channel.pool.ChannelPoolHandler v2;
v0 := @this: io.netty.channel.pool.FixedChannelPool;
v1 := @parameter0: io.netty.bootstrap.Bootstrap;
v2 := @parameter1: io.netty.channel.pool.ChannelPoolHandler;
v3 := @parameter2: int;
specialinvoke v0.<io.netty.channel.pool.FixedChannelPool: void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,int,int)>(v1, v2, v3, 2147483647);
return;
}
public void <init>(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, int, int)
{
io.netty.bootstrap.Bootstrap v1;
io.netty.channel.pool.FixedChannelPool v0;
io.netty.channel.pool.ChannelHealthChecker v5;
int v3, v4;
io.netty.channel.pool.ChannelPoolHandler v2;
v0 := @this: io.netty.channel.pool.FixedChannelPool;
v1 := @parameter0: io.netty.bootstrap.Bootstrap;
v2 := @parameter1: io.netty.channel.pool.ChannelPoolHandler;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = <io.netty.channel.pool.ChannelHealthChecker: io.netty.channel.pool.ChannelHealthChecker ACTIVE>;
specialinvoke v0.<io.netty.channel.pool.FixedChannelPool: void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,io.netty.channel.pool.ChannelHealthChecker,io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction,long,int,int)>(v1, v2, v5, null, -1L, v3, v4);
return;
}
public void <init>(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, io.netty.channel.pool.ChannelHealthChecker, io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction, long, int, int)
{
io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction v4;
io.netty.channel.pool.ChannelHealthChecker v3;
long v5;
io.netty.bootstrap.Bootstrap v1;
io.netty.channel.pool.FixedChannelPool v0;
int v6, v7;
io.netty.channel.pool.ChannelPoolHandler v2;
v0 := @this: io.netty.channel.pool.FixedChannelPool;
v1 := @parameter0: io.netty.bootstrap.Bootstrap;
v2 := @parameter1: io.netty.channel.pool.ChannelPoolHandler;
v3 := @parameter2: io.netty.channel.pool.ChannelHealthChecker;
v4 := @parameter3: io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction;
v5 := @parameter4: long;
v6 := @parameter5: int;
v7 := @parameter6: int;
specialinvoke v0.<io.netty.channel.pool.FixedChannelPool: void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,io.netty.channel.pool.ChannelHealthChecker,io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction,long,int,int,boolean)>(v1, v2, v3, v4, v5, v6, v7, 1);
return;
}
public void <init>(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, io.netty.channel.pool.ChannelHealthChecker, io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction, long, int, int, boolean)
{
io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction v4;
io.netty.channel.pool.ChannelHealthChecker v3;
long v5;
io.netty.bootstrap.Bootstrap v1;
io.netty.channel.pool.FixedChannelPool v0;
int v6, v7;
io.netty.channel.pool.ChannelPoolHandler v2;
boolean v8;
v0 := @this: io.netty.channel.pool.FixedChannelPool;
v1 := @parameter0: io.netty.bootstrap.Bootstrap;
v2 := @parameter1: io.netty.channel.pool.ChannelPoolHandler;
v3 := @parameter2: io.netty.channel.pool.ChannelHealthChecker;
v4 := @parameter3: io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction;
v5 := @parameter4: long;
v6 := @parameter5: int;
v7 := @parameter6: int;
v8 := @parameter7: boolean;
specialinvoke v0.<io.netty.channel.pool.FixedChannelPool: void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,io.netty.channel.pool.ChannelHealthChecker,io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction,long,int,int,boolean,boolean)>(v1, v2, v3, v4, v5, v6, v7, v8, 1);
return;
}
public void <init>(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, io.netty.channel.pool.ChannelHealthChecker, io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction, long, int, int, boolean, boolean)
{
io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction v4;
java.lang.Error v25;
long v19, v5;
java.lang.NullPointerException v14;
io.netty.channel.pool.FixedChannelPool$2 v24;
byte v12, v13, v15;
int[] v20;
io.netty.channel.pool.FixedChannelPool v0;
java.util.concurrent.atomic.AtomicInteger v11;
io.netty.channel.pool.FixedChannelPool$1 v23;
int v21, v22, v6, v7;
io.netty.channel.pool.ChannelPoolHandler v2;
java.lang.String v17;
boolean v8, v9;
io.netty.channel.EventLoopGroup v27;
io.netty.channel.pool.ChannelHealthChecker v3;
io.netty.channel.EventLoop v28;
java.lang.IllegalArgumentException v16;
java.util.concurrent.TimeUnit v18;
io.netty.bootstrap.Bootstrap v1;
io.netty.bootstrap.BootstrapConfig v26;
java.util.ArrayDeque v10;
v0 := @this: io.netty.channel.pool.FixedChannelPool;
v1 := @parameter0: io.netty.bootstrap.Bootstrap;
v2 := @parameter1: io.netty.channel.pool.ChannelPoolHandler;
v3 := @parameter2: io.netty.channel.pool.ChannelHealthChecker;
v4 := @parameter3: io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction;
v5 := @parameter4: long;
v6 := @parameter5: int;
v7 := @parameter6: int;
v8 := @parameter7: boolean;
v9 := @parameter8: boolean;
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: void <init>(io.netty.bootstrap.Bootstrap,io.netty.channel.pool.ChannelPoolHandler,io.netty.channel.pool.ChannelHealthChecker,boolean,boolean)>(v1, v2, v3, v8, v9);
v10 = new java.util.ArrayDeque;
specialinvoke v10.<java.util.ArrayDeque: void <init>()>();
v0.<io.netty.channel.pool.FixedChannelPool: java.util.Queue pendingAcquireQueue> = v10;
v11 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v11.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.netty.channel.pool.FixedChannelPool: java.util.concurrent.atomic.AtomicInteger acquiredChannelCount> = v11;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v6, "maxConnections");
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v7, "maxPendingAcquires");
if v4 != null goto label2;
v12 = v5 cmp -1L;
if v12 != 0 goto label1;
v0.<io.netty.channel.pool.FixedChannelPool: java.lang.Runnable timeoutTask> = null;
v0.<io.netty.channel.pool.FixedChannelPool: long acquireTimeoutNanos> = -1L;
goto label7;
label1:
if v4 != null goto label2;
v13 = v5 cmp -1L;
if v13 == 0 goto label2;
v14 = new java.lang.NullPointerException;
specialinvoke v14.<java.lang.NullPointerException: void <init>(java.lang.String)>("action");
throw v14;
label2:
if v4 == null goto label3;
v15 = v5 cmp 0L;
if v15 >= 0 goto label3;
v16 = new java.lang.IllegalArgumentException;
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("acquireTimeoutMillis: \u0001 (expected: >= 0)");
specialinvoke v16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v17);
throw v16;
label3:
v18 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v19 = virtualinvoke v18.<java.util.concurrent.TimeUnit: long toNanos(long)>(v5);
v0.<io.netty.channel.pool.FixedChannelPool: long acquireTimeoutNanos> = v19;
v20 = <io.netty.channel.pool.FixedChannelPool$7: int[] $SwitchMap$io$netty$channel$pool$FixedChannelPool$AcquireTimeoutAction>;
v21 = virtualinvoke v4.<io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction: int ordinal()>();
v22 = v20[v21];
lookupswitch(v22)
{
case 1: goto label4;
case 2: goto label5;
default: goto label6;
};
label4:
v23 = new io.netty.channel.pool.FixedChannelPool$1;
specialinvoke v23.<io.netty.channel.pool.FixedChannelPool$1: void <init>(io.netty.channel.pool.FixedChannelPool)>(v0);
v0.<io.netty.channel.pool.FixedChannelPool: java.lang.Runnable timeoutTask> = v23;
goto label7;
label5:
v24 = new io.netty.channel.pool.FixedChannelPool$2;
specialinvoke v24.<io.netty.channel.pool.FixedChannelPool$2: void <init>(io.netty.channel.pool.FixedChannelPool)>(v0);
v0.<io.netty.channel.pool.FixedChannelPool: java.lang.Runnable timeoutTask> = v24;
goto label7;
label6:
v25 = new java.lang.Error;
specialinvoke v25.<java.lang.Error: void <init>()>();
throw v25;
label7:
v26 = virtualinvoke v1.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.BootstrapConfig config()>();
v27 = virtualinvoke v26.<io.netty.bootstrap.BootstrapConfig: io.netty.channel.EventLoopGroup group()>();
v28 = interfaceinvoke v27.<io.netty.channel.EventLoopGroup: io.netty.channel.EventLoop next()>();
v0.<io.netty.channel.pool.FixedChannelPool: io.netty.util.concurrent.EventExecutor executor> = v28;
v0.<io.netty.channel.pool.FixedChannelPool: int maxConnections> = v6;
v0.<io.netty.channel.pool.FixedChannelPool: int maxPendingAcquires> = v7;
return;
}
public int acquiredChannelCount()
{
int v2;
io.netty.channel.pool.FixedChannelPool v0;
java.util.concurrent.atomic.AtomicInteger v1;
v0 := @this: io.netty.channel.pool.FixedChannelPool;
v1 = v0.<io.netty.channel.pool.FixedChannelPool: java.util.concurrent.atomic.AtomicInteger acquiredChannelCount>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
return v2;
}
public io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)
{
io.netty.channel.pool.FixedChannelPool$3 v5;
io.netty.util.concurrent.EventExecutor v2, v4;
java.lang.Throwable v6;
io.netty.util.concurrent.Promise v1;
io.netty.channel.pool.FixedChannelPool v0;
boolean v3;
v0 := @this: io.netty.channel.pool.FixedChannelPool;
v1 := @parameter0: io.netty.util.concurrent.Promise;
label1:
v2 = v0.<io.netty.channel.pool.FixedChannelPool: io.netty.util.concurrent.EventExecutor executor>;
v3 = interfaceinvoke v2.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v3 == 0 goto label2;
specialinvoke v0.<io.netty.channel.pool.FixedChannelPool: void acquire0(io.netty.util.concurrent.Promise)>(v1);
goto label5;
label2:
v4 = v0.<io.netty.channel.pool.FixedChannelPool: io.netty.util.concurrent.EventExecutor executor>;
v5 = new io.netty.channel.pool.FixedChannelPool$3;
specialinvoke v5.<io.netty.channel.pool.FixedChannelPool$3: void <init>(io.netty.channel.pool.FixedChannelPool,io.netty.util.concurrent.Promise)>(v0, v1);
interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v5);
label3:
goto label5;
label4:
v6 := @caughtexception;
interfaceinvoke v1.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v6);
label5:
return v1;
catch java.lang.Throwable from label1 to label3 with label4;
}
private void acquire0(io.netty.util.concurrent.Promise)
{
java.lang.IllegalStateException v7;
io.netty.channel.pool.FixedChannelPool$AcquireTask v20;
io.netty.util.concurrent.ScheduledFuture v30;
java.lang.Runnable v25, v27;
io.netty.channel.pool.FixedChannelPool v0;
java.util.concurrent.atomic.AtomicInteger v12, v8;
boolean v11, v2, v22, v31, v4, v6;
io.netty.channel.pool.FixedChannelPool$AcquireListener v17;
java.util.Queue v21;
io.netty.util.concurrent.EventExecutor v15, v26, v3;
java.lang.Throwable v34;
long v28;
java.lang.AssertionError v14, v33, v5;
int v10, v13, v18, v19, v23, v24, v32, v9;
io.netty.util.concurrent.Promise v1, v16;
java.util.concurrent.TimeUnit v29;
v0 := @this: io.netty.channel.pool.FixedChannelPool;
v1 := @parameter0: io.netty.util.concurrent.Promise;
label01:
v2 = <io.netty.channel.pool.FixedChannelPool: boolean $assertionsDisabled>;
if v2 != 0 goto label02;
v3 = v0.<io.netty.channel.pool.FixedChannelPool: io.netty.util.concurrent.EventExecutor executor>;
v4 = interfaceinvoke v3.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v4 != 0 goto label02;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label02:
v6 = v0.<io.netty.channel.pool.FixedChannelPool: boolean closed>;
if v6 == 0 goto label04;
v7 = new java.lang.IllegalStateException;
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("FixedChannelPool was closed");
interfaceinvoke v1.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v7);
label03:
return;
label04:
v8 = v0.<io.netty.channel.pool.FixedChannelPool: java.util.concurrent.atomic.AtomicInteger acquiredChannelCount>;
v9 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicInteger: int get()>();
v10 = v0.<io.netty.channel.pool.FixedChannelPool: int maxConnections>;
if v9 >= v10 goto label06;
v11 = <io.netty.channel.pool.FixedChannelPool: boolean $assertionsDisabled>;
if v11 != 0 goto label05;
v12 = v0.<io.netty.channel.pool.FixedChannelPool: java.util.concurrent.atomic.AtomicInteger acquiredChannelCount>;
v13 = virtualinvoke v12.<java.util.concurrent.atomic.AtomicInteger: int get()>();
if v13 >= 0 goto label05;
v14 = new java.lang.AssertionError;
specialinvoke v14.<java.lang.AssertionError: void <init>()>();
throw v14;
label05:
v15 = v0.<io.netty.channel.pool.FixedChannelPool: io.netty.util.concurrent.EventExecutor executor>;
v16 = interfaceinvoke v15.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Promise newPromise()>();
v17 = new io.netty.channel.pool.FixedChannelPool$AcquireListener;
specialinvoke v17.<io.netty.channel.pool.FixedChannelPool$AcquireListener: void <init>(io.netty.channel.pool.FixedChannelPool,io.netty.util.concurrent.Promise)>(v0, v1);
virtualinvoke v17.<io.netty.channel.pool.FixedChannelPool$AcquireListener: void acquired()>();
interfaceinvoke v16.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)>(v17);
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)>(v16);
goto label11;
label06:
v18 = v0.<io.netty.channel.pool.FixedChannelPool: int pendingAcquireCount>;
v19 = v0.<io.netty.channel.pool.FixedChannelPool: int maxPendingAcquires>;
if v18 < v19 goto label07;
specialinvoke v0.<io.netty.channel.pool.FixedChannelPool: void tooManyOutstanding(io.netty.util.concurrent.Promise)>(v1);
goto label09;
label07:
v20 = new io.netty.channel.pool.FixedChannelPool$AcquireTask;
specialinvoke v20.<io.netty.channel.pool.FixedChannelPool$AcquireTask: void <init>(io.netty.channel.pool.FixedChannelPool,io.netty.util.concurrent.Promise)>(v0, v1);
v21 = v0.<io.netty.channel.pool.FixedChannelPool: java.util.Queue pendingAcquireQueue>;
v22 = interfaceinvoke v21.<java.util.Queue: boolean offer(java.lang.Object)>(v20);
if v22 == 0 goto label08;
v23 = v0.<io.netty.channel.pool.FixedChannelPool: int pendingAcquireCount>;
v24 = v23 + 1;
v0.<io.netty.channel.pool.FixedChannelPool: int pendingAcquireCount> = v24;
v25 = v0.<io.netty.channel.pool.FixedChannelPool: java.lang.Runnable timeoutTask>;
if v25 == null goto label09;
v26 = v0.<io.netty.channel.pool.FixedChannelPool: io.netty.util.concurrent.EventExecutor executor>;
v27 = v0.<io.netty.channel.pool.FixedChannelPool: java.lang.Runnable timeoutTask>;
v28 = v0.<io.netty.channel.pool.FixedChannelPool: long acquireTimeoutNanos>;
v29 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
v30 = interfaceinvoke v26.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v27, v28, v29);
v20.<io.netty.channel.pool.FixedChannelPool$AcquireTask: java.util.concurrent.ScheduledFuture timeoutFuture> = v30;
goto label09;
label08:
specialinvoke v0.<io.netty.channel.pool.FixedChannelPool: void tooManyOutstanding(io.netty.util.concurrent.Promise)>(v1);
label09:
v31 = <io.netty.channel.pool.FixedChannelPool: boolean $assertionsDisabled>;
if v31 != 0 goto label11;
v32 = v0.<io.netty.channel.pool.FixedChannelPool: int pendingAcquireCount>;
if v32 > 0 goto label11;
v33 = new java.lang.AssertionError;
specialinvoke v33.<java.lang.AssertionError: void <init>()>();
throw v33;
label10:
v34 := @caughtexception;
interfaceinvoke v1.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v34);
label11:
return;
catch java.lang.Throwable from label01 to label03 with label10;
catch java.lang.Throwable from label04 to label10 with label10;
}
private void tooManyOutstanding(io.netty.util.concurrent.Promise)
{
java.lang.IllegalStateException v2;
io.netty.util.concurrent.Promise v1;
io.netty.channel.pool.FixedChannelPool v0;
v0 := @this: io.netty.channel.pool.FixedChannelPool;
v1 := @parameter0: io.netty.util.concurrent.Promise;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Too many outstanding acquire operations");
interfaceinvoke v1.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v2);
return;
}
public io.netty.util.concurrent.Future release(io.netty.channel.Channel, io.netty.util.concurrent.Promise)
{
io.netty.channel.Channel v1;
io.netty.util.concurrent.EventExecutor v3;
io.netty.channel.pool.FixedChannelPool$4 v5;
io.netty.util.concurrent.Promise v2, v4, v6;
io.netty.channel.pool.FixedChannelPool v0;
v0 := @this: io.netty.channel.pool.FixedChannelPool;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.util.concurrent.Promise;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "promise");
v3 = v0.<io.netty.channel.pool.FixedChannelPool: io.netty.util.concurrent.EventExecutor executor>;
v4 = interfaceinvoke v3.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Promise newPromise()>();
v5 = new io.netty.channel.pool.FixedChannelPool$4;
specialinvoke v5.<io.netty.channel.pool.FixedChannelPool$4: void <init>(io.netty.channel.pool.FixedChannelPool,io.netty.channel.Channel,io.netty.util.concurrent.Promise)>(v0, v1, v2);
v6 = interfaceinvoke v4.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)>(v5);
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.util.concurrent.Future release(io.netty.channel.Channel,io.netty.util.concurrent.Promise)>(v1, v6);
return v2;
}
private void decrementAndRunTaskQueue()
{
io.netty.channel.pool.FixedChannelPool v0;
java.util.concurrent.atomic.AtomicInteger v1;
int v2;
java.lang.AssertionError v4;
boolean v3;
v0 := @this: io.netty.channel.pool.FixedChannelPool;
v1 = v0.<io.netty.channel.pool.FixedChannelPool: java.util.concurrent.atomic.AtomicInteger acquiredChannelCount>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
v3 = <io.netty.channel.pool.FixedChannelPool: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
if v2 >= 0 goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
specialinvoke v0.<io.netty.channel.pool.FixedChannelPool: void runTaskQueue()>();
return;
}
private void runTaskQueue()
{
java.util.concurrent.ScheduledFuture v6;
java.lang.AssertionError v12, v16;
io.netty.channel.pool.FixedChannelPool v0;
java.util.concurrent.atomic.AtomicInteger v1, v14;
int v11, v15, v2, v3, v7, v8;
boolean v10, v13;
io.netty.util.concurrent.Promise v9;
java.lang.Object v5;
java.util.Queue v4;
v0 := @this: io.netty.channel.pool.FixedChannelPool;
label1:
v1 = v0.<io.netty.channel.pool.FixedChannelPool: java.util.concurrent.atomic.AtomicInteger acquiredChannelCount>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
v3 = v0.<io.netty.channel.pool.FixedChannelPool: int maxConnections>;
if v2 >= v3 goto label3;
v4 = v0.<io.netty.channel.pool.FixedChannelPool: java.util.Queue pendingAcquireQueue>;
v5 = interfaceinvoke v4.<java.util.Queue: java.lang.Object poll()>();
if v5 == null goto label3;
v6 = v5.<io.netty.channel.pool.FixedChannelPool$AcquireTask: java.util.concurrent.ScheduledFuture timeoutFuture>;
if v6 == null goto label2;
interfaceinvoke v6.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);
label2:
v7 = v0.<io.netty.channel.pool.FixedChannelPool: int pendingAcquireCount>;
v8 = v7 - 1;
v0.<io.netty.channel.pool.FixedChannelPool: int pendingAcquireCount> = v8;
virtualinvoke v5.<io.netty.channel.pool.FixedChannelPool$AcquireTask: void acquired()>();
v9 = v5.<io.netty.channel.pool.FixedChannelPool$AcquireTask: io.netty.util.concurrent.Promise promise>;
specialinvoke v0.<io.netty.channel.pool.SimpleChannelPool: io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)>(v9);
goto label1;
label3:
v10 = <io.netty.channel.pool.FixedChannelPool: boolean $assertionsDisabled>;
if v10 != 0 goto label4;
v11 = v0.<io.netty.channel.pool.FixedChannelPool: int pendingAcquireCount>;
if v11 >= 0 goto label4;
v12 = new java.lang.AssertionError;
specialinvoke v12.<java.lang.AssertionError: void <init>()>();
throw v12;
label4:
v13 = <io.netty.channel.pool.FixedChannelPool: boolean $assertionsDisabled>;
if v13 != 0 goto label5;
v14 = v0.<io.netty.channel.pool.FixedChannelPool: java.util.concurrent.atomic.AtomicInteger acquiredChannelCount>;
v15 = virtualinvoke v14.<java.util.concurrent.atomic.AtomicInteger: int get()>();
if v15 >= 0 goto label5;
v16 = new java.lang.AssertionError;
specialinvoke v16.<java.lang.AssertionError: void <init>()>();
throw v16;
label5:
return;
}
public void close()
{
io.netty.channel.pool.FixedChannelPool v0;
java.lang.InterruptedException v2;
java.lang.Thread v3;
java.lang.RuntimeException v4;
io.netty.util.concurrent.Future v1;
v0 := @this: io.netty.channel.pool.FixedChannelPool;
label1:
v1 = virtualinvoke v0.<io.netty.channel.pool.FixedChannelPool: io.netty.util.concurrent.Future closeAsync()>();
interfaceinvoke v1.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future await()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v3.<java.lang.Thread: void interrupt()>();
v4 = new java.lang.RuntimeException;
specialinvoke v4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v2);
throw v4;
label4:
return;
catch java.lang.InterruptedException from label1 to label2 with label3;
}
public io.netty.util.concurrent.Future closeAsync()
{
io.netty.util.concurrent.EventExecutor v1, v4, v6;
io.netty.util.concurrent.Promise v5;
io.netty.channel.pool.FixedChannelPool$5 v7;
io.netty.channel.pool.FixedChannelPool v0;
io.netty.util.concurrent.Future v3;
boolean v2;
v0 := @this: io.netty.channel.pool.FixedChannelPool;
v1 = v0.<io.netty.channel.pool.FixedChannelPool: io.netty.util.concurrent.EventExecutor executor>;
v2 = interfaceinvoke v1.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v2 == 0 goto label1;
v3 = specialinvoke v0.<io.netty.channel.pool.FixedChannelPool: io.netty.util.concurrent.Future close0()>();
return v3;
label1:
v4 = v0.<io.netty.channel.pool.FixedChannelPool: io.netty.util.concurrent.EventExecutor executor>;
v5 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Promise newPromise()>();
v6 = v0.<io.netty.channel.pool.FixedChannelPool: io.netty.util.concurrent.EventExecutor executor>;
v7 = new io.netty.channel.pool.FixedChannelPool$5;
specialinvoke v7.<io.netty.channel.pool.FixedChannelPool$5: void <init>(io.netty.channel.pool.FixedChannelPool,io.netty.util.concurrent.Promise)>(v0, v5);
interfaceinvoke v6.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v7);
return v5;
}
private io.netty.util.concurrent.Future close0()
{
io.netty.util.concurrent.EventExecutor v2;
java.util.concurrent.ScheduledFuture v8;
java.lang.AssertionError v4;
io.netty.channel.pool.FixedChannelPool$6 v13;
io.netty.util.concurrent.GlobalEventExecutor v12, v15;
io.netty.channel.pool.FixedChannelPool v0;
java.util.concurrent.atomic.AtomicInteger v11;
boolean v1, v3, v5;
io.netty.util.concurrent.Promise v9;
java.nio.channels.ClosedChannelException v10;
java.lang.Object v7;
java.util.Queue v6;
io.netty.util.concurrent.Future v14, v16;
v0 := @this: io.netty.channel.pool.FixedChannelPool;
v1 = <io.netty.channel.pool.FixedChannelPool: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.channel.pool.FixedChannelPool: io.netty.util.concurrent.EventExecutor executor>;
v3 = interfaceinvoke v2.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v3 != 0 goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
v5 = v0.<io.netty.channel.pool.FixedChannelPool: boolean closed>;
if v5 != 0 goto label5;
v0.<io.netty.channel.pool.FixedChannelPool: boolean closed> = 1;
label2:
v6 = v0.<io.netty.channel.pool.FixedChannelPool: java.util.Queue pendingAcquireQueue>;
v7 = interfaceinvoke v6.<java.util.Queue: java.lang.Object poll()>();
if v7 == null goto label4;
v8 = v7.<io.netty.channel.pool.FixedChannelPool$AcquireTask: java.util.concurrent.ScheduledFuture timeoutFuture>;
if v8 == null goto label3;
interfaceinvoke v8.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);
label3:
v9 = v7.<io.netty.channel.pool.FixedChannelPool$AcquireTask: io.netty.util.concurrent.Promise promise>;
v10 = new java.nio.channels.ClosedChannelException;
specialinvoke v10.<java.nio.channels.ClosedChannelException: void <init>()>();
interfaceinvoke v9.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v10);
goto label2;
label4:
v11 = v0.<io.netty.channel.pool.FixedChannelPool: java.util.concurrent.atomic.AtomicInteger acquiredChannelCount>;
virtualinvoke v11.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(0);
v0.<io.netty.channel.pool.FixedChannelPool: int pendingAcquireCount> = 0;
v12 = <io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.GlobalEventExecutor INSTANCE>;
v13 = new io.netty.channel.pool.FixedChannelPool$6;
specialinvoke v13.<io.netty.channel.pool.FixedChannelPool$6: void <init>(io.netty.channel.pool.FixedChannelPool)>(v0);
v14 = virtualinvoke v12.<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.Future submit(java.util.concurrent.Callable)>(v13);
return v14;
label5:
v15 = <io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.GlobalEventExecutor INSTANCE>;
v16 = virtualinvoke v15.<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.Future newSucceededFuture(java.lang.Object)>(null);
return v16;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/channel/pool/FixedChannelPool;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.channel.pool.FixedChannelPool: boolean $assertionsDisabled> = v2;
return;
}
}