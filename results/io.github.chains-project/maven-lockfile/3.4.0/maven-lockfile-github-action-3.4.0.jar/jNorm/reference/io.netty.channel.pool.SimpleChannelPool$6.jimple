class io.netty.channel.pool.SimpleChannelPool$6 extends java.lang.Object implements io.netty.util.concurrent.FutureListener
{
final io.netty.channel.Channel val$channel;
final io.netty.util.concurrent.Promise val$promise;
final io.netty.util.concurrent.Future val$f;
final io.netty.channel.pool.SimpleChannelPool this$0;
void <init>(io.netty.channel.pool.SimpleChannelPool, io.netty.channel.Channel, io.netty.util.concurrent.Promise, io.netty.util.concurrent.Future)
{
io.netty.channel.Channel v2;
io.netty.channel.pool.SimpleChannelPool v1;
io.netty.util.concurrent.Promise v3;
io.netty.channel.pool.SimpleChannelPool$6 v0;
io.netty.util.concurrent.Future v4;
v0 := @this: io.netty.channel.pool.SimpleChannelPool$6;
v1 := @parameter0: io.netty.channel.pool.SimpleChannelPool;
v2 := @parameter1: io.netty.channel.Channel;
v3 := @parameter2: io.netty.util.concurrent.Promise;
v4 := @parameter3: io.netty.util.concurrent.Future;
v0.<io.netty.channel.pool.SimpleChannelPool$6: io.netty.channel.pool.SimpleChannelPool this$0> = v1;
v0.<io.netty.channel.pool.SimpleChannelPool$6: io.netty.channel.Channel val$channel> = v2;
v0.<io.netty.channel.pool.SimpleChannelPool$6: io.netty.util.concurrent.Promise val$promise> = v3;
v0.<io.netty.channel.pool.SimpleChannelPool$6: io.netty.util.concurrent.Future val$f> = v4;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void operationComplete(io.netty.util.concurrent.Future) throws java.lang.Exception
{
io.netty.channel.Channel v3;
io.netty.channel.pool.SimpleChannelPool v2;
io.netty.util.concurrent.Promise v4;
io.netty.channel.pool.SimpleChannelPool$6 v0;
io.netty.util.concurrent.Future v1, v5;
v0 := @this: io.netty.channel.pool.SimpleChannelPool$6;
v1 := @parameter0: io.netty.util.concurrent.Future;
v2 = v0.<io.netty.channel.pool.SimpleChannelPool$6: io.netty.channel.pool.SimpleChannelPool this$0>;
v3 = v0.<io.netty.channel.pool.SimpleChannelPool$6: io.netty.channel.Channel val$channel>;
v4 = v0.<io.netty.channel.pool.SimpleChannelPool$6: io.netty.util.concurrent.Promise val$promise>;
v5 = v0.<io.netty.channel.pool.SimpleChannelPool$6: io.netty.util.concurrent.Future val$f>;
specialinvoke v2.<io.netty.channel.pool.SimpleChannelPool: void releaseAndOfferIfHealthy(io.netty.channel.Channel,io.netty.util.concurrent.Promise,io.netty.util.concurrent.Future)>(v3, v4, v5);
return;
}
}