public abstract class io.netty.channel.unix.SocketWritableByteChannel extends java.lang.Object implements java.nio.channels.WritableByteChannel
{
protected final io.netty.channel.unix.FileDescriptor fd;
protected void <init>(io.netty.channel.unix.FileDescriptor)
{
java.lang.Object v2;
io.netty.channel.unix.FileDescriptor v1;
io.netty.channel.unix.SocketWritableByteChannel v0;
v0 := @this: io.netty.channel.unix.SocketWritableByteChannel;
v1 := @parameter0: io.netty.channel.unix.FileDescriptor;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "fd");
v0.<io.netty.channel.unix.SocketWritableByteChannel: io.netty.channel.unix.FileDescriptor fd> = v2;
return;
}
protected int write(java.nio.ByteBuffer, int, int) throws java.io.IOException
{
io.netty.channel.unix.SocketWritableByteChannel v0;
int v2, v3, v5;
io.netty.channel.unix.FileDescriptor v4;
java.nio.ByteBuffer v1;
v0 := @this: io.netty.channel.unix.SocketWritableByteChannel;
v1 := @parameter0: java.nio.ByteBuffer;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<io.netty.channel.unix.SocketWritableByteChannel: io.netty.channel.unix.FileDescriptor fd>;
v5 = virtualinvoke v4.<io.netty.channel.unix.FileDescriptor: int write(java.nio.ByteBuffer,int,int)>(v1, v2, v3);
return v5;
}
public final int write(java.nio.ByteBuffer) throws java.io.IOException
{
java.lang.Throwable v16;
io.netty.buffer.ByteBufAllocator v9;
java.nio.ByteBuffer v1, v11, v13;
io.netty.buffer.ByteBuf v8;
io.netty.channel.unix.SocketWritableByteChannel v0;
int v12, v14, v15, v17, v2, v3, v5, v6, v7;
boolean v10, v4;
v0 := @this: io.netty.channel.unix.SocketWritableByteChannel;
v1 := @parameter0: java.nio.ByteBuffer;
v2 = virtualinvoke v1.<java.nio.ByteBuffer: int position()>();
v3 = virtualinvoke v1.<java.nio.ByteBuffer: int limit()>();
v4 = virtualinvoke v1.<java.nio.ByteBuffer: boolean isDirect()>();
if v4 == 0 goto label01;
v5 = virtualinvoke v1.<java.nio.ByteBuffer: int limit()>();
v6 = virtualinvoke v0.<io.netty.channel.unix.SocketWritableByteChannel: int write(java.nio.ByteBuffer,int,int)>(v1, v2, v5);
goto label09;
label01:
v7 = v3 - v2;
v8 = null;
label02:
if v7 != 0 goto label03;
v8 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
goto label05;
label03:
v9 = virtualinvoke v0.<io.netty.channel.unix.SocketWritableByteChannel: io.netty.buffer.ByteBufAllocator alloc()>();
v10 = interfaceinvoke v9.<io.netty.buffer.ByteBufAllocator: boolean isDirectBufferPooled()>();
if v10 == 0 goto label04;
v8 = interfaceinvoke v9.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf directBuffer(int)>(v7);
goto label05;
label04:
v8 = staticinvoke <io.netty.buffer.ByteBufUtil: io.netty.buffer.ByteBuf threadLocalDirectBuffer()>();
if v8 != null goto label05;
v8 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf directBuffer(int)>(v7);
label05:
v11 = virtualinvoke v1.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();
virtualinvoke v8.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)>(v11);
v12 = virtualinvoke v8.<io.netty.buffer.ByteBuf: int readerIndex()>();
v13 = virtualinvoke v8.<io.netty.buffer.ByteBuf: java.nio.ByteBuffer internalNioBuffer(int,int)>(v12, v7);
v14 = virtualinvoke v13.<java.nio.ByteBuffer: int position()>();
v15 = virtualinvoke v13.<java.nio.ByteBuffer: int limit()>();
v6 = virtualinvoke v0.<io.netty.channel.unix.SocketWritableByteChannel: int write(java.nio.ByteBuffer,int,int)>(v13, v14, v15);
label06:
virtualinvoke v8.<io.netty.buffer.ByteBuf: boolean release()>();
goto label09;
label07:
v16 := @caughtexception;
if v8 == null goto label08;
virtualinvoke v8.<io.netty.buffer.ByteBuf: boolean release()>();
label08:
throw v16;
label09:
if v6 <= 0 goto label10;
v17 = v2 + v6;
virtualinvoke v1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(v17);
label10:
return v6;
catch java.lang.Throwable from label02 to label06 with label07;
}
public final boolean isOpen()
{
io.netty.channel.unix.FileDescriptor v1;
io.netty.channel.unix.SocketWritableByteChannel v0;
boolean v2;
v0 := @this: io.netty.channel.unix.SocketWritableByteChannel;
v1 = v0.<io.netty.channel.unix.SocketWritableByteChannel: io.netty.channel.unix.FileDescriptor fd>;
v2 = virtualinvoke v1.<io.netty.channel.unix.FileDescriptor: boolean isOpen()>();
return v2;
}
public final void close() throws java.io.IOException
{
io.netty.channel.unix.FileDescriptor v1;
io.netty.channel.unix.SocketWritableByteChannel v0;
v0 := @this: io.netty.channel.unix.SocketWritableByteChannel;
v1 = v0.<io.netty.channel.unix.SocketWritableByteChannel: io.netty.channel.unix.FileDescriptor fd>;
virtualinvoke v1.<io.netty.channel.unix.FileDescriptor: void close()>();
return;
}
protected abstract io.netty.buffer.ByteBufAllocator alloc();
}