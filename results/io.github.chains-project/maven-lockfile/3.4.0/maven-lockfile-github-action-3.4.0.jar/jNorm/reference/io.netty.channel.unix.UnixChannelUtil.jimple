public final class io.netty.channel.unix.UnixChannelUtil extends java.lang.Object
{
private void <init>()
{
io.netty.channel.unix.UnixChannelUtil v0;
v0 := @this: io.netty.channel.unix.UnixChannelUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static boolean isBufferCopyNeededForWrite(io.netty.buffer.ByteBuf)
{
int v1;
io.netty.buffer.ByteBuf v0;
boolean v2;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 = <io.netty.channel.unix.Limits: int IOV_MAX>;
v2 = staticinvoke <io.netty.channel.unix.UnixChannelUtil: boolean isBufferCopyNeededForWrite(io.netty.buffer.ByteBuf,int)>(v0, v1);
return v2;
}
static boolean isBufferCopyNeededForWrite(io.netty.buffer.ByteBuf, int)
{
io.netty.buffer.ByteBuf v0;
int v1, v4;
boolean v2, v3, v5;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 = virtualinvoke v0.<io.netty.buffer.ByteBuf: boolean hasMemoryAddress()>();
if v2 != 0 goto label2;
v3 = virtualinvoke v0.<io.netty.buffer.ByteBuf: boolean isDirect()>();
if v3 == 0 goto label1;
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int nioBufferCount()>();
if v4 <= v1 goto label2;
label1:
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
return v5;
}
public static java.net.InetSocketAddress computeRemoteAddr(java.net.InetSocketAddress, java.net.InetSocketAddress)
{
byte[] v6;
java.net.InetSocketAddress v0, v1, v3;
java.net.UnknownHostException v9;
java.net.InetAddress v5, v7;
int v2, v8;
java.lang.String v4;
v0 := @parameter0: java.net.InetSocketAddress;
v1 := @parameter1: java.net.InetSocketAddress;
if v1 == null goto label5;
v2 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v2 < 7 goto label4;
label1:
v3 = new java.net.InetSocketAddress;
v4 = virtualinvoke v0.<java.net.InetSocketAddress: java.lang.String getHostString()>();
v5 = virtualinvoke v1.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
v6 = virtualinvoke v5.<java.net.InetAddress: byte[] getAddress()>();
v7 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])>(v4, v6);
v8 = virtualinvoke v1.<java.net.InetSocketAddress: int getPort()>();
specialinvoke v3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(v7, v8);
label2:
return v3;
label3:
v9 := @caughtexception;
label4:
return v1;
label5:
return v0;
catch java.net.UnknownHostException from label1 to label2 with label3;
}
}