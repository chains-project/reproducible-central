public final class io.netty.handler.codec.AsciiHeadersEncoder extends java.lang.Object
{
private final io.netty.buffer.ByteBuf buf;
private final io.netty.handler.codec.AsciiHeadersEncoder$SeparatorType separatorType;
private final io.netty.handler.codec.AsciiHeadersEncoder$NewlineType newlineType;
public void <init>(io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v1;
io.netty.handler.codec.AsciiHeadersEncoder$SeparatorType v2;
io.netty.handler.codec.AsciiHeadersEncoder$NewlineType v3;
io.netty.handler.codec.AsciiHeadersEncoder v0;
v0 := @this: io.netty.handler.codec.AsciiHeadersEncoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = <io.netty.handler.codec.AsciiHeadersEncoder$SeparatorType: io.netty.handler.codec.AsciiHeadersEncoder$SeparatorType COLON_SPACE>;
v3 = <io.netty.handler.codec.AsciiHeadersEncoder$NewlineType: io.netty.handler.codec.AsciiHeadersEncoder$NewlineType CRLF>;
specialinvoke v0.<io.netty.handler.codec.AsciiHeadersEncoder: void <init>(io.netty.buffer.ByteBuf,io.netty.handler.codec.AsciiHeadersEncoder$SeparatorType,io.netty.handler.codec.AsciiHeadersEncoder$NewlineType)>(v1, v2, v3);
return;
}
public void <init>(io.netty.buffer.ByteBuf, io.netty.handler.codec.AsciiHeadersEncoder$SeparatorType, io.netty.handler.codec.AsciiHeadersEncoder$NewlineType)
{
io.netty.buffer.ByteBuf v1;
io.netty.handler.codec.AsciiHeadersEncoder$SeparatorType v2;
io.netty.handler.codec.AsciiHeadersEncoder$NewlineType v3;
io.netty.handler.codec.AsciiHeadersEncoder v0;
java.lang.Object v4, v5, v6;
v0 := @this: io.netty.handler.codec.AsciiHeadersEncoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: io.netty.handler.codec.AsciiHeadersEncoder$SeparatorType;
v3 := @parameter2: io.netty.handler.codec.AsciiHeadersEncoder$NewlineType;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "buf");
v0.<io.netty.handler.codec.AsciiHeadersEncoder: io.netty.buffer.ByteBuf buf> = v4;
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "separatorType");
v0.<io.netty.handler.codec.AsciiHeadersEncoder: io.netty.handler.codec.AsciiHeadersEncoder$SeparatorType separatorType> = v5;
v6 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v3, "newlineType");
v0.<io.netty.handler.codec.AsciiHeadersEncoder: io.netty.handler.codec.AsciiHeadersEncoder$NewlineType newlineType> = v6;
return;
}
public void encode(java.util.Map$Entry)
{
java.lang.Error v17, v25;
io.netty.buffer.ByteBuf v4;
int[] v11, v19;
int v10, v13, v14, v15, v16, v18, v21, v22, v23, v24, v5, v6, v7, v8, v9;
io.netty.handler.codec.AsciiHeadersEncoder$NewlineType v20;
io.netty.handler.codec.AsciiHeadersEncoder v0;
java.util.Map$Entry v1;
io.netty.handler.codec.AsciiHeadersEncoder$SeparatorType v12;
java.lang.Object v2, v3;
v0 := @this: io.netty.handler.codec.AsciiHeadersEncoder;
v1 := @parameter0: java.util.Map$Entry;
v2 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getKey()>();
v3 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getValue()>();
v4 = v0.<io.netty.handler.codec.AsciiHeadersEncoder: io.netty.buffer.ByteBuf buf>;
v5 = interfaceinvoke v2.<java.lang.CharSequence: int length()>();
v6 = interfaceinvoke v3.<java.lang.CharSequence: int length()>();
v7 = v5 + v6;
v8 = v7 + 4;
v9 = virtualinvoke v4.<io.netty.buffer.ByteBuf: int writerIndex()>();
virtualinvoke v4.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf ensureWritable(int)>(v8);
staticinvoke <io.netty.handler.codec.AsciiHeadersEncoder: void writeAscii(io.netty.buffer.ByteBuf,int,java.lang.CharSequence)>(v4, v9, v2);
v10 = v9 + v5;
v11 = <io.netty.handler.codec.AsciiHeadersEncoder$1: int[] $SwitchMap$io$netty$handler$codec$AsciiHeadersEncoder$SeparatorType>;
v12 = v0.<io.netty.handler.codec.AsciiHeadersEncoder: io.netty.handler.codec.AsciiHeadersEncoder$SeparatorType separatorType>;
v13 = virtualinvoke v12.<io.netty.handler.codec.AsciiHeadersEncoder$SeparatorType: int ordinal()>();
v14 = v11[v13];
lookupswitch(v14)
{
case 1: goto label1;
case 2: goto label2;
default: goto label3;
};
label1:
v15 = v10 + 1;
virtualinvoke v4.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setByte(int,int)>(v10, 58);
goto label4;
label2:
v16 = v10 + 1;
virtualinvoke v4.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setByte(int,int)>(v10, 58);
v15 = v16 + 1;
virtualinvoke v4.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setByte(int,int)>(v16, 32);
goto label4;
label3:
v17 = new java.lang.Error;
specialinvoke v17.<java.lang.Error: void <init>()>();
throw v17;
label4:
staticinvoke <io.netty.handler.codec.AsciiHeadersEncoder: void writeAscii(io.netty.buffer.ByteBuf,int,java.lang.CharSequence)>(v4, v15, v3);
v18 = v15 + v6;
v19 = <io.netty.handler.codec.AsciiHeadersEncoder$1: int[] $SwitchMap$io$netty$handler$codec$AsciiHeadersEncoder$NewlineType>;
v20 = v0.<io.netty.handler.codec.AsciiHeadersEncoder: io.netty.handler.codec.AsciiHeadersEncoder$NewlineType newlineType>;
v21 = virtualinvoke v20.<io.netty.handler.codec.AsciiHeadersEncoder$NewlineType: int ordinal()>();
v22 = v19[v21];
lookupswitch(v22)
{
case 1: goto label5;
case 2: goto label6;
default: goto label7;
};
label5:
v23 = v18 + 1;
virtualinvoke v4.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setByte(int,int)>(v18, 10);
goto label8;
label6:
v24 = v18 + 1;
virtualinvoke v4.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setByte(int,int)>(v18, 13);
v23 = v24 + 1;
virtualinvoke v4.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setByte(int,int)>(v24, 10);
goto label8;
label7:
v25 = new java.lang.Error;
specialinvoke v25.<java.lang.Error: void <init>()>();
throw v25;
label8:
virtualinvoke v4.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writerIndex(int)>(v23);
return;
}
private static void writeAscii(io.netty.buffer.ByteBuf, int, java.lang.CharSequence)
{
io.netty.buffer.ByteBuf v0;
java.lang.CharSequence v2;
java.nio.charset.Charset v5;
int v1, v4;
boolean v3;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.CharSequence;
v3 = v2 instanceof io.netty.util.AsciiString;
if v3 == 0 goto label1;
v4 = interfaceinvoke v2.<java.lang.CharSequence: int length()>();
staticinvoke <io.netty.buffer.ByteBufUtil: void copy(io.netty.util.AsciiString,int,io.netty.buffer.ByteBuf,int,int)>(v2, 0, v0, v1, v4);
goto label2;
label1:
v5 = <io.netty.util.CharsetUtil: java.nio.charset.Charset US_ASCII>;
virtualinvoke v0.<io.netty.buffer.ByteBuf: int setCharSequence(int,java.lang.CharSequence,java.nio.charset.Charset)>(v1, v2, v5);
label2:
return;
}
}