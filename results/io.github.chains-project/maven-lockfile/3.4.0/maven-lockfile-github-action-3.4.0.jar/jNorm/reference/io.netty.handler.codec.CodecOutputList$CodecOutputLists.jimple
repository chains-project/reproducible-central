final class io.netty.handler.codec.CodecOutputList$CodecOutputLists extends java.lang.Object implements io.netty.handler.codec.CodecOutputList$CodecOutputListRecycler
{
private final io.netty.handler.codec.CodecOutputList[] elements;
private final int mask;
private int currentIdx;
private int count;
static final boolean $assertionsDisabled;
void <init>(int)
{
io.netty.handler.codec.CodecOutputList[] v11, v13, v3, v5, v7, v9;
int v1, v10, v12, v14, v15, v2, v4, v6;
io.netty.handler.codec.CodecOutputList v8;
io.netty.handler.codec.CodecOutputList$CodecOutputLists v0;
v0 := @this: io.netty.handler.codec.CodecOutputList$CodecOutputLists;
v1 := @parameter0: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.MathUtil: int safeFindNextPositivePowerOfTwo(int)>(v1);
v3 = newarray (io.netty.handler.codec.CodecOutputList)[v2];
v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: io.netty.handler.codec.CodecOutputList[] elements> = v3;
v4 = 0;
label1:
v5 = v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: io.netty.handler.codec.CodecOutputList[] elements>;
v6 = lengthof v5;
if v4 >= v6 goto label2;
v7 = v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: io.netty.handler.codec.CodecOutputList[] elements>;
v8 = new io.netty.handler.codec.CodecOutputList;
specialinvoke v8.<io.netty.handler.codec.CodecOutputList: void <init>(io.netty.handler.codec.CodecOutputList$CodecOutputListRecycler,int)>(v0, 16);
v7[v4] = v8;
v4 = v4 + 1;
goto label1;
label2:
v9 = v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: io.netty.handler.codec.CodecOutputList[] elements>;
v10 = lengthof v9;
v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: int count> = v10;
v11 = v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: io.netty.handler.codec.CodecOutputList[] elements>;
v12 = lengthof v11;
v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: int currentIdx> = v12;
v13 = v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: io.netty.handler.codec.CodecOutputList[] elements>;
v14 = lengthof v13;
v15 = v14 - 1;
v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: int mask> = v15;
return;
}
public io.netty.handler.codec.CodecOutputList getOrCreate()
{
io.netty.handler.codec.CodecOutputList$CodecOutputLists v0;
io.netty.handler.codec.CodecOutputList[] v10;
io.netty.handler.codec.CodecOutputList$CodecOutputListRecycler v3;
int v1, v4, v5, v6, v7, v8, v9;
io.netty.handler.codec.CodecOutputList v11, v2;
v0 := @this: io.netty.handler.codec.CodecOutputList$CodecOutputLists;
v1 = v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: int count>;
if v1 != 0 goto label1;
v2 = new io.netty.handler.codec.CodecOutputList;
v3 = <io.netty.handler.codec.CodecOutputList: io.netty.handler.codec.CodecOutputList$CodecOutputListRecycler NOOP_RECYCLER>;
specialinvoke v2.<io.netty.handler.codec.CodecOutputList: void <init>(io.netty.handler.codec.CodecOutputList$CodecOutputListRecycler,int)>(v3, 4);
return v2;
label1:
v4 = v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: int count>;
v5 = v4 - 1;
v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: int count> = v5;
v6 = v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: int currentIdx>;
v7 = v6 - 1;
v8 = v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: int mask>;
v9 = v7 & v8;
v10 = v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: io.netty.handler.codec.CodecOutputList[] elements>;
v11 = v10[v9];
v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: int currentIdx> = v9;
return v11;
}
public void recycle(io.netty.handler.codec.CodecOutputList)
{
io.netty.handler.codec.CodecOutputList$CodecOutputLists v0;
java.lang.AssertionError v13;
io.netty.handler.codec.CodecOutputList[] v11, v3;
int v10, v12, v2, v4, v5, v6, v7, v8;
io.netty.handler.codec.CodecOutputList v1;
boolean v9;
v0 := @this: io.netty.handler.codec.CodecOutputList$CodecOutputLists;
v1 := @parameter0: io.netty.handler.codec.CodecOutputList;
v2 = v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: int currentIdx>;
v3 = v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: io.netty.handler.codec.CodecOutputList[] elements>;
v3[v2] = v1;
v4 = v2 + 1;
v5 = v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: int mask>;
v6 = v4 & v5;
v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: int currentIdx> = v6;
v7 = v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: int count>;
v8 = v7 + 1;
v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: int count> = v8;
v9 = <io.netty.handler.codec.CodecOutputList$CodecOutputLists: boolean $assertionsDisabled>;
if v9 != 0 goto label1;
v10 = v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: int count>;
v11 = v0.<io.netty.handler.codec.CodecOutputList$CodecOutputLists: io.netty.handler.codec.CodecOutputList[] elements>;
v12 = lengthof v11;
if v10 <= v12 goto label1;
v13 = new java.lang.AssertionError;
specialinvoke v13.<java.lang.AssertionError: void <init>()>();
throw v13;
label1:
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/codec/CodecOutputList;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.CodecOutputList$CodecOutputLists: boolean $assertionsDisabled> = v2;
return;
}
}