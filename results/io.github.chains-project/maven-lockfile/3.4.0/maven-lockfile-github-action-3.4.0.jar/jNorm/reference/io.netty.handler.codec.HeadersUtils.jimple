public final class io.netty.handler.codec.HeadersUtils extends java.lang.Object
{
private void <init>()
{
io.netty.handler.codec.HeadersUtils v0;
v0 := @this: io.netty.handler.codec.HeadersUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.util.List getAllAsString(io.netty.handler.codec.Headers, java.lang.Object)
{
io.netty.handler.codec.Headers v0;
java.util.List v2;
java.lang.Object v1;
io.netty.handler.codec.HeadersUtils$1 v3;
v0 := @parameter0: io.netty.handler.codec.Headers;
v1 := @parameter1: java.lang.Object;
v2 = interfaceinvoke v0.<io.netty.handler.codec.Headers: java.util.List getAll(java.lang.Object)>(v1);
v3 = new io.netty.handler.codec.HeadersUtils$1;
specialinvoke v3.<io.netty.handler.codec.HeadersUtils$1: void <init>(java.util.List)>(v2);
return v3;
}
public static java.lang.String getAsString(io.netty.handler.codec.Headers, java.lang.Object)
{
io.netty.handler.codec.Headers v0;
java.lang.Object v1, v2;
java.lang.String v3;
v0 := @parameter0: io.netty.handler.codec.Headers;
v1 := @parameter1: java.lang.Object;
v2 = interfaceinvoke v0.<io.netty.handler.codec.Headers: java.lang.Object get(java.lang.Object)>(v1);
if v2 == null goto label1;
v3 = virtualinvoke v2.<java.lang.Object: java.lang.String toString()>();
goto label2;
label1:
v3 = null;
label2:
return v3;
}
public static java.util.Iterator iteratorAsString(java.lang.Iterable)
{
java.util.Iterator v2;
java.lang.Iterable v0;
io.netty.handler.codec.HeadersUtils$StringEntryIterator v1;
v0 := @parameter0: java.lang.Iterable;
v1 = new io.netty.handler.codec.HeadersUtils$StringEntryIterator;
v2 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
specialinvoke v1.<io.netty.handler.codec.HeadersUtils$StringEntryIterator: void <init>(java.util.Iterator)>(v2);
return v1;
}
public static java.lang.String toString(java.lang.Class, java.util.Iterator, int)
{
int v13, v14, v2, v5, v6, v7, v8;
java.lang.String v15, v3, v4;
boolean v9;
java.util.Iterator v1;
java.lang.Class v0;
java.lang.Object v10, v11, v12;
java.lang.StringBuilder v16, v17, v18;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.util.Iterator;
v2 := @parameter2: int;
v3 = virtualinvoke v0.<java.lang.Class: java.lang.String getSimpleName()>();
if v2 != 0 goto label1;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001[]");
return v4;
label1:
v5 = virtualinvoke v3.<java.lang.String: int length()>();
v6 = v5 + 2;
v7 = v2 * 20;
v8 = v6 + v7;
specialinvoke v16.<java.lang.StringBuilder: void <init>(int)>(v8);
label2:
v9 = interfaceinvoke v1.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label3;
v10 = interfaceinvoke v1.<java.util.Iterator: java.lang.Object next()>();
v11 = interfaceinvoke v10.<java.util.Map$Entry: java.lang.Object getKey()>();
v12 = interfaceinvoke v10.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
goto label2;
label3:
v13 = virtualinvoke v17.<java.lang.StringBuilder: int length()>();
v14 = v13 - 2;
virtualinvoke v17.<java.lang.StringBuilder: void setLength(int)>(v14);
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Object,java.lang.Object)>(v3, v11, v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001[\u0001: \u0001]");
return v15;
}
public static java.util.Set namesAsString(io.netty.handler.codec.Headers)
{
io.netty.handler.codec.Headers v0;
io.netty.handler.codec.HeadersUtils$DelegatingNameSet v1;
v0 := @parameter0: io.netty.handler.codec.Headers;
v1 = new io.netty.handler.codec.HeadersUtils$DelegatingNameSet;
specialinvoke v1.<io.netty.handler.codec.HeadersUtils$DelegatingNameSet: void <init>(io.netty.handler.codec.Headers)>(v0);
return v1;
}
}