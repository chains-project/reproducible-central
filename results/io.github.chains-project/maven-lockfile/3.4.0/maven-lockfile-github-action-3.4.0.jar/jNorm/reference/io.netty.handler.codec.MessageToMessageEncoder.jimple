public abstract class io.netty.handler.codec.MessageToMessageEncoder extends io.netty.channel.ChannelOutboundHandlerAdapter
{
private final io.netty.util.internal.TypeParameterMatcher matcher;
protected void <init>()
{
io.netty.handler.codec.MessageToMessageEncoder v0;
io.netty.util.internal.TypeParameterMatcher v1;
v0 := @this: io.netty.handler.codec.MessageToMessageEncoder;
specialinvoke v0.<io.netty.channel.ChannelOutboundHandlerAdapter: void <init>()>();
v1 = staticinvoke <io.netty.util.internal.TypeParameterMatcher: io.netty.util.internal.TypeParameterMatcher find(java.lang.Object,java.lang.Class,java.lang.String)>(v0, class "Lio/netty/handler/codec/MessageToMessageEncoder;", "I");
v0.<io.netty.handler.codec.MessageToMessageEncoder: io.netty.util.internal.TypeParameterMatcher matcher> = v1;
return;
}
protected void <init>(java.lang.Class)
{
io.netty.handler.codec.MessageToMessageEncoder v0;
io.netty.util.internal.TypeParameterMatcher v2;
java.lang.Class v1;
v0 := @this: io.netty.handler.codec.MessageToMessageEncoder;
v1 := @parameter0: java.lang.Class;
specialinvoke v0.<io.netty.channel.ChannelOutboundHandlerAdapter: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.TypeParameterMatcher: io.netty.util.internal.TypeParameterMatcher get(java.lang.Class)>(v1);
v0.<io.netty.handler.codec.MessageToMessageEncoder: io.netty.util.internal.TypeParameterMatcher matcher> = v2;
return;
}
public boolean acceptOutboundMessage(java.lang.Object) throws java.lang.Exception
{
io.netty.handler.codec.MessageToMessageEncoder v0;
io.netty.util.internal.TypeParameterMatcher v2;
java.lang.Object v1;
boolean v3;
v0 := @this: io.netty.handler.codec.MessageToMessageEncoder;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.handler.codec.MessageToMessageEncoder: io.netty.util.internal.TypeParameterMatcher matcher>;
v3 = virtualinvoke v2.<io.netty.util.internal.TypeParameterMatcher: boolean match(java.lang.Object)>(v1);
return v3;
}
public void write(io.netty.channel.ChannelHandlerContext, java.lang.Object, io.netty.channel.ChannelPromise) throws java.lang.Exception
{
java.lang.Throwable v15, v17, v6;
io.netty.handler.codec.EncoderException v16, v18, v8;
io.netty.handler.codec.MessageToMessageEncoder v0;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v14, v3;
int v11, v12;
java.lang.String v10, v9;
io.netty.handler.codec.CodecOutputList v4;
boolean v5, v7;
java.lang.Object v13, v2;
v0 := @this: io.netty.handler.codec.MessageToMessageEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = null;
label01:
v5 = virtualinvoke v0.<io.netty.handler.codec.MessageToMessageEncoder: boolean acceptOutboundMessage(java.lang.Object)>(v2);
if v5 == 0 goto label06;
v4 = staticinvoke <io.netty.handler.codec.CodecOutputList: io.netty.handler.codec.CodecOutputList newInstance()>();
label02:
virtualinvoke v0.<io.netty.handler.codec.MessageToMessageEncoder: void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)>(v1, v2, v4);
label03:
goto label05;
label04:
v6 := @caughtexception;
staticinvoke <io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>(v2);
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v6);
label05:
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v2);
v7 = virtualinvoke v4.<io.netty.handler.codec.CodecOutputList: boolean isEmpty()>();
if v7 == 0 goto label07;
v8 = new io.netty.handler.codec.EncoderException;
v9 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Object)>(v0);
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 must produce at least one message.");
specialinvoke v8.<io.netty.handler.codec.EncoderException: void <init>(java.lang.String)>(v10);
throw v8;
label06:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v2, v3);
label07:
if v4 == null goto label15;
label08:
v11 = virtualinvoke v4.<io.netty.handler.codec.CodecOutputList: int size()>();
v12 = v11 - 1;
if v12 != 0 goto label09;
v13 = virtualinvoke v4.<io.netty.handler.codec.CodecOutputList: java.lang.Object getUnsafe(int)>(0);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v13, v3);
goto label11;
label09:
if v12 <= 0 goto label11;
v14 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise voidPromise()>();
if v3 != v14 goto label10;
staticinvoke <io.netty.handler.codec.MessageToMessageEncoder: void writeVoidPromise(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.CodecOutputList)>(v1, v4);
goto label11;
label10:
staticinvoke <io.netty.handler.codec.MessageToMessageEncoder: void writePromiseCombiner(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.CodecOutputList,io.netty.channel.ChannelPromise)>(v1, v4, v3);
label11:
virtualinvoke v4.<io.netty.handler.codec.CodecOutputList: void recycle()>();
goto label15;
label12:
v15 := @caughtexception;
virtualinvoke v4.<io.netty.handler.codec.CodecOutputList: void recycle()>();
throw v15;
label13:
v16 := @caughtexception;
throw v16;
label14:
v17 := @caughtexception;
v18 = new io.netty.handler.codec.EncoderException;
specialinvoke v18.<io.netty.handler.codec.EncoderException: void <init>(java.lang.Throwable)>(v17);
throw v18;
label15:
return;
catch java.lang.Throwable from label02 to label03 with label04;
catch java.lang.Throwable from label08 to label11 with label12;
catch io.netty.handler.codec.EncoderException from label01 to label07 with label13;
catch java.lang.Throwable from label01 to label07 with label14;
}
private static void writeVoidPromise(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.CodecOutputList)
{
io.netty.channel.ChannelHandlerContext v0;
io.netty.channel.ChannelPromise v2;
int v3, v4;
java.lang.Object v5;
io.netty.handler.codec.CodecOutputList v1;
v0 := @parameter0: io.netty.channel.ChannelHandlerContext;
v1 := @parameter1: io.netty.handler.codec.CodecOutputList;
v2 = interfaceinvoke v0.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise voidPromise()>();
v3 = 0;
label1:
v4 = virtualinvoke v1.<io.netty.handler.codec.CodecOutputList: int size()>();
if v3 >= v4 goto label2;
v5 = virtualinvoke v1.<io.netty.handler.codec.CodecOutputList: java.lang.Object getUnsafe(int)>(v3);
interfaceinvoke v0.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v5, v2);
v3 = v3 + 1;
goto label1;
label2:
return;
}
private static void writePromiseCombiner(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.CodecOutputList, io.netty.channel.ChannelPromise)
{
io.netty.util.concurrent.EventExecutor v4;
io.netty.util.concurrent.PromiseCombiner v3;
io.netty.channel.ChannelFuture v8;
io.netty.channel.ChannelHandlerContext v0;
io.netty.channel.ChannelPromise v2;
int v5, v6;
java.lang.Object v7;
io.netty.handler.codec.CodecOutputList v1;
v0 := @parameter0: io.netty.channel.ChannelHandlerContext;
v1 := @parameter1: io.netty.handler.codec.CodecOutputList;
v2 := @parameter2: io.netty.channel.ChannelPromise;
v3 = new io.netty.util.concurrent.PromiseCombiner;
v4 = interfaceinvoke v0.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
specialinvoke v3.<io.netty.util.concurrent.PromiseCombiner: void <init>(io.netty.util.concurrent.EventExecutor)>(v4);
v5 = 0;
label1:
v6 = virtualinvoke v1.<io.netty.handler.codec.CodecOutputList: int size()>();
if v5 >= v6 goto label2;
v7 = virtualinvoke v1.<io.netty.handler.codec.CodecOutputList: java.lang.Object getUnsafe(int)>(v5);
v8 = interfaceinvoke v0.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object)>(v7);
virtualinvoke v3.<io.netty.util.concurrent.PromiseCombiner: void add(io.netty.util.concurrent.Future)>(v8);
v5 = v5 + 1;
goto label1;
label2:
virtualinvoke v3.<io.netty.util.concurrent.PromiseCombiner: void finish(io.netty.util.concurrent.Promise)>(v2);
return;
}
protected abstract void encode(io.netty.channel.ChannelHandlerContext, java.lang.Object, java.util.List) throws java.lang.Exception;
}