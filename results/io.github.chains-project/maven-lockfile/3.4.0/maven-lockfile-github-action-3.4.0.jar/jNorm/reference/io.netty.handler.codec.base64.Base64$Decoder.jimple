final class io.netty.handler.codec.base64.Base64$Decoder extends java.lang.Object implements io.netty.util.ByteProcessor
{
private final byte[] b4;
private int b4Posn;
private byte[] decodabet;
private int outBuffPosn;
private io.netty.buffer.ByteBuf dest;
private void <init>()
{
byte[] v1;
io.netty.handler.codec.base64.Base64$Decoder v0;
v0 := @this: io.netty.handler.codec.base64.Base64$Decoder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = newarray (byte)[4];
v0.<io.netty.handler.codec.base64.Base64$Decoder: byte[] b4> = v1;
return;
}
io.netty.buffer.ByteBuf decode(io.netty.buffer.ByteBuf, int, int, io.netty.buffer.ByteBufAllocator, io.netty.handler.codec.base64.Base64Dialect)
{
java.lang.Throwable v14;
byte[] v10;
io.netty.buffer.ByteBufAllocator v4;
io.netty.buffer.ByteBuf v1, v11, v13, v15, v7, v9;
int v12, v2, v3, v6;
io.netty.handler.codec.base64.Base64$Decoder v0;
java.nio.ByteOrder v8;
io.netty.handler.codec.base64.Base64Dialect v5;
v0 := @this: io.netty.handler.codec.base64.Base64$Decoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: io.netty.buffer.ByteBufAllocator;
v5 := @parameter4: io.netty.handler.codec.base64.Base64Dialect;
v6 = staticinvoke <io.netty.handler.codec.base64.Base64: int decodedBufferSize(int)>(v3);
v7 = interfaceinvoke v4.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf buffer(int)>(v6);
v8 = virtualinvoke v1.<io.netty.buffer.ByteBuf: java.nio.ByteOrder order()>();
v9 = virtualinvoke v7.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf order(java.nio.ByteOrder)>(v8);
v0.<io.netty.handler.codec.base64.Base64$Decoder: io.netty.buffer.ByteBuf dest> = v9;
v10 = staticinvoke <io.netty.handler.codec.base64.Base64: byte[] decodabet(io.netty.handler.codec.base64.Base64Dialect)>(v5);
v0.<io.netty.handler.codec.base64.Base64$Decoder: byte[] decodabet> = v10;
label1:
virtualinvoke v1.<io.netty.buffer.ByteBuf: int forEachByte(int,int,io.netty.util.ByteProcessor)>(v2, v3, v0);
v11 = v0.<io.netty.handler.codec.base64.Base64$Decoder: io.netty.buffer.ByteBuf dest>;
v12 = v0.<io.netty.handler.codec.base64.Base64$Decoder: int outBuffPosn>;
v13 = virtualinvoke v11.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf slice(int,int)>(0, v12);
label2:
return v13;
label3:
v14 := @caughtexception;
v15 = v0.<io.netty.handler.codec.base64.Base64$Decoder: io.netty.buffer.ByteBuf dest>;
virtualinvoke v15.<io.netty.buffer.ByteBuf: boolean release()>();
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v14);
return null;
catch java.lang.Throwable from label1 to label2 with label3;
}
public boolean process(byte) throws java.lang.Exception
{
byte[] v11, v14, v2, v6;
short v19;
byte v1, v3;
io.netty.buffer.ByteBuf v12;
int v10, v13, v15, v16, v4, v5, v7, v8, v9;
java.lang.String v20;
io.netty.handler.codec.base64.Base64$Decoder v0;
boolean v17;
java.lang.IllegalArgumentException v18;
v0 := @this: io.netty.handler.codec.base64.Base64$Decoder;
v1 := @parameter0: byte;
if v1 <= 0 goto label4;
v2 = v0.<io.netty.handler.codec.base64.Base64$Decoder: byte[] decodabet>;
v3 = v2[v1];
v4 = (int) -5;
if v3 < v4 goto label4;
v5 = (int) -1;
if v3 < v5 goto label3;
v6 = v0.<io.netty.handler.codec.base64.Base64$Decoder: byte[] b4>;
v7 = v0.<io.netty.handler.codec.base64.Base64$Decoder: int b4Posn>;
v8 = v7 + 1;
v0.<io.netty.handler.codec.base64.Base64$Decoder: int b4Posn> = v8;
v6[v7] = v1;
v9 = v0.<io.netty.handler.codec.base64.Base64$Decoder: int b4Posn>;
if v9 <= 3 goto label3;
v10 = v0.<io.netty.handler.codec.base64.Base64$Decoder: int outBuffPosn>;
v11 = v0.<io.netty.handler.codec.base64.Base64$Decoder: byte[] b4>;
v12 = v0.<io.netty.handler.codec.base64.Base64$Decoder: io.netty.buffer.ByteBuf dest>;
v13 = v0.<io.netty.handler.codec.base64.Base64$Decoder: int outBuffPosn>;
v14 = v0.<io.netty.handler.codec.base64.Base64$Decoder: byte[] decodabet>;
v15 = staticinvoke <io.netty.handler.codec.base64.Base64$Decoder: int decode4to3(byte[],io.netty.buffer.ByteBuf,int,byte[])>(v11, v12, v13, v14);
v16 = v10 + v15;
v0.<io.netty.handler.codec.base64.Base64$Decoder: int outBuffPosn> = v16;
v0.<io.netty.handler.codec.base64.Base64$Decoder: int b4Posn> = 0;
if v1 == 61 goto label1;
v17 = 1;
goto label2;
label1:
v17 = 0;
label2:
return v17;
label3:
return 1;
label4:
v18 = new java.lang.IllegalArgumentException;
v19 = v1 & 255;
v20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (short)>(v19) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("invalid Base64 input character: \u0001 (decimal)");
specialinvoke v18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v20);
throw v18;
}
private static int decode4to3(byte[], io.netty.buffer.ByteBuf, int, byte[])
{
byte[] v0, v3;
java.lang.IndexOutOfBoundsException v14, v47, v85;
byte v10, v16, v17, v20, v21, v27, v30, v34, v35, v4, v40, v42, v5, v51, v52, v54, v58, v6, v62, v65, v66, v67, v68, v7, v70, v76, v82;
java.nio.ByteOrder v18, v19, v49, v50;
short v11, v23, v31, v37, v43, v55, v59, v63, v73, v79, v8, v83;
io.netty.buffer.ByteBuf v1;
int v12, v13, v2, v22, v24, v25, v26, v28, v29, v32, v33, v36, v38, v39, v41, v44, v45, v46, v53, v56, v57, v60, v61, v64, v69, v71, v72, v74, v75, v77, v78, v80, v81, v84, v9;
java.lang.IllegalArgumentException v15, v48, v86;
v0 := @parameter0: byte[];
v1 := @parameter1: io.netty.buffer.ByteBuf;
v2 := @parameter2: int;
v3 := @parameter3: byte[];
v4 = v0[0];
v5 = v0[1];
v6 = v0[2];
if v6 != 61 goto label05;
label01:
v7 = v3[v4];
v8 = v7 & 255;
v9 = v8 << 2;
v10 = v3[v5];
v11 = v10 & 255;
v12 = v11 >>> 4;
v13 = v9 | v12;
label02:
goto label04;
label03:
v14 := @caughtexception;
v15 = new java.lang.IllegalArgumentException;
specialinvoke v15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not encoded in Base64");
throw v15;
label04:
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setByte(int,int)>(v2, v13);
return 1;
label05:
v16 = v0[3];
if v16 != 61 goto label11;
v17 = v3[v5];
label06:
v18 = virtualinvoke v1.<io.netty.buffer.ByteBuf: java.nio.ByteOrder order()>();
v19 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;
if v18 != v19 goto label07;
v20 = v3[v4];
v21 = v20 & 63;
v22 = v21 << 2;
v23 = v17 & 240;
v24 = v23 >> 4;
v25 = v22 | v24;
v26 = v25 << 8;
v27 = v17 & 15;
v28 = v27 << 4;
v29 = v26 | v28;
v30 = v3[v6];
v31 = v30 & 252;
v32 = v31 >>> 2;
v33 = v29 | v32;
goto label10;
label07:
v34 = v3[v4];
v35 = v34 & 63;
v36 = v35 << 2;
v37 = v17 & 240;
v38 = v37 >> 4;
v39 = v36 | v38;
v40 = v17 & 15;
v41 = v40 << 4;
v42 = v3[v6];
v43 = v42 & 252;
v44 = v43 >>> 2;
v45 = v41 | v44;
v46 = v45 << 8;
v33 = v39 | v46;
label08:
goto label10;
label09:
v47 := @caughtexception;
v48 = new java.lang.IllegalArgumentException;
specialinvoke v48.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not encoded in Base64");
throw v48;
label10:
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setShort(int,int)>(v2, v33);
return 2;
label11:
v49 = virtualinvoke v1.<io.netty.buffer.ByteBuf: java.nio.ByteOrder order()>();
v50 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;
if v49 != v50 goto label12;
v51 = v3[v4];
v52 = v51 & 63;
v53 = v52 << 18;
v54 = v3[v5];
v55 = v54 & 255;
v56 = v55 << 12;
v57 = v53 | v56;
v58 = v3[v6];
v59 = v58 & 255;
v60 = v59 << 6;
v61 = v57 | v60;
v62 = v3[v16];
v63 = v62 & 255;
v64 = v61 | v63;
goto label15;
label12:
v65 = v3[v5];
v66 = v3[v6];
v67 = v3[v4];
v68 = v67 & 63;
v69 = v68 << 2;
v70 = v65 & 15;
v71 = v70 << 12;
v72 = v69 | v71;
v73 = v65 & 240;
v74 = v73 >>> 4;
v75 = v72 | v74;
v76 = v66 & 3;
v77 = v76 << 22;
v78 = v75 | v77;
v79 = v66 & 252;
v80 = v79 << 6;
v81 = v78 | v80;
v82 = v3[v16];
v83 = v82 & 255;
v84 = v83 << 16;
v64 = v81 | v84;
label13:
goto label15;
label14:
v85 := @caughtexception;
v86 = new java.lang.IllegalArgumentException;
specialinvoke v86.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not encoded in Base64");
throw v86;
label15:
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setMedium(int,int)>(v2, v64);
return 3;
catch java.lang.IndexOutOfBoundsException from label01 to label02 with label03;
catch java.lang.IndexOutOfBoundsException from label06 to label08 with label09;
catch java.lang.IndexOutOfBoundsException from label11 to label13 with label14;
}
}