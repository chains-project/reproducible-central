abstract class io.netty.handler.codec.compression.ByteBufChecksum extends java.lang.Object implements java.util.zip.Checksum
{
private static final java.lang.reflect.Method ADLER32_UPDATE_METHOD;
private static final java.lang.reflect.Method CRC32_UPDATE_METHOD;
private final io.netty.util.ByteProcessor updateProcessor;
void <init>()
{
io.netty.handler.codec.compression.ByteBufChecksum$1 v1;
io.netty.handler.codec.compression.ByteBufChecksum v0;
v0 := @this: io.netty.handler.codec.compression.ByteBufChecksum;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new io.netty.handler.codec.compression.ByteBufChecksum$1;
specialinvoke v1.<io.netty.handler.codec.compression.ByteBufChecksum$1: void <init>(io.netty.handler.codec.compression.ByteBufChecksum)>(v0);
v0.<io.netty.handler.codec.compression.ByteBufChecksum: io.netty.util.ByteProcessor updateProcessor> = v1;
return;
}
private static java.lang.reflect.Method updateByteBuffer(java.util.zip.Checksum)
{
java.lang.Throwable v7;
java.lang.Object[] v5;
java.lang.Class[] v3;
java.nio.ByteBuffer v6;
java.util.zip.Checksum v0;
int v1;
java.lang.Class v2;
java.lang.reflect.Method v4;
v0 := @parameter0: java.util.zip.Checksum;
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v1 < 8 goto label4;
label1:
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = newarray (java.lang.Class)[1];
v3[0] = class "Ljava/nio/ByteBuffer;";
v4 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("update", v3);
v5 = newarray (java.lang.Object)[1];
v6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(1);
v5[0] = v6;
virtualinvoke v4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v0, v5);
label2:
return v4;
label3:
v7 := @caughtexception;
return null;
label4:
return null;
catch java.lang.Throwable from label1 to label2 with label3;
}
static io.netty.handler.codec.compression.ByteBufChecksum wrapChecksum(java.util.zip.Checksum)
{
io.netty.handler.codec.compression.ByteBufChecksum$SlowByteBufChecksum v10;
java.util.zip.Checksum v0;
io.netty.handler.codec.compression.ByteBufChecksum$ReflectiveByteBufChecksum v4, v8;
java.lang.reflect.Method v3, v5, v7, v9;
boolean v1, v2, v6;
v0 := @parameter0: java.util.zip.Checksum;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "checksum");
v1 = v0 instanceof io.netty.handler.codec.compression.ByteBufChecksum;
if v1 == 0 goto label1;
return v0;
label1:
v2 = v0 instanceof java.util.zip.Adler32;
if v2 == 0 goto label2;
v3 = <io.netty.handler.codec.compression.ByteBufChecksum: java.lang.reflect.Method ADLER32_UPDATE_METHOD>;
if v3 == null goto label2;
v4 = new io.netty.handler.codec.compression.ByteBufChecksum$ReflectiveByteBufChecksum;
v5 = <io.netty.handler.codec.compression.ByteBufChecksum: java.lang.reflect.Method ADLER32_UPDATE_METHOD>;
specialinvoke v4.<io.netty.handler.codec.compression.ByteBufChecksum$ReflectiveByteBufChecksum: void <init>(java.util.zip.Checksum,java.lang.reflect.Method)>(v0, v5);
return v4;
label2:
v6 = v0 instanceof java.util.zip.CRC32;
if v6 == 0 goto label3;
v7 = <io.netty.handler.codec.compression.ByteBufChecksum: java.lang.reflect.Method CRC32_UPDATE_METHOD>;
if v7 == null goto label3;
v8 = new io.netty.handler.codec.compression.ByteBufChecksum$ReflectiveByteBufChecksum;
v9 = <io.netty.handler.codec.compression.ByteBufChecksum: java.lang.reflect.Method CRC32_UPDATE_METHOD>;
specialinvoke v8.<io.netty.handler.codec.compression.ByteBufChecksum$ReflectiveByteBufChecksum: void <init>(java.util.zip.Checksum,java.lang.reflect.Method)>(v0, v9);
return v8;
label3:
v10 = new io.netty.handler.codec.compression.ByteBufChecksum$SlowByteBufChecksum;
specialinvoke v10.<io.netty.handler.codec.compression.ByteBufChecksum$SlowByteBufChecksum: void <init>(java.util.zip.Checksum)>(v0);
return v10;
}
public void update(io.netty.buffer.ByteBuf, int, int)
{
byte[] v5;
io.netty.util.ByteProcessor v8;
io.netty.handler.codec.compression.ByteBufChecksum v0;
io.netty.buffer.ByteBuf v1;
int v2, v3, v6, v7;
boolean v4;
v0 := @this: io.netty.handler.codec.compression.ByteBufChecksum;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: boolean hasArray()>();
if v4 == 0 goto label1;
v5 = virtualinvoke v1.<io.netty.buffer.ByteBuf: byte[] array()>();
v6 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v7 = v6 + v2;
virtualinvoke v0.<io.netty.handler.codec.compression.ByteBufChecksum: void update(byte[],int,int)>(v5, v7, v3);
goto label2;
label1:
v8 = v0.<io.netty.handler.codec.compression.ByteBufChecksum: io.netty.util.ByteProcessor updateProcessor>;
virtualinvoke v1.<io.netty.buffer.ByteBuf: int forEachByte(int,int,io.netty.util.ByteProcessor)>(v2, v3, v8);
label2:
return;
}
static void <clinit>()
{
java.util.zip.Adler32 v0;
java.util.zip.CRC32 v2;
java.lang.reflect.Method v1, v3;
v0 = new java.util.zip.Adler32;
specialinvoke v0.<java.util.zip.Adler32: void <init>()>();
v1 = staticinvoke <io.netty.handler.codec.compression.ByteBufChecksum: java.lang.reflect.Method updateByteBuffer(java.util.zip.Checksum)>(v0);
<io.netty.handler.codec.compression.ByteBufChecksum: java.lang.reflect.Method ADLER32_UPDATE_METHOD> = v1;
v2 = new java.util.zip.CRC32;
specialinvoke v2.<java.util.zip.CRC32: void <init>()>();
v3 = staticinvoke <io.netty.handler.codec.compression.ByteBufChecksum: java.lang.reflect.Method updateByteBuffer(java.util.zip.Checksum)>(v2);
<io.netty.handler.codec.compression.ByteBufChecksum: java.lang.reflect.Method CRC32_UPDATE_METHOD> = v3;
return;
}
}