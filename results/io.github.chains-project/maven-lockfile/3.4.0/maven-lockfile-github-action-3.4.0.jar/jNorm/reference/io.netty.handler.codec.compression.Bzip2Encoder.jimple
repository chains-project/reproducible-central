public class io.netty.handler.codec.compression.Bzip2Encoder extends io.netty.handler.codec.MessageToByteEncoder
{
private io.netty.handler.codec.compression.Bzip2Encoder$State currentState;
private final io.netty.handler.codec.compression.Bzip2BitWriter writer;
private final int streamBlockSize;
private int streamCRC;
private io.netty.handler.codec.compression.Bzip2BlockCompressor blockCompressor;
private volatile boolean finished;
private volatile io.netty.channel.ChannelHandlerContext ctx;
public void <init>()
{
io.netty.handler.codec.compression.Bzip2Encoder v0;
v0 := @this: io.netty.handler.codec.compression.Bzip2Encoder;
specialinvoke v0.<io.netty.handler.codec.compression.Bzip2Encoder: void <init>(int)>(9);
return;
}
public void <init>(int)
{
io.netty.handler.codec.compression.Bzip2Encoder$State v2;
int v1, v6;
io.netty.handler.codec.compression.Bzip2Encoder v0;
java.lang.String v5;
io.netty.handler.codec.compression.Bzip2BitWriter v3;
java.lang.IllegalArgumentException v4;
v0 := @this: io.netty.handler.codec.compression.Bzip2Encoder;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.handler.codec.MessageToByteEncoder: void <init>()>();
v2 = <io.netty.handler.codec.compression.Bzip2Encoder$State: io.netty.handler.codec.compression.Bzip2Encoder$State INIT>;
v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.handler.codec.compression.Bzip2Encoder$State currentState> = v2;
v3 = new io.netty.handler.codec.compression.Bzip2BitWriter;
specialinvoke v3.<io.netty.handler.codec.compression.Bzip2BitWriter: void <init>()>();
v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.handler.codec.compression.Bzip2BitWriter writer> = v3;
if v1 < 1 goto label1;
if v1 <= 9 goto label2;
label1:
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("blockSizeMultiplier: \u0001 (expected: 1-9)");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label2:
v6 = v1 * 100000;
v0.<io.netty.handler.codec.compression.Bzip2Encoder: int streamBlockSize> = v6;
return;
}
protected void encode(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf) throws java.lang.Exception
{
java.lang.IllegalStateException v28;
io.netty.handler.codec.compression.Bzip2BitWriter v14;
io.netty.handler.codec.compression.Bzip2BlockCompressor v13, v18;
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v2, v3;
int[] v5;
int v10, v11, v15, v19, v20, v21, v22, v23, v7, v8, v9;
boolean v17, v24, v25, v4;
io.netty.handler.codec.compression.Bzip2Encoder$State v12, v16, v26, v27, v6;
io.netty.handler.codec.compression.Bzip2Encoder v0;
v0 := @this: io.netty.handler.codec.compression.Bzip2Encoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: io.netty.buffer.ByteBuf;
v4 = v0.<io.netty.handler.codec.compression.Bzip2Encoder: boolean finished>;
if v4 == 0 goto label1;
virtualinvoke v3.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)>(v2);
return;
label1:
v5 = <io.netty.handler.codec.compression.Bzip2Encoder$2: int[] $SwitchMap$io$netty$handler$codec$compression$Bzip2Encoder$State>;
v6 = v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.handler.codec.compression.Bzip2Encoder$State currentState>;
v7 = virtualinvoke v6.<io.netty.handler.codec.compression.Bzip2Encoder$State: int ordinal()>();
v8 = v5[v7];
tableswitch(v8)
{
case 1: goto label2;
case 2: goto label3;
case 3: goto label4;
case 4: goto label7;
default: goto label8;
};
label2:
virtualinvoke v3.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf ensureWritable(int)>(4);
virtualinvoke v3.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeMedium(int)>(4348520);
v9 = v0.<io.netty.handler.codec.compression.Bzip2Encoder: int streamBlockSize>;
v10 = v9 / 100000;
v11 = 48 + v10;
virtualinvoke v3.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(v11);
v12 = <io.netty.handler.codec.compression.Bzip2Encoder$State: io.netty.handler.codec.compression.Bzip2Encoder$State INIT_BLOCK>;
v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.handler.codec.compression.Bzip2Encoder$State currentState> = v12;
label3:
v13 = new io.netty.handler.codec.compression.Bzip2BlockCompressor;
v14 = v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.handler.codec.compression.Bzip2BitWriter writer>;
v15 = v0.<io.netty.handler.codec.compression.Bzip2Encoder: int streamBlockSize>;
specialinvoke v13.<io.netty.handler.codec.compression.Bzip2BlockCompressor: void <init>(io.netty.handler.codec.compression.Bzip2BitWriter,int)>(v14, v15);
v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.handler.codec.compression.Bzip2BlockCompressor blockCompressor> = v13;
v16 = <io.netty.handler.codec.compression.Bzip2Encoder$State: io.netty.handler.codec.compression.Bzip2Encoder$State WRITE_DATA>;
v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.handler.codec.compression.Bzip2Encoder$State currentState> = v16;
label4:
v17 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v17 != 0 goto label5;
return;
label5:
v18 = v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.handler.codec.compression.Bzip2BlockCompressor blockCompressor>;
v19 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
v20 = virtualinvoke v18.<io.netty.handler.codec.compression.Bzip2BlockCompressor: int availableSize()>();
v21 = staticinvoke <java.lang.Math: int min(int,int)>(v19, v20);
v22 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
v23 = virtualinvoke v18.<io.netty.handler.codec.compression.Bzip2BlockCompressor: int write(io.netty.buffer.ByteBuf,int,int)>(v2, v22, v21);
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf skipBytes(int)>(v23);
v24 = virtualinvoke v18.<io.netty.handler.codec.compression.Bzip2BlockCompressor: boolean isFull()>();
if v24 != 0 goto label6;
v25 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v25 != 0 goto label1;
return;
label6:
v26 = <io.netty.handler.codec.compression.Bzip2Encoder$State: io.netty.handler.codec.compression.Bzip2Encoder$State CLOSE_BLOCK>;
v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.handler.codec.compression.Bzip2Encoder$State currentState> = v26;
label7:
specialinvoke v0.<io.netty.handler.codec.compression.Bzip2Encoder: void closeBlock(io.netty.buffer.ByteBuf)>(v3);
v27 = <io.netty.handler.codec.compression.Bzip2Encoder$State: io.netty.handler.codec.compression.Bzip2Encoder$State INIT_BLOCK>;
v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.handler.codec.compression.Bzip2Encoder$State currentState> = v27;
goto label1;
label8:
v28 = new java.lang.IllegalStateException;
specialinvoke v28.<java.lang.IllegalStateException: void <init>()>();
throw v28;
}
private void closeBlock(io.netty.buffer.ByteBuf)
{
io.netty.handler.codec.compression.Bzip2BlockCompressor v2;
io.netty.buffer.ByteBuf v1;
int v10, v4, v5, v6, v7, v8, v9;
io.netty.handler.codec.compression.Bzip2Encoder v0;
boolean v3;
v0 := @this: io.netty.handler.codec.compression.Bzip2Encoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.handler.codec.compression.Bzip2BlockCompressor blockCompressor>;
v3 = virtualinvoke v2.<io.netty.handler.codec.compression.Bzip2BlockCompressor: boolean isEmpty()>();
if v3 != 0 goto label1;
virtualinvoke v2.<io.netty.handler.codec.compression.Bzip2BlockCompressor: void close(io.netty.buffer.ByteBuf)>(v1);
v4 = virtualinvoke v2.<io.netty.handler.codec.compression.Bzip2BlockCompressor: int crc()>();
v5 = v0.<io.netty.handler.codec.compression.Bzip2Encoder: int streamCRC>;
v6 = v5 << 1;
v7 = v0.<io.netty.handler.codec.compression.Bzip2Encoder: int streamCRC>;
v8 = v7 >>> 31;
v9 = v6 | v8;
v10 = v9 ^ v4;
v0.<io.netty.handler.codec.compression.Bzip2Encoder: int streamCRC> = v10;
label1:
return;
}
public boolean isClosed()
{
io.netty.handler.codec.compression.Bzip2Encoder v0;
boolean v1;
v0 := @this: io.netty.handler.codec.compression.Bzip2Encoder;
v1 = v0.<io.netty.handler.codec.compression.Bzip2Encoder: boolean finished>;
return v1;
}
public io.netty.channel.ChannelFuture close()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v2;
io.netty.handler.codec.compression.Bzip2Encoder v0;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.handler.codec.compression.Bzip2Encoder;
v1 = specialinvoke v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.channel.ChannelHandlerContext ctx()>();
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
v3 = virtualinvoke v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)>(v2);
return v3;
}
public io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)
{
io.netty.util.concurrent.EventExecutor v3;
io.netty.channel.ChannelHandlerContext v2;
io.netty.channel.ChannelPromise v1;
io.netty.handler.codec.compression.Bzip2Encoder v0;
io.netty.handler.codec.compression.Bzip2Encoder$1 v6;
boolean v4;
io.netty.channel.ChannelFuture v5;
v0 := @this: io.netty.handler.codec.compression.Bzip2Encoder;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = specialinvoke v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.channel.ChannelHandlerContext ctx()>();
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v4 = interfaceinvoke v3.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v4 == 0 goto label1;
v5 = specialinvoke v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)>(v2, v1);
return v5;
label1:
v6 = new io.netty.handler.codec.compression.Bzip2Encoder$1;
specialinvoke v6.<io.netty.handler.codec.compression.Bzip2Encoder$1: void <init>(io.netty.handler.codec.compression.Bzip2Encoder,io.netty.channel.ChannelPromise)>(v0, v1);
interfaceinvoke v3.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v6);
return v1;
}
public void close(io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelPromise) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v2, v3;
io.netty.handler.codec.compression.Bzip2Encoder v0;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.handler.codec.compression.Bzip2Encoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
v4 = specialinvoke v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)>(v1, v3);
staticinvoke <io.netty.handler.codec.compression.EncoderUtil: void closeAfterFinishEncode(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)>(v1, v4, v2);
return;
}
private io.netty.channel.ChannelFuture finishEncode(io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v8;
io.netty.buffer.ByteBufAllocator v4;
io.netty.handler.codec.compression.Bzip2BitWriter v7;
io.netty.channel.ChannelFuture v9;
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v5;
io.netty.channel.ChannelPromise v2;
int v6;
io.netty.handler.codec.compression.Bzip2Encoder v0;
boolean v3;
v0 := @this: io.netty.handler.codec.compression.Bzip2Encoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = v0.<io.netty.handler.codec.compression.Bzip2Encoder: boolean finished>;
if v3 == 0 goto label1;
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
return v2;
label1:
v0.<io.netty.handler.codec.compression.Bzip2Encoder: boolean finished> = 1;
v4 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.buffer.ByteBufAllocator alloc()>();
v5 = interfaceinvoke v4.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf buffer()>();
specialinvoke v0.<io.netty.handler.codec.compression.Bzip2Encoder: void closeBlock(io.netty.buffer.ByteBuf)>(v5);
v6 = v0.<io.netty.handler.codec.compression.Bzip2Encoder: int streamCRC>;
v7 = v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.handler.codec.compression.Bzip2BitWriter writer>;
label2:
virtualinvoke v7.<io.netty.handler.codec.compression.Bzip2BitWriter: void writeBits(io.netty.buffer.ByteBuf,int,long)>(v5, 24, 1536581L);
virtualinvoke v7.<io.netty.handler.codec.compression.Bzip2BitWriter: void writeBits(io.netty.buffer.ByteBuf,int,long)>(v5, 24, 3690640L);
virtualinvoke v7.<io.netty.handler.codec.compression.Bzip2BitWriter: void writeInt(io.netty.buffer.ByteBuf,int)>(v5, v6);
virtualinvoke v7.<io.netty.handler.codec.compression.Bzip2BitWriter: void flush(io.netty.buffer.ByteBuf)>(v5);
label3:
v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.handler.codec.compression.Bzip2BlockCompressor blockCompressor> = null;
goto label5;
label4:
v8 := @caughtexception;
v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.handler.codec.compression.Bzip2BlockCompressor blockCompressor> = null;
throw v8;
label5:
v9 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)>(v5, v2);
return v9;
catch java.lang.Throwable from label2 to label3 with label4;
}
private io.netty.channel.ChannelHandlerContext ctx()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.compression.Bzip2Encoder v0;
java.lang.IllegalStateException v2;
v0 := @this: io.netty.handler.codec.compression.Bzip2Encoder;
v1 = v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.channel.ChannelHandlerContext ctx>;
if v1 != null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not added to a pipeline");
throw v2;
label1:
return v1;
}
public void handlerAdded(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.compression.Bzip2Encoder v0;
v0 := @this: io.netty.handler.codec.compression.Bzip2Encoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v0.<io.netty.handler.codec.compression.Bzip2Encoder: io.netty.channel.ChannelHandlerContext ctx> = v1;
return;
}
}