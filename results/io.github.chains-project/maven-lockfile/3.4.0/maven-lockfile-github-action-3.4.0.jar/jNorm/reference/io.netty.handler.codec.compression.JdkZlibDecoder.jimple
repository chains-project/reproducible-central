public class io.netty.handler.codec.compression.JdkZlibDecoder extends io.netty.handler.codec.compression.ZlibDecoder
{
private static final int FHCRC;
private static final int FEXTRA;
private static final int FNAME;
private static final int FCOMMENT;
private static final int FRESERVED;
private java.util.zip.Inflater inflater;
private final byte[] dictionary;
private final io.netty.handler.codec.compression.ByteBufChecksum crc;
private final boolean decompressConcatenated;
private io.netty.handler.codec.compression.JdkZlibDecoder$GzipState gzipState;
private int flags;
private int xlen;
private volatile boolean finished;
private boolean decideZlibOrNone;
static final boolean $assertionsDisabled;
public void <init>()
{
io.netty.handler.codec.compression.JdkZlibDecoder v0;
io.netty.handler.codec.compression.ZlibWrapper v1;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 = <io.netty.handler.codec.compression.ZlibWrapper: io.netty.handler.codec.compression.ZlibWrapper ZLIB>;
specialinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: void <init>(io.netty.handler.codec.compression.ZlibWrapper,byte[],boolean,int)>(v1, null, 0, 0);
return;
}
public void <init>(int)
{
int v1;
io.netty.handler.codec.compression.JdkZlibDecoder v0;
io.netty.handler.codec.compression.ZlibWrapper v2;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: int;
v2 = <io.netty.handler.codec.compression.ZlibWrapper: io.netty.handler.codec.compression.ZlibWrapper ZLIB>;
specialinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: void <init>(io.netty.handler.codec.compression.ZlibWrapper,byte[],boolean,int)>(v2, null, 0, v1);
return;
}
public void <init>(byte[])
{
byte[] v1;
io.netty.handler.codec.compression.JdkZlibDecoder v0;
io.netty.handler.codec.compression.ZlibWrapper v2;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: byte[];
v2 = <io.netty.handler.codec.compression.ZlibWrapper: io.netty.handler.codec.compression.ZlibWrapper ZLIB>;
specialinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: void <init>(io.netty.handler.codec.compression.ZlibWrapper,byte[],boolean,int)>(v2, v1, 0, 0);
return;
}
public void <init>(byte[], int)
{
byte[] v1;
io.netty.handler.codec.compression.JdkZlibDecoder v0;
int v2;
io.netty.handler.codec.compression.ZlibWrapper v3;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 = <io.netty.handler.codec.compression.ZlibWrapper: io.netty.handler.codec.compression.ZlibWrapper ZLIB>;
specialinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: void <init>(io.netty.handler.codec.compression.ZlibWrapper,byte[],boolean,int)>(v3, v1, 0, v2);
return;
}
public void <init>(io.netty.handler.codec.compression.ZlibWrapper)
{
io.netty.handler.codec.compression.JdkZlibDecoder v0;
io.netty.handler.codec.compression.ZlibWrapper v1;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: io.netty.handler.codec.compression.ZlibWrapper;
specialinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: void <init>(io.netty.handler.codec.compression.ZlibWrapper,byte[],boolean,int)>(v1, null, 0, 0);
return;
}
public void <init>(io.netty.handler.codec.compression.ZlibWrapper, int)
{
int v2;
io.netty.handler.codec.compression.JdkZlibDecoder v0;
io.netty.handler.codec.compression.ZlibWrapper v1;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: io.netty.handler.codec.compression.ZlibWrapper;
v2 := @parameter1: int;
specialinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: void <init>(io.netty.handler.codec.compression.ZlibWrapper,byte[],boolean,int)>(v1, null, 0, v2);
return;
}
public void <init>(io.netty.handler.codec.compression.ZlibWrapper, boolean)
{
io.netty.handler.codec.compression.JdkZlibDecoder v0;
io.netty.handler.codec.compression.ZlibWrapper v1;
boolean v2;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: io.netty.handler.codec.compression.ZlibWrapper;
v2 := @parameter1: boolean;
specialinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: void <init>(io.netty.handler.codec.compression.ZlibWrapper,byte[],boolean,int)>(v1, null, v2, 0);
return;
}
public void <init>(io.netty.handler.codec.compression.ZlibWrapper, boolean, int)
{
io.netty.handler.codec.compression.JdkZlibDecoder v0;
int v3;
io.netty.handler.codec.compression.ZlibWrapper v1;
boolean v2;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: io.netty.handler.codec.compression.ZlibWrapper;
v2 := @parameter1: boolean;
v3 := @parameter2: int;
specialinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: void <init>(io.netty.handler.codec.compression.ZlibWrapper,byte[],boolean,int)>(v1, null, v2, v3);
return;
}
public void <init>(boolean)
{
io.netty.handler.codec.compression.JdkZlibDecoder v0;
io.netty.handler.codec.compression.ZlibWrapper v2;
boolean v1;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: boolean;
v2 = <io.netty.handler.codec.compression.ZlibWrapper: io.netty.handler.codec.compression.ZlibWrapper GZIP>;
specialinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: void <init>(io.netty.handler.codec.compression.ZlibWrapper,byte[],boolean,int)>(v2, null, v1, 0);
return;
}
public void <init>(boolean, int)
{
io.netty.handler.codec.compression.JdkZlibDecoder v0;
int v2;
io.netty.handler.codec.compression.ZlibWrapper v3;
boolean v1;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: boolean;
v2 := @parameter1: int;
v3 = <io.netty.handler.codec.compression.ZlibWrapper: io.netty.handler.codec.compression.ZlibWrapper GZIP>;
specialinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: void <init>(io.netty.handler.codec.compression.ZlibWrapper,byte[],boolean,int)>(v3, null, v1, v2);
return;
}
private void <init>(io.netty.handler.codec.compression.ZlibWrapper, byte[], boolean, int)
{
io.netty.handler.codec.compression.JdkZlibDecoder$GzipState v5;
byte[] v2;
io.netty.handler.codec.compression.JdkZlibDecoder v0;
java.util.zip.Inflater v11, v14, v15;
int[] v8;
int v10, v4, v6, v7, v9;
java.lang.String v17;
boolean v3;
io.netty.handler.codec.compression.ZlibWrapper v1;
io.netty.handler.codec.compression.ByteBufChecksum v13;
java.lang.IllegalArgumentException v16;
java.util.zip.CRC32 v12;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: io.netty.handler.codec.compression.ZlibWrapper;
v2 := @parameter1: byte[];
v3 := @parameter2: boolean;
v4 := @parameter3: int;
specialinvoke v0.<io.netty.handler.codec.compression.ZlibDecoder: void <init>(int)>(v4);
v5 = <io.netty.handler.codec.compression.JdkZlibDecoder$GzipState: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState HEADER_START>;
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState gzipState> = v5;
v6 = (int) -1;
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: int flags> = v6;
v7 = (int) -1;
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: int xlen> = v7;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "wrapper");
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean decompressConcatenated> = v3;
v8 = <io.netty.handler.codec.compression.JdkZlibDecoder$1: int[] $SwitchMap$io$netty$handler$codec$compression$ZlibWrapper>;
v9 = virtualinvoke v1.<io.netty.handler.codec.compression.ZlibWrapper: int ordinal()>();
v10 = v8[v9];
tableswitch(v10)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label3;
case 4: goto label4;
default: goto label5;
};
label1:
v11 = new java.util.zip.Inflater;
specialinvoke v11.<java.util.zip.Inflater: void <init>(boolean)>(1);
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater> = v11;
v12 = new java.util.zip.CRC32;
specialinvoke v12.<java.util.zip.CRC32: void <init>()>();
v13 = staticinvoke <io.netty.handler.codec.compression.ByteBufChecksum: io.netty.handler.codec.compression.ByteBufChecksum wrapChecksum(java.util.zip.Checksum)>(v12);
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc> = v13;
goto label6;
label2:
v14 = new java.util.zip.Inflater;
specialinvoke v14.<java.util.zip.Inflater: void <init>(boolean)>(1);
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater> = v14;
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc> = null;
goto label6;
label3:
v15 = new java.util.zip.Inflater;
specialinvoke v15.<java.util.zip.Inflater: void <init>()>();
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater> = v15;
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc> = null;
goto label6;
label4:
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean decideZlibOrNone> = 1;
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc> = null;
goto label6;
label5:
v16 = new java.lang.IllegalArgumentException;
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.handler.codec.compression.ZlibWrapper)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Only GZIP or ZLIB is supported, but you used \u0001");
specialinvoke v16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v17);
throw v16;
label6:
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: byte[] dictionary> = v2;
return;
}
public boolean isClosed()
{
io.netty.handler.codec.compression.JdkZlibDecoder v0;
boolean v1;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean finished>;
return v1;
}
protected void decode(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, java.util.List) throws java.lang.Exception
{
byte[] v28, v32, v42, v54, v57;
java.lang.Throwable v71;
io.netty.handler.codec.compression.JdkZlibDecoder v0;
java.lang.AssertionError v22;
short v9;
io.netty.handler.codec.compression.ByteBufChecksum v13, v50, v51, v60;
io.netty.handler.codec.compression.JdkZlibDecoder$GzipState v14, v15, v16, v17, v20, v21, v67;
java.util.zip.Inflater v12, v24, v27, v34, v35, v40, v47, v52, v56, v58, v61, v64;
boolean v10, v11, v18, v19, v23, v25, v26, v39, v4, v41, v53, v59, v68, v7, v72;
java.util.List v3;
io.netty.handler.codec.compression.DecompressionException v55, v70;
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v2, v38;
int v29, v30, v31, v33, v36, v37, v43, v44, v45, v46, v48, v49, v5, v6, v62, v63, v65, v66, v8;
java.util.zip.DataFormatException v69;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: java.util.List;
v4 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean finished>;
if v4 == 0 goto label01;
v5 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf skipBytes(int)>(v5);
return;
label01:
v6 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v6 != 0 goto label02;
return;
label02:
v7 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean decideZlibOrNone>;
if v7 == 0 goto label06;
if v6 >= 2 goto label03;
return;
label03:
v8 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
v9 = virtualinvoke v2.<io.netty.buffer.ByteBuf: short getShort(int)>(v8);
v10 = staticinvoke <io.netty.handler.codec.compression.JdkZlibDecoder: boolean looksLikeZlib(short)>(v9);
if v10 != 0 goto label04;
v11 = 1;
goto label05;
label04:
v11 = 0;
label05:
v12 = new java.util.zip.Inflater;
specialinvoke v12.<java.util.zip.Inflater: void <init>(boolean)>(v11);
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater> = v12;
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean decideZlibOrNone> = 0;
label06:
v13 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
if v13 == null goto label10;
v14 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState gzipState>;
v15 = <io.netty.handler.codec.compression.JdkZlibDecoder$GzipState: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState HEADER_END>;
if v14 == v15 goto label10;
v16 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState gzipState>;
v17 = <io.netty.handler.codec.compression.JdkZlibDecoder$GzipState: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState FOOTER_START>;
if v16 != v17 goto label08;
v18 = specialinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean handleGzipFooter(io.netty.buffer.ByteBuf)>(v2);
if v18 != 0 goto label07;
return;
label07:
v19 = <io.netty.handler.codec.compression.JdkZlibDecoder: boolean $assertionsDisabled>;
if v19 != 0 goto label08;
v20 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState gzipState>;
v21 = <io.netty.handler.codec.compression.JdkZlibDecoder$GzipState: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState HEADER_START>;
if v20 == v21 goto label08;
v22 = new java.lang.AssertionError;
specialinvoke v22.<java.lang.AssertionError: void <init>()>();
throw v22;
label08:
v23 = specialinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean readGZIPHeader(io.netty.buffer.ByteBuf)>(v2);
if v23 != 0 goto label09;
return;
label09:
v6 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v6 != 0 goto label10;
return;
label10:
v24 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater>;
v25 = virtualinvoke v24.<java.util.zip.Inflater: boolean needsInput()>();
if v25 == 0 goto label12;
v26 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean hasArray()>();
if v26 == 0 goto label11;
v27 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater>;
v28 = virtualinvoke v2.<io.netty.buffer.ByteBuf: byte[] array()>();
v29 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v30 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
v31 = v29 + v30;
virtualinvoke v27.<java.util.zip.Inflater: void setInput(byte[],int,int)>(v28, v31, v6);
goto label12;
label11:
v32 = newarray (byte)[v6];
v33 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf getBytes(int,byte[])>(v33, v32);
v34 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater>;
virtualinvoke v34.<java.util.zip.Inflater: void setInput(byte[])>(v32);
label12:
v35 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater>;
v36 = virtualinvoke v35.<java.util.zip.Inflater: int getRemaining()>();
v37 = v36 << 1;
v38 = virtualinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.buffer.ByteBuf prepareDecompressBuffer(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int)>(v1, null, v37);
label13:
v39 = 0;
label14:
v40 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater>;
v41 = virtualinvoke v40.<java.util.zip.Inflater: boolean needsInput()>();
if v41 != 0 goto label20;
v42 = virtualinvoke v38.<io.netty.buffer.ByteBuf: byte[] array()>();
v43 = virtualinvoke v38.<io.netty.buffer.ByteBuf: int writerIndex()>();
v44 = virtualinvoke v38.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v45 = v44 + v43;
v46 = virtualinvoke v38.<io.netty.buffer.ByteBuf: int writableBytes()>();
v47 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater>;
v48 = virtualinvoke v47.<java.util.zip.Inflater: int inflate(byte[],int,int)>(v42, v45, v46);
if v48 <= 0 goto label15;
v49 = v43 + v48;
virtualinvoke v38.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writerIndex(int)>(v49);
v50 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
if v50 == null goto label17;
v51 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
virtualinvoke v51.<io.netty.handler.codec.compression.ByteBufChecksum: void update(byte[],int,int)>(v42, v45, v48);
goto label17;
label15:
v52 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater>;
v53 = virtualinvoke v52.<java.util.zip.Inflater: boolean needsDictionary()>();
if v53 == 0 goto label17;
v54 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: byte[] dictionary>;
if v54 != null goto label16;
v55 = new io.netty.handler.codec.compression.DecompressionException;
specialinvoke v55.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String)>("decompression failure, unable to set dictionary as non was specified");
throw v55;
label16:
v56 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater>;
v57 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: byte[] dictionary>;
virtualinvoke v56.<java.util.zip.Inflater: void setDictionary(byte[])>(v57);
label17:
v58 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater>;
v59 = virtualinvoke v58.<java.util.zip.Inflater: boolean finished()>();
if v59 == 0 goto label19;
v60 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
if v60 != null goto label18;
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean finished> = 1;
goto label20;
label18:
v39 = 1;
goto label20;
label19:
v61 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater>;
v62 = virtualinvoke v61.<java.util.zip.Inflater: int getRemaining()>();
v63 = v62 << 1;
v38 = virtualinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.buffer.ByteBuf prepareDecompressBuffer(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int)>(v1, v38, v63);
goto label14;
label20:
v64 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater>;
v65 = virtualinvoke v64.<java.util.zip.Inflater: int getRemaining()>();
v66 = v6 - v65;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf skipBytes(int)>(v66);
if v39 == 0 goto label21;
v67 = <io.netty.handler.codec.compression.JdkZlibDecoder$GzipState: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState FOOTER_START>;
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState gzipState> = v67;
specialinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean handleGzipFooter(io.netty.buffer.ByteBuf)>(v2);
label21:
v68 = virtualinvoke v38.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v68 == 0 goto label22;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v38);
goto label27;
label22:
virtualinvoke v38.<io.netty.buffer.ByteBuf: boolean release()>();
goto label27;
label23:
v69 := @caughtexception;
v70 = new io.netty.handler.codec.compression.DecompressionException;
specialinvoke v70.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String,java.lang.Throwable)>("decompression failure", v69);
throw v70;
label24:
v71 := @caughtexception;
v72 = virtualinvoke v38.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v72 == 0 goto label25;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v38);
goto label26;
label25:
virtualinvoke v38.<io.netty.buffer.ByteBuf: boolean release()>();
label26:
throw v71;
label27:
return;
catch java.util.zip.DataFormatException from label13 to label21 with label23;
catch java.lang.Throwable from label13 to label21 with label24;
}
private boolean handleGzipFooter(io.netty.buffer.ByteBuf)
{
io.netty.handler.codec.compression.JdkZlibDecoder$GzipState v8;
io.netty.handler.codec.compression.JdkZlibDecoder v0;
java.util.zip.Inflater v6;
io.netty.handler.codec.compression.ByteBufChecksum v7;
io.netty.buffer.ByteBuf v1;
boolean v2, v3, v4, v5;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = specialinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean readGZIPFooter(io.netty.buffer.ByteBuf)>(v1);
if v2 == 0 goto label3;
v3 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean decompressConcatenated>;
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean finished> = v4;
v5 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean finished>;
if v5 != 0 goto label3;
v6 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater>;
virtualinvoke v6.<java.util.zip.Inflater: void reset()>();
v7 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
virtualinvoke v7.<io.netty.handler.codec.compression.ByteBufChecksum: void reset()>();
v8 = <io.netty.handler.codec.compression.JdkZlibDecoder$GzipState: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState HEADER_START>;
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState gzipState> = v8;
return 1;
label3:
return 0;
}
protected void decompressionBufferExhausted(io.netty.buffer.ByteBuf)
{
io.netty.handler.codec.compression.JdkZlibDecoder v0;
io.netty.buffer.ByteBuf v1;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean finished> = 1;
return;
}
protected void handlerRemoved0(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.compression.JdkZlibDecoder v0;
java.util.zip.Inflater v2, v3;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
specialinvoke v0.<io.netty.handler.codec.compression.ZlibDecoder: void handlerRemoved0(io.netty.channel.ChannelHandlerContext)>(v1);
v2 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater>;
if v2 == null goto label1;
v3 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater>;
virtualinvoke v3.<java.util.zip.Inflater: void end()>();
label1:
return;
}
private boolean readGZIPHeader(io.netty.buffer.ByteBuf)
{
io.netty.handler.codec.compression.JdkZlibDecoder$GzipState v28, v3, v40, v49, v51, v53, v58;
java.lang.IllegalStateException v59;
byte v7, v8;
int[] v2;
boolean v50, v52, v56;
io.netty.handler.codec.compression.JdkZlibDecoder v0;
io.netty.handler.codec.compression.DecompressionException v13, v21, v9;
short v12, v16, v25, v27, v32, v33;
io.netty.buffer.ByteBuf v1;
int v18, v19, v20, v23, v29, v30, v31, v36, v37, v38, v39, v4, v41, v42, v43, v44, v46, v47, v48, v5, v54, v55, v6;
java.lang.String v14;
io.netty.handler.codec.compression.ByteBufChecksum v10, v11, v15, v17, v22, v24, v26, v34, v35, v45, v57;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = <io.netty.handler.codec.compression.JdkZlibDecoder$1: int[] $SwitchMap$io$netty$handler$codec$compression$JdkZlibDecoder$GzipState>;
v3 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState gzipState>;
v4 = virtualinvoke v3.<io.netty.handler.codec.compression.JdkZlibDecoder$GzipState: int ordinal()>();
v5 = v2[v4];
tableswitch(v5)
{
case 1: goto label01;
case 2: goto label06;
case 3: goto label09;
case 4: goto label12;
case 5: goto label14;
case 6: goto label16;
case 7: goto label18;
default: goto label19;
};
label01:
v6 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v6 >= 10 goto label02;
return 0;
label02:
v7 = virtualinvoke v1.<io.netty.buffer.ByteBuf: byte readByte()>();
v8 = virtualinvoke v1.<io.netty.buffer.ByteBuf: byte readByte()>();
if v7 == 31 goto label03;
v9 = new io.netty.handler.codec.compression.DecompressionException;
specialinvoke v9.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String)>("Input is not in the GZIP format");
throw v9;
label03:
v10 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
virtualinvoke v10.<io.netty.handler.codec.compression.ByteBufChecksum: void update(int)>(v7);
v11 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
virtualinvoke v11.<io.netty.handler.codec.compression.ByteBufChecksum: void update(int)>(v8);
v12 = virtualinvoke v1.<io.netty.buffer.ByteBuf: short readUnsignedByte()>();
if v12 == 8 goto label04;
v13 = new io.netty.handler.codec.compression.DecompressionException;
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (short)>(v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unsupported compression method \u0001 in the GZIP header");
specialinvoke v13.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String)>(v14);
throw v13;
label04:
v15 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
virtualinvoke v15.<io.netty.handler.codec.compression.ByteBufChecksum: void update(int)>(v12);
v16 = virtualinvoke v1.<io.netty.buffer.ByteBuf: short readUnsignedByte()>();
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: int flags> = v16;
v17 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
v18 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: int flags>;
virtualinvoke v17.<io.netty.handler.codec.compression.ByteBufChecksum: void update(int)>(v18);
v19 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: int flags>;
v20 = v19 & 224;
if v20 == 0 goto label05;
v21 = new io.netty.handler.codec.compression.DecompressionException;
specialinvoke v21.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String)>("Reserved flags are set in the GZIP header");
throw v21;
label05:
v22 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
v23 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
virtualinvoke v22.<io.netty.handler.codec.compression.ByteBufChecksum: void update(io.netty.buffer.ByteBuf,int,int)>(v1, v23, 4);
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf skipBytes(int)>(4);
v24 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
v25 = virtualinvoke v1.<io.netty.buffer.ByteBuf: short readUnsignedByte()>();
virtualinvoke v24.<io.netty.handler.codec.compression.ByteBufChecksum: void update(int)>(v25);
v26 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
v27 = virtualinvoke v1.<io.netty.buffer.ByteBuf: short readUnsignedByte()>();
virtualinvoke v26.<io.netty.handler.codec.compression.ByteBufChecksum: void update(int)>(v27);
v28 = <io.netty.handler.codec.compression.JdkZlibDecoder$GzipState: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState FLG_READ>;
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState gzipState> = v28;
label06:
v29 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: int flags>;
v30 = v29 & 4;
if v30 == 0 goto label08;
v31 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v31 >= 2 goto label07;
return 0;
label07:
v32 = virtualinvoke v1.<io.netty.buffer.ByteBuf: short readUnsignedByte()>();
v33 = virtualinvoke v1.<io.netty.buffer.ByteBuf: short readUnsignedByte()>();
v34 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
virtualinvoke v34.<io.netty.handler.codec.compression.ByteBufChecksum: void update(int)>(v32);
v35 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
virtualinvoke v35.<io.netty.handler.codec.compression.ByteBufChecksum: void update(int)>(v33);
v36 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: int xlen>;
v37 = v32 << 8;
v38 = v37 | v33;
v39 = v36 | v38;
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: int xlen> = v39;
label08:
v40 = <io.netty.handler.codec.compression.JdkZlibDecoder$GzipState: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState XLEN_READ>;
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState gzipState> = v40;
label09:
v41 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: int xlen>;
v42 = (int) -1;
if v41 == v42 goto label11;
v43 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
v44 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: int xlen>;
if v43 >= v44 goto label10;
return 0;
label10:
v45 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
v46 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
v47 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: int xlen>;
virtualinvoke v45.<io.netty.handler.codec.compression.ByteBufChecksum: void update(io.netty.buffer.ByteBuf,int,int)>(v1, v46, v47);
v48 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: int xlen>;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf skipBytes(int)>(v48);
label11:
v49 = <io.netty.handler.codec.compression.JdkZlibDecoder$GzipState: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState SKIP_FNAME>;
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState gzipState> = v49;
label12:
v50 = specialinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean skipIfNeeded(io.netty.buffer.ByteBuf,int)>(v1, 8);
if v50 != 0 goto label13;
return 0;
label13:
v51 = <io.netty.handler.codec.compression.JdkZlibDecoder$GzipState: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState SKIP_COMMENT>;
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState gzipState> = v51;
label14:
v52 = specialinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean skipIfNeeded(io.netty.buffer.ByteBuf,int)>(v1, 16);
if v52 != 0 goto label15;
return 0;
label15:
v53 = <io.netty.handler.codec.compression.JdkZlibDecoder$GzipState: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState PROCESS_FHCRC>;
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState gzipState> = v53;
label16:
v54 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: int flags>;
v55 = v54 & 2;
if v55 == 0 goto label17;
v56 = specialinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean verifyCrc16(io.netty.buffer.ByteBuf)>(v1);
if v56 != 0 goto label17;
return 0;
label17:
v57 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
virtualinvoke v57.<io.netty.handler.codec.compression.ByteBufChecksum: void reset()>();
v58 = <io.netty.handler.codec.compression.JdkZlibDecoder$GzipState: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState HEADER_END>;
v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.JdkZlibDecoder$GzipState gzipState> = v58;
label18:
return 1;
label19:
v59 = new java.lang.IllegalStateException;
specialinvoke v59.<java.lang.IllegalStateException: void <init>()>();
throw v59;
}
private boolean skipIfNeeded(io.netty.buffer.ByteBuf, int)
{
io.netty.handler.codec.compression.JdkZlibDecoder v0;
io.netty.handler.codec.compression.ByteBufChecksum v7;
short v6;
io.netty.buffer.ByteBuf v1;
int v2, v3, v4;
boolean v5;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: int;
v3 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: int flags>;
v4 = v3 & v2;
if v4 == 0 goto label3;
label1:
v5 = virtualinvoke v1.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v5 != 0 goto label2;
return 0;
label2:
v6 = virtualinvoke v1.<io.netty.buffer.ByteBuf: short readUnsignedByte()>();
v7 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
virtualinvoke v7.<io.netty.handler.codec.compression.ByteBufChecksum: void update(int)>(v6);
if v6 != 0 goto label1;
label3:
return 1;
}
private boolean readGZIPFooter(io.netty.buffer.ByteBuf)
{
io.netty.handler.codec.compression.JdkZlibDecoder v0;
io.netty.handler.codec.compression.DecompressionException v13;
java.util.zip.Inflater v11;
java.lang.AssertionError v5;
short v8;
io.netty.buffer.ByteBuf v1;
int v10, v12, v2, v6, v7, v9;
java.lang.String v14;
boolean v3, v4;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v2 >= 8 goto label1;
return 0;
label1:
v3 = specialinvoke v0.<io.netty.handler.codec.compression.JdkZlibDecoder: boolean verifyCrc(io.netty.buffer.ByteBuf)>(v1);
v4 = <io.netty.handler.codec.compression.JdkZlibDecoder: boolean $assertionsDisabled>;
if v4 != 0 goto label2;
if v3 != 0 goto label2;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label2:
v6 = 0;
v7 = 0;
label3:
if v7 >= 4 goto label4;
v8 = virtualinvoke v1.<io.netty.buffer.ByteBuf: short readUnsignedByte()>();
v9 = v7 * 8;
v10 = v8 << v9;
v6 = v6 | v10;
v7 = v7 + 1;
goto label3;
label4:
v11 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: java.util.zip.Inflater inflater>;
v12 = virtualinvoke v11.<java.util.zip.Inflater: int getTotalOut()>();
if v6 == v12 goto label5;
v13 = new io.netty.handler.codec.compression.DecompressionException;
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v6, v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Number of bytes mismatch. Expected: \u0001, Got: \u0001");
specialinvoke v13.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String)>(v14);
throw v13;
label5:
return 1;
}
private boolean verifyCrc(io.netty.buffer.ByteBuf)
{
io.netty.handler.codec.compression.JdkZlibDecoder v0;
io.netty.handler.codec.compression.DecompressionException v11;
long v3, v7, v9;
io.netty.handler.codec.compression.ByteBufChecksum v8;
short v5;
byte v10;
io.netty.buffer.ByteBuf v1;
int v2, v4, v6;
java.lang.String v12;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v2 >= 4 goto label1;
return 0;
label1:
v3 = 0L;
v4 = 0;
label2:
if v4 >= 4 goto label3;
v5 = virtualinvoke v1.<io.netty.buffer.ByteBuf: short readUnsignedByte()>();
v6 = v4 * 8;
v7 = v5 << v6;
v3 = v3 | v7;
v4 = v4 + 1;
goto label2;
label3:
v8 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
v9 = virtualinvoke v8.<io.netty.handler.codec.compression.ByteBufChecksum: long getValue()>();
v10 = v3 cmp v9;
if v10 == 0 goto label4;
v11 = new io.netty.handler.codec.compression.DecompressionException;
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,long)>(v3, v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("CRC value mismatch. Expected: \u0001, Got: \u0001");
specialinvoke v11.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String)>(v12);
throw v11;
label4:
return 1;
}
private boolean verifyCrc16(io.netty.buffer.ByteBuf)
{
io.netty.handler.codec.compression.JdkZlibDecoder v0;
io.netty.handler.codec.compression.DecompressionException v17;
long v10, v12, v13, v15, v4, v5, v6;
short v8;
byte v16;
io.netty.buffer.ByteBuf v1;
int v11, v14, v2, v7, v9;
java.lang.String v18;
io.netty.handler.codec.compression.ByteBufChecksum v3;
v0 := @this: io.netty.handler.codec.compression.JdkZlibDecoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v2 >= 2 goto label1;
return 0;
label1:
v3 = v0.<io.netty.handler.codec.compression.JdkZlibDecoder: io.netty.handler.codec.compression.ByteBufChecksum crc>;
v4 = virtualinvoke v3.<io.netty.handler.codec.compression.ByteBufChecksum: long getValue()>();
v5 = 0L;
v6 = 0L;
v7 = 0;
label2:
if v7 >= 2 goto label3;
v8 = virtualinvoke v1.<io.netty.buffer.ByteBuf: short readUnsignedByte()>();
v9 = v7 * 8;
v10 = v8 << v9;
v5 = v5 | v10;
v11 = v7 * 8;
v12 = v4 >> v11;
v13 = v12 & 255L;
v14 = v7 * 8;
v15 = v13 << v14;
v6 = v6 | v15;
v7 = v7 + 1;
goto label2;
label3:
v16 = v5 cmp v6;
if v16 == 0 goto label4;
v17 = new io.netty.handler.codec.compression.DecompressionException;
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,long)>(v5, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("CRC16 value mismatch. Expected: \u0001, Got: \u0001");
specialinvoke v17.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String)>(v18);
throw v17;
label4:
return 1;
}
private static boolean looksLikeZlib(short)
{
short v0, v1;
int v2;
boolean v3;
v0 := @parameter0: short;
v1 = v0 & 30720;
if v1 != 30720 goto label1;
v2 = v0 % 31;
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/codec/compression/JdkZlibDecoder;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.compression.JdkZlibDecoder: boolean $assertionsDisabled> = v2;
return;
}
}