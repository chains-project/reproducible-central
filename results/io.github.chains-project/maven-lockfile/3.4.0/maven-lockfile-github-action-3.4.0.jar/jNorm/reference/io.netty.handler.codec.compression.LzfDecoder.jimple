public class io.netty.handler.codec.compression.LzfDecoder extends io.netty.handler.codec.ByteToMessageDecoder
{
private io.netty.handler.codec.compression.LzfDecoder$State currentState;
private static final short MAGIC_NUMBER;
private com.ning.compress.lzf.ChunkDecoder decoder;
private com.ning.compress.BufferRecycler recycler;
private int chunkLength;
private int originalLength;
private boolean isCompressed;
public void <init>()
{
io.netty.handler.codec.compression.LzfDecoder v0;
v0 := @this: io.netty.handler.codec.compression.LzfDecoder;
specialinvoke v0.<io.netty.handler.codec.compression.LzfDecoder: void <init>(boolean)>(0);
return;
}
public void <init>(boolean)
{
io.netty.handler.codec.compression.LzfDecoder v0;
com.ning.compress.lzf.ChunkDecoder v3;
io.netty.handler.codec.compression.LzfDecoder$State v2;
boolean v1;
com.ning.compress.BufferRecycler v4;
v0 := @this: io.netty.handler.codec.compression.LzfDecoder;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.handler.codec.ByteToMessageDecoder: void <init>()>();
v2 = <io.netty.handler.codec.compression.LzfDecoder$State: io.netty.handler.codec.compression.LzfDecoder$State INIT_BLOCK>;
v0.<io.netty.handler.codec.compression.LzfDecoder: io.netty.handler.codec.compression.LzfDecoder$State currentState> = v2;
if v1 == 0 goto label1;
v3 = staticinvoke <com.ning.compress.lzf.util.ChunkDecoderFactory: com.ning.compress.lzf.ChunkDecoder safeInstance()>();
goto label2;
label1:
v3 = staticinvoke <com.ning.compress.lzf.util.ChunkDecoderFactory: com.ning.compress.lzf.ChunkDecoder optimalInstance()>();
label2:
v0.<io.netty.handler.codec.compression.LzfDecoder: com.ning.compress.lzf.ChunkDecoder decoder> = v3;
v4 = staticinvoke <com.ning.compress.BufferRecycler: com.ning.compress.BufferRecycler instance()>();
v0.<io.netty.handler.codec.compression.LzfDecoder: com.ning.compress.BufferRecycler recycler> = v4;
return;
}
protected void decode(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, java.util.List) throws java.lang.Exception
{
byte[] v48, v55;
java.lang.Integer v16, v17, v18, v26, v28, v37, v39;
byte v11;
java.lang.Exception v71;
io.netty.handler.codec.compression.LzfDecoder v0;
java.lang.Throwable v64;
java.lang.Object[] v15, v24, v35;
com.ning.compress.BufferRecycler v51, v66;
java.lang.String v19, v29, v40;
java.lang.IllegalStateException v70;
io.netty.buffer.ByteBufAllocator v52;
io.netty.handler.codec.compression.LzfDecoder$State v12, v13, v41, v5, v68, v72;
int[] v4;
boolean v45, v47, v54, v61, v65;
java.util.List v3;
io.netty.handler.codec.compression.DecompressionException v10, v14, v23, v34;
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v2, v53, v67;
int v20, v21, v22, v25, v27, v30, v31, v32, v33, v36, v38, v42, v43, v44, v46, v49, v50, v56, v57, v58, v6, v60, v62, v63, v69, v7, v8, v9;
com.ning.compress.lzf.ChunkDecoder v59;
v0 := @this: io.netty.handler.codec.compression.LzfDecoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: java.util.List;
label01:
v4 = <io.netty.handler.codec.compression.LzfDecoder$1: int[] $SwitchMap$io$netty$handler$codec$compression$LzfDecoder$State>;
v5 = v0.<io.netty.handler.codec.compression.LzfDecoder: io.netty.handler.codec.compression.LzfDecoder$State currentState>;
v6 = virtualinvoke v5.<io.netty.handler.codec.compression.LzfDecoder$State: int ordinal()>();
v7 = v4[v6];
tableswitch(v7)
{
case 1: goto label02;
case 2: goto label09;
case 3: goto label11;
case 4: goto label23;
default: goto label24;
};
label02:
v8 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v8 < 5 goto label26;
v9 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readUnsignedShort()>();
if v9 == 23126 goto label03;
v10 = new io.netty.handler.codec.compression.DecompressionException;
specialinvoke v10.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String)>("unexpected block identifier");
throw v10;
label03:
v11 = virtualinvoke v2.<io.netty.buffer.ByteBuf: byte readByte()>();
lookupswitch(v11)
{
case 0: goto label04;
case 1: goto label05;
default: goto label06;
};
label04:
v0.<io.netty.handler.codec.compression.LzfDecoder: boolean isCompressed> = 0;
v12 = <io.netty.handler.codec.compression.LzfDecoder$State: io.netty.handler.codec.compression.LzfDecoder$State DECOMPRESS_DATA>;
v0.<io.netty.handler.codec.compression.LzfDecoder: io.netty.handler.codec.compression.LzfDecoder$State currentState> = v12;
goto label07;
label05:
v0.<io.netty.handler.codec.compression.LzfDecoder: boolean isCompressed> = 1;
v13 = <io.netty.handler.codec.compression.LzfDecoder$State: io.netty.handler.codec.compression.LzfDecoder$State INIT_ORIGINAL_LENGTH>;
v0.<io.netty.handler.codec.compression.LzfDecoder: io.netty.handler.codec.compression.LzfDecoder$State currentState> = v13;
goto label07;
label06:
v14 = new io.netty.handler.codec.compression.DecompressionException;
v15 = newarray (java.lang.Object)[3];
v16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v11);
v15[0] = v16;
v17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
v15[1] = v17;
v18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
v15[2] = v18;
v19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("unknown type of chunk: %d (expected: %d or %d)", v15);
specialinvoke v14.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String)>(v19);
throw v14;
label07:
v20 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readUnsignedShort()>();
v0.<io.netty.handler.codec.compression.LzfDecoder: int chunkLength> = v20;
v21 = v0.<io.netty.handler.codec.compression.LzfDecoder: int chunkLength>;
v22 = (int) 65535;
if v21 <= v22 goto label08;
v23 = new io.netty.handler.codec.compression.DecompressionException;
v24 = newarray (java.lang.Object)[2];
v25 = v0.<io.netty.handler.codec.compression.LzfDecoder: int chunkLength>;
v26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v25);
v24[0] = v26;
v27 = (int) 65535;
v28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v27);
v24[1] = v28;
v29 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("chunk length exceeds maximum: %d (expected: =< %d)", v24);
specialinvoke v23.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String)>(v29);
throw v23;
label08:
if v11 != 1 goto label26;
label09:
v30 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v30 < 2 goto label26;
v31 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readUnsignedShort()>();
v0.<io.netty.handler.codec.compression.LzfDecoder: int originalLength> = v31;
v32 = v0.<io.netty.handler.codec.compression.LzfDecoder: int originalLength>;
v33 = (int) 65535;
if v32 <= v33 goto label10;
v34 = new io.netty.handler.codec.compression.DecompressionException;
v35 = newarray (java.lang.Object)[2];
v36 = v0.<io.netty.handler.codec.compression.LzfDecoder: int chunkLength>;
v37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v36);
v35[0] = v37;
v38 = (int) 65535;
v39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v38);
v35[1] = v39;
v40 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("original length exceeds maximum: %d (expected: =< %d)", v35);
specialinvoke v34.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String)>(v40);
throw v34;
label10:
v41 = <io.netty.handler.codec.compression.LzfDecoder$State: io.netty.handler.codec.compression.LzfDecoder$State DECOMPRESS_DATA>;
v0.<io.netty.handler.codec.compression.LzfDecoder: io.netty.handler.codec.compression.LzfDecoder$State currentState> = v41;
label11:
v42 = v0.<io.netty.handler.codec.compression.LzfDecoder: int chunkLength>;
v43 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v43 < v42 goto label26;
v44 = v0.<io.netty.handler.codec.compression.LzfDecoder: int originalLength>;
v45 = v0.<io.netty.handler.codec.compression.LzfDecoder: boolean isCompressed>;
if v45 == 0 goto label21;
v46 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
v47 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean hasArray()>();
if v47 == 0 goto label12;
v48 = virtualinvoke v2.<io.netty.buffer.ByteBuf: byte[] array()>();
v49 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v50 = v49 + v46;
goto label13;
label12:
v51 = v0.<io.netty.handler.codec.compression.LzfDecoder: com.ning.compress.BufferRecycler recycler>;
v48 = virtualinvoke v51.<com.ning.compress.BufferRecycler: byte[] allocInputBuffer(int)>(v42);
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)>(v46, v48, 0, v42);
v50 = 0;
label13:
v52 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.buffer.ByteBufAllocator alloc()>();
v53 = interfaceinvoke v52.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int,int)>(v44, v44);
v54 = virtualinvoke v53.<io.netty.buffer.ByteBuf: boolean hasArray()>();
if v54 == 0 goto label14;
v55 = virtualinvoke v53.<io.netty.buffer.ByteBuf: byte[] array()>();
v56 = virtualinvoke v53.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v57 = virtualinvoke v53.<io.netty.buffer.ByteBuf: int writerIndex()>();
v58 = v56 + v57;
goto label15;
label14:
v55 = newarray (byte)[v44];
v58 = 0;
label15:
v59 = v0.<io.netty.handler.codec.compression.LzfDecoder: com.ning.compress.lzf.ChunkDecoder decoder>;
v60 = v58 + v44;
virtualinvoke v59.<com.ning.compress.lzf.ChunkDecoder: void decodeChunk(byte[],int,byte[],int,int)>(v48, v50, v55, v58, v60);
v61 = virtualinvoke v53.<io.netty.buffer.ByteBuf: boolean hasArray()>();
if v61 == 0 goto label16;
v62 = virtualinvoke v53.<io.netty.buffer.ByteBuf: int writerIndex()>();
v63 = v62 + v44;
virtualinvoke v53.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writerIndex(int)>(v63);
goto label17;
label16:
virtualinvoke v53.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(byte[])>(v55);
label17:
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v53);
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf skipBytes(int)>(v42);
label18:
goto label20;
label19:
v64 := @caughtexception;
virtualinvoke v53.<io.netty.buffer.ByteBuf: boolean release()>();
throw v64;
label20:
v65 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean hasArray()>();
if v65 != 0 goto label22;
v66 = v0.<io.netty.handler.codec.compression.LzfDecoder: com.ning.compress.BufferRecycler recycler>;
virtualinvoke v66.<com.ning.compress.BufferRecycler: void releaseInputBuffer(byte[])>(v48);
goto label22;
label21:
if v42 <= 0 goto label22;
v67 = virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readRetainedSlice(int)>(v42);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v67);
label22:
v68 = <io.netty.handler.codec.compression.LzfDecoder$State: io.netty.handler.codec.compression.LzfDecoder$State INIT_BLOCK>;
v0.<io.netty.handler.codec.compression.LzfDecoder: io.netty.handler.codec.compression.LzfDecoder$State currentState> = v68;
goto label26;
label23:
v69 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf skipBytes(int)>(v69);
goto label26;
label24:
v70 = new java.lang.IllegalStateException;
specialinvoke v70.<java.lang.IllegalStateException: void <init>()>();
throw v70;
label25:
v71 := @caughtexception;
v72 = <io.netty.handler.codec.compression.LzfDecoder$State: io.netty.handler.codec.compression.LzfDecoder$State CORRUPTED>;
v0.<io.netty.handler.codec.compression.LzfDecoder: io.netty.handler.codec.compression.LzfDecoder$State currentState> = v72;
v0.<io.netty.handler.codec.compression.LzfDecoder: com.ning.compress.lzf.ChunkDecoder decoder> = null;
v0.<io.netty.handler.codec.compression.LzfDecoder: com.ning.compress.BufferRecycler recycler> = null;
throw v71;
label26:
return;
catch java.lang.Throwable from label15 to label18 with label19;
catch java.lang.Exception from label01 to label25 with label25;
}
}