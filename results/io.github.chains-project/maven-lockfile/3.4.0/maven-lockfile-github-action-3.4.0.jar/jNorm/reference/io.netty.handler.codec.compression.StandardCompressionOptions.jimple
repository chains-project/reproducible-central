public final class io.netty.handler.codec.compression.StandardCompressionOptions extends java.lang.Object
{
private void <init>()
{
io.netty.handler.codec.compression.StandardCompressionOptions v0;
v0 := @this: io.netty.handler.codec.compression.StandardCompressionOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static io.netty.handler.codec.compression.BrotliOptions brotli()
{
io.netty.handler.codec.compression.BrotliOptions v0;
v0 = <io.netty.handler.codec.compression.BrotliOptions: io.netty.handler.codec.compression.BrotliOptions DEFAULT>;
return v0;
}
public static io.netty.handler.codec.compression.BrotliOptions brotli(com.aayushatharva.brotli4j.encoder.Encoder$Parameters)
{
io.netty.handler.codec.compression.BrotliOptions v1;
com.aayushatharva.brotli4j.encoder.Encoder$Parameters v0;
v0 := @parameter0: com.aayushatharva.brotli4j.encoder.Encoder$Parameters;
v1 = new io.netty.handler.codec.compression.BrotliOptions;
specialinvoke v1.<io.netty.handler.codec.compression.BrotliOptions: void <init>(com.aayushatharva.brotli4j.encoder.Encoder$Parameters)>(v0);
return v1;
}
public static io.netty.handler.codec.compression.ZstdOptions zstd()
{
io.netty.handler.codec.compression.ZstdOptions v0;
v0 = <io.netty.handler.codec.compression.ZstdOptions: io.netty.handler.codec.compression.ZstdOptions DEFAULT>;
return v0;
}
public static io.netty.handler.codec.compression.ZstdOptions zstd(int, int, int)
{
io.netty.handler.codec.compression.ZstdOptions v3;
int v0, v1, v2;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = new io.netty.handler.codec.compression.ZstdOptions;
specialinvoke v3.<io.netty.handler.codec.compression.ZstdOptions: void <init>(int,int,int)>(v0, v1, v2);
return v3;
}
public static io.netty.handler.codec.compression.GzipOptions gzip()
{
io.netty.handler.codec.compression.GzipOptions v0;
v0 = <io.netty.handler.codec.compression.GzipOptions: io.netty.handler.codec.compression.GzipOptions DEFAULT>;
return v0;
}
public static io.netty.handler.codec.compression.GzipOptions gzip(int, int, int)
{
int v0, v1, v2;
io.netty.handler.codec.compression.GzipOptions v3;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = new io.netty.handler.codec.compression.GzipOptions;
specialinvoke v3.<io.netty.handler.codec.compression.GzipOptions: void <init>(int,int,int)>(v0, v1, v2);
return v3;
}
public static io.netty.handler.codec.compression.DeflateOptions deflate()
{
io.netty.handler.codec.compression.DeflateOptions v0;
v0 = <io.netty.handler.codec.compression.DeflateOptions: io.netty.handler.codec.compression.DeflateOptions DEFAULT>;
return v0;
}
public static io.netty.handler.codec.compression.DeflateOptions deflate(int, int, int)
{
int v0, v1, v2;
io.netty.handler.codec.compression.DeflateOptions v3;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = new io.netty.handler.codec.compression.DeflateOptions;
specialinvoke v3.<io.netty.handler.codec.compression.DeflateOptions: void <init>(int,int,int)>(v0, v1, v2);
return v3;
}
}