class io.netty.handler.codec.http.DefaultLastHttpContent$TrailingHttpHeaders$1 extends java.lang.Object implements io.netty.handler.codec.DefaultHeaders$NameValidator
{
void <init>()
{
io.netty.handler.codec.http.DefaultLastHttpContent$TrailingHttpHeaders$1 v0;
v0 := @this: io.netty.handler.codec.http.DefaultLastHttpContent$TrailingHttpHeaders$1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void validateName(java.lang.CharSequence)
{
java.lang.CharSequence v1;
io.netty.util.AsciiString v3, v5, v7;
java.lang.IllegalArgumentException v9;
io.netty.handler.codec.http.DefaultLastHttpContent$TrailingHttpHeaders$1 v0;
io.netty.handler.codec.DefaultHeaders$NameValidator v2;
java.lang.String v10;
boolean v4, v6, v8;
v0 := @this: io.netty.handler.codec.http.DefaultLastHttpContent$TrailingHttpHeaders$1;
v1 := @parameter0: java.lang.CharSequence;
v2 = <io.netty.handler.codec.http.DefaultHttpHeaders: io.netty.handler.codec.DefaultHeaders$NameValidator HttpNameValidator>;
interfaceinvoke v2.<io.netty.handler.codec.DefaultHeaders$NameValidator: void validateName(java.lang.Object)>(v1);
v3 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_LENGTH>;
v4 = virtualinvoke v3.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v1);
if v4 != 0 goto label1;
v5 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString TRANSFER_ENCODING>;
v6 = virtualinvoke v5.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v1);
if v6 != 0 goto label1;
v7 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString TRAILER>;
v8 = virtualinvoke v7.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v1);
if v8 == 0 goto label2;
label1:
v9 = new java.lang.IllegalArgumentException;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.CharSequence)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("prohibited trailing header: \u0001");
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v9;
label2:
return;
}
}