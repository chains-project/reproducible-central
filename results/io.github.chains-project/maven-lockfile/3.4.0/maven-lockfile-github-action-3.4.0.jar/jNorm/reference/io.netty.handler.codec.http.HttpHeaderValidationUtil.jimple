public final class io.netty.handler.codec.http.HttpHeaderValidationUtil extends java.lang.Object
{
private static final long TOKEN_CHARS_HIGH;
private static final long TOKEN_CHARS_LOW;
private void <init>()
{
io.netty.handler.codec.http.HttpHeaderValidationUtil v0;
v0 := @this: io.netty.handler.codec.http.HttpHeaderValidationUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static boolean isConnectionHeader(java.lang.CharSequence, boolean)
{
io.netty.util.AsciiString v12, v14, v4, v5, v7, v9;
int v2;
boolean v1, v10, v11, v13, v15, v3, v6, v8;
java.lang.CharSequence v0;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: boolean;
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
lookupswitch(v2)
{
case 2: goto label01;
case 7: goto label04;
case 10: goto label05;
case 16: goto label09;
case 17: goto label10;
default: goto label11;
};
label01:
if v1 == 0 goto label02;
v3 = 0;
goto label03;
label02:
v4 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString TE>;
v3 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v0, v4);
label03:
return v3;
label04:
v5 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString UPGRADE>;
v6 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v0, v5);
return v6;
label05:
v7 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONNECTION>;
v8 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v0, v7);
if v8 != 0 goto label06;
v9 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString KEEP_ALIVE>;
v10 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v0, v9);
if v10 == 0 goto label07;
label06:
v11 = 1;
goto label08;
label07:
v11 = 0;
label08:
return v11;
label09:
v12 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString PROXY_CONNECTION>;
v13 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v0, v12);
return v13;
label10:
v14 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString TRANSFER_ENCODING>;
v15 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v0, v14);
return v15;
label11:
return 0;
}
public static boolean isTeNotTrailers(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
io.netty.util.AsciiString v3, v5;
int v2;
boolean v4, v6, v7;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v2 != 2 goto label3;
v3 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString TE>;
v4 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v0, v3);
if v4 == 0 goto label1;
v5 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString TRAILERS>;
v6 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v1, v5);
if v6 != 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
return v7;
label3:
return 0;
}
public static int validateValidHeaderValue(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v1, v2, v4, v5;
boolean v3;
v0 := @parameter0: java.lang.CharSequence;
v1 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v1 != 0 goto label1;
v2 = (int) -1;
return v2;
label1:
v3 = v0 instanceof io.netty.util.AsciiString;
if v3 == 0 goto label2;
v4 = staticinvoke <io.netty.handler.codec.http.HttpHeaderValidationUtil: int verifyValidHeaderValueAsciiString(io.netty.util.AsciiString)>(v0);
return v4;
label2:
v5 = staticinvoke <io.netty.handler.codec.http.HttpHeaderValidationUtil: int verifyValidHeaderValueCharSequence(java.lang.CharSequence)>(v0);
return v5;
}
private static int verifyValidHeaderValueAsciiString(io.netty.util.AsciiString)
{
byte[] v1;
io.netty.util.AsciiString v0;
short v4, v8;
byte v3, v7;
int v10, v2, v5, v6, v9;
v0 := @parameter0: io.netty.util.AsciiString;
v1 = virtualinvoke v0.<io.netty.util.AsciiString: byte[] array()>();
v2 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v3 = v1[v2];
v4 = v3 & 255;
if v4 < 33 goto label1;
if v4 != 127 goto label2;
label1:
return 0;
label2:
v5 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v6 = v2 + 1;
label3:
if v6 >= v5 goto label7;
v7 = v1[v6];
v8 = v7 & 255;
if v8 >= 32 goto label4;
if v8 != 9 goto label5;
label4:
if v8 != 127 goto label6;
label5:
v9 = v6 - v2;
return v9;
label6:
v6 = v6 + 1;
goto label3;
label7:
v10 = (int) -1;
return v10;
}
private static int verifyValidHeaderValueCharSequence(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v2, v3, v5;
char v1, v4;
v0 := @parameter0: java.lang.CharSequence;
v1 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(0);
if v1 < 33 goto label1;
if v1 != 127 goto label2;
label1:
return 0;
label2:
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v3 = 1;
label3:
if v3 >= v2 goto label7;
v4 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v3);
if v4 >= 32 goto label4;
if v4 != 9 goto label5;
label4:
if v4 != 127 goto label6;
label5:
return v3;
label6:
v3 = v3 + 1;
goto label3;
label7:
v5 = (int) -1;
return v5;
}
public static int validateToken(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v2, v3;
boolean v1;
v0 := @parameter0: java.lang.CharSequence;
v1 = v0 instanceof io.netty.util.AsciiString;
if v1 == 0 goto label1;
v2 = staticinvoke <io.netty.handler.codec.http.HttpHeaderValidationUtil: int validateAsciiStringToken(io.netty.util.AsciiString)>(v0);
return v2;
label1:
v3 = staticinvoke <io.netty.handler.codec.http.HttpHeaderValidationUtil: int validateCharSequenceToken(java.lang.CharSequence)>(v0);
return v3;
}
private static int validateAsciiStringToken(io.netty.util.AsciiString)
{
byte[] v1;
io.netty.util.AsciiString v0;
long v7, v8;
byte v6;
int v10, v11, v12, v2, v3, v4, v5;
boolean v9;
v0 := @parameter0: io.netty.util.AsciiString;
v1 = virtualinvoke v0.<io.netty.util.AsciiString: byte[] array()>();
v2 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v3 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v4 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v5 = v3 + v4;
label1:
if v2 >= v5 goto label3;
v6 = v1[v2];
v7 = <io.netty.handler.codec.http.HttpHeaderValidationUtil: long TOKEN_CHARS_HIGH>;
v8 = <io.netty.handler.codec.http.HttpHeaderValidationUtil: long TOKEN_CHARS_LOW>;
v9 = staticinvoke <io.netty.handler.codec.http.HttpHeaderValidationUtil$BitSet128: boolean contains(byte,long,long)>(v6, v7, v8);
if v9 != 0 goto label2;
v10 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v11 = v2 - v10;
return v11;
label2:
v2 = v2 + 1;
goto label1;
label3:
v12 = (int) -1;
return v12;
}
private static int validateCharSequenceToken(java.lang.CharSequence)
{
java.lang.CharSequence v0;
char v3;
long v4, v5;
int v1, v2, v7;
boolean v6;
v0 := @parameter0: java.lang.CharSequence;
v1 = 0;
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
label1:
if v1 >= v2 goto label3;
v3 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v1);
v4 = <io.netty.handler.codec.http.HttpHeaderValidationUtil: long TOKEN_CHARS_HIGH>;
v5 = <io.netty.handler.codec.http.HttpHeaderValidationUtil: long TOKEN_CHARS_LOW>;
v6 = staticinvoke <io.netty.handler.codec.http.HttpHeaderValidationUtil$BitSet128: boolean contains(byte,long,long)>(v3, v4, v5);
if v6 != 0 goto label2;
return v1;
label2:
v1 = v1 + 1;
goto label1;
label3:
v7 = (int) -1;
return v7;
}
static void <clinit>()
{
long v8, v9;
io.netty.handler.codec.http.HttpHeaderValidationUtil$BitSet128 v0, v1, v2, v3, v5, v7;
char[] v4, v6;
v0 = new io.netty.handler.codec.http.HttpHeaderValidationUtil$BitSet128;
specialinvoke v0.<io.netty.handler.codec.http.HttpHeaderValidationUtil$BitSet128: void <init>()>();
v1 = virtualinvoke v0.<io.netty.handler.codec.http.HttpHeaderValidationUtil$BitSet128: io.netty.handler.codec.http.HttpHeaderValidationUtil$BitSet128 range(char,char)>(48, 57);
v2 = virtualinvoke v1.<io.netty.handler.codec.http.HttpHeaderValidationUtil$BitSet128: io.netty.handler.codec.http.HttpHeaderValidationUtil$BitSet128 range(char,char)>(97, 122);
v3 = virtualinvoke v2.<io.netty.handler.codec.http.HttpHeaderValidationUtil$BitSet128: io.netty.handler.codec.http.HttpHeaderValidationUtil$BitSet128 range(char,char)>(65, 90);
v4 = newarray (char)[4];
v4[0] = 45;
v4[1] = 46;
v4[2] = 95;
v4[3] = 126;
v5 = virtualinvoke v3.<io.netty.handler.codec.http.HttpHeaderValidationUtil$BitSet128: io.netty.handler.codec.http.HttpHeaderValidationUtil$BitSet128 bits(char[])>(v4);
v6 = newarray (char)[11];
v6[0] = 33;
v6[1] = 35;
v6[2] = 36;
v6[3] = 37;
v6[4] = 38;
v6[5] = 39;
v6[6] = 42;
v6[7] = 43;
v6[8] = 94;
v6[9] = 96;
v6[10] = 124;
v7 = virtualinvoke v5.<io.netty.handler.codec.http.HttpHeaderValidationUtil$BitSet128: io.netty.handler.codec.http.HttpHeaderValidationUtil$BitSet128 bits(char[])>(v6);
v8 = virtualinvoke v7.<io.netty.handler.codec.http.HttpHeaderValidationUtil$BitSet128: long high()>();
<io.netty.handler.codec.http.HttpHeaderValidationUtil: long TOKEN_CHARS_HIGH> = v8;
v9 = virtualinvoke v7.<io.netty.handler.codec.http.HttpHeaderValidationUtil$BitSet128: long low()>();
<io.netty.handler.codec.http.HttpHeaderValidationUtil: long TOKEN_CHARS_LOW> = v9;
return;
}
}