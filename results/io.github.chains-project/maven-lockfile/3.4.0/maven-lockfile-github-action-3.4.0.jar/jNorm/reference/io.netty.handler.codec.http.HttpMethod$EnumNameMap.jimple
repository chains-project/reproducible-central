final class io.netty.handler.codec.http.HttpMethod$EnumNameMap extends java.lang.Object
{
private final io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node[] values;
private final int valuesMask;
transient void <init>(io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node[])
{
io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node[] v1, v15, v18, v23, v4, v5;
int v12, v13, v14, v2, v3, v6, v7, v8, v9;
java.lang.String v11, v20, v21, v22;
io.netty.handler.codec.http.HttpMethod$EnumNameMap v0;
java.lang.IllegalArgumentException v17;
io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node v10, v16, v19;
v0 := @this: io.netty.handler.codec.http.HttpMethod$EnumNameMap;
v1 := @parameter0: io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node[];
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = lengthof v1;
v3 = staticinvoke <io.netty.util.internal.MathUtil: int findNextPositivePowerOfTwo(int)>(v2);
v4 = newarray (io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node)[v3];
v0.<io.netty.handler.codec.http.HttpMethod$EnumNameMap: io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node[] values> = v4;
v5 = v0.<io.netty.handler.codec.http.HttpMethod$EnumNameMap: io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node[] values>;
v6 = lengthof v5;
v7 = v6 - 1;
v0.<io.netty.handler.codec.http.HttpMethod$EnumNameMap: int valuesMask> = v7;
v8 = lengthof v1;
v9 = 0;
label1:
if v9 >= v8 goto label3;
v10 = v1[v9];
v11 = v10.<io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node: java.lang.String key>;
v12 = staticinvoke <io.netty.handler.codec.http.HttpMethod$EnumNameMap: int hashCode(java.lang.String)>(v11);
v13 = v0.<io.netty.handler.codec.http.HttpMethod$EnumNameMap: int valuesMask>;
v14 = v12 & v13;
v15 = v0.<io.netty.handler.codec.http.HttpMethod$EnumNameMap: io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node[] values>;
v16 = v15[v14];
if v16 == null goto label2;
v17 = new java.lang.IllegalArgumentException;
v18 = v0.<io.netty.handler.codec.http.HttpMethod$EnumNameMap: io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node[] values>;
v19 = v18[v14];
v20 = v19.<io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node: java.lang.String key>;
v21 = v10.<io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node: java.lang.String key>;
v22 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,java.lang.String,java.lang.String)>(v14, v20, v21) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("index \u0001 collision between values: [\u0001, \u0001]");
specialinvoke v17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v22);
throw v17;
label2:
v23 = v0.<io.netty.handler.codec.http.HttpMethod$EnumNameMap: io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node[] values>;
v23[v14] = v10;
v9 = v9 + 1;
goto label1;
label3:
return;
}
java.lang.Object get(java.lang.String)
{
io.netty.handler.codec.http.HttpMethod$EnumNameMap v0;
io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node[] v2;
int v3, v4, v5;
java.lang.Object v9;
io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node v6;
java.lang.String v1, v7;
boolean v8;
v0 := @this: io.netty.handler.codec.http.HttpMethod$EnumNameMap;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.handler.codec.http.HttpMethod$EnumNameMap: io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node[] values>;
v3 = staticinvoke <io.netty.handler.codec.http.HttpMethod$EnumNameMap: int hashCode(java.lang.String)>(v1);
v4 = v0.<io.netty.handler.codec.http.HttpMethod$EnumNameMap: int valuesMask>;
v5 = v3 & v4;
v6 = v2[v5];
if v6 == null goto label1;
v7 = v6.<io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node: java.lang.String key>;
v8 = virtualinvoke v7.<java.lang.String: boolean equals(java.lang.Object)>(v1);
if v8 != 0 goto label2;
label1:
v9 = null;
goto label3;
label2:
v9 = v6.<io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node: java.lang.Object value>;
label3:
return v9;
}
private static int hashCode(java.lang.String)
{
int v1, v2;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: int hashCode()>();
v2 = v1 >>> 6;
return v2;
}
}