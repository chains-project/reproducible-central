final class io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator extends java.lang.Object implements java.util.Map$Entry, java.util.Iterator
{
private java.lang.CharSequence key;
private java.lang.CharSequence value;
private int nextNameIndex;
final io.netty.handler.codec.http.ReadOnlyHttpHeaders this$0;
private void <init>(io.netty.handler.codec.http.ReadOnlyHttpHeaders)
{
io.netty.handler.codec.http.ReadOnlyHttpHeaders v1;
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator v0;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator;
v1 := @parameter0: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator: io.netty.handler.codec.http.ReadOnlyHttpHeaders this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public boolean hasNext()
{
java.lang.CharSequence[] v3;
int v1, v4;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v2;
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator v0;
boolean v5;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator;
v1 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator: int nextNameIndex>;
v2 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator: io.netty.handler.codec.http.ReadOnlyHttpHeaders this$0>;
v3 = v2.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v4 = lengthof v3;
if v1 == v4 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public java.util.Map$Entry next()
{
java.lang.CharSequence v11, v6;
java.lang.CharSequence[] v4, v8;
int v10, v12, v13, v5, v9;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v3, v7;
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator v0;
java.util.NoSuchElementException v2;
boolean v1;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator;
v1 = virtualinvoke v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator: boolean hasNext()>();
if v1 != 0 goto label1;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>()>();
throw v2;
label1:
v3 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator: io.netty.handler.codec.http.ReadOnlyHttpHeaders this$0>;
v4 = v3.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v5 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator: int nextNameIndex>;
v6 = v4[v5];
v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator: java.lang.CharSequence key> = v6;
v7 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator: io.netty.handler.codec.http.ReadOnlyHttpHeaders this$0>;
v8 = v7.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v9 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator: int nextNameIndex>;
v10 = v9 + 1;
v11 = v8[v10];
v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator: java.lang.CharSequence value> = v11;
v12 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator: int nextNameIndex>;
v13 = v12 + 2;
v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator: int nextNameIndex> = v13;
return v0;
}
public void remove()
{
java.lang.UnsupportedOperationException v1;
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator v0;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v1;
}
public java.lang.CharSequence getKey()
{
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator v0;
java.lang.CharSequence v1;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator;
v1 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator: java.lang.CharSequence key>;
return v1;
}
public java.lang.CharSequence getValue()
{
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator v0;
java.lang.CharSequence v1;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator;
v1 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator: java.lang.CharSequence value>;
return v1;
}
public java.lang.CharSequence setValue(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator v0;
java.lang.CharSequence v1;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public java.lang.String toString()
{
java.lang.CharSequence v1, v3;
java.lang.String v2, v4, v5;
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator v0;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator;
v1 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator: java.lang.CharSequence key>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
v3 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator: java.lang.CharSequence value>;
v4 = virtualinvoke v3.<java.lang.Object: java.lang.String toString()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v2, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001=\u0001");
return v5;
}
}