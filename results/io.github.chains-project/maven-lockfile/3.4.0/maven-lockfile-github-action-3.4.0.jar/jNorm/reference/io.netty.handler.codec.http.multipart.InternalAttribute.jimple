final class io.netty.handler.codec.http.multipart.InternalAttribute extends io.netty.util.AbstractReferenceCounted implements io.netty.handler.codec.http.multipart.InterfaceHttpData
{
private final java.util.List value;
private final java.nio.charset.Charset charset;
private int size;
void <init>(java.nio.charset.Charset)
{
io.netty.handler.codec.http.multipart.InternalAttribute v0;
java.nio.charset.Charset v1;
java.util.ArrayList v2;
v0 := @this: io.netty.handler.codec.http.multipart.InternalAttribute;
v1 := @parameter0: java.nio.charset.Charset;
specialinvoke v0.<io.netty.util.AbstractReferenceCounted: void <init>()>();
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v0.<io.netty.handler.codec.http.multipart.InternalAttribute: java.util.List value> = v2;
v0.<io.netty.handler.codec.http.multipart.InternalAttribute: java.nio.charset.Charset charset> = v1;
return;
}
public io.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType getHttpDataType()
{
io.netty.handler.codec.http.multipart.InternalAttribute v0;
io.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType v1;
v0 := @this: io.netty.handler.codec.http.multipart.InternalAttribute;
v1 = <io.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType: io.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType InternalAttribute>;
return v1;
}
public void addValue(java.lang.String)
{
io.netty.handler.codec.http.multipart.InternalAttribute v0;
java.util.List v4;
io.netty.buffer.ByteBuf v3;
java.nio.charset.Charset v2;
int v5, v6, v7;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.multipart.InternalAttribute;
v1 := @parameter0: java.lang.String;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "value");
v2 = v0.<io.netty.handler.codec.http.multipart.InternalAttribute: java.nio.charset.Charset charset>;
v3 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)>(v1, v2);
v4 = v0.<io.netty.handler.codec.http.multipart.InternalAttribute: java.util.List value>;
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v3);
v5 = v0.<io.netty.handler.codec.http.multipart.InternalAttribute: int size>;
v6 = virtualinvoke v3.<io.netty.buffer.ByteBuf: int readableBytes()>();
v7 = v5 + v6;
v0.<io.netty.handler.codec.http.multipart.InternalAttribute: int size> = v7;
return;
}
public void addValue(java.lang.String, int)
{
io.netty.handler.codec.http.multipart.InternalAttribute v0;
java.util.List v5;
io.netty.buffer.ByteBuf v4;
java.nio.charset.Charset v3;
int v2, v6, v7, v8;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.multipart.InternalAttribute;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "value");
v3 = v0.<io.netty.handler.codec.http.multipart.InternalAttribute: java.nio.charset.Charset charset>;
v4 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)>(v1, v3);
v5 = v0.<io.netty.handler.codec.http.multipart.InternalAttribute: java.util.List value>;
interfaceinvoke v5.<java.util.List: void add(int,java.lang.Object)>(v2, v4);
v6 = v0.<io.netty.handler.codec.http.multipart.InternalAttribute: int size>;
v7 = virtualinvoke v4.<io.netty.buffer.ByteBuf: int readableBytes()>();
v8 = v6 + v7;
v0.<io.netty.handler.codec.http.multipart.InternalAttribute: int size> = v8;
return;
}
public void setValue(java.lang.String, int)
{
io.netty.handler.codec.http.multipart.InternalAttribute v0;
java.util.List v5;
io.netty.buffer.ByteBuf v4;
java.nio.charset.Charset v3;
int v10, v11, v12, v2, v7, v8, v9;
java.lang.Object v6;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.multipart.InternalAttribute;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "value");
v3 = v0.<io.netty.handler.codec.http.multipart.InternalAttribute: java.nio.charset.Charset charset>;
v4 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)>(v1, v3);
v5 = v0.<io.netty.handler.codec.http.multipart.InternalAttribute: java.util.List value>;
v6 = interfaceinvoke v5.<java.util.List: java.lang.Object set(int,java.lang.Object)>(v2, v4);
if v6 == null goto label1;
v7 = v0.<io.netty.handler.codec.http.multipart.InternalAttribute: int size>;
v8 = virtualinvoke v6.<io.netty.buffer.ByteBuf: int readableBytes()>();
v9 = v7 - v8;
v0.<io.netty.handler.codec.http.multipart.InternalAttribute: int size> = v9;
virtualinvoke v6.<io.netty.buffer.ByteBuf: boolean release()>();
label1:
v10 = v0.<io.netty.handler.codec.http.multipart.InternalAttribute: int size>;
v11 = virtualinvoke v4.<io.netty.buffer.ByteBuf: int readableBytes()>();
v12 = v10 + v11;
v0.<io.netty.handler.codec.http.multipart.InternalAttribute: int size> = v12;
return;
}
public int hashCode()
{
int v2;
io.netty.handler.codec.http.multipart.InternalAttribute v0;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.multipart.InternalAttribute;
v1 = virtualinvoke v0.<io.netty.handler.codec.http.multipart.InternalAttribute: java.lang.String getName()>();
v2 = virtualinvoke v1.<java.lang.String: int hashCode()>();
return v2;
}
public boolean equals(java.lang.Object)
{
io.netty.handler.codec.http.multipart.InternalAttribute v0;
java.lang.Object v1;
java.lang.String v3, v4;
boolean v2, v5;
v0 := @this: io.netty.handler.codec.http.multipart.InternalAttribute;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof io.netty.handler.codec.http.multipart.InternalAttribute;
if v2 != 0 goto label1;
return 0;
label1:
v3 = virtualinvoke v0.<io.netty.handler.codec.http.multipart.InternalAttribute: java.lang.String getName()>();
v4 = virtualinvoke v1.<io.netty.handler.codec.http.multipart.InternalAttribute: java.lang.String getName()>();
v5 = virtualinvoke v3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v4);
return v5;
}
public int compareTo(io.netty.handler.codec.http.multipart.InterfaceHttpData)
{
io.netty.handler.codec.http.multipart.InterfaceHttpData v1;
java.lang.ClassCastException v3;
io.netty.handler.codec.http.multipart.InternalAttribute v0;
int v7;
io.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType v4, v5;
java.lang.String v6;
boolean v2;
v0 := @this: io.netty.handler.codec.http.multipart.InternalAttribute;
v1 := @parameter0: io.netty.handler.codec.http.multipart.InterfaceHttpData;
v2 = v1 instanceof io.netty.handler.codec.http.multipart.InternalAttribute;
if v2 != 0 goto label1;
v3 = new java.lang.ClassCastException;
v4 = virtualinvoke v0.<io.netty.handler.codec.http.multipart.InternalAttribute: io.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType getHttpDataType()>();
v5 = interfaceinvoke v1.<io.netty.handler.codec.http.multipart.InterfaceHttpData: io.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType getHttpDataType()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType,io.netty.handler.codec.http.multipart.InterfaceHttpData$HttpDataType)>(v4, v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot compare \u0001 with \u0001");
specialinvoke v3.<java.lang.ClassCastException: void <init>(java.lang.String)>(v6);
throw v3;
label1:
v7 = virtualinvoke v0.<io.netty.handler.codec.http.multipart.InternalAttribute: int compareTo(io.netty.handler.codec.http.multipart.InternalAttribute)>(v1);
return v7;
}
public int compareTo(io.netty.handler.codec.http.multipart.InternalAttribute)
{
io.netty.handler.codec.http.multipart.InternalAttribute v0, v1;
int v4;
java.lang.String v2, v3;
v0 := @this: io.netty.handler.codec.http.multipart.InternalAttribute;
v1 := @parameter0: io.netty.handler.codec.http.multipart.InternalAttribute;
v2 = virtualinvoke v0.<io.netty.handler.codec.http.multipart.InternalAttribute: java.lang.String getName()>();
v3 = virtualinvoke v1.<io.netty.handler.codec.http.multipart.InternalAttribute: java.lang.String getName()>();
v4 = virtualinvoke v2.<java.lang.String: int compareToIgnoreCase(java.lang.String)>(v3);
return v4;
}
public java.lang.String toString()
{
java.util.Iterator v3;
io.netty.handler.codec.http.multipart.InternalAttribute v0;
java.util.List v2;
java.nio.charset.Charset v6;
java.lang.Object v5;
java.lang.StringBuilder v1;
java.lang.String v7, v8;
boolean v4;
v0 := @this: io.netty.handler.codec.http.multipart.InternalAttribute;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = v0.<io.netty.handler.codec.http.multipart.InternalAttribute: java.util.List value>;
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = v0.<io.netty.handler.codec.http.multipart.InternalAttribute: java.nio.charset.Charset charset>;
v7 = virtualinvoke v5.<io.netty.buffer.ByteBuf: java.lang.String toString(java.nio.charset.Charset)>(v6);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v7);
goto label1;
label2:
v8 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v8;
}
public int size()
{
int v1;
io.netty.handler.codec.http.multipart.InternalAttribute v0;
v0 := @this: io.netty.handler.codec.http.multipart.InternalAttribute;
v1 = v0.<io.netty.handler.codec.http.multipart.InternalAttribute: int size>;
return v1;
}
public io.netty.buffer.ByteBuf toByteBuf()
{
io.netty.handler.codec.http.multipart.InternalAttribute v0;
io.netty.buffer.CompositeByteBuf v1, v3, v5, v6;
java.util.List v2;
int v4;
v0 := @this: io.netty.handler.codec.http.multipart.InternalAttribute;
v1 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.CompositeByteBuf compositeBuffer()>();
v2 = v0.<io.netty.handler.codec.http.multipart.InternalAttribute: java.util.List value>;
v3 = virtualinvoke v1.<io.netty.buffer.CompositeByteBuf: io.netty.buffer.CompositeByteBuf addComponents(java.lang.Iterable)>(v2);
v4 = virtualinvoke v0.<io.netty.handler.codec.http.multipart.InternalAttribute: int size()>();
v5 = virtualinvoke v3.<io.netty.buffer.CompositeByteBuf: io.netty.buffer.CompositeByteBuf writerIndex(int)>(v4);
v6 = virtualinvoke v5.<io.netty.buffer.CompositeByteBuf: io.netty.buffer.CompositeByteBuf readerIndex(int)>(0);
return v6;
}
public java.lang.String getName()
{
io.netty.handler.codec.http.multipart.InternalAttribute v0;
v0 := @this: io.netty.handler.codec.http.multipart.InternalAttribute;
return "InternalAttribute";
}
protected void deallocate()
{
io.netty.handler.codec.http.multipart.InternalAttribute v0;
v0 := @this: io.netty.handler.codec.http.multipart.InternalAttribute;
return;
}
public io.netty.handler.codec.http.multipart.InterfaceHttpData retain()
{
io.netty.handler.codec.http.multipart.InternalAttribute v0;
java.util.List v1;
java.util.Iterator v2;
java.lang.Object v4;
boolean v3;
v0 := @this: io.netty.handler.codec.http.multipart.InternalAttribute;
v1 = v0.<io.netty.handler.codec.http.multipart.InternalAttribute: java.util.List value>;
v2 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v4.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf retain()>();
goto label1;
label2:
return v0;
}
public io.netty.handler.codec.http.multipart.InterfaceHttpData retain(int)
{
io.netty.handler.codec.http.multipart.InternalAttribute v0;
java.util.List v2;
java.util.Iterator v3;
int v1;
java.lang.Object v5;
boolean v4;
v0 := @this: io.netty.handler.codec.http.multipart.InternalAttribute;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.http.multipart.InternalAttribute: java.util.List value>;
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v5.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf retain(int)>(v1);
goto label1;
label2:
return v0;
}
public io.netty.handler.codec.http.multipart.InterfaceHttpData touch()
{
io.netty.handler.codec.http.multipart.InternalAttribute v0;
java.util.List v1;
java.util.Iterator v2;
java.lang.Object v4;
boolean v3;
v0 := @this: io.netty.handler.codec.http.multipart.InternalAttribute;
v1 = v0.<io.netty.handler.codec.http.multipart.InternalAttribute: java.util.List value>;
v2 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v4.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf touch()>();
goto label1;
label2:
return v0;
}
public io.netty.handler.codec.http.multipart.InterfaceHttpData touch(java.lang.Object)
{
io.netty.handler.codec.http.multipart.InternalAttribute v0;
java.util.List v2;
java.util.Iterator v3;
java.lang.Object v1, v5;
boolean v4;
v0 := @this: io.netty.handler.codec.http.multipart.InternalAttribute;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.handler.codec.http.multipart.InternalAttribute: java.util.List value>;
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v5.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf touch(java.lang.Object)>(v1);
goto label1;
label2:
return v0;
}
}