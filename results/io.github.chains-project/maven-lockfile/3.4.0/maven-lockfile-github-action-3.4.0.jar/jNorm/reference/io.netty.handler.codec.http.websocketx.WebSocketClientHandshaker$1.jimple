class io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1 extends java.lang.Object implements io.netty.channel.ChannelFutureListener
{
final io.netty.channel.ChannelPromise val$promise;
final io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker this$0;
void <init>(io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v2;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1 v0;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v1;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1;
v1 := @parameter0: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker this$0> = v1;
v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1: io.netty.channel.ChannelPromise val$promise> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void operationComplete(io.netty.channel.ChannelFuture)
{
java.lang.Throwable v13;
java.lang.IllegalStateException v7;
io.netty.channel.ChannelPipeline v4;
io.netty.channel.ChannelFuture v1;
io.netty.channel.Channel v3;
io.netty.channel.ChannelHandlerContext v5;
io.netty.channel.ChannelPromise v11, v12, v6;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1 v0;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v9;
java.lang.String v8;
io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder v10;
boolean v2;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1;
v1 := @parameter0: io.netty.channel.ChannelFuture;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: boolean isSuccess()>();
if v2 == 0 goto label2;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: io.netty.channel.Channel channel()>();
v4 = interfaceinvoke v3.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v5 = interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpRequestEncoder;");
if v5 != null goto label1;
v5 = interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpClientCodec;");
if v5 != null goto label1;
v6 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1: io.netty.channel.ChannelPromise val$promise>;
v7 = new java.lang.IllegalStateException;
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ChannelPipeline does not contain an HttpRequestEncoder or HttpClientCodec");
interfaceinvoke v6.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v7);
return;
label1:
v8 = interfaceinvoke v5.<io.netty.channel.ChannelHandlerContext: java.lang.String name()>();
v9 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker this$0>;
v10 = virtualinvoke v9.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder()>();
interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addAfter(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)>(v8, "ws-encoder", v10);
v11 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1: io.netty.channel.ChannelPromise val$promise>;
interfaceinvoke v11.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
goto label3;
label2:
v12 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1: io.netty.channel.ChannelPromise val$promise>;
v13 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: java.lang.Throwable cause()>();
interfaceinvoke v12.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v13);
label3:
return;
}
}