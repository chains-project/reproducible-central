public abstract class io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker extends java.lang.Object
{
private static final java.lang.String HTTP_SCHEME_PREFIX;
private static final java.lang.String HTTPS_SCHEME_PREFIX;
protected static final int DEFAULT_FORCE_CLOSE_TIMEOUT_MILLIS;
private final java.net.URI uri;
private final io.netty.handler.codec.http.websocketx.WebSocketVersion version;
private volatile boolean handshakeComplete;
private volatile long forceCloseTimeoutMillis;
private volatile int forceCloseInit;
private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater FORCE_CLOSE_INIT_UPDATER;
private volatile boolean forceCloseComplete;
private final java.lang.String expectedSubprotocol;
private volatile java.lang.String actualSubprotocol;
protected final io.netty.handler.codec.http.HttpHeaders customHeaders;
private final int maxFramePayloadLength;
private final boolean absoluteUpgradeUrl;
protected final boolean generateOriginHeader;
protected void <init>(java.net.URI, io.netty.handler.codec.http.websocketx.WebSocketVersion, java.lang.String, io.netty.handler.codec.http.HttpHeaders, int)
{
io.netty.handler.codec.http.websocketx.WebSocketVersion v2;
io.netty.handler.codec.http.HttpHeaders v4;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
int v5;
java.lang.String v3;
java.net.URI v1;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 := @parameter0: java.net.URI;
v2 := @parameter1: io.netty.handler.codec.http.websocketx.WebSocketVersion;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.netty.handler.codec.http.HttpHeaders;
v5 := @parameter4: int;
specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: void <init>(java.net.URI,io.netty.handler.codec.http.websocketx.WebSocketVersion,java.lang.String,io.netty.handler.codec.http.HttpHeaders,int,long)>(v1, v2, v3, v4, v5, 10000L);
return;
}
protected void <init>(java.net.URI, io.netty.handler.codec.http.websocketx.WebSocketVersion, java.lang.String, io.netty.handler.codec.http.HttpHeaders, int, long)
{
io.netty.handler.codec.http.websocketx.WebSocketVersion v2;
io.netty.handler.codec.http.HttpHeaders v4;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
int v5;
long v6;
java.lang.String v3;
java.net.URI v1;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 := @parameter0: java.net.URI;
v2 := @parameter1: io.netty.handler.codec.http.websocketx.WebSocketVersion;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.netty.handler.codec.http.HttpHeaders;
v5 := @parameter4: int;
v6 := @parameter5: long;
specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: void <init>(java.net.URI,io.netty.handler.codec.http.websocketx.WebSocketVersion,java.lang.String,io.netty.handler.codec.http.HttpHeaders,int,long,boolean)>(v1, v2, v3, v4, v5, v6, 0);
return;
}
protected void <init>(java.net.URI, io.netty.handler.codec.http.websocketx.WebSocketVersion, java.lang.String, io.netty.handler.codec.http.HttpHeaders, int, long, boolean)
{
io.netty.handler.codec.http.HttpHeaders v4;
long v6;
io.netty.handler.codec.http.websocketx.WebSocketVersion v2;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
int v5;
java.lang.String v3;
java.net.URI v1;
boolean v7;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 := @parameter0: java.net.URI;
v2 := @parameter1: io.netty.handler.codec.http.websocketx.WebSocketVersion;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.netty.handler.codec.http.HttpHeaders;
v5 := @parameter4: int;
v6 := @parameter5: long;
v7 := @parameter6: boolean;
specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: void <init>(java.net.URI,io.netty.handler.codec.http.websocketx.WebSocketVersion,java.lang.String,io.netty.handler.codec.http.HttpHeaders,int,long,boolean,boolean)>(v1, v2, v3, v4, v5, v6, v7, 1);
return;
}
protected void <init>(java.net.URI, io.netty.handler.codec.http.websocketx.WebSocketVersion, java.lang.String, io.netty.handler.codec.http.HttpHeaders, int, long, boolean, boolean)
{
io.netty.handler.codec.http.HttpHeaders v4;
long v6;
io.netty.handler.codec.http.websocketx.WebSocketVersion v2;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
int v5;
java.lang.String v3;
java.net.URI v1;
boolean v7, v8;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 := @parameter0: java.net.URI;
v2 := @parameter1: io.netty.handler.codec.http.websocketx.WebSocketVersion;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.netty.handler.codec.http.HttpHeaders;
v5 := @parameter4: int;
v6 := @parameter5: long;
v7 := @parameter6: boolean;
v8 := @parameter7: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: long forceCloseTimeoutMillis> = 10000L;
v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: java.net.URI uri> = v1;
v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.handler.codec.http.websocketx.WebSocketVersion version> = v2;
v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: java.lang.String expectedSubprotocol> = v3;
v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.handler.codec.http.HttpHeaders customHeaders> = v4;
v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: int maxFramePayloadLength> = v5;
v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: long forceCloseTimeoutMillis> = v6;
v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: boolean absoluteUpgradeUrl> = v7;
v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: boolean generateOriginHeader> = v8;
return;
}
public java.net.URI uri()
{
java.net.URI v1;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: java.net.URI uri>;
return v1;
}
public io.netty.handler.codec.http.websocketx.WebSocketVersion version()
{
io.netty.handler.codec.http.websocketx.WebSocketVersion v1;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.handler.codec.http.websocketx.WebSocketVersion version>;
return v1;
}
public int maxFramePayloadLength()
{
int v1;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: int maxFramePayloadLength>;
return v1;
}
public boolean isHandshakeComplete()
{
boolean v1;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: boolean handshakeComplete>;
return v1;
}
private void setHandshakeComplete()
{
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: boolean handshakeComplete> = 1;
return;
}
public java.lang.String expectedSubprotocol()
{
java.lang.String v1;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: java.lang.String expectedSubprotocol>;
return v1;
}
public java.lang.String actualSubprotocol()
{
java.lang.String v1;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: java.lang.String actualSubprotocol>;
return v1;
}
private void setActualSubprotocol(java.lang.String)
{
java.lang.String v1;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 := @parameter0: java.lang.String;
v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: java.lang.String actualSubprotocol> = v1;
return;
}
public long forceCloseTimeoutMillis()
{
long v1;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: long forceCloseTimeoutMillis>;
return v1;
}
protected boolean isForceCloseComplete()
{
boolean v1;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: boolean forceCloseComplete>;
return v1;
}
public io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker setForceCloseTimeoutMillis(long)
{
long v1;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 := @parameter0: long;
v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: long forceCloseTimeoutMillis> = v1;
return v0;
}
public io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel)
{
io.netty.channel.Channel v1;
io.netty.channel.ChannelPromise v2;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 := @parameter0: io.netty.channel.Channel;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "channel");
v2 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPromise newPromise()>();
v3 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.channel.ChannelPromise)>(v1, v2);
return v3;
}
public final io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel, io.netty.channel.ChannelPromise)
{
java.lang.IllegalStateException v6;
io.netty.handler.codec.http.HttpHeaders v10, v15, v9;
io.netty.util.AsciiString v11, v16, v22, v24;
io.netty.handler.codec.http.websocketx.WebSocketVersion v18, v19, v20, v21;
io.netty.channel.ChannelPromise v2;
java.lang.String v23, v26, v8;
java.net.URI v7;
boolean v12, v14, v17;
io.netty.channel.ChannelPipeline v3;
java.lang.IllegalArgumentException v13, v25;
io.netty.handler.codec.http.FullHttpRequest v27;
io.netty.channel.ChannelFuture v28;
io.netty.channel.Channel v1;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1 v29;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
io.netty.channel.ChannelHandler v4, v5;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v4 = interfaceinvoke v3.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandler get(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpResponseDecoder;");
if v4 != null goto label1;
v5 = interfaceinvoke v3.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandler get(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpClientCodec;");
if v5 != null goto label1;
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ChannelPipeline does not contain an HttpResponseDecoder or HttpClientCodec");
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v6);
return v2;
label1:
v7 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: java.net.URI uri>;
v8 = virtualinvoke v7.<java.net.URI: java.lang.String getHost()>();
if v8 != null goto label7;
v9 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.handler.codec.http.HttpHeaders customHeaders>;
if v9 == null goto label2;
v10 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.handler.codec.http.HttpHeaders customHeaders>;
v11 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString HOST>;
v12 = virtualinvoke v10.<io.netty.handler.codec.http.HttpHeaders: boolean contains(java.lang.CharSequence)>(v11);
if v12 != 0 goto label3;
label2:
v13 = new java.lang.IllegalArgumentException;
specialinvoke v13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot generate the \'host\' header value, webSocketURI should contain host or passed through customHeaders");
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v13);
return v2;
label3:
v14 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: boolean generateOriginHeader>;
if v14 == 0 goto label7;
v15 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.handler.codec.http.HttpHeaders customHeaders>;
v16 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString ORIGIN>;
v17 = virtualinvoke v15.<io.netty.handler.codec.http.HttpHeaders: boolean contains(java.lang.CharSequence)>(v16);
if v17 != 0 goto label7;
v18 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.handler.codec.http.websocketx.WebSocketVersion version>;
v19 = <io.netty.handler.codec.http.websocketx.WebSocketVersion: io.netty.handler.codec.http.websocketx.WebSocketVersion V07>;
if v18 == v19 goto label4;
v20 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.handler.codec.http.websocketx.WebSocketVersion version>;
v21 = <io.netty.handler.codec.http.websocketx.WebSocketVersion: io.netty.handler.codec.http.websocketx.WebSocketVersion V08>;
if v20 != v21 goto label5;
label4:
v22 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString SEC_WEBSOCKET_ORIGIN>;
v23 = virtualinvoke v22.<io.netty.util.AsciiString: java.lang.String toString()>();
goto label6;
label5:
v24 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString ORIGIN>;
v23 = virtualinvoke v24.<io.netty.util.AsciiString: java.lang.String toString()>();
label6:
v25 = new java.lang.IllegalArgumentException;
v26 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v23) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot generate the \'\u0001\' header value, webSocketURI should contain host or disable generateOriginHeader or pass value through customHeaders");
specialinvoke v25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v26);
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v25);
return v2;
label7:
v27 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest()>();
v28 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)>(v27);
v29 = new io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1;
specialinvoke v29.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$1: void <init>(io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker,io.netty.channel.ChannelPromise)>(v0, v2);
interfaceinvoke v28.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v29);
return v2;
}
protected abstract io.netty.handler.codec.http.FullHttpRequest newHandshakeRequest();
public final void finishHandshake(io.netty.channel.Channel, io.netty.handler.codec.http.FullHttpResponse)
{
java.lang.IllegalStateException v31;
io.netty.handler.codec.http.HttpHeaders v3;
io.netty.util.AsciiString v4;
io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder v34, v39;
boolean v11, v12, v14, v15, v21;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshakeException v22;
io.netty.channel.ChannelPipeline v26;
io.netty.channel.EventLoop v35, v40;
java.lang.Object[] v23;
java.lang.String[] v16;
io.netty.channel.ChannelHandlerContext v29, v30;
int v17, v18;
java.lang.String v10, v13, v19, v20, v24, v25, v33, v38, v5, v6, v7, v8, v9;
io.netty.channel.Channel v1;
io.netty.handler.codec.http.FullHttpResponse v2;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$3 v41;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2 v36;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
io.netty.channel.ChannelHandler v27, v28, v32, v37;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.handler.codec.http.FullHttpResponse;
virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: void verify(io.netty.handler.codec.http.FullHttpResponse)>(v2);
v3 = interfaceinvoke v2.<io.netty.handler.codec.http.FullHttpResponse: io.netty.handler.codec.http.HttpHeaders headers()>();
v4 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString SEC_WEBSOCKET_PROTOCOL>;
v5 = virtualinvoke v3.<io.netty.handler.codec.http.HttpHeaders: java.lang.String get(java.lang.CharSequence)>(v4);
if v5 == null goto label01;
v6 = virtualinvoke v5.<java.lang.String: java.lang.String trim()>();
goto label02;
label01:
v6 = null;
label02:
v7 = v6;
v8 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: java.lang.String expectedSubprotocol>;
if v8 == null goto label03;
v9 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: java.lang.String expectedSubprotocol>;
goto label04;
label03:
v9 = "";
label04:
v10 = v9;
v11 = 0;
v12 = virtualinvoke v9.<java.lang.String: boolean isEmpty()>();
if v12 == 0 goto label05;
if v7 != null goto label05;
v11 = 1;
v13 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: java.lang.String expectedSubprotocol>;
specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: void setActualSubprotocol(java.lang.String)>(v13);
goto label08;
label05:
v14 = virtualinvoke v10.<java.lang.String: boolean isEmpty()>();
if v14 != 0 goto label08;
if v7 == null goto label08;
v15 = virtualinvoke v7.<java.lang.String: boolean isEmpty()>();
if v15 != 0 goto label08;
v16 = virtualinvoke v10.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");
v17 = lengthof v16;
v18 = 0;
label06:
if v18 >= v17 goto label08;
v19 = v16[v18];
v20 = virtualinvoke v19.<java.lang.String: java.lang.String trim()>();
v21 = virtualinvoke v20.<java.lang.String: boolean equals(java.lang.Object)>(v7);
if v21 == 0 goto label07;
v11 = 1;
specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: void setActualSubprotocol(java.lang.String)>(v7);
goto label08;
label07:
v18 = v18 + 1;
goto label06;
label08:
if v11 != 0 goto label09;
v22 = new io.netty.handler.codec.http.websocketx.WebSocketClientHandshakeException;
v23 = newarray (java.lang.Object)[2];
v23[0] = v7;
v24 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: java.lang.String expectedSubprotocol>;
v23[1] = v24;
v25 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid subprotocol. Actual: %s. Expected one of: %s", v23);
specialinvoke v22.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshakeException: void <init>(java.lang.String,io.netty.handler.codec.http.HttpResponse)>(v25, v2);
throw v22;
label09:
specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: void setHandshakeComplete()>();
v26 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v27 = interfaceinvoke v26.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandler get(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpContentDecompressor;");
if v27 == null goto label10;
interfaceinvoke v26.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v27);
label10:
v28 = interfaceinvoke v26.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandler get(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpObjectAggregator;");
if v28 == null goto label11;
interfaceinvoke v26.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v28);
label11:
v29 = interfaceinvoke v26.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpResponseDecoder;");
if v29 != null goto label13;
v30 = interfaceinvoke v26.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpClientCodec;");
if v30 != null goto label12;
v31 = new java.lang.IllegalStateException;
specialinvoke v31.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ChannelPipeline does not contain an HttpRequestEncoder or HttpClientCodec");
throw v31;
label12:
v32 = interfaceinvoke v30.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandler handler()>();
virtualinvoke v32.<io.netty.handler.codec.http.HttpClientCodec: void removeOutboundHandler()>();
v33 = interfaceinvoke v30.<io.netty.channel.ChannelHandlerContext: java.lang.String name()>();
v34 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()>();
interfaceinvoke v26.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addAfter(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)>(v33, "ws-decoder", v34);
v35 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v36 = new io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2;
specialinvoke v36.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$2: void <init>(io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker,io.netty.channel.ChannelPipeline,io.netty.handler.codec.http.HttpClientCodec)>(v0, v26, v32);
interfaceinvoke v35.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v36);
goto label15;
label13:
v37 = interfaceinvoke v26.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandler get(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpRequestEncoder;");
if v37 == null goto label14;
interfaceinvoke v26.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandler remove(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpRequestEncoder;");
label14:
v38 = interfaceinvoke v29.<io.netty.channel.ChannelHandlerContext: java.lang.String name()>();
v39 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder()>();
interfaceinvoke v26.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addAfter(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)>(v38, "ws-decoder", v39);
v40 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v41 = new io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$3;
specialinvoke v41.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$3: void <init>(io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker,io.netty.channel.ChannelPipeline,io.netty.channel.ChannelHandlerContext)>(v0, v26, v29);
interfaceinvoke v40.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v41);
label15:
return;
}
public final io.netty.channel.ChannelFuture processHandshake(io.netty.channel.Channel, io.netty.handler.codec.http.HttpResponse)
{
io.netty.channel.Channel v1;
io.netty.channel.ChannelPromise v3;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
io.netty.handler.codec.http.HttpResponse v2;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.handler.codec.http.HttpResponse;
v3 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPromise newPromise()>();
v4 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.channel.ChannelFuture processHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpResponse,io.netty.channel.ChannelPromise)>(v1, v2, v3);
return v4;
}
public final io.netty.channel.ChannelFuture processHandshake(io.netty.channel.Channel, io.netty.handler.codec.http.HttpResponse, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v17, v5;
java.lang.IllegalStateException v8;
io.netty.channel.ChannelHandlerContext v7;
io.netty.handler.codec.http.websocketx.WebSocketVersion v11, v12;
io.netty.channel.ChannelPromise v3, v9;
java.lang.String v10, v13;
boolean v4;
io.netty.channel.ChannelPipeline v6;
io.netty.channel.Channel v1;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$4 v15;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
io.netty.handler.codec.http.HttpResponse v2;
java.lang.Object v16;
io.netty.handler.codec.http.HttpObjectAggregator v14;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.handler.codec.http.HttpResponse;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = v2 instanceof io.netty.handler.codec.http.FullHttpResponse;
if v4 == 0 goto label04;
label01:
virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: void finishHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpResponse)>(v1, v2);
interfaceinvoke v3.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
label02:
goto label10;
label03:
v5 := @caughtexception;
interfaceinvoke v3.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v5);
goto label10;
label04:
v6 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v7 = interfaceinvoke v6.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpResponseDecoder;");
if v7 != null goto label05;
v7 = interfaceinvoke v6.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandlerContext context(java.lang.Class)>(class "Lio/netty/handler/codec/http/HttpClientCodec;");
if v7 != null goto label05;
v8 = new java.lang.IllegalStateException;
specialinvoke v8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ChannelPipeline does not contain an HttpResponseDecoder or HttpClientCodec");
v9 = interfaceinvoke v3.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v8);
return v9;
label05:
v10 = interfaceinvoke v7.<io.netty.channel.ChannelHandlerContext: java.lang.String name()>();
v11 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.handler.codec.http.websocketx.WebSocketVersion version>;
v12 = <io.netty.handler.codec.http.websocketx.WebSocketVersion: io.netty.handler.codec.http.websocketx.WebSocketVersion V00>;
if v11 != v12 goto label06;
v10 = "httpAggregator";
v13 = interfaceinvoke v7.<io.netty.channel.ChannelHandlerContext: java.lang.String name()>();
v14 = new io.netty.handler.codec.http.HttpObjectAggregator;
specialinvoke v14.<io.netty.handler.codec.http.HttpObjectAggregator: void <init>(int)>(8192);
interfaceinvoke v6.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addAfter(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)>(v13, "httpAggregator", v14);
label06:
v15 = new io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$4;
specialinvoke v15.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$4: void <init>(io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker,io.netty.channel.ChannelPromise,io.netty.channel.Channel)>(v0, v3, v1);
interfaceinvoke v6.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addAfter(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)>(v10, "handshaker", v15);
label07:
v16 = staticinvoke <io.netty.util.ReferenceCountUtil: java.lang.Object retain(java.lang.Object)>(v2);
interfaceinvoke v7.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>(v16);
label08:
goto label10;
label09:
v17 := @caughtexception;
interfaceinvoke v3.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v17);
label10:
return v3;
catch java.lang.Throwable from label01 to label02 with label03;
catch java.lang.Throwable from label07 to label08 with label09;
}
protected abstract void verify(io.netty.handler.codec.http.FullHttpResponse);
protected abstract io.netty.handler.codec.http.websocketx.WebSocketFrameDecoder newWebsocketDecoder();
protected abstract io.netty.handler.codec.http.websocketx.WebSocketFrameEncoder newWebSocketEncoder();
public io.netty.channel.ChannelFuture close(io.netty.channel.Channel, io.netty.handler.codec.http.websocketx.CloseWebSocketFrame)
{
io.netty.channel.Channel v1;
io.netty.channel.ChannelPromise v3;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
io.netty.handler.codec.http.websocketx.CloseWebSocketFrame v2;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "channel");
v3 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPromise newPromise()>();
v4 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.channel.ChannelFuture close(io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame,io.netty.channel.ChannelPromise)>(v1, v2, v3);
return v4;
}
public io.netty.channel.ChannelFuture close(io.netty.channel.Channel, io.netty.handler.codec.http.websocketx.CloseWebSocketFrame, io.netty.channel.ChannelPromise)
{
io.netty.channel.Channel v1;
io.netty.channel.ChannelPromise v3;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
io.netty.handler.codec.http.websocketx.CloseWebSocketFrame v2;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
v3 := @parameter2: io.netty.channel.ChannelPromise;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "channel");
v4 = specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.channel.ChannelFuture close0(io.netty.channel.ChannelOutboundInvoker,io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame,io.netty.channel.ChannelPromise)>(v1, v1, v2, v3);
return v4;
}
public io.netty.channel.ChannelFuture close(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.websocketx.CloseWebSocketFrame)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v3;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
io.netty.handler.codec.http.websocketx.CloseWebSocketFrame v2;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "ctx");
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
v4 = virtualinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.channel.ChannelFuture close(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame,io.netty.channel.ChannelPromise)>(v1, v2, v3);
return v4;
}
public io.netty.channel.ChannelFuture close(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.websocketx.CloseWebSocketFrame, io.netty.channel.ChannelPromise)
{
io.netty.channel.Channel v4;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v3;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
io.netty.handler.codec.http.websocketx.CloseWebSocketFrame v2;
io.netty.channel.ChannelFuture v5;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
v3 := @parameter2: io.netty.channel.ChannelPromise;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "ctx");
v4 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v5 = specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.channel.ChannelFuture close0(io.netty.channel.ChannelOutboundInvoker,io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.CloseWebSocketFrame,io.netty.channel.ChannelPromise)>(v1, v4, v2, v3);
return v5;
}
private io.netty.channel.ChannelFuture close0(io.netty.channel.ChannelOutboundInvoker, io.netty.channel.Channel, io.netty.handler.codec.http.websocketx.CloseWebSocketFrame, io.netty.channel.ChannelPromise)
{
long v5;
io.netty.channel.Channel v2;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$5 v9;
byte v6;
io.netty.channel.ChannelPromise v4;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
int v8;
io.netty.channel.ChannelOutboundInvoker v1;
io.netty.handler.codec.http.websocketx.CloseWebSocketFrame v3;
boolean v7;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 := @parameter0: io.netty.channel.ChannelOutboundInvoker;
v2 := @parameter1: io.netty.channel.Channel;
v3 := @parameter2: io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
v4 := @parameter3: io.netty.channel.ChannelPromise;
interfaceinvoke v1.<io.netty.channel.ChannelOutboundInvoker: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)>(v3, v4);
v5 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: long forceCloseTimeoutMillis>;
v6 = v5 cmp 0L;
if v6 <= 0 goto label1;
v7 = interfaceinvoke v2.<io.netty.channel.Channel: boolean isActive()>();
if v7 == 0 goto label1;
v8 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: int forceCloseInit>;
if v8 == 0 goto label2;
label1:
return v4;
label2:
v9 = new io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$5;
specialinvoke v9.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker$5: void <init>(io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker,io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker,io.netty.channel.ChannelOutboundInvoker,long)>(v0, v2, v0, v1, v5);
interfaceinvoke v4.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)>(v9);
return v4;
}
protected java.lang.String upgradeUrl(java.net.URI)
{
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v0;
java.lang.String v10, v3, v4, v6, v7, v8;
java.net.URI v1;
boolean v2, v5, v9;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v1 := @parameter0: java.net.URI;
v2 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: boolean absoluteUpgradeUrl>;
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<java.net.URI: java.lang.String toString()>();
return v3;
label1:
v4 = virtualinvoke v1.<java.net.URI: java.lang.String getRawPath()>();
if v4 == null goto label2;
v5 = virtualinvoke v4.<java.lang.String: boolean isEmpty()>();
if v5 == 0 goto label3;
label2:
v6 = "/";
goto label4;
label3:
v6 = v4;
label4:
v7 = v6;
v8 = virtualinvoke v1.<java.net.URI: java.lang.String getRawQuery()>();
if v8 == null goto label5;
v9 = virtualinvoke v8.<java.lang.String: boolean isEmpty()>();
if v9 != 0 goto label5;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v6, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001?\u0001");
goto label6;
label5:
v10 = v7;
label6:
return v10;
}
static java.lang.CharSequence websocketHostValue(java.net.URI)
{
io.netty.util.AsciiString v12, v18, v21, v9;
int v1, v16, v2, v7;
java.lang.String v14, v23, v24, v3, v4, v5;
java.net.URI v0;
boolean v10, v13, v19, v22;
io.netty.handler.codec.http.websocketx.WebSocketScheme v11, v20;
io.netty.handler.codec.http.HttpScheme v15, v17, v6, v8;
v0 := @parameter0: java.net.URI;
v1 = virtualinvoke v0.<java.net.URI: int getPort()>();
v2 = (int) -1;
if v1 != v2 goto label1;
v3 = virtualinvoke v0.<java.net.URI: java.lang.String getHost()>();
return v3;
label1:
v4 = virtualinvoke v0.<java.net.URI: java.lang.String getHost()>();
v5 = virtualinvoke v0.<java.net.URI: java.lang.String getScheme()>();
v6 = <io.netty.handler.codec.http.HttpScheme: io.netty.handler.codec.http.HttpScheme HTTP>;
v7 = virtualinvoke v6.<io.netty.handler.codec.http.HttpScheme: int port()>();
if v1 != v7 goto label5;
v8 = <io.netty.handler.codec.http.HttpScheme: io.netty.handler.codec.http.HttpScheme HTTP>;
v9 = virtualinvoke v8.<io.netty.handler.codec.http.HttpScheme: io.netty.util.AsciiString name()>();
v10 = virtualinvoke v9.<io.netty.util.AsciiString: boolean contentEquals(java.lang.CharSequence)>(v5);
if v10 != 0 goto label2;
v11 = <io.netty.handler.codec.http.websocketx.WebSocketScheme: io.netty.handler.codec.http.websocketx.WebSocketScheme WS>;
v12 = virtualinvoke v11.<io.netty.handler.codec.http.websocketx.WebSocketScheme: io.netty.util.AsciiString name()>();
v13 = virtualinvoke v12.<io.netty.util.AsciiString: boolean contentEquals(java.lang.CharSequence)>(v5);
if v13 == 0 goto label3;
label2:
v14 = v4;
goto label4;
label3:
v14 = staticinvoke <io.netty.util.NetUtil: java.lang.String toSocketAddressString(java.lang.String,int)>(v4, v1);
label4:
return v14;
label5:
v15 = <io.netty.handler.codec.http.HttpScheme: io.netty.handler.codec.http.HttpScheme HTTPS>;
v16 = virtualinvoke v15.<io.netty.handler.codec.http.HttpScheme: int port()>();
if v1 != v16 goto label9;
v17 = <io.netty.handler.codec.http.HttpScheme: io.netty.handler.codec.http.HttpScheme HTTPS>;
v18 = virtualinvoke v17.<io.netty.handler.codec.http.HttpScheme: io.netty.util.AsciiString name()>();
v19 = virtualinvoke v18.<io.netty.util.AsciiString: boolean contentEquals(java.lang.CharSequence)>(v5);
if v19 != 0 goto label6;
v20 = <io.netty.handler.codec.http.websocketx.WebSocketScheme: io.netty.handler.codec.http.websocketx.WebSocketScheme WSS>;
v21 = virtualinvoke v20.<io.netty.handler.codec.http.websocketx.WebSocketScheme: io.netty.util.AsciiString name()>();
v22 = virtualinvoke v21.<io.netty.util.AsciiString: boolean contentEquals(java.lang.CharSequence)>(v5);
if v22 == 0 goto label7;
label6:
v23 = v4;
goto label8;
label7:
v23 = staticinvoke <io.netty.util.NetUtil: java.lang.String toSocketAddressString(java.lang.String,int)>(v4, v1);
label8:
return v23;
label9:
v24 = staticinvoke <io.netty.util.NetUtil: java.lang.String toSocketAddressString(java.lang.String,int)>(v4, v1);
return v24;
}
static java.lang.CharSequence websocketOriginValue(java.net.URI)
{
io.netty.util.AsciiString v4, v7;
java.util.Locale v16;
int v10, v13, v18, v2;
java.lang.String v1, v11, v15, v17, v19, v20, v21;
java.net.URI v0;
boolean v5, v8;
io.netty.handler.codec.http.websocketx.WebSocketScheme v12, v14, v3, v9;
io.netty.handler.codec.http.HttpScheme v6;
v0 := @parameter0: java.net.URI;
v1 = virtualinvoke v0.<java.net.URI: java.lang.String getScheme()>();
v2 = virtualinvoke v0.<java.net.URI: int getPort()>();
v3 = <io.netty.handler.codec.http.websocketx.WebSocketScheme: io.netty.handler.codec.http.websocketx.WebSocketScheme WSS>;
v4 = virtualinvoke v3.<io.netty.handler.codec.http.websocketx.WebSocketScheme: io.netty.util.AsciiString name()>();
v5 = virtualinvoke v4.<io.netty.util.AsciiString: boolean contentEquals(java.lang.CharSequence)>(v1);
if v5 != 0 goto label1;
v6 = <io.netty.handler.codec.http.HttpScheme: io.netty.handler.codec.http.HttpScheme HTTPS>;
v7 = virtualinvoke v6.<io.netty.handler.codec.http.HttpScheme: io.netty.util.AsciiString name()>();
v8 = virtualinvoke v7.<io.netty.util.AsciiString: boolean contentEquals(java.lang.CharSequence)>(v1);
if v8 != 0 goto label1;
if v1 != null goto label2;
v9 = <io.netty.handler.codec.http.websocketx.WebSocketScheme: io.netty.handler.codec.http.websocketx.WebSocketScheme WSS>;
v10 = virtualinvoke v9.<io.netty.handler.codec.http.websocketx.WebSocketScheme: int port()>();
if v2 != v10 goto label2;
label1:
v11 = <io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: java.lang.String HTTPS_SCHEME_PREFIX>;
v12 = <io.netty.handler.codec.http.websocketx.WebSocketScheme: io.netty.handler.codec.http.websocketx.WebSocketScheme WSS>;
v13 = virtualinvoke v12.<io.netty.handler.codec.http.websocketx.WebSocketScheme: int port()>();
goto label3;
label2:
v11 = <io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: java.lang.String HTTP_SCHEME_PREFIX>;
v14 = <io.netty.handler.codec.http.websocketx.WebSocketScheme: io.netty.handler.codec.http.websocketx.WebSocketScheme WS>;
v13 = virtualinvoke v14.<io.netty.handler.codec.http.websocketx.WebSocketScheme: int port()>();
label3:
v15 = virtualinvoke v0.<java.net.URI: java.lang.String getHost()>();
v16 = <java.util.Locale: java.util.Locale US>;
v17 = virtualinvoke v15.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v16);
if v2 == v13 goto label4;
v18 = (int) -1;
if v2 == v18 goto label4;
v19 = staticinvoke <io.netty.util.NetUtil: java.lang.String toSocketAddressString(java.lang.String,int)>(v17, v2);
v20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v11, v19) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
return v20;
label4:
v21 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v11, v17) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
return v21;
}
static void <clinit>()
{
io.netty.handler.codec.http.HttpScheme v0, v2;
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v4;
java.lang.String v1, v3;
v0 = <io.netty.handler.codec.http.HttpScheme: io.netty.handler.codec.http.HttpScheme HTTP>;
v1 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.handler.codec.http.HttpScheme)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001://");
<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: java.lang.String HTTP_SCHEME_PREFIX> = v1;
v2 = <io.netty.handler.codec.http.HttpScheme: io.netty.handler.codec.http.HttpScheme HTTPS>;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.handler.codec.http.HttpScheme)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001://");
<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: java.lang.String HTTPS_SCHEME_PREFIX> = v3;
v4 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lio/netty/handler/codec/http/websocketx/WebSocketClientHandshaker;", "forceCloseInit");
<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: java.util.concurrent.atomic.AtomicIntegerFieldUpdater FORCE_CLOSE_INIT_UPDATER> = v4;
return;
}
}