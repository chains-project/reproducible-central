final class io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe extends java.lang.Object implements io.netty.channel.Channel$Unsafe
{
private final io.netty.channel.VoidChannelPromise unsafeVoidPromise;
private io.netty.channel.RecvByteBufAllocator$Handle recvHandle;
private boolean writeDoneAndNoFlush;
private boolean closeInitiated;
private boolean readEOS;
final io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0;
private void <init>(io.netty.handler.codec.http2.AbstractHttp2StreamChannel)
{
io.netty.channel.VoidChannelPromise v2;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v1, v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new io.netty.channel.VoidChannelPromise;
v3 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
specialinvoke v2.<io.netty.channel.VoidChannelPromise: void <init>(io.netty.channel.Channel,boolean)>(v3, 0);
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.channel.VoidChannelPromise unsafeVoidPromise> = v2;
return;
}
public void connect(java.net.SocketAddress, java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
java.lang.UnsupportedOperationException v5;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.channel.ChannelPromise v3;
java.net.SocketAddress v1, v2;
boolean v4;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = interfaceinvoke v3.<io.netty.channel.ChannelPromise: boolean setUncancellable()>();
if v4 != 0 goto label1;
return;
label1:
v5 = new java.lang.UnsupportedOperationException;
specialinvoke v5.<java.lang.UnsupportedOperationException: void <init>()>();
interfaceinvoke v3.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v5);
return;
}
public io.netty.channel.RecvByteBufAllocator$Handle recvBufAllocHandle()
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v2, v7;
io.netty.channel.RecvByteBufAllocator v4;
io.netty.channel.RecvByteBufAllocator$Handle v1, v5, v6, v9;
io.netty.channel.ChannelConfig v3, v8;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.channel.RecvByteBufAllocator$Handle recvHandle>;
if v1 != null goto label1;
v2 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v3 = virtualinvoke v2.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelConfig config()>();
v4 = interfaceinvoke v3.<io.netty.channel.ChannelConfig: io.netty.channel.RecvByteBufAllocator getRecvByteBufAllocator()>();
v5 = interfaceinvoke v4.<io.netty.channel.RecvByteBufAllocator: io.netty.channel.RecvByteBufAllocator$Handle newHandle()>();
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.channel.RecvByteBufAllocator$Handle recvHandle> = v5;
v6 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.channel.RecvByteBufAllocator$Handle recvHandle>;
v7 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v8 = virtualinvoke v7.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelConfig config()>();
interfaceinvoke v6.<io.netty.channel.RecvByteBufAllocator$Handle: void reset(io.netty.channel.ChannelConfig)>(v8);
label1:
v9 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.channel.RecvByteBufAllocator$Handle recvHandle>;
return v9;
}
public java.net.SocketAddress localAddress()
{
io.netty.channel.Channel v2;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
java.net.SocketAddress v4;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v1;
io.netty.channel.Channel$Unsafe v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.Channel parent()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.Channel$Unsafe unsafe()>();
v4 = interfaceinvoke v3.<io.netty.channel.Channel$Unsafe: java.net.SocketAddress localAddress()>();
return v4;
}
public java.net.SocketAddress remoteAddress()
{
io.netty.channel.Channel v2;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
java.net.SocketAddress v4;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v1;
io.netty.channel.Channel$Unsafe v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.Channel parent()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.Channel$Unsafe unsafe()>();
v4 = interfaceinvoke v3.<io.netty.channel.Channel$Unsafe: java.net.SocketAddress remoteAddress()>();
return v4;
}
public void register(io.netty.channel.EventLoop, io.netty.channel.ChannelPromise)
{
java.lang.UnsupportedOperationException v6;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v10, v12, v4, v7, v8;
io.netty.channel.ChannelPipeline v13, v9;
io.netty.channel.EventLoop v1;
io.netty.channel.ChannelPromise v2;
boolean v11, v3, v5;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: io.netty.channel.EventLoop;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelPromise: boolean setUncancellable()>();
if v3 != 0 goto label1;
return;
label1:
v4 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v5 = v4.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean registered>;
if v5 == 0 goto label2;
v6 = new java.lang.UnsupportedOperationException;
specialinvoke v6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Re-register is not supported");
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v6);
return;
label2:
v7 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v7.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean registered> = 1;
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
v8 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v9 = virtualinvoke v8.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v9.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelRegistered()>();
v10 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v11 = virtualinvoke v10.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean isActive()>();
if v11 == 0 goto label3;
v12 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v13 = virtualinvoke v12.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v13.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelActive()>();
label3:
return;
}
public void bind(java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
java.lang.UnsupportedOperationException v4;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.channel.ChannelPromise v2;
java.net.SocketAddress v1;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelPromise: boolean setUncancellable()>();
if v3 != 0 goto label1;
return;
label1:
v4 = new java.lang.UnsupportedOperationException;
specialinvoke v4.<java.lang.UnsupportedOperationException: void <init>()>();
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v4);
return;
}
public void disconnect(io.netty.channel.ChannelPromise)
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.channel.ChannelPromise v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void close(io.netty.channel.ChannelPromise)>(v1);
return;
}
public void close(io.netty.channel.ChannelPromise)
{
io.netty.handler.codec.http2.Http2Error v2;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.channel.ChannelPromise v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error CANCEL>;
virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void close(io.netty.channel.ChannelPromise,io.netty.handler.codec.http2.Http2Error)>(v1, v2);
return;
}
void close(io.netty.channel.ChannelPromise, io.netty.handler.codec.http2.Http2Error)
{
io.netty.channel.ChannelPromise v1, v10, v29, v38, v39, v6;
io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream v20;
io.netty.handler.codec.http2.DefaultHttp2ResetFrame v23, v26;
boolean v14, v17, v18, v22, v3, v4, v7, v8;
io.netty.handler.codec.http2.Http2Error v2;
io.netty.handler.codec.http2.Http2FrameStream v25;
java.util.Queue v31, v33;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v12, v13, v15, v19, v24, v27, v30, v32, v35, v36, v37, v5, v9;
int v21;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe$1 v11;
io.netty.channel.Channel$Unsafe v28;
io.netty.channel.Channel v16;
java.lang.Object v34;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 := @parameter1: io.netty.handler.codec.http2.Http2Error;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelPromise: boolean setUncancellable()>();
if v3 != 0 goto label1;
return;
label1:
v4 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: boolean closeInitiated>;
if v4 == 0 goto label4;
v5 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v6 = v5.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPromise closePromise>;
v7 = interfaceinvoke v6.<io.netty.channel.ChannelPromise: boolean isDone()>();
if v7 == 0 goto label2;
interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
goto label3;
label2:
v8 = v1 instanceof io.netty.channel.VoidChannelPromise;
if v8 != 0 goto label3;
v9 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v10 = v9.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPromise closePromise>;
v11 = new io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe$1;
specialinvoke v11.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe$1: void <init>(io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe,io.netty.channel.ChannelPromise)>(v0, v1);
interfaceinvoke v10.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)>(v11);
label3:
return;
label4:
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: boolean closeInitiated> = 1;
v12 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v12.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean readCompletePending> = 0;
v13 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v14 = virtualinvoke v13.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean isActive()>();
v15 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v16 = virtualinvoke v15.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.Channel parent()>();
v17 = interfaceinvoke v16.<io.netty.channel.Channel: boolean isActive()>();
if v17 == 0 goto label5;
v18 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: boolean readEOS>;
if v18 != 0 goto label5;
v19 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v20 = v19.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream stream>;
v21 = virtualinvoke v20.<io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream: int id()>();
v22 = staticinvoke <io.netty.handler.codec.http2.Http2CodecUtil: boolean isStreamIdValid(int)>(v21);
if v22 == 0 goto label5;
v23 = new io.netty.handler.codec.http2.DefaultHttp2ResetFrame;
specialinvoke v23.<io.netty.handler.codec.http2.DefaultHttp2ResetFrame: void <init>(io.netty.handler.codec.http2.Http2Error)>(v2);
v24 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v25 = virtualinvoke v24.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.Http2FrameStream stream()>();
v26 = virtualinvoke v23.<io.netty.handler.codec.http2.DefaultHttp2ResetFrame: io.netty.handler.codec.http2.DefaultHttp2ResetFrame stream(io.netty.handler.codec.http2.Http2FrameStream)>(v25);
v27 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v28 = virtualinvoke v27.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.Channel$Unsafe unsafe()>();
v29 = interfaceinvoke v28.<io.netty.channel.Channel$Unsafe: io.netty.channel.ChannelPromise voidPromise()>();
virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void write(java.lang.Object,io.netty.channel.ChannelPromise)>(v26, v29);
virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void flush()>();
label5:
v30 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v31 = v30.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: java.util.Queue inboundBuffer>;
if v31 == null goto label8;
label6:
v32 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v33 = v32.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: java.util.Queue inboundBuffer>;
v34 = interfaceinvoke v33.<java.util.Queue: java.lang.Object poll()>();
if v34 == null goto label7;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v34);
goto label6;
label7:
v35 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v35.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: java.util.Queue inboundBuffer> = null;
label8:
v36 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v36.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean outboundClosed> = 1;
v37 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v38 = v37.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPromise closePromise>;
interfaceinvoke v38.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
v39 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.channel.ChannelPromise voidPromise()>();
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void fireChannelInactiveAndDeregister(io.netty.channel.ChannelPromise,boolean)>(v39, v14);
return;
}
public void closeForcibly()
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.channel.ChannelPromise v3;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v1;
io.netty.channel.Channel$Unsafe v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.Channel$Unsafe unsafe()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel$Unsafe: io.netty.channel.ChannelPromise voidPromise()>();
virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void close(io.netty.channel.ChannelPromise)>(v3);
return;
}
public void deregister(io.netty.channel.ChannelPromise)
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.channel.ChannelPromise v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void fireChannelInactiveAndDeregister(io.netty.channel.ChannelPromise,boolean)>(v1, 0);
return;
}
private void fireChannelInactiveAndDeregister(io.netty.channel.ChannelPromise, boolean)
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.channel.ChannelPromise v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v4;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe$2 v6;
boolean v2, v3, v5;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 := @parameter1: boolean;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelPromise: boolean setUncancellable()>();
if v3 != 0 goto label1;
return;
label1:
v4 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v5 = v4.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean registered>;
if v5 != 0 goto label2;
interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
return;
label2:
v6 = new io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe$2;
specialinvoke v6.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe$2: void <init>(io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe,boolean,io.netty.channel.ChannelPromise)>(v0, v2, v1);
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void invokeLater(java.lang.Runnable)>(v6);
return;
}
private void safeSetSuccess(io.netty.channel.ChannelPromise)
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.channel.ChannelPromise v1;
io.netty.util.internal.logging.InternalLogger v4;
boolean v2, v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = v1 instanceof io.netty.channel.VoidChannelPromise;
if v2 != 0 goto label1;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelPromise: boolean trySuccess()>();
if v3 != 0 goto label1;
v4 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v4.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object)>("Failed to mark a promise as success because it is done already: {}", v1);
label1:
return;
}
private void invokeLater(java.lang.Runnable)
{
java.util.concurrent.RejectedExecutionException v4;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v2;
io.netty.util.internal.logging.InternalLogger v5;
io.netty.channel.EventLoop v3;
java.lang.Runnable v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: java.lang.Runnable;
label1:
v2 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v3 = virtualinvoke v2.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.EventLoop eventLoop()>();
interfaceinvoke v3.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v1);
label2:
goto label4;
label3:
v4 := @caughtexception;
v5 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Throwable)>("Can\'t invoke task later as EventLoop rejected it", v4);
label4:
return;
catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
}
public void beginRead()
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v1, v10, v4, v8;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus v11, v5, v9;
int[] v3;
int v6, v7;
boolean v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean isActive()>();
if v2 != 0 goto label1;
return;
label1:
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void updateLocalWindowIfNeeded()>();
v3 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel$5: int[] $SwitchMap$io$netty$handler$codec$http2$AbstractHttp2StreamChannel$ReadStatus>;
v4 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v5 = v4.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus readStatus>;
v6 = virtualinvoke v5.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus: int ordinal()>();
v7 = v3[v6];
lookupswitch(v7)
{
case 1: goto label2;
case 2: goto label3;
default: goto label4;
};
label2:
v8 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v9 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus IN_PROGRESS>;
v8.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus readStatus> = v9;
virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void doBeginRead()>();
goto label4;
label3:
v10 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v11 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus REQUESTED>;
v10.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus readStatus> = v11;
label4:
return;
}
private java.lang.Object pollQueuedMessage()
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v1, v4;
java.lang.Object v3;
java.util.Queue v2, v5;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v2 = v1.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: java.util.Queue inboundBuffer>;
if v2 != null goto label1;
v3 = null;
goto label2;
label1:
v4 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v5 = v4.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: java.util.Queue inboundBuffer>;
v3 = interfaceinvoke v5.<java.util.Queue: java.lang.Object poll()>();
label2:
return v3;
}
void doBeginRead()
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0, v7;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v1, v15, v18, v6, v9;
boolean v11, v12, v13, v16, v17, v5;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus v2, v3;
io.netty.channel.RecvByteBufAllocator$Handle v8;
io.netty.channel.ChannelConfig v10;
java.lang.Object v14, v4;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
label1:
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v2 = v1.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus readStatus>;
v3 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus IDLE>;
if v2 == v3 goto label8;
v4 = specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: java.lang.Object pollQueuedMessage()>();
if v4 != null goto label3;
v5 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: boolean readEOS>;
if v5 == 0 goto label2;
v6 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v7 = v6.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe unsafe>;
virtualinvoke v7.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void closeForcibly()>();
label2:
virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void flush()>();
goto label8;
label3:
v8 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.channel.RecvByteBufAllocator$Handle recvBufAllocHandle()>();
v9 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v10 = virtualinvoke v9.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelConfig config()>();
interfaceinvoke v8.<io.netty.channel.RecvByteBufAllocator$Handle: void reset(io.netty.channel.ChannelConfig)>(v10);
v11 = 0;
label4:
virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void doRead0(io.netty.handler.codec.http2.Http2Frame,io.netty.channel.RecvByteBufAllocator$Handle)>(v4, v8);
v12 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: boolean readEOS>;
if v12 != 0 goto label5;
v13 = interfaceinvoke v8.<io.netty.channel.RecvByteBufAllocator$Handle: boolean continueReading()>();
v11 = v13;
if v13 == 0 goto label6;
label5:
v14 = specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: java.lang.Object pollQueuedMessage()>();
v4 = v14;
if v14 != null goto label4;
label6:
if v11 == 0 goto label7;
v15 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v16 = virtualinvoke v15.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean isParentReadInProgress()>();
if v16 == 0 goto label7;
v17 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: boolean readEOS>;
if v17 != 0 goto label7;
v18 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
specialinvoke v18.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: void maybeAddChannelToReadCompletePendingQueue()>();
goto label1;
label7:
virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void notifyReadComplete(io.netty.channel.RecvByteBufAllocator$Handle,boolean)>(v8, 1);
goto label1;
label8:
return;
}
void readEOS()
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: boolean readEOS> = 1;
return;
}
private void updateLocalWindowIfNeeded()
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v1, v10, v15, v16, v3, v5, v6, v7;
io.netty.channel.ChannelHandlerContext v8;
io.netty.channel.ChannelFutureListener v17;
int v2, v4;
io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream v11;
boolean v14;
io.netty.channel.ChannelFuture v13;
io.netty.handler.codec.http2.DefaultHttp2WindowUpdateFrame v12, v9;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v2 = v1.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: int flowControlledBytes>;
if v2 == 0 goto label2;
v3 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v4 = v3.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: int flowControlledBytes>;
v5 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v5.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: int flowControlledBytes> = 0;
v6 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v7 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v8 = virtualinvoke v7.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelHandlerContext parentContext()>();
v9 = new io.netty.handler.codec.http2.DefaultHttp2WindowUpdateFrame;
specialinvoke v9.<io.netty.handler.codec.http2.DefaultHttp2WindowUpdateFrame: void <init>(int)>(v4);
v10 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v11 = v10.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream stream>;
v12 = virtualinvoke v9.<io.netty.handler.codec.http2.DefaultHttp2WindowUpdateFrame: io.netty.handler.codec.http2.DefaultHttp2WindowUpdateFrame stream(io.netty.handler.codec.http2.Http2FrameStream)>(v11);
v13 = virtualinvoke v6.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelFuture write0(io.netty.channel.ChannelHandlerContext,java.lang.Object)>(v8, v12);
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: boolean writeDoneAndNoFlush> = 1;
v14 = interfaceinvoke v13.<io.netty.channel.ChannelFuture: boolean isDone()>();
if v14 == 0 goto label1;
v15 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2StreamChannel: void windowUpdateFrameWriteComplete(io.netty.channel.ChannelFuture,io.netty.channel.Channel)>(v13, v15);
goto label2;
label1:
v16 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v17 = v16.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelFutureListener windowUpdateFrameWriteListener>;
interfaceinvoke v13.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v17);
label2:
return;
}
void notifyReadComplete(io.netty.channel.RecvByteBufAllocator$Handle, boolean)
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0, v17;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v11, v13, v16, v3, v5, v6, v9;
boolean v15, v2, v4;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus v10, v12, v7, v8;
io.netty.channel.ChannelPipeline v14;
io.netty.channel.RecvByteBufAllocator$Handle v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: io.netty.channel.RecvByteBufAllocator$Handle;
v2 := @parameter1: boolean;
v3 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v4 = v3.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean readCompletePending>;
if v4 != 0 goto label1;
if v2 != 0 goto label1;
return;
label1:
v5 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v5.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean readCompletePending> = 0;
v6 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v7 = v6.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus readStatus>;
v8 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus REQUESTED>;
if v7 != v8 goto label2;
v9 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v10 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus IN_PROGRESS>;
v9.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus readStatus> = v10;
goto label3;
label2:
v11 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v12 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus IDLE>;
v11.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus readStatus> = v12;
label3:
interfaceinvoke v1.<io.netty.channel.RecvByteBufAllocator$Handle: void readComplete()>();
v13 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v14 = virtualinvoke v13.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v14.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelReadComplete()>();
virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void flush()>();
v15 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: boolean readEOS>;
if v15 == 0 goto label4;
v16 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v17 = v16.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe unsafe>;
virtualinvoke v17.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void closeForcibly()>();
label4:
return;
}
void doRead0(io.netty.handler.codec.http2.Http2Frame, io.netty.channel.RecvByteBufAllocator$Handle)
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v5, v6, v9;
io.netty.channel.ChannelPipeline v10;
io.netty.handler.codec.http2.Http2Frame v1;
io.netty.channel.RecvByteBufAllocator$Handle v2;
int v4, v7, v8;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Frame;
v2 := @parameter1: io.netty.channel.RecvByteBufAllocator$Handle;
v3 = v1 instanceof io.netty.handler.codec.http2.Http2DataFrame;
if v3 == 0 goto label1;
v4 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2DataFrame: int initialFlowControlledBytes()>();
v5 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v6 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v7 = v6.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: int flowControlledBytes>;
v8 = v7 + v4;
v5.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: int flowControlledBytes> = v8;
goto label2;
label1:
v4 = 9;
label2:
interfaceinvoke v2.<io.netty.channel.RecvByteBufAllocator$Handle: void attemptedBytesRead(int)>(v4);
interfaceinvoke v2.<io.netty.channel.RecvByteBufAllocator$Handle: void lastBytesRead(int)>(v4);
interfaceinvoke v2.<io.netty.channel.RecvByteBufAllocator$Handle: void incMessagesRead(int)>(1);
v9 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v10 = virtualinvoke v9.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v10.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelRead(java.lang.Object)>(v1);
return;
}
public void write(java.lang.Object, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v20;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v13, v4, v6;
io.netty.handler.codec.http2.Http2StreamFrame v12, v15;
io.netty.channel.ChannelPromise v2;
java.lang.String v16, v18, v19;
boolean v11, v3, v5, v7, v8, v9;
java.nio.channels.ClosedChannelException v10;
java.lang.IllegalArgumentException v17;
io.netty.handler.codec.http2.Http2FrameStream v14;
java.lang.Object v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelPromise: boolean setUncancellable()>();
if v3 != 0 goto label1;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v1);
return;
label1:
v4 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v5 = virtualinvoke v4.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean isActive()>();
if v5 == 0 goto label2;
v6 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v7 = v6.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean outboundClosed>;
if v7 == 0 goto label3;
v8 = v1 instanceof io.netty.handler.codec.http2.Http2HeadersFrame;
if v8 != 0 goto label2;
v9 = v1 instanceof io.netty.handler.codec.http2.Http2DataFrame;
if v9 == 0 goto label3;
label2:
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v1);
v10 = new java.nio.channels.ClosedChannelException;
specialinvoke v10.<java.nio.channels.ClosedChannelException: void <init>()>();
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v10);
return;
label3:
v11 = v1 instanceof io.netty.handler.codec.http2.Http2StreamFrame;
if v11 == 0 goto label4;
v12 = specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.Http2StreamFrame validateStreamFrame(io.netty.handler.codec.http2.Http2StreamFrame)>(v1);
v13 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v14 = virtualinvoke v13.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.Http2FrameStream stream()>();
v15 = interfaceinvoke v12.<io.netty.handler.codec.http2.Http2StreamFrame: io.netty.handler.codec.http2.Http2StreamFrame stream(io.netty.handler.codec.http2.Http2FrameStream)>(v14);
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void writeHttp2StreamFrame(io.netty.handler.codec.http2.Http2StreamFrame,io.netty.channel.ChannelPromise)>(v15, v2);
goto label7;
label4:
v16 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v1);
v17 = new java.lang.IllegalArgumentException;
v18 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(class "Lio/netty/handler/codec/http2/Http2StreamFrame;");
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v18, v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Message must be an \u0001: \u0001");
specialinvoke v17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v19);
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v17);
label5:
goto label7;
label6:
v20 := @caughtexception;
interfaceinvoke v2.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v20);
label7:
return;
catch java.lang.Throwable from label3 to label5 with label6;
}
private void writeHttp2StreamFrame(io.netty.handler.codec.http2.Http2StreamFrame, io.netty.channel.ChannelPromise)
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v13, v16, v17, v18, v24, v3, v5;
io.netty.handler.codec.http2.Http2StreamFrame v1;
io.netty.channel.MessageSizeEstimator$Handle v22;
io.netty.channel.ChannelHandlerContext v19;
io.netty.channel.ChannelPromise v2;
int v23, v7;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe$3 v25;
java.lang.String v11, v12;
boolean v14, v15, v21, v4, v8, v9;
java.lang.IllegalArgumentException v10;
io.netty.channel.ChannelFuture v20;
io.netty.handler.codec.http2.Http2FrameStream v6;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: io.netty.handler.codec.http2.Http2StreamFrame;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v4 = v3.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean firstFrameWritten>;
if v4 != 0 goto label1;
v5 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v6 = virtualinvoke v5.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.Http2FrameStream stream()>();
v7 = interfaceinvoke v6.<io.netty.handler.codec.http2.Http2FrameStream: int id()>();
v8 = staticinvoke <io.netty.handler.codec.http2.Http2CodecUtil: boolean isStreamIdValid(int)>(v7);
if v8 != 0 goto label1;
v9 = v1 instanceof io.netty.handler.codec.http2.Http2HeadersFrame;
if v9 != 0 goto label1;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v1);
v10 = new java.lang.IllegalArgumentException;
v11 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2StreamFrame: java.lang.String name()>();
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The first frame must be a headers frame. Was: \u0001");
specialinvoke v10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v12);
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v10);
return;
label1:
v13 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v14 = v13.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean firstFrameWritten>;
if v14 == 0 goto label2;
v15 = 0;
goto label3;
label2:
v16 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v15 = v16.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean firstFrameWritten>;
label3:
v17 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v18 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v19 = virtualinvoke v18.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelHandlerContext parentContext()>();
v20 = virtualinvoke v17.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelFuture write0(io.netty.channel.ChannelHandlerContext,java.lang.Object)>(v19, v1);
v21 = interfaceinvoke v20.<io.netty.channel.ChannelFuture: boolean isDone()>();
if v21 == 0 goto label5;
if v15 == 0 goto label4;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void firstWriteComplete(io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)>(v20, v2);
goto label6;
label4:
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void writeComplete(io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)>(v20, v2);
goto label6;
label5:
v22 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel$FlowControlledFrameSizeEstimator: io.netty.channel.MessageSizeEstimator$Handle HANDLE_INSTANCE>;
v23 = interfaceinvoke v22.<io.netty.channel.MessageSizeEstimator$Handle: int size(java.lang.Object)>(v1);
v24 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
specialinvoke v24.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: void incrementPendingOutboundBytes(long,boolean)>(v23, 0);
v25 = new io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe$3;
specialinvoke v25.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe$3: void <init>(io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe,boolean,io.netty.channel.ChannelPromise,long)>(v0, v15, v2, v23);
interfaceinvoke v20.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v25);
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: boolean writeDoneAndNoFlush> = 1;
label6:
return;
}
private void firstWriteComplete(io.netty.channel.ChannelFuture, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v3, v4;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.channel.ChannelPromise v2;
io.netty.channel.ChannelFuture v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: io.netty.channel.ChannelFuture;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: java.lang.Throwable cause()>();
if v3 != null goto label1;
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
goto label2;
label1:
virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void closeForcibly()>();
v4 = specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: java.lang.Throwable wrapStreamClosedError(java.lang.Throwable)>(v3);
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v4);
label2:
return;
}
private void writeComplete(io.netty.channel.ChannelFuture, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v3, v4;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2StreamChannelConfig v7;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v6, v9;
io.netty.channel.ChannelFuture v1;
io.netty.channel.ChannelPromise v2;
boolean v5, v8;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: io.netty.channel.ChannelFuture;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: java.lang.Throwable cause()>();
if v3 != null goto label1;
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
goto label4;
label1:
v4 = specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: java.lang.Throwable wrapStreamClosedError(java.lang.Throwable)>(v3);
v5 = v4 instanceof java.io.IOException;
if v5 == 0 goto label3;
v6 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v7 = v6.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2StreamChannelConfig config>;
v8 = virtualinvoke v7.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2StreamChannelConfig: boolean isAutoClose()>();
if v8 == 0 goto label2;
virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void closeForcibly()>();
goto label3;
label2:
v9 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v9.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean outboundClosed> = 1;
label3:
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v4);
label4:
return;
}
private java.lang.Throwable wrapStreamClosedError(java.lang.Throwable)
{
java.lang.Throwable v1, v6;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
java.nio.channels.ClosedChannelException v5;
io.netty.handler.codec.http2.Http2Error v3, v4;
boolean v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: java.lang.Throwable;
v2 = v1 instanceof io.netty.handler.codec.http2.Http2Exception;
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Error error()>();
v4 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error STREAM_CLOSED>;
if v3 != v4 goto label1;
v5 = new java.nio.channels.ClosedChannelException;
specialinvoke v5.<java.nio.channels.ClosedChannelException: void <init>()>();
v6 = virtualinvoke v5.<java.nio.channels.ClosedChannelException: java.lang.Throwable initCause(java.lang.Throwable)>(v1);
return v6;
label1:
return v1;
}
private io.netty.handler.codec.http2.Http2StreamFrame validateStreamFrame(io.netty.handler.codec.http2.Http2StreamFrame)
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v4;
io.netty.handler.codec.http2.Http2StreamFrame v1;
java.lang.IllegalArgumentException v7;
io.netty.handler.codec.http2.Http2FrameStream v2, v3, v8;
io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream v5;
java.lang.String v6, v9;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 := @parameter0: io.netty.handler.codec.http2.Http2StreamFrame;
v2 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2StreamFrame: io.netty.handler.codec.http2.Http2FrameStream stream()>();
if v2 == null goto label1;
v3 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2StreamFrame: io.netty.handler.codec.http2.Http2FrameStream stream()>();
v4 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v5 = v4.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream stream>;
if v3 == v5 goto label1;
v6 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v1);
v7 = new java.lang.IllegalArgumentException;
v8 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2StreamFrame: io.netty.handler.codec.http2.Http2FrameStream stream()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.handler.codec.http2.Http2FrameStream,java.lang.String)>(v8, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Stream \u0001 must not be set on the frame: \u0001");
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v9);
throw v7;
label1:
return v1;
}
public void flush()
{
io.netty.channel.ChannelHandlerContext v6;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v2, v4, v5;
boolean v1, v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: boolean writeDoneAndNoFlush>;
if v1 == 0 goto label1;
v2 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v3 = virtualinvoke v2.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean isParentReadInProgress()>();
if v3 == 0 goto label2;
label1:
return;
label2:
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: boolean writeDoneAndNoFlush> = 0;
v4 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v5 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.handler.codec.http2.AbstractHttp2StreamChannel this$0>;
v6 = virtualinvoke v5.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelHandlerContext parentContext()>();
virtualinvoke v4.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: void flush0(io.netty.channel.ChannelHandlerContext)>(v6);
return;
}
public io.netty.channel.ChannelPromise voidPromise()
{
io.netty.channel.VoidChannelPromise v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.channel.VoidChannelPromise unsafeVoidPromise>;
return v1;
}
public io.netty.channel.ChannelOutboundBuffer outboundBuffer()
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
return null;
}
}