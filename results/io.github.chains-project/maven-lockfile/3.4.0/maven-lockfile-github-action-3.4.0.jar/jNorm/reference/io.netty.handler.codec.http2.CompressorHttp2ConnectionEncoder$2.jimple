class io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder$2 extends io.netty.handler.codec.http2.Http2ConnectionAdapter
{
final io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder this$0;
void <init>(io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder)
{
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder$2 v0;
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder v1;
v0 := @this: io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder$2;
v1 := @parameter0: io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder;
v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder$2: io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder this$0> = v1;
specialinvoke v0.<io.netty.handler.codec.http2.Http2ConnectionAdapter: void <init>()>();
return;
}
public void onStreamRemoved(io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder$2 v0;
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder v2, v5;
io.netty.handler.codec.http2.Http2Connection$PropertyKey v3;
io.netty.handler.codec.http2.Http2Stream v1;
java.lang.Object v4;
v0 := @this: io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder$2;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder$2: io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder this$0>;
v3 = v2.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection$PropertyKey propertyKey>;
v4 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Stream: java.lang.Object getProperty(io.netty.handler.codec.http2.Http2Connection$PropertyKey)>(v3);
if v4 == null goto label1;
v5 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder$2: io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder this$0>;
virtualinvoke v5.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: void cleanup(io.netty.handler.codec.http2.Http2Stream,io.netty.channel.embedded.EmbeddedChannel)>(v1, v4);
label1:
return;
}
}