class io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState extends java.lang.Object implements io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState
{
private final io.netty.handler.codec.http2.Http2Stream stream;
private int window;
private int processedWindow;
private int initialStreamWindowSize;
private float streamWindowUpdateRatio;
private int lowerBound;
private boolean endOfStream;
static final boolean $assertionsDisabled;
final io.netty.handler.codec.http2.DefaultHttp2LocalFlowController this$0;
void <init>(io.netty.handler.codec.http2.DefaultHttp2LocalFlowController, io.netty.handler.codec.http2.Http2Stream, int)
{
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v1;
int v3;
io.netty.handler.codec.http2.Http2Stream v2;
float v4;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState;
v1 := @parameter0: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v2 := @parameter1: io.netty.handler.codec.http2.Http2Stream;
v3 := @parameter2: int;
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: io.netty.handler.codec.http2.Http2Stream stream> = v2;
virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: void window(int)>(v3);
v4 = v1.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: float windowUpdateRatio>;
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: float streamWindowUpdateRatio> = v4;
return;
}
public void window(int)
{
io.netty.util.concurrent.EventExecutor v7;
java.lang.AssertionError v9;
io.netty.channel.ChannelHandlerContext v4, v6;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v3, v5;
int v1;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState v0;
boolean v2, v8;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState;
v1 := @parameter0: int;
v2 = <io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController this$0>;
v4 = v3.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx>;
if v4 == null goto label1;
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController this$0>;
v6 = v5.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx>;
v7 = interfaceinvoke v6.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v8 = interfaceinvoke v7.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v8 != 0 goto label1;
v9 = new java.lang.AssertionError;
specialinvoke v9.<java.lang.AssertionError: void <init>()>();
throw v9;
label1:
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int initialStreamWindowSize> = v1;
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int processedWindow> = v1;
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int window> = v1;
return;
}
public int windowSize()
{
int v1;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int window>;
return v1;
}
public int initialWindowSize()
{
int v1;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int initialStreamWindowSize>;
return v1;
}
public void endOfStream(boolean)
{
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState v0;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState;
v1 := @parameter0: boolean;
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: boolean endOfStream> = v1;
return;
}
public float windowUpdateRatio()
{
float v1;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: float streamWindowUpdateRatio>;
return v1;
}
public void windowUpdateRatio(float)
{
io.netty.util.concurrent.EventExecutor v7;
java.lang.AssertionError v9;
io.netty.channel.ChannelHandlerContext v4, v6;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v3, v5;
float v1;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState v0;
boolean v2, v8;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState;
v1 := @parameter0: float;
v2 = <io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController this$0>;
v4 = v3.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx>;
if v4 == null goto label1;
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController this$0>;
v6 = v5.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx>;
v7 = interfaceinvoke v6.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v8 = interfaceinvoke v7.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v8 != 0 goto label1;
v9 = new java.lang.AssertionError;
specialinvoke v9.<java.lang.AssertionError: void <init>()>();
throw v9;
label1:
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: float streamWindowUpdateRatio> = v1;
return;
}
public void incrementInitialStreamWindow(int)
{
long v3, v4, v5;
int v1, v2, v6, v7, v8, v9;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int initialStreamWindowSize>;
v3 = v2 + v1;
v4 = staticinvoke <java.lang.Math: long max(long,long)>(0L, v3);
v5 = staticinvoke <java.lang.Math: long min(long,long)>(2147483647L, v4);
v6 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int initialStreamWindowSize>;
v7 = v5 - v6;
v8 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int initialStreamWindowSize>;
v9 = v8 + v7;
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int initialStreamWindowSize> = v9;
return;
}
public void incrementFlowControlWindows(int) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v7;
java.lang.Integer v10;
io.netty.handler.codec.http2.Http2Exception v11;
int v1, v12, v13, v14, v15, v16, v2, v3, v5, v9;
io.netty.handler.codec.http2.Http2Stream v4, v8;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState v0;
io.netty.handler.codec.http2.Http2Error v6;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState;
v1 := @parameter0: int;
if v1 <= 0 goto label1;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int window>;
v3 = 2147483647 - v1;
if v2 <= v3 goto label1;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: io.netty.handler.codec.http2.Http2Stream stream>;
v5 = interfaceinvoke v4.<io.netty.handler.codec.http2.Http2Stream: int id()>();
v6 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error FLOW_CONTROL_ERROR>;
v7 = newarray (java.lang.Object)[1];
v8 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: io.netty.handler.codec.http2.Http2Stream stream>;
v9 = interfaceinvoke v8.<io.netty.handler.codec.http2.Http2Stream: int id()>();
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v9);
v7[0] = v10;
v11 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v5, v6, "Flow control window overflowed for stream: %d", v7);
throw v11;
label1:
v12 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int window>;
v13 = v12 + v1;
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int window> = v13;
v14 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int processedWindow>;
v15 = v14 + v1;
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int processedWindow> = v15;
v16 = staticinvoke <java.lang.Math: int min(int,int)>(v1, 0);
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int lowerBound> = v16;
return;
}
public void receiveFlowControlledFrame(int) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v11;
java.lang.AssertionError v3;
java.lang.Integer v14;
io.netty.handler.codec.http2.Http2Exception v15;
int v1, v13, v4, v5, v6, v7, v9;
io.netty.handler.codec.http2.Http2Stream v12, v8;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState v0;
boolean v2;
io.netty.handler.codec.http2.Http2Error v10;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState;
v1 := @parameter0: int;
v2 = <io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
if v1 >= 0 goto label1;
v3 = new java.lang.AssertionError;
specialinvoke v3.<java.lang.AssertionError: void <init>()>();
throw v3;
label1:
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int window>;
v5 = v4 - v1;
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int window> = v5;
v6 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int window>;
v7 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int lowerBound>;
if v6 >= v7 goto label2;
v8 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: io.netty.handler.codec.http2.Http2Stream stream>;
v9 = interfaceinvoke v8.<io.netty.handler.codec.http2.Http2Stream: int id()>();
v10 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error FLOW_CONTROL_ERROR>;
v11 = newarray (java.lang.Object)[1];
v12 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: io.netty.handler.codec.http2.Http2Stream stream>;
v13 = interfaceinvoke v12.<io.netty.handler.codec.http2.Http2Stream: int id()>();
v14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v13);
v11[0] = v14;
v15 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v9, v10, "Flow control window exceeded for stream: %d", v11);
throw v15;
label2:
return;
}
private void returnProcessedBytes(int) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v8;
java.lang.Integer v11;
io.netty.handler.codec.http2.Http2Exception v12;
int v1, v10, v13, v14, v2, v3, v4, v6;
io.netty.handler.codec.http2.Http2Error v7;
io.netty.handler.codec.http2.Http2Stream v5, v9;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int processedWindow>;
v3 = v2 - v1;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int window>;
if v3 >= v4 goto label1;
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: io.netty.handler.codec.http2.Http2Stream stream>;
v6 = interfaceinvoke v5.<io.netty.handler.codec.http2.Http2Stream: int id()>();
v7 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error INTERNAL_ERROR>;
v8 = newarray (java.lang.Object)[1];
v9 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: io.netty.handler.codec.http2.Http2Stream stream>;
v10 = interfaceinvoke v9.<io.netty.handler.codec.http2.Http2Stream: int id()>();
v11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v10);
v8[0] = v11;
v12 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v6, v7, "Attempting to return too many bytes for stream %d", v8);
throw v12;
label1:
v13 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int processedWindow>;
v14 = v13 - v1;
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int processedWindow> = v14;
return;
}
public boolean consumeBytes(int) throws io.netty.handler.codec.http2.Http2Exception
{
int v1;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState v0;
boolean v2;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: void returnProcessedBytes(int)>(v1);
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: boolean writeWindowUpdateIfNeeded()>();
return v2;
}
public int unconsumedBytes()
{
int v1, v2, v3;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int processedWindow>;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int window>;
v3 = v1 - v2;
return v3;
}
public boolean writeWindowUpdateIfNeeded() throws io.netty.handler.codec.http2.Http2Exception
{
int v2, v5, v8;
io.netty.handler.codec.http2.Http2Stream v3;
float v6, v7;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState v0;
boolean v1, v4;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: boolean endOfStream>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int initialStreamWindowSize>;
if v2 <= 0 goto label1;
v3 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: io.netty.handler.codec.http2.Http2Stream stream>;
v4 = staticinvoke <io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: boolean isClosed(io.netty.handler.codec.http2.Http2Stream)>(v3);
if v4 == 0 goto label2;
label1:
return 0;
label2:
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int initialStreamWindowSize>;
v6 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: float streamWindowUpdateRatio>;
v7 = v5 * v6;
v8 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int processedWindow>;
if v8 > v7 goto label3;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: void writeWindowUpdate()>();
return 1;
label3:
return 0;
}
private void writeWindowUpdate() throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Throwable v4;
java.lang.Object[] v6;
java.lang.Integer v9;
io.netty.channel.ChannelHandlerContext v14, v18;
io.netty.channel.ChannelPromise v19;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v11, v13, v17;
io.netty.handler.codec.http2.Http2Exception v10;
int v1, v16, v2, v3, v8;
io.netty.handler.codec.http2.Http2Stream v15, v7;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState v0;
io.netty.handler.codec.http2.Http2FrameWriter v12;
io.netty.handler.codec.http2.Http2Error v5;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int initialStreamWindowSize>;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: int processedWindow>;
v3 = v1 - v2;
label1:
virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: void incrementFlowControlWindows(int)>(v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
v5 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error INTERNAL_ERROR>;
v6 = newarray (java.lang.Object)[1];
v7 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: io.netty.handler.codec.http2.Http2Stream stream>;
v8 = interfaceinvoke v7.<io.netty.handler.codec.http2.Http2Stream: int id()>();
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
v6[0] = v9;
v10 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.Throwable,java.lang.String,java.lang.Object[])>(v5, v4, "Attempting to return too many bytes for stream %d", v6);
throw v10;
label4:
v11 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController this$0>;
v12 = v11.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.Http2FrameWriter frameWriter>;
v13 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController this$0>;
v14 = v13.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx>;
v15 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: io.netty.handler.codec.http2.Http2Stream stream>;
v16 = interfaceinvoke v15.<io.netty.handler.codec.http2.Http2Stream: int id()>();
v17 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController this$0>;
v18 = v17.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx>;
v19 = interfaceinvoke v18.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
interfaceinvoke v12.<io.netty.handler.codec.http2.Http2FrameWriter: io.netty.channel.ChannelFuture writeWindowUpdate(io.netty.channel.ChannelHandlerContext,int,int,io.netty.channel.ChannelPromise)>(v14, v16, v3, v19);
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/codec/http2/DefaultHttp2LocalFlowController;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: boolean $assertionsDisabled> = v2;
return;
}
}