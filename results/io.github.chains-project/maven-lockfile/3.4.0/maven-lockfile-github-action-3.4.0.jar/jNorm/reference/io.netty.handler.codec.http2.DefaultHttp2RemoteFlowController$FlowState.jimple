final class io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState extends java.lang.Object implements io.netty.handler.codec.http2.StreamByteDistributor$StreamState
{
private final io.netty.handler.codec.http2.Http2Stream stream;
private final java.util.Deque pendingWriteQueue;
private int window;
private long pendingBytes;
private boolean markedWritable;
private boolean writing;
private boolean cancelled;
static final boolean $assertionsDisabled;
final io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0;
void <init>(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController, io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
io.netty.handler.codec.http2.Http2Stream v2;
java.util.ArrayDeque v3;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v1;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 := @parameter0: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v2 := @parameter1: io.netty.handler.codec.http2.Http2Stream;
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.Http2Stream stream> = v2;
v3 = new java.util.ArrayDeque;
specialinvoke v3.<java.util.ArrayDeque: void <init>(int)>(2);
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: java.util.Deque pendingWriteQueue> = v3;
return;
}
boolean isWritable()
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
byte v3;
int v1;
long v2;
boolean v4, v5;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: int windowSize()>();
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: long pendingBytes()>();
v3 = v1 cmp v2;
if v3 <= 0 goto label1;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean cancelled>;
if v4 != 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public io.netty.handler.codec.http2.Http2Stream stream()
{
io.netty.handler.codec.http2.Http2Stream v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.Http2Stream stream>;
return v1;
}
boolean markedWritability()
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean markedWritable>;
return v1;
}
void markedWritability(boolean)
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 := @parameter0: boolean;
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean markedWritable> = v1;
return;
}
public int windowSize()
{
int v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: int window>;
return v1;
}
void windowSize(int)
{
int v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 := @parameter0: int;
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: int window> = v1;
return;
}
int writeAllocatedBytes(int)
{
boolean v24, v28, v3, v31, v35, v4, v6, v7;
io.netty.handler.codec.http2.Http2Error v25, v29, v32, v36;
java.lang.Throwable v20, v30, v33;
io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled v8;
java.lang.AssertionError v5;
java.util.Deque v17;
io.netty.channel.ChannelHandlerContext v14;
int v1, v10, v11, v12, v15, v16, v18, v19, v2, v21, v22, v23, v26, v27, v34, v9;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v13;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 := @parameter0: int;
v2 = v1;
label01:
v3 = <io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean $assertionsDisabled>;
if v3 != 0 goto label02;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean writing>;
if v4 == 0 goto label02;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label02:
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean writing> = 1;
v6 = 0;
label03:
v7 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean cancelled>;
if v7 != 0 goto label08;
v8 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled peek()>();
if v8 == null goto label08;
v9 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: int writableWindow()>();
v10 = staticinvoke <java.lang.Math: int min(int,int)>(v1, v9);
if v10 > 0 goto label04;
v11 = interfaceinvoke v8.<io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled: int size()>();
if v11 > 0 goto label08;
label04:
v6 = 1;
v12 = interfaceinvoke v8.<io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled: int size()>();
label05:
v13 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0>;
v14 = v13.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.channel.ChannelHandlerContext ctx>;
v15 = staticinvoke <java.lang.Math: int max(int,int)>(0, v10);
interfaceinvoke v8.<io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled: void write(io.netty.channel.ChannelHandlerContext,int)>(v14, v15);
v16 = interfaceinvoke v8.<io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled: int size()>();
if v16 != 0 goto label06;
v17 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: java.util.Deque pendingWriteQueue>;
interfaceinvoke v17.<java.util.Deque: java.lang.Object remove()>();
interfaceinvoke v8.<io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled: void writeComplete()>();
label06:
v18 = interfaceinvoke v8.<io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled: int size()>();
v19 = v12 - v18;
v1 = v1 - v19;
goto label03;
label07:
v20 := @caughtexception;
v21 = interfaceinvoke v8.<io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled: int size()>();
v22 = v12 - v21;
v1 = v1 - v22;
throw v20;
label08:
if v6 != 0 goto label11;
label09:
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean writing> = 0;
v23 = v2 - v1;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void decrementPendingBytes(int,boolean)>(v23, 0);
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void decrementFlowControlWindow(int)>(v23);
v24 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean cancelled>;
if v24 == 0 goto label10;
v25 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error INTERNAL_ERROR>;
virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void cancel(io.netty.handler.codec.http2.Http2Error,java.lang.Throwable)>(v25, null);
label10:
v26 = (int) -1;
return v26;
label11:
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean writing> = 0;
v27 = v2 - v1;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void decrementPendingBytes(int,boolean)>(v27, 0);
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void decrementFlowControlWindow(int)>(v27);
v28 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean cancelled>;
if v28 == 0 goto label16;
v29 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error INTERNAL_ERROR>;
virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void cancel(io.netty.handler.codec.http2.Http2Error,java.lang.Throwable)>(v29, null);
goto label16;
label12:
v30 := @caughtexception;
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean cancelled> = 1;
label13:
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean writing> = 0;
v27 = v2 - v1;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void decrementPendingBytes(int,boolean)>(v27, 0);
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void decrementFlowControlWindow(int)>(v27);
v31 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean cancelled>;
if v31 == 0 goto label16;
v32 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error INTERNAL_ERROR>;
virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void cancel(io.netty.handler.codec.http2.Http2Error,java.lang.Throwable)>(v32, v30);
goto label16;
label14:
v33 := @caughtexception;
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean writing> = 0;
v34 = v2 - v1;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void decrementPendingBytes(int,boolean)>(v34, 0);
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void decrementFlowControlWindow(int)>(v34);
v35 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean cancelled>;
if v35 == 0 goto label15;
v36 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error INTERNAL_ERROR>;
virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void cancel(io.netty.handler.codec.http2.Http2Error,java.lang.Throwable)>(v36, null);
label15:
throw v33;
label16:
return v27;
catch java.lang.Throwable from label05 to label06 with label07;
catch java.lang.Throwable from label01 to label09 with label12;
catch java.lang.Throwable from label12 to label13 with label14;
}
int incrementStreamWindow(int) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v7;
java.lang.Integer v10;
io.netty.handler.codec.http2.StreamByteDistributor v15;
io.netty.handler.codec.http2.Http2Exception v11;
int v1, v12, v13, v16, v2, v3, v5, v9;
io.netty.handler.codec.http2.Http2Stream v4, v8;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v14;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
io.netty.handler.codec.http2.Http2Error v6;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 := @parameter0: int;
if v1 <= 0 goto label1;
v2 = 2147483647 - v1;
v3 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: int window>;
if v2 >= v3 goto label1;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.Http2Stream stream>;
v5 = interfaceinvoke v4.<io.netty.handler.codec.http2.Http2Stream: int id()>();
v6 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error FLOW_CONTROL_ERROR>;
v7 = newarray (java.lang.Object)[1];
v8 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.Http2Stream stream>;
v9 = interfaceinvoke v8.<io.netty.handler.codec.http2.Http2Stream: int id()>();
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v9);
v7[0] = v10;
v11 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v5, v6, "Window size overflow for stream: %d", v7);
throw v11;
label1:
v12 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: int window>;
v13 = v12 + v1;
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: int window> = v13;
v14 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0>;
v15 = v14.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.StreamByteDistributor streamByteDistributor>;
interfaceinvoke v15.<io.netty.handler.codec.http2.StreamByteDistributor: void updateStreamableBytes(io.netty.handler.codec.http2.StreamByteDistributor$StreamState)>(v0);
v16 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: int window>;
return v16;
}
private int writableWindow()
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
int v1, v3, v4;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v2;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: int window>;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0>;
v3 = specialinvoke v2.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: int connectionWindowSize()>();
v4 = staticinvoke <java.lang.Math: int min(int,int)>(v1, v3);
return v4;
}
public long pendingBytes()
{
long v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: long pendingBytes>;
return v1;
}
void enqueueFrame(io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled)
{
io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
java.util.Deque v2;
io.netty.channel.ChannelHandlerContext v6;
int v4, v8, v9;
java.lang.Object v3;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v5;
boolean v7;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 := @parameter0: io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: java.util.Deque pendingWriteQueue>;
v3 = interfaceinvoke v2.<java.util.Deque: java.lang.Object peekLast()>();
if v3 != null goto label1;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void enqueueFrameWithoutMerge(io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled)>(v1);
return;
label1:
v4 = interfaceinvoke v3.<io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled: int size()>();
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0>;
v6 = v5.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.channel.ChannelHandlerContext ctx>;
v7 = interfaceinvoke v3.<io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled: boolean merge(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled)>(v6, v1);
if v7 == 0 goto label2;
v8 = interfaceinvoke v3.<io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled: int size()>();
v9 = v8 - v4;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void incrementPendingBytes(int,boolean)>(v9, 1);
return;
label2:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void enqueueFrameWithoutMerge(io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled)>(v1);
return;
}
private void enqueueFrameWithoutMerge(io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled)
{
io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
int v3;
java.util.Deque v2;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 := @parameter0: io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: java.util.Deque pendingWriteQueue>;
interfaceinvoke v2.<java.util.Deque: boolean offer(java.lang.Object)>(v1);
v3 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled: int size()>();
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void incrementPendingBytes(int,boolean)>(v3, 1);
return;
}
public boolean hasFrame()
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
java.util.Deque v1;
boolean v2, v3;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: java.util.Deque pendingWriteQueue>;
v2 = interfaceinvoke v1.<java.util.Deque: boolean isEmpty()>();
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
private io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled peek()
{
java.lang.Object v2;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
java.util.Deque v1;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: java.util.Deque pendingWriteQueue>;
v2 = interfaceinvoke v1.<java.util.Deque: java.lang.Object peek()>();
return v2;
}
void cancel(io.netty.handler.codec.http2.Http2Error, java.lang.Throwable)
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor v14;
java.lang.Throwable v2;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
java.lang.Object[] v8;
java.util.Deque v10, v4;
io.netty.handler.codec.http2.StreamByteDistributor v12;
io.netty.handler.codec.http2.Http2Exception v9;
int v7;
io.netty.handler.codec.http2.Http2Error v1;
io.netty.handler.codec.http2.Http2Stream v6;
java.lang.Object v5;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v11, v13;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Error;
v2 := @parameter1: java.lang.Throwable;
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean cancelled> = 1;
v3 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean writing>;
if v3 == 0 goto label1;
return;
label1:
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: java.util.Deque pendingWriteQueue>;
v5 = interfaceinvoke v4.<java.util.Deque: java.lang.Object poll()>();
if v5 == null goto label3;
v6 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.Http2Stream stream>;
v7 = interfaceinvoke v6.<io.netty.handler.codec.http2.Http2Stream: int id()>();
v8 = newarray (java.lang.Object)[0];
v9 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.Throwable,java.lang.String,java.lang.Object[])>(v7, v1, v2, "Stream closed before write could take place", v8);
label2:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void writeError(io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled,io.netty.handler.codec.http2.Http2Exception)>(v5, v9);
v10 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: java.util.Deque pendingWriteQueue>;
interfaceinvoke v10.<java.util.Deque: java.lang.Object poll()>();
goto label2;
label3:
v11 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0>;
v12 = v11.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.StreamByteDistributor streamByteDistributor>;
interfaceinvoke v12.<io.netty.handler.codec.http2.StreamByteDistributor: void updateStreamableBytes(io.netty.handler.codec.http2.StreamByteDistributor$StreamState)>(v0);
v13 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0>;
v14 = v13.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor monitor>;
virtualinvoke v14.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor: void stateCancelled(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState)>(v0);
return;
}
private void incrementPendingBytes(int, boolean)
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor v6;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
long v3, v4;
io.netty.handler.codec.http2.StreamByteDistributor v8;
int v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v5, v7;
boolean v2;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
v3 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: long pendingBytes>;
v4 = v3 + v1;
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: long pendingBytes> = v4;
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0>;
v6 = v5.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor monitor>;
virtualinvoke v6.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor: void incrementPendingBytes(int)>(v1);
if v2 == 0 goto label1;
v7 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0>;
v8 = v7.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.StreamByteDistributor streamByteDistributor>;
interfaceinvoke v8.<io.netty.handler.codec.http2.StreamByteDistributor: void updateStreamableBytes(io.netty.handler.codec.http2.StreamByteDistributor$StreamState)>(v0);
label1:
return;
}
private void decrementPendingBytes(int, boolean)
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
int v1, v3;
boolean v2;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
v3 = neg v1;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void incrementPendingBytes(int,boolean)>(v3, v2);
return;
}
private void decrementFlowControlWindow(int)
{
java.lang.IllegalStateException v6;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0, v4;
io.netty.handler.codec.http2.Http2Exception v5;
int v1, v2;
java.lang.String v7, v8;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v3;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 := @parameter0: int;
label1:
v2 = neg v1;
v3 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0>;
v4 = v3.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState connectionState>;
virtualinvoke v4.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: int incrementStreamWindow(int)>(v2);
virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: int incrementStreamWindow(int)>(v2);
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = new java.lang.IllegalStateException;
v7 = virtualinvoke v5.<io.netty.handler.codec.http2.Http2Exception: java.lang.String getMessage()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid window state when writing frame: \u0001");
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>(v8, v5);
throw v6;
label4:
return;
catch io.netty.handler.codec.http2.Http2Exception from label1 to label2 with label3;
}
private void writeError(io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled, io.netty.handler.codec.http2.Http2Exception)
{
io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v0;
java.lang.AssertionError v6;
io.netty.channel.ChannelHandlerContext v5, v9;
io.netty.handler.codec.http2.Http2Exception v2;
int v7;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v4, v8;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v1 := @parameter0: io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled;
v2 := @parameter1: io.netty.handler.codec.http2.Http2Exception;
v3 = <io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0>;
v5 = v4.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.channel.ChannelHandlerContext ctx>;
if v5 != null goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
v7 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled: int size()>();
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void decrementPendingBytes(int,boolean)>(v7, 1);
v8 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0>;
v9 = v8.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled: void error(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)>(v9, v2);
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean $assertionsDisabled> = v2;
return;
}
}