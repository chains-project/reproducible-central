public final class io.netty.handler.codec.http2.HttpConversionUtil extends java.lang.Object
{
private static final io.netty.handler.codec.http2.CharSequenceMap HTTP_TO_HTTP2_HEADER_BLACKLIST;
public static final io.netty.handler.codec.http.HttpMethod OUT_OF_MESSAGE_SEQUENCE_METHOD;
public static final java.lang.String OUT_OF_MESSAGE_SEQUENCE_PATH;
public static final io.netty.handler.codec.http.HttpResponseStatus OUT_OF_MESSAGE_SEQUENCE_RETURN_CODE;
private static final io.netty.util.AsciiString EMPTY_REQUEST_PATH;
private void <init>()
{
io.netty.handler.codec.http2.HttpConversionUtil v0;
v0 := @this: io.netty.handler.codec.http2.HttpConversionUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static io.netty.handler.codec.http.HttpResponseStatus parseStatus(java.lang.CharSequence) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Throwable v9;
java.lang.Object[] v11, v4;
java.lang.CharSequence v0;
io.netty.handler.codec.http.HttpResponseStatus v1, v2;
java.lang.Integer v6;
io.netty.handler.codec.http2.Http2Exception v12, v7, v8;
int v5;
io.netty.handler.codec.http2.Http2Error v10, v3;
v0 := @parameter0: java.lang.CharSequence;
label1:
v1 = staticinvoke <io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus parseLine(java.lang.CharSequence)>(v0);
v2 = <io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus SWITCHING_PROTOCOLS>;
if v1 != v2 goto label4;
v3 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v4 = newarray (java.lang.Object)[1];
v5 = virtualinvoke v1.<io.netty.handler.codec.http.HttpResponseStatus: int code()>();
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v5);
v4[0] = v6;
v7 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v3, "Invalid HTTP/2 status code \'%d\'", v4);
throw v7;
label2:
v8 := @caughtexception;
throw v8;
label3:
v9 := @caughtexception;
v10 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v11 = newarray (java.lang.Object)[1];
v11[0] = v0;
v12 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.Throwable,java.lang.String,java.lang.Object[])>(v10, v9, "Unrecognized HTTP status code \'%s\' encountered in translation to HTTP/1.x", v11);
throw v12;
label4:
return v1;
catch io.netty.handler.codec.http2.Http2Exception from label1 to label2 with label2;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static io.netty.handler.codec.http.FullHttpResponse toFullHttpResponse(int, io.netty.handler.codec.http2.Http2Headers, io.netty.buffer.ByteBufAllocator, boolean) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http.FullHttpResponse v5;
io.netty.buffer.ByteBuf v4;
io.netty.buffer.ByteBufAllocator v2;
io.netty.handler.codec.http2.Http2Headers v1;
int v0;
boolean v3;
v0 := @parameter0: int;
v1 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
v2 := @parameter2: io.netty.buffer.ByteBufAllocator;
v3 := @parameter3: boolean;
v4 = interfaceinvoke v2.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf buffer()>();
v5 = staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: io.netty.handler.codec.http.FullHttpResponse toFullHttpResponse(int,io.netty.handler.codec.http2.Http2Headers,io.netty.buffer.ByteBuf,boolean)>(v0, v1, v4, v3);
return v5;
}
public static io.netty.handler.codec.http.FullHttpResponse toFullHttpResponse(int, io.netty.handler.codec.http2.Http2Headers, io.netty.buffer.ByteBuf, boolean) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Throwable v9;
io.netty.handler.codec.http.HttpVersion v7;
java.lang.Object[] v11;
java.lang.CharSequence v4;
io.netty.handler.codec.http.HttpResponseStatus v5;
io.netty.buffer.ByteBuf v2;
io.netty.handler.codec.http2.Http2Headers v1;
io.netty.handler.codec.http2.Http2Exception v12, v8;
int v0;
io.netty.handler.codec.http.DefaultFullHttpResponse v6;
io.netty.handler.codec.http2.Http2Error v10;
boolean v3;
v0 := @parameter0: int;
v1 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
v2 := @parameter2: io.netty.buffer.ByteBuf;
v3 := @parameter3: boolean;
v4 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: java.lang.CharSequence status()>();
v5 = staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: io.netty.handler.codec.http.HttpResponseStatus parseStatus(java.lang.CharSequence)>(v4);
v6 = new io.netty.handler.codec.http.DefaultFullHttpResponse;
v7 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_1>;
specialinvoke v6.<io.netty.handler.codec.http.DefaultFullHttpResponse: void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus,io.netty.buffer.ByteBuf,boolean)>(v7, v5, v2, v3);
label1:
staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: void addHttp2ToHttpHeaders(int,io.netty.handler.codec.http2.Http2Headers,io.netty.handler.codec.http.FullHttpMessage,boolean)>(v0, v1, v6, 0);
label2:
goto label5;
label3:
v8 := @caughtexception;
interfaceinvoke v6.<io.netty.handler.codec.http.FullHttpResponse: boolean release()>();
throw v8;
label4:
v9 := @caughtexception;
interfaceinvoke v6.<io.netty.handler.codec.http.FullHttpResponse: boolean release()>();
v10 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v11 = newarray (java.lang.Object)[0];
v12 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.Throwable,java.lang.String,java.lang.Object[])>(v0, v10, v9, "HTTP/2 to HTTP/1.x headers conversion error", v11);
throw v12;
label5:
return v6;
catch io.netty.handler.codec.http2.Http2Exception from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
public static io.netty.handler.codec.http.FullHttpRequest toFullHttpRequest(int, io.netty.handler.codec.http2.Http2Headers, io.netty.buffer.ByteBufAllocator, boolean) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.buffer.ByteBuf v4;
io.netty.buffer.ByteBufAllocator v2;
io.netty.handler.codec.http2.Http2Headers v1;
int v0;
io.netty.handler.codec.http.FullHttpRequest v5;
boolean v3;
v0 := @parameter0: int;
v1 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
v2 := @parameter2: io.netty.buffer.ByteBufAllocator;
v3 := @parameter3: boolean;
v4 = interfaceinvoke v2.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf buffer()>();
v5 = staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: io.netty.handler.codec.http.FullHttpRequest toFullHttpRequest(int,io.netty.handler.codec.http2.Http2Headers,io.netty.buffer.ByteBuf,boolean)>(v0, v1, v4, v3);
return v5;
}
private static java.lang.String extractPath(java.lang.CharSequence, io.netty.handler.codec.http2.Http2Headers)
{
java.lang.CharSequence v0, v5, v8;
io.netty.handler.codec.http.HttpMethod v2;
io.netty.util.AsciiString v3;
io.netty.handler.codec.http2.Http2Headers v1;
java.lang.Object v6, v9;
java.lang.String v10, v7;
boolean v4;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
v2 = <io.netty.handler.codec.http.HttpMethod: io.netty.handler.codec.http.HttpMethod CONNECT>;
v3 = virtualinvoke v2.<io.netty.handler.codec.http.HttpMethod: io.netty.util.AsciiString asciiName()>();
v4 = virtualinvoke v3.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v0);
if v4 == 0 goto label1;
v5 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: java.lang.CharSequence authority()>();
v6 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v5, "authority header cannot be null in the conversion to HTTP/1.x");
v7 = virtualinvoke v6.<java.lang.Object: java.lang.String toString()>();
return v7;
label1:
v8 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: java.lang.CharSequence path()>();
v9 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v8, "path header cannot be null in conversion to HTTP/1.x");
v10 = virtualinvoke v9.<java.lang.Object: java.lang.String toString()>();
return v10;
}
public static io.netty.handler.codec.http.FullHttpRequest toFullHttpRequest(int, io.netty.handler.codec.http2.Http2Headers, io.netty.buffer.ByteBuf, boolean) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Throwable v13;
io.netty.handler.codec.http.HttpVersion v8;
java.lang.Object[] v15;
io.netty.handler.codec.http.DefaultFullHttpRequest v7;
io.netty.buffer.ByteBuf v2;
io.netty.handler.codec.http2.Http2Exception v12, v16;
int v0;
java.lang.String v11, v6, v9;
boolean v3;
java.lang.CharSequence v4;
io.netty.handler.codec.http.HttpMethod v10;
io.netty.handler.codec.http2.Http2Headers v1;
io.netty.handler.codec.http2.Http2Error v14;
java.lang.Object v5;
v0 := @parameter0: int;
v1 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
v2 := @parameter2: io.netty.buffer.ByteBuf;
v3 := @parameter3: boolean;
v4 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: java.lang.CharSequence method()>();
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v4, "method header cannot be null in conversion to HTTP/1.x");
v6 = staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: java.lang.String extractPath(java.lang.CharSequence,io.netty.handler.codec.http2.Http2Headers)>(v5, v1);
v7 = new io.netty.handler.codec.http.DefaultFullHttpRequest;
v8 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_1>;
v9 = virtualinvoke v5.<java.lang.Object: java.lang.String toString()>();
v10 = staticinvoke <io.netty.handler.codec.http.HttpMethod: io.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)>(v9);
v11 = virtualinvoke v6.<java.lang.Object: java.lang.String toString()>();
specialinvoke v7.<io.netty.handler.codec.http.DefaultFullHttpRequest: void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpMethod,java.lang.String,io.netty.buffer.ByteBuf,boolean)>(v8, v10, v11, v2, v3);
label1:
staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: void addHttp2ToHttpHeaders(int,io.netty.handler.codec.http2.Http2Headers,io.netty.handler.codec.http.FullHttpMessage,boolean)>(v0, v1, v7, 0);
label2:
goto label5;
label3:
v12 := @caughtexception;
interfaceinvoke v7.<io.netty.handler.codec.http.FullHttpRequest: boolean release()>();
throw v12;
label4:
v13 := @caughtexception;
interfaceinvoke v7.<io.netty.handler.codec.http.FullHttpRequest: boolean release()>();
v14 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v15 = newarray (java.lang.Object)[0];
v16 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.Throwable,java.lang.String,java.lang.Object[])>(v0, v14, v13, "HTTP/2 to HTTP/1.x headers conversion error", v15);
throw v16;
label5:
return v7;
catch io.netty.handler.codec.http2.Http2Exception from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
public static io.netty.handler.codec.http.HttpRequest toHttpRequest(int, io.netty.handler.codec.http2.Http2Headers, boolean) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Throwable v14;
io.netty.handler.codec.http.HttpVersion v12, v7;
io.netty.handler.codec.http.HttpHeaders v11;
java.lang.Object[] v16;
io.netty.handler.codec.http.DefaultHttpRequest v6;
io.netty.handler.codec.http2.Http2Exception v13, v17;
int v0;
java.lang.String v10, v5, v8;
boolean v2;
java.lang.CharSequence v3;
io.netty.handler.codec.http.HttpMethod v9;
io.netty.handler.codec.http2.Http2Headers v1;
io.netty.handler.codec.http2.Http2Error v15;
java.lang.Object v4;
v0 := @parameter0: int;
v1 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
v2 := @parameter2: boolean;
v3 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: java.lang.CharSequence method()>();
v4 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v3, "method header cannot be null in conversion to HTTP/1.x");
v5 = staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: java.lang.String extractPath(java.lang.CharSequence,io.netty.handler.codec.http2.Http2Headers)>(v4, v1);
v6 = new io.netty.handler.codec.http.DefaultHttpRequest;
v7 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_1>;
v8 = virtualinvoke v4.<java.lang.Object: java.lang.String toString()>();
v9 = staticinvoke <io.netty.handler.codec.http.HttpMethod: io.netty.handler.codec.http.HttpMethod valueOf(java.lang.String)>(v8);
v10 = virtualinvoke v5.<java.lang.Object: java.lang.String toString()>();
specialinvoke v6.<io.netty.handler.codec.http.DefaultHttpRequest: void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpMethod,java.lang.String,boolean)>(v7, v9, v10, v2);
label1:
v11 = interfaceinvoke v6.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.http.HttpHeaders headers()>();
v12 = interfaceinvoke v6.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.http.HttpVersion protocolVersion()>();
staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: void addHttp2ToHttpHeaders(int,io.netty.handler.codec.http2.Http2Headers,io.netty.handler.codec.http.HttpHeaders,io.netty.handler.codec.http.HttpVersion,boolean,boolean)>(v0, v1, v11, v12, 0, 1);
label2:
goto label5;
label3:
v13 := @caughtexception;
throw v13;
label4:
v14 := @caughtexception;
v15 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v16 = newarray (java.lang.Object)[0];
v17 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.Throwable,java.lang.String,java.lang.Object[])>(v0, v15, v14, "HTTP/2 to HTTP/1.x headers conversion error", v16);
throw v17;
label5:
return v6;
catch io.netty.handler.codec.http2.Http2Exception from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
public static io.netty.handler.codec.http.HttpResponse toHttpResponse(int, io.netty.handler.codec.http2.Http2Headers, boolean) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Throwable v10;
io.netty.handler.codec.http.HttpVersion v6, v8;
io.netty.handler.codec.http.HttpHeaders v7;
java.lang.Object[] v12;
java.lang.CharSequence v3;
io.netty.handler.codec.http.HttpResponseStatus v4;
io.netty.handler.codec.http.DefaultHttpResponse v5;
io.netty.handler.codec.http2.Http2Headers v1;
io.netty.handler.codec.http2.Http2Exception v13, v9;
int v0;
io.netty.handler.codec.http2.Http2Error v11;
boolean v2;
v0 := @parameter0: int;
v1 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
v2 := @parameter2: boolean;
v3 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: java.lang.CharSequence status()>();
v4 = staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: io.netty.handler.codec.http.HttpResponseStatus parseStatus(java.lang.CharSequence)>(v3);
v5 = new io.netty.handler.codec.http.DefaultHttpResponse;
v6 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_1>;
specialinvoke v5.<io.netty.handler.codec.http.DefaultHttpResponse: void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus,boolean)>(v6, v4, v2);
label1:
v7 = interfaceinvoke v5.<io.netty.handler.codec.http.HttpResponse: io.netty.handler.codec.http.HttpHeaders headers()>();
v8 = interfaceinvoke v5.<io.netty.handler.codec.http.HttpResponse: io.netty.handler.codec.http.HttpVersion protocolVersion()>();
staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: void addHttp2ToHttpHeaders(int,io.netty.handler.codec.http2.Http2Headers,io.netty.handler.codec.http.HttpHeaders,io.netty.handler.codec.http.HttpVersion,boolean,boolean)>(v0, v1, v7, v8, 0, 0);
label2:
goto label5;
label3:
v9 := @caughtexception;
throw v9;
label4:
v10 := @caughtexception;
v11 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v12 = newarray (java.lang.Object)[0];
v13 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.Throwable,java.lang.String,java.lang.Object[])>(v0, v11, v10, "HTTP/2 to HTTP/1.x headers conversion error", v12);
throw v13;
label5:
return v5;
catch io.netty.handler.codec.http2.Http2Exception from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
public static void addHttp2ToHttpHeaders(int, io.netty.handler.codec.http2.Http2Headers, io.netty.handler.codec.http.FullHttpMessage, boolean) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http.FullHttpMessage v2;
io.netty.handler.codec.http.HttpVersion v5;
io.netty.handler.codec.http.HttpHeaders v4;
io.netty.handler.codec.http2.Http2Headers v1;
int v0;
boolean v3, v6;
v0 := @parameter0: int;
v1 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
v2 := @parameter2: io.netty.handler.codec.http.FullHttpMessage;
v3 := @parameter3: boolean;
if v3 == 0 goto label1;
v4 = interfaceinvoke v2.<io.netty.handler.codec.http.FullHttpMessage: io.netty.handler.codec.http.HttpHeaders trailingHeaders()>();
goto label2;
label1:
v4 = interfaceinvoke v2.<io.netty.handler.codec.http.FullHttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
label2:
v5 = interfaceinvoke v2.<io.netty.handler.codec.http.FullHttpMessage: io.netty.handler.codec.http.HttpVersion protocolVersion()>();
v6 = v2 instanceof io.netty.handler.codec.http.HttpRequest;
staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: void addHttp2ToHttpHeaders(int,io.netty.handler.codec.http2.Http2Headers,io.netty.handler.codec.http.HttpHeaders,io.netty.handler.codec.http.HttpVersion,boolean,boolean)>(v0, v1, v4, v5, v3, v6);
return;
}
public static void addHttp2ToHttpHeaders(int, io.netty.handler.codec.http2.Http2Headers, io.netty.handler.codec.http.HttpHeaders, io.netty.handler.codec.http.HttpVersion, boolean, boolean) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Throwable v8;
io.netty.handler.codec.http.HttpVersion v3;
io.netty.handler.codec.http.HttpHeaders v2;
java.lang.Object[] v10;
io.netty.util.AsciiString v12, v13, v15;
io.netty.handler.codec.http2.HttpConversionUtil$ExtensionHeaderNames v14;
io.netty.handler.codec.http2.Http2Exception v11, v7;
io.netty.handler.codec.http2.HttpConversionUtil$Http2ToHttpHeaderTranslator v6;
int v0;
boolean v4, v5;
io.netty.handler.codec.http2.Http2Headers v1;
io.netty.handler.codec.http2.Http2Error v9;
v0 := @parameter0: int;
v1 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
v2 := @parameter2: io.netty.handler.codec.http.HttpHeaders;
v3 := @parameter3: io.netty.handler.codec.http.HttpVersion;
v4 := @parameter4: boolean;
v5 := @parameter5: boolean;
v6 = new io.netty.handler.codec.http2.HttpConversionUtil$Http2ToHttpHeaderTranslator;
specialinvoke v6.<io.netty.handler.codec.http2.HttpConversionUtil$Http2ToHttpHeaderTranslator: void <init>(int,io.netty.handler.codec.http.HttpHeaders,boolean)>(v0, v2, v5);
label1:
virtualinvoke v6.<io.netty.handler.codec.http2.HttpConversionUtil$Http2ToHttpHeaderTranslator: void translateHeaders(java.lang.Iterable)>(v1);
label2:
goto label5;
label3:
v7 := @caughtexception;
throw v7;
label4:
v8 := @caughtexception;
v9 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v10 = newarray (java.lang.Object)[0];
v11 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.Throwable,java.lang.String,java.lang.Object[])>(v0, v9, v8, "HTTP/2 to HTTP/1.x headers conversion error", v10);
throw v11;
label5:
v12 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString TRANSFER_ENCODING>;
virtualinvoke v2.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders remove(java.lang.CharSequence)>(v12);
v13 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString TRAILER>;
virtualinvoke v2.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders remove(java.lang.CharSequence)>(v13);
if v4 != 0 goto label6;
v14 = <io.netty.handler.codec.http2.HttpConversionUtil$ExtensionHeaderNames: io.netty.handler.codec.http2.HttpConversionUtil$ExtensionHeaderNames STREAM_ID>;
v15 = virtualinvoke v14.<io.netty.handler.codec.http2.HttpConversionUtil$ExtensionHeaderNames: io.netty.util.AsciiString text()>();
virtualinvoke v2.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders setInt(java.lang.CharSequence,int)>(v15, v0);
staticinvoke <io.netty.handler.codec.http.HttpUtil: void setKeepAlive(io.netty.handler.codec.http.HttpHeaders,io.netty.handler.codec.http.HttpVersion,boolean)>(v2, v3, 1);
label6:
return;
catch io.netty.handler.codec.http2.Http2Exception from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
public static io.netty.handler.codec.http2.Http2Headers toHttp2Headers(io.netty.handler.codec.http.HttpMessage, boolean)
{
io.netty.handler.codec.http.HttpHeaders v2;
io.netty.handler.codec.http.HttpMessage v0;
io.netty.util.AsciiString v12, v16, v20, v23, v6;
int v4;
java.lang.String v10, v13, v14, v18, v7, v8;
java.net.URI v15;
boolean v1, v11, v17, v21, v5, v9;
io.netty.handler.codec.http.HttpMethod v19;
io.netty.handler.codec.http.HttpResponseStatus v22;
io.netty.handler.codec.http2.DefaultHttp2Headers v3;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 := @parameter1: boolean;
v2 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v3 = new io.netty.handler.codec.http2.DefaultHttp2Headers;
v4 = virtualinvoke v2.<io.netty.handler.codec.http.HttpHeaders: int size()>();
specialinvoke v3.<io.netty.handler.codec.http2.DefaultHttp2Headers: void <init>(boolean,int)>(v1, v4);
v5 = v0 instanceof io.netty.handler.codec.http.HttpRequest;
if v5 == 0 goto label6;
v6 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString HOST>;
v7 = virtualinvoke v2.<io.netty.handler.codec.http.HttpHeaders: java.lang.String getAsString(java.lang.CharSequence)>(v6);
v8 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpRequest: java.lang.String uri()>();
v9 = staticinvoke <io.netty.handler.codec.http.HttpUtil: boolean isOriginForm(java.lang.String)>(v8);
if v9 != 0 goto label1;
v10 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpRequest: java.lang.String uri()>();
v11 = staticinvoke <io.netty.handler.codec.http.HttpUtil: boolean isAsteriskForm(java.lang.String)>(v10);
if v11 == 0 goto label2;
label1:
v12 = new io.netty.util.AsciiString;
v13 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpRequest: java.lang.String uri()>();
specialinvoke v12.<io.netty.util.AsciiString: void <init>(java.lang.CharSequence)>(v13);
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.http2.Http2Headers path(java.lang.CharSequence)>(v12);
staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: void setHttp2Scheme(io.netty.handler.codec.http.HttpHeaders,io.netty.handler.codec.http2.Http2Headers)>(v2, v3);
goto label5;
label2:
v14 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpRequest: java.lang.String uri()>();
v15 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>(v14);
v16 = staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: io.netty.util.AsciiString toHttp2Path(java.net.URI)>(v15);
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.http2.Http2Headers path(java.lang.CharSequence)>(v16);
v17 = staticinvoke <io.netty.util.internal.StringUtil: boolean isNullOrEmpty(java.lang.String)>(v7);
if v17 == 0 goto label3;
v18 = virtualinvoke v15.<java.net.URI: java.lang.String getAuthority()>();
goto label4;
label3:
v18 = v7;
label4:
v7 = v18;
staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: void setHttp2Scheme(io.netty.handler.codec.http.HttpHeaders,java.net.URI,io.netty.handler.codec.http2.Http2Headers)>(v2, v15, v3);
label5:
staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: void setHttp2Authority(java.lang.String,io.netty.handler.codec.http2.Http2Headers)>(v7, v3);
v19 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.http.HttpMethod method()>();
v20 = virtualinvoke v19.<io.netty.handler.codec.http.HttpMethod: io.netty.util.AsciiString asciiName()>();
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.http2.Http2Headers method(java.lang.CharSequence)>(v20);
goto label7;
label6:
v21 = v0 instanceof io.netty.handler.codec.http.HttpResponse;
if v21 == 0 goto label7;
v22 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpResponse: io.netty.handler.codec.http.HttpResponseStatus status()>();
v23 = virtualinvoke v22.<io.netty.handler.codec.http.HttpResponseStatus: io.netty.util.AsciiString codeAsText()>();
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.http2.Http2Headers status(java.lang.CharSequence)>(v23);
label7:
staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: void toHttp2Headers(io.netty.handler.codec.http.HttpHeaders,io.netty.handler.codec.http2.Http2Headers)>(v2, v3);
return v3;
}
public static io.netty.handler.codec.http2.Http2Headers toHttp2Headers(io.netty.handler.codec.http.HttpHeaders, boolean)
{
io.netty.handler.codec.http.HttpHeaders v0;
int v5;
io.netty.handler.codec.http2.EmptyHttp2Headers v3;
io.netty.handler.codec.http2.DefaultHttp2Headers v4;
boolean v1, v2;
v0 := @parameter0: io.netty.handler.codec.http.HttpHeaders;
v1 := @parameter1: boolean;
v2 = virtualinvoke v0.<io.netty.handler.codec.http.HttpHeaders: boolean isEmpty()>();
if v2 == 0 goto label1;
v3 = <io.netty.handler.codec.http2.EmptyHttp2Headers: io.netty.handler.codec.http2.EmptyHttp2Headers INSTANCE>;
return v3;
label1:
v4 = new io.netty.handler.codec.http2.DefaultHttp2Headers;
v5 = virtualinvoke v0.<io.netty.handler.codec.http.HttpHeaders: int size()>();
specialinvoke v4.<io.netty.handler.codec.http2.DefaultHttp2Headers: void <init>(boolean,int)>(v1, v5);
staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: void toHttp2Headers(io.netty.handler.codec.http.HttpHeaders,io.netty.handler.codec.http2.Http2Headers)>(v0, v4);
return v4;
}
private static io.netty.handler.codec.http2.CharSequenceMap toLowercaseMap(java.util.Iterator, int)
{
java.lang.IllegalStateException v28;
io.netty.util.AsciiString v12, v13, v14, v22, v23, v24, v25, v26, v6, v7;
io.netty.handler.codec.UnsupportedValueConverter v2;
int v1, v10, v11, v15, v16, v17, v19, v20, v21, v9;
io.netty.handler.codec.http2.CharSequenceMap v3;
boolean v4;
java.util.Iterator v0;
io.netty.util.ByteProcessor v18, v8;
java.lang.Exception v27;
java.lang.Object v5;
v0 := @parameter0: java.util.Iterator;
v1 := @parameter1: int;
v2 = staticinvoke <io.netty.handler.codec.UnsupportedValueConverter: io.netty.handler.codec.UnsupportedValueConverter instance()>();
v3 = new io.netty.handler.codec.http2.CharSequenceMap;
specialinvoke v3.<io.netty.handler.codec.http2.CharSequenceMap: void <init>(boolean,io.netty.handler.codec.ValueConverter,int)>(1, v2, v1);
label1:
v4 = interfaceinvoke v0.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label8;
v5 = interfaceinvoke v0.<java.util.Iterator: java.lang.Object next()>();
v6 = staticinvoke <io.netty.util.AsciiString: io.netty.util.AsciiString of(java.lang.CharSequence)>(v5);
v7 = virtualinvoke v6.<io.netty.util.AsciiString: io.netty.util.AsciiString toLowerCase()>();
label2:
v8 = <io.netty.util.ByteProcessor: io.netty.util.ByteProcessor FIND_COMMA>;
v9 = virtualinvoke v7.<io.netty.util.AsciiString: int forEachByte(io.netty.util.ByteProcessor)>(v8);
v10 = (int) -1;
if v9 == v10 goto label5;
v11 = 0;
label3:
v12 = virtualinvoke v7.<io.netty.util.AsciiString: io.netty.util.AsciiString subSequence(int,int,boolean)>(v11, v9, 0);
v13 = virtualinvoke v12.<io.netty.util.AsciiString: io.netty.util.AsciiString trim()>();
v14 = <io.netty.util.AsciiString: io.netty.util.AsciiString EMPTY_STRING>;
virtualinvoke v3.<io.netty.handler.codec.http2.CharSequenceMap: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v13, v14);
v11 = v9 + 1;
v15 = virtualinvoke v7.<io.netty.util.AsciiString: int length()>();
if v11 >= v15 goto label4;
v16 = virtualinvoke v7.<io.netty.util.AsciiString: int length()>();
v17 = v16 - v11;
v18 = <io.netty.util.ByteProcessor: io.netty.util.ByteProcessor FIND_COMMA>;
v19 = virtualinvoke v7.<io.netty.util.AsciiString: int forEachByte(int,int,io.netty.util.ByteProcessor)>(v11, v17, v18);
v9 = v19;
v20 = (int) -1;
if v19 != v20 goto label3;
label4:
v21 = virtualinvoke v7.<io.netty.util.AsciiString: int length()>();
v22 = virtualinvoke v7.<io.netty.util.AsciiString: io.netty.util.AsciiString subSequence(int,int,boolean)>(v11, v21, 0);
v23 = virtualinvoke v22.<io.netty.util.AsciiString: io.netty.util.AsciiString trim()>();
v24 = <io.netty.util.AsciiString: io.netty.util.AsciiString EMPTY_STRING>;
virtualinvoke v3.<io.netty.handler.codec.http2.CharSequenceMap: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v23, v24);
goto label1;
label5:
v25 = virtualinvoke v7.<io.netty.util.AsciiString: io.netty.util.AsciiString trim()>();
v26 = <io.netty.util.AsciiString: io.netty.util.AsciiString EMPTY_STRING>;
virtualinvoke v3.<io.netty.handler.codec.http2.CharSequenceMap: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v25, v26);
label6:
goto label1;
label7:
v27 := @caughtexception;
v28 = new java.lang.IllegalStateException;
specialinvoke v28.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v27);
throw v28;
label8:
return v3;
catch java.lang.Exception from label2 to label6 with label7;
}
private static void toHttp2HeadersFilterTE(java.util.Map$Entry, io.netty.handler.codec.http2.Http2Headers)
{
io.netty.util.AsciiString v10, v17, v19, v20, v7, v9;
int v3, v4;
boolean v14, v18, v8;
java.util.Map$Entry v0;
java.lang.CharSequence v16, v6;
java.util.Iterator v13;
java.util.List v12;
io.netty.handler.codec.http2.Http2Headers v1;
java.lang.Object v11, v15, v2, v5;
v0 := @parameter0: java.util.Map$Entry;
v1 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
v2 = interfaceinvoke v0.<java.util.Map$Entry: java.lang.Object getValue()>();
v3 = staticinvoke <io.netty.util.AsciiString: int indexOf(java.lang.CharSequence,char,int)>(v2, 44, 0);
v4 = (int) -1;
if v3 != v4 goto label1;
v5 = interfaceinvoke v0.<java.util.Map$Entry: java.lang.Object getValue()>();
v6 = staticinvoke <io.netty.util.AsciiString: java.lang.CharSequence trim(java.lang.CharSequence)>(v5);
v7 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString TRAILERS>;
v8 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v6, v7);
if v8 == 0 goto label3;
v9 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString TE>;
v10 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString TRAILERS>;
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v9, v10);
goto label3;
label1:
v11 = interfaceinvoke v0.<java.util.Map$Entry: java.lang.Object getValue()>();
v12 = staticinvoke <io.netty.util.internal.StringUtil: java.util.List unescapeCsvFields(java.lang.CharSequence)>(v11);
v13 = interfaceinvoke v12.<java.util.List: java.util.Iterator iterator()>();
label2:
v14 = interfaceinvoke v13.<java.util.Iterator: boolean hasNext()>();
if v14 == 0 goto label3;
v15 = interfaceinvoke v13.<java.util.Iterator: java.lang.Object next()>();
v16 = staticinvoke <io.netty.util.AsciiString: java.lang.CharSequence trim(java.lang.CharSequence)>(v15);
v17 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString TRAILERS>;
v18 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v16, v17);
if v18 == 0 goto label2;
v19 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString TE>;
v20 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString TRAILERS>;
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v19, v20);
label3:
return;
}
public static void toHttp2Headers(io.netty.handler.codec.http.HttpHeaders, io.netty.handler.codec.http2.Http2Headers)
{
java.lang.IllegalStateException v40;
io.netty.handler.codec.http.HttpHeaders v0;
io.netty.util.AsciiString v10, v14, v16, v19, v24, v25, v3, v35, v37, v38, v9;
boolean v12, v13, v15, v17, v6;
java.lang.Exception v39;
io.netty.handler.codec.http2.Http2Headers v1;
int v21, v22, v23, v26, v27, v28, v30, v31, v32, v36;
java.lang.String v34;
io.netty.handler.codec.http2.CharSequenceMap v11, v5;
java.util.Iterator v2, v4;
io.netty.util.ByteProcessor v20, v29;
java.lang.IllegalArgumentException v33;
java.lang.Object v18, v41, v7, v8;
v0 := @parameter0: io.netty.handler.codec.http.HttpHeaders;
v1 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
v2 = virtualinvoke v0.<io.netty.handler.codec.http.HttpHeaders: java.util.Iterator iteratorCharSequence()>();
v3 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONNECTION>;
v4 = virtualinvoke v0.<io.netty.handler.codec.http.HttpHeaders: java.util.Iterator valueCharSequenceIterator(java.lang.CharSequence)>(v3);
v5 = staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: io.netty.handler.codec.http2.CharSequenceMap toLowercaseMap(java.util.Iterator,int)>(v4, 8);
label01:
v6 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label11;
v7 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getKey()>();
v9 = staticinvoke <io.netty.util.AsciiString: io.netty.util.AsciiString of(java.lang.CharSequence)>(v8);
v10 = virtualinvoke v9.<io.netty.util.AsciiString: io.netty.util.AsciiString toLowerCase()>();
v11 = <io.netty.handler.codec.http2.HttpConversionUtil: io.netty.handler.codec.http2.CharSequenceMap HTTP_TO_HTTP2_HEADER_BLACKLIST>;
v12 = virtualinvoke v11.<io.netty.handler.codec.http2.CharSequenceMap: boolean contains(java.lang.Object)>(v10);
if v12 != 0 goto label01;
v13 = virtualinvoke v5.<io.netty.handler.codec.http2.CharSequenceMap: boolean contains(java.lang.Object)>(v10);
if v13 != 0 goto label01;
v14 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString TE>;
v15 = virtualinvoke v10.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v14);
if v15 == 0 goto label02;
staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: void toHttp2HeadersFilterTE(java.util.Map$Entry,io.netty.handler.codec.http2.Http2Headers)>(v7, v1);
goto label01;
label02:
v16 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString COOKIE>;
v17 = virtualinvoke v10.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v16);
if v17 == 0 goto label10;
v18 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getValue()>();
v19 = staticinvoke <io.netty.util.AsciiString: io.netty.util.AsciiString of(java.lang.CharSequence)>(v18);
label03:
v20 = <io.netty.util.ByteProcessor: io.netty.util.ByteProcessor FIND_SEMI_COLON>;
v21 = virtualinvoke v19.<io.netty.util.AsciiString: int forEachByte(io.netty.util.ByteProcessor)>(v20);
v22 = (int) -1;
if v21 == v22 goto label07;
v23 = 0;
label04:
v24 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString COOKIE>;
v25 = virtualinvoke v19.<io.netty.util.AsciiString: io.netty.util.AsciiString subSequence(int,int,boolean)>(v23, v21, 0);
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v24, v25);
v23 = v21 + 2;
v26 = virtualinvoke v19.<io.netty.util.AsciiString: int length()>();
if v23 >= v26 goto label05;
v27 = virtualinvoke v19.<io.netty.util.AsciiString: int length()>();
v28 = v27 - v23;
v29 = <io.netty.util.ByteProcessor: io.netty.util.ByteProcessor FIND_SEMI_COLON>;
v30 = virtualinvoke v19.<io.netty.util.AsciiString: int forEachByte(int,int,io.netty.util.ByteProcessor)>(v23, v28, v29);
v21 = v30;
v31 = (int) -1;
if v30 != v31 goto label04;
label05:
v32 = virtualinvoke v19.<io.netty.util.AsciiString: int length()>();
if v23 < v32 goto label06;
v33 = new java.lang.IllegalArgumentException;
v34 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.util.AsciiString)>(v19) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("cookie value is of unexpected format: \u0001");
specialinvoke v33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v34);
throw v33;
label06:
v35 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString COOKIE>;
v36 = virtualinvoke v19.<io.netty.util.AsciiString: int length()>();
v37 = virtualinvoke v19.<io.netty.util.AsciiString: io.netty.util.AsciiString subSequence(int,int,boolean)>(v23, v36, 0);
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v35, v37);
goto label01;
label07:
v38 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString COOKIE>;
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v38, v19);
label08:
goto label01;
label09:
v39 := @caughtexception;
v40 = new java.lang.IllegalStateException;
specialinvoke v40.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v39);
throw v40;
label10:
v41 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getValue()>();
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v10, v41);
goto label01;
label11:
return;
catch java.lang.Exception from label03 to label08 with label09;
}
private static io.netty.util.AsciiString toHttp2Path(java.net.URI)
{
io.netty.util.AsciiString v22;
int v10, v3, v5, v6, v8, v9;
java.lang.String v11, v13, v14, v16, v17, v19, v2, v20, v4, v7;
java.net.URI v0;
boolean v12, v15, v18, v21;
java.lang.StringBuilder v1;
v0 := @parameter0: java.net.URI;
v1 = new java.lang.StringBuilder;
v2 = virtualinvoke v0.<java.net.URI: java.lang.String getRawPath()>();
v3 = staticinvoke <io.netty.util.internal.StringUtil: int length(java.lang.String)>(v2);
v4 = virtualinvoke v0.<java.net.URI: java.lang.String getRawQuery()>();
v5 = staticinvoke <io.netty.util.internal.StringUtil: int length(java.lang.String)>(v4);
v6 = v3 + v5;
v7 = virtualinvoke v0.<java.net.URI: java.lang.String getRawFragment()>();
v8 = staticinvoke <io.netty.util.internal.StringUtil: int length(java.lang.String)>(v7);
v9 = v6 + v8;
v10 = v9 + 2;
specialinvoke v1.<java.lang.StringBuilder: void <init>(int)>(v10);
v11 = virtualinvoke v0.<java.net.URI: java.lang.String getRawPath()>();
v12 = staticinvoke <io.netty.util.internal.StringUtil: boolean isNullOrEmpty(java.lang.String)>(v11);
if v12 != 0 goto label1;
v13 = virtualinvoke v0.<java.net.URI: java.lang.String getRawPath()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v13);
label1:
v14 = virtualinvoke v0.<java.net.URI: java.lang.String getRawQuery()>();
v15 = staticinvoke <io.netty.util.internal.StringUtil: boolean isNullOrEmpty(java.lang.String)>(v14);
if v15 != 0 goto label2;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63);
v16 = virtualinvoke v0.<java.net.URI: java.lang.String getRawQuery()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v16);
label2:
v17 = virtualinvoke v0.<java.net.URI: java.lang.String getRawFragment()>();
v18 = staticinvoke <io.netty.util.internal.StringUtil: boolean isNullOrEmpty(java.lang.String)>(v17);
if v18 != 0 goto label3;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);
v19 = virtualinvoke v0.<java.net.URI: java.lang.String getRawFragment()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v19);
label3:
v20 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
v21 = virtualinvoke v20.<java.lang.String: boolean isEmpty()>();
if v21 == 0 goto label4;
v22 = <io.netty.handler.codec.http2.HttpConversionUtil: io.netty.util.AsciiString EMPTY_REQUEST_PATH>;
goto label5;
label4:
v22 = new io.netty.util.AsciiString;
specialinvoke v22.<io.netty.util.AsciiString: void <init>(java.lang.CharSequence)>(v20);
label5:
return v22;
}
static void setHttp2Authority(java.lang.String, io.netty.handler.codec.http2.Http2Headers)
{
io.netty.util.AsciiString v10, v3;
java.lang.IllegalArgumentException v8;
io.netty.handler.codec.http2.Http2Headers v1;
int v4, v5, v6, v7;
java.lang.String v0, v9;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
if v0 == null goto label3;
v2 = virtualinvoke v0.<java.lang.String: boolean isEmpty()>();
if v2 == 0 goto label1;
v3 = <io.netty.util.AsciiString: io.netty.util.AsciiString EMPTY_STRING>;
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.http2.Http2Headers authority(java.lang.CharSequence)>(v3);
goto label3;
label1:
v4 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(64);
v5 = v4 + 1;
v6 = virtualinvoke v0.<java.lang.String: int length()>();
v7 = v6 - v5;
if v7 != 0 goto label2;
v8 = new java.lang.IllegalArgumentException;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("authority: \u0001");
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v9);
throw v8;
label2:
v10 = new io.netty.util.AsciiString;
specialinvoke v10.<io.netty.util.AsciiString: void <init>(java.lang.CharSequence,int,int)>(v0, v5, v7);
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.http2.Http2Headers authority(java.lang.CharSequence)>(v10);
label3:
return;
}
private static void setHttp2Scheme(io.netty.handler.codec.http.HttpHeaders, io.netty.handler.codec.http2.Http2Headers)
{
io.netty.handler.codec.http.HttpHeaders v0;
java.net.URI v2;
io.netty.handler.codec.http2.Http2Headers v1;
v0 := @parameter0: io.netty.handler.codec.http.HttpHeaders;
v1 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
v2 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>("");
staticinvoke <io.netty.handler.codec.http2.HttpConversionUtil: void setHttp2Scheme(io.netty.handler.codec.http.HttpHeaders,java.net.URI,io.netty.handler.codec.http2.Http2Headers)>(v0, v2, v1);
return;
}
private static void setHttp2Scheme(io.netty.handler.codec.http.HttpHeaders, java.net.URI, io.netty.handler.codec.http2.Http2Headers)
{
io.netty.handler.codec.http.HttpHeaders v0;
io.netty.util.AsciiString v14, v19, v5, v7, v9;
io.netty.handler.codec.http2.HttpConversionUtil$ExtensionHeaderNames v6;
int v10, v12, v15, v17;
java.lang.String v3, v8;
java.net.URI v1;
boolean v4;
java.lang.IllegalArgumentException v20;
io.netty.handler.codec.http.HttpScheme v11, v13, v16, v18;
io.netty.handler.codec.http2.Http2Headers v2;
v0 := @parameter0: io.netty.handler.codec.http.HttpHeaders;
v1 := @parameter1: java.net.URI;
v2 := @parameter2: io.netty.handler.codec.http2.Http2Headers;
v3 = virtualinvoke v1.<java.net.URI: java.lang.String getScheme()>();
v4 = staticinvoke <io.netty.util.internal.StringUtil: boolean isNullOrEmpty(java.lang.String)>(v3);
if v4 != 0 goto label1;
v5 = new io.netty.util.AsciiString;
specialinvoke v5.<io.netty.util.AsciiString: void <init>(java.lang.CharSequence)>(v3);
interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.http2.Http2Headers scheme(java.lang.CharSequence)>(v5);
return;
label1:
v6 = <io.netty.handler.codec.http2.HttpConversionUtil$ExtensionHeaderNames: io.netty.handler.codec.http2.HttpConversionUtil$ExtensionHeaderNames SCHEME>;
v7 = virtualinvoke v6.<io.netty.handler.codec.http2.HttpConversionUtil$ExtensionHeaderNames: io.netty.util.AsciiString text()>();
v8 = virtualinvoke v0.<io.netty.handler.codec.http.HttpHeaders: java.lang.String get(java.lang.CharSequence)>(v7);
if v8 == null goto label2;
v9 = staticinvoke <io.netty.util.AsciiString: io.netty.util.AsciiString of(java.lang.CharSequence)>(v8);
interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.http2.Http2Headers scheme(java.lang.CharSequence)>(v9);
return;
label2:
v10 = virtualinvoke v1.<java.net.URI: int getPort()>();
v11 = <io.netty.handler.codec.http.HttpScheme: io.netty.handler.codec.http.HttpScheme HTTPS>;
v12 = virtualinvoke v11.<io.netty.handler.codec.http.HttpScheme: int port()>();
if v10 != v12 goto label3;
v13 = <io.netty.handler.codec.http.HttpScheme: io.netty.handler.codec.http.HttpScheme HTTPS>;
v14 = virtualinvoke v13.<io.netty.handler.codec.http.HttpScheme: io.netty.util.AsciiString name()>();
interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.http2.Http2Headers scheme(java.lang.CharSequence)>(v14);
goto label5;
label3:
v15 = virtualinvoke v1.<java.net.URI: int getPort()>();
v16 = <io.netty.handler.codec.http.HttpScheme: io.netty.handler.codec.http.HttpScheme HTTP>;
v17 = virtualinvoke v16.<io.netty.handler.codec.http.HttpScheme: int port()>();
if v15 != v17 goto label4;
v18 = <io.netty.handler.codec.http.HttpScheme: io.netty.handler.codec.http.HttpScheme HTTP>;
v19 = virtualinvoke v18.<io.netty.handler.codec.http.HttpScheme: io.netty.util.AsciiString name()>();
interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.http2.Http2Headers scheme(java.lang.CharSequence)>(v19);
goto label5;
label4:
v20 = new java.lang.IllegalArgumentException;
specialinvoke v20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(":scheme must be specified. see https://tools.ietf.org/html/rfc7540#section-8.1.2.3");
throw v20;
label5:
return;
}
static void <clinit>()
{
io.netty.util.AsciiString v11, v12, v14, v15, v17, v18, v2, v21, v22, v25, v26, v29, v3, v30, v33, v4, v6, v7, v9;
io.netty.handler.codec.http2.HttpConversionUtil$ExtensionHeaderNames v20, v24, v28;
io.netty.handler.codec.http.HttpResponseStatus v32;
io.netty.handler.codec.http2.CharSequenceMap v0, v1, v10, v13, v16, v19, v23, v27, v5, v8;
io.netty.handler.codec.http.HttpMethod v31;
v0 = new io.netty.handler.codec.http2.CharSequenceMap;
specialinvoke v0.<io.netty.handler.codec.http2.CharSequenceMap: void <init>()>();
<io.netty.handler.codec.http2.HttpConversionUtil: io.netty.handler.codec.http2.CharSequenceMap HTTP_TO_HTTP2_HEADER_BLACKLIST> = v0;
v1 = <io.netty.handler.codec.http2.HttpConversionUtil: io.netty.handler.codec.http2.CharSequenceMap HTTP_TO_HTTP2_HEADER_BLACKLIST>;
v2 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONNECTION>;
v3 = <io.netty.util.AsciiString: io.netty.util.AsciiString EMPTY_STRING>;
virtualinvoke v1.<io.netty.handler.codec.http2.CharSequenceMap: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v2, v3);
v4 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString KEEP_ALIVE>;
v5 = <io.netty.handler.codec.http2.HttpConversionUtil: io.netty.handler.codec.http2.CharSequenceMap HTTP_TO_HTTP2_HEADER_BLACKLIST>;
v6 = <io.netty.util.AsciiString: io.netty.util.AsciiString EMPTY_STRING>;
virtualinvoke v5.<io.netty.handler.codec.http2.CharSequenceMap: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v4, v6);
v7 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString PROXY_CONNECTION>;
v8 = <io.netty.handler.codec.http2.HttpConversionUtil: io.netty.handler.codec.http2.CharSequenceMap HTTP_TO_HTTP2_HEADER_BLACKLIST>;
v9 = <io.netty.util.AsciiString: io.netty.util.AsciiString EMPTY_STRING>;
virtualinvoke v8.<io.netty.handler.codec.http2.CharSequenceMap: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v7, v9);
v10 = <io.netty.handler.codec.http2.HttpConversionUtil: io.netty.handler.codec.http2.CharSequenceMap HTTP_TO_HTTP2_HEADER_BLACKLIST>;
v11 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString TRANSFER_ENCODING>;
v12 = <io.netty.util.AsciiString: io.netty.util.AsciiString EMPTY_STRING>;
virtualinvoke v10.<io.netty.handler.codec.http2.CharSequenceMap: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v11, v12);
v13 = <io.netty.handler.codec.http2.HttpConversionUtil: io.netty.handler.codec.http2.CharSequenceMap HTTP_TO_HTTP2_HEADER_BLACKLIST>;
v14 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString HOST>;
v15 = <io.netty.util.AsciiString: io.netty.util.AsciiString EMPTY_STRING>;
virtualinvoke v13.<io.netty.handler.codec.http2.CharSequenceMap: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v14, v15);
v16 = <io.netty.handler.codec.http2.HttpConversionUtil: io.netty.handler.codec.http2.CharSequenceMap HTTP_TO_HTTP2_HEADER_BLACKLIST>;
v17 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString UPGRADE>;
v18 = <io.netty.util.AsciiString: io.netty.util.AsciiString EMPTY_STRING>;
virtualinvoke v16.<io.netty.handler.codec.http2.CharSequenceMap: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v17, v18);
v19 = <io.netty.handler.codec.http2.HttpConversionUtil: io.netty.handler.codec.http2.CharSequenceMap HTTP_TO_HTTP2_HEADER_BLACKLIST>;
v20 = <io.netty.handler.codec.http2.HttpConversionUtil$ExtensionHeaderNames: io.netty.handler.codec.http2.HttpConversionUtil$ExtensionHeaderNames STREAM_ID>;
v21 = virtualinvoke v20.<io.netty.handler.codec.http2.HttpConversionUtil$ExtensionHeaderNames: io.netty.util.AsciiString text()>();
v22 = <io.netty.util.AsciiString: io.netty.util.AsciiString EMPTY_STRING>;
virtualinvoke v19.<io.netty.handler.codec.http2.CharSequenceMap: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v21, v22);
v23 = <io.netty.handler.codec.http2.HttpConversionUtil: io.netty.handler.codec.http2.CharSequenceMap HTTP_TO_HTTP2_HEADER_BLACKLIST>;
v24 = <io.netty.handler.codec.http2.HttpConversionUtil$ExtensionHeaderNames: io.netty.handler.codec.http2.HttpConversionUtil$ExtensionHeaderNames SCHEME>;
v25 = virtualinvoke v24.<io.netty.handler.codec.http2.HttpConversionUtil$ExtensionHeaderNames: io.netty.util.AsciiString text()>();
v26 = <io.netty.util.AsciiString: io.netty.util.AsciiString EMPTY_STRING>;
virtualinvoke v23.<io.netty.handler.codec.http2.CharSequenceMap: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v25, v26);
v27 = <io.netty.handler.codec.http2.HttpConversionUtil: io.netty.handler.codec.http2.CharSequenceMap HTTP_TO_HTTP2_HEADER_BLACKLIST>;
v28 = <io.netty.handler.codec.http2.HttpConversionUtil$ExtensionHeaderNames: io.netty.handler.codec.http2.HttpConversionUtil$ExtensionHeaderNames PATH>;
v29 = virtualinvoke v28.<io.netty.handler.codec.http2.HttpConversionUtil$ExtensionHeaderNames: io.netty.util.AsciiString text()>();
v30 = <io.netty.util.AsciiString: io.netty.util.AsciiString EMPTY_STRING>;
virtualinvoke v27.<io.netty.handler.codec.http2.CharSequenceMap: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v29, v30);
v31 = <io.netty.handler.codec.http.HttpMethod: io.netty.handler.codec.http.HttpMethod OPTIONS>;
<io.netty.handler.codec.http2.HttpConversionUtil: io.netty.handler.codec.http.HttpMethod OUT_OF_MESSAGE_SEQUENCE_METHOD> = v31;
v32 = <io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus OK>;
<io.netty.handler.codec.http2.HttpConversionUtil: io.netty.handler.codec.http.HttpResponseStatus OUT_OF_MESSAGE_SEQUENCE_RETURN_CODE> = v32;
v33 = staticinvoke <io.netty.util.AsciiString: io.netty.util.AsciiString cached(java.lang.String)>("/");
<io.netty.handler.codec.http2.HttpConversionUtil: io.netty.util.AsciiString EMPTY_REQUEST_PATH> = v33;
return;
}
}