final class io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator extends java.lang.Object implements java.util.Map$Entry, java.util.Iterator
{
private int i;
private io.netty.util.AsciiString[] current;
private io.netty.util.AsciiString key;
private io.netty.util.AsciiString value;
final io.netty.handler.codec.http2.ReadOnlyHttp2Headers this$0;
private void <init>(io.netty.handler.codec.http2.ReadOnlyHttp2Headers)
{
io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator v0;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v1, v2, v5, v7;
int v4;
io.netty.util.AsciiString[] v3, v6;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator;
v1 := @parameter0: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.handler.codec.http2.ReadOnlyHttp2Headers this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.handler.codec.http2.ReadOnlyHttp2Headers this$0>;
v3 = v2.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] pseudoHeaders>;
v4 = lengthof v3;
if v4 == 0 goto label1;
v5 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.handler.codec.http2.ReadOnlyHttp2Headers this$0>;
v6 = v5.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] pseudoHeaders>;
goto label2;
label1:
v7 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.handler.codec.http2.ReadOnlyHttp2Headers this$0>;
v6 = v7.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] otherHeaders>;
label2:
v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.util.AsciiString[] current> = v6;
return;
}
public boolean hasNext()
{
io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator v0;
int v1, v3;
io.netty.util.AsciiString[] v2;
boolean v4;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator;
v1 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: int i>;
v2 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.util.AsciiString[] current>;
v3 = lengthof v2;
if v1 == v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public java.util.Map$Entry next()
{
io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator v0;
io.netty.util.AsciiString v5, v9;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v16, v18;
int v10, v11, v12, v14, v4, v7, v8;
java.util.NoSuchElementException v2;
boolean v1;
io.netty.util.AsciiString[] v13, v15, v17, v19, v3, v6;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: boolean hasNext()>();
if v1 != 0 goto label1;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>()>();
throw v2;
label1:
v3 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.util.AsciiString[] current>;
v4 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: int i>;
v5 = v3[v4];
v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.util.AsciiString key> = v5;
v6 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.util.AsciiString[] current>;
v7 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: int i>;
v8 = v7 + 1;
v9 = v6[v8];
v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.util.AsciiString value> = v9;
v10 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: int i>;
v11 = v10 + 2;
v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: int i> = v11;
v12 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: int i>;
v13 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.util.AsciiString[] current>;
v14 = lengthof v13;
if v12 != v14 goto label2;
v15 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.util.AsciiString[] current>;
v16 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.handler.codec.http2.ReadOnlyHttp2Headers this$0>;
v17 = v16.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] pseudoHeaders>;
if v15 != v17 goto label2;
v18 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.handler.codec.http2.ReadOnlyHttp2Headers this$0>;
v19 = v18.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] otherHeaders>;
v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.util.AsciiString[] current> = v19;
v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: int i> = 0;
label2:
return v0;
}
public java.lang.CharSequence getKey()
{
io.netty.util.AsciiString v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator;
v1 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.util.AsciiString key>;
return v1;
}
public java.lang.CharSequence getValue()
{
io.netty.util.AsciiString v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator;
v1 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.util.AsciiString value>;
return v1;
}
public java.lang.CharSequence setValue(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public void remove()
{
java.lang.UnsupportedOperationException v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v1;
}
public java.lang.String toString()
{
io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator v0;
io.netty.util.AsciiString v1, v3;
java.lang.String v2, v4, v5;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator;
v1 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.util.AsciiString key>;
v2 = virtualinvoke v1.<io.netty.util.AsciiString: java.lang.String toString()>();
v3 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: io.netty.util.AsciiString value>;
v4 = virtualinvoke v3.<io.netty.util.AsciiString: java.lang.String toString()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v2, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001=\u0001");
return v5;
}
}