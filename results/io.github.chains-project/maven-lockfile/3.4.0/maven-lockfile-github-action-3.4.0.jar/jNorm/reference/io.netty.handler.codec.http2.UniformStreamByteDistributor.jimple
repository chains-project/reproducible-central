public final class io.netty.handler.codec.http2.UniformStreamByteDistributor extends java.lang.Object implements io.netty.handler.codec.http2.StreamByteDistributor
{
private final io.netty.handler.codec.http2.Http2Connection$PropertyKey stateKey;
private final java.util.Deque queue;
private int minAllocationChunk;
private long totalStreamableBytes;
public void <init>(io.netty.handler.codec.http2.Http2Connection)
{
io.netty.handler.codec.http2.UniformStreamByteDistributor$1 v7;
io.netty.handler.codec.http2.UniformStreamByteDistributor$State v6;
io.netty.handler.codec.http2.UniformStreamByteDistributor v0;
io.netty.handler.codec.http2.Http2Connection v1;
io.netty.handler.codec.http2.Http2Connection$PropertyKey v3, v5;
io.netty.handler.codec.http2.Http2Stream v4;
java.util.ArrayDeque v2;
v0 := @this: io.netty.handler.codec.http2.UniformStreamByteDistributor;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Connection;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.ArrayDeque;
specialinvoke v2.<java.util.ArrayDeque: void <init>(int)>(4);
v0.<io.netty.handler.codec.http2.UniformStreamByteDistributor: java.util.Deque queue> = v2;
v0.<io.netty.handler.codec.http2.UniformStreamByteDistributor: int minAllocationChunk> = 1024;
v3 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Connection$PropertyKey newKey()>();
v0.<io.netty.handler.codec.http2.UniformStreamByteDistributor: io.netty.handler.codec.http2.Http2Connection$PropertyKey stateKey> = v3;
v4 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Stream connectionStream()>();
v5 = v0.<io.netty.handler.codec.http2.UniformStreamByteDistributor: io.netty.handler.codec.http2.Http2Connection$PropertyKey stateKey>;
v6 = new io.netty.handler.codec.http2.UniformStreamByteDistributor$State;
specialinvoke v6.<io.netty.handler.codec.http2.UniformStreamByteDistributor$State: void <init>(io.netty.handler.codec.http2.UniformStreamByteDistributor,io.netty.handler.codec.http2.Http2Stream)>(v0, v4);
interfaceinvoke v4.<io.netty.handler.codec.http2.Http2Stream: java.lang.Object setProperty(io.netty.handler.codec.http2.Http2Connection$PropertyKey,java.lang.Object)>(v5, v6);
v7 = new io.netty.handler.codec.http2.UniformStreamByteDistributor$1;
specialinvoke v7.<io.netty.handler.codec.http2.UniformStreamByteDistributor$1: void <init>(io.netty.handler.codec.http2.UniformStreamByteDistributor)>(v0);
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: void addListener(io.netty.handler.codec.http2.Http2Connection$Listener)>(v7);
return;
}
public void minAllocationChunk(int)
{
int v1;
io.netty.handler.codec.http2.UniformStreamByteDistributor v0;
v0 := @this: io.netty.handler.codec.http2.UniformStreamByteDistributor;
v1 := @parameter0: int;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v1, "minAllocationChunk");
v0.<io.netty.handler.codec.http2.UniformStreamByteDistributor: int minAllocationChunk> = v1;
return;
}
public void updateStreamableBytes(io.netty.handler.codec.http2.StreamByteDistributor$StreamState)
{
io.netty.handler.codec.http2.UniformStreamByteDistributor$State v3;
int v4, v6;
io.netty.handler.codec.http2.Http2Stream v2;
boolean v5;
io.netty.handler.codec.http2.StreamByteDistributor$StreamState v1;
io.netty.handler.codec.http2.UniformStreamByteDistributor v0;
v0 := @this: io.netty.handler.codec.http2.UniformStreamByteDistributor;
v1 := @parameter0: io.netty.handler.codec.http2.StreamByteDistributor$StreamState;
v2 = interfaceinvoke v1.<io.netty.handler.codec.http2.StreamByteDistributor$StreamState: io.netty.handler.codec.http2.Http2Stream stream()>();
v3 = specialinvoke v0.<io.netty.handler.codec.http2.UniformStreamByteDistributor: io.netty.handler.codec.http2.UniformStreamByteDistributor$State state(io.netty.handler.codec.http2.Http2Stream)>(v2);
v4 = staticinvoke <io.netty.handler.codec.http2.Http2CodecUtil: int streamableBytes(io.netty.handler.codec.http2.StreamByteDistributor$StreamState)>(v1);
v5 = interfaceinvoke v1.<io.netty.handler.codec.http2.StreamByteDistributor$StreamState: boolean hasFrame()>();
v6 = interfaceinvoke v1.<io.netty.handler.codec.http2.StreamByteDistributor$StreamState: int windowSize()>();
virtualinvoke v3.<io.netty.handler.codec.http2.UniformStreamByteDistributor$State: void updateStreamableBytes(int,boolean,int)>(v4, v5, v6);
return;
}
public void updateDependencyTree(int, int, short, boolean)
{
short v3;
int v1, v2;
boolean v4;
io.netty.handler.codec.http2.UniformStreamByteDistributor v0;
v0 := @this: io.netty.handler.codec.http2.UniformStreamByteDistributor;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: short;
v4 := @parameter3: boolean;
return;
}
public boolean distribute(int, io.netty.handler.codec.http2.StreamByteDistributor$Writer) throws io.netty.handler.codec.http2.Http2Exception
{
long v21, v5;
java.util.Deque v11, v15, v19, v3;
io.netty.handler.codec.http2.UniformStreamByteDistributor v0;
byte v22, v6;
int v1, v10, v14, v16, v17, v18, v4, v8, v9;
boolean v13, v23, v7;
io.netty.handler.codec.http2.StreamByteDistributor$Writer v2;
java.lang.Object v12, v20;
v0 := @this: io.netty.handler.codec.http2.UniformStreamByteDistributor;
v1 := @parameter0: int;
v2 := @parameter1: io.netty.handler.codec.http2.StreamByteDistributor$Writer;
v3 = v0.<io.netty.handler.codec.http2.UniformStreamByteDistributor: java.util.Deque queue>;
v4 = interfaceinvoke v3.<java.util.Deque: int size()>();
if v4 != 0 goto label3;
v5 = v0.<io.netty.handler.codec.http2.UniformStreamByteDistributor: long totalStreamableBytes>;
v6 = v5 cmp 0L;
if v6 <= 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
return v7;
label3:
v8 = v0.<io.netty.handler.codec.http2.UniformStreamByteDistributor: int minAllocationChunk>;
v9 = v1 / v4;
v10 = staticinvoke <java.lang.Math: int max(int,int)>(v8, v9);
v11 = v0.<io.netty.handler.codec.http2.UniformStreamByteDistributor: java.util.Deque queue>;
v12 = interfaceinvoke v11.<java.util.Deque: java.lang.Object pollFirst()>();
label4:
v12.<io.netty.handler.codec.http2.UniformStreamByteDistributor$State: boolean enqueued> = 0;
v13 = v12.<io.netty.handler.codec.http2.UniformStreamByteDistributor$State: boolean windowNegative>;
if v13 != 0 goto label6;
if v1 != 0 goto label5;
v14 = v12.<io.netty.handler.codec.http2.UniformStreamByteDistributor$State: int streamableBytes>;
if v14 <= 0 goto label5;
v15 = v0.<io.netty.handler.codec.http2.UniformStreamByteDistributor: java.util.Deque queue>;
interfaceinvoke v15.<java.util.Deque: void addFirst(java.lang.Object)>(v12);
v12.<io.netty.handler.codec.http2.UniformStreamByteDistributor$State: boolean enqueued> = 1;
goto label7;
label5:
v16 = v12.<io.netty.handler.codec.http2.UniformStreamByteDistributor$State: int streamableBytes>;
v17 = staticinvoke <java.lang.Math: int min(int,int)>(v1, v16);
v18 = staticinvoke <java.lang.Math: int min(int,int)>(v10, v17);
v1 = v1 - v18;
virtualinvoke v12.<io.netty.handler.codec.http2.UniformStreamByteDistributor$State: void write(int,io.netty.handler.codec.http2.StreamByteDistributor$Writer)>(v18, v2);
label6:
v19 = v0.<io.netty.handler.codec.http2.UniformStreamByteDistributor: java.util.Deque queue>;
v20 = interfaceinvoke v19.<java.util.Deque: java.lang.Object pollFirst()>();
v12 = v20;
if v20 != null goto label4;
label7:
v21 = v0.<io.netty.handler.codec.http2.UniformStreamByteDistributor: long totalStreamableBytes>;
v22 = v21 cmp 0L;
if v22 <= 0 goto label8;
v23 = 1;
goto label9;
label8:
v23 = 0;
label9:
return v23;
}
private io.netty.handler.codec.http2.UniformStreamByteDistributor$State state(io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.Http2Connection$PropertyKey v3;
io.netty.handler.codec.http2.Http2Stream v1;
java.lang.Object v2, v4;
io.netty.handler.codec.http2.UniformStreamByteDistributor v0;
v0 := @this: io.netty.handler.codec.http2.UniformStreamByteDistributor;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "stream");
v3 = v0.<io.netty.handler.codec.http2.UniformStreamByteDistributor: io.netty.handler.codec.http2.Http2Connection$PropertyKey stateKey>;
v4 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Stream: java.lang.Object getProperty(io.netty.handler.codec.http2.Http2Connection$PropertyKey)>(v3);
return v4;
}
}