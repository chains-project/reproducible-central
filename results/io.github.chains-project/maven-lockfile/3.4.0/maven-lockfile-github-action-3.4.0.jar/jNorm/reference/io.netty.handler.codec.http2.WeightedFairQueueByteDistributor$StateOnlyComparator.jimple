final class io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$StateOnlyComparator extends java.lang.Object implements java.util.Comparator, java.io.Serializable
{
private static final long serialVersionUID;
static final io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$StateOnlyComparator INSTANCE;
private void <init>()
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$StateOnlyComparator v0;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$StateOnlyComparator;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public int compare(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State, io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v1, v2;
byte v5;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$StateOnlyComparator v0;
int v10, v11, v6, v7, v8, v9;
boolean v3, v4;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$StateOnlyComparator;
v1 := @parameter0: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v2 := @parameter1: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v3 = virtualinvoke v1.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: boolean wasStreamReservedOrActivated()>();
v4 = virtualinvoke v2.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: boolean wasStreamReservedOrActivated()>();
if v3 == v4 goto label3;
if v3 == 0 goto label1;
v5 = -1;
goto label2;
label1:
v5 = 1;
label2:
return v5;
label3:
v6 = v2.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int dependencyTreeDepth>;
v7 = v1.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int dependencyTreeDepth>;
v8 = v6 - v7;
if v8 == 0 goto label4;
v9 = v8;
goto label5;
label4:
v10 = v1.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamId>;
v11 = v2.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamId>;
v9 = v10 - v11;
label5:
return v9;
}
static void <clinit>()
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$StateOnlyComparator v0;
v0 = new io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$StateOnlyComparator;
specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$StateOnlyComparator: void <init>()>();
<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$StateOnlyComparator: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$StateOnlyComparator INSTANCE> = v0;
return;
}
}