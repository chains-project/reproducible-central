class io.netty.handler.codec.serialization.ClassLoaderClassResolver extends java.lang.Object implements io.netty.handler.codec.serialization.ClassResolver
{
private final java.lang.ClassLoader classLoader;
void <init>(java.lang.ClassLoader)
{
io.netty.handler.codec.serialization.ClassLoaderClassResolver v0;
java.lang.ClassLoader v1;
v0 := @this: io.netty.handler.codec.serialization.ClassLoaderClassResolver;
v1 := @parameter0: java.lang.ClassLoader;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.codec.serialization.ClassLoaderClassResolver: java.lang.ClassLoader classLoader> = v1;
return;
}
public java.lang.Class resolve(java.lang.String) throws java.lang.ClassNotFoundException
{
io.netty.handler.codec.serialization.ClassLoaderClassResolver v0;
java.lang.Class v3, v6;
java.lang.ClassNotFoundException v4;
java.lang.ClassLoader v2, v5;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.serialization.ClassLoaderClassResolver;
v1 := @parameter0: java.lang.String;
label1:
v2 = v0.<io.netty.handler.codec.serialization.ClassLoaderClassResolver: java.lang.ClassLoader classLoader>;
v3 = virtualinvoke v2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(v1);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = v0.<io.netty.handler.codec.serialization.ClassLoaderClassResolver: java.lang.ClassLoader classLoader>;
v6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(v1, 0, v5);
return v6;
catch java.lang.ClassNotFoundException from label1 to label2 with label3;
}
}