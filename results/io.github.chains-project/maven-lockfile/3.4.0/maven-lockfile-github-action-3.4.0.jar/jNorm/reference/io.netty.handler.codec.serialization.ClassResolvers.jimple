public final class io.netty.handler.codec.serialization.ClassResolvers extends java.lang.Object
{
public static io.netty.handler.codec.serialization.ClassResolver cacheDisabled(java.lang.ClassLoader)
{
io.netty.handler.codec.serialization.ClassLoaderClassResolver v1;
java.lang.ClassLoader v0, v2;
v0 := @parameter0: java.lang.ClassLoader;
v1 = new io.netty.handler.codec.serialization.ClassLoaderClassResolver;
v2 = staticinvoke <io.netty.handler.codec.serialization.ClassResolvers: java.lang.ClassLoader defaultClassLoader(java.lang.ClassLoader)>(v0);
specialinvoke v1.<io.netty.handler.codec.serialization.ClassLoaderClassResolver: void <init>(java.lang.ClassLoader)>(v2);
return v1;
}
public static io.netty.handler.codec.serialization.ClassResolver weakCachingResolver(java.lang.ClassLoader)
{
io.netty.handler.codec.serialization.CachingClassResolver v1;
io.netty.handler.codec.serialization.ClassLoaderClassResolver v2;
java.util.HashMap v5;
java.lang.ClassLoader v0, v3;
io.netty.handler.codec.serialization.WeakReferenceMap v4;
v0 := @parameter0: java.lang.ClassLoader;
v1 = new io.netty.handler.codec.serialization.CachingClassResolver;
v2 = new io.netty.handler.codec.serialization.ClassLoaderClassResolver;
v3 = staticinvoke <io.netty.handler.codec.serialization.ClassResolvers: java.lang.ClassLoader defaultClassLoader(java.lang.ClassLoader)>(v0);
specialinvoke v2.<io.netty.handler.codec.serialization.ClassLoaderClassResolver: void <init>(java.lang.ClassLoader)>(v3);
v4 = new io.netty.handler.codec.serialization.WeakReferenceMap;
v5 = new java.util.HashMap;
specialinvoke v5.<java.util.HashMap: void <init>()>();
specialinvoke v4.<io.netty.handler.codec.serialization.WeakReferenceMap: void <init>(java.util.Map)>(v5);
specialinvoke v1.<io.netty.handler.codec.serialization.CachingClassResolver: void <init>(io.netty.handler.codec.serialization.ClassResolver,java.util.Map)>(v2, v4);
return v1;
}
public static io.netty.handler.codec.serialization.ClassResolver softCachingResolver(java.lang.ClassLoader)
{
io.netty.handler.codec.serialization.CachingClassResolver v1;
io.netty.handler.codec.serialization.ClassLoaderClassResolver v2;
io.netty.handler.codec.serialization.SoftReferenceMap v4;
java.util.HashMap v5;
java.lang.ClassLoader v0, v3;
v0 := @parameter0: java.lang.ClassLoader;
v1 = new io.netty.handler.codec.serialization.CachingClassResolver;
v2 = new io.netty.handler.codec.serialization.ClassLoaderClassResolver;
v3 = staticinvoke <io.netty.handler.codec.serialization.ClassResolvers: java.lang.ClassLoader defaultClassLoader(java.lang.ClassLoader)>(v0);
specialinvoke v2.<io.netty.handler.codec.serialization.ClassLoaderClassResolver: void <init>(java.lang.ClassLoader)>(v3);
v4 = new io.netty.handler.codec.serialization.SoftReferenceMap;
v5 = new java.util.HashMap;
specialinvoke v5.<java.util.HashMap: void <init>()>();
specialinvoke v4.<io.netty.handler.codec.serialization.SoftReferenceMap: void <init>(java.util.Map)>(v5);
specialinvoke v1.<io.netty.handler.codec.serialization.CachingClassResolver: void <init>(io.netty.handler.codec.serialization.ClassResolver,java.util.Map)>(v2, v4);
return v1;
}
public static io.netty.handler.codec.serialization.ClassResolver weakCachingConcurrentResolver(java.lang.ClassLoader)
{
io.netty.handler.codec.serialization.CachingClassResolver v1;
io.netty.handler.codec.serialization.ClassLoaderClassResolver v2;
java.lang.ClassLoader v0, v3;
io.netty.handler.codec.serialization.WeakReferenceMap v4;
java.util.concurrent.ConcurrentMap v5;
v0 := @parameter0: java.lang.ClassLoader;
v1 = new io.netty.handler.codec.serialization.CachingClassResolver;
v2 = new io.netty.handler.codec.serialization.ClassLoaderClassResolver;
v3 = staticinvoke <io.netty.handler.codec.serialization.ClassResolvers: java.lang.ClassLoader defaultClassLoader(java.lang.ClassLoader)>(v0);
specialinvoke v2.<io.netty.handler.codec.serialization.ClassLoaderClassResolver: void <init>(java.lang.ClassLoader)>(v3);
v4 = new io.netty.handler.codec.serialization.WeakReferenceMap;
v5 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
specialinvoke v4.<io.netty.handler.codec.serialization.WeakReferenceMap: void <init>(java.util.Map)>(v5);
specialinvoke v1.<io.netty.handler.codec.serialization.CachingClassResolver: void <init>(io.netty.handler.codec.serialization.ClassResolver,java.util.Map)>(v2, v4);
return v1;
}
public static io.netty.handler.codec.serialization.ClassResolver softCachingConcurrentResolver(java.lang.ClassLoader)
{
io.netty.handler.codec.serialization.CachingClassResolver v1;
io.netty.handler.codec.serialization.ClassLoaderClassResolver v2;
io.netty.handler.codec.serialization.SoftReferenceMap v4;
java.lang.ClassLoader v0, v3;
java.util.concurrent.ConcurrentMap v5;
v0 := @parameter0: java.lang.ClassLoader;
v1 = new io.netty.handler.codec.serialization.CachingClassResolver;
v2 = new io.netty.handler.codec.serialization.ClassLoaderClassResolver;
v3 = staticinvoke <io.netty.handler.codec.serialization.ClassResolvers: java.lang.ClassLoader defaultClassLoader(java.lang.ClassLoader)>(v0);
specialinvoke v2.<io.netty.handler.codec.serialization.ClassLoaderClassResolver: void <init>(java.lang.ClassLoader)>(v3);
v4 = new io.netty.handler.codec.serialization.SoftReferenceMap;
v5 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
specialinvoke v4.<io.netty.handler.codec.serialization.SoftReferenceMap: void <init>(java.util.Map)>(v5);
specialinvoke v1.<io.netty.handler.codec.serialization.CachingClassResolver: void <init>(io.netty.handler.codec.serialization.ClassResolver,java.util.Map)>(v2, v4);
return v1;
}
static java.lang.ClassLoader defaultClassLoader(java.lang.ClassLoader)
{
java.lang.ClassLoader v0, v1, v2;
v0 := @parameter0: java.lang.ClassLoader;
if v0 == null goto label1;
return v0;
label1:
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: java.lang.ClassLoader getContextClassLoader()>();
if v1 == null goto label2;
return v1;
label2:
v2 = staticinvoke <io.netty.util.internal.PlatformDependent: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "Lio/netty/handler/codec/serialization/ClassResolvers;");
return v2;
}
private void <init>()
{
io.netty.handler.codec.serialization.ClassResolvers v0;
v0 := @this: io.netty.handler.codec.serialization.ClassResolvers;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
}