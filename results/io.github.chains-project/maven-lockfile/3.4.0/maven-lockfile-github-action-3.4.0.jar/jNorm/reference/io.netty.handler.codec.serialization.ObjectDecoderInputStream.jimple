public class io.netty.handler.codec.serialization.ObjectDecoderInputStream extends java.io.InputStream implements java.io.ObjectInput
{
private final java.io.DataInputStream in;
private final int maxObjectSize;
private final io.netty.handler.codec.serialization.ClassResolver classResolver;
public void <init>(java.io.InputStream)
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.InputStream v1;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 := @parameter0: java.io.InputStream;
specialinvoke v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: void <init>(java.io.InputStream,java.lang.ClassLoader)>(v1, null);
return;
}
public void <init>(java.io.InputStream, java.lang.ClassLoader)
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.lang.ClassLoader v2;
java.io.InputStream v1;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: java.lang.ClassLoader;
specialinvoke v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: void <init>(java.io.InputStream,java.lang.ClassLoader,int)>(v1, v2, 1048576);
return;
}
public void <init>(java.io.InputStream, int)
{
int v2;
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.InputStream v1;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: int;
specialinvoke v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: void <init>(java.io.InputStream,java.lang.ClassLoader,int)>(v1, null, v2);
return;
}
public void <init>(java.io.InputStream, java.lang.ClassLoader, int)
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v5;
int v3;
io.netty.handler.codec.serialization.ClassResolver v6;
java.lang.ClassLoader v2;
boolean v4;
java.io.InputStream v1;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: java.lang.ClassLoader;
v3 := @parameter2: int;
specialinvoke v0.<java.io.InputStream: void <init>()>();
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "in");
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v3, "maxObjectSize");
v4 = v1 instanceof java.io.DataInputStream;
if v4 == 0 goto label1;
v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in> = v1;
goto label2;
label1:
v5 = new java.io.DataInputStream;
specialinvoke v5.<java.io.DataInputStream: void <init>(java.io.InputStream)>(v1);
v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in> = v5;
label2:
v6 = staticinvoke <io.netty.handler.codec.serialization.ClassResolvers: io.netty.handler.codec.serialization.ClassResolver weakCachingResolver(java.lang.ClassLoader)>(v2);
v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: io.netty.handler.codec.serialization.ClassResolver classResolver> = v6;
v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: int maxObjectSize> = v3;
return;
}
public java.lang.Object readObject() throws java.lang.ClassNotFoundException, java.io.IOException
{
java.io.DataInputStream v9;
java.io.StreamCorruptedException v2, v5;
io.netty.handler.codec.serialization.CompactObjectInputStream v8;
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
int v1, v4, v6;
java.lang.Object v11;
io.netty.handler.codec.serialization.ClassResolver v10;
java.lang.String v3, v7;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 = virtualinvoke v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: int readInt()>();
if v1 > 0 goto label1;
v2 = new java.io.StreamCorruptedException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("invalid data length: \u0001");
specialinvoke v2.<java.io.StreamCorruptedException: void <init>(java.lang.String)>(v3);
throw v2;
label1:
v4 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: int maxObjectSize>;
if v1 <= v4 goto label2;
v5 = new java.io.StreamCorruptedException;
v6 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: int maxObjectSize>;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v1, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("data length too big: \u0001 (max: \u0001)");
specialinvoke v5.<java.io.StreamCorruptedException: void <init>(java.lang.String)>(v7);
throw v5;
label2:
v8 = new io.netty.handler.codec.serialization.CompactObjectInputStream;
v9 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v10 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: io.netty.handler.codec.serialization.ClassResolver classResolver>;
specialinvoke v8.<io.netty.handler.codec.serialization.CompactObjectInputStream: void <init>(java.io.InputStream,io.netty.handler.codec.serialization.ClassResolver)>(v9, v10);
v11 = virtualinvoke v8.<io.netty.handler.codec.serialization.CompactObjectInputStream: java.lang.Object readObject()>();
return v11;
}
public int available() throws java.io.IOException
{
int v2;
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v1;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v2 = virtualinvoke v1.<java.io.DataInputStream: int available()>();
return v2;
}
public void close() throws java.io.IOException
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v1;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
virtualinvoke v1.<java.io.DataInputStream: void close()>();
return;
}
public void mark(int)
{
int v1;
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v2;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
virtualinvoke v2.<java.io.DataInputStream: void mark(int)>(v1);
return;
}
public boolean markSupported()
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v1;
boolean v2;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v2 = virtualinvoke v1.<java.io.DataInputStream: boolean markSupported()>();
return v2;
}
public int read() throws java.io.IOException
{
int v2;
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v1;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v2 = virtualinvoke v1.<java.io.DataInputStream: int read()>();
return v2;
}
public final int read(byte[], int, int) throws java.io.IOException
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
byte[] v1;
java.io.DataInputStream v4;
int v2, v3, v5;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v5 = virtualinvoke v4.<java.io.DataInputStream: int read(byte[],int,int)>(v1, v2, v3);
return v5;
}
public final int read(byte[]) throws java.io.IOException
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
byte[] v1;
java.io.DataInputStream v2;
int v3;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 := @parameter0: byte[];
v2 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v3 = virtualinvoke v2.<java.io.DataInputStream: int read(byte[])>(v1);
return v3;
}
public final boolean readBoolean() throws java.io.IOException
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v1;
boolean v2;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v2 = virtualinvoke v1.<java.io.DataInputStream: boolean readBoolean()>();
return v2;
}
public final byte readByte() throws java.io.IOException
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v1;
byte v2;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v2 = virtualinvoke v1.<java.io.DataInputStream: byte readByte()>();
return v2;
}
public final char readChar() throws java.io.IOException
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v1;
char v2;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v2 = virtualinvoke v1.<java.io.DataInputStream: char readChar()>();
return v2;
}
public final double readDouble() throws java.io.IOException
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v1;
double v2;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v2 = virtualinvoke v1.<java.io.DataInputStream: double readDouble()>();
return v2;
}
public final float readFloat() throws java.io.IOException
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
float v2;
java.io.DataInputStream v1;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v2 = virtualinvoke v1.<java.io.DataInputStream: float readFloat()>();
return v2;
}
public final void readFully(byte[], int, int) throws java.io.IOException
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
byte[] v1;
java.io.DataInputStream v4;
int v2, v3;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
virtualinvoke v4.<java.io.DataInputStream: void readFully(byte[],int,int)>(v1, v2, v3);
return;
}
public final void readFully(byte[]) throws java.io.IOException
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
byte[] v1;
java.io.DataInputStream v2;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 := @parameter0: byte[];
v2 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
virtualinvoke v2.<java.io.DataInputStream: void readFully(byte[])>(v1);
return;
}
public final int readInt() throws java.io.IOException
{
int v2;
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v1;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v2 = virtualinvoke v1.<java.io.DataInputStream: int readInt()>();
return v2;
}
public final java.lang.String readLine() throws java.io.IOException
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v1;
java.lang.String v2;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v2 = virtualinvoke v1.<java.io.DataInputStream: java.lang.String readLine()>();
return v2;
}
public final long readLong() throws java.io.IOException
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v1;
long v2;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v2 = virtualinvoke v1.<java.io.DataInputStream: long readLong()>();
return v2;
}
public final short readShort() throws java.io.IOException
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v1;
short v2;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v2 = virtualinvoke v1.<java.io.DataInputStream: short readShort()>();
return v2;
}
public final int readUnsignedByte() throws java.io.IOException
{
int v2;
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v1;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v2 = virtualinvoke v1.<java.io.DataInputStream: int readUnsignedByte()>();
return v2;
}
public final int readUnsignedShort() throws java.io.IOException
{
int v2;
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v1;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v2 = virtualinvoke v1.<java.io.DataInputStream: int readUnsignedShort()>();
return v2;
}
public final java.lang.String readUTF() throws java.io.IOException
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v1;
java.lang.String v2;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v2 = virtualinvoke v1.<java.io.DataInputStream: java.lang.String readUTF()>();
return v2;
}
public void reset() throws java.io.IOException
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v1;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
virtualinvoke v1.<java.io.DataInputStream: void reset()>();
return;
}
public long skip(long) throws java.io.IOException
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v2;
long v1, v3;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 := @parameter0: long;
v2 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v3 = virtualinvoke v2.<java.io.DataInputStream: long skip(long)>(v1);
return v3;
}
public final int skipBytes(int) throws java.io.IOException
{
io.netty.handler.codec.serialization.ObjectDecoderInputStream v0;
java.io.DataInputStream v2;
int v1, v3;
v0 := @this: io.netty.handler.codec.serialization.ObjectDecoderInputStream;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.serialization.ObjectDecoderInputStream: java.io.DataInputStream in>;
v3 = virtualinvoke v2.<java.io.DataInputStream: int skipBytes(int)>(v1);
return v3;
}
}