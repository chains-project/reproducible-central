public class io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder extends io.netty.handler.codec.spdy.SpdyHeaderBlockEncoder
{
private final int version;
public void <init>(io.netty.handler.codec.spdy.SpdyVersion)
{
io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder v0;
io.netty.handler.codec.spdy.SpdyVersion v1;
int v3;
java.lang.Object v2;
v0 := @this: io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder;
v1 := @parameter0: io.netty.handler.codec.spdy.SpdyVersion;
specialinvoke v0.<io.netty.handler.codec.spdy.SpdyHeaderBlockEncoder: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "version");
v3 = virtualinvoke v2.<io.netty.handler.codec.spdy.SpdyVersion: int getVersion()>();
v0.<io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder: int version> = v3;
return;
}
private static void setLengthField(io.netty.buffer.ByteBuf, int, int)
{
int v1, v2;
io.netty.buffer.ByteBuf v0;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setInt(int,int)>(v1, v2);
return;
}
private static void writeLengthField(io.netty.buffer.ByteBuf, int)
{
int v1;
io.netty.buffer.ByteBuf v0;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeInt(int)>(v1);
return;
}
public io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator, io.netty.handler.codec.spdy.SpdyHeadersFrame) throws java.lang.Exception
{
io.netty.handler.codec.spdy.SpdyHeadersFrame v2;
io.netty.buffer.ByteBufAllocator v1;
io.netty.buffer.ByteBuf v6, v9;
int v13, v14, v15, v21, v22, v23, v26, v27, v5, v7;
java.lang.String v25;
boolean v11, v19;
java.util.Iterator v10, v18;
java.util.Set v4;
java.lang.IllegalArgumentException v24, v8;
io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder v0;
java.util.List v17;
io.netty.handler.codec.spdy.SpdyHeaders v16, v3;
java.lang.Object v12, v20;
v0 := @this: io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 := @parameter1: io.netty.handler.codec.spdy.SpdyHeadersFrame;
v3 = interfaceinvoke v2.<io.netty.handler.codec.spdy.SpdyHeadersFrame: io.netty.handler.codec.spdy.SpdyHeaders headers()>();
v4 = interfaceinvoke v3.<io.netty.handler.codec.spdy.SpdyHeaders: java.util.Set names()>();
v5 = interfaceinvoke v4.<java.util.Set: int size()>();
if v5 != 0 goto label1;
v6 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
return v6;
label1:
v7 = (int) 65535;
if v5 <= v7 goto label2;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("header block contains too many headers");
throw v8;
label2:
v9 = interfaceinvoke v1.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer()>();
staticinvoke <io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder: void writeLengthField(io.netty.buffer.ByteBuf,int)>(v9, v5);
v10 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label3:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label8;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
v13 = interfaceinvoke v12.<java.lang.CharSequence: int length()>();
staticinvoke <io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder: void writeLengthField(io.netty.buffer.ByteBuf,int)>(v9, v13);
staticinvoke <io.netty.buffer.ByteBufUtil: int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)>(v9, v12);
v14 = virtualinvoke v9.<io.netty.buffer.ByteBuf: int writerIndex()>();
v15 = 0;
staticinvoke <io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder: void writeLengthField(io.netty.buffer.ByteBuf,int)>(v9, 0);
v16 = interfaceinvoke v2.<io.netty.handler.codec.spdy.SpdyHeadersFrame: io.netty.handler.codec.spdy.SpdyHeaders headers()>();
v17 = interfaceinvoke v16.<io.netty.handler.codec.spdy.SpdyHeaders: java.util.List getAll(java.lang.Object)>(v12);
v18 = interfaceinvoke v17.<java.util.List: java.util.Iterator iterator()>();
label4:
v19 = interfaceinvoke v18.<java.util.Iterator: boolean hasNext()>();
if v19 == 0 goto label5;
v20 = interfaceinvoke v18.<java.util.Iterator: java.lang.Object next()>();
v21 = interfaceinvoke v20.<java.lang.CharSequence: int length()>();
if v21 <= 0 goto label4;
staticinvoke <io.netty.buffer.ByteBufUtil: int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)>(v9, v20);
virtualinvoke v9.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(0);
v22 = v21 + 1;
v15 = v15 + v22;
goto label4;
label5:
if v15 == 0 goto label6;
v15 = v15 - 1;
label6:
v23 = (int) 65535;
if v15 <= v23 goto label7;
v24 = new java.lang.IllegalArgumentException;
v25 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.CharSequence)>(v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("header exceeds allowable length: \u0001");
specialinvoke v24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v25);
throw v24;
label7:
if v15 <= 0 goto label3;
staticinvoke <io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder: void setLengthField(io.netty.buffer.ByteBuf,int,int)>(v9, v14, v15);
v26 = virtualinvoke v9.<io.netty.buffer.ByteBuf: int writerIndex()>();
v27 = v26 - 1;
virtualinvoke v9.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writerIndex(int)>(v27);
goto label3;
label8:
return v9;
}
void end()
{
io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder v0;
v0 := @this: io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder;
return;
}
}