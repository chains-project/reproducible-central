class io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder extends io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder
{
private final java.util.zip.Deflater compressor;
private boolean finished;
void <init>(io.netty.handler.codec.spdy.SpdyVersion, int)
{
byte[] v7;
io.netty.handler.codec.spdy.SpdyVersion v1;
java.util.zip.Deflater v5, v6;
java.lang.IllegalArgumentException v3;
io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder v0;
int v2;
java.lang.String v4;
v0 := @this: io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder;
v1 := @parameter0: io.netty.handler.codec.spdy.SpdyVersion;
v2 := @parameter1: int;
specialinvoke v0.<io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder: void <init>(io.netty.handler.codec.spdy.SpdyVersion)>(v1);
if v2 < 0 goto label1;
if v2 <= 9 goto label2;
label1:
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("compressionLevel: \u0001 (expected: 0-9)");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label2:
v5 = new java.util.zip.Deflater;
specialinvoke v5.<java.util.zip.Deflater: void <init>(int)>(v2);
v0.<io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder: java.util.zip.Deflater compressor> = v5;
v6 = v0.<io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder: java.util.zip.Deflater compressor>;
v7 = <io.netty.handler.codec.spdy.SpdyCodecUtil: byte[] SPDY_DICT>;
virtualinvoke v6.<java.util.zip.Deflater: void setDictionary(byte[])>(v7);
return;
}
private int setInput(io.netty.buffer.ByteBuf)
{
byte[] v5, v9;
java.util.zip.Deflater v11, v4;
io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder v0;
io.netty.buffer.ByteBuf v1;
int v10, v12, v2, v6, v7, v8;
boolean v3;
v0 := @this: io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
v3 = virtualinvoke v1.<io.netty.buffer.ByteBuf: boolean hasArray()>();
if v3 == 0 goto label1;
v4 = v0.<io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder: java.util.zip.Deflater compressor>;
v5 = virtualinvoke v1.<io.netty.buffer.ByteBuf: byte[] array()>();
v6 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v7 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
v8 = v6 + v7;
virtualinvoke v4.<java.util.zip.Deflater: void setInput(byte[],int,int)>(v5, v8, v2);
goto label2;
label1:
v9 = newarray (byte)[v2];
v10 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf getBytes(int,byte[])>(v10, v9);
v11 = v0.<io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder: java.util.zip.Deflater compressor>;
v12 = lengthof v9;
virtualinvoke v11.<java.util.zip.Deflater: void setInput(byte[],int,int)>(v9, 0, v12);
label2:
return v2;
}
private io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator, int)
{
java.lang.Throwable v7;
io.netty.buffer.ByteBufAllocator v1;
io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder v0;
io.netty.buffer.ByteBuf v3;
int v2, v5, v6;
boolean v4;
v0 := @this: io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 := @parameter1: int;
v3 = interfaceinvoke v1.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>(v2);
label1:
v4 = specialinvoke v0.<io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder: boolean compressInto(io.netty.buffer.ByteBuf)>(v3);
if v4 == 0 goto label2;
v5 = virtualinvoke v3.<io.netty.buffer.ByteBuf: int capacity()>();
v6 = v5 << 1;
virtualinvoke v3.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf ensureWritable(int)>(v6);
goto label1;
label2:
return v3;
label3:
v7 := @caughtexception;
virtualinvoke v3.<io.netty.buffer.ByteBuf: boolean release()>();
throw v7;
catch java.lang.Throwable from label1 to label2 with label3;
}
private boolean compressInto(io.netty.buffer.ByteBuf)
{
byte[] v2;
java.util.zip.Deflater v10, v8;
io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder v0;
io.netty.buffer.ByteBuf v1;
int v11, v12, v3, v4, v5, v6, v7, v9;
boolean v13;
v0 := @this: io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: byte[] array()>();
v3 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int writerIndex()>();
v5 = v3 + v4;
v6 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int writableBytes()>();
v7 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v7 < 7 goto label1;
v8 = v0.<io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder: java.util.zip.Deflater compressor>;
v9 = virtualinvoke v8.<java.util.zip.Deflater: int deflate(byte[],int,int,int)>(v2, v5, v6, 2);
goto label2;
label1:
v10 = v0.<io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder: java.util.zip.Deflater compressor>;
v9 = virtualinvoke v10.<java.util.zip.Deflater: int deflate(byte[],int,int)>(v2, v5, v6);
label2:
v11 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int writerIndex()>();
v12 = v11 + v9;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writerIndex(int)>(v12);
if v9 != v6 goto label3;
v13 = 1;
goto label4;
label3:
v13 = 0;
label4:
return v13;
}
public io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator, io.netty.handler.codec.spdy.SpdyHeadersFrame) throws java.lang.Exception
{
java.lang.Throwable v10;
io.netty.handler.codec.spdy.SpdyHeadersFrame v2;
io.netty.buffer.ByteBufAllocator v1;
io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder v0;
io.netty.buffer.ByteBuf v4, v5, v7, v9;
int v8;
boolean v3, v6;
v0 := @this: io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 := @parameter1: io.netty.handler.codec.spdy.SpdyHeadersFrame;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNullWithIAE(java.lang.Object,java.lang.String)>(v1, "alloc");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNullWithIAE(java.lang.Object,java.lang.String)>(v2, "frame");
v3 = v0.<io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder: boolean finished>;
if v3 == 0 goto label1;
v4 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
return v4;
label1:
v5 = specialinvoke v0.<io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder: io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,io.netty.handler.codec.spdy.SpdyHeadersFrame)>(v1, v2);
label2:
v6 = virtualinvoke v5.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v6 != 0 goto label4;
v7 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
label3:
virtualinvoke v5.<io.netty.buffer.ByteBuf: boolean release()>();
return v7;
label4:
v8 = specialinvoke v0.<io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder: int setInput(io.netty.buffer.ByteBuf)>(v5);
v9 = specialinvoke v0.<io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder: io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBufAllocator,int)>(v1, v8);
label5:
virtualinvoke v5.<io.netty.buffer.ByteBuf: boolean release()>();
return v9;
label6:
v10 := @caughtexception;
virtualinvoke v5.<io.netty.buffer.ByteBuf: boolean release()>();
throw v10;
catch java.lang.Throwable from label2 to label3 with label6;
catch java.lang.Throwable from label4 to label5 with label6;
}
public void end()
{
io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder v0;
java.util.zip.Deflater v2;
boolean v1;
v0 := @this: io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder;
v1 = v0.<io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder: boolean finished>;
if v1 == 0 goto label1;
return;
label1:
v0.<io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder: boolean finished> = 1;
v2 = v0.<io.netty.handler.codec.spdy.SpdyHeaderBlockZlibEncoder: java.util.zip.Deflater compressor>;
virtualinvoke v2.<java.util.zip.Deflater: void end()>();
specialinvoke v0.<io.netty.handler.codec.spdy.SpdyHeaderBlockRawEncoder: void end()>();
return;
}
}