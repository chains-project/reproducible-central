public abstract class io.netty.handler.ipfilter.AbstractRemoteAddressFilter extends io.netty.channel.ChannelInboundHandlerAdapter
{
public void <init>()
{
io.netty.handler.ipfilter.AbstractRemoteAddressFilter v0;
v0 := @this: io.netty.handler.ipfilter.AbstractRemoteAddressFilter;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void <init>()>();
return;
}
public void channelRegistered(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.ipfilter.AbstractRemoteAddressFilter v0;
v0 := @this: io.netty.handler.ipfilter.AbstractRemoteAddressFilter;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
specialinvoke v0.<io.netty.handler.ipfilter.AbstractRemoteAddressFilter: boolean handleNewChannel(io.netty.channel.ChannelHandlerContext)>(v1);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRegistered()>();
return;
}
public void channelActive(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.Channel v4;
io.netty.channel.ChannelHandlerContext v1;
java.lang.IllegalStateException v3;
io.netty.handler.ipfilter.AbstractRemoteAddressFilter v0;
java.lang.String v5;
boolean v2;
v0 := @this: io.netty.handler.ipfilter.AbstractRemoteAddressFilter;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = specialinvoke v0.<io.netty.handler.ipfilter.AbstractRemoteAddressFilter: boolean handleNewChannel(io.netty.channel.ChannelHandlerContext)>(v1);
if v2 != 0 goto label1;
v3 = new java.lang.IllegalStateException;
v4 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.channel.Channel)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("cannot determine to accept or reject a channel: \u0001");
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v5);
throw v3;
label1:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelActive()>();
return;
}
private boolean handleNewChannel(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
java.net.SocketAddress v3;
io.netty.channel.ChannelPipeline v4;
io.netty.channel.ChannelFuture v6;
io.netty.channel.Channel v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelFutureListener v7;
io.netty.handler.ipfilter.AbstractRemoteAddressFilter v0;
boolean v5;
v0 := @this: io.netty.handler.ipfilter.AbstractRemoteAddressFilter;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel: java.net.SocketAddress remoteAddress()>();
if v3 != null goto label1;
return 0;
label1:
v4 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
v5 = virtualinvoke v0.<io.netty.handler.ipfilter.AbstractRemoteAddressFilter: boolean accept(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress)>(v1, v3);
if v5 == 0 goto label2;
virtualinvoke v0.<io.netty.handler.ipfilter.AbstractRemoteAddressFilter: void channelAccepted(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress)>(v1, v3);
goto label4;
label2:
v6 = virtualinvoke v0.<io.netty.handler.ipfilter.AbstractRemoteAddressFilter: io.netty.channel.ChannelFuture channelRejected(io.netty.channel.ChannelHandlerContext,java.net.SocketAddress)>(v1, v3);
if v6 == null goto label3;
v7 = <io.netty.channel.ChannelFutureListener: io.netty.channel.ChannelFutureListener CLOSE>;
interfaceinvoke v6.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v7);
goto label4;
label3:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close()>();
label4:
return 1;
}
protected abstract boolean accept(io.netty.channel.ChannelHandlerContext, java.net.SocketAddress) throws java.lang.Exception;
protected void channelAccepted(io.netty.channel.ChannelHandlerContext, java.net.SocketAddress)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.ipfilter.AbstractRemoteAddressFilter v0;
java.net.SocketAddress v2;
v0 := @this: io.netty.handler.ipfilter.AbstractRemoteAddressFilter;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.net.SocketAddress;
return;
}
protected io.netty.channel.ChannelFuture channelRejected(io.netty.channel.ChannelHandlerContext, java.net.SocketAddress)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.ipfilter.AbstractRemoteAddressFilter v0;
java.net.SocketAddress v2;
v0 := @this: io.netty.handler.ipfilter.AbstractRemoteAddressFilter;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.net.SocketAddress;
return null;
}
}