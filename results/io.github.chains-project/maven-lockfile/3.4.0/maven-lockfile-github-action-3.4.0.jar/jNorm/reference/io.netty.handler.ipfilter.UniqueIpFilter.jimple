public class io.netty.handler.ipfilter.UniqueIpFilter extends io.netty.handler.ipfilter.AbstractRemoteAddressFilter
{
private final java.util.Set connected;
public void <init>()
{
io.netty.util.internal.ConcurrentSet v1;
io.netty.handler.ipfilter.UniqueIpFilter v0;
v0 := @this: io.netty.handler.ipfilter.UniqueIpFilter;
specialinvoke v0.<io.netty.handler.ipfilter.AbstractRemoteAddressFilter: void <init>()>();
v1 = new io.netty.util.internal.ConcurrentSet;
specialinvoke v1.<io.netty.util.internal.ConcurrentSet: void <init>()>();
v0.<io.netty.handler.ipfilter.UniqueIpFilter: java.util.Set connected> = v1;
return;
}
protected boolean accept(io.netty.channel.ChannelHandlerContext, java.net.InetSocketAddress) throws java.lang.Exception
{
java.util.Set v4;
java.net.InetSocketAddress v2;
io.netty.handler.ipfilter.UniqueIpFilter v0;
io.netty.channel.ChannelFuture v7;
io.netty.channel.Channel v6;
java.net.InetAddress v3;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.ipfilter.UniqueIpFilter$1 v8;
boolean v5;
v0 := @this: io.netty.handler.ipfilter.UniqueIpFilter;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.net.InetSocketAddress;
v3 = virtualinvoke v2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
v4 = v0.<io.netty.handler.ipfilter.UniqueIpFilter: java.util.Set connected>;
v5 = interfaceinvoke v4.<java.util.Set: boolean add(java.lang.Object)>(v3);
if v5 != 0 goto label1;
return 0;
label1:
v6 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v7 = interfaceinvoke v6.<io.netty.channel.Channel: io.netty.channel.ChannelFuture closeFuture()>();
v8 = new io.netty.handler.ipfilter.UniqueIpFilter$1;
specialinvoke v8.<io.netty.handler.ipfilter.UniqueIpFilter$1: void <init>(io.netty.handler.ipfilter.UniqueIpFilter,java.net.InetAddress)>(v0, v3);
interfaceinvoke v7.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v8);
return 1;
}
}