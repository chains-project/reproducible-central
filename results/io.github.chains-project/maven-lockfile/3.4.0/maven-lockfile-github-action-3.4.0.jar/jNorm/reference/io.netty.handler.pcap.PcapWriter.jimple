final class io.netty.handler.pcap.PcapWriter extends java.lang.Object implements java.io.Closeable
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private final io.netty.handler.pcap.PcapWriteHandler pcapWriteHandler;
private final java.io.OutputStream outputStream;
void <init>(io.netty.handler.pcap.PcapWriteHandler) throws java.io.IOException
{
java.io.OutputStream v2, v4;
io.netty.handler.pcap.PcapWriteHandler v1;
io.netty.handler.pcap.PcapWriter v0;
boolean v3;
v0 := @this: io.netty.handler.pcap.PcapWriter;
v1 := @parameter0: io.netty.handler.pcap.PcapWriteHandler;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.pcap.PcapWriter: io.netty.handler.pcap.PcapWriteHandler pcapWriteHandler> = v1;
v2 = virtualinvoke v1.<io.netty.handler.pcap.PcapWriteHandler: java.io.OutputStream outputStream()>();
v0.<io.netty.handler.pcap.PcapWriter: java.io.OutputStream outputStream> = v2;
v3 = virtualinvoke v1.<io.netty.handler.pcap.PcapWriteHandler: boolean sharedOutputStream()>();
if v3 != 0 goto label1;
v4 = virtualinvoke v1.<io.netty.handler.pcap.PcapWriteHandler: java.io.OutputStream outputStream()>();
staticinvoke <io.netty.handler.pcap.PcapHeaders: void writeGlobalHeader(java.io.OutputStream)>(v4);
label1:
return;
}
void writePacket(io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf) throws java.io.IOException
{
java.lang.Throwable v20;
long v10, v7, v8, v9;
io.netty.handler.pcap.State v4, v5;
io.netty.buffer.ByteBuf v1, v2;
int v11, v12, v17, v19, v22, v24;
io.netty.handler.pcap.PcapWriteHandler v13, v3;
boolean v14;
java.io.OutputStream v15, v16, v18, v21, v23;
io.netty.handler.pcap.PcapWriter v0;
io.netty.util.internal.logging.InternalLogger v6;
v0 := @this: io.netty.handler.pcap.PcapWriter;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 = v0.<io.netty.handler.pcap.PcapWriter: io.netty.handler.pcap.PcapWriteHandler pcapWriteHandler>;
v4 = virtualinvoke v3.<io.netty.handler.pcap.PcapWriteHandler: io.netty.handler.pcap.State state()>();
v5 = <io.netty.handler.pcap.State: io.netty.handler.pcap.State CLOSED>;
if v4 != v5 goto label1;
v6 = <io.netty.handler.pcap.PcapWriter: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v6.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>("Pcap Write attempted on closed PcapWriter");
label1:
v7 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v8 = v7 / 1000L;
v9 = v7 % 1000L;
v10 = v9 * 1000L;
v11 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
v12 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
staticinvoke <io.netty.handler.pcap.PcapHeaders: void writePacketHeader(io.netty.buffer.ByteBuf,int,int,int,int)>(v1, v8, v10, v11, v12);
v13 = v0.<io.netty.handler.pcap.PcapWriter: io.netty.handler.pcap.PcapWriteHandler pcapWriteHandler>;
v14 = virtualinvoke v13.<io.netty.handler.pcap.PcapWriteHandler: boolean sharedOutputStream()>();
if v14 == 0 goto label5;
v15 = v0.<io.netty.handler.pcap.PcapWriter: java.io.OutputStream outputStream>;
entermonitor v15;
label2:
v16 = v0.<io.netty.handler.pcap.PcapWriter: java.io.OutputStream outputStream>;
v17 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)>(v16, v17);
v18 = v0.<io.netty.handler.pcap.PcapWriter: java.io.OutputStream outputStream>;
v19 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)>(v18, v19);
exitmonitor v15;
label3:
goto label6;
label4:
v20 := @caughtexception;
exitmonitor v15;
throw v20;
label5:
v21 = v0.<io.netty.handler.pcap.PcapWriter: java.io.OutputStream outputStream>;
v22 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)>(v21, v22);
v23 = v0.<io.netty.handler.pcap.PcapWriter: java.io.OutputStream outputStream>;
v24 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)>(v23, v24);
label6:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
public java.lang.String toString()
{
java.io.OutputStream v1;
java.lang.String v2;
io.netty.handler.pcap.PcapWriter v0;
v0 := @this: io.netty.handler.pcap.PcapWriter;
v1 = v0.<io.netty.handler.pcap.PcapWriter: java.io.OutputStream outputStream>;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.io.OutputStream)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("PcapWriter{outputStream=\u0001}");
return v2;
}
public void close() throws java.io.IOException
{
java.io.OutputStream v10, v11, v7, v8;
java.lang.Throwable v9;
io.netty.handler.pcap.PcapWriter v0;
io.netty.handler.pcap.State v2, v3;
io.netty.util.internal.logging.InternalLogger v13, v4;
io.netty.handler.pcap.PcapWriteHandler v1, v12, v5;
boolean v6;
v0 := @this: io.netty.handler.pcap.PcapWriter;
v1 = v0.<io.netty.handler.pcap.PcapWriter: io.netty.handler.pcap.PcapWriteHandler pcapWriteHandler>;
v2 = virtualinvoke v1.<io.netty.handler.pcap.PcapWriteHandler: io.netty.handler.pcap.State state()>();
v3 = <io.netty.handler.pcap.State: io.netty.handler.pcap.State CLOSED>;
if v2 != v3 goto label1;
v4 = <io.netty.handler.pcap.PcapWriter: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v4.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>("PcapWriter is already closed");
goto label7;
label1:
v5 = v0.<io.netty.handler.pcap.PcapWriter: io.netty.handler.pcap.PcapWriteHandler pcapWriteHandler>;
v6 = virtualinvoke v5.<io.netty.handler.pcap.PcapWriteHandler: boolean sharedOutputStream()>();
if v6 == 0 goto label5;
v7 = v0.<io.netty.handler.pcap.PcapWriter: java.io.OutputStream outputStream>;
entermonitor v7;
label2:
v8 = v0.<io.netty.handler.pcap.PcapWriter: java.io.OutputStream outputStream>;
virtualinvoke v8.<java.io.OutputStream: void flush()>();
exitmonitor v7;
label3:
goto label6;
label4:
v9 := @caughtexception;
exitmonitor v7;
throw v9;
label5:
v10 = v0.<io.netty.handler.pcap.PcapWriter: java.io.OutputStream outputStream>;
virtualinvoke v10.<java.io.OutputStream: void flush()>();
v11 = v0.<io.netty.handler.pcap.PcapWriter: java.io.OutputStream outputStream>;
virtualinvoke v11.<java.io.OutputStream: void close()>();
label6:
v12 = v0.<io.netty.handler.pcap.PcapWriter: io.netty.handler.pcap.PcapWriteHandler pcapWriteHandler>;
virtualinvoke v12.<io.netty.handler.pcap.PcapWriteHandler: void markClosed()>();
v13 = <io.netty.handler.pcap.PcapWriter: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v13.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>("PcapWriter is now closed");
label7:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/handler/pcap/PcapWriter;");
<io.netty.handler.pcap.PcapWriter: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}