final class io.netty.handler.ssl.ConscryptAlpnSslEngine$ServerEngine extends io.netty.handler.ssl.ConscryptAlpnSslEngine
{
private final io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelector protocolSelector;
void <init>(javax.net.ssl.SSLEngine, io.netty.buffer.ByteBufAllocator, io.netty.handler.ssl.JdkApplicationProtocolNegotiator)
{
io.netty.handler.ssl.ConscryptAlpnSslEngine$ServerEngine v0;
io.netty.buffer.ByteBufAllocator v2;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator v3;
javax.net.ssl.SSLEngine v1;
java.util.List v4, v8;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory v6;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelector v9;
java.lang.Object v10;
io.netty.handler.ssl.ConscryptAlpnSslEngine$ServerEngine$1 v5;
java.util.LinkedHashSet v7;
v0 := @this: io.netty.handler.ssl.ConscryptAlpnSslEngine$ServerEngine;
v1 := @parameter0: javax.net.ssl.SSLEngine;
v2 := @parameter1: io.netty.buffer.ByteBufAllocator;
v3 := @parameter2: io.netty.handler.ssl.JdkApplicationProtocolNegotiator;
v4 = interfaceinvoke v3.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator: java.util.List protocols()>();
specialinvoke v0.<io.netty.handler.ssl.ConscryptAlpnSslEngine: void <init>(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBufAllocator,java.util.List)>(v1, v2, v4);
v5 = new io.netty.handler.ssl.ConscryptAlpnSslEngine$ServerEngine$1;
specialinvoke v5.<io.netty.handler.ssl.ConscryptAlpnSslEngine$ServerEngine$1: void <init>(io.netty.handler.ssl.ConscryptAlpnSslEngine$ServerEngine)>(v0);
staticinvoke <org.conscrypt.Conscrypt: void setHandshakeListener(javax.net.ssl.SSLEngine,org.conscrypt.HandshakeListener)>(v1, v5);
v6 = interfaceinvoke v3.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory protocolSelectorFactory()>();
v7 = new java.util.LinkedHashSet;
v8 = interfaceinvoke v3.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator: java.util.List protocols()>();
specialinvoke v7.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(v8);
v9 = interfaceinvoke v6.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelector newSelector(javax.net.ssl.SSLEngine,java.util.Set)>(v0, v7);
v10 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v9, "protocolSelector");
v0.<io.netty.handler.ssl.ConscryptAlpnSslEngine$ServerEngine: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelector protocolSelector> = v10;
return;
}
private void selectProtocol() throws javax.net.ssl.SSLException
{
io.netty.handler.ssl.ConscryptAlpnSslEngine$ServerEngine v0;
java.lang.Throwable v5;
java.util.List v4;
javax.net.ssl.SSLHandshakeException v6;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelector v3;
java.lang.String v2;
javax.net.ssl.SSLEngine v1;
v0 := @this: io.netty.handler.ssl.ConscryptAlpnSslEngine$ServerEngine;
label1:
v1 = virtualinvoke v0.<io.netty.handler.ssl.ConscryptAlpnSslEngine$ServerEngine: javax.net.ssl.SSLEngine getWrappedEngine()>();
v2 = staticinvoke <org.conscrypt.Conscrypt: java.lang.String getApplicationProtocol(javax.net.ssl.SSLEngine)>(v1);
v3 = v0.<io.netty.handler.ssl.ConscryptAlpnSslEngine$ServerEngine: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelector protocolSelector>;
if v2 == null goto label2;
v4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v2);
goto label3;
label2:
v4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
label3:
interfaceinvoke v3.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelector: java.lang.String select(java.util.List)>(v4);
label4:
goto label6;
label5:
v5 := @caughtexception;
v6 = staticinvoke <io.netty.handler.ssl.SslUtils: javax.net.ssl.SSLHandshakeException toSSLHandshakeException(java.lang.Throwable)>(v5);
throw v6;
label6:
return;
catch java.lang.Throwable from label1 to label4 with label5;
}
}