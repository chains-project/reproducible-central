final class io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator$FailureWrapper extends io.netty.handler.ssl.JdkApplicationProtocolNegotiator$AllocatorAwareSslEngineWrapperFactory
{
private void <init>()
{
io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator$FailureWrapper v0;
v0 := @this: io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator$FailureWrapper;
specialinvoke v0.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator$AllocatorAwareSslEngineWrapperFactory: void <init>()>();
return;
}
public javax.net.ssl.SSLEngine wrapSslEngine(javax.net.ssl.SSLEngine, io.netty.buffer.ByteBufAllocator, io.netty.handler.ssl.JdkApplicationProtocolNegotiator, boolean)
{
io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator$FailureWrapper v0;
io.netty.buffer.ByteBufAllocator v2;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator v3;
java.lang.RuntimeException v5;
boolean v4;
javax.net.ssl.SSLEngine v1;
v0 := @this: io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator$FailureWrapper;
v1 := @parameter0: javax.net.ssl.SSLEngine;
v2 := @parameter1: io.netty.buffer.ByteBufAllocator;
v3 := @parameter2: io.netty.handler.ssl.JdkApplicationProtocolNegotiator;
v4 := @parameter3: boolean;
v5 = new java.lang.RuntimeException;
specialinvoke v5.<java.lang.RuntimeException: void <init>(java.lang.String)>("ALPN unsupported. Is your classpath configured correctly? For Conscrypt, add the appropriate Conscrypt JAR to classpath and set the security provider. For Jetty-ALPN, see https://www.eclipse.org/jetty/documentation/current/alpn-chapter.html#alpn-starting");
throw v5;
}
}