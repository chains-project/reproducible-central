final class io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$FailProtocolSelectionListener extends io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelectionListener
{
void <init>(io.netty.handler.ssl.JdkSslEngine, java.util.List)
{
io.netty.handler.ssl.JdkSslEngine v1;
java.util.List v2;
io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$FailProtocolSelectionListener v0;
v0 := @this: io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$FailProtocolSelectionListener;
v1 := @parameter0: io.netty.handler.ssl.JdkSslEngine;
v2 := @parameter1: java.util.List;
specialinvoke v0.<io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$NoFailProtocolSelectionListener: void <init>(io.netty.handler.ssl.JdkSslEngine,java.util.List)>(v1, v2);
return;
}
protected void noSelectedMatchFound(java.lang.String) throws java.lang.Exception
{
io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$FailProtocolSelectionListener v0;
java.lang.String v1;
javax.net.ssl.SSLHandshakeException v2;
v0 := @this: io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator$FailProtocolSelectionListener;
v1 := @parameter0: java.lang.String;
v2 = new javax.net.ssl.SSLHandshakeException;
specialinvoke v2.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>("No compatible protocols found");
throw v2;
}
}