abstract class io.netty.handler.ssl.JettyAlpnSslEngine extends io.netty.handler.ssl.JdkSslEngine
{
private static final boolean available;
static boolean isAvailable()
{
boolean v0;
v0 = <io.netty.handler.ssl.JettyAlpnSslEngine: boolean available>;
return v0;
}
private static boolean initAvailable()
{
int v0;
java.lang.Throwable v1;
v0 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v0 > 8 goto label4;
label1:
staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("sun.security.ssl.ALPNExtension", 1, null);
label2:
return 1;
label3:
v1 := @caughtexception;
label4:
return 0;
catch java.lang.Throwable from label1 to label2 with label3;
}
static io.netty.handler.ssl.JettyAlpnSslEngine newClientEngine(javax.net.ssl.SSLEngine, io.netty.handler.ssl.JdkApplicationProtocolNegotiator)
{
io.netty.handler.ssl.JdkApplicationProtocolNegotiator v1;
io.netty.handler.ssl.JettyAlpnSslEngine$ClientEngine v2;
javax.net.ssl.SSLEngine v0;
v0 := @parameter0: javax.net.ssl.SSLEngine;
v1 := @parameter1: io.netty.handler.ssl.JdkApplicationProtocolNegotiator;
v2 = new io.netty.handler.ssl.JettyAlpnSslEngine$ClientEngine;
specialinvoke v2.<io.netty.handler.ssl.JettyAlpnSslEngine$ClientEngine: void <init>(javax.net.ssl.SSLEngine,io.netty.handler.ssl.JdkApplicationProtocolNegotiator)>(v0, v1);
return v2;
}
static io.netty.handler.ssl.JettyAlpnSslEngine newServerEngine(javax.net.ssl.SSLEngine, io.netty.handler.ssl.JdkApplicationProtocolNegotiator)
{
io.netty.handler.ssl.JdkApplicationProtocolNegotiator v1;
io.netty.handler.ssl.JettyAlpnSslEngine$ServerEngine v2;
javax.net.ssl.SSLEngine v0;
v0 := @parameter0: javax.net.ssl.SSLEngine;
v1 := @parameter1: io.netty.handler.ssl.JdkApplicationProtocolNegotiator;
v2 = new io.netty.handler.ssl.JettyAlpnSslEngine$ServerEngine;
specialinvoke v2.<io.netty.handler.ssl.JettyAlpnSslEngine$ServerEngine: void <init>(javax.net.ssl.SSLEngine,io.netty.handler.ssl.JdkApplicationProtocolNegotiator)>(v0, v1);
return v2;
}
private void <init>(javax.net.ssl.SSLEngine)
{
io.netty.handler.ssl.JettyAlpnSslEngine v0;
javax.net.ssl.SSLEngine v1;
v0 := @this: io.netty.handler.ssl.JettyAlpnSslEngine;
v1 := @parameter0: javax.net.ssl.SSLEngine;
specialinvoke v0.<io.netty.handler.ssl.JdkSslEngine: void <init>(javax.net.ssl.SSLEngine)>(v1);
return;
}
static void <clinit>()
{
boolean v0;
v0 = staticinvoke <io.netty.handler.ssl.JettyAlpnSslEngine: boolean initAvailable()>();
<io.netty.handler.ssl.JettyAlpnSslEngine: boolean available> = v0;
return;
}
}