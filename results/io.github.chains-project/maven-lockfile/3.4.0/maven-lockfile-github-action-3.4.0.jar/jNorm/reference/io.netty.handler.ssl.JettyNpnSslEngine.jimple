final class io.netty.handler.ssl.JettyNpnSslEngine extends io.netty.handler.ssl.JdkSslEngine
{
private static boolean available;
static boolean isAvailable()
{
boolean v0;
staticinvoke <io.netty.handler.ssl.JettyNpnSslEngine: void updateAvailability()>();
v0 = <io.netty.handler.ssl.JettyNpnSslEngine: boolean available>;
return v0;
}
private static void updateAvailability()
{
java.lang.Exception v1;
boolean v0;
v0 = <io.netty.handler.ssl.JettyNpnSslEngine: boolean available>;
if v0 == 0 goto label1;
return;
label1:
staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("sun.security.ssl.NextProtoNegoExtension", 1, null);
<io.netty.handler.ssl.JettyNpnSslEngine: boolean available> = 1;
label2:
goto label4;
label3:
v1 := @caughtexception;
label4:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
void <init>(javax.net.ssl.SSLEngine, io.netty.handler.ssl.JdkApplicationProtocolNegotiator, boolean)
{
io.netty.handler.ssl.JettyNpnSslEngine$1 v8;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener v6;
io.netty.handler.ssl.JettyNpnSslEngine$2 v14;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator v2;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory v4;
io.netty.handler.ssl.JettyNpnSslEngine v0;
javax.net.ssl.SSLEngine v1;
java.util.List v11, v5;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory v9;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelector v12;
java.lang.Object v13, v7;
java.util.LinkedHashSet v10;
boolean v3;
v0 := @this: io.netty.handler.ssl.JettyNpnSslEngine;
v1 := @parameter0: javax.net.ssl.SSLEngine;
v2 := @parameter1: io.netty.handler.ssl.JdkApplicationProtocolNegotiator;
v3 := @parameter2: boolean;
specialinvoke v0.<io.netty.handler.ssl.JdkSslEngine: void <init>(javax.net.ssl.SSLEngine)>(v1);
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "applicationNegotiator");
if v3 == 0 goto label1;
v4 = interfaceinvoke v2.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory protocolListenerFactory()>();
v5 = interfaceinvoke v2.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator: java.util.List protocols()>();
v6 = interfaceinvoke v4.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener newListener(javax.net.ssl.SSLEngine,java.util.List)>(v0, v5);
v7 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v6, "protocolListener");
v8 = new io.netty.handler.ssl.JettyNpnSslEngine$1;
specialinvoke v8.<io.netty.handler.ssl.JettyNpnSslEngine$1: void <init>(io.netty.handler.ssl.JettyNpnSslEngine,io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener,io.netty.handler.ssl.JdkApplicationProtocolNegotiator)>(v0, v7, v2);
staticinvoke <org.eclipse.jetty.npn.NextProtoNego: void put(javax.net.ssl.SSLEngine,org.eclipse.jetty.npn.NextProtoNego$Provider)>(v1, v8);
goto label2;
label1:
v9 = interfaceinvoke v2.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory protocolSelectorFactory()>();
v10 = new java.util.LinkedHashSet;
v11 = interfaceinvoke v2.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator: java.util.List protocols()>();
specialinvoke v10.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(v11);
v12 = interfaceinvoke v9.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelector newSelector(javax.net.ssl.SSLEngine,java.util.Set)>(v0, v10);
v13 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v12, "protocolSelector");
v14 = new io.netty.handler.ssl.JettyNpnSslEngine$2;
specialinvoke v14.<io.netty.handler.ssl.JettyNpnSslEngine$2: void <init>(io.netty.handler.ssl.JettyNpnSslEngine,io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelector)>(v0, v13);
staticinvoke <org.eclipse.jetty.npn.NextProtoNego: void put(javax.net.ssl.SSLEngine,org.eclipse.jetty.npn.NextProtoNego$Provider)>(v1, v14);
label2:
return;
}
public void closeInbound() throws javax.net.ssl.SSLException
{
io.netty.handler.ssl.JettyNpnSslEngine v0;
javax.net.ssl.SSLEngine v1;
v0 := @this: io.netty.handler.ssl.JettyNpnSslEngine;
v1 = virtualinvoke v0.<io.netty.handler.ssl.JettyNpnSslEngine: javax.net.ssl.SSLEngine getWrappedEngine()>();
staticinvoke <org.eclipse.jetty.npn.NextProtoNego: org.eclipse.jetty.npn.NextProtoNego$Provider remove(javax.net.ssl.SSLEngine)>(v1);
specialinvoke v0.<io.netty.handler.ssl.JdkSslEngine: void closeInbound()>();
return;
}
public void closeOutbound()
{
io.netty.handler.ssl.JettyNpnSslEngine v0;
javax.net.ssl.SSLEngine v1;
v0 := @this: io.netty.handler.ssl.JettyNpnSslEngine;
v1 = virtualinvoke v0.<io.netty.handler.ssl.JettyNpnSslEngine: javax.net.ssl.SSLEngine getWrappedEngine()>();
staticinvoke <org.eclipse.jetty.npn.NextProtoNego: org.eclipse.jetty.npn.NextProtoNego$Provider remove(javax.net.ssl.SSLEngine)>(v1);
specialinvoke v0.<io.netty.handler.ssl.JdkSslEngine: void closeOutbound()>();
return;
}
}