public final class io.netty.handler.ssl.PemPrivateKey extends io.netty.util.AbstractReferenceCounted implements java.security.PrivateKey, io.netty.handler.ssl.PemEncoded
{
private static final long serialVersionUID;
private static final byte[] BEGIN_PRIVATE_KEY;
private static final byte[] END_PRIVATE_KEY;
private static final java.lang.String PKCS8_FORMAT;
private final io.netty.buffer.ByteBuf content;
static io.netty.handler.ssl.PemEncoded toPEM(io.netty.buffer.ByteBufAllocator, boolean, java.security.PrivateKey)
{
byte[] v5;
io.netty.buffer.ByteBufAllocator v0;
io.netty.handler.ssl.PemEncoded v10, v4;
java.lang.IllegalArgumentException v6;
java.security.PrivateKey v2;
java.lang.Class v7;
java.lang.String v8, v9;
boolean v1, v3;
v0 := @parameter0: io.netty.buffer.ByteBufAllocator;
v1 := @parameter1: boolean;
v2 := @parameter2: java.security.PrivateKey;
v3 = v2 instanceof io.netty.handler.ssl.PemEncoded;
if v3 == 0 goto label1;
v4 = interfaceinvoke v2.<io.netty.handler.ssl.PemEncoded: io.netty.handler.ssl.PemEncoded retain()>();
return v4;
label1:
v5 = interfaceinvoke v2.<java.security.PrivateKey: byte[] getEncoded()>();
if v5 != null goto label2;
v6 = new java.lang.IllegalArgumentException;
v7 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v8 = virtualinvoke v7.<java.lang.Class: java.lang.String getName()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 does not support encoding");
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v9);
throw v6;
label2:
v10 = staticinvoke <io.netty.handler.ssl.PemPrivateKey: io.netty.handler.ssl.PemEncoded toPEM(io.netty.buffer.ByteBufAllocator,boolean,byte[])>(v0, v1, v5);
return v10;
}
static io.netty.handler.ssl.PemEncoded toPEM(io.netty.buffer.ByteBufAllocator, boolean, byte[])
{
java.lang.Throwable v17, v18, v19;
byte[] v14, v15, v2, v5, v9;
io.netty.handler.ssl.PemValue v16;
io.netty.buffer.ByteBufAllocator v0;
io.netty.buffer.ByteBuf v12, v13, v3, v4;
int v10, v11, v6, v7, v8;
boolean v1;
v0 := @parameter0: io.netty.buffer.ByteBufAllocator;
v1 := @parameter1: boolean;
v2 := @parameter2: byte[];
v3 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf wrappedBuffer(byte[])>(v2);
label01:
v4 = staticinvoke <io.netty.handler.ssl.SslUtils: io.netty.buffer.ByteBuf toBase64(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf)>(v0, v3);
label02:
v5 = <io.netty.handler.ssl.PemPrivateKey: byte[] BEGIN_PRIVATE_KEY>;
v6 = lengthof v5;
v7 = virtualinvoke v4.<io.netty.buffer.ByteBuf: int readableBytes()>();
v8 = v6 + v7;
v9 = <io.netty.handler.ssl.PemPrivateKey: byte[] END_PRIVATE_KEY>;
v10 = lengthof v9;
v11 = v8 + v10;
if v1 == 0 goto label03;
v12 = interfaceinvoke v0.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf directBuffer(int)>(v11);
goto label04;
label03:
v12 = interfaceinvoke v0.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf buffer(int)>(v11);
label04:
v13 = v12;
label05:
v14 = <io.netty.handler.ssl.PemPrivateKey: byte[] BEGIN_PRIVATE_KEY>;
virtualinvoke v12.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(byte[])>(v14);
virtualinvoke v12.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)>(v4);
v15 = <io.netty.handler.ssl.PemPrivateKey: byte[] END_PRIVATE_KEY>;
virtualinvoke v12.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(byte[])>(v15);
v16 = new io.netty.handler.ssl.PemValue;
specialinvoke v16.<io.netty.handler.ssl.PemValue: void <init>(io.netty.buffer.ByteBuf,boolean)>(v12, 1);
label06:
staticinvoke <io.netty.handler.ssl.SslUtils: void zerooutAndRelease(io.netty.buffer.ByteBuf)>(v4);
label07:
staticinvoke <io.netty.handler.ssl.SslUtils: void zerooutAndRelease(io.netty.buffer.ByteBuf)>(v3);
return v16;
label08:
v17 := @caughtexception;
staticinvoke <io.netty.handler.ssl.SslUtils: void zerooutAndRelease(io.netty.buffer.ByteBuf)>(v13);
throw v17;
label09:
v18 := @caughtexception;
staticinvoke <io.netty.handler.ssl.SslUtils: void zerooutAndRelease(io.netty.buffer.ByteBuf)>(v4);
throw v18;
label10:
v19 := @caughtexception;
staticinvoke <io.netty.handler.ssl.SslUtils: void zerooutAndRelease(io.netty.buffer.ByteBuf)>(v3);
throw v19;
catch java.lang.Throwable from label05 to label06 with label08;
catch java.lang.Throwable from label02 to label06 with label09;
catch java.lang.Throwable from label01 to label07 with label10;
}
public static io.netty.handler.ssl.PemPrivateKey valueOf(byte[])
{
byte[] v0;
io.netty.buffer.ByteBuf v1;
io.netty.handler.ssl.PemPrivateKey v2;
v0 := @parameter0: byte[];
v1 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf wrappedBuffer(byte[])>(v0);
v2 = staticinvoke <io.netty.handler.ssl.PemPrivateKey: io.netty.handler.ssl.PemPrivateKey valueOf(io.netty.buffer.ByteBuf)>(v1);
return v2;
}
public static io.netty.handler.ssl.PemPrivateKey valueOf(io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v0;
io.netty.handler.ssl.PemPrivateKey v1;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 = new io.netty.handler.ssl.PemPrivateKey;
specialinvoke v1.<io.netty.handler.ssl.PemPrivateKey: void <init>(io.netty.buffer.ByteBuf)>(v0);
return v1;
}
private void <init>(io.netty.buffer.ByteBuf)
{
java.lang.Object v2;
io.netty.buffer.ByteBuf v1;
io.netty.handler.ssl.PemPrivateKey v0;
v0 := @this: io.netty.handler.ssl.PemPrivateKey;
v1 := @parameter0: io.netty.buffer.ByteBuf;
specialinvoke v0.<io.netty.util.AbstractReferenceCounted: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "content");
v0.<io.netty.handler.ssl.PemPrivateKey: io.netty.buffer.ByteBuf content> = v2;
return;
}
public boolean isSensitive()
{
io.netty.handler.ssl.PemPrivateKey v0;
v0 := @this: io.netty.handler.ssl.PemPrivateKey;
return 1;
}
public io.netty.buffer.ByteBuf content()
{
io.netty.buffer.ByteBuf v3;
io.netty.handler.ssl.PemPrivateKey v0;
io.netty.util.IllegalReferenceCountException v2;
int v1;
v0 := @this: io.netty.handler.ssl.PemPrivateKey;
v1 = virtualinvoke v0.<io.netty.handler.ssl.PemPrivateKey: int refCnt()>();
if v1 > 0 goto label1;
v2 = new io.netty.util.IllegalReferenceCountException;
specialinvoke v2.<io.netty.util.IllegalReferenceCountException: void <init>(int)>(v1);
throw v2;
label1:
v3 = v0.<io.netty.handler.ssl.PemPrivateKey: io.netty.buffer.ByteBuf content>;
return v3;
}
public io.netty.handler.ssl.PemPrivateKey copy()
{
io.netty.buffer.ByteBuf v1, v2;
io.netty.handler.ssl.PemPrivateKey v0, v3;
v0 := @this: io.netty.handler.ssl.PemPrivateKey;
v1 = v0.<io.netty.handler.ssl.PemPrivateKey: io.netty.buffer.ByteBuf content>;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf copy()>();
v3 = virtualinvoke v0.<io.netty.handler.ssl.PemPrivateKey: io.netty.handler.ssl.PemPrivateKey replace(io.netty.buffer.ByteBuf)>(v2);
return v3;
}
public io.netty.handler.ssl.PemPrivateKey duplicate()
{
io.netty.buffer.ByteBuf v1, v2;
io.netty.handler.ssl.PemPrivateKey v0, v3;
v0 := @this: io.netty.handler.ssl.PemPrivateKey;
v1 = v0.<io.netty.handler.ssl.PemPrivateKey: io.netty.buffer.ByteBuf content>;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf duplicate()>();
v3 = virtualinvoke v0.<io.netty.handler.ssl.PemPrivateKey: io.netty.handler.ssl.PemPrivateKey replace(io.netty.buffer.ByteBuf)>(v2);
return v3;
}
public io.netty.handler.ssl.PemPrivateKey retainedDuplicate()
{
io.netty.buffer.ByteBuf v1, v2;
io.netty.handler.ssl.PemPrivateKey v0, v3;
v0 := @this: io.netty.handler.ssl.PemPrivateKey;
v1 = v0.<io.netty.handler.ssl.PemPrivateKey: io.netty.buffer.ByteBuf content>;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf retainedDuplicate()>();
v3 = virtualinvoke v0.<io.netty.handler.ssl.PemPrivateKey: io.netty.handler.ssl.PemPrivateKey replace(io.netty.buffer.ByteBuf)>(v2);
return v3;
}
public io.netty.handler.ssl.PemPrivateKey replace(io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v1;
io.netty.handler.ssl.PemPrivateKey v0, v2;
v0 := @this: io.netty.handler.ssl.PemPrivateKey;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = new io.netty.handler.ssl.PemPrivateKey;
specialinvoke v2.<io.netty.handler.ssl.PemPrivateKey: void <init>(io.netty.buffer.ByteBuf)>(v1);
return v2;
}
public io.netty.handler.ssl.PemPrivateKey touch()
{
io.netty.buffer.ByteBuf v1;
io.netty.handler.ssl.PemPrivateKey v0;
v0 := @this: io.netty.handler.ssl.PemPrivateKey;
v1 = v0.<io.netty.handler.ssl.PemPrivateKey: io.netty.buffer.ByteBuf content>;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf touch()>();
return v0;
}
public io.netty.handler.ssl.PemPrivateKey touch(java.lang.Object)
{
java.lang.Object v1;
io.netty.buffer.ByteBuf v2;
io.netty.handler.ssl.PemPrivateKey v0;
v0 := @this: io.netty.handler.ssl.PemPrivateKey;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.handler.ssl.PemPrivateKey: io.netty.buffer.ByteBuf content>;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf touch(java.lang.Object)>(v1);
return v0;
}
public io.netty.handler.ssl.PemPrivateKey retain()
{
io.netty.handler.ssl.PemPrivateKey v0;
io.netty.util.ReferenceCounted v1;
v0 := @this: io.netty.handler.ssl.PemPrivateKey;
v1 = specialinvoke v0.<io.netty.util.AbstractReferenceCounted: io.netty.util.ReferenceCounted retain()>();
return v1;
}
public io.netty.handler.ssl.PemPrivateKey retain(int)
{
int v1;
io.netty.handler.ssl.PemPrivateKey v0;
io.netty.util.ReferenceCounted v2;
v0 := @this: io.netty.handler.ssl.PemPrivateKey;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.netty.util.AbstractReferenceCounted: io.netty.util.ReferenceCounted retain(int)>(v1);
return v2;
}
protected void deallocate()
{
io.netty.buffer.ByteBuf v1;
io.netty.handler.ssl.PemPrivateKey v0;
v0 := @this: io.netty.handler.ssl.PemPrivateKey;
v1 = v0.<io.netty.handler.ssl.PemPrivateKey: io.netty.buffer.ByteBuf content>;
staticinvoke <io.netty.handler.ssl.SslUtils: void zerooutAndRelease(io.netty.buffer.ByteBuf)>(v1);
return;
}
public byte[] getEncoded()
{
java.lang.UnsupportedOperationException v1;
io.netty.handler.ssl.PemPrivateKey v0;
v0 := @this: io.netty.handler.ssl.PemPrivateKey;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public java.lang.String getAlgorithm()
{
java.lang.UnsupportedOperationException v1;
io.netty.handler.ssl.PemPrivateKey v0;
v0 := @this: io.netty.handler.ssl.PemPrivateKey;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public java.lang.String getFormat()
{
io.netty.handler.ssl.PemPrivateKey v0;
v0 := @this: io.netty.handler.ssl.PemPrivateKey;
return "PKCS#8";
}
public void destroy()
{
int v1;
io.netty.handler.ssl.PemPrivateKey v0;
v0 := @this: io.netty.handler.ssl.PemPrivateKey;
v1 = virtualinvoke v0.<io.netty.handler.ssl.PemPrivateKey: int refCnt()>();
virtualinvoke v0.<io.netty.handler.ssl.PemPrivateKey: boolean release(int)>(v1);
return;
}
public boolean isDestroyed()
{
int v1;
io.netty.handler.ssl.PemPrivateKey v0;
boolean v2;
v0 := @this: io.netty.handler.ssl.PemPrivateKey;
v1 = virtualinvoke v0.<io.netty.handler.ssl.PemPrivateKey: int refCnt()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
static void <clinit>()
{
byte[] v2, v5;
java.nio.charset.Charset v1, v4;
java.lang.String v0, v3;
v0 = "-----BEGIN PRIVATE KEY-----\n";
v1 = <io.netty.util.CharsetUtil: java.nio.charset.Charset US_ASCII>;
v2 = virtualinvoke v0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v1);
<io.netty.handler.ssl.PemPrivateKey: byte[] BEGIN_PRIVATE_KEY> = v2;
v3 = "\n-----END PRIVATE KEY-----\n";
v4 = <io.netty.util.CharsetUtil: java.nio.charset.Charset US_ASCII>;
v5 = virtualinvoke v3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v4);
<io.netty.handler.ssl.PemPrivateKey: byte[] END_PRIVATE_KEY> = v5;
return;
}
}