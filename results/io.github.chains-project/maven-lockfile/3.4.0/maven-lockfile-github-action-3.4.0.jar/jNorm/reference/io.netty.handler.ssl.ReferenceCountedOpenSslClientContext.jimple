public final class io.netty.handler.ssl.ReferenceCountedOpenSslClientContext extends io.netty.handler.ssl.ReferenceCountedOpenSslContext
{
private static final java.util.Set SUPPORTED_KEY_TYPES;
private final io.netty.handler.ssl.OpenSslSessionContext sessionContext;
transient void <init>(java.security.cert.X509Certificate[], javax.net.ssl.TrustManagerFactory, java.security.cert.X509Certificate[], java.security.PrivateKey, java.lang.String, javax.net.ssl.KeyManagerFactory, java.lang.Iterable, io.netty.handler.ssl.CipherSuiteFilter, io.netty.handler.ssl.ApplicationProtocolConfig, java.lang.String[], long, long, boolean, java.lang.String, java.util.Map$Entry[]) throws javax.net.ssl.SSLException
{
java.lang.Throwable v21;
java.lang.String[] v10;
long v11, v12, v18;
java.lang.Iterable v7;
io.netty.handler.ssl.CipherSuiteFilter v8;
io.netty.handler.ssl.ClientAuth v17;
java.lang.String v14, v5;
java.util.Map$Entry[] v15;
io.netty.handler.ssl.ApplicationProtocolConfig v9;
boolean v13;
io.netty.handler.ssl.ReferenceCountedOpenSslClientContext v0;
javax.net.ssl.TrustManagerFactory v2;
io.netty.handler.ssl.OpenSslEngineMap v19;
javax.net.ssl.KeyManagerFactory v6;
java.security.PrivateKey v4;
io.netty.handler.ssl.OpenSslSessionContext v20;
io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator v16;
java.security.cert.X509Certificate[] v1, v3;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslClientContext;
v1 := @parameter0: java.security.cert.X509Certificate[];
v2 := @parameter1: javax.net.ssl.TrustManagerFactory;
v3 := @parameter2: java.security.cert.X509Certificate[];
v4 := @parameter3: java.security.PrivateKey;
v5 := @parameter4: java.lang.String;
v6 := @parameter5: javax.net.ssl.KeyManagerFactory;
v7 := @parameter6: java.lang.Iterable;
v8 := @parameter7: io.netty.handler.ssl.CipherSuiteFilter;
v9 := @parameter8: io.netty.handler.ssl.ApplicationProtocolConfig;
v10 := @parameter9: java.lang.String[];
v11 := @parameter10: long;
v12 := @parameter11: long;
v13 := @parameter12: boolean;
v14 := @parameter13: java.lang.String;
v15 := @parameter14: java.util.Map$Entry[];
v16 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator toNegotiator(io.netty.handler.ssl.ApplicationProtocolConfig)>(v9);
v17 = <io.netty.handler.ssl.ClientAuth: io.netty.handler.ssl.ClientAuth NONE>;
specialinvoke v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,int,java.security.cert.Certificate[],io.netty.handler.ssl.ClientAuth,java.lang.String[],boolean,boolean,boolean,java.util.Map$Entry[])>(v7, v8, v16, 0, v3, v17, v10, 0, v13, 1, v15);
label1:
v18 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: long ctx>;
v19 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: io.netty.handler.ssl.OpenSslEngineMap engineMap>;
v20 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: io.netty.handler.ssl.OpenSslSessionContext newSessionContext(io.netty.handler.ssl.ReferenceCountedOpenSslContext,long,io.netty.handler.ssl.OpenSslEngineMap,java.security.cert.X509Certificate[],javax.net.ssl.TrustManagerFactory,java.security.cert.X509Certificate[],java.security.PrivateKey,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.String,long,long)>(v0, v18, v19, v1, v2, v3, v4, v5, v6, v14, v11, v12);
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: io.netty.handler.ssl.OpenSslSessionContext sessionContext> = v20;
label2:
goto label4;
label3:
v21 := @caughtexception;
virtualinvoke v0.<io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: boolean release()>();
throw v21;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.netty.handler.ssl.OpenSslSessionContext sessionContext()
{
io.netty.handler.ssl.OpenSslSessionContext v1;
io.netty.handler.ssl.ReferenceCountedOpenSslClientContext v0;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslClientContext;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: io.netty.handler.ssl.OpenSslSessionContext sessionContext>;
return v1;
}
static io.netty.handler.ssl.OpenSslSessionContext newSessionContext(io.netty.handler.ssl.ReferenceCountedOpenSslContext, long, io.netty.handler.ssl.OpenSslEngineMap, java.security.cert.X509Certificate[], javax.net.ssl.TrustManagerFactory, java.security.cert.X509Certificate[], java.security.PrivateKey, java.lang.String, javax.net.ssl.KeyManagerFactory, java.lang.String, long, long) throws javax.net.ssl.SSLException
{
io.netty.handler.ssl.ReferenceCountedOpenSslClientContext$OpenSslClientCertificateCallback v26;
java.util.Enumeration v18;
byte v37, v39;
boolean v14, v19, v36, v41;
io.netty.handler.ssl.ReferenceCountedOpenSslClientContext$OpenSslClientSessionContext v35;
javax.net.ssl.TrustManagerFactory v4;
io.netty.handler.ssl.OpenSslEngineMap v2;
io.netty.handler.ssl.OpenSslKeyMaterialManager v25;
io.netty.handler.ssl.OpenSslKeyMaterialProvider v13;
java.security.KeyStore v17, v30;
java.lang.Exception v27, v33;
javax.net.ssl.SSLException v28, v34;
java.security.PrivateKey v6;
java.security.cert.X509Certificate[] v3, v5;
java.lang.Throwable v43;
long v1, v10, v11, v38, v40;
io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory v22;
java.lang.String v23, v29, v7, v9;
javax.net.ssl.KeyManagerFactory v21, v24, v8;
java.lang.IllegalArgumentException v12, v15;
io.netty.handler.ssl.OpenSslSessionTicketKey[] v42;
javax.net.ssl.TrustManager[] v31;
javax.net.ssl.X509TrustManager v32;
char[] v16;
io.netty.handler.ssl.ReferenceCountedOpenSslContext v0;
io.netty.handler.ssl.OpenSslX509KeyManagerFactory v20;
v0 := @parameter0: io.netty.handler.ssl.ReferenceCountedOpenSslContext;
v1 := @parameter1: long;
v2 := @parameter2: io.netty.handler.ssl.OpenSslEngineMap;
v3 := @parameter3: java.security.cert.X509Certificate[];
v4 := @parameter4: javax.net.ssl.TrustManagerFactory;
v5 := @parameter5: java.security.cert.X509Certificate[];
v6 := @parameter6: java.security.PrivateKey;
v7 := @parameter7: java.lang.String;
v8 := @parameter8: javax.net.ssl.KeyManagerFactory;
v9 := @parameter9: java.lang.String;
v10 := @parameter10: long;
v11 := @parameter11: long;
if v6 != null goto label01;
if v5 != null goto label02;
label01:
if v6 == null goto label03;
if v5 != null goto label03;
label02:
v12 = new java.lang.IllegalArgumentException;
specialinvoke v12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Either both keyCertChain and key needs to be null or none of them");
throw v12;
label03:
v13 = null;
label04:
v14 = staticinvoke <io.netty.handler.ssl.OpenSsl: boolean useKeyManagerFactory()>();
if v14 != 0 goto label06;
if v8 == null goto label05;
v15 = new java.lang.IllegalArgumentException;
specialinvoke v15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("KeyManagerFactory not supported");
throw v15;
label05:
if v5 == null goto label13;
staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: void setKeyMaterial(long,java.security.cert.X509Certificate[],java.security.PrivateKey,java.lang.String)>(v1, v5, v6, v7);
goto label13;
label06:
if v8 != null goto label09;
if v5 == null goto label09;
v16 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: char[] keyStorePassword(java.lang.String)>(v7);
v17 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: java.security.KeyStore buildKeyStore(java.security.cert.X509Certificate[],java.security.PrivateKey,char[],java.lang.String)>(v5, v6, v16, v9);
v18 = virtualinvoke v17.<java.security.KeyStore: java.util.Enumeration aliases()>();
v19 = interfaceinvoke v18.<java.util.Enumeration: boolean hasMoreElements()>();
if v19 == 0 goto label07;
v20 = new io.netty.handler.ssl.OpenSslX509KeyManagerFactory;
specialinvoke v20.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory: void <init>()>();
v21 = v20;
goto label08;
label07:
v22 = new io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory;
v23 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();
v24 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(v23);
specialinvoke v22.<io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory: void <init>(javax.net.ssl.KeyManagerFactory)>(v24);
v21 = v22;
label08:
virtualinvoke v21.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(v17, v16);
v13 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: io.netty.handler.ssl.OpenSslKeyMaterialProvider providerFor(javax.net.ssl.KeyManagerFactory,java.lang.String)>(v21, v7);
goto label10;
label09:
if v8 == null goto label10;
v13 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: io.netty.handler.ssl.OpenSslKeyMaterialProvider providerFor(javax.net.ssl.KeyManagerFactory,java.lang.String)>(v8, v7);
label10:
if v13 == null goto label13;
v25 = new io.netty.handler.ssl.OpenSslKeyMaterialManager;
specialinvoke v25.<io.netty.handler.ssl.OpenSslKeyMaterialManager: void <init>(io.netty.handler.ssl.OpenSslKeyMaterialProvider)>(v13);
v26 = new io.netty.handler.ssl.ReferenceCountedOpenSslClientContext$OpenSslClientCertificateCallback;
specialinvoke v26.<io.netty.handler.ssl.ReferenceCountedOpenSslClientContext$OpenSslClientCertificateCallback: void <init>(io.netty.handler.ssl.OpenSslEngineMap,io.netty.handler.ssl.OpenSslKeyMaterialManager)>(v2, v25);
staticinvoke <io.netty.internal.tcnative.SSLContext: void setCertificateCallback(long,io.netty.internal.tcnative.CertificateCallback)>(v1, v26);
label11:
goto label13;
label12:
v27 := @caughtexception;
v28 = new javax.net.ssl.SSLException;
specialinvoke v28.<javax.net.ssl.SSLException: void <init>(java.lang.String,java.lang.Throwable)>("failed to set certificate and key", v27);
throw v28;
label13:
staticinvoke <io.netty.internal.tcnative.SSLContext: void setVerify(long,int,int)>(v1, 1, 10);
label14:
if v3 == null goto label15;
v4 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: javax.net.ssl.TrustManagerFactory buildTrustManagerFactory(java.security.cert.X509Certificate[],javax.net.ssl.TrustManagerFactory,java.lang.String)>(v3, v4, v9);
goto label16;
label15:
if v4 != null goto label16;
v29 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();
v4 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(v29);
v30 = null;
virtualinvoke v4.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(v30);
label16:
v31 = virtualinvoke v4.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();
v32 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: javax.net.ssl.X509TrustManager chooseTrustManager(javax.net.ssl.TrustManager[])>(v31);
staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: void setVerifyCallback(long,io.netty.handler.ssl.OpenSslEngineMap,javax.net.ssl.X509TrustManager)>(v1, v2, v32);
label17:
goto label20;
label18:
v33 := @caughtexception;
if v13 == null goto label19;
virtualinvoke v13.<io.netty.handler.ssl.OpenSslKeyMaterialProvider: void destroy()>();
label19:
v34 = new javax.net.ssl.SSLException;
specialinvoke v34.<javax.net.ssl.SSLException: void <init>(java.lang.String,java.lang.Throwable)>("unable to setup trustmanager", v33);
throw v34;
label20:
v35 = new io.netty.handler.ssl.ReferenceCountedOpenSslClientContext$OpenSslClientSessionContext;
specialinvoke v35.<io.netty.handler.ssl.ReferenceCountedOpenSslClientContext$OpenSslClientSessionContext: void <init>(io.netty.handler.ssl.ReferenceCountedOpenSslContext,io.netty.handler.ssl.OpenSslKeyMaterialProvider)>(v0, v13);
v36 = <io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: boolean CLIENT_ENABLE_SESSION_CACHE>;
virtualinvoke v35.<io.netty.handler.ssl.ReferenceCountedOpenSslClientContext$OpenSslClientSessionContext: void setSessionCacheEnabled(boolean)>(v36);
v37 = v10 cmp 0L;
if v37 <= 0 goto label21;
v38 = staticinvoke <java.lang.Math: long min(long,long)>(v10, 2147483647L);
virtualinvoke v35.<io.netty.handler.ssl.ReferenceCountedOpenSslClientContext$OpenSslClientSessionContext: void setSessionCacheSize(int)>(v38);
label21:
v39 = v11 cmp 0L;
if v39 <= 0 goto label22;
v40 = staticinvoke <java.lang.Math: long min(long,long)>(v11, 2147483647L);
virtualinvoke v35.<io.netty.handler.ssl.ReferenceCountedOpenSslClientContext$OpenSslClientSessionContext: void setSessionTimeout(int)>(v40);
label22:
v41 = <io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: boolean CLIENT_ENABLE_SESSION_TICKET>;
if v41 == 0 goto label23;
v42 = newarray (io.netty.handler.ssl.OpenSslSessionTicketKey)[0];
virtualinvoke v35.<io.netty.handler.ssl.ReferenceCountedOpenSslClientContext$OpenSslClientSessionContext: void setTicketKeys(io.netty.handler.ssl.OpenSslSessionTicketKey[])>(v42);
label23:
return v35;
label24:
v43 := @caughtexception;
if v13 == null goto label25;
virtualinvoke v13.<io.netty.handler.ssl.OpenSslKeyMaterialProvider: void destroy()>();
label25:
throw v43;
catch java.lang.Exception from label04 to label11 with label12;
catch java.lang.Exception from label14 to label17 with label18;
catch java.lang.Throwable from label04 to label23 with label24;
}
private static void setVerifyCallback(long, io.netty.handler.ssl.OpenSslEngineMap, javax.net.ssl.X509TrustManager)
{
io.netty.handler.ssl.OpenSslEngineMap v1;
javax.net.ssl.X509TrustManager v2;
io.netty.handler.ssl.ReferenceCountedOpenSslClientContext$TrustManagerVerifyCallback v5;
long v0;
boolean v3;
io.netty.handler.ssl.ReferenceCountedOpenSslClientContext$ExtendedTrustManagerVerifyCallback v4;
v0 := @parameter0: long;
v1 := @parameter1: io.netty.handler.ssl.OpenSslEngineMap;
v2 := @parameter2: javax.net.ssl.X509TrustManager;
v3 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: boolean useExtendedTrustManager(javax.net.ssl.X509TrustManager)>(v2);
if v3 == 0 goto label1;
v4 = new io.netty.handler.ssl.ReferenceCountedOpenSslClientContext$ExtendedTrustManagerVerifyCallback;
specialinvoke v4.<io.netty.handler.ssl.ReferenceCountedOpenSslClientContext$ExtendedTrustManagerVerifyCallback: void <init>(io.netty.handler.ssl.OpenSslEngineMap,javax.net.ssl.X509ExtendedTrustManager)>(v1, v2);
staticinvoke <io.netty.internal.tcnative.SSLContext: void setCertVerifyCallback(long,io.netty.internal.tcnative.CertificateVerifier)>(v0, v4);
goto label2;
label1:
v5 = new io.netty.handler.ssl.ReferenceCountedOpenSslClientContext$TrustManagerVerifyCallback;
specialinvoke v5.<io.netty.handler.ssl.ReferenceCountedOpenSslClientContext$TrustManagerVerifyCallback: void <init>(io.netty.handler.ssl.OpenSslEngineMap,javax.net.ssl.X509TrustManager)>(v1, v2);
staticinvoke <io.netty.internal.tcnative.SSLContext: void setCertVerifyCallback(long,io.netty.internal.tcnative.CertificateVerifier)>(v0, v5);
label2:
return;
}
static void <clinit>()
{
java.util.List v2;
java.util.Set v3;
java.lang.String[] v1;
java.util.LinkedHashSet v0;
v0 = new java.util.LinkedHashSet;
v1 = newarray (java.lang.String)[5];
v1[0] = "RSA";
v1[1] = "DH_RSA";
v1[2] = "EC";
v1[3] = "EC_RSA";
v1[4] = "EC_EC";
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
specialinvoke v0.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(v2);
v3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v0);
<io.netty.handler.ssl.ReferenceCountedOpenSslClientContext: java.util.Set SUPPORTED_KEY_TYPES> = v3;
return;
}
}