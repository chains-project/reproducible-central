class io.netty.handler.ssl.ReferenceCountedOpenSslContext$1 extends io.netty.util.AbstractReferenceCounted
{
static final boolean $assertionsDisabled;
final io.netty.handler.ssl.ReferenceCountedOpenSslContext this$0;
void <init>(io.netty.handler.ssl.ReferenceCountedOpenSslContext)
{
io.netty.handler.ssl.ReferenceCountedOpenSslContext$1 v0;
io.netty.handler.ssl.ReferenceCountedOpenSslContext v1;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslContext$1;
v1 := @parameter0: io.netty.handler.ssl.ReferenceCountedOpenSslContext;
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$1: io.netty.handler.ssl.ReferenceCountedOpenSslContext this$0> = v1;
specialinvoke v0.<io.netty.util.AbstractReferenceCounted: void <init>()>();
return;
}
public io.netty.util.ReferenceCounted touch(java.lang.Object)
{
io.netty.handler.ssl.ReferenceCountedOpenSslContext$1 v0;
java.lang.Object v1;
io.netty.handler.ssl.ReferenceCountedOpenSslContext v2, v4, v6;
io.netty.util.ResourceLeakTracker v3, v5;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslContext$1;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$1: io.netty.handler.ssl.ReferenceCountedOpenSslContext this$0>;
v3 = v2.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: io.netty.util.ResourceLeakTracker leak>;
if v3 == null goto label1;
v4 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$1: io.netty.handler.ssl.ReferenceCountedOpenSslContext this$0>;
v5 = v4.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: io.netty.util.ResourceLeakTracker leak>;
interfaceinvoke v5.<io.netty.util.ResourceLeakTracker: void record(java.lang.Object)>(v1);
label1:
v6 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$1: io.netty.handler.ssl.ReferenceCountedOpenSslContext this$0>;
return v6;
}
protected void deallocate()
{
io.netty.handler.ssl.ReferenceCountedOpenSslContext$1 v0;
java.lang.AssertionError v9;
io.netty.handler.ssl.ReferenceCountedOpenSslContext v1, v2, v4, v6;
io.netty.util.ResourceLeakTracker v3, v5;
boolean v7, v8;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslContext$1;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$1: io.netty.handler.ssl.ReferenceCountedOpenSslContext this$0>;
specialinvoke v1.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: void destroy()>();
v2 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$1: io.netty.handler.ssl.ReferenceCountedOpenSslContext this$0>;
v3 = v2.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: io.netty.util.ResourceLeakTracker leak>;
if v3 == null goto label1;
v4 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$1: io.netty.handler.ssl.ReferenceCountedOpenSslContext this$0>;
v5 = v4.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: io.netty.util.ResourceLeakTracker leak>;
v6 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$1: io.netty.handler.ssl.ReferenceCountedOpenSslContext this$0>;
v7 = interfaceinvoke v5.<io.netty.util.ResourceLeakTracker: boolean close(java.lang.Object)>(v6);
v8 = <io.netty.handler.ssl.ReferenceCountedOpenSslContext$1: boolean $assertionsDisabled>;
if v8 != 0 goto label1;
if v7 != 0 goto label1;
v9 = new java.lang.AssertionError;
specialinvoke v9.<java.lang.AssertionError: void <init>()>();
throw v9;
label1:
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/ssl/ReferenceCountedOpenSslContext;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.ssl.ReferenceCountedOpenSslContext$1: boolean $assertionsDisabled> = v2;
return;
}
}