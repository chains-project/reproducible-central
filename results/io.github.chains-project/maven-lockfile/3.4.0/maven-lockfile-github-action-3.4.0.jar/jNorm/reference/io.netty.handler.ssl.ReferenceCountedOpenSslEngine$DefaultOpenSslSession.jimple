final class io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession extends java.lang.Object implements io.netty.handler.ssl.OpenSslSession
{
private final io.netty.handler.ssl.OpenSslSessionContext sessionContext;
private javax.security.cert.X509Certificate[] x509PeerCerts;
private java.security.cert.Certificate[] peerCerts;
private boolean valid;
private java.lang.String protocol;
private java.lang.String cipher;
private io.netty.handler.ssl.OpenSslSessionId id;
private volatile long creationTime;
private volatile int applicationBufferSize;
private volatile java.security.cert.Certificate[] localCertificateChain;
private java.util.Map values;
final io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0;
void <init>(io.netty.handler.ssl.ReferenceCountedOpenSslEngine, io.netty.handler.ssl.OpenSslSessionContext)
{
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v1;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
int v4;
io.netty.handler.ssl.OpenSslSessionContext v2;
io.netty.handler.ssl.OpenSslSessionId v3;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 := @parameter0: io.netty.handler.ssl.ReferenceCountedOpenSslEngine;
v2 := @parameter1: io.netty.handler.ssl.OpenSslSessionContext;
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: boolean valid> = 1;
v3 = <io.netty.handler.ssl.OpenSslSessionId: io.netty.handler.ssl.OpenSslSessionId NULL_ID>;
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.OpenSslSessionId id> = v3;
v4 = <io.netty.handler.ssl.ReferenceCountedOpenSslEngine: int MAX_PLAINTEXT_LENGTH>;
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: int applicationBufferSize> = v4;
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.OpenSslSessionContext sessionContext> = v2;
return;
}
private javax.net.ssl.SSLSessionBindingEvent newSSLSessionBindingEvent(java.lang.String)
{
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v3;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
javax.net.ssl.SSLSessionBindingEvent v2;
io.netty.handler.ssl.OpenSslSession v4;
java.lang.String v1;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 := @parameter0: java.lang.String;
v2 = new javax.net.ssl.SSLSessionBindingEvent;
v3 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
v4 = v3.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: io.netty.handler.ssl.OpenSslSession session>;
specialinvoke v2.<javax.net.ssl.SSLSessionBindingEvent: void <init>(javax.net.ssl.SSLSession,java.lang.String)>(v4, v1);
return v2;
}
public void setSessionId(io.netty.handler.ssl.OpenSslSessionId)
{
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v2;
java.lang.Throwable v6;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
long v5;
io.netty.handler.ssl.OpenSslSessionId v1, v3, v4;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 := @parameter0: io.netty.handler.ssl.OpenSslSessionId;
v2 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
entermonitor v2;
label1:
v3 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.OpenSslSessionId id>;
v4 = <io.netty.handler.ssl.OpenSslSessionId: io.netty.handler.ssl.OpenSslSessionId NULL_ID>;
if v3 != v4 goto label2;
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.OpenSslSessionId id> = v1;
v5 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: long creationTime> = v5;
label2:
exitmonitor v2;
label3:
goto label5;
label4:
v6 := @caughtexception;
exitmonitor v2;
throw v6;
label5:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
public io.netty.handler.ssl.OpenSslSessionId sessionId()
{
java.lang.Throwable v11;
byte[] v8;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
long v7;
io.netty.handler.ssl.OpenSslSessionId v10, v2, v3, v9;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v1, v4, v6;
boolean v5;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
entermonitor v1;
label1:
v2 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.OpenSslSessionId id>;
v3 = <io.netty.handler.ssl.OpenSslSessionId: io.netty.handler.ssl.OpenSslSessionId NULL_ID>;
if v2 != v3 goto label2;
v4 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
v5 = specialinvoke v4.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: boolean isDestroyed()>();
if v5 != 0 goto label2;
v6 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
v7 = v6.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: long ssl>;
v8 = staticinvoke <io.netty.internal.tcnative.SSL: byte[] getSessionId(long)>(v7);
if v8 == null goto label2;
v9 = new io.netty.handler.ssl.OpenSslSessionId;
specialinvoke v9.<io.netty.handler.ssl.OpenSslSessionId: void <init>(byte[])>(v8);
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.OpenSslSessionId id> = v9;
label2:
v10 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.OpenSslSessionId id>;
exitmonitor v1;
label3:
return v10;
label4:
v11 := @caughtexception;
exitmonitor v1;
throw v11;
catch java.lang.Throwable from label1 to label3 with label4;
}
public void setLocalCertificate(java.security.cert.Certificate[])
{
java.security.cert.Certificate[] v1;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 := @parameter0: java.security.cert.Certificate[];
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.security.cert.Certificate[] localCertificateChain> = v1;
return;
}
public byte[] getId()
{
byte[] v2;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
io.netty.handler.ssl.OpenSslSessionId v1;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = virtualinvoke v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.OpenSslSessionId sessionId()>();
v2 = virtualinvoke v1.<io.netty.handler.ssl.OpenSslSessionId: byte[] cloneBytes()>();
return v2;
}
public io.netty.handler.ssl.OpenSslSessionContext getSessionContext()
{
io.netty.handler.ssl.OpenSslSessionContext v1;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.OpenSslSessionContext sessionContext>;
return v1;
}
public long getCreationTime()
{
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v1;
java.lang.Throwable v3;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
long v2;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
entermonitor v1;
label1:
v2 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: long creationTime>;
exitmonitor v1;
label2:
return v2;
label3:
v3 := @caughtexception;
exitmonitor v1;
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public long getLastAccessedTime()
{
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v1;
byte v3;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
long v2, v4;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
v2 = v1.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: long lastAccessed>;
v3 = v2 cmp -1L;
if v3 != 0 goto label1;
v4 = virtualinvoke v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: long getCreationTime()>();
goto label2;
label1:
v4 = v2;
label2:
return v4;
}
public void invalidate()
{
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v1;
java.lang.Throwable v4;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
io.netty.handler.ssl.OpenSslSessionContext v2;
io.netty.handler.ssl.OpenSslSessionId v3;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
entermonitor v1;
label1:
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: boolean valid> = 0;
v2 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.OpenSslSessionContext sessionContext>;
v3 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.OpenSslSessionId id>;
virtualinvoke v2.<io.netty.handler.ssl.OpenSslSessionContext: void removeFromCache(io.netty.handler.ssl.OpenSslSessionId)>(v3);
exitmonitor v1;
label2:
goto label4;
label3:
v4 := @caughtexception;
exitmonitor v1;
throw v4;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public boolean isValid()
{
java.lang.Throwable v7;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
io.netty.handler.ssl.OpenSslSessionId v4;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v1;
io.netty.handler.ssl.OpenSslSessionContext v3;
boolean v2, v5, v6;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
entermonitor v1;
label1:
v2 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: boolean valid>;
if v2 != 0 goto label2;
v3 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.OpenSslSessionContext sessionContext>;
v4 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.OpenSslSessionId id>;
v5 = virtualinvoke v3.<io.netty.handler.ssl.OpenSslSessionContext: boolean isInCache(io.netty.handler.ssl.OpenSslSessionId)>(v4);
if v5 == 0 goto label3;
label2:
v6 = 1;
goto label4;
label3:
v6 = 0;
label4:
exitmonitor v1;
label5:
return v6;
label6:
v7 := @caughtexception;
exitmonitor v1;
throw v7;
catch java.lang.Throwable from label1 to label5 with label6;
}
public void putValue(java.lang.String, java.lang.Object)
{
java.lang.Throwable v6;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
javax.net.ssl.SSLSessionBindingEvent v8;
java.util.HashMap v4;
java.util.Map v3;
java.lang.Object v2, v5;
java.lang.String v1;
boolean v7;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "name");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "value");
entermonitor v0;
label1:
v3 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.util.Map values>;
if v3 != null goto label2;
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>(int)>(2);
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.util.Map values> = v4;
v3 = v4;
label2:
v5 = interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
exitmonitor v0;
label3:
goto label5;
label4:
v6 := @caughtexception;
exitmonitor v0;
throw v6;
label5:
v7 = v2 instanceof javax.net.ssl.SSLSessionBindingListener;
if v7 == 0 goto label6;
v8 = specialinvoke v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: javax.net.ssl.SSLSessionBindingEvent newSSLSessionBindingEvent(java.lang.String)>(v1);
interfaceinvoke v2.<javax.net.ssl.SSLSessionBindingListener: void valueBound(javax.net.ssl.SSLSessionBindingEvent)>(v8);
label6:
specialinvoke v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: void notifyUnbound(java.lang.Object,java.lang.String)>(v5, v1);
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
public java.lang.Object getValue(java.lang.String)
{
java.lang.Throwable v5;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
java.util.Map v2, v3;
java.lang.Object v4;
java.lang.String v1;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 := @parameter0: java.lang.String;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "name");
entermonitor v0;
label1:
v2 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.util.Map values>;
if v2 != null goto label3;
exitmonitor v0;
label2:
return null;
label3:
v3 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.util.Map values>;
v4 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
exitmonitor v0;
label4:
return v4;
label5:
v5 := @caughtexception;
exitmonitor v0;
throw v5;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
public void removeValue(java.lang.String)
{
java.lang.Throwable v4;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
java.util.Map v2;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 := @parameter0: java.lang.String;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "name");
entermonitor v0;
label1:
v2 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.util.Map values>;
if v2 != null goto label3;
exitmonitor v0;
label2:
return;
label3:
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
exitmonitor v0;
label4:
goto label6;
label5:
v4 := @caughtexception;
exitmonitor v0;
throw v4;
label6:
specialinvoke v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: void notifyUnbound(java.lang.Object,java.lang.String)>(v3, v1);
return;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
public java.lang.String[] getValueNames()
{
java.lang.Throwable v7;
java.lang.Object[] v6;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
java.util.Set v4;
java.lang.String[] v3, v5;
java.util.Map v1;
boolean v2;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
entermonitor v0;
label1:
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.util.Map values>;
if v1 == null goto label2;
v2 = interfaceinvoke v1.<java.util.Map: boolean isEmpty()>();
if v2 == 0 goto label4;
label2:
v3 = <io.netty.util.internal.EmptyArrays: java.lang.String[] EMPTY_STRINGS>;
exitmonitor v0;
label3:
return v3;
label4:
v4 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v5 = newarray (java.lang.String)[0];
v6 = interfaceinvoke v4.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(v5);
exitmonitor v0;
label5:
return v6;
label6:
v7 := @caughtexception;
exitmonitor v0;
throw v7;
catch java.lang.Throwable from label1 to label3 with label6;
catch java.lang.Throwable from label4 to label5 with label6;
}
private void notifyUnbound(java.lang.Object, java.lang.String)
{
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
javax.net.ssl.SSLSessionBindingEvent v4;
java.lang.Object v1;
java.lang.String v2;
boolean v3;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.String;
v3 = v1 instanceof javax.net.ssl.SSLSessionBindingListener;
if v3 == 0 goto label1;
v4 = specialinvoke v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: javax.net.ssl.SSLSessionBindingEvent newSSLSessionBindingEvent(java.lang.String)>(v2);
interfaceinvoke v1.<javax.net.ssl.SSLSessionBindingListener: void valueUnbound(javax.net.ssl.SSLSessionBindingEvent)>(v4);
label1:
return;
}
public void handshakeFinished(byte[], java.lang.String, java.lang.String, byte[], byte[][], long, long) throws javax.net.ssl.SSLException
{
byte[] v1, v4;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v14, v16, v43, v44, v8, v9;
boolean v10, v17, v18, v25, v28;
byte[][] v5;
javax.net.ssl.SSLException v46;
java.security.cert.Certificate[] v19, v22, v26, v29, v35, v39;
io.netty.handler.ssl.util.LazyX509Certificate v30, v40;
java.lang.Throwable v47;
javax.security.cert.X509Certificate[] v20, v24, v27, v31, v38, v41;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
long v6, v7;
io.netty.handler.ssl.OpenSslSessionId v11, v12, v13;
int v21, v23, v33, v34, v36, v37;
java.lang.String v15, v2, v3;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$HandshakeState v45;
io.netty.handler.ssl.util.LazyJavaxX509Certificate v32, v42;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 := @parameter0: byte[];
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: byte[];
v5 := @parameter4: byte[][];
v6 := @parameter5: long;
v7 := @parameter6: long;
v8 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
entermonitor v8;
label01:
v9 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
v10 = specialinvoke v9.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: boolean isDestroyed()>();
if v10 != 0 goto label10;
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: long creationTime> = v6;
v11 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.OpenSslSessionId id>;
v12 = <io.netty.handler.ssl.OpenSslSessionId: io.netty.handler.ssl.OpenSslSessionId NULL_ID>;
if v11 != v12 goto label04;
if v1 != null goto label02;
v13 = <io.netty.handler.ssl.OpenSslSessionId: io.netty.handler.ssl.OpenSslSessionId NULL_ID>;
goto label03;
label02:
v13 = new io.netty.handler.ssl.OpenSslSessionId;
specialinvoke v13.<io.netty.handler.ssl.OpenSslSessionId: void <init>(byte[])>(v1);
label03:
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.OpenSslSessionId id> = v13;
label04:
v14 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
v15 = specialinvoke v14.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: java.lang.String toJavaCipherSuite(java.lang.String)>(v2);
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.lang.String cipher> = v15;
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.lang.String protocol> = v3;
v16 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
v17 = v16.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: boolean clientMode>;
if v17 == 0 goto label06;
v18 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslEngine: boolean isEmpty(java.lang.Object[])>(v5);
if v18 == 0 goto label05;
v19 = <io.netty.util.internal.EmptyArrays: java.security.cert.Certificate[] EMPTY_CERTIFICATES>;
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.security.cert.Certificate[] peerCerts> = v19;
v20 = <io.netty.util.internal.EmptyArrays: javax.security.cert.X509Certificate[] EMPTY_JAVAX_X509_CERTIFICATES>;
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: javax.security.cert.X509Certificate[] x509PeerCerts> = v20;
goto label09;
label05:
v21 = lengthof v5;
v22 = newarray (java.security.cert.Certificate)[v21];
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.security.cert.Certificate[] peerCerts> = v22;
v23 = lengthof v5;
v24 = newarray (javax.security.cert.X509Certificate)[v23];
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: javax.security.cert.X509Certificate[] x509PeerCerts> = v24;
specialinvoke v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: void initCerts(byte[][],int)>(v5, 0);
goto label09;
label06:
v25 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslEngine: boolean isEmpty(byte[])>(v4);
if v25 == 0 goto label07;
v26 = <io.netty.util.internal.EmptyArrays: java.security.cert.Certificate[] EMPTY_CERTIFICATES>;
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.security.cert.Certificate[] peerCerts> = v26;
v27 = <io.netty.util.internal.EmptyArrays: javax.security.cert.X509Certificate[] EMPTY_JAVAX_X509_CERTIFICATES>;
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: javax.security.cert.X509Certificate[] x509PeerCerts> = v27;
goto label09;
label07:
v28 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslEngine: boolean isEmpty(java.lang.Object[])>(v5);
if v28 == 0 goto label08;
v29 = newarray (java.security.cert.Certificate)[1];
v30 = new io.netty.handler.ssl.util.LazyX509Certificate;
specialinvoke v30.<io.netty.handler.ssl.util.LazyX509Certificate: void <init>(byte[])>(v4);
v29[0] = v30;
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.security.cert.Certificate[] peerCerts> = v29;
v31 = newarray (javax.security.cert.X509Certificate)[1];
v32 = new io.netty.handler.ssl.util.LazyJavaxX509Certificate;
specialinvoke v32.<io.netty.handler.ssl.util.LazyJavaxX509Certificate: void <init>(byte[])>(v4);
v31[0] = v32;
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: javax.security.cert.X509Certificate[] x509PeerCerts> = v31;
goto label09;
label08:
v33 = lengthof v5;
v34 = v33 + 1;
v35 = newarray (java.security.cert.Certificate)[v34];
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.security.cert.Certificate[] peerCerts> = v35;
v36 = lengthof v5;
v37 = v36 + 1;
v38 = newarray (javax.security.cert.X509Certificate)[v37];
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: javax.security.cert.X509Certificate[] x509PeerCerts> = v38;
v39 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.security.cert.Certificate[] peerCerts>;
v40 = new io.netty.handler.ssl.util.LazyX509Certificate;
specialinvoke v40.<io.netty.handler.ssl.util.LazyX509Certificate: void <init>(byte[])>(v4);
v39[0] = v40;
v41 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: javax.security.cert.X509Certificate[] x509PeerCerts>;
v42 = new io.netty.handler.ssl.util.LazyJavaxX509Certificate;
specialinvoke v42.<io.netty.handler.ssl.util.LazyJavaxX509Certificate: void <init>(byte[])>(v4);
v41[0] = v42;
specialinvoke v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: void initCerts(byte[][],int)>(v5, 1);
label09:
v43 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
specialinvoke v43.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: void calculateMaxWrapOverhead()>();
v44 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
v45 = <io.netty.handler.ssl.ReferenceCountedOpenSslEngine$HandshakeState: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$HandshakeState FINISHED>;
v44.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$HandshakeState handshakeState> = v45;
goto label11;
label10:
v46 = new javax.net.ssl.SSLException;
specialinvoke v46.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("Already closed");
throw v46;
label11:
exitmonitor v8;
label12:
goto label14;
label13:
v47 := @caughtexception;
exitmonitor v8;
throw v47;
label14:
return;
catch java.lang.Throwable from label01 to label12 with label13;
}
private void initCerts(byte[][], int)
{
byte[] v11, v8;
javax.security.cert.X509Certificate[] v9;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
byte[][] v1;
int v2, v3, v4, v5;
io.netty.handler.ssl.util.LazyJavaxX509Certificate v10;
java.security.cert.Certificate[] v6;
io.netty.handler.ssl.util.LazyX509Certificate v7;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 := @parameter0: byte[][];
v2 := @parameter1: int;
v3 = 0;
label1:
v4 = lengthof v1;
if v3 >= v4 goto label2;
v5 = v2 + v3;
v6 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.security.cert.Certificate[] peerCerts>;
v7 = new io.netty.handler.ssl.util.LazyX509Certificate;
v8 = v1[v3];
specialinvoke v7.<io.netty.handler.ssl.util.LazyX509Certificate: void <init>(byte[])>(v8);
v6[v5] = v7;
v9 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: javax.security.cert.X509Certificate[] x509PeerCerts>;
v10 = new io.netty.handler.ssl.util.LazyJavaxX509Certificate;
v11 = v1[v3];
specialinvoke v10.<io.netty.handler.ssl.util.LazyJavaxX509Certificate: void <init>(byte[])>(v11);
v9[v5] = v10;
v3 = v3 + 1;
goto label1;
label2:
return;
}
public java.security.cert.Certificate[] getPeerCertificates() throws javax.net.ssl.SSLPeerUnverifiedException
{
java.lang.Throwable v7;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v1;
java.lang.Object v6;
java.security.cert.Certificate[] v2, v5;
boolean v3;
javax.net.ssl.SSLPeerUnverifiedException v4;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
entermonitor v1;
label1:
v2 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.security.cert.Certificate[] peerCerts>;
v3 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslEngine: boolean isEmpty(java.lang.Object[])>(v2);
if v3 == 0 goto label2;
v4 = new javax.net.ssl.SSLPeerUnverifiedException;
specialinvoke v4.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>("peer not verified");
throw v4;
label2:
v5 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.security.cert.Certificate[] peerCerts>;
v6 = virtualinvoke v5.<java.lang.Object: java.lang.Object clone()>();
exitmonitor v1;
label3:
return v6;
label4:
v7 := @caughtexception;
exitmonitor v1;
throw v7;
catch java.lang.Throwable from label1 to label3 with label4;
}
public java.security.cert.Certificate[] getLocalCertificates()
{
java.lang.Object v2;
java.security.cert.Certificate[] v1;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.security.cert.Certificate[] localCertificateChain>;
if v1 != null goto label1;
return null;
label1:
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Object clone()>();
return v2;
}
public javax.security.cert.X509Certificate[] getPeerCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException
{
java.lang.Throwable v7;
javax.security.cert.X509Certificate[] v2, v5;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v1;
java.lang.Object v6;
boolean v3;
javax.net.ssl.SSLPeerUnverifiedException v4;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
entermonitor v1;
label1:
v2 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: javax.security.cert.X509Certificate[] x509PeerCerts>;
v3 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslEngine: boolean isEmpty(java.lang.Object[])>(v2);
if v3 == 0 goto label2;
v4 = new javax.net.ssl.SSLPeerUnverifiedException;
specialinvoke v4.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>("peer not verified");
throw v4;
label2:
v5 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: javax.security.cert.X509Certificate[] x509PeerCerts>;
v6 = virtualinvoke v5.<java.lang.Object: java.lang.Object clone()>();
exitmonitor v1;
label3:
return v6;
label4:
v7 := @caughtexception;
exitmonitor v1;
throw v7;
catch java.lang.Throwable from label1 to label3 with label4;
}
public java.security.Principal getPeerPrincipal() throws javax.net.ssl.SSLPeerUnverifiedException
{
java.security.cert.Certificate v2;
javax.security.auth.x500.X500Principal v3;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
java.security.cert.Certificate[] v1;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = virtualinvoke v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.security.cert.Certificate[] getPeerCertificates()>();
v2 = v1[0];
v3 = virtualinvoke v2.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();
return v3;
}
public java.security.Principal getLocalPrincipal()
{
java.security.cert.Certificate v3;
javax.security.auth.x500.X500Principal v4;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
int v2;
java.security.cert.Certificate[] v1;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.security.cert.Certificate[] localCertificateChain>;
if v1 == null goto label1;
v2 = lengthof v1;
if v2 != 0 goto label2;
label1:
return null;
label2:
v3 = v1[0];
v4 = virtualinvoke v3.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();
return v4;
}
public java.lang.String getCipherSuite()
{
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v1;
java.lang.Throwable v4;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
java.lang.String v2, v3;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
entermonitor v1;
label1:
v2 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.lang.String cipher>;
if v2 != null goto label3;
exitmonitor v1;
label2:
return "SSL_NULL_WITH_NULL_NULL";
label3:
v3 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.lang.String cipher>;
exitmonitor v1;
label4:
return v3;
label5:
v4 := @caughtexception;
exitmonitor v1;
throw v4;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
public java.lang.String getProtocol()
{
java.lang.Throwable v7;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
long v6;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v2, v3, v5;
java.lang.String v1;
boolean v4;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: java.lang.String protocol>;
if v1 != null goto label6;
v2 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
entermonitor v2;
label1:
v3 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
v4 = specialinvoke v3.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: boolean isDestroyed()>();
if v4 != 0 goto label2;
v5 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
v6 = v5.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: long ssl>;
v1 = staticinvoke <io.netty.internal.tcnative.SSL: java.lang.String getVersion(long)>(v6);
goto label3;
label2:
v1 = "";
label3:
exitmonitor v2;
label4:
goto label6;
label5:
v7 := @caughtexception;
exitmonitor v2;
throw v7;
label6:
return v1;
catch java.lang.Throwable from label1 to label4 with label5;
}
public java.lang.String getPeerHost()
{
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v1;
java.lang.String v2;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
v2 = virtualinvoke v1.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: java.lang.String getPeerHost()>();
return v2;
}
public int getPeerPort()
{
int v2;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v1;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.ReferenceCountedOpenSslEngine this$0>;
v2 = virtualinvoke v1.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: int getPeerPort()>();
return v2;
}
public int getPacketBufferSize()
{
int v1;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = <io.netty.internal.tcnative.SSL: int SSL_MAX_ENCRYPTED_LENGTH>;
return v1;
}
public int getApplicationBufferSize()
{
int v1;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: int applicationBufferSize>;
return v1;
}
public void tryExpandApplicationBufferSize(int)
{
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
int v1, v2, v3, v4, v5;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 := @parameter0: int;
v2 = <io.netty.handler.ssl.ReferenceCountedOpenSslEngine: int MAX_PLAINTEXT_LENGTH>;
if v1 <= v2 goto label1;
v3 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: int applicationBufferSize>;
v4 = <io.netty.handler.ssl.ReferenceCountedOpenSslEngine: int MAX_RECORD_SIZE>;
if v3 == v4 goto label1;
v5 = <io.netty.handler.ssl.ReferenceCountedOpenSslEngine: int MAX_RECORD_SIZE>;
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: int applicationBufferSize> = v5;
label1:
return;
}
public java.lang.String toString()
{
io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession v0;
io.netty.handler.ssl.OpenSslSessionContext v1;
java.lang.String v3;
io.netty.handler.ssl.OpenSslSessionId v2;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.OpenSslSessionContext sessionContext>;
v2 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine$DefaultOpenSslSession: io.netty.handler.ssl.OpenSslSessionId id>;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.handler.ssl.OpenSslSessionContext,io.netty.handler.ssl.OpenSslSessionId)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("DefaultOpenSslSession{sessionContext=\u0001, id=\u0001}");
return v3;
}
}