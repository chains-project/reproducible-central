final class io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$OpenSslSniHostnameMatcher extends java.lang.Object implements io.netty.internal.tcnative.SniHostNameMatcher
{
private final io.netty.handler.ssl.OpenSslEngineMap engineMap;
void <init>(io.netty.handler.ssl.OpenSslEngineMap)
{
io.netty.handler.ssl.OpenSslEngineMap v1;
io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$OpenSslSniHostnameMatcher v0;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$OpenSslSniHostnameMatcher;
v1 := @parameter0: io.netty.handler.ssl.OpenSslEngineMap;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$OpenSslSniHostnameMatcher: io.netty.handler.ssl.OpenSslEngineMap engineMap> = v1;
return;
}
public boolean match(long, java.lang.String)
{
byte[] v6;
io.netty.handler.ssl.OpenSslEngineMap v3;
long v1;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v4;
java.nio.charset.Charset v5;
java.lang.Long v9;
io.netty.util.internal.logging.InternalLogger v8;
java.lang.String v2;
io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$OpenSslSniHostnameMatcher v0;
boolean v7;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$OpenSslSniHostnameMatcher;
v1 := @parameter0: long;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$OpenSslSniHostnameMatcher: io.netty.handler.ssl.OpenSslEngineMap engineMap>;
v4 = interfaceinvoke v3.<io.netty.handler.ssl.OpenSslEngineMap: io.netty.handler.ssl.ReferenceCountedOpenSslEngine get(long)>(v1);
if v4 == null goto label1;
v5 = <io.netty.util.CharsetUtil: java.nio.charset.Charset UTF_8>;
v6 = virtualinvoke v2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v5);
v7 = virtualinvoke v4.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: boolean checkSniHostnameMatch(byte[])>(v6);
return v7;
label1:
v8 = <io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: io.netty.util.internal.logging.InternalLogger logger>;
v9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v1);
interfaceinvoke v8.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object)>("No ReferenceCountedOpenSslEngine found for SSL pointer: {}", v9);
return 0;
}
}