public class io.netty.handler.ssl.SniHandler extends io.netty.handler.ssl.AbstractSniHandler
{
private static final io.netty.handler.ssl.SniHandler$Selection EMPTY_SELECTION;
protected final io.netty.util.AsyncMapping mapping;
private volatile io.netty.handler.ssl.SniHandler$Selection selection;
public void <init>(io.netty.util.Mapping)
{
io.netty.handler.ssl.SniHandler v0;
io.netty.handler.ssl.SniHandler$AsyncMappingAdapter v2;
io.netty.util.Mapping v1;
v0 := @this: io.netty.handler.ssl.SniHandler;
v1 := @parameter0: io.netty.util.Mapping;
v2 = new io.netty.handler.ssl.SniHandler$AsyncMappingAdapter;
specialinvoke v2.<io.netty.handler.ssl.SniHandler$AsyncMappingAdapter: void <init>(io.netty.util.Mapping)>(v1);
specialinvoke v0.<io.netty.handler.ssl.SniHandler: void <init>(io.netty.util.AsyncMapping)>(v2);
return;
}
public void <init>(io.netty.util.Mapping, long)
{
io.netty.handler.ssl.SniHandler v0;
long v2;
io.netty.handler.ssl.SniHandler$AsyncMappingAdapter v3;
io.netty.util.Mapping v1;
v0 := @this: io.netty.handler.ssl.SniHandler;
v1 := @parameter0: io.netty.util.Mapping;
v2 := @parameter1: long;
v3 = new io.netty.handler.ssl.SniHandler$AsyncMappingAdapter;
specialinvoke v3.<io.netty.handler.ssl.SniHandler$AsyncMappingAdapter: void <init>(io.netty.util.Mapping)>(v1);
specialinvoke v0.<io.netty.handler.ssl.SniHandler: void <init>(io.netty.util.AsyncMapping,long)>(v3, v2);
return;
}
public void <init>(io.netty.util.DomainNameMapping)
{
io.netty.handler.ssl.SniHandler v0;
io.netty.util.DomainNameMapping v1;
v0 := @this: io.netty.handler.ssl.SniHandler;
v1 := @parameter0: io.netty.util.DomainNameMapping;
specialinvoke v0.<io.netty.handler.ssl.SniHandler: void <init>(io.netty.util.Mapping)>(v1);
return;
}
public void <init>(io.netty.util.AsyncMapping)
{
io.netty.handler.ssl.SniHandler v0;
io.netty.util.AsyncMapping v1;
v0 := @this: io.netty.handler.ssl.SniHandler;
v1 := @parameter0: io.netty.util.AsyncMapping;
specialinvoke v0.<io.netty.handler.ssl.SniHandler: void <init>(io.netty.util.AsyncMapping,long)>(v1, 0L);
return;
}
public void <init>(io.netty.util.AsyncMapping, long)
{
io.netty.handler.ssl.SniHandler v0;
io.netty.handler.ssl.SniHandler$Selection v3;
java.lang.Object v4;
long v2;
io.netty.util.AsyncMapping v1;
v0 := @this: io.netty.handler.ssl.SniHandler;
v1 := @parameter0: io.netty.util.AsyncMapping;
v2 := @parameter1: long;
specialinvoke v0.<io.netty.handler.ssl.AbstractSniHandler: void <init>(long)>(v2);
v3 = <io.netty.handler.ssl.SniHandler: io.netty.handler.ssl.SniHandler$Selection EMPTY_SELECTION>;
v0.<io.netty.handler.ssl.SniHandler: io.netty.handler.ssl.SniHandler$Selection selection> = v3;
v4 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "mapping");
v0.<io.netty.handler.ssl.SniHandler: io.netty.util.AsyncMapping mapping> = v4;
return;
}
public java.lang.String hostname()
{
io.netty.handler.ssl.SniHandler$Selection v1;
io.netty.handler.ssl.SniHandler v0;
java.lang.String v2;
v0 := @this: io.netty.handler.ssl.SniHandler;
v1 = v0.<io.netty.handler.ssl.SniHandler: io.netty.handler.ssl.SniHandler$Selection selection>;
v2 = v1.<io.netty.handler.ssl.SniHandler$Selection: java.lang.String hostname>;
return v2;
}
public io.netty.handler.ssl.SslContext sslContext()
{
io.netty.handler.ssl.SniHandler$Selection v1;
io.netty.handler.ssl.SniHandler v0;
io.netty.handler.ssl.SslContext v2;
v0 := @this: io.netty.handler.ssl.SniHandler;
v1 = v0.<io.netty.handler.ssl.SniHandler: io.netty.handler.ssl.SniHandler$Selection selection>;
v2 = v1.<io.netty.handler.ssl.SniHandler$Selection: io.netty.handler.ssl.SslContext context>;
return v2;
}
protected io.netty.util.concurrent.Future lookup(io.netty.channel.ChannelHandlerContext, java.lang.String) throws java.lang.Exception
{
io.netty.util.concurrent.EventExecutor v4;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.ssl.SniHandler v0;
io.netty.util.concurrent.Promise v5;
java.lang.String v2;
io.netty.util.AsyncMapping v3;
io.netty.util.concurrent.Future v6;
v0 := @this: io.netty.handler.ssl.SniHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.netty.handler.ssl.SniHandler: io.netty.util.AsyncMapping mapping>;
v4 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v5 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Promise newPromise()>();
v6 = interfaceinvoke v3.<io.netty.util.AsyncMapping: io.netty.util.concurrent.Future map(java.lang.Object,io.netty.util.concurrent.Promise)>(v2, v5);
return v6;
}
protected final void onLookupComplete(io.netty.channel.ChannelHandlerContext, java.lang.String, io.netty.util.concurrent.Future) throws java.lang.Exception
{
java.lang.Throwable v11, v5;
io.netty.handler.codec.DecoderException v7;
io.netty.handler.ssl.SniHandler v0;
io.netty.handler.ssl.SniHandler$Selection v10, v12;
io.netty.channel.ChannelHandlerContext v1;
java.lang.Object v9;
java.lang.String v2, v8;
io.netty.util.concurrent.Future v3;
boolean v4, v6;
v0 := @this: io.netty.handler.ssl.SniHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.netty.util.concurrent.Future;
v4 = interfaceinvoke v3.<io.netty.util.concurrent.Future: boolean isSuccess()>();
if v4 != 0 goto label2;
v5 = interfaceinvoke v3.<io.netty.util.concurrent.Future: java.lang.Throwable cause()>();
v6 = v5 instanceof java.lang.Error;
if v6 == 0 goto label1;
throw v5;
label1:
v7 = new io.netty.handler.codec.DecoderException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("failed to get the SslContext for \u0001");
specialinvoke v7.<io.netty.handler.codec.DecoderException: void <init>(java.lang.String,java.lang.Throwable)>(v8, v5);
throw v7;
label2:
v9 = interfaceinvoke v3.<io.netty.util.concurrent.Future: java.lang.Object getNow()>();
v10 = new io.netty.handler.ssl.SniHandler$Selection;
specialinvoke v10.<io.netty.handler.ssl.SniHandler$Selection: void <init>(io.netty.handler.ssl.SslContext,java.lang.String)>(v9, v2);
v0.<io.netty.handler.ssl.SniHandler: io.netty.handler.ssl.SniHandler$Selection selection> = v10;
label3:
virtualinvoke v0.<io.netty.handler.ssl.SniHandler: void replaceHandler(io.netty.channel.ChannelHandlerContext,java.lang.String,io.netty.handler.ssl.SslContext)>(v1, v2, v9);
label4:
goto label6;
label5:
v11 := @caughtexception;
v12 = <io.netty.handler.ssl.SniHandler: io.netty.handler.ssl.SniHandler$Selection EMPTY_SELECTION>;
v0.<io.netty.handler.ssl.SniHandler: io.netty.handler.ssl.SniHandler$Selection selection> = v12;
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v11);
label6:
return;
catch java.lang.Throwable from label3 to label4 with label5;
}
protected void replaceHandler(io.netty.channel.ChannelHandlerContext, java.lang.String, io.netty.handler.ssl.SslContext) throws java.lang.Exception
{
java.lang.Throwable v9;
io.netty.handler.ssl.SniHandler v0;
io.netty.handler.ssl.SslContext v3;
io.netty.buffer.ByteBufAllocator v5;
io.netty.channel.ChannelPipeline v6;
javax.net.ssl.SSLEngine v10;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.ssl.SslHandler v4;
java.lang.Class v7;
java.lang.String v2, v8;
v0 := @this: io.netty.handler.ssl.SniHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.netty.handler.ssl.SslContext;
v4 = null;
label1:
v5 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.buffer.ByteBufAllocator alloc()>();
v4 = virtualinvoke v0.<io.netty.handler.ssl.SniHandler: io.netty.handler.ssl.SslHandler newSslHandler(io.netty.handler.ssl.SslContext,io.netty.buffer.ByteBufAllocator)>(v3, v5);
v6 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
v7 = class "Lio/netty/handler/ssl/SslHandler;";
v8 = virtualinvoke v7.<java.lang.Class: java.lang.String getName()>();
interfaceinvoke v6.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline replace(io.netty.channel.ChannelHandler,java.lang.String,io.netty.channel.ChannelHandler)>(v0, v8, v4);
label2:
goto label5;
label3:
v9 := @caughtexception;
if v4 == null goto label4;
v10 = virtualinvoke v4.<io.netty.handler.ssl.SslHandler: javax.net.ssl.SSLEngine engine()>();
staticinvoke <io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>(v10);
label4:
throw v9;
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected io.netty.handler.ssl.SslHandler newSslHandler(io.netty.handler.ssl.SslContext, io.netty.buffer.ByteBufAllocator)
{
io.netty.handler.ssl.SniHandler v0;
io.netty.handler.ssl.SslContext v1;
io.netty.handler.ssl.SslHandler v3;
io.netty.buffer.ByteBufAllocator v2;
long v4;
v0 := @this: io.netty.handler.ssl.SniHandler;
v1 := @parameter0: io.netty.handler.ssl.SslContext;
v2 := @parameter1: io.netty.buffer.ByteBufAllocator;
v3 = virtualinvoke v1.<io.netty.handler.ssl.SslContext: io.netty.handler.ssl.SslHandler newHandler(io.netty.buffer.ByteBufAllocator)>(v2);
v4 = v0.<io.netty.handler.ssl.SniHandler: long handshakeTimeoutMillis>;
virtualinvoke v3.<io.netty.handler.ssl.SslHandler: void setHandshakeTimeoutMillis(long)>(v4);
return v3;
}
static void <clinit>()
{
io.netty.handler.ssl.SniHandler$Selection v0;
v0 = new io.netty.handler.ssl.SniHandler$Selection;
specialinvoke v0.<io.netty.handler.ssl.SniHandler$Selection: void <init>(io.netty.handler.ssl.SslContext,java.lang.String)>(null, null);
<io.netty.handler.ssl.SniHandler: io.netty.handler.ssl.SniHandler$Selection EMPTY_SELECTION> = v0;
return;
}
}