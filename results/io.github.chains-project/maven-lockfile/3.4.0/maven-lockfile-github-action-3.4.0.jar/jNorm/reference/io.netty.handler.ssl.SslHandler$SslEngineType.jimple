abstract enum class io.netty.handler.ssl.SslHandler$SslEngineType extends java.lang.Enum
{
public static final enum io.netty.handler.ssl.SslHandler$SslEngineType TCNATIVE;
public static final enum io.netty.handler.ssl.SslHandler$SslEngineType CONSCRYPT;
public static final enum io.netty.handler.ssl.SslHandler$SslEngineType JDK;
final boolean wantsDirectBuffer;
final io.netty.handler.codec.ByteToMessageDecoder$Cumulator cumulator;
private static final io.netty.handler.ssl.SslHandler$SslEngineType[] $VALUES;
public static io.netty.handler.ssl.SslHandler$SslEngineType[] values()
{
java.lang.Object v1;
io.netty.handler.ssl.SslHandler$SslEngineType[] v0;
v0 = <io.netty.handler.ssl.SslHandler$SslEngineType: io.netty.handler.ssl.SslHandler$SslEngineType[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static io.netty.handler.ssl.SslHandler$SslEngineType valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lio/netty/handler/ssl/SslHandler$SslEngineType;", v0);
return v1;
}
static io.netty.handler.ssl.SslHandler$SslEngineType forEngine(javax.net.ssl.SSLEngine)
{
io.netty.handler.ssl.SslHandler$SslEngineType v2;
boolean v1, v3;
javax.net.ssl.SSLEngine v0;
v0 := @parameter0: javax.net.ssl.SSLEngine;
v1 = v0 instanceof io.netty.handler.ssl.ReferenceCountedOpenSslEngine;
if v1 == 0 goto label1;
v2 = <io.netty.handler.ssl.SslHandler$SslEngineType: io.netty.handler.ssl.SslHandler$SslEngineType TCNATIVE>;
goto label3;
label1:
v3 = v0 instanceof io.netty.handler.ssl.ConscryptAlpnSslEngine;
if v3 == 0 goto label2;
v2 = <io.netty.handler.ssl.SslHandler$SslEngineType: io.netty.handler.ssl.SslHandler$SslEngineType CONSCRYPT>;
goto label3;
label2:
v2 = <io.netty.handler.ssl.SslHandler$SslEngineType: io.netty.handler.ssl.SslHandler$SslEngineType JDK>;
label3:
return v2;
}
private void <init>(java.lang.String, int, boolean, io.netty.handler.codec.ByteToMessageDecoder$Cumulator)
{
io.netty.handler.codec.ByteToMessageDecoder$Cumulator v4;
int v2;
io.netty.handler.ssl.SslHandler$SslEngineType v0;
java.lang.String v1;
boolean v3;
v0 := @this: io.netty.handler.ssl.SslHandler$SslEngineType;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: boolean;
v4 := @parameter3: io.netty.handler.codec.ByteToMessageDecoder$Cumulator;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
v0.<io.netty.handler.ssl.SslHandler$SslEngineType: boolean wantsDirectBuffer> = v3;
v0.<io.netty.handler.ssl.SslHandler$SslEngineType: io.netty.handler.codec.ByteToMessageDecoder$Cumulator cumulator> = v4;
return;
}
abstract javax.net.ssl.SSLEngineResult unwrap(io.netty.handler.ssl.SslHandler, io.netty.buffer.ByteBuf, int, io.netty.buffer.ByteBuf) throws javax.net.ssl.SSLException;
abstract int calculatePendingData(io.netty.handler.ssl.SslHandler, int);
abstract boolean jdkCompatibilityMode(javax.net.ssl.SSLEngine);
abstract io.netty.buffer.ByteBuf allocateWrapBuffer(io.netty.handler.ssl.SslHandler, io.netty.buffer.ByteBufAllocator, int, int);
private static io.netty.handler.ssl.SslHandler$SslEngineType[] $values()
{
io.netty.handler.ssl.SslHandler$SslEngineType v1, v2, v3;
io.netty.handler.ssl.SslHandler$SslEngineType[] v0;
v0 = newarray (io.netty.handler.ssl.SslHandler$SslEngineType)[3];
v1 = <io.netty.handler.ssl.SslHandler$SslEngineType: io.netty.handler.ssl.SslHandler$SslEngineType TCNATIVE>;
v0[0] = v1;
v2 = <io.netty.handler.ssl.SslHandler$SslEngineType: io.netty.handler.ssl.SslHandler$SslEngineType CONSCRYPT>;
v0[1] = v2;
v3 = <io.netty.handler.ssl.SslHandler$SslEngineType: io.netty.handler.ssl.SslHandler$SslEngineType JDK>;
v0[2] = v3;
return v0;
}
static void <clinit>()
{
io.netty.handler.codec.ByteToMessageDecoder$Cumulator v1, v3, v5;
io.netty.handler.ssl.SslHandler$SslEngineType$1 v0;
io.netty.handler.ssl.SslHandler$SslEngineType$2 v2;
io.netty.handler.ssl.SslHandler$SslEngineType$3 v4;
io.netty.handler.ssl.SslHandler$SslEngineType[] v6;
v0 = new io.netty.handler.ssl.SslHandler$SslEngineType$1;
v1 = <io.netty.handler.codec.ByteToMessageDecoder: io.netty.handler.codec.ByteToMessageDecoder$Cumulator COMPOSITE_CUMULATOR>;
specialinvoke v0.<io.netty.handler.ssl.SslHandler$SslEngineType$1: void <init>(java.lang.String,int,boolean,io.netty.handler.codec.ByteToMessageDecoder$Cumulator)>("TCNATIVE", 0, 1, v1);
<io.netty.handler.ssl.SslHandler$SslEngineType: io.netty.handler.ssl.SslHandler$SslEngineType TCNATIVE> = v0;
v2 = new io.netty.handler.ssl.SslHandler$SslEngineType$2;
v3 = <io.netty.handler.codec.ByteToMessageDecoder: io.netty.handler.codec.ByteToMessageDecoder$Cumulator COMPOSITE_CUMULATOR>;
specialinvoke v2.<io.netty.handler.ssl.SslHandler$SslEngineType$2: void <init>(java.lang.String,int,boolean,io.netty.handler.codec.ByteToMessageDecoder$Cumulator)>("CONSCRYPT", 1, 1, v3);
<io.netty.handler.ssl.SslHandler$SslEngineType: io.netty.handler.ssl.SslHandler$SslEngineType CONSCRYPT> = v2;
v4 = new io.netty.handler.ssl.SslHandler$SslEngineType$3;
v5 = <io.netty.handler.codec.ByteToMessageDecoder: io.netty.handler.codec.ByteToMessageDecoder$Cumulator MERGE_CUMULATOR>;
specialinvoke v4.<io.netty.handler.ssl.SslHandler$SslEngineType$3: void <init>(java.lang.String,int,boolean,io.netty.handler.codec.ByteToMessageDecoder$Cumulator)>("JDK", 2, 0, v5);
<io.netty.handler.ssl.SslHandler$SslEngineType: io.netty.handler.ssl.SslHandler$SslEngineType JDK> = v4;
v6 = staticinvoke <io.netty.handler.ssl.SslHandler$SslEngineType: io.netty.handler.ssl.SslHandler$SslEngineType[] $values()>();
<io.netty.handler.ssl.SslHandler$SslEngineType: io.netty.handler.ssl.SslHandler$SslEngineType[] $VALUES> = v6;
return;
}
}