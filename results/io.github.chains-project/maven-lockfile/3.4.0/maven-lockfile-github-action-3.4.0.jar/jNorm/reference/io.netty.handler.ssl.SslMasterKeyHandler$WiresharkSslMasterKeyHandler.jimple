final class io.netty.handler.ssl.SslMasterKeyHandler$WiresharkSslMasterKeyHandler extends io.netty.handler.ssl.SslMasterKeyHandler
{
private static final io.netty.util.internal.logging.InternalLogger wireshark_logger;
private void <init>()
{
io.netty.handler.ssl.SslMasterKeyHandler$WiresharkSslMasterKeyHandler v0;
v0 := @this: io.netty.handler.ssl.SslMasterKeyHandler$WiresharkSslMasterKeyHandler;
specialinvoke v0.<io.netty.handler.ssl.SslMasterKeyHandler: void <init>()>();
return;
}
protected void accept(javax.crypto.SecretKey, javax.net.ssl.SSLSession)
{
byte[] v10, v3, v6;
java.lang.IllegalArgumentException v5;
javax.net.ssl.SSLSession v2;
io.netty.util.internal.logging.InternalLogger v7;
int v4;
java.lang.String v11, v12, v8, v9;
javax.crypto.SecretKey v1;
io.netty.handler.ssl.SslMasterKeyHandler$WiresharkSslMasterKeyHandler v0;
v0 := @this: io.netty.handler.ssl.SslMasterKeyHandler$WiresharkSslMasterKeyHandler;
v1 := @parameter0: javax.crypto.SecretKey;
v2 := @parameter1: javax.net.ssl.SSLSession;
v3 = interfaceinvoke v1.<javax.crypto.SecretKey: byte[] getEncoded()>();
v4 = lengthof v3;
if v4 == 48 goto label1;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("An invalid length master key was provided.");
throw v5;
label1:
v6 = interfaceinvoke v2.<javax.net.ssl.SSLSession: byte[] getId()>();
v7 = <io.netty.handler.ssl.SslMasterKeyHandler$WiresharkSslMasterKeyHandler: io.netty.util.internal.logging.InternalLogger wireshark_logger>;
v8 = staticinvoke <io.netty.buffer.ByteBufUtil: java.lang.String hexDump(byte[])>(v6);
v9 = virtualinvoke v8.<java.lang.String: java.lang.String toLowerCase()>();
v10 = interfaceinvoke v1.<javax.crypto.SecretKey: byte[] getEncoded()>();
v11 = staticinvoke <io.netty.buffer.ByteBufUtil: java.lang.String hexDump(byte[])>(v10);
v12 = virtualinvoke v11.<java.lang.String: java.lang.String toLowerCase()>();
interfaceinvoke v7.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("RSA Session-ID:{} Master-Key:{}", v9, v12);
return;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.String)>("io.netty.wireshark");
<io.netty.handler.ssl.SslMasterKeyHandler$WiresharkSslMasterKeyHandler: io.netty.util.internal.logging.InternalLogger wireshark_logger> = v0;
return;
}
}