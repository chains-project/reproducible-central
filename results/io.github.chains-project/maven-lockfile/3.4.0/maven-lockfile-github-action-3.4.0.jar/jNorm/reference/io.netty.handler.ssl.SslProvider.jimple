public final enum class io.netty.handler.ssl.SslProvider extends java.lang.Enum
{
public static final enum io.netty.handler.ssl.SslProvider JDK;
public static final enum io.netty.handler.ssl.SslProvider OPENSSL;
public static final enum io.netty.handler.ssl.SslProvider OPENSSL_REFCNT;
private static final io.netty.handler.ssl.SslProvider[] $VALUES;
public static io.netty.handler.ssl.SslProvider[] values()
{
io.netty.handler.ssl.SslProvider[] v0;
java.lang.Object v1;
v0 = <io.netty.handler.ssl.SslProvider: io.netty.handler.ssl.SslProvider[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static io.netty.handler.ssl.SslProvider valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lio/netty/handler/ssl/SslProvider;", v0);
return v1;
}
private void <init>(java.lang.String, int)
{
int v2;
io.netty.handler.ssl.SslProvider v0;
java.lang.String v1;
v0 := @this: io.netty.handler.ssl.SslProvider;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
return;
}
public static boolean isAlpnSupported(io.netty.handler.ssl.SslProvider)
{
java.lang.Error v6;
io.netty.handler.ssl.SslProvider v0;
int[] v1;
int v2, v3;
java.lang.String v7;
boolean v4, v5;
v0 := @parameter0: io.netty.handler.ssl.SslProvider;
v1 = <io.netty.handler.ssl.SslProvider$1: int[] $SwitchMap$io$netty$handler$ssl$SslProvider>;
v2 = virtualinvoke v0.<io.netty.handler.ssl.SslProvider: int ordinal()>();
v3 = v1[v2];
tableswitch(v3)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label2;
default: goto label3;
};
label1:
v4 = staticinvoke <io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: boolean isAlpnSupported()>();
return v4;
label2:
v5 = staticinvoke <io.netty.handler.ssl.OpenSsl: boolean isAlpnSupported()>();
return v5;
label3:
v6 = new java.lang.Error;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.handler.ssl.SslProvider)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unknown SslProvider: \u0001");
specialinvoke v6.<java.lang.Error: void <init>(java.lang.String)>(v7);
throw v6;
}
public static boolean isTlsv13Supported(io.netty.handler.ssl.SslProvider)
{
io.netty.handler.ssl.SslProvider v0;
boolean v1;
v0 := @parameter0: io.netty.handler.ssl.SslProvider;
v1 = staticinvoke <io.netty.handler.ssl.SslProvider: boolean isTlsv13Supported(io.netty.handler.ssl.SslProvider,java.security.Provider)>(v0, null);
return v1;
}
public static boolean isTlsv13Supported(io.netty.handler.ssl.SslProvider, java.security.Provider)
{
java.lang.Error v7;
java.security.Provider v1;
io.netty.handler.ssl.SslProvider v0;
int[] v2;
int v3, v4;
java.lang.String v8;
boolean v5, v6;
v0 := @parameter0: io.netty.handler.ssl.SslProvider;
v1 := @parameter1: java.security.Provider;
v2 = <io.netty.handler.ssl.SslProvider$1: int[] $SwitchMap$io$netty$handler$ssl$SslProvider>;
v3 = virtualinvoke v0.<io.netty.handler.ssl.SslProvider: int ordinal()>();
v4 = v2[v3];
tableswitch(v4)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label2;
default: goto label3;
};
label1:
v5 = staticinvoke <io.netty.handler.ssl.SslUtils: boolean isTLSv13SupportedByJDK(java.security.Provider)>(v1);
return v5;
label2:
v6 = staticinvoke <io.netty.handler.ssl.OpenSsl: boolean isTlsv13Supported()>();
return v6;
label3:
v7 = new java.lang.Error;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.handler.ssl.SslProvider)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unknown SslProvider: \u0001");
specialinvoke v7.<java.lang.Error: void <init>(java.lang.String)>(v8);
throw v7;
}
public static boolean isOptionSupported(io.netty.handler.ssl.SslProvider, io.netty.handler.ssl.SslContextOption)
{
io.netty.handler.ssl.SslContextOption v1;
java.lang.Error v6;
io.netty.handler.ssl.SslProvider v0;
int[] v2;
int v3, v4;
java.lang.String v7;
boolean v5;
v0 := @parameter0: io.netty.handler.ssl.SslProvider;
v1 := @parameter1: io.netty.handler.ssl.SslContextOption;
v2 = <io.netty.handler.ssl.SslProvider$1: int[] $SwitchMap$io$netty$handler$ssl$SslProvider>;
v3 = virtualinvoke v0.<io.netty.handler.ssl.SslProvider: int ordinal()>();
v4 = v2[v3];
tableswitch(v4)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label2;
default: goto label3;
};
label1:
return 0;
label2:
v5 = staticinvoke <io.netty.handler.ssl.OpenSsl: boolean isOptionSupported(io.netty.handler.ssl.SslContextOption)>(v1);
return v5;
label3:
v6 = new java.lang.Error;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.handler.ssl.SslProvider)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unknown SslProvider: \u0001");
specialinvoke v6.<java.lang.Error: void <init>(java.lang.String)>(v7);
throw v6;
}
static boolean isTlsv13EnabledByDefault(io.netty.handler.ssl.SslProvider, java.security.Provider)
{
java.lang.Error v7;
java.security.Provider v1;
io.netty.handler.ssl.SslProvider v0;
int[] v2;
int v3, v4;
java.lang.String v8;
boolean v5, v6;
v0 := @parameter0: io.netty.handler.ssl.SslProvider;
v1 := @parameter1: java.security.Provider;
v2 = <io.netty.handler.ssl.SslProvider$1: int[] $SwitchMap$io$netty$handler$ssl$SslProvider>;
v3 = virtualinvoke v0.<io.netty.handler.ssl.SslProvider: int ordinal()>();
v4 = v2[v3];
tableswitch(v4)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label2;
default: goto label3;
};
label1:
v5 = staticinvoke <io.netty.handler.ssl.SslUtils: boolean isTLSv13EnabledByJDK(java.security.Provider)>(v1);
return v5;
label2:
v6 = staticinvoke <io.netty.handler.ssl.OpenSsl: boolean isTlsv13Supported()>();
return v6;
label3:
v7 = new java.lang.Error;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.handler.ssl.SslProvider)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unknown SslProvider: \u0001");
specialinvoke v7.<java.lang.Error: void <init>(java.lang.String)>(v8);
throw v7;
}
private static io.netty.handler.ssl.SslProvider[] $values()
{
io.netty.handler.ssl.SslProvider v1, v2, v3;
io.netty.handler.ssl.SslProvider[] v0;
v0 = newarray (io.netty.handler.ssl.SslProvider)[3];
v1 = <io.netty.handler.ssl.SslProvider: io.netty.handler.ssl.SslProvider JDK>;
v0[0] = v1;
v2 = <io.netty.handler.ssl.SslProvider: io.netty.handler.ssl.SslProvider OPENSSL>;
v0[1] = v2;
v3 = <io.netty.handler.ssl.SslProvider: io.netty.handler.ssl.SslProvider OPENSSL_REFCNT>;
v0[2] = v3;
return v0;
}
static void <clinit>()
{
io.netty.handler.ssl.SslProvider v0, v1, v2;
io.netty.handler.ssl.SslProvider[] v3;
v0 = new io.netty.handler.ssl.SslProvider;
specialinvoke v0.<io.netty.handler.ssl.SslProvider: void <init>(java.lang.String,int)>("JDK", 0);
<io.netty.handler.ssl.SslProvider: io.netty.handler.ssl.SslProvider JDK> = v0;
v1 = new io.netty.handler.ssl.SslProvider;
specialinvoke v1.<io.netty.handler.ssl.SslProvider: void <init>(java.lang.String,int)>("OPENSSL", 1);
<io.netty.handler.ssl.SslProvider: io.netty.handler.ssl.SslProvider OPENSSL> = v1;
v2 = new io.netty.handler.ssl.SslProvider;
specialinvoke v2.<io.netty.handler.ssl.SslProvider: void <init>(java.lang.String,int)>("OPENSSL_REFCNT", 2);
<io.netty.handler.ssl.SslProvider: io.netty.handler.ssl.SslProvider OPENSSL_REFCNT> = v2;
v3 = staticinvoke <io.netty.handler.ssl.SslProvider: io.netty.handler.ssl.SslProvider[] $values()>();
<io.netty.handler.ssl.SslProvider: io.netty.handler.ssl.SslProvider[] $VALUES> = v3;
return;
}
}