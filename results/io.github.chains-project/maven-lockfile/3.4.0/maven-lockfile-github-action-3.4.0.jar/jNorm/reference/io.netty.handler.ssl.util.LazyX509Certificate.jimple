public final class io.netty.handler.ssl.util.LazyX509Certificate extends java.security.cert.X509Certificate
{
static final java.security.cert.CertificateFactory X509_CERT_FACTORY;
private final byte[] bytes;
private java.security.cert.X509Certificate wrapped;
public void <init>(byte[])
{
byte[] v1;
java.lang.Object v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 := @parameter0: byte[];
specialinvoke v0.<java.security.cert.X509Certificate: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "bytes");
v0.<io.netty.handler.ssl.util.LazyX509Certificate: byte[] bytes> = v2;
return;
}
public void checkValidity() throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException
{
java.security.cert.X509Certificate v1;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
virtualinvoke v1.<java.security.cert.X509Certificate: void checkValidity()>();
return;
}
public void checkValidity(java.util.Date) throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException
{
java.security.cert.X509Certificate v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
java.util.Date v1;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 := @parameter0: java.util.Date;
v2 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
virtualinvoke v2.<java.security.cert.X509Certificate: void checkValidity(java.util.Date)>(v1);
return;
}
public javax.security.auth.x500.X500Principal getIssuerX500Principal()
{
java.security.cert.X509Certificate v1;
javax.security.auth.x500.X500Principal v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();
return v2;
}
public javax.security.auth.x500.X500Principal getSubjectX500Principal()
{
java.security.cert.X509Certificate v1;
javax.security.auth.x500.X500Principal v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();
return v2;
}
public java.util.List getExtendedKeyUsage() throws java.security.cert.CertificateParsingException
{
java.security.cert.X509Certificate v1;
java.util.List v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: java.util.List getExtendedKeyUsage()>();
return v2;
}
public java.util.Collection getSubjectAlternativeNames() throws java.security.cert.CertificateParsingException
{
java.security.cert.X509Certificate v1;
io.netty.handler.ssl.util.LazyX509Certificate v0;
java.util.Collection v2;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: java.util.Collection getSubjectAlternativeNames()>();
return v2;
}
public java.util.Collection getIssuerAlternativeNames() throws java.security.cert.CertificateParsingException
{
java.security.cert.X509Certificate v1;
io.netty.handler.ssl.util.LazyX509Certificate v0;
java.util.Collection v2;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: java.util.Collection getSubjectAlternativeNames()>();
return v2;
}
public void verify(java.security.PublicKey, java.security.Provider) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.SignatureException
{
java.security.cert.X509Certificate v3;
java.security.PublicKey v1;
io.netty.handler.ssl.util.LazyX509Certificate v0;
java.security.Provider v2;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 := @parameter0: java.security.PublicKey;
v2 := @parameter1: java.security.Provider;
v3 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
virtualinvoke v3.<java.security.cert.X509Certificate: void verify(java.security.PublicKey,java.security.Provider)>(v1, v2);
return;
}
public int getVersion()
{
int v2;
java.security.cert.X509Certificate v1;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: int getVersion()>();
return v2;
}
public java.math.BigInteger getSerialNumber()
{
java.security.cert.X509Certificate v1;
java.math.BigInteger v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>();
return v2;
}
public java.security.Principal getIssuerDN()
{
java.security.cert.X509Certificate v1;
java.security.Principal v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>();
return v2;
}
public java.security.Principal getSubjectDN()
{
java.security.cert.X509Certificate v1;
java.security.Principal v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>();
return v2;
}
public java.util.Date getNotBefore()
{
java.security.cert.X509Certificate v1;
io.netty.handler.ssl.util.LazyX509Certificate v0;
java.util.Date v2;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: java.util.Date getNotBefore()>();
return v2;
}
public java.util.Date getNotAfter()
{
java.security.cert.X509Certificate v1;
io.netty.handler.ssl.util.LazyX509Certificate v0;
java.util.Date v2;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: java.util.Date getNotAfter()>();
return v2;
}
public byte[] getTBSCertificate() throws java.security.cert.CertificateEncodingException
{
java.security.cert.X509Certificate v1;
byte[] v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: byte[] getTBSCertificate()>();
return v2;
}
public byte[] getSignature()
{
java.security.cert.X509Certificate v1;
byte[] v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: byte[] getSignature()>();
return v2;
}
public java.lang.String getSigAlgName()
{
java.security.cert.X509Certificate v1;
java.lang.String v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: java.lang.String getSigAlgName()>();
return v2;
}
public java.lang.String getSigAlgOID()
{
java.security.cert.X509Certificate v1;
java.lang.String v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: java.lang.String getSigAlgOID()>();
return v2;
}
public byte[] getSigAlgParams()
{
java.security.cert.X509Certificate v1;
byte[] v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: byte[] getSigAlgParams()>();
return v2;
}
public boolean[] getIssuerUniqueID()
{
boolean[] v2;
java.security.cert.X509Certificate v1;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: boolean[] getIssuerUniqueID()>();
return v2;
}
public boolean[] getSubjectUniqueID()
{
boolean[] v2;
java.security.cert.X509Certificate v1;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: boolean[] getSubjectUniqueID()>();
return v2;
}
public boolean[] getKeyUsage()
{
boolean[] v2;
java.security.cert.X509Certificate v1;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: boolean[] getKeyUsage()>();
return v2;
}
public int getBasicConstraints()
{
int v2;
java.security.cert.X509Certificate v1;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: int getBasicConstraints()>();
return v2;
}
public byte[] getEncoded()
{
byte[] v1;
java.lang.Object v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = v0.<io.netty.handler.ssl.util.LazyX509Certificate: byte[] bytes>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Object clone()>();
return v2;
}
public void verify(java.security.PublicKey) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
{
java.security.cert.X509Certificate v2;
java.security.PublicKey v1;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 := @parameter0: java.security.PublicKey;
v2 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
virtualinvoke v2.<java.security.cert.X509Certificate: void verify(java.security.PublicKey)>(v1);
return;
}
public void verify(java.security.PublicKey, java.lang.String) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
{
java.security.cert.X509Certificate v3;
java.security.PublicKey v1;
java.lang.String v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 := @parameter0: java.security.PublicKey;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
virtualinvoke v3.<java.security.cert.X509Certificate: void verify(java.security.PublicKey,java.lang.String)>(v1, v2);
return;
}
public java.lang.String toString()
{
java.security.cert.X509Certificate v1;
java.lang.String v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: java.lang.String toString()>();
return v2;
}
public java.security.PublicKey getPublicKey()
{
java.security.cert.X509Certificate v1;
java.security.PublicKey v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();
return v2;
}
public boolean hasUnsupportedCriticalExtension()
{
java.security.cert.X509Certificate v1;
io.netty.handler.ssl.util.LazyX509Certificate v0;
boolean v2;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: boolean hasUnsupportedCriticalExtension()>();
return v2;
}
public java.util.Set getCriticalExtensionOIDs()
{
java.security.cert.X509Certificate v1;
java.util.Set v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: java.util.Set getCriticalExtensionOIDs()>();
return v2;
}
public java.util.Set getNonCriticalExtensionOIDs()
{
java.security.cert.X509Certificate v1;
java.util.Set v2;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v2 = virtualinvoke v1.<java.security.cert.X509Certificate: java.util.Set getNonCriticalExtensionOIDs()>();
return v2;
}
public byte[] getExtensionValue(java.lang.String)
{
java.security.cert.X509Certificate v2;
byte[] v3;
java.lang.String v1;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate unwrap()>();
v3 = virtualinvoke v2.<java.security.cert.X509Certificate: byte[] getExtensionValue(java.lang.String)>(v1);
return v3;
}
private java.security.cert.X509Certificate unwrap()
{
java.security.cert.X509Certificate v1;
byte[] v4;
java.lang.IllegalStateException v7;
java.security.cert.CertificateFactory v2;
java.security.cert.CertificateException v6;
java.security.cert.Certificate v5;
java.io.ByteArrayInputStream v3;
io.netty.handler.ssl.util.LazyX509Certificate v0;
v0 := @this: io.netty.handler.ssl.util.LazyX509Certificate;
v1 = v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate wrapped>;
if v1 != null goto label4;
label1:
v2 = <io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.CertificateFactory X509_CERT_FACTORY>;
v3 = new java.io.ByteArrayInputStream;
v4 = v0.<io.netty.handler.ssl.util.LazyX509Certificate: byte[] bytes>;
specialinvoke v3.<java.io.ByteArrayInputStream: void <init>(byte[])>(v4);
v5 = virtualinvoke v2.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(v3);
v0.<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.X509Certificate wrapped> = v5;
v1 = v5;
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = new java.lang.IllegalStateException;
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v6);
throw v7;
label4:
return v1;
catch java.security.cert.CertificateException from label1 to label2 with label3;
}
static void <clinit>()
{
java.security.cert.CertificateException v1;
java.security.cert.CertificateFactory v0;
java.lang.ExceptionInInitializerError v2;
label1:
v0 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");
<io.netty.handler.ssl.util.LazyX509Certificate: java.security.cert.CertificateFactory X509_CERT_FACTORY> = v0;
label2:
goto label4;
label3:
v1 := @caughtexception;
v2 = new java.lang.ExceptionInInitializerError;
specialinvoke v2.<java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)>(v1);
throw v2;
label4:
return;
catch java.security.cert.CertificateException from label1 to label2 with label3;
}
}