final class io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi extends javax.net.ssl.TrustManagerFactorySpi
{
private io.netty.handler.ssl.util.SimpleTrustManagerFactory parent;
private volatile javax.net.ssl.TrustManager[] trustManagers;
void <init>()
{
io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi v0;
v0 := @this: io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi;
specialinvoke v0.<javax.net.ssl.TrustManagerFactorySpi: void <init>()>();
return;
}
void init(io.netty.handler.ssl.util.SimpleTrustManagerFactory)
{
io.netty.handler.ssl.util.SimpleTrustManagerFactory v1;
io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi v0;
v0 := @this: io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi;
v1 := @parameter0: io.netty.handler.ssl.util.SimpleTrustManagerFactory;
v0.<io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi: io.netty.handler.ssl.util.SimpleTrustManagerFactory parent> = v1;
return;
}
protected void engineInit(java.security.KeyStore) throws java.security.KeyStoreException
{
io.netty.handler.ssl.util.SimpleTrustManagerFactory v2;
java.security.KeyStore v1;
java.security.KeyStoreException v3, v5;
io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi v0;
java.lang.Exception v4;
v0 := @this: io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi;
v1 := @parameter0: java.security.KeyStore;
label1:
v2 = v0.<io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi: io.netty.handler.ssl.util.SimpleTrustManagerFactory parent>;
virtualinvoke v2.<io.netty.handler.ssl.util.SimpleTrustManagerFactory: void engineInit(java.security.KeyStore)>(v1);
label2:
goto label5;
label3:
v3 := @caughtexception;
throw v3;
label4:
v4 := @caughtexception;
v5 = new java.security.KeyStoreException;
specialinvoke v5.<java.security.KeyStoreException: void <init>(java.lang.Throwable)>(v4);
throw v5;
label5:
return;
catch java.security.KeyStoreException from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
protected void engineInit(javax.net.ssl.ManagerFactoryParameters) throws java.security.InvalidAlgorithmParameterException
{
javax.net.ssl.ManagerFactoryParameters v1;
io.netty.handler.ssl.util.SimpleTrustManagerFactory v2;
io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi v0;
java.lang.Exception v4;
java.security.InvalidAlgorithmParameterException v3, v5;
v0 := @this: io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi;
v1 := @parameter0: javax.net.ssl.ManagerFactoryParameters;
label1:
v2 = v0.<io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi: io.netty.handler.ssl.util.SimpleTrustManagerFactory parent>;
virtualinvoke v2.<io.netty.handler.ssl.util.SimpleTrustManagerFactory: void engineInit(javax.net.ssl.ManagerFactoryParameters)>(v1);
label2:
goto label5;
label3:
v3 := @caughtexception;
throw v3;
label4:
v4 := @caughtexception;
v5 = new java.security.InvalidAlgorithmParameterException;
specialinvoke v5.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.Throwable)>(v4);
throw v5;
label5:
return;
catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
protected javax.net.ssl.TrustManager[] engineGetTrustManagers()
{
javax.net.ssl.TrustManager[] v1;
int v3;
io.netty.handler.ssl.util.SimpleTrustManagerFactory v2;
java.lang.Object v4;
io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi v0;
v0 := @this: io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi;
v1 = v0.<io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi: javax.net.ssl.TrustManager[] trustManagers>;
if v1 != null goto label2;
v2 = v0.<io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi: io.netty.handler.ssl.util.SimpleTrustManagerFactory parent>;
v1 = virtualinvoke v2.<io.netty.handler.ssl.util.SimpleTrustManagerFactory: javax.net.ssl.TrustManager[] engineGetTrustManagers()>();
v3 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v3 < 7 goto label1;
staticinvoke <io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi: void wrapIfNeeded(javax.net.ssl.TrustManager[])>(v1);
label1:
v0.<io.netty.handler.ssl.util.SimpleTrustManagerFactory$SimpleTrustManagerFactorySpi: javax.net.ssl.TrustManager[] trustManagers> = v1;
label2:
v4 = virtualinvoke v1.<java.lang.Object: java.lang.Object clone()>();
return v4;
}
private static void wrapIfNeeded(javax.net.ssl.TrustManager[])
{
javax.net.ssl.TrustManager[] v0;
io.netty.handler.ssl.util.X509TrustManagerWrapper v6;
int v1, v2;
javax.net.ssl.TrustManager v3;
boolean v4, v5;
v0 := @parameter0: javax.net.ssl.TrustManager[];
v1 = 0;
label1:
v2 = lengthof v0;
if v1 >= v2 goto label3;
v3 = v0[v1];
v4 = v3 instanceof javax.net.ssl.X509TrustManager;
if v4 == 0 goto label2;
v5 = v3 instanceof javax.net.ssl.X509ExtendedTrustManager;
if v5 != 0 goto label2;
v6 = new io.netty.handler.ssl.util.X509TrustManagerWrapper;
specialinvoke v6.<io.netty.handler.ssl.util.X509TrustManagerWrapper: void <init>(javax.net.ssl.X509TrustManager)>(v3);
v0[v1] = v6;
label2:
v1 = v1 + 1;
goto label1;
label3:
return;
}
}