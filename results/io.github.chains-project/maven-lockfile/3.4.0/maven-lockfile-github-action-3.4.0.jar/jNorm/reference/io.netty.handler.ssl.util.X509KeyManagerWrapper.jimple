final class io.netty.handler.ssl.util.X509KeyManagerWrapper extends javax.net.ssl.X509ExtendedKeyManager
{
private final javax.net.ssl.X509KeyManager delegate;
void <init>(javax.net.ssl.X509KeyManager)
{
io.netty.handler.ssl.util.X509KeyManagerWrapper v0;
javax.net.ssl.X509KeyManager v1;
java.lang.Object v2;
v0 := @this: io.netty.handler.ssl.util.X509KeyManagerWrapper;
v1 := @parameter0: javax.net.ssl.X509KeyManager;
specialinvoke v0.<javax.net.ssl.X509ExtendedKeyManager: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "delegate");
v0.<io.netty.handler.ssl.util.X509KeyManagerWrapper: javax.net.ssl.X509KeyManager delegate> = v2;
return;
}
public java.lang.String[] getClientAliases(java.lang.String, java.security.Principal[])
{
java.security.Principal[] v2;
javax.net.ssl.X509KeyManager v3;
io.netty.handler.ssl.util.X509KeyManagerWrapper v0;
java.lang.String[] v4;
java.lang.String v1;
v0 := @this: io.netty.handler.ssl.util.X509KeyManagerWrapper;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.security.Principal[];
v3 = v0.<io.netty.handler.ssl.util.X509KeyManagerWrapper: javax.net.ssl.X509KeyManager delegate>;
v4 = interfaceinvoke v3.<javax.net.ssl.X509KeyManager: java.lang.String[] getClientAliases(java.lang.String,java.security.Principal[])>(v1, v2);
return v4;
}
public java.lang.String chooseClientAlias(java.lang.String[], java.security.Principal[], java.net.Socket)
{
java.security.Principal[] v2;
javax.net.ssl.X509KeyManager v4;
java.net.Socket v3;
io.netty.handler.ssl.util.X509KeyManagerWrapper v0;
java.lang.String[] v1;
java.lang.String v5;
v0 := @this: io.netty.handler.ssl.util.X509KeyManagerWrapper;
v1 := @parameter0: java.lang.String[];
v2 := @parameter1: java.security.Principal[];
v3 := @parameter2: java.net.Socket;
v4 = v0.<io.netty.handler.ssl.util.X509KeyManagerWrapper: javax.net.ssl.X509KeyManager delegate>;
v5 = interfaceinvoke v4.<javax.net.ssl.X509KeyManager: java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)>(v1, v2, v3);
return v5;
}
public java.lang.String[] getServerAliases(java.lang.String, java.security.Principal[])
{
java.security.Principal[] v2;
javax.net.ssl.X509KeyManager v3;
io.netty.handler.ssl.util.X509KeyManagerWrapper v0;
java.lang.String[] v4;
java.lang.String v1;
v0 := @this: io.netty.handler.ssl.util.X509KeyManagerWrapper;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.security.Principal[];
v3 = v0.<io.netty.handler.ssl.util.X509KeyManagerWrapper: javax.net.ssl.X509KeyManager delegate>;
v4 = interfaceinvoke v3.<javax.net.ssl.X509KeyManager: java.lang.String[] getServerAliases(java.lang.String,java.security.Principal[])>(v1, v2);
return v4;
}
public java.lang.String chooseServerAlias(java.lang.String, java.security.Principal[], java.net.Socket)
{
java.security.Principal[] v2;
javax.net.ssl.X509KeyManager v4;
java.net.Socket v3;
io.netty.handler.ssl.util.X509KeyManagerWrapper v0;
java.lang.String v1, v5;
v0 := @this: io.netty.handler.ssl.util.X509KeyManagerWrapper;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.security.Principal[];
v3 := @parameter2: java.net.Socket;
v4 = v0.<io.netty.handler.ssl.util.X509KeyManagerWrapper: javax.net.ssl.X509KeyManager delegate>;
v5 = interfaceinvoke v4.<javax.net.ssl.X509KeyManager: java.lang.String chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)>(v1, v2, v3);
return v5;
}
public java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)
{
javax.net.ssl.X509KeyManager v2;
io.netty.handler.ssl.util.X509KeyManagerWrapper v0;
java.lang.String v1;
java.security.cert.X509Certificate[] v3;
v0 := @this: io.netty.handler.ssl.util.X509KeyManagerWrapper;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.handler.ssl.util.X509KeyManagerWrapper: javax.net.ssl.X509KeyManager delegate>;
v3 = interfaceinvoke v2.<javax.net.ssl.X509KeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)>(v1);
return v3;
}
public java.security.PrivateKey getPrivateKey(java.lang.String)
{
javax.net.ssl.X509KeyManager v2;
java.security.PrivateKey v3;
io.netty.handler.ssl.util.X509KeyManagerWrapper v0;
java.lang.String v1;
v0 := @this: io.netty.handler.ssl.util.X509KeyManagerWrapper;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.handler.ssl.util.X509KeyManagerWrapper: javax.net.ssl.X509KeyManager delegate>;
v3 = interfaceinvoke v2.<javax.net.ssl.X509KeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)>(v1);
return v3;
}
public java.lang.String chooseEngineClientAlias(java.lang.String[], java.security.Principal[], javax.net.ssl.SSLEngine)
{
java.security.Principal[] v2;
javax.net.ssl.X509KeyManager v4;
io.netty.handler.ssl.util.X509KeyManagerWrapper v0;
java.lang.String[] v1;
java.lang.String v5;
javax.net.ssl.SSLEngine v3;
v0 := @this: io.netty.handler.ssl.util.X509KeyManagerWrapper;
v1 := @parameter0: java.lang.String[];
v2 := @parameter1: java.security.Principal[];
v3 := @parameter2: javax.net.ssl.SSLEngine;
v4 = v0.<io.netty.handler.ssl.util.X509KeyManagerWrapper: javax.net.ssl.X509KeyManager delegate>;
v5 = interfaceinvoke v4.<javax.net.ssl.X509KeyManager: java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)>(v1, v2, null);
return v5;
}
public java.lang.String chooseEngineServerAlias(java.lang.String, java.security.Principal[], javax.net.ssl.SSLEngine)
{
java.security.Principal[] v2;
javax.net.ssl.X509KeyManager v4;
io.netty.handler.ssl.util.X509KeyManagerWrapper v0;
java.lang.String v1, v5;
javax.net.ssl.SSLEngine v3;
v0 := @this: io.netty.handler.ssl.util.X509KeyManagerWrapper;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.security.Principal[];
v3 := @parameter2: javax.net.ssl.SSLEngine;
v4 = v0.<io.netty.handler.ssl.util.X509KeyManagerWrapper: javax.net.ssl.X509KeyManager delegate>;
v5 = interfaceinvoke v4.<javax.net.ssl.X509KeyManager: java.lang.String chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)>(v1, v2, null);
return v5;
}
}