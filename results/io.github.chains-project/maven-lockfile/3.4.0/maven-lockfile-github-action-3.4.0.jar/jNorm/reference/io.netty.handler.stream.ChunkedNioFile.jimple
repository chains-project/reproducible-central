public class io.netty.handler.stream.ChunkedNioFile extends java.lang.Object implements io.netty.handler.stream.ChunkedInput
{
private final java.nio.channels.FileChannel in;
private final long startOffset;
private final long endOffset;
private final int chunkSize;
private long offset;
public void <init>(java.io.File) throws java.io.IOException
{
io.netty.handler.stream.ChunkedNioFile v0;
java.io.RandomAccessFile v2;
java.nio.channels.FileChannel v3;
java.io.File v1;
v0 := @this: io.netty.handler.stream.ChunkedNioFile;
v1 := @parameter0: java.io.File;
v2 = new java.io.RandomAccessFile;
specialinvoke v2.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(v1, "r");
v3 = virtualinvoke v2.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();
specialinvoke v0.<io.netty.handler.stream.ChunkedNioFile: void <init>(java.nio.channels.FileChannel)>(v3);
return;
}
public void <init>(java.io.File, int) throws java.io.IOException
{
io.netty.handler.stream.ChunkedNioFile v0;
java.io.RandomAccessFile v3;
int v2;
java.nio.channels.FileChannel v4;
java.io.File v1;
v0 := @this: io.netty.handler.stream.ChunkedNioFile;
v1 := @parameter0: java.io.File;
v2 := @parameter1: int;
v3 = new java.io.RandomAccessFile;
specialinvoke v3.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(v1, "r");
v4 = virtualinvoke v3.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();
specialinvoke v0.<io.netty.handler.stream.ChunkedNioFile: void <init>(java.nio.channels.FileChannel,int)>(v4, v2);
return;
}
public void <init>(java.nio.channels.FileChannel) throws java.io.IOException
{
io.netty.handler.stream.ChunkedNioFile v0;
java.nio.channels.FileChannel v1;
v0 := @this: io.netty.handler.stream.ChunkedNioFile;
v1 := @parameter0: java.nio.channels.FileChannel;
specialinvoke v0.<io.netty.handler.stream.ChunkedNioFile: void <init>(java.nio.channels.FileChannel,int)>(v1, 8192);
return;
}
public void <init>(java.nio.channels.FileChannel, int) throws java.io.IOException
{
io.netty.handler.stream.ChunkedNioFile v0;
int v2;
long v3;
java.nio.channels.FileChannel v1;
v0 := @this: io.netty.handler.stream.ChunkedNioFile;
v1 := @parameter0: java.nio.channels.FileChannel;
v2 := @parameter1: int;
v3 = virtualinvoke v1.<java.nio.channels.FileChannel: long size()>();
specialinvoke v0.<io.netty.handler.stream.ChunkedNioFile: void <init>(java.nio.channels.FileChannel,long,long,int)>(v1, 0L, v3, v2);
return;
}
public void <init>(java.nio.channels.FileChannel, long, long, int) throws java.io.IOException
{
java.nio.channels.ClosedChannelException v6;
long v2, v3, v7;
io.netty.handler.stream.ChunkedNioFile v0;
int v4;
java.nio.channels.FileChannel v1;
boolean v5;
v0 := @this: io.netty.handler.stream.ChunkedNioFile;
v1 := @parameter0: java.nio.channels.FileChannel;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "in");
staticinvoke <io.netty.util.internal.ObjectUtil: long checkPositiveOrZero(long,java.lang.String)>(v2, "offset");
staticinvoke <io.netty.util.internal.ObjectUtil: long checkPositiveOrZero(long,java.lang.String)>(v3, "length");
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v4, "chunkSize");
v5 = virtualinvoke v1.<java.nio.channels.FileChannel: boolean isOpen()>();
if v5 != 0 goto label1;
v6 = new java.nio.channels.ClosedChannelException;
specialinvoke v6.<java.nio.channels.ClosedChannelException: void <init>()>();
throw v6;
label1:
v0.<io.netty.handler.stream.ChunkedNioFile: java.nio.channels.FileChannel in> = v1;
v0.<io.netty.handler.stream.ChunkedNioFile: int chunkSize> = v4;
v0.<io.netty.handler.stream.ChunkedNioFile: long startOffset> = v2;
v0.<io.netty.handler.stream.ChunkedNioFile: long offset> = v2;
v7 = v2 + v3;
v0.<io.netty.handler.stream.ChunkedNioFile: long endOffset> = v7;
return;
}
public long startOffset()
{
io.netty.handler.stream.ChunkedNioFile v0;
long v1;
v0 := @this: io.netty.handler.stream.ChunkedNioFile;
v1 = v0.<io.netty.handler.stream.ChunkedNioFile: long startOffset>;
return v1;
}
public long endOffset()
{
io.netty.handler.stream.ChunkedNioFile v0;
long v1;
v0 := @this: io.netty.handler.stream.ChunkedNioFile;
v1 = v0.<io.netty.handler.stream.ChunkedNioFile: long endOffset>;
return v1;
}
public long currentOffset()
{
io.netty.handler.stream.ChunkedNioFile v0;
long v1;
v0 := @this: io.netty.handler.stream.ChunkedNioFile;
v1 = v0.<io.netty.handler.stream.ChunkedNioFile: long offset>;
return v1;
}
public boolean isEndOfInput() throws java.lang.Exception
{
io.netty.handler.stream.ChunkedNioFile v0;
byte v3;
long v1, v2;
java.nio.channels.FileChannel v4;
boolean v5, v6;
v0 := @this: io.netty.handler.stream.ChunkedNioFile;
v1 = v0.<io.netty.handler.stream.ChunkedNioFile: long offset>;
v2 = v0.<io.netty.handler.stream.ChunkedNioFile: long endOffset>;
v3 = v1 cmp v2;
if v3 >= 0 goto label1;
v4 = v0.<io.netty.handler.stream.ChunkedNioFile: java.nio.channels.FileChannel in>;
v5 = virtualinvoke v4.<java.nio.channels.FileChannel: boolean isOpen()>();
if v5 != 0 goto label2;
label1:
v6 = 1;
goto label3;
label2:
v6 = 0;
label3:
return v6;
}
public void close() throws java.lang.Exception
{
io.netty.handler.stream.ChunkedNioFile v0;
java.nio.channels.FileChannel v1;
v0 := @this: io.netty.handler.stream.ChunkedNioFile;
v1 = v0.<io.netty.handler.stream.ChunkedNioFile: java.nio.channels.FileChannel in>;
virtualinvoke v1.<java.nio.channels.FileChannel: void close()>();
return;
}
public io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.handler.stream.ChunkedNioFile v0;
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v3;
io.netty.buffer.ByteBufAllocator v2;
v0 := @this: io.netty.handler.stream.ChunkedNioFile;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.buffer.ByteBufAllocator alloc()>();
v3 = virtualinvoke v0.<io.netty.handler.stream.ChunkedNioFile: io.netty.buffer.ByteBuf readChunk(io.netty.buffer.ByteBufAllocator)>(v2);
return v3;
}
public io.netty.buffer.ByteBuf readChunk(io.netty.buffer.ByteBufAllocator) throws java.lang.Exception
{
java.lang.Throwable v17;
io.netty.buffer.ByteBufAllocator v1;
long v12, v15, v16, v2, v3, v6, v7, v8;
byte v4;
io.netty.buffer.ByteBuf v9;
int v10, v13, v14, v5;
io.netty.handler.stream.ChunkedNioFile v0;
java.nio.channels.FileChannel v11;
v0 := @this: io.netty.handler.stream.ChunkedNioFile;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 = v0.<io.netty.handler.stream.ChunkedNioFile: long offset>;
v3 = v0.<io.netty.handler.stream.ChunkedNioFile: long endOffset>;
v4 = v2 cmp v3;
if v4 < 0 goto label1;
return null;
label1:
v5 = v0.<io.netty.handler.stream.ChunkedNioFile: int chunkSize>;
v6 = v0.<io.netty.handler.stream.ChunkedNioFile: long endOffset>;
v7 = v6 - v2;
v8 = staticinvoke <java.lang.Math: long min(long,long)>(v5, v7);
v9 = interfaceinvoke v1.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf buffer(int)>(v8);
label2:
v10 = 0;
label3:
v11 = v0.<io.netty.handler.stream.ChunkedNioFile: java.nio.channels.FileChannel in>;
v12 = v2 + v10;
v13 = v8 - v10;
v14 = virtualinvoke v9.<io.netty.buffer.ByteBuf: int writeBytes(java.nio.channels.FileChannel,long,int)>(v11, v12, v13);
if v14 < 0 goto label4;
v10 = v10 + v14;
if v10 != v8 goto label3;
label4:
v15 = v0.<io.netty.handler.stream.ChunkedNioFile: long offset>;
v16 = v15 + v10;
v0.<io.netty.handler.stream.ChunkedNioFile: long offset> = v16;
label5:
return v9;
label6:
v17 := @caughtexception;
virtualinvoke v9.<io.netty.buffer.ByteBuf: boolean release()>();
throw v17;
catch java.lang.Throwable from label2 to label5 with label6;
}
public long length()
{
io.netty.handler.stream.ChunkedNioFile v0;
long v1, v2, v3;
v0 := @this: io.netty.handler.stream.ChunkedNioFile;
v1 = v0.<io.netty.handler.stream.ChunkedNioFile: long endOffset>;
v2 = v0.<io.netty.handler.stream.ChunkedNioFile: long startOffset>;
v3 = v1 - v2;
return v3;
}
public long progress()
{
io.netty.handler.stream.ChunkedNioFile v0;
long v1, v2, v3;
v0 := @this: io.netty.handler.stream.ChunkedNioFile;
v1 = v0.<io.netty.handler.stream.ChunkedNioFile: long offset>;
v2 = v0.<io.netty.handler.stream.ChunkedNioFile: long startOffset>;
v3 = v1 - v2;
return v3;
}
}