public class io.netty.handler.timeout.ReadTimeoutHandler extends io.netty.handler.timeout.IdleStateHandler
{
private boolean closed;
static final boolean $assertionsDisabled;
public void <init>(int)
{
int v1;
java.util.concurrent.TimeUnit v2;
io.netty.handler.timeout.ReadTimeoutHandler v0;
v0 := @this: io.netty.handler.timeout.ReadTimeoutHandler;
v1 := @parameter0: int;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
specialinvoke v0.<io.netty.handler.timeout.ReadTimeoutHandler: void <init>(long,java.util.concurrent.TimeUnit)>(v1, v2);
return;
}
public void <init>(long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v2;
long v1;
io.netty.handler.timeout.ReadTimeoutHandler v0;
v0 := @this: io.netty.handler.timeout.ReadTimeoutHandler;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
specialinvoke v0.<io.netty.handler.timeout.IdleStateHandler: void <init>(long,long,long,java.util.concurrent.TimeUnit)>(v1, 0L, 0L, v2);
return;
}
protected final void channelIdle(io.netty.channel.ChannelHandlerContext, io.netty.handler.timeout.IdleStateEvent) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.timeout.IdleStateEvent v2;
io.netty.handler.timeout.IdleState v4, v5;
io.netty.handler.timeout.ReadTimeoutHandler v0;
java.lang.AssertionError v6;
boolean v3;
v0 := @this: io.netty.handler.timeout.ReadTimeoutHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.timeout.IdleStateEvent;
v3 = <io.netty.handler.timeout.ReadTimeoutHandler: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
v4 = virtualinvoke v2.<io.netty.handler.timeout.IdleStateEvent: io.netty.handler.timeout.IdleState state()>();
v5 = <io.netty.handler.timeout.IdleState: io.netty.handler.timeout.IdleState READER_IDLE>;
if v4 == v5 goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
virtualinvoke v0.<io.netty.handler.timeout.ReadTimeoutHandler: void readTimedOut(io.netty.channel.ChannelHandlerContext)>(v1);
return;
}
protected void readTimedOut(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.timeout.ReadTimeoutException v3;
io.netty.handler.timeout.ReadTimeoutHandler v0;
boolean v2;
v0 := @this: io.netty.handler.timeout.ReadTimeoutHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = v0.<io.netty.handler.timeout.ReadTimeoutHandler: boolean closed>;
if v2 != 0 goto label1;
v3 = <io.netty.handler.timeout.ReadTimeoutException: io.netty.handler.timeout.ReadTimeoutException INSTANCE>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)>(v3);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close()>();
v0.<io.netty.handler.timeout.ReadTimeoutHandler: boolean closed> = 1;
label1:
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/timeout/ReadTimeoutHandler;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.timeout.ReadTimeoutHandler: boolean $assertionsDisabled> = v2;
return;
}
}