public class io.netty.handler.traffic.GlobalTrafficShapingHandler extends io.netty.handler.traffic.AbstractTrafficShapingHandler
{
private final java.util.concurrent.ConcurrentMap channelQueues;
private final java.util.concurrent.atomic.AtomicLong queuesSize;
long maxGlobalWriteSize;
void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)
{
io.netty.handler.traffic.TrafficCounter v2;
java.util.concurrent.ScheduledExecutorService v1;
java.lang.Object v3;
long v4;
io.netty.handler.traffic.GlobalTrafficShapingHandler v0;
v0 := @this: io.netty.handler.traffic.GlobalTrafficShapingHandler;
v1 := @parameter0: java.util.concurrent.ScheduledExecutorService;
v2 = new io.netty.handler.traffic.TrafficCounter;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "executor");
v4 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: long checkInterval>;
specialinvoke v2.<io.netty.handler.traffic.TrafficCounter: void <init>(io.netty.handler.traffic.AbstractTrafficShapingHandler,java.util.concurrent.ScheduledExecutorService,java.lang.String,long)>(v0, v3, "GlobalTC", v4);
virtualinvoke v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: void setTrafficCounter(io.netty.handler.traffic.TrafficCounter)>(v2);
virtualinvoke v2.<io.netty.handler.traffic.TrafficCounter: void start()>();
return;
}
protected int userDefinedWritabilityIndex()
{
io.netty.handler.traffic.GlobalTrafficShapingHandler v0;
v0 := @this: io.netty.handler.traffic.GlobalTrafficShapingHandler;
return 2;
}
public void <init>(java.util.concurrent.ScheduledExecutorService, long, long, long, long)
{
long v2, v3, v4, v5;
io.netty.handler.traffic.GlobalTrafficShapingHandler v0;
java.util.concurrent.ConcurrentMap v6;
java.util.concurrent.atomic.AtomicLong v7;
java.util.concurrent.ScheduledExecutorService v1;
v0 := @this: io.netty.handler.traffic.GlobalTrafficShapingHandler;
v1 := @parameter0: java.util.concurrent.ScheduledExecutorService;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: long;
v5 := @parameter4: long;
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void <init>(long,long,long,long)>(v2, v3, v4, v5);
v6 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues> = v6;
v7 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v7.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize> = v7;
v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: long maxGlobalWriteSize> = 419430400L;
virtualinvoke v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)>(v1);
return;
}
public void <init>(java.util.concurrent.ScheduledExecutorService, long, long, long)
{
java.util.concurrent.atomic.AtomicLong v6;
java.util.concurrent.ScheduledExecutorService v1;
long v2, v3, v4;
io.netty.handler.traffic.GlobalTrafficShapingHandler v0;
java.util.concurrent.ConcurrentMap v5;
v0 := @this: io.netty.handler.traffic.GlobalTrafficShapingHandler;
v1 := @parameter0: java.util.concurrent.ScheduledExecutorService;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: long;
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void <init>(long,long,long)>(v2, v3, v4);
v5 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues> = v5;
v6 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v6.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize> = v6;
v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: long maxGlobalWriteSize> = 419430400L;
virtualinvoke v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)>(v1);
return;
}
public void <init>(java.util.concurrent.ScheduledExecutorService, long, long)
{
java.util.concurrent.atomic.AtomicLong v5;
java.util.concurrent.ScheduledExecutorService v1;
long v2, v3;
io.netty.handler.traffic.GlobalTrafficShapingHandler v0;
java.util.concurrent.ConcurrentMap v4;
v0 := @this: io.netty.handler.traffic.GlobalTrafficShapingHandler;
v1 := @parameter0: java.util.concurrent.ScheduledExecutorService;
v2 := @parameter1: long;
v3 := @parameter2: long;
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void <init>(long,long)>(v2, v3);
v4 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues> = v4;
v5 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v5.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize> = v5;
v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: long maxGlobalWriteSize> = 419430400L;
virtualinvoke v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)>(v1);
return;
}
public void <init>(java.util.concurrent.ScheduledExecutorService, long)
{
java.util.concurrent.atomic.AtomicLong v4;
java.util.concurrent.ScheduledExecutorService v1;
long v2;
io.netty.handler.traffic.GlobalTrafficShapingHandler v0;
java.util.concurrent.ConcurrentMap v3;
v0 := @this: io.netty.handler.traffic.GlobalTrafficShapingHandler;
v1 := @parameter0: java.util.concurrent.ScheduledExecutorService;
v2 := @parameter1: long;
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void <init>(long)>(v2);
v3 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues> = v3;
v4 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v4.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize> = v4;
v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: long maxGlobalWriteSize> = 419430400L;
virtualinvoke v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)>(v1);
return;
}
public void <init>(io.netty.util.concurrent.EventExecutor)
{
io.netty.util.concurrent.EventExecutor v1;
java.util.concurrent.atomic.AtomicLong v3;
io.netty.handler.traffic.GlobalTrafficShapingHandler v0;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.netty.handler.traffic.GlobalTrafficShapingHandler;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues> = v2;
v3 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize> = v3;
v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: long maxGlobalWriteSize> = 419430400L;
virtualinvoke v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)>(v1);
return;
}
public long getMaxGlobalWriteSize()
{
long v1;
io.netty.handler.traffic.GlobalTrafficShapingHandler v0;
v0 := @this: io.netty.handler.traffic.GlobalTrafficShapingHandler;
v1 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: long maxGlobalWriteSize>;
return v1;
}
public void setMaxGlobalWriteSize(long)
{
long v1;
io.netty.handler.traffic.GlobalTrafficShapingHandler v0;
v0 := @this: io.netty.handler.traffic.GlobalTrafficShapingHandler;
v1 := @parameter0: long;
v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: long maxGlobalWriteSize> = v1;
return;
}
public long queuesSize()
{
java.util.concurrent.atomic.AtomicLong v1;
long v2;
io.netty.handler.traffic.GlobalTrafficShapingHandler v0;
v0 := @this: io.netty.handler.traffic.GlobalTrafficShapingHandler;
v1 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
public final void release()
{
io.netty.handler.traffic.TrafficCounter v1;
io.netty.handler.traffic.GlobalTrafficShapingHandler v0;
v0 := @this: io.netty.handler.traffic.GlobalTrafficShapingHandler;
v1 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: io.netty.handler.traffic.TrafficCounter trafficCounter>;
virtualinvoke v1.<io.netty.handler.traffic.TrafficCounter: void stop()>();
return;
}
private io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel getOrSetPerChannel(io.netty.channel.ChannelHandlerContext)
{
long v10, v9;
io.netty.handler.traffic.GlobalTrafficShapingHandler v0;
java.lang.Integer v4;
io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel v7;
java.util.concurrent.ConcurrentMap v11, v5;
io.netty.channel.Channel v2;
io.netty.channel.ChannelHandlerContext v1;
int v3;
java.lang.Object v6;
java.util.ArrayDeque v8;
v0 := @this: io.netty.handler.traffic.GlobalTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v3 = virtualinvoke v2.<java.lang.Object: int hashCode()>();
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v5 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
v6 = interfaceinvoke v5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v4);
if v6 != null goto label1;
v7 = new io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel;
specialinvoke v7.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: void <init>()>();
v6 = v7;
v8 = new java.util.ArrayDeque;
specialinvoke v8.<java.util.ArrayDeque: void <init>()>();
v7.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue> = v8;
v7.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: long queueSize> = 0L;
v9 = staticinvoke <io.netty.handler.traffic.TrafficCounter: long milliSecondFromNano()>();
v7.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: long lastReadTimestamp> = v9;
v10 = v7.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: long lastReadTimestamp>;
v7.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: long lastWriteTimestamp> = v10;
v11 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
interfaceinvoke v11.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v4, v7);
label1:
return v6;
}
public void handlerAdded(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.traffic.GlobalTrafficShapingHandler v0;
v0 := @this: io.netty.handler.traffic.GlobalTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
specialinvoke v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel getOrSetPerChannel(io.netty.channel.ChannelHandlerContext)>(v1);
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void handlerAdded(io.netty.channel.ChannelHandlerContext)>(v1);
return;
}
public void handlerRemoved(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.handler.traffic.TrafficCounter v14;
java.lang.Integer v4;
io.netty.channel.ChannelPromise v20;
boolean v10, v26, v29, v7;
java.lang.Throwable v32;
long v13, v15, v16, v18, v22, v23;
io.netty.handler.traffic.GlobalTrafficShapingHandler v0;
java.util.concurrent.ConcurrentMap v5;
io.netty.channel.ChannelHandlerContext v1;
int v3;
java.util.Iterator v25, v9;
io.netty.channel.Channel v2;
java.util.concurrent.atomic.AtomicLong v17, v21;
java.lang.Object v11, v12, v19, v27, v28, v30, v6;
java.util.ArrayDeque v24, v31, v8;
v0 := @this: io.netty.handler.traffic.GlobalTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v3 = virtualinvoke v2.<java.lang.Object: int hashCode()>();
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v5 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
v6 = interfaceinvoke v5.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v4);
if v6 == null goto label8;
entermonitor v6;
label1:
v7 = interfaceinvoke v2.<io.netty.channel.Channel: boolean isActive()>();
if v7 == 0 goto label3;
v8 = v6.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue>;
v9 = virtualinvoke v8.<java.util.ArrayDeque: java.util.Iterator iterator()>();
label2:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label5;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
v12 = v11.<io.netty.handler.traffic.GlobalTrafficShapingHandler$ToSend: java.lang.Object toSend>;
v13 = virtualinvoke v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: long calculateSize(java.lang.Object)>(v12);
v14 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: io.netty.handler.traffic.TrafficCounter trafficCounter>;
virtualinvoke v14.<io.netty.handler.traffic.TrafficCounter: void bytesRealWriteFlowControl(long)>(v13);
v15 = v6.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: long queueSize>;
v16 = v15 - v13;
v6.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: long queueSize> = v16;
v17 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize>;
v18 = neg v13;
virtualinvoke v17.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v18);
v19 = v11.<io.netty.handler.traffic.GlobalTrafficShapingHandler$ToSend: java.lang.Object toSend>;
v20 = v11.<io.netty.handler.traffic.GlobalTrafficShapingHandler$ToSend: io.netty.channel.ChannelPromise promise>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v19, v20);
goto label2;
label3:
v21 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize>;
v22 = v6.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: long queueSize>;
v23 = neg v22;
virtualinvoke v21.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v23);
v24 = v6.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue>;
v25 = virtualinvoke v24.<java.util.ArrayDeque: java.util.Iterator iterator()>();
label4:
v26 = interfaceinvoke v25.<java.util.Iterator: boolean hasNext()>();
if v26 == 0 goto label5;
v27 = interfaceinvoke v25.<java.util.Iterator: java.lang.Object next()>();
v28 = v27.<io.netty.handler.traffic.GlobalTrafficShapingHandler$ToSend: java.lang.Object toSend>;
v29 = v28 instanceof io.netty.buffer.ByteBuf;
if v29 == 0 goto label4;
v30 = v27.<io.netty.handler.traffic.GlobalTrafficShapingHandler$ToSend: java.lang.Object toSend>;
virtualinvoke v30.<io.netty.buffer.ByteBuf: boolean release()>();
goto label4;
label5:
v31 = v6.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue>;
virtualinvoke v31.<java.util.ArrayDeque: void clear()>();
exitmonitor v6;
label6:
goto label8;
label7:
v32 := @caughtexception;
exitmonitor v6;
throw v32;
label8:
virtualinvoke v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: void releaseWriteSuspended(io.netty.channel.ChannelHandlerContext)>(v1);
virtualinvoke v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)>(v1);
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void handlerRemoved(io.netty.channel.ChannelHandlerContext)>(v1);
return;
catch java.lang.Throwable from label1 to label6 with label7;
}
long checkWaitReadTime(io.netty.channel.ChannelHandlerContext, long, long)
{
long v11, v12, v13, v14, v2, v3, v9;
io.netty.handler.traffic.GlobalTrafficShapingHandler v0;
java.lang.Integer v6;
java.util.concurrent.ConcurrentMap v7;
io.netty.channel.ChannelHandlerContext v1;
byte v10, v15;
int v5;
io.netty.channel.Channel v4;
java.lang.Object v8;
v0 := @this: io.netty.handler.traffic.GlobalTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v5 = virtualinvoke v4.<java.lang.Object: int hashCode()>();
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v5);
v7 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
v8 = interfaceinvoke v7.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v6);
if v8 == null goto label1;
v9 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: long maxTime>;
v10 = v2 cmp v9;
if v10 <= 0 goto label1;
v11 = v3 + v2;
v12 = v8.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: long lastReadTimestamp>;
v13 = v11 - v12;
v14 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: long maxTime>;
v15 = v13 cmp v14;
if v15 <= 0 goto label1;
v2 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: long maxTime>;
label1:
return v2;
}
void informReadOperation(io.netty.channel.ChannelHandlerContext, long)
{
long v2;
io.netty.handler.traffic.GlobalTrafficShapingHandler v0;
java.lang.Integer v5;
java.util.concurrent.ConcurrentMap v6;
io.netty.channel.Channel v3;
io.netty.channel.ChannelHandlerContext v1;
int v4;
java.lang.Object v7;
v0 := @this: io.netty.handler.traffic.GlobalTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: long;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v4 = virtualinvoke v3.<java.lang.Object: int hashCode()>();
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
v6 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
v7 = interfaceinvoke v6.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v5);
if v7 == null goto label1;
v7.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: long lastReadTimestamp> = v2;
label1:
return;
}
void submitWrite(io.netty.channel.ChannelHandlerContext, java.lang.Object, long, long, long, io.netty.channel.ChannelPromise)
{
io.netty.handler.traffic.TrafficCounter v18;
io.netty.handler.traffic.GlobalTrafficShapingHandler$ToSend v26;
java.lang.Integer v9;
io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel v14;
byte v15, v20, v25, v36;
io.netty.channel.ChannelPromise v6;
boolean v13, v17;
io.netty.util.concurrent.EventExecutor v39;
java.lang.Throwable v37;
long v12, v19, v21, v22, v23, v24, v27, v29, v3, v30, v32, v34, v35, v38, v4, v5;
io.netty.handler.traffic.GlobalTrafficShapingHandler v0;
io.netty.handler.traffic.GlobalTrafficShapingHandler$1 v40;
java.util.concurrent.ConcurrentMap v10;
io.netty.channel.ChannelHandlerContext v1;
int v8;
io.netty.channel.Channel v7;
java.util.concurrent.TimeUnit v41;
java.util.concurrent.atomic.AtomicLong v31, v33;
java.lang.Object v11, v2;
java.util.ArrayDeque v16, v28;
v0 := @this: io.netty.handler.traffic.GlobalTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 := @parameter3: long;
v5 := @parameter4: long;
v6 := @parameter5: io.netty.channel.ChannelPromise;
v7 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v8 = virtualinvoke v7.<java.lang.Object: int hashCode()>();
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
v10 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
v11 = interfaceinvoke v10.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v9);
if v11 != null goto label01;
v11 = specialinvoke v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel getOrSetPerChannel(io.netty.channel.ChannelHandlerContext)>(v1);
label01:
v12 = v4;
v13 = 0;
v14 = v11;
entermonitor v11;
label02:
v15 = v4 cmp 0L;
if v15 != 0 goto label04;
v16 = v11.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue>;
v17 = virtualinvoke v16.<java.util.ArrayDeque: boolean isEmpty()>();
if v17 == 0 goto label04;
v18 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: io.netty.handler.traffic.TrafficCounter trafficCounter>;
virtualinvoke v18.<io.netty.handler.traffic.TrafficCounter: void bytesRealWriteFlowControl(long)>(v3);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v2, v6);
v11.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: long lastWriteTimestamp> = v5;
exitmonitor v11;
label03:
return;
label04:
v19 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: long maxTime>;
v20 = v4 cmp v19;
if v20 <= 0 goto label05;
v21 = v5 + v4;
v22 = v11.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: long lastWriteTimestamp>;
v23 = v21 - v22;
v24 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: long maxTime>;
v25 = v23 cmp v24;
if v25 <= 0 goto label05;
v12 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: long maxTime>;
label05:
v26 = new io.netty.handler.traffic.GlobalTrafficShapingHandler$ToSend;
v27 = v12 + v5;
specialinvoke v26.<io.netty.handler.traffic.GlobalTrafficShapingHandler$ToSend: void <init>(long,java.lang.Object,long,io.netty.channel.ChannelPromise)>(v27, v2, v3, v6);
v28 = v11.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue>;
virtualinvoke v28.<java.util.ArrayDeque: void addLast(java.lang.Object)>(v26);
v29 = v11.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: long queueSize>;
v30 = v29 + v3;
v11.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: long queueSize> = v30;
v31 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize>;
virtualinvoke v31.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v3);
v32 = v11.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: long queueSize>;
virtualinvoke v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: void checkWriteSuspend(io.netty.channel.ChannelHandlerContext,long,long)>(v1, v12, v32);
v33 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize>;
v34 = virtualinvoke v33.<java.util.concurrent.atomic.AtomicLong: long get()>();
v35 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: long maxGlobalWriteSize>;
v36 = v34 cmp v35;
if v36 <= 0 goto label06;
v13 = 1;
label06:
exitmonitor v14;
label07:
goto label09;
label08:
v37 := @caughtexception;
exitmonitor v14;
throw v37;
label09:
if v13 == 0 goto label10;
virtualinvoke v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: void setUserDefinedWritability(io.netty.channel.ChannelHandlerContext,boolean)>(v1, 0);
label10:
v38 = v26.<io.netty.handler.traffic.GlobalTrafficShapingHandler$ToSend: long relativeTimeAction>;
v39 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v40 = new io.netty.handler.traffic.GlobalTrafficShapingHandler$1;
specialinvoke v40.<io.netty.handler.traffic.GlobalTrafficShapingHandler$1: void <init>(io.netty.handler.traffic.GlobalTrafficShapingHandler,io.netty.channel.ChannelHandlerContext,io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel,long)>(v0, v1, v11, v38);
v41 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
interfaceinvoke v39.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v40, v12, v41);
return;
catch java.lang.Throwable from label02 to label03 with label08;
catch java.lang.Throwable from label04 to label07 with label08;
}
private void sendAllValid(io.netty.channel.ChannelHandlerContext, io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel, long)
{
io.netty.handler.traffic.TrafficCounter v9;
java.lang.Throwable v20;
long v10, v11, v13, v3, v6, v8;
io.netty.handler.traffic.GlobalTrafficShapingHandler v0;
io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel v2;
io.netty.channel.ChannelHandlerContext v1;
byte v7;
io.netty.channel.ChannelPromise v15;
boolean v19;
java.util.concurrent.atomic.AtomicLong v12;
java.lang.Object v14, v5;
java.util.ArrayDeque v16, v17, v18, v4;
v0 := @this: io.netty.handler.traffic.GlobalTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel;
v3 := @parameter2: long;
entermonitor v2;
label1:
v4 = v2.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue>;
v5 = virtualinvoke v4.<java.util.ArrayDeque: java.lang.Object pollFirst()>();
label2:
if v5 == null goto label5;
v6 = v5.<io.netty.handler.traffic.GlobalTrafficShapingHandler$ToSend: long relativeTimeAction>;
v7 = v6 cmp v3;
if v7 > 0 goto label3;
v8 = v5.<io.netty.handler.traffic.GlobalTrafficShapingHandler$ToSend: long size>;
v9 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: io.netty.handler.traffic.TrafficCounter trafficCounter>;
virtualinvoke v9.<io.netty.handler.traffic.TrafficCounter: void bytesRealWriteFlowControl(long)>(v8);
v10 = v2.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: long queueSize>;
v11 = v10 - v8;
v2.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: long queueSize> = v11;
v12 = v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize>;
v13 = neg v8;
virtualinvoke v12.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v13);
v14 = v5.<io.netty.handler.traffic.GlobalTrafficShapingHandler$ToSend: java.lang.Object toSend>;
v15 = v5.<io.netty.handler.traffic.GlobalTrafficShapingHandler$ToSend: io.netty.channel.ChannelPromise promise>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v14, v15);
v2.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: long lastWriteTimestamp> = v3;
goto label4;
label3:
v16 = v2.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue>;
virtualinvoke v16.<java.util.ArrayDeque: void addFirst(java.lang.Object)>(v5);
goto label5;
label4:
v17 = v2.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue>;
virtualinvoke v17.<java.util.ArrayDeque: java.lang.Object pollFirst()>();
goto label2;
label5:
v18 = v2.<io.netty.handler.traffic.GlobalTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue>;
v19 = virtualinvoke v18.<java.util.ArrayDeque: boolean isEmpty()>();
if v19 == 0 goto label6;
virtualinvoke v0.<io.netty.handler.traffic.GlobalTrafficShapingHandler: void releaseWriteSuspended(io.netty.channel.ChannelHandlerContext)>(v1);
label6:
exitmonitor v2;
label7:
goto label9;
label8:
v20 := @caughtexception;
exitmonitor v2;
throw v20;
label9:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>();
return;
catch java.lang.Throwable from label1 to label7 with label8;
}
}