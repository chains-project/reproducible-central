public class io.netty.handler.traffic.TrafficCounter extends java.lang.Object
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private final java.util.concurrent.atomic.AtomicLong currentWrittenBytes;
private final java.util.concurrent.atomic.AtomicLong currentReadBytes;
private long writingTime;
private long readingTime;
private final java.util.concurrent.atomic.AtomicLong cumulativeWrittenBytes;
private final java.util.concurrent.atomic.AtomicLong cumulativeReadBytes;
private long lastCumulativeTime;
private long lastWriteThroughput;
private long lastReadThroughput;
final java.util.concurrent.atomic.AtomicLong lastTime;
private volatile long lastWrittenBytes;
private volatile long lastReadBytes;
private volatile long lastWritingTime;
private volatile long lastReadingTime;
private final java.util.concurrent.atomic.AtomicLong realWrittenBytes;
private long realWriteThroughput;
final java.util.concurrent.atomic.AtomicLong checkInterval;
final java.lang.String name;
final io.netty.handler.traffic.AbstractTrafficShapingHandler trafficShapingHandler;
final java.util.concurrent.ScheduledExecutorService executor;
java.lang.Runnable monitor;
volatile java.util.concurrent.ScheduledFuture scheduledFuture;
volatile boolean monitorActive;
public static long milliSecondFromNano()
{
long v0, v1;
v0 = staticinvoke <java.lang.System: long nanoTime()>();
v1 = v0 / 1000000L;
return v1;
}
public synchronized void start()
{
io.netty.handler.traffic.TrafficCounter v0;
java.util.concurrent.ScheduledFuture v12;
long v3, v5;
java.lang.Runnable v10;
java.util.concurrent.TimeUnit v11;
java.util.concurrent.atomic.AtomicLong v2, v4;
byte v6;
io.netty.handler.traffic.TrafficCounter$TrafficMonitoringTask v8;
java.util.concurrent.ScheduledExecutorService v7, v9;
boolean v1;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 = v0.<io.netty.handler.traffic.TrafficCounter: boolean monitorActive>;
if v1 == 0 goto label1;
return;
label1:
v2 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong lastTime>;
v3 = staticinvoke <io.netty.handler.traffic.TrafficCounter: long milliSecondFromNano()>();
virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: void set(long)>(v3);
v4 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong checkInterval>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLong: long get()>();
v6 = v5 cmp 0L;
if v6 <= 0 goto label2;
v7 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.ScheduledExecutorService executor>;
if v7 == null goto label2;
v0.<io.netty.handler.traffic.TrafficCounter: boolean monitorActive> = 1;
v8 = new io.netty.handler.traffic.TrafficCounter$TrafficMonitoringTask;
specialinvoke v8.<io.netty.handler.traffic.TrafficCounter$TrafficMonitoringTask: void <init>(io.netty.handler.traffic.TrafficCounter)>(v0);
v0.<io.netty.handler.traffic.TrafficCounter: java.lang.Runnable monitor> = v8;
v9 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.ScheduledExecutorService executor>;
v10 = v0.<io.netty.handler.traffic.TrafficCounter: java.lang.Runnable monitor>;
v11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v12 = interfaceinvoke v9.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>(v10, 0L, v5, v11);
v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.ScheduledFuture scheduledFuture> = v12;
label2:
return;
}
public synchronized void stop()
{
io.netty.handler.traffic.TrafficCounter v0;
java.util.concurrent.ScheduledFuture v5, v6;
io.netty.handler.traffic.AbstractTrafficShapingHandler v3, v4;
long v2;
boolean v1;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 = v0.<io.netty.handler.traffic.TrafficCounter: boolean monitorActive>;
if v1 != 0 goto label1;
return;
label1:
v0.<io.netty.handler.traffic.TrafficCounter: boolean monitorActive> = 0;
v2 = staticinvoke <io.netty.handler.traffic.TrafficCounter: long milliSecondFromNano()>();
virtualinvoke v0.<io.netty.handler.traffic.TrafficCounter: void resetAccounting(long)>(v2);
v3 = v0.<io.netty.handler.traffic.TrafficCounter: io.netty.handler.traffic.AbstractTrafficShapingHandler trafficShapingHandler>;
if v3 == null goto label2;
v4 = v0.<io.netty.handler.traffic.TrafficCounter: io.netty.handler.traffic.AbstractTrafficShapingHandler trafficShapingHandler>;
virtualinvoke v4.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void doAccounting(io.netty.handler.traffic.TrafficCounter)>(v0);
label2:
v5 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.ScheduledFuture scheduledFuture>;
if v5 == null goto label3;
v6 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.ScheduledFuture scheduledFuture>;
interfaceinvoke v6.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1);
label3:
return;
}
synchronized void resetAccounting(long)
{
io.netty.handler.traffic.TrafficCounter v0;
byte v10, v5;
boolean v7;
io.netty.util.internal.logging.InternalLogger v11, v6;
long v1, v12, v16, v18, v19, v20, v21, v22, v23, v24, v26, v27, v28, v29, v3, v30, v31, v32, v33, v34, v4, v8, v9;
java.lang.String v13, v14;
java.util.concurrent.atomic.AtomicLong v15, v17, v2, v25;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 := @parameter0: long;
v2 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong lastTime>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(v1);
v4 = v1 - v3;
v5 = v4 cmp 0L;
if v5 != 0 goto label1;
return;
label1:
v6 = <io.netty.handler.traffic.TrafficCounter: io.netty.util.internal.logging.InternalLogger logger>;
v7 = interfaceinvoke v6.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v7 == 0 goto label2;
v8 = virtualinvoke v0.<io.netty.handler.traffic.TrafficCounter: long checkInterval()>();
v9 = v8 << 1;
v10 = v4 cmp v9;
if v10 <= 0 goto label2;
v11 = <io.netty.handler.traffic.TrafficCounter: io.netty.util.internal.logging.InternalLogger logger>;
v12 = virtualinvoke v0.<io.netty.handler.traffic.TrafficCounter: long checkInterval()>();
v13 = v0.<io.netty.handler.traffic.TrafficCounter: java.lang.String name>;
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,long,java.lang.String)>(v4, v12, v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Acct schedule not ok: \u0001 > 2*\u0001 from \u0001");
interfaceinvoke v11.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>(v14);
label2:
v15 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong currentReadBytes>;
v16 = virtualinvoke v15.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(0L);
v0.<io.netty.handler.traffic.TrafficCounter: long lastReadBytes> = v16;
v17 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong currentWrittenBytes>;
v18 = virtualinvoke v17.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(0L);
v0.<io.netty.handler.traffic.TrafficCounter: long lastWrittenBytes> = v18;
v19 = v0.<io.netty.handler.traffic.TrafficCounter: long lastReadBytes>;
v20 = v19 * 1000L;
v21 = v20 / v4;
v0.<io.netty.handler.traffic.TrafficCounter: long lastReadThroughput> = v21;
v22 = v0.<io.netty.handler.traffic.TrafficCounter: long lastWrittenBytes>;
v23 = v22 * 1000L;
v24 = v23 / v4;
v0.<io.netty.handler.traffic.TrafficCounter: long lastWriteThroughput> = v24;
v25 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong realWrittenBytes>;
v26 = virtualinvoke v25.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(0L);
v27 = v26 * 1000L;
v28 = v27 / v4;
v0.<io.netty.handler.traffic.TrafficCounter: long realWriteThroughput> = v28;
v29 = v0.<io.netty.handler.traffic.TrafficCounter: long lastWritingTime>;
v30 = v0.<io.netty.handler.traffic.TrafficCounter: long writingTime>;
v31 = staticinvoke <java.lang.Math: long max(long,long)>(v29, v30);
v0.<io.netty.handler.traffic.TrafficCounter: long lastWritingTime> = v31;
v32 = v0.<io.netty.handler.traffic.TrafficCounter: long lastReadingTime>;
v33 = v0.<io.netty.handler.traffic.TrafficCounter: long readingTime>;
v34 = staticinvoke <java.lang.Math: long max(long,long)>(v32, v33);
v0.<io.netty.handler.traffic.TrafficCounter: long lastReadingTime> = v34;
return;
}
public void <init>(java.util.concurrent.ScheduledExecutorService, java.lang.String, long)
{
io.netty.handler.traffic.TrafficCounter v0;
long v3;
java.util.concurrent.atomic.AtomicLong v10, v4, v5, v6, v7, v8, v9;
java.util.concurrent.ScheduledExecutorService v1;
java.lang.Object v11;
java.lang.String v2;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 := @parameter0: java.util.concurrent.ScheduledExecutorService;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: long;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v4.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong currentWrittenBytes> = v4;
v5 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v5.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong currentReadBytes> = v5;
v6 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v6.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong cumulativeWrittenBytes> = v6;
v7 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v7.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong cumulativeReadBytes> = v7;
v8 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v8.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong lastTime> = v8;
v9 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v9.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong realWrittenBytes> = v9;
v10 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v10.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(1000L);
v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong checkInterval> = v10;
v11 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "name");
v0.<io.netty.handler.traffic.TrafficCounter: java.lang.String name> = v11;
v0.<io.netty.handler.traffic.TrafficCounter: io.netty.handler.traffic.AbstractTrafficShapingHandler trafficShapingHandler> = null;
v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.ScheduledExecutorService executor> = v1;
specialinvoke v0.<io.netty.handler.traffic.TrafficCounter: void init(long)>(v3);
return;
}
public void <init>(io.netty.handler.traffic.AbstractTrafficShapingHandler, java.util.concurrent.ScheduledExecutorService, java.lang.String, long)
{
io.netty.handler.traffic.TrafficCounter v0;
io.netty.handler.traffic.AbstractTrafficShapingHandler v1;
long v4;
java.util.concurrent.atomic.AtomicLong v10, v11, v5, v6, v7, v8, v9;
java.util.concurrent.ScheduledExecutorService v2;
java.lang.Object v12, v13;
java.lang.String v3;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 := @parameter0: io.netty.handler.traffic.AbstractTrafficShapingHandler;
v2 := @parameter1: java.util.concurrent.ScheduledExecutorService;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: long;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v5.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong currentWrittenBytes> = v5;
v6 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v6.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong currentReadBytes> = v6;
v7 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v7.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong cumulativeWrittenBytes> = v7;
v8 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v8.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong cumulativeReadBytes> = v8;
v9 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v9.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong lastTime> = v9;
v10 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v10.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong realWrittenBytes> = v10;
v11 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v11.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(1000L);
v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong checkInterval> = v11;
v12 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v3, "name");
v0.<io.netty.handler.traffic.TrafficCounter: java.lang.String name> = v12;
v13 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNullWithIAE(java.lang.Object,java.lang.String)>(v1, "trafficShapingHandler");
v0.<io.netty.handler.traffic.TrafficCounter: io.netty.handler.traffic.AbstractTrafficShapingHandler trafficShapingHandler> = v13;
v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.ScheduledExecutorService executor> = v2;
specialinvoke v0.<io.netty.handler.traffic.TrafficCounter: void init(long)>(v4);
return;
}
private void init(long)
{
io.netty.handler.traffic.TrafficCounter v0;
long v1, v2, v3, v4, v5, v6;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 := @parameter0: long;
v2 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v0.<io.netty.handler.traffic.TrafficCounter: long lastCumulativeTime> = v2;
v3 = staticinvoke <io.netty.handler.traffic.TrafficCounter: long milliSecondFromNano()>();
v0.<io.netty.handler.traffic.TrafficCounter: long writingTime> = v3;
v4 = v0.<io.netty.handler.traffic.TrafficCounter: long writingTime>;
v0.<io.netty.handler.traffic.TrafficCounter: long readingTime> = v4;
v5 = v0.<io.netty.handler.traffic.TrafficCounter: long writingTime>;
v0.<io.netty.handler.traffic.TrafficCounter: long lastWritingTime> = v5;
v6 = v0.<io.netty.handler.traffic.TrafficCounter: long writingTime>;
v0.<io.netty.handler.traffic.TrafficCounter: long lastReadingTime> = v6;
virtualinvoke v0.<io.netty.handler.traffic.TrafficCounter: void configure(long)>(v1);
return;
}
public void configure(long)
{
io.netty.handler.traffic.TrafficCounter v0;
long v1, v2, v3, v5, v9;
java.util.concurrent.atomic.AtomicLong v4, v8;
byte v6, v7;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 := @parameter0: long;
v2 = v1 / 10L;
v3 = v2 * 10L;
v4 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong checkInterval>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(v3);
v6 = v5 cmp v3;
if v6 == 0 goto label2;
v7 = v3 cmp 0L;
if v7 > 0 goto label1;
virtualinvoke v0.<io.netty.handler.traffic.TrafficCounter: void stop()>();
v8 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong lastTime>;
v9 = staticinvoke <io.netty.handler.traffic.TrafficCounter: long milliSecondFromNano()>();
virtualinvoke v8.<java.util.concurrent.atomic.AtomicLong: void set(long)>(v9);
goto label2;
label1:
virtualinvoke v0.<io.netty.handler.traffic.TrafficCounter: void stop()>();
virtualinvoke v0.<io.netty.handler.traffic.TrafficCounter: void start()>();
label2:
return;
}
void bytesRecvFlowControl(long)
{
io.netty.handler.traffic.TrafficCounter v0;
java.util.concurrent.atomic.AtomicLong v2, v3;
long v1;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 := @parameter0: long;
v2 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong currentReadBytes>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v1);
v3 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong cumulativeReadBytes>;
virtualinvoke v3.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v1);
return;
}
void bytesWriteFlowControl(long)
{
io.netty.handler.traffic.TrafficCounter v0;
java.util.concurrent.atomic.AtomicLong v2, v3;
long v1;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 := @parameter0: long;
v2 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong currentWrittenBytes>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v1);
v3 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong cumulativeWrittenBytes>;
virtualinvoke v3.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v1);
return;
}
void bytesRealWriteFlowControl(long)
{
io.netty.handler.traffic.TrafficCounter v0;
java.util.concurrent.atomic.AtomicLong v2;
long v1;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 := @parameter0: long;
v2 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong realWrittenBytes>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v1);
return;
}
public long checkInterval()
{
io.netty.handler.traffic.TrafficCounter v0;
java.util.concurrent.atomic.AtomicLong v1;
long v2;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong checkInterval>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
public long lastReadThroughput()
{
io.netty.handler.traffic.TrafficCounter v0;
long v1;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 = v0.<io.netty.handler.traffic.TrafficCounter: long lastReadThroughput>;
return v1;
}
public long lastWriteThroughput()
{
io.netty.handler.traffic.TrafficCounter v0;
long v1;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 = v0.<io.netty.handler.traffic.TrafficCounter: long lastWriteThroughput>;
return v1;
}
public long lastReadBytes()
{
io.netty.handler.traffic.TrafficCounter v0;
long v1;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 = v0.<io.netty.handler.traffic.TrafficCounter: long lastReadBytes>;
return v1;
}
public long lastWrittenBytes()
{
io.netty.handler.traffic.TrafficCounter v0;
long v1;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 = v0.<io.netty.handler.traffic.TrafficCounter: long lastWrittenBytes>;
return v1;
}
public long currentReadBytes()
{
io.netty.handler.traffic.TrafficCounter v0;
java.util.concurrent.atomic.AtomicLong v1;
long v2;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong currentReadBytes>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
public long currentWrittenBytes()
{
io.netty.handler.traffic.TrafficCounter v0;
java.util.concurrent.atomic.AtomicLong v1;
long v2;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong currentWrittenBytes>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
public long lastTime()
{
io.netty.handler.traffic.TrafficCounter v0;
java.util.concurrent.atomic.AtomicLong v1;
long v2;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong lastTime>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
public long cumulativeWrittenBytes()
{
io.netty.handler.traffic.TrafficCounter v0;
java.util.concurrent.atomic.AtomicLong v1;
long v2;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong cumulativeWrittenBytes>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
public long cumulativeReadBytes()
{
io.netty.handler.traffic.TrafficCounter v0;
java.util.concurrent.atomic.AtomicLong v1;
long v2;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong cumulativeReadBytes>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
public long lastCumulativeTime()
{
io.netty.handler.traffic.TrafficCounter v0;
long v1;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 = v0.<io.netty.handler.traffic.TrafficCounter: long lastCumulativeTime>;
return v1;
}
public java.util.concurrent.atomic.AtomicLong getRealWrittenBytes()
{
io.netty.handler.traffic.TrafficCounter v0;
java.util.concurrent.atomic.AtomicLong v1;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong realWrittenBytes>;
return v1;
}
public long getRealWriteThroughput()
{
io.netty.handler.traffic.TrafficCounter v0;
long v1;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 = v0.<io.netty.handler.traffic.TrafficCounter: long realWriteThroughput>;
return v1;
}
public void resetCumulativeTime()
{
io.netty.handler.traffic.TrafficCounter v0;
java.util.concurrent.atomic.AtomicLong v2, v3;
long v1;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v0.<io.netty.handler.traffic.TrafficCounter: long lastCumulativeTime> = v1;
v2 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong cumulativeReadBytes>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);
v3 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong cumulativeWrittenBytes>;
virtualinvoke v3.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);
return;
}
public java.lang.String name()
{
io.netty.handler.traffic.TrafficCounter v0;
java.lang.String v1;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 = v0.<io.netty.handler.traffic.TrafficCounter: java.lang.String name>;
return v1;
}
public long readTimeToWait(long, long, long)
{
io.netty.handler.traffic.TrafficCounter v0;
long v1, v2, v3, v4, v5;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 = staticinvoke <io.netty.handler.traffic.TrafficCounter: long milliSecondFromNano()>();
v5 = virtualinvoke v0.<io.netty.handler.traffic.TrafficCounter: long readTimeToWait(long,long,long,long)>(v1, v2, v3, v4);
return v5;
}
public long readTimeToWait(long, long, long, long)
{
io.netty.handler.traffic.TrafficCounter v0;
byte v17, v22, v27, v30, v42, v47, v5, v50, v6;
boolean v24, v44;
io.netty.util.internal.logging.InternalLogger v23, v25, v43, v45;
long v1, v10, v11, v12, v13, v14, v15, v16, v18, v19, v2, v20, v21, v28, v29, v3, v31, v32, v33, v34, v36, v37, v38, v39, v4, v40, v41, v48, v49, v51, v52, v53, v8;
java.lang.String v26, v46;
java.util.concurrent.atomic.AtomicLong v35, v7, v9;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: long;
virtualinvoke v0.<io.netty.handler.traffic.TrafficCounter: void bytesRecvFlowControl(long)>(v1);
v5 = v1 cmp 0L;
if v5 == 0 goto label1;
v6 = v2 cmp 0L;
if v6 != 0 goto label2;
label1:
return 0L;
label2:
v7 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong lastTime>;
v8 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicLong: long get()>();
v9 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong currentReadBytes>;
v10 = virtualinvoke v9.<java.util.concurrent.atomic.AtomicLong: long get()>();
v11 = v0.<io.netty.handler.traffic.TrafficCounter: long readingTime>;
v12 = v0.<io.netty.handler.traffic.TrafficCounter: long lastReadBytes>;
v13 = v4 - v8;
v14 = v0.<io.netty.handler.traffic.TrafficCounter: long lastReadingTime>;
v15 = v14 - v8;
v16 = staticinvoke <java.lang.Math: long max(long,long)>(v15, 0L);
v17 = v13 cmp 10L;
if v17 <= 0 goto label6;
v18 = v10 * 1000L;
v19 = v18 / v2;
v20 = v19 - v13;
v21 = v20 + v16;
v22 = v21 cmp 10L;
if v22 <= 0 goto label5;
v23 = <io.netty.handler.traffic.TrafficCounter: io.netty.util.internal.logging.InternalLogger logger>;
v24 = interfaceinvoke v23.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v24 == 0 goto label3;
v25 = <io.netty.handler.traffic.TrafficCounter: io.netty.util.internal.logging.InternalLogger logger>;
v26 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,long,long,long)>(v21, v10, v13, v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Time: \u0001:\u0001:\u0001:\u0001");
interfaceinvoke v25.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>(v26);
label3:
v27 = v21 cmp v3;
if v27 <= 0 goto label4;
v28 = v4 + v21;
v29 = v28 - v11;
v30 = v29 cmp v3;
if v30 <= 0 goto label4;
v21 = v3;
label4:
v31 = v4 + v21;
v32 = staticinvoke <java.lang.Math: long max(long,long)>(v11, v31);
v0.<io.netty.handler.traffic.TrafficCounter: long readingTime> = v32;
return v21;
label5:
v33 = staticinvoke <java.lang.Math: long max(long,long)>(v11, v4);
v0.<io.netty.handler.traffic.TrafficCounter: long readingTime> = v33;
return 0L;
label6:
v34 = v10 + v12;
v35 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong checkInterval>;
v36 = virtualinvoke v35.<java.util.concurrent.atomic.AtomicLong: long get()>();
v37 = v13 + v36;
v38 = v34 * 1000L;
v39 = v38 / v2;
v40 = v39 - v37;
v41 = v40 + v16;
v42 = v41 cmp 10L;
if v42 <= 0 goto label9;
v43 = <io.netty.handler.traffic.TrafficCounter: io.netty.util.internal.logging.InternalLogger logger>;
v44 = interfaceinvoke v43.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v44 == 0 goto label7;
v45 = <io.netty.handler.traffic.TrafficCounter: io.netty.util.internal.logging.InternalLogger logger>;
v46 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,long,long,long)>(v41, v34, v37, v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Time: \u0001:\u0001:\u0001:\u0001");
interfaceinvoke v45.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>(v46);
label7:
v47 = v41 cmp v3;
if v47 <= 0 goto label8;
v48 = v4 + v41;
v49 = v48 - v11;
v50 = v49 cmp v3;
if v50 <= 0 goto label8;
v41 = v3;
label8:
v51 = v4 + v41;
v52 = staticinvoke <java.lang.Math: long max(long,long)>(v11, v51);
v0.<io.netty.handler.traffic.TrafficCounter: long readingTime> = v52;
return v41;
label9:
v53 = staticinvoke <java.lang.Math: long max(long,long)>(v11, v4);
v0.<io.netty.handler.traffic.TrafficCounter: long readingTime> = v53;
return 0L;
}
public long writeTimeToWait(long, long, long)
{
io.netty.handler.traffic.TrafficCounter v0;
long v1, v2, v3, v4, v5;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 = staticinvoke <io.netty.handler.traffic.TrafficCounter: long milliSecondFromNano()>();
v5 = virtualinvoke v0.<io.netty.handler.traffic.TrafficCounter: long writeTimeToWait(long,long,long,long)>(v1, v2, v3, v4);
return v5;
}
public long writeTimeToWait(long, long, long, long)
{
io.netty.handler.traffic.TrafficCounter v0;
byte v17, v22, v27, v30, v42, v47, v5, v50, v6;
boolean v24, v44;
io.netty.util.internal.logging.InternalLogger v23, v25, v43, v45;
long v1, v10, v11, v12, v13, v14, v15, v16, v18, v19, v2, v20, v21, v28, v29, v3, v31, v32, v33, v34, v36, v37, v38, v39, v4, v40, v41, v48, v49, v51, v52, v53, v8;
java.lang.String v26, v46;
java.util.concurrent.atomic.AtomicLong v35, v7, v9;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: long;
virtualinvoke v0.<io.netty.handler.traffic.TrafficCounter: void bytesWriteFlowControl(long)>(v1);
v5 = v1 cmp 0L;
if v5 == 0 goto label1;
v6 = v2 cmp 0L;
if v6 != 0 goto label2;
label1:
return 0L;
label2:
v7 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong lastTime>;
v8 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicLong: long get()>();
v9 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong currentWrittenBytes>;
v10 = virtualinvoke v9.<java.util.concurrent.atomic.AtomicLong: long get()>();
v11 = v0.<io.netty.handler.traffic.TrafficCounter: long lastWrittenBytes>;
v12 = v0.<io.netty.handler.traffic.TrafficCounter: long writingTime>;
v13 = v0.<io.netty.handler.traffic.TrafficCounter: long lastWritingTime>;
v14 = v13 - v8;
v15 = staticinvoke <java.lang.Math: long max(long,long)>(v14, 0L);
v16 = v4 - v8;
v17 = v16 cmp 10L;
if v17 <= 0 goto label6;
v18 = v10 * 1000L;
v19 = v18 / v2;
v20 = v19 - v16;
v21 = v20 + v15;
v22 = v21 cmp 10L;
if v22 <= 0 goto label5;
v23 = <io.netty.handler.traffic.TrafficCounter: io.netty.util.internal.logging.InternalLogger logger>;
v24 = interfaceinvoke v23.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v24 == 0 goto label3;
v25 = <io.netty.handler.traffic.TrafficCounter: io.netty.util.internal.logging.InternalLogger logger>;
v26 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,long,long,long)>(v21, v10, v16, v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Time: \u0001:\u0001:\u0001:\u0001");
interfaceinvoke v25.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>(v26);
label3:
v27 = v21 cmp v3;
if v27 <= 0 goto label4;
v28 = v4 + v21;
v29 = v28 - v12;
v30 = v29 cmp v3;
if v30 <= 0 goto label4;
v21 = v3;
label4:
v31 = v4 + v21;
v32 = staticinvoke <java.lang.Math: long max(long,long)>(v12, v31);
v0.<io.netty.handler.traffic.TrafficCounter: long writingTime> = v32;
return v21;
label5:
v33 = staticinvoke <java.lang.Math: long max(long,long)>(v12, v4);
v0.<io.netty.handler.traffic.TrafficCounter: long writingTime> = v33;
return 0L;
label6:
v34 = v10 + v11;
v35 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong checkInterval>;
v36 = virtualinvoke v35.<java.util.concurrent.atomic.AtomicLong: long get()>();
v37 = v16 + v36;
v38 = v34 * 1000L;
v39 = v38 / v2;
v40 = v39 - v37;
v41 = v40 + v15;
v42 = v41 cmp 10L;
if v42 <= 0 goto label9;
v43 = <io.netty.handler.traffic.TrafficCounter: io.netty.util.internal.logging.InternalLogger logger>;
v44 = interfaceinvoke v43.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v44 == 0 goto label7;
v45 = <io.netty.handler.traffic.TrafficCounter: io.netty.util.internal.logging.InternalLogger logger>;
v46 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,long,long,long)>(v41, v34, v37, v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Time: \u0001:\u0001:\u0001:\u0001");
interfaceinvoke v45.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>(v46);
label7:
v47 = v41 cmp v3;
if v47 <= 0 goto label8;
v48 = v4 + v41;
v49 = v48 - v12;
v50 = v49 cmp v3;
if v50 <= 0 goto label8;
v41 = v3;
label8:
v51 = v4 + v41;
v52 = staticinvoke <java.lang.Math: long max(long,long)>(v12, v51);
v0.<io.netty.handler.traffic.TrafficCounter: long writingTime> = v52;
return v41;
label9:
v53 = staticinvoke <java.lang.Math: long max(long,long)>(v12, v4);
v0.<io.netty.handler.traffic.TrafficCounter: long writingTime> = v53;
return 0L;
}
public java.lang.String toString()
{
io.netty.handler.traffic.TrafficCounter v0;
long v10, v12, v13, v15, v16, v2, v3, v4, v5, v6, v7, v9;
java.lang.String v1, v17;
java.util.concurrent.atomic.AtomicLong v11, v14, v8;
java.lang.StringBuilder v18;
v0 := @this: io.netty.handler.traffic.TrafficCounter;
specialinvoke v18.<java.lang.StringBuilder: void <init>(int)>(165);
v1 = v0.<io.netty.handler.traffic.TrafficCounter: java.lang.String name>;
v2 = v0.<io.netty.handler.traffic.TrafficCounter: long lastReadThroughput>;
v3 = v2 >> 10;
v4 = v0.<io.netty.handler.traffic.TrafficCounter: long lastWriteThroughput>;
v5 = v4 >> 10;
v6 = v0.<io.netty.handler.traffic.TrafficCounter: long realWriteThroughput>;
v7 = v6 >> 10;
v8 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong currentReadBytes>;
v9 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicLong: long get()>();
v10 = v9 >> 10;
v11 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong currentWrittenBytes>;
v12 = virtualinvoke v11.<java.util.concurrent.atomic.AtomicLong: long get()>();
v13 = v12 >> 10;
v14 = v0.<io.netty.handler.traffic.TrafficCounter: java.util.concurrent.atomic.AtomicLong realWrittenBytes>;
v15 = virtualinvoke v14.<java.util.concurrent.atomic.AtomicLong: long get()>();
v16 = v15 >> 10;
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,long,long,long,long,long,long)>(v1, v3, v5, v7, v10, v13, v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Monitor \u0001 Current Speed Read: \u0001 KB/s, Asked Write: \u0001 KB/s, Real Write: \u0001 KB/s, Current Read: \u0001 KB, Current asked Write: \u0001 KB, Current real Write: \u0001 KB");
return v17;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/handler/traffic/TrafficCounter;");
<io.netty.handler.traffic.TrafficCounter: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}