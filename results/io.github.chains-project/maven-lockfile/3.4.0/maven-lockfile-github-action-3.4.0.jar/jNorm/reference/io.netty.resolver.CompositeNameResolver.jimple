public final class io.netty.resolver.CompositeNameResolver extends io.netty.resolver.SimpleNameResolver
{
private final io.netty.resolver.NameResolver[] resolvers;
public transient void <init>(io.netty.util.concurrent.EventExecutor, io.netty.resolver.NameResolver[])
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.resolver.NameResolver v5;
io.netty.resolver.NameResolver[] v2;
java.lang.IllegalArgumentException v8;
java.util.List v9;
int v3, v4, v7;
java.lang.Object v11;
java.lang.String v10, v6;
io.netty.resolver.CompositeNameResolver v0;
v0 := @this: io.netty.resolver.CompositeNameResolver;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
v2 := @parameter1: io.netty.resolver.NameResolver[];
specialinvoke v0.<io.netty.resolver.SimpleNameResolver: void <init>(io.netty.util.concurrent.EventExecutor)>(v1);
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "resolvers");
v3 = 0;
label1:
v4 = lengthof v2;
if v3 >= v4 goto label2;
v5 = v2[v3];
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("resolvers[\u0001]");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v5, v6);
v3 = v3 + 1;
goto label1;
label2:
v7 = lengthof v2;
if v7 >= 2 goto label3;
v8 = new java.lang.IllegalArgumentException;
v9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.List)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("resolvers: \u0001 (expected: at least 2 resolvers)");
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v8;
label3:
v11 = virtualinvoke v2.<java.lang.Object: java.lang.Object clone()>();
v0.<io.netty.resolver.CompositeNameResolver: io.netty.resolver.NameResolver[] resolvers> = v11;
return;
}
protected void doResolve(java.lang.String, io.netty.util.concurrent.Promise) throws java.lang.Exception
{
java.lang.String v1;
io.netty.resolver.CompositeNameResolver v0;
io.netty.util.concurrent.Promise v2;
v0 := @this: io.netty.resolver.CompositeNameResolver;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.util.concurrent.Promise;
specialinvoke v0.<io.netty.resolver.CompositeNameResolver: void doResolveRec(java.lang.String,io.netty.util.concurrent.Promise,int,java.lang.Throwable)>(v1, v2, 0, null);
return;
}
private void doResolveRec(java.lang.String, io.netty.util.concurrent.Promise, int, java.lang.Throwable) throws java.lang.Exception
{
java.lang.Throwable v4;
io.netty.util.concurrent.Promise v2;
io.netty.resolver.NameResolver v8;
io.netty.resolver.NameResolver[] v5, v7;
io.netty.resolver.CompositeNameResolver$1 v10;
int v3, v6;
java.lang.String v1;
io.netty.resolver.CompositeNameResolver v0;
io.netty.util.concurrent.Future v9;
v0 := @this: io.netty.resolver.CompositeNameResolver;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 := @parameter2: int;
v4 := @parameter3: java.lang.Throwable;
v5 = v0.<io.netty.resolver.CompositeNameResolver: io.netty.resolver.NameResolver[] resolvers>;
v6 = lengthof v5;
if v3 < v6 goto label1;
interfaceinvoke v2.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v4);
goto label2;
label1:
v7 = v0.<io.netty.resolver.CompositeNameResolver: io.netty.resolver.NameResolver[] resolvers>;
v8 = v7[v3];
v9 = interfaceinvoke v8.<io.netty.resolver.NameResolver: io.netty.util.concurrent.Future resolve(java.lang.String)>(v1);
v10 = new io.netty.resolver.CompositeNameResolver$1;
specialinvoke v10.<io.netty.resolver.CompositeNameResolver$1: void <init>(io.netty.resolver.CompositeNameResolver,io.netty.util.concurrent.Promise,java.lang.String,int)>(v0, v2, v1, v3);
interfaceinvoke v9.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v10);
label2:
return;
}
protected void doResolveAll(java.lang.String, io.netty.util.concurrent.Promise) throws java.lang.Exception
{
java.lang.String v1;
io.netty.resolver.CompositeNameResolver v0;
io.netty.util.concurrent.Promise v2;
v0 := @this: io.netty.resolver.CompositeNameResolver;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.util.concurrent.Promise;
specialinvoke v0.<io.netty.resolver.CompositeNameResolver: void doResolveAllRec(java.lang.String,io.netty.util.concurrent.Promise,int,java.lang.Throwable)>(v1, v2, 0, null);
return;
}
private void doResolveAllRec(java.lang.String, io.netty.util.concurrent.Promise, int, java.lang.Throwable) throws java.lang.Exception
{
java.lang.Throwable v4;
io.netty.util.concurrent.Promise v2;
io.netty.resolver.NameResolver v8;
io.netty.resolver.NameResolver[] v5, v7;
io.netty.resolver.CompositeNameResolver$2 v10;
int v3, v6;
java.lang.String v1;
io.netty.resolver.CompositeNameResolver v0;
io.netty.util.concurrent.Future v9;
v0 := @this: io.netty.resolver.CompositeNameResolver;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 := @parameter2: int;
v4 := @parameter3: java.lang.Throwable;
v5 = v0.<io.netty.resolver.CompositeNameResolver: io.netty.resolver.NameResolver[] resolvers>;
v6 = lengthof v5;
if v3 < v6 goto label1;
interfaceinvoke v2.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v4);
goto label2;
label1:
v7 = v0.<io.netty.resolver.CompositeNameResolver: io.netty.resolver.NameResolver[] resolvers>;
v8 = v7[v3];
v9 = interfaceinvoke v8.<io.netty.resolver.NameResolver: io.netty.util.concurrent.Future resolveAll(java.lang.String)>(v1);
v10 = new io.netty.resolver.CompositeNameResolver$2;
specialinvoke v10.<io.netty.resolver.CompositeNameResolver$2: void <init>(io.netty.resolver.CompositeNameResolver,io.netty.util.concurrent.Promise,java.lang.String,int)>(v0, v2, v1, v3);
interfaceinvoke v9.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v10);
label2:
return;
}
}