final class io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter extends java.lang.Object implements io.netty.resolver.dns.AuthoritativeDnsServerCache
{
private static final io.netty.handler.codec.dns.DnsRecord[] EMPTY;
private final io.netty.resolver.dns.DnsCache cache;
void <init>(io.netty.resolver.dns.DnsCache)
{
java.lang.Object v2;
io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter v0;
io.netty.resolver.dns.DnsCache v1;
v0 := @this: io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter;
v1 := @parameter0: io.netty.resolver.dns.DnsCache;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "cache");
v0.<io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter: io.netty.resolver.dns.DnsCache cache> = v2;
return;
}
public io.netty.resolver.dns.DnsServerAddressStream get(java.lang.String)
{
java.lang.Throwable v7;
io.netty.resolver.dns.DnsCache v2;
java.util.ArrayList v8;
java.net.InetAddress v12;
io.netty.resolver.dns.SequentialDnsServerAddressStream v15;
int v10, v14, v9;
java.lang.String v1;
boolean v5;
java.net.InetSocketAddress v13;
java.util.List v4;
io.netty.handler.codec.dns.DnsRecord[] v3;
io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter v0;
java.lang.Object v11, v6;
v0 := @this: io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter: io.netty.resolver.dns.DnsCache cache>;
v3 = <io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter: io.netty.handler.codec.dns.DnsRecord[] EMPTY>;
v4 = interfaceinvoke v2.<io.netty.resolver.dns.DnsCache: java.util.List get(java.lang.String,io.netty.handler.codec.dns.DnsRecord[])>(v1, v3);
if v4 == null goto label1;
v5 = interfaceinvoke v4.<java.util.List: boolean isEmpty()>();
if v5 == 0 goto label2;
label1:
return null;
label2:
v6 = interfaceinvoke v4.<java.util.List: java.lang.Object get(int)>(0);
v7 = interfaceinvoke v6.<io.netty.resolver.dns.DnsCacheEntry: java.lang.Throwable cause()>();
if v7 == null goto label3;
return null;
label3:
v8 = new java.util.ArrayList;
v9 = interfaceinvoke v4.<java.util.List: int size()>();
specialinvoke v8.<java.util.ArrayList: void <init>(int)>(v9);
v10 = 0;
label4:
v11 = interfaceinvoke v4.<java.util.List: java.lang.Object get(int)>(v10);
v12 = interfaceinvoke v11.<io.netty.resolver.dns.DnsCacheEntry: java.net.InetAddress address()>();
v13 = new java.net.InetSocketAddress;
specialinvoke v13.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(v12, 53);
interfaceinvoke v8.<java.util.List: boolean add(java.lang.Object)>(v13);
v10 = v10 + 1;
v14 = interfaceinvoke v4.<java.util.List: int size()>();
if v10 < v14 goto label4;
v15 = new io.netty.resolver.dns.SequentialDnsServerAddressStream;
specialinvoke v15.<io.netty.resolver.dns.SequentialDnsServerAddressStream: void <init>(java.util.List,int)>(v8, 0);
return v15;
}
public void cache(java.lang.String, java.net.InetSocketAddress, long, io.netty.channel.EventLoop)
{
long v3;
io.netty.channel.EventLoop v4;
java.net.InetSocketAddress v2;
io.netty.resolver.dns.DnsCache v6;
java.net.InetAddress v8;
io.netty.handler.codec.dns.DnsRecord[] v7;
io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter v0;
java.lang.String v1;
boolean v5;
v0 := @this: io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.net.InetSocketAddress;
v3 := @parameter2: long;
v4 := @parameter3: io.netty.channel.EventLoop;
v5 = virtualinvoke v2.<java.net.InetSocketAddress: boolean isUnresolved()>();
if v5 != 0 goto label1;
v6 = v0.<io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter: io.netty.resolver.dns.DnsCache cache>;
v7 = <io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter: io.netty.handler.codec.dns.DnsRecord[] EMPTY>;
v8 = virtualinvoke v2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
interfaceinvoke v6.<io.netty.resolver.dns.DnsCache: io.netty.resolver.dns.DnsCacheEntry cache(java.lang.String,io.netty.handler.codec.dns.DnsRecord[],java.net.InetAddress,long,io.netty.channel.EventLoop)>(v1, v7, v8, v3, v4);
label1:
return;
}
public void clear()
{
io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter v0;
io.netty.resolver.dns.DnsCache v1;
v0 := @this: io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter;
v1 = v0.<io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter: io.netty.resolver.dns.DnsCache cache>;
interfaceinvoke v1.<io.netty.resolver.dns.DnsCache: void clear()>();
return;
}
public boolean clear(java.lang.String)
{
io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter v0;
java.lang.String v1;
io.netty.resolver.dns.DnsCache v2;
boolean v3;
v0 := @this: io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter: io.netty.resolver.dns.DnsCache cache>;
v3 = interfaceinvoke v2.<io.netty.resolver.dns.DnsCache: boolean clear(java.lang.String)>(v1);
return v3;
}
static void <clinit>()
{
io.netty.handler.codec.dns.DnsRecord[] v0;
v0 = newarray (io.netty.handler.codec.dns.DnsRecord)[0];
<io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter: io.netty.handler.codec.dns.DnsRecord[] EMPTY> = v0;
return;
}
}