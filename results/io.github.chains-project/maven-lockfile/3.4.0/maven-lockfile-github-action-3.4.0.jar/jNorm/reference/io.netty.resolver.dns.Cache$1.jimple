class io.netty.resolver.dns.Cache$1 extends java.lang.Object implements java.util.concurrent.ScheduledFuture
{
void <init>()
{
io.netty.resolver.dns.Cache$1 v0;
v0 := @this: io.netty.resolver.dns.Cache$1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public boolean cancel(boolean)
{
io.netty.resolver.dns.Cache$1 v0;
boolean v1;
v0 := @this: io.netty.resolver.dns.Cache$1;
v1 := @parameter0: boolean;
return 0;
}
public long getDelay(java.util.concurrent.TimeUnit)
{
io.netty.resolver.dns.Cache$1 v0;
java.util.concurrent.TimeUnit v1;
v0 := @this: io.netty.resolver.dns.Cache$1;
v1 := @parameter0: java.util.concurrent.TimeUnit;
return -9223372036854775808L;
}
public int compareTo(java.util.concurrent.Delayed)
{
io.netty.resolver.dns.Cache$1 v0;
java.lang.UnsupportedOperationException v2;
java.util.concurrent.Delayed v1;
v0 := @this: io.netty.resolver.dns.Cache$1;
v1 := @parameter0: java.util.concurrent.Delayed;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public boolean isCancelled()
{
io.netty.resolver.dns.Cache$1 v0;
v0 := @this: io.netty.resolver.dns.Cache$1;
return 1;
}
public boolean isDone()
{
io.netty.resolver.dns.Cache$1 v0;
v0 := @this: io.netty.resolver.dns.Cache$1;
return 1;
}
public java.lang.Object get()
{
io.netty.resolver.dns.Cache$1 v0;
java.lang.UnsupportedOperationException v1;
v0 := @this: io.netty.resolver.dns.Cache$1;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public java.lang.Object get(long, java.util.concurrent.TimeUnit)
{
io.netty.resolver.dns.Cache$1 v0;
java.util.concurrent.TimeUnit v2;
java.lang.UnsupportedOperationException v3;
long v1;
v0 := @this: io.netty.resolver.dns.Cache$1;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
}