public final class io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider extends java.lang.Object implements io.netty.resolver.dns.DnsServerAddressStreamProvider
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final java.lang.String DEFAULT_FALLBACK_SERVER_PROPERTY;
public static final io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider INSTANCE;
private static final java.util.List DEFAULT_NAME_SERVER_LIST;
private static final io.netty.resolver.dns.DnsServerAddresses DEFAULT_NAME_SERVERS;
static final int DNS_PORT;
private void <init>()
{
io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider v0;
v0 := @this: io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public io.netty.resolver.dns.DnsServerAddressStream nameServerAddressStream(java.lang.String)
{
io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider v0;
io.netty.resolver.dns.DnsServerAddresses v2;
io.netty.resolver.dns.DnsServerAddressStream v3;
java.lang.String v1;
v0 := @this: io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider;
v1 := @parameter0: java.lang.String;
v2 = <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: io.netty.resolver.dns.DnsServerAddresses DEFAULT_NAME_SERVERS>;
v3 = virtualinvoke v2.<io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddressStream stream()>();
return v3;
}
public static java.util.List defaultAddressList()
{
java.util.List v0;
v0 = <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: java.util.List DEFAULT_NAME_SERVER_LIST>;
return v0;
}
public static io.netty.resolver.dns.DnsServerAddresses defaultAddresses()
{
io.netty.resolver.dns.DnsServerAddresses v0;
v0 = <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: io.netty.resolver.dns.DnsServerAddresses DEFAULT_NAME_SERVERS>;
return v0;
}
static void <clinit>()
{
java.net.InetAddress v19, v44;
java.lang.reflect.Method v10, v8;
boolean v16, v21, v23, v3, v31, v32, v37, v41, v43, v45, v46, v5, v54;
java.net.InetSocketAddress v18, v36, v48, v49, v51, v52;
java.lang.Exception v20;
java.util.List v56, v57;
io.netty.util.internal.logging.InternalLogger v0, v22, v24, v40, v42, v53, v55;
java.net.InetSocketAddress[] v47, v50;
java.lang.Object[] v11, v13;
java.lang.String[] v26;
java.util.ArrayList v2;
io.netty.resolver.dns.DnsServerAddresses v58;
int v27, v28, v4;
java.lang.String v25, v29, v30, v34, v35, v39;
io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider v1;
java.util.Iterator v15;
java.lang.Class[] v7, v9;
java.lang.Class v6;
java.lang.Object v12, v14, v17;
java.lang.ExceptionInInitializerError v33, v38;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/resolver/dns/DefaultDnsServerAddressStreamProvider;");
<io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: io.netty.util.internal.logging.InternalLogger logger> = v0;
v1 = new io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider;
specialinvoke v1.<io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: void <init>()>();
<io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider INSTANCE> = v1;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(2);
v3 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean isAndroid()>();
if v3 != 0 goto label01;
staticinvoke <io.netty.resolver.dns.DirContextUtils: void addNameServers(java.util.List,int)>(v2, 53);
label01:
v4 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v4 >= 9 goto label05;
v5 = interfaceinvoke v2.<java.util.List: boolean isEmpty()>();
if v5 == 0 goto label05;
label02:
v6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("sun.net.dns.ResolverConfiguration");
v7 = newarray (java.lang.Class)[0];
v8 = virtualinvoke v6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("open", v7);
v9 = newarray (java.lang.Class)[0];
v10 = virtualinvoke v6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("nameservers", v9);
v11 = newarray (java.lang.Object)[0];
v12 = virtualinvoke v8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, v11);
v13 = newarray (java.lang.Object)[0];
v14 = virtualinvoke v10.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v12, v13);
v15 = interfaceinvoke v14.<java.util.List: java.util.Iterator iterator()>();
label03:
v16 = interfaceinvoke v15.<java.util.Iterator: boolean hasNext()>();
if v16 == 0 goto label05;
v17 = interfaceinvoke v15.<java.util.Iterator: java.lang.Object next()>();
if v17 == null goto label03;
v18 = new java.net.InetSocketAddress;
v19 = staticinvoke <io.netty.util.internal.SocketUtils: java.net.InetAddress addressByName(java.lang.String)>(v17);
specialinvoke v18.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(v19, 53);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v18);
goto label03;
label04:
v20 := @caughtexception;
label05:
v21 = interfaceinvoke v2.<java.util.List: boolean isEmpty()>();
if v21 != 0 goto label06;
v22 = <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: io.netty.util.internal.logging.InternalLogger logger>;
v23 = interfaceinvoke v22.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v23 == 0 goto label15;
v24 = <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v24.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("Default DNS servers: {} (sun.net.dns.ResolverConfiguration)", v2);
goto label15;
label06:
v25 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String,java.lang.String)>("io.netty.resolver.dns.defaultNameServerFallback", null);
if v25 == null goto label11;
v26 = virtualinvoke v25.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");
v27 = lengthof v26;
v28 = 0;
label07:
if v28 >= v27 goto label09;
v29 = v26[v28];
v30 = virtualinvoke v29.<java.lang.String: java.lang.String trim()>();
v31 = staticinvoke <io.netty.util.NetUtil: boolean isValidIpV4Address(java.lang.String)>(v30);
if v31 != 0 goto label08;
v32 = staticinvoke <io.netty.util.NetUtil: boolean isValidIpV6Address(java.lang.String)>(v30);
if v32 != 0 goto label08;
v33 = new java.lang.ExceptionInInitializerError;
v34 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v25) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("io.netty.resolver.dns.defaultNameServerFallback doesn\'t contain a valid list of NameServers: \u0001");
specialinvoke v33.<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>(v34);
throw v33;
label08:
v35 = virtualinvoke v29.<java.lang.String: java.lang.String trim()>();
v36 = staticinvoke <io.netty.util.internal.SocketUtils: java.net.InetSocketAddress socketAddress(java.lang.String,int)>(v35, 53);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v36);
v28 = v28 + 1;
goto label07;
label09:
v37 = interfaceinvoke v2.<java.util.List: boolean isEmpty()>();
if v37 == 0 goto label10;
v38 = new java.lang.ExceptionInInitializerError;
v39 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v25) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("io.netty.resolver.dns.defaultNameServerFallback doesn\'t contain a valid list of NameServers: \u0001");
specialinvoke v38.<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>(v39);
throw v38;
label10:
v40 = <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: io.netty.util.internal.logging.InternalLogger logger>;
v41 = interfaceinvoke v40.<io.netty.util.internal.logging.InternalLogger: boolean isWarnEnabled()>();
if v41 == 0 goto label15;
v42 = <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v42.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Default DNS servers: {} (Configured by {} system property)", v2, "io.netty.resolver.dns.defaultNameServerFallback");
goto label15;
label11:
v43 = staticinvoke <io.netty.util.NetUtil: boolean isIpV6AddressesPreferred()>();
if v43 != 0 goto label12;
v44 = <io.netty.util.NetUtil: java.net.InetAddress LOCALHOST>;
v45 = v44 instanceof java.net.Inet6Address;
if v45 == 0 goto label13;
v46 = staticinvoke <io.netty.util.NetUtil: boolean isIpV4StackPreferred()>();
if v46 != 0 goto label13;
label12:
v47 = newarray (java.net.InetSocketAddress)[2];
v48 = staticinvoke <io.netty.util.internal.SocketUtils: java.net.InetSocketAddress socketAddress(java.lang.String,int)>("2001:4860:4860::8888", 53);
v47[0] = v48;
v49 = staticinvoke <io.netty.util.internal.SocketUtils: java.net.InetSocketAddress socketAddress(java.lang.String,int)>("2001:4860:4860::8844", 53);
v47[1] = v49;
staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(v2, v47);
goto label14;
label13:
v50 = newarray (java.net.InetSocketAddress)[2];
v51 = staticinvoke <io.netty.util.internal.SocketUtils: java.net.InetSocketAddress socketAddress(java.lang.String,int)>("8.8.8.8", 53);
v50[0] = v51;
v52 = staticinvoke <io.netty.util.internal.SocketUtils: java.net.InetSocketAddress socketAddress(java.lang.String,int)>("8.8.4.4", 53);
v50[1] = v52;
staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(v2, v50);
label14:
v53 = <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: io.netty.util.internal.logging.InternalLogger logger>;
v54 = interfaceinvoke v53.<io.netty.util.internal.logging.InternalLogger: boolean isWarnEnabled()>();
if v54 == 0 goto label15;
v55 = <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v55.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object)>("Default DNS servers: {} (Google Public DNS as a fallback)", v2);
label15:
v56 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v2);
<io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: java.util.List DEFAULT_NAME_SERVER_LIST> = v56;
v57 = <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: java.util.List DEFAULT_NAME_SERVER_LIST>;
v58 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses sequential(java.lang.Iterable)>(v57);
<io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: io.netty.resolver.dns.DnsServerAddresses DEFAULT_NAME_SERVERS> = v58;
return;
catch java.lang.Exception from label02 to label04 with label04;
}
}