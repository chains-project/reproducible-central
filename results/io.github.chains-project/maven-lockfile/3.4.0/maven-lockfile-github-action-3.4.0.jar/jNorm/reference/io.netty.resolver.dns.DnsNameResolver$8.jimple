class io.netty.resolver.dns.DnsNameResolver$8 extends java.lang.Object implements io.netty.util.concurrent.GenericFutureListener
{
final io.netty.util.concurrent.Promise val$promise;
final java.lang.String val$hostname;
final io.netty.handler.codec.dns.DnsRecord[] val$additionals;
final io.netty.util.concurrent.Promise val$originalPromise;
final io.netty.resolver.dns.DnsCache val$resolveCache;
final boolean val$completeEarlyIfPossible;
final io.netty.resolver.dns.DnsNameResolver this$0;
void <init>(io.netty.resolver.dns.DnsNameResolver, io.netty.util.concurrent.Promise, java.lang.String, io.netty.handler.codec.dns.DnsRecord[], io.netty.util.concurrent.Promise, io.netty.resolver.dns.DnsCache, boolean)
{
io.netty.resolver.dns.DnsNameResolver v1;
io.netty.util.concurrent.Promise v2, v5;
io.netty.resolver.dns.DnsNameResolver$8 v0;
io.netty.resolver.dns.DnsCache v6;
io.netty.handler.codec.dns.DnsRecord[] v4;
java.lang.String v3;
boolean v7;
v0 := @this: io.netty.resolver.dns.DnsNameResolver$8;
v1 := @parameter0: io.netty.resolver.dns.DnsNameResolver;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.netty.handler.codec.dns.DnsRecord[];
v5 := @parameter4: io.netty.util.concurrent.Promise;
v6 := @parameter5: io.netty.resolver.dns.DnsCache;
v7 := @parameter6: boolean;
v0.<io.netty.resolver.dns.DnsNameResolver$8: io.netty.resolver.dns.DnsNameResolver this$0> = v1;
v0.<io.netty.resolver.dns.DnsNameResolver$8: io.netty.util.concurrent.Promise val$promise> = v2;
v0.<io.netty.resolver.dns.DnsNameResolver$8: java.lang.String val$hostname> = v3;
v0.<io.netty.resolver.dns.DnsNameResolver$8: io.netty.handler.codec.dns.DnsRecord[] val$additionals> = v4;
v0.<io.netty.resolver.dns.DnsNameResolver$8: io.netty.util.concurrent.Promise val$originalPromise> = v5;
v0.<io.netty.resolver.dns.DnsNameResolver$8: io.netty.resolver.dns.DnsCache val$resolveCache> = v6;
v0.<io.netty.resolver.dns.DnsNameResolver$8: boolean val$completeEarlyIfPossible> = v7;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void operationComplete(io.netty.util.concurrent.Future)
{
java.lang.Throwable v5;
io.netty.resolver.dns.DnsNameResolver v7;
io.netty.util.concurrent.Promise v10, v11, v14, v3;
io.netty.resolver.dns.DnsNameResolver$8 v0;
io.netty.resolver.dns.DnsCache v12;
io.netty.handler.codec.dns.DnsRecord[] v9;
java.lang.Object v4;
java.lang.String v8;
io.netty.util.concurrent.Future v1;
boolean v13, v2, v6;
v0 := @this: io.netty.resolver.dns.DnsNameResolver$8;
v1 := @parameter0: io.netty.util.concurrent.Future;
v2 = interfaceinvoke v1.<io.netty.util.concurrent.Future: boolean isSuccess()>();
if v2 == 0 goto label1;
v3 = v0.<io.netty.resolver.dns.DnsNameResolver$8: io.netty.util.concurrent.Promise val$promise>;
v4 = interfaceinvoke v1.<io.netty.util.concurrent.Future: java.lang.Object getNow()>();
interfaceinvoke v3.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(v4);
goto label3;
label1:
v5 = interfaceinvoke v1.<io.netty.util.concurrent.Future: java.lang.Throwable cause()>();
v6 = staticinvoke <io.netty.resolver.dns.DnsNameResolver: boolean isTimeoutError(java.lang.Throwable)>(v5);
if v6 == 0 goto label2;
v7 = v0.<io.netty.resolver.dns.DnsNameResolver$8: io.netty.resolver.dns.DnsNameResolver this$0>;
v8 = v0.<io.netty.resolver.dns.DnsNameResolver$8: java.lang.String val$hostname>;
v9 = v0.<io.netty.resolver.dns.DnsNameResolver$8: io.netty.handler.codec.dns.DnsRecord[] val$additionals>;
v10 = v0.<io.netty.resolver.dns.DnsNameResolver$8: io.netty.util.concurrent.Promise val$originalPromise>;
v11 = v0.<io.netty.resolver.dns.DnsNameResolver$8: io.netty.util.concurrent.Promise val$promise>;
v12 = v0.<io.netty.resolver.dns.DnsNameResolver$8: io.netty.resolver.dns.DnsCache val$resolveCache>;
v13 = v0.<io.netty.resolver.dns.DnsNameResolver$8: boolean val$completeEarlyIfPossible>;
specialinvoke v7.<io.netty.resolver.dns.DnsNameResolver: void resolveNow(java.lang.String,io.netty.handler.codec.dns.DnsRecord[],io.netty.util.concurrent.Promise,io.netty.util.concurrent.Promise,io.netty.resolver.dns.DnsCache,boolean)>(v8, v9, v10, v11, v12, v13);
goto label3;
label2:
v14 = v0.<io.netty.resolver.dns.DnsNameResolver$8: io.netty.util.concurrent.Promise val$promise>;
interfaceinvoke v14.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v5);
label3:
return;
}
}