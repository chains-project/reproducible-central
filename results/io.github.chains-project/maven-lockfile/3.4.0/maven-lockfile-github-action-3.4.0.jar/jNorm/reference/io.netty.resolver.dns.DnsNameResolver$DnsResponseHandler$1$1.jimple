class io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1 extends io.netty.channel.ChannelInboundHandlerAdapter
{
final io.netty.resolver.dns.TcpDnsQueryContext val$tcpCtx;
final io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1 this$2;
void <init>(io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1, io.netty.resolver.dns.TcpDnsQueryContext)
{
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1 v1;
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1 v0;
io.netty.resolver.dns.TcpDnsQueryContext v2;
v0 := @this: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1;
v1 := @parameter0: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1;
v2 := @parameter1: io.netty.resolver.dns.TcpDnsQueryContext;
v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1 this$2> = v1;
v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1: io.netty.resolver.dns.TcpDnsQueryContext val$tcpCtx> = v2;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void <init>()>();
return;
}
public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object)
{
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1 v11, v15;
java.lang.Object[] v8;
java.net.SocketAddress v10, v23, v25;
io.netty.resolver.dns.DnsQueryContext v18;
io.netty.handler.codec.dns.DatagramDnsResponse v16;
java.lang.Integer v28, v9;
io.netty.channel.ChannelHandlerContext v1;
int v4;
io.netty.resolver.dns.TcpDnsQueryContext v19, v20, v26;
boolean v6;
io.netty.resolver.dns.DnsNameResolver v13;
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler v12;
io.netty.resolver.dns.DnsQueryContextManager v14;
java.net.InetSocketAddress v17;
io.netty.channel.Channel v22, v24, v3;
io.netty.resolver.dns.DnsNameResolver$AddressedEnvelopeAdapter v21;
io.netty.util.internal.logging.InternalLogger v27, v5, v7;
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1 v0;
java.lang.Object v2;
v0 := @this: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v4 = interfaceinvoke v2.<io.netty.handler.codec.dns.DnsResponse: int id()>();
v5 = <io.netty.resolver.dns.DnsNameResolver: io.netty.util.internal.logging.InternalLogger logger>;
v6 = interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v6 == 0 goto label1;
v7 = <io.netty.resolver.dns.DnsNameResolver: io.netty.util.internal.logging.InternalLogger logger>;
v8 = newarray (java.lang.Object)[4];
v8[0] = v3;
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
v8[1] = v9;
v10 = interfaceinvoke v3.<io.netty.channel.Channel: java.net.SocketAddress remoteAddress()>();
v8[2] = v10;
v8[3] = v2;
interfaceinvoke v7.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object[])>("{} RECEIVED: TCP [{}: {}], {}", v8);
label1:
v11 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1 this$2>;
v12 = v11.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler this$1>;
v13 = v12.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler: io.netty.resolver.dns.DnsNameResolver this$0>;
v14 = v13.<io.netty.resolver.dns.DnsNameResolver: io.netty.resolver.dns.DnsQueryContextManager queryContextManager>;
v15 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1 this$2>;
v16 = v15.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1: io.netty.handler.codec.dns.DatagramDnsResponse val$res>;
v17 = virtualinvoke v16.<io.netty.handler.codec.dns.DatagramDnsResponse: java.net.InetSocketAddress sender()>();
v18 = virtualinvoke v14.<io.netty.resolver.dns.DnsQueryContextManager: io.netty.resolver.dns.DnsQueryContext get(java.net.InetSocketAddress,int)>(v17, v4);
v19 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1: io.netty.resolver.dns.TcpDnsQueryContext val$tcpCtx>;
if v18 != v19 goto label2;
v20 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1: io.netty.resolver.dns.TcpDnsQueryContext val$tcpCtx>;
v21 = new io.netty.resolver.dns.DnsNameResolver$AddressedEnvelopeAdapter;
v22 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v23 = interfaceinvoke v22.<io.netty.channel.Channel: java.net.SocketAddress remoteAddress()>();
v24 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v25 = interfaceinvoke v24.<io.netty.channel.Channel: java.net.SocketAddress localAddress()>();
specialinvoke v21.<io.netty.resolver.dns.DnsNameResolver$AddressedEnvelopeAdapter: void <init>(java.net.InetSocketAddress,java.net.InetSocketAddress,io.netty.handler.codec.dns.DnsResponse)>(v23, v25, v2);
virtualinvoke v20.<io.netty.resolver.dns.TcpDnsQueryContext: void finish(io.netty.channel.AddressedEnvelope)>(v21);
goto label3;
label2:
interfaceinvoke v2.<io.netty.handler.codec.dns.DnsResponse: boolean release()>();
v26 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1: io.netty.resolver.dns.TcpDnsQueryContext val$tcpCtx>;
virtualinvoke v26.<io.netty.resolver.dns.TcpDnsQueryContext: boolean tryFailure(java.lang.String,java.lang.Throwable,boolean)>("Received TCP DNS response with unexpected ID", null, 0);
v27 = <io.netty.resolver.dns.DnsNameResolver: io.netty.util.internal.logging.InternalLogger logger>;
v28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
interfaceinvoke v27.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Received a DNS response with an unexpected ID: TCP [{}: {}]", v3, v28);
label3:
return;
}
public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable)
{
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1 v10;
java.lang.Throwable v2;
java.lang.Object[] v8;
java.net.SocketAddress v14;
java.lang.Integer v12;
io.netty.channel.Channel v13, v9;
io.netty.channel.ChannelHandlerContext v1;
io.netty.util.internal.logging.InternalLogger v5, v7;
int v11;
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1 v0;
io.netty.resolver.dns.TcpDnsQueryContext v3;
boolean v4, v6;
v0 := @this: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Throwable;
v3 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1: io.netty.resolver.dns.TcpDnsQueryContext val$tcpCtx>;
v4 = virtualinvoke v3.<io.netty.resolver.dns.TcpDnsQueryContext: boolean tryFailure(java.lang.String,java.lang.Throwable,boolean)>("TCP fallback error", v2, 0);
if v4 == 0 goto label1;
v5 = <io.netty.resolver.dns.DnsNameResolver: io.netty.util.internal.logging.InternalLogger logger>;
v6 = interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v6 == 0 goto label1;
v7 = <io.netty.resolver.dns.DnsNameResolver: io.netty.util.internal.logging.InternalLogger logger>;
v8 = newarray (java.lang.Object)[4];
v9 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v8[0] = v9;
v10 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1 this$2>;
v11 = v10.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1: int val$queryId>;
v12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v11);
v8[1] = v12;
v13 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v14 = interfaceinvoke v13.<io.netty.channel.Channel: java.net.SocketAddress remoteAddress()>();
v8[2] = v14;
v8[3] = v2;
interfaceinvoke v7.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object[])>("{} Error during processing response: TCP [{}: {}]", v8);
label1:
return;
}
}