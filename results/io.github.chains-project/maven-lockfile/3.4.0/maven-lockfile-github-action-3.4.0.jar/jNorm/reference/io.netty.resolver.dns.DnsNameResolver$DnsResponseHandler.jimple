final class io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler extends io.netty.channel.ChannelInboundHandlerAdapter
{
private final io.netty.util.concurrent.Promise channelActivePromise;
final io.netty.resolver.dns.DnsNameResolver this$0;
void <init>(io.netty.resolver.dns.DnsNameResolver, io.netty.util.concurrent.Promise)
{
io.netty.resolver.dns.DnsNameResolver v1;
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler v0;
io.netty.util.concurrent.Promise v2;
v0 := @this: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler;
v1 := @parameter0: io.netty.resolver.dns.DnsNameResolver;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler: io.netty.resolver.dns.DnsNameResolver this$0> = v1;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void <init>()>();
v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler: io.netty.util.concurrent.Promise channelActivePromise> = v2;
return;
}
public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object)
{
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1 v36;
io.netty.resolver.dns.DnsQueryContext v15;
java.lang.Integer v10, v19;
io.netty.bootstrap.AbstractBootstrap v26, v29, v32;
boolean v20, v5;
io.netty.resolver.dns.DnsNameResolver v12, v17, v21, v27, v30, v8;
io.netty.channel.EventLoop v28;
java.net.InetSocketAddress v11, v14, v34;
io.netty.util.internal.logging.InternalLogger v16, v4, v6;
java.lang.Object[] v7;
io.netty.channel.ChannelOption v24;
io.netty.channel.ChannelHandlerContext v1;
int v3;
java.lang.Boolean v25;
io.netty.channel.ChannelFactory v22, v31;
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler v0;
io.netty.resolver.dns.DnsQueryContextManager v13;
io.netty.handler.codec.dns.TcpDnsQueryEncoder v33;
io.netty.channel.ChannelFuture v35;
io.netty.channel.Channel v18, v9;
io.netty.bootstrap.Bootstrap v23;
java.lang.Object v2;
v0 := @this: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v2.<io.netty.handler.codec.dns.DatagramDnsResponse: int id()>();
v4 = <io.netty.resolver.dns.DnsNameResolver: io.netty.util.internal.logging.InternalLogger logger>;
v5 = interfaceinvoke v4.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v5 == 0 goto label1;
v6 = <io.netty.resolver.dns.DnsNameResolver: io.netty.util.internal.logging.InternalLogger logger>;
v7 = newarray (java.lang.Object)[4];
v8 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler: io.netty.resolver.dns.DnsNameResolver this$0>;
v9 = v8.<io.netty.resolver.dns.DnsNameResolver: io.netty.channel.Channel ch>;
v7[0] = v9;
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v7[1] = v10;
v11 = virtualinvoke v2.<io.netty.handler.codec.dns.DatagramDnsResponse: java.net.InetSocketAddress sender()>();
v7[2] = v11;
v7[3] = v2;
interfaceinvoke v6.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object[])>("{} RECEIVED: UDP [{}: {}], {}", v7);
label1:
v12 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler: io.netty.resolver.dns.DnsNameResolver this$0>;
v13 = v12.<io.netty.resolver.dns.DnsNameResolver: io.netty.resolver.dns.DnsQueryContextManager queryContextManager>;
v14 = virtualinvoke v2.<io.netty.handler.codec.dns.DatagramDnsResponse: java.net.InetSocketAddress sender()>();
v15 = virtualinvoke v13.<io.netty.resolver.dns.DnsQueryContextManager: io.netty.resolver.dns.DnsQueryContext get(java.net.InetSocketAddress,int)>(v14, v3);
if v15 != null goto label2;
v16 = <io.netty.resolver.dns.DnsNameResolver: io.netty.util.internal.logging.InternalLogger logger>;
v17 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler: io.netty.resolver.dns.DnsNameResolver this$0>;
v18 = v17.<io.netty.resolver.dns.DnsNameResolver: io.netty.channel.Channel ch>;
v19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
interfaceinvoke v16.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Received a DNS response with an unknown ID: UDP [{}: {}]", v18, v19);
virtualinvoke v2.<io.netty.handler.codec.dns.DatagramDnsResponse: boolean release()>();
return;
label2:
v20 = virtualinvoke v2.<io.netty.handler.codec.dns.DatagramDnsResponse: boolean isTruncated()>();
if v20 == 0 goto label3;
v21 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler: io.netty.resolver.dns.DnsNameResolver this$0>;
v22 = v21.<io.netty.resolver.dns.DnsNameResolver: io.netty.channel.ChannelFactory socketChannelFactory>;
if v22 != null goto label4;
label3:
virtualinvoke v15.<io.netty.resolver.dns.DnsQueryContext: void finish(io.netty.channel.AddressedEnvelope)>(v2);
return;
label4:
v23 = new io.netty.bootstrap.Bootstrap;
specialinvoke v23.<io.netty.bootstrap.Bootstrap: void <init>()>();
v24 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_REUSEADDR>;
v25 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
v26 = virtualinvoke v23.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v24, v25);
v27 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler: io.netty.resolver.dns.DnsNameResolver this$0>;
v28 = virtualinvoke v27.<io.netty.resolver.dns.DnsNameResolver: io.netty.channel.EventLoop executor()>();
v29 = virtualinvoke v26.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap group(io.netty.channel.EventLoopGroup)>(v28);
v30 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler: io.netty.resolver.dns.DnsNameResolver this$0>;
v31 = v30.<io.netty.resolver.dns.DnsNameResolver: io.netty.channel.ChannelFactory socketChannelFactory>;
v32 = virtualinvoke v29.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap channelFactory(io.netty.channel.ChannelFactory)>(v31);
v33 = <io.netty.resolver.dns.DnsNameResolver: io.netty.handler.codec.dns.TcpDnsQueryEncoder TCP_ENCODER>;
virtualinvoke v32.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap handler(io.netty.channel.ChannelHandler)>(v33);
v34 = virtualinvoke v2.<io.netty.handler.codec.dns.DatagramDnsResponse: java.net.InetSocketAddress sender()>();
v35 = virtualinvoke v23.<io.netty.bootstrap.Bootstrap: io.netty.channel.ChannelFuture connect(java.net.SocketAddress)>(v34);
v36 = new io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1;
specialinvoke v36.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1: void <init>(io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler,int,io.netty.resolver.dns.DnsQueryContext,io.netty.handler.codec.dns.DatagramDnsResponse)>(v0, v3, v15, v2);
interfaceinvoke v35.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v36);
return;
}
public void channelActive(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.Channel v3;
io.netty.channel.ChannelHandlerContext v1;
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler v0;
io.netty.util.concurrent.Promise v2;
v0 := @this: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void channelActive(io.netty.channel.ChannelHandlerContext)>(v1);
v2 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler: io.netty.util.concurrent.Promise channelActivePromise>;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
interfaceinvoke v2.<io.netty.util.concurrent.Promise: boolean trySuccess(java.lang.Object)>(v3);
return;
}
public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable)
{
java.lang.Throwable v2;
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler v0;
io.netty.channel.Channel v5, v7;
io.netty.channel.ChannelHandlerContext v1;
io.netty.util.internal.logging.InternalLogger v4, v6;
boolean v3;
v0 := @this: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Throwable;
v3 = v2 instanceof io.netty.handler.codec.CorruptedFrameException;
if v3 == 0 goto label1;
v4 = <io.netty.resolver.dns.DnsNameResolver: io.netty.util.internal.logging.InternalLogger logger>;
v5 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
interfaceinvoke v4.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Unable to decode DNS response: UDP [{}]", v5, v2);
goto label2;
label1:
v6 = <io.netty.resolver.dns.DnsNameResolver: io.netty.util.internal.logging.InternalLogger logger>;
v7 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
interfaceinvoke v6.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Unexpected exception: UDP [{}]", v7, v2);
label2:
return;
}
}