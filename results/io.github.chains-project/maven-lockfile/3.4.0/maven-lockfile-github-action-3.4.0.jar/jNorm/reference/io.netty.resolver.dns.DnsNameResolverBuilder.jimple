public final class io.netty.resolver.dns.DnsNameResolverBuilder extends java.lang.Object
{
volatile io.netty.channel.EventLoop eventLoop;
private io.netty.channel.ChannelFactory channelFactory;
private io.netty.channel.ChannelFactory socketChannelFactory;
private io.netty.resolver.dns.DnsCache resolveCache;
private io.netty.resolver.dns.DnsCnameCache cnameCache;
private io.netty.resolver.dns.AuthoritativeDnsServerCache authoritativeDnsServerCache;
private java.net.SocketAddress localAddress;
private java.lang.Integer minTtl;
private java.lang.Integer maxTtl;
private java.lang.Integer negativeTtl;
private long queryTimeoutMillis;
private io.netty.resolver.ResolvedAddressTypes resolvedAddressTypes;
private boolean completeOncePreferredResolved;
private boolean recursionDesired;
private int maxQueriesPerResolve;
private boolean traceEnabled;
private int maxPayloadSize;
private boolean optResourceEnabled;
private io.netty.resolver.HostsFileEntriesResolver hostsFileEntriesResolver;
private io.netty.resolver.dns.DnsServerAddressStreamProvider dnsServerAddressStreamProvider;
private io.netty.resolver.dns.DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory;
private java.lang.String[] searchDomains;
private int ndots;
private boolean decodeIdn;
private int maxNumConsolidation;
public void <init>()
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
io.netty.resolver.HostsFileEntriesResolver v3;
io.netty.resolver.dns.DnsServerAddressStreamProvider v4;
io.netty.resolver.dns.NoopDnsQueryLifecycleObserverFactory v5;
int v2, v6;
io.netty.resolver.ResolvedAddressTypes v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: long queryTimeoutMillis> = -1L;
v1 = <io.netty.resolver.dns.DnsNameResolver: io.netty.resolver.ResolvedAddressTypes DEFAULT_RESOLVE_ADDRESS_TYPES>;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.ResolvedAddressTypes resolvedAddressTypes> = v1;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean recursionDesired> = 1;
v2 = (int) -1;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: int maxQueriesPerResolve> = v2;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: int maxPayloadSize> = 4096;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean optResourceEnabled> = 1;
v3 = <io.netty.resolver.HostsFileEntriesResolver: io.netty.resolver.HostsFileEntriesResolver DEFAULT>;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.HostsFileEntriesResolver hostsFileEntriesResolver> = v3;
v4 = staticinvoke <io.netty.resolver.dns.DnsServerAddressStreamProviders: io.netty.resolver.dns.DnsServerAddressStreamProvider platformDefault()>();
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsServerAddressStreamProvider dnsServerAddressStreamProvider> = v4;
v5 = <io.netty.resolver.dns.NoopDnsQueryLifecycleObserverFactory: io.netty.resolver.dns.NoopDnsQueryLifecycleObserverFactory INSTANCE>;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory> = v5;
v6 = (int) -1;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: int ndots> = v6;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean decodeIdn> = 1;
return;
}
public void <init>(io.netty.channel.EventLoop)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
io.netty.resolver.dns.DnsServerAddressStreamProvider v5;
io.netty.channel.EventLoop v1;
io.netty.resolver.HostsFileEntriesResolver v4;
io.netty.resolver.dns.NoopDnsQueryLifecycleObserverFactory v6;
int v3, v7;
io.netty.resolver.ResolvedAddressTypes v2;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: io.netty.channel.EventLoop;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: long queryTimeoutMillis> = -1L;
v2 = <io.netty.resolver.dns.DnsNameResolver: io.netty.resolver.ResolvedAddressTypes DEFAULT_RESOLVE_ADDRESS_TYPES>;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.ResolvedAddressTypes resolvedAddressTypes> = v2;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean recursionDesired> = 1;
v3 = (int) -1;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: int maxQueriesPerResolve> = v3;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: int maxPayloadSize> = 4096;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean optResourceEnabled> = 1;
v4 = <io.netty.resolver.HostsFileEntriesResolver: io.netty.resolver.HostsFileEntriesResolver DEFAULT>;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.HostsFileEntriesResolver hostsFileEntriesResolver> = v4;
v5 = staticinvoke <io.netty.resolver.dns.DnsServerAddressStreamProviders: io.netty.resolver.dns.DnsServerAddressStreamProvider platformDefault()>();
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsServerAddressStreamProvider dnsServerAddressStreamProvider> = v5;
v6 = <io.netty.resolver.dns.NoopDnsQueryLifecycleObserverFactory: io.netty.resolver.dns.NoopDnsQueryLifecycleObserverFactory INSTANCE>;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory> = v6;
v7 = (int) -1;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: int ndots> = v7;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean decodeIdn> = 1;
virtualinvoke v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder eventLoop(io.netty.channel.EventLoop)>(v1);
return;
}
public io.netty.resolver.dns.DnsNameResolverBuilder eventLoop(io.netty.channel.EventLoop)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
io.netty.channel.EventLoop v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: io.netty.channel.EventLoop;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.channel.EventLoop eventLoop> = v1;
return v0;
}
protected io.netty.channel.ChannelFactory channelFactory()
{
io.netty.channel.ChannelFactory v1;
io.netty.resolver.dns.DnsNameResolverBuilder v0;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.channel.ChannelFactory channelFactory>;
return v1;
}
public io.netty.resolver.dns.DnsNameResolverBuilder channelFactory(io.netty.channel.ChannelFactory)
{
io.netty.channel.ChannelFactory v1;
io.netty.resolver.dns.DnsNameResolverBuilder v0;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: io.netty.channel.ChannelFactory;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.channel.ChannelFactory channelFactory> = v1;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder channelType(java.lang.Class)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0, v3;
io.netty.channel.ReflectiveChannelFactory v2;
java.lang.Class v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: java.lang.Class;
v2 = new io.netty.channel.ReflectiveChannelFactory;
specialinvoke v2.<io.netty.channel.ReflectiveChannelFactory: void <init>(java.lang.Class)>(v1);
v3 = virtualinvoke v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder channelFactory(io.netty.channel.ChannelFactory)>(v2);
return v3;
}
public io.netty.resolver.dns.DnsNameResolverBuilder socketChannelFactory(io.netty.channel.ChannelFactory)
{
io.netty.channel.ChannelFactory v1;
io.netty.resolver.dns.DnsNameResolverBuilder v0;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: io.netty.channel.ChannelFactory;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.channel.ChannelFactory socketChannelFactory> = v1;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder socketChannelType(java.lang.Class)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0, v2, v4;
io.netty.channel.ReflectiveChannelFactory v3;
java.lang.Class v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: java.lang.Class;
if v1 != null goto label1;
v2 = virtualinvoke v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder socketChannelFactory(io.netty.channel.ChannelFactory)>(null);
return v2;
label1:
v3 = new io.netty.channel.ReflectiveChannelFactory;
specialinvoke v3.<io.netty.channel.ReflectiveChannelFactory: void <init>(java.lang.Class)>(v1);
v4 = virtualinvoke v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder socketChannelFactory(io.netty.channel.ChannelFactory)>(v3);
return v4;
}
public io.netty.resolver.dns.DnsNameResolverBuilder resolveCache(io.netty.resolver.dns.DnsCache)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
io.netty.resolver.dns.DnsCache v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: io.netty.resolver.dns.DnsCache;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsCache resolveCache> = v1;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder cnameCache(io.netty.resolver.dns.DnsCnameCache)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
io.netty.resolver.dns.DnsCnameCache v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: io.netty.resolver.dns.DnsCnameCache;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsCnameCache cnameCache> = v1;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder dnsQueryLifecycleObserverFactory(io.netty.resolver.dns.DnsQueryLifecycleObserverFactory)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
java.lang.Object v2;
io.netty.resolver.dns.DnsQueryLifecycleObserverFactory v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: io.netty.resolver.dns.DnsQueryLifecycleObserverFactory;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "lifecycleObserverFactory");
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory> = v2;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder authoritativeDnsServerCache(io.netty.resolver.dns.DnsCache)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter v2;
io.netty.resolver.dns.DnsCache v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: io.netty.resolver.dns.DnsCache;
v2 = new io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter;
specialinvoke v2.<io.netty.resolver.dns.AuthoritativeDnsServerCacheAdapter: void <init>(io.netty.resolver.dns.DnsCache)>(v1);
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.AuthoritativeDnsServerCache authoritativeDnsServerCache> = v2;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder authoritativeDnsServerCache(io.netty.resolver.dns.AuthoritativeDnsServerCache)
{
io.netty.resolver.dns.AuthoritativeDnsServerCache v1;
io.netty.resolver.dns.DnsNameResolverBuilder v0;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: io.netty.resolver.dns.AuthoritativeDnsServerCache;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.AuthoritativeDnsServerCache authoritativeDnsServerCache> = v1;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder localAddress(java.net.SocketAddress)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
java.net.SocketAddress v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: java.net.SocketAddress;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.net.SocketAddress localAddress> = v1;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder ttl(int, int)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
int v1, v2;
java.lang.Integer v3, v4;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer maxTtl> = v3;
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer minTtl> = v4;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder negativeTtl(int)
{
int v1;
io.netty.resolver.dns.DnsNameResolverBuilder v0;
java.lang.Integer v2;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: int;
v2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer negativeTtl> = v2;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder queryTimeoutMillis(long)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
long v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: long;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: long queryTimeoutMillis> = v1;
return v0;
}
public static transient io.netty.resolver.ResolvedAddressTypes computeResolvedAddressTypes(io.netty.channel.socket.InternetProtocolFamily[])
{
int[] v5;
int v1, v13, v3, v7, v8, v9;
io.netty.channel.socket.InternetProtocolFamily v10, v11, v14, v15, v6;
java.lang.IllegalArgumentException v17, v4;
io.netty.channel.socket.InternetProtocolFamily[] v0;
io.netty.resolver.ResolvedAddressTypes v12, v16, v2;
v0 := @parameter0: io.netty.channel.socket.InternetProtocolFamily[];
if v0 == null goto label01;
v1 = lengthof v0;
if v1 != 0 goto label02;
label01:
v2 = <io.netty.resolver.dns.DnsNameResolver: io.netty.resolver.ResolvedAddressTypes DEFAULT_RESOLVE_ADDRESS_TYPES>;
return v2;
label02:
v3 = lengthof v0;
if v3 <= 2 goto label03;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No more than 2 InternetProtocolFamilies");
throw v4;
label03:
v5 = <io.netty.resolver.dns.DnsNameResolverBuilder$1: int[] $SwitchMap$io$netty$channel$socket$InternetProtocolFamily>;
v6 = v0[0];
v7 = virtualinvoke v6.<io.netty.channel.socket.InternetProtocolFamily: int ordinal()>();
v8 = v5[v7];
lookupswitch(v8)
{
case 1: goto label04;
case 2: goto label07;
default: goto label10;
};
label04:
v9 = lengthof v0;
if v9 < 2 goto label05;
v10 = v0[1];
v11 = <io.netty.channel.socket.InternetProtocolFamily: io.netty.channel.socket.InternetProtocolFamily IPv6>;
if v10 != v11 goto label05;
v12 = <io.netty.resolver.ResolvedAddressTypes: io.netty.resolver.ResolvedAddressTypes IPV4_PREFERRED>;
goto label06;
label05:
v12 = <io.netty.resolver.ResolvedAddressTypes: io.netty.resolver.ResolvedAddressTypes IPV4_ONLY>;
label06:
return v12;
label07:
v13 = lengthof v0;
if v13 < 2 goto label08;
v14 = v0[1];
v15 = <io.netty.channel.socket.InternetProtocolFamily: io.netty.channel.socket.InternetProtocolFamily IPv4>;
if v14 != v15 goto label08;
v16 = <io.netty.resolver.ResolvedAddressTypes: io.netty.resolver.ResolvedAddressTypes IPV6_PREFERRED>;
goto label09;
label08:
v16 = <io.netty.resolver.ResolvedAddressTypes: io.netty.resolver.ResolvedAddressTypes IPV6_ONLY>;
label09:
return v16;
label10:
v17 = new java.lang.IllegalArgumentException;
specialinvoke v17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Couldn\'t resolve ResolvedAddressTypes from InternetProtocolFamily array");
throw v17;
}
public io.netty.resolver.dns.DnsNameResolverBuilder resolvedAddressTypes(io.netty.resolver.ResolvedAddressTypes)
{
io.netty.resolver.ResolvedAddressTypes v1;
io.netty.resolver.dns.DnsNameResolverBuilder v0;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: io.netty.resolver.ResolvedAddressTypes;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.ResolvedAddressTypes resolvedAddressTypes> = v1;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder completeOncePreferredResolved(boolean)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
boolean v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: boolean;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean completeOncePreferredResolved> = v1;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder recursionDesired(boolean)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
boolean v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: boolean;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean recursionDesired> = v1;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder maxQueriesPerResolve(int)
{
int v1;
io.netty.resolver.dns.DnsNameResolverBuilder v0;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: int;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: int maxQueriesPerResolve> = v1;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder traceEnabled(boolean)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
boolean v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: boolean;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean traceEnabled> = v1;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder maxPayloadSize(int)
{
int v1;
io.netty.resolver.dns.DnsNameResolverBuilder v0;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: int;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: int maxPayloadSize> = v1;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder optResourceEnabled(boolean)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
boolean v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: boolean;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean optResourceEnabled> = v1;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder hostsFileEntriesResolver(io.netty.resolver.HostsFileEntriesResolver)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
io.netty.resolver.HostsFileEntriesResolver v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: io.netty.resolver.HostsFileEntriesResolver;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.HostsFileEntriesResolver hostsFileEntriesResolver> = v1;
return v0;
}
protected io.netty.resolver.dns.DnsServerAddressStreamProvider nameServerProvider()
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
io.netty.resolver.dns.DnsServerAddressStreamProvider v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsServerAddressStreamProvider dnsServerAddressStreamProvider>;
return v1;
}
public io.netty.resolver.dns.DnsNameResolverBuilder nameServerProvider(io.netty.resolver.dns.DnsServerAddressStreamProvider)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
java.lang.Object v2;
io.netty.resolver.dns.DnsServerAddressStreamProvider v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: io.netty.resolver.dns.DnsServerAddressStreamProvider;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "dnsServerAddressStreamProvider");
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsServerAddressStreamProvider dnsServerAddressStreamProvider> = v2;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder searchDomains(java.lang.Iterable)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
java.lang.Object[] v8;
java.util.Iterator v3;
java.lang.String[] v7;
java.lang.Iterable v1;
java.util.ArrayList v2;
java.lang.Object v5;
boolean v4, v6;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: java.lang.Iterable;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "searchDomains");
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(4);
v3 = interfaceinvoke v1.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
if v5 == null goto label2;
v6 = interfaceinvoke v2.<java.util.List: boolean contains(java.lang.Object)>(v5);
if v6 != 0 goto label1;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v5);
goto label1;
label2:
v7 = newarray (java.lang.String)[0];
v8 = interfaceinvoke v2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v7);
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.String[] searchDomains> = v8;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder ndots(int)
{
int v1;
io.netty.resolver.dns.DnsNameResolverBuilder v0;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: int;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: int ndots> = v1;
return v0;
}
private io.netty.resolver.dns.DnsCache newCache()
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
io.netty.resolver.dns.DefaultDnsCache v1;
java.lang.Integer v2, v4, v6;
int v3, v5, v7;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 = new io.netty.resolver.dns.DefaultDnsCache;
v2 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer minTtl>;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: int intValue(java.lang.Integer,int)>(v2, 0);
v4 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer maxTtl>;
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: int intValue(java.lang.Integer,int)>(v4, 2147483647);
v6 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer negativeTtl>;
v7 = staticinvoke <io.netty.util.internal.ObjectUtil: int intValue(java.lang.Integer,int)>(v6, 0);
specialinvoke v1.<io.netty.resolver.dns.DefaultDnsCache: void <init>(int,int,int)>(v3, v5, v7);
return v1;
}
private io.netty.resolver.dns.AuthoritativeDnsServerCache newAuthoritativeDnsServerCache()
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
java.lang.Integer v2, v4;
io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache v1;
int v3, v5;
io.netty.channel.socket.InternetProtocolFamily v8;
io.netty.resolver.ResolvedAddressTypes v7;
java.lang.Class v9;
io.netty.resolver.dns.NameServerComparator v6;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 = new io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache;
v2 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer minTtl>;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: int intValue(java.lang.Integer,int)>(v2, 0);
v4 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer maxTtl>;
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: int intValue(java.lang.Integer,int)>(v4, 2147483647);
v6 = new io.netty.resolver.dns.NameServerComparator;
v7 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.ResolvedAddressTypes resolvedAddressTypes>;
v8 = staticinvoke <io.netty.resolver.dns.DnsNameResolver: io.netty.channel.socket.InternetProtocolFamily preferredAddressType(io.netty.resolver.ResolvedAddressTypes)>(v7);
v9 = virtualinvoke v8.<io.netty.channel.socket.InternetProtocolFamily: java.lang.Class addressType()>();
specialinvoke v6.<io.netty.resolver.dns.NameServerComparator: void <init>(java.lang.Class)>(v9);
specialinvoke v1.<io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache: void <init>(int,int,java.util.Comparator)>(v3, v5, v6);
return v1;
}
private io.netty.resolver.dns.DnsCnameCache newCnameCache()
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
io.netty.resolver.dns.DefaultDnsCnameCache v1;
int v3, v5;
java.lang.Integer v2, v4;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 = new io.netty.resolver.dns.DefaultDnsCnameCache;
v2 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer minTtl>;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: int intValue(java.lang.Integer,int)>(v2, 0);
v4 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer maxTtl>;
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: int intValue(java.lang.Integer,int)>(v4, 2147483647);
specialinvoke v1.<io.netty.resolver.dns.DefaultDnsCnameCache: void <init>(int,int)>(v3, v5);
return v1;
}
public io.netty.resolver.dns.DnsNameResolverBuilder decodeIdn(boolean)
{
io.netty.resolver.dns.DnsNameResolverBuilder v0;
boolean v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: boolean;
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean decodeIdn> = v1;
return v0;
}
public io.netty.resolver.dns.DnsNameResolverBuilder consolidateCacheSize(int)
{
int v1, v2;
io.netty.resolver.dns.DnsNameResolverBuilder v0;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 := @parameter0: int;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v1, "maxNumConsolidation");
v0.<io.netty.resolver.dns.DnsNameResolverBuilder: int maxNumConsolidation> = v2;
return v0;
}
public io.netty.resolver.dns.DnsNameResolver build()
{
java.lang.IllegalStateException v12, v2, v7;
java.net.SocketAddress v25;
io.netty.resolver.dns.DnsServerAddressStreamProvider v35;
java.lang.Integer v10, v11, v4, v5, v6, v9;
boolean v29, v31, v33, v38, v39;
io.netty.resolver.dns.DnsNameResolver v21;
io.netty.channel.EventLoop v1, v22;
io.netty.resolver.dns.DnsQueryLifecycleObserverFactory v26;
io.netty.resolver.dns.DnsCnameCache v16, v17, v18;
io.netty.resolver.dns.DnsNameResolverBuilder v0;
io.netty.resolver.dns.AuthoritativeDnsServerCache v19, v20, v8;
java.lang.String[] v36;
long v27;
io.netty.resolver.dns.DnsCache v13, v14, v15, v3;
io.netty.resolver.HostsFileEntriesResolver v34;
int v30, v32, v37, v40;
io.netty.channel.ChannelFactory v23, v24;
io.netty.resolver.ResolvedAddressTypes v28;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.channel.EventLoop eventLoop>;
if v1 != null goto label01;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("eventLoop should be specified to build a DnsNameResolver.");
throw v2;
label01:
v3 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsCache resolveCache>;
if v3 == null goto label03;
v4 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer minTtl>;
if v4 != null goto label02;
v5 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer maxTtl>;
if v5 != null goto label02;
v6 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer negativeTtl>;
if v6 == null goto label03;
label02:
v7 = new java.lang.IllegalStateException;
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("resolveCache and TTLs are mutually exclusive");
throw v7;
label03:
v8 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.AuthoritativeDnsServerCache authoritativeDnsServerCache>;
if v8 == null goto label05;
v9 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer minTtl>;
if v9 != null goto label04;
v10 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer maxTtl>;
if v10 != null goto label04;
v11 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer negativeTtl>;
if v11 == null goto label05;
label04:
v12 = new java.lang.IllegalStateException;
specialinvoke v12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("authoritativeDnsServerCache and TTLs are mutually exclusive");
throw v12;
label05:
v13 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsCache resolveCache>;
if v13 == null goto label06;
v14 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsCache resolveCache>;
goto label07;
label06:
v14 = specialinvoke v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsCache newCache()>();
label07:
v15 = v14;
v16 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsCnameCache cnameCache>;
if v16 == null goto label08;
v17 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsCnameCache cnameCache>;
goto label09;
label08:
v17 = specialinvoke v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsCnameCache newCnameCache()>();
label09:
v18 = v17;
v19 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.AuthoritativeDnsServerCache authoritativeDnsServerCache>;
if v19 == null goto label10;
v20 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.AuthoritativeDnsServerCache authoritativeDnsServerCache>;
goto label11;
label10:
v20 = specialinvoke v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.AuthoritativeDnsServerCache newAuthoritativeDnsServerCache()>();
label11:
v21 = new io.netty.resolver.dns.DnsNameResolver;
v22 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.channel.EventLoop eventLoop>;
v23 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.channel.ChannelFactory channelFactory>;
v24 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.channel.ChannelFactory socketChannelFactory>;
v25 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.net.SocketAddress localAddress>;
v26 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory>;
v27 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: long queryTimeoutMillis>;
v28 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.ResolvedAddressTypes resolvedAddressTypes>;
v29 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean recursionDesired>;
v30 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: int maxQueriesPerResolve>;
v31 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean traceEnabled>;
v32 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: int maxPayloadSize>;
v33 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean optResourceEnabled>;
v34 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.HostsFileEntriesResolver hostsFileEntriesResolver>;
v35 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsServerAddressStreamProvider dnsServerAddressStreamProvider>;
v36 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.String[] searchDomains>;
v37 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: int ndots>;
v38 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean decodeIdn>;
v39 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean completeOncePreferredResolved>;
v40 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: int maxNumConsolidation>;
specialinvoke v21.<io.netty.resolver.dns.DnsNameResolver: void <init>(io.netty.channel.EventLoop,io.netty.channel.ChannelFactory,io.netty.channel.ChannelFactory,io.netty.resolver.dns.DnsCache,io.netty.resolver.dns.DnsCnameCache,io.netty.resolver.dns.AuthoritativeDnsServerCache,java.net.SocketAddress,io.netty.resolver.dns.DnsQueryLifecycleObserverFactory,long,io.netty.resolver.ResolvedAddressTypes,boolean,int,boolean,int,boolean,io.netty.resolver.HostsFileEntriesResolver,io.netty.resolver.dns.DnsServerAddressStreamProvider,java.lang.String[],int,boolean,boolean,int)>(v22, v23, v24, v15, v18, v20, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40);
return v21;
}
public io.netty.resolver.dns.DnsNameResolverBuilder copy()
{
java.net.SocketAddress v41;
io.netty.resolver.dns.DnsServerAddressStreamProvider v33, v34;
java.lang.Integer v12, v13, v14, v16, v18, v19;
boolean v27, v29, v31, v39, v40;
io.netty.channel.EventLoop v2, v3;
java.util.List v37;
io.netty.resolver.dns.DnsQueryLifecycleObserverFactory v23, v24;
io.netty.resolver.dns.DnsCnameCache v10, v11;
io.netty.resolver.dns.DnsNameResolverBuilder v0, v1;
io.netty.resolver.dns.AuthoritativeDnsServerCache v21, v22;
java.lang.String[] v35, v36;
long v25;
io.netty.resolver.dns.DnsCache v8, v9;
io.netty.resolver.HostsFileEntriesResolver v32;
int v15, v17, v20, v28, v30, v38, v42;
io.netty.channel.ChannelFactory v4, v5, v6, v7;
io.netty.resolver.ResolvedAddressTypes v26;
v0 := @this: io.netty.resolver.dns.DnsNameResolverBuilder;
v1 = new io.netty.resolver.dns.DnsNameResolverBuilder;
specialinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: void <init>()>();
v2 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.channel.EventLoop eventLoop>;
if v2 == null goto label01;
v3 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.channel.EventLoop eventLoop>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder eventLoop(io.netty.channel.EventLoop)>(v3);
label01:
v4 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.channel.ChannelFactory channelFactory>;
if v4 == null goto label02;
v5 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.channel.ChannelFactory channelFactory>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder channelFactory(io.netty.channel.ChannelFactory)>(v5);
label02:
v6 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.channel.ChannelFactory socketChannelFactory>;
if v6 == null goto label03;
v7 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.channel.ChannelFactory socketChannelFactory>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder socketChannelFactory(io.netty.channel.ChannelFactory)>(v7);
label03:
v8 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsCache resolveCache>;
if v8 == null goto label04;
v9 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsCache resolveCache>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder resolveCache(io.netty.resolver.dns.DnsCache)>(v9);
label04:
v10 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsCnameCache cnameCache>;
if v10 == null goto label05;
v11 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsCnameCache cnameCache>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder cnameCache(io.netty.resolver.dns.DnsCnameCache)>(v11);
label05:
v12 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer maxTtl>;
if v12 == null goto label06;
v13 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer minTtl>;
if v13 == null goto label06;
v14 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer minTtl>;
v15 = virtualinvoke v14.<java.lang.Integer: int intValue()>();
v16 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer maxTtl>;
v17 = virtualinvoke v16.<java.lang.Integer: int intValue()>();
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder ttl(int,int)>(v15, v17);
label06:
v18 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer negativeTtl>;
if v18 == null goto label07;
v19 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.Integer negativeTtl>;
v20 = virtualinvoke v19.<java.lang.Integer: int intValue()>();
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder negativeTtl(int)>(v20);
label07:
v21 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.AuthoritativeDnsServerCache authoritativeDnsServerCache>;
if v21 == null goto label08;
v22 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.AuthoritativeDnsServerCache authoritativeDnsServerCache>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder authoritativeDnsServerCache(io.netty.resolver.dns.AuthoritativeDnsServerCache)>(v22);
label08:
v23 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory>;
if v23 == null goto label09;
v24 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder dnsQueryLifecycleObserverFactory(io.netty.resolver.dns.DnsQueryLifecycleObserverFactory)>(v24);
label09:
v25 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: long queryTimeoutMillis>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder queryTimeoutMillis(long)>(v25);
v26 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.ResolvedAddressTypes resolvedAddressTypes>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder resolvedAddressTypes(io.netty.resolver.ResolvedAddressTypes)>(v26);
v27 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean recursionDesired>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder recursionDesired(boolean)>(v27);
v28 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: int maxQueriesPerResolve>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder maxQueriesPerResolve(int)>(v28);
v29 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean traceEnabled>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder traceEnabled(boolean)>(v29);
v30 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: int maxPayloadSize>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder maxPayloadSize(int)>(v30);
v31 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean optResourceEnabled>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder optResourceEnabled(boolean)>(v31);
v32 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.HostsFileEntriesResolver hostsFileEntriesResolver>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder hostsFileEntriesResolver(io.netty.resolver.HostsFileEntriesResolver)>(v32);
v33 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsServerAddressStreamProvider dnsServerAddressStreamProvider>;
if v33 == null goto label10;
v34 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsServerAddressStreamProvider dnsServerAddressStreamProvider>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder nameServerProvider(io.netty.resolver.dns.DnsServerAddressStreamProvider)>(v34);
label10:
v35 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.String[] searchDomains>;
if v35 == null goto label11;
v36 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.lang.String[] searchDomains>;
v37 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v36);
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder searchDomains(java.lang.Iterable)>(v37);
label11:
v38 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: int ndots>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder ndots(int)>(v38);
v39 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean decodeIdn>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder decodeIdn(boolean)>(v39);
v40 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: boolean completeOncePreferredResolved>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder completeOncePreferredResolved(boolean)>(v40);
v41 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: java.net.SocketAddress localAddress>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder localAddress(java.net.SocketAddress)>(v41);
v42 = v0.<io.netty.resolver.dns.DnsNameResolverBuilder: int maxNumConsolidation>;
virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolverBuilder: io.netty.resolver.dns.DnsNameResolverBuilder consolidateCacheSize(int)>(v42);
return v1;
}
}