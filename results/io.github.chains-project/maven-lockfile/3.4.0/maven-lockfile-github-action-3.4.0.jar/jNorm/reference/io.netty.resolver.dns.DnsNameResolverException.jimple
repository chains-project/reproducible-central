public class io.netty.resolver.dns.DnsNameResolverException extends java.lang.RuntimeException
{
private static final long serialVersionUID;
private final java.net.InetSocketAddress remoteAddress;
private final io.netty.handler.codec.dns.DnsQuestion question;
public void <init>(java.net.InetSocketAddress, io.netty.handler.codec.dns.DnsQuestion, java.lang.String)
{
io.netty.handler.codec.dns.DnsQuestion v2, v5;
io.netty.resolver.dns.DnsNameResolverException v0;
java.lang.String v3;
java.net.InetSocketAddress v1, v4;
v0 := @this: io.netty.resolver.dns.DnsNameResolverException;
v1 := @parameter0: java.net.InetSocketAddress;
v2 := @parameter1: io.netty.handler.codec.dns.DnsQuestion;
v3 := @parameter2: java.lang.String;
specialinvoke v0.<java.lang.RuntimeException: void <init>(java.lang.String)>(v3);
v4 = staticinvoke <io.netty.resolver.dns.DnsNameResolverException: java.net.InetSocketAddress validateRemoteAddress(java.net.InetSocketAddress)>(v1);
v0.<io.netty.resolver.dns.DnsNameResolverException: java.net.InetSocketAddress remoteAddress> = v4;
v5 = staticinvoke <io.netty.resolver.dns.DnsNameResolverException: io.netty.handler.codec.dns.DnsQuestion validateQuestion(io.netty.handler.codec.dns.DnsQuestion)>(v2);
v0.<io.netty.resolver.dns.DnsNameResolverException: io.netty.handler.codec.dns.DnsQuestion question> = v5;
return;
}
public void <init>(java.net.InetSocketAddress, io.netty.handler.codec.dns.DnsQuestion, java.lang.String, java.lang.Throwable)
{
java.lang.Throwable v4;
io.netty.handler.codec.dns.DnsQuestion v2, v6;
io.netty.resolver.dns.DnsNameResolverException v0;
java.lang.String v3;
java.net.InetSocketAddress v1, v5;
v0 := @this: io.netty.resolver.dns.DnsNameResolverException;
v1 := @parameter0: java.net.InetSocketAddress;
v2 := @parameter1: io.netty.handler.codec.dns.DnsQuestion;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.Throwable;
specialinvoke v0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v3, v4);
v5 = staticinvoke <io.netty.resolver.dns.DnsNameResolverException: java.net.InetSocketAddress validateRemoteAddress(java.net.InetSocketAddress)>(v1);
v0.<io.netty.resolver.dns.DnsNameResolverException: java.net.InetSocketAddress remoteAddress> = v5;
v6 = staticinvoke <io.netty.resolver.dns.DnsNameResolverException: io.netty.handler.codec.dns.DnsQuestion validateQuestion(io.netty.handler.codec.dns.DnsQuestion)>(v2);
v0.<io.netty.resolver.dns.DnsNameResolverException: io.netty.handler.codec.dns.DnsQuestion question> = v6;
return;
}
private static java.net.InetSocketAddress validateRemoteAddress(java.net.InetSocketAddress)
{
java.lang.Object v1;
java.net.InetSocketAddress v0;
v0 := @parameter0: java.net.InetSocketAddress;
v1 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "remoteAddress");
return v1;
}
private static io.netty.handler.codec.dns.DnsQuestion validateQuestion(io.netty.handler.codec.dns.DnsQuestion)
{
java.lang.Object v1;
io.netty.handler.codec.dns.DnsQuestion v0;
v0 := @parameter0: io.netty.handler.codec.dns.DnsQuestion;
v1 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "question");
return v1;
}
public java.net.InetSocketAddress remoteAddress()
{
io.netty.resolver.dns.DnsNameResolverException v0;
java.net.InetSocketAddress v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverException;
v1 = v0.<io.netty.resolver.dns.DnsNameResolverException: java.net.InetSocketAddress remoteAddress>;
return v1;
}
public io.netty.handler.codec.dns.DnsQuestion question()
{
io.netty.resolver.dns.DnsNameResolverException v0;
io.netty.handler.codec.dns.DnsQuestion v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverException;
v1 = v0.<io.netty.resolver.dns.DnsNameResolverException: io.netty.handler.codec.dns.DnsQuestion question>;
return v1;
}
public java.lang.Throwable fillInStackTrace()
{
io.netty.resolver.dns.DnsNameResolverException v0;
java.lang.StackTraceElement[] v1;
v0 := @this: io.netty.resolver.dns.DnsNameResolverException;
v1 = <io.netty.util.internal.EmptyArrays: java.lang.StackTraceElement[] EMPTY_STACK_TRACE>;
virtualinvoke v0.<io.netty.resolver.dns.DnsNameResolverException: void setStackTrace(java.lang.StackTraceElement[])>(v1);
return v0;
}
}