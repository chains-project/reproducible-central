abstract class io.netty.resolver.dns.DnsQueryContext extends java.lang.Object implements io.netty.util.concurrent.FutureListener
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private final io.netty.resolver.dns.DnsNameResolver parent;
private final io.netty.util.concurrent.Promise promise;
private final int id;
private final io.netty.handler.codec.dns.DnsQuestion question;
private final io.netty.handler.codec.dns.DnsRecord[] additionals;
private final io.netty.handler.codec.dns.DnsRecord optResource;
private final java.net.InetSocketAddress nameServerAddr;
private final boolean recursionDesired;
private volatile io.netty.util.concurrent.Future timeoutFuture;
void <init>(io.netty.resolver.dns.DnsNameResolver, java.net.InetSocketAddress, io.netty.handler.codec.dns.DnsQuestion, io.netty.handler.codec.dns.DnsRecord[], io.netty.util.concurrent.Promise)
{
io.netty.resolver.dns.DnsQueryContext v0;
int v13, v17;
boolean v11, v14, v15;
io.netty.resolver.dns.DnsQueryContext$1 v16;
io.netty.resolver.dns.DnsNameResolver v1;
io.netty.resolver.dns.DnsQueryContextManager v12;
io.netty.util.concurrent.Promise v5;
io.netty.handler.codec.dns.DnsQuestion v3;
java.net.InetSocketAddress v2;
io.netty.handler.codec.dns.DnsRecord[] v4;
java.lang.Object v10, v6, v7, v8, v9;
v0 := @this: io.netty.resolver.dns.DnsQueryContext;
v1 := @parameter0: io.netty.resolver.dns.DnsNameResolver;
v2 := @parameter1: java.net.InetSocketAddress;
v3 := @parameter2: io.netty.handler.codec.dns.DnsQuestion;
v4 := @parameter3: io.netty.handler.codec.dns.DnsRecord[];
v5 := @parameter4: io.netty.util.concurrent.Promise;
specialinvoke v0.<java.lang.Object: void <init>()>();
v6 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "parent");
v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.resolver.dns.DnsNameResolver parent> = v6;
v7 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "nameServerAddr");
v0.<io.netty.resolver.dns.DnsQueryContext: java.net.InetSocketAddress nameServerAddr> = v7;
v8 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v3, "question");
v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.handler.codec.dns.DnsQuestion question> = v8;
v9 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v4, "additionals");
v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.handler.codec.dns.DnsRecord[] additionals> = v9;
v10 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v5, "promise");
v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.util.concurrent.Promise promise> = v10;
v11 = virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolver: boolean isRecursionDesired()>();
v0.<io.netty.resolver.dns.DnsQueryContext: boolean recursionDesired> = v11;
v12 = v1.<io.netty.resolver.dns.DnsNameResolver: io.netty.resolver.dns.DnsQueryContextManager queryContextManager>;
v13 = virtualinvoke v12.<io.netty.resolver.dns.DnsQueryContextManager: int add(io.netty.resolver.dns.DnsQueryContext)>(v0);
v0.<io.netty.resolver.dns.DnsQueryContext: int id> = v13;
interfaceinvoke v5.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)>(v0);
v14 = virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolver: boolean isOptResourceEnabled()>();
if v14 == 0 goto label1;
v15 = staticinvoke <io.netty.resolver.dns.DnsQueryContext: boolean hasOptRecord(io.netty.handler.codec.dns.DnsRecord[])>(v4);
if v15 != 0 goto label1;
v16 = new io.netty.resolver.dns.DnsQueryContext$1;
v17 = virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolver: int maxPayloadSize()>();
specialinvoke v16.<io.netty.resolver.dns.DnsQueryContext$1: void <init>(io.netty.resolver.dns.DnsQueryContext,int,int,int)>(v0, v17, 0, 0);
v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.handler.codec.dns.DnsRecord optResource> = v16;
goto label2;
label1:
v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.handler.codec.dns.DnsRecord optResource> = null;
label2:
return;
}
private static boolean hasOptRecord(io.netty.handler.codec.dns.DnsRecord[])
{
io.netty.handler.codec.dns.DnsRecord v4;
io.netty.handler.codec.dns.DnsRecordType v5, v6;
io.netty.handler.codec.dns.DnsRecord[] v0;
int v1, v2, v3;
v0 := @parameter0: io.netty.handler.codec.dns.DnsRecord[];
if v0 == null goto label3;
v1 = lengthof v0;
if v1 <= 0 goto label3;
v2 = lengthof v0;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v0[v3];
v5 = interfaceinvoke v4.<io.netty.handler.codec.dns.DnsRecord: io.netty.handler.codec.dns.DnsRecordType type()>();
v6 = <io.netty.handler.codec.dns.DnsRecordType: io.netty.handler.codec.dns.DnsRecordType OPT>;
if v5 != v6 goto label2;
return 1;
label2:
v3 = v3 + 1;
goto label1;
label3:
return 0;
}
java.net.InetSocketAddress nameServerAddr()
{
io.netty.resolver.dns.DnsQueryContext v0;
java.net.InetSocketAddress v1;
v0 := @this: io.netty.resolver.dns.DnsQueryContext;
v1 = v0.<io.netty.resolver.dns.DnsQueryContext: java.net.InetSocketAddress nameServerAddr>;
return v1;
}
io.netty.handler.codec.dns.DnsQuestion question()
{
io.netty.resolver.dns.DnsQueryContext v0;
io.netty.handler.codec.dns.DnsQuestion v1;
v0 := @this: io.netty.resolver.dns.DnsQueryContext;
v1 = v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.handler.codec.dns.DnsQuestion question>;
return v1;
}
io.netty.resolver.dns.DnsNameResolver parent()
{
io.netty.resolver.dns.DnsQueryContext v0;
io.netty.resolver.dns.DnsNameResolver v1;
v0 := @this: io.netty.resolver.dns.DnsQueryContext;
v1 = v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.resolver.dns.DnsNameResolver parent>;
return v1;
}
protected abstract io.netty.handler.codec.dns.DnsQuery newQuery(int);
protected abstract io.netty.channel.Channel channel();
protected abstract java.lang.String protocol();
void query(boolean, io.netty.channel.ChannelPromise)
{
io.netty.handler.codec.dns.DnsRecord v12, v14, v16;
java.lang.Object[] v20;
io.netty.resolver.dns.DnsQueryContext v0;
java.lang.Integer v24;
io.netty.channel.ChannelPromise v2;
io.netty.handler.codec.dns.DnsSection v13, v15, v8;
int v10, v11, v23, v5;
io.netty.handler.codec.dns.DnsQuery v6;
java.lang.String v22;
boolean v1, v18, v7;
io.netty.handler.codec.dns.DnsQuestion v3;
java.net.InetSocketAddress v4;
io.netty.channel.Channel v21;
io.netty.handler.codec.dns.DnsRecord[] v9;
io.netty.util.internal.logging.InternalLogger v17, v19;
v0 := @this: io.netty.resolver.dns.DnsQueryContext;
v1 := @parameter0: boolean;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = virtualinvoke v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.handler.codec.dns.DnsQuestion question()>();
v4 = virtualinvoke v0.<io.netty.resolver.dns.DnsQueryContext: java.net.InetSocketAddress nameServerAddr()>();
v5 = v0.<io.netty.resolver.dns.DnsQueryContext: int id>;
v6 = virtualinvoke v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.handler.codec.dns.DnsQuery newQuery(int)>(v5);
v7 = v0.<io.netty.resolver.dns.DnsQueryContext: boolean recursionDesired>;
interfaceinvoke v6.<io.netty.handler.codec.dns.DnsQuery: io.netty.handler.codec.dns.DnsQuery setRecursionDesired(boolean)>(v7);
v8 = <io.netty.handler.codec.dns.DnsSection: io.netty.handler.codec.dns.DnsSection QUESTION>;
interfaceinvoke v6.<io.netty.handler.codec.dns.DnsQuery: io.netty.handler.codec.dns.DnsQuery addRecord(io.netty.handler.codec.dns.DnsSection,io.netty.handler.codec.dns.DnsRecord)>(v8, v3);
v9 = v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.handler.codec.dns.DnsRecord[] additionals>;
v10 = lengthof v9;
v11 = 0;
label1:
if v11 >= v10 goto label2;
v12 = v9[v11];
v13 = <io.netty.handler.codec.dns.DnsSection: io.netty.handler.codec.dns.DnsSection ADDITIONAL>;
interfaceinvoke v6.<io.netty.handler.codec.dns.DnsQuery: io.netty.handler.codec.dns.DnsQuery addRecord(io.netty.handler.codec.dns.DnsSection,io.netty.handler.codec.dns.DnsRecord)>(v13, v12);
v11 = v11 + 1;
goto label1;
label2:
v14 = v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.handler.codec.dns.DnsRecord optResource>;
if v14 == null goto label3;
v15 = <io.netty.handler.codec.dns.DnsSection: io.netty.handler.codec.dns.DnsSection ADDITIONAL>;
v16 = v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.handler.codec.dns.DnsRecord optResource>;
interfaceinvoke v6.<io.netty.handler.codec.dns.DnsQuery: io.netty.handler.codec.dns.DnsQuery addRecord(io.netty.handler.codec.dns.DnsSection,io.netty.handler.codec.dns.DnsRecord)>(v15, v16);
label3:
v17 = <io.netty.resolver.dns.DnsQueryContext: io.netty.util.internal.logging.InternalLogger logger>;
v18 = interfaceinvoke v17.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v18 == 0 goto label4;
v19 = <io.netty.resolver.dns.DnsQueryContext: io.netty.util.internal.logging.InternalLogger logger>;
v20 = newarray (java.lang.Object)[5];
v21 = virtualinvoke v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.channel.Channel channel()>();
v20[0] = v21;
v22 = virtualinvoke v0.<io.netty.resolver.dns.DnsQueryContext: java.lang.String protocol()>();
v20[1] = v22;
v23 = v0.<io.netty.resolver.dns.DnsQueryContext: int id>;
v24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v23);
v20[2] = v24;
v20[3] = v4;
v20[4] = v3;
interfaceinvoke v19.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object[])>("{} WRITE: {}, [{}: {}], {}", v20);
label4:
specialinvoke v0.<io.netty.resolver.dns.DnsQueryContext: void sendQuery(io.netty.handler.codec.dns.DnsQuery,boolean,io.netty.channel.ChannelPromise)>(v6, v1, v2);
return;
}
private void sendQuery(io.netty.handler.codec.dns.DnsQuery, boolean, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v9;
io.netty.resolver.dns.DnsNameResolver v10, v4, v7;
io.netty.resolver.dns.DnsQueryContext$2 v12;
io.netty.util.concurrent.Promise v11, v5, v8;
io.netty.resolver.dns.DnsQueryContext v0;
io.netty.channel.ChannelPromise v3;
io.netty.handler.codec.dns.DnsQuery v1;
boolean v2, v6;
v0 := @this: io.netty.resolver.dns.DnsQueryContext;
v1 := @parameter0: io.netty.handler.codec.dns.DnsQuery;
v2 := @parameter1: boolean;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.resolver.dns.DnsNameResolver parent>;
v5 = v4.<io.netty.resolver.dns.DnsNameResolver: io.netty.util.concurrent.Promise channelReadyPromise>;
v6 = interfaceinvoke v5.<io.netty.util.concurrent.Promise: boolean isSuccess()>();
if v6 == 0 goto label1;
specialinvoke v0.<io.netty.resolver.dns.DnsQueryContext: void writeQuery(io.netty.handler.codec.dns.DnsQuery,boolean,io.netty.channel.ChannelPromise)>(v1, v2, v3);
goto label3;
label1:
v7 = v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.resolver.dns.DnsNameResolver parent>;
v8 = v7.<io.netty.resolver.dns.DnsNameResolver: io.netty.util.concurrent.Promise channelReadyPromise>;
v9 = interfaceinvoke v8.<io.netty.util.concurrent.Promise: java.lang.Throwable cause()>();
if v9 == null goto label2;
specialinvoke v0.<io.netty.resolver.dns.DnsQueryContext: void failQuery(io.netty.handler.codec.dns.DnsQuery,java.lang.Throwable,io.netty.channel.ChannelPromise)>(v1, v9, v3);
goto label3;
label2:
v10 = v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.resolver.dns.DnsNameResolver parent>;
v11 = v10.<io.netty.resolver.dns.DnsNameResolver: io.netty.util.concurrent.Promise channelReadyPromise>;
v12 = new io.netty.resolver.dns.DnsQueryContext$2;
specialinvoke v12.<io.netty.resolver.dns.DnsQueryContext$2: void <init>(io.netty.resolver.dns.DnsQueryContext,io.netty.handler.codec.dns.DnsQuery,io.netty.channel.ChannelPromise)>(v0, v1, v3);
interfaceinvoke v11.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)>(v12);
label3:
return;
}
private void failQuery(io.netty.handler.codec.dns.DnsQuery, java.lang.Throwable, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v2, v5;
io.netty.channel.ChannelPromise v3;
io.netty.util.concurrent.Promise v4;
io.netty.resolver.dns.DnsQueryContext v0;
io.netty.handler.codec.dns.DnsQuery v1;
v0 := @this: io.netty.resolver.dns.DnsQueryContext;
v1 := @parameter0: io.netty.handler.codec.dns.DnsQuery;
v2 := @parameter1: java.lang.Throwable;
v3 := @parameter2: io.netty.channel.ChannelPromise;
label1:
v4 = v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.util.concurrent.Promise promise>;
interfaceinvoke v4.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v2);
interfaceinvoke v3.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v2);
label2:
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v1);
goto label4;
label3:
v5 := @caughtexception;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v1);
throw v5;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void writeQuery(io.netty.handler.codec.dns.DnsQuery, boolean, io.netty.channel.ChannelPromise)
{
io.netty.resolver.dns.DnsQueryContext$3 v8;
io.netty.resolver.dns.DnsQueryContext v0;
io.netty.channel.ChannelFuture v5;
io.netty.channel.Channel v4, v6;
io.netty.channel.ChannelPromise v3;
io.netty.handler.codec.dns.DnsQuery v1;
boolean v2, v7;
v0 := @this: io.netty.resolver.dns.DnsQueryContext;
v1 := @parameter0: io.netty.handler.codec.dns.DnsQuery;
v2 := @parameter1: boolean;
v3 := @parameter2: io.netty.channel.ChannelPromise;
if v2 == 0 goto label1;
v4 = virtualinvoke v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.channel.Channel channel()>();
v5 = interfaceinvoke v4.<io.netty.channel.Channel: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)>(v1, v3);
goto label2;
label1:
v6 = virtualinvoke v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.channel.Channel channel()>();
v5 = interfaceinvoke v6.<io.netty.channel.Channel: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v1, v3);
label2:
v7 = interfaceinvoke v5.<io.netty.channel.ChannelFuture: boolean isDone()>();
if v7 == 0 goto label3;
specialinvoke v0.<io.netty.resolver.dns.DnsQueryContext: void onQueryWriteCompletion(io.netty.channel.ChannelFuture)>(v5);
goto label4;
label3:
v8 = new io.netty.resolver.dns.DnsQueryContext$3;
specialinvoke v8.<io.netty.resolver.dns.DnsQueryContext$3: void <init>(io.netty.resolver.dns.DnsQueryContext,io.netty.channel.ChannelFuture)>(v0, v5);
interfaceinvoke v5.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v8);
label4:
return;
}
private void onQueryWriteCompletion(io.netty.channel.ChannelFuture)
{
java.lang.Throwable v6;
io.netty.util.concurrent.ScheduledFuture v15;
io.netty.resolver.dns.DnsQueryContext v0;
long v8;
byte v9;
int v3;
java.lang.String v4, v5;
boolean v2;
io.netty.resolver.dns.DnsQueryContext$4 v13;
io.netty.resolver.dns.DnsNameResolver v10, v7;
io.netty.channel.EventLoop v12;
io.netty.channel.ChannelFuture v1;
io.netty.channel.Channel v11;
java.util.concurrent.TimeUnit v14;
v0 := @this: io.netty.resolver.dns.DnsQueryContext;
v1 := @parameter0: io.netty.channel.ChannelFuture;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: boolean isSuccess()>();
if v2 != 0 goto label1;
v3 = v0.<io.netty.resolver.dns.DnsQueryContext: int id>;
v4 = virtualinvoke v0.<io.netty.resolver.dns.DnsQueryContext: java.lang.String protocol()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,java.lang.String)>(v3, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("failed to send a query \'\u0001\' via \u0001");
v6 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: java.lang.Throwable cause()>();
virtualinvoke v0.<io.netty.resolver.dns.DnsQueryContext: boolean tryFailure(java.lang.String,java.lang.Throwable,boolean)>(v5, v6, 0);
return;
label1:
v7 = v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.resolver.dns.DnsNameResolver parent>;
v8 = virtualinvoke v7.<io.netty.resolver.dns.DnsNameResolver: long queryTimeoutMillis()>();
v9 = v8 cmp 0L;
if v9 <= 0 goto label2;
v10 = v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.resolver.dns.DnsNameResolver parent>;
v11 = v10.<io.netty.resolver.dns.DnsNameResolver: io.netty.channel.Channel ch>;
v12 = interfaceinvoke v11.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v13 = new io.netty.resolver.dns.DnsQueryContext$4;
specialinvoke v13.<io.netty.resolver.dns.DnsQueryContext$4: void <init>(io.netty.resolver.dns.DnsQueryContext,long)>(v0, v8);
v14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v15 = interfaceinvoke v12.<io.netty.channel.EventLoop: io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v13, v8, v14);
v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.util.concurrent.Future timeoutFuture> = v15;
label2:
return;
}
void finish(io.netty.channel.AddressedEnvelope)
{
io.netty.handler.codec.dns.DnsRecord v8;
io.netty.handler.codec.dns.DnsQuestion v6;
io.netty.resolver.dns.DnsQueryContext v0;
io.netty.channel.AddressedEnvelope v1;
io.netty.handler.codec.dns.DnsSection v3, v7;
io.netty.util.internal.logging.InternalLogger v10, v5;
int v4;
java.lang.Object v2;
boolean v11, v9;
v0 := @this: io.netty.resolver.dns.DnsQueryContext;
v1 := @parameter0: io.netty.channel.AddressedEnvelope;
v2 = interfaceinvoke v1.<io.netty.channel.AddressedEnvelope: java.lang.Object content()>();
v3 = <io.netty.handler.codec.dns.DnsSection: io.netty.handler.codec.dns.DnsSection QUESTION>;
v4 = interfaceinvoke v2.<io.netty.handler.codec.dns.DnsResponse: int count(io.netty.handler.codec.dns.DnsSection)>(v3);
if v4 == 1 goto label1;
v5 = <io.netty.resolver.dns.DnsQueryContext: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object)>("Received a DNS response with invalid number of questions: {}", v1);
goto label3;
label1:
v6 = virtualinvoke v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.handler.codec.dns.DnsQuestion question()>();
v7 = <io.netty.handler.codec.dns.DnsSection: io.netty.handler.codec.dns.DnsSection QUESTION>;
v8 = interfaceinvoke v2.<io.netty.handler.codec.dns.DnsResponse: io.netty.handler.codec.dns.DnsRecord recordAt(io.netty.handler.codec.dns.DnsSection)>(v7);
v9 = virtualinvoke v6.<java.lang.Object: boolean equals(java.lang.Object)>(v8);
if v9 != 0 goto label2;
v10 = <io.netty.resolver.dns.DnsQueryContext: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v10.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object)>("Received a mismatching DNS response: {}", v1);
goto label3;
label2:
v11 = specialinvoke v0.<io.netty.resolver.dns.DnsQueryContext: boolean trySuccess(io.netty.channel.AddressedEnvelope)>(v1);
if v11 == 0 goto label3;
return;
label3:
interfaceinvoke v1.<io.netty.channel.AddressedEnvelope: boolean release()>();
return;
}
private boolean trySuccess(io.netty.channel.AddressedEnvelope)
{
io.netty.util.concurrent.Promise v2;
io.netty.resolver.dns.DnsQueryContext v0;
io.netty.channel.AddressedEnvelope v1;
boolean v3;
v0 := @this: io.netty.resolver.dns.DnsQueryContext;
v1 := @parameter0: io.netty.channel.AddressedEnvelope;
v2 = v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.util.concurrent.Promise promise>;
v3 = interfaceinvoke v2.<io.netty.util.concurrent.Promise: boolean trySuccess(java.lang.Object)>(v1);
return v3;
}
boolean tryFailure(java.lang.String, java.lang.Throwable, boolean)
{
java.lang.Throwable v2;
io.netty.resolver.dns.DnsNameResolverException v22, v23;
io.netty.resolver.dns.DnsQueryContext v0;
io.netty.resolver.dns.DnsNameResolverTimeoutException v20;
int v10, v12, v9;
java.lang.String v1, v21, v24;
boolean v26, v3, v5;
io.netty.util.concurrent.Promise v25, v4;
io.netty.handler.codec.dns.DnsQuestion v7;
java.net.InetSocketAddress v6;
java.lang.StringBuilder v11, v13, v14, v15, v16, v17, v18, v19, v8;
v0 := @this: io.netty.resolver.dns.DnsQueryContext;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Throwable;
v3 := @parameter2: boolean;
v4 = v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.util.concurrent.Promise promise>;
v5 = interfaceinvoke v4.<io.netty.util.concurrent.Promise: boolean isDone()>();
if v5 == 0 goto label1;
return 0;
label1:
v6 = virtualinvoke v0.<io.netty.resolver.dns.DnsQueryContext: java.net.InetSocketAddress nameServerAddr()>();
v7 = virtualinvoke v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.handler.codec.dns.DnsQuestion question()>();
v8 = new java.lang.StringBuilder;
v9 = virtualinvoke v1.<java.lang.String: int length()>();
v10 = v9 + 128;
specialinvoke v8.<java.lang.StringBuilder: void <init>(int)>(v10);
v11 = virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
v12 = v0.<io.netty.resolver.dns.DnsQueryContext: int id>;
v13 = virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v12);
v14 = virtualinvoke v13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");
v15 = virtualinvoke v14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v6);
v16 = virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");
v17 = virtualinvoke v16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v7);
v18 = virtualinvoke v17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
v19 = virtualinvoke v18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v1);
virtualinvoke v19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (no stack trace available)");
if v3 == 0 goto label2;
v20 = new io.netty.resolver.dns.DnsNameResolverTimeoutException;
v21 = virtualinvoke v8.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke v20.<io.netty.resolver.dns.DnsNameResolverTimeoutException: void <init>(java.net.InetSocketAddress,io.netty.handler.codec.dns.DnsQuestion,java.lang.String)>(v6, v7, v21);
v22 = v20;
goto label3;
label2:
v23 = new io.netty.resolver.dns.DnsNameResolverException;
v24 = virtualinvoke v8.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke v23.<io.netty.resolver.dns.DnsNameResolverException: void <init>(java.net.InetSocketAddress,io.netty.handler.codec.dns.DnsQuestion,java.lang.String,java.lang.Throwable)>(v6, v7, v24, v2);
v22 = v23;
label3:
v25 = v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.util.concurrent.Promise promise>;
v26 = interfaceinvoke v25.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v22);
return v26;
}
public void operationComplete(io.netty.util.concurrent.Future)
{
io.netty.resolver.dns.DnsNameResolver v3;
io.netty.resolver.dns.DnsQueryContextManager v4;
int v6;
io.netty.resolver.dns.DnsQueryContext v0;
io.netty.util.concurrent.Future v1, v2;
java.net.InetSocketAddress v5;
v0 := @this: io.netty.resolver.dns.DnsQueryContext;
v1 := @parameter0: io.netty.util.concurrent.Future;
v2 = v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.util.concurrent.Future timeoutFuture>;
if v2 == null goto label1;
v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.util.concurrent.Future timeoutFuture> = null;
interfaceinvoke v2.<io.netty.util.concurrent.Future: boolean cancel(boolean)>(0);
label1:
v3 = v0.<io.netty.resolver.dns.DnsQueryContext: io.netty.resolver.dns.DnsNameResolver parent>;
v4 = v3.<io.netty.resolver.dns.DnsNameResolver: io.netty.resolver.dns.DnsQueryContextManager queryContextManager>;
v5 = v0.<io.netty.resolver.dns.DnsQueryContext: java.net.InetSocketAddress nameServerAddr>;
v6 = v0.<io.netty.resolver.dns.DnsQueryContext: int id>;
virtualinvoke v4.<io.netty.resolver.dns.DnsQueryContextManager: io.netty.resolver.dns.DnsQueryContext remove(java.net.InetSocketAddress,int)>(v5, v6);
return;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/resolver/dns/DnsQueryContext;");
<io.netty.resolver.dns.DnsQueryContext: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}