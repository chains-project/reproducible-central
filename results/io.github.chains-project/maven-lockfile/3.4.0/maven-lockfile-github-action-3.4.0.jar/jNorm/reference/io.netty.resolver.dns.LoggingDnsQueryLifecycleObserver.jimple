final class io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver extends java.lang.Object implements io.netty.resolver.dns.DnsQueryLifecycleObserver
{
private final io.netty.util.internal.logging.InternalLogger logger;
private final io.netty.util.internal.logging.InternalLogLevel level;
private final io.netty.handler.codec.dns.DnsQuestion question;
private java.net.InetSocketAddress dnsServerAddress;
void <init>(io.netty.handler.codec.dns.DnsQuestion, io.netty.util.internal.logging.InternalLogger, io.netty.util.internal.logging.InternalLogLevel)
{
io.netty.handler.codec.dns.DnsQuestion v1;
io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver v0;
io.netty.util.internal.logging.InternalLogger v2;
io.netty.util.internal.logging.InternalLogLevel v3;
java.lang.Object v4, v5, v6;
v0 := @this: io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver;
v1 := @parameter0: io.netty.handler.codec.dns.DnsQuestion;
v2 := @parameter1: io.netty.util.internal.logging.InternalLogger;
v3 := @parameter2: io.netty.util.internal.logging.InternalLogLevel;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "question");
v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.handler.codec.dns.DnsQuestion question> = v4;
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "logger");
v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.util.internal.logging.InternalLogger logger> = v5;
v6 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v3, "level");
v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.util.internal.logging.InternalLogLevel level> = v6;
return;
}
public void queryWritten(java.net.InetSocketAddress, io.netty.channel.ChannelFuture)
{
io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver v0;
java.net.InetSocketAddress v1;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver;
v1 := @parameter0: java.net.InetSocketAddress;
v2 := @parameter1: io.netty.channel.ChannelFuture;
v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: java.net.InetSocketAddress dnsServerAddress> = v1;
return;
}
public void queryCancelled(int)
{
java.lang.Object[] v5;
io.netty.handler.codec.dns.DnsQuestion v11, v7;
io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver v0;
io.netty.util.internal.logging.InternalLogLevel v10, v4;
java.lang.Integer v12, v8;
java.net.InetSocketAddress v2, v6;
io.netty.util.internal.logging.InternalLogger v3, v9;
int v1;
v0 := @this: io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver;
v1 := @parameter0: int;
v2 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: java.net.InetSocketAddress dnsServerAddress>;
if v2 == null goto label1;
v3 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.util.internal.logging.InternalLogger logger>;
v4 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.util.internal.logging.InternalLogLevel level>;
v5 = newarray (java.lang.Object)[3];
v6 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: java.net.InetSocketAddress dnsServerAddress>;
v5[0] = v6;
v7 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.handler.codec.dns.DnsQuestion question>;
v5[1] = v7;
v8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v5[2] = v8;
interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])>(v4, "from {} : {} cancelled with {} queries remaining", v5);
goto label2;
label1:
v9 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.util.internal.logging.InternalLogger logger>;
v10 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.util.internal.logging.InternalLogLevel level>;
v11 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.handler.codec.dns.DnsQuestion question>;
v12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
interfaceinvoke v9.<io.netty.util.internal.logging.InternalLogger: void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)>(v10, "{} query never written and cancelled with {} queries remaining", v11, v12);
label2:
return;
}
public io.netty.resolver.dns.DnsQueryLifecycleObserver queryRedirected(java.util.List)
{
java.util.List v1;
io.netty.handler.codec.dns.DnsQuestion v5;
io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver v0;
io.netty.util.internal.logging.InternalLogger v2;
io.netty.util.internal.logging.InternalLogLevel v3;
java.net.InetSocketAddress v4;
v0 := @this: io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver;
v1 := @parameter0: java.util.List;
v2 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.util.internal.logging.InternalLogger logger>;
v3 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.util.internal.logging.InternalLogLevel level>;
v4 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: java.net.InetSocketAddress dnsServerAddress>;
v5 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.handler.codec.dns.DnsQuestion question>;
interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)>(v3, "from {} : {} redirected", v4, v5);
return v0;
}
public io.netty.resolver.dns.DnsQueryLifecycleObserver queryCNAMEd(io.netty.handler.codec.dns.DnsQuestion)
{
java.lang.Object[] v4;
io.netty.handler.codec.dns.DnsQuestion v1, v6;
io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver v0;
io.netty.util.internal.logging.InternalLogger v2;
io.netty.util.internal.logging.InternalLogLevel v3;
java.net.InetSocketAddress v5;
v0 := @this: io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver;
v1 := @parameter0: io.netty.handler.codec.dns.DnsQuestion;
v2 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.util.internal.logging.InternalLogger logger>;
v3 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.util.internal.logging.InternalLogLevel level>;
v4 = newarray (java.lang.Object)[3];
v5 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: java.net.InetSocketAddress dnsServerAddress>;
v4[0] = v5;
v6 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.handler.codec.dns.DnsQuestion question>;
v4[1] = v6;
v4[2] = v1;
interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])>(v3, "from {} : {} CNAME question {}", v4);
return v0;
}
public io.netty.resolver.dns.DnsQueryLifecycleObserver queryNoAnswer(io.netty.handler.codec.dns.DnsResponseCode)
{
io.netty.handler.codec.dns.DnsResponseCode v1;
java.lang.Object[] v4;
io.netty.handler.codec.dns.DnsQuestion v6;
io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver v0;
io.netty.util.internal.logging.InternalLogger v2;
io.netty.util.internal.logging.InternalLogLevel v3;
java.net.InetSocketAddress v5;
v0 := @this: io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver;
v1 := @parameter0: io.netty.handler.codec.dns.DnsResponseCode;
v2 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.util.internal.logging.InternalLogger logger>;
v3 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.util.internal.logging.InternalLogLevel level>;
v4 = newarray (java.lang.Object)[3];
v5 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: java.net.InetSocketAddress dnsServerAddress>;
v4[0] = v5;
v6 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.handler.codec.dns.DnsQuestion question>;
v4[1] = v6;
v4[2] = v1;
interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])>(v3, "from {} : {} no answer {}", v4);
return v0;
}
public void queryFailed(java.lang.Throwable)
{
java.lang.Throwable v1;
java.lang.Object[] v5;
io.netty.handler.codec.dns.DnsQuestion v10, v7;
io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver v0;
io.netty.util.internal.logging.InternalLogLevel v4, v9;
java.net.InetSocketAddress v2, v6;
io.netty.util.internal.logging.InternalLogger v3, v8;
v0 := @this: io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: java.net.InetSocketAddress dnsServerAddress>;
if v2 == null goto label1;
v3 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.util.internal.logging.InternalLogger logger>;
v4 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.util.internal.logging.InternalLogLevel level>;
v5 = newarray (java.lang.Object)[3];
v6 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: java.net.InetSocketAddress dnsServerAddress>;
v5[0] = v6;
v7 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.handler.codec.dns.DnsQuestion question>;
v5[1] = v7;
v5[2] = v1;
interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object[])>(v4, "from {} : {} failure", v5);
goto label2;
label1:
v8 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.util.internal.logging.InternalLogger logger>;
v9 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.util.internal.logging.InternalLogLevel level>;
v10 = v0.<io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver: io.netty.handler.codec.dns.DnsQuestion question>;
interfaceinvoke v8.<io.netty.util.internal.logging.InternalLogger: void log(io.netty.util.internal.logging.InternalLogLevel,java.lang.String,java.lang.Object,java.lang.Object)>(v9, "{} query never written and failed", v10, v1);
label2:
return;
}
public void querySucceed()
{
io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver v0;
v0 := @this: io.netty.resolver.dns.LoggingDnsQueryLifecycleObserver;
return;
}
}