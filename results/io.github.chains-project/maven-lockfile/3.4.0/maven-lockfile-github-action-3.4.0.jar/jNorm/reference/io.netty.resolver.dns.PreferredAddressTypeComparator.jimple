final class io.netty.resolver.dns.PreferredAddressTypeComparator extends java.lang.Object implements java.util.Comparator
{
private static final io.netty.resolver.dns.PreferredAddressTypeComparator IPv4;
private static final io.netty.resolver.dns.PreferredAddressTypeComparator IPv6;
private final java.lang.Class preferredAddressType;
static io.netty.resolver.dns.PreferredAddressTypeComparator comparator(io.netty.channel.socket.InternetProtocolFamily)
{
int[] v1;
io.netty.resolver.dns.PreferredAddressTypeComparator v4, v5;
int v2, v3;
io.netty.channel.socket.InternetProtocolFamily v0;
java.lang.IllegalArgumentException v6;
v0 := @parameter0: io.netty.channel.socket.InternetProtocolFamily;
v1 = <io.netty.resolver.dns.PreferredAddressTypeComparator$1: int[] $SwitchMap$io$netty$channel$socket$InternetProtocolFamily>;
v2 = virtualinvoke v0.<io.netty.channel.socket.InternetProtocolFamily: int ordinal()>();
v3 = v1[v2];
lookupswitch(v3)
{
case 1: goto label1;
case 2: goto label2;
default: goto label3;
};
label1:
v4 = <io.netty.resolver.dns.PreferredAddressTypeComparator: io.netty.resolver.dns.PreferredAddressTypeComparator IPv4>;
return v4;
label2:
v5 = <io.netty.resolver.dns.PreferredAddressTypeComparator: io.netty.resolver.dns.PreferredAddressTypeComparator IPv6>;
return v5;
label3:
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>()>();
throw v6;
}
private void <init>(java.lang.Class)
{
java.lang.Class v1;
io.netty.resolver.dns.PreferredAddressTypeComparator v0;
v0 := @this: io.netty.resolver.dns.PreferredAddressTypeComparator;
v1 := @parameter0: java.lang.Class;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.resolver.dns.PreferredAddressTypeComparator: java.lang.Class preferredAddressType> = v1;
return;
}
public int compare(java.net.InetAddress, java.net.InetAddress)
{
io.netty.resolver.dns.PreferredAddressTypeComparator v0;
java.net.InetAddress v1, v2;
byte v8;
java.lang.Class v3, v4, v5, v6;
boolean v7;
v0 := @this: io.netty.resolver.dns.PreferredAddressTypeComparator;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: java.net.InetAddress;
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
if v3 != v4 goto label1;
return 0;
label1:
v5 = v0.<io.netty.resolver.dns.PreferredAddressTypeComparator: java.lang.Class preferredAddressType>;
v6 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v7 = virtualinvoke v5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v6);
if v7 == 0 goto label2;
v8 = -1;
goto label3;
label2:
v8 = 1;
label3:
return v8;
}
static void <clinit>()
{
io.netty.resolver.dns.PreferredAddressTypeComparator v0, v1;
v0 = new io.netty.resolver.dns.PreferredAddressTypeComparator;
specialinvoke v0.<io.netty.resolver.dns.PreferredAddressTypeComparator: void <init>(java.lang.Class)>(class "Ljava/net/Inet4Address;");
<io.netty.resolver.dns.PreferredAddressTypeComparator: io.netty.resolver.dns.PreferredAddressTypeComparator IPv4> = v0;
v1 = new io.netty.resolver.dns.PreferredAddressTypeComparator;
specialinvoke v1.<io.netty.resolver.dns.PreferredAddressTypeComparator: void <init>(java.lang.Class)>(class "Ljava/net/Inet6Address;");
<io.netty.resolver.dns.PreferredAddressTypeComparator: io.netty.resolver.dns.PreferredAddressTypeComparator IPv6> = v1;
return;
}
}