public abstract class io.netty.util.AbstractReferenceCounted extends java.lang.Object implements io.netty.util.ReferenceCounted
{
private static final long REFCNT_FIELD_OFFSET;
private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater AIF_UPDATER;
private static final io.netty.util.internal.ReferenceCountUpdater updater;
private volatile int refCnt;
public void <init>()
{
int v2;
io.netty.util.AbstractReferenceCounted v0;
io.netty.util.internal.ReferenceCountUpdater v1;
v0 := @this: io.netty.util.AbstractReferenceCounted;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = <io.netty.util.AbstractReferenceCounted: io.netty.util.internal.ReferenceCountUpdater updater>;
v2 = virtualinvoke v1.<io.netty.util.internal.ReferenceCountUpdater: int initialValue()>();
v0.<io.netty.util.AbstractReferenceCounted: int refCnt> = v2;
return;
}
public int refCnt()
{
int v2;
io.netty.util.AbstractReferenceCounted v0;
io.netty.util.internal.ReferenceCountUpdater v1;
v0 := @this: io.netty.util.AbstractReferenceCounted;
v1 = <io.netty.util.AbstractReferenceCounted: io.netty.util.internal.ReferenceCountUpdater updater>;
v2 = virtualinvoke v1.<io.netty.util.internal.ReferenceCountUpdater: int refCnt(io.netty.util.ReferenceCounted)>(v0);
return v2;
}
protected final void setRefCnt(int)
{
int v1;
io.netty.util.AbstractReferenceCounted v0;
io.netty.util.internal.ReferenceCountUpdater v2;
v0 := @this: io.netty.util.AbstractReferenceCounted;
v1 := @parameter0: int;
v2 = <io.netty.util.AbstractReferenceCounted: io.netty.util.internal.ReferenceCountUpdater updater>;
virtualinvoke v2.<io.netty.util.internal.ReferenceCountUpdater: void setRefCnt(io.netty.util.ReferenceCounted,int)>(v0, v1);
return;
}
public io.netty.util.ReferenceCounted retain()
{
io.netty.util.AbstractReferenceCounted v0;
io.netty.util.ReferenceCounted v2;
io.netty.util.internal.ReferenceCountUpdater v1;
v0 := @this: io.netty.util.AbstractReferenceCounted;
v1 = <io.netty.util.AbstractReferenceCounted: io.netty.util.internal.ReferenceCountUpdater updater>;
v2 = virtualinvoke v1.<io.netty.util.internal.ReferenceCountUpdater: io.netty.util.ReferenceCounted retain(io.netty.util.ReferenceCounted)>(v0);
return v2;
}
public io.netty.util.ReferenceCounted retain(int)
{
int v1;
io.netty.util.AbstractReferenceCounted v0;
io.netty.util.ReferenceCounted v3;
io.netty.util.internal.ReferenceCountUpdater v2;
v0 := @this: io.netty.util.AbstractReferenceCounted;
v1 := @parameter0: int;
v2 = <io.netty.util.AbstractReferenceCounted: io.netty.util.internal.ReferenceCountUpdater updater>;
v3 = virtualinvoke v2.<io.netty.util.internal.ReferenceCountUpdater: io.netty.util.ReferenceCounted retain(io.netty.util.ReferenceCounted,int)>(v0, v1);
return v3;
}
public io.netty.util.ReferenceCounted touch()
{
io.netty.util.AbstractReferenceCounted v0;
io.netty.util.ReferenceCounted v1;
v0 := @this: io.netty.util.AbstractReferenceCounted;
v1 = virtualinvoke v0.<io.netty.util.AbstractReferenceCounted: io.netty.util.ReferenceCounted touch(java.lang.Object)>(null);
return v1;
}
public boolean release()
{
io.netty.util.AbstractReferenceCounted v0;
boolean v2, v3;
io.netty.util.internal.ReferenceCountUpdater v1;
v0 := @this: io.netty.util.AbstractReferenceCounted;
v1 = <io.netty.util.AbstractReferenceCounted: io.netty.util.internal.ReferenceCountUpdater updater>;
v2 = virtualinvoke v1.<io.netty.util.internal.ReferenceCountUpdater: boolean release(io.netty.util.ReferenceCounted)>(v0);
v3 = specialinvoke v0.<io.netty.util.AbstractReferenceCounted: boolean handleRelease(boolean)>(v2);
return v3;
}
public boolean release(int)
{
int v1;
io.netty.util.AbstractReferenceCounted v0;
boolean v3, v4;
io.netty.util.internal.ReferenceCountUpdater v2;
v0 := @this: io.netty.util.AbstractReferenceCounted;
v1 := @parameter0: int;
v2 = <io.netty.util.AbstractReferenceCounted: io.netty.util.internal.ReferenceCountUpdater updater>;
v3 = virtualinvoke v2.<io.netty.util.internal.ReferenceCountUpdater: boolean release(io.netty.util.ReferenceCounted,int)>(v0, v1);
v4 = specialinvoke v0.<io.netty.util.AbstractReferenceCounted: boolean handleRelease(boolean)>(v3);
return v4;
}
private boolean handleRelease(boolean)
{
io.netty.util.AbstractReferenceCounted v0;
boolean v1;
v0 := @this: io.netty.util.AbstractReferenceCounted;
v1 := @parameter0: boolean;
if v1 == 0 goto label1;
virtualinvoke v0.<io.netty.util.AbstractReferenceCounted: void deallocate()>();
label1:
return v1;
}
protected abstract void deallocate();
static void <clinit>()
{
io.netty.util.AbstractReferenceCounted$1 v2;
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v1;
long v0;
v0 = staticinvoke <io.netty.util.internal.ReferenceCountUpdater: long getUnsafeOffset(java.lang.Class,java.lang.String)>(class "Lio/netty/util/AbstractReferenceCounted;", "refCnt");
<io.netty.util.AbstractReferenceCounted: long REFCNT_FIELD_OFFSET> = v0;
v1 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lio/netty/util/AbstractReferenceCounted;", "refCnt");
<io.netty.util.AbstractReferenceCounted: java.util.concurrent.atomic.AtomicIntegerFieldUpdater AIF_UPDATER> = v1;
v2 = new io.netty.util.AbstractReferenceCounted$1;
specialinvoke v2.<io.netty.util.AbstractReferenceCounted$1: void <init>()>();
<io.netty.util.AbstractReferenceCounted: io.netty.util.internal.ReferenceCountUpdater updater> = v2;
return;
}
}