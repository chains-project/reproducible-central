final class io.netty.util.DefaultAttributeMap$DefaultAttribute extends java.util.concurrent.atomic.AtomicReference implements io.netty.util.Attribute
{
private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater MAP_UPDATER;
private static final long serialVersionUID;
private volatile io.netty.util.DefaultAttributeMap attributeMap;
private final io.netty.util.AttributeKey key;
void <init>(io.netty.util.DefaultAttributeMap, io.netty.util.AttributeKey)
{
io.netty.util.AttributeKey v2;
io.netty.util.DefaultAttributeMap$DefaultAttribute v0;
io.netty.util.DefaultAttributeMap v1;
v0 := @this: io.netty.util.DefaultAttributeMap$DefaultAttribute;
v1 := @parameter0: io.netty.util.DefaultAttributeMap;
v2 := @parameter1: io.netty.util.AttributeKey;
specialinvoke v0.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.netty.util.DefaultAttributeMap$DefaultAttribute: io.netty.util.DefaultAttributeMap attributeMap> = v1;
v0.<io.netty.util.DefaultAttributeMap$DefaultAttribute: io.netty.util.AttributeKey key> = v2;
return;
}
public io.netty.util.AttributeKey key()
{
io.netty.util.AttributeKey v1;
io.netty.util.DefaultAttributeMap$DefaultAttribute v0;
v0 := @this: io.netty.util.DefaultAttributeMap$DefaultAttribute;
v1 = v0.<io.netty.util.DefaultAttributeMap$DefaultAttribute: io.netty.util.AttributeKey key>;
return v1;
}
private boolean isRemoved()
{
io.netty.util.DefaultAttributeMap$DefaultAttribute v0;
io.netty.util.DefaultAttributeMap v1;
boolean v2;
v0 := @this: io.netty.util.DefaultAttributeMap$DefaultAttribute;
v1 = v0.<io.netty.util.DefaultAttributeMap$DefaultAttribute: io.netty.util.DefaultAttributeMap attributeMap>;
if v1 != null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public java.lang.Object setIfAbsent(java.lang.Object)
{
io.netty.util.DefaultAttributeMap$DefaultAttribute v0;
java.lang.Object v1, v3;
boolean v2;
v0 := @this: io.netty.util.DefaultAttributeMap$DefaultAttribute;
v1 := @parameter0: java.lang.Object;
label1:
v2 = virtualinvoke v0.<io.netty.util.DefaultAttributeMap$DefaultAttribute: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
if v2 != 0 goto label2;
v3 = virtualinvoke v0.<io.netty.util.DefaultAttributeMap$DefaultAttribute: java.lang.Object get()>();
if v3 == null goto label1;
return v3;
label2:
return null;
}
public java.lang.Object getAndRemove()
{
io.netty.util.AttributeKey v6;
io.netty.util.DefaultAttributeMap v1;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v2;
io.netty.util.DefaultAttributeMap$DefaultAttribute v0;
java.lang.Object v5;
boolean v3, v4;
v0 := @this: io.netty.util.DefaultAttributeMap$DefaultAttribute;
v1 = v0.<io.netty.util.DefaultAttributeMap$DefaultAttribute: io.netty.util.DefaultAttributeMap attributeMap>;
if v1 == null goto label1;
v2 = <io.netty.util.DefaultAttributeMap$DefaultAttribute: java.util.concurrent.atomic.AtomicReferenceFieldUpdater MAP_UPDATER>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v1, null);
if v3 == 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
v5 = virtualinvoke v0.<io.netty.util.DefaultAttributeMap$DefaultAttribute: java.lang.Object getAndSet(java.lang.Object)>(null);
if v4 == 0 goto label3;
v6 = v0.<io.netty.util.DefaultAttributeMap$DefaultAttribute: io.netty.util.AttributeKey key>;
specialinvoke v1.<io.netty.util.DefaultAttributeMap: void removeAttributeIfMatch(io.netty.util.AttributeKey,io.netty.util.DefaultAttributeMap$DefaultAttribute)>(v6, v0);
label3:
return v5;
}
public void remove()
{
io.netty.util.AttributeKey v5;
io.netty.util.DefaultAttributeMap v1;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v2;
io.netty.util.DefaultAttributeMap$DefaultAttribute v0;
boolean v3, v4;
v0 := @this: io.netty.util.DefaultAttributeMap$DefaultAttribute;
v1 = v0.<io.netty.util.DefaultAttributeMap$DefaultAttribute: io.netty.util.DefaultAttributeMap attributeMap>;
if v1 == null goto label1;
v2 = <io.netty.util.DefaultAttributeMap$DefaultAttribute: java.util.concurrent.atomic.AtomicReferenceFieldUpdater MAP_UPDATER>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v1, null);
if v3 == 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
virtualinvoke v0.<io.netty.util.DefaultAttributeMap$DefaultAttribute: void set(java.lang.Object)>(null);
if v4 == 0 goto label3;
v5 = v0.<io.netty.util.DefaultAttributeMap$DefaultAttribute: io.netty.util.AttributeKey key>;
specialinvoke v1.<io.netty.util.DefaultAttributeMap: void removeAttributeIfMatch(io.netty.util.AttributeKey,io.netty.util.DefaultAttributeMap$DefaultAttribute)>(v5, v0);
label3:
return;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v0;
v0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lio/netty/util/DefaultAttributeMap$DefaultAttribute;", class "Lio/netty/util/DefaultAttributeMap;", "attributeMap");
<io.netty.util.DefaultAttributeMap$DefaultAttribute: java.util.concurrent.atomic.AtomicReferenceFieldUpdater MAP_UPDATER> = v0;
return;
}
}