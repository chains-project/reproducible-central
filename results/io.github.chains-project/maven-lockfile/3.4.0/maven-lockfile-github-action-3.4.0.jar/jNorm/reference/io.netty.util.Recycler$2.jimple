class io.netty.util.Recycler$2 extends io.netty.util.concurrent.FastThreadLocal
{
final io.netty.util.Recycler this$0;
void <init>(io.netty.util.Recycler)
{
io.netty.util.Recycler v1;
io.netty.util.Recycler$2 v0;
v0 := @this: io.netty.util.Recycler$2;
v1 := @parameter0: io.netty.util.Recycler;
v0.<io.netty.util.Recycler$2: io.netty.util.Recycler this$0> = v1;
specialinvoke v0.<io.netty.util.concurrent.FastThreadLocal: void <init>()>();
return;
}
protected io.netty.util.Recycler$LocalPool initialValue()
{
io.netty.util.Recycler v2, v4, v6;
int v3, v5, v7;
io.netty.util.Recycler$LocalPool v1;
io.netty.util.Recycler$2 v0;
v0 := @this: io.netty.util.Recycler$2;
v1 = new io.netty.util.Recycler$LocalPool;
v2 = v0.<io.netty.util.Recycler$2: io.netty.util.Recycler this$0>;
v3 = v2.<io.netty.util.Recycler: int maxCapacityPerThread>;
v4 = v0.<io.netty.util.Recycler$2: io.netty.util.Recycler this$0>;
v5 = v4.<io.netty.util.Recycler: int interval>;
v6 = v0.<io.netty.util.Recycler$2: io.netty.util.Recycler this$0>;
v7 = v6.<io.netty.util.Recycler: int chunkSize>;
specialinvoke v1.<io.netty.util.Recycler$LocalPool: void <init>(int,int,int)>(v3, v5, v7);
return v1;
}
protected void onRemoval(io.netty.util.Recycler$LocalPool) throws java.lang.Exception
{
io.netty.util.Recycler$LocalPool v1;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue v2;
io.netty.util.Recycler$2 v0;
v0 := @this: io.netty.util.Recycler$2;
v1 := @parameter0: io.netty.util.Recycler$LocalPool;
specialinvoke v0.<io.netty.util.concurrent.FastThreadLocal: void onRemoval(java.lang.Object)>(v1);
v2 = v1.<io.netty.util.Recycler$LocalPool: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue pooledHandles>;
v1.<io.netty.util.Recycler$LocalPool: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue pooledHandles> = null;
v1.<io.netty.util.Recycler$LocalPool: java.lang.Thread owner> = null;
interfaceinvoke v2.<io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue: void clear()>();
return;
}
}