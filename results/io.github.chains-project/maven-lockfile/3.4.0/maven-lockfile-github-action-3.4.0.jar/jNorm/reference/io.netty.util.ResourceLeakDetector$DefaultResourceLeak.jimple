final class io.netty.util.ResourceLeakDetector$DefaultResourceLeak extends java.lang.ref.WeakReference implements io.netty.util.ResourceLeakTracker, io.netty.util.ResourceLeak
{
private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater headUpdater;
private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater droppedRecordsUpdater;
private volatile io.netty.util.ResourceLeakDetector$TraceRecord head;
private volatile int droppedRecords;
private final java.util.Set allLeaks;
private final int trackedHash;
static final boolean $assertionsDisabled;
void <init>(java.lang.Object, java.lang.ref.ReferenceQueue, java.util.Set, java.lang.Object)
{
io.netty.util.ResourceLeakDetector$DefaultResourceLeak v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v8;
io.netty.util.ResourceLeakDetector$TraceRecord v10, v11, v9;
java.util.Set v3;
java.lang.AssertionError v6;
java.lang.ref.ReferenceQueue v2;
int v7;
java.lang.Object v1, v4;
boolean v5;
v0 := @this: io.netty.util.ResourceLeakDetector$DefaultResourceLeak;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.ref.ReferenceQueue;
v3 := @parameter2: java.util.Set;
v4 := @parameter3: java.lang.Object;
specialinvoke v0.<java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(v1, v2);
v5 = <io.netty.util.ResourceLeakDetector$DefaultResourceLeak: boolean $assertionsDisabled>;
if v5 != 0 goto label1;
if v1 != null goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
v7 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(v1);
v0.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: int trackedHash> = v7;
interfaceinvoke v3.<java.util.Set: boolean add(java.lang.Object)>(v0);
v8 = <io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.util.concurrent.atomic.AtomicReferenceFieldUpdater headUpdater>;
if v4 != null goto label2;
v9 = new io.netty.util.ResourceLeakDetector$TraceRecord;
v10 = <io.netty.util.ResourceLeakDetector$TraceRecord: io.netty.util.ResourceLeakDetector$TraceRecord BOTTOM>;
specialinvoke v9.<io.netty.util.ResourceLeakDetector$TraceRecord: void <init>(io.netty.util.ResourceLeakDetector$TraceRecord)>(v10);
goto label3;
label2:
v9 = new io.netty.util.ResourceLeakDetector$TraceRecord;
v11 = <io.netty.util.ResourceLeakDetector$TraceRecord: io.netty.util.ResourceLeakDetector$TraceRecord BOTTOM>;
specialinvoke v9.<io.netty.util.ResourceLeakDetector$TraceRecord: void <init>(io.netty.util.ResourceLeakDetector$TraceRecord,java.lang.Object)>(v11, v4);
label3:
virtualinvoke v8.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>(v0, v9);
v0.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.util.Set allLeaks> = v3;
return;
}
public void record()
{
io.netty.util.ResourceLeakDetector$DefaultResourceLeak v0;
v0 := @this: io.netty.util.ResourceLeakDetector$DefaultResourceLeak;
specialinvoke v0.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: void record0(java.lang.Object)>(null);
return;
}
public void record(java.lang.Object)
{
java.lang.Object v1;
io.netty.util.ResourceLeakDetector$DefaultResourceLeak v0;
v0 := @this: io.netty.util.ResourceLeakDetector$DefaultResourceLeak;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: void record0(java.lang.Object)>(v1);
return;
}
private void record0(java.lang.Object)
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v20;
io.netty.util.ResourceLeakDetector$DefaultResourceLeak v0;
io.netty.util.ResourceLeakDetector$TraceRecord v17, v5;
java.util.Random v12;
int v10, v11, v13, v14, v2, v6, v7, v8, v9;
boolean v15, v16, v19;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v18, v3;
java.lang.Object v1, v4;
v0 := @this: io.netty.util.ResourceLeakDetector$DefaultResourceLeak;
v1 := @parameter0: java.lang.Object;
v2 = <io.netty.util.ResourceLeakDetector: int TARGET_RECORDS>;
if v2 <= 0 goto label9;
label1:
v3 = <io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.util.concurrent.atomic.AtomicReferenceFieldUpdater headUpdater>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(v0);
v5 = v4;
if v4 != null goto label2;
return;
label2:
v6 = v4.<io.netty.util.ResourceLeakDetector$TraceRecord: int pos>;
v7 = v6 + 1;
v8 = <io.netty.util.ResourceLeakDetector: int TARGET_RECORDS>;
if v7 < v8 goto label5;
v9 = <io.netty.util.ResourceLeakDetector: int TARGET_RECORDS>;
v10 = v7 - v9;
v11 = staticinvoke <java.lang.Math: int min(int,int)>(v10, 30);
v12 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.Random threadLocalRandom()>();
v13 = 1 << v11;
v14 = virtualinvoke v12.<java.util.Random: int nextInt(int)>(v13);
if v14 == 0 goto label3;
v15 = 1;
goto label4;
label3:
v15 = 0;
label4:
v16 = v15;
if v15 == 0 goto label6;
v5 = v4.<io.netty.util.ResourceLeakDetector$TraceRecord: io.netty.util.ResourceLeakDetector$TraceRecord next>;
goto label6;
label5:
v16 = 0;
label6:
if v1 == null goto label7;
v17 = new io.netty.util.ResourceLeakDetector$TraceRecord;
specialinvoke v17.<io.netty.util.ResourceLeakDetector$TraceRecord: void <init>(io.netty.util.ResourceLeakDetector$TraceRecord,java.lang.Object)>(v5, v1);
goto label8;
label7:
v17 = new io.netty.util.ResourceLeakDetector$TraceRecord;
specialinvoke v17.<io.netty.util.ResourceLeakDetector$TraceRecord: void <init>(io.netty.util.ResourceLeakDetector$TraceRecord)>(v5);
label8:
v18 = <io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.util.concurrent.atomic.AtomicReferenceFieldUpdater headUpdater>;
v19 = virtualinvoke v18.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v4, v17);
if v19 == 0 goto label1;
if v16 == 0 goto label9;
v20 = <io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.util.concurrent.atomic.AtomicIntegerFieldUpdater droppedRecordsUpdater>;
virtualinvoke v20.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int incrementAndGet(java.lang.Object)>(v0);
label9:
return;
}
boolean dispose()
{
java.util.Set v1;
io.netty.util.ResourceLeakDetector$DefaultResourceLeak v0;
boolean v2;
v0 := @this: io.netty.util.ResourceLeakDetector$DefaultResourceLeak;
virtualinvoke v0.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: void clear()>();
v1 = v0.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.util.Set allLeaks>;
v2 = interfaceinvoke v1.<java.util.Set: boolean remove(java.lang.Object)>(v0);
return v2;
}
public boolean close()
{
io.netty.util.ResourceLeakDetector$DefaultResourceLeak v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v3;
java.util.Set v1;
boolean v2;
v0 := @this: io.netty.util.ResourceLeakDetector$DefaultResourceLeak;
v1 = v0.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.util.Set allLeaks>;
v2 = interfaceinvoke v1.<java.util.Set: boolean remove(java.lang.Object)>(v0);
if v2 == 0 goto label1;
virtualinvoke v0.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: void clear()>();
v3 = <io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.util.concurrent.atomic.AtomicReferenceFieldUpdater headUpdater>;
virtualinvoke v3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>(v0, null);
return 1;
label1:
return 0;
}
public boolean close(java.lang.Object)
{
java.lang.Throwable v7;
io.netty.util.ResourceLeakDetector$DefaultResourceLeak v0;
java.lang.AssertionError v5;
int v3, v4;
java.lang.Object v1;
boolean v2, v6;
v0 := @this: io.netty.util.ResourceLeakDetector$DefaultResourceLeak;
v1 := @parameter0: java.lang.Object;
v2 = <io.netty.util.ResourceLeakDetector$DefaultResourceLeak: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: int trackedHash>;
v4 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(v1);
if v3 == v4 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = virtualinvoke v0.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: boolean close()>();
label2:
staticinvoke <io.netty.util.ResourceLeakDetector$DefaultResourceLeak: void reachabilityFence0(java.lang.Object)>(v1);
return v6;
label3:
v7 := @caughtexception;
staticinvoke <io.netty.util.ResourceLeakDetector$DefaultResourceLeak: void reachabilityFence0(java.lang.Object)>(v1);
throw v7;
catch java.lang.Throwable from label1 to label2 with label3;
}
private static void reachabilityFence0(java.lang.Object)
{
java.lang.Throwable v1;
java.lang.Object v0;
v0 := @parameter0: java.lang.Object;
if v0 == null goto label4;
entermonitor v0;
label1:
exitmonitor v0;
label2:
goto label4;
label3:
v1 := @caughtexception;
exitmonitor v0;
throw v1;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public java.lang.String toString()
{
io.netty.util.ResourceLeakDetector$DefaultResourceLeak v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v1;
java.lang.Object v2;
java.lang.String v3;
v0 := @this: io.netty.util.ResourceLeakDetector$DefaultResourceLeak;
v1 = <io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.util.concurrent.atomic.AtomicReferenceFieldUpdater headUpdater>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(v0);
v3 = specialinvoke v0.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String generateReport(io.netty.util.ResourceLeakDetector$TraceRecord)>(v2);
return v3;
}
java.lang.String getReportAndClearRecords()
{
io.netty.util.ResourceLeakDetector$DefaultResourceLeak v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v1;
java.lang.Object v2;
java.lang.String v3;
v0 := @this: io.netty.util.ResourceLeakDetector$DefaultResourceLeak;
v1 = <io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.util.concurrent.atomic.AtomicReferenceFieldUpdater headUpdater>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(v0, null);
v3 = specialinvoke v0.<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.lang.String generateReport(io.netty.util.ResourceLeakDetector$TraceRecord)>(v2);
return v3;
}
private java.lang.String generateReport(io.netty.util.ResourceLeakDetector$TraceRecord)
{
io.netty.util.ResourceLeakDetector$TraceRecord v1, v12, v15, v16;
boolean v14;
java.lang.StringBuilder v28, v29, v30, v31, v32, v33, v34;
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v2;
io.netty.util.ResourceLeakDetector$DefaultResourceLeak v0;
java.util.HashSet v11;
int v10, v18, v21, v23, v25, v26, v3, v4, v5, v6, v7;
java.lang.String v13, v17, v19, v20, v22, v24, v27, v8, v9;
v0 := @this: io.netty.util.ResourceLeakDetector$DefaultResourceLeak;
v1 := @parameter0: io.netty.util.ResourceLeakDetector$TraceRecord;
if v1 != null goto label1;
return "";
label1:
v2 = <io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.util.concurrent.atomic.AtomicIntegerFieldUpdater droppedRecordsUpdater>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(v0);
v4 = 0;
v5 = v1.<io.netty.util.ResourceLeakDetector$TraceRecord: int pos>;
v6 = v5 + 1;
v7 = v6 * 2048;
specialinvoke v28.<java.lang.StringBuilder: void <init>(int)>(v7);
v8 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
v9 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
virtualinvoke v30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v9);
v10 = 1;
v11 = new java.util.HashSet;
specialinvoke v11.<java.util.HashSet: void <init>(int)>(v6);
label2:
v12 = <io.netty.util.ResourceLeakDetector$TraceRecord: io.netty.util.ResourceLeakDetector$TraceRecord BOTTOM>;
if v1 == v12 goto label6;
v13 = virtualinvoke v1.<io.netty.util.ResourceLeakDetector$TraceRecord: java.lang.String toString()>();
v14 = interfaceinvoke v11.<java.util.Set: boolean add(java.lang.Object)>(v13);
if v14 == 0 goto label4;
v15 = v1.<io.netty.util.ResourceLeakDetector$TraceRecord: io.netty.util.ResourceLeakDetector$TraceRecord next>;
v16 = <io.netty.util.ResourceLeakDetector$TraceRecord: io.netty.util.ResourceLeakDetector$TraceRecord BOTTOM>;
if v15 != v16 goto label3;
v17 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
virtualinvoke v34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v13);
goto label5;
label3:
v18 = v10;
v10 = v10 + 1;
v19 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
virtualinvoke v33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v13);
goto label5;
label4:
v4 = v4 + 1;
label5:
v1 = v1.<io.netty.util.ResourceLeakDetector$TraceRecord: io.netty.util.ResourceLeakDetector$TraceRecord next>;
goto label2;
label6:
if v4 <= 0 goto label7;
v20 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
virtualinvoke v32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v20);
label7:
if v3 <= 0 goto label8;
v21 = <io.netty.util.ResourceLeakDetector: int TARGET_RECORDS>;
v22 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
virtualinvoke v31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v22);
label8:
v23 = virtualinvoke v29.<java.lang.StringBuilder: int length()>();
v24 = <io.netty.util.internal.StringUtil: java.lang.String NEWLINE>;
v25 = virtualinvoke v24.<java.lang.String: int length()>();
v26 = v23 - v25;
virtualinvoke v29.<java.lang.StringBuilder: void setLength(int)>(v26);
v27 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,int,java.lang.String,int,int,int)>(v8, v17, v18, v19, v4, v3, v21) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001Recent access records: Created at:\u0001#\u0001:\u0001: \u0001 leak records were discarded because they were duplicates: \u0001 leak records were discarded because the leak record count is targeted to \u0001. Use system property io.netty.leakDetection.targetRecords to increase the limit.");
return v27;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v4;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v3;
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/util/ResourceLeakDetector;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lio/netty/util/ResourceLeakDetector$DefaultResourceLeak;", class "Lio/netty/util/ResourceLeakDetector$TraceRecord;", "head");
<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.util.concurrent.atomic.AtomicReferenceFieldUpdater headUpdater> = v3;
v4 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lio/netty/util/ResourceLeakDetector$DefaultResourceLeak;", "droppedRecords");
<io.netty.util.ResourceLeakDetector$DefaultResourceLeak: java.util.concurrent.atomic.AtomicIntegerFieldUpdater droppedRecordsUpdater> = v4;
return;
}
}