public class io.netty.util.collection.ShortObjectHashMap extends java.lang.Object implements io.netty.util.collection.ShortObjectMap
{
public static final int DEFAULT_CAPACITY;
public static final float DEFAULT_LOAD_FACTOR;
private static final java.lang.Object NULL_VALUE;
private int maxSize;
private final float loadFactor;
private short[] keys;
private java.lang.Object[] values;
private int size;
private int mask;
private final java.util.Set keySet;
private final java.util.Set entrySet;
private final java.lang.Iterable entries;
static final boolean $assertionsDisabled;
public void <init>()
{
io.netty.util.collection.ShortObjectHashMap v0;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: void <init>(int,float)>(8, 0.5F);
return;
}
public void <init>(int)
{
int v1;
io.netty.util.collection.ShortObjectHashMap v0;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: void <init>(int,float)>(v1, 0.5F);
return;
}
public void <init>(int, float)
{
java.lang.Object[] v12;
io.netty.util.collection.ShortObjectHashMap$KeySet v3;
io.netty.util.collection.ShortObjectHashMap v0;
java.lang.IllegalArgumentException v8;
io.netty.util.collection.ShortObjectHashMap$EntrySet v4;
byte v6, v7;
io.netty.util.collection.ShortObjectHashMap$1 v5;
int v1, v10, v13, v9;
float v2;
short[] v11;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: int;
v2 := @parameter1: float;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new io.netty.util.collection.ShortObjectHashMap$KeySet;
specialinvoke v3.<io.netty.util.collection.ShortObjectHashMap$KeySet: void <init>(io.netty.util.collection.ShortObjectHashMap)>(v0);
v0.<io.netty.util.collection.ShortObjectHashMap: java.util.Set keySet> = v3;
v4 = new io.netty.util.collection.ShortObjectHashMap$EntrySet;
specialinvoke v4.<io.netty.util.collection.ShortObjectHashMap$EntrySet: void <init>(io.netty.util.collection.ShortObjectHashMap)>(v0);
v0.<io.netty.util.collection.ShortObjectHashMap: java.util.Set entrySet> = v4;
v5 = new io.netty.util.collection.ShortObjectHashMap$1;
specialinvoke v5.<io.netty.util.collection.ShortObjectHashMap$1: void <init>(io.netty.util.collection.ShortObjectHashMap)>(v0);
v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Iterable entries> = v5;
v6 = v2 cmpg 0.0F;
if v6 <= 0 goto label1;
v7 = v2 cmpl 1.0F;
if v7 <= 0 goto label2;
label1:
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("loadFactor must be > 0 and <= 1");
throw v8;
label2:
v0.<io.netty.util.collection.ShortObjectHashMap: float loadFactor> = v2;
v9 = staticinvoke <io.netty.util.internal.MathUtil: int safeFindNextPositivePowerOfTwo(int)>(v1);
v10 = v9 - 1;
v0.<io.netty.util.collection.ShortObjectHashMap: int mask> = v10;
v11 = newarray (short)[v9];
v0.<io.netty.util.collection.ShortObjectHashMap: short[] keys> = v11;
v12 = newarray (java.lang.Object)[v9];
v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values> = v12;
v13 = specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: int calcMaxSize(int)>(v9);
v0.<io.netty.util.collection.ShortObjectHashMap: int maxSize> = v13;
return;
}
private static java.lang.Object toExternal(java.lang.Object)
{
java.lang.Object v0, v3, v4;
java.lang.AssertionError v2;
boolean v1;
v0 := @parameter0: java.lang.Object;
v1 = <io.netty.util.collection.ShortObjectHashMap: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
if v0 != null goto label1;
v2 = new java.lang.AssertionError;
specialinvoke v2.<java.lang.AssertionError: void <init>(java.lang.Object)>("null is not a legitimate internal value. Concurrent Modification?");
throw v2;
label1:
v3 = <io.netty.util.collection.ShortObjectHashMap: java.lang.Object NULL_VALUE>;
if v0 != v3 goto label2;
v4 = null;
goto label3;
label2:
v4 = v0;
label3:
return v4;
}
private static java.lang.Object toInternal(java.lang.Object)
{
java.lang.Object v0, v1;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
v1 = <io.netty.util.collection.ShortObjectHashMap: java.lang.Object NULL_VALUE>;
goto label2;
label1:
v1 = v0;
label2:
return v1;
}
public java.lang.Object get(short)
{
short v1;
java.lang.Object[] v5;
int v2, v3;
io.netty.util.collection.ShortObjectHashMap v0;
java.lang.Object v4, v6;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: short;
v2 = specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: int indexOf(short)>(v1);
v3 = (int) -1;
if v2 != v3 goto label1;
v4 = null;
goto label2;
label1:
v5 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v6 = v5[v2];
v4 = staticinvoke <io.netty.util.collection.ShortObjectHashMap: java.lang.Object toExternal(java.lang.Object)>(v6);
label2:
return v4;
}
public java.lang.Object put(short, java.lang.Object)
{
java.lang.IllegalStateException v18;
java.lang.Object[] v12, v14, v5, v8;
io.netty.util.collection.ShortObjectHashMap v0;
short v1, v11;
int v17, v3, v4;
java.lang.Object v13, v15, v16, v2, v6, v9;
short[] v10, v7;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: short;
v2 := @parameter1: java.lang.Object;
v3 = specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: int hashIndex(short)>(v1);
v4 = v3;
label1:
v5 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v6 = v5[v4];
if v6 != null goto label2;
v7 = v0.<io.netty.util.collection.ShortObjectHashMap: short[] keys>;
v7[v4] = v1;
v8 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v9 = staticinvoke <io.netty.util.collection.ShortObjectHashMap: java.lang.Object toInternal(java.lang.Object)>(v2);
v8[v4] = v9;
specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: void growSize()>();
return null;
label2:
v10 = v0.<io.netty.util.collection.ShortObjectHashMap: short[] keys>;
v11 = v10[v4];
if v11 != v1 goto label3;
v12 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v13 = v12[v4];
v14 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v15 = staticinvoke <io.netty.util.collection.ShortObjectHashMap: java.lang.Object toInternal(java.lang.Object)>(v2);
v14[v4] = v15;
v16 = staticinvoke <io.netty.util.collection.ShortObjectHashMap: java.lang.Object toExternal(java.lang.Object)>(v13);
return v16;
label3:
v17 = specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: int probeNext(int)>(v4);
v4 = v17;
if v17 != v3 goto label1;
v18 = new java.lang.IllegalStateException;
specialinvoke v18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to insert");
throw v18;
}
public void putAll(java.util.Map)
{
java.lang.Object[] v4, v6;
io.netty.util.collection.ShortObjectHashMap v0;
short v9;
java.util.Map v1;
int v3, v5;
boolean v12, v2;
java.util.Iterator v11;
java.util.Set v10;
java.lang.Object v13, v14, v15, v7;
short[] v8;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: java.util.Map;
v2 = v1 instanceof io.netty.util.collection.ShortObjectHashMap;
if v2 == 0 goto label4;
v3 = 0;
label1:
v4 = v1.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v5 = lengthof v4;
if v3 >= v5 goto label3;
v6 = v1.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v7 = v6[v3];
if v7 == null goto label2;
v8 = v1.<io.netty.util.collection.ShortObjectHashMap: short[] keys>;
v9 = v8[v3];
virtualinvoke v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object put(short,java.lang.Object)>(v9, v7);
label2:
v3 = v3 + 1;
goto label1;
label3:
return;
label4:
v10 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v11 = interfaceinvoke v10.<java.util.Set: java.util.Iterator iterator()>();
label5:
v12 = interfaceinvoke v11.<java.util.Iterator: boolean hasNext()>();
if v12 == 0 goto label6;
v13 = interfaceinvoke v11.<java.util.Iterator: java.lang.Object next()>();
v14 = interfaceinvoke v13.<java.util.Map$Entry: java.lang.Object getKey()>();
v15 = interfaceinvoke v13.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object put(java.lang.Short,java.lang.Object)>(v14, v15);
goto label5;
label6:
return;
}
public java.lang.Object remove(short)
{
short v1;
java.lang.Object[] v4;
int v2, v3;
io.netty.util.collection.ShortObjectHashMap v0;
java.lang.Object v5, v6;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: short;
v2 = specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: int indexOf(short)>(v1);
v3 = (int) -1;
if v2 != v3 goto label1;
return null;
label1:
v4 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v5 = v4[v2];
specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: boolean removeAt(int)>(v2);
v6 = staticinvoke <io.netty.util.collection.ShortObjectHashMap: java.lang.Object toExternal(java.lang.Object)>(v5);
return v6;
}
public int size()
{
int v1;
io.netty.util.collection.ShortObjectHashMap v0;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 = v0.<io.netty.util.collection.ShortObjectHashMap: int size>;
return v1;
}
public boolean isEmpty()
{
int v1;
io.netty.util.collection.ShortObjectHashMap v0;
boolean v2;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 = v0.<io.netty.util.collection.ShortObjectHashMap: int size>;
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public void clear()
{
io.netty.util.collection.ShortObjectHashMap v0;
java.lang.Object[] v2;
short[] v1;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 = v0.<io.netty.util.collection.ShortObjectHashMap: short[] keys>;
staticinvoke <java.util.Arrays: void fill(short[],short)>(v1, 0);
v2 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(v2, null);
v0.<io.netty.util.collection.ShortObjectHashMap: int size> = 0;
return;
}
public boolean containsKey(short)
{
short v1;
int v2;
io.netty.util.collection.ShortObjectHashMap v0;
boolean v3;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: short;
v2 = specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: int indexOf(short)>(v1);
if v2 < 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean containsValue(java.lang.Object)
{
java.lang.Object[] v3;
io.netty.util.collection.ShortObjectHashMap v0;
int v4, v5;
java.lang.Object v1, v2, v6;
boolean v7;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <io.netty.util.collection.ShortObjectHashMap: java.lang.Object toInternal(java.lang.Object)>(v1);
v3 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label3;
v6 = v3[v5];
if v6 == null goto label2;
v7 = virtualinvoke v6.<java.lang.Object: boolean equals(java.lang.Object)>(v2);
if v7 == 0 goto label2;
return 1;
label2:
v5 = v5 + 1;
goto label1;
label3:
return 0;
}
public java.lang.Iterable entries()
{
io.netty.util.collection.ShortObjectHashMap v0;
java.lang.Iterable v1;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Iterable entries>;
return v1;
}
public java.util.Collection values()
{
io.netty.util.collection.ShortObjectHashMap v0;
io.netty.util.collection.ShortObjectHashMap$2 v1;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 = new io.netty.util.collection.ShortObjectHashMap$2;
specialinvoke v1.<io.netty.util.collection.ShortObjectHashMap$2: void <init>(io.netty.util.collection.ShortObjectHashMap)>(v0);
return v1;
}
public int hashCode()
{
short v5;
int v1, v3, v4, v6;
io.netty.util.collection.ShortObjectHashMap v0;
short[] v2;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 = v0.<io.netty.util.collection.ShortObjectHashMap: int size>;
v2 = v0.<io.netty.util.collection.ShortObjectHashMap: short[] keys>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v6 = staticinvoke <io.netty.util.collection.ShortObjectHashMap: int hashCode(short)>(v5);
v1 = v1 ^ v6;
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public boolean equals(java.lang.Object)
{
java.lang.Object[] v6, v8;
io.netty.util.collection.ShortObjectHashMap v0;
short v11;
int v3, v4, v5, v7;
java.lang.Object v1, v12, v13, v9;
short[] v10;
boolean v14, v2;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
v2 = v1 instanceof io.netty.util.collection.ShortObjectMap;
if v2 != 0 goto label2;
return 0;
label2:
v3 = v0.<io.netty.util.collection.ShortObjectHashMap: int size>;
v4 = interfaceinvoke v1.<io.netty.util.collection.ShortObjectMap: int size()>();
if v3 == v4 goto label3;
return 0;
label3:
v5 = 0;
label4:
v6 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v7 = lengthof v6;
if v5 >= v7 goto label7;
v8 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v9 = v8[v5];
if v9 == null goto label6;
v10 = v0.<io.netty.util.collection.ShortObjectHashMap: short[] keys>;
v11 = v10[v5];
v12 = interfaceinvoke v1.<io.netty.util.collection.ShortObjectMap: java.lang.Object get(short)>(v11);
v13 = <io.netty.util.collection.ShortObjectHashMap: java.lang.Object NULL_VALUE>;
if v9 != v13 goto label5;
if v12 == null goto label6;
return 0;
label5:
v14 = virtualinvoke v9.<java.lang.Object: boolean equals(java.lang.Object)>(v12);
if v14 != 0 goto label6;
return 0;
label6:
v5 = v5 + 1;
goto label4;
label7:
return 1;
}
public boolean containsKey(java.lang.Object)
{
short v2;
io.netty.util.collection.ShortObjectHashMap v0;
java.lang.Object v1;
boolean v3;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: java.lang.Object;
v2 = specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: short objectToKey(java.lang.Object)>(v1);
v3 = virtualinvoke v0.<io.netty.util.collection.ShortObjectHashMap: boolean containsKey(short)>(v2);
return v3;
}
public java.lang.Object get(java.lang.Object)
{
short v2;
io.netty.util.collection.ShortObjectHashMap v0;
java.lang.Object v1, v3;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: java.lang.Object;
v2 = specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: short objectToKey(java.lang.Object)>(v1);
v3 = virtualinvoke v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object get(short)>(v2);
return v3;
}
public java.lang.Object put(java.lang.Short, java.lang.Object)
{
short v3;
java.lang.Short v1;
io.netty.util.collection.ShortObjectHashMap v0;
java.lang.Object v2, v4;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: java.lang.Short;
v2 := @parameter1: java.lang.Object;
v3 = specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: short objectToKey(java.lang.Object)>(v1);
v4 = virtualinvoke v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object put(short,java.lang.Object)>(v3, v2);
return v4;
}
public java.lang.Object remove(java.lang.Object)
{
short v2;
io.netty.util.collection.ShortObjectHashMap v0;
java.lang.Object v1, v3;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: java.lang.Object;
v2 = specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: short objectToKey(java.lang.Object)>(v1);
v3 = virtualinvoke v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object remove(short)>(v2);
return v3;
}
public java.util.Set keySet()
{
io.netty.util.collection.ShortObjectHashMap v0;
java.util.Set v1;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 = v0.<io.netty.util.collection.ShortObjectHashMap: java.util.Set keySet>;
return v1;
}
public java.util.Set entrySet()
{
io.netty.util.collection.ShortObjectHashMap v0;
java.util.Set v1;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 = v0.<io.netty.util.collection.ShortObjectHashMap: java.util.Set entrySet>;
return v1;
}
private short objectToKey(java.lang.Object)
{
io.netty.util.collection.ShortObjectHashMap v0;
java.lang.Object v1;
short v2;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v1.<java.lang.Short: short shortValue()>();
return v2;
}
private int indexOf(short)
{
java.lang.Object[] v4;
io.netty.util.collection.ShortObjectHashMap v0;
short v1, v8;
int v10, v2, v3, v6, v9;
java.lang.Object v5;
short[] v7;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: short;
v2 = specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: int hashIndex(short)>(v1);
v3 = v2;
label1:
v4 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v5 = v4[v3];
if v5 != null goto label2;
v6 = (int) -1;
return v6;
label2:
v7 = v0.<io.netty.util.collection.ShortObjectHashMap: short[] keys>;
v8 = v7[v3];
if v1 != v8 goto label3;
return v3;
label3:
v9 = specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: int probeNext(int)>(v3);
v3 = v9;
if v9 != v2 goto label1;
v10 = (int) -1;
return v10;
}
private int hashIndex(short)
{
short v1;
int v2, v3, v4;
io.netty.util.collection.ShortObjectHashMap v0;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: short;
v2 = staticinvoke <io.netty.util.collection.ShortObjectHashMap: int hashCode(short)>(v1);
v3 = v0.<io.netty.util.collection.ShortObjectHashMap: int mask>;
v4 = v2 & v3;
return v4;
}
private static int hashCode(short)
{
short v0;
v0 := @parameter0: short;
return v0;
}
private int probeNext(int)
{
int v1, v2, v3, v4;
io.netty.util.collection.ShortObjectHashMap v0;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: int;
v2 = v1 + 1;
v3 = v0.<io.netty.util.collection.ShortObjectHashMap: int mask>;
v4 = v2 & v3;
return v4;
}
private void growSize()
{
java.lang.IllegalStateException v7;
io.netty.util.collection.ShortObjectHashMap v0;
int v1, v11, v12, v2, v3, v4, v6, v8;
java.lang.String v9;
short[] v10, v5;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 = v0.<io.netty.util.collection.ShortObjectHashMap: int size>;
v2 = v1 + 1;
v0.<io.netty.util.collection.ShortObjectHashMap: int size> = v2;
v3 = v0.<io.netty.util.collection.ShortObjectHashMap: int size>;
v4 = v0.<io.netty.util.collection.ShortObjectHashMap: int maxSize>;
if v3 <= v4 goto label2;
v5 = v0.<io.netty.util.collection.ShortObjectHashMap: short[] keys>;
v6 = lengthof v5;
if v6 != 2147483647 goto label1;
v7 = new java.lang.IllegalStateException;
v8 = v0.<io.netty.util.collection.ShortObjectHashMap: int size>;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Max capacity reached at size=\u0001");
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v9);
throw v7;
label1:
v10 = v0.<io.netty.util.collection.ShortObjectHashMap: short[] keys>;
v11 = lengthof v10;
v12 = v11 << 1;
specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: void rehash(int)>(v12);
label2:
return;
}
private boolean removeAt(int)
{
java.lang.Object[] v14, v16, v17, v5, v8;
io.netty.util.collection.ShortObjectHashMap v0;
short v11;
int v1, v12, v18, v2, v3, v6, v7;
boolean v19;
java.lang.Object v9;
short[] v10, v13, v15, v4;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: int;
v2 = v0.<io.netty.util.collection.ShortObjectHashMap: int size>;
v3 = v2 - 1;
v0.<io.netty.util.collection.ShortObjectHashMap: int size> = v3;
v4 = v0.<io.netty.util.collection.ShortObjectHashMap: short[] keys>;
v4[v1] = 0;
v5 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v5[v1] = null;
v6 = v1;
v7 = specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: int probeNext(int)>(v1);
v8 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v9 = v8[v7];
label1:
if v9 == null goto label5;
v10 = v0.<io.netty.util.collection.ShortObjectHashMap: short[] keys>;
v11 = v10[v7];
v12 = specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: int hashIndex(short)>(v11);
if v7 >= v12 goto label2;
if v12 <= v6 goto label3;
if v6 <= v7 goto label3;
label2:
if v12 > v6 goto label4;
if v6 > v7 goto label4;
label3:
v13 = v0.<io.netty.util.collection.ShortObjectHashMap: short[] keys>;
v13[v6] = v11;
v14 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v14[v6] = v9;
v15 = v0.<io.netty.util.collection.ShortObjectHashMap: short[] keys>;
v15[v7] = 0;
v16 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v16[v7] = null;
v6 = v7;
label4:
v17 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v18 = specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: int probeNext(int)>(v7);
v7 = v18;
v9 = v17[v18];
goto label1;
label5:
if v6 == v1 goto label6;
v19 = 1;
goto label7;
label6:
v19 = 0;
label7:
return v19;
}
private int calcMaxSize(int)
{
int v1, v2, v5;
float v3, v4;
io.netty.util.collection.ShortObjectHashMap v0;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: int;
v2 = v1 - 1;
v3 = v0.<io.netty.util.collection.ShortObjectHashMap: float loadFactor>;
v4 = v1 * v3;
v5 = staticinvoke <java.lang.Math: int min(int,int)>(v2, v4);
return v5;
}
private void rehash(int)
{
java.lang.Object[] v13, v16, v3, v5;
io.netty.util.collection.ShortObjectHashMap v0;
short v11;
int v1, v12, v6, v7, v8, v9;
java.lang.Object v10, v14;
short[] v15, v2, v4;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: int;
v2 = v0.<io.netty.util.collection.ShortObjectHashMap: short[] keys>;
v3 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v4 = newarray (short)[v1];
v0.<io.netty.util.collection.ShortObjectHashMap: short[] keys> = v4;
v5 = newarray (java.lang.Object)[v1];
v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values> = v5;
v6 = specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: int calcMaxSize(int)>(v1);
v0.<io.netty.util.collection.ShortObjectHashMap: int maxSize> = v6;
v7 = v1 - 1;
v0.<io.netty.util.collection.ShortObjectHashMap: int mask> = v7;
v8 = 0;
label1:
v9 = lengthof v3;
if v8 >= v9 goto label5;
v10 = v3[v8];
if v10 == null goto label4;
v11 = v2[v8];
v12 = specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: int hashIndex(short)>(v11);
label2:
v13 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v14 = v13[v12];
if v14 != null goto label3;
v15 = v0.<io.netty.util.collection.ShortObjectHashMap: short[] keys>;
v15[v12] = v11;
v16 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v16[v12] = v10;
goto label4;
label3:
v12 = specialinvoke v0.<io.netty.util.collection.ShortObjectHashMap: int probeNext(int)>(v12);
goto label2;
label4:
v8 = v8 + 1;
goto label1;
label5:
return;
}
public java.lang.String toString()
{
java.lang.Object[] v7, v9;
io.netty.util.collection.ShortObjectHashMap v0;
short v12;
int v3, v4, v6, v8;
java.lang.String v13, v18;
boolean v1, v5;
java.lang.Object v10, v16;
java.lang.StringBuilder v14, v15, v17, v2;
short[] v11;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 = virtualinvoke v0.<io.netty.util.collection.ShortObjectHashMap: boolean isEmpty()>();
if v1 == 0 goto label1;
return "{}";
label1:
v2 = new java.lang.StringBuilder;
v3 = v0.<io.netty.util.collection.ShortObjectHashMap: int size>;
v4 = 4 * v3;
specialinvoke v2.<java.lang.StringBuilder: void <init>(int)>(v4);
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);
v5 = 1;
v6 = 0;
label2:
v7 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v8 = lengthof v7;
if v6 >= v8 goto label7;
v9 = v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.Object[] values>;
v10 = v9[v6];
if v10 == null goto label6;
if v5 != 0 goto label3;
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
label3:
v11 = v0.<io.netty.util.collection.ShortObjectHashMap: short[] keys>;
v12 = v11[v6];
v13 = virtualinvoke v0.<io.netty.util.collection.ShortObjectHashMap: java.lang.String keyToString(short)>(v12);
v14 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v13);
v15 = virtualinvoke v14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);
if v10 != v0 goto label4;
v16 = "(this Map)";
goto label5;
label4:
v16 = staticinvoke <io.netty.util.collection.ShortObjectHashMap: java.lang.Object toExternal(java.lang.Object)>(v10);
label5:
virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v16);
v5 = 0;
label6:
v6 = v6 + 1;
goto label2;
label7:
v17 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);
v18 = virtualinvoke v17.<java.lang.StringBuilder: java.lang.String toString()>();
return v18;
}
protected java.lang.String keyToString(short)
{
io.netty.util.collection.ShortObjectHashMap v0;
short v1;
java.lang.String v2;
v0 := @this: io.netty.util.collection.ShortObjectHashMap;
v1 := @parameter0: short;
v2 = staticinvoke <java.lang.Short: java.lang.String toString(short)>(v1);
return v2;
}
static void <clinit>()
{
java.lang.Class v0;
java.lang.Object v3;
boolean v1, v2;
v0 = class "Lio/netty/util/collection/ShortObjectHashMap;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.util.collection.ShortObjectHashMap: boolean $assertionsDisabled> = v2;
v3 = new java.lang.Object;
specialinvoke v3.<java.lang.Object: void <init>()>();
<io.netty.util.collection.ShortObjectHashMap: java.lang.Object NULL_VALUE> = v3;
return;
}
}