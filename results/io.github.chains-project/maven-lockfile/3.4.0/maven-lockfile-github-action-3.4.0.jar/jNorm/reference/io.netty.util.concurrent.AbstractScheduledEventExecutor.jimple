public abstract class io.netty.util.concurrent.AbstractScheduledEventExecutor extends io.netty.util.concurrent.AbstractEventExecutor
{
private static final java.util.Comparator SCHEDULED_FUTURE_TASK_COMPARATOR;
private static final long START_TIME;
static final java.lang.Runnable WAKEUP_TASK;
io.netty.util.internal.PriorityQueue scheduledTaskQueue;
long nextTaskId;
static final boolean $assertionsDisabled;
protected void <init>()
{
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
specialinvoke v0.<io.netty.util.concurrent.AbstractEventExecutor: void <init>()>();
return;
}
protected void <init>(io.netty.util.concurrent.EventExecutorGroup)
{
io.netty.util.concurrent.EventExecutorGroup v1;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 := @parameter0: io.netty.util.concurrent.EventExecutorGroup;
specialinvoke v0.<io.netty.util.concurrent.AbstractEventExecutor: void <init>(io.netty.util.concurrent.EventExecutorGroup)>(v1);
return;
}
protected long getCurrentTimeNanos()
{
long v1;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 = staticinvoke <io.netty.util.concurrent.AbstractScheduledEventExecutor: long defaultCurrentTimeNanos()>();
return v1;
}
protected static long nanoTime()
{
long v0;
v0 = staticinvoke <io.netty.util.concurrent.AbstractScheduledEventExecutor: long defaultCurrentTimeNanos()>();
return v0;
}
static long defaultCurrentTimeNanos()
{
long v0, v1, v2;
v0 = staticinvoke <java.lang.System: long nanoTime()>();
v1 = <io.netty.util.concurrent.AbstractScheduledEventExecutor: long START_TIME>;
v2 = v0 - v1;
return v2;
}
static long deadlineNanos(long, long)
{
byte v3;
long v0, v1, v2, v4;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 = v0 + v1;
v3 = v2 cmp 0L;
if v3 >= 0 goto label1;
v4 = 9223372036854775807L;
goto label2;
label1:
v4 = v2;
label2:
return v4;
}
protected static long deadlineToDelayNanos(long)
{
long v0, v1, v2;
v0 := @parameter0: long;
v1 = staticinvoke <io.netty.util.concurrent.AbstractScheduledEventExecutor: long defaultCurrentTimeNanos()>();
v2 = staticinvoke <io.netty.util.concurrent.ScheduledFutureTask: long deadlineToDelayNanos(long,long)>(v1, v0);
return v2;
}
protected static long initialNanoTime()
{
long v0;
v0 = <io.netty.util.concurrent.AbstractScheduledEventExecutor: long START_TIME>;
return v0;
}
io.netty.util.internal.PriorityQueue scheduledTaskQueue()
{
io.netty.util.internal.DefaultPriorityQueue v2;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
io.netty.util.internal.PriorityQueue v1, v4;
java.util.Comparator v3;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 = v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: io.netty.util.internal.PriorityQueue scheduledTaskQueue>;
if v1 != null goto label1;
v2 = new io.netty.util.internal.DefaultPriorityQueue;
v3 = <io.netty.util.concurrent.AbstractScheduledEventExecutor: java.util.Comparator SCHEDULED_FUTURE_TASK_COMPARATOR>;
specialinvoke v2.<io.netty.util.internal.DefaultPriorityQueue: void <init>(java.util.Comparator,int)>(v3, 11);
v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: io.netty.util.internal.PriorityQueue scheduledTaskQueue> = v2;
label1:
v4 = v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: io.netty.util.internal.PriorityQueue scheduledTaskQueue>;
return v4;
}
private static boolean isNullOrEmpty(java.util.Queue)
{
java.util.Queue v0;
boolean v1, v2;
v0 := @parameter0: java.util.Queue;
if v0 == null goto label1;
v1 = interfaceinvoke v0.<java.util.Queue: boolean isEmpty()>();
if v1 == 0 goto label2;
label1:
v2 = 1;
goto label3;
label2:
v2 = 0;
label3:
return v2;
}
protected void cancelScheduledTasks()
{
io.netty.util.concurrent.ScheduledFutureTask v10;
java.lang.Object[] v7;
io.netty.util.internal.PriorityQueue v4;
java.lang.AssertionError v3;
io.netty.util.concurrent.ScheduledFutureTask[] v6;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
int v8, v9;
boolean v1, v2, v5;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 = <io.netty.util.concurrent.AbstractScheduledEventExecutor: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: boolean inEventLoop()>();
if v2 != 0 goto label1;
v3 = new java.lang.AssertionError;
specialinvoke v3.<java.lang.AssertionError: void <init>()>();
throw v3;
label1:
v4 = v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: io.netty.util.internal.PriorityQueue scheduledTaskQueue>;
v5 = staticinvoke <io.netty.util.concurrent.AbstractScheduledEventExecutor: boolean isNullOrEmpty(java.util.Queue)>(v4);
if v5 == 0 goto label2;
return;
label2:
v6 = newarray (io.netty.util.concurrent.ScheduledFutureTask)[0];
v7 = interfaceinvoke v4.<io.netty.util.internal.PriorityQueue: java.lang.Object[] toArray(java.lang.Object[])>(v6);
v8 = lengthof v7;
v9 = 0;
label3:
if v9 >= v8 goto label4;
v10 = v7[v9];
virtualinvoke v10.<io.netty.util.concurrent.ScheduledFutureTask: boolean cancelWithoutRemove(boolean)>(0);
v9 = v9 + 1;
goto label3;
label4:
interfaceinvoke v4.<io.netty.util.internal.PriorityQueue: void clearIgnoringIndexes()>();
return;
}
protected final java.lang.Runnable pollScheduledTask()
{
long v1;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
java.lang.Runnable v2;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: long getCurrentTimeNanos()>();
v2 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: java.lang.Runnable pollScheduledTask(long)>(v1);
return v2;
}
protected final java.lang.Runnable pollScheduledTask(long)
{
io.netty.util.concurrent.ScheduledFutureTask v5;
io.netty.util.internal.PriorityQueue v9;
long v1, v6, v7;
java.lang.AssertionError v4;
byte v8;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
boolean v2, v3;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 := @parameter0: long;
v2 = <io.netty.util.concurrent.AbstractScheduledEventExecutor: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: boolean inEventLoop()>();
if v3 != 0 goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
v5 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: io.netty.util.concurrent.ScheduledFutureTask peekScheduledTask()>();
if v5 == null goto label2;
v6 = virtualinvoke v5.<io.netty.util.concurrent.ScheduledFutureTask: long deadlineNanos()>();
v7 = v6 - v1;
v8 = v7 cmp 0L;
if v8 <= 0 goto label3;
label2:
return null;
label3:
v9 = v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: io.netty.util.internal.PriorityQueue scheduledTaskQueue>;
interfaceinvoke v9.<io.netty.util.internal.PriorityQueue: java.lang.Object remove()>();
virtualinvoke v5.<io.netty.util.concurrent.ScheduledFutureTask: void setConsumed()>();
return v5;
}
protected final long nextScheduledTaskNano()
{
io.netty.util.concurrent.ScheduledFutureTask v1;
long v2;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: io.netty.util.concurrent.ScheduledFutureTask peekScheduledTask()>();
if v1 == null goto label1;
v2 = virtualinvoke v1.<io.netty.util.concurrent.ScheduledFutureTask: long delayNanos()>();
goto label2;
label1:
v2 = -1L;
label2:
return v2;
}
protected final long nextScheduledTaskDeadlineNanos()
{
io.netty.util.concurrent.ScheduledFutureTask v1;
long v2;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: io.netty.util.concurrent.ScheduledFutureTask peekScheduledTask()>();
if v1 == null goto label1;
v2 = virtualinvoke v1.<io.netty.util.concurrent.ScheduledFutureTask: long deadlineNanos()>();
goto label2;
label1:
v2 = -1L;
label2:
return v2;
}
final io.netty.util.concurrent.ScheduledFutureTask peekScheduledTask()
{
java.lang.Object v2;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
io.netty.util.internal.PriorityQueue v1;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 = v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: io.netty.util.internal.PriorityQueue scheduledTaskQueue>;
if v1 == null goto label1;
v2 = interfaceinvoke v1.<java.util.Queue: java.lang.Object peek()>();
goto label2;
label1:
v2 = null;
label2:
return v2;
}
protected final boolean hasScheduledTasks()
{
io.netty.util.concurrent.ScheduledFutureTask v1;
byte v4;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
long v2, v3;
boolean v5;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: io.netty.util.concurrent.ScheduledFutureTask peekScheduledTask()>();
if v1 == null goto label1;
v2 = virtualinvoke v1.<io.netty.util.concurrent.ScheduledFutureTask: long deadlineNanos()>();
v3 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: long getCurrentTimeNanos()>();
v4 = v2 cmp v3;
if v4 > 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)
{
io.netty.util.concurrent.ScheduledFutureTask v5;
io.netty.util.concurrent.ScheduledFuture v9;
long v2, v6, v7, v8;
java.lang.Runnable v1;
java.util.concurrent.TimeUnit v3;
byte v4;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "command");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v3, "unit");
v4 = v2 cmp 0L;
if v4 >= 0 goto label1;
v2 = 0L;
label1:
specialinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: void validateScheduled0(long,java.util.concurrent.TimeUnit)>(v2, v3);
v5 = new io.netty.util.concurrent.ScheduledFutureTask;
v6 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: long getCurrentTimeNanos()>();
v7 = virtualinvoke v3.<java.util.concurrent.TimeUnit: long toNanos(long)>(v2);
v8 = staticinvoke <io.netty.util.concurrent.AbstractScheduledEventExecutor: long deadlineNanos(long,long)>(v6, v7);
specialinvoke v5.<io.netty.util.concurrent.ScheduledFutureTask: void <init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.lang.Runnable,long)>(v0, v1, v8);
v9 = specialinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: io.netty.util.concurrent.ScheduledFuture schedule(io.netty.util.concurrent.ScheduledFutureTask)>(v5);
return v9;
}
public io.netty.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit)
{
io.netty.util.concurrent.ScheduledFutureTask v5;
io.netty.util.concurrent.ScheduledFuture v9;
java.util.concurrent.Callable v1;
long v2, v6, v7, v8;
java.util.concurrent.TimeUnit v3;
byte v4;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 := @parameter0: java.util.concurrent.Callable;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "callable");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v3, "unit");
v4 = v2 cmp 0L;
if v4 >= 0 goto label1;
v2 = 0L;
label1:
specialinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: void validateScheduled0(long,java.util.concurrent.TimeUnit)>(v2, v3);
v5 = new io.netty.util.concurrent.ScheduledFutureTask;
v6 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: long getCurrentTimeNanos()>();
v7 = virtualinvoke v3.<java.util.concurrent.TimeUnit: long toNanos(long)>(v2);
v8 = staticinvoke <io.netty.util.concurrent.AbstractScheduledEventExecutor: long deadlineNanos(long,long)>(v6, v7);
specialinvoke v5.<io.netty.util.concurrent.ScheduledFutureTask: void <init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.util.concurrent.Callable,long)>(v0, v1, v8);
v9 = specialinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: io.netty.util.concurrent.ScheduledFuture schedule(io.netty.util.concurrent.ScheduledFutureTask)>(v5);
return v9;
}
public io.netty.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)
{
io.netty.util.concurrent.ScheduledFutureTask v15;
java.lang.Object[] v12, v7;
io.netty.util.concurrent.ScheduledFuture v20;
long v16, v17, v18, v19, v2, v3;
java.lang.Runnable v1;
byte v10, v5;
java.lang.Long v13, v8;
java.lang.String v14, v9;
java.lang.IllegalArgumentException v11, v6;
java.util.concurrent.TimeUnit v4;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: java.util.concurrent.TimeUnit;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "command");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v4, "unit");
v5 = v2 cmp 0L;
if v5 >= 0 goto label1;
v6 = new java.lang.IllegalArgumentException;
v7 = newarray (java.lang.Object)[1];
v8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
v7[0] = v8;
v9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("initialDelay: %d (expected: >= 0)", v7);
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v9);
throw v6;
label1:
v10 = v3 cmp 0L;
if v10 > 0 goto label2;
v11 = new java.lang.IllegalArgumentException;
v12 = newarray (java.lang.Object)[1];
v13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v3);
v12[0] = v13;
v14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("period: %d (expected: > 0)", v12);
specialinvoke v11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v14);
throw v11;
label2:
specialinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: void validateScheduled0(long,java.util.concurrent.TimeUnit)>(v2, v4);
specialinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: void validateScheduled0(long,java.util.concurrent.TimeUnit)>(v3, v4);
v15 = new io.netty.util.concurrent.ScheduledFutureTask;
v16 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: long getCurrentTimeNanos()>();
v17 = virtualinvoke v4.<java.util.concurrent.TimeUnit: long toNanos(long)>(v2);
v18 = staticinvoke <io.netty.util.concurrent.AbstractScheduledEventExecutor: long deadlineNanos(long,long)>(v16, v17);
v19 = virtualinvoke v4.<java.util.concurrent.TimeUnit: long toNanos(long)>(v3);
specialinvoke v15.<io.netty.util.concurrent.ScheduledFutureTask: void <init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.lang.Runnable,long,long)>(v0, v1, v18, v19);
v20 = specialinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: io.netty.util.concurrent.ScheduledFuture schedule(io.netty.util.concurrent.ScheduledFutureTask)>(v15);
return v20;
}
public io.netty.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)
{
io.netty.util.concurrent.ScheduledFutureTask v15;
java.lang.Object[] v12, v7;
io.netty.util.concurrent.ScheduledFuture v21;
long v16, v17, v18, v19, v2, v20, v3;
java.lang.Runnable v1;
byte v10, v5;
java.lang.Long v13, v8;
java.lang.String v14, v9;
java.lang.IllegalArgumentException v11, v6;
java.util.concurrent.TimeUnit v4;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: java.util.concurrent.TimeUnit;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "command");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v4, "unit");
v5 = v2 cmp 0L;
if v5 >= 0 goto label1;
v6 = new java.lang.IllegalArgumentException;
v7 = newarray (java.lang.Object)[1];
v8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
v7[0] = v8;
v9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("initialDelay: %d (expected: >= 0)", v7);
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v9);
throw v6;
label1:
v10 = v3 cmp 0L;
if v10 > 0 goto label2;
v11 = new java.lang.IllegalArgumentException;
v12 = newarray (java.lang.Object)[1];
v13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v3);
v12[0] = v13;
v14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("delay: %d (expected: > 0)", v12);
specialinvoke v11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v14);
throw v11;
label2:
specialinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: void validateScheduled0(long,java.util.concurrent.TimeUnit)>(v2, v4);
specialinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: void validateScheduled0(long,java.util.concurrent.TimeUnit)>(v3, v4);
v15 = new io.netty.util.concurrent.ScheduledFutureTask;
v16 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: long getCurrentTimeNanos()>();
v17 = virtualinvoke v4.<java.util.concurrent.TimeUnit: long toNanos(long)>(v2);
v18 = staticinvoke <io.netty.util.concurrent.AbstractScheduledEventExecutor: long deadlineNanos(long,long)>(v16, v17);
v19 = virtualinvoke v4.<java.util.concurrent.TimeUnit: long toNanos(long)>(v3);
v20 = neg v19;
specialinvoke v15.<io.netty.util.concurrent.ScheduledFutureTask: void <init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.lang.Runnable,long,long)>(v0, v1, v18, v20);
v21 = specialinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: io.netty.util.concurrent.ScheduledFuture schedule(io.netty.util.concurrent.ScheduledFutureTask)>(v15);
return v21;
}
private void validateScheduled0(long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v2;
long v1;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: void validateScheduled(long,java.util.concurrent.TimeUnit)>(v1, v2);
return;
}
protected void validateScheduled(long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v2;
long v1;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
return;
}
final void scheduleFromEventLoop(io.netty.util.concurrent.ScheduledFutureTask)
{
io.netty.util.concurrent.ScheduledFutureTask v1, v5;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
io.netty.util.internal.PriorityQueue v2;
long v3, v4;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 := @parameter0: io.netty.util.concurrent.ScheduledFutureTask;
v2 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: io.netty.util.internal.PriorityQueue scheduledTaskQueue()>();
v3 = v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: long nextTaskId>;
v4 = v3 + 1L;
v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: long nextTaskId> = v4;
v5 = virtualinvoke v1.<io.netty.util.concurrent.ScheduledFutureTask: io.netty.util.concurrent.ScheduledFutureTask setId(long)>(v4);
interfaceinvoke v2.<io.netty.util.internal.PriorityQueue: boolean add(java.lang.Object)>(v5);
return;
}
private io.netty.util.concurrent.ScheduledFuture schedule(io.netty.util.concurrent.ScheduledFutureTask)
{
io.netty.util.concurrent.ScheduledFutureTask v1;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
long v3;
java.lang.Runnable v6;
boolean v2, v4, v5;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 := @parameter0: io.netty.util.concurrent.ScheduledFutureTask;
v2 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: boolean inEventLoop()>();
if v2 == 0 goto label1;
virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: void scheduleFromEventLoop(io.netty.util.concurrent.ScheduledFutureTask)>(v1);
goto label3;
label1:
v3 = virtualinvoke v1.<io.netty.util.concurrent.ScheduledFutureTask: long deadlineNanos()>();
v4 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: boolean beforeScheduledTaskSubmitted(long)>(v3);
if v4 == 0 goto label2;
virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: void execute(java.lang.Runnable)>(v1);
goto label3;
label2:
virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: void lazyExecute(java.lang.Runnable)>(v1);
v5 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: boolean afterScheduledTaskSubmitted(long)>(v3);
if v5 == 0 goto label3;
v6 = <io.netty.util.concurrent.AbstractScheduledEventExecutor: java.lang.Runnable WAKEUP_TASK>;
virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: void execute(java.lang.Runnable)>(v6);
label3:
return v1;
}
final void removeScheduled(io.netty.util.concurrent.ScheduledFutureTask)
{
io.netty.util.concurrent.ScheduledFutureTask v1;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
io.netty.util.internal.PriorityQueue v6;
java.lang.AssertionError v4;
boolean v2, v3, v5;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 := @parameter0: io.netty.util.concurrent.ScheduledFutureTask;
v2 = <io.netty.util.concurrent.AbstractScheduledEventExecutor: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = virtualinvoke v1.<io.netty.util.concurrent.ScheduledFutureTask: boolean isCancelled()>();
if v3 != 0 goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
v5 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: boolean inEventLoop()>();
if v5 == 0 goto label2;
v6 = virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: io.netty.util.internal.PriorityQueue scheduledTaskQueue()>();
interfaceinvoke v6.<io.netty.util.internal.PriorityQueue: boolean removeTyped(java.lang.Object)>(v1);
goto label3;
label2:
virtualinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: void lazyExecute(java.lang.Runnable)>(v1);
label3:
return;
}
protected boolean beforeScheduledTaskSubmitted(long)
{
long v1;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 := @parameter0: long;
return 1;
}
protected boolean afterScheduledTaskSubmitted(long)
{
long v1;
io.netty.util.concurrent.AbstractScheduledEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractScheduledEventExecutor;
v1 := @parameter0: long;
return 1;
}
static void <clinit>()
{
io.netty.util.concurrent.AbstractScheduledEventExecutor$2 v5;
io.netty.util.concurrent.AbstractScheduledEventExecutor$1 v3;
java.lang.Class v0;
long v4;
boolean v1, v2;
v0 = class "Lio/netty/util/concurrent/AbstractScheduledEventExecutor;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.util.concurrent.AbstractScheduledEventExecutor: boolean $assertionsDisabled> = v2;
v3 = new io.netty.util.concurrent.AbstractScheduledEventExecutor$1;
specialinvoke v3.<io.netty.util.concurrent.AbstractScheduledEventExecutor$1: void <init>()>();
<io.netty.util.concurrent.AbstractScheduledEventExecutor: java.util.Comparator SCHEDULED_FUTURE_TASK_COMPARATOR> = v3;
v4 = staticinvoke <java.lang.System: long nanoTime()>();
<io.netty.util.concurrent.AbstractScheduledEventExecutor: long START_TIME> = v4;
v5 = new io.netty.util.concurrent.AbstractScheduledEventExecutor$2;
specialinvoke v5.<io.netty.util.concurrent.AbstractScheduledEventExecutor$2: void <init>()>();
<io.netty.util.concurrent.AbstractScheduledEventExecutor: java.lang.Runnable WAKEUP_TASK> = v5;
return;
}
}