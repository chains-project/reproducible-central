final class io.netty.util.concurrent.DefaultPromise$StacklessCancellationException extends java.util.concurrent.CancellationException
{
private static final long serialVersionUID;
private void <init>()
{
io.netty.util.concurrent.DefaultPromise$StacklessCancellationException v0;
v0 := @this: io.netty.util.concurrent.DefaultPromise$StacklessCancellationException;
specialinvoke v0.<java.util.concurrent.CancellationException: void <init>()>();
return;
}
public java.lang.Throwable fillInStackTrace()
{
io.netty.util.concurrent.DefaultPromise$StacklessCancellationException v0;
v0 := @this: io.netty.util.concurrent.DefaultPromise$StacklessCancellationException;
return v0;
}
static io.netty.util.concurrent.DefaultPromise$StacklessCancellationException newInstance(java.lang.Class, java.lang.String)
{
java.lang.Throwable v3;
io.netty.util.concurrent.DefaultPromise$StacklessCancellationException v2;
java.lang.Class v0;
java.lang.String v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 = new io.netty.util.concurrent.DefaultPromise$StacklessCancellationException;
specialinvoke v2.<io.netty.util.concurrent.DefaultPromise$StacklessCancellationException: void <init>()>();
v3 = staticinvoke <io.netty.util.internal.ThrowableUtil: java.lang.Throwable unknownStackTrace(java.lang.Throwable,java.lang.Class,java.lang.String)>(v2, v0, v1);
return v3;
}
}