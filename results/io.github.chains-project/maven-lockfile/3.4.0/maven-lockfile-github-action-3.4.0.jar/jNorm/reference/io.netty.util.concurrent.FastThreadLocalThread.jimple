public class io.netty.util.concurrent.FastThreadLocalThread extends java.lang.Thread
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private final boolean cleanupFastThreadLocals;
private io.netty.util.internal.InternalThreadLocalMap threadLocalMap;
public void <init>()
{
io.netty.util.concurrent.FastThreadLocalThread v0;
v0 := @this: io.netty.util.concurrent.FastThreadLocalThread;
specialinvoke v0.<java.lang.Thread: void <init>()>();
v0.<io.netty.util.concurrent.FastThreadLocalThread: boolean cleanupFastThreadLocals> = 0;
return;
}
public void <init>(java.lang.Runnable)
{
java.lang.Runnable v1, v2;
io.netty.util.concurrent.FastThreadLocalThread v0;
v0 := @this: io.netty.util.concurrent.FastThreadLocalThread;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.netty.util.concurrent.FastThreadLocalRunnable: java.lang.Runnable wrap(java.lang.Runnable)>(v1);
specialinvoke v0.<java.lang.Thread: void <init>(java.lang.Runnable)>(v2);
v0.<io.netty.util.concurrent.FastThreadLocalThread: boolean cleanupFastThreadLocals> = 1;
return;
}
public void <init>(java.lang.ThreadGroup, java.lang.Runnable)
{
io.netty.util.concurrent.FastThreadLocalThread v0;
java.lang.ThreadGroup v1;
java.lang.Runnable v2, v3;
v0 := @this: io.netty.util.concurrent.FastThreadLocalThread;
v1 := @parameter0: java.lang.ThreadGroup;
v2 := @parameter1: java.lang.Runnable;
v3 = staticinvoke <io.netty.util.concurrent.FastThreadLocalRunnable: java.lang.Runnable wrap(java.lang.Runnable)>(v2);
specialinvoke v0.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>(v1, v3);
v0.<io.netty.util.concurrent.FastThreadLocalThread: boolean cleanupFastThreadLocals> = 1;
return;
}
public void <init>(java.lang.String)
{
java.lang.String v1;
io.netty.util.concurrent.FastThreadLocalThread v0;
v0 := @this: io.netty.util.concurrent.FastThreadLocalThread;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<java.lang.Thread: void <init>(java.lang.String)>(v1);
v0.<io.netty.util.concurrent.FastThreadLocalThread: boolean cleanupFastThreadLocals> = 0;
return;
}
public void <init>(java.lang.ThreadGroup, java.lang.String)
{
java.lang.String v2;
java.lang.ThreadGroup v1;
io.netty.util.concurrent.FastThreadLocalThread v0;
v0 := @this: io.netty.util.concurrent.FastThreadLocalThread;
v1 := @parameter0: java.lang.ThreadGroup;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>(v1, v2);
v0.<io.netty.util.concurrent.FastThreadLocalThread: boolean cleanupFastThreadLocals> = 0;
return;
}
public void <init>(java.lang.Runnable, java.lang.String)
{
io.netty.util.concurrent.FastThreadLocalThread v0;
java.lang.String v2;
java.lang.Runnable v1, v3;
v0 := @this: io.netty.util.concurrent.FastThreadLocalThread;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.netty.util.concurrent.FastThreadLocalRunnable: java.lang.Runnable wrap(java.lang.Runnable)>(v1);
specialinvoke v0.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(v3, v2);
v0.<io.netty.util.concurrent.FastThreadLocalThread: boolean cleanupFastThreadLocals> = 1;
return;
}
public void <init>(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String)
{
io.netty.util.concurrent.FastThreadLocalThread v0;
java.lang.String v3;
java.lang.ThreadGroup v1;
java.lang.Runnable v2, v4;
v0 := @this: io.netty.util.concurrent.FastThreadLocalThread;
v1 := @parameter0: java.lang.ThreadGroup;
v2 := @parameter1: java.lang.Runnable;
v3 := @parameter2: java.lang.String;
v4 = staticinvoke <io.netty.util.concurrent.FastThreadLocalRunnable: java.lang.Runnable wrap(java.lang.Runnable)>(v2);
specialinvoke v0.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>(v1, v4, v3);
v0.<io.netty.util.concurrent.FastThreadLocalThread: boolean cleanupFastThreadLocals> = 1;
return;
}
public void <init>(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long)
{
io.netty.util.concurrent.FastThreadLocalThread v0;
long v4;
java.lang.String v3;
java.lang.ThreadGroup v1;
java.lang.Runnable v2, v5;
v0 := @this: io.netty.util.concurrent.FastThreadLocalThread;
v1 := @parameter0: java.lang.ThreadGroup;
v2 := @parameter1: java.lang.Runnable;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: long;
v5 = staticinvoke <io.netty.util.concurrent.FastThreadLocalRunnable: java.lang.Runnable wrap(java.lang.Runnable)>(v2);
specialinvoke v0.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(v1, v5, v3, v4);
v0.<io.netty.util.concurrent.FastThreadLocalThread: boolean cleanupFastThreadLocals> = 1;
return;
}
public final io.netty.util.internal.InternalThreadLocalMap threadLocalMap()
{
io.netty.util.concurrent.FastThreadLocalThread v0;
io.netty.util.internal.logging.InternalLogger v2, v4;
java.lang.Thread v1;
io.netty.util.internal.InternalThreadLocalMap v6;
java.lang.RuntimeException v5;
boolean v3;
v0 := @this: io.netty.util.concurrent.FastThreadLocalThread;
v1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
if v0 == v1 goto label1;
v2 = <io.netty.util.concurrent.FastThreadLocalThread: io.netty.util.internal.logging.InternalLogger logger>;
v3 = interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: boolean isWarnEnabled()>();
if v3 == 0 goto label1;
v4 = <io.netty.util.concurrent.FastThreadLocalThread: io.netty.util.internal.logging.InternalLogger logger>;
v5 = new java.lang.RuntimeException;
specialinvoke v5.<java.lang.RuntimeException: void <init>(java.lang.String)>("It\'s not thread-safe to get \'threadLocalMap\' which doesn\'t belong to the caller thread");
interfaceinvoke v4.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.Throwable)>(v5);
label1:
v6 = v0.<io.netty.util.concurrent.FastThreadLocalThread: io.netty.util.internal.InternalThreadLocalMap threadLocalMap>;
return v6;
}
public final void setThreadLocalMap(io.netty.util.internal.InternalThreadLocalMap)
{
io.netty.util.concurrent.FastThreadLocalThread v0;
io.netty.util.internal.logging.InternalLogger v3, v5;
java.lang.Thread v2;
io.netty.util.internal.InternalThreadLocalMap v1;
java.lang.RuntimeException v6;
boolean v4;
v0 := @this: io.netty.util.concurrent.FastThreadLocalThread;
v1 := @parameter0: io.netty.util.internal.InternalThreadLocalMap;
v2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
if v0 == v2 goto label1;
v3 = <io.netty.util.concurrent.FastThreadLocalThread: io.netty.util.internal.logging.InternalLogger logger>;
v4 = interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: boolean isWarnEnabled()>();
if v4 == 0 goto label1;
v5 = <io.netty.util.concurrent.FastThreadLocalThread: io.netty.util.internal.logging.InternalLogger logger>;
v6 = new java.lang.RuntimeException;
specialinvoke v6.<java.lang.RuntimeException: void <init>(java.lang.String)>("It\'s not thread-safe to set \'threadLocalMap\' which doesn\'t belong to the caller thread");
interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.Throwable)>(v6);
label1:
v0.<io.netty.util.concurrent.FastThreadLocalThread: io.netty.util.internal.InternalThreadLocalMap threadLocalMap> = v1;
return;
}
public boolean willCleanupFastThreadLocals()
{
boolean v1;
io.netty.util.concurrent.FastThreadLocalThread v0;
v0 := @this: io.netty.util.concurrent.FastThreadLocalThread;
v1 = v0.<io.netty.util.concurrent.FastThreadLocalThread: boolean cleanupFastThreadLocals>;
return v1;
}
public static boolean willCleanupFastThreadLocals(java.lang.Thread)
{
java.lang.Thread v0;
boolean v1, v2, v3;
v0 := @parameter0: java.lang.Thread;
v1 = v0 instanceof io.netty.util.concurrent.FastThreadLocalThread;
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<io.netty.util.concurrent.FastThreadLocalThread: boolean willCleanupFastThreadLocals()>();
if v2 == 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean permitBlockingCalls()
{
io.netty.util.concurrent.FastThreadLocalThread v0;
v0 := @this: io.netty.util.concurrent.FastThreadLocalThread;
return 0;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/util/concurrent/FastThreadLocalThread;");
<io.netty.util.concurrent.FastThreadLocalThread: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}