class io.netty.util.concurrent.PromiseCombiner$1 extends java.lang.Object implements io.netty.util.concurrent.GenericFutureListener
{
static final boolean $assertionsDisabled;
final io.netty.util.concurrent.PromiseCombiner this$0;
void <init>(io.netty.util.concurrent.PromiseCombiner)
{
io.netty.util.concurrent.PromiseCombiner$1 v0;
io.netty.util.concurrent.PromiseCombiner v1;
v0 := @this: io.netty.util.concurrent.PromiseCombiner$1;
v1 := @parameter0: io.netty.util.concurrent.PromiseCombiner;
v0.<io.netty.util.concurrent.PromiseCombiner$1: io.netty.util.concurrent.PromiseCombiner this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void operationComplete(io.netty.util.concurrent.Future)
{
io.netty.util.concurrent.EventExecutor v3, v6;
io.netty.util.concurrent.PromiseCombiner$1 v0;
io.netty.util.concurrent.PromiseCombiner$1$1 v7;
io.netty.util.concurrent.PromiseCombiner v2, v5;
io.netty.util.concurrent.Future v1;
boolean v4;
v0 := @this: io.netty.util.concurrent.PromiseCombiner$1;
v1 := @parameter0: io.netty.util.concurrent.Future;
v2 = v0.<io.netty.util.concurrent.PromiseCombiner$1: io.netty.util.concurrent.PromiseCombiner this$0>;
v3 = v2.<io.netty.util.concurrent.PromiseCombiner: io.netty.util.concurrent.EventExecutor executor>;
v4 = interfaceinvoke v3.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v4 == 0 goto label1;
specialinvoke v0.<io.netty.util.concurrent.PromiseCombiner$1: void operationComplete0(io.netty.util.concurrent.Future)>(v1);
goto label2;
label1:
v5 = v0.<io.netty.util.concurrent.PromiseCombiner$1: io.netty.util.concurrent.PromiseCombiner this$0>;
v6 = v5.<io.netty.util.concurrent.PromiseCombiner: io.netty.util.concurrent.EventExecutor executor>;
v7 = new io.netty.util.concurrent.PromiseCombiner$1$1;
specialinvoke v7.<io.netty.util.concurrent.PromiseCombiner$1$1: void <init>(io.netty.util.concurrent.PromiseCombiner$1,io.netty.util.concurrent.Future)>(v0, v1);
interfaceinvoke v6.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v7);
label2:
return;
}
private void operationComplete0(io.netty.util.concurrent.Future)
{
io.netty.util.concurrent.EventExecutor v4;
java.lang.Throwable v10, v12;
java.lang.AssertionError v6;
int v14, v16;
boolean v2, v5, v8;
io.netty.util.concurrent.PromiseCombiner$1 v0;
io.netty.util.concurrent.Promise v18;
io.netty.util.concurrent.PromiseCombiner v11, v13, v15, v17, v19, v3, v7, v9;
io.netty.util.concurrent.Future v1;
v0 := @this: io.netty.util.concurrent.PromiseCombiner$1;
v1 := @parameter0: io.netty.util.concurrent.Future;
v2 = <io.netty.util.concurrent.PromiseCombiner$1: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.util.concurrent.PromiseCombiner$1: io.netty.util.concurrent.PromiseCombiner this$0>;
v4 = v3.<io.netty.util.concurrent.PromiseCombiner: io.netty.util.concurrent.EventExecutor executor>;
v5 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v5 != 0 goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
v7 = v0.<io.netty.util.concurrent.PromiseCombiner$1: io.netty.util.concurrent.PromiseCombiner this$0>;
staticinvoke <io.netty.util.concurrent.PromiseCombiner: int access$204(io.netty.util.concurrent.PromiseCombiner)>(v7);
v8 = interfaceinvoke v1.<io.netty.util.concurrent.Future: boolean isSuccess()>();
if v8 != 0 goto label2;
v9 = v0.<io.netty.util.concurrent.PromiseCombiner$1: io.netty.util.concurrent.PromiseCombiner this$0>;
v10 = v9.<io.netty.util.concurrent.PromiseCombiner: java.lang.Throwable cause>;
if v10 != null goto label2;
v11 = v0.<io.netty.util.concurrent.PromiseCombiner$1: io.netty.util.concurrent.PromiseCombiner this$0>;
v12 = interfaceinvoke v1.<io.netty.util.concurrent.Future: java.lang.Throwable cause()>();
v11.<io.netty.util.concurrent.PromiseCombiner: java.lang.Throwable cause> = v12;
label2:
v13 = v0.<io.netty.util.concurrent.PromiseCombiner$1: io.netty.util.concurrent.PromiseCombiner this$0>;
v14 = v13.<io.netty.util.concurrent.PromiseCombiner: int doneCount>;
v15 = v0.<io.netty.util.concurrent.PromiseCombiner$1: io.netty.util.concurrent.PromiseCombiner this$0>;
v16 = v15.<io.netty.util.concurrent.PromiseCombiner: int expectedCount>;
if v14 != v16 goto label3;
v17 = v0.<io.netty.util.concurrent.PromiseCombiner$1: io.netty.util.concurrent.PromiseCombiner this$0>;
v18 = v17.<io.netty.util.concurrent.PromiseCombiner: io.netty.util.concurrent.Promise aggregatePromise>;
if v18 == null goto label3;
v19 = v0.<io.netty.util.concurrent.PromiseCombiner$1: io.netty.util.concurrent.PromiseCombiner this$0>;
specialinvoke v19.<io.netty.util.concurrent.PromiseCombiner: boolean tryPromise()>();
label3:
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/util/concurrent/PromiseCombiner;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.util.concurrent.PromiseCombiner$1: boolean $assertionsDisabled> = v2;
return;
}
}