class io.netty.util.concurrent.PromiseNotifier$2 extends io.netty.util.concurrent.PromiseNotifier
{
final io.netty.util.concurrent.Promise val$promise;
final io.netty.util.concurrent.Future val$future;
transient void <init>(boolean, io.netty.util.concurrent.Promise[], io.netty.util.concurrent.Promise, io.netty.util.concurrent.Future)
{
io.netty.util.concurrent.PromiseNotifier$2 v0;
io.netty.util.concurrent.Promise v3;
io.netty.util.concurrent.Promise[] v2;
io.netty.util.concurrent.Future v4;
boolean v1;
v0 := @this: io.netty.util.concurrent.PromiseNotifier$2;
v1 := @parameter0: boolean;
v2 := @parameter1: io.netty.util.concurrent.Promise[];
v3 := @parameter2: io.netty.util.concurrent.Promise;
v4 := @parameter3: io.netty.util.concurrent.Future;
v0.<io.netty.util.concurrent.PromiseNotifier$2: io.netty.util.concurrent.Promise val$promise> = v3;
v0.<io.netty.util.concurrent.PromiseNotifier$2: io.netty.util.concurrent.Future val$future> = v4;
specialinvoke v0.<io.netty.util.concurrent.PromiseNotifier: void <init>(boolean,io.netty.util.concurrent.Promise[])>(v1, v2);
return;
}
public void operationComplete(io.netty.util.concurrent.Future) throws java.lang.Exception
{
io.netty.util.concurrent.PromiseNotifier$2 v0;
io.netty.util.concurrent.Promise v2;
io.netty.util.concurrent.Future v1, v5;
boolean v3, v4;
v0 := @this: io.netty.util.concurrent.PromiseNotifier$2;
v1 := @parameter0: io.netty.util.concurrent.Future;
v2 = v0.<io.netty.util.concurrent.PromiseNotifier$2: io.netty.util.concurrent.Promise val$promise>;
v3 = interfaceinvoke v2.<io.netty.util.concurrent.Promise: boolean isCancelled()>();
if v3 == 0 goto label1;
v4 = interfaceinvoke v1.<io.netty.util.concurrent.Future: boolean isCancelled()>();
if v4 == 0 goto label1;
return;
label1:
v5 = v0.<io.netty.util.concurrent.PromiseNotifier$2: io.netty.util.concurrent.Future val$future>;
specialinvoke v0.<io.netty.util.concurrent.PromiseNotifier: void operationComplete(io.netty.util.concurrent.Future)>(v5);
return;
}
}