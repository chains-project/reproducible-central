final class io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask extends io.netty.util.concurrent.PromiseTask implements java.util.concurrent.RunnableScheduledFuture, io.netty.util.concurrent.ScheduledFuture
{
private final java.util.concurrent.RunnableScheduledFuture future;
private final boolean wasCallable;
static final boolean $assertionsDisabled;
void <init>(io.netty.util.concurrent.EventExecutor, java.util.concurrent.RunnableScheduledFuture, boolean)
{
io.netty.util.concurrent.EventExecutor v1;
java.util.concurrent.RunnableScheduledFuture v2;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask v0;
boolean v3;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
v2 := @parameter1: java.util.concurrent.RunnableScheduledFuture;
v3 := @parameter2: boolean;
specialinvoke v0.<io.netty.util.concurrent.PromiseTask: void <init>(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)>(v1, v2);
v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask: java.util.concurrent.RunnableScheduledFuture future> = v2;
v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask: boolean wasCallable> = v3;
return;
}
java.lang.Object runTask() throws java.lang.Throwable
{
java.lang.Throwable v10;
java.lang.AssertionError v6;
java.util.concurrent.ExecutionException v9;
java.util.concurrent.RunnableScheduledFuture v4, v7;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask v0;
java.lang.Object v1, v8;
boolean v2, v3, v5;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask;
v1 = specialinvoke v0.<io.netty.util.concurrent.PromiseTask: java.lang.Object runTask()>();
if v1 != null goto label4;
v2 = v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask: boolean wasCallable>;
if v2 == 0 goto label4;
v3 = <io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
v4 = v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask: java.util.concurrent.RunnableScheduledFuture future>;
v5 = interfaceinvoke v4.<java.util.concurrent.RunnableScheduledFuture: boolean isDone()>();
if v5 != 0 goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
v7 = v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask: java.util.concurrent.RunnableScheduledFuture future>;
v8 = interfaceinvoke v7.<java.util.concurrent.RunnableScheduledFuture: java.lang.Object get()>();
label2:
return v8;
label3:
v9 := @caughtexception;
v10 = virtualinvoke v9.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();
throw v10;
label4:
return v1;
catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
}
public void run()
{
java.lang.Throwable v3;
io.netty.util.internal.logging.InternalLogger v5;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask v0;
boolean v1, v2, v4;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask;
v1 = virtualinvoke v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask: boolean isPeriodic()>();
if v1 != 0 goto label1;
specialinvoke v0.<io.netty.util.concurrent.PromiseTask: void run()>();
goto label5;
label1:
v2 = virtualinvoke v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask: boolean isDone()>();
if v2 != 0 goto label5;
label2:
virtualinvoke v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask: java.lang.Object runTask()>();
label3:
goto label5;
label4:
v3 := @caughtexception;
v4 = virtualinvoke v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask: boolean tryFailureInternal(java.lang.Throwable)>(v3);
if v4 != 0 goto label5;
v5 = <io.netty.util.concurrent.UnorderedThreadPoolEventExecutor: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Throwable)>("Failure during execution of task", v3);
label5:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
public boolean isPeriodic()
{
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask v0;
boolean v2;
java.util.concurrent.RunnableScheduledFuture v1;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask;
v1 = v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask: java.util.concurrent.RunnableScheduledFuture future>;
v2 = interfaceinvoke v1.<java.util.concurrent.RunnableScheduledFuture: boolean isPeriodic()>();
return v2;
}
public long getDelay(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
java.util.concurrent.RunnableScheduledFuture v2;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask v0;
long v3;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask;
v1 := @parameter0: java.util.concurrent.TimeUnit;
v2 = v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask: java.util.concurrent.RunnableScheduledFuture future>;
v3 = interfaceinvoke v2.<java.util.concurrent.RunnableScheduledFuture: long getDelay(java.util.concurrent.TimeUnit)>(v1);
return v3;
}
public int compareTo(java.util.concurrent.Delayed)
{
java.util.concurrent.RunnableScheduledFuture v2;
int v3;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask v0;
java.util.concurrent.Delayed v1;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask;
v1 := @parameter0: java.util.concurrent.Delayed;
v2 = v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask: java.util.concurrent.RunnableScheduledFuture future>;
v3 = interfaceinvoke v2.<java.util.concurrent.RunnableScheduledFuture: int compareTo(java.lang.Object)>(v1);
return v3;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/util/concurrent/UnorderedThreadPoolEventExecutor;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask: boolean $assertionsDisabled> = v2;
return;
}
}