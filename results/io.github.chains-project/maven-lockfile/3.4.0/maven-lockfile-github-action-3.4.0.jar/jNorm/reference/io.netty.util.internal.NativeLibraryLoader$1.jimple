class io.netty.util.internal.NativeLibraryLoader$1 extends java.lang.Object implements java.security.PrivilegedAction
{
final java.lang.Class val$helper;
final java.lang.String val$name;
final boolean val$absolute;
void <init>(java.lang.Class, java.lang.String, boolean)
{
io.netty.util.internal.NativeLibraryLoader$1 v0;
java.lang.Class v1;
java.lang.String v2;
boolean v3;
v0 := @this: io.netty.util.internal.NativeLibraryLoader$1;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v0.<io.netty.util.internal.NativeLibraryLoader$1: java.lang.Class val$helper> = v1;
v0.<io.netty.util.internal.NativeLibraryLoader$1: java.lang.String val$name> = v2;
v0.<io.netty.util.internal.NativeLibraryLoader$1: boolean val$absolute> = v3;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.lang.Object run()
{
io.netty.util.internal.NativeLibraryLoader$1 v0;
java.lang.Object[] v5;
java.lang.Class[] v2;
java.lang.Exception v10;
java.lang.Boolean v8;
java.lang.Class v1, v3;
java.lang.Object v9;
java.lang.String v6;
java.lang.reflect.Method v4;
boolean v7;
v0 := @this: io.netty.util.internal.NativeLibraryLoader$1;
label1:
v1 = v0.<io.netty.util.internal.NativeLibraryLoader$1: java.lang.Class val$helper>;
v2 = newarray (java.lang.Class)[2];
v2[0] = class "Ljava/lang/String;";
v3 = <java.lang.Boolean: java.lang.Class TYPE>;
v2[1] = v3;
v4 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("loadLibrary", v2);
virtualinvoke v4.<java.lang.reflect.Method: void setAccessible(boolean)>(1);
v5 = newarray (java.lang.Object)[2];
v6 = v0.<io.netty.util.internal.NativeLibraryLoader$1: java.lang.String val$name>;
v5[0] = v6;
v7 = v0.<io.netty.util.internal.NativeLibraryLoader$1: boolean val$absolute>;
v8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v7);
v5[1] = v8;
v9 = virtualinvoke v4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, v5);
label2:
return v9;
label3:
v10 := @caughtexception;
return v10;
catch java.lang.Exception from label1 to label2 with label3;
}
}