public final class io.netty.util.internal.ObjectUtil extends java.lang.Object
{
private static final float FLOAT_ZERO;
private static final double DOUBLE_ZERO;
private static final long LONG_ZERO;
private static final int INT_ZERO;
private void <init>()
{
io.netty.util.internal.ObjectUtil v0;
v0 := @this: io.netty.util.internal.ObjectUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.Object checkNotNull(java.lang.Object, java.lang.String)
{
java.lang.Object v0;
java.lang.String v1;
java.lang.NullPointerException v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>(v1);
throw v2;
label1:
return v0;
}
public static transient java.lang.Object[] deepCheckNotNull(java.lang.String, java.lang.Object[])
{
java.lang.Object[] v1;
int v3, v4;
java.lang.Object v5;
java.lang.String v0;
java.lang.NullPointerException v2, v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.Object[];
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>(v0);
throw v2;
label1:
v3 = lengthof v1;
v4 = 0;
label2:
if v4 >= v3 goto label4;
v5 = v1[v4];
if v5 != null goto label3;
v6 = new java.lang.NullPointerException;
specialinvoke v6.<java.lang.NullPointerException: void <init>(java.lang.String)>(v0);
throw v6;
label3:
v4 = v4 + 1;
goto label2;
label4:
return v1;
}
public static java.lang.Object checkNotNullWithIAE(java.lang.Object, java.lang.String) throws java.lang.IllegalArgumentException
{
java.lang.Object v0;
java.lang.String v1, v3;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Param \'\u0001\' must not be null");
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
throw v2;
label1:
return v0;
}
public static java.lang.Object checkNotNullArrayParam(java.lang.Object, int, java.lang.String) throws java.lang.IllegalArgumentException
{
int v1;
java.lang.Object v0;
java.lang.String v2, v4;
java.lang.IllegalArgumentException v3;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.String;
if v0 != null goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,java.lang.String)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Array index \u0001 of parameter \'\u0001\' must not be null");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return v0;
}
public static int checkPositive(int, java.lang.String)
{
int v0;
java.lang.String v1, v3;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: int;
v1 := @parameter1: java.lang.String;
if v0 > 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v1, v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 : \u0001 (expected: > 0)");
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
throw v2;
label1:
return v0;
}
public static long checkPositive(long, java.lang.String)
{
byte v2;
long v0;
java.lang.String v1, v4;
java.lang.IllegalArgumentException v3;
v0 := @parameter0: long;
v1 := @parameter1: java.lang.String;
v2 = v0 cmp 0L;
if v2 > 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,long)>(v1, v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 : \u0001 (expected: > 0)");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return v0;
}
public static double checkPositive(double, java.lang.String)
{
byte v2;
java.lang.String v1, v4;
java.lang.IllegalArgumentException v3;
double v0;
v0 := @parameter0: double;
v1 := @parameter1: java.lang.String;
v2 = v0 cmpg 0.0;
if v2 > 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,double)>(v1, v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 : \u0001 (expected: > 0)");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return v0;
}
public static float checkPositive(float, java.lang.String)
{
byte v2;
float v0;
java.lang.String v1, v4;
java.lang.IllegalArgumentException v3;
v0 := @parameter0: float;
v1 := @parameter1: java.lang.String;
v2 = v0 cmpg 0.0F;
if v2 > 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,float)>(v1, v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 : \u0001 (expected: > 0)");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return v0;
}
public static int checkPositiveOrZero(int, java.lang.String)
{
int v0;
java.lang.String v1, v3;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: int;
v1 := @parameter1: java.lang.String;
if v0 >= 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v1, v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 : \u0001 (expected: >= 0)");
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
throw v2;
label1:
return v0;
}
public static long checkPositiveOrZero(long, java.lang.String)
{
byte v2;
long v0;
java.lang.String v1, v4;
java.lang.IllegalArgumentException v3;
v0 := @parameter0: long;
v1 := @parameter1: java.lang.String;
v2 = v0 cmp 0L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,long)>(v1, v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 : \u0001 (expected: >= 0)");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return v0;
}
public static double checkPositiveOrZero(double, java.lang.String)
{
byte v2;
java.lang.String v1, v4;
java.lang.IllegalArgumentException v3;
double v0;
v0 := @parameter0: double;
v1 := @parameter1: java.lang.String;
v2 = v0 cmpg 0.0;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,double)>(v1, v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 : \u0001 (expected: >= 0)");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return v0;
}
public static float checkPositiveOrZero(float, java.lang.String)
{
byte v2;
float v0;
java.lang.String v1, v4;
java.lang.IllegalArgumentException v3;
v0 := @parameter0: float;
v1 := @parameter1: java.lang.String;
v2 = v0 cmpg 0.0F;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,float)>(v1, v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 : \u0001 (expected: >= 0)");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return v0;
}
public static int checkInRange(int, int, int, java.lang.String)
{
int v0, v1, v2;
java.lang.String v3, v5;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: java.lang.String;
if v0 < v1 goto label1;
if v0 <= v2 goto label2;
label1:
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int,int,int)>(v3, v0, v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001: \u0001 (expected: \u0001-\u0001)");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label2:
return v0;
}
public static long checkInRange(long, long, long, java.lang.String)
{
long v0, v1, v2;
java.lang.IllegalArgumentException v6;
byte v4, v5;
java.lang.String v3, v7;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 := @parameter2: long;
v3 := @parameter3: java.lang.String;
v4 = v0 cmp v1;
if v4 < 0 goto label1;
v5 = v0 cmp v2;
if v5 <= 0 goto label2;
label1:
v6 = new java.lang.IllegalArgumentException;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,long,long,long)>(v3, v0, v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001: \u0001 (expected: \u0001-\u0001)");
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v7);
throw v6;
label2:
return v0;
}
public static java.lang.Object[] checkNonEmpty(java.lang.Object[], java.lang.String)
{
java.lang.Object[] v0;
int v3;
java.lang.Object v2;
java.lang.String v1, v5;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, v1);
v3 = lengthof v2;
if v3 != 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Param \'\u0001\' must not be empty");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
return v0;
}
public static byte[] checkNonEmpty(byte[], java.lang.String)
{
byte[] v0;
int v3;
java.lang.Object v2;
java.lang.String v1, v5;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: byte[];
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, v1);
v3 = lengthof v2;
if v3 != 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Param \'\u0001\' must not be empty");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
return v0;
}
public static char[] checkNonEmpty(char[], java.lang.String)
{
int v3;
char[] v0;
java.lang.Object v2;
java.lang.String v1, v5;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: char[];
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, v1);
v3 = lengthof v2;
if v3 != 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Param \'\u0001\' must not be empty");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
return v0;
}
public static java.util.Collection checkNonEmpty(java.util.Collection, java.lang.String)
{
java.util.Collection v0;
java.lang.Object v2;
java.lang.String v1, v5;
java.lang.IllegalArgumentException v4;
boolean v3;
v0 := @parameter0: java.util.Collection;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, v1);
v3 = interfaceinvoke v2.<java.util.Collection: boolean isEmpty()>();
if v3 == 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Param \'\u0001\' must not be empty");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
return v0;
}
public static java.lang.String checkNonEmpty(java.lang.String, java.lang.String)
{
java.lang.Object v2;
java.lang.String v0, v1, v5;
java.lang.IllegalArgumentException v4;
boolean v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, v1);
v3 = virtualinvoke v2.<java.lang.String: boolean isEmpty()>();
if v3 == 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Param \'\u0001\' must not be empty");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
return v0;
}
public static java.util.Map checkNonEmpty(java.util.Map, java.lang.String)
{
java.util.Map v0;
java.lang.Object v2;
java.lang.String v1, v5;
java.lang.IllegalArgumentException v4;
boolean v3;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, v1);
v3 = interfaceinvoke v2.<java.util.Map: boolean isEmpty()>();
if v3 == 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Param \'\u0001\' must not be empty");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
return v0;
}
public static java.lang.CharSequence checkNonEmpty(java.lang.CharSequence, java.lang.String)
{
java.lang.CharSequence v0;
int v3;
java.lang.Object v2;
java.lang.String v1, v5;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, v1);
v3 = interfaceinvoke v2.<java.lang.CharSequence: int length()>();
if v3 != 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Param \'\u0001\' must not be empty");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
return v0;
}
public static java.lang.String checkNonEmptyAfterTrim(java.lang.String, java.lang.String)
{
java.lang.Object v2;
java.lang.String v0, v1, v3, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, v1);
v3 = virtualinvoke v2.<java.lang.String: java.lang.String trim()>();
v4 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.String checkNonEmpty(java.lang.String,java.lang.String)>(v3, v1);
return v4;
}
public static int intValue(java.lang.Integer, int)
{
int v1, v2;
java.lang.Integer v0;
v0 := @parameter0: java.lang.Integer;
v1 := @parameter1: int;
if v0 == null goto label1;
v2 = virtualinvoke v0.<java.lang.Integer: int intValue()>();
goto label2;
label1:
v2 = v1;
label2:
return v2;
}
public static long longValue(java.lang.Long, long)
{
long v1, v2;
java.lang.Long v0;
v0 := @parameter0: java.lang.Long;
v1 := @parameter1: long;
if v0 == null goto label1;
v2 = virtualinvoke v0.<java.lang.Long: long longValue()>();
goto label2;
label1:
v2 = v1;
label2:
return v2;
}
}