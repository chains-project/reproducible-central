final class io.netty.util.internal.PlatformDependent$Mpsc extends java.lang.Object
{
private static final boolean USE_MPSC_CHUNKED_ARRAY_QUEUE;
private void <init>()
{
io.netty.util.internal.PlatformDependent$Mpsc v0;
v0 := @this: io.netty.util.internal.PlatformDependent$Mpsc;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static java.util.Queue newMpscQueue(int)
{
int v0, v1, v2;
java.util.Queue v3;
v0 := @parameter0: int;
v1 = staticinvoke <java.lang.Math: int min(int,int)>(v0, 1073741824);
v2 = staticinvoke <java.lang.Math: int max(int,int)>(v1, 2048);
v3 = staticinvoke <io.netty.util.internal.PlatformDependent$Mpsc: java.util.Queue newChunkedMpscQueue(int,int)>(1024, v2);
return v3;
}
static java.util.Queue newChunkedMpscQueue(int, int)
{
io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue v3;
int v0, v1;
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue v5;
java.util.AbstractQueue v4;
boolean v2;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 = <io.netty.util.internal.PlatformDependent$Mpsc: boolean USE_MPSC_CHUNKED_ARRAY_QUEUE>;
if v2 == 0 goto label1;
v3 = new io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue;
v4 = v3;
specialinvoke v3.<io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueue: void <init>(int,int)>(v0, v1);
goto label2;
label1:
v5 = new io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue;
v4 = v5;
specialinvoke v5.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue: void <init>(int,int)>(v0, v1);
label2:
return v4;
}
static java.util.Queue newMpscQueue()
{
java.util.AbstractQueue v2;
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue v3;
boolean v0;
io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue v1;
v0 = <io.netty.util.internal.PlatformDependent$Mpsc: boolean USE_MPSC_CHUNKED_ARRAY_QUEUE>;
if v0 == 0 goto label1;
v1 = new io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue;
v2 = v1;
specialinvoke v1.<io.netty.util.internal.shaded.org.jctools.queues.MpscUnboundedArrayQueue: void <init>(int)>(1024);
goto label2;
label1:
v3 = new io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue;
v2 = v3;
specialinvoke v3.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue: void <init>(int)>(1024);
label2:
return v2;
}
static void <clinit>()
{
io.netty.util.internal.PlatformDependent$Mpsc$1 v2;
io.netty.util.internal.logging.InternalLogger v3, v4;
java.lang.Object v0;
boolean v1;
v0 = null;
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean hasUnsafe()>();
if v1 == 0 goto label1;
v2 = new io.netty.util.internal.PlatformDependent$Mpsc$1;
specialinvoke v2.<io.netty.util.internal.PlatformDependent$Mpsc$1: void <init>()>();
v0 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(v2);
label1:
if v0 != null goto label2;
v3 = <io.netty.util.internal.PlatformDependent: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>("org.jctools-core.MpscChunkedArrayQueue: unavailable");
<io.netty.util.internal.PlatformDependent$Mpsc: boolean USE_MPSC_CHUNKED_ARRAY_QUEUE> = 0;
goto label3;
label2:
v4 = <io.netty.util.internal.PlatformDependent: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v4.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>("org.jctools-core.MpscChunkedArrayQueue: available");
<io.netty.util.internal.PlatformDependent$Mpsc: boolean USE_MPSC_CHUNKED_ARRAY_QUEUE> = 1;
label3:
return;
}
}