public final class io.netty.util.internal.ReadOnlyIterator extends java.lang.Object implements java.util.Iterator
{
private final java.util.Iterator iterator;
public void <init>(java.util.Iterator)
{
io.netty.util.internal.ReadOnlyIterator v0;
java.lang.Object v2;
java.util.Iterator v1;
v0 := @this: io.netty.util.internal.ReadOnlyIterator;
v1 := @parameter0: java.util.Iterator;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "iterator");
v0.<io.netty.util.internal.ReadOnlyIterator: java.util.Iterator iterator> = v2;
return;
}
public boolean hasNext()
{
io.netty.util.internal.ReadOnlyIterator v0;
java.util.Iterator v1;
boolean v2;
v0 := @this: io.netty.util.internal.ReadOnlyIterator;
v1 = v0.<io.netty.util.internal.ReadOnlyIterator: java.util.Iterator iterator>;
v2 = interfaceinvoke v1.<java.util.Iterator: boolean hasNext()>();
return v2;
}
public java.lang.Object next()
{
io.netty.util.internal.ReadOnlyIterator v0;
java.lang.Object v2;
java.util.Iterator v1;
v0 := @this: io.netty.util.internal.ReadOnlyIterator;
v1 = v0.<io.netty.util.internal.ReadOnlyIterator: java.util.Iterator iterator>;
v2 = interfaceinvoke v1.<java.util.Iterator: java.lang.Object next()>();
return v2;
}
public void remove()
{
io.netty.util.internal.ReadOnlyIterator v0;
java.lang.UnsupportedOperationException v1;
v0 := @this: io.netty.util.internal.ReadOnlyIterator;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read-only");
throw v1;
}
}