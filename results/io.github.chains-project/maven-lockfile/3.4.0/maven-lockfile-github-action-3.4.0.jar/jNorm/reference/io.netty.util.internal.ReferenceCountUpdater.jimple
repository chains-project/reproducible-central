public abstract class io.netty.util.internal.ReferenceCountUpdater extends java.lang.Object
{
protected void <init>()
{
io.netty.util.internal.ReferenceCountUpdater v0;
v0 := @this: io.netty.util.internal.ReferenceCountUpdater;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static long getUnsafeOffset(java.lang.Class, java.lang.String)
{
java.lang.Throwable v5;
java.lang.Class v0;
long v4;
java.lang.String v1;
java.lang.reflect.Field v3;
boolean v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
label1:
v2 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean hasUnsafe()>();
if v2 == 0 goto label4;
v3 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(v1);
v4 = staticinvoke <io.netty.util.internal.PlatformDependent: long objectFieldOffset(java.lang.reflect.Field)>(v3);
label2:
return v4;
label3:
v5 := @caughtexception;
label4:
return -1L;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected abstract java.util.concurrent.atomic.AtomicIntegerFieldUpdater updater();
protected abstract long unsafeOffset();
public final int initialValue()
{
io.netty.util.internal.ReferenceCountUpdater v0;
v0 := @this: io.netty.util.internal.ReferenceCountUpdater;
return 2;
}
public void setInitialValue(io.netty.util.ReferenceCounted)
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v4;
byte v3;
int v5, v6;
long v2;
io.netty.util.ReferenceCounted v1;
io.netty.util.internal.ReferenceCountUpdater v0;
v0 := @this: io.netty.util.internal.ReferenceCountUpdater;
v1 := @parameter0: io.netty.util.ReferenceCounted;
v2 = virtualinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: long unsafeOffset()>();
v3 = v2 cmp -1L;
if v3 != 0 goto label1;
v4 = virtualinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater updater()>();
v5 = virtualinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: int initialValue()>();
virtualinvoke v4.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void set(java.lang.Object,int)>(v1, v5);
goto label2;
label1:
v6 = virtualinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: int initialValue()>();
staticinvoke <io.netty.util.internal.PlatformDependent: void safeConstructPutInt(java.lang.Object,long,int)>(v1, v2, v6);
label2:
return;
}
private static int realRefCnt(int)
{
int v0, v1, v2;
v0 := @parameter0: int;
if v0 == 2 goto label1;
if v0 == 4 goto label1;
v1 = v0 & 1;
if v1 == 0 goto label1;
v2 = 0;
goto label2;
label1:
v2 = v0 >>> 1;
label2:
return v2;
}
private static int toLiveRealRefCnt(int, int)
{
io.netty.util.IllegalReferenceCountException v4;
int v0, v1, v2, v3, v5;
v0 := @parameter0: int;
v1 := @parameter1: int;
if v0 == 2 goto label1;
if v0 == 4 goto label1;
v2 = v0 & 1;
if v2 != 0 goto label2;
label1:
v3 = v0 >>> 1;
return v3;
label2:
v4 = new io.netty.util.IllegalReferenceCountException;
v5 = neg v1;
specialinvoke v4.<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>(0, v5);
throw v4;
}
private int nonVolatileRawCnt(io.netty.util.ReferenceCounted)
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v5;
byte v3;
int v4;
long v2;
io.netty.util.ReferenceCounted v1;
io.netty.util.internal.ReferenceCountUpdater v0;
v0 := @this: io.netty.util.internal.ReferenceCountUpdater;
v1 := @parameter0: io.netty.util.ReferenceCounted;
v2 = virtualinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: long unsafeOffset()>();
v3 = v2 cmp -1L;
if v3 == 0 goto label1;
v4 = staticinvoke <io.netty.util.internal.PlatformDependent: int getInt(java.lang.Object,long)>(v1, v2);
goto label2;
label1:
v5 = virtualinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater updater()>();
v4 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(v1);
label2:
return v4;
}
public final int refCnt(io.netty.util.ReferenceCounted)
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v2;
int v3, v4;
io.netty.util.ReferenceCounted v1;
io.netty.util.internal.ReferenceCountUpdater v0;
v0 := @this: io.netty.util.internal.ReferenceCountUpdater;
v1 := @parameter0: io.netty.util.ReferenceCounted;
v2 = virtualinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater updater()>();
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(v1);
v4 = staticinvoke <io.netty.util.internal.ReferenceCountUpdater: int realRefCnt(int)>(v3);
return v4;
}
public final boolean isLiveNonVolatile(io.netty.util.ReferenceCounted)
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v5;
long v2;
io.netty.util.ReferenceCounted v1;
io.netty.util.internal.ReferenceCountUpdater v0;
byte v3;
int v4, v6;
boolean v7;
v0 := @this: io.netty.util.internal.ReferenceCountUpdater;
v1 := @parameter0: io.netty.util.ReferenceCounted;
v2 = virtualinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: long unsafeOffset()>();
v3 = v2 cmp -1L;
if v3 == 0 goto label1;
v4 = staticinvoke <io.netty.util.internal.PlatformDependent: int getInt(java.lang.Object,long)>(v1, v2);
goto label2;
label1:
v5 = virtualinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater updater()>();
v4 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(v1);
label2:
if v4 == 2 goto label3;
if v4 == 4 goto label3;
if v4 == 6 goto label3;
if v4 == 8 goto label3;
v6 = v4 & 1;
if v6 != 0 goto label4;
label3:
v7 = 1;
goto label5;
label4:
v7 = 0;
label5:
return v7;
}
public final void setRefCnt(io.netty.util.ReferenceCounted, int)
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v3;
int v2, v4;
io.netty.util.ReferenceCounted v1;
io.netty.util.internal.ReferenceCountUpdater v0;
v0 := @this: io.netty.util.internal.ReferenceCountUpdater;
v1 := @parameter0: io.netty.util.ReferenceCounted;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater updater()>();
if v2 <= 0 goto label1;
v4 = v2 << 1;
goto label2;
label1:
v4 = 1;
label2:
virtualinvoke v3.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void set(java.lang.Object,int)>(v1, v4);
return;
}
public final void resetRefCnt(io.netty.util.ReferenceCounted)
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v2;
int v3;
io.netty.util.ReferenceCounted v1;
io.netty.util.internal.ReferenceCountUpdater v0;
v0 := @this: io.netty.util.internal.ReferenceCountUpdater;
v1 := @parameter0: io.netty.util.ReferenceCounted;
v2 = virtualinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater updater()>();
v3 = virtualinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: int initialValue()>();
virtualinvoke v2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void lazySet(java.lang.Object,int)>(v1, v3);
return;
}
public final io.netty.util.ReferenceCounted retain(io.netty.util.ReferenceCounted)
{
io.netty.util.ReferenceCounted v1, v2;
io.netty.util.internal.ReferenceCountUpdater v0;
v0 := @this: io.netty.util.internal.ReferenceCountUpdater;
v1 := @parameter0: io.netty.util.ReferenceCounted;
v2 = specialinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: io.netty.util.ReferenceCounted retain0(io.netty.util.ReferenceCounted,int,int)>(v1, 1, 2);
return v2;
}
public final io.netty.util.ReferenceCounted retain(io.netty.util.ReferenceCounted, int)
{
int v2, v3, v4;
io.netty.util.ReferenceCounted v1, v5;
io.netty.util.internal.ReferenceCountUpdater v0;
v0 := @this: io.netty.util.internal.ReferenceCountUpdater;
v1 := @parameter0: io.netty.util.ReferenceCounted;
v2 := @parameter1: int;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v2, "increment");
v4 = v3 << 1;
v5 = specialinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: io.netty.util.ReferenceCounted retain0(io.netty.util.ReferenceCounted,int,int)>(v1, v2, v4);
return v5;
}
private io.netty.util.ReferenceCounted retain0(io.netty.util.ReferenceCounted, int, int)
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v10, v4;
io.netty.util.IllegalReferenceCountException v12, v7;
io.netty.util.ReferenceCounted v1;
io.netty.util.internal.ReferenceCountUpdater v0;
int v11, v13, v2, v3, v5, v6, v8, v9;
v0 := @this: io.netty.util.internal.ReferenceCountUpdater;
v1 := @parameter0: io.netty.util.ReferenceCounted;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = virtualinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater updater()>();
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndAdd(java.lang.Object,int)>(v1, v3);
if v5 == 2 goto label1;
if v5 == 4 goto label1;
v6 = v5 & 1;
if v6 == 0 goto label1;
v7 = new io.netty.util.IllegalReferenceCountException;
specialinvoke v7.<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>(0, v2);
throw v7;
label1:
if v5 > 0 goto label2;
v8 = v5 + v3;
if v8 >= 0 goto label3;
label2:
if v5 < 0 goto label4;
v9 = v5 + v3;
if v9 >= v5 goto label4;
label3:
v10 = virtualinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater updater()>();
v11 = neg v3;
virtualinvoke v10.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndAdd(java.lang.Object,int)>(v1, v11);
v12 = new io.netty.util.IllegalReferenceCountException;
v13 = staticinvoke <io.netty.util.internal.ReferenceCountUpdater: int realRefCnt(int)>(v5);
specialinvoke v12.<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>(v13, v2);
throw v12;
label4:
return v1;
}
public final boolean release(io.netty.util.ReferenceCounted)
{
int v2, v6;
io.netty.util.ReferenceCounted v1;
boolean v3, v4, v5;
io.netty.util.internal.ReferenceCountUpdater v0;
v0 := @this: io.netty.util.internal.ReferenceCountUpdater;
v1 := @parameter0: io.netty.util.ReferenceCounted;
v2 = specialinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: int nonVolatileRawCnt(io.netty.util.ReferenceCounted)>(v1);
if v2 != 2 goto label3;
v3 = specialinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: boolean tryFinalRelease0(io.netty.util.ReferenceCounted,int)>(v1, 2);
if v3 != 0 goto label1;
v4 = specialinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: boolean retryRelease0(io.netty.util.ReferenceCounted,int)>(v1, 1);
if v4 == 0 goto label2;
label1:
v5 = 1;
goto label4;
label2:
v5 = 0;
goto label4;
label3:
v6 = staticinvoke <io.netty.util.internal.ReferenceCountUpdater: int toLiveRealRefCnt(int,int)>(v2, 1);
v5 = specialinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: boolean nonFinalRelease0(io.netty.util.ReferenceCounted,int,int,int)>(v1, 1, v2, v6);
label4:
return v5;
}
public final boolean release(io.netty.util.ReferenceCounted, int)
{
io.netty.util.ReferenceCounted v1;
io.netty.util.internal.ReferenceCountUpdater v0;
int v2, v3, v4, v5;
boolean v6, v7, v8;
v0 := @this: io.netty.util.internal.ReferenceCountUpdater;
v1 := @parameter0: io.netty.util.ReferenceCounted;
v2 := @parameter1: int;
v3 = specialinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: int nonVolatileRawCnt(io.netty.util.ReferenceCounted)>(v1);
v4 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v2, "decrement");
v5 = staticinvoke <io.netty.util.internal.ReferenceCountUpdater: int toLiveRealRefCnt(int,int)>(v3, v4);
if v2 != v5 goto label3;
v6 = specialinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: boolean tryFinalRelease0(io.netty.util.ReferenceCounted,int)>(v1, v3);
if v6 != 0 goto label1;
v7 = specialinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: boolean retryRelease0(io.netty.util.ReferenceCounted,int)>(v1, v2);
if v7 == 0 goto label2;
label1:
v8 = 1;
goto label4;
label2:
v8 = 0;
goto label4;
label3:
v8 = specialinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: boolean nonFinalRelease0(io.netty.util.ReferenceCounted,int,int,int)>(v1, v2, v3, v5);
label4:
return v8;
}
private boolean tryFinalRelease0(io.netty.util.ReferenceCounted, int)
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v3;
int v2;
io.netty.util.ReferenceCounted v1;
boolean v4;
io.netty.util.internal.ReferenceCountUpdater v0;
v0 := @this: io.netty.util.internal.ReferenceCountUpdater;
v1 := @parameter0: io.netty.util.ReferenceCounted;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater updater()>();
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(v1, v2, 1);
return v4;
}
private boolean nonFinalRelease0(io.netty.util.ReferenceCounted, int, int, int)
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v5;
io.netty.util.ReferenceCounted v1;
io.netty.util.internal.ReferenceCountUpdater v0;
int v2, v3, v4, v6, v7;
boolean v8, v9;
v0 := @this: io.netty.util.internal.ReferenceCountUpdater;
v1 := @parameter0: io.netty.util.ReferenceCounted;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
if v2 >= v4 goto label1;
v5 = virtualinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater updater()>();
v6 = v2 << 1;
v7 = v3 - v6;
v8 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(v1, v3, v7);
if v8 == 0 goto label1;
return 0;
label1:
v9 = specialinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: boolean retryRelease0(io.netty.util.ReferenceCounted,int)>(v1, v2);
return v9;
}
private boolean retryRelease0(io.netty.util.ReferenceCounted, int)
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v3, v7;
io.netty.util.IllegalReferenceCountException v11;
io.netty.util.ReferenceCounted v1;
io.netty.util.internal.ReferenceCountUpdater v0;
int v12, v2, v4, v5, v8, v9;
boolean v10, v6;
v0 := @this: io.netty.util.internal.ReferenceCountUpdater;
v1 := @parameter0: io.netty.util.ReferenceCounted;
v2 := @parameter1: int;
label1:
v3 = virtualinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater updater()>();
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(v1);
v5 = staticinvoke <io.netty.util.internal.ReferenceCountUpdater: int toLiveRealRefCnt(int,int)>(v4, v2);
if v2 != v5 goto label2;
v6 = specialinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: boolean tryFinalRelease0(io.netty.util.ReferenceCounted,int)>(v1, v4);
if v6 == 0 goto label4;
return 1;
label2:
if v2 >= v5 goto label3;
v7 = virtualinvoke v0.<io.netty.util.internal.ReferenceCountUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater updater()>();
v8 = v2 << 1;
v9 = v4 - v8;
v10 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(v1, v4, v9);
if v10 == 0 goto label4;
return 0;
label3:
v11 = new io.netty.util.IllegalReferenceCountException;
v12 = neg v2;
specialinvoke v11.<io.netty.util.IllegalReferenceCountException: void <init>(int,int)>(v5, v12);
throw v11;
label4:
staticinvoke <java.lang.Thread: void yield()>();
goto label1;
}
}