public final class io.netty.util.internal.shaded.org.jctools.util.RangeUtil extends java.lang.Object
{
public void <init>()
{
io.netty.util.internal.shaded.org.jctools.util.RangeUtil v0;
v0 := @this: io.netty.util.internal.shaded.org.jctools.util.RangeUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static long checkPositive(long, java.lang.String)
{
byte v2;
long v0;
java.lang.String v1, v4;
java.lang.IllegalArgumentException v3;
v0 := @parameter0: long;
v1 := @parameter1: java.lang.String;
v2 = v0 cmp 0L;
if v2 > 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,long)>(v1, v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001: \u0001 (expected: > 0)");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return v0;
}
public static int checkPositiveOrZero(int, java.lang.String)
{
int v0;
java.lang.String v1, v3;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: int;
v1 := @parameter1: java.lang.String;
if v0 >= 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v1, v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001: \u0001 (expected: >= 0)");
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
throw v2;
label1:
return v0;
}
public static int checkLessThan(int, int, java.lang.String)
{
int v0, v1;
java.lang.String v2, v4;
java.lang.IllegalArgumentException v3;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.String;
if v0 < v1 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int,int)>(v2, v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001: \u0001 (expected: < \u0001)");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return v0;
}
public static int checkLessThanOrEqual(int, long, java.lang.String)
{
byte v3;
int v0;
long v1;
java.lang.String v2, v5;
java.lang.IllegalArgumentException v4;
v0 := @parameter0: int;
v1 := @parameter1: long;
v2 := @parameter2: java.lang.String;
v3 = v0 cmp v1;
if v3 <= 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int,long)>(v2, v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001: \u0001 (expected: <= \u0001)");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
return v0;
}
public static int checkGreaterThanOrEqual(int, int, java.lang.String)
{
int v0, v1;
java.lang.String v2, v4;
java.lang.IllegalArgumentException v3;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.String;
if v0 >= v1 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int,int)>(v2, v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001: \u0001 (expected: >= \u0001)");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return v0;
}
}