public interface  io.quarkiverse.githubaction.Inputs extends java.lang.Object
{
public static final java.lang.String ACTION;
public static final java.lang.String GITHUB_TOKEN;
public abstract java.util.Map all();
public java.util.Optional get(java.lang.String)
{
java.util.Map v2;
java.util.Optional v4;
java.lang.Object v3;
java.lang.String v1;
io.quarkiverse.githubaction.Inputs v0;
v0 := @this: io.quarkiverse.githubaction.Inputs;
v1 := @parameter0: java.lang.String;
v2 = interfaceinvoke v0.<io.quarkiverse.githubaction.Inputs: java.util.Map all()>();
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
v4 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>(v3);
return v4;
}
public java.lang.String getRequired(java.lang.String)
{
java.lang.IllegalStateException v4;
java.util.Map v2;
java.lang.Object v3;
java.lang.String v1, v5;
io.quarkiverse.githubaction.Inputs v0;
v0 := @this: io.quarkiverse.githubaction.Inputs;
v1 := @parameter0: java.lang.String;
v2 = interfaceinvoke v0.<io.quarkiverse.githubaction.Inputs: java.util.Map all()>();
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 != null goto label1;
v4 = new java.lang.IllegalStateException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Input \u0001 is required and has not been provided");
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
return v3;
}
public java.util.Optional getBoolean(java.lang.String)
{
io.quarkiverse.githubaction.Inputs v0;
java.util.Map v2;
java.lang.Boolean v6;
java.util.Optional v4, v7;
java.lang.Object v3;
java.lang.String v1;
boolean v5;
v0 := @this: io.quarkiverse.githubaction.Inputs;
v1 := @parameter0: java.lang.String;
v2 = interfaceinvoke v0.<io.quarkiverse.githubaction.Inputs: java.util.Map all()>();
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 != null goto label1;
v4 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
return v4;
label1:
v5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(v3);
v6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v5);
v7 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(v6);
return v7;
}
public java.util.OptionalLong getLong(java.lang.String)
{
long v6;
io.quarkiverse.githubaction.Inputs v0;
java.util.OptionalLong v4, v7;
java.lang.Long v5;
java.util.Map v2;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: io.quarkiverse.githubaction.Inputs;
v1 := @parameter0: java.lang.String;
v2 = interfaceinvoke v0.<io.quarkiverse.githubaction.Inputs: java.util.Map all()>();
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 != null goto label1;
v4 = staticinvoke <java.util.OptionalLong: java.util.OptionalLong empty()>();
return v4;
label1:
v5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(v3);
v6 = virtualinvoke v5.<java.lang.Long: long longValue()>();
v7 = staticinvoke <java.util.OptionalLong: java.util.OptionalLong of(long)>(v6);
return v7;
}
public java.util.OptionalInt getInteger(java.lang.String)
{
java.lang.Integer v5;
java.util.OptionalInt v4, v7;
io.quarkiverse.githubaction.Inputs v0;
java.util.Map v2;
int v6;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: io.quarkiverse.githubaction.Inputs;
v1 := @parameter0: java.lang.String;
v2 = interfaceinvoke v0.<io.quarkiverse.githubaction.Inputs: java.util.Map all()>();
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 != null goto label1;
v4 = staticinvoke <java.util.OptionalInt: java.util.OptionalInt empty()>();
return v4;
label1:
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(v3);
v6 = virtualinvoke v5.<java.lang.Integer: int intValue()>();
v7 = staticinvoke <java.util.OptionalInt: java.util.OptionalInt of(int)>(v6);
return v7;
}
public java.lang.String getAction()
{
java.lang.Object v2;
io.quarkiverse.githubaction.Inputs v0;
java.util.Map v1;
v0 := @this: io.quarkiverse.githubaction.Inputs;
v1 = interfaceinvoke v0.<io.quarkiverse.githubaction.Inputs: java.util.Map all()>();
v2 = interfaceinvoke v1.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>("action", "<<UNNAMED>>");
return v2;
}
public java.util.Optional getGitHubToken()
{
java.util.Optional v1;
io.quarkiverse.githubaction.Inputs v0;
v0 := @this: io.quarkiverse.githubaction.Inputs;
v1 = interfaceinvoke v0.<io.quarkiverse.githubaction.Inputs: java.util.Optional get(java.lang.String)>("github-token");
return v1;
}
}