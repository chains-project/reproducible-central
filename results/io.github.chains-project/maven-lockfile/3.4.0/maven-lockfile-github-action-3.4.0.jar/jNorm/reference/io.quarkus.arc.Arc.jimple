public final class io.quarkus.arc.Arc extends java.lang.Object
{
private static final java.util.concurrent.atomic.AtomicReference INSTANCE;
public void <init>()
{
io.quarkus.arc.Arc v0;
v0 := @this: io.quarkus.arc.Arc;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static io.quarkus.arc.ArcContainer initialize()
{
io.quarkus.arc.ArcContainer v1;
io.quarkus.arc.ArcInitConfig v0;
v0 = <io.quarkus.arc.ArcInitConfig: io.quarkus.arc.ArcInitConfig DEFAULT>;
v1 = staticinvoke <io.quarkus.arc.Arc: io.quarkus.arc.ArcContainer initialize(io.quarkus.arc.ArcInitConfig)>(v0);
return v1;
}
public static io.quarkus.arc.ArcContainer initialize(io.quarkus.arc.CurrentContextFactory)
{
io.quarkus.arc.CurrentContextFactory v0;
io.quarkus.arc.ArcInitConfig$Builder v1, v2;
io.quarkus.arc.ArcContainer v4;
io.quarkus.arc.ArcInitConfig v3;
v0 := @parameter0: io.quarkus.arc.CurrentContextFactory;
v1 = staticinvoke <io.quarkus.arc.ArcInitConfig: io.quarkus.arc.ArcInitConfig$Builder builder()>();
v2 = virtualinvoke v1.<io.quarkus.arc.ArcInitConfig$Builder: io.quarkus.arc.ArcInitConfig$Builder setCurrentContextFactory(io.quarkus.arc.CurrentContextFactory)>(v0);
v3 = virtualinvoke v2.<io.quarkus.arc.ArcInitConfig$Builder: io.quarkus.arc.ArcInitConfig build()>();
v4 = staticinvoke <io.quarkus.arc.Arc: io.quarkus.arc.ArcContainer initialize(io.quarkus.arc.ArcInitConfig)>(v3);
return v4;
}
public static io.quarkus.arc.ArcContainer initialize(io.quarkus.arc.ArcInitConfig)
{
java.lang.Throwable v9;
io.quarkus.arc.CurrentContextFactory v6;
io.quarkus.arc.impl.ArcContainerImpl v5;
java.util.concurrent.atomic.AtomicReference v1, v3, v4, v8;
java.lang.Object v2;
boolean v7;
io.quarkus.arc.ArcInitConfig v0;
v0 := @parameter0: io.quarkus.arc.ArcInitConfig;
v1 = <io.quarkus.arc.Arc: java.util.concurrent.atomic.AtomicReference INSTANCE>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v2 != null goto label4;
v3 = <io.quarkus.arc.Arc: java.util.concurrent.atomic.AtomicReference INSTANCE>;
entermonitor v3;
label1:
v4 = <io.quarkus.arc.Arc: java.util.concurrent.atomic.AtomicReference INSTANCE>;
virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v5 = new io.quarkus.arc.impl.ArcContainerImpl;
v6 = virtualinvoke v0.<io.quarkus.arc.ArcInitConfig: io.quarkus.arc.CurrentContextFactory getCurrentContextFactory()>();
v7 = virtualinvoke v0.<io.quarkus.arc.ArcInitConfig: boolean isStrictCompatibility()>();
specialinvoke v5.<io.quarkus.arc.impl.ArcContainerImpl: void <init>(io.quarkus.arc.CurrentContextFactory,boolean)>(v6, v7);
v2 = v5;
v8 = <io.quarkus.arc.Arc: java.util.concurrent.atomic.AtomicReference INSTANCE>;
virtualinvoke v8.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v5);
virtualinvoke v5.<io.quarkus.arc.impl.ArcContainerImpl: void init()>();
exitmonitor v3;
label2:
goto label4;
label3:
v9 := @caughtexception;
exitmonitor v3;
throw v9;
label4:
return v2;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static void setExecutor(java.util.concurrent.ExecutorService)
{
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
java.util.concurrent.ExecutorService v0;
v0 := @parameter0: java.util.concurrent.ExecutorService;
v1 = <io.quarkus.arc.Arc: java.util.concurrent.atomic.AtomicReference INSTANCE>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
virtualinvoke v2.<io.quarkus.arc.impl.ArcContainerImpl: void setExecutor(java.util.concurrent.ExecutorService)>(v0);
return;
}
public static io.quarkus.arc.ArcContainer container()
{
java.lang.Object v1;
java.util.concurrent.atomic.AtomicReference v0;
v0 = <io.quarkus.arc.Arc: java.util.concurrent.atomic.AtomicReference INSTANCE>;
v1 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
return v1;
}
public static void shutdown()
{
java.lang.Throwable v6;
java.lang.Object v1, v4;
java.util.concurrent.atomic.AtomicReference v0, v2, v3, v5;
v0 = <io.quarkus.arc.Arc: java.util.concurrent.atomic.AtomicReference INSTANCE>;
v1 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v1 == null goto label5;
v2 = <io.quarkus.arc.Arc: java.util.concurrent.atomic.AtomicReference INSTANCE>;
entermonitor v2;
label1:
v3 = <io.quarkus.arc.Arc: java.util.concurrent.atomic.AtomicReference INSTANCE>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v4 == null goto label2;
virtualinvoke v4.<io.quarkus.arc.impl.ArcContainerImpl: void shutdown()>();
v5 = <io.quarkus.arc.Arc: java.util.concurrent.atomic.AtomicReference INSTANCE>;
virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);
label2:
exitmonitor v2;
label3:
goto label5;
label4:
v6 := @caughtexception;
exitmonitor v2;
throw v6;
label5:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicReference v0;
v0 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v0.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
<io.quarkus.arc.Arc: java.util.concurrent.atomic.AtomicReference INSTANCE> = v0;
return;
}
}