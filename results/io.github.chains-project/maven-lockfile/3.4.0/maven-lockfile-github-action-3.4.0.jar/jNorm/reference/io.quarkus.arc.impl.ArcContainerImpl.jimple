public class io.quarkus.arc.impl.ArcContainerImpl extends java.lang.Object implements io.quarkus.arc.ArcContainer
{
private static final org.jboss.logging.Logger LOGGER;
private static final java.util.concurrent.atomic.AtomicInteger ID_GENERATOR;
private final java.lang.String id;
private final java.util.concurrent.atomic.AtomicBoolean running;
private final java.util.List beans;
private final io.quarkus.arc.impl.LazyValue removedBeans;
private final java.util.List interceptors;
private final java.util.List decorators;
private final java.util.List observers;
private final io.quarkus.arc.impl.Contexts contexts;
private final io.quarkus.arc.impl.ComputingCache resolved;
private final io.quarkus.arc.impl.ComputingCache beansById;
private final io.quarkus.arc.impl.ComputingCache beansByName;
private final java.util.ArrayList resourceProviders;
final io.quarkus.arc.impl.InstanceImpl instance;
final io.quarkus.arc.impl.Qualifiers registeredQualifiers;
final io.quarkus.arc.impl.InterceptorBindings registeredInterceptorBindings;
private volatile java.util.concurrent.ExecutorService executorService;
private final io.quarkus.arc.CurrentContextFactory currentContextFactory;
private final boolean strictMode;
public void <init>(io.quarkus.arc.CurrentContextFactory, boolean)
{
io.quarkus.arc.impl.DependentContext v84;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.Map v36, v37;
io.quarkus.arc.impl.EventImpl$Notifier v73, v77, v81;
io.quarkus.arc.Components v23;
io.quarkus.arc.impl.ApplicationContext v82;
io.quarkus.arc.impl.ThreadLocalCurrentContextFactory v16;
java.util.Set v35, v38, v56, v72, v76, v80;
io.quarkus.arc.impl.LazyValue v62;
jakarta.enterprise.context.Initialized$Literal v70;
java.util.function.Supplier v33;
java.util.ArrayList v10, v11, v18, v49, v54, v55, v7, v8, v9;
java.lang.String v101, v5, v96;
io.quarkus.arc.impl.Contexts$Builder v66;
io.quarkus.arc.impl.Contexts v102;
java.util.function.ToIntFunction v39, v41;
io.quarkus.arc.impl.ArcContainerImpl$1 v63;
java.lang.IllegalStateException v100, v95;
io.quarkus.arc.CurrentContextFactory v1, v17, v68;
io.quarkus.arc.impl.ComputingCache v43, v45, v47;
io.quarkus.arc.CurrentContext v69;
io.quarkus.arc.impl.InstanceImpl v57;
java.util.concurrent.atomic.AtomicInteger v3;
boolean v2, v21, v25, v29, v31, v32, v52, v86, v90, v94, v99;
io.quarkus.arc.impl.SingletonContext v83;
java.util.Collection v27, v34, v88;
io.quarkus.arc.InjectableBean v103;
java.util.ServiceLoader v19, v50;
java.util.List v58, v59, v60, v61;
java.util.concurrent.atomic.AtomicBoolean v6;
java.util.HashMap v13, v14;
java.util.function.Function v44, v46, v48;
java.util.HashSet v12, v15;
jakarta.enterprise.context.BeforeDestroyed$Literal v74;
io.quarkus.arc.impl.Qualifiers v64;
int v4;
jakarta.enterprise.context.Destroyed$Literal v78;
jakarta.enterprise.inject.Any$Literal v71, v75, v79;
java.util.Iterator v20, v24, v28, v51, v85, v89;
io.quarkus.arc.impl.InterceptorBindings v65;
io.quarkus.arc.impl.RequestContext v67;
java.lang.Class v92, v93, v97, v98;
java.lang.Object v22, v26, v30, v53, v87, v91;
java.util.Comparator v40, v42;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: io.quarkus.arc.CurrentContextFactory;
v2 := @parameter1: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.quarkus.arc.impl.ArcContainerImpl: boolean strictMode> = v2;
v3 = <io.quarkus.arc.impl.ArcContainerImpl: java.util.concurrent.atomic.AtomicInteger ID_GENERATOR>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
v5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v4);
v0.<io.quarkus.arc.impl.ArcContainerImpl: java.lang.String id> = v5;
v6 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v6.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);
v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.concurrent.atomic.AtomicBoolean running> = v6;
v7 = new java.util.ArrayList;
specialinvoke v7.<java.util.ArrayList: void <init>()>();
v8 = new java.util.ArrayList;
specialinvoke v8.<java.util.ArrayList: void <init>()>();
v9 = new java.util.ArrayList;
specialinvoke v9.<java.util.ArrayList: void <init>()>();
v10 = new java.util.ArrayList;
specialinvoke v10.<java.util.ArrayList: void <init>()>();
v11 = new java.util.ArrayList;
specialinvoke v11.<java.util.ArrayList: void <init>()>();
v12 = new java.util.HashSet;
specialinvoke v12.<java.util.HashSet: void <init>()>();
v13 = new java.util.HashMap;
specialinvoke v13.<java.util.HashMap: void <init>()>();
v14 = new java.util.HashMap;
specialinvoke v14.<java.util.HashMap: void <init>()>();
v15 = new java.util.HashSet;
specialinvoke v15.<java.util.HashSet: void <init>()>();
if v1 != null goto label01;
v16 = new io.quarkus.arc.impl.ThreadLocalCurrentContextFactory;
v17 = v16;
specialinvoke v16.<io.quarkus.arc.impl.ThreadLocalCurrentContextFactory: void <init>()>();
goto label02;
label01:
v17 = v1;
label02:
v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.CurrentContextFactory currentContextFactory> = v17;
v18 = new java.util.ArrayList;
specialinvoke v18.<java.util.ArrayList: void <init>()>();
v19 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "Lio/quarkus/arc/ComponentsProvider;");
v20 = virtualinvoke v19.<java.util.ServiceLoader: java.util.Iterator iterator()>();
label03:
v21 = interfaceinvoke v20.<java.util.Iterator: boolean hasNext()>();
if v21 == 0 goto label04;
v22 = interfaceinvoke v20.<java.util.Iterator: java.lang.Object next()>();
v23 = interfaceinvoke v22.<io.quarkus.arc.ComponentsProvider: io.quarkus.arc.Components getComponents()>();
interfaceinvoke v18.<java.util.List: boolean add(java.lang.Object)>(v23);
goto label03;
label04:
v24 = interfaceinvoke v18.<java.util.List: java.util.Iterator iterator()>();
label05:
v25 = interfaceinvoke v24.<java.util.Iterator: boolean hasNext()>();
if v25 == 0 goto label10;
v26 = interfaceinvoke v24.<java.util.Iterator: java.lang.Object next()>();
v27 = virtualinvoke v26.<io.quarkus.arc.Components: java.util.Collection getBeans()>();
v28 = interfaceinvoke v27.<java.util.Collection: java.util.Iterator iterator()>();
label06:
v29 = interfaceinvoke v28.<java.util.Iterator: boolean hasNext()>();
if v29 == 0 goto label09;
v30 = interfaceinvoke v28.<java.util.Iterator: java.lang.Object next()>();
v31 = v30 instanceof io.quarkus.arc.InjectableInterceptor;
if v31 == 0 goto label07;
interfaceinvoke v9.<java.util.List: boolean add(java.lang.Object)>(v103);
goto label06;
label07:
v32 = v30 instanceof io.quarkus.arc.InjectableDecorator;
if v32 == 0 goto label08;
interfaceinvoke v10.<java.util.List: boolean add(java.lang.Object)>(v103);
goto label06;
label08:
interfaceinvoke v7.<java.util.List: boolean add(java.lang.Object)>(v30);
goto label06;
label09:
v33 = virtualinvoke v26.<io.quarkus.arc.Components: java.util.function.Supplier getRemovedBeans()>();
interfaceinvoke v8.<java.util.List: boolean add(java.lang.Object)>(v33);
v34 = virtualinvoke v26.<io.quarkus.arc.Components: java.util.Collection getObservers()>();
interfaceinvoke v11.<java.util.List: boolean addAll(java.util.Collection)>(v34);
v35 = virtualinvoke v26.<io.quarkus.arc.Components: java.util.Set getInterceptorBindings()>();
interfaceinvoke v12.<java.util.Set: boolean addAll(java.util.Collection)>(v35);
v36 = virtualinvoke v26.<io.quarkus.arc.Components: java.util.Map getTransitiveInterceptorBindings()>();
interfaceinvoke v13.<java.util.Map: void putAll(java.util.Map)>(v36);
v37 = virtualinvoke v26.<io.quarkus.arc.Components: java.util.Map getQualifierNonbindingMembers()>();
interfaceinvoke v14.<java.util.Map: void putAll(java.util.Map)>(v37);
v38 = virtualinvoke v26.<io.quarkus.arc.Components: java.util.Set getQualifiers()>();
interfaceinvoke v15.<java.util.Set: boolean addAll(java.util.Collection)>(v38);
goto label05;
label10:
staticinvoke <io.quarkus.arc.impl.ArcContainerImpl: void addBuiltInBeans(java.util.List)>(v7);
v39 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl$getPriority__2556: java.util.function.ToIntFunction bootstrap$()>();
v40 = staticinvoke <java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>(v39);
interfaceinvoke v9.<java.util.List: void sort(java.util.Comparator)>(v40);
v41 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl$getPriority__2557: java.util.function.ToIntFunction bootstrap$()>();
v42 = staticinvoke <java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>(v41);
interfaceinvoke v10.<java.util.List: void sort(java.util.Comparator)>(v42);
v43 = new io.quarkus.arc.impl.ComputingCache;
v44 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl$resolve__2558: java.util.function.Function bootstrap$(io.quarkus.arc.impl.ArcContainerImpl)>(v0);
specialinvoke v43.<io.quarkus.arc.impl.ComputingCache: void <init>(java.util.function.Function)>(v44);
v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.ComputingCache resolved> = v43;
v45 = new io.quarkus.arc.impl.ComputingCache;
v46 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl$findById__2559: java.util.function.Function bootstrap$(io.quarkus.arc.impl.ArcContainerImpl)>(v0);
specialinvoke v45.<io.quarkus.arc.impl.ComputingCache: void <init>(java.util.function.Function)>(v46);
v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.ComputingCache beansById> = v45;
v47 = new io.quarkus.arc.impl.ComputingCache;
v48 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl$resolve__2560: java.util.function.Function bootstrap$(io.quarkus.arc.impl.ArcContainerImpl)>(v0);
specialinvoke v47.<io.quarkus.arc.impl.ComputingCache: void <init>(java.util.function.Function)>(v48);
v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.ComputingCache beansByName> = v47;
v49 = new java.util.ArrayList;
specialinvoke v49.<java.util.ArrayList: void <init>()>();
v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.ArrayList resourceProviders> = v49;
v50 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "Lio/quarkus/arc/ResourceReferenceProvider;");
v51 = virtualinvoke v50.<java.util.ServiceLoader: java.util.Iterator iterator()>();
label11:
v52 = interfaceinvoke v51.<java.util.Iterator: boolean hasNext()>();
if v52 == 0 goto label12;
v53 = interfaceinvoke v51.<java.util.Iterator: java.lang.Object next()>();
v54 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.ArrayList resourceProviders>;
virtualinvoke v54.<java.util.ArrayList: boolean add(java.lang.Object)>(v53);
goto label11;
label12:
v55 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.ArrayList resourceProviders>;
virtualinvoke v55.<java.util.ArrayList: void trimToSize()>();
v56 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
v57 = staticinvoke <io.quarkus.arc.impl.InstanceImpl: io.quarkus.arc.impl.InstanceImpl of(java.lang.reflect.Type,java.util.Set)>(class "Ljava/lang/Object;", v56);
v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.InstanceImpl instance> = v57;
v58 = staticinvoke <java.util.List: java.util.List copyOf(java.util.Collection)>(v7);
v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List beans> = v58;
v59 = staticinvoke <java.util.List: java.util.List copyOf(java.util.Collection)>(v9);
v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List interceptors> = v59;
v60 = staticinvoke <java.util.List: java.util.List copyOf(java.util.Collection)>(v10);
v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List decorators> = v60;
v61 = staticinvoke <java.util.List: java.util.List copyOf(java.util.Collection)>(v11);
v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List observers> = v61;
v62 = new io.quarkus.arc.impl.LazyValue;
v63 = new io.quarkus.arc.impl.ArcContainerImpl$1;
specialinvoke v63.<io.quarkus.arc.impl.ArcContainerImpl$1: void <init>(io.quarkus.arc.impl.ArcContainerImpl,java.util.List)>(v0, v8);
specialinvoke v62.<io.quarkus.arc.impl.LazyValue: void <init>(java.util.function.Supplier)>(v63);
v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.LazyValue removedBeans> = v62;
v64 = new io.quarkus.arc.impl.Qualifiers;
specialinvoke v64.<io.quarkus.arc.impl.Qualifiers: void <init>(java.util.Set,java.util.Map)>(v15, v14);
v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Qualifiers registeredQualifiers> = v64;
v65 = new io.quarkus.arc.impl.InterceptorBindings;
specialinvoke v65.<io.quarkus.arc.impl.InterceptorBindings: void <init>(java.util.Set,java.util.Map)>(v12, v13);
v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.InterceptorBindings registeredInterceptorBindings> = v65;
v66 = new io.quarkus.arc.impl.Contexts$Builder;
v67 = new io.quarkus.arc.impl.RequestContext;
v68 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.CurrentContextFactory currentContextFactory>;
v69 = interfaceinvoke v68.<io.quarkus.arc.CurrentContextFactory: io.quarkus.arc.CurrentContext create(java.lang.Class)>(class "Ljakarta/enterprise/context/RequestScoped;");
v70 = <jakarta.enterprise.context.Initialized$Literal: jakarta.enterprise.context.Initialized$Literal REQUEST>;
v71 = <jakarta.enterprise.inject.Any$Literal: jakarta.enterprise.inject.Any$Literal INSTANCE>;
v72 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object)>(v70, v71);
v73 = specialinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.EventImpl$Notifier notifierOrNull(java.util.Set)>(v72);
v74 = <jakarta.enterprise.context.BeforeDestroyed$Literal: jakarta.enterprise.context.BeforeDestroyed$Literal REQUEST>;
v75 = <jakarta.enterprise.inject.Any$Literal: jakarta.enterprise.inject.Any$Literal INSTANCE>;
v76 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object)>(v74, v75);
v77 = specialinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.EventImpl$Notifier notifierOrNull(java.util.Set)>(v76);
v78 = <jakarta.enterprise.context.Destroyed$Literal: jakarta.enterprise.context.Destroyed$Literal REQUEST>;
v79 = <jakarta.enterprise.inject.Any$Literal: jakarta.enterprise.inject.Any$Literal INSTANCE>;
v80 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object)>(v78, v79);
v81 = specialinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.EventImpl$Notifier notifierOrNull(java.util.Set)>(v80);
specialinvoke v67.<io.quarkus.arc.impl.RequestContext: void <init>(io.quarkus.arc.CurrentContext,io.quarkus.arc.impl.EventImpl$Notifier,io.quarkus.arc.impl.EventImpl$Notifier,io.quarkus.arc.impl.EventImpl$Notifier)>(v69, v73, v77, v81);
v82 = new io.quarkus.arc.impl.ApplicationContext;
specialinvoke v82.<io.quarkus.arc.impl.ApplicationContext: void <init>()>();
v83 = new io.quarkus.arc.impl.SingletonContext;
specialinvoke v83.<io.quarkus.arc.impl.SingletonContext: void <init>()>();
v84 = new io.quarkus.arc.impl.DependentContext;
specialinvoke v84.<io.quarkus.arc.impl.DependentContext: void <init>()>();
specialinvoke v66.<io.quarkus.arc.impl.Contexts$Builder: void <init>(io.quarkus.arc.ManagedContext,io.quarkus.arc.InjectableContext,io.quarkus.arc.InjectableContext,io.quarkus.arc.InjectableContext)>(v67, v82, v83, v84);
v85 = interfaceinvoke v18.<java.util.List: java.util.Iterator iterator()>();
label13:
v86 = interfaceinvoke v85.<java.util.Iterator: boolean hasNext()>();
if v86 == 0 goto label17;
v87 = interfaceinvoke v85.<java.util.Iterator: java.lang.Object next()>();
v88 = virtualinvoke v87.<io.quarkus.arc.Components: java.util.Collection getContexts()>();
v89 = interfaceinvoke v88.<java.util.Collection: java.util.Iterator iterator()>();
label14:
v90 = interfaceinvoke v89.<java.util.Iterator: boolean hasNext()>();
if v90 == 0 goto label13;
v91 = interfaceinvoke v89.<java.util.Iterator: java.lang.Object next()>();
v92 = class "Ljakarta/enterprise/context/ApplicationScoped;";
v93 = interfaceinvoke v91.<io.quarkus.arc.InjectableContext: java.lang.Class getScope()>();
v94 = virtualinvoke v92.<java.lang.Object: boolean equals(java.lang.Object)>(v93);
if v94 == 0 goto label15;
v95 = new java.lang.IllegalStateException;
v96 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.quarkus.arc.InjectableContext)>(v91) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to register a context - built-in application context is always active: \u0001");
specialinvoke v95.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v96);
throw v95;
label15:
v97 = class "Ljakarta/inject/Singleton;";
v98 = interfaceinvoke v91.<io.quarkus.arc.InjectableContext: java.lang.Class getScope()>();
v99 = virtualinvoke v97.<java.lang.Object: boolean equals(java.lang.Object)>(v98);
if v99 == 0 goto label16;
v100 = new java.lang.IllegalStateException;
v101 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.quarkus.arc.InjectableContext)>(v91) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to register a context - built-in singleton context is always active: \u0001");
specialinvoke v100.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v101);
throw v100;
label16:
virtualinvoke v66.<io.quarkus.arc.impl.Contexts$Builder: io.quarkus.arc.impl.Contexts$Builder putContext(io.quarkus.arc.InjectableContext)>(v91);
goto label14;
label17:
v102 = virtualinvoke v66.<io.quarkus.arc.impl.Contexts$Builder: io.quarkus.arc.impl.Contexts build()>();
v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Contexts contexts> = v102;
return;
}
public void init()
{
jakarta.enterprise.inject.Any$Literal v2;
jakarta.enterprise.context.Initialized$Literal v1;
org.jboss.logging.Logger v6;
java.util.Set v3;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.List v7, v9;
int v10, v8;
io.quarkus.arc.impl.EventImpl$Notifier v4;
io.quarkus.arc.impl.ArcCDIProvider v5;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 = <jakarta.enterprise.context.Initialized$Literal: jakarta.enterprise.context.Initialized$Literal APPLICATION>;
v2 = <jakarta.enterprise.inject.Any$Literal: jakarta.enterprise.inject.Any$Literal INSTANCE>;
v3 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object)>(v1, v2);
v4 = staticinvoke <io.quarkus.arc.impl.EventImpl: io.quarkus.arc.impl.EventImpl$Notifier createNotifier(java.lang.Class,java.lang.reflect.Type,java.util.Set,io.quarkus.arc.impl.ArcContainerImpl,boolean,jakarta.enterprise.inject.spi.InjectionPoint)>(class "Ljava/lang/Object;", class "Ljava/lang/Object;", v3, v0, 0, null);
virtualinvoke v4.<io.quarkus.arc.impl.EventImpl$Notifier: void notify(java.lang.Object)>("@Initialized(ApplicationScoped.class)");
v5 = new io.quarkus.arc.impl.ArcCDIProvider;
specialinvoke v5.<io.quarkus.arc.impl.ArcCDIProvider: void <init>()>();
staticinvoke <jakarta.enterprise.inject.spi.CDI: void setCDIProvider(jakarta.enterprise.inject.spi.CDIProvider)>(v5);
v6 = <io.quarkus.arc.impl.ArcContainerImpl: org.jboss.logging.Logger LOGGER>;
v7 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List beans>;
v8 = interfaceinvoke v7.<java.util.List: int size()>();
v9 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List observers>;
v10 = interfaceinvoke v9.<java.util.List: int size()>();
virtualinvoke v6.<org.jboss.logging.Logger: void debugf(java.lang.String,int,int)>("ArC DI container initialized [beans=%s, observers=%s]", v8, v10);
return;
}
public io.quarkus.arc.InjectableContext getActiveContext(java.lang.Class)
{
io.quarkus.arc.InjectableContext v3;
io.quarkus.arc.impl.Contexts v2;
java.lang.Class v1;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.Class;
v2 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Contexts contexts>;
v3 = virtualinvoke v2.<io.quarkus.arc.impl.Contexts: io.quarkus.arc.InjectableContext getActiveContext(java.lang.Class)>(v1);
return v3;
}
public java.util.List getContexts(java.lang.Class)
{
java.util.List v3;
io.quarkus.arc.impl.Contexts v2;
java.lang.Class v1;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.Class;
v2 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Contexts contexts>;
v3 = virtualinvoke v2.<io.quarkus.arc.impl.Contexts: java.util.List getContexts(java.lang.Class)>(v1);
return v3;
}
public java.util.Set getScopes()
{
io.quarkus.arc.impl.Contexts v1;
java.util.Set v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Contexts contexts>;
v2 = v1.<io.quarkus.arc.impl.Contexts: java.util.Set scopes>;
return v2;
}
public transient io.quarkus.arc.InstanceHandle instance(java.lang.Class, java.lang.'annotation'.Annotation[])
{
io.quarkus.arc.InstanceHandle v3;
java.lang.Class v1;
java.lang.'annotation'.Annotation[] v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
v3 = specialinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.InstanceHandle instanceHandle(java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>(v1, v2);
return v3;
}
public transient io.quarkus.arc.InstanceHandle instance(jakarta.enterprise.util.TypeLiteral, java.lang.'annotation'.Annotation[])
{
io.quarkus.arc.InstanceHandle v4;
jakarta.enterprise.util.TypeLiteral v1;
java.lang.reflect.Type v3;
java.lang.'annotation'.Annotation[] v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: jakarta.enterprise.util.TypeLiteral;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
v3 = virtualinvoke v1.<jakarta.enterprise.util.TypeLiteral: java.lang.reflect.Type getType()>();
v4 = specialinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.InstanceHandle instanceHandle(java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>(v3, v2);
return v4;
}
public transient io.quarkus.arc.InstanceHandle instance(java.lang.reflect.Type, java.lang.'annotation'.Annotation[])
{
io.quarkus.arc.InstanceHandle v3;
java.lang.reflect.Type v1;
java.lang.'annotation'.Annotation[] v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
v3 = specialinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.InstanceHandle instanceHandle(java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>(v1, v2);
return v3;
}
public transient java.util.function.Supplier beanInstanceSupplier(java.lang.Class, java.lang.'annotation'.Annotation[])
{
java.lang.Class v1;
java.lang.'annotation'.Annotation[] v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.function.Supplier v3;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
v3 = specialinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.function.Supplier createInstanceSupplier(boolean,java.lang.Class,java.lang.'annotation'.Annotation[])>(0, v1, v2);
return v3;
}
public transient java.util.function.Supplier instanceSupplier(java.lang.Class, java.lang.'annotation'.Annotation[])
{
java.lang.Class v1;
java.lang.'annotation'.Annotation[] v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.function.Supplier v3;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
v3 = specialinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.function.Supplier createInstanceSupplier(boolean,java.lang.Class,java.lang.'annotation'.Annotation[])>(1, v1, v2);
return v3;
}
private transient java.util.function.Supplier createInstanceSupplier(boolean, java.lang.Class, java.lang.'annotation'.Annotation[])
{
io.quarkus.arc.impl.ComputingCache v7;
java.lang.'annotation'.Annotation[] v3, v5;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.HashSet v12;
int v11, v20, v4;
java.lang.String v19;
boolean v1, v14, v17;
jakarta.enterprise.inject.Default$Literal v6;
java.util.Iterator v13, v21;
java.util.Set v10;
io.quarkus.arc.impl.ArcContainerImpl$Resolvable v8;
jakarta.enterprise.inject.AmbiguousResolutionException v18;
java.lang.Class v16, v2;
java.lang.Object v15, v22, v9;
io.quarkus.arc.impl.ArcContainerImpl$2 v23;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: boolean;
v2 := @parameter1: java.lang.Class;
v3 := @parameter2: java.lang.'annotation'.Annotation[];
if v3 == null goto label1;
v4 = lengthof v3;
if v4 != 0 goto label2;
label1:
v5 = newarray (java.lang.'annotation'.Annotation)[1];
v6 = <jakarta.enterprise.inject.Default$Literal: jakarta.enterprise.inject.Default$Literal INSTANCE>;
v5[0] = v6;
v3 = v5;
label2:
v7 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.ComputingCache resolved>;
v8 = new io.quarkus.arc.impl.ArcContainerImpl$Resolvable;
specialinvoke v8.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: void <init>(java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>(v2, v3);
v9 = virtualinvoke v7.<io.quarkus.arc.impl.ComputingCache: java.lang.Object getValue(java.lang.Object)>(v8);
v10 = v9;
v11 = interfaceinvoke v9.<java.util.Set: int size()>();
if v11 <= 1 goto label5;
if v1 == 0 goto label4;
v12 = new java.util.HashSet;
specialinvoke v12.<java.util.HashSet: void <init>()>();
v10 = v12;
v13 = interfaceinvoke v9.<java.util.Set: java.util.Iterator iterator()>();
label3:
v14 = interfaceinvoke v13.<java.util.Iterator: boolean hasNext()>();
if v14 == 0 goto label5;
v15 = interfaceinvoke v13.<java.util.Iterator: java.lang.Object next()>();
v16 = interfaceinvoke v15.<io.quarkus.arc.InjectableBean: java.lang.Class getBeanClass()>();
v17 = virtualinvoke v16.<java.lang.Object: boolean equals(java.lang.Object)>(v2);
if v17 == 0 goto label3;
interfaceinvoke v12.<java.util.Set: boolean add(java.lang.Object)>(v15);
goto label3;
label4:
v18 = new jakarta.enterprise.inject.AmbiguousResolutionException;
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.Set)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Beans: \u0001");
specialinvoke v18.<jakarta.enterprise.inject.AmbiguousResolutionException: void <init>(java.lang.String)>(v19);
throw v18;
label5:
v20 = interfaceinvoke v10.<java.util.Set: int size()>();
if v20 != 1 goto label6;
v21 = interfaceinvoke v10.<java.util.Set: java.util.Iterator iterator()>();
v22 = interfaceinvoke v21.<java.util.Iterator: java.lang.Object next()>();
label6:
if v22 != null goto label7;
return null;
label7:
v23 = new io.quarkus.arc.impl.ArcContainerImpl$2;
specialinvoke v23.<io.quarkus.arc.impl.ArcContainerImpl$2: void <init>(io.quarkus.arc.impl.ArcContainerImpl,io.quarkus.arc.InjectableBean)>(v0, v22);
return v23;
}
public io.quarkus.arc.InstanceHandle instance(io.quarkus.arc.InjectableBean)
{
io.quarkus.arc.InjectableBean v1;
io.quarkus.arc.InstanceHandle v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: io.quarkus.arc.InjectableBean;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.InstanceHandle beanInstanceHandle(io.quarkus.arc.InjectableBean,io.quarkus.arc.impl.CreationalContextImpl)>(v1, null);
return v2;
}
public transient io.quarkus.arc.InjectableInstance select(java.lang.Class, java.lang.'annotation'.Annotation[])
{
io.quarkus.arc.impl.InstanceImpl v3;
java.lang.Class v1;
java.lang.'annotation'.Annotation[] v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
io.quarkus.arc.InjectableInstance v4;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
v3 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.InstanceImpl instance>;
v4 = virtualinvoke v3.<io.quarkus.arc.impl.InstanceImpl: io.quarkus.arc.InjectableInstance select(java.lang.Class,java.lang.'annotation'.Annotation[])>(v1, v2);
return v4;
}
public transient io.quarkus.arc.InjectableInstance select(jakarta.enterprise.util.TypeLiteral, java.lang.'annotation'.Annotation[])
{
jakarta.enterprise.util.TypeLiteral v1;
io.quarkus.arc.impl.InstanceImpl v3;
java.lang.'annotation'.Annotation[] v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
io.quarkus.arc.InjectableInstance v4;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: jakarta.enterprise.util.TypeLiteral;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
v3 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.InstanceImpl instance>;
v4 = virtualinvoke v3.<io.quarkus.arc.impl.InstanceImpl: io.quarkus.arc.InjectableInstance select(jakarta.enterprise.util.TypeLiteral,java.lang.'annotation'.Annotation[])>(v1, v2);
return v4;
}
public transient java.util.List listAll(java.lang.Class, java.lang.'annotation'.Annotation[])
{
java.util.List v6;
io.quarkus.arc.impl.CreationalContextImpl v5;
java.util.Set v4;
java.lang.Class v1;
java.lang.'annotation'.Annotation[] v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.function.Supplier v3;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
v3 = <io.quarkus.arc.impl.CurrentInjectionPointProvider: java.util.function.Supplier EMPTY_SUPPLIER>;
v4 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object[])>(v2);
v5 = new io.quarkus.arc.impl.CreationalContextImpl;
specialinvoke v5.<io.quarkus.arc.impl.CreationalContextImpl: void <init>(jakarta.enterprise.context.spi.Contextual)>(null);
v6 = staticinvoke <io.quarkus.arc.impl.Instances: java.util.List listOfHandles(java.util.function.Supplier,java.lang.reflect.Type,java.util.Set,jakarta.enterprise.context.spi.CreationalContext)>(v3, v1, v4, v5);
return v6;
}
public transient java.util.List listAll(jakarta.enterprise.util.TypeLiteral, java.lang.'annotation'.Annotation[])
{
java.util.Set v5;
java.lang.'annotation'.Annotation[] v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.function.Supplier v3;
jakarta.enterprise.util.TypeLiteral v1;
java.util.List v7;
java.lang.reflect.Type v4;
io.quarkus.arc.impl.CreationalContextImpl v6;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: jakarta.enterprise.util.TypeLiteral;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
v3 = <io.quarkus.arc.impl.CurrentInjectionPointProvider: java.util.function.Supplier EMPTY_SUPPLIER>;
v4 = virtualinvoke v1.<jakarta.enterprise.util.TypeLiteral: java.lang.reflect.Type getType()>();
v5 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object[])>(v2);
v6 = new io.quarkus.arc.impl.CreationalContextImpl;
specialinvoke v6.<io.quarkus.arc.impl.CreationalContextImpl: void <init>(jakarta.enterprise.context.spi.Contextual)>(null);
v7 = staticinvoke <io.quarkus.arc.impl.Instances: java.util.List listOfHandles(java.util.function.Supplier,java.lang.reflect.Type,java.util.Set,jakarta.enterprise.context.spi.CreationalContext)>(v3, v4, v5, v6);
return v7;
}
public boolean isRunning()
{
java.util.concurrent.atomic.AtomicBoolean v1;
io.quarkus.arc.impl.ArcContainerImpl v0;
boolean v2;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.concurrent.atomic.AtomicBoolean running>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
return v2;
}
public io.quarkus.arc.InjectableBean bean(java.lang.String)
{
io.quarkus.arc.impl.ComputingCache v2;
java.lang.Object v3;
java.lang.String v1;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.ComputingCache beansById>;
v3 = virtualinvoke v2.<io.quarkus.arc.impl.ComputingCache: java.lang.Object getValue(java.lang.Object)>(v1);
return v3;
}
public io.quarkus.arc.InjectableBean namedBean(java.lang.String)
{
java.util.Iterator v5;
int v4;
io.quarkus.arc.impl.ComputingCache v2;
java.lang.Object v3, v6;
java.lang.String v1;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.ComputingCache beansByName>;
v3 = virtualinvoke v2.<io.quarkus.arc.impl.ComputingCache: java.lang.Object getValue(java.lang.Object)>(v1);
v4 = interfaceinvoke v3.<java.util.Set: int size()>();
if v4 != 1 goto label1;
v5 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
v6 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
goto label2;
label1:
v6 = null;
label2:
return v6;
}
public io.quarkus.arc.InstanceHandle instance(java.lang.String)
{
java.util.Iterator v6;
io.quarkus.arc.impl.ComputingCache v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
io.quarkus.arc.InstanceHandle v5;
int v4;
java.lang.Object v3, v7;
java.lang.String v1;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.ComputingCache beansByName>;
v3 = virtualinvoke v2.<io.quarkus.arc.impl.ComputingCache: java.lang.Object getValue(java.lang.Object)>(v1);
v4 = interfaceinvoke v3.<java.util.Set: int size()>();
if v4 == 1 goto label1;
v5 = staticinvoke <io.quarkus.arc.impl.EagerInstanceHandle: io.quarkus.arc.InstanceHandle unavailable()>();
goto label2;
label1:
v6 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
v7 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v5 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.InstanceHandle beanInstanceHandle(io.quarkus.arc.InjectableBean,io.quarkus.arc.impl.CreationalContextImpl)>(v7, null);
label2:
return v5;
}
public io.quarkus.arc.ManagedContext requestContext()
{
io.quarkus.arc.impl.Contexts v1;
io.quarkus.arc.ManagedContext v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Contexts contexts>;
v2 = v1.<io.quarkus.arc.impl.Contexts: io.quarkus.arc.ManagedContext requestContext>;
return v2;
}
public jakarta.enterprise.inject.spi.BeanManager beanManager()
{
io.quarkus.arc.impl.LazyValue v1;
java.lang.Object v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 = <io.quarkus.arc.impl.BeanManagerImpl: io.quarkus.arc.impl.LazyValue INSTANCE>;
v2 = virtualinvoke v1.<io.quarkus.arc.impl.LazyValue: java.lang.Object get()>();
return v2;
}
public java.util.concurrent.ExecutorService getExecutorService()
{
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.concurrent.ExecutorService v1, v2;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.concurrent.ExecutorService executorService>;
if v1 == null goto label1;
v2 = v1;
goto label2;
label1:
v2 = staticinvoke <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool commonPool()>();
label2:
return v2;
}
public void setExecutor(java.util.concurrent.ExecutorService)
{
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.concurrent.ExecutorService v1;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.util.concurrent.ExecutorService;
v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.concurrent.ExecutorService executorService> = v1;
return;
}
public io.quarkus.arc.CurrentContextFactory getCurrentContextFactory()
{
io.quarkus.arc.CurrentContextFactory v1;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.CurrentContextFactory currentContextFactory>;
return v1;
}
public boolean strictCompatibility()
{
io.quarkus.arc.impl.ArcContainerImpl v0;
boolean v1;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 = v0.<io.quarkus.arc.impl.ArcContainerImpl: boolean strictMode>;
return v1;
}
public java.lang.String toString()
{
io.quarkus.arc.impl.Contexts v7;
java.util.Set v8;
java.util.concurrent.atomic.AtomicBoolean v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.List v3, v5;
int v4, v6, v9;
java.lang.String v1, v10;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.lang.String id>;
v2 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.concurrent.atomic.AtomicBoolean running>;
v3 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List beans>;
v4 = interfaceinvoke v3.<java.util.List: int size()>();
v5 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List observers>;
v6 = interfaceinvoke v5.<java.util.List: int size()>();
v7 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Contexts contexts>;
v8 = v7.<io.quarkus.arc.impl.Contexts: java.util.Set scopes>;
v9 = interfaceinvoke v8.<java.util.Set: int size()>();
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.util.concurrent.atomic.AtomicBoolean,int,int,int)>(v1, v2, v4, v6, v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("ArcContainerImpl [id=\u0001, running=\u0001, beans=\u0001, observers=\u0001, scopes=\u0001]");
return v10;
}
public synchronized void shutdown()
{
jakarta.enterprise.inject.spi.CDI v3;
java.lang.Object[] v28;
org.jboss.logging.Logger v13, v22, v27;
io.quarkus.arc.InjectableContext v15, v24;
io.quarkus.arc.impl.ComputingCache v25;
java.util.concurrent.atomic.AtomicBoolean v1, v26;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.HashSet v16, v7;
jakarta.enterprise.context.BeforeDestroyed$Literal v8;
io.quarkus.arc.impl.EventImpl$Notifier v10, v19;
java.lang.String v11, v20;
boolean v2, v4;
io.quarkus.arc.ManagedContext v6;
jakarta.enterprise.context.Destroyed$Literal v17;
jakarta.enterprise.inject.Any$Literal v18, v9;
io.quarkus.arc.impl.Contexts v14, v23, v5;
java.lang.Exception v12, v21;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.concurrent.atomic.AtomicBoolean running>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v2 == 0 goto label10;
v3 = staticinvoke <jakarta.enterprise.inject.spi.CDI: jakarta.enterprise.inject.spi.CDI current()>();
v4 = v3 instanceof io.quarkus.arc.impl.ArcCDIProvider$ArcCDI;
if v4 == 0 goto label01;
virtualinvoke v3.<io.quarkus.arc.impl.ArcCDIProvider$ArcCDI: void destroy()>();
label01:
v5 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Contexts contexts>;
v6 = v5.<io.quarkus.arc.impl.Contexts: io.quarkus.arc.ManagedContext requestContext>;
interfaceinvoke v6.<io.quarkus.arc.ManagedContext: void terminate()>();
v7 = new java.util.HashSet;
specialinvoke v7.<java.util.HashSet: void <init>(int)>(4);
v8 = <jakarta.enterprise.context.BeforeDestroyed$Literal: jakarta.enterprise.context.BeforeDestroyed$Literal APPLICATION>;
interfaceinvoke v7.<java.util.Set: boolean add(java.lang.Object)>(v8);
v9 = <jakarta.enterprise.inject.Any$Literal: jakarta.enterprise.inject.Any$Literal INSTANCE>;
interfaceinvoke v7.<java.util.Set: boolean add(java.lang.Object)>(v9);
label02:
v10 = staticinvoke <io.quarkus.arc.impl.EventImpl: io.quarkus.arc.impl.EventImpl$Notifier createNotifier(java.lang.Class,java.lang.reflect.Type,java.util.Set,io.quarkus.arc.impl.ArcContainerImpl,boolean,jakarta.enterprise.inject.spi.InjectionPoint)>(class "Ljava/lang/Object;", class "Ljava/lang/Object;", v7, v0, 0, null);
v11 = virtualinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: java.lang.String toString()>();
virtualinvoke v10.<io.quarkus.arc.impl.EventImpl$Notifier: void notify(java.lang.Object)>(v11);
label03:
goto label05;
label04:
v12 := @caughtexception;
v13 = <io.quarkus.arc.impl.ArcContainerImpl: org.jboss.logging.Logger LOGGER>;
virtualinvoke v13.<org.jboss.logging.Logger: void warn(java.lang.Object,java.lang.Throwable)>("An error occurred during delivery of the @BeforeDestroyed(ApplicationScoped.class) event", v12);
label05:
v14 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Contexts contexts>;
v15 = v14.<io.quarkus.arc.impl.Contexts: io.quarkus.arc.InjectableContext applicationContext>;
interfaceinvoke v15.<io.quarkus.arc.InjectableContext: void destroy()>();
v16 = new java.util.HashSet;
specialinvoke v16.<java.util.HashSet: void <init>(int)>(4);
v17 = <jakarta.enterprise.context.Destroyed$Literal: jakarta.enterprise.context.Destroyed$Literal APPLICATION>;
interfaceinvoke v16.<java.util.Set: boolean add(java.lang.Object)>(v17);
v18 = <jakarta.enterprise.inject.Any$Literal: jakarta.enterprise.inject.Any$Literal INSTANCE>;
interfaceinvoke v16.<java.util.Set: boolean add(java.lang.Object)>(v18);
label06:
v19 = staticinvoke <io.quarkus.arc.impl.EventImpl: io.quarkus.arc.impl.EventImpl$Notifier createNotifier(java.lang.Class,java.lang.reflect.Type,java.util.Set,io.quarkus.arc.impl.ArcContainerImpl,boolean,jakarta.enterprise.inject.spi.InjectionPoint)>(class "Ljava/lang/Object;", class "Ljava/lang/Object;", v16, v0, 0, null);
v20 = virtualinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: java.lang.String toString()>();
virtualinvoke v19.<io.quarkus.arc.impl.EventImpl$Notifier: void notify(java.lang.Object)>(v20);
label07:
goto label09;
label08:
v21 := @caughtexception;
v22 = <io.quarkus.arc.impl.ArcContainerImpl: org.jboss.logging.Logger LOGGER>;
virtualinvoke v22.<org.jboss.logging.Logger: void warn(java.lang.Object,java.lang.Throwable)>("An error occurred during delivery of the @Destroyed(ApplicationScoped.class) event", v21);
label09:
v23 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Contexts contexts>;
v24 = v23.<io.quarkus.arc.impl.Contexts: io.quarkus.arc.InjectableContext singletonContext>;
interfaceinvoke v24.<io.quarkus.arc.InjectableContext: void destroy()>();
staticinvoke <io.quarkus.arc.impl.Reflections: void clearCaches()>();
v25 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.ComputingCache resolved>;
virtualinvoke v25.<io.quarkus.arc.impl.ComputingCache: void clear()>();
v26 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.concurrent.atomic.AtomicBoolean running>;
virtualinvoke v26.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);
staticinvoke <io.quarkus.arc.impl.InterceptedStaticMethods: void clear()>();
v27 = <io.quarkus.arc.impl.ArcContainerImpl: org.jboss.logging.Logger LOGGER>;
v28 = newarray (java.lang.Object)[0];
virtualinvoke v27.<org.jboss.logging.Logger: void debugf(java.lang.String,java.lang.Object[])>("ArC DI container shut down", v28);
label10:
return;
catch java.lang.Exception from label02 to label03 with label04;
catch java.lang.Exception from label06 to label07 with label08;
}
public java.util.List getBeans()
{
java.util.List v1;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List beans>;
return v1;
}
public java.util.List getRemovedBeans()
{
io.quarkus.arc.impl.LazyValue v1;
java.lang.Object v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.LazyValue removedBeans>;
v2 = virtualinvoke v1.<io.quarkus.arc.impl.LazyValue: java.lang.Object get()>();
return v2;
}
public java.util.List getInterceptors()
{
java.util.List v1;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List interceptors>;
return v1;
}
public java.util.List getDecorators()
{
java.util.List v1;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List decorators>;
return v1;
}
public java.util.List getObservers()
{
java.util.List v1;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List observers>;
return v1;
}
io.quarkus.arc.InstanceHandle getResource(java.lang.reflect.Type, java.util.Set)
{
java.util.Iterator v4;
java.util.Set v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.ArrayList v3;
io.quarkus.arc.InstanceHandle v7;
java.lang.reflect.Type v1;
java.lang.Object v6;
boolean v5;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.util.Set;
v3 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.ArrayList resourceProviders>;
v4 = virtualinvoke v3.<java.util.ArrayList: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<io.quarkus.arc.ResourceReferenceProvider: io.quarkus.arc.InstanceHandle get(java.lang.reflect.Type,java.util.Set)>(v1, v2);
if v7 == null goto label1;
return v7;
label2:
return null;
}
private io.quarkus.arc.impl.EventImpl$Notifier notifierOrNull(java.util.Set)
{
io.quarkus.arc.impl.EventImpl$Notifier v2, v4;
java.util.Set v1;
io.quarkus.arc.impl.ArcContainerImpl v0;
boolean v3;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.util.Set;
v2 = staticinvoke <io.quarkus.arc.impl.EventImpl: io.quarkus.arc.impl.EventImpl$Notifier createNotifier(java.lang.Class,java.lang.reflect.Type,java.util.Set,io.quarkus.arc.impl.ArcContainerImpl,boolean,jakarta.enterprise.inject.spi.InjectionPoint)>(class "Ljava/lang/Object;", class "Ljava/lang/Object;", v1, v0, 0, null);
v3 = virtualinvoke v2.<io.quarkus.arc.impl.EventImpl$Notifier: boolean isEmpty()>();
if v3 == 0 goto label1;
v4 = null;
goto label2;
label1:
v4 = v2;
label2:
return v4;
}
private static void addBuiltInBeans(java.util.List)
{
java.util.List v0;
io.quarkus.arc.impl.BeanManagerBean v1;
io.quarkus.arc.impl.InstanceBean v3;
io.quarkus.arc.impl.EventBean v2;
io.quarkus.arc.impl.InjectionPointBean v4;
v0 := @parameter0: java.util.List;
v1 = new io.quarkus.arc.impl.BeanManagerBean;
specialinvoke v1.<io.quarkus.arc.impl.BeanManagerBean: void <init>()>();
interfaceinvoke v0.<java.util.List: boolean add(java.lang.Object)>(v1);
v2 = new io.quarkus.arc.impl.EventBean;
specialinvoke v2.<io.quarkus.arc.impl.EventBean: void <init>()>();
interfaceinvoke v0.<java.util.List: boolean add(java.lang.Object)>(v2);
v3 = <io.quarkus.arc.impl.InstanceBean: io.quarkus.arc.impl.InstanceBean INSTANCE>;
interfaceinvoke v0.<java.util.List: boolean add(java.lang.Object)>(v3);
v4 = new io.quarkus.arc.impl.InjectionPointBean;
specialinvoke v4.<io.quarkus.arc.impl.InjectionPointBean: void <init>()>();
interfaceinvoke v0.<java.util.List: boolean add(java.lang.Object)>(v4);
return;
}
private transient io.quarkus.arc.InstanceHandle instanceHandle(java.lang.reflect.Type, java.lang.'annotation'.Annotation[])
{
io.quarkus.arc.InstanceHandle v4;
java.lang.reflect.Type v1;
io.quarkus.arc.InjectableBean v3;
java.lang.'annotation'.Annotation[] v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
v3 = specialinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.InjectableBean getBean(java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>(v1, v2);
v4 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.InstanceHandle beanInstanceHandle(io.quarkus.arc.InjectableBean,io.quarkus.arc.impl.CreationalContextImpl)>(v3, null);
return v4;
}
static io.quarkus.arc.InstanceHandle beanInstanceHandle(io.quarkus.arc.InjectableBean, io.quarkus.arc.impl.CreationalContextImpl, boolean, java.util.function.Consumer)
{
io.quarkus.arc.InstanceHandle v4;
java.util.function.Consumer v3;
io.quarkus.arc.InjectableBean v0;
io.quarkus.arc.impl.CreationalContextImpl v1;
boolean v2;
v0 := @parameter0: io.quarkus.arc.InjectableBean;
v1 := @parameter1: io.quarkus.arc.impl.CreationalContextImpl;
v2 := @parameter2: boolean;
v3 := @parameter3: java.util.function.Consumer;
v4 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.InstanceHandle beanInstanceHandle(io.quarkus.arc.InjectableBean,io.quarkus.arc.impl.CreationalContextImpl,boolean,java.util.function.Consumer,boolean)>(v0, v1, v2, v3, 0);
return v4;
}
static io.quarkus.arc.InstanceHandle beanInstanceHandle(io.quarkus.arc.InjectableBean, io.quarkus.arc.impl.CreationalContextImpl, boolean, java.util.function.Consumer, boolean)
{
java.lang.Throwable v16;
io.quarkus.arc.impl.CreationalContextImpl v1, v10, v11, v8, v9;
boolean v2, v4, v7;
io.quarkus.arc.impl.EagerInstanceHandle v14;
jakarta.enterprise.inject.spi.InjectionPoint v12, v13;
io.quarkus.arc.InjectableBean v0;
io.quarkus.arc.InstanceHandle v17;
java.util.function.Consumer v3;
java.lang.Class v5, v6;
java.lang.Object v15;
v0 := @parameter0: io.quarkus.arc.InjectableBean;
v1 := @parameter1: io.quarkus.arc.impl.CreationalContextImpl;
v2 := @parameter2: boolean;
v3 := @parameter3: java.util.function.Consumer;
v4 := @parameter4: boolean;
if v0 == null goto label11;
if v1 != null goto label01;
v5 = class "Ljakarta/enterprise/context/Dependent;";
v6 = interfaceinvoke v0.<io.quarkus.arc.InjectableBean: java.lang.Class getScope()>();
v7 = virtualinvoke v5.<java.lang.Object: boolean equals(java.lang.Object)>(v6);
if v7 == 0 goto label01;
v8 = new io.quarkus.arc.impl.CreationalContextImpl;
specialinvoke v8.<io.quarkus.arc.impl.CreationalContextImpl: void <init>(jakarta.enterprise.context.spi.Contextual)>(null);
v1 = v8;
label01:
if v1 == null goto label04;
if v4 == 0 goto label02;
v9 = v1;
goto label03;
label02:
v9 = virtualinvoke v1.<io.quarkus.arc.impl.CreationalContextImpl: io.quarkus.arc.impl.CreationalContextImpl child(jakarta.enterprise.context.spi.Contextual)>(v0);
label03:
v10 = v9;
goto label05;
label04:
v11 = new io.quarkus.arc.impl.CreationalContextImpl;
specialinvoke v11.<io.quarkus.arc.impl.CreationalContextImpl: void <init>(jakarta.enterprise.context.spi.Contextual)>(v0);
v10 = v11;
label05:
v12 = null;
if v2 == 0 goto label06;
v13 = <io.quarkus.arc.impl.CurrentInjectionPointProvider: jakarta.enterprise.inject.spi.InjectionPoint EMPTY>;
v12 = staticinvoke <io.quarkus.arc.impl.InjectionPointProvider: jakarta.enterprise.inject.spi.InjectionPoint set(jakarta.enterprise.inject.spi.InjectionPoint)>(v13);
label06:
v14 = new io.quarkus.arc.impl.EagerInstanceHandle;
v15 = interfaceinvoke v0.<io.quarkus.arc.InjectableBean: java.lang.Object get(jakarta.enterprise.context.spi.CreationalContext)>(v10);
specialinvoke v14.<io.quarkus.arc.impl.EagerInstanceHandle: void <init>(io.quarkus.arc.InjectableBean,java.lang.Object,jakarta.enterprise.context.spi.CreationalContext,jakarta.enterprise.context.spi.CreationalContext,java.util.function.Consumer)>(v0, v15, v10, v1, v3);
label07:
if v2 == 0 goto label08;
staticinvoke <io.quarkus.arc.impl.InjectionPointProvider: jakarta.enterprise.inject.spi.InjectionPoint set(jakarta.enterprise.inject.spi.InjectionPoint)>(v12);
label08:
return v14;
label09:
v16 := @caughtexception;
if v2 == 0 goto label10;
staticinvoke <io.quarkus.arc.impl.InjectionPointProvider: jakarta.enterprise.inject.spi.InjectionPoint set(jakarta.enterprise.inject.spi.InjectionPoint)>(v12);
label10:
throw v16;
label11:
v17 = staticinvoke <io.quarkus.arc.impl.EagerInstanceHandle: io.quarkus.arc.InstanceHandle unavailable()>();
return v17;
catch java.lang.Throwable from label06 to label07 with label09;
}
static io.quarkus.arc.InstanceHandle beanInstanceHandle(io.quarkus.arc.InjectableBean, io.quarkus.arc.impl.CreationalContextImpl)
{
io.quarkus.arc.InjectableBean v0;
io.quarkus.arc.InstanceHandle v2;
io.quarkus.arc.impl.CreationalContextImpl v1;
v0 := @parameter0: io.quarkus.arc.InjectableBean;
v1 := @parameter1: io.quarkus.arc.impl.CreationalContextImpl;
v2 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.InstanceHandle beanInstanceHandle(io.quarkus.arc.InjectableBean,io.quarkus.arc.impl.CreationalContextImpl,boolean,java.util.function.Consumer)>(v0, v1, 1, null);
return v2;
}
private transient io.quarkus.arc.InjectableBean getBean(java.lang.reflect.Type, java.lang.'annotation'.Annotation[])
{
jakarta.enterprise.inject.Default$Literal v5;
java.util.Iterator v12;
io.quarkus.arc.impl.ComputingCache v8;
io.quarkus.arc.impl.ArcContainerImpl$Resolvable v7;
java.lang.'annotation'.Annotation[] v2, v4;
io.quarkus.arc.impl.ArcContainerImpl v0;
io.quarkus.arc.impl.Qualifiers v6;
java.lang.reflect.Type v1;
int v11, v3;
java.lang.Object v13, v9;
boolean v10;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
if v2 == null goto label1;
v3 = lengthof v2;
if v3 != 0 goto label2;
label1:
v4 = newarray (java.lang.'annotation'.Annotation)[1];
v5 = <jakarta.enterprise.inject.Default$Literal: jakarta.enterprise.inject.Default$Literal INSTANCE>;
v4[0] = v5;
v2 = v4;
goto label3;
label2:
v6 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Qualifiers registeredQualifiers>;
virtualinvoke v6.<io.quarkus.arc.impl.Qualifiers: void verify(java.lang.'annotation'.Annotation[])>(v2);
label3:
v7 = new io.quarkus.arc.impl.ArcContainerImpl$Resolvable;
specialinvoke v7.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: void <init>(java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>(v1, v2);
v8 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.ComputingCache resolved>;
v9 = virtualinvoke v8.<io.quarkus.arc.impl.ComputingCache: java.lang.Object getValue(java.lang.Object)>(v7);
v10 = interfaceinvoke v9.<java.util.Set: boolean isEmpty()>();
if v10 == 0 goto label4;
virtualinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: void scanRemovedBeans(io.quarkus.arc.impl.ArcContainerImpl$Resolvable)>(v7);
label4:
v11 = interfaceinvoke v9.<java.util.Set: int size()>();
if v11 != 1 goto label5;
v12 = interfaceinvoke v9.<java.util.Set: java.util.Iterator iterator()>();
v13 = interfaceinvoke v12.<java.util.Iterator: java.lang.Object next()>();
label5:
return v13;
}
transient java.util.Set getBeans(java.lang.reflect.Type, java.lang.'annotation'.Annotation[])
{
jakarta.enterprise.inject.spi.Bean[] v12;
jakarta.enterprise.inject.Default$Literal v8;
java.lang.Object[] v13;
java.util.Set v14;
io.quarkus.arc.impl.ArcContainerImpl$Resolvable v10;
java.lang.'annotation'.Annotation[] v2, v7;
java.lang.IllegalArgumentException v4;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.List v11;
io.quarkus.arc.impl.Qualifiers v9;
java.lang.reflect.Type v1;
int v6;
java.lang.String v5;
boolean v3;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
v3 = v1 instanceof java.lang.reflect.TypeVariable;
if v3 == 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The given type is a type variable: \u0001");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
if v2 == null goto label2;
v6 = lengthof v2;
if v6 != 0 goto label3;
label2:
v7 = newarray (java.lang.'annotation'.Annotation)[1];
v8 = <jakarta.enterprise.inject.Default$Literal: jakarta.enterprise.inject.Default$Literal INSTANCE>;
v7[0] = v8;
v2 = v7;
goto label4;
label3:
v9 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Qualifiers registeredQualifiers>;
virtualinvoke v9.<io.quarkus.arc.impl.Qualifiers: void verify(java.lang.'annotation'.Annotation[])>(v2);
label4:
v10 = new io.quarkus.arc.impl.ArcContainerImpl$Resolvable;
specialinvoke v10.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: void <init>(java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>(v1, v2);
v11 = virtualinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List getMatchingBeans(io.quarkus.arc.impl.ArcContainerImpl$Resolvable)>(v10);
v12 = newarray (jakarta.enterprise.inject.spi.Bean)[0];
v13 = interfaceinvoke v11.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v12);
v14 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object[])>(v13);
return v14;
}
java.util.Set getBeans(java.lang.String)
{
java.util.HashSet v2;
java.util.List v3;
java.lang.String v1;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.String;
v2 = new java.util.HashSet;
v3 = virtualinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List getMatchingBeans(java.lang.String)>(v1);
specialinvoke v2.<java.util.HashSet: void <init>(java.util.Collection)>(v3);
return v2;
}
boolean isScope(java.lang.Class)
{
java.util.Iterator v6;
io.quarkus.arc.impl.Contexts v4;
java.util.Set v5;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.lang.Class v1;
java.lang.Object v8;
boolean v2, v3, v7, v9;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v1.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Ljakarta/inject/Scope;");
if v2 != 0 goto label1;
v3 = virtualinvoke v1.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Ljakarta/enterprise/context/NormalScope;");
if v3 == 0 goto label2;
label1:
return 1;
label2:
v4 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Contexts contexts>;
v5 = v4.<io.quarkus.arc.impl.Contexts: java.util.Set scopes>;
v6 = interfaceinvoke v5.<java.util.Set: java.util.Iterator iterator()>();
label3:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label4;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = virtualinvoke v8.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v9 == 0 goto label3;
return 1;
label4:
return 0;
}
boolean isNormalScope(java.lang.Class)
{
java.util.Iterator v5;
io.quarkus.arc.impl.Contexts v3;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.List v4;
java.lang.Class v1;
java.lang.Object v7;
boolean v2, v6, v8;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v1.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Ljakarta/enterprise/context/NormalScope;");
if v2 == 0 goto label1;
return 1;
label1:
v3 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Contexts contexts>;
v4 = virtualinvoke v3.<io.quarkus.arc.impl.Contexts: java.util.List getContexts(java.lang.Class)>(v1);
v5 = interfaceinvoke v4.<java.util.List: java.util.Iterator iterator()>();
label2:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label3;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<io.quarkus.arc.InjectableContext: boolean isNormal()>();
if v8 == 0 goto label2;
return 1;
label3:
return 0;
}
public java.util.Set resolve(io.quarkus.arc.impl.ArcContainerImpl$Resolvable)
{
java.util.List v2;
java.util.Set v3;
io.quarkus.arc.impl.ArcContainerImpl$Resolvable v1;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: io.quarkus.arc.impl.ArcContainerImpl$Resolvable;
v2 = virtualinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List getMatchingBeans(io.quarkus.arc.impl.ArcContainerImpl$Resolvable)>(v1);
v3 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl: java.util.Set resolve(java.util.List)>(v2);
return v3;
}
public java.util.Set resolve(java.lang.String)
{
java.util.List v2;
java.util.Set v3;
java.lang.String v1;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List getMatchingBeans(java.lang.String)>(v1);
v3 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl: java.util.Set resolve(java.util.List)>(v2);
return v3;
}
public io.quarkus.arc.InjectableBean findById(java.lang.String)
{
io.quarkus.arc.impl.ArcContainerImpl v0;
java.lang.String v1, v12, v18, v6;
boolean v10, v13, v16, v19, v4, v7;
java.util.Iterator v15, v3, v9;
java.util.List v14, v2, v8;
java.lang.Object v11, v17, v5;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List beans>;
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<io.quarkus.arc.InjectableBean: java.lang.String getIdentifier()>();
v7 = virtualinvoke v6.<java.lang.String: boolean equals(java.lang.Object)>(v1);
if v7 == 0 goto label1;
return v5;
label2:
v8 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List interceptors>;
v9 = interfaceinvoke v8.<java.util.List: java.util.Iterator iterator()>();
label3:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label4;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
v12 = interfaceinvoke v11.<io.quarkus.arc.InjectableInterceptor: java.lang.String getIdentifier()>();
v13 = virtualinvoke v12.<java.lang.String: boolean equals(java.lang.Object)>(v1);
if v13 == 0 goto label3;
return v11;
label4:
v14 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List decorators>;
v15 = interfaceinvoke v14.<java.util.List: java.util.Iterator iterator()>();
label5:
v16 = interfaceinvoke v15.<java.util.Iterator: boolean hasNext()>();
if v16 == 0 goto label6;
v17 = interfaceinvoke v15.<java.util.Iterator: java.lang.Object next()>();
v18 = interfaceinvoke v17.<io.quarkus.arc.InjectableDecorator: java.lang.String getIdentifier()>();
v19 = virtualinvoke v18.<java.lang.String: boolean equals(java.lang.Object)>(v1);
if v19 == 0 goto label5;
return v17;
label6:
return null;
}
static jakarta.enterprise.inject.spi.Bean resolve(java.util.Set)
{
jakarta.enterprise.inject.spi.Bean v26;
java.util.ArrayList v8;
java.util.HashSet v18;
int v13, v2, v21, v9;
java.lang.String v15, v23;
boolean v1, v11, v7;
java.util.Iterator v10, v16, v24, v3;
java.util.function.Predicate v19, v20, v6;
java.util.Set v0, v12;
jakarta.enterprise.inject.AmbiguousResolutionException v14, v22;
java.util.stream.Stream v5;
java.lang.Object v17, v25, v4;
v0 := @parameter0: java.util.Set;
if v0 == null goto label1;
v1 = interfaceinvoke v0.<java.util.Set: boolean isEmpty()>();
if v1 == 0 goto label2;
label1:
return null;
label2:
v2 = interfaceinvoke v0.<java.util.Set: int size()>();
if v2 != 1 goto label3;
v3 = interfaceinvoke v0.<java.util.Set: java.util.Iterator iterator()>();
v4 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
return v4;
label3:
v5 = interfaceinvoke v0.<java.util.Set: java.util.stream.Stream stream()>();
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(class "Lio/quarkus/arc/InjectableBean;");
v6 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl$isInstance__2561: java.util.function.Predicate bootstrap$(java.lang.Class)>(class "Lio/quarkus/arc/InjectableBean;");
v7 = interfaceinvoke v5.<java.util.stream.Stream: boolean allMatch(java.util.function.Predicate)>(v6);
if v7 == 0 goto label7;
v8 = new java.util.ArrayList;
v9 = interfaceinvoke v0.<java.util.Set: int size()>();
specialinvoke v8.<java.util.ArrayList: void <init>(int)>(v9);
v10 = interfaceinvoke v0.<java.util.Set: java.util.Iterator iterator()>();
label4:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label5;
interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v8.<java.util.List: boolean add(java.lang.Object)>(v26);
goto label4;
label5:
v12 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl: java.util.Set resolve(java.util.List)>(v8);
v13 = interfaceinvoke v12.<java.util.Set: int size()>();
if v13 == 1 goto label6;
v14 = new jakarta.enterprise.inject.AmbiguousResolutionException;
v15 = virtualinvoke v12.<java.lang.Object: java.lang.String toString()>();
specialinvoke v14.<jakarta.enterprise.inject.AmbiguousResolutionException: void <init>(java.lang.String)>(v15);
throw v14;
label6:
v16 = interfaceinvoke v12.<java.util.Set: java.util.Iterator iterator()>();
v17 = interfaceinvoke v16.<java.util.Iterator: java.lang.Object next()>();
return v17;
label7:
v18 = new java.util.HashSet;
specialinvoke v18.<java.util.HashSet: void <init>(java.util.Collection)>(v0);
v19 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl$isAlternative__2562: java.util.function.Predicate bootstrap$()>();
v20 = staticinvoke <java.util.function.Predicate: java.util.function.Predicate not(java.util.function.Predicate)>(v19);
interfaceinvoke v18.<java.util.Set: boolean removeIf(java.util.function.Predicate)>(v20);
v21 = interfaceinvoke v18.<java.util.Set: int size()>();
if v21 == 1 goto label8;
v22 = new jakarta.enterprise.inject.AmbiguousResolutionException;
v23 = virtualinvoke v18.<java.lang.Object: java.lang.String toString()>();
specialinvoke v22.<jakarta.enterprise.inject.AmbiguousResolutionException: void <init>(java.lang.String)>(v23);
throw v22;
label8:
v24 = interfaceinvoke v18.<java.util.Set: java.util.Iterator iterator()>();
v25 = interfaceinvoke v24.<java.util.Iterator: java.lang.Object next()>();
return v25;
}
private static java.util.Set resolve(java.util.List)
{
java.lang.Integer v23;
java.util.ArrayList v13, v6;
int v10, v18, v25, v3;
boolean v1, v16, v8;
java.util.function.Predicate v14, v15, v24, v7;
java.util.Set v12, v17, v2, v20, v27, v28, v5, v9;
java.util.List v0;
java.lang.Object v11, v19, v22, v26, v4;
java.util.Comparator v21;
v0 := @parameter0: java.util.List;
v1 = interfaceinvoke v0.<java.util.List: boolean isEmpty()>();
if v1 == 0 goto label1;
v2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
return v2;
label1:
v3 = interfaceinvoke v0.<java.util.List: int size()>();
if v3 != 1 goto label2;
v4 = interfaceinvoke v0.<java.util.List: java.lang.Object get(int)>(0);
v5 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object)>(v4);
return v5;
label2:
v6 = new java.util.ArrayList;
specialinvoke v6.<java.util.ArrayList: void <init>(java.util.Collection)>(v0);
v7 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl$isDefaultBean__2563: java.util.function.Predicate bootstrap$()>();
interfaceinvoke v6.<java.util.List: boolean removeIf(java.util.function.Predicate)>(v7);
v8 = interfaceinvoke v6.<java.util.List: boolean isEmpty()>();
if v8 == 0 goto label3;
v9 = staticinvoke <java.util.Set: java.util.Set copyOf(java.util.Collection)>(v0);
return v9;
label3:
v10 = interfaceinvoke v6.<java.util.List: int size()>();
if v10 != 1 goto label4;
v11 = interfaceinvoke v6.<java.util.List: java.lang.Object get(int)>(0);
v12 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object)>(v11);
return v12;
label4:
v13 = new java.util.ArrayList;
specialinvoke v13.<java.util.ArrayList: void <init>(java.util.Collection)>(v6);
v14 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl$isAlternativeOrDeclaredOnAlternative__2564: java.util.function.Predicate bootstrap$()>();
v15 = staticinvoke <java.util.function.Predicate: java.util.function.Predicate not(java.util.function.Predicate)>(v14);
interfaceinvoke v13.<java.util.List: boolean removeIf(java.util.function.Predicate)>(v15);
v16 = interfaceinvoke v13.<java.util.List: boolean isEmpty()>();
if v16 == 0 goto label5;
v17 = staticinvoke <java.util.Set: java.util.Set copyOf(java.util.Collection)>(v6);
return v17;
label5:
v18 = interfaceinvoke v13.<java.util.List: int size()>();
if v18 != 1 goto label6;
v19 = interfaceinvoke v13.<java.util.List: java.lang.Object get(int)>(0);
v20 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object)>(v19);
return v20;
label6:
v21 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl$compareAlternativeBeans__2565: java.util.Comparator bootstrap$()>();
interfaceinvoke v13.<java.util.List: void sort(java.util.Comparator)>(v21);
v22 = interfaceinvoke v13.<java.util.List: java.lang.Object get(int)>(0);
v23 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl: java.lang.Integer getAlternativePriority(io.quarkus.arc.InjectableBean)>(v22);
v24 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl$lambda_resolve_0__2566: java.util.function.Predicate bootstrap$(java.lang.Integer)>(v23);
interfaceinvoke v13.<java.util.List: boolean removeIf(java.util.function.Predicate)>(v24);
v25 = interfaceinvoke v13.<java.util.List: int size()>();
if v25 != 1 goto label7;
v26 = interfaceinvoke v13.<java.util.List: java.lang.Object get(int)>(0);
v27 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object)>(v26);
return v27;
label7:
v28 = staticinvoke <java.util.Set: java.util.Set copyOf(java.util.Collection)>(v13);
return v28;
}
public static boolean isAlternativeOrDeclaredOnAlternative(io.quarkus.arc.InjectableBean)
{
io.quarkus.arc.InjectableBean v0, v2, v3;
java.lang.Integer v1, v4;
boolean v5;
v0 := @parameter0: io.quarkus.arc.InjectableBean;
v1 = interfaceinvoke v0.<io.quarkus.arc.InjectableBean: java.lang.Integer getAlternativePriority()>();
if v1 != null goto label1;
v2 = interfaceinvoke v0.<io.quarkus.arc.InjectableBean: io.quarkus.arc.InjectableBean getDeclaringBean()>();
if v2 == null goto label2;
v3 = interfaceinvoke v0.<io.quarkus.arc.InjectableBean: io.quarkus.arc.InjectableBean getDeclaringBean()>();
v4 = interfaceinvoke v3.<io.quarkus.arc.InjectableBean: java.lang.Integer getAlternativePriority()>();
if v4 == null goto label2;
label1:
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
return v5;
}
private static java.lang.Integer getAlternativePriority(io.quarkus.arc.InjectableBean)
{
io.quarkus.arc.InjectableBean v0, v2, v3;
java.lang.Integer v1;
v0 := @parameter0: io.quarkus.arc.InjectableBean;
v1 = interfaceinvoke v0.<io.quarkus.arc.InjectableBean: java.lang.Integer getAlternativePriority()>();
if v1 != null goto label1;
v2 = interfaceinvoke v0.<io.quarkus.arc.InjectableBean: io.quarkus.arc.InjectableBean getDeclaringBean()>();
if v2 == null goto label1;
v3 = interfaceinvoke v0.<io.quarkus.arc.InjectableBean: io.quarkus.arc.InjectableBean getDeclaringBean()>();
v1 = interfaceinvoke v3.<io.quarkus.arc.InjectableBean: java.lang.Integer getAlternativePriority()>();
label1:
return v1;
}
java.util.List getMatchingBeans(io.quarkus.arc.impl.ArcContainerImpl$Resolvable)
{
java.util.Iterator v4;
io.quarkus.arc.impl.ArcContainerImpl$Resolvable v1;
java.lang.'annotation'.Annotation[] v8;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.ArrayList v2;
java.util.List v3;
java.lang.reflect.Type v7;
java.lang.Object v6;
boolean v5, v9;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: io.quarkus.arc.impl.ArcContainerImpl$Resolvable;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List beans>;
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = v1.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.reflect.Type requiredType>;
v8 = v1.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.'annotation'.Annotation[] qualifiers>;
v9 = specialinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: boolean matches(io.quarkus.arc.InjectableBean,java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>(v6, v7, v8);
if v9 == 0 goto label1;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v6);
goto label1;
label2:
return v2;
}
java.util.List getMatchingRemovedBeans(io.quarkus.arc.impl.ArcContainerImpl$Resolvable)
{
io.quarkus.arc.impl.LazyValue v3;
java.util.Iterator v5;
java.util.Set v8, v9;
io.quarkus.arc.impl.ArcContainerImpl$Resolvable v1;
java.lang.'annotation'.Annotation[] v11;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.ArrayList v2;
java.lang.reflect.Type v10;
java.lang.Object v4, v7;
boolean v12, v6;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: io.quarkus.arc.impl.ArcContainerImpl$Resolvable;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.LazyValue removedBeans>;
v4 = virtualinvoke v3.<io.quarkus.arc.impl.LazyValue: java.lang.Object get()>();
v5 = interfaceinvoke v4.<java.util.List: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<io.quarkus.arc.RemovedBean: java.util.Set getTypes()>();
v9 = interfaceinvoke v7.<io.quarkus.arc.RemovedBean: java.util.Set getQualifiers()>();
v10 = v1.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.reflect.Type requiredType>;
v11 = v1.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.'annotation'.Annotation[] qualifiers>;
v12 = specialinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: boolean matches(java.util.Set,java.util.Set,java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>(v8, v9, v10, v11);
if v12 == 0 goto label1;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v7);
goto label1;
label2:
return v2;
}
transient void scanRemovedBeans(java.lang.reflect.Type, java.lang.'annotation'.Annotation[])
{
java.lang.reflect.Type v1;
io.quarkus.arc.impl.ArcContainerImpl$Resolvable v3;
java.lang.'annotation'.Annotation[] v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
v3 = new io.quarkus.arc.impl.ArcContainerImpl$Resolvable;
specialinvoke v3.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: void <init>(java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>(v1, v2);
virtualinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: void scanRemovedBeans(io.quarkus.arc.impl.ArcContainerImpl$Resolvable)>(v3);
return;
}
void scanRemovedBeans(io.quarkus.arc.impl.ArcContainerImpl$Resolvable)
{
java.lang.Object[] v8;
org.jboss.logging.Logger v18, v20, v7;
java.lang.StackWalker v4;
java.lang.'annotation'.Annotation[] v15;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.function.Function v10, v21, v5;
java.lang.String v16, v23;
java.util.stream.Collector v12;
boolean v19, v3;
io.quarkus.arc.impl.ArcContainerImpl$Resolvable v1;
java.util.List v2;
java.util.stream.Stream v11, v9;
java.lang.reflect.Type v14;
java.lang.Object v13, v17, v22, v6;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: io.quarkus.arc.impl.ArcContainerImpl$Resolvable;
v2 = virtualinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List getMatchingRemovedBeans(io.quarkus.arc.impl.ArcContainerImpl$Resolvable)>(v1);
v3 = interfaceinvoke v2.<java.util.List: boolean isEmpty()>();
if v3 != 0 goto label3;
v4 = staticinvoke <java.lang.StackWalker: java.lang.StackWalker getInstance()>();
v5 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl$findCaller__2567: java.util.function.Function bootstrap$(io.quarkus.arc.impl.ArcContainerImpl)>(v0);
v6 = virtualinvoke v4.<java.lang.StackWalker: java.lang.Object walk(java.util.function.Function)>(v5);
v7 = <io.quarkus.arc.impl.ArcContainerImpl: org.jboss.logging.Logger LOGGER>;
v8 = newarray (java.lang.Object)[5];
v8[0] = "====================";
v9 = interfaceinvoke v2.<java.util.List: java.util.stream.Stream stream()>();
v10 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl$toString__2568: java.util.function.Function bootstrap$()>();
v11 = interfaceinvoke v9.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v10);
v12 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>("\n\t- ");
v13 = interfaceinvoke v11.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v12);
v8[1] = v13;
v14 = v1.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.reflect.Type requiredType>;
v8[2] = v14;
v15 = v1.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: java.lang.'annotation'.Annotation[] qualifiers>;
v16 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(v15);
v8[3] = v16;
if v6 == null goto label1;
v17 = v6;
goto label2;
label1:
v17 = "n/a";
label2:
v8[4] = v17;
virtualinvoke v7.<org.jboss.logging.Logger: void warnf(java.lang.String,java.lang.Object[])>("\n%1$s%1$s%1$s%1$s\nCDI: programmatic lookup problem detected\n-----------------------------------------\nAt least one bean matched the required type and qualifiers but was marked as unused and removed during build\n\nStack frame: %5$s\nRequired type: %3$s\nRequired qualifiers: %4$s\nRemoved beans:\n\t- %2$s\nSolutions:\n\t- Application developers can eliminate false positives via the @Unremovable annotation\n\t- Extensions can eliminate false positives via build items, e.g. using the UnremovableBeanBuildItem\n\t- See also https://quarkus.io/guides/cdi-reference#remove_unused_beans\n\t- Enable the DEBUG log level to see the full stack trace\n%1$s%1$s%1$s%1$s\n", v8);
v18 = <io.quarkus.arc.impl.ArcContainerImpl: org.jboss.logging.Logger LOGGER>;
v19 = virtualinvoke v18.<org.jboss.logging.Logger: boolean isDebugEnabled()>();
if v19 == 0 goto label3;
v20 = <io.quarkus.arc.impl.ArcContainerImpl: org.jboss.logging.Logger LOGGER>;
v21 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl$collectStack__2569: java.util.function.Function bootstrap$(io.quarkus.arc.impl.ArcContainerImpl)>(v0);
v22 = virtualinvoke v4.<java.lang.StackWalker: java.lang.Object walk(java.util.function.Function)>(v21);
v23 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v22) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\nCDI: programmatic lookup stack trace:\n\u0001");
virtualinvoke v20.<org.jboss.logging.Logger: void debug(java.lang.Object)>(v23);
label3:
return;
}
public java.lang.StackWalker$StackFrame findCaller(java.util.stream.Stream)
{
java.util.stream.Stream v1, v3;
java.util.function.Predicate v2;
java.util.Optional v4;
java.lang.Object v5;
io.quarkus.arc.impl.ArcContainerImpl v0;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.util.stream.Stream;
v2 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl$isCallerFrame__2570: java.util.function.Predicate bootstrap$(io.quarkus.arc.impl.ArcContainerImpl)>(v0);
v3 = interfaceinvoke v1.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v2);
v4 = interfaceinvoke v3.<java.util.stream.Stream: java.util.Optional findFirst()>();
v5 = virtualinvoke v4.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);
return v5;
}
public java.lang.String collectStack(java.util.stream.Stream)
{
java.util.stream.Stream v1, v3;
java.lang.Object v5;
java.util.stream.Collector v4;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.function.Function v2;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.util.stream.Stream;
v2 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl$toString__2571: java.util.function.Function bootstrap$()>();
v3 = interfaceinvoke v1.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v2);
v4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>("\n\t");
v5 = interfaceinvoke v3.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v4);
return v5;
}
public boolean isCallerFrame(java.lang.StackWalker$StackFrame)
{
java.lang.StackWalker$StackFrame v1;
java.lang.String v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
boolean v3, v4;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.StackWalker$StackFrame;
v2 = interfaceinvoke v1.<java.lang.StackWalker$StackFrame: java.lang.String getClassName()>();
v3 = virtualinvoke v2.<java.lang.String: boolean startsWith(java.lang.String)>("io.quarkus.arc.impl");
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
java.util.List getMatchingBeans(java.lang.String)
{
java.util.Iterator v4;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.ArrayList v2;
java.util.List v3;
java.lang.Object v6;
java.lang.String v1, v7;
boolean v5, v8;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.String;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List beans>;
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<io.quarkus.arc.InjectableBean: java.lang.String getName()>();
v8 = virtualinvoke v1.<java.lang.String: boolean equals(java.lang.Object)>(v7);
if v8 == 0 goto label1;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v6);
goto label1;
label2:
return v2;
}
public static int compareAlternativeBeans(io.quarkus.arc.InjectableBean, io.quarkus.arc.InjectableBean)
{
io.quarkus.arc.InjectableBean v0, v1, v3, v4, v6, v7;
java.lang.Integer v2, v5;
int v8;
v0 := @parameter0: io.quarkus.arc.InjectableBean;
v1 := @parameter1: io.quarkus.arc.InjectableBean;
v2 = interfaceinvoke v1.<io.quarkus.arc.InjectableBean: java.lang.Integer getAlternativePriority()>();
if v2 != null goto label1;
v3 = interfaceinvoke v1.<io.quarkus.arc.InjectableBean: io.quarkus.arc.InjectableBean getDeclaringBean()>();
if v3 == null goto label1;
v4 = interfaceinvoke v1.<io.quarkus.arc.InjectableBean: io.quarkus.arc.InjectableBean getDeclaringBean()>();
v2 = interfaceinvoke v4.<io.quarkus.arc.InjectableBean: java.lang.Integer getAlternativePriority()>();
label1:
v5 = interfaceinvoke v0.<io.quarkus.arc.InjectableBean: java.lang.Integer getAlternativePriority()>();
if v5 != null goto label2;
v6 = interfaceinvoke v0.<io.quarkus.arc.InjectableBean: io.quarkus.arc.InjectableBean getDeclaringBean()>();
if v6 == null goto label2;
v7 = interfaceinvoke v0.<io.quarkus.arc.InjectableBean: io.quarkus.arc.InjectableBean getDeclaringBean()>();
v5 = interfaceinvoke v7.<io.quarkus.arc.InjectableBean: java.lang.Integer getAlternativePriority()>();
label2:
v8 = virtualinvoke v2.<java.lang.Integer: int compareTo(java.lang.Integer)>(v5);
return v8;
}
java.util.List resolveObservers(java.lang.reflect.Type, java.util.Set)
{
io.quarkus.arc.impl.EventTypeAssignabilityRules v14;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.ArrayList v9;
io.quarkus.arc.impl.Qualifiers v19, v3;
boolean v12, v16, v18, v21, v5;
java.util.Iterator v11;
java.util.Set v17, v2, v20, v8;
io.quarkus.arc.impl.HierarchyDiscovery v7;
java.util.List v10, v4, v6;
java.lang.reflect.Type v1, v15;
java.lang.Object v13;
java.util.Comparator v22;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.util.Set;
v3 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Qualifiers registeredQualifiers>;
virtualinvoke v3.<io.quarkus.arc.impl.Qualifiers: void verify(java.util.Collection)>(v2);
v4 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List observers>;
v5 = interfaceinvoke v4.<java.util.List: boolean isEmpty()>();
if v5 == 0 goto label1;
v6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v6;
label1:
v7 = new io.quarkus.arc.impl.HierarchyDiscovery;
specialinvoke v7.<io.quarkus.arc.impl.HierarchyDiscovery: void <init>(java.lang.reflect.Type)>(v1);
v8 = virtualinvoke v7.<io.quarkus.arc.impl.HierarchyDiscovery: java.util.Set getTypeClosure()>();
v9 = new java.util.ArrayList;
specialinvoke v9.<java.util.ArrayList: void <init>()>();
v10 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List observers>;
v11 = interfaceinvoke v10.<java.util.List: java.util.Iterator iterator()>();
label2:
v12 = interfaceinvoke v11.<java.util.Iterator: boolean hasNext()>();
if v12 == 0 goto label4;
v13 = interfaceinvoke v11.<java.util.Iterator: java.lang.Object next()>();
v14 = staticinvoke <io.quarkus.arc.impl.EventTypeAssignabilityRules: io.quarkus.arc.impl.EventTypeAssignabilityRules instance()>();
v15 = interfaceinvoke v13.<io.quarkus.arc.InjectableObserverMethod: java.lang.reflect.Type getObservedType()>();
v16 = virtualinvoke v14.<io.quarkus.arc.impl.EventTypeAssignabilityRules: boolean matches(java.lang.reflect.Type,java.util.Set)>(v15, v8);
if v16 == 0 goto label2;
v17 = interfaceinvoke v13.<io.quarkus.arc.InjectableObserverMethod: java.util.Set getObservedQualifiers()>();
v18 = interfaceinvoke v17.<java.util.Set: boolean isEmpty()>();
if v18 != 0 goto label3;
v19 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Qualifiers registeredQualifiers>;
v20 = interfaceinvoke v13.<io.quarkus.arc.InjectableObserverMethod: java.util.Set getObservedQualifiers()>();
v21 = virtualinvoke v19.<io.quarkus.arc.impl.Qualifiers: boolean isSubset(java.util.Set,java.util.Set)>(v20, v2);
if v21 == 0 goto label2;
label3:
interfaceinvoke v9.<java.util.List: boolean add(java.lang.Object)>(v13);
goto label2;
label4:
v22 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl$compare__2572: java.util.Comparator bootstrap$()>();
interfaceinvoke v9.<java.util.List: void sort(java.util.Comparator)>(v22);
return v9;
}
transient java.util.List resolveInterceptors(jakarta.enterprise.inject.spi.InterceptionType, java.lang.'annotation'.Annotation[])
{
jakarta.enterprise.inject.spi.InterceptionType v1;
java.lang.'annotation'.Annotation[] v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.ArrayList v10, v9;
int v11, v12, v6;
boolean v19, v21, v22, v4;
java.util.Iterator v18;
java.util.Set v16;
java.lang.IllegalArgumentException v7;
java.util.List v17, v3, v5;
io.quarkus.arc.impl.InterceptorBindings v14, v8;
java.lang.'annotation'.Annotation v13;
java.lang.Class v15;
java.lang.Object v20;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: jakarta.enterprise.inject.spi.InterceptionType;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
v3 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List interceptors>;
v4 = interfaceinvoke v3.<java.util.List: boolean isEmpty()>();
if v4 == 0 goto label1;
v5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v5;
label1:
v6 = lengthof v2;
if v6 != 0 goto label2;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No interceptor bindings");
throw v7;
label2:
v8 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.InterceptorBindings registeredInterceptorBindings>;
virtualinvoke v8.<io.quarkus.arc.impl.InterceptorBindings: void verify(java.lang.'annotation'.Annotation[])>(v2);
v9 = new java.util.ArrayList;
specialinvoke v9.<java.util.ArrayList: void <init>()>();
v10 = new java.util.ArrayList;
specialinvoke v10.<java.util.ArrayList: void <init>()>();
v11 = lengthof v2;
v12 = 0;
label3:
if v12 >= v11 goto label5;
v13 = v2[v12];
interfaceinvoke v10.<java.util.List: boolean add(java.lang.Object)>(v13);
v14 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.InterceptorBindings registeredInterceptorBindings>;
v15 = interfaceinvoke v13.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
v16 = virtualinvoke v14.<io.quarkus.arc.impl.InterceptorBindings: java.util.Set getTransitive(java.lang.Class)>(v15);
if v16 == null goto label4;
interfaceinvoke v10.<java.util.List: boolean addAll(java.util.Collection)>(v16);
label4:
v12 = v12 + 1;
goto label3;
label5:
v17 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List interceptors>;
v18 = interfaceinvoke v17.<java.util.List: java.util.Iterator iterator()>();
label6:
v19 = interfaceinvoke v18.<java.util.Iterator: boolean hasNext()>();
if v19 == 0 goto label7;
v20 = interfaceinvoke v18.<java.util.Iterator: java.lang.Object next()>();
v21 = interfaceinvoke v20.<io.quarkus.arc.InjectableInterceptor: boolean intercepts(jakarta.enterprise.inject.spi.InterceptionType)>(v1);
if v21 == 0 goto label6;
v22 = specialinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: boolean hasAllInterceptionBindings(io.quarkus.arc.InjectableInterceptor,java.lang.Iterable)>(v20, v10);
if v22 == 0 goto label6;
interfaceinvoke v9.<java.util.List: boolean add(java.lang.Object)>(v20);
goto label6;
label7:
return v9;
}
transient java.util.List resolveDecorators(java.util.Set, java.lang.'annotation'.Annotation[])
{
java.lang.'annotation'.Annotation[] v10, v2;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.ArrayList v13;
io.quarkus.arc.impl.Qualifiers v12;
int v9;
boolean v16, v21, v4, v7;
jakarta.enterprise.inject.Default$Literal v11;
java.util.Iterator v15;
java.util.Set v1, v19, v20;
java.lang.IllegalArgumentException v8;
java.util.List v14, v3, v5;
java.lang.reflect.Type v18;
java.lang.Object v17, v6;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.util.Set;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
v3 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List decorators>;
v4 = interfaceinvoke v3.<java.util.List: boolean isEmpty()>();
if v4 == 0 goto label1;
v5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v5;
label1:
v6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(v1);
v7 = interfaceinvoke v6.<java.util.Set: boolean isEmpty()>();
if v7 == 0 goto label2;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The set of bean types must not be empty");
throw v8;
label2:
if v2 == null goto label3;
v9 = lengthof v2;
if v9 != 0 goto label4;
label3:
v10 = newarray (java.lang.'annotation'.Annotation)[1];
v11 = <jakarta.enterprise.inject.Default$Literal: jakarta.enterprise.inject.Default$Literal INSTANCE>;
v10[0] = v11;
v2 = v10;
goto label5;
label4:
v12 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Qualifiers registeredQualifiers>;
virtualinvoke v12.<io.quarkus.arc.impl.Qualifiers: void verify(java.lang.'annotation'.Annotation[])>(v2);
label5:
v13 = new java.util.ArrayList;
specialinvoke v13.<java.util.ArrayList: void <init>()>();
v14 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List decorators>;
v15 = interfaceinvoke v14.<java.util.List: java.util.Iterator iterator()>();
label6:
v16 = interfaceinvoke v15.<java.util.Iterator: boolean hasNext()>();
if v16 == 0 goto label7;
v17 = interfaceinvoke v15.<java.util.Iterator: java.lang.Object next()>();
v18 = interfaceinvoke v17.<io.quarkus.arc.InjectableDecorator: java.lang.reflect.Type getDelegateType()>();
v19 = interfaceinvoke v17.<io.quarkus.arc.InjectableDecorator: java.util.Set getDelegateQualifiers()>();
v20 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object[])>(v2);
v21 = specialinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: boolean decoratorMatches(java.lang.reflect.Type,java.util.Set,java.util.Set,java.util.Set)>(v18, v19, v1, v20);
if v21 == 0 goto label6;
interfaceinvoke v13.<java.util.List: boolean add(java.lang.Object)>(v17);
goto label6;
label7:
return v13;
}
private boolean hasAllInterceptionBindings(io.quarkus.arc.InjectableInterceptor, java.lang.Iterable)
{
java.util.Iterator v4;
java.util.Set v3;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.lang.Iterable v2;
io.quarkus.arc.impl.Qualifiers v7;
java.lang.Object v6;
boolean v5, v8;
io.quarkus.arc.InjectableInterceptor v1;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: io.quarkus.arc.InjectableInterceptor;
v2 := @parameter1: java.lang.Iterable;
v3 = interfaceinvoke v1.<io.quarkus.arc.InjectableInterceptor: java.util.Set getInterceptorBindings()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Qualifiers registeredQualifiers>;
v8 = virtualinvoke v7.<io.quarkus.arc.impl.Qualifiers: boolean hasQualifier(java.lang.Iterable,java.lang.'annotation'.Annotation)>(v2, v6);
if v8 != 0 goto label1;
return 0;
label2:
return 1;
}
transient java.util.Set getResolvedBeans(java.lang.reflect.Type, java.lang.'annotation'.Annotation[])
{
jakarta.enterprise.inject.Default$Literal v5;
io.quarkus.arc.impl.ComputingCache v7;
io.quarkus.arc.impl.ArcContainerImpl$Resolvable v8;
java.lang.'annotation'.Annotation[] v2, v4;
io.quarkus.arc.impl.ArcContainerImpl v0;
io.quarkus.arc.impl.Qualifiers v6;
java.lang.reflect.Type v1;
int v3;
java.lang.Object v9;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
if v2 == null goto label1;
v3 = lengthof v2;
if v3 != 0 goto label2;
label1:
v4 = newarray (java.lang.'annotation'.Annotation)[1];
v5 = <jakarta.enterprise.inject.Default$Literal: jakarta.enterprise.inject.Default$Literal INSTANCE>;
v4[0] = v5;
v2 = v4;
goto label3;
label2:
v6 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Qualifiers registeredQualifiers>;
virtualinvoke v6.<io.quarkus.arc.impl.Qualifiers: void verify(java.lang.'annotation'.Annotation[])>(v2);
label3:
v7 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.ComputingCache resolved>;
v8 = new io.quarkus.arc.impl.ArcContainerImpl$Resolvable;
specialinvoke v8.<io.quarkus.arc.impl.ArcContainerImpl$Resolvable: void <init>(java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>(v1, v2);
v9 = virtualinvoke v7.<io.quarkus.arc.impl.ComputingCache: java.lang.Object getValue(java.lang.Object)>(v8);
return v9;
}
private transient boolean matches(io.quarkus.arc.InjectableBean, java.lang.reflect.Type, java.lang.'annotation'.Annotation[])
{
java.lang.reflect.Type v2;
io.quarkus.arc.InjectableBean v1;
java.util.Set v4, v5;
java.lang.'annotation'.Annotation[] v3;
io.quarkus.arc.impl.ArcContainerImpl v0;
boolean v6;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: io.quarkus.arc.InjectableBean;
v2 := @parameter1: java.lang.reflect.Type;
v3 := @parameter2: java.lang.'annotation'.Annotation[];
v4 = interfaceinvoke v1.<io.quarkus.arc.InjectableBean: java.util.Set getTypes()>();
v5 = interfaceinvoke v1.<io.quarkus.arc.InjectableBean: java.util.Set getQualifiers()>();
v6 = specialinvoke v0.<io.quarkus.arc.impl.ArcContainerImpl: boolean matches(java.util.Set,java.util.Set,java.lang.reflect.Type,java.lang.'annotation'.Annotation[])>(v4, v5, v2, v3);
return v6;
}
private transient boolean matches(java.util.Set, java.util.Set, java.lang.reflect.Type, java.lang.'annotation'.Annotation[])
{
io.quarkus.arc.impl.BeanTypeAssignabilityRules v5;
java.util.Set v1, v2;
java.lang.'annotation'.Annotation[] v4;
io.quarkus.arc.impl.ArcContainerImpl v0;
io.quarkus.arc.impl.Qualifiers v7;
java.lang.reflect.Type v3;
boolean v6, v8;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.util.Set;
v2 := @parameter1: java.util.Set;
v3 := @parameter2: java.lang.reflect.Type;
v4 := @parameter3: java.lang.'annotation'.Annotation[];
v5 = staticinvoke <io.quarkus.arc.impl.BeanTypeAssignabilityRules: io.quarkus.arc.impl.BeanTypeAssignabilityRules instance()>();
v6 = virtualinvoke v5.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean matches(java.lang.reflect.Type,java.util.Set)>(v3, v1);
if v6 != 0 goto label1;
return 0;
label1:
v7 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Qualifiers registeredQualifiers>;
v8 = virtualinvoke v7.<io.quarkus.arc.impl.Qualifiers: boolean hasQualifiers(java.util.Set,java.lang.'annotation'.Annotation[])>(v2, v4);
return v8;
}
private boolean decoratorMatches(java.lang.reflect.Type, java.util.Set, java.util.Set, java.util.Set)
{
java.lang.Object[] v9;
java.util.Set v2, v3, v4;
java.lang.'annotation'.Annotation[] v8;
io.quarkus.arc.impl.ArcContainerImpl v0;
io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules v5;
io.quarkus.arc.impl.Qualifiers v7;
java.lang.reflect.Type v1;
boolean v10, v6;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.util.Set;
v3 := @parameter2: java.util.Set;
v4 := @parameter3: java.util.Set;
v5 = staticinvoke <io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules: io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules instance()>();
v6 = virtualinvoke v5.<io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules: boolean matches(java.lang.reflect.Type,java.util.Set)>(v1, v3);
if v6 != 0 goto label1;
return 0;
label1:
v7 = v0.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Qualifiers registeredQualifiers>;
v8 = newarray (java.lang.'annotation'.Annotation)[0];
v9 = interfaceinvoke v4.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(v8);
v10 = virtualinvoke v7.<io.quarkus.arc.impl.Qualifiers: boolean hasQualifiers(java.util.Set,java.lang.'annotation'.Annotation[])>(v2, v9);
return v10;
}
static io.quarkus.arc.impl.ArcContainerImpl unwrap(io.quarkus.arc.ArcContainer)
{
io.quarkus.arc.ArcContainer v0;
java.lang.IllegalArgumentException v2;
boolean v1;
v0 := @parameter0: io.quarkus.arc.ArcContainer;
v1 = v0 instanceof io.quarkus.arc.impl.ArcContainerImpl;
if v1 == 0 goto label1;
return v0;
label1:
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>()>();
throw v2;
}
public static void mockObservers(java.lang.String, boolean)
{
java.lang.String v0;
io.quarkus.arc.impl.ArcContainerImpl v2;
boolean v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: boolean;
v2 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.ArcContainerImpl instance()>();
specialinvoke v2.<io.quarkus.arc.impl.ArcContainerImpl: void mockObserversFor(java.lang.String,boolean)>(v0, v1);
return;
}
private void mockObserversFor(java.lang.String, boolean)
{
java.util.Iterator v4;
io.quarkus.arc.InjectableObserverMethod v10;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.List v3;
java.lang.Object v6;
java.lang.String v1, v8;
boolean v2, v5, v7, v9;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List observers>;
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label3;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = v6 instanceof io.quarkus.arc.impl.Mockable;
if v7 == 0 goto label1;
v8 = interfaceinvoke v6.<io.quarkus.arc.InjectableObserverMethod: java.lang.String getDeclaringBeanIdentifier()>();
v9 = virtualinvoke v1.<java.lang.String: boolean equals(java.lang.Object)>(v8);
if v9 == 0 goto label1;
if v2 == 0 goto label2;
interfaceinvoke v10.<io.quarkus.arc.impl.Mockable: void arc$setMock(java.lang.Object)>(null);
goto label1;
label2:
interfaceinvoke v10.<io.quarkus.arc.impl.Mockable: void arc$clearMock()>();
goto label1;
label3:
return;
}
public void mockObserversFor(java.lang.Class, boolean)
{
java.util.Iterator v4;
io.quarkus.arc.InjectableObserverMethod v10;
io.quarkus.arc.impl.ArcContainerImpl v0;
java.util.List v3;
java.lang.Class v1, v8;
java.lang.Object v6;
boolean v2, v5, v7, v9;
v0 := @this: io.quarkus.arc.impl.ArcContainerImpl;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: boolean;
v3 = v0.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List observers>;
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label3;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = v6 instanceof io.quarkus.arc.impl.Mockable;
if v7 == 0 goto label1;
v8 = interfaceinvoke v6.<io.quarkus.arc.InjectableObserverMethod: java.lang.Class getBeanClass()>();
v9 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v8);
if v9 == 0 goto label1;
if v2 == 0 goto label2;
interfaceinvoke v10.<io.quarkus.arc.impl.Mockable: void arc$setMock(java.lang.Object)>(null);
goto label1;
label2:
interfaceinvoke v10.<io.quarkus.arc.impl.Mockable: void arc$clearMock()>();
goto label1;
label3:
return;
}
public static io.quarkus.arc.impl.ArcContainerImpl instance()
{
io.quarkus.arc.ArcContainer v0;
io.quarkus.arc.impl.ArcContainerImpl v1;
v0 = staticinvoke <io.quarkus.arc.Arc: io.quarkus.arc.ArcContainer container()>();
v1 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.ArcContainerImpl unwrap(io.quarkus.arc.ArcContainer)>(v0);
return v1;
}
static void <clinit>()
{
java.lang.Package v1;
java.util.concurrent.atomic.AtomicInteger v4;
org.jboss.logging.Logger v3;
java.lang.Class v0;
java.lang.String v2;
v0 = class "Lio/quarkus/arc/impl/ArcContainerImpl;";
v1 = virtualinvoke v0.<java.lang.Class: java.lang.Package getPackage()>();
v2 = virtualinvoke v1.<java.lang.Package: java.lang.String getName()>();
v3 = staticinvoke <org.jboss.logging.Logger: org.jboss.logging.Logger getLogger(java.lang.String)>(v2);
<io.quarkus.arc.impl.ArcContainerImpl: org.jboss.logging.Logger LOGGER> = v3;
v4 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v4.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
<io.quarkus.arc.impl.ArcContainerImpl: java.util.concurrent.atomic.AtomicInteger ID_GENERATOR> = v4;
return;
}
}