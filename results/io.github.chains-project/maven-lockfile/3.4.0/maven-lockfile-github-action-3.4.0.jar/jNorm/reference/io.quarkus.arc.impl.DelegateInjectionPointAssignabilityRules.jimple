final class io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules extends io.quarkus.arc.impl.BeanTypeAssignabilityRules
{
private static final io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules INSTANCE;
private void <init>()
{
io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules v0;
v0 := @this: io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules;
specialinvoke v0.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: void <init>()>();
return;
}
public static io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules instance()
{
io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules v0;
v0 = <io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules: io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules INSTANCE>;
return v0;
}
protected boolean parametersMatch(java.lang.reflect.Type, java.lang.reflect.Type)
{
io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules v0;
boolean v10, v11, v12, v13, v14, v15, v16, v17, v19, v20, v24, v3, v4, v5, v6, v7, v8, v9;
java.lang.reflect.Type v1, v2, v23;
java.lang.reflect.Type[] v22;
java.lang.Class v18, v21;
v0 := @this: io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.lang.reflect.Type;
v3 = staticinvoke <io.quarkus.arc.impl.Types: boolean isActualType(java.lang.reflect.Type)>(v1);
if v3 == 0 goto label1;
v4 = staticinvoke <io.quarkus.arc.impl.Types: boolean isActualType(java.lang.reflect.Type)>(v2);
if v4 == 0 goto label1;
v5 = virtualinvoke v0.<io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules: boolean matches(java.lang.reflect.Type,java.lang.reflect.Type)>(v1, v2);
return v5;
label1:
v6 = v1 instanceof java.lang.reflect.WildcardType;
if v6 == 0 goto label2;
v7 = staticinvoke <io.quarkus.arc.impl.Types: boolean isActualType(java.lang.reflect.Type)>(v2);
if v7 == 0 goto label2;
v8 = virtualinvoke v0.<io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules: boolean parametersMatch(java.lang.reflect.Type,java.lang.reflect.Type)>(v1, v2);
return v8;
label2:
v9 = v1 instanceof java.lang.reflect.WildcardType;
if v9 == 0 goto label3;
v10 = v2 instanceof java.lang.reflect.TypeVariable;
if v10 == 0 goto label3;
v11 = virtualinvoke v0.<io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules: boolean parametersMatch(java.lang.reflect.WildcardType,java.lang.reflect.TypeVariable)>(v1, v2);
return v11;
label3:
v12 = v1 instanceof java.lang.reflect.TypeVariable;
if v12 == 0 goto label4;
v13 = v2 instanceof java.lang.reflect.TypeVariable;
if v13 == 0 goto label4;
v14 = virtualinvoke v0.<io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules: boolean parametersMatch(java.lang.reflect.TypeVariable,java.lang.reflect.TypeVariable)>(v1, v2);
return v14;
label4:
v15 = v1 instanceof java.lang.reflect.TypeVariable;
if v15 == 0 goto label5;
v16 = staticinvoke <io.quarkus.arc.impl.Types: boolean isActualType(java.lang.reflect.Type)>(v2);
if v16 == 0 goto label5;
v17 = virtualinvoke v0.<io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules: boolean parametersMatch(java.lang.reflect.TypeVariable,java.lang.reflect.Type)>(v1, v2);
return v17;
label5:
v18 = class "Ljava/lang/Object;";
v19 = virtualinvoke v18.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v19 == 0 goto label6;
v20 = v2 instanceof java.lang.reflect.TypeVariable;
if v20 == 0 goto label6;
v21 = class "Ljava/lang/Object;";
v22 = interfaceinvoke v2.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
v23 = v22[0];
v24 = virtualinvoke v21.<java.lang.Object: boolean equals(java.lang.Object)>(v23);
return v24;
label6:
return 0;
}
protected boolean parametersMatch(java.lang.reflect.WildcardType, java.lang.reflect.TypeVariable)
{
io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules v0;
java.lang.reflect.TypeVariable v2;
java.lang.reflect.WildcardType v1;
java.lang.reflect.Type[] v3, v5;
boolean v4, v6;
v0 := @this: io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules;
v1 := @parameter0: java.lang.reflect.WildcardType;
v2 := @parameter1: java.lang.reflect.TypeVariable;
v3 = staticinvoke <io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules: java.lang.reflect.Type[] getUppermostTypeVariableBounds(java.lang.reflect.TypeVariable)>(v2);
v4 = virtualinvoke v0.<io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules: boolean lowerBoundsOfWildcardMatch(java.lang.reflect.Type[],java.lang.reflect.WildcardType)>(v3, v1);
if v4 != 0 goto label1;
return 0;
label1:
v5 = interfaceinvoke v1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();
v6 = virtualinvoke v0.<io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules: boolean boundsMatch(java.lang.reflect.Type[],java.lang.reflect.Type[])>(v5, v3);
return v6;
}
protected boolean parametersMatch(java.lang.reflect.TypeVariable, java.lang.reflect.TypeVariable)
{
io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules v0;
java.lang.reflect.TypeVariable v1, v2;
java.lang.reflect.Type[] v3, v4;
boolean v5;
v0 := @this: io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules;
v1 := @parameter0: java.lang.reflect.TypeVariable;
v2 := @parameter1: java.lang.reflect.TypeVariable;
v3 = staticinvoke <io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules: java.lang.reflect.Type[] getUppermostTypeVariableBounds(java.lang.reflect.TypeVariable)>(v1);
v4 = staticinvoke <io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules: java.lang.reflect.Type[] getUppermostTypeVariableBounds(java.lang.reflect.TypeVariable)>(v2);
v5 = virtualinvoke v0.<io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules: boolean boundsMatch(java.lang.reflect.Type[],java.lang.reflect.Type[])>(v3, v4);
return v5;
}
protected boolean parametersMatch(java.lang.reflect.TypeVariable, java.lang.reflect.Type)
{
java.lang.reflect.TypeVariable v1;
io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules v0;
java.lang.reflect.Type v2, v6;
int v4, v5;
java.lang.reflect.Type[] v3;
boolean v7;
v0 := @this: io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules;
v1 := @parameter0: java.lang.reflect.TypeVariable;
v2 := @parameter1: java.lang.reflect.Type;
v3 = staticinvoke <io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules: java.lang.reflect.Type[] getUppermostTypeVariableBounds(java.lang.reflect.TypeVariable)>(v1);
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label3;
v6 = v3[v5];
v7 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v6, v2);
if v7 != 0 goto label2;
return 0;
label2:
v5 = v5 + 1;
goto label1;
label3:
return 1;
}
static void <clinit>()
{
io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules v0;
v0 = new io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules;
specialinvoke v0.<io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules: void <init>()>();
<io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules: io.quarkus.arc.impl.DelegateInjectionPointAssignabilityRules INSTANCE> = v0;
return;
}
}