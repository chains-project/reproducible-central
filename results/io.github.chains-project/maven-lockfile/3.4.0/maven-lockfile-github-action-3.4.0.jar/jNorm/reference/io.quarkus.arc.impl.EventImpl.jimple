class io.quarkus.arc.impl.EventImpl extends java.lang.Object implements jakarta.enterprise.event.Event
{
private static final int DEFAULT_CACHE_CAPACITY;
private static final jakarta.enterprise.event.NotificationOptions EMPTY_OPTIONS;
private final io.quarkus.arc.impl.HierarchyDiscovery injectionPointTypeHierarchy;
private final java.lang.reflect.Type eventType;
private final java.util.Set qualifiers;
private final java.util.concurrent.ConcurrentMap notifiers;
private final jakarta.enterprise.inject.spi.InjectionPoint injectionPoint;
private transient volatile io.quarkus.arc.impl.EventImpl$Notifier lastNotifier;
private static final org.jboss.logging.Logger LOGGER;
void <init>(java.lang.reflect.Type, java.util.Set, jakarta.enterprise.inject.spi.InjectionPoint)
{
jakarta.enterprise.inject.Any$Literal v8;
jakarta.enterprise.inject.spi.InjectionPoint v3;
java.util.concurrent.ConcurrentHashMap v10;
java.util.Set v2, v9;
io.quarkus.arc.impl.HierarchyDiscovery v5;
java.util.HashSet v7;
io.quarkus.arc.impl.EventImpl v0;
java.lang.reflect.Type v1, v4, v6;
v0 := @this: io.quarkus.arc.impl.EventImpl;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.util.Set;
v3 := @parameter2: jakarta.enterprise.inject.spi.InjectionPoint;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = specialinvoke v0.<io.quarkus.arc.impl.EventImpl: java.lang.reflect.Type initEventType(java.lang.reflect.Type)>(v1);
v0.<io.quarkus.arc.impl.EventImpl: java.lang.reflect.Type eventType> = v4;
v5 = new io.quarkus.arc.impl.HierarchyDiscovery;
v6 = v0.<io.quarkus.arc.impl.EventImpl: java.lang.reflect.Type eventType>;
specialinvoke v5.<io.quarkus.arc.impl.HierarchyDiscovery: void <init>(java.lang.reflect.Type)>(v6);
v0.<io.quarkus.arc.impl.EventImpl: io.quarkus.arc.impl.HierarchyDiscovery injectionPointTypeHierarchy> = v5;
v7 = new java.util.HashSet;
specialinvoke v7.<java.util.HashSet: void <init>()>();
interfaceinvoke v7.<java.util.Set: boolean addAll(java.util.Collection)>(v2);
v8 = <jakarta.enterprise.inject.Any$Literal: jakarta.enterprise.inject.Any$Literal INSTANCE>;
interfaceinvoke v7.<java.util.Set: boolean add(java.lang.Object)>(v8);
v9 = staticinvoke <java.util.Set: java.util.Set copyOf(java.util.Collection)>(v7);
v0.<io.quarkus.arc.impl.EventImpl: java.util.Set qualifiers> = v9;
v10 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v10.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(4);
v0.<io.quarkus.arc.impl.EventImpl: java.util.concurrent.ConcurrentMap notifiers> = v10;
v0.<io.quarkus.arc.impl.EventImpl: jakarta.enterprise.inject.spi.InjectionPoint injectionPoint> = v3;
return;
}
public void fire(java.lang.Object)
{
io.quarkus.arc.impl.EventImpl v0;
io.quarkus.arc.impl.EventImpl$ObserverExceptionHandler v4;
io.quarkus.arc.impl.EventImpl$Notifier v3;
java.lang.Class v2;
java.lang.Object v1;
v0 := @this: io.quarkus.arc.impl.EventImpl;
v1 := @parameter0: java.lang.Object;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "Event cannot be null");
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v3 = specialinvoke v0.<io.quarkus.arc.impl.EventImpl: io.quarkus.arc.impl.EventImpl$Notifier getNotifier(java.lang.Class)>(v2);
v4 = <io.quarkus.arc.impl.EventImpl$ObserverExceptionHandler: io.quarkus.arc.impl.EventImpl$ObserverExceptionHandler IMMEDIATE_HANDLER>;
virtualinvoke v3.<io.quarkus.arc.impl.EventImpl$Notifier: void notify(java.lang.Object,io.quarkus.arc.impl.EventImpl$ObserverExceptionHandler,boolean)>(v1, v4, 0);
return;
}
public java.util.concurrent.CompletionStage fireAsync(java.lang.Object)
{
io.quarkus.arc.impl.EventImpl v0;
jakarta.enterprise.event.NotificationOptions v2;
java.util.concurrent.CompletionStage v3;
java.lang.Object v1;
v0 := @this: io.quarkus.arc.impl.EventImpl;
v1 := @parameter0: java.lang.Object;
v2 = <io.quarkus.arc.impl.EventImpl: jakarta.enterprise.event.NotificationOptions EMPTY_OPTIONS>;
v3 = virtualinvoke v0.<io.quarkus.arc.impl.EventImpl: java.util.concurrent.CompletionStage fireAsync(java.lang.Object,jakarta.enterprise.event.NotificationOptions)>(v1, v2);
return v3;
}
public java.util.concurrent.CompletionStage fireAsync(java.lang.Object, jakarta.enterprise.event.NotificationOptions)
{
io.quarkus.arc.impl.EventImpl$1 v9;
java.util.concurrent.Executor v5;
java.util.concurrent.CompletableFuture v10;
io.quarkus.arc.impl.EventImpl v0;
jakarta.enterprise.event.NotificationOptions v2;
io.quarkus.arc.ArcContainer v6;
io.quarkus.arc.impl.EventImpl$Notifier v4;
io.quarkus.arc.impl.AsyncEventDeliveryStage v11, v8;
java.lang.Class v3;
java.lang.Object v1;
boolean v7;
v0 := @this: io.quarkus.arc.impl.EventImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: jakarta.enterprise.event.NotificationOptions;
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v4 = specialinvoke v0.<io.quarkus.arc.impl.EventImpl: io.quarkus.arc.impl.EventImpl$Notifier getNotifier(java.lang.Class)>(v3);
v5 = interfaceinvoke v2.<jakarta.enterprise.event.NotificationOptions: java.util.concurrent.Executor getExecutor()>();
if v5 != null goto label1;
v6 = staticinvoke <io.quarkus.arc.Arc: io.quarkus.arc.ArcContainer container()>();
v5 = interfaceinvoke v6.<io.quarkus.arc.ArcContainer: java.util.concurrent.ExecutorService getExecutorService()>();
label1:
v7 = virtualinvoke v4.<io.quarkus.arc.impl.EventImpl$Notifier: boolean isEmpty()>();
if v7 == 0 goto label2;
v8 = staticinvoke <io.quarkus.arc.impl.AsyncEventDeliveryStage: io.quarkus.arc.impl.AsyncEventDeliveryStage completed(java.lang.Object,java.util.concurrent.Executor)>(v1, v5);
return v8;
label2:
v9 = new io.quarkus.arc.impl.EventImpl$1;
specialinvoke v9.<io.quarkus.arc.impl.EventImpl$1: void <init>(io.quarkus.arc.impl.EventImpl,io.quarkus.arc.impl.EventImpl$Notifier,java.lang.Object)>(v0, v4, v1);
v10 = staticinvoke <java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture supplyAsync(java.util.function.Supplier,java.util.concurrent.Executor)>(v9, v5);
v11 = new io.quarkus.arc.impl.AsyncEventDeliveryStage;
specialinvoke v11.<io.quarkus.arc.impl.AsyncEventDeliveryStage: void <init>(java.util.concurrent.CompletionStage,java.util.concurrent.Executor)>(v10, v5);
return v11;
}
private io.quarkus.arc.impl.EventImpl$Notifier getNotifier(java.lang.Class)
{
java.util.function.Function v6;
java.util.concurrent.ConcurrentMap v5;
io.quarkus.arc.impl.EventImpl v0;
io.quarkus.arc.impl.EventImpl$Notifier v2;
java.lang.Class v1, v3;
java.lang.Object v7;
boolean v4;
v0 := @this: io.quarkus.arc.impl.EventImpl;
v1 := @parameter0: java.lang.Class;
v2 = v0.<io.quarkus.arc.impl.EventImpl: io.quarkus.arc.impl.EventImpl$Notifier lastNotifier>;
if v2 == null goto label1;
v3 = v2.<io.quarkus.arc.impl.EventImpl$Notifier: java.lang.Class runtimeType>;
v4 = virtualinvoke v3.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v4 == 0 goto label1;
return v2;
label1:
v5 = v0.<io.quarkus.arc.impl.EventImpl: java.util.concurrent.ConcurrentMap notifiers>;
v6 = staticinvoke <io.quarkus.arc.impl.EventImpl$createNotifier__2602: java.util.function.Function bootstrap$(io.quarkus.arc.impl.EventImpl)>(v0);
v7 = interfaceinvoke v5.<java.util.concurrent.ConcurrentMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v1, v6);
v0.<io.quarkus.arc.impl.EventImpl: io.quarkus.arc.impl.EventImpl$Notifier lastNotifier> = v7;
return v7;
}
public transient jakarta.enterprise.event.Event select(java.lang.'annotation'.Annotation[])
{
jakarta.enterprise.inject.spi.InjectionPoint v8;
java.util.Set v5;
java.lang.'annotation'.Annotation[] v1;
io.quarkus.arc.impl.ArcContainerImpl v2;
java.util.HashSet v4;
io.quarkus.arc.impl.EventImpl v0, v6;
io.quarkus.arc.impl.Qualifiers v3;
java.lang.reflect.Type v7;
v0 := @this: io.quarkus.arc.impl.EventImpl;
v1 := @parameter0: java.lang.'annotation'.Annotation[];
v2 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.ArcContainerImpl instance()>();
v3 = v2.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Qualifiers registeredQualifiers>;
virtualinvoke v3.<io.quarkus.arc.impl.Qualifiers: void verify(java.lang.'annotation'.Annotation[])>(v1);
v4 = new java.util.HashSet;
v5 = v0.<io.quarkus.arc.impl.EventImpl: java.util.Set qualifiers>;
specialinvoke v4.<java.util.HashSet: void <init>(java.util.Collection)>(v5);
staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(v4, v1);
v6 = new io.quarkus.arc.impl.EventImpl;
v7 = v0.<io.quarkus.arc.impl.EventImpl: java.lang.reflect.Type eventType>;
v8 = v0.<io.quarkus.arc.impl.EventImpl: jakarta.enterprise.inject.spi.InjectionPoint injectionPoint>;
specialinvoke v6.<io.quarkus.arc.impl.EventImpl: void <init>(java.lang.reflect.Type,java.util.Set,jakarta.enterprise.inject.spi.InjectionPoint)>(v7, v4, v8);
return v6;
}
public transient jakarta.enterprise.event.Event select(java.lang.Class, java.lang.'annotation'.Annotation[])
{
jakarta.enterprise.inject.spi.InjectionPoint v10;
java.util.Set v8;
java.lang.'annotation'.Annotation[] v2;
java.lang.IllegalArgumentException v4;
io.quarkus.arc.impl.ArcContainerImpl v5;
java.util.HashSet v7;
io.quarkus.arc.impl.EventImpl v0, v9;
io.quarkus.arc.impl.Qualifiers v6;
java.lang.Class v1;
boolean v3;
v0 := @this: io.quarkus.arc.impl.EventImpl;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
v3 = staticinvoke <io.quarkus.arc.impl.Types: boolean containsTypeVariable(java.lang.reflect.Type)>(v1);
if v3 == 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Event#select(Class<U>, Annotation...) cannot be used with type variable parameter");
throw v4;
label1:
v5 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.ArcContainerImpl instance()>();
v6 = v5.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Qualifiers registeredQualifiers>;
virtualinvoke v6.<io.quarkus.arc.impl.Qualifiers: void verify(java.lang.'annotation'.Annotation[])>(v2);
v7 = new java.util.HashSet;
v8 = v0.<io.quarkus.arc.impl.EventImpl: java.util.Set qualifiers>;
specialinvoke v7.<java.util.HashSet: void <init>(java.util.Collection)>(v8);
staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(v7, v2);
v9 = new io.quarkus.arc.impl.EventImpl;
v10 = v0.<io.quarkus.arc.impl.EventImpl: jakarta.enterprise.inject.spi.InjectionPoint injectionPoint>;
specialinvoke v9.<io.quarkus.arc.impl.EventImpl: void <init>(java.lang.reflect.Type,java.util.Set,jakarta.enterprise.inject.spi.InjectionPoint)>(v1, v7, v10);
return v9;
}
public transient jakarta.enterprise.event.Event select(jakarta.enterprise.util.TypeLiteral, java.lang.'annotation'.Annotation[])
{
jakarta.enterprise.inject.spi.InjectionPoint v12;
java.util.Set v9;
java.lang.'annotation'.Annotation[] v2;
java.lang.IllegalArgumentException v7;
io.quarkus.arc.impl.ArcContainerImpl v3;
java.util.HashSet v8;
jakarta.enterprise.util.TypeLiteral v1;
io.quarkus.arc.impl.EventImpl v0, v10;
io.quarkus.arc.impl.Qualifiers v4;
java.lang.reflect.Type v11, v5;
boolean v6;
v0 := @this: io.quarkus.arc.impl.EventImpl;
v1 := @parameter0: jakarta.enterprise.util.TypeLiteral;
v2 := @parameter1: java.lang.'annotation'.Annotation[];
v3 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.ArcContainerImpl instance()>();
v4 = v3.<io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.Qualifiers registeredQualifiers>;
virtualinvoke v4.<io.quarkus.arc.impl.Qualifiers: void verify(java.lang.'annotation'.Annotation[])>(v2);
v5 = virtualinvoke v1.<jakarta.enterprise.util.TypeLiteral: java.lang.reflect.Type getType()>();
v6 = staticinvoke <io.quarkus.arc.impl.Types: boolean containsTypeVariable(java.lang.reflect.Type)>(v5);
if v6 == 0 goto label1;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Event#select(TypeLiteral, Annotation...) cannot be used with type variable parameter");
throw v7;
label1:
v8 = new java.util.HashSet;
v9 = v0.<io.quarkus.arc.impl.EventImpl: java.util.Set qualifiers>;
specialinvoke v8.<java.util.HashSet: void <init>(java.util.Collection)>(v9);
staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(v8, v2);
v10 = new io.quarkus.arc.impl.EventImpl;
v11 = virtualinvoke v1.<jakarta.enterprise.util.TypeLiteral: java.lang.reflect.Type getType()>();
v12 = v0.<io.quarkus.arc.impl.EventImpl: jakarta.enterprise.inject.spi.InjectionPoint injectionPoint>;
specialinvoke v10.<io.quarkus.arc.impl.EventImpl: void <init>(java.lang.reflect.Type,java.util.Set,jakarta.enterprise.inject.spi.InjectionPoint)>(v11, v8, v12);
return v10;
}
public io.quarkus.arc.impl.EventImpl$Notifier createNotifier(java.lang.Class)
{
jakarta.enterprise.inject.spi.InjectionPoint v6;
java.util.Set v3;
io.quarkus.arc.impl.ArcContainerImpl v5;
io.quarkus.arc.impl.EventImpl v0;
java.lang.reflect.Type v2;
io.quarkus.arc.ArcContainer v4;
io.quarkus.arc.impl.EventImpl$Notifier v7;
java.lang.Class v1;
v0 := @this: io.quarkus.arc.impl.EventImpl;
v1 := @parameter0: java.lang.Class;
v2 = specialinvoke v0.<io.quarkus.arc.impl.EventImpl: java.lang.reflect.Type getEventType(java.lang.Class)>(v1);
v3 = v0.<io.quarkus.arc.impl.EventImpl: java.util.Set qualifiers>;
v4 = staticinvoke <io.quarkus.arc.Arc: io.quarkus.arc.ArcContainer container()>();
v5 = staticinvoke <io.quarkus.arc.impl.ArcContainerImpl: io.quarkus.arc.impl.ArcContainerImpl unwrap(io.quarkus.arc.ArcContainer)>(v4);
v6 = v0.<io.quarkus.arc.impl.EventImpl: jakarta.enterprise.inject.spi.InjectionPoint injectionPoint>;
v7 = staticinvoke <io.quarkus.arc.impl.EventImpl: io.quarkus.arc.impl.EventImpl$Notifier createNotifier(java.lang.Class,java.lang.reflect.Type,java.util.Set,io.quarkus.arc.impl.ArcContainerImpl,jakarta.enterprise.inject.spi.InjectionPoint)>(v1, v2, v3, v5, v6);
return v7;
}
static io.quarkus.arc.impl.EventImpl$Notifier createNotifier(java.lang.Class, java.lang.reflect.Type, java.util.Set, io.quarkus.arc.impl.ArcContainerImpl, jakarta.enterprise.inject.spi.InjectionPoint)
{
jakarta.enterprise.inject.spi.InjectionPoint v4;
java.util.Set v2;
io.quarkus.arc.impl.ArcContainerImpl v3;
java.lang.reflect.Type v1;
io.quarkus.arc.ArcContainer v5;
io.quarkus.arc.impl.EventImpl$Notifier v8;
java.lang.Class v0;
boolean v6, v7;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.reflect.Type;
v2 := @parameter2: java.util.Set;
v3 := @parameter3: io.quarkus.arc.impl.ArcContainerImpl;
v4 := @parameter4: jakarta.enterprise.inject.spi.InjectionPoint;
v5 = staticinvoke <io.quarkus.arc.Arc: io.quarkus.arc.ArcContainer container()>();
v6 = interfaceinvoke v5.<io.quarkus.arc.ArcContainer: boolean strictCompatibility()>();
if v6 != 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
v8 = staticinvoke <io.quarkus.arc.impl.EventImpl: io.quarkus.arc.impl.EventImpl$Notifier createNotifier(java.lang.Class,java.lang.reflect.Type,java.util.Set,io.quarkus.arc.impl.ArcContainerImpl,boolean,jakarta.enterprise.inject.spi.InjectionPoint)>(v0, v1, v2, v3, v7, v4);
return v8;
}
static io.quarkus.arc.impl.EventImpl$Notifier createNotifier(java.lang.Class, java.lang.reflect.Type, java.util.Set, io.quarkus.arc.impl.ArcContainerImpl, boolean, jakarta.enterprise.inject.spi.InjectionPoint)
{
jakarta.enterprise.inject.spi.InjectionPoint v5;
java.util.Set v2;
io.quarkus.arc.impl.ArcContainerImpl v3;
java.util.ArrayList v7;
java.util.List v8;
java.lang.reflect.Type v1;
io.quarkus.arc.impl.EventImpl$Notifier v9;
java.lang.Class v0;
io.quarkus.arc.impl.EventMetadataImpl v6;
boolean v4;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.reflect.Type;
v2 := @parameter2: java.util.Set;
v3 := @parameter3: io.quarkus.arc.impl.ArcContainerImpl;
v4 := @parameter4: boolean;
v5 := @parameter5: jakarta.enterprise.inject.spi.InjectionPoint;
v6 = new io.quarkus.arc.impl.EventMetadataImpl;
specialinvoke v6.<io.quarkus.arc.impl.EventMetadataImpl: void <init>(java.util.Set,java.lang.reflect.Type,jakarta.enterprise.inject.spi.InjectionPoint)>(v2, v1, v5);
v7 = new java.util.ArrayList;
v8 = virtualinvoke v3.<io.quarkus.arc.impl.ArcContainerImpl: java.util.List resolveObservers(java.lang.reflect.Type,java.util.Set)>(v1, v2);
specialinvoke v7.<java.util.ArrayList: void <init>(java.util.Collection)>(v8);
v9 = new io.quarkus.arc.impl.EventImpl$Notifier;
specialinvoke v9.<io.quarkus.arc.impl.EventImpl$Notifier: void <init>(java.lang.Class,java.util.List,jakarta.enterprise.inject.spi.EventMetadata,boolean)>(v0, v7, v6, v4);
return v9;
}
private java.lang.reflect.Type initEventType(java.lang.reflect.Type)
{
io.quarkus.arc.impl.EventImpl v0;
java.lang.reflect.ParameterizedType v3;
java.lang.reflect.Type v1, v5, v9;
java.lang.reflect.Type[] v8;
java.lang.Class v4, v6;
boolean v2, v7;
v0 := @this: io.quarkus.arc.impl.EventImpl;
v1 := @parameter0: java.lang.reflect.Type;
v2 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v1);
if v2 == 0 goto label1;
v3 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v1);
v4 = class "Ljakarta/enterprise/event/Event;";
v5 = interfaceinvoke v3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v6 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class getRawType(java.lang.reflect.Type)>(v5);
v7 = virtualinvoke v4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v6);
if v7 == 0 goto label1;
v8 = interfaceinvoke v3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v9 = v8[0];
return v9;
label1:
return v1;
}
private java.lang.reflect.Type getEventType(java.lang.Class)
{
io.quarkus.arc.impl.EventImpl v0;
java.util.Map v10, v13;
io.quarkus.arc.impl.TypeResolver v12, v14, v9;
java.lang.String v17;
boolean v15, v3, v5;
java.lang.IllegalArgumentException v16;
io.quarkus.arc.impl.HierarchyDiscovery v11, v4, v8;
java.lang.reflect.Type v2, v6;
io.quarkus.arc.impl.EventObjectTypeResolverBuilder v7;
java.lang.Class v1;
v0 := @this: io.quarkus.arc.impl.EventImpl;
v1 := @parameter0: java.lang.Class;
v2 = v1;
v3 = staticinvoke <io.quarkus.arc.impl.Types: boolean containsTypeVariable(java.lang.reflect.Type)>(v1);
if v3 == 0 goto label1;
v4 = v0.<io.quarkus.arc.impl.EventImpl: io.quarkus.arc.impl.HierarchyDiscovery injectionPointTypeHierarchy>;
v2 = virtualinvoke v4.<io.quarkus.arc.impl.HierarchyDiscovery: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>(v1);
label1:
v5 = staticinvoke <io.quarkus.arc.impl.Types: boolean containsTypeVariable(java.lang.reflect.Type)>(v2);
if v5 == 0 goto label2;
v6 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.reflect.Type getCanonicalType(java.lang.Class)>(v1);
v7 = new io.quarkus.arc.impl.EventObjectTypeResolverBuilder;
v8 = v0.<io.quarkus.arc.impl.EventImpl: io.quarkus.arc.impl.HierarchyDiscovery injectionPointTypeHierarchy>;
v9 = virtualinvoke v8.<io.quarkus.arc.impl.HierarchyDiscovery: io.quarkus.arc.impl.TypeResolver getResolver()>();
v10 = virtualinvoke v9.<io.quarkus.arc.impl.TypeResolver: java.util.Map getResolvedTypeVariables()>();
v11 = new io.quarkus.arc.impl.HierarchyDiscovery;
specialinvoke v11.<io.quarkus.arc.impl.HierarchyDiscovery: void <init>(java.lang.reflect.Type)>(v6);
v12 = virtualinvoke v11.<io.quarkus.arc.impl.HierarchyDiscovery: io.quarkus.arc.impl.TypeResolver getResolver()>();
v13 = virtualinvoke v12.<io.quarkus.arc.impl.TypeResolver: java.util.Map getResolvedTypeVariables()>();
specialinvoke v7.<io.quarkus.arc.impl.EventObjectTypeResolverBuilder: void <init>(java.util.Map,java.util.Map)>(v10, v13);
v14 = virtualinvoke v7.<io.quarkus.arc.impl.EventObjectTypeResolverBuilder: io.quarkus.arc.impl.TypeResolver build()>();
v2 = virtualinvoke v14.<io.quarkus.arc.impl.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.Type)>(v6);
label2:
v15 = staticinvoke <io.quarkus.arc.impl.Types: boolean containsTypeVariable(java.lang.reflect.Type)>(v2);
if v15 == 0 goto label3;
v16 = new java.lang.IllegalArgumentException;
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("CDI event payload cannot contain unresolved type variable; found type: \u0001");
specialinvoke v16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v17);
throw v16;
label3:
return v2;
}
private void handleExceptions(io.quarkus.arc.impl.EventImpl$ObserverExceptionHandler)
{
io.quarkus.arc.impl.EventImpl$ObserverExceptionHandler v1;
java.util.Iterator v9;
java.util.concurrent.CompletionException v5, v7, v8;
java.util.List v2;
io.quarkus.arc.impl.EventImpl v0;
int v4;
java.lang.Object v11, v6;
boolean v10, v3;
v0 := @this: io.quarkus.arc.impl.EventImpl;
v1 := @parameter0: io.quarkus.arc.impl.EventImpl$ObserverExceptionHandler;
v2 = interfaceinvoke v1.<io.quarkus.arc.impl.EventImpl$ObserverExceptionHandler: java.util.List getHandledExceptions()>();
v3 = interfaceinvoke v2.<java.util.List: boolean isEmpty()>();
if v3 != 0 goto label5;
v4 = interfaceinvoke v2.<java.util.List: int size()>();
if v4 != 1 goto label1;
v5 = new java.util.concurrent.CompletionException;
v6 = interfaceinvoke v2.<java.util.List: java.lang.Object get(int)>(0);
specialinvoke v5.<java.util.concurrent.CompletionException: void <init>(java.lang.Throwable)>(v6);
v7 = v5;
goto label2;
label1:
v8 = new java.util.concurrent.CompletionException;
specialinvoke v8.<java.util.concurrent.CompletionException: void <init>(java.lang.Throwable)>(null);
v7 = v8;
label2:
v9 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label3:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label4;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v7.<java.util.concurrent.CompletionException: void addSuppressed(java.lang.Throwable)>(v11);
goto label3;
label4:
throw v7;
label5:
return;
}
static void <clinit>()
{
jakarta.enterprise.event.NotificationOptions$Builder v0;
jakarta.enterprise.event.NotificationOptions v1;
org.jboss.logging.Logger v2;
v0 = staticinvoke <jakarta.enterprise.event.NotificationOptions: jakarta.enterprise.event.NotificationOptions$Builder builder()>();
v1 = interfaceinvoke v0.<jakarta.enterprise.event.NotificationOptions$Builder: jakarta.enterprise.event.NotificationOptions build()>();
<io.quarkus.arc.impl.EventImpl: jakarta.enterprise.event.NotificationOptions EMPTY_OPTIONS> = v1;
v2 = staticinvoke <org.jboss.logging.Logger: org.jboss.logging.Logger getLogger(java.lang.Class)>(class "Lio/quarkus/arc/impl/EventImpl;");
<io.quarkus.arc.impl.EventImpl: org.jboss.logging.Logger LOGGER> = v2;
return;
}
}