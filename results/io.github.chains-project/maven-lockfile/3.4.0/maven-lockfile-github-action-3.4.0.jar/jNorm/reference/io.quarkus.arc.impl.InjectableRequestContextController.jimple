public class io.quarkus.arc.impl.InjectableRequestContextController extends java.lang.Object implements jakarta.enterprise.context.control.RequestContextController
{
private final io.quarkus.arc.ManagedContext requestContext;
private final java.util.concurrent.atomic.AtomicBoolean isActivator;
public void <init>()
{
io.quarkus.arc.ManagedContext v2;
io.quarkus.arc.ArcContainer v1;
io.quarkus.arc.impl.InjectableRequestContextController v0;
java.util.concurrent.atomic.AtomicBoolean v3;
v0 := @this: io.quarkus.arc.impl.InjectableRequestContextController;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = staticinvoke <io.quarkus.arc.Arc: io.quarkus.arc.ArcContainer container()>();
v2 = interfaceinvoke v1.<io.quarkus.arc.ArcContainer: io.quarkus.arc.ManagedContext requestContext()>();
v0.<io.quarkus.arc.impl.InjectableRequestContextController: io.quarkus.arc.ManagedContext requestContext> = v2;
v3 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v3.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);
v0.<io.quarkus.arc.impl.InjectableRequestContextController: java.util.concurrent.atomic.AtomicBoolean isActivator> = v3;
return;
}
public boolean activate()
{
io.quarkus.arc.ManagedContext v3;
io.quarkus.arc.ArcContainer v1;
io.quarkus.arc.InjectableContext v2;
io.quarkus.arc.impl.InjectableRequestContextController v0;
java.util.concurrent.atomic.AtomicBoolean v4;
v0 := @this: io.quarkus.arc.impl.InjectableRequestContextController;
v1 = staticinvoke <io.quarkus.arc.Arc: io.quarkus.arc.ArcContainer container()>();
v2 = interfaceinvoke v1.<io.quarkus.arc.ArcContainer: io.quarkus.arc.InjectableContext getActiveContext(java.lang.Class)>(class "Ljakarta/enterprise/context/RequestScoped;");
if v2 == null goto label1;
return 0;
label1:
v3 = v0.<io.quarkus.arc.impl.InjectableRequestContextController: io.quarkus.arc.ManagedContext requestContext>;
interfaceinvoke v3.<io.quarkus.arc.ManagedContext: void activate()>();
v4 = v0.<io.quarkus.arc.impl.InjectableRequestContextController: java.util.concurrent.atomic.AtomicBoolean isActivator>;
virtualinvoke v4.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);
return 1;
}
public void deactivate() throws jakarta.enterprise.context.ContextNotActiveException
{
io.quarkus.arc.ManagedContext v8;
io.quarkus.arc.InjectableContext v2;
java.util.concurrent.atomic.AtomicBoolean v6;
jakarta.enterprise.context.ContextNotActiveException v3;
io.quarkus.arc.ArcContainer v1;
io.quarkus.arc.impl.InjectableRequestContextController v0;
java.lang.Class v4;
java.lang.String v5;
boolean v7;
v0 := @this: io.quarkus.arc.impl.InjectableRequestContextController;
v1 = staticinvoke <io.quarkus.arc.Arc: io.quarkus.arc.ArcContainer container()>();
v2 = interfaceinvoke v1.<io.quarkus.arc.ArcContainer: io.quarkus.arc.InjectableContext getActiveContext(java.lang.Class)>(class "Ljakarta/enterprise/context/RequestScoped;");
if v2 != null goto label1;
v3 = new jakarta.enterprise.context.ContextNotActiveException;
v4 = class "Ljakarta/enterprise/context/RequestScoped;";
v5 = virtualinvoke v4.<java.lang.Class: java.lang.String getName()>();
specialinvoke v3.<jakarta.enterprise.context.ContextNotActiveException: void <init>(java.lang.String)>(v5);
throw v3;
label1:
v6 = v0.<io.quarkus.arc.impl.InjectableRequestContextController: java.util.concurrent.atomic.AtomicBoolean isActivator>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(1, 0);
if v7 == 0 goto label2;
v8 = v0.<io.quarkus.arc.impl.InjectableRequestContextController: io.quarkus.arc.ManagedContext requestContext>;
interfaceinvoke v8.<io.quarkus.arc.ManagedContext: void terminate()>();
label2:
return;
}
}