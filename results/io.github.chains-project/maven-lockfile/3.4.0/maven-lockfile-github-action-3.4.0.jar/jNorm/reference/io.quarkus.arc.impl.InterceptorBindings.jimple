public final class io.quarkus.arc.impl.InterceptorBindings extends java.lang.Object
{
private final java.util.Set allInterceptorBindings;
private final java.util.Map transitiveInterceptorBindings;
void <init>(java.util.Set, java.util.Map)
{
java.util.Set v1;
io.quarkus.arc.impl.InterceptorBindings v0;
java.util.Map v2;
v0 := @this: io.quarkus.arc.impl.InterceptorBindings;
v1 := @parameter0: java.util.Set;
v2 := @parameter1: java.util.Map;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.quarkus.arc.impl.InterceptorBindings: java.util.Set allInterceptorBindings> = v1;
v0.<io.quarkus.arc.impl.InterceptorBindings: java.util.Map transitiveInterceptorBindings> = v2;
return;
}
boolean isRegistered(java.lang.Class)
{
io.quarkus.arc.impl.InterceptorBindings v0;
java.util.Set v2;
java.lang.Class v1;
java.lang.String v3;
boolean v4;
v0 := @this: io.quarkus.arc.impl.InterceptorBindings;
v1 := @parameter0: java.lang.Class;
v2 = v0.<io.quarkus.arc.impl.InterceptorBindings: java.util.Set allInterceptorBindings>;
v3 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v4 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v3);
return v4;
}
java.util.Set getTransitive(java.lang.Class)
{
io.quarkus.arc.impl.InterceptorBindings v0;
java.util.Map v2;
java.lang.Class v1;
java.lang.Object v3;
v0 := @this: io.quarkus.arc.impl.InterceptorBindings;
v1 := @parameter0: java.lang.Class;
v2 = v0.<io.quarkus.arc.impl.InterceptorBindings: java.util.Map transitiveInterceptorBindings>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v3;
}
void verify(java.lang.'annotation'.Annotation[])
{
java.util.HashMap v6;
java.lang.'annotation'.Annotation[] v1;
io.quarkus.arc.impl.InterceptorBindings$TimesSeenBiFunction v12;
io.quarkus.arc.impl.InterceptorBindings v0;
int v2, v3, v7, v8;
java.lang.'annotation'.Annotation v4, v9;
java.lang.Class v10, v11, v5;
v0 := @this: io.quarkus.arc.impl.InterceptorBindings;
v1 := @parameter0: java.lang.'annotation'.Annotation[];
v2 = lengthof v1;
if v2 != 0 goto label1;
return;
label1:
v3 = lengthof v1;
if v3 != 1 goto label2;
v4 = v1[0];
v5 = interfaceinvoke v4.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
specialinvoke v0.<io.quarkus.arc.impl.InterceptorBindings: void verifyInterceptorBinding(java.lang.Class)>(v5);
goto label5;
label2:
v6 = new java.util.HashMap;
specialinvoke v6.<java.util.HashMap: void <init>()>();
v7 = lengthof v1;
v8 = 0;
label3:
if v8 >= v7 goto label4;
v9 = v1[v8];
v10 = interfaceinvoke v9.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
specialinvoke v0.<io.quarkus.arc.impl.InterceptorBindings: void verifyInterceptorBinding(java.lang.Class)>(v10);
v11 = interfaceinvoke v9.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
v12 = <io.quarkus.arc.impl.InterceptorBindings$TimesSeenBiFunction: io.quarkus.arc.impl.InterceptorBindings$TimesSeenBiFunction INSTANCE>;
interfaceinvoke v6.<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(v11, v12);
v8 = v8 + 1;
goto label3;
label4:
staticinvoke <io.quarkus.arc.impl.InterceptorBindings: void checkInterceptorBindingsForDuplicates(java.util.Map)>(v6);
label5:
return;
}
private static void checkInterceptorBindingsForDuplicates(java.util.Map)
{
java.util.function.BiConsumer v1;
java.util.Map v0;
v0 := @parameter0: java.util.Map;
v1 = staticinvoke <io.quarkus.arc.impl.InterceptorBindings$checkInterceptorBindingsForDuplicates__2587: java.util.function.BiConsumer bootstrap$()>();
interfaceinvoke v0.<java.util.Map: void forEach(java.util.function.BiConsumer)>(v1);
return;
}
public static void checkInterceptorBindingsForDuplicates(java.lang.Class, java.lang.Integer)
{
int v2;
java.lang.Class v0;
java.lang.String v5;
java.lang.IllegalArgumentException v4;
java.lang.Integer v1;
boolean v3;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Integer;
v2 = virtualinvoke v1.<java.lang.Integer: int intValue()>();
if v2 <= 1 goto label1;
v3 = virtualinvoke v0.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Ljava/lang/annotation/Repeatable;");
if v3 != 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Interceptor binding \u0001 was used repeatedly but is not @Repeatable");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
return;
}
private void verifyInterceptorBinding(java.lang.Class)
{
io.quarkus.arc.impl.InterceptorBindings v0;
java.util.Set v2;
java.lang.Class v1;
java.lang.String v3, v6;
java.lang.IllegalArgumentException v5;
boolean v4;
v0 := @this: io.quarkus.arc.impl.InterceptorBindings;
v1 := @parameter0: java.lang.Class;
v2 = v0.<io.quarkus.arc.impl.InterceptorBindings: java.util.Set allInterceptorBindings>;
v3 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v4 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v3);
if v4 != 0 goto label1;
v5 = new java.lang.IllegalArgumentException;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Annotation is not a registered interceptor binding: \u0001");
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v5;
label1:
return;
}
}