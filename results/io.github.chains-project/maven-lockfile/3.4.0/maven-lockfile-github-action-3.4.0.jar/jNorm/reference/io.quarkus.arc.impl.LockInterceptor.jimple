public class io.quarkus.arc.impl.LockInterceptor extends java.lang.Object
{
private final java.util.concurrent.locks.ReadWriteLock readWriteLock;
public void <init>()
{
io.quarkus.arc.impl.LockInterceptor v0;
java.util.concurrent.locks.ReentrantReadWriteLock v1;
v0 := @this: io.quarkus.arc.impl.LockInterceptor;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.locks.ReentrantReadWriteLock;
specialinvoke v1.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();
v0.<io.quarkus.arc.impl.LockInterceptor: java.util.concurrent.locks.ReadWriteLock readWriteLock> = v1;
return;
}
java.lang.Object lock(jakarta.interceptor.InvocationContext) throws java.lang.Exception
{
io.quarkus.arc.impl.LockInterceptor v0;
io.quarkus.arc.Lock$Type v4;
io.quarkus.arc.LockException v10;
jakarta.interceptor.InvocationContext v1;
io.quarkus.arc.Lock v2;
int[] v3;
int v5, v6;
java.lang.Object v7, v8, v9;
java.lang.String v12;
java.lang.reflect.Method v11;
v0 := @this: io.quarkus.arc.impl.LockInterceptor;
v1 := @parameter0: jakarta.interceptor.InvocationContext;
v2 = virtualinvoke v0.<io.quarkus.arc.impl.LockInterceptor: io.quarkus.arc.Lock getLock(jakarta.interceptor.InvocationContext)>(v1);
v3 = <io.quarkus.arc.impl.LockInterceptor$1: int[] $SwitchMap$io$quarkus$arc$Lock$Type>;
v4 = interfaceinvoke v2.<io.quarkus.arc.Lock: io.quarkus.arc.Lock$Type value()>();
v5 = virtualinvoke v4.<io.quarkus.arc.Lock$Type: int ordinal()>();
v6 = v3[v5];
tableswitch(v6)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label3;
default: goto label4;
};
label1:
v7 = specialinvoke v0.<io.quarkus.arc.impl.LockInterceptor: java.lang.Object writeLock(io.quarkus.arc.Lock,jakarta.interceptor.InvocationContext)>(v2, v1);
return v7;
label2:
v8 = specialinvoke v0.<io.quarkus.arc.impl.LockInterceptor: java.lang.Object readLock(io.quarkus.arc.Lock,jakarta.interceptor.InvocationContext)>(v2, v1);
return v8;
label3:
v9 = interfaceinvoke v1.<jakarta.interceptor.InvocationContext: java.lang.Object proceed()>();
return v9;
label4:
v10 = new io.quarkus.arc.LockException;
v11 = interfaceinvoke v1.<jakarta.interceptor.InvocationContext: java.lang.reflect.Method getMethod()>();
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Method)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unsupported @Lock type found on business method \u0001");
specialinvoke v10.<io.quarkus.arc.LockException: void <init>(java.lang.String)>(v12);
throw v10;
}
private java.lang.Object writeLock(io.quarkus.arc.Lock, jakarta.interceptor.InvocationContext) throws java.lang.Exception
{
java.lang.Throwable v18;
io.quarkus.arc.LockException v9;
jakarta.interceptor.InvocationContext v2;
long v11, v4;
byte v5;
java.lang.String v12;
java.util.concurrent.locks.ReadWriteLock v13, v16, v19, v6;
boolean v3;
io.quarkus.arc.impl.LockInterceptor v0;
java.util.concurrent.TimeUnit v10, v8;
java.util.concurrent.locks.Lock v14, v17, v20, v7;
io.quarkus.arc.Lock v1;
java.lang.Object v15;
v0 := @this: io.quarkus.arc.impl.LockInterceptor;
v1 := @parameter0: io.quarkus.arc.Lock;
v2 := @parameter1: jakarta.interceptor.InvocationContext;
v3 = 0;
v4 = interfaceinvoke v1.<io.quarkus.arc.Lock: long time()>();
label1:
v5 = v4 cmp 0L;
if v5 <= 0 goto label2;
v6 = v0.<io.quarkus.arc.impl.LockInterceptor: java.util.concurrent.locks.ReadWriteLock readWriteLock>;
v7 = interfaceinvoke v6.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
v8 = interfaceinvoke v1.<io.quarkus.arc.Lock: java.util.concurrent.TimeUnit unit()>();
v3 = interfaceinvoke v7.<java.util.concurrent.locks.Lock: boolean tryLock(long,java.util.concurrent.TimeUnit)>(v4, v8);
if v3 != 0 goto label3;
v9 = new io.quarkus.arc.LockException;
v10 = interfaceinvoke v1.<io.quarkus.arc.Lock: java.util.concurrent.TimeUnit unit()>();
v11 = virtualinvoke v10.<java.util.concurrent.TimeUnit: long toMillis(long)>(v4);
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Write lock not acquired in \u0001 ms");
specialinvoke v9.<io.quarkus.arc.LockException: void <init>(java.lang.String)>(v12);
throw v9;
label2:
v13 = v0.<io.quarkus.arc.impl.LockInterceptor: java.util.concurrent.locks.ReadWriteLock readWriteLock>;
v14 = interfaceinvoke v13.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
interfaceinvoke v14.<java.util.concurrent.locks.Lock: void lock()>();
v3 = 1;
label3:
v15 = interfaceinvoke v2.<jakarta.interceptor.InvocationContext: java.lang.Object proceed()>();
label4:
if v3 == 0 goto label5;
v16 = v0.<io.quarkus.arc.impl.LockInterceptor: java.util.concurrent.locks.ReadWriteLock readWriteLock>;
v17 = interfaceinvoke v16.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
interfaceinvoke v17.<java.util.concurrent.locks.Lock: void unlock()>();
label5:
return v15;
label6:
v18 := @caughtexception;
if v3 == 0 goto label7;
v19 = v0.<io.quarkus.arc.impl.LockInterceptor: java.util.concurrent.locks.ReadWriteLock readWriteLock>;
v20 = interfaceinvoke v19.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
interfaceinvoke v20.<java.util.concurrent.locks.Lock: void unlock()>();
label7:
throw v18;
catch java.lang.Throwable from label1 to label4 with label6;
}
private java.lang.Object readLock(io.quarkus.arc.Lock, jakarta.interceptor.InvocationContext) throws java.lang.Exception
{
java.lang.Throwable v18;
io.quarkus.arc.LockException v9;
jakarta.interceptor.InvocationContext v2;
long v11, v4;
byte v5;
java.lang.String v12;
java.util.concurrent.locks.ReadWriteLock v13, v16, v19, v6;
boolean v3;
io.quarkus.arc.impl.LockInterceptor v0;
java.util.concurrent.TimeUnit v10, v8;
java.util.concurrent.locks.Lock v14, v17, v20, v7;
io.quarkus.arc.Lock v1;
java.lang.Object v15;
v0 := @this: io.quarkus.arc.impl.LockInterceptor;
v1 := @parameter0: io.quarkus.arc.Lock;
v2 := @parameter1: jakarta.interceptor.InvocationContext;
v3 = 0;
v4 = interfaceinvoke v1.<io.quarkus.arc.Lock: long time()>();
label1:
v5 = v4 cmp 0L;
if v5 <= 0 goto label2;
v6 = v0.<io.quarkus.arc.impl.LockInterceptor: java.util.concurrent.locks.ReadWriteLock readWriteLock>;
v7 = interfaceinvoke v6.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
v8 = interfaceinvoke v1.<io.quarkus.arc.Lock: java.util.concurrent.TimeUnit unit()>();
v3 = interfaceinvoke v7.<java.util.concurrent.locks.Lock: boolean tryLock(long,java.util.concurrent.TimeUnit)>(v4, v8);
if v3 != 0 goto label3;
v9 = new io.quarkus.arc.LockException;
v10 = interfaceinvoke v1.<io.quarkus.arc.Lock: java.util.concurrent.TimeUnit unit()>();
v11 = virtualinvoke v10.<java.util.concurrent.TimeUnit: long toMillis(long)>(v4);
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Read lock not acquired in \u0001 ms");
specialinvoke v9.<io.quarkus.arc.LockException: void <init>(java.lang.String)>(v12);
throw v9;
label2:
v13 = v0.<io.quarkus.arc.impl.LockInterceptor: java.util.concurrent.locks.ReadWriteLock readWriteLock>;
v14 = interfaceinvoke v13.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
interfaceinvoke v14.<java.util.concurrent.locks.Lock: void lock()>();
v3 = 1;
label3:
v15 = interfaceinvoke v2.<jakarta.interceptor.InvocationContext: java.lang.Object proceed()>();
label4:
if v3 == 0 goto label5;
v16 = v0.<io.quarkus.arc.impl.LockInterceptor: java.util.concurrent.locks.ReadWriteLock readWriteLock>;
v17 = interfaceinvoke v16.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
interfaceinvoke v17.<java.util.concurrent.locks.Lock: void unlock()>();
label5:
return v15;
label6:
v18 := @caughtexception;
if v3 == 0 goto label7;
v19 = v0.<io.quarkus.arc.impl.LockInterceptor: java.util.concurrent.locks.ReadWriteLock readWriteLock>;
v20 = interfaceinvoke v19.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
interfaceinvoke v20.<java.util.concurrent.locks.Lock: void unlock()>();
label7:
throw v18;
catch java.lang.Throwable from label1 to label4 with label6;
}
io.quarkus.arc.Lock getLock(jakarta.interceptor.InvocationContext)
{
io.quarkus.arc.impl.LockInterceptor v0;
java.util.Iterator v4;
io.quarkus.arc.LockException v9;
jakarta.interceptor.InvocationContext v1;
java.util.Map v2;
java.lang.'annotation'.Annotation v12;
java.lang.Class v7;
java.lang.Object v3, v6;
java.lang.String v11;
java.lang.reflect.Method v10;
boolean v5, v8;
v0 := @this: io.quarkus.arc.impl.LockInterceptor;
v1 := @parameter0: jakarta.interceptor.InvocationContext;
v2 = interfaceinvoke v1.<jakarta.interceptor.InvocationContext: java.util.Map getContextData()>();
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>("io.quarkus.arc.interceptorBindings");
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
v8 = virtualinvoke v7.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lio/quarkus/arc/Lock;");
if v8 == 0 goto label1;
return v12;
label2:
v9 = new io.quarkus.arc.LockException;
v10 = interfaceinvoke v1.<jakarta.interceptor.InvocationContext: java.lang.reflect.Method getMethod()>();
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Method)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("@Lock binding not found on business method \u0001");
specialinvoke v9.<io.quarkus.arc.LockException: void <init>(java.lang.String)>(v11);
throw v9;
}
}