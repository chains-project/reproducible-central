public final class io.quarkus.arc.impl.Reflections extends java.lang.Object
{
private static final io.quarkus.arc.impl.ComputingCache FIELDS_CACHE;
private static final io.quarkus.arc.impl.ComputingCache METHODS_CACHE;
static void clearCaches()
{
io.quarkus.arc.impl.ComputingCache v0, v1;
v0 = <io.quarkus.arc.impl.Reflections: io.quarkus.arc.impl.ComputingCache FIELDS_CACHE>;
virtualinvoke v0.<io.quarkus.arc.impl.ComputingCache: void clear()>();
v1 = <io.quarkus.arc.impl.Reflections: io.quarkus.arc.impl.ComputingCache METHODS_CACHE>;
virtualinvoke v1.<io.quarkus.arc.impl.ComputingCache: void clear()>();
return;
}
private void <init>()
{
io.quarkus.arc.impl.Reflections v0;
v0 := @this: io.quarkus.arc.impl.Reflections;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.reflect.Field findField(java.lang.Class, java.lang.String)
{
io.quarkus.arc.impl.Reflections$FieldKey v3;
io.quarkus.arc.impl.ComputingCache v2;
java.lang.Class v0;
java.lang.Object v4;
java.lang.String v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 = <io.quarkus.arc.impl.Reflections: io.quarkus.arc.impl.ComputingCache FIELDS_CACHE>;
v3 = new io.quarkus.arc.impl.Reflections$FieldKey;
specialinvoke v3.<io.quarkus.arc.impl.Reflections$FieldKey: void <init>(java.lang.Class,java.lang.String)>(v0, v1);
v4 = virtualinvoke v2.<io.quarkus.arc.impl.ComputingCache: java.lang.Object getValue(java.lang.Object)>(v3);
return v4;
}
private static java.lang.reflect.Field findFieldInternal(java.lang.Class, java.lang.String)
{
java.lang.IllegalArgumentException v7;
java.lang.reflect.Field v2, v6;
java.lang.NoSuchFieldException v3;
java.lang.Class v0, v4, v5;
java.lang.String v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
label1:
v2 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(v1);
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = virtualinvoke v0.<java.lang.Class: java.lang.Class getSuperclass()>();
if v4 == null goto label4;
v5 = virtualinvoke v0.<java.lang.Class: java.lang.Class getSuperclass()>();
v6 = staticinvoke <io.quarkus.arc.impl.Reflections: java.lang.reflect.Field findFieldInternal(java.lang.Class,java.lang.String)>(v5, v1);
return v6;
label4:
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(v3);
throw v7;
catch java.lang.NoSuchFieldException from label1 to label2 with label3;
}
public static transient java.lang.reflect.Method findMethod(java.lang.Class, java.lang.String, java.lang.Class[])
{
io.quarkus.arc.impl.ComputingCache v3;
io.quarkus.arc.impl.Reflections$MethodKey v4;
java.lang.Class[] v2;
java.lang.Class v0;
java.lang.Object v5;
java.lang.String v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Class[];
v3 = <io.quarkus.arc.impl.Reflections: io.quarkus.arc.impl.ComputingCache METHODS_CACHE>;
v4 = new io.quarkus.arc.impl.Reflections$MethodKey;
specialinvoke v4.<io.quarkus.arc.impl.Reflections$MethodKey: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, v1, v2);
v5 = virtualinvoke v3.<io.quarkus.arc.impl.ComputingCache: java.lang.Object getValue(java.lang.Object)>(v4);
return v5;
}
private static transient java.lang.reflect.Method findMethodInternal(java.lang.Class, java.lang.String, java.lang.Class[])
{
java.lang.NoSuchMethodException v13, v6;
java.util.HashSet v9;
int v15, v16;
java.lang.String v1, v21;
java.lang.reflect.Method v12, v5;
boolean v10, v18;
java.lang.Class[] v14, v2, v7;
java.lang.IllegalArgumentException v19;
java.util.List v20, v8;
java.lang.Class v0, v17, v3;
java.lang.Object v11;
java.util.ArrayDeque v4;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Class[];
v3 = v0;
v4 = new java.util.ArrayDeque;
specialinvoke v4.<java.util.ArrayDeque: void <init>()>();
label01:
if v3 == null goto label05;
label02:
v5 = virtualinvoke v3.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(v1, v2);
label03:
return v5;
label04:
v6 := @caughtexception;
v7 = virtualinvoke v3.<java.lang.Class: java.lang.Class[] getInterfaces()>();
v8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v7);
interfaceinvoke v4.<java.util.Deque: boolean addAll(java.util.Collection)>(v8);
v3 = virtualinvoke v3.<java.lang.Class: java.lang.Class getSuperclass()>();
goto label01;
label05:
v9 = new java.util.HashSet;
specialinvoke v9.<java.util.HashSet: void <init>(java.util.Collection)>(v4);
label06:
v10 = interfaceinvoke v4.<java.util.Deque: boolean isEmpty()>();
if v10 != 0 goto label12;
v11 = interfaceinvoke v4.<java.util.Deque: java.lang.Object pop()>();
label07:
v12 = virtualinvoke v11.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(v1, v2);
label08:
return v12;
label09:
v13 := @caughtexception;
v14 = virtualinvoke v11.<java.lang.Class: java.lang.Class[] getInterfaces()>();
v15 = lengthof v14;
v16 = 0;
label10:
if v16 >= v15 goto label06;
v17 = v14[v16];
v18 = interfaceinvoke v9.<java.util.Set: boolean add(java.lang.Object)>(v17);
if v18 == 0 goto label11;
interfaceinvoke v4.<java.util.Deque: boolean add(java.lang.Object)>(v17);
label11:
v16 = v16 + 1;
goto label10;
label12:
v19 = new java.lang.IllegalArgumentException;
v20 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
v21 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.util.List,java.lang.Class)>(v1, v20, v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot find method \u0001\u0001 on \u0001");
specialinvoke v19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v21);
throw v19;
catch java.lang.NoSuchMethodException from label02 to label03 with label04;
catch java.lang.NoSuchMethodException from label07 to label08 with label09;
}
public static transient java.lang.reflect.Constructor findConstructor(java.lang.Class, java.lang.Class[])
{
java.lang.NoSuchMethodException v3;
java.lang.Class[] v1;
java.lang.Class v0;
java.lang.IllegalArgumentException v4;
java.lang.reflect.Constructor v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class[];
label1:
v2 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(v1);
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(v3);
throw v4;
catch java.lang.NoSuchMethodException from label1 to label2 with label3;
}
public static java.lang.Object newInstance(java.lang.Class, java.lang.Class[], java.lang.Object[])
{
java.lang.Throwable v7;
java.lang.Object[] v2;
java.lang.reflect.Constructor v3;
java.lang.String v13, v14, v16, v17, v18;
boolean v4, v8, v9;
jakarta.enterprise.inject.CreationException v10;
java.lang.Class[] v1;
java.lang.RuntimeException v12, v15;
java.lang.Exception v11;
java.lang.reflect.InvocationTargetException v6;
java.lang.Class v0;
java.lang.Object v5;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class[];
v2 := @parameter2: java.lang.Object[];
v3 = staticinvoke <io.quarkus.arc.impl.Reflections: java.lang.reflect.Constructor findConstructor(java.lang.Class,java.lang.Class[])>(v0, v1);
if v3 == null goto label7;
v4 = virtualinvoke v3.<java.lang.reflect.Constructor: boolean canAccess(java.lang.Object)>(null);
if v4 != 0 goto label1;
virtualinvoke v3.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);
label1:
v5 = virtualinvoke v3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v2);
label2:
return v5;
label3:
v6 := @caughtexception;
v7 = virtualinvoke v6.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
v8 = v7 instanceof java.lang.RuntimeException;
if v8 == 0 goto label4;
throw v7;
label4:
v9 = v7 instanceof java.lang.Error;
if v9 == 0 goto label5;
throw v7;
label5:
v10 = new jakarta.enterprise.inject.CreationException;
specialinvoke v10.<jakarta.enterprise.inject.CreationException: void <init>(java.lang.Throwable)>(v7);
throw v10;
label6:
v11 := @caughtexception;
v12 = new java.lang.RuntimeException;
v13 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot invoke constructor: \u0001");
specialinvoke v12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v14, v11);
throw v12;
label7:
v15 = new java.lang.RuntimeException;
v16 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(v1);
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v16, v17) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No \u0001constructor found for params: \u0001");
specialinvoke v15.<java.lang.RuntimeException: void <init>(java.lang.String)>(v18);
throw v15;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
catch java.lang.InstantiationException from label1 to label2 with label6;
catch java.lang.IllegalAccessException from label1 to label2 with label6;
catch java.lang.IllegalArgumentException from label1 to label2 with label6;
}
public static java.lang.Object readField(java.lang.Class, java.lang.String, java.lang.Object)
{
java.lang.RuntimeException v7;
java.lang.reflect.Field v3;
java.lang.Exception v6;
java.lang.Class v0;
java.lang.Object v2, v5;
java.lang.String v1, v8, v9;
boolean v4;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object;
label1:
v3 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(v1);
v4 = virtualinvoke v3.<java.lang.reflect.Field: boolean canAccess(java.lang.Object)>(v2);
if v4 != 0 goto label2;
virtualinvoke v3.<java.lang.reflect.Field: void setAccessible(boolean)>(1);
label2:
v5 = virtualinvoke v3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(v2);
label3:
return v5;
label4:
v6 := @caughtexception;
v7 = new java.lang.RuntimeException;
v8 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v8, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot read field value: \u0001#\u0001");
specialinvoke v7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v9, v6);
throw v7;
catch java.lang.NoSuchFieldException from label1 to label3 with label4;
catch java.lang.SecurityException from label1 to label3 with label4;
catch java.lang.IllegalArgumentException from label1 to label3 with label4;
catch java.lang.IllegalAccessException from label1 to label3 with label4;
}
public static void writeField(java.lang.Class, java.lang.String, java.lang.Object, java.lang.Object)
{
java.lang.RuntimeException v7;
java.lang.reflect.Field v4;
java.lang.Exception v6;
java.lang.Class v0;
java.lang.Object v2, v3;
java.lang.String v1, v8, v9;
boolean v5;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object;
v3 := @parameter3: java.lang.Object;
label1:
v4 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(v1);
v5 = virtualinvoke v4.<java.lang.reflect.Field: boolean canAccess(java.lang.Object)>(v2);
if v5 != 0 goto label2;
virtualinvoke v4.<java.lang.reflect.Field: void setAccessible(boolean)>(1);
label2:
virtualinvoke v4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(v2, v3);
label3:
goto label5;
label4:
v6 := @caughtexception;
v7 = new java.lang.RuntimeException;
v8 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v8, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot set field value: \u0001#\u0001");
specialinvoke v7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v9, v6);
throw v7;
label5:
return;
catch java.lang.NoSuchFieldException from label1 to label3 with label4;
catch java.lang.SecurityException from label1 to label3 with label4;
catch java.lang.IllegalArgumentException from label1 to label3 with label4;
catch java.lang.IllegalAccessException from label1 to label3 with label4;
}
public static java.lang.Object invokeMethod(java.lang.Class, java.lang.String, java.lang.Class[], java.lang.Object, java.lang.Object[])
{
java.lang.Throwable v9;
java.lang.Object[] v4;
java.lang.String v1, v12, v13, v16, v17;
java.lang.reflect.Method v5;
boolean v10, v6;
java.lang.Class[] v2;
java.lang.RuntimeException v11, v15;
java.lang.Exception v14;
java.lang.reflect.InvocationTargetException v8;
java.lang.Class v0;
java.lang.Object v3, v7;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Class[];
v3 := @parameter3: java.lang.Object;
v4 := @parameter4: java.lang.Object[];
label1:
v5 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(v1, v2);
v6 = virtualinvoke v5.<java.lang.reflect.Method: boolean canAccess(java.lang.Object)>(v3);
if v6 != 0 goto label2;
virtualinvoke v5.<java.lang.reflect.Method: void setAccessible(boolean)>(1);
label2:
v7 = virtualinvoke v5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v3, v4);
label3:
return v7;
label4:
v8 := @caughtexception;
v9 = virtualinvoke v8.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();
v10 = v9 instanceof java.lang.RuntimeException;
if v10 == 0 goto label5;
throw v9;
label5:
v11 = new java.lang.RuntimeException;
v12 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.Object)>(v12, v1, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot invoke method: \u0001#\u0001 on \u0001");
specialinvoke v11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v13, v8);
throw v11;
label6:
v14 := @caughtexception;
v15 = new java.lang.RuntimeException;
v16 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.Object)>(v16, v1, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot invoke method: \u0001#\u0001 on \u0001");
specialinvoke v15.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v17, v14);
throw v15;
catch java.lang.reflect.InvocationTargetException from label1 to label3 with label4;
catch java.lang.NoSuchMethodException from label1 to label3 with label6;
catch java.lang.SecurityException from label1 to label3 with label6;
catch java.lang.IllegalArgumentException from label1 to label3 with label6;
catch java.lang.IllegalAccessException from label1 to label3 with label6;
}
static java.lang.Object cast(java.lang.Object)
{
java.lang.Object v0;
v0 := @parameter0: java.lang.Object;
return v0;
}
public static java.lang.Class getRawType(java.lang.reflect.Type)
{
boolean v1, v10, v13, v2, v5, v7;
java.lang.reflect.ParameterizedType v3;
java.lang.reflect.Type v0, v14, v4, v6;
java.lang.reflect.Type[] v11, v8;
java.lang.Class v12, v15, v17, v9;
java.lang.Object v16;
v0 := @parameter0: java.lang.reflect.Type;
v1 = v0 instanceof java.lang.Class;
if v1 == 0 goto label1;
return v0;
label1:
v2 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v0);
if v2 == 0 goto label2;
v3 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v0);
v4 = interfaceinvoke v3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v5 = v4 instanceof java.lang.Class;
if v5 == 0 goto label2;
v6 = interfaceinvoke v3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
return v6;
label2:
v7 = v0 instanceof java.lang.reflect.TypeVariable;
if v7 == 0 goto label3;
v8 = interfaceinvoke v0.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
v9 = staticinvoke <io.quarkus.arc.impl.Reflections: java.lang.Class getBound(java.lang.reflect.Type[])>(v8);
return v9;
label3:
v10 = v0 instanceof java.lang.reflect.WildcardType;
if v10 == 0 goto label4;
v11 = interfaceinvoke v0.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();
v12 = staticinvoke <io.quarkus.arc.impl.Reflections: java.lang.Class getBound(java.lang.reflect.Type[])>(v11);
return v12;
label4:
v13 = v0 instanceof java.lang.reflect.GenericArrayType;
if v13 == 0 goto label5;
v14 = interfaceinvoke v0.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v15 = staticinvoke <io.quarkus.arc.impl.Reflections: java.lang.Class getRawType(java.lang.reflect.Type)>(v14);
if v15 == null goto label5;
v16 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v15, 0);
v17 = virtualinvoke v16.<java.lang.Object: java.lang.Class getClass()>();
return v17;
label5:
return null;
}
private static java.lang.Class getBound(java.lang.reflect.Type[])
{
java.lang.reflect.Type v2;
int v1;
java.lang.reflect.Type[] v0;
java.lang.Class v3;
v0 := @parameter0: java.lang.reflect.Type[];
v1 = lengthof v0;
if v1 != 0 goto label1;
return class "Ljava/lang/Object;";
label1:
v2 = v0[0];
v3 = staticinvoke <io.quarkus.arc.impl.Reflections: java.lang.Class getRawType(java.lang.reflect.Type)>(v2);
return v3;
}
static void <clinit>()
{
io.quarkus.arc.impl.ComputingCache v0, v2;
io.quarkus.arc.impl.Reflections$1 v1;
io.quarkus.arc.impl.Reflections$2 v3;
v0 = new io.quarkus.arc.impl.ComputingCache;
v1 = new io.quarkus.arc.impl.Reflections$1;
specialinvoke v1.<io.quarkus.arc.impl.Reflections$1: void <init>()>();
specialinvoke v0.<io.quarkus.arc.impl.ComputingCache: void <init>(java.util.function.Function)>(v1);
<io.quarkus.arc.impl.Reflections: io.quarkus.arc.impl.ComputingCache FIELDS_CACHE> = v0;
v2 = new io.quarkus.arc.impl.ComputingCache;
v3 = new io.quarkus.arc.impl.Reflections$2;
specialinvoke v3.<io.quarkus.arc.impl.Reflections$2: void <init>()>();
specialinvoke v2.<io.quarkus.arc.impl.ComputingCache: void <init>(java.util.function.Function)>(v3);
<io.quarkus.arc.impl.Reflections: io.quarkus.arc.impl.ComputingCache METHODS_CACHE> = v2;
return;
}
}