public class io.quarkus.arc.runtime.ArcTestRequestScopeProvider extends java.lang.Object implements io.quarkus.runtime.test.TestScopeSetup
{
private static final org.jboss.logging.Logger LOGGER;
public void <init>()
{
io.quarkus.arc.runtime.ArcTestRequestScopeProvider v0;
v0 := @this: io.quarkus.arc.runtime.ArcTestRequestScopeProvider;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void setup(boolean)
{
io.quarkus.arc.ManagedContext v4;
org.jboss.logging.Logger v3;
io.quarkus.arc.ArcContainer v2;
boolean v1;
io.quarkus.arc.runtime.ArcTestRequestScopeProvider v0;
v0 := @this: io.quarkus.arc.runtime.ArcTestRequestScopeProvider;
v1 := @parameter0: boolean;
if v1 == 0 goto label1;
return;
label1:
v2 = staticinvoke <io.quarkus.arc.Arc: io.quarkus.arc.ArcContainer container()>();
if v2 != null goto label2;
v3 = <io.quarkus.arc.runtime.ArcTestRequestScopeProvider: org.jboss.logging.Logger LOGGER>;
virtualinvoke v3.<org.jboss.logging.Logger: void warn(java.lang.Object)>("Container not available, ignoring setup");
goto label3;
label2:
v4 = interfaceinvoke v2.<io.quarkus.arc.ArcContainer: io.quarkus.arc.ManagedContext requestContext()>();
interfaceinvoke v4.<io.quarkus.arc.ManagedContext: void activate()>();
label3:
return;
}
public void tearDown(boolean)
{
io.quarkus.arc.ManagedContext v4;
org.jboss.logging.Logger v3;
io.quarkus.arc.ArcContainer v2;
boolean v1;
io.quarkus.arc.runtime.ArcTestRequestScopeProvider v0;
v0 := @this: io.quarkus.arc.runtime.ArcTestRequestScopeProvider;
v1 := @parameter0: boolean;
if v1 == 0 goto label1;
return;
label1:
v2 = staticinvoke <io.quarkus.arc.Arc: io.quarkus.arc.ArcContainer container()>();
if v2 != null goto label2;
v3 = <io.quarkus.arc.runtime.ArcTestRequestScopeProvider: org.jboss.logging.Logger LOGGER>;
virtualinvoke v3.<org.jboss.logging.Logger: void warn(java.lang.Object)>("Container not available, ignoring tearDown");
goto label3;
label2:
v4 = interfaceinvoke v2.<io.quarkus.arc.ArcContainer: io.quarkus.arc.ManagedContext requestContext()>();
interfaceinvoke v4.<io.quarkus.arc.ManagedContext: void terminate()>();
label3:
return;
}
static void <clinit>()
{
org.jboss.logging.Logger v0;
v0 = staticinvoke <org.jboss.logging.Logger: org.jboss.logging.Logger getLogger(java.lang.Class)>(class "Lio/quarkus/arc/runtime/ArcTestRequestScopeProvider;");
<io.quarkus.arc.runtime.ArcTestRequestScopeProvider: org.jboss.logging.Logger LOGGER> = v0;
return;
}
}