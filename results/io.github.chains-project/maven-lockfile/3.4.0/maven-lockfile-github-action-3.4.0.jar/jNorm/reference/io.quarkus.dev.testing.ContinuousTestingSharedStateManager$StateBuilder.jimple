public class io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder extends java.lang.Object
{
long lastRun;
boolean running;
boolean inProgress;
long run;
long passed;
long failed;
long skipped;
long currentPassed;
long currentFailed;
long currentSkipped;
boolean isBrokenOnly;
boolean isTestOutput;
boolean isInstrumentationBasedReload;
boolean isLiveReload;
public void <init>()
{
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void <init>(io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State)
{
long v10, v11, v2, v5, v6, v7, v8, v9;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State v1;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
boolean v12, v13, v14, v15, v3, v4;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 := @parameter0: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long lastRun>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long lastRun> = v2;
v3 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: boolean running>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean running> = v3;
v4 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: boolean inProgress>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean inProgress> = v4;
v5 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long run>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long run> = v5;
v6 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long passed>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long passed> = v6;
v7 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long failed>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long failed> = v7;
v8 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long skipped>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long skipped> = v8;
v9 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long currentPassed>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long currentPassed> = v9;
v10 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long currentFailed>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long currentFailed> = v10;
v11 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long currentSkipped>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long currentSkipped> = v11;
v12 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: boolean isBrokenOnly>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean isBrokenOnly> = v12;
v13 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: boolean isTestOutput>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean isTestOutput> = v13;
v14 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: boolean isInstrumentationBasedReload>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean isInstrumentationBasedReload> = v14;
v15 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: boolean isLiveReload>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean isLiveReload> = v15;
return;
}
public io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder setLastRun(long)
{
long v1;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 := @parameter0: long;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long lastRun> = v1;
return v0;
}
public io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder setRunning(boolean)
{
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
boolean v1;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 := @parameter0: boolean;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean running> = v1;
return v0;
}
public io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder setInProgress(boolean)
{
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
boolean v1;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 := @parameter0: boolean;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean inProgress> = v1;
return v0;
}
public io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder setRun(long)
{
long v1;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 := @parameter0: long;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long run> = v1;
return v0;
}
public io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder setPassed(long)
{
long v1;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 := @parameter0: long;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long passed> = v1;
return v0;
}
public io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder setFailed(long)
{
long v1;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 := @parameter0: long;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long failed> = v1;
return v0;
}
public io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder setSkipped(long)
{
long v1;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 := @parameter0: long;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long skipped> = v1;
return v0;
}
public io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder setCurrentPassed(long)
{
long v1;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 := @parameter0: long;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long currentPassed> = v1;
return v0;
}
public io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder setCurrentFailed(long)
{
long v1;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 := @parameter0: long;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long currentFailed> = v1;
return v0;
}
public io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder setCurrentSkipped(long)
{
long v1;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 := @parameter0: long;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long currentSkipped> = v1;
return v0;
}
public io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder setIsBrokenOnly(boolean)
{
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
boolean v1;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 := @parameter0: boolean;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean isBrokenOnly> = v1;
return v0;
}
public io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder setIsTestOutput(boolean)
{
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
boolean v1;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 := @parameter0: boolean;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean isTestOutput> = v1;
return v0;
}
public io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder setIsInstrumentationBasedReload(boolean)
{
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
boolean v1;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 := @parameter0: boolean;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean isInstrumentationBasedReload> = v1;
return v0;
}
public io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder setIsLiveReload(boolean)
{
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
boolean v1;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 := @parameter0: boolean;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean isLiveReload> = v1;
return v0;
}
public long getLastRun()
{
long v1;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long lastRun>;
return v1;
}
public boolean isRunning()
{
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
boolean v1;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean running>;
return v1;
}
public boolean isInProgress()
{
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
boolean v1;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean inProgress>;
return v1;
}
public long getRun()
{
long v1;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long run>;
return v1;
}
public long getPassed()
{
long v1;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long passed>;
return v1;
}
public long getFailed()
{
long v1;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long failed>;
return v1;
}
public long getSkipped()
{
long v1;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long skipped>;
return v1;
}
public long getCurrentPassed()
{
long v1;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long currentPassed>;
return v1;
}
public long getCurrentFailed()
{
long v1;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long currentFailed>;
return v1;
}
public long getCurrentSkipped()
{
long v1;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long currentSkipped>;
return v1;
}
public boolean isBrokenOnly()
{
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
boolean v1;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean isBrokenOnly>;
return v1;
}
public boolean isTestOutput()
{
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
boolean v1;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean isTestOutput>;
return v1;
}
public boolean isInstrumentationBasedReload()
{
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
boolean v1;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean isInstrumentationBasedReload>;
return v1;
}
public boolean isLiveReload()
{
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
boolean v1;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean isLiveReload>;
return v1;
}
public io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State build()
{
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v0;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State v1;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
v1 = new io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State;
specialinvoke v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: void <init>(io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder)>(v0);
return v1;
}
}