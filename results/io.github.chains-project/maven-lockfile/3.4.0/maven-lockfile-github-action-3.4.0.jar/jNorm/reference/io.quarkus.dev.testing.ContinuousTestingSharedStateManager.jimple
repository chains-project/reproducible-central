public class io.quarkus.dev.testing.ContinuousTestingSharedStateManager extends java.lang.Object
{
private static final java.util.concurrent.CopyOnWriteArraySet stateListeners;
public static final io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State INITIAL_STATE;
private static volatile io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State lastState;
public void <init>()
{
io.quarkus.dev.testing.ContinuousTestingSharedStateManager v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static void addStateListener(java.util.function.Consumer)
{
java.util.function.Consumer v0;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State v2, v3;
java.util.concurrent.CopyOnWriteArraySet v1;
v0 := @parameter0: java.util.function.Consumer;
v1 = <io.quarkus.dev.testing.ContinuousTestingSharedStateManager: java.util.concurrent.CopyOnWriteArraySet stateListeners>;
virtualinvoke v1.<java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>(v0);
v2 = <io.quarkus.dev.testing.ContinuousTestingSharedStateManager: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State lastState>;
if v2 == null goto label1;
v3 = <io.quarkus.dev.testing.ContinuousTestingSharedStateManager: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State lastState>;
interfaceinvoke v0.<java.util.function.Consumer: void accept(java.lang.Object)>(v3);
label1:
return;
}
public static void removeStateListener(java.util.function.Consumer)
{
java.util.function.Consumer v0;
java.util.concurrent.CopyOnWriteArraySet v1;
v0 := @parameter0: java.util.function.Consumer;
v1 = <io.quarkus.dev.testing.ContinuousTestingSharedStateManager: java.util.concurrent.CopyOnWriteArraySet stateListeners>;
virtualinvoke v1.<java.util.concurrent.CopyOnWriteArraySet: boolean remove(java.lang.Object)>(v0);
return;
}
public static void reset()
{
java.util.function.Function v0;
v0 = staticinvoke <io.quarkus.dev.testing.ContinuousTestingSharedStateManager$lambda_reset_0__3046: java.util.function.Function bootstrap$()>();
staticinvoke <io.quarkus.dev.testing.ContinuousTestingSharedStateManager: void setLastState(java.util.function.Function)>(v0);
return;
}
public static void setLastState(java.util.function.Function)
{
java.lang.Throwable v4;
java.util.Iterator v6;
java.util.concurrent.CopyOnWriteArraySet v5;
java.util.function.Function v0;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State v1;
java.lang.Object v3, v8;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v2;
boolean v7;
v0 := @parameter0: java.util.function.Function;
entermonitor class "Lio/quarkus/dev/testing/ContinuousTestingSharedStateManager;";
label1:
v1 = <io.quarkus.dev.testing.ContinuousTestingSharedStateManager: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State lastState>;
v2 = virtualinvoke v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder builder()>();
v3 = interfaceinvoke v0.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v2);
<io.quarkus.dev.testing.ContinuousTestingSharedStateManager: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State lastState> = v3;
exitmonitor class "Lio/quarkus/dev/testing/ContinuousTestingSharedStateManager;";
label2:
goto label4;
label3:
v4 := @caughtexception;
exitmonitor class "Lio/quarkus/dev/testing/ContinuousTestingSharedStateManager;";
throw v4;
label4:
v5 = <io.quarkus.dev.testing.ContinuousTestingSharedStateManager: java.util.concurrent.CopyOnWriteArraySet stateListeners>;
v6 = virtualinvoke v5.<java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>();
label5:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label6;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v8.<java.util.function.Consumer: void accept(java.lang.Object)>(v3);
goto label5;
label6:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State getLastState()
{
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State v0;
v0 = <io.quarkus.dev.testing.ContinuousTestingSharedStateManager: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State lastState>;
return v0;
}
public static void setInProgress(boolean)
{
java.util.function.Function v1;
boolean v0;
v0 := @parameter0: boolean;
v1 = staticinvoke <io.quarkus.dev.testing.ContinuousTestingSharedStateManager$lambda_setInProgress_1__3047: java.util.function.Function bootstrap$(boolean)>(v0);
staticinvoke <io.quarkus.dev.testing.ContinuousTestingSharedStateManager: void setLastState(java.util.function.Function)>(v1);
return;
}
public static void setRunning(boolean)
{
java.util.function.Function v1;
boolean v0;
v0 := @parameter0: boolean;
v1 = staticinvoke <io.quarkus.dev.testing.ContinuousTestingSharedStateManager$lambda_setRunning_2__3048: java.util.function.Function bootstrap$(boolean)>(v0);
staticinvoke <io.quarkus.dev.testing.ContinuousTestingSharedStateManager: void setLastState(java.util.function.Function)>(v1);
return;
}
public static void setBrokenOnly(boolean)
{
java.util.function.Function v1;
boolean v0;
v0 := @parameter0: boolean;
v1 = staticinvoke <io.quarkus.dev.testing.ContinuousTestingSharedStateManager$lambda_setBrokenOnly_3__3049: java.util.function.Function bootstrap$(boolean)>(v0);
staticinvoke <io.quarkus.dev.testing.ContinuousTestingSharedStateManager: void setLastState(java.util.function.Function)>(v1);
return;
}
public static void setTestOutput(boolean)
{
java.util.function.Function v1;
boolean v0;
v0 := @parameter0: boolean;
v1 = staticinvoke <io.quarkus.dev.testing.ContinuousTestingSharedStateManager$lambda_setTestOutput_4__3050: java.util.function.Function bootstrap$(boolean)>(v0);
staticinvoke <io.quarkus.dev.testing.ContinuousTestingSharedStateManager: void setLastState(java.util.function.Function)>(v1);
return;
}
public static void setInstrumentationBasedReload(boolean)
{
java.util.function.Function v1;
boolean v0;
v0 := @parameter0: boolean;
v1 = staticinvoke <io.quarkus.dev.testing.ContinuousTestingSharedStateManager$lambda_setInstrumentationBasedReload_5__3051: java.util.function.Function bootstrap$(boolean)>(v0);
staticinvoke <io.quarkus.dev.testing.ContinuousTestingSharedStateManager: void setLastState(java.util.function.Function)>(v1);
return;
}
public static void setLiveReloadEnabled(boolean)
{
java.util.function.Function v1;
boolean v0;
v0 := @parameter0: boolean;
v1 = staticinvoke <io.quarkus.dev.testing.ContinuousTestingSharedStateManager$lambda_setLiveReloadEnabled_6__3052: java.util.function.Function bootstrap$(boolean)>(v0);
staticinvoke <io.quarkus.dev.testing.ContinuousTestingSharedStateManager: void setLastState(java.util.function.Function)>(v1);
return;
}
static void <clinit>()
{
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State v4, v5;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v1, v2, v3;
java.util.concurrent.CopyOnWriteArraySet v0;
v0 = new java.util.concurrent.CopyOnWriteArraySet;
specialinvoke v0.<java.util.concurrent.CopyOnWriteArraySet: void <init>()>();
<io.quarkus.dev.testing.ContinuousTestingSharedStateManager: java.util.concurrent.CopyOnWriteArraySet stateListeners> = v0;
v1 = new io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
specialinvoke v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: void <init>()>();
v2 = virtualinvoke v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder setLastRun(long)>(-1L);
v3 = virtualinvoke v2.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder setIsLiveReload(boolean)>(1);
v4 = virtualinvoke v3.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State build()>();
<io.quarkus.dev.testing.ContinuousTestingSharedStateManager: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State INITIAL_STATE> = v4;
v5 = <io.quarkus.dev.testing.ContinuousTestingSharedStateManager: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State INITIAL_STATE>;
<io.quarkus.dev.testing.ContinuousTestingSharedStateManager: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State lastState> = v5;
return;
}
}