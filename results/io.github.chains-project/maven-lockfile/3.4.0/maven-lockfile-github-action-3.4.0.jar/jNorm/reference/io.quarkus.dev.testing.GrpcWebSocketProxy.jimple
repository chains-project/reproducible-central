public class io.quarkus.dev.testing.GrpcWebSocketProxy extends java.lang.Object
{
private static final java.util.concurrent.atomic.AtomicInteger connectionIdSeq;
private static volatile io.quarkus.dev.testing.GrpcWebSocketProxy$WebSocketListener webSocketListener;
private static final java.util.Map webSocketConnections;
public void <init>()
{
io.quarkus.dev.testing.GrpcWebSocketProxy v0;
v0 := @this: io.quarkus.dev.testing.GrpcWebSocketProxy;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.Integer addWebSocket(java.util.function.Consumer, java.util.function.Consumer)
{
io.quarkus.dev.testing.GrpcWebSocketProxy$WebSocketListener v2, v5;
java.lang.Integer v7, v8;
java.util.function.Consumer v0, v1;
java.util.concurrent.atomic.AtomicInteger v3;
java.util.Map v6;
int v4;
v0 := @parameter0: java.util.function.Consumer;
v1 := @parameter1: java.util.function.Consumer;
v2 = <io.quarkus.dev.testing.GrpcWebSocketProxy: io.quarkus.dev.testing.GrpcWebSocketProxy$WebSocketListener webSocketListener>;
if v2 == null goto label1;
v3 = <io.quarkus.dev.testing.GrpcWebSocketProxy: java.util.concurrent.atomic.AtomicInteger connectionIdSeq>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
v5 = <io.quarkus.dev.testing.GrpcWebSocketProxy: io.quarkus.dev.testing.GrpcWebSocketProxy$WebSocketListener webSocketListener>;
interfaceinvoke v5.<io.quarkus.dev.testing.GrpcWebSocketProxy$WebSocketListener: void onOpen(int,java.util.function.Consumer)>(v4, v0);
v6 = <io.quarkus.dev.testing.GrpcWebSocketProxy: java.util.Map webSocketConnections>;
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v7, v1);
v8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
return v8;
label1:
return null;
}
public static void closeAll()
{
io.quarkus.dev.testing.GrpcWebSocketProxy$WebSocketListener v10;
java.lang.Runnable v9;
java.util.Map v1, v3;
int v12, v2;
boolean v14, v6;
java.io.PrintStream v15, v17;
java.util.Iterator v5;
java.util.Set v4;
java.util.concurrent.TimeUnit v13;
java.util.concurrent.CountDownLatch v0;
java.lang.InterruptedException v16;
java.lang.Object v11, v7, v8;
v0 = new java.util.concurrent.CountDownLatch;
v1 = <io.quarkus.dev.testing.GrpcWebSocketProxy: java.util.Map webSocketConnections>;
v2 = interfaceinvoke v1.<java.util.Map: int size()>();
specialinvoke v0.<java.util.concurrent.CountDownLatch: void <init>(int)>(v2);
v3 = <io.quarkus.dev.testing.GrpcWebSocketProxy: java.util.Map webSocketConnections>;
v4 = interfaceinvoke v3.<java.util.Map: java.util.Set entrySet()>();
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v9 = staticinvoke <io.quarkus.dev.testing.GrpcWebSocketProxy$countDown__3045: java.lang.Runnable bootstrap$(java.util.concurrent.CountDownLatch)>(v0);
interfaceinvoke v8.<java.util.function.Consumer: void accept(java.lang.Object)>(v9);
v10 = <io.quarkus.dev.testing.GrpcWebSocketProxy: io.quarkus.dev.testing.GrpcWebSocketProxy$WebSocketListener webSocketListener>;
v11 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getKey()>();
v12 = virtualinvoke v11.<java.lang.Integer: int intValue()>();
interfaceinvoke v10.<io.quarkus.dev.testing.GrpcWebSocketProxy$WebSocketListener: void onClose(int)>(v12);
goto label1;
label2:
v13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v14 = virtualinvoke v0.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(5L, v13);
if v14 != 0 goto label5;
v15 = <java.lang.System: java.io.PrintStream err>;
virtualinvoke v15.<java.io.PrintStream: void println(java.lang.String)>("Failed to close all the websockets in 5 seconds");
label3:
goto label5;
label4:
v16 := @caughtexception;
v17 = <java.lang.System: java.io.PrintStream err>;
virtualinvoke v17.<java.io.PrintStream: void println(java.lang.String)>("Interrupted while waiting for websockets to be closed");
label5:
return;
catch java.lang.InterruptedException from label2 to label3 with label4;
}
public static void closeWebSocket(int)
{
int v0;
io.quarkus.dev.testing.GrpcWebSocketProxy$WebSocketListener v1;
v0 := @parameter0: int;
v1 = <io.quarkus.dev.testing.GrpcWebSocketProxy: io.quarkus.dev.testing.GrpcWebSocketProxy$WebSocketListener webSocketListener>;
interfaceinvoke v1.<io.quarkus.dev.testing.GrpcWebSocketProxy$WebSocketListener: void onClose(int)>(v0);
return;
}
public static void setWebSocketListener(io.quarkus.dev.testing.GrpcWebSocketProxy$WebSocketListener)
{
io.quarkus.dev.testing.GrpcWebSocketProxy$WebSocketListener v0;
v0 := @parameter0: io.quarkus.dev.testing.GrpcWebSocketProxy$WebSocketListener;
<io.quarkus.dev.testing.GrpcWebSocketProxy: io.quarkus.dev.testing.GrpcWebSocketProxy$WebSocketListener webSocketListener> = v0;
return;
}
public static void addMessage(java.lang.Integer, java.lang.String)
{
io.quarkus.dev.testing.GrpcWebSocketProxy$WebSocketListener v2;
int v3;
java.lang.String v1;
java.lang.Integer v0;
v0 := @parameter0: java.lang.Integer;
v1 := @parameter1: java.lang.String;
v2 = <io.quarkus.dev.testing.GrpcWebSocketProxy: io.quarkus.dev.testing.GrpcWebSocketProxy$WebSocketListener webSocketListener>;
v3 = virtualinvoke v0.<java.lang.Integer: int intValue()>();
interfaceinvoke v2.<io.quarkus.dev.testing.GrpcWebSocketProxy$WebSocketListener: void newMessage(int,java.lang.String)>(v3, v1);
return;
}
static void <clinit>()
{
java.util.concurrent.ConcurrentHashMap v1;
java.util.concurrent.atomic.AtomicInteger v0;
v0 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
<io.quarkus.dev.testing.GrpcWebSocketProxy: java.util.concurrent.atomic.AtomicInteger connectionIdSeq> = v0;
v1 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
<io.quarkus.dev.testing.GrpcWebSocketProxy: java.util.Map webSocketConnections> = v1;
return;
}
}