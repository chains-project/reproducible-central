public class io.quarkus.dev.testing.TestWatchedFiles extends java.lang.Object
{
private static volatile java.util.Map watchedFilePaths;
private static volatile java.util.function.BiConsumer watchedFilesListener;
private static volatile java.util.List watchedFilePredicates;
public void <init>()
{
io.quarkus.dev.testing.TestWatchedFiles v0;
v0 := @this: io.quarkus.dev.testing.TestWatchedFiles;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static synchronized void setWatchedFilePaths(java.util.Map)
{
java.util.List v3;
java.util.Map v0;
java.util.function.BiConsumer v1, v2;
v0 := @parameter0: java.util.Map;
<io.quarkus.dev.testing.TestWatchedFiles: java.util.Map watchedFilePaths> = v0;
v1 = <io.quarkus.dev.testing.TestWatchedFiles: java.util.function.BiConsumer watchedFilesListener>;
if v1 == null goto label1;
v2 = <io.quarkus.dev.testing.TestWatchedFiles: java.util.function.BiConsumer watchedFilesListener>;
v3 = staticinvoke <java.util.List: java.util.List of()>();
interfaceinvoke v2.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(v0, v3);
label1:
return;
}
public static synchronized void setWatchedFilesListener(java.util.function.Consumer)
{
java.util.function.Consumer v0;
java.util.Map v2, v3;
io.quarkus.dev.testing.TestWatchedFiles$1 v1;
v0 := @parameter0: java.util.function.Consumer;
v1 = new io.quarkus.dev.testing.TestWatchedFiles$1;
specialinvoke v1.<io.quarkus.dev.testing.TestWatchedFiles$1: void <init>(java.util.function.Consumer)>(v0);
<io.quarkus.dev.testing.TestWatchedFiles: java.util.function.BiConsumer watchedFilesListener> = v1;
v2 = <io.quarkus.dev.testing.TestWatchedFiles: java.util.Map watchedFilePaths>;
if v2 == null goto label1;
v3 = <io.quarkus.dev.testing.TestWatchedFiles: java.util.Map watchedFilePaths>;
interfaceinvoke v0.<java.util.function.Consumer: void accept(java.lang.Object)>(v3);
label1:
return;
}
public static synchronized void setWatchedFilePaths(java.util.Map, java.util.List)
{
java.util.List v1;
java.util.Map v0;
java.util.function.BiConsumer v2, v3;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: java.util.List;
<io.quarkus.dev.testing.TestWatchedFiles: java.util.Map watchedFilePaths> = v0;
<io.quarkus.dev.testing.TestWatchedFiles: java.util.List watchedFilePredicates> = v1;
v2 = <io.quarkus.dev.testing.TestWatchedFiles: java.util.function.BiConsumer watchedFilesListener>;
if v2 == null goto label1;
v3 = <io.quarkus.dev.testing.TestWatchedFiles: java.util.function.BiConsumer watchedFilesListener>;
interfaceinvoke v3.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(v0, v1);
label1:
return;
}
public static synchronized void setWatchedFilesListener(java.util.function.BiConsumer)
{
java.util.List v3;
java.util.Map v1, v2;
java.util.function.BiConsumer v0;
v0 := @parameter0: java.util.function.BiConsumer;
<io.quarkus.dev.testing.TestWatchedFiles: java.util.function.BiConsumer watchedFilesListener> = v0;
v1 = <io.quarkus.dev.testing.TestWatchedFiles: java.util.Map watchedFilePaths>;
if v1 == null goto label1;
v2 = <io.quarkus.dev.testing.TestWatchedFiles: java.util.Map watchedFilePaths>;
v3 = <io.quarkus.dev.testing.TestWatchedFiles: java.util.List watchedFilePredicates>;
interfaceinvoke v0.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(v2, v3);
label1:
return;
}
}