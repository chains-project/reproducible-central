class io.quarkus.fs.util.ZipUtils$1 extends java.nio.file.SimpleFileVisitor
{
final java.nio.file.Path val$target;
final java.nio.file.Path val$source;
void <init>(java.nio.file.Path, java.nio.file.Path)
{
java.nio.file.Path v1, v2;
io.quarkus.fs.util.ZipUtils$1 v0;
v0 := @this: io.quarkus.fs.util.ZipUtils$1;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.Path;
v0.<io.quarkus.fs.util.ZipUtils$1: java.nio.file.Path val$target> = v1;
v0.<io.quarkus.fs.util.ZipUtils$1: java.nio.file.Path val$source> = v2;
specialinvoke v0.<java.nio.file.SimpleFileVisitor: void <init>()>();
return;
}
public java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
{
java.nio.file.CopyOption[] v8;
java.nio.file.LinkOption[] v10;
java.nio.file.FileAlreadyExistsException v9;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.FileVisitResult v12;
io.quarkus.fs.util.ZipUtils$1 v0;
java.lang.String v6;
java.nio.file.Path v1, v3, v4, v5, v7;
boolean v11;
v0 := @this: io.quarkus.fs.util.ZipUtils$1;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = v0.<io.quarkus.fs.util.ZipUtils$1: java.nio.file.Path val$target>;
v4 = v0.<io.quarkus.fs.util.ZipUtils$1: java.nio.file.Path val$source>;
v5 = interfaceinvoke v4.<java.nio.file.Path: java.nio.file.Path relativize(java.nio.file.Path)>(v1);
v6 = interfaceinvoke v5.<java.nio.file.Path: java.lang.String toString()>();
v7 = interfaceinvoke v3.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>(v6);
label1:
v8 = newarray (java.nio.file.CopyOption)[0];
staticinvoke <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(v1, v7, v8);
label2:
goto label4;
label3:
v9 := @caughtexception;
v10 = newarray (java.nio.file.LinkOption)[0];
v11 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(v7, v10);
if v11 != 0 goto label4;
throw v9;
label4:
v12 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
return v12;
catch java.nio.file.FileAlreadyExistsException from label1 to label2 with label3;
}
public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
{
java.nio.file.CopyOption[] v8;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.StandardCopyOption v9;
java.nio.file.FileVisitResult v10;
io.quarkus.fs.util.ZipUtils$1 v0;
java.lang.String v6;
java.nio.file.Path v1, v3, v4, v5, v7;
v0 := @this: io.quarkus.fs.util.ZipUtils$1;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = v0.<io.quarkus.fs.util.ZipUtils$1: java.nio.file.Path val$target>;
v4 = v0.<io.quarkus.fs.util.ZipUtils$1: java.nio.file.Path val$source>;
v5 = interfaceinvoke v4.<java.nio.file.Path: java.nio.file.Path relativize(java.nio.file.Path)>(v1);
v6 = interfaceinvoke v5.<java.nio.file.Path: java.lang.String toString()>();
v7 = interfaceinvoke v3.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>(v6);
v8 = newarray (java.nio.file.CopyOption)[1];
v9 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption REPLACE_EXISTING>;
v8[0] = v9;
staticinvoke <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(v1, v7, v8);
v10 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
return v10;
}
}