public class io.quarkus.fs.util.ZipUtils extends java.lang.Object
{
private static final java.lang.String JAR_URI_PREFIX;
private static final java.util.Map DEFAULT_OWNER_ENV;
private static final java.util.Map CREATE_ENV;
public void <init>()
{
io.quarkus.fs.util.ZipUtils v0;
v0 := @this: io.quarkus.fs.util.ZipUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static void unzip(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException
{
java.lang.Throwable v13, v14;
java.lang.Iterable v9;
java.nio.file.attribute.FileAttribute[] v4;
java.lang.String v16, v7;
java.nio.file.Path v0, v1;
boolean v11, v3;
java.nio.file.LinkOption[] v2;
java.util.Iterator v10;
java.io.IOException v15, v6;
java.nio.file.FileAlreadyExistsException v5;
java.nio.file.FileSystem v8;
java.lang.Object v12;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.Path;
label01:
v2 = newarray (java.nio.file.LinkOption)[0];
v3 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(v1, v2);
if v3 != 0 goto label04;
v4 = newarray (java.nio.file.attribute.FileAttribute)[0];
staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(v1, v4);
label02:
goto label04;
label03:
v5 := @caughtexception;
v6 = new java.io.IOException;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.nio.file.Path)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Could not create directory \'\u0001\' as a file already exists with the same name");
specialinvoke v6.<java.io.IOException: void <init>(java.lang.String)>(v7);
throw v6;
label04:
v8 = staticinvoke <io.quarkus.fs.util.ZipUtils: java.nio.file.FileSystem newFileSystem(java.nio.file.Path)>(v0);
label05:
v9 = virtualinvoke v8.<java.nio.file.FileSystem: java.lang.Iterable getRootDirectories()>();
v10 = interfaceinvoke v9.<java.lang.Iterable: java.util.Iterator iterator()>();
label06:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label07;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <io.quarkus.fs.util.ZipUtils: void copyFromZip(java.nio.file.Path,java.nio.file.Path)>(v12, v1);
goto label06;
label07:
virtualinvoke v8.<java.nio.file.FileSystem: void close()>();
goto label10;
label08:
v13 := @caughtexception;
throw v13;
label09:
v14 := @caughtexception;
v15 = new java.io.IOException;
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.nio.file.Path,java.nio.file.Path)>(v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Could not unzip \u0001 to target dir \u0001");
specialinvoke v15.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>(v16, v14);
throw v15;
label10:
return;
catch java.nio.file.FileAlreadyExistsException from label01 to label02 with label03;
catch java.lang.Throwable from label05 to label07 with label08;
catch java.io.IOException from label04 to label09 with label09;
catch java.util.zip.ZipError from label04 to label09 with label09;
}
public static java.net.URI toZipUri(java.nio.file.Path) throws java.io.IOException
{
java.net.URL v2;
java.net.URISyntaxException v7;
java.io.IOException v8;
java.lang.String v3, v4, v5, v9;
java.net.URI v1, v6;
java.nio.file.Path v0;
v0 := @parameter0: java.nio.file.Path;
v1 = interfaceinvoke v0.<java.nio.file.Path: java.net.URI toUri()>();
label1:
v2 = new java.net.URL;
v3 = virtualinvoke v1.<java.net.URI: java.lang.String getScheme()>();
v4 = virtualinvoke v1.<java.net.URI: java.lang.String getRawPath()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v3, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("jar:\u0001://\u0001!/");
specialinvoke v2.<java.net.URL: void <init>(java.lang.String)>(v5);
v6 = virtualinvoke v2.<java.net.URL: java.net.URI toURI()>();
label2:
goto label4;
label3:
v7 := @caughtexception;
v8 = new java.io.IOException;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.nio.file.Path)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to create a JAR URI for \u0001");
specialinvoke v8.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>(v9, v7);
throw v8;
label4:
return v6;
catch java.net.URISyntaxException from label1 to label2 with label3;
}
public static void copyFromZip(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException
{
java.nio.file.FileVisitOption v2;
io.quarkus.fs.util.ZipUtils$1 v4;
java.nio.file.Path v0, v1;
java.util.EnumSet v3;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.Path;
v2 = <java.nio.file.FileVisitOption: java.nio.file.FileVisitOption FOLLOW_LINKS>;
v3 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>(v2);
v4 = new io.quarkus.fs.util.ZipUtils$1;
specialinvoke v4.<io.quarkus.fs.util.ZipUtils$1: void <init>(java.nio.file.Path,java.nio.file.Path)>(v1, v0);
staticinvoke <java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.util.Set,int,java.nio.file.FileVisitor)>(v0, v3, 2147483647, v4);
return;
}
public static void zip(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException
{
java.lang.Throwable v16, v9;
java.nio.file.CopyOption[] v14;
java.lang.String[] v12;
java.nio.file.StandardCopyOption v15;
java.nio.file.DirectoryStream v5;
java.lang.String v11;
java.nio.file.Path v0, v1, v10, v13;
boolean v4, v7;
java.nio.file.LinkOption[] v3;
java.util.Iterator v6;
java.nio.file.FileSystem v2;
java.lang.Object v8;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.Path;
v2 = staticinvoke <io.quarkus.fs.util.ZipUtils: java.nio.file.FileSystem newZip(java.nio.file.Path)>(v1);
label1:
v3 = newarray (java.nio.file.LinkOption)[0];
v4 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(v0, v3);
if v4 == 0 goto label6;
v5 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path)>(v0);
label2:
v6 = interfaceinvoke v5.<java.nio.file.DirectoryStream: java.util.Iterator iterator()>();
label3:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label4;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <io.quarkus.fs.util.ZipUtils: void copyToZip(java.nio.file.Path,java.nio.file.Path,java.nio.file.FileSystem)>(v0, v8, v2);
goto label3;
label4:
interfaceinvoke v5.<java.nio.file.DirectoryStream: void close()>();
goto label7;
label5:
v9 := @caughtexception;
throw v9;
label6:
v10 = interfaceinvoke v0.<java.nio.file.Path: java.nio.file.Path getFileName()>();
v11 = interfaceinvoke v10.<java.nio.file.Path: java.lang.String toString()>();
v12 = newarray (java.lang.String)[0];
v13 = virtualinvoke v2.<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>(v11, v12);
v14 = newarray (java.nio.file.CopyOption)[1];
v15 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption REPLACE_EXISTING>;
v14[0] = v15;
staticinvoke <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(v0, v13, v14);
label7:
if v2 == null goto label9;
virtualinvoke v2.<java.nio.file.FileSystem: void close()>();
goto label9;
label8:
v16 := @caughtexception;
throw v16;
label9:
return;
catch java.lang.Throwable from label2 to label4 with label5;
catch java.lang.Throwable from label1 to label7 with label8;
}
public static java.nio.file.FileSystem newZip(java.nio.file.Path) throws java.io.IOException
{
java.nio.file.LinkOption[] v1;
java.io.IOException v10, v9;
java.nio.file.FileSystem v8;
java.nio.file.spi.FileSystemProvider v6;
java.nio.file.attribute.FileAttribute[] v5;
java.util.Map v3;
java.lang.String v11;
java.net.URI v7;
java.nio.file.Path v0, v4;
boolean v2;
v0 := @parameter0: java.nio.file.Path;
v1 = newarray (java.nio.file.LinkOption)[0];
v2 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(v0, v1);
if v2 == 0 goto label1;
v3 = <io.quarkus.fs.util.ZipUtils: java.util.Map DEFAULT_OWNER_ENV>;
goto label2;
label1:
v3 = <io.quarkus.fs.util.ZipUtils: java.util.Map CREATE_ENV>;
v4 = interfaceinvoke v0.<java.nio.file.Path: java.nio.file.Path getParent()>();
v5 = newarray (java.nio.file.attribute.FileAttribute)[0];
staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(v4, v5);
label2:
v6 = <io.quarkus.fs.util.FileSystemProviders: java.nio.file.spi.FileSystemProvider ZIP_PROVIDER>;
v7 = staticinvoke <io.quarkus.fs.util.ZipUtils: java.net.URI toZipUri(java.nio.file.Path)>(v0);
v8 = virtualinvoke v6.<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map)>(v7, v3);
label3:
return v8;
label4:
v9 := @caughtexception;
v10 = new java.io.IOException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.nio.file.Path)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to create a new filesystem for \u0001");
specialinvoke v10.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>(v11, v9);
throw v10;
catch java.io.IOException from label2 to label3 with label4;
}
private static void copyToZip(java.nio.file.Path, java.nio.file.Path, java.nio.file.FileSystem) throws java.io.IOException
{
java.nio.file.FileVisitOption v3;
io.quarkus.fs.util.ZipUtils$2 v5;
java.nio.file.FileSystem v2;
java.nio.file.Path v0, v1;
java.util.EnumSet v4;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.Path;
v2 := @parameter2: java.nio.file.FileSystem;
v3 = <java.nio.file.FileVisitOption: java.nio.file.FileVisitOption FOLLOW_LINKS>;
v4 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>(v3);
v5 = new io.quarkus.fs.util.ZipUtils$2;
specialinvoke v5.<io.quarkus.fs.util.ZipUtils$2: void <init>(java.nio.file.FileSystem,java.nio.file.Path)>(v2, v0);
staticinvoke <java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.util.Set,int,java.nio.file.FileVisitor)>(v1, v4, 2147483647, v5);
return;
}
public static java.nio.file.FileSystem newFileSystem(java.net.URI, java.util.Map) throws java.io.IOException
{
java.io.IOException v10, v7, v9;
java.util.HashMap v2;
java.nio.file.FileSystem v5;
java.nio.file.spi.FileSystemProvider v4;
java.nio.file.FileSystemAlreadyExistsException v6;
java.util.Map v1, v3;
java.lang.String v11, v8;
java.net.URI v0;
v0 := @parameter0: java.net.URI;
v1 := @parameter1: java.util.Map;
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>(java.util.Map)>(v1);
v3 = <io.quarkus.fs.util.ZipUtils: java.util.Map DEFAULT_OWNER_ENV>;
interfaceinvoke v2.<java.util.Map: void putAll(java.util.Map)>(v3);
label1:
v4 = <io.quarkus.fs.util.FileSystemProviders: java.nio.file.spi.FileSystemProvider ZIP_PROVIDER>;
v5 = virtualinvoke v4.<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map)>(v0, v2);
label2:
return v5;
label3:
v6 := @caughtexception;
v7 = new java.io.IOException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.net.URI)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("fs already exists \u0001");
specialinvoke v7.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>(v8, v6);
throw v7;
label4:
v9 := @caughtexception;
v10 = new java.io.IOException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.net.URI)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to create a new filesystem for \u0001");
specialinvoke v10.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>(v11, v9);
throw v10;
catch java.nio.file.FileSystemAlreadyExistsException from label1 to label2 with label3;
catch java.io.IOException from label1 to label2 with label4;
}
public static java.nio.file.FileSystem newFileSystem(java.nio.file.Path) throws java.io.IOException
{
java.nio.file.FileSystem v2;
java.nio.file.Path v0;
java.util.Map v1;
v0 := @parameter0: java.nio.file.Path;
v1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
v2 = staticinvoke <io.quarkus.fs.util.ZipUtils: java.nio.file.FileSystem newFileSystem(java.nio.file.Path,java.util.Map)>(v0, v1);
return v2;
}
private static java.nio.file.FileSystem newFileSystem(java.nio.file.Path, java.util.Map) throws java.io.IOException
{
java.io.IOException v6, v7;
java.util.HashMap v2;
java.nio.file.FileSystem v5;
java.nio.file.spi.FileSystemProvider v4;
java.util.Map v1, v3;
java.lang.String v8;
java.nio.file.Path v0;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.util.Map;
v2 = new java.util.HashMap;
v3 = <io.quarkus.fs.util.ZipUtils: java.util.Map DEFAULT_OWNER_ENV>;
specialinvoke v2.<java.util.HashMap: void <init>(java.util.Map)>(v3);
interfaceinvoke v2.<java.util.Map: void putAll(java.util.Map)>(v1);
label1:
v0 = staticinvoke <io.quarkus.fs.util.FileSystemHelper: java.nio.file.Path ignoreFileWriteability(java.nio.file.Path)>(v0);
v4 = <io.quarkus.fs.util.FileSystemProviders: java.nio.file.spi.FileSystemProvider ZIP_PROVIDER>;
v5 = virtualinvoke v4.<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.nio.file.Path,java.util.Map)>(v0, v2);
label2:
return v5;
label3:
v6 := @caughtexception;
v7 = new java.io.IOException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.nio.file.Path)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to create a new filesystem for \u0001");
specialinvoke v7.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>(v8, v6);
throw v7;
catch java.io.IOException from label1 to label2 with label3;
}
public static java.nio.file.FileSystem newFileSystem(java.nio.file.Path, java.lang.ClassLoader) throws java.io.IOException
{
java.util.Map v2;
java.lang.ClassLoader v1;
java.nio.file.FileSystem v3;
java.nio.file.Path v0;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.lang.ClassLoader;
v2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
v3 = staticinvoke <io.quarkus.fs.util.ZipUtils: java.nio.file.FileSystem newFileSystem(java.nio.file.Path,java.util.Map)>(v0, v2);
return v3;
}
public static java.io.OutputStream wrapForJDK8232879(java.io.OutputStream)
{
io.quarkus.fs.util.ZipUtils$3 v1;
java.io.OutputStream v0;
v0 := @parameter0: java.io.OutputStream;
v1 = new io.quarkus.fs.util.ZipUtils$3;
specialinvoke v1.<io.quarkus.fs.util.ZipUtils$3: void <init>(java.io.OutputStream)>(v0);
return v1;
}
static void <clinit>()
{
java.util.HashMap v0, v1;
java.util.Map v3, v4, v5, v6, v7;
java.lang.String v2;
v0 = new java.util.HashMap;
specialinvoke v0.<java.util.HashMap: void <init>()>();
<io.quarkus.fs.util.ZipUtils: java.util.Map DEFAULT_OWNER_ENV> = v0;
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
<io.quarkus.fs.util.ZipUtils: java.util.Map CREATE_ENV> = v1;
v2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.name");
v3 = <io.quarkus.fs.util.ZipUtils: java.util.Map DEFAULT_OWNER_ENV>;
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("defaultOwner", v2);
v4 = <io.quarkus.fs.util.ZipUtils: java.util.Map DEFAULT_OWNER_ENV>;
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("defaultGroup", v2);
v5 = <io.quarkus.fs.util.ZipUtils: java.util.Map CREATE_ENV>;
v6 = <io.quarkus.fs.util.ZipUtils: java.util.Map DEFAULT_OWNER_ENV>;
interfaceinvoke v5.<java.util.Map: void putAll(java.util.Map)>(v6);
v7 = <io.quarkus.fs.util.ZipUtils: java.util.Map CREATE_ENV>;
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("create", "true");
return;
}
}