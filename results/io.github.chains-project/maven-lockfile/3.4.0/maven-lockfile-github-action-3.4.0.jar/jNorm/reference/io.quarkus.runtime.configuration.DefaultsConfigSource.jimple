public class io.quarkus.runtime.configuration.DefaultsConfigSource extends io.smallrye.config.common.MapBackedConfigSource
{
private final io.smallrye.config.KeyMap wildcards;
public void <init>(java.util.Map, java.lang.String, int)
{
java.util.Map v1, v4;
int v3;
io.smallrye.config.KeyMap v12, v14, v5;
java.lang.String v2;
boolean v11, v8;
java.util.Iterator v7;
java.util.Set v6;
io.quarkus.runtime.configuration.DefaultsConfigSource v0;
java.lang.Object v10, v13, v15, v9;
v0 := @this: io.quarkus.runtime.configuration.DefaultsConfigSource;
v1 := @parameter0: java.util.Map;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
v4 = staticinvoke <io.quarkus.runtime.configuration.DefaultsConfigSource: java.util.Map filterWildcards(java.util.Map)>(v1);
specialinvoke v0.<io.smallrye.config.common.MapBackedConfigSource: void <init>(java.lang.String,java.util.Map,int)>(v2, v4, v3);
v5 = new io.smallrye.config.KeyMap;
specialinvoke v5.<io.smallrye.config.KeyMap: void <init>()>();
v0.<io.quarkus.runtime.configuration.DefaultsConfigSource: io.smallrye.config.KeyMap wildcards> = v5;
v6 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v7 = interfaceinvoke v6.<java.util.Set: java.util.Iterator iterator()>();
label1:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label2;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = interfaceinvoke v9.<java.util.Map$Entry: java.lang.Object getKey()>();
v11 = virtualinvoke v10.<java.lang.String: boolean contains(java.lang.CharSequence)>("*");
if v11 == 0 goto label1;
v12 = v0.<io.quarkus.runtime.configuration.DefaultsConfigSource: io.smallrye.config.KeyMap wildcards>;
v13 = interfaceinvoke v9.<java.util.Map$Entry: java.lang.Object getKey()>();
v14 = virtualinvoke v12.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap findOrAdd(java.lang.String)>(v13);
v15 = interfaceinvoke v9.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v14.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v15);
goto label1;
label2:
return;
}
public java.lang.String getValue(java.lang.String)
{
io.smallrye.config.KeyMap v3;
java.lang.Object v4;
io.quarkus.runtime.configuration.DefaultsConfigSource v0;
java.lang.String v1, v2;
v0 := @this: io.quarkus.runtime.configuration.DefaultsConfigSource;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.smallrye.config.common.MapBackedConfigSource: java.lang.String getValue(java.lang.String)>(v1);
if v2 != null goto label1;
v3 = v0.<io.quarkus.runtime.configuration.DefaultsConfigSource: io.smallrye.config.KeyMap wildcards>;
v4 = virtualinvoke v3.<io.smallrye.config.KeyMap: java.lang.Object findRootValue(java.lang.String)>(v1);
goto label2;
label1:
v4 = v2;
label2:
return v4;
}
private static java.util.Map filterWildcards(java.util.Map)
{
java.util.Iterator v3;
java.util.Set v2;
java.util.HashMap v1;
java.util.Map v0;
java.lang.Object v5, v6, v8, v9;
boolean v4, v7;
v0 := @parameter0: java.util.Map;
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
v2 = interfaceinvoke v0.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>("*");
if v7 != 0 goto label1;
v8 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v9 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v8, v9);
goto label1;
label2:
return v1;
}
}