public class io.quarkus.runtime.configuration.DurationConverter extends java.lang.Object implements org.eclipse.microprofile.config.spi.Converter, java.io.Serializable
{
private static final long serialVersionUID;
private static final java.lang.String PERIOD_OF_TIME;
private static final java.util.regex.Pattern DIGITS;
private static final java.util.regex.Pattern START_WITH_DIGITS;
public void <init>()
{
io.quarkus.runtime.configuration.DurationConverter v0;
v0 := @this: io.quarkus.runtime.configuration.DurationConverter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.time.Duration convert(java.lang.String)
{
java.lang.String v1;
io.quarkus.runtime.configuration.DurationConverter v0;
java.time.Duration v2;
v0 := @this: io.quarkus.runtime.configuration.DurationConverter;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.quarkus.runtime.configuration.DurationConverter: java.time.Duration parseDuration(java.lang.String)>(v1);
return v2;
}
public static java.time.Duration parseDuration(java.lang.String)
{
long v6;
java.time.Duration v12, v13, v7;
java.lang.String v0, v1, v11;
boolean v10, v2, v5;
java.util.function.Predicate v4, v9;
java.lang.IllegalArgumentException v15;
java.time.format.DateTimeParseException v14;
java.util.regex.Pattern v3, v8;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: java.lang.String trim()>();
v2 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v2 == 0 goto label1;
return null;
label1:
v3 = <io.quarkus.runtime.configuration.DurationConverter: java.util.regex.Pattern DIGITS>;
v4 = virtualinvoke v3.<java.util.regex.Pattern: java.util.function.Predicate asPredicate()>();
v5 = interfaceinvoke v4.<java.util.function.Predicate: boolean test(java.lang.Object)>(v1);
if v5 == 0 goto label2;
v6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(v1);
v7 = staticinvoke <java.time.Duration: java.time.Duration ofSeconds(long)>(v6);
return v7;
label2:
v8 = <io.quarkus.runtime.configuration.DurationConverter: java.util.regex.Pattern START_WITH_DIGITS>;
v9 = virtualinvoke v8.<java.util.regex.Pattern: java.util.function.Predicate asPredicate()>();
v10 = interfaceinvoke v9.<java.util.function.Predicate: boolean test(java.lang.Object)>(v1);
if v10 == 0 goto label4;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("PT\u0001");
v12 = staticinvoke <java.time.Duration: java.time.Duration parse(java.lang.CharSequence)>(v11);
label3:
return v12;
label4:
v13 = staticinvoke <java.time.Duration: java.time.Duration parse(java.lang.CharSequence)>(v1);
label5:
return v13;
label6:
v14 := @caughtexception;
v15 = new java.lang.IllegalArgumentException;
specialinvoke v15.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(v14);
throw v15;
catch java.time.format.DateTimeParseException from label2 to label3 with label6;
catch java.time.format.DateTimeParseException from label4 to label5 with label6;
}
static void <clinit>()
{
java.util.regex.Pattern v0, v1;
v0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[-+]?\\d+$");
<io.quarkus.runtime.configuration.DurationConverter: java.util.regex.Pattern DIGITS> = v0;
v1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[-+]?\\d+.*");
<io.quarkus.runtime.configuration.DurationConverter: java.util.regex.Pattern START_WITH_DIGITS> = v1;
return;
}
}