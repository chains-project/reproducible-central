public class io.quarkus.vertx.core.runtime.SSLConfigHelper extends java.lang.Object
{
public static void configurePemTrustOptions(io.vertx.core.net.TCPSSLOptions, io.quarkus.vertx.core.runtime.config.PemTrustCertConfiguration)
{
io.quarkus.vertx.core.runtime.config.PemTrustCertConfiguration v1;
io.vertx.core.net.PemTrustOptions v3;
boolean v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @parameter0: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter1: io.quarkus.vertx.core.runtime.config.PemTrustCertConfiguration;
v2 = v1.<io.quarkus.vertx.core.runtime.config.PemTrustCertConfiguration: boolean enabled>;
if v2 == 0 goto label1;
staticinvoke <io.quarkus.vertx.core.runtime.SSLConfigHelper: void ensureTrustOptionsNotSet(io.vertx.core.net.TCPSSLOptions)>(v0);
v3 = staticinvoke <io.quarkus.vertx.core.runtime.SSLConfigHelper: io.vertx.core.net.PemTrustOptions toPemTrustOptions(io.quarkus.vertx.core.runtime.config.PemTrustCertConfiguration)>(v1);
virtualinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustOptions(io.vertx.core.net.TrustOptions)>(v3);
label1:
return;
}
private static io.vertx.core.net.PemTrustOptions toPemTrustOptions(io.quarkus.vertx.core.runtime.config.PemTrustCertConfiguration)
{
io.quarkus.vertx.core.runtime.config.PemTrustCertConfiguration v0;
java.util.Iterator v6;
java.util.Optional v2, v4;
java.lang.Object v5, v8;
io.vertx.core.net.PemTrustOptions v1;
boolean v3, v7;
v0 := @parameter0: io.quarkus.vertx.core.runtime.config.PemTrustCertConfiguration;
v1 = new io.vertx.core.net.PemTrustOptions;
specialinvoke v1.<io.vertx.core.net.PemTrustOptions: void <init>()>();
v2 = v0.<io.quarkus.vertx.core.runtime.config.PemTrustCertConfiguration: java.util.Optional certs>;
v3 = virtualinvoke v2.<java.util.Optional: boolean isPresent()>();
if v3 == 0 goto label2;
v4 = v0.<io.quarkus.vertx.core.runtime.config.PemTrustCertConfiguration: java.util.Optional certs>;
v5 = virtualinvoke v4.<java.util.Optional: java.lang.Object get()>();
v6 = interfaceinvoke v5.<java.util.List: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v1.<io.vertx.core.net.PemTrustOptions: io.vertx.core.net.PemTrustOptions addCertPath(java.lang.String)>(v8);
goto label1;
label2:
return v1;
}
public static void configureJksTrustOptions(io.vertx.core.net.TCPSSLOptions, io.quarkus.vertx.core.runtime.config.JksConfiguration)
{
io.vertx.core.net.JksOptions v3;
io.quarkus.vertx.core.runtime.config.JksConfiguration v1;
boolean v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @parameter0: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter1: io.quarkus.vertx.core.runtime.config.JksConfiguration;
v2 = v1.<io.quarkus.vertx.core.runtime.config.JksConfiguration: boolean enabled>;
if v2 == 0 goto label1;
staticinvoke <io.quarkus.vertx.core.runtime.SSLConfigHelper: void ensureTrustOptionsNotSet(io.vertx.core.net.TCPSSLOptions)>(v0);
v3 = staticinvoke <io.quarkus.vertx.core.runtime.SSLConfigHelper: io.vertx.core.net.JksOptions toJksOptions(io.quarkus.vertx.core.runtime.config.JksConfiguration)>(v1);
virtualinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustOptions(io.vertx.core.net.TrustOptions)>(v3);
label1:
return;
}
private static io.vertx.core.net.JksOptions toJksOptions(io.quarkus.vertx.core.runtime.config.JksConfiguration)
{
io.vertx.core.net.JksOptions v1;
io.quarkus.vertx.core.runtime.config.JksConfiguration v0;
java.util.Optional v2, v4, v6, v8;
java.lang.Object v5, v9;
boolean v3, v7;
v0 := @parameter0: io.quarkus.vertx.core.runtime.config.JksConfiguration;
v1 = new io.vertx.core.net.JksOptions;
specialinvoke v1.<io.vertx.core.net.JksOptions: void <init>()>();
v2 = v0.<io.quarkus.vertx.core.runtime.config.JksConfiguration: java.util.Optional path>;
v3 = virtualinvoke v2.<java.util.Optional: boolean isPresent()>();
if v3 == 0 goto label1;
v4 = v0.<io.quarkus.vertx.core.runtime.config.JksConfiguration: java.util.Optional path>;
v5 = virtualinvoke v4.<java.util.Optional: java.lang.Object get()>();
virtualinvoke v1.<io.vertx.core.net.JksOptions: io.vertx.core.net.JksOptions setPath(java.lang.String)>(v5);
label1:
v6 = v0.<io.quarkus.vertx.core.runtime.config.JksConfiguration: java.util.Optional password>;
v7 = virtualinvoke v6.<java.util.Optional: boolean isPresent()>();
if v7 == 0 goto label2;
v8 = v0.<io.quarkus.vertx.core.runtime.config.JksConfiguration: java.util.Optional password>;
v9 = virtualinvoke v8.<java.util.Optional: java.lang.Object get()>();
virtualinvoke v1.<io.vertx.core.net.JksOptions: io.vertx.core.net.JksOptions setPassword(java.lang.String)>(v9);
label2:
return v1;
}
public static void configurePfxTrustOptions(io.vertx.core.net.TCPSSLOptions, io.quarkus.vertx.core.runtime.config.PfxConfiguration)
{
io.quarkus.vertx.core.runtime.config.PfxConfiguration v1;
boolean v2;
io.vertx.core.net.PfxOptions v3;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @parameter0: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter1: io.quarkus.vertx.core.runtime.config.PfxConfiguration;
v2 = v1.<io.quarkus.vertx.core.runtime.config.PfxConfiguration: boolean enabled>;
if v2 == 0 goto label1;
staticinvoke <io.quarkus.vertx.core.runtime.SSLConfigHelper: void ensureTrustOptionsNotSet(io.vertx.core.net.TCPSSLOptions)>(v0);
v3 = staticinvoke <io.quarkus.vertx.core.runtime.SSLConfigHelper: io.vertx.core.net.PfxOptions toPfxOptions(io.quarkus.vertx.core.runtime.config.PfxConfiguration)>(v1);
virtualinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustOptions(io.vertx.core.net.TrustOptions)>(v3);
label1:
return;
}
private static io.vertx.core.net.PfxOptions toPfxOptions(io.quarkus.vertx.core.runtime.config.PfxConfiguration)
{
io.vertx.core.net.PfxOptions v1;
io.quarkus.vertx.core.runtime.config.PfxConfiguration v0;
java.util.Optional v2, v4, v6, v8;
java.lang.Object v5, v9;
boolean v3, v7;
v0 := @parameter0: io.quarkus.vertx.core.runtime.config.PfxConfiguration;
v1 = new io.vertx.core.net.PfxOptions;
specialinvoke v1.<io.vertx.core.net.PfxOptions: void <init>()>();
v2 = v0.<io.quarkus.vertx.core.runtime.config.PfxConfiguration: java.util.Optional path>;
v3 = virtualinvoke v2.<java.util.Optional: boolean isPresent()>();
if v3 == 0 goto label1;
v4 = v0.<io.quarkus.vertx.core.runtime.config.PfxConfiguration: java.util.Optional path>;
v5 = virtualinvoke v4.<java.util.Optional: java.lang.Object get()>();
virtualinvoke v1.<io.vertx.core.net.PfxOptions: io.vertx.core.net.PfxOptions setPath(java.lang.String)>(v5);
label1:
v6 = v0.<io.quarkus.vertx.core.runtime.config.PfxConfiguration: java.util.Optional password>;
v7 = virtualinvoke v6.<java.util.Optional: boolean isPresent()>();
if v7 == 0 goto label2;
v8 = v0.<io.quarkus.vertx.core.runtime.config.PfxConfiguration: java.util.Optional password>;
v9 = virtualinvoke v8.<java.util.Optional: java.lang.Object get()>();
virtualinvoke v1.<io.vertx.core.net.PfxOptions: io.vertx.core.net.PfxOptions setPassword(java.lang.String)>(v9);
label2:
return v1;
}
private static void ensureTrustOptionsNotSet(io.vertx.core.net.TCPSSLOptions)
{
io.vertx.core.net.TrustOptions v1;
java.lang.IllegalArgumentException v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @parameter0: io.vertx.core.net.TCPSSLOptions;
v1 = virtualinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TrustOptions getTrustOptions()>();
if v1 == null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Trust options have already been set");
throw v2;
label1:
return;
}
public static void configurePemKeyCertOptions(io.vertx.core.net.TCPSSLOptions, io.quarkus.vertx.core.runtime.config.PemKeyCertConfiguration)
{
io.vertx.core.net.KeyCertOptions v3;
io.quarkus.vertx.core.runtime.config.PemKeyCertConfiguration v1;
boolean v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @parameter0: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter1: io.quarkus.vertx.core.runtime.config.PemKeyCertConfiguration;
v2 = v1.<io.quarkus.vertx.core.runtime.config.PemKeyCertConfiguration: boolean enabled>;
if v2 == 0 goto label1;
staticinvoke <io.quarkus.vertx.core.runtime.SSLConfigHelper: void ensureKeyCertOptionsNotSet(io.vertx.core.net.TCPSSLOptions)>(v0);
v3 = staticinvoke <io.quarkus.vertx.core.runtime.SSLConfigHelper: io.vertx.core.net.KeyCertOptions toPemKeyCertOptions(io.quarkus.vertx.core.runtime.config.PemKeyCertConfiguration)>(v1);
virtualinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)>(v3);
label1:
return;
}
private static io.vertx.core.net.KeyCertOptions toPemKeyCertOptions(io.quarkus.vertx.core.runtime.config.PemKeyCertConfiguration)
{
io.vertx.core.net.PemKeyCertOptions v1;
boolean v10, v14, v3, v7;
java.util.Iterator v13, v6;
io.quarkus.vertx.core.runtime.config.PemKeyCertConfiguration v0;
java.util.Optional v11, v2, v4, v9;
java.lang.Object v12, v15, v5, v8;
v0 := @parameter0: io.quarkus.vertx.core.runtime.config.PemKeyCertConfiguration;
v1 = new io.vertx.core.net.PemKeyCertOptions;
specialinvoke v1.<io.vertx.core.net.PemKeyCertOptions: void <init>()>();
v2 = v0.<io.quarkus.vertx.core.runtime.config.PemKeyCertConfiguration: java.util.Optional certs>;
v3 = virtualinvoke v2.<java.util.Optional: boolean isPresent()>();
if v3 == 0 goto label2;
v4 = v0.<io.quarkus.vertx.core.runtime.config.PemKeyCertConfiguration: java.util.Optional certs>;
v5 = virtualinvoke v4.<java.util.Optional: java.lang.Object get()>();
v6 = interfaceinvoke v5.<java.util.List: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v1.<io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions addCertPath(java.lang.String)>(v8);
goto label1;
label2:
v9 = v0.<io.quarkus.vertx.core.runtime.config.PemKeyCertConfiguration: java.util.Optional keys>;
v10 = virtualinvoke v9.<java.util.Optional: boolean isPresent()>();
if v10 == 0 goto label4;
v11 = v0.<io.quarkus.vertx.core.runtime.config.PemKeyCertConfiguration: java.util.Optional keys>;
v12 = virtualinvoke v11.<java.util.Optional: java.lang.Object get()>();
v13 = interfaceinvoke v12.<java.util.List: java.util.Iterator iterator()>();
label3:
v14 = interfaceinvoke v13.<java.util.Iterator: boolean hasNext()>();
if v14 == 0 goto label4;
v15 = interfaceinvoke v13.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v1.<io.vertx.core.net.PemKeyCertOptions: io.vertx.core.net.PemKeyCertOptions addKeyPath(java.lang.String)>(v15);
goto label3;
label4:
return v1;
}
public static void configureJksKeyCertOptions(io.vertx.core.net.TCPSSLOptions, io.quarkus.vertx.core.runtime.config.JksConfiguration)
{
io.vertx.core.net.JksOptions v3;
io.quarkus.vertx.core.runtime.config.JksConfiguration v1;
boolean v2;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @parameter0: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter1: io.quarkus.vertx.core.runtime.config.JksConfiguration;
v2 = v1.<io.quarkus.vertx.core.runtime.config.JksConfiguration: boolean enabled>;
if v2 == 0 goto label1;
staticinvoke <io.quarkus.vertx.core.runtime.SSLConfigHelper: void ensureKeyCertOptionsNotSet(io.vertx.core.net.TCPSSLOptions)>(v0);
v3 = staticinvoke <io.quarkus.vertx.core.runtime.SSLConfigHelper: io.vertx.core.net.JksOptions toJksOptions(io.quarkus.vertx.core.runtime.config.JksConfiguration)>(v1);
virtualinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)>(v3);
label1:
return;
}
public static void configurePfxKeyCertOptions(io.vertx.core.net.TCPSSLOptions, io.quarkus.vertx.core.runtime.config.PfxConfiguration)
{
io.quarkus.vertx.core.runtime.config.PfxConfiguration v1;
boolean v2;
io.vertx.core.net.PfxOptions v3;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @parameter0: io.vertx.core.net.TCPSSLOptions;
v1 := @parameter1: io.quarkus.vertx.core.runtime.config.PfxConfiguration;
v2 = v1.<io.quarkus.vertx.core.runtime.config.PfxConfiguration: boolean enabled>;
if v2 == 0 goto label1;
staticinvoke <io.quarkus.vertx.core.runtime.SSLConfigHelper: void ensureKeyCertOptionsNotSet(io.vertx.core.net.TCPSSLOptions)>(v0);
v3 = staticinvoke <io.quarkus.vertx.core.runtime.SSLConfigHelper: io.vertx.core.net.PfxOptions toPfxOptions(io.quarkus.vertx.core.runtime.config.PfxConfiguration)>(v1);
virtualinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)>(v3);
label1:
return;
}
private static void ensureKeyCertOptionsNotSet(io.vertx.core.net.TCPSSLOptions)
{
java.lang.IllegalArgumentException v2;
io.vertx.core.net.KeyCertOptions v1;
io.vertx.core.net.TCPSSLOptions v0;
v0 := @parameter0: io.vertx.core.net.TCPSSLOptions;
v1 = virtualinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>();
if v1 == null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Key cert options have already been set");
throw v2;
label1:
return;
}
private void <init>()
{
io.quarkus.vertx.core.runtime.SSLConfigHelper v0;
v0 := @this: io.quarkus.vertx.core.runtime.SSLConfigHelper;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
}