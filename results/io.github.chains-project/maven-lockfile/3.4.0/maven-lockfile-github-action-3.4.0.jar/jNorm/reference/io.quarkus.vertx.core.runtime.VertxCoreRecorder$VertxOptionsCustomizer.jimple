class io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxOptionsCustomizer extends java.lang.Object
{
final java.util.List customizers;
void <init>(java.util.List)
{
java.util.Iterator v6;
io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxOptionsCustomizer v0;
java.lang.'annotation'.Annotation[] v4;
java.util.List v1, v5;
io.quarkus.arc.ArcContainer v2, v3;
java.lang.Object v8, v9;
boolean v7;
v0 := @this: io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxOptionsCustomizer;
v1 := @parameter0: java.util.List;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxOptionsCustomizer: java.util.List customizers> = v1;
v2 = staticinvoke <io.quarkus.arc.Arc: io.quarkus.arc.ArcContainer container()>();
if v2 == null goto label2;
v3 = staticinvoke <io.quarkus.arc.Arc: io.quarkus.arc.ArcContainer container()>();
v4 = newarray (java.lang.'annotation'.Annotation)[0];
v5 = interfaceinvoke v3.<io.quarkus.arc.ArcContainer: java.util.List listAll(java.lang.Class,java.lang.'annotation'.Annotation[])>(class "Lio/quarkus/vertx/VertxOptionsCustomizer;", v4);
v6 = interfaceinvoke v5.<java.util.List: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = interfaceinvoke v8.<io.quarkus.arc.InstanceHandle: java.lang.Object get()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v9);
goto label1;
label2:
return;
}
io.vertx.core.VertxOptions customize(io.vertx.core.VertxOptions)
{
java.util.List v2;
java.util.Iterator v3;
io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxOptionsCustomizer v0;
io.vertx.core.VertxOptions v1;
java.lang.Object v5;
boolean v4;
v0 := @this: io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxOptionsCustomizer;
v1 := @parameter0: io.vertx.core.VertxOptions;
v2 = v0.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxOptionsCustomizer: java.util.List customizers>;
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v5.<java.util.function.Consumer: void accept(java.lang.Object)>(v1);
goto label1;
label2:
return v1;
}
}