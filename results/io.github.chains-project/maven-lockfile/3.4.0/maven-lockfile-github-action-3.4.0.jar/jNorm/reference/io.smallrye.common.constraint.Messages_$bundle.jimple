public class io.smallrye.common.constraint.Messages_$bundle extends java.lang.Object implements io.smallrye.common.constraint.Messages, java.io.Serializable
{
private static final long serialVersionUID;
public static final io.smallrye.common.constraint.Messages_$bundle INSTANCE;
private static final java.util.Locale LOCALE;
protected void <init>()
{
io.smallrye.common.constraint.Messages_$bundle v0;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
protected java.lang.Object readResolve()
{
io.smallrye.common.constraint.Messages_$bundle v0, v1;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 = <io.smallrye.common.constraint.Messages_$bundle: io.smallrye.common.constraint.Messages_$bundle INSTANCE>;
return v1;
}
protected java.util.Locale getLoggingLocale()
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.util.Locale v1;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 = <io.smallrye.common.constraint.Messages_$bundle: java.util.Locale LOCALE>;
return v1;
}
protected java.lang.String nullParam$str()
{
io.smallrye.common.constraint.Messages_$bundle v0;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
return "Parameter \'%s\' may not be null";
}
public final java.lang.IllegalArgumentException nullParam(java.lang.String)
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.lang.Object[] v5;
java.util.Locale v3;
java.lang.String v1, v4, v6;
java.lang.IllegalArgumentException v2;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.IllegalArgumentException;
v3 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale getLoggingLocale()>();
v4 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.lang.String nullParam$str()>();
v5 = newarray (java.lang.Object)[1];
v5[0] = v1;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v3, v4, v5);
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
staticinvoke <io.smallrye.common.constraint.Messages_$bundle: void _copyStackTraceMinusOne(java.lang.Throwable)>(v2);
return v2;
}
private static void _copyStackTraceMinusOne(java.lang.Throwable)
{
java.lang.Throwable v0;
java.lang.Object[] v3;
java.lang.StackTraceElement[] v1;
int v2;
v0 := @parameter0: java.lang.Throwable;
v1 = virtualinvoke v0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();
v2 = lengthof v1;
v3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>(v1, 1, v2);
virtualinvoke v0.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>(v3);
return;
}
protected java.lang.String paramLessThan$str()
{
io.smallrye.common.constraint.Messages_$bundle v0;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
return "SRCOM00001: Parameter \'%s\' may not be less than %d";
}
public final java.lang.IllegalArgumentException paramLessThan(java.lang.String, long)
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.lang.Object[] v6;
long v2;
java.lang.IllegalArgumentException v3;
java.lang.Long v7;
java.util.Locale v4;
java.lang.String v1, v5, v8;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 = new java.lang.IllegalArgumentException;
v4 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale getLoggingLocale()>();
v5 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.lang.String paramLessThan$str()>();
v6 = newarray (java.lang.Object)[2];
v6[0] = v1;
v7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
v6[1] = v7;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v4, v5, v6);
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v8);
staticinvoke <io.smallrye.common.constraint.Messages_$bundle: void _copyStackTraceMinusOne(java.lang.Throwable)>(v3);
return v3;
}
public final java.lang.IllegalArgumentException paramLessThan(java.lang.String, double)
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.lang.Object[] v6;
java.lang.Double v7;
java.lang.IllegalArgumentException v3;
java.util.Locale v4;
java.lang.String v1, v5, v8;
double v2;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: double;
v3 = new java.lang.IllegalArgumentException;
v4 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale getLoggingLocale()>();
v5 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.lang.String paramLessThan$str()>();
v6 = newarray (java.lang.Object)[2];
v6[0] = v1;
v7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v2);
v6[1] = v7;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v4, v5, v6);
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v8);
staticinvoke <io.smallrye.common.constraint.Messages_$bundle: void _copyStackTraceMinusOne(java.lang.Throwable)>(v3);
return v3;
}
public final java.lang.IllegalArgumentException paramLessThan(java.lang.String, java.lang.Object)
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.lang.Object[] v6;
java.lang.IllegalArgumentException v3;
java.util.Locale v4;
java.lang.Object v2;
java.lang.String v1, v5, v7;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = new java.lang.IllegalArgumentException;
v4 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale getLoggingLocale()>();
v5 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.lang.String paramLessThan$str()>();
v6 = newarray (java.lang.Object)[2];
v6[0] = v1;
v6[1] = v2;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v4, v5, v6);
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v7);
staticinvoke <io.smallrye.common.constraint.Messages_$bundle: void _copyStackTraceMinusOne(java.lang.Throwable)>(v3);
return v3;
}
protected java.lang.String paramGreaterThan$str()
{
io.smallrye.common.constraint.Messages_$bundle v0;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
return "SRCOM00002: Parameter \'%s\' may not be greater than than %d";
}
public final java.lang.IllegalArgumentException paramGreaterThan(java.lang.String, long)
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.lang.Object[] v6;
long v2;
java.lang.IllegalArgumentException v3;
java.lang.Long v7;
java.util.Locale v4;
java.lang.String v1, v5, v8;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 = new java.lang.IllegalArgumentException;
v4 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale getLoggingLocale()>();
v5 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.lang.String paramGreaterThan$str()>();
v6 = newarray (java.lang.Object)[2];
v6[0] = v1;
v7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
v6[1] = v7;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v4, v5, v6);
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v8);
staticinvoke <io.smallrye.common.constraint.Messages_$bundle: void _copyStackTraceMinusOne(java.lang.Throwable)>(v3);
return v3;
}
public final java.lang.IllegalArgumentException paramGreaterThan(java.lang.String, double)
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.lang.Object[] v6;
java.lang.Double v7;
java.lang.IllegalArgumentException v3;
java.util.Locale v4;
java.lang.String v1, v5, v8;
double v2;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: double;
v3 = new java.lang.IllegalArgumentException;
v4 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale getLoggingLocale()>();
v5 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.lang.String paramGreaterThan$str()>();
v6 = newarray (java.lang.Object)[2];
v6[0] = v1;
v7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v2);
v6[1] = v7;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v4, v5, v6);
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v8);
staticinvoke <io.smallrye.common.constraint.Messages_$bundle: void _copyStackTraceMinusOne(java.lang.Throwable)>(v3);
return v3;
}
public final java.lang.IllegalArgumentException paramGreaterThan(java.lang.String, java.lang.Object)
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.lang.Object[] v6;
java.lang.IllegalArgumentException v3;
java.util.Locale v4;
java.lang.Object v2;
java.lang.String v1, v5, v7;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = new java.lang.IllegalArgumentException;
v4 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale getLoggingLocale()>();
v5 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.lang.String paramGreaterThan$str()>();
v6 = newarray (java.lang.Object)[2];
v6[0] = v1;
v6[1] = v2;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v4, v5, v6);
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v7);
staticinvoke <io.smallrye.common.constraint.Messages_$bundle: void _copyStackTraceMinusOne(java.lang.Throwable)>(v3);
return v3;
}
protected java.lang.String arrayOffsetGreaterThanLength$str()
{
io.smallrye.common.constraint.Messages_$bundle v0;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
return "SRCOM00003: Given offset of %d is greater than array length of %d";
}
public final java.lang.ArrayIndexOutOfBoundsException arrayOffsetGreaterThanLength(int, int)
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.lang.Object[] v6;
java.lang.ArrayIndexOutOfBoundsException v3;
java.lang.Integer v7, v8;
java.util.Locale v4;
int v1, v2;
java.lang.String v5, v9;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = new java.lang.ArrayIndexOutOfBoundsException;
v4 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale getLoggingLocale()>();
v5 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.lang.String arrayOffsetGreaterThanLength$str()>();
v6 = newarray (java.lang.Object)[2];
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v6[0] = v7;
v8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v6[1] = v8;
v9 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v4, v5, v6);
specialinvoke v3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>(v9);
staticinvoke <io.smallrye.common.constraint.Messages_$bundle: void _copyStackTraceMinusOne(java.lang.Throwable)>(v3);
return v3;
}
protected java.lang.String arrayOffsetLengthGreaterThanLength$str()
{
io.smallrye.common.constraint.Messages_$bundle v0;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
return "SRCOM00004: Given offset of %d plus length of %d is greater than array length of %d";
}
public final java.lang.ArrayIndexOutOfBoundsException arrayOffsetLengthGreaterThanLength(int, int, int)
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.lang.Object[] v7;
java.lang.ArrayIndexOutOfBoundsException v4;
java.lang.Integer v10, v8, v9;
java.util.Locale v5;
int v1, v2, v3;
java.lang.String v11, v6;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = new java.lang.ArrayIndexOutOfBoundsException;
v5 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale getLoggingLocale()>();
v6 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.lang.String arrayOffsetLengthGreaterThanLength$str()>();
v7 = newarray (java.lang.Object)[3];
v8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v7[0] = v8;
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v7[1] = v9;
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v7[2] = v10;
v11 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v5, v6, v7);
specialinvoke v4.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>(v11);
staticinvoke <io.smallrye.common.constraint.Messages_$bundle: void _copyStackTraceMinusOne(java.lang.Throwable)>(v4);
return v4;
}
protected java.lang.String nullArrayParam$str()
{
io.smallrye.common.constraint.Messages_$bundle v0;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
return "SRCOM00005: Array index %d of parameter \'%s\' may not be null";
}
public final java.lang.IllegalArgumentException nullArrayParam(int, java.lang.String)
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.lang.Object[] v6;
java.lang.IllegalArgumentException v3;
java.lang.Integer v7;
java.util.Locale v4;
int v1;
java.lang.String v2, v5, v8;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 = new java.lang.IllegalArgumentException;
v4 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale getLoggingLocale()>();
v5 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.lang.String nullArrayParam$str()>();
v6 = newarray (java.lang.Object)[2];
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v6[0] = v7;
v6[1] = v2;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v4, v5, v6);
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v8);
staticinvoke <io.smallrye.common.constraint.Messages_$bundle: void _copyStackTraceMinusOne(java.lang.Throwable)>(v3);
return v3;
}
protected java.lang.String emptyParam$str()
{
io.smallrye.common.constraint.Messages_$bundle v0;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
return "SRCOM00006: Parameter \'%s\' must not be empty";
}
public final java.lang.IllegalArgumentException emptyParam(java.lang.String)
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.lang.Object[] v5;
java.util.Locale v3;
java.lang.String v1, v4, v6;
java.lang.IllegalArgumentException v2;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.IllegalArgumentException;
v3 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale getLoggingLocale()>();
v4 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.lang.String emptyParam$str()>();
v5 = newarray (java.lang.Object)[1];
v5[0] = v1;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v3, v4, v5);
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
staticinvoke <io.smallrye.common.constraint.Messages_$bundle: void _copyStackTraceMinusOne(java.lang.Throwable)>(v2);
return v2;
}
protected java.lang.String unexpectedNullValue$str()
{
io.smallrye.common.constraint.Messages_$bundle v0;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
return "SRCOM00007: Internal error: Assertion failure: Unexpectedly null value";
}
public final java.lang.String unexpectedNullValue()
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.lang.Object[] v3;
java.util.Locale v1;
java.lang.String v2, v4;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale getLoggingLocale()>();
v2 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.lang.String unexpectedNullValue$str()>();
v3 = newarray (java.lang.Object)[0];
v4 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v1, v2, v3);
return v4;
}
protected java.lang.String expectedLockHold$str()
{
io.smallrye.common.constraint.Messages_$bundle v0;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
return "SRCOM00008: Internal error: Assertion failure: Current thread expected to hold lock for %s";
}
public final java.lang.String expectedLockHold(java.lang.Object)
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.lang.Object[] v4;
java.util.Locale v2;
java.lang.Object v1;
java.lang.String v3, v5;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale getLoggingLocale()>();
v3 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.lang.String expectedLockHold$str()>();
v4 = newarray (java.lang.Object)[1];
v4[0] = v1;
v5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v2, v3, v4);
return v5;
}
protected java.lang.String expectedLockNotHold$str()
{
io.smallrye.common.constraint.Messages_$bundle v0;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
return "SRCOM00009: Internal error: Assertion failure: Current thread expected to not hold lock for %s";
}
public final java.lang.String expectedLockNotHold(java.lang.Object)
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.lang.Object[] v4;
java.util.Locale v2;
java.lang.Object v1;
java.lang.String v3, v5;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale getLoggingLocale()>();
v3 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.lang.String expectedLockNotHold$str()>();
v4 = newarray (java.lang.Object)[1];
v4[0] = v1;
v5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v2, v3, v4);
return v5;
}
protected java.lang.String expectedBoolean$str()
{
io.smallrye.common.constraint.Messages_$bundle v0;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
return "SRCOM00010: Internal error: Assertion failure: Expected boolean value to be %s";
}
public final java.lang.String expectedBoolean(boolean)
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.lang.Object[] v4;
java.util.Locale v2;
java.lang.Boolean v5;
java.lang.String v3, v6;
boolean v1;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 := @parameter0: boolean;
v2 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale getLoggingLocale()>();
v3 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.lang.String expectedBoolean$str()>();
v4 = newarray (java.lang.Object)[1];
v5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v1);
v4[0] = v5;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v2, v3, v4);
return v6;
}
protected java.lang.String unreachableCode$str()
{
io.smallrye.common.constraint.Messages_$bundle v0;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
return "SRCOM00011: Internal error: Unreachable code has been reached";
}
public final java.lang.IllegalStateException unreachableCode()
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.lang.IllegalStateException v1;
java.lang.Object[] v4;
java.util.Locale v2;
java.lang.String v3, v5;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 = new java.lang.IllegalStateException;
v2 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale getLoggingLocale()>();
v3 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.lang.String unreachableCode$str()>();
v4 = newarray (java.lang.Object)[0];
v5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v2, v3, v4);
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v5);
staticinvoke <io.smallrye.common.constraint.Messages_$bundle: void _copyStackTraceMinusOne(java.lang.Throwable)>(v1);
return v1;
}
protected java.lang.String impossibleSwitchCase$str()
{
io.smallrye.common.constraint.Messages_$bundle v0;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
return "SRCOM00012: Internal error: Impossible switch condition encountered: %s";
}
public final java.lang.IllegalStateException impossibleSwitchCase(java.lang.Object)
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.lang.IllegalStateException v2;
java.lang.Object[] v5;
java.util.Locale v3;
java.lang.Object v1;
java.lang.String v4, v6;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 := @parameter0: java.lang.Object;
v2 = new java.lang.IllegalStateException;
v3 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale getLoggingLocale()>();
v4 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.lang.String impossibleSwitchCase$str()>();
v5 = newarray (java.lang.Object)[1];
v5[0] = v1;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v3, v4, v5);
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v6);
staticinvoke <io.smallrye.common.constraint.Messages_$bundle: void _copyStackTraceMinusOne(java.lang.Throwable)>(v2);
return v2;
}
protected java.lang.String unsupported$str()
{
io.smallrye.common.constraint.Messages_$bundle v0;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
return "SRCOM00013: Method \"%s\" of class \"%s\" is not supported";
}
public final java.lang.UnsupportedOperationException unsupported(java.lang.String, java.lang.String)
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.lang.UnsupportedOperationException v3;
java.lang.Object[] v6;
java.util.Locale v4;
java.lang.String v1, v2, v5, v7;
v0 := @this: io.smallrye.common.constraint.Messages_$bundle;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = new java.lang.UnsupportedOperationException;
v4 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale getLoggingLocale()>();
v5 = virtualinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: java.lang.String unsupported$str()>();
v6 = newarray (java.lang.Object)[2];
v6[0] = v1;
v6[1] = v2;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v4, v5, v6);
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v7);
staticinvoke <io.smallrye.common.constraint.Messages_$bundle: void _copyStackTraceMinusOne(java.lang.Throwable)>(v3);
return v3;
}
static void <clinit>()
{
io.smallrye.common.constraint.Messages_$bundle v0;
java.util.Locale v1;
v0 = new io.smallrye.common.constraint.Messages_$bundle;
specialinvoke v0.<io.smallrye.common.constraint.Messages_$bundle: void <init>()>();
<io.smallrye.common.constraint.Messages_$bundle: io.smallrye.common.constraint.Messages_$bundle INSTANCE> = v0;
v1 = <java.util.Locale: java.util.Locale ROOT>;
<io.smallrye.common.constraint.Messages_$bundle: java.util.Locale LOCALE> = v1;
return;
}
}