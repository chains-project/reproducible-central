public interface  io.smallrye.common.function.ExceptionIntFunction extends java.lang.Object
{
public abstract java.lang.Object apply(int) throws java.lang.Exception;
public io.smallrye.common.function.ExceptionIntFunction andThen(io.smallrye.common.function.ExceptionFunction)
{
io.smallrye.common.function.ExceptionFunction v1;
io.smallrye.common.function.ExceptionIntFunction v0, v2;
v0 := @this: io.smallrye.common.function.ExceptionIntFunction;
v1 := @parameter0: io.smallrye.common.function.ExceptionFunction;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("after", v1);
v2 = staticinvoke <io.smallrye.common.function.ExceptionIntFunction$lambda_andThen_0__3182: io.smallrye.common.function.ExceptionIntFunction bootstrap$(io.smallrye.common.function.ExceptionIntFunction,io.smallrye.common.function.ExceptionFunction)>(v0, v1);
return v2;
}
public io.smallrye.common.function.ExceptionFunction compose(io.smallrye.common.function.ExceptionToIntFunction)
{
io.smallrye.common.function.ExceptionFunction v2;
io.smallrye.common.function.ExceptionToIntFunction v1;
io.smallrye.common.function.ExceptionIntFunction v0;
v0 := @this: io.smallrye.common.function.ExceptionIntFunction;
v1 := @parameter0: io.smallrye.common.function.ExceptionToIntFunction;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("before", v1);
v2 = staticinvoke <io.smallrye.common.function.ExceptionIntFunction$lambda_compose_1__3183: io.smallrye.common.function.ExceptionFunction bootstrap$(io.smallrye.common.function.ExceptionIntFunction,io.smallrye.common.function.ExceptionToIntFunction)>(v0, v1);
return v2;
}
}