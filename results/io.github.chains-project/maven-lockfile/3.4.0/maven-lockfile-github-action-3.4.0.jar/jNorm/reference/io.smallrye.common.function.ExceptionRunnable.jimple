public interface  io.smallrye.common.function.ExceptionRunnable extends java.lang.Object
{
public abstract void run() throws java.lang.Exception;
public io.smallrye.common.function.ExceptionRunnable andThen(io.smallrye.common.function.ExceptionRunnable)
{
io.smallrye.common.function.ExceptionRunnable v0, v1, v2;
v0 := @this: io.smallrye.common.function.ExceptionRunnable;
v1 := @parameter0: io.smallrye.common.function.ExceptionRunnable;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("after", v1);
v2 = staticinvoke <io.smallrye.common.function.ExceptionRunnable$lambda_andThen_0__3163: io.smallrye.common.function.ExceptionRunnable bootstrap$(io.smallrye.common.function.ExceptionRunnable,io.smallrye.common.function.ExceptionRunnable)>(v0, v1);
return v2;
}
public io.smallrye.common.function.ExceptionRunnable compose(io.smallrye.common.function.ExceptionRunnable)
{
io.smallrye.common.function.ExceptionRunnable v0, v1, v2;
v0 := @this: io.smallrye.common.function.ExceptionRunnable;
v1 := @parameter0: io.smallrye.common.function.ExceptionRunnable;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("before", v1);
v2 = staticinvoke <io.smallrye.common.function.ExceptionRunnable$lambda_compose_1__3164: io.smallrye.common.function.ExceptionRunnable bootstrap$(io.smallrye.common.function.ExceptionRunnable,io.smallrye.common.function.ExceptionRunnable)>(v0, v1);
return v2;
}
}