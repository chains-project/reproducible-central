public final enum class io.smallrye.common.os.OS extends java.lang.Enum
{
public static final enum io.smallrye.common.os.OS AIX;
public static final enum io.smallrye.common.os.OS LINUX;
public static final enum io.smallrye.common.os.OS MAC;
public static final enum io.smallrye.common.os.OS SOLARIS;
public static final enum io.smallrye.common.os.OS WINDOWS;
public static final enum io.smallrye.common.os.OS OTHER;
private static final io.smallrye.common.os.OS CURRENT_OS;
private static final io.smallrye.common.os.OS[] $VALUES;
public static io.smallrye.common.os.OS[] values()
{
java.lang.Object v1;
io.smallrye.common.os.OS[] v0;
v0 = <io.smallrye.common.os.OS: io.smallrye.common.os.OS[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static io.smallrye.common.os.OS valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lio/smallrye/common/os/OS;", v0);
return v1;
}
private void <init>(java.lang.String, int)
{
int v2;
io.smallrye.common.os.OS v0;
java.lang.String v1;
v0 := @this: io.smallrye.common.os.OS;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
return;
}
private static io.smallrye.common.os.OS determineCurrentOs()
{
io.smallrye.common.os.OS v1;
java.lang.String v0;
v0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("os.name", "unknown");
v1 = staticinvoke <io.smallrye.common.os.OS: io.smallrye.common.os.OS parse(java.lang.String)>(v0);
return v1;
}
static io.smallrye.common.os.OS parse(java.lang.String)
{
java.util.Locale v1;
java.lang.String v0, v2;
boolean v10, v11, v13, v3, v5, v7, v8;
io.smallrye.common.os.OS v12, v14, v15, v4, v6, v9;
v0 := @parameter0: java.lang.String;
v1 = <java.util.Locale: java.util.Locale ENGLISH>;
v2 = virtualinvoke v0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v1);
v3 = virtualinvoke v2.<java.lang.String: boolean contains(java.lang.CharSequence)>("linux");
if v3 == 0 goto label1;
v4 = <io.smallrye.common.os.OS: io.smallrye.common.os.OS LINUX>;
return v4;
label1:
v5 = virtualinvoke v2.<java.lang.String: boolean contains(java.lang.CharSequence)>("windows");
if v5 == 0 goto label2;
v6 = <io.smallrye.common.os.OS: io.smallrye.common.os.OS WINDOWS>;
return v6;
label2:
v7 = virtualinvoke v2.<java.lang.String: boolean contains(java.lang.CharSequence)>("mac");
if v7 != 0 goto label3;
v8 = virtualinvoke v2.<java.lang.String: boolean contains(java.lang.CharSequence)>("darwin");
if v8 == 0 goto label4;
label3:
v9 = <io.smallrye.common.os.OS: io.smallrye.common.os.OS MAC>;
return v9;
label4:
v10 = virtualinvoke v2.<java.lang.String: boolean contains(java.lang.CharSequence)>("sunos");
if v10 != 0 goto label5;
v11 = virtualinvoke v2.<java.lang.String: boolean contains(java.lang.CharSequence)>("solaris");
if v11 == 0 goto label6;
label5:
v12 = <io.smallrye.common.os.OS: io.smallrye.common.os.OS SOLARIS>;
return v12;
label6:
v13 = virtualinvoke v2.<java.lang.String: boolean contains(java.lang.CharSequence)>("aix");
if v13 == 0 goto label7;
v14 = <io.smallrye.common.os.OS: io.smallrye.common.os.OS AIX>;
return v14;
label7:
v15 = <io.smallrye.common.os.OS: io.smallrye.common.os.OS OTHER>;
return v15;
}
public boolean isCurrent()
{
io.smallrye.common.os.OS v0, v1;
boolean v2;
v0 := @this: io.smallrye.common.os.OS;
v1 = <io.smallrye.common.os.OS: io.smallrye.common.os.OS CURRENT_OS>;
if v0 != v1 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static io.smallrye.common.os.OS current()
{
io.smallrye.common.os.OS v0;
v0 = <io.smallrye.common.os.OS: io.smallrye.common.os.OS CURRENT_OS>;
return v0;
}
private static io.smallrye.common.os.OS[] $values()
{
io.smallrye.common.os.OS v1, v2, v3, v4, v5, v6;
io.smallrye.common.os.OS[] v0;
v0 = newarray (io.smallrye.common.os.OS)[6];
v1 = <io.smallrye.common.os.OS: io.smallrye.common.os.OS AIX>;
v0[0] = v1;
v2 = <io.smallrye.common.os.OS: io.smallrye.common.os.OS LINUX>;
v0[1] = v2;
v3 = <io.smallrye.common.os.OS: io.smallrye.common.os.OS MAC>;
v0[2] = v3;
v4 = <io.smallrye.common.os.OS: io.smallrye.common.os.OS SOLARIS>;
v0[3] = v4;
v5 = <io.smallrye.common.os.OS: io.smallrye.common.os.OS WINDOWS>;
v0[4] = v5;
v6 = <io.smallrye.common.os.OS: io.smallrye.common.os.OS OTHER>;
v0[5] = v6;
return v0;
}
static void <clinit>()
{
io.smallrye.common.os.OS[] v6;
io.smallrye.common.os.OS v0, v1, v2, v3, v4, v5, v7;
v0 = new io.smallrye.common.os.OS;
specialinvoke v0.<io.smallrye.common.os.OS: void <init>(java.lang.String,int)>("AIX", 0);
<io.smallrye.common.os.OS: io.smallrye.common.os.OS AIX> = v0;
v1 = new io.smallrye.common.os.OS;
specialinvoke v1.<io.smallrye.common.os.OS: void <init>(java.lang.String,int)>("LINUX", 1);
<io.smallrye.common.os.OS: io.smallrye.common.os.OS LINUX> = v1;
v2 = new io.smallrye.common.os.OS;
specialinvoke v2.<io.smallrye.common.os.OS: void <init>(java.lang.String,int)>("MAC", 2);
<io.smallrye.common.os.OS: io.smallrye.common.os.OS MAC> = v2;
v3 = new io.smallrye.common.os.OS;
specialinvoke v3.<io.smallrye.common.os.OS: void <init>(java.lang.String,int)>("SOLARIS", 3);
<io.smallrye.common.os.OS: io.smallrye.common.os.OS SOLARIS> = v3;
v4 = new io.smallrye.common.os.OS;
specialinvoke v4.<io.smallrye.common.os.OS: void <init>(java.lang.String,int)>("WINDOWS", 4);
<io.smallrye.common.os.OS: io.smallrye.common.os.OS WINDOWS> = v4;
v5 = new io.smallrye.common.os.OS;
specialinvoke v5.<io.smallrye.common.os.OS: void <init>(java.lang.String,int)>("OTHER", 5);
<io.smallrye.common.os.OS: io.smallrye.common.os.OS OTHER> = v5;
v6 = staticinvoke <io.smallrye.common.os.OS: io.smallrye.common.os.OS[] $values()>();
<io.smallrye.common.os.OS: io.smallrye.common.os.OS[] $VALUES> = v6;
v7 = staticinvoke <io.smallrye.common.os.OS: io.smallrye.common.os.OS determineCurrentOs()>();
<io.smallrye.common.os.OS: io.smallrye.common.os.OS CURRENT_OS> = v7;
return;
}
}