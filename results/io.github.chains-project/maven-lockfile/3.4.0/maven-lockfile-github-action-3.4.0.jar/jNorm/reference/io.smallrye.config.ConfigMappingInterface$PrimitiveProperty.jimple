public final class io.smallrye.config.ConfigMappingInterface$PrimitiveProperty extends io.smallrye.config.ConfigMappingInterface$Property
{
private static final java.util.Map boxTypes;
private static final java.util.Map unboxMethodName;
private static final java.util.Map unboxMethodDesc;
private final java.lang.Class primitiveType;
private final java.lang.Class convertWith;
private final java.lang.String defaultValue;
void <init>(java.lang.reflect.Method, java.lang.String, java.lang.Class, java.lang.Class, java.lang.String)
{
io.smallrye.config.ConfigMappingInterface$PrimitiveProperty v0;
java.lang.Class v3, v4;
java.lang.String v2, v5;
java.lang.reflect.Method v1;
v0 := @this: io.smallrye.config.ConfigMappingInterface$PrimitiveProperty;
v1 := @parameter0: java.lang.reflect.Method;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.Class;
v4 := @parameter3: java.lang.Class;
v5 := @parameter4: java.lang.String;
specialinvoke v0.<io.smallrye.config.ConfigMappingInterface$Property: void <init>(java.lang.reflect.Method,java.lang.String)>(v1, v2);
v0.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.Class primitiveType> = v3;
v0.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.Class convertWith> = v4;
v0.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.String defaultValue> = v5;
return;
}
public java.lang.Class getPrimitiveType()
{
java.lang.Class v1;
io.smallrye.config.ConfigMappingInterface$PrimitiveProperty v0;
v0 := @this: io.smallrye.config.ConfigMappingInterface$PrimitiveProperty;
v1 = v0.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.Class primitiveType>;
return v1;
}
public java.lang.Class getBoxType()
{
io.smallrye.config.ConfigMappingInterface$PrimitiveProperty v0;
java.util.Map v1;
java.lang.Class v2;
java.lang.Object v3;
v0 := @this: io.smallrye.config.ConfigMappingInterface$PrimitiveProperty;
v1 = <io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.util.Map boxTypes>;
v2 = v0.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.Class primitiveType>;
v3 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
return v3;
}
public java.lang.Class getConvertWith()
{
java.lang.Class v1;
java.lang.Object v2;
io.smallrye.config.ConfigMappingInterface$PrimitiveProperty v0;
v0 := @this: io.smallrye.config.ConfigMappingInterface$PrimitiveProperty;
v1 = v0.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.Class convertWith>;
v2 = staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("convertWith", v1);
return v2;
}
public boolean hasConvertWith()
{
java.lang.Class v1;
io.smallrye.config.ConfigMappingInterface$PrimitiveProperty v0;
boolean v2;
v0 := @this: io.smallrye.config.ConfigMappingInterface$PrimitiveProperty;
v1 = v0.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.Class convertWith>;
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public java.lang.String getDefaultValue()
{
java.lang.Object v2;
java.lang.String v1;
io.smallrye.config.ConfigMappingInterface$PrimitiveProperty v0;
v0 := @this: io.smallrye.config.ConfigMappingInterface$PrimitiveProperty;
v1 = v0.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.String defaultValue>;
v2 = staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("defaultValue", v1);
return v2;
}
public boolean hasDefaultValue()
{
java.lang.String v1;
io.smallrye.config.ConfigMappingInterface$PrimitiveProperty v0;
boolean v2;
v0 := @this: io.smallrye.config.ConfigMappingInterface$PrimitiveProperty;
v1 = v0.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.String defaultValue>;
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public boolean isPrimitive()
{
io.smallrye.config.ConfigMappingInterface$PrimitiveProperty v0;
v0 := @this: io.smallrye.config.ConfigMappingInterface$PrimitiveProperty;
return 1;
}
public io.smallrye.config.ConfigMappingInterface$PrimitiveProperty asPrimitive()
{
io.smallrye.config.ConfigMappingInterface$PrimitiveProperty v0;
v0 := @this: io.smallrye.config.ConfigMappingInterface$PrimitiveProperty;
return v0;
}
java.lang.String getUnboxMethodName()
{
io.smallrye.config.ConfigMappingInterface$PrimitiveProperty v0;
java.util.Map v1;
java.lang.Class v2;
java.lang.Object v3;
v0 := @this: io.smallrye.config.ConfigMappingInterface$PrimitiveProperty;
v1 = <io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.util.Map unboxMethodName>;
v2 = v0.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.Class primitiveType>;
v3 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
return v3;
}
java.lang.String getUnboxMethodDescriptor()
{
io.smallrye.config.ConfigMappingInterface$PrimitiveProperty v0;
java.util.Map v1;
java.lang.Class v2;
java.lang.Object v3;
v0 := @this: io.smallrye.config.ConfigMappingInterface$PrimitiveProperty;
v1 = <io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.util.Map unboxMethodDesc>;
v2 = v0.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.Class primitiveType>;
v3 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
return v3;
}
static void <clinit>()
{
java.util.HashMap v0, v18, v27, v9;
java.lang.Class v1, v10, v11, v12, v13, v14, v15, v16, v17, v19, v2, v20, v21, v22, v23, v24, v25, v26, v28, v29, v3, v30, v31, v32, v33, v34, v35, v4, v5, v6, v7, v8;
v0 = new java.util.HashMap;
specialinvoke v0.<java.util.HashMap: void <init>()>();
v1 = <java.lang.Byte: java.lang.Class TYPE>;
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, class "Ljava/lang/Byte;");
v2 = <java.lang.Short: java.lang.Class TYPE>;
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v2, class "Ljava/lang/Short;");
v3 = <java.lang.Integer: java.lang.Class TYPE>;
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, class "Ljava/lang/Integer;");
v4 = <java.lang.Long: java.lang.Class TYPE>;
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v4, class "Ljava/lang/Long;");
v5 = <java.lang.Float: java.lang.Class TYPE>;
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v5, class "Ljava/lang/Float;");
v6 = <java.lang.Double: java.lang.Class TYPE>;
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, class "Ljava/lang/Double;");
v7 = <java.lang.Boolean: java.lang.Class TYPE>;
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v7, class "Ljava/lang/Boolean;");
v8 = <java.lang.Character: java.lang.Class TYPE>;
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v8, class "Ljava/lang/Character;");
<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.util.Map boxTypes> = v0;
v9 = new java.util.HashMap;
specialinvoke v9.<java.util.HashMap: void <init>()>();
v10 = <java.lang.Byte: java.lang.Class TYPE>;
interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, "byteValue");
v11 = <java.lang.Short: java.lang.Class TYPE>;
interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v11, "shortValue");
v12 = <java.lang.Integer: java.lang.Class TYPE>;
interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v12, "intValue");
v13 = <java.lang.Long: java.lang.Class TYPE>;
interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v13, "longValue");
v14 = <java.lang.Float: java.lang.Class TYPE>;
interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v14, "floatValue");
v15 = <java.lang.Double: java.lang.Class TYPE>;
interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v15, "doubleValue");
v16 = <java.lang.Boolean: java.lang.Class TYPE>;
interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v16, "booleanValue");
v17 = <java.lang.Character: java.lang.Class TYPE>;
interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v17, "charValue");
<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.util.Map unboxMethodName> = v9;
v18 = new java.util.HashMap;
specialinvoke v18.<java.util.HashMap: void <init>()>();
v19 = <java.lang.Byte: java.lang.Class TYPE>;
interfaceinvoke v18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v19, "()B");
v20 = <java.lang.Short: java.lang.Class TYPE>;
interfaceinvoke v18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v20, "()S");
v21 = <java.lang.Integer: java.lang.Class TYPE>;
interfaceinvoke v18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v21, "()I");
v22 = <java.lang.Long: java.lang.Class TYPE>;
interfaceinvoke v18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v22, "()J");
v23 = <java.lang.Float: java.lang.Class TYPE>;
interfaceinvoke v18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v23, "()F");
v24 = <java.lang.Double: java.lang.Class TYPE>;
interfaceinvoke v18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v24, "()D");
v25 = <java.lang.Boolean: java.lang.Class TYPE>;
interfaceinvoke v18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v25, "()Z");
v26 = <java.lang.Character: java.lang.Class TYPE>;
interfaceinvoke v18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v26, "()C");
<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.util.Map unboxMethodDesc> = v18;
v27 = new java.util.HashMap;
specialinvoke v27.<java.util.HashMap: void <init>()>();
v28 = <java.lang.Byte: java.lang.Class TYPE>;
interfaceinvoke v27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v28, "B");
v29 = <java.lang.Short: java.lang.Class TYPE>;
interfaceinvoke v27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v29, "S");
v30 = <java.lang.Integer: java.lang.Class TYPE>;
interfaceinvoke v27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v30, "I");
v31 = <java.lang.Long: java.lang.Class TYPE>;
interfaceinvoke v27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v31, "J");
v32 = <java.lang.Float: java.lang.Class TYPE>;
interfaceinvoke v27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v32, "F");
v33 = <java.lang.Double: java.lang.Class TYPE>;
interfaceinvoke v27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v33, "D");
v34 = <java.lang.Boolean: java.lang.Class TYPE>;
interfaceinvoke v27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v34, "Z");
v35 = <java.lang.Character: java.lang.Class TYPE>;
interfaceinvoke v27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v35, "C");
return;
}
}