class io.smallrye.config.Converters$MapConverter extends io.smallrye.config.common.AbstractConverter
{
private static final long serialVersionUID;
private final org.eclipse.microprofile.config.spi.Converter keyConverter;
private final org.eclipse.microprofile.config.spi.Converter valueConverter;
void <init>(org.eclipse.microprofile.config.spi.Converter, org.eclipse.microprofile.config.spi.Converter)
{
org.eclipse.microprofile.config.spi.Converter v1, v2;
io.smallrye.config.Converters$MapConverter v0;
v0 := @this: io.smallrye.config.Converters$MapConverter;
v1 := @parameter0: org.eclipse.microprofile.config.spi.Converter;
v2 := @parameter1: org.eclipse.microprofile.config.spi.Converter;
specialinvoke v0.<io.smallrye.config.common.AbstractConverter: void <init>()>();
v0.<io.smallrye.config.Converters$MapConverter: org.eclipse.microprofile.config.spi.Converter keyConverter> = v1;
v0.<io.smallrye.config.Converters$MapConverter: org.eclipse.microprofile.config.spi.Converter valueConverter> = v2;
return;
}
public java.util.Map convert(java.lang.String) throws java.lang.IllegalArgumentException, java.lang.NullPointerException
{
java.util.HashMap v17, v2;
io.smallrye.config.Converters$MapConverter v0;
int v12, v13, v14, v4, v5, v6, v7, v9;
java.lang.String v1, v11, v15;
boolean v16;
char v8;
java.lang.StringBuilder v10, v3;
v0 := @this: io.smallrye.config.Converters$MapConverter;
v1 := @parameter0: java.lang.String;
if v1 != null goto label1;
return null;
label1:
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
v3 = new java.lang.StringBuilder;
v4 = virtualinvoke v1.<java.lang.String: int length()>();
specialinvoke v3.<java.lang.StringBuilder: void <init>(int)>(v4);
v5 = 0;
label2:
v6 = virtualinvoke v1.<java.lang.String: int indexOf(int,int)>(59, v5);
if v6 < 0 goto label5;
v7 = v6 - 1;
v8 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v7);
if v8 != 92 goto label3;
v9 = v6 + 1;
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v1, v5, v9);
goto label4;
label3:
v10 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v1, v5, v6);
v11 = virtualinvoke v10.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke v0.<io.smallrye.config.Converters$MapConverter: void processLine(java.util.Map,java.lang.String,java.lang.String)>(v2, v1, v11);
v12 = virtualinvoke v3.<java.lang.StringBuilder: int length()>();
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, v12);
label4:
v5 = v6 + 1;
goto label2;
label5:
v13 = virtualinvoke v1.<java.lang.String: int length()>();
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v1, v5, v13);
v14 = virtualinvoke v3.<java.lang.StringBuilder: int length()>();
if v14 <= 0 goto label6;
v15 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke v0.<io.smallrye.config.Converters$MapConverter: void processLine(java.util.Map,java.lang.String,java.lang.String)>(v2, v1, v15);
label6:
v16 = interfaceinvoke v2.<java.util.Map: boolean isEmpty()>();
if v16 == 0 goto label7;
v17 = null;
goto label8;
label7:
v17 = v2;
label8:
return v17;
}
private void processLine(java.util.Map, java.lang.String, java.lang.String)
{
io.smallrye.config.Converters$MapConverter v0;
io.smallrye.config.ConfigMessages v14;
java.util.Map v1;
int v11, v5, v6, v7;
java.lang.String v10, v12, v13, v2, v3, v4, v9;
java.util.NoSuchElementException v15;
char v8;
v0 := @this: io.smallrye.config.Converters$MapConverter;
v1 := @parameter0: java.util.Map;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v3.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\;", ";");
v5 = 0;
label1:
v6 = virtualinvoke v4.<java.lang.String: int indexOf(int,int)>(61, v5);
if v6 < 0 goto label3;
v7 = v6 - 1;
v8 = virtualinvoke v4.<java.lang.String: char charAt(int)>(v7);
if v8 == 92 goto label2;
v9 = virtualinvoke v4.<java.lang.String: java.lang.String substring(int,int)>(0, v6);
v10 = virtualinvoke v9.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\=", "=");
v11 = v6 + 1;
v12 = virtualinvoke v4.<java.lang.String: java.lang.String substring(int)>(v11);
v13 = virtualinvoke v12.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\=", "=");
specialinvoke v0.<io.smallrye.config.Converters$MapConverter: void processEntry(java.util.Map,java.lang.String,java.lang.String)>(v1, v10, v13);
return;
label2:
v5 = v6 + 1;
goto label1;
label3:
v14 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v15 = interfaceinvoke v14.<io.smallrye.config.ConfigMessages: java.util.NoSuchElementException valueNotMatchMapFormat(java.lang.String)>(v2);
throw v15;
}
private void processEntry(java.util.Map, java.lang.String, java.lang.String)
{
io.smallrye.config.Converters$MapConverter v0;
org.eclipse.microprofile.config.spi.Converter v5, v7;
java.util.Map v1;
int v4;
java.lang.Object v6, v8;
java.lang.String v2, v3;
v0 := @this: io.smallrye.config.Converters$MapConverter;
v1 := @parameter0: java.util.Map;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = virtualinvoke v2.<java.lang.String: int indexOf(int)>(46);
if v4 < 0 goto label1;
return;
label1:
v5 = v0.<io.smallrye.config.Converters$MapConverter: org.eclipse.microprofile.config.spi.Converter keyConverter>;
v6 = interfaceinvoke v5.<org.eclipse.microprofile.config.spi.Converter: java.lang.Object convert(java.lang.String)>(v2);
v7 = v0.<io.smallrye.config.Converters$MapConverter: org.eclipse.microprofile.config.spi.Converter valueConverter>;
v8 = interfaceinvoke v7.<org.eclipse.microprofile.config.spi.Converter: java.lang.Object convert(java.lang.String)>(v3);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v8);
return;
}
}