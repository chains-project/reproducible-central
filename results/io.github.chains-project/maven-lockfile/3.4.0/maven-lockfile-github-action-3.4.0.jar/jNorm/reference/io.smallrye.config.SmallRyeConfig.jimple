public class io.smallrye.config.SmallRyeConfig extends java.lang.Object implements org.eclipse.microprofile.config.Config, java.io.Serializable
{
public static final java.lang.String SMALLRYE_CONFIG_PROFILE;
public static final java.lang.String SMALLRYE_CONFIG_PROFILE_PARENT;
public static final java.lang.String SMALLRYE_CONFIG_LOCATIONS;
public static final java.lang.String SMALLRYE_CONFIG_MAPPING_VALIDATE_UNKNOWN;
private static final long serialVersionUID;
private final io.smallrye.config.SmallRyeConfig$ConfigSources configSources;
private final java.util.Map converters;
private final java.util.Map optionalConverters;
private final io.smallrye.config.ConfigMappings mappings;
void <init>(io.smallrye.config.SmallRyeConfigBuilder)
{
io.smallrye.config.SmallRyeConfig$ConfigSources v3;
io.smallrye.config.SmallRyeConfigBuilder v1;
java.util.Map v4;
io.smallrye.config.ConfigValidator v6;
java.util.concurrent.ConcurrentHashMap v2;
io.smallrye.config.SmallRyeConfig v0;
io.smallrye.config.ConfigMappings v5;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: io.smallrye.config.SmallRyeConfigBuilder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.smallrye.config.SmallRyeConfig: java.util.Map optionalConverters> = v2;
v3 = new io.smallrye.config.SmallRyeConfig$ConfigSources;
specialinvoke v3.<io.smallrye.config.SmallRyeConfig$ConfigSources: void <init>(io.smallrye.config.SmallRyeConfigBuilder)>(v1);
v0.<io.smallrye.config.SmallRyeConfig: io.smallrye.config.SmallRyeConfig$ConfigSources configSources> = v3;
v4 = specialinvoke v0.<io.smallrye.config.SmallRyeConfig: java.util.Map buildConverters(io.smallrye.config.SmallRyeConfigBuilder)>(v1);
v0.<io.smallrye.config.SmallRyeConfig: java.util.Map converters> = v4;
v5 = new io.smallrye.config.ConfigMappings;
v6 = virtualinvoke v1.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.ConfigValidator getValidator()>();
specialinvoke v5.<io.smallrye.config.ConfigMappings: void <init>(io.smallrye.config.ConfigValidator)>(v6);
v0.<io.smallrye.config.SmallRyeConfig: io.smallrye.config.ConfigMappings mappings> = v5;
return;
}
private java.util.Map buildConverters(io.smallrye.config.SmallRyeConfigBuilder)
{
java.lang.IllegalStateException v12;
java.util.HashMap v2;
io.smallrye.config.ConfigMessages v11;
org.eclipse.microprofile.config.spi.Converter v21, v22;
java.util.Map v14, v3;
boolean v17, v4, v7;
java.util.Iterator v16, v6;
java.util.concurrent.ConcurrentHashMap v13;
java.util.Set v15;
io.smallrye.config.SmallRyeConfig v0;
java.util.List v5;
java.lang.reflect.Type v10;
io.smallrye.config.SmallRyeConfigBuilder v1;
java.lang.Class v9;
java.lang.Object v18, v19, v20, v8;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: io.smallrye.config.SmallRyeConfigBuilder;
v2 = new java.util.HashMap;
v3 = virtualinvoke v1.<io.smallrye.config.SmallRyeConfigBuilder: java.util.Map getConverters()>();
specialinvoke v2.<java.util.HashMap: void <init>(java.util.Map)>(v3);
v4 = virtualinvoke v1.<io.smallrye.config.SmallRyeConfigBuilder: boolean isAddDiscoveredConverters()>();
if v4 == 0 goto label3;
v5 = virtualinvoke v1.<io.smallrye.config.SmallRyeConfigBuilder: java.util.List discoverConverters()>();
v6 = interfaceinvoke v5.<java.util.List: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label3;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = virtualinvoke v8.<java.lang.Object: java.lang.Class getClass()>();
v10 = staticinvoke <io.smallrye.config.Converters: java.lang.reflect.Type getConverterType(java.lang.Class)>(v9);
if v10 != null goto label2;
v11 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v12 = interfaceinvoke v11.<io.smallrye.config.ConfigMessages: java.lang.IllegalStateException unableToAddConverter(org.eclipse.microprofile.config.spi.Converter)>(v8);
throw v12;
label2:
staticinvoke <io.smallrye.config.SmallRyeConfigBuilder: void addConverter(java.lang.reflect.Type,org.eclipse.microprofile.config.spi.Converter,java.util.Map)>(v10, v8, v2);
goto label1;
label3:
v13 = new java.util.concurrent.ConcurrentHashMap;
v14 = <io.smallrye.config.Converters: java.util.Map ALL_CONVERTERS>;
specialinvoke v13.<java.util.concurrent.ConcurrentHashMap: void <init>(java.util.Map)>(v14);
v15 = interfaceinvoke v2.<java.util.Map: java.util.Set entrySet()>();
v16 = interfaceinvoke v15.<java.util.Set: java.util.Iterator iterator()>();
label4:
v17 = interfaceinvoke v16.<java.util.Iterator: boolean hasNext()>();
if v17 == 0 goto label5;
v18 = interfaceinvoke v16.<java.util.Iterator: java.lang.Object next()>();
v19 = interfaceinvoke v18.<java.util.Map$Entry: java.lang.Object getKey()>();
v20 = interfaceinvoke v18.<java.util.Map$Entry: java.lang.Object getValue()>();
v21 = virtualinvoke v20.<io.smallrye.config.SmallRyeConfigBuilder$ConverterWithPriority: org.eclipse.microprofile.config.spi.Converter getConverter()>();
virtualinvoke v13.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v19, v21);
goto label4;
label5:
v22 = <io.smallrye.config.ConfigValueConverter: org.eclipse.microprofile.config.spi.Converter CONFIG_VALUE_CONVERTER>;
virtualinvoke v13.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lio/smallrye/config/ConfigValue;", v22);
return v13;
}
public java.util.List getValues(java.lang.String, java.lang.Class)
{
java.util.Collection v4;
java.lang.Class v2;
io.smallrye.config.SmallRyeConfig v0;
java.lang.String v1;
java.util.function.IntFunction v3;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
v3 = staticinvoke <io.smallrye.config.SmallRyeConfig$init__3075: java.util.function.IntFunction bootstrap$()>();
v4 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.util.Collection getValues(java.lang.String,java.lang.Class,java.util.function.IntFunction)>(v1, v2, v3);
return v4;
}
public java.util.Collection getValues(java.lang.String, java.lang.Class, java.util.function.IntFunction)
{
org.eclipse.microprofile.config.spi.Converter v4;
java.util.Collection v5;
java.lang.Class v2;
io.smallrye.config.SmallRyeConfig v0;
java.lang.String v1;
java.util.function.IntFunction v3;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
v3 := @parameter2: java.util.function.IntFunction;
v4 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: org.eclipse.microprofile.config.spi.Converter requireConverter(java.lang.Class)>(v2);
v5 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.util.Collection getValues(java.lang.String,org.eclipse.microprofile.config.spi.Converter,java.util.function.IntFunction)>(v1, v4, v3);
return v5;
}
public java.util.Collection getValues(java.lang.String, org.eclipse.microprofile.config.spi.Converter, java.util.function.IntFunction)
{
java.util.Collection v7;
io.smallrye.config.SmallRyeConfig v0;
org.eclipse.microprofile.config.spi.Converter v2, v4;
java.lang.Object v5;
java.lang.String v1;
java.util.NoSuchElementException v6;
java.util.function.IntFunction v3;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.eclipse.microprofile.config.spi.Converter;
v3 := @parameter2: java.util.function.IntFunction;
label1:
v4 = staticinvoke <io.smallrye.config.Converters: org.eclipse.microprofile.config.spi.Converter newCollectionConverter(org.eclipse.microprofile.config.spi.Converter,java.util.function.IntFunction)>(v2, v3);
v5 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.lang.Object getValue(java.lang.String,org.eclipse.microprofile.config.spi.Converter)>(v1, v4);
label2:
return v5;
label3:
v6 := @caughtexception;
v7 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.util.Collection getIndexedValues(java.lang.String,org.eclipse.microprofile.config.spi.Converter,java.util.function.IntFunction)>(v1, v2, v3);
return v7;
catch java.util.NoSuchElementException from label1 to label2 with label3;
}
public java.util.Collection getIndexedValues(java.lang.String, org.eclipse.microprofile.config.spi.Converter, java.util.function.IntFunction)
{
java.util.Iterator v11;
io.smallrye.config.SmallRyeConfig v0;
java.util.List v4;
io.smallrye.config.ConfigMessages v7;
org.eclipse.microprofile.config.spi.Converter v2;
int v9;
java.lang.Object v10, v13, v14;
java.lang.String v1, v8;
java.util.NoSuchElementException v6;
boolean v12, v5;
java.util.function.IntFunction v3;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.eclipse.microprofile.config.spi.Converter;
v3 := @parameter2: java.util.function.IntFunction;
v4 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.util.List getIndexedProperties(java.lang.String)>(v1);
v5 = interfaceinvoke v4.<java.util.List: boolean isEmpty()>();
if v5 == 0 goto label1;
v6 = new java.util.NoSuchElementException;
v7 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v8 = interfaceinvoke v7.<io.smallrye.config.ConfigMessages: java.lang.String propertyNotFound(java.lang.String)>(v1);
specialinvoke v6.<java.util.NoSuchElementException: void <init>(java.lang.String)>(v8);
throw v6;
label1:
v9 = interfaceinvoke v4.<java.util.List: int size()>();
v10 = interfaceinvoke v3.<java.util.function.IntFunction: java.lang.Object apply(int)>(v9);
v11 = interfaceinvoke v4.<java.util.List: java.util.Iterator iterator()>();
label2:
v12 = interfaceinvoke v11.<java.util.Iterator: boolean hasNext()>();
if v12 == 0 goto label3;
v13 = interfaceinvoke v11.<java.util.Iterator: java.lang.Object next()>();
v14 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.lang.Object getValue(java.lang.String,org.eclipse.microprofile.config.spi.Converter)>(v13, v2);
interfaceinvoke v10.<java.util.Collection: boolean add(java.lang.Object)>(v14);
goto label2;
label3:
return v10;
}
public java.util.List getIndexedProperties(java.lang.String)
{
java.util.Iterator v4;
io.smallrye.config.SmallRyeConfig v0;
java.util.ArrayList v3;
java.util.List v2;
java.lang.Object v6;
java.lang.String v1, v7;
boolean v5;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.util.List getIndexedPropertiesIndexes(java.lang.String)>(v1);
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v4 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Object)>(v1, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001[\u0001]");
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v7);
goto label1;
label2:
return v3;
}
public java.util.List getIndexedPropertiesIndexes(java.lang.String)
{
java.lang.Integer v17;
java.lang.Iterable v3;
java.util.ArrayList v21;
java.util.HashSet v2;
int v10, v13, v14, v16, v19, v20, v8, v9;
java.lang.String v1, v15;
boolean v5, v7;
java.util.Iterator v4;
char v11, v12;
java.lang.NumberFormatException v18;
io.smallrye.config.SmallRyeConfig v0;
java.lang.Object v6;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 = new java.util.HashSet;
specialinvoke v2.<java.util.HashSet: void <init>()>();
v3 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.lang.Iterable getPropertyNames()>();
v4 = interfaceinvoke v3.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label7;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<java.lang.String: boolean startsWith(java.lang.String)>(v1);
if v7 == 0 goto label1;
v8 = virtualinvoke v6.<java.lang.String: int length()>();
v9 = virtualinvoke v1.<java.lang.String: int length()>();
if v8 <= v9 goto label1;
v10 = virtualinvoke v1.<java.lang.String: int length()>();
v11 = virtualinvoke v6.<java.lang.String: char charAt(int)>(v10);
if v11 != 91 goto label1;
label2:
v12 = virtualinvoke v6.<java.lang.String: char charAt(int)>(v10);
if v12 != 93 goto label6;
label3:
v13 = virtualinvoke v1.<java.lang.String: int length()>();
v14 = v13 + 1;
v15 = virtualinvoke v6.<java.lang.String: java.lang.String substring(int,int)>(v14, v10);
v16 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v15);
v17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v16);
interfaceinvoke v2.<java.util.Set: boolean add(java.lang.Object)>(v17);
label4:
goto label1;
label5:
v18 := @caughtexception;
goto label1;
label6:
v19 = virtualinvoke v6.<java.lang.String: int length()>();
v20 = v19 - 1;
if v10 >= v20 goto label1;
v10 = v10 + 1;
goto label2;
label7:
v21 = new java.util.ArrayList;
specialinvoke v21.<java.util.ArrayList: void <init>(java.util.Collection)>(v2);
staticinvoke <java.util.Collections: void sort(java.util.List)>(v21);
return v21;
catch java.lang.NumberFormatException from label3 to label4 with label5;
}
public java.lang.Object getValue(java.lang.String, java.lang.Class)
{
org.eclipse.microprofile.config.spi.Converter v3;
java.lang.Class v2;
java.lang.Object v4;
io.smallrye.config.SmallRyeConfig v0;
java.lang.String v1;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
v3 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: org.eclipse.microprofile.config.spi.Converter requireConverter(java.lang.Class)>(v2);
v4 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.lang.Object getValue(java.lang.String,org.eclipse.microprofile.config.spi.Converter)>(v1, v3);
return v4;
}
public java.util.Map getValues(java.lang.String, java.lang.Class, java.lang.Class)
{
io.smallrye.config.SmallRyeConfig v0;
io.smallrye.config.ConfigMessages v8;
org.eclipse.microprofile.config.spi.Converter v4, v5;
java.util.Map v6;
java.lang.Class v2, v3;
java.lang.String v1, v9;
java.util.NoSuchElementException v7;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
v3 := @parameter2: java.lang.Class;
v4 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: org.eclipse.microprofile.config.spi.Converter requireConverter(java.lang.Class)>(v2);
v5 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: org.eclipse.microprofile.config.spi.Converter requireConverter(java.lang.Class)>(v3);
v6 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.util.Map getValuesAsMap(java.lang.String,org.eclipse.microprofile.config.spi.Converter,org.eclipse.microprofile.config.spi.Converter)>(v1, v4, v5);
if v6 != null goto label1;
v7 = new java.util.NoSuchElementException;
v8 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v9 = interfaceinvoke v8.<io.smallrye.config.ConfigMessages: java.lang.String propertyNotFound(java.lang.String)>(v1);
specialinvoke v7.<java.util.NoSuchElementException: void <init>(java.lang.String)>(v9);
throw v7;
label1:
return v6;
}
public java.util.Map getValuesAsMap(java.lang.String, org.eclipse.microprofile.config.spi.Converter, org.eclipse.microprofile.config.spi.Converter)
{
java.util.HashMap v30, v7;
java.lang.Iterable v8;
io.smallrye.config.ConfigValue$ConfigValueBuilder v19, v21, v22;
org.eclipse.microprofile.config.spi.Converter v2, v3;
int v14, v15;
java.lang.String v1, v18, v20, v25, v5, v6;
boolean v10, v12, v16, v17, v29, v4;
java.util.Iterator v9;
io.smallrye.config.SmallRyeConfig v0;
io.smallrye.config.ConfigValue v23, v24, v26;
io.smallrye.config.NameIterator v13;
java.lang.Object v11, v27, v28;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.eclipse.microprofile.config.spi.Converter;
v3 := @parameter2: org.eclipse.microprofile.config.spi.Converter;
v4 = virtualinvoke v1.<java.lang.String: boolean endsWith(java.lang.String)>(".");
if v4 == 0 goto label1;
v5 = v1;
goto label2;
label1:
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.");
label2:
v6 = v5;
v7 = new java.util.HashMap;
specialinvoke v7.<java.util.HashMap: void <init>()>();
v8 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.lang.Iterable getPropertyNames()>();
v9 = interfaceinvoke v8.<java.lang.Iterable: java.util.Iterator iterator()>();
label3:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label5;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
v12 = virtualinvoke v11.<java.lang.String: boolean startsWith(java.lang.String)>(v6);
if v12 == 0 goto label3;
v13 = new io.smallrye.config.NameIterator;
v14 = virtualinvoke v6.<java.lang.String: int length()>();
v15 = v14 - 1;
specialinvoke v13.<io.smallrye.config.NameIterator: void <init>(java.lang.String,int)>(v11, v15);
v16 = virtualinvoke v13.<io.smallrye.config.NameIterator: boolean hasNext()>();
if v16 == 0 goto label4;
virtualinvoke v13.<io.smallrye.config.NameIterator: void next()>();
v17 = virtualinvoke v13.<io.smallrye.config.NameIterator: boolean hasNext()>();
if v17 != 0 goto label3;
virtualinvoke v13.<io.smallrye.config.NameIterator: void previous()>();
label4:
v18 = virtualinvoke v13.<io.smallrye.config.NameIterator: java.lang.String getNextSegment()>();
v19 = staticinvoke <io.smallrye.config.ConfigValue: io.smallrye.config.ConfigValue$ConfigValueBuilder builder()>();
v20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001#key");
v21 = virtualinvoke v19.<io.smallrye.config.ConfigValue$ConfigValueBuilder: io.smallrye.config.ConfigValue$ConfigValueBuilder withName(java.lang.String)>(v20);
v22 = virtualinvoke v21.<io.smallrye.config.ConfigValue$ConfigValueBuilder: io.smallrye.config.ConfigValue$ConfigValueBuilder withValue(java.lang.String)>(v18);
v23 = virtualinvoke v22.<io.smallrye.config.ConfigValue$ConfigValueBuilder: io.smallrye.config.ConfigValue build()>();
v24 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: io.smallrye.config.ConfigValue getConfigValue(java.lang.String)>(v11);
v25 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001#value");
v26 = virtualinvoke v24.<io.smallrye.config.ConfigValue: io.smallrye.config.ConfigValue withName(java.lang.String)>(v25);
v27 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.lang.Object convertValue(io.smallrye.config.ConfigValue,org.eclipse.microprofile.config.spi.Converter)>(v23, v2);
v28 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.lang.Object convertValue(io.smallrye.config.ConfigValue,org.eclipse.microprofile.config.spi.Converter)>(v26, v3);
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v27, v28);
goto label3;
label5:
v29 = interfaceinvoke v7.<java.util.Map: boolean isEmpty()>();
if v29 == 0 goto label6;
v30 = null;
goto label7;
label6:
v30 = v7;
label7:
return v30;
}
public java.lang.Object getValue(java.lang.String, org.eclipse.microprofile.config.spi.Converter)
{
io.smallrye.config.SmallRyeConfig v0;
io.smallrye.config.ConfigValue v11, v3, v6;
org.eclipse.microprofile.config.spi.Converter v2, v4, v8, v9;
java.util.Optional v12;
java.lang.Object v13;
java.lang.String v1;
boolean v10, v5, v7;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.eclipse.microprofile.config.spi.Converter;
v3 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: io.smallrye.config.ConfigValue getConfigValue(java.lang.String)>(v1);
v4 = <io.smallrye.config.ConfigValueConverter: org.eclipse.microprofile.config.spi.Converter CONFIG_VALUE_CONVERTER>;
v5 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v2);
if v5 == 0 goto label1;
v6 = virtualinvoke v3.<io.smallrye.config.ConfigValue: io.smallrye.config.ConfigValue noProblems()>();
return v6;
label1:
v7 = v2 instanceof io.smallrye.config.Converters$OptionalConverter;
if v7 == 0 goto label2;
v8 = <io.smallrye.config.ConfigValueConverter: org.eclipse.microprofile.config.spi.Converter CONFIG_VALUE_CONVERTER>;
v9 = virtualinvoke v2.<io.smallrye.config.Converters$OptionalConverter: org.eclipse.microprofile.config.spi.Converter getDelegate()>();
v10 = virtualinvoke v8.<java.lang.Object: boolean equals(java.lang.Object)>(v9);
if v10 == 0 goto label2;
v11 = virtualinvoke v3.<io.smallrye.config.ConfigValue: io.smallrye.config.ConfigValue noProblems()>();
v12 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(v11);
return v12;
label2:
v13 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.lang.Object convertValue(io.smallrye.config.ConfigValue,org.eclipse.microprofile.config.spi.Converter)>(v3, v2);
return v13;
}
public java.lang.Object convertValue(io.smallrye.config.ConfigValue, org.eclipse.microprofile.config.spi.Converter)
{
org.eclipse.microprofile.config.spi.Converter v2;
boolean v4, v5, v8;
io.smallrye.config.ConfigValue v1;
java.util.List v3;
java.util.Optional v7;
io.smallrye.config.ConfigMessages v14, v21, v26, v31, v36;
int v30;
java.lang.String v10, v11, v15, v16, v17, v22, v23, v24, v27, v28, v29, v32, v34, v37, v38, v40;
java.util.NoSuchElementException v20, v25, v35, v41;
io.smallrye.config.SmallRyeConfig v0;
java.lang.IllegalArgumentException v13, v18, v19;
java.lang.Class v33, v39;
java.lang.Object v12, v6, v9;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: io.smallrye.config.ConfigValue;
v2 := @parameter1: org.eclipse.microprofile.config.spi.Converter;
v3 = virtualinvoke v1.<io.smallrye.config.ConfigValue: java.util.List getProblems()>();
v4 = interfaceinvoke v3.<java.util.List: boolean isEmpty()>();
if v4 != 0 goto label02;
v5 = staticinvoke <io.smallrye.config.Converters: boolean isOptionalConverter(org.eclipse.microprofile.config.spi.Converter)>(v2);
if v5 == 0 goto label01;
v1 = virtualinvoke v1.<io.smallrye.config.ConfigValue: io.smallrye.config.ConfigValue noProblems()>();
goto label02;
label01:
v6 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(0);
v7 = virtualinvoke v6.<io.smallrye.config.ConfigValidationException$Problem: java.util.Optional getException()>();
v8 = virtualinvoke v7.<java.util.Optional: boolean isPresent()>();
if v8 == 0 goto label02;
v9 = virtualinvoke v7.<java.util.Optional: java.lang.Object get()>();
throw v9;
label02:
v10 = virtualinvoke v1.<io.smallrye.config.ConfigValue: java.lang.String getValue()>();
if v10 == null goto label06;
label03:
v11 = virtualinvoke v1.<io.smallrye.config.ConfigValue: java.lang.String getValue()>();
v12 = interfaceinvoke v2.<org.eclipse.microprofile.config.spi.Converter: java.lang.Object convert(java.lang.String)>(v11);
label04:
goto label09;
label05:
v13 := @caughtexception;
v14 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v15 = virtualinvoke v1.<io.smallrye.config.ConfigValue: java.lang.String getNameProfiled()>();
v16 = virtualinvoke v1.<io.smallrye.config.ConfigValue: java.lang.String getValue()>();
v17 = virtualinvoke v13.<java.lang.IllegalArgumentException: java.lang.String getLocalizedMessage()>();
v18 = interfaceinvoke v14.<io.smallrye.config.ConfigMessages: java.lang.IllegalArgumentException converterException(java.lang.Throwable,java.lang.String,java.lang.String,java.lang.String)>(v13, v15, v16, v17);
throw v18;
label06:
v12 = interfaceinvoke v2.<org.eclipse.microprofile.config.spi.Converter: java.lang.Object convert(java.lang.String)>("");
label07:
goto label09;
label08:
v19 := @caughtexception;
v20 = new java.util.NoSuchElementException;
v21 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v22 = virtualinvoke v1.<io.smallrye.config.ConfigValue: java.lang.String getNameProfiled()>();
v23 = interfaceinvoke v21.<io.smallrye.config.ConfigMessages: java.lang.String propertyNotFound(java.lang.String)>(v22);
specialinvoke v20.<java.util.NoSuchElementException: void <init>(java.lang.String)>(v23);
throw v20;
label09:
if v12 != null goto label12;
v24 = virtualinvoke v1.<io.smallrye.config.ConfigValue: java.lang.String getValue()>();
if v24 != null goto label10;
v25 = new java.util.NoSuchElementException;
v26 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v27 = virtualinvoke v1.<io.smallrye.config.ConfigValue: java.lang.String getNameProfiled()>();
v28 = interfaceinvoke v26.<io.smallrye.config.ConfigMessages: java.lang.String propertyNotFound(java.lang.String)>(v27);
specialinvoke v25.<java.util.NoSuchElementException: void <init>(java.lang.String)>(v28);
throw v25;
label10:
v29 = virtualinvoke v1.<io.smallrye.config.ConfigValue: java.lang.String getValue()>();
v30 = virtualinvoke v29.<java.lang.String: int length()>();
if v30 != 0 goto label11;
v31 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v32 = virtualinvoke v1.<io.smallrye.config.ConfigValue: java.lang.String getNameProfiled()>();
v33 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v34 = virtualinvoke v33.<java.lang.Class: java.lang.String getTypeName()>();
v35 = interfaceinvoke v31.<io.smallrye.config.ConfigMessages: java.util.NoSuchElementException propertyEmptyString(java.lang.String,java.lang.String)>(v32, v34);
throw v35;
label11:
v36 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v37 = virtualinvoke v1.<io.smallrye.config.ConfigValue: java.lang.String getNameProfiled()>();
v38 = virtualinvoke v1.<io.smallrye.config.ConfigValue: java.lang.String getValue()>();
v39 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v40 = virtualinvoke v39.<java.lang.Class: java.lang.String getTypeName()>();
v41 = interfaceinvoke v36.<io.smallrye.config.ConfigMessages: java.util.NoSuchElementException converterReturnedNull(java.lang.String,java.lang.String,java.lang.String)>(v37, v38, v40);
throw v41;
label12:
return v12;
catch java.lang.IllegalArgumentException from label03 to label04 with label05;
catch java.lang.IllegalArgumentException from label06 to label07 with label08;
}
public boolean rawValueEquals(java.lang.String, java.lang.String)
{
io.smallrye.config.SmallRyeConfig v0;
java.lang.String v1, v2, v3;
boolean v4;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.lang.String getRawValue(java.lang.String)>(v1);
v4 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v2, v3);
return v4;
}
public io.smallrye.config.ConfigValue getConfigValue(java.lang.String)
{
io.smallrye.config.SmallRyeConfig$ConfigSources v2;
io.smallrye.config.SmallRyeConfig v0;
io.smallrye.config.ConfigValue v4, v5;
io.smallrye.config.ConfigValue$ConfigValueBuilder v6, v7;
io.smallrye.config.ConfigSourceInterceptorContext v3;
java.lang.String v1;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.smallrye.config.SmallRyeConfig: io.smallrye.config.SmallRyeConfig$ConfigSources configSources>;
v3 = virtualinvoke v2.<io.smallrye.config.SmallRyeConfig$ConfigSources: io.smallrye.config.ConfigSourceInterceptorContext getInterceptorChain()>();
v4 = interfaceinvoke v3.<io.smallrye.config.ConfigSourceInterceptorContext: io.smallrye.config.ConfigValue proceed(java.lang.String)>(v1);
if v4 == null goto label1;
v5 = v4;
goto label2;
label1:
v6 = staticinvoke <io.smallrye.config.ConfigValue: io.smallrye.config.ConfigValue$ConfigValueBuilder builder()>();
v7 = virtualinvoke v6.<io.smallrye.config.ConfigValue$ConfigValueBuilder: io.smallrye.config.ConfigValue$ConfigValueBuilder withName(java.lang.String)>(v1);
v5 = virtualinvoke v7.<io.smallrye.config.ConfigValue$ConfigValueBuilder: io.smallrye.config.ConfigValue build()>();
label2:
return v5;
}
public java.lang.String getRawValue(java.lang.String)
{
io.smallrye.config.SmallRyeConfig v0;
java.lang.String v1, v3, v4;
io.smallrye.config.ConfigValue v2;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: io.smallrye.config.ConfigValue getConfigValue(java.lang.String)>(v1);
if v2 == null goto label1;
v3 = virtualinvoke v2.<io.smallrye.config.ConfigValue: java.lang.String getValue()>();
if v3 == null goto label1;
v4 = virtualinvoke v2.<io.smallrye.config.ConfigValue: java.lang.String getValue()>();
goto label2;
label1:
v4 = null;
label2:
return v4;
}
public java.util.Optional getOptionalValue(java.lang.String, java.lang.Class)
{
org.eclipse.microprofile.config.spi.Converter v3;
java.lang.Class v2;
java.lang.Object v4;
io.smallrye.config.SmallRyeConfig v0;
java.lang.String v1;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
v3 = specialinvoke v0.<io.smallrye.config.SmallRyeConfig: org.eclipse.microprofile.config.spi.Converter getOptionalConverter(java.lang.Class)>(v2);
v4 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.lang.Object getValue(java.lang.String,org.eclipse.microprofile.config.spi.Converter)>(v1, v3);
return v4;
}
public java.util.Optional getOptionalValues(java.lang.String, java.lang.Class, java.lang.Class)
{
io.smallrye.config.SmallRyeConfig v0;
org.eclipse.microprofile.config.spi.Converter v4, v5;
java.util.Map v6;
java.util.Optional v7;
java.lang.Class v2, v3;
java.lang.String v1;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
v3 := @parameter2: java.lang.Class;
v4 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: org.eclipse.microprofile.config.spi.Converter requireConverter(java.lang.Class)>(v2);
v5 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: org.eclipse.microprofile.config.spi.Converter requireConverter(java.lang.Class)>(v3);
v6 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.util.Map getValuesAsMap(java.lang.String,org.eclipse.microprofile.config.spi.Converter,org.eclipse.microprofile.config.spi.Converter)>(v1, v4, v5);
v7 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>(v6);
return v7;
}
public java.util.Optional getOptionalValue(java.lang.String, org.eclipse.microprofile.config.spi.Converter)
{
org.eclipse.microprofile.config.spi.Converter v2, v3;
java.lang.Object v4;
io.smallrye.config.SmallRyeConfig v0;
java.lang.String v1;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.eclipse.microprofile.config.spi.Converter;
v3 = staticinvoke <io.smallrye.config.Converters: org.eclipse.microprofile.config.spi.Converter newOptionalConverter(org.eclipse.microprofile.config.spi.Converter)>(v2);
v4 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.lang.Object getValue(java.lang.String,org.eclipse.microprofile.config.spi.Converter)>(v1, v3);
return v4;
}
public java.util.Optional getOptionalValues(java.lang.String, java.lang.Class)
{
java.util.Optional v4;
java.lang.Class v2;
io.smallrye.config.SmallRyeConfig v0;
java.lang.String v1;
java.util.function.IntFunction v3;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
v3 = staticinvoke <io.smallrye.config.SmallRyeConfig$init__3076: java.util.function.IntFunction bootstrap$()>();
v4 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.util.Optional getOptionalValues(java.lang.String,java.lang.Class,java.util.function.IntFunction)>(v1, v2, v3);
return v4;
}
public java.util.Optional getOptionalValues(java.lang.String, java.lang.Class, java.util.function.IntFunction)
{
org.eclipse.microprofile.config.spi.Converter v4;
java.util.Optional v5;
java.lang.Class v2;
io.smallrye.config.SmallRyeConfig v0;
java.lang.String v1;
java.util.function.IntFunction v3;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
v3 := @parameter2: java.util.function.IntFunction;
v4 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: org.eclipse.microprofile.config.spi.Converter requireConverter(java.lang.Class)>(v2);
v5 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.util.Optional getOptionalValues(java.lang.String,org.eclipse.microprofile.config.spi.Converter,java.util.function.IntFunction)>(v1, v4, v3);
return v5;
}
public java.util.Optional getOptionalValues(java.lang.String, org.eclipse.microprofile.config.spi.Converter, java.util.function.IntFunction)
{
io.smallrye.config.SmallRyeConfig v0;
org.eclipse.microprofile.config.spi.Converter v2, v4;
java.util.Optional v5, v7;
java.lang.String v1;
boolean v6;
java.util.function.IntFunction v3;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.eclipse.microprofile.config.spi.Converter;
v3 := @parameter2: java.util.function.IntFunction;
v4 = staticinvoke <io.smallrye.config.Converters: org.eclipse.microprofile.config.spi.Converter newCollectionConverter(org.eclipse.microprofile.config.spi.Converter,java.util.function.IntFunction)>(v2, v3);
v5 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.util.Optional getOptionalValue(java.lang.String,org.eclipse.microprofile.config.spi.Converter)>(v1, v4);
v6 = virtualinvoke v5.<java.util.Optional: boolean isPresent()>();
if v6 == 0 goto label1;
return v5;
label1:
v7 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.util.Optional getIndexedOptionalValues(java.lang.String,org.eclipse.microprofile.config.spi.Converter,java.util.function.IntFunction)>(v1, v2, v3);
return v7;
}
public java.util.Optional getIndexedOptionalValues(java.lang.String, org.eclipse.microprofile.config.spi.Converter, java.util.function.IntFunction)
{
org.eclipse.microprofile.config.spi.Converter v2;
int v7;
java.lang.String v1;
boolean v10, v14, v5;
java.util.function.IntFunction v3;
java.util.Iterator v9;
io.smallrye.config.SmallRyeConfig v0;
java.util.function.Consumer v13;
java.util.List v4;
java.util.Optional v12, v15, v16, v6;
java.lang.Object v11, v8;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.eclipse.microprofile.config.spi.Converter;
v3 := @parameter2: java.util.function.IntFunction;
v4 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.util.List getIndexedProperties(java.lang.String)>(v1);
v5 = interfaceinvoke v4.<java.util.List: boolean isEmpty()>();
if v5 == 0 goto label1;
v6 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
return v6;
label1:
v7 = interfaceinvoke v4.<java.util.List: int size()>();
v8 = interfaceinvoke v3.<java.util.function.IntFunction: java.lang.Object apply(int)>(v7);
v9 = interfaceinvoke v4.<java.util.List: java.util.Iterator iterator()>();
label2:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label3;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
v12 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.util.Optional getOptionalValue(java.lang.String,org.eclipse.microprofile.config.spi.Converter)>(v11, v2);
virtualinvoke v8.<java.lang.Object: java.lang.Class getClass()>();
v13 = staticinvoke <io.smallrye.config.SmallRyeConfig$add__3077: java.util.function.Consumer bootstrap$(java.util.Collection)>(v8);
virtualinvoke v12.<java.util.Optional: void ifPresent(java.util.function.Consumer)>(v13);
goto label2;
label3:
v14 = interfaceinvoke v8.<java.util.Collection: boolean isEmpty()>();
if v14 != 0 goto label4;
v15 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(v8);
return v15;
label4:
v16 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
return v16;
}
public io.smallrye.config.ConfigMappings getConfigMappings()
{
io.smallrye.config.SmallRyeConfig v0;
io.smallrye.config.ConfigMappings v1;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 = v0.<io.smallrye.config.SmallRyeConfig: io.smallrye.config.ConfigMappings mappings>;
return v1;
}
public java.lang.Object getConfigMapping(java.lang.Class)
{
java.lang.Class v1;
java.lang.Object v3;
io.smallrye.config.SmallRyeConfig v0;
io.smallrye.config.ConfigMappings v2;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.Class;
v2 = v0.<io.smallrye.config.SmallRyeConfig: io.smallrye.config.ConfigMappings mappings>;
v3 = virtualinvoke v2.<io.smallrye.config.ConfigMappings: java.lang.Object getConfigMapping(java.lang.Class)>(v1);
return v3;
}
public java.lang.Object getConfigMapping(java.lang.Class, java.lang.String)
{
java.lang.Class v1;
java.lang.Object v4;
io.smallrye.config.SmallRyeConfig v0;
java.lang.String v2;
io.smallrye.config.ConfigMappings v3;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.smallrye.config.SmallRyeConfig: io.smallrye.config.ConfigMappings mappings>;
v4 = virtualinvoke v3.<io.smallrye.config.ConfigMappings: java.lang.Object getConfigMapping(java.lang.Class,java.lang.String)>(v1, v2);
return v4;
}
public java.lang.Iterable getPropertyNames()
{
io.smallrye.config.SmallRyeConfig$ConfigSources v1;
io.smallrye.config.SmallRyeConfig v0;
io.smallrye.config.SmallRyeConfig$ConfigSources$PropertyNames v2;
java.lang.Iterable v3;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 = v0.<io.smallrye.config.SmallRyeConfig: io.smallrye.config.SmallRyeConfig$ConfigSources configSources>;
v2 = virtualinvoke v1.<io.smallrye.config.SmallRyeConfig$ConfigSources: io.smallrye.config.SmallRyeConfig$ConfigSources$PropertyNames getPropertyNames()>();
v3 = virtualinvoke v2.<io.smallrye.config.SmallRyeConfig$ConfigSources$PropertyNames: java.lang.Iterable get()>();
return v3;
}
public boolean isPropertyPresent(java.lang.String)
{
java.lang.Object v3;
io.smallrye.config.SmallRyeConfig v0;
java.lang.String v1;
java.util.function.Supplier v2;
boolean v4;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.smallrye.config.SmallRyeConfig$lambda_isPropertyPresent_0__3078: java.util.function.Supplier bootstrap$(io.smallrye.config.SmallRyeConfig,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.config.Expressions: java.lang.Object withoutExpansion(java.util.function.Supplier)>(v2);
v4 = virtualinvoke v3.<java.lang.Boolean: boolean booleanValue()>();
return v4;
}
public java.lang.Iterable getConfigSources()
{
io.smallrye.config.SmallRyeConfig$ConfigSources v1;
java.util.List v2;
io.smallrye.config.SmallRyeConfig v0;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 = v0.<io.smallrye.config.SmallRyeConfig: io.smallrye.config.SmallRyeConfig$ConfigSources configSources>;
v2 = virtualinvoke v1.<io.smallrye.config.SmallRyeConfig$ConfigSources: java.util.List getSources()>();
return v2;
}
public java.lang.Iterable getConfigSources(java.lang.Class)
{
java.util.Iterator v4;
io.smallrye.config.SmallRyeConfig v0;
java.lang.Iterable v3;
java.util.ArrayList v2;
java.lang.Class v1, v7;
java.lang.Object v6;
boolean v5, v8;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.Class;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.lang.Iterable getConfigSources()>();
v4 = interfaceinvoke v3.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<java.lang.Object: java.lang.Class getClass()>();
v8 = virtualinvoke v1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v7);
if v8 == 0 goto label1;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v6);
goto label1;
label2:
return v2;
}
public java.util.Optional getConfigSource(java.lang.String)
{
java.util.Iterator v3;
io.smallrye.config.SmallRyeConfig v0;
java.lang.Iterable v2;
java.util.Optional v8, v9;
java.lang.Object v5;
java.lang.String v1, v6;
boolean v4, v7;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.lang.Iterable getConfigSources()>();
v3 = interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<org.eclipse.microprofile.config.spi.ConfigSource: java.lang.String getName()>();
if v6 == null goto label1;
v7 = virtualinvoke v6.<java.lang.String: boolean equals(java.lang.Object)>(v1);
if v7 == 0 goto label1;
v8 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(v5);
return v8;
label2:
v9 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
return v9;
}
public java.lang.Object convert(java.lang.String, java.lang.Class)
{
org.eclipse.microprofile.config.spi.Converter v3;
java.lang.Class v2;
java.lang.Object v4;
io.smallrye.config.SmallRyeConfig v0;
java.lang.String v1;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
if v1 == null goto label1;
v3 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: org.eclipse.microprofile.config.spi.Converter requireConverter(java.lang.Class)>(v2);
v4 = interfaceinvoke v3.<org.eclipse.microprofile.config.spi.Converter: java.lang.Object convert(java.lang.String)>(v1);
goto label2;
label1:
v4 = null;
label2:
return v4;
}
private org.eclipse.microprofile.config.spi.Converter getOptionalConverter(java.lang.Class)
{
java.util.Map v2;
java.lang.Class v1;
java.lang.Object v4;
io.smallrye.config.SmallRyeConfig v0;
java.util.function.Function v3;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.Class;
v2 = v0.<io.smallrye.config.SmallRyeConfig: java.util.Map optionalConverters>;
v3 = staticinvoke <io.smallrye.config.SmallRyeConfig$lambda_getOptionalConverter_1__3079: java.util.function.Function bootstrap$(io.smallrye.config.SmallRyeConfig)>(v0);
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v1, v3);
return v4;
}
public java.util.Optional getConverter(java.lang.Class)
{
org.eclipse.microprofile.config.spi.Converter v2;
java.util.Optional v3;
java.lang.Class v1;
io.smallrye.config.SmallRyeConfig v0;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: org.eclipse.microprofile.config.spi.Converter getConverterOrNull(java.lang.Class)>(v1);
v3 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>(v2);
return v3;
}
public org.eclipse.microprofile.config.spi.Converter requireConverter(java.lang.Class)
{
io.smallrye.config.ConfigMessages v3;
org.eclipse.microprofile.config.spi.Converter v2;
java.lang.Class v1;
io.smallrye.config.SmallRyeConfig v0;
java.lang.IllegalArgumentException v4;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: org.eclipse.microprofile.config.spi.Converter getConverterOrNull(java.lang.Class)>(v1);
if v2 != null goto label1;
v3 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v4 = interfaceinvoke v3.<io.smallrye.config.ConfigMessages: java.lang.IllegalArgumentException noRegisteredConverter(java.lang.Class)>(v1);
throw v4;
label1:
return v2;
}
org.eclipse.microprofile.config.spi.Converter getConverterOrNull(java.lang.Class)
{
io.smallrye.config.SmallRyeConfig v0;
java.util.function.Function v12;
org.eclipse.microprofile.config.spi.Converter v10, v6, v9;
java.util.Map v11, v2;
java.lang.Class v1, v5, v8;
java.lang.Object v13, v3;
boolean v4, v7;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.Class;
v2 = v0.<io.smallrye.config.SmallRyeConfig: java.util.Map converters>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 == null goto label1;
return v3;
label1:
v4 = virtualinvoke v1.<java.lang.Class: boolean isPrimitive()>();
if v4 == 0 goto label2;
v5 = staticinvoke <io.smallrye.config.Converters: java.lang.Class wrapPrimitiveType(java.lang.Class)>(v1);
v6 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: org.eclipse.microprofile.config.spi.Converter getConverterOrNull(java.lang.Class)>(v5);
return v6;
label2:
v7 = virtualinvoke v1.<java.lang.Class: boolean isArray()>();
if v7 == 0 goto label5;
v8 = virtualinvoke v1.<java.lang.Class: java.lang.Class getComponentType()>();
v9 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: org.eclipse.microprofile.config.spi.Converter getConverterOrNull(java.lang.Class)>(v8);
if v9 != null goto label3;
v10 = null;
goto label4;
label3:
v10 = staticinvoke <io.smallrye.config.Converters: org.eclipse.microprofile.config.spi.Converter newArrayConverter(org.eclipse.microprofile.config.spi.Converter,java.lang.Class)>(v9, v1);
label4:
return v10;
label5:
v11 = v0.<io.smallrye.config.SmallRyeConfig: java.util.Map converters>;
v12 = staticinvoke <io.smallrye.config.SmallRyeConfig$lambda_getConverterOrNull_2__3080: java.util.function.Function bootstrap$()>();
v13 = interfaceinvoke v11.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v1, v12);
return v13;
}
public java.lang.Object unwrap(java.lang.Class)
{
io.smallrye.config.ConfigMessages v5;
java.lang.Class v1, v2;
java.lang.Object v4;
io.smallrye.config.SmallRyeConfig v0;
java.lang.IllegalArgumentException v6;
boolean v3;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.lang.Class;
v2 = class "Lorg/eclipse/microprofile/config/Config;";
v3 = virtualinvoke v2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v1);
if v3 == 0 goto label1;
v4 = virtualinvoke v1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v0);
return v4;
label1:
v5 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v6 = interfaceinvoke v5.<io.smallrye.config.ConfigMessages: java.lang.IllegalArgumentException getTypeNotSupportedForUnwrapping(java.lang.Class)>(v1);
throw v6;
}
public java.util.List getProfiles()
{
io.smallrye.config.SmallRyeConfig$ConfigSources v1;
java.util.List v2;
io.smallrye.config.SmallRyeConfig v0;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 = v0.<io.smallrye.config.SmallRyeConfig: io.smallrye.config.SmallRyeConfig$ConfigSources configSources>;
v2 = virtualinvoke v1.<io.smallrye.config.SmallRyeConfig$ConfigSources: java.util.List getProfiles()>();
return v2;
}
void addPropertyNames(java.util.Set)
{
io.smallrye.config.SmallRyeConfig$ConfigSources v2;
java.util.Set v1;
io.smallrye.config.SmallRyeConfig v0;
io.smallrye.config.SmallRyeConfig$ConfigSources$PropertyNames v3;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 := @parameter0: java.util.Set;
v2 = v0.<io.smallrye.config.SmallRyeConfig: io.smallrye.config.SmallRyeConfig$ConfigSources configSources>;
v3 = virtualinvoke v2.<io.smallrye.config.SmallRyeConfig$ConfigSources: io.smallrye.config.SmallRyeConfig$ConfigSources$PropertyNames getPropertyNames()>();
virtualinvoke v3.<io.smallrye.config.SmallRyeConfig$ConfigSources$PropertyNames: void add(java.util.Set)>(v1);
return;
}
private java.lang.Object writeReplace() throws java.io.ObjectStreamException
{
io.smallrye.config.SmallRyeConfig v0;
io.smallrye.config.SmallRyeConfig$RegisteredConfig v1;
v0 := @this: io.smallrye.config.SmallRyeConfig;
v1 = <io.smallrye.config.SmallRyeConfig$RegisteredConfig: io.smallrye.config.SmallRyeConfig$RegisteredConfig instance>;
return v1;
}
}