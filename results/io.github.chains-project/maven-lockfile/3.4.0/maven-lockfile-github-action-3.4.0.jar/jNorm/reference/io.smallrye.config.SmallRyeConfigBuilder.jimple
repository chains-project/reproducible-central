public class io.smallrye.config.SmallRyeConfigBuilder extends java.lang.Object implements org.eclipse.microprofile.config.spi.ConfigBuilder
{
public static final java.lang.String META_INF_MICROPROFILE_CONFIG_PROPERTIES;
private final java.util.List sources;
private final java.util.List sourceProviders;
private final java.util.Map converters;
private final java.util.List profiles;
private final java.util.Set secretKeys;
private final java.util.List interceptors;
private final java.util.List secretKeysHandlers;
private io.smallrye.config.ConfigValidator validator;
private final io.smallrye.config.KeyMap defaultValues;
private final io.smallrye.config.ConfigMappingProvider$Builder mappingsBuilder;
private java.lang.ClassLoader classLoader;
private boolean addDefaultSources;
private boolean addDefaultInterceptors;
private boolean addDiscoveredSources;
private boolean addDiscoveredConverters;
private boolean addDiscoveredInterceptors;
private boolean addDiscoveredSecretKeysHandlers;
private boolean addDiscoveredValidator;
public void <init>()
{
io.smallrye.config.ConfigMappingProvider$Builder v10;
java.util.HashMap v3;
java.util.ArrayList v1, v2, v4, v6, v7;
java.util.HashSet v5;
io.smallrye.config.SmallRyeConfigBuilder v0;
io.smallrye.config.ConfigValidator v8;
io.smallrye.config.KeyMap v9;
java.lang.ClassLoader v11;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.List sources> = v1;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.List sourceProviders> = v2;
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>()>();
v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.Map converters> = v3;
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.List profiles> = v4;
v5 = new java.util.HashSet;
specialinvoke v5.<java.util.HashSet: void <init>()>();
v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.Set secretKeys> = v5;
v6 = new java.util.ArrayList;
specialinvoke v6.<java.util.ArrayList: void <init>()>();
v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.List interceptors> = v6;
v7 = new java.util.ArrayList;
specialinvoke v7.<java.util.ArrayList: void <init>()>();
v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.List secretKeysHandlers> = v7;
v8 = <io.smallrye.config.ConfigValidator: io.smallrye.config.ConfigValidator EMPTY>;
v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.ConfigValidator validator> = v8;
v9 = new io.smallrye.config.KeyMap;
specialinvoke v9.<io.smallrye.config.KeyMap: void <init>()>();
v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.KeyMap defaultValues> = v9;
v10 = staticinvoke <io.smallrye.config.ConfigMappingProvider: io.smallrye.config.ConfigMappingProvider$Builder builder()>();
v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.ConfigMappingProvider$Builder mappingsBuilder> = v10;
v11 = staticinvoke <io.smallrye.config.SecuritySupport: java.lang.ClassLoader getContextClassLoader()>();
v0.<io.smallrye.config.SmallRyeConfigBuilder: java.lang.ClassLoader classLoader> = v11;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDefaultSources> = 0;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDefaultInterceptors> = 0;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredSources> = 0;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredConverters> = 0;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredInterceptors> = 0;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredSecretKeysHandlers> = 0;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredValidator> = 0;
return;
}
public io.smallrye.config.SmallRyeConfigBuilder addDiscoveredSources()
{
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredSources> = 1;
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder addDiscoveredConverters()
{
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredConverters> = 1;
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder addDiscoveredInterceptors()
{
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredInterceptors> = 1;
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder addDiscoveredSecretKeysHandlers()
{
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredSecretKeysHandlers> = 1;
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder addDiscoveredValidator()
{
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredValidator> = 1;
return v0;
}
java.util.List discoverSources()
{
io.smallrye.config.ConfigurableConfigSource v22;
java.lang.Iterable v13;
java.util.ArrayList v1;
boolean v10, v15, v20, v5;
java.util.Iterator v14, v19, v4, v9;
java.util.ServiceLoader v18, v3, v8;
io.smallrye.config.SmallRyeConfigBuilder v0;
java.lang.Object v11, v16, v21, v6;
java.lang.ClassLoader v12, v17, v2, v7;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.lang.ClassLoader classLoader>;
v3 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Lorg/eclipse/microprofile/config/spi/ConfigSource;", v2);
v4 = virtualinvoke v3.<java.util.ServiceLoader: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v6);
goto label1;
label2:
v7 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.lang.ClassLoader classLoader>;
v8 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Lorg/eclipse/microprofile/config/spi/ConfigSourceProvider;", v7);
v9 = virtualinvoke v8.<java.util.ServiceLoader: java.util.Iterator iterator()>();
label3:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label5;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
v12 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.lang.ClassLoader classLoader>;
v13 = interfaceinvoke v11.<org.eclipse.microprofile.config.spi.ConfigSourceProvider: java.lang.Iterable getConfigSources(java.lang.ClassLoader)>(v12);
v14 = interfaceinvoke v13.<java.lang.Iterable: java.util.Iterator iterator()>();
label4:
v15 = interfaceinvoke v14.<java.util.Iterator: boolean hasNext()>();
if v15 == 0 goto label3;
v16 = interfaceinvoke v14.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v16);
goto label4;
label5:
v17 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.lang.ClassLoader classLoader>;
v18 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Lio/smallrye/config/ConfigSourceFactory;", v17);
v19 = virtualinvoke v18.<java.util.ServiceLoader: java.util.Iterator iterator()>();
label6:
v20 = interfaceinvoke v19.<java.util.Iterator: boolean hasNext()>();
if v20 == 0 goto label7;
v21 = interfaceinvoke v19.<java.util.Iterator: java.lang.Object next()>();
v22 = new io.smallrye.config.ConfigurableConfigSource;
specialinvoke v22.<io.smallrye.config.ConfigurableConfigSource: void <init>(io.smallrye.config.ConfigSourceFactory)>(v21);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v22);
goto label6;
label7:
return v1;
}
java.util.List discoverConverters()
{
java.util.Iterator v4;
io.smallrye.config.SmallRyeConfigBuilder v0;
java.lang.Object v6;
java.util.ServiceLoader v3;
java.lang.ClassLoader v2;
boolean v5;
java.util.ArrayList v1;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.lang.ClassLoader classLoader>;
v3 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Lorg/eclipse/microprofile/config/spi/Converter;", v2);
v4 = virtualinvoke v3.<java.util.ServiceLoader: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v6);
goto label1;
label2:
return v1;
}
java.util.List discoverInterceptors()
{
java.util.Iterator v10, v4;
java.util.ServiceLoader v3, v9;
java.util.ArrayList v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority v13, v7;
java.lang.Object v12, v6;
java.lang.ClassLoader v2, v8;
boolean v11, v5;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.lang.ClassLoader classLoader>;
v3 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Lio/smallrye/config/ConfigSourceInterceptor;", v2);
v4 = virtualinvoke v3.<java.util.ServiceLoader: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = new io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority;
specialinvoke v7.<io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority: void <init>(io.smallrye.config.ConfigSourceInterceptor)>(v6);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v7);
goto label1;
label2:
v8 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.lang.ClassLoader classLoader>;
v9 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Lio/smallrye/config/ConfigSourceInterceptorFactory;", v8);
v10 = virtualinvoke v9.<java.util.ServiceLoader: java.util.Iterator iterator()>();
label3:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label4;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
v13 = new io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority;
specialinvoke v13.<io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority: void <init>(io.smallrye.config.ConfigSourceInterceptorFactory)>(v12);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v13);
goto label3;
label4:
return v1;
}
io.smallrye.config.ConfigValidator discoverValidator()
{
java.util.Iterator v3;
io.smallrye.config.SmallRyeConfigBuilder v0;
io.smallrye.config.ConfigValidator v6;
java.lang.Object v5;
java.util.ServiceLoader v2;
java.lang.ClassLoader v1;
boolean v4;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.lang.ClassLoader classLoader>;
v2 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Lio/smallrye/config/ConfigValidator;", v1);
v3 = virtualinvoke v2.<java.util.ServiceLoader: java.util.Iterator iterator()>();
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label1;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
return v5;
label1:
v6 = <io.smallrye.config.ConfigValidator: io.smallrye.config.ConfigValidator EMPTY>;
return v6;
}
public io.smallrye.config.SmallRyeConfigBuilder addDefaultSources()
{
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDefaultSources> = 1;
return v0;
}
protected java.util.List getDefaultSources()
{
java.util.List v5;
io.smallrye.config.EnvConfigSource v2;
io.smallrye.config.SmallRyeConfigBuilder v0;
java.lang.ClassLoader v4;
io.smallrye.config.SysPropConfigSource v3;
java.util.ArrayList v1;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = new io.smallrye.config.EnvConfigSource;
specialinvoke v2.<io.smallrye.config.EnvConfigSource: void <init>()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v2);
v3 = new io.smallrye.config.SysPropConfigSource;
specialinvoke v3.<io.smallrye.config.SysPropConfigSource: void <init>()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v3);
v4 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.lang.ClassLoader classLoader>;
v5 = staticinvoke <io.smallrye.config.PropertiesConfigSourceProvider: java.util.List classPathSources(java.lang.String,java.lang.ClassLoader)>("META-INF/microprofile-config.properties", v4);
interfaceinvoke v1.<java.util.List: boolean addAll(java.util.Collection)>(v5);
return v1;
}
public io.smallrye.config.SmallRyeConfigBuilder addDefaultInterceptors()
{
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDefaultInterceptors> = 1;
return v0;
}
java.util.List getDefaultInterceptors()
{
io.smallrye.config.SmallRyeConfigBuilder$2 v5;
io.smallrye.config.SmallRyeConfigBuilder$1 v3;
io.smallrye.config.SmallRyeConfigBuilder$5 v11;
io.smallrye.config.SmallRyeConfigBuilder$4 v9;
io.smallrye.config.SmallRyeConfigBuilder$3 v7;
java.util.ArrayList v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority v10, v2, v4, v6, v8;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = new io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority;
v3 = new io.smallrye.config.SmallRyeConfigBuilder$1;
specialinvoke v3.<io.smallrye.config.SmallRyeConfigBuilder$1: void <init>(io.smallrye.config.SmallRyeConfigBuilder)>(v0);
specialinvoke v2.<io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority: void <init>(io.smallrye.config.ConfigSourceInterceptorFactory)>(v3);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v2);
v4 = new io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority;
v5 = new io.smallrye.config.SmallRyeConfigBuilder$2;
specialinvoke v5.<io.smallrye.config.SmallRyeConfigBuilder$2: void <init>(io.smallrye.config.SmallRyeConfigBuilder)>(v0);
specialinvoke v4.<io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority: void <init>(io.smallrye.config.ConfigSourceInterceptorFactory)>(v5);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v4);
v6 = new io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority;
v7 = new io.smallrye.config.SmallRyeConfigBuilder$3;
specialinvoke v7.<io.smallrye.config.SmallRyeConfigBuilder$3: void <init>(io.smallrye.config.SmallRyeConfigBuilder)>(v0);
specialinvoke v6.<io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority: void <init>(io.smallrye.config.ConfigSourceInterceptorFactory)>(v7);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v6);
v8 = new io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority;
v9 = new io.smallrye.config.SmallRyeConfigBuilder$4;
specialinvoke v9.<io.smallrye.config.SmallRyeConfigBuilder$4: void <init>(io.smallrye.config.SmallRyeConfigBuilder)>(v0);
specialinvoke v8.<io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority: void <init>(io.smallrye.config.ConfigSourceInterceptorFactory)>(v9);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v8);
v10 = new io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority;
v11 = new io.smallrye.config.SmallRyeConfigBuilder$5;
specialinvoke v11.<io.smallrye.config.SmallRyeConfigBuilder$5: void <init>(io.smallrye.config.SmallRyeConfigBuilder)>(v0);
specialinvoke v10.<io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority: void <init>(io.smallrye.config.ConfigSourceInterceptorFactory)>(v11);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v10);
return v1;
}
public io.smallrye.config.SmallRyeConfigBuilder forClassLoader(java.lang.ClassLoader)
{
java.lang.ClassLoader v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: java.lang.ClassLoader;
v0.<io.smallrye.config.SmallRyeConfigBuilder: java.lang.ClassLoader classLoader> = v1;
return v0;
}
public transient io.smallrye.config.SmallRyeConfigBuilder withSources(org.eclipse.microprofile.config.spi.ConfigSource[])
{
java.util.List v2;
org.eclipse.microprofile.config.spi.ConfigSource[] v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: org.eclipse.microprofile.config.spi.ConfigSource[];
v2 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.List sources>;
staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(v2, v1);
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder withSources(java.util.Collection)
{
java.util.List v2;
io.smallrye.config.SmallRyeConfigBuilder v0;
java.util.Collection v1;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: java.util.Collection;
v2 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.List sources>;
interfaceinvoke v2.<java.util.List: boolean addAll(java.util.Collection)>(v1);
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder withSources(org.eclipse.microprofile.config.spi.ConfigSourceProvider)
{
java.util.List v2;
org.eclipse.microprofile.config.spi.ConfigSourceProvider v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: org.eclipse.microprofile.config.spi.ConfigSourceProvider;
v2 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.List sourceProviders>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v1);
return v0;
}
public transient io.smallrye.config.SmallRyeConfigBuilder withSources(io.smallrye.config.ConfigSourceFactory[])
{
io.smallrye.config.ConfigSourceFactory[] v1;
java.util.List v5;
io.smallrye.config.ConfigSourceFactory v4;
io.smallrye.config.SmallRyeConfigBuilder v0;
int v2, v3;
io.smallrye.config.ConfigurableConfigSource v6;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: io.smallrye.config.ConfigSourceFactory[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.List sources>;
v6 = new io.smallrye.config.ConfigurableConfigSource;
specialinvoke v6.<io.smallrye.config.ConfigurableConfigSource: void <init>(io.smallrye.config.ConfigSourceFactory)>(v4);
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v6);
v3 = v3 + 1;
goto label1;
label2:
return v0;
}
public transient io.smallrye.config.SmallRyeConfigBuilder withInterceptors(io.smallrye.config.ConfigSourceInterceptor[])
{
io.smallrye.config.ConfigSourceInterceptor v4;
java.util.List v5;
io.smallrye.config.ConfigSourceInterceptor[] v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority v6;
int v2, v3;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: io.smallrye.config.ConfigSourceInterceptor[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.List interceptors>;
v6 = new io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority;
specialinvoke v6.<io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority: void <init>(io.smallrye.config.ConfigSourceInterceptor)>(v4);
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v6);
v3 = v3 + 1;
goto label1;
label2:
return v0;
}
public transient io.smallrye.config.SmallRyeConfigBuilder withInterceptorFactories(io.smallrye.config.ConfigSourceInterceptorFactory[])
{
io.smallrye.config.ConfigSourceInterceptorFactory[] v1;
java.util.List v5;
io.smallrye.config.SmallRyeConfigBuilder v0;
io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority v6;
int v2, v3;
io.smallrye.config.ConfigSourceInterceptorFactory v4;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: io.smallrye.config.ConfigSourceInterceptorFactory[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.List interceptors>;
v6 = new io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority;
specialinvoke v6.<io.smallrye.config.SmallRyeConfigBuilder$InterceptorWithPriority: void <init>(io.smallrye.config.ConfigSourceInterceptorFactory)>(v4);
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v6);
v3 = v3 + 1;
goto label1;
label2:
return v0;
}
public transient io.smallrye.config.SmallRyeConfigBuilder withSecretKeysHandlers(io.smallrye.config.SecretKeysHandler[])
{
java.util.List v2, v3;
io.smallrye.config.SmallRyeConfigBuilder v0;
io.smallrye.config.SecretKeysHandler[] v1;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: io.smallrye.config.SecretKeysHandler[];
v2 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.List secretKeysHandlers>;
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
interfaceinvoke v2.<java.util.List: boolean addAll(java.util.Collection)>(v3);
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder withProfile(java.lang.String)
{
java.util.List v2, v3;
io.smallrye.config.SmallRyeConfigBuilder v0;
java.lang.String v1;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: java.lang.String;
virtualinvoke v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder addDefaultInterceptors()>();
v2 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.List profiles>;
v3 = staticinvoke <io.smallrye.config.ProfileConfigSourceInterceptor: java.util.List convertProfile(java.lang.String)>(v1);
interfaceinvoke v2.<java.util.List: boolean addAll(java.util.Collection)>(v3);
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder withProfiles(java.util.List)
{
java.util.List v1, v2;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: java.util.List;
virtualinvoke v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder addDefaultInterceptors()>();
v2 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.List profiles>;
interfaceinvoke v2.<java.util.List: boolean addAll(java.util.Collection)>(v1);
return v0;
}
public transient io.smallrye.config.SmallRyeConfigBuilder withSecretKeys(java.lang.String[])
{
java.util.stream.Stream v3;
io.smallrye.config.SmallRyeConfigBuilder v0;
java.util.Set v2;
java.lang.Object v5;
java.lang.String[] v1;
java.util.stream.Collector v4;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: java.lang.String[];
v2 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.Set secretKeys>;
v3 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>(v1);
v4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>();
v5 = interfaceinvoke v3.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v4);
interfaceinvoke v2.<java.util.Set: boolean addAll(java.util.Collection)>(v5);
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder withDefaultValue(java.lang.String, java.lang.String)
{
io.smallrye.config.SmallRyeConfigBuilder v0;
io.smallrye.config.KeyMap v3, v4;
java.lang.String v1, v2;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.KeyMap defaultValues>;
v4 = virtualinvoke v3.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap findOrAdd(java.lang.String)>(v1);
virtualinvoke v4.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v2);
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder withDefaultValues(java.util.Map)
{
java.util.Iterator v3;
java.util.Set v2;
io.smallrye.config.SmallRyeConfigBuilder v0;
java.util.Map v1;
io.smallrye.config.KeyMap v6, v8;
java.lang.Object v5, v7, v9;
boolean v4;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: java.util.Map;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.KeyMap defaultValues>;
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v8 = virtualinvoke v6.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap findOrAdd(java.lang.String)>(v7);
v9 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v8.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v9);
goto label1;
label2:
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder withMapping(java.lang.Class)
{
io.smallrye.config.SmallRyeConfigBuilder v0, v3;
java.lang.Class v1;
java.lang.String v2;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: java.lang.Class;
v2 = staticinvoke <io.smallrye.config.ConfigMappings: java.lang.String getPrefix(java.lang.Class)>(v1);
v3 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder withMapping(java.lang.Class,java.lang.String)>(v1, v2);
return v3;
}
public io.smallrye.config.SmallRyeConfigBuilder withMapping(java.lang.Class, java.lang.String)
{
io.smallrye.config.ConfigMappingProvider$Builder v3;
io.smallrye.config.SmallRyeConfigBuilder v0;
java.lang.Class v1;
java.lang.String v2;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.ConfigMappingProvider$Builder mappingsBuilder>;
virtualinvoke v3.<io.smallrye.config.ConfigMappingProvider$Builder: io.smallrye.config.ConfigMappingProvider$Builder addRoot(java.lang.String,java.lang.Class)>(v2, v1);
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder withMappingIgnore(java.lang.String)
{
java.lang.String v1;
io.smallrye.config.ConfigMappingProvider$Builder v2;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.ConfigMappingProvider$Builder mappingsBuilder>;
virtualinvoke v2.<io.smallrye.config.ConfigMappingProvider$Builder: io.smallrye.config.ConfigMappingProvider$Builder addIgnored(java.lang.String)>(v1);
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder withValidateUnknown(boolean)
{
io.smallrye.config.ConfigMappingProvider$Builder v2;
io.smallrye.config.SmallRyeConfigBuilder v0;
java.lang.String v3;
boolean v1;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: boolean;
v2 = v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.ConfigMappingProvider$Builder mappingsBuilder>;
virtualinvoke v2.<io.smallrye.config.ConfigMappingProvider$Builder: io.smallrye.config.ConfigMappingProvider$Builder validateUnknown(boolean)>(v1);
v3 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(v1);
virtualinvoke v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder withDefaultValue(java.lang.String,java.lang.String)>("smallrye.config.mapping.validate-unknown", v3);
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder withValidator(io.smallrye.config.ConfigValidator)
{
io.smallrye.config.ConfigValidator v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: io.smallrye.config.ConfigValidator;
v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.ConfigValidator validator> = v1;
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder withConverters(org.eclipse.microprofile.config.spi.Converter[])
{
java.lang.IllegalStateException v8;
org.eclipse.microprofile.config.spi.Converter[] v1;
io.smallrye.config.ConfigMessages v7;
org.eclipse.microprofile.config.spi.Converter v4;
java.lang.reflect.Type v6;
io.smallrye.config.SmallRyeConfigBuilder v0;
java.util.Map v10;
int v2, v3, v9;
java.lang.Class v5;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: org.eclipse.microprofile.config.spi.Converter[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v1[v3];
v5 = virtualinvoke v4.<java.lang.Object: java.lang.Class getClass()>();
v6 = staticinvoke <io.smallrye.config.Converters: java.lang.reflect.Type getConverterType(java.lang.Class)>(v5);
if v6 != null goto label2;
v7 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v8 = interfaceinvoke v7.<io.smallrye.config.ConfigMessages: java.lang.IllegalStateException unableToAddConverter(org.eclipse.microprofile.config.spi.Converter)>(v4);
throw v8;
label2:
v9 = staticinvoke <io.smallrye.config.SmallRyeConfigBuilder: int getPriority(org.eclipse.microprofile.config.spi.Converter)>(v4);
v10 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.Map converters>;
staticinvoke <io.smallrye.config.SmallRyeConfigBuilder: void addConverter(java.lang.reflect.Type,int,org.eclipse.microprofile.config.spi.Converter,java.util.Map)>(v6, v9, v4, v10);
v3 = v3 + 1;
goto label1;
label3:
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder withConverter(java.lang.Class, int, org.eclipse.microprofile.config.spi.Converter)
{
org.eclipse.microprofile.config.spi.Converter v3;
io.smallrye.config.SmallRyeConfigBuilder v0;
java.util.Map v4;
int v2;
java.lang.Class v1;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: int;
v3 := @parameter2: org.eclipse.microprofile.config.spi.Converter;
v4 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.Map converters>;
staticinvoke <io.smallrye.config.SmallRyeConfigBuilder: void addConverter(java.lang.reflect.Type,int,org.eclipse.microprofile.config.spi.Converter,java.util.Map)>(v1, v2, v3, v4);
return v0;
}
static void addConverter(java.lang.reflect.Type, org.eclipse.microprofile.config.spi.Converter, java.util.Map)
{
org.eclipse.microprofile.config.spi.Converter v1;
java.lang.reflect.Type v0;
java.util.Map v2;
int v3;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: org.eclipse.microprofile.config.spi.Converter;
v2 := @parameter2: java.util.Map;
v3 = staticinvoke <io.smallrye.config.SmallRyeConfigBuilder: int getPriority(org.eclipse.microprofile.config.spi.Converter)>(v1);
staticinvoke <io.smallrye.config.SmallRyeConfigBuilder: void addConverter(java.lang.reflect.Type,int,org.eclipse.microprofile.config.spi.Converter,java.util.Map)>(v0, v3, v1, v2);
return;
}
static void addConverter(java.lang.reflect.Type, int, org.eclipse.microprofile.config.spi.Converter, java.util.Map)
{
org.eclipse.microprofile.config.spi.Converter v2;
java.lang.reflect.Type v0;
java.util.Map v3;
int v1, v5;
io.smallrye.config.SmallRyeConfigBuilder$ConverterWithPriority v6;
java.lang.Object v4;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: int;
v2 := @parameter2: org.eclipse.microprofile.config.spi.Converter;
v3 := @parameter3: java.util.Map;
v4 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
if v4 == null goto label1;
v5 = v4.<io.smallrye.config.SmallRyeConfigBuilder$ConverterWithPriority: int priority>;
if v1 <= v5 goto label2;
label1:
v6 = new io.smallrye.config.SmallRyeConfigBuilder$ConverterWithPriority;
specialinvoke v6.<io.smallrye.config.SmallRyeConfigBuilder$ConverterWithPriority: void <init>(org.eclipse.microprofile.config.spi.Converter,int)>(v2, v1);
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v0, v6);
label2:
return;
}
private static int getPriority(org.eclipse.microprofile.config.spi.Converter)
{
org.eclipse.microprofile.config.spi.Converter v0;
int v1;
java.lang.'annotation'.Annotation v3;
java.lang.Class v2;
v0 := @parameter0: org.eclipse.microprofile.config.spi.Converter;
v1 = 100;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v2.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljakarta/annotation/Priority;");
if v3 == null goto label1;
v1 = interfaceinvoke v3.<jakarta.'annotation'.Priority: int value()>();
label1:
return v1;
}
public java.util.List getSources()
{
java.util.List v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.List sources>;
return v1;
}
public java.util.List getSourceProviders()
{
java.util.List v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.List sourceProviders>;
return v1;
}
public java.util.Map getConverters()
{
io.smallrye.config.SmallRyeConfigBuilder v0;
java.util.Map v1;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.Map converters>;
return v1;
}
public java.util.List getInterceptors()
{
java.util.List v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.util.List interceptors>;
return v1;
}
public io.smallrye.config.ConfigValidator getValidator()
{
io.smallrye.config.SmallRyeConfigBuilder v0;
io.smallrye.config.ConfigValidator v2, v3;
boolean v1;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean isAddDiscoveredValidator()>();
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.ConfigValidator discoverValidator()>();
v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.ConfigValidator validator> = v2;
label1:
v3 = v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.ConfigValidator validator>;
return v3;
}
public io.smallrye.config.KeyMap getDefaultValues()
{
io.smallrye.config.KeyMap v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.KeyMap defaultValues>;
return v1;
}
java.lang.ClassLoader getClassLoader()
{
java.lang.ClassLoader v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = v0.<io.smallrye.config.SmallRyeConfigBuilder: java.lang.ClassLoader classLoader>;
return v1;
}
public boolean isAddDefaultSources()
{
boolean v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDefaultSources>;
return v1;
}
public boolean isAddDefaultInterceptors()
{
boolean v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDefaultInterceptors>;
return v1;
}
public boolean isAddDiscoveredSources()
{
boolean v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredSources>;
return v1;
}
public boolean isAddDiscoveredConverters()
{
boolean v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredConverters>;
return v1;
}
public boolean isAddDiscoveredInterceptors()
{
boolean v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredInterceptors>;
return v1;
}
public boolean isAddDiscoveredSecretKeysHandlers()
{
boolean v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredSecretKeysHandlers>;
return v1;
}
public boolean isAddDiscoveredValidator()
{
boolean v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredValidator>;
return v1;
}
public io.smallrye.config.SmallRyeConfigBuilder setAddDefaultSources(boolean)
{
boolean v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: boolean;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDefaultSources> = v1;
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder setAddDefaultInterceptors(boolean)
{
boolean v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: boolean;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDefaultInterceptors> = v1;
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder setAddDiscoveredSources(boolean)
{
boolean v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: boolean;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredSources> = v1;
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder setAddDiscoveredConverters(boolean)
{
boolean v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: boolean;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredConverters> = v1;
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder setAddDiscoveredInterceptors(boolean)
{
boolean v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: boolean;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredInterceptors> = v1;
return v0;
}
public io.smallrye.config.SmallRyeConfigBuilder setAddDiscoveredValidator(boolean)
{
boolean v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter0: boolean;
v0.<io.smallrye.config.SmallRyeConfigBuilder: boolean addDiscoveredValidator> = v1;
return v0;
}
public io.smallrye.config.SmallRyeConfig build()
{
io.smallrye.config.ConfigMappingProvider$Builder v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
io.smallrye.config.KeyMap v3, v4;
io.smallrye.config.SmallRyeConfig v5;
io.smallrye.config.ConfigMappingProvider v2;
v0 := @this: io.smallrye.config.SmallRyeConfigBuilder;
v1 = v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.ConfigMappingProvider$Builder mappingsBuilder>;
v2 = virtualinvoke v1.<io.smallrye.config.ConfigMappingProvider$Builder: io.smallrye.config.ConfigMappingProvider build()>();
v3 = v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.KeyMap defaultValues>;
v4 = virtualinvoke v2.<io.smallrye.config.ConfigMappingProvider: io.smallrye.config.KeyMap getDefaultValues()>();
virtualinvoke v3.<io.smallrye.config.KeyMap: void putAll(io.smallrye.config.KeyMap)>(v4);
v5 = new io.smallrye.config.SmallRyeConfig;
specialinvoke v5.<io.smallrye.config.SmallRyeConfig: void <init>(io.smallrye.config.SmallRyeConfigBuilder)>(v0);
staticinvoke <io.smallrye.config.ConfigMappings: void mapConfiguration(io.smallrye.config.SmallRyeConfig,io.smallrye.config.ConfigMappingProvider)>(v5, v2);
return v5;
}
}