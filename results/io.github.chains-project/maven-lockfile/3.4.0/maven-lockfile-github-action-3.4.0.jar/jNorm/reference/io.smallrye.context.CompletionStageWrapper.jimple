public class io.smallrye.context.CompletionStageWrapper extends java.lang.Object implements java.util.concurrent.CompletionStage, io.smallrye.context.impl.Contextualized
{
protected final java.util.concurrent.CompletionStage f;
protected final io.smallrye.context.SmallRyeThreadContext context;
protected final java.util.concurrent.Executor executor;
public void <init>(io.smallrye.context.SmallRyeThreadContext, java.util.concurrent.CompletionStage, java.util.concurrent.Executor)
{
java.util.concurrent.CompletionStage v2;
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v3;
io.smallrye.context.SmallRyeThreadContext v1;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: io.smallrye.context.SmallRyeThreadContext;
v2 := @parameter1: java.util.concurrent.CompletionStage;
v3 := @parameter2: java.util.concurrent.Executor;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context> = v1;
v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f> = v2;
v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.Executor executor> = v3;
return;
}
protected void checkDefaultExecutor()
{
java.lang.UnsupportedOperationException v2;
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v1;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.Executor executor>;
if v1 != null goto label1;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Async methods not supported when no executor is specified");
throw v2;
label1:
return;
}
public java.util.concurrent.CompletableFuture toCompletableFuture()
{
java.util.concurrent.CompletionStage v2;
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v4;
io.smallrye.context.SmallRyeThreadContext v1;
java.util.concurrent.CompletableFuture v3, v5;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v2 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v3 = interfaceinvoke v2.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletableFuture toCompletableFuture()>();
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.Executor executor>;
v5 = virtualinvoke v1.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v3, v4, 2);
return v5;
}
public java.util.concurrent.CompletionStage exceptionally(java.util.function.Function)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.function.Function v1, v5;
java.util.concurrent.CompletionStage v3, v6, v7;
io.smallrye.context.SmallRyeThreadContext v2, v4;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.function.Function;
v2 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v1);
v6 = interfaceinvoke v3.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage exceptionally(java.util.function.Function)>(v5);
v7 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v6);
return v7;
}
public java.util.concurrent.CompletionStage handle(java.util.function.BiFunction)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.function.BiFunction v1, v5;
java.util.concurrent.CompletionStage v3, v6, v7;
io.smallrye.context.SmallRyeThreadContext v2, v4;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.function.BiFunction;
v2 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiFunction contextualFunctionUnlessContextualized(java.util.function.BiFunction)>(v1);
v6 = interfaceinvoke v3.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage handle(java.util.function.BiFunction)>(v5);
v7 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v6);
return v7;
}
public java.util.concurrent.CompletionStage handleAsync(java.util.function.BiFunction)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v6;
java.util.function.BiFunction v1, v5;
java.util.concurrent.CompletionStage v3, v7, v8;
io.smallrye.context.SmallRyeThreadContext v2, v4;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.function.BiFunction;
virtualinvoke v0.<io.smallrye.context.CompletionStageWrapper: void checkDefaultExecutor()>();
v2 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiFunction contextualFunctionUnlessContextualized(java.util.function.BiFunction)>(v1);
v6 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.Executor executor>;
v7 = interfaceinvoke v3.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage handleAsync(java.util.function.BiFunction,java.util.concurrent.Executor)>(v5, v6);
v8 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v7);
return v8;
}
public java.util.concurrent.CompletionStage handleAsync(java.util.function.BiFunction, java.util.concurrent.Executor)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v2;
java.util.function.BiFunction v1, v6;
java.util.concurrent.CompletionStage v4, v7, v8;
io.smallrye.context.SmallRyeThreadContext v3, v5;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.function.BiFunction;
v2 := @parameter1: java.util.concurrent.Executor;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiFunction contextualFunctionUnlessContextualized(java.util.function.BiFunction)>(v1);
v7 = interfaceinvoke v4.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage handleAsync(java.util.function.BiFunction,java.util.concurrent.Executor)>(v6, v2);
v8 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v7);
return v8;
}
public java.util.concurrent.CompletionStage thenApply(java.util.function.Function)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.function.Function v1, v5;
java.util.concurrent.CompletionStage v3, v6, v7;
io.smallrye.context.SmallRyeThreadContext v2, v4;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.function.Function;
v2 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v1);
v6 = interfaceinvoke v3.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenApply(java.util.function.Function)>(v5);
v7 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v6);
return v7;
}
public java.util.concurrent.CompletionStage thenApplyAsync(java.util.function.Function)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v6;
java.util.function.Function v1, v5;
java.util.concurrent.CompletionStage v3, v7, v8;
io.smallrye.context.SmallRyeThreadContext v2, v4;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.function.Function;
virtualinvoke v0.<io.smallrye.context.CompletionStageWrapper: void checkDefaultExecutor()>();
v2 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v1);
v6 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.Executor executor>;
v7 = interfaceinvoke v3.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenApplyAsync(java.util.function.Function,java.util.concurrent.Executor)>(v5, v6);
v8 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v7);
return v8;
}
public java.util.concurrent.CompletionStage thenApplyAsync(java.util.function.Function, java.util.concurrent.Executor)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v2;
java.util.function.Function v1, v6;
java.util.concurrent.CompletionStage v4, v7, v8;
io.smallrye.context.SmallRyeThreadContext v3, v5;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.function.Function;
v2 := @parameter1: java.util.concurrent.Executor;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v1);
v7 = interfaceinvoke v4.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenApplyAsync(java.util.function.Function,java.util.concurrent.Executor)>(v6, v2);
v8 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v7);
return v8;
}
public java.util.concurrent.CompletionStage thenAccept(java.util.function.Consumer)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.function.Consumer v1, v5;
java.util.concurrent.CompletionStage v3, v6, v7;
io.smallrye.context.SmallRyeThreadContext v2, v4;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.function.Consumer;
v2 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Consumer contextualConsumerUnlessContextualized(java.util.function.Consumer)>(v1);
v6 = interfaceinvoke v3.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenAccept(java.util.function.Consumer)>(v5);
v7 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v6);
return v7;
}
public java.util.concurrent.CompletionStage thenAcceptAsync(java.util.function.Consumer)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v6;
java.util.function.Consumer v1, v5;
java.util.concurrent.CompletionStage v3, v7, v8;
io.smallrye.context.SmallRyeThreadContext v2, v4;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.function.Consumer;
virtualinvoke v0.<io.smallrye.context.CompletionStageWrapper: void checkDefaultExecutor()>();
v2 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Consumer contextualConsumerUnlessContextualized(java.util.function.Consumer)>(v1);
v6 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.Executor executor>;
v7 = interfaceinvoke v3.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenAcceptAsync(java.util.function.Consumer,java.util.concurrent.Executor)>(v5, v6);
v8 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v7);
return v8;
}
public java.util.concurrent.CompletionStage thenAcceptAsync(java.util.function.Consumer, java.util.concurrent.Executor)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v2;
java.util.function.Consumer v1, v6;
java.util.concurrent.CompletionStage v4, v7, v8;
io.smallrye.context.SmallRyeThreadContext v3, v5;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.function.Consumer;
v2 := @parameter1: java.util.concurrent.Executor;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Consumer contextualConsumerUnlessContextualized(java.util.function.Consumer)>(v1);
v7 = interfaceinvoke v4.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenAcceptAsync(java.util.function.Consumer,java.util.concurrent.Executor)>(v6, v2);
v8 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v7);
return v8;
}
public java.util.concurrent.CompletionStage thenRun(java.lang.Runnable)
{
io.smallrye.context.CompletionStageWrapper v0;
java.lang.Runnable v1, v5;
java.util.concurrent.CompletionStage v3, v6, v7;
io.smallrye.context.SmallRyeThreadContext v2, v4;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.lang.Runnable;
v2 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v1);
v6 = interfaceinvoke v3.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenRun(java.lang.Runnable)>(v5);
v7 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v6);
return v7;
}
public java.util.concurrent.CompletionStage thenRunAsync(java.lang.Runnable)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v6;
java.lang.Runnable v1, v5;
java.util.concurrent.CompletionStage v3, v7, v8;
io.smallrye.context.SmallRyeThreadContext v2, v4;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.lang.Runnable;
virtualinvoke v0.<io.smallrye.context.CompletionStageWrapper: void checkDefaultExecutor()>();
v2 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v1);
v6 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.Executor executor>;
v7 = interfaceinvoke v3.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenRunAsync(java.lang.Runnable,java.util.concurrent.Executor)>(v5, v6);
v8 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v7);
return v8;
}
public java.util.concurrent.CompletionStage thenRunAsync(java.lang.Runnable, java.util.concurrent.Executor)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v2;
java.lang.Runnable v1, v6;
java.util.concurrent.CompletionStage v4, v7, v8;
io.smallrye.context.SmallRyeThreadContext v3, v5;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: java.util.concurrent.Executor;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v1);
v7 = interfaceinvoke v4.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenRunAsync(java.lang.Runnable,java.util.concurrent.Executor)>(v6, v2);
v8 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v7);
return v8;
}
public java.util.concurrent.CompletionStage thenCombine(java.util.concurrent.CompletionStage, java.util.function.BiFunction)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.function.BiFunction v2, v6;
java.util.concurrent.CompletionStage v1, v4, v7, v8;
io.smallrye.context.SmallRyeThreadContext v3, v5;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.BiFunction;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiFunction contextualFunctionUnlessContextualized(java.util.function.BiFunction)>(v2);
v7 = interfaceinvoke v4.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenCombine(java.util.concurrent.CompletionStage,java.util.function.BiFunction)>(v1, v6);
v8 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v7);
return v8;
}
public java.util.concurrent.CompletionStage thenCombineAsync(java.util.concurrent.CompletionStage, java.util.function.BiFunction)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v7;
java.util.function.BiFunction v2, v6;
java.util.concurrent.CompletionStage v1, v4, v8, v9;
io.smallrye.context.SmallRyeThreadContext v3, v5;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.BiFunction;
virtualinvoke v0.<io.smallrye.context.CompletionStageWrapper: void checkDefaultExecutor()>();
v3 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiFunction contextualFunctionUnlessContextualized(java.util.function.BiFunction)>(v2);
v7 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.Executor executor>;
v8 = interfaceinvoke v4.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenCombineAsync(java.util.concurrent.CompletionStage,java.util.function.BiFunction,java.util.concurrent.Executor)>(v1, v6, v7);
v9 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v8);
return v9;
}
public java.util.concurrent.CompletionStage thenCombineAsync(java.util.concurrent.CompletionStage, java.util.function.BiFunction, java.util.concurrent.Executor)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v3;
java.util.function.BiFunction v2, v7;
java.util.concurrent.CompletionStage v1, v5, v8, v9;
io.smallrye.context.SmallRyeThreadContext v4, v6;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.BiFunction;
v3 := @parameter2: java.util.concurrent.Executor;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v6 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v7 = virtualinvoke v6.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiFunction contextualFunctionUnlessContextualized(java.util.function.BiFunction)>(v2);
v8 = interfaceinvoke v5.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenCombineAsync(java.util.concurrent.CompletionStage,java.util.function.BiFunction,java.util.concurrent.Executor)>(v1, v7, v3);
v9 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v8);
return v9;
}
public java.util.concurrent.CompletionStage thenAcceptBoth(java.util.concurrent.CompletionStage, java.util.function.BiConsumer)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.CompletionStage v1, v4, v7, v8;
io.smallrye.context.SmallRyeThreadContext v3, v5;
java.util.function.BiConsumer v2, v6;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.BiConsumer;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiConsumer contextualConsumerUnlessContextualized(java.util.function.BiConsumer)>(v2);
v7 = interfaceinvoke v4.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenAcceptBoth(java.util.concurrent.CompletionStage,java.util.function.BiConsumer)>(v1, v6);
v8 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v7);
return v8;
}
public java.util.concurrent.CompletionStage thenAcceptBothAsync(java.util.concurrent.CompletionStage, java.util.function.BiConsumer)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v7;
java.util.concurrent.CompletionStage v1, v4, v8, v9;
io.smallrye.context.SmallRyeThreadContext v3, v5;
java.util.function.BiConsumer v2, v6;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.BiConsumer;
virtualinvoke v0.<io.smallrye.context.CompletionStageWrapper: void checkDefaultExecutor()>();
v3 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiConsumer contextualConsumerUnlessContextualized(java.util.function.BiConsumer)>(v2);
v7 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.Executor executor>;
v8 = interfaceinvoke v4.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenAcceptBothAsync(java.util.concurrent.CompletionStage,java.util.function.BiConsumer,java.util.concurrent.Executor)>(v1, v6, v7);
v9 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v8);
return v9;
}
public java.util.concurrent.CompletionStage thenAcceptBothAsync(java.util.concurrent.CompletionStage, java.util.function.BiConsumer, java.util.concurrent.Executor)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v3;
java.util.concurrent.CompletionStage v1, v5, v8, v9;
io.smallrye.context.SmallRyeThreadContext v4, v6;
java.util.function.BiConsumer v2, v7;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.BiConsumer;
v3 := @parameter2: java.util.concurrent.Executor;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v6 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v7 = virtualinvoke v6.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiConsumer contextualConsumerUnlessContextualized(java.util.function.BiConsumer)>(v2);
v8 = interfaceinvoke v5.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenAcceptBothAsync(java.util.concurrent.CompletionStage,java.util.function.BiConsumer,java.util.concurrent.Executor)>(v1, v7, v3);
v9 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v8);
return v9;
}
public java.util.concurrent.CompletionStage runAfterBoth(java.util.concurrent.CompletionStage, java.lang.Runnable)
{
io.smallrye.context.CompletionStageWrapper v0;
java.lang.Runnable v2, v6;
java.util.concurrent.CompletionStage v1, v4, v7, v8;
io.smallrye.context.SmallRyeThreadContext v3, v5;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.lang.Runnable;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v2);
v7 = interfaceinvoke v4.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage runAfterBoth(java.util.concurrent.CompletionStage,java.lang.Runnable)>(v1, v6);
v8 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v7);
return v8;
}
public java.util.concurrent.CompletionStage runAfterBothAsync(java.util.concurrent.CompletionStage, java.lang.Runnable)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v7;
java.lang.Runnable v2, v6;
java.util.concurrent.CompletionStage v1, v4, v8, v9;
io.smallrye.context.SmallRyeThreadContext v3, v5;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.lang.Runnable;
virtualinvoke v0.<io.smallrye.context.CompletionStageWrapper: void checkDefaultExecutor()>();
v3 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v2);
v7 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.Executor executor>;
v8 = interfaceinvoke v4.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage runAfterBothAsync(java.util.concurrent.CompletionStage,java.lang.Runnable,java.util.concurrent.Executor)>(v1, v6, v7);
v9 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v8);
return v9;
}
public java.util.concurrent.CompletionStage runAfterBothAsync(java.util.concurrent.CompletionStage, java.lang.Runnable, java.util.concurrent.Executor)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v3;
java.lang.Runnable v2, v7;
java.util.concurrent.CompletionStage v1, v5, v8, v9;
io.smallrye.context.SmallRyeThreadContext v4, v6;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.lang.Runnable;
v3 := @parameter2: java.util.concurrent.Executor;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v6 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v7 = virtualinvoke v6.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v2);
v8 = interfaceinvoke v5.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage runAfterBothAsync(java.util.concurrent.CompletionStage,java.lang.Runnable,java.util.concurrent.Executor)>(v1, v7, v3);
v9 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v8);
return v9;
}
public java.util.concurrent.CompletionStage applyToEither(java.util.concurrent.CompletionStage, java.util.function.Function)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.function.Function v2, v6;
java.util.concurrent.CompletionStage v1, v4, v7, v8;
io.smallrye.context.SmallRyeThreadContext v3, v5;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.Function;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v2);
v7 = interfaceinvoke v4.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage applyToEither(java.util.concurrent.CompletionStage,java.util.function.Function)>(v1, v6);
v8 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v7);
return v8;
}
public java.util.concurrent.CompletionStage applyToEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Function)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v7;
java.util.function.Function v2, v6;
java.util.concurrent.CompletionStage v1, v4, v8, v9;
io.smallrye.context.SmallRyeThreadContext v3, v5;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.Function;
virtualinvoke v0.<io.smallrye.context.CompletionStageWrapper: void checkDefaultExecutor()>();
v3 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v2);
v7 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.Executor executor>;
v8 = interfaceinvoke v4.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage applyToEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Function,java.util.concurrent.Executor)>(v1, v6, v7);
v9 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v8);
return v9;
}
public java.util.concurrent.CompletionStage applyToEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Function, java.util.concurrent.Executor)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v3;
java.util.function.Function v2, v7;
java.util.concurrent.CompletionStage v1, v5, v8, v9;
io.smallrye.context.SmallRyeThreadContext v4, v6;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.Function;
v3 := @parameter2: java.util.concurrent.Executor;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v6 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v7 = virtualinvoke v6.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v2);
v8 = interfaceinvoke v5.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage applyToEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Function,java.util.concurrent.Executor)>(v1, v7, v3);
v9 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v8);
return v9;
}
public java.util.concurrent.CompletionStage acceptEither(java.util.concurrent.CompletionStage, java.util.function.Consumer)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.function.Consumer v2, v6;
java.util.concurrent.CompletionStage v1, v4, v7, v8;
io.smallrye.context.SmallRyeThreadContext v3, v5;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.Consumer;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Consumer contextualConsumerUnlessContextualized(java.util.function.Consumer)>(v2);
v7 = interfaceinvoke v4.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage acceptEither(java.util.concurrent.CompletionStage,java.util.function.Consumer)>(v1, v6);
v8 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v7);
return v8;
}
public java.util.concurrent.CompletionStage acceptEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Consumer)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v7;
java.util.function.Consumer v2, v6;
java.util.concurrent.CompletionStage v1, v4, v8, v9;
io.smallrye.context.SmallRyeThreadContext v3, v5;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.Consumer;
virtualinvoke v0.<io.smallrye.context.CompletionStageWrapper: void checkDefaultExecutor()>();
v3 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Consumer contextualConsumerUnlessContextualized(java.util.function.Consumer)>(v2);
v7 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.Executor executor>;
v8 = interfaceinvoke v4.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage acceptEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Consumer,java.util.concurrent.Executor)>(v1, v6, v7);
v9 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v8);
return v9;
}
public java.util.concurrent.CompletionStage acceptEitherAsync(java.util.concurrent.CompletionStage, java.util.function.Consumer, java.util.concurrent.Executor)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v3;
java.util.function.Consumer v2, v7;
java.util.concurrent.CompletionStage v1, v5, v8, v9;
io.smallrye.context.SmallRyeThreadContext v4, v6;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.function.Consumer;
v3 := @parameter2: java.util.concurrent.Executor;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v6 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v7 = virtualinvoke v6.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Consumer contextualConsumerUnlessContextualized(java.util.function.Consumer)>(v2);
v8 = interfaceinvoke v5.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage acceptEitherAsync(java.util.concurrent.CompletionStage,java.util.function.Consumer,java.util.concurrent.Executor)>(v1, v7, v3);
v9 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v8);
return v9;
}
public java.util.concurrent.CompletionStage runAfterEither(java.util.concurrent.CompletionStage, java.lang.Runnable)
{
io.smallrye.context.CompletionStageWrapper v0;
java.lang.Runnable v2, v6;
java.util.concurrent.CompletionStage v1, v4, v7, v8;
io.smallrye.context.SmallRyeThreadContext v3, v5;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.lang.Runnable;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v2);
v7 = interfaceinvoke v4.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage runAfterEither(java.util.concurrent.CompletionStage,java.lang.Runnable)>(v1, v6);
v8 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v7);
return v8;
}
public java.util.concurrent.CompletionStage runAfterEitherAsync(java.util.concurrent.CompletionStage, java.lang.Runnable)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v7;
java.lang.Runnable v2, v6;
java.util.concurrent.CompletionStage v1, v4, v8, v9;
io.smallrye.context.SmallRyeThreadContext v3, v5;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.lang.Runnable;
virtualinvoke v0.<io.smallrye.context.CompletionStageWrapper: void checkDefaultExecutor()>();
v3 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v2);
v7 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.Executor executor>;
v8 = interfaceinvoke v4.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage runAfterEitherAsync(java.util.concurrent.CompletionStage,java.lang.Runnable,java.util.concurrent.Executor)>(v1, v6, v7);
v9 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v8);
return v9;
}
public java.util.concurrent.CompletionStage runAfterEitherAsync(java.util.concurrent.CompletionStage, java.lang.Runnable, java.util.concurrent.Executor)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v3;
java.lang.Runnable v2, v7;
java.util.concurrent.CompletionStage v1, v5, v8, v9;
io.smallrye.context.SmallRyeThreadContext v4, v6;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.lang.Runnable;
v3 := @parameter2: java.util.concurrent.Executor;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v6 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v7 = virtualinvoke v6.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)>(v2);
v8 = interfaceinvoke v5.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage runAfterEitherAsync(java.util.concurrent.CompletionStage,java.lang.Runnable,java.util.concurrent.Executor)>(v1, v7, v3);
v9 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v8);
return v9;
}
public java.util.concurrent.CompletionStage thenCompose(java.util.function.Function)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.function.Function v1, v5;
java.util.concurrent.CompletionStage v3, v6, v7;
io.smallrye.context.SmallRyeThreadContext v2, v4;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.function.Function;
v2 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v1);
v6 = interfaceinvoke v3.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenCompose(java.util.function.Function)>(v5);
v7 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v6);
return v7;
}
public java.util.concurrent.CompletionStage thenComposeAsync(java.util.function.Function)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v6;
java.util.function.Function v1, v5;
java.util.concurrent.CompletionStage v3, v7, v8;
io.smallrye.context.SmallRyeThreadContext v2, v4;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.function.Function;
virtualinvoke v0.<io.smallrye.context.CompletionStageWrapper: void checkDefaultExecutor()>();
v2 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v1);
v6 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.Executor executor>;
v7 = interfaceinvoke v3.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenComposeAsync(java.util.function.Function,java.util.concurrent.Executor)>(v5, v6);
v8 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v7);
return v8;
}
public java.util.concurrent.CompletionStage thenComposeAsync(java.util.function.Function, java.util.concurrent.Executor)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v2;
java.util.function.Function v1, v6;
java.util.concurrent.CompletionStage v4, v7, v8;
io.smallrye.context.SmallRyeThreadContext v3, v5;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.function.Function;
v2 := @parameter1: java.util.concurrent.Executor;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)>(v1);
v7 = interfaceinvoke v4.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage thenComposeAsync(java.util.function.Function,java.util.concurrent.Executor)>(v6, v2);
v8 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v7);
return v8;
}
public java.util.concurrent.CompletionStage whenComplete(java.util.function.BiConsumer)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.CompletionStage v3, v6, v7;
io.smallrye.context.SmallRyeThreadContext v2, v4;
java.util.function.BiConsumer v1, v5;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.function.BiConsumer;
v2 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiConsumer contextualConsumerUnlessContextualized(java.util.function.BiConsumer)>(v1);
v6 = interfaceinvoke v3.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage whenComplete(java.util.function.BiConsumer)>(v5);
v7 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v6);
return v7;
}
public java.util.concurrent.CompletionStage whenCompleteAsync(java.util.function.BiConsumer)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v6;
java.util.concurrent.CompletionStage v3, v7, v8;
io.smallrye.context.SmallRyeThreadContext v2, v4;
java.util.function.BiConsumer v1, v5;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.function.BiConsumer;
virtualinvoke v0.<io.smallrye.context.CompletionStageWrapper: void checkDefaultExecutor()>();
v2 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v5 = virtualinvoke v4.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiConsumer contextualConsumerUnlessContextualized(java.util.function.BiConsumer)>(v1);
v6 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.Executor executor>;
v7 = interfaceinvoke v3.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage whenCompleteAsync(java.util.function.BiConsumer,java.util.concurrent.Executor)>(v5, v6);
v8 = virtualinvoke v2.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v7);
return v8;
}
public java.util.concurrent.CompletionStage whenCompleteAsync(java.util.function.BiConsumer, java.util.concurrent.Executor)
{
io.smallrye.context.CompletionStageWrapper v0;
java.util.concurrent.Executor v2;
java.util.concurrent.CompletionStage v4, v7, v8;
io.smallrye.context.SmallRyeThreadContext v3, v5;
java.util.function.BiConsumer v1, v6;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.util.function.BiConsumer;
v2 := @parameter1: java.util.concurrent.Executor;
v3 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v4 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v5 = v0.<io.smallrye.context.CompletionStageWrapper: io.smallrye.context.SmallRyeThreadContext context>;
v6 = virtualinvoke v5.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiConsumer contextualConsumerUnlessContextualized(java.util.function.BiConsumer)>(v1);
v7 = interfaceinvoke v4.<java.util.concurrent.CompletionStage: java.util.concurrent.CompletionStage whenCompleteAsync(java.util.function.BiConsumer,java.util.concurrent.Executor)>(v6, v2);
v8 = virtualinvoke v3.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)>(v7);
return v8;
}
public java.lang.String toString()
{
java.lang.String v2;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.CompletionStageWrapper v0;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public int hashCode()
{
int v2;
java.util.concurrent.CompletionStage v1;
io.smallrye.context.CompletionStageWrapper v0;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public boolean equals(java.lang.Object)
{
java.util.concurrent.CompletionStage v2;
io.smallrye.context.CompletionStageWrapper v0;
java.lang.Object v1;
boolean v3;
v0 := @this: io.smallrye.context.CompletionStageWrapper;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.context.CompletionStageWrapper: java.util.concurrent.CompletionStage f>;
v3 = virtualinvoke v2.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
return v3;
}
}