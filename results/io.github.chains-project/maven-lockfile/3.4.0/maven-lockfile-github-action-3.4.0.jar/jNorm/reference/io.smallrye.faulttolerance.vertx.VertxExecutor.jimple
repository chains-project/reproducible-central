final class io.smallrye.faulttolerance.vertx.VertxExecutor extends java.lang.Object implements java.util.concurrent.Executor
{
private final io.vertx.core.Context vertxContext;
void <init>(io.vertx.core.Context)
{
io.smallrye.faulttolerance.vertx.VertxExecutor v0;
io.vertx.core.Context v1;
v0 := @this: io.smallrye.faulttolerance.vertx.VertxExecutor;
v1 := @parameter0: io.vertx.core.Context;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.faulttolerance.vertx.VertxExecutor: io.vertx.core.Context vertxContext> = v1;
return;
}
public void execute(java.lang.Runnable)
{
io.smallrye.faulttolerance.vertx.VertxExecutor v0;
io.smallrye.faulttolerance.core.util.RunnableWrapper v4;
io.vertx.core.Context v2, v3, v6;
java.lang.Runnable v1, v5;
io.vertx.core.Handler v7;
v0 := @this: io.smallrye.faulttolerance.vertx.VertxExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.core.Vertx: io.vertx.core.Context currentContext()>();
v3 = v0.<io.smallrye.faulttolerance.vertx.VertxExecutor: io.vertx.core.Context vertxContext>;
if v2 != v3 goto label1;
interfaceinvoke v1.<java.lang.Runnable: void run()>();
return;
label1:
v4 = <io.smallrye.faulttolerance.core.util.RunnableWrapper: io.smallrye.faulttolerance.core.util.RunnableWrapper INSTANCE>;
v5 = interfaceinvoke v4.<io.smallrye.faulttolerance.core.util.RunnableWrapper: java.lang.Runnable wrap(java.lang.Runnable)>(v1);
v6 = v0.<io.smallrye.faulttolerance.vertx.VertxExecutor: io.vertx.core.Context vertxContext>;
v7 = staticinvoke <io.smallrye.faulttolerance.vertx.VertxExecutor$lambda_execute_0__2550: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v5);
interfaceinvoke v6.<io.vertx.core.Context: void runOnContext(io.vertx.core.Handler)>(v7);
return;
}
}