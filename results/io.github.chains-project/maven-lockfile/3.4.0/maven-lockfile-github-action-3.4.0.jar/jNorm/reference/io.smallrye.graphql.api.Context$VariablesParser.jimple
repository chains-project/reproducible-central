public class io.smallrye.graphql.api.Context$VariablesParser extends java.lang.Object
{
public void <init>()
{
io.smallrye.graphql.api.Context$VariablesParser v0;
v0 := @this: io.smallrye.graphql.api.Context$VariablesParser;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.util.Optional toMap(jakarta.json.JsonValue)
{
jakarta.json.JsonValue v0, v1;
java.util.Map v8;
jakarta.json.JsonObject v3, v7;
java.util.Optional v10, v9;
jakarta.json.JsonArray v5;
boolean v2, v4, v6;
v0 := @parameter0: jakarta.json.JsonValue;
if null == v0 goto label1;
v1 = <jakarta.json.JsonValue: jakarta.json.JsonValue NULL>;
v2 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v2 != 0 goto label1;
v3 = <jakarta.json.JsonValue: jakarta.json.JsonObject EMPTY_JSON_OBJECT>;
v4 = virtualinvoke v3.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v4 != 0 goto label1;
v5 = <jakarta.json.JsonValue: jakarta.json.JsonArray EMPTY_JSON_ARRAY>;
v6 = virtualinvoke v5.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v6 != 0 goto label1;
v7 = interfaceinvoke v0.<jakarta.json.JsonValue: jakarta.json.JsonObject asJsonObject()>();
v8 = staticinvoke <io.smallrye.graphql.api.Context$VariablesParser: java.util.Map toMap(jakarta.json.JsonObject)>(v7);
v9 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(v8);
return v9;
label1:
v10 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
return v10;
}
private static java.util.Map toMap(jakarta.json.JsonObject)
{
java.util.Iterator v3;
java.util.Set v2;
java.util.HashMap v1;
jakarta.json.JsonObject v0;
java.lang.Object v5, v6, v7, v8;
boolean v4;
v0 := @parameter0: jakarta.json.JsonObject;
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
if v0 == null goto label2;
v2 = interfaceinvoke v0.<jakarta.json.JsonObject: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
v8 = staticinvoke <io.smallrye.graphql.api.Context$VariablesParser: java.lang.Object toObject(jakarta.json.JsonValue)>(v7);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v8);
goto label1;
label2:
return v1;
}
private static java.lang.Object toObject(jakarta.json.JsonValue)
{
jakarta.json.JsonValue v0;
java.util.ArrayList v6;
int[] v3;
int v4, v5, v7, v8;
jakarta.json.JsonValue$ValueType v2;
java.lang.Object v1, v10, v9;
v0 := @parameter0: jakarta.json.JsonValue;
v1 = null;
v2 = interfaceinvoke v0.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
if null == v2 goto label9;
v3 = <io.smallrye.graphql.api.Context$1: int[] $SwitchMap$jakarta$json$JsonValue$ValueType>;
v4 = virtualinvoke v2.<jakarta.json.JsonValue$ValueType: int ordinal()>();
v5 = v3[v4];
tableswitch(v5)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label3;
case 4: goto label4;
case 5: goto label5;
case 6: goto label8;
default: goto label9;
};
label1:
v1 = interfaceinvoke v0.<jakarta.json.JsonNumber: java.math.BigDecimal bigDecimalValue()>();
goto label9;
label2:
v1 = interfaceinvoke v0.<jakarta.json.JsonString: java.lang.String getString()>();
goto label9;
label3:
v1 = <java.lang.Boolean: java.lang.Boolean FALSE>;
goto label9;
label4:
v1 = <java.lang.Boolean: java.lang.Boolean TRUE>;
goto label9;
label5:
v6 = new java.util.ArrayList;
specialinvoke v6.<java.util.ArrayList: void <init>()>();
v7 = interfaceinvoke v0.<jakarta.json.JsonArray: int size()>();
v8 = 0;
label6:
if v8 >= v7 goto label7;
v9 = interfaceinvoke v0.<jakarta.json.JsonArray: java.lang.Object get(int)>(v8);
v10 = staticinvoke <io.smallrye.graphql.api.Context$VariablesParser: java.lang.Object toObject(jakarta.json.JsonValue)>(v9);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v10);
v8 = v8 + 1;
goto label6;
label7:
v1 = v6;
goto label9;
label8:
v1 = staticinvoke <io.smallrye.graphql.api.Context$VariablesParser: java.util.Map toMap(jakarta.json.JsonObject)>(v0);
label9:
return v1;
}
}