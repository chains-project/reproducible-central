public class io.smallrye.graphql.client.impl.typesafe.json.JsonUtils extends java.lang.Object
{
public void <init>()
{
io.smallrye.graphql.client.impl.typesafe.json.JsonUtils v0;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.json.JsonUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.Object toValue(jakarta.json.JsonValue)
{
java.lang.UnsupportedOperationException v13;
jakarta.json.JsonValue v0;
int[] v1;
java.util.Map v12;
int v3, v4;
jakarta.json.JsonObject v11;
jakarta.json.JsonValue$ValueType v2;
java.lang.Boolean v5, v6;
java.lang.Object v10;
java.lang.String v7;
java.lang.Number v8;
jakarta.json.JsonArray v9;
v0 := @parameter0: jakarta.json.JsonValue;
v1 = <io.smallrye.graphql.client.impl.typesafe.json.JsonUtils$1: int[] $SwitchMap$jakarta$json$JsonValue$ValueType>;
v2 = interfaceinvoke v0.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v3 = virtualinvoke v2.<jakarta.json.JsonValue$ValueType: int ordinal()>();
v4 = v1[v3];
tableswitch(v4)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label3;
case 4: goto label4;
case 5: goto label5;
case 6: goto label6;
case 7: goto label7;
default: goto label8;
};
label1:
return null;
label2:
v5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
return v5;
label3:
v6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
return v6;
label4:
v7 = interfaceinvoke v0.<jakarta.json.JsonString: java.lang.String getString()>();
return v7;
label5:
v8 = interfaceinvoke v0.<jakarta.json.JsonNumber: java.lang.Number numberValue()>();
return v8;
label6:
v9 = interfaceinvoke v0.<jakarta.json.JsonValue: jakarta.json.JsonArray asJsonArray()>();
v10 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.json.JsonUtils: java.lang.Object toList(jakarta.json.JsonArray)>(v9);
return v10;
label7:
v11 = interfaceinvoke v0.<jakarta.json.JsonValue: jakarta.json.JsonObject asJsonObject()>();
v12 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.json.JsonUtils: java.util.Map toMap(jakarta.json.JsonObject)>(v11);
return v12;
label8:
v13 = new java.lang.UnsupportedOperationException;
specialinvoke v13.<java.lang.UnsupportedOperationException: void <init>()>();
throw v13;
}
public static java.lang.Object toList(jakarta.json.JsonArray)
{
java.util.stream.Stream v1, v3;
java.lang.Object v5;
java.util.stream.Collector v4;
jakarta.json.JsonArray v0;
java.util.function.Function v2;
v0 := @parameter0: jakarta.json.JsonArray;
v1 = interfaceinvoke v0.<jakarta.json.JsonArray: java.util.stream.Stream stream()>();
v2 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.json.JsonUtils$toValue__732: java.util.function.Function bootstrap$()>();
v3 = interfaceinvoke v1.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v2);
v4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v5 = interfaceinvoke v3.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v4);
return v5;
}
public static java.util.Map toMap(jakarta.json.JsonObject)
{
java.util.Iterator v3;
java.util.Set v2;
java.util.LinkedHashMap v1;
jakarta.json.JsonObject v0;
java.lang.Object v5, v6, v7, v8;
boolean v4;
v0 := @parameter0: jakarta.json.JsonObject;
if v0 != null goto label1;
return null;
label1:
v1 = new java.util.LinkedHashMap;
specialinvoke v1.<java.util.LinkedHashMap: void <init>()>();
v2 = interfaceinvoke v0.<jakarta.json.JsonObject: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label2:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label3;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
v8 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.json.JsonUtils: java.lang.Object toValue(jakarta.json.JsonValue)>(v7);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v8);
goto label2;
label3:
return v1;
}
public static boolean isListOf(jakarta.json.JsonValue, java.lang.String)
{
jakarta.json.JsonValue v0;
int v5;
jakarta.json.JsonObject v12;
jakarta.json.JsonValue$ValueType v2, v3, v8, v9;
java.lang.String v1, v13;
boolean v14, v15;
java.lang.Object v11, v7;
jakarta.json.JsonArray v10, v4, v6;
v0 := @parameter0: jakarta.json.JsonValue;
v1 := @parameter1: java.lang.String;
v2 = interfaceinvoke v0.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v3 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType ARRAY>;
if v2 != v3 goto label1;
v4 = interfaceinvoke v0.<jakarta.json.JsonValue: jakarta.json.JsonArray asJsonArray()>();
v5 = interfaceinvoke v4.<jakarta.json.JsonArray: int size()>();
if v5 <= 0 goto label1;
v6 = interfaceinvoke v0.<jakarta.json.JsonValue: jakarta.json.JsonArray asJsonArray()>();
v7 = interfaceinvoke v6.<jakarta.json.JsonArray: java.lang.Object get(int)>(0);
v8 = interfaceinvoke v7.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v9 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType OBJECT>;
if v8 != v9 goto label1;
v10 = interfaceinvoke v0.<jakarta.json.JsonValue: jakarta.json.JsonArray asJsonArray()>();
v11 = interfaceinvoke v10.<jakarta.json.JsonArray: java.lang.Object get(int)>(0);
v12 = interfaceinvoke v11.<jakarta.json.JsonValue: jakarta.json.JsonObject asJsonObject()>();
v13 = interfaceinvoke v12.<jakarta.json.JsonObject: java.lang.String getString(java.lang.String,java.lang.String)>("__typename", null);
v14 = virtualinvoke v1.<java.lang.String: boolean equals(java.lang.Object)>(v13);
if v14 == 0 goto label1;
v15 = 1;
goto label2;
label1:
v15 = 0;
label2:
return v15;
}
}