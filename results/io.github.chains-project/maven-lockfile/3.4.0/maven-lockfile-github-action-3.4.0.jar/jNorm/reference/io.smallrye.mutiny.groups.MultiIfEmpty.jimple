public class io.smallrye.mutiny.groups.MultiIfEmpty extends java.lang.Object
{
private final io.smallrye.mutiny.Multi upstream;
void <init>(io.smallrye.mutiny.Multi)
{
io.smallrye.mutiny.groups.MultiIfEmpty v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.groups.MultiIfEmpty;
v1 := @parameter0: io.smallrye.mutiny.Multi;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.groups.MultiIfEmpty: io.smallrye.mutiny.Multi upstream> = v1;
return;
}
public io.smallrye.mutiny.Multi failWith(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.groups.MultiIfEmpty v0;
java.util.function.Supplier v2;
io.smallrye.mutiny.Multi v3;
v0 := @this: io.smallrye.mutiny.groups.MultiIfEmpty;
v1 := @parameter0: java.lang.Throwable;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "failure");
v2 = staticinvoke <io.smallrye.mutiny.groups.MultiIfEmpty$lambda_failWith_0__2970: java.util.function.Supplier bootstrap$(java.lang.Throwable)>(v1);
v3 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiIfEmpty: io.smallrye.mutiny.Multi failWith(java.util.function.Supplier)>(v2);
return v3;
}
public io.smallrye.mutiny.Multi failWith(java.util.function.Supplier)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.MultiIfEmpty v0;
java.lang.Object v2;
java.util.function.Supplier v1, v3;
io.smallrye.mutiny.Multi v5;
v0 := @this: io.smallrye.mutiny.groups.MultiIfEmpty;
v1 := @parameter0: java.util.function.Supplier;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "supplier");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Supplier decorate(java.util.function.Supplier)>(v2);
v4 = staticinvoke <io.smallrye.mutiny.groups.MultiIfEmpty: java.util.function.Consumer createMultiFromFailureSupplier(java.util.function.Supplier)>(v3);
v5 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiIfEmpty: io.smallrye.mutiny.Multi switchToEmitter(java.util.function.Consumer)>(v4);
return v5;
}
static java.util.function.Consumer createMultiFromFailureSupplier(java.util.function.Supplier)
{
java.util.function.Consumer v1;
java.util.function.Supplier v0;
v0 := @parameter0: java.util.function.Supplier;
v1 = staticinvoke <io.smallrye.mutiny.groups.MultiIfEmpty$lambda_createMultiFromFailureSupplier_1__2971: java.util.function.Consumer bootstrap$(java.util.function.Supplier)>(v0);
return v1;
}
public io.smallrye.mutiny.Multi fail()
{
io.smallrye.mutiny.groups.MultiIfEmpty v0;
java.util.function.Supplier v1;
io.smallrye.mutiny.Multi v2;
v0 := @this: io.smallrye.mutiny.groups.MultiIfEmpty;
v1 = staticinvoke <io.smallrye.mutiny.groups.MultiIfEmpty$init__2972: java.util.function.Supplier bootstrap$()>();
v2 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiIfEmpty: io.smallrye.mutiny.Multi failWith(java.util.function.Supplier)>(v1);
return v2;
}
public io.smallrye.mutiny.Multi switchToEmitter(java.util.function.Consumer)
{
java.util.function.Consumer v1, v3;
io.smallrye.mutiny.groups.MultiIfEmpty v0;
java.lang.Object v2;
java.util.function.Supplier v4;
io.smallrye.mutiny.Multi v5;
v0 := @this: io.smallrye.mutiny.groups.MultiIfEmpty;
v1 := @parameter0: java.util.function.Consumer;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "consumer");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Consumer decorate(java.util.function.Consumer)>(v2);
v4 = staticinvoke <io.smallrye.mutiny.groups.MultiIfEmpty$lambda_switchToEmitter_2__2973: java.util.function.Supplier bootstrap$(java.util.function.Consumer)>(v3);
v5 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiIfEmpty: io.smallrye.mutiny.Multi switchTo(java.util.function.Supplier)>(v4);
return v5;
}
public io.smallrye.mutiny.Multi switchTo(java.util.concurrent.Flow$Publisher)
{
io.smallrye.mutiny.groups.MultiIfEmpty v0;
java.util.concurrent.Flow$Publisher v1;
java.util.function.Supplier v2;
io.smallrye.mutiny.Multi v3;
v0 := @this: io.smallrye.mutiny.groups.MultiIfEmpty;
v1 := @parameter0: java.util.concurrent.Flow$Publisher;
v2 = staticinvoke <io.smallrye.mutiny.groups.MultiIfEmpty$lambda_switchTo_3__2974: java.util.function.Supplier bootstrap$(java.util.concurrent.Flow$Publisher)>(v1);
v3 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiIfEmpty: io.smallrye.mutiny.Multi switchTo(java.util.function.Supplier)>(v2);
return v3;
}
public io.smallrye.mutiny.Multi switchTo(java.util.function.Supplier)
{
io.smallrye.mutiny.groups.MultiIfEmpty v0;
io.smallrye.mutiny.operators.multi.MultiSwitchOnEmpty v4;
java.lang.Object v2;
java.util.function.Supplier v1, v3;
io.smallrye.mutiny.Multi v5, v6;
v0 := @this: io.smallrye.mutiny.groups.MultiIfEmpty;
v1 := @parameter0: java.util.function.Supplier;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "supplier");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Supplier decorate(java.util.function.Supplier)>(v2);
v4 = new io.smallrye.mutiny.operators.multi.MultiSwitchOnEmpty;
v5 = v0.<io.smallrye.mutiny.groups.MultiIfEmpty: io.smallrye.mutiny.Multi upstream>;
specialinvoke v4.<io.smallrye.mutiny.operators.multi.MultiSwitchOnEmpty: void <init>(io.smallrye.mutiny.Multi,java.util.function.Supplier)>(v5, v3);
v6 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v4);
return v6;
}
public final transient io.smallrye.mutiny.Multi continueWith(java.lang.Object[])
{
io.smallrye.mutiny.groups.MultiIfEmpty v0;
java.lang.Object[] v1;
java.util.function.Supplier v2;
io.smallrye.mutiny.Multi v3;
v0 := @this: io.smallrye.mutiny.groups.MultiIfEmpty;
v1 := @parameter0: java.lang.Object[];
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "items");
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object[] doesNotContainNull(java.lang.Object[],java.lang.String)>(v1, "items");
v2 = staticinvoke <io.smallrye.mutiny.groups.MultiIfEmpty$lambda_continueWith_4__2975: java.util.function.Supplier bootstrap$(java.lang.Object[])>(v1);
v3 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiIfEmpty: io.smallrye.mutiny.Multi continueWith(java.util.function.Supplier)>(v2);
return v3;
}
public io.smallrye.mutiny.Multi continueWith(java.lang.Iterable)
{
io.smallrye.mutiny.groups.MultiIfEmpty v0;
java.util.function.Supplier v2;
io.smallrye.mutiny.Multi v3;
java.lang.Iterable v1;
v0 := @this: io.smallrye.mutiny.groups.MultiIfEmpty;
v1 := @parameter0: java.lang.Iterable;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "items");
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Iterable doesNotContainNull(java.lang.Iterable,java.lang.String)>(v1, "items");
v2 = staticinvoke <io.smallrye.mutiny.groups.MultiIfEmpty$lambda_continueWith_5__2976: java.util.function.Supplier bootstrap$(java.lang.Iterable)>(v1);
v3 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiIfEmpty: io.smallrye.mutiny.Multi continueWith(java.util.function.Supplier)>(v2);
return v3;
}
public io.smallrye.mutiny.Multi continueWith(java.util.function.Supplier)
{
io.smallrye.mutiny.groups.MultiIfEmpty v0;
java.lang.Object v2;
java.util.function.Supplier v1, v3, v4;
io.smallrye.mutiny.Multi v5;
v0 := @this: io.smallrye.mutiny.groups.MultiIfEmpty;
v1 := @parameter0: java.util.function.Supplier;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "supplier");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Supplier decorate(java.util.function.Supplier)>(v2);
v4 = staticinvoke <io.smallrye.mutiny.groups.MultiIfEmpty$lambda_continueWith_6__2977: java.util.function.Supplier bootstrap$(java.util.function.Supplier)>(v3);
v5 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiIfEmpty: io.smallrye.mutiny.Multi switchTo(java.util.function.Supplier)>(v4);
return v5;
}
static java.util.concurrent.Flow$Publisher createMultiFromIterableSupplier(java.util.function.Supplier)
{
java.lang.Throwable v2;
java.util.function.Supplier v0;
io.smallrye.mutiny.Multi v4, v7, v9;
java.lang.NullPointerException v6;
io.smallrye.mutiny.groups.MultiCreate v3, v5, v8;
java.lang.Object v1;
v0 := @parameter0: java.util.function.Supplier;
label1:
v1 = interfaceinvoke v0.<java.util.function.Supplier: java.lang.Object get()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = staticinvoke <io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiCreate createFrom()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.MultiCreate: io.smallrye.mutiny.Multi failure(java.lang.Throwable)>(v2);
return v4;
label4:
if v1 != null goto label5;
v5 = staticinvoke <io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiCreate createFrom()>();
v6 = new java.lang.NullPointerException;
specialinvoke v6.<java.lang.NullPointerException: void <init>(java.lang.String)>("The supplier returned `null`");
v7 = virtualinvoke v5.<io.smallrye.mutiny.groups.MultiCreate: io.smallrye.mutiny.Multi failure(java.lang.Throwable)>(v6);
return v7;
label5:
v8 = staticinvoke <io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiCreate createFrom()>();
v9 = virtualinvoke v8.<io.smallrye.mutiny.groups.MultiCreate: io.smallrye.mutiny.Multi iterable(java.lang.Iterable)>(v1);
return v9;
catch java.lang.Throwable from label1 to label2 with label3;
}
}