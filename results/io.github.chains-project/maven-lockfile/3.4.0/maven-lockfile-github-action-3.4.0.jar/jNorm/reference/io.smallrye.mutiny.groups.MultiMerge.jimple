public class io.smallrye.mutiny.groups.MultiMerge extends java.lang.Object
{
private final boolean collectFailures;
private final int requests;
private final int concurrency;
void <init>(boolean, int, int)
{
io.smallrye.mutiny.groups.MultiMerge v0;
int v2, v3;
boolean v1;
v0 := @this: io.smallrye.mutiny.groups.MultiMerge;
v1 := @parameter0: boolean;
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.groups.MultiMerge: boolean collectFailures> = v1;
v0.<io.smallrye.mutiny.groups.MultiMerge: int requests> = v2;
v0.<io.smallrye.mutiny.groups.MultiMerge: int concurrency> = v3;
return;
}
public final transient io.smallrye.mutiny.Multi streams(java.util.concurrent.Flow$Publisher[])
{
java.util.List v2;
io.smallrye.mutiny.groups.MultiMerge v0;
int v4, v5;
java.util.concurrent.Flow$Publisher[] v1;
io.smallrye.mutiny.Multi v6;
boolean v3;
v0 := @this: io.smallrye.mutiny.groups.MultiMerge;
v1 := @parameter0: java.util.concurrent.Flow$Publisher[];
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v3 = v0.<io.smallrye.mutiny.groups.MultiMerge: boolean collectFailures>;
v4 = v0.<io.smallrye.mutiny.groups.MultiMerge: int requests>;
v5 = v0.<io.smallrye.mutiny.groups.MultiMerge: int concurrency>;
v6 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiCombine: io.smallrye.mutiny.Multi merge(java.util.List,boolean,int,int)>(v2, v3, v4, v5);
return v6;
}
public io.smallrye.mutiny.Multi streams(java.lang.Iterable)
{
io.smallrye.mutiny.groups.MultiMerge v0;
io.smallrye.mutiny.Multi v7;
java.lang.Iterable v1;
java.util.ArrayList v2;
java.util.function.Consumer v3;
int v5, v6;
boolean v4;
v0 := @this: io.smallrye.mutiny.groups.MultiMerge;
v1 := @parameter0: java.lang.Iterable;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v3 = staticinvoke <io.smallrye.mutiny.groups.MultiMerge$add__2828: java.util.function.Consumer bootstrap$(java.util.List)>(v2);
interfaceinvoke v1.<java.lang.Iterable: void forEach(java.util.function.Consumer)>(v3);
v4 = v0.<io.smallrye.mutiny.groups.MultiMerge: boolean collectFailures>;
v5 = v0.<io.smallrye.mutiny.groups.MultiMerge: int requests>;
v6 = v0.<io.smallrye.mutiny.groups.MultiMerge: int concurrency>;
v7 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiCombine: io.smallrye.mutiny.Multi merge(java.util.List,boolean,int,int)>(v2, v4, v5, v6);
return v7;
}
public io.smallrye.mutiny.groups.MultiMerge collectFailures()
{
io.smallrye.mutiny.groups.MultiMerge v0, v1;
int v2, v3;
v0 := @this: io.smallrye.mutiny.groups.MultiMerge;
v1 = new io.smallrye.mutiny.groups.MultiMerge;
v2 = v0.<io.smallrye.mutiny.groups.MultiMerge: int requests>;
v3 = v0.<io.smallrye.mutiny.groups.MultiMerge: int concurrency>;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiMerge: void <init>(boolean,int,int)>(1, v2, v3);
return v1;
}
public io.smallrye.mutiny.groups.MultiMerge withRequests(int)
{
io.smallrye.mutiny.groups.MultiMerge v0, v2;
int v1, v4;
boolean v3;
v0 := @this: io.smallrye.mutiny.groups.MultiMerge;
v1 := @parameter0: int;
v2 = new io.smallrye.mutiny.groups.MultiMerge;
v3 = v0.<io.smallrye.mutiny.groups.MultiMerge: boolean collectFailures>;
v4 = v0.<io.smallrye.mutiny.groups.MultiMerge: int concurrency>;
specialinvoke v2.<io.smallrye.mutiny.groups.MultiMerge: void <init>(boolean,int,int)>(v3, v1, v4);
return v2;
}
public io.smallrye.mutiny.groups.MultiMerge withConcurrency(int)
{
io.smallrye.mutiny.groups.MultiMerge v0, v2;
int v1, v4;
boolean v3;
v0 := @this: io.smallrye.mutiny.groups.MultiMerge;
v1 := @parameter0: int;
v2 = new io.smallrye.mutiny.groups.MultiMerge;
v3 = v0.<io.smallrye.mutiny.groups.MultiMerge: boolean collectFailures>;
v4 = v0.<io.smallrye.mutiny.groups.MultiMerge: int requests>;
specialinvoke v2.<io.smallrye.mutiny.groups.MultiMerge: void <init>(boolean,int,int)>(v3, v4, v1);
return v2;
}
}