public class io.smallrye.mutiny.groups.MultiRetry extends java.lang.Object
{
private final io.smallrye.mutiny.Multi upstream;
private final java.util.function.Predicate onFailurePredicate;
private java.time.Duration initialBackOff;
private java.time.Duration maxBackoff;
private double jitter;
private boolean backOffConfigured;
public void <init>(io.smallrye.mutiny.Multi, java.util.function.Predicate)
{
java.util.function.Predicate v2;
java.time.Duration v3, v4;
java.lang.Object v5, v6;
io.smallrye.mutiny.Multi v1;
io.smallrye.mutiny.groups.MultiRetry v0;
v0 := @this: io.smallrye.mutiny.groups.MultiRetry;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.function.Predicate;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = staticinvoke <java.time.Duration: java.time.Duration ofSeconds(long)>(1L);
v0.<io.smallrye.mutiny.groups.MultiRetry: java.time.Duration initialBackOff> = v3;
v4 = <io.smallrye.mutiny.helpers.ExponentialBackoff: java.time.Duration MAX_BACKOFF>;
v0.<io.smallrye.mutiny.groups.MultiRetry: java.time.Duration maxBackoff> = v4;
v0.<io.smallrye.mutiny.groups.MultiRetry: double jitter> = 0.5;
v0.<io.smallrye.mutiny.groups.MultiRetry: boolean backOffConfigured> = 0;
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "upstream");
v0.<io.smallrye.mutiny.groups.MultiRetry: io.smallrye.mutiny.Multi upstream> = v5;
v6 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "onFailurePredicate");
v0.<io.smallrye.mutiny.groups.MultiRetry: java.util.function.Predicate onFailurePredicate> = v6;
return;
}
public io.smallrye.mutiny.Multi indefinitely()
{
io.smallrye.mutiny.Multi v1;
io.smallrye.mutiny.groups.MultiRetry v0;
v0 := @this: io.smallrye.mutiny.groups.MultiRetry;
v1 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiRetry: io.smallrye.mutiny.Multi atMost(long)>(9223372036854775807L);
return v1;
}
public io.smallrye.mutiny.Multi atMost(long)
{
io.smallrye.mutiny.operators.multi.MultiRetryOp v12;
long v1;
java.util.function.Function v7;
io.smallrye.mutiny.Multi v11, v13, v15, v9;
java.time.Duration v3, v4;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp v8;
java.util.concurrent.ScheduledExecutorService v6;
boolean v2;
double v5;
java.util.function.Predicate v10, v14;
io.smallrye.mutiny.groups.MultiRetry v0;
v0 := @this: io.smallrye.mutiny.groups.MultiRetry;
v1 := @parameter0: long;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: long positive(long,java.lang.String)>(v1, "numberOfAttempts");
v2 = v0.<io.smallrye.mutiny.groups.MultiRetry: boolean backOffConfigured>;
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.groups.MultiRetry: java.time.Duration initialBackOff>;
v4 = v0.<io.smallrye.mutiny.groups.MultiRetry: java.time.Duration maxBackoff>;
v5 = v0.<io.smallrye.mutiny.groups.MultiRetry: double jitter>;
v6 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.ScheduledExecutorService getDefaultWorkerPool()>();
v7 = staticinvoke <io.smallrye.mutiny.helpers.ExponentialBackoff: java.util.function.Function randomExponentialBackoffFunction(long,java.time.Duration,java.time.Duration,double,java.util.concurrent.ScheduledExecutorService)>(v1, v3, v4, v5, v6);
v8 = new io.smallrye.mutiny.operators.multi.MultiRetryWhenOp;
v9 = v0.<io.smallrye.mutiny.groups.MultiRetry: io.smallrye.mutiny.Multi upstream>;
v10 = v0.<io.smallrye.mutiny.groups.MultiRetry: java.util.function.Predicate onFailurePredicate>;
specialinvoke v8.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp: void <init>(io.smallrye.mutiny.Multi,java.util.function.Predicate,java.util.function.Function)>(v9, v10, v7);
v11 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v8);
return v11;
label1:
v12 = new io.smallrye.mutiny.operators.multi.MultiRetryOp;
v13 = v0.<io.smallrye.mutiny.groups.MultiRetry: io.smallrye.mutiny.Multi upstream>;
v14 = v0.<io.smallrye.mutiny.groups.MultiRetry: java.util.function.Predicate onFailurePredicate>;
specialinvoke v12.<io.smallrye.mutiny.operators.multi.MultiRetryOp: void <init>(io.smallrye.mutiny.Multi,java.util.function.Predicate,long)>(v13, v14, v1);
v15 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v12);
return v15;
}
public io.smallrye.mutiny.Multi expireAt(long)
{
java.util.function.Predicate v11;
long v1;
java.lang.IllegalArgumentException v3;
java.util.function.Function v8;
io.smallrye.mutiny.Multi v10, v12;
java.time.Duration v4, v5;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp v9;
java.util.concurrent.ScheduledExecutorService v7;
boolean v2;
double v6;
io.smallrye.mutiny.groups.MultiRetry v0;
v0 := @this: io.smallrye.mutiny.groups.MultiRetry;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.groups.MultiRetry: boolean backOffConfigured>;
if v2 != 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid retry configuration, `expiresAt/expiresIn` must be used with a back-off configuration");
throw v3;
label1:
v4 = v0.<io.smallrye.mutiny.groups.MultiRetry: java.time.Duration initialBackOff>;
v5 = v0.<io.smallrye.mutiny.groups.MultiRetry: java.time.Duration maxBackoff>;
v6 = v0.<io.smallrye.mutiny.groups.MultiRetry: double jitter>;
v7 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.ScheduledExecutorService getDefaultWorkerPool()>();
v8 = staticinvoke <io.smallrye.mutiny.helpers.ExponentialBackoff: java.util.function.Function randomExponentialBackoffFunctionExpireAt(long,java.time.Duration,java.time.Duration,double,java.util.concurrent.ScheduledExecutorService)>(v1, v4, v5, v6, v7);
v9 = new io.smallrye.mutiny.operators.multi.MultiRetryWhenOp;
v10 = v0.<io.smallrye.mutiny.groups.MultiRetry: io.smallrye.mutiny.Multi upstream>;
v11 = v0.<io.smallrye.mutiny.groups.MultiRetry: java.util.function.Predicate onFailurePredicate>;
specialinvoke v9.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp: void <init>(io.smallrye.mutiny.Multi,java.util.function.Predicate,java.util.function.Function)>(v10, v11, v8);
v12 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v9);
return v12;
}
public io.smallrye.mutiny.Multi expireIn(long)
{
long v1, v2, v3;
io.smallrye.mutiny.Multi v4;
io.smallrye.mutiny.groups.MultiRetry v0;
v0 := @this: io.smallrye.mutiny.groups.MultiRetry;
v1 := @parameter0: long;
v2 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v3 = v2 + v1;
v4 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiRetry: io.smallrye.mutiny.Multi expireAt(long)>(v3);
return v4;
}
public io.smallrye.mutiny.Multi until(java.util.function.Predicate)
{
java.util.function.Predicate v1, v3, v9;
java.lang.IllegalArgumentException v5;
java.util.function.Function v6;
io.smallrye.mutiny.Multi v10, v8;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp v7;
java.lang.Object v2;
boolean v4;
io.smallrye.mutiny.groups.MultiRetry v0;
v0 := @this: io.smallrye.mutiny.groups.MultiRetry;
v1 := @parameter0: java.util.function.Predicate;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "predicate");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Predicate decorate(java.util.function.Predicate)>(v2);
v4 = v0.<io.smallrye.mutiny.groups.MultiRetry: boolean backOffConfigured>;
if v4 == 0 goto label1;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid retry configuration, `until` cannot be used with a back-off configuration");
throw v5;
label1:
v6 = staticinvoke <io.smallrye.mutiny.groups.MultiRetry$lambda_until_2__2917: java.util.function.Function bootstrap$(java.util.function.Predicate)>(v3);
v7 = new io.smallrye.mutiny.operators.multi.MultiRetryWhenOp;
v8 = v0.<io.smallrye.mutiny.groups.MultiRetry: io.smallrye.mutiny.Multi upstream>;
v9 = v0.<io.smallrye.mutiny.groups.MultiRetry: java.util.function.Predicate onFailurePredicate>;
specialinvoke v7.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp: void <init>(io.smallrye.mutiny.Multi,java.util.function.Predicate,java.util.function.Function)>(v8, v9, v6);
v10 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v7);
return v10;
}
public io.smallrye.mutiny.Multi when(java.util.function.Function)
{
java.util.function.Predicate v8;
java.lang.IllegalArgumentException v3;
java.util.function.Function v1, v5;
io.smallrye.mutiny.Multi v7, v9;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp v6;
java.lang.Object v4;
boolean v2;
io.smallrye.mutiny.groups.MultiRetry v0;
v0 := @this: io.smallrye.mutiny.groups.MultiRetry;
v1 := @parameter0: java.util.function.Function;
v2 = v0.<io.smallrye.mutiny.groups.MultiRetry: boolean backOffConfigured>;
if v2 == 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid retry configuration, `when` cannot be used with a back-off configuration");
throw v3;
label1:
v4 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "whenStreamFactory");
v5 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Function decorate(java.util.function.Function)>(v4);
v6 = new io.smallrye.mutiny.operators.multi.MultiRetryWhenOp;
v7 = v0.<io.smallrye.mutiny.groups.MultiRetry: io.smallrye.mutiny.Multi upstream>;
v8 = v0.<io.smallrye.mutiny.groups.MultiRetry: java.util.function.Predicate onFailurePredicate>;
specialinvoke v6.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp: void <init>(io.smallrye.mutiny.Multi,java.util.function.Predicate,java.util.function.Function)>(v7, v8, v5);
v9 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v6);
return v9;
}
public io.smallrye.mutiny.groups.MultiRetry withBackOff(java.time.Duration)
{
java.time.Duration v1, v2;
io.smallrye.mutiny.groups.MultiRetry v0, v3;
v0 := @this: io.smallrye.mutiny.groups.MultiRetry;
v1 := @parameter0: java.time.Duration;
v2 = <io.smallrye.mutiny.helpers.ExponentialBackoff: java.time.Duration MAX_BACKOFF>;
v3 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiRetry: io.smallrye.mutiny.groups.MultiRetry withBackOff(java.time.Duration,java.time.Duration)>(v1, v2);
return v3;
}
public io.smallrye.mutiny.groups.MultiRetry withBackOff(java.time.Duration, java.time.Duration)
{
java.time.Duration v1, v2, v3, v4;
io.smallrye.mutiny.groups.MultiRetry v0;
v0 := @this: io.smallrye.mutiny.groups.MultiRetry;
v1 := @parameter0: java.time.Duration;
v2 := @parameter1: java.time.Duration;
v0.<io.smallrye.mutiny.groups.MultiRetry: boolean backOffConfigured> = 1;
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.time.Duration validate(java.time.Duration,java.lang.String)>(v1, "initialBackOff");
v0.<io.smallrye.mutiny.groups.MultiRetry: java.time.Duration initialBackOff> = v3;
v4 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.time.Duration validate(java.time.Duration,java.lang.String)>(v2, "maxBackOff");
v0.<io.smallrye.mutiny.groups.MultiRetry: java.time.Duration maxBackoff> = v4;
return v0;
}
public io.smallrye.mutiny.groups.MultiRetry withJitter(double)
{
byte v2, v3;
java.lang.IllegalArgumentException v4;
double v1;
io.smallrye.mutiny.groups.MultiRetry v0;
v0 := @this: io.smallrye.mutiny.groups.MultiRetry;
v1 := @parameter0: double;
v2 = v1 cmpg 0.0;
if v2 < 0 goto label1;
v3 = v1 cmpl 1.0;
if v3 <= 0 goto label2;
label1:
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid `jitter`, the value must be in [0.0, 1.0]");
throw v4;
label2:
v0.<io.smallrye.mutiny.groups.MultiRetry: boolean backOffConfigured> = 1;
v0.<io.smallrye.mutiny.groups.MultiRetry: double jitter> = v1;
return v0;
}
}