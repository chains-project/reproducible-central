public class io.smallrye.mutiny.groups.MultiTimePeriod extends java.lang.Object
{
private java.time.Duration initialDelay;
private java.util.concurrent.ScheduledExecutorService executor;
public void <init>()
{
io.smallrye.mutiny.groups.MultiTimePeriod v0;
v0 := @this: io.smallrye.mutiny.groups.MultiTimePeriod;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public io.smallrye.mutiny.groups.MultiTimePeriod startingAfter(java.time.Duration)
{
io.smallrye.mutiny.groups.MultiTimePeriod v0;
java.time.Duration v1, v2;
v0 := @this: io.smallrye.mutiny.groups.MultiTimePeriod;
v1 := @parameter0: java.time.Duration;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.time.Duration validate(java.time.Duration,java.lang.String)>(v1, "duration");
v0.<io.smallrye.mutiny.groups.MultiTimePeriod: java.time.Duration initialDelay> = v2;
return v0;
}
public io.smallrye.mutiny.groups.MultiTimePeriod onExecutor(java.util.concurrent.ScheduledExecutorService)
{
io.smallrye.mutiny.groups.MultiTimePeriod v0;
java.util.concurrent.ScheduledExecutorService v1;
java.lang.Object v2;
v0 := @this: io.smallrye.mutiny.groups.MultiTimePeriod;
v1 := @parameter0: java.util.concurrent.ScheduledExecutorService;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "executor");
v0.<io.smallrye.mutiny.groups.MultiTimePeriod: java.util.concurrent.ScheduledExecutorService executor> = v2;
return v0;
}
public io.smallrye.mutiny.Multi every(java.time.Duration)
{
io.smallrye.mutiny.groups.MultiTimePeriod v0;
io.smallrye.mutiny.Multi v6, v8;
java.time.Duration v1, v3, v5;
java.util.concurrent.ScheduledExecutorService v2;
io.smallrye.mutiny.operators.multi.builders.IntervalMulti v4, v7;
v0 := @this: io.smallrye.mutiny.groups.MultiTimePeriod;
v1 := @parameter0: java.time.Duration;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.time.Duration validate(java.time.Duration,java.lang.String)>(v1, "duration");
v2 = v0.<io.smallrye.mutiny.groups.MultiTimePeriod: java.util.concurrent.ScheduledExecutorService executor>;
if v2 != null goto label1;
v2 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.ScheduledExecutorService getDefaultWorkerPool()>();
label1:
v3 = v0.<io.smallrye.mutiny.groups.MultiTimePeriod: java.time.Duration initialDelay>;
if v3 == null goto label2;
v4 = new io.smallrye.mutiny.operators.multi.builders.IntervalMulti;
v5 = v0.<io.smallrye.mutiny.groups.MultiTimePeriod: java.time.Duration initialDelay>;
specialinvoke v4.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti: void <init>(java.time.Duration,java.time.Duration,java.util.concurrent.ScheduledExecutorService)>(v5, v1, v2);
v6 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v4);
return v6;
label2:
v7 = new io.smallrye.mutiny.operators.multi.builders.IntervalMulti;
specialinvoke v7.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti: void <init>(java.time.Duration,java.util.concurrent.ScheduledExecutorService)>(v1, v2);
v8 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v7);
return v8;
}
}