public final class io.smallrye.mutiny.helpers.HalfSerializer extends java.lang.Object
{
private void <init>()
{
io.smallrye.mutiny.helpers.HalfSerializer v0;
v0 := @this: io.smallrye.mutiny.helpers.HalfSerializer;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static void onNext(java.util.concurrent.Flow$Subscriber, java.lang.Object, java.util.concurrent.atomic.AtomicInteger, java.util.concurrent.atomic.AtomicReference)
{
java.lang.Throwable v6;
java.lang.IllegalStateException v7;
java.util.concurrent.atomic.AtomicReference v3;
java.util.concurrent.Flow$Subscriber v0;
java.util.concurrent.atomic.AtomicInteger v2;
int v5;
java.lang.Object v1;
boolean v4;
v0 := @parameter0: java.util.concurrent.Flow$Subscriber;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.util.concurrent.atomic.AtomicInteger;
v3 := @parameter3: java.util.concurrent.atomic.AtomicReference;
v4 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(0, 1);
if v4 == 0 goto label2;
interfaceinvoke v0.<java.util.concurrent.Flow$Subscriber: void onNext(java.lang.Object)>(v1);
v5 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
if v5 == 0 goto label3;
v6 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: java.lang.Throwable terminate(java.util.concurrent.atomic.AtomicReference)>(v3);
if v6 == null goto label1;
interfaceinvoke v0.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v6);
goto label3;
label1:
interfaceinvoke v0.<java.util.concurrent.Flow$Subscriber: void onComplete()>();
goto label3;
label2:
v7 = new java.lang.IllegalStateException;
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("HalfSerializer has detected concurrent onNext(item) signals which is not permitted by the Reactive Streams protocol");
staticinvoke <io.smallrye.mutiny.helpers.HalfSerializer: void onError(java.util.concurrent.Flow$Subscriber,java.lang.Throwable,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicReference)>(v0, v7, v2, v3);
label3:
return;
}
public static void onError(java.util.concurrent.Flow$Subscriber, java.lang.Throwable, java.util.concurrent.atomic.AtomicInteger, java.util.concurrent.atomic.AtomicReference)
{
java.lang.Throwable v1, v6;
java.util.concurrent.Flow$Subscriber v0;
java.util.concurrent.atomic.AtomicInteger v2;
int v5;
java.util.concurrent.atomic.AtomicReference v3;
boolean v4;
v0 := @parameter0: java.util.concurrent.Flow$Subscriber;
v1 := @parameter1: java.lang.Throwable;
v2 := @parameter2: java.util.concurrent.atomic.AtomicInteger;
v3 := @parameter3: java.util.concurrent.atomic.AtomicReference;
v4 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: boolean addFailure(java.util.concurrent.atomic.AtomicReference,java.lang.Throwable)>(v3, v1);
if v4 == 0 goto label1;
v5 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v5 != 0 goto label1;
v6 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: java.lang.Throwable terminate(java.util.concurrent.atomic.AtomicReference)>(v3);
interfaceinvoke v0.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v6);
label1:
return;
}
public static void onComplete(java.util.concurrent.Flow$Subscriber, java.util.concurrent.atomic.AtomicInteger, java.util.concurrent.atomic.AtomicReference)
{
java.lang.Throwable v4;
java.util.concurrent.Flow$Subscriber v0;
java.util.concurrent.atomic.AtomicInteger v1;
int v3;
java.util.concurrent.atomic.AtomicReference v2;
v0 := @parameter0: java.util.concurrent.Flow$Subscriber;
v1 := @parameter1: java.util.concurrent.atomic.AtomicInteger;
v2 := @parameter2: java.util.concurrent.atomic.AtomicReference;
v3 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v3 != 0 goto label2;
v4 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: java.lang.Throwable terminate(java.util.concurrent.atomic.AtomicReference)>(v2);
if v4 == null goto label1;
interfaceinvoke v0.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v4);
goto label2;
label1:
interfaceinvoke v0.<java.util.concurrent.Flow$Subscriber: void onComplete()>();
label2:
return;
}
}