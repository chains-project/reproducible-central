public class io.smallrye.mutiny.helpers.StrictMultiSubscriber extends java.lang.Object implements io.smallrye.mutiny.subscription.MultiSubscriber, java.util.concurrent.Flow$Subscription, io.smallrye.mutiny.subscription.ContextSupport
{
private final java.util.concurrent.atomic.AtomicInteger wip;
private final java.util.concurrent.Flow$Subscriber downstream;
private final java.util.concurrent.atomic.AtomicReference failure;
private final java.util.concurrent.atomic.AtomicLong requested;
private final java.util.concurrent.atomic.AtomicReference upstream;
private final java.util.concurrent.atomic.AtomicBoolean once;
volatile boolean done;
public void <init>(java.util.concurrent.Flow$Subscriber)
{
io.smallrye.mutiny.helpers.StrictMultiSubscriber v0;
java.util.concurrent.Flow$Subscriber v1;
java.util.concurrent.atomic.AtomicLong v4;
java.util.concurrent.atomic.AtomicInteger v2;
java.util.concurrent.atomic.AtomicBoolean v6;
java.util.concurrent.atomic.AtomicReference v3, v5;
v0 := @this: io.smallrye.mutiny.helpers.StrictMultiSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v2.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.atomic.AtomicInteger wip> = v2;
v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.Flow$Subscriber downstream> = v1;
v3 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.atomic.AtomicReference failure> = v3;
v4 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v4.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.atomic.AtomicLong requested> = v4;
v5 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v5.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.atomic.AtomicReference upstream> = v5;
v6 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v6.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.atomic.AtomicBoolean once> = v6;
return;
}
public void request(long)
{
io.smallrye.mutiny.helpers.StrictMultiSubscriber v0;
java.util.concurrent.atomic.AtomicLong v6;
byte v2;
long v1;
java.lang.String v4;
java.lang.IllegalArgumentException v3;
java.util.concurrent.atomic.AtomicReference v5;
v0 := @this: io.smallrye.mutiny.helpers.StrictMultiSubscriber;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 > 0 goto label1;
virtualinvoke v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: void cancel()>();
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Reactive Streams Rule 3.9 violated: request must be positive, but was \u0001");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
virtualinvoke v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: void onError(java.lang.Throwable)>(v3);
goto label2;
label1:
v5 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.atomic.AtomicReference upstream>;
v6 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void requestIfNotNullOrAccumulate(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicLong,long)>(v5, v6, v1);
label2:
return;
}
public void cancel()
{
io.smallrye.mutiny.helpers.StrictMultiSubscriber v0;
java.util.concurrent.atomic.AtomicReference v2;
boolean v1;
v0 := @this: io.smallrye.mutiny.helpers.StrictMultiSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: boolean done>;
if v1 != 0 goto label1;
v2 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.atomic.AtomicReference upstream>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void cancel(java.util.concurrent.atomic.AtomicReference)>(v2);
label1:
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
java.lang.IllegalStateException v7;
java.util.concurrent.atomic.AtomicBoolean v2;
java.util.concurrent.atomic.AtomicReference v5;
io.smallrye.mutiny.helpers.StrictMultiSubscriber v0;
java.util.concurrent.Flow$Subscriber v4;
java.util.concurrent.atomic.AtomicLong v6;
boolean v3;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.helpers.StrictMultiSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.atomic.AtomicBoolean once>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v4.<java.util.concurrent.Flow$Subscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
v5 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.atomic.AtomicReference upstream>;
v6 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: boolean setIfEmptyAndRequest(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.Flow$Subscription)>(v5, v6, v1);
goto label2;
label1:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
virtualinvoke v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: void cancel()>();
v7 = new java.lang.IllegalStateException;
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Reactive Streams Rule 2.12 violated: onSubscribe must be called at most once");
virtualinvoke v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: void onError(java.lang.Throwable)>(v7);
label2:
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.helpers.StrictMultiSubscriber v0;
java.util.concurrent.Flow$Subscriber v2;
java.util.concurrent.atomic.AtomicInteger v3;
java.lang.Object v1;
java.util.concurrent.atomic.AtomicReference v4;
v0 := @this: io.smallrye.mutiny.helpers.StrictMultiSubscriber;
v1 := @parameter0: java.lang.Object;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
v3 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v4 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.atomic.AtomicReference failure>;
staticinvoke <io.smallrye.mutiny.helpers.HalfSerializer: void onNext(java.util.concurrent.Flow$Subscriber,java.lang.Object,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicReference)>(v2, v1, v3, v4);
return;
}
public void onFailure(java.lang.Throwable)
{
io.smallrye.mutiny.helpers.StrictMultiSubscriber v0;
java.lang.Throwable v1;
java.util.concurrent.Flow$Subscriber v2;
java.util.concurrent.atomic.AtomicInteger v3;
java.util.concurrent.atomic.AtomicReference v4;
v0 := @this: io.smallrye.mutiny.helpers.StrictMultiSubscriber;
v1 := @parameter0: java.lang.Throwable;
v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: boolean done> = 1;
v2 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
v3 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v4 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.atomic.AtomicReference failure>;
staticinvoke <io.smallrye.mutiny.helpers.HalfSerializer: void onError(java.util.concurrent.Flow$Subscriber,java.lang.Throwable,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicReference)>(v2, v1, v3, v4);
return;
}
public void onCompletion()
{
io.smallrye.mutiny.helpers.StrictMultiSubscriber v0;
java.util.concurrent.Flow$Subscriber v1;
java.util.concurrent.atomic.AtomicInteger v2;
java.util.concurrent.atomic.AtomicReference v3;
v0 := @this: io.smallrye.mutiny.helpers.StrictMultiSubscriber;
v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: boolean done> = 1;
v1 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
v2 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v3 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.atomic.AtomicReference failure>;
staticinvoke <io.smallrye.mutiny.helpers.HalfSerializer: void onComplete(java.util.concurrent.Flow$Subscriber,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicReference)>(v1, v2, v3);
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.helpers.StrictMultiSubscriber v0;
java.util.concurrent.Flow$Subscriber v1, v3;
io.smallrye.mutiny.Context v4, v5;
boolean v2;
v0 := @this: io.smallrye.mutiny.helpers.StrictMultiSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
v2 = v1 instanceof io.smallrye.mutiny.subscription.ContextSupport;
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
v4 = interfaceinvoke v3.<io.smallrye.mutiny.subscription.ContextSupport: io.smallrye.mutiny.Context context()>();
return v4;
label1:
v5 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
return v5;
}
}