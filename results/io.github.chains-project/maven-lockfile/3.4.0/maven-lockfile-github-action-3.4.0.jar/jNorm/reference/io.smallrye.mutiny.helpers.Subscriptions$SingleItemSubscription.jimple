public final class io.smallrye.mutiny.helpers.Subscriptions$SingleItemSubscription extends java.lang.Object implements java.util.concurrent.Flow$Subscription
{
private final java.util.concurrent.Flow$Subscriber downstream;
private final java.lang.Object item;
private final java.util.concurrent.atomic.AtomicBoolean requested;
public void <init>(java.util.concurrent.Flow$Subscriber, java.lang.Object)
{
java.util.concurrent.Flow$Subscriber v1;
java.util.concurrent.atomic.AtomicBoolean v3;
java.lang.Object v2, v4, v5;
io.smallrye.mutiny.helpers.Subscriptions$SingleItemSubscription v0;
v0 := @this: io.smallrye.mutiny.helpers.Subscriptions$SingleItemSubscription;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
v2 := @parameter1: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v3.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.helpers.Subscriptions$SingleItemSubscription: java.util.concurrent.atomic.AtomicBoolean requested> = v3;
v4 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "actual");
v0.<io.smallrye.mutiny.helpers.Subscriptions$SingleItemSubscription: java.util.concurrent.Flow$Subscriber downstream> = v4;
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "item");
v0.<io.smallrye.mutiny.helpers.Subscriptions$SingleItemSubscription: java.lang.Object item> = v5;
return;
}
public void cancel()
{
java.util.concurrent.atomic.AtomicBoolean v1;
io.smallrye.mutiny.helpers.Subscriptions$SingleItemSubscription v0;
v0 := @this: io.smallrye.mutiny.helpers.Subscriptions$SingleItemSubscription;
v1 = v0.<io.smallrye.mutiny.helpers.Subscriptions$SingleItemSubscription: java.util.concurrent.atomic.AtomicBoolean requested>;
virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: void lazySet(boolean)>(1);
return;
}
public void request(long)
{
java.util.concurrent.atomic.AtomicBoolean v3;
long v1;
io.smallrye.mutiny.helpers.Subscriptions$SingleItemSubscription v0;
java.util.concurrent.Flow$Subscriber v5, v7;
byte v2;
java.lang.Object v6;
boolean v4;
v0 := @this: io.smallrye.mutiny.helpers.Subscriptions$SingleItemSubscription;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = v0.<io.smallrye.mutiny.helpers.Subscriptions$SingleItemSubscription: java.util.concurrent.atomic.AtomicBoolean requested>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v4 == 0 goto label1;
v5 = v0.<io.smallrye.mutiny.helpers.Subscriptions$SingleItemSubscription: java.util.concurrent.Flow$Subscriber downstream>;
v6 = v0.<io.smallrye.mutiny.helpers.Subscriptions$SingleItemSubscription: java.lang.Object item>;
interfaceinvoke v5.<java.util.concurrent.Flow$Subscriber: void onNext(java.lang.Object)>(v6);
v7 = v0.<io.smallrye.mutiny.helpers.Subscriptions$SingleItemSubscription: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v7.<java.util.concurrent.Flow$Subscriber: void onComplete()>();
label1:
return;
}
}