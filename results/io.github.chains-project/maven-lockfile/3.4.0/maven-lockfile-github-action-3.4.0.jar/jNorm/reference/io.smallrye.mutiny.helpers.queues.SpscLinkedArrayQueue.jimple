public final class io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue extends java.util.AbstractQueue implements java.util.Queue
{
private static final int MAX_LOOK_AHEAD_STEP;
private final java.util.concurrent.atomic.AtomicLong producerIndex;
private int producerLookAheadStep;
private long producerLookAhead;
private final int producerMask;
private java.util.concurrent.atomic.AtomicReferenceArray producerBuffer;
private final int consumerMask;
private java.util.concurrent.atomic.AtomicReferenceArray consumerBuffer;
private final java.util.concurrent.atomic.AtomicLong consumerIndex;
private static final java.lang.Object HAS_NEXT;
public void <init>(int)
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
long v9;
java.util.concurrent.atomic.AtomicReferenceArray v7;
java.util.concurrent.atomic.AtomicLong v2, v3;
int v1, v4, v5, v6, v8;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 := @parameter0: int;
specialinvoke v0.<java.util.AbstractQueue: void <init>()>();
v2 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v2.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicLong producerIndex> = v2;
v3 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicLong consumerIndex> = v3;
v4 = staticinvoke <java.lang.Math: int max(int,int)>(8, v1);
v5 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscArrayQueue: int roundToPowerOfTwo(int)>(v4);
v6 = v5 - 1;
v7 = new java.util.concurrent.atomic.AtomicReferenceArray;
v8 = v5 + 1;
specialinvoke v7.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(v8);
v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray producerBuffer> = v7;
v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int producerMask> = v6;
specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void adjustLookAheadStep(int)>(v5);
v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray consumerBuffer> = v7;
v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int consumerMask> = v6;
v9 = v6 - 1L;
v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: long producerLookAhead> = v9;
specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soProducerIndex(long)>(0L);
return;
}
public boolean offer(java.lang.Object)
{
long v11, v14, v15, v17, v4, v7;
java.lang.NullPointerException v2;
java.util.concurrent.atomic.AtomicReferenceArray v3;
byte v8;
int v10, v12, v18, v5, v6;
boolean v16, v20, v9;
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
java.lang.Object v1, v13, v19;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 := @parameter0: java.lang.Object;
if null != v1 goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null is not a valid element");
throw v2;
label1:
v3 = v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray producerBuffer>;
v4 = specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: long lpProducerIndex()>();
v5 = v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int producerMask>;
v6 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int calcWrappedOffset(long,int)>(v4, v5);
v7 = v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: long producerLookAhead>;
v8 = v4 cmp v7;
if v8 >= 0 goto label2;
v9 = specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: boolean writeToQueue(java.util.concurrent.atomic.AtomicReferenceArray,java.lang.Object,long,int)>(v3, v1, v4, v6);
return v9;
label2:
v10 = v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int producerLookAheadStep>;
v11 = v4 + v10;
v12 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int calcWrappedOffset(long,int)>(v11, v5);
v13 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.lang.Object lvElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>(v3, v12);
if null != v13 goto label3;
v14 = v4 + v10;
v15 = v14 - 1L;
v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: long producerLookAhead> = v15;
v16 = specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: boolean writeToQueue(java.util.concurrent.atomic.AtomicReferenceArray,java.lang.Object,long,int)>(v3, v1, v4, v6);
return v16;
label3:
v17 = v4 + 1L;
v18 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int calcWrappedOffset(long,int)>(v17, v5);
v19 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.lang.Object lvElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>(v3, v18);
if null != v19 goto label4;
v20 = specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: boolean writeToQueue(java.util.concurrent.atomic.AtomicReferenceArray,java.lang.Object,long,int)>(v3, v1, v4, v6);
return v20;
label4:
specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void resize(java.util.concurrent.atomic.AtomicReferenceArray,long,int,java.lang.Object,long)>(v3, v4, v6, v1, v5);
return 1;
}
private boolean writeToQueue(java.util.concurrent.atomic.AtomicReferenceArray, java.lang.Object, long, int)
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
int v4;
java.lang.Object v2;
long v3, v5;
java.util.concurrent.atomic.AtomicReferenceArray v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceArray;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 := @parameter3: int;
staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v1, v4, v2);
v5 = v3 + 1L;
specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soProducerIndex(long)>(v5);
return 1;
}
private void resize(java.util.concurrent.atomic.AtomicReferenceArray, long, int, java.lang.Object, long)
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
long v11, v2, v5, v8, v9;
java.util.concurrent.atomic.AtomicReferenceArray v1, v7;
int v3, v6;
java.lang.Object v10, v4;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceArray;
v2 := @parameter1: long;
v3 := @parameter2: int;
v4 := @parameter3: java.lang.Object;
v5 := @parameter4: long;
v6 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();
v7 = new java.util.concurrent.atomic.AtomicReferenceArray;
specialinvoke v7.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(v6);
v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray producerBuffer> = v7;
v8 = v2 + v5;
v9 = v8 - 1L;
v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: long producerLookAhead> = v9;
staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v7, v3, v4);
specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soNext(java.util.concurrent.atomic.AtomicReferenceArray,java.util.concurrent.atomic.AtomicReferenceArray)>(v1, v7);
v10 = <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.lang.Object HAS_NEXT>;
staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v1, v3, v10);
v11 = v2 + 1L;
specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soProducerIndex(long)>(v11);
return;
}
private void soNext(java.util.concurrent.atomic.AtomicReferenceArray, java.util.concurrent.atomic.AtomicReferenceArray)
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
int v3, v4, v5;
java.util.concurrent.atomic.AtomicReferenceArray v1, v2;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceArray;
v2 := @parameter1: java.util.concurrent.atomic.AtomicReferenceArray;
v3 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();
v4 = v3 - 1;
v5 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int calcDirectOffset(int)>(v4);
staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v1, v5, v2);
return;
}
private java.util.concurrent.atomic.AtomicReferenceArray lvNextBufferAndUnlink(java.util.concurrent.atomic.AtomicReferenceArray, int)
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
int v2, v3;
java.lang.Object v4;
java.util.concurrent.atomic.AtomicReferenceArray v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceArray;
v2 := @parameter1: int;
v3 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int calcDirectOffset(int)>(v2);
v4 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.lang.Object lvElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>(v1, v3);
staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v1, v3, null);
return v4;
}
public java.lang.Object poll()
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
long v2, v9;
java.util.concurrent.atomic.AtomicReferenceArray v1, v11;
int v10, v3, v4;
java.lang.Object v12, v5, v6;
boolean v7, v8;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 = v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray consumerBuffer>;
v2 = specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: long lpConsumerIndex()>();
v3 = v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int consumerMask>;
v4 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int calcWrappedOffset(long,int)>(v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.lang.Object lvElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>(v1, v4);
v6 = <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.lang.Object HAS_NEXT>;
if v5 != v6 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
v8 = v7;
if null == v5 goto label3;
if v7 != 0 goto label3;
staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v1, v4, null);
v9 = v2 + 1L;
specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soConsumerIndex(long)>(v9);
return v5;
label3:
if v8 == 0 goto label4;
v10 = v3 + 1;
v11 = specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray lvNextBufferAndUnlink(java.util.concurrent.atomic.AtomicReferenceArray,int)>(v1, v10);
v12 = specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.lang.Object newBufferPoll(java.util.concurrent.atomic.AtomicReferenceArray,long,int)>(v11, v2, v3);
return v12;
label4:
return null;
}
private java.lang.Object newBufferPoll(java.util.concurrent.atomic.AtomicReferenceArray, long, int)
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
int v3, v4;
java.lang.Object v5;
long v2, v6;
java.util.concurrent.atomic.AtomicReferenceArray v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceArray;
v2 := @parameter1: long;
v3 := @parameter2: int;
v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray consumerBuffer> = v1;
v4 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int calcWrappedOffset(long,int)>(v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.lang.Object lvElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>(v1, v4);
if null == v5 goto label1;
staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v1, v4, null);
v6 = v2 + 1L;
specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soConsumerIndex(long)>(v6);
label1:
return v5;
}
public java.lang.Object peek()
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
long v2;
java.util.concurrent.atomic.AtomicReferenceArray v1, v8;
int v3, v4, v7;
java.lang.Object v5, v6, v9;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 = v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray consumerBuffer>;
v2 = specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: long lpConsumerIndex()>();
v3 = v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int consumerMask>;
v4 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int calcWrappedOffset(long,int)>(v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.lang.Object lvElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>(v1, v4);
v6 = <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.lang.Object HAS_NEXT>;
if v5 != v6 goto label1;
v7 = v3 + 1;
v8 = specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray lvNextBufferAndUnlink(java.util.concurrent.atomic.AtomicReferenceArray,int)>(v1, v7);
v9 = specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.lang.Object newBufferPeek(java.util.concurrent.atomic.AtomicReferenceArray,long,int)>(v8, v2, v3);
return v9;
label1:
return v5;
}
private java.lang.Object newBufferPeek(java.util.concurrent.atomic.AtomicReferenceArray, long, int)
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
int v3, v4;
java.lang.Object v5;
long v2;
java.util.concurrent.atomic.AtomicReferenceArray v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceArray;
v2 := @parameter1: long;
v3 := @parameter2: int;
v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray consumerBuffer> = v1;
v4 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int calcWrappedOffset(long,int)>(v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.lang.Object lvElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>(v1, v4);
return v5;
}
public void clear()
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
java.lang.Object v1;
boolean v2;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
label1:
v1 = virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.lang.Object poll()>();
if v1 != null goto label1;
v2 = virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: boolean isEmpty()>();
if v2 == 0 goto label1;
return;
}
public java.util.Iterator iterator()
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
java.lang.UnsupportedOperationException v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public int size()
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
byte v4;
long v1, v2, v3, v5;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 = specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: long lvConsumerIndex()>();
label1:
v2 = v1;
v3 = specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: long lvProducerIndex()>();
v1 = specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: long lvConsumerIndex()>();
v4 = v2 cmp v1;
if v4 != 0 goto label1;
v5 = v3 - v1;
return v5;
}
public boolean isEmpty()
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
byte v3;
long v1, v2;
boolean v4;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 = specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: long lvProducerIndex()>();
v2 = specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: long lvConsumerIndex()>();
v3 = v1 cmp v2;
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
private void adjustLookAheadStep(int)
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
int v1, v2, v3;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 := @parameter0: int;
v2 = v1 / 4;
v3 = staticinvoke <java.lang.Math: int min(int,int)>(v2, 4096);
v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int producerLookAheadStep> = v3;
return;
}
private long lvProducerIndex()
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
java.util.concurrent.atomic.AtomicLong v1;
long v2;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 = v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicLong producerIndex>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
private long lvConsumerIndex()
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
java.util.concurrent.atomic.AtomicLong v1;
long v2;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 = v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicLong consumerIndex>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
private long lpProducerIndex()
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
java.util.concurrent.atomic.AtomicLong v1;
long v2;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 = v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicLong producerIndex>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
private long lpConsumerIndex()
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
java.util.concurrent.atomic.AtomicLong v1;
long v2;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 = v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicLong consumerIndex>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
private void soProducerIndex(long)
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
java.util.concurrent.atomic.AtomicLong v2;
long v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicLong producerIndex>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: void lazySet(long)>(v1);
return;
}
private void soConsumerIndex(long)
{
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
java.util.concurrent.atomic.AtomicLong v2;
long v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicLong consumerIndex>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: void lazySet(long)>(v1);
return;
}
private static int calcWrappedOffset(long, int)
{
int v1, v2, v3;
long v0;
v0 := @parameter0: long;
v1 := @parameter1: int;
v2 = v0 & v1;
v3 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int calcDirectOffset(int)>(v2);
return v3;
}
private static int calcDirectOffset(int)
{
int v0;
v0 := @parameter0: int;
return v0;
}
private static void soElement(java.util.concurrent.atomic.AtomicReferenceArray, int, java.lang.Object)
{
int v1;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReferenceArray v0;
v0 := @parameter0: java.util.concurrent.atomic.AtomicReferenceArray;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.Object;
virtualinvoke v0.<java.util.concurrent.atomic.AtomicReferenceArray: void lazySet(int,java.lang.Object)>(v1, v2);
return;
}
private static java.lang.Object lvElement(java.util.concurrent.atomic.AtomicReferenceArray, int)
{
int v1;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReferenceArray v0;
v0 := @parameter0: java.util.concurrent.atomic.AtomicReferenceArray;
v1 := @parameter1: int;
v2 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>(v1);
return v2;
}
public boolean offer(java.lang.Object, java.lang.Object)
{
long v11, v17, v4, v6;
java.util.concurrent.atomic.AtomicReferenceArray v13, v3;
int v10, v12, v14, v15, v5, v7, v9;
io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue v0;
java.lang.Object v1, v16, v2, v8;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray producerBuffer>;
v4 = specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: long lvProducerIndex()>();
v5 = v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int producerMask>;
v6 = v4 + 2L;
v7 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int calcWrappedOffset(long,int)>(v6, v5);
v8 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.lang.Object lvElement(java.util.concurrent.atomic.AtomicReferenceArray,int)>(v3, v7);
if null != v8 goto label1;
v9 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int calcWrappedOffset(long,int)>(v4, v5);
v10 = v9 + 1;
staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v3, v10, v2);
staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v3, v9, v1);
v11 = v4 + 2L;
specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soProducerIndex(long)>(v11);
goto label2;
label1:
v12 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();
v13 = new java.util.concurrent.atomic.AtomicReferenceArray;
specialinvoke v13.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(v12);
v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray producerBuffer> = v13;
v14 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: int calcWrappedOffset(long,int)>(v4, v5);
v15 = v14 + 1;
staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v13, v15, v2);
staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v13, v14, v1);
specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soNext(java.util.concurrent.atomic.AtomicReferenceArray,java.util.concurrent.atomic.AtomicReferenceArray)>(v3, v13);
v16 = <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.lang.Object HAS_NEXT>;
staticinvoke <io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soElement(java.util.concurrent.atomic.AtomicReferenceArray,int,java.lang.Object)>(v3, v14, v16);
v17 = v4 + 2L;
specialinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: void soProducerIndex(long)>(v17);
label2:
return 1;
}
static void <clinit>()
{
java.lang.Object v0;
v0 = new java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
<io.smallrye.mutiny.helpers.queues.SpscLinkedArrayQueue: java.lang.Object HAS_NEXT> = v0;
return;
}
}