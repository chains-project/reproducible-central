public class io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy extends io.smallrye.mutiny.helpers.spies.MultiSpyBase
{
private volatile java.util.concurrent.Flow$Subscription lastSubscription;
public java.util.concurrent.Flow$Subscription lastSubscription()
{
io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy v0;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy;
v1 = v0.<io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy: java.util.concurrent.Flow$Subscription lastSubscription>;
return v1;
}
void <init>(io.smallrye.mutiny.Multi)
{
io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy;
v1 := @parameter0: io.smallrye.mutiny.Multi;
specialinvoke v0.<io.smallrye.mutiny.helpers.spies.MultiSpyBase: void <init>(io.smallrye.mutiny.Multi)>(v1);
return;
}
public void reset()
{
io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy v0;
v0 := @this: io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy;
specialinvoke v0.<io.smallrye.mutiny.helpers.spies.MultiSpyBase: void reset()>();
v0.<io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy: java.util.concurrent.Flow$Subscription lastSubscription> = null;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.MultiSubscribe v6;
io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy v0;
io.smallrye.mutiny.Multi v2, v5;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
io.smallrye.mutiny.groups.MultiOnSubscribe v3;
v0 := @this: io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = v0.<io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy: io.smallrye.mutiny.Multi upstream>;
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiOnSubscribe onSubscription()>();
v4 = staticinvoke <io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy$lambda_subscribe_0__2780: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy)>(v0);
v5 = virtualinvoke v3.<io.smallrye.mutiny.groups.MultiOnSubscribe: io.smallrye.mutiny.Multi invoke(java.util.function.Consumer)>(v4);
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
virtualinvoke v6.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.subscription.MultiSubscriber withSubscriber(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
return;
}
public java.lang.String toString()
{
io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy v0;
java.lang.String v2, v3;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy;
v1 = v0.<io.smallrye.mutiny.helpers.spies.MultiOnSubscribeSpy: java.util.concurrent.Flow$Subscription lastSubscription>;
v2 = specialinvoke v0.<io.smallrye.mutiny.helpers.spies.MultiSpyBase: java.lang.String toString()>();
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.concurrent.Flow$Subscription,java.lang.String)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("MultiOnSubscribeSpy{lastSubscription=\u0001} \u0001");
return v3;
}
}