public class io.smallrye.mutiny.helpers.test.AbstractSubscriber extends java.lang.Object implements java.util.concurrent.Flow$Subscriber, java.util.concurrent.Flow$Subscription
{
private final long upfrontRequest;
private final java.util.concurrent.atomic.AtomicReference upstream;
public void <init>()
{
java.util.concurrent.atomic.AtomicReference v1;
io.smallrye.mutiny.helpers.test.AbstractSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.AbstractSubscriber;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.helpers.test.AbstractSubscriber: java.util.concurrent.atomic.AtomicReference upstream> = v1;
v0.<io.smallrye.mutiny.helpers.test.AbstractSubscriber: long upfrontRequest> = 0L;
return;
}
public void <init>(long)
{
long v1;
java.util.concurrent.atomic.AtomicReference v2;
io.smallrye.mutiny.helpers.test.AbstractSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.AbstractSubscriber;
v1 := @parameter0: long;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v2.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.helpers.test.AbstractSubscriber: java.util.concurrent.atomic.AtomicReference upstream> = v2;
v0.<io.smallrye.mutiny.helpers.test.AbstractSubscriber: long upfrontRequest> = v1;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
java.lang.IllegalStateException v7;
io.smallrye.mutiny.helpers.test.AbstractSubscriber v0;
long v4, v6;
java.util.concurrent.atomic.AtomicReference v2;
byte v5;
boolean v3;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AbstractSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.helpers.test.AbstractSubscriber: java.util.concurrent.atomic.AtomicReference upstream>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.helpers.test.AbstractSubscriber: long upfrontRequest>;
v5 = v4 cmp 0L;
if v5 <= 0 goto label2;
v6 = v0.<io.smallrye.mutiny.helpers.test.AbstractSubscriber: long upfrontRequest>;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(v6);
goto label2;
label1:
v7 = new java.lang.IllegalStateException;
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("We already have a subscription");
throw v7;
label2:
return;
}
public void onNext(java.lang.Object)
{
java.lang.Object v1;
io.smallrye.mutiny.helpers.test.AbstractSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.AbstractSubscriber;
v1 := @parameter0: java.lang.Object;
return;
}
public void onError(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.helpers.test.AbstractSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.AbstractSubscriber;
v1 := @parameter0: java.lang.Throwable;
return;
}
public void onComplete()
{
io.smallrye.mutiny.helpers.test.AbstractSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.AbstractSubscriber;
return;
}
public void request(long)
{
java.lang.IllegalStateException v4;
io.smallrye.mutiny.helpers.test.AbstractSubscriber v0;
java.lang.Object v3;
long v1;
java.util.concurrent.atomic.AtomicReference v2;
v0 := @this: io.smallrye.mutiny.helpers.test.AbstractSubscriber;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.helpers.test.AbstractSubscriber: java.util.concurrent.atomic.AtomicReference upstream>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v3 == null goto label1;
interfaceinvoke v3.<java.util.concurrent.Flow$Subscription: void request(long)>(v1);
goto label2;
label1:
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No subscription");
throw v4;
label2:
return;
}
public void cancel()
{
java.lang.IllegalStateException v3;
io.smallrye.mutiny.helpers.test.AbstractSubscriber v0;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AbstractSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.AbstractSubscriber: java.util.concurrent.atomic.AtomicReference upstream>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v2 == null goto label1;
interfaceinvoke v2.<java.util.concurrent.Flow$Subscription: void cancel()>();
goto label2;
label1:
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No subscription");
throw v3;
label2:
return;
}
}