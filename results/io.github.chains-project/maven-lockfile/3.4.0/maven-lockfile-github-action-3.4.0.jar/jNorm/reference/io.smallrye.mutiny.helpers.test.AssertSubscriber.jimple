public class io.smallrye.mutiny.helpers.test.AssertSubscriber extends java.lang.Object implements java.util.concurrent.Flow$Subscriber, io.smallrye.mutiny.subscription.ContextSupport
{
public static java.time.Duration DEFAULT_TIMEOUT;
public static final java.lang.String DEFAULT_MUTINY_AWAIT_TIMEOUT;
private final java.util.concurrent.CountDownLatch terminal;
private final java.util.concurrent.CountDownLatch subscribed;
private final java.util.concurrent.atomic.AtomicReference subscription;
private final java.util.concurrent.atomic.AtomicLong requested;
private final java.util.List items;
private final java.util.concurrent.atomic.AtomicReference failure;
private final java.util.concurrent.atomic.AtomicBoolean completed;
private int numberOfSubscription;
private final boolean upfrontCancellation;
private boolean cancelled;
private final io.smallrye.mutiny.Context context;
private final java.util.List eventListeners;
public void <init>(io.smallrye.mutiny.Context, long, boolean)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.util.concurrent.atomic.AtomicBoolean v10;
long v2;
io.smallrye.mutiny.Context v1;
java.util.concurrent.atomic.AtomicReference v6, v9;
java.util.concurrent.CountDownLatch v4, v5;
java.util.concurrent.atomic.AtomicLong v12, v7;
boolean v3;
java.util.concurrent.CopyOnWriteArrayList v11, v8;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: io.smallrye.mutiny.Context;
v2 := @parameter1: long;
v3 := @parameter2: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = new java.util.concurrent.CountDownLatch;
specialinvoke v4.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);
v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.CountDownLatch terminal> = v4;
v5 = new java.util.concurrent.CountDownLatch;
specialinvoke v5.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);
v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.CountDownLatch subscribed> = v5;
v6 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v6.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicReference subscription> = v6;
v7 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v7.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicLong requested> = v7;
v8 = new java.util.concurrent.CopyOnWriteArrayList;
specialinvoke v8.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();
v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items> = v8;
v9 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v9.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicReference failure> = v9;
v10 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v10.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicBoolean completed> = v10;
v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: int numberOfSubscription> = 0;
v11 = new java.util.concurrent.CopyOnWriteArrayList;
specialinvoke v11.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();
v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List eventListeners> = v11;
v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: io.smallrye.mutiny.Context context> = v1;
v12 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
virtualinvoke v12.<java.util.concurrent.atomic.AtomicLong: void set(long)>(v2);
v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: boolean upfrontCancellation> = v3;
return;
}
public void <init>(long, boolean)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
long v1;
io.smallrye.mutiny.Context v3;
boolean v2;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: long;
v2 := @parameter1: boolean;
v3 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
specialinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: void <init>(io.smallrye.mutiny.Context,long,boolean)>(v3, v1, v2);
return;
}
public void <init>()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
io.smallrye.mutiny.Context v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
specialinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: void <init>(io.smallrye.mutiny.Context,long,boolean)>(v1, 0L, 0);
return;
}
public void <init>(long)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
long v1;
io.smallrye.mutiny.Context v2;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: long;
v2 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
specialinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: void <init>(io.smallrye.mutiny.Context,long,boolean)>(v2, v1, 0);
return;
}
public static io.smallrye.mutiny.helpers.test.AssertSubscriber create()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
v0 = new io.smallrye.mutiny.helpers.test.AssertSubscriber;
specialinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: void <init>(long)>(0L);
return v0;
}
public static io.smallrye.mutiny.helpers.test.AssertSubscriber create(long)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v1;
long v0;
v0 := @parameter0: long;
v1 = new io.smallrye.mutiny.helpers.test.AssertSubscriber;
specialinvoke v1.<io.smallrye.mutiny.helpers.test.AssertSubscriber: void <init>(long)>(v0);
return v1;
}
public static io.smallrye.mutiny.helpers.test.AssertSubscriber create(io.smallrye.mutiny.Context)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v1;
io.smallrye.mutiny.Context v0;
v0 := @parameter0: io.smallrye.mutiny.Context;
v1 = new io.smallrye.mutiny.helpers.test.AssertSubscriber;
specialinvoke v1.<io.smallrye.mutiny.helpers.test.AssertSubscriber: void <init>(io.smallrye.mutiny.Context,long,boolean)>(v0, 0L, 0);
return v1;
}
public static io.smallrye.mutiny.helpers.test.AssertSubscriber create(io.smallrye.mutiny.Context, long)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v2;
long v1;
io.smallrye.mutiny.Context v0;
v0 := @parameter0: io.smallrye.mutiny.Context;
v1 := @parameter1: long;
v2 = new io.smallrye.mutiny.helpers.test.AssertSubscriber;
specialinvoke v2.<io.smallrye.mutiny.helpers.test.AssertSubscriber: void <init>(io.smallrye.mutiny.Context,long,boolean)>(v0, v1, 0);
return v2;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
io.smallrye.mutiny.Context v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: io.smallrye.mutiny.Context context>;
return v1;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber assertCompleted()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.lang.Throwable v2;
java.util.List v3;
boolean v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: boolean hasCompleted()>();
v2 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.lang.Throwable getFailure()>();
v3 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List getItems()>();
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldHaveCompleted(boolean,java.lang.Throwable,java.util.List)>(v1, v2, v3);
return v0;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber assertFailedWith(java.lang.Class, java.lang.String)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.lang.Throwable v4;
java.lang.Class v1;
java.lang.String v2;
boolean v3;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: boolean hasCompleted()>();
v4 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.lang.Throwable getFailure()>();
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldHaveFailed(boolean,java.lang.Throwable,java.lang.Class,java.lang.String)>(v3, v4, v1, v2);
return v0;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber assertFailedWith(java.lang.Class)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.lang.Throwable v3;
java.lang.Class v1;
boolean v2;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: boolean hasCompleted()>();
v3 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.lang.Throwable getFailure()>();
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldHaveFailed(boolean,java.lang.Throwable,java.lang.Class,java.lang.String)>(v2, v3, v1, null);
return v0;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber assertHasNotReceivedAnyItem()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.util.List v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldHaveReceivedNoItems(java.util.List)>(v1);
return v0;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber assertSubscribed()
{
int v1;
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: int numberOfSubscription>;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldBeSubscribed(int)>(v1);
return v0;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber assertNotSubscribed()
{
int v1;
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: int numberOfSubscription>;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldNotBeSubscribed(int)>(v1);
return v0;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber assertTerminated()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.lang.Throwable v2;
boolean v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: boolean hasCompleted()>();
v2 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.lang.Throwable getFailure()>();
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldBeTerminated(boolean,java.lang.Throwable)>(v1, v2);
return v0;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber assertNotTerminated()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.lang.Throwable v2;
boolean v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: boolean hasCompleted()>();
v2 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.lang.Throwable getFailure()>();
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldNotBeTerminated(boolean,java.lang.Throwable)>(v1, v2);
return v0;
}
public final transient io.smallrye.mutiny.helpers.test.AssertSubscriber assertItems(java.lang.Object[])
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.util.List v2;
java.lang.Object[] v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: java.lang.Object[];
v2 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldHaveReceivedExactly(java.util.List,java.lang.Object[])>(v2, v1);
return v0;
}
public java.lang.Object getLastItem()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.util.List v1, v3, v4;
int v5, v6;
java.lang.Object v7;
boolean v2;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
v2 = interfaceinvoke v1.<java.util.List: boolean isEmpty()>();
if v2 == 0 goto label1;
return null;
label1:
v3 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
v4 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
v5 = interfaceinvoke v4.<java.util.List: int size()>();
v6 = v5 - 1;
v7 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(v6);
return v7;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber assertLastItem(java.lang.Object)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.lang.Object v1, v2;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.lang.Object getLastItem()>();
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldHaveReceived(java.lang.Object,java.lang.Object)>(v2, v1);
return v0;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber awaitNextItem()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0, v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: io.smallrye.mutiny.helpers.test.AssertSubscriber awaitNextItems(int)>(1);
return v1;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber awaitNextItem(java.time.Duration)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0, v2;
java.time.Duration v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: java.time.Duration;
v2 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: io.smallrye.mutiny.helpers.test.AssertSubscriber awaitNextItems(int,int,java.time.Duration)>(1, 1, v1);
return v2;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber awaitNextItems(int)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0, v3;
java.time.Duration v2;
int v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: int;
v2 = <io.smallrye.mutiny.helpers.test.AssertSubscriber: java.time.Duration DEFAULT_TIMEOUT>;
v3 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: io.smallrye.mutiny.helpers.test.AssertSubscriber awaitNextItems(int,java.time.Duration)>(v1, v2);
return v3;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber awaitNextItems(int, int)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0, v4;
java.time.Duration v3;
int v1, v2;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = <io.smallrye.mutiny.helpers.test.AssertSubscriber: java.time.Duration DEFAULT_TIMEOUT>;
v4 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: io.smallrye.mutiny.helpers.test.AssertSubscriber awaitNextItems(int,int,java.time.Duration)>(v1, v2, v3);
return v4;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber awaitNextItems(int, java.time.Duration)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0, v3;
java.time.Duration v2;
int v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: int;
v2 := @parameter1: java.time.Duration;
v3 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: io.smallrye.mutiny.helpers.test.AssertSubscriber awaitNextItems(int,int,java.time.Duration)>(v1, v1, v2);
return v3;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber awaitNextItems(int, int, java.time.Duration)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.lang.Throwable v5, v9;
java.lang.AssertionError v7, v8;
java.time.Duration v3;
int v1, v2;
java.lang.String v10;
boolean v4, v6;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: java.time.Duration;
v4 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: boolean hasCompleted()>();
if v4 != 0 goto label1;
v5 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.lang.Throwable getFailure()>();
if v5 == null goto label3;
label1:
v6 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: boolean hasCompleted()>();
if v6 == 0 goto label2;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>(java.lang.Object)>("Expecting a next items, but a completion event has already being received");
throw v7;
label2:
v8 = new java.lang.AssertionError;
v9 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.lang.Throwable getFailure()>();
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Throwable)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expecting a next items, but a failure event has already being received: \u0001");
specialinvoke v8.<java.lang.AssertionError: void <init>(java.lang.Object)>(v10);
throw v8;
label3:
specialinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: void awaitNextItemEvents(int,int,java.time.Duration)>(v1, v2, v3);
return v0;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber awaitItems(int)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0, v3;
java.time.Duration v2;
int v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: int;
v2 = <io.smallrye.mutiny.helpers.test.AssertSubscriber: java.time.Duration DEFAULT_TIMEOUT>;
v3 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: io.smallrye.mutiny.helpers.test.AssertSubscriber awaitItems(int,java.time.Duration)>(v1, v2);
return v3;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber awaitItems(int, java.time.Duration)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.lang.Throwable v11;
java.lang.AssertionError v14, v5;
java.time.Duration v2;
int v1, v13, v16, v4, v7;
java.lang.String v17, v8;
boolean v10, v9;
java.util.List v12, v15, v3, v6;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: int;
v2 := @parameter1: java.time.Duration;
v3 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
v4 = interfaceinvoke v3.<java.util.List: int size()>();
if v4 <= v1 goto label1;
v5 = new java.lang.AssertionError;
v6 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
v7 = interfaceinvoke v6.<java.util.List: int size()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v1, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected the number of items to be \u0001, but it\'s already \u0001");
specialinvoke v5.<java.lang.AssertionError: void <init>(java.lang.Object)>(v8);
throw v5;
label1:
v9 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: boolean isCancelled()>();
if v9 != 0 goto label2;
v10 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: boolean hasCompleted()>();
if v10 != 0 goto label2;
v11 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.lang.Throwable getFailure()>();
if v11 == null goto label4;
label2:
v12 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
v13 = interfaceinvoke v12.<java.util.List: int size()>();
if v13 == v1 goto label3;
v14 = new java.lang.AssertionError;
v15 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
v16 = interfaceinvoke v15.<java.util.List: int size()>();
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v1, v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected the number of items to be \u0001, but received \u0001 and we received a terminal event already");
specialinvoke v14.<java.lang.AssertionError: void <init>(java.lang.Object)>(v17);
throw v14;
label3:
return v0;
label4:
specialinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: void awaitItemEvents(int,java.time.Duration)>(v1, v2);
return v0;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber awaitCompletion()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0, v2;
java.time.Duration v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = <io.smallrye.mutiny.helpers.test.AssertSubscriber: java.time.Duration DEFAULT_TIMEOUT>;
v2 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: io.smallrye.mutiny.helpers.test.AssertSubscriber awaitCompletion(java.time.Duration)>(v1);
return v2;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber awaitCompletion(java.time.Duration)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.util.concurrent.TimeoutException v3;
java.util.concurrent.atomic.AtomicBoolean v7;
long v5;
java.lang.AssertionError v11, v4;
java.util.concurrent.atomic.AtomicReference v9;
java.util.concurrent.CountDownLatch v2;
java.time.Duration v1;
java.lang.Object v10;
java.lang.String v12, v6;
boolean v8;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: java.time.Duration;
label1:
v2 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.CountDownLatch terminal>;
specialinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: void awaitEvent(java.util.concurrent.CountDownLatch,java.time.Duration)>(v2, v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new java.lang.AssertionError;
v5 = virtualinvoke v1.<java.time.Duration: long toMillis()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No completion (or failure) event received in the last \u0001 ms");
specialinvoke v4.<java.lang.AssertionError: void <init>(java.lang.Object)>(v6);
throw v4;
label4:
v7 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicBoolean completed>;
v8 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v8 == 0 goto label5;
return v0;
label5:
v9 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicReference failure>;
v10 = virtualinvoke v9.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v10 == null goto label6;
v11 = new java.lang.AssertionError;
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Throwable)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected a completion event but got a failure: \u0001");
specialinvoke v11.<java.lang.AssertionError: void <init>(java.lang.Object)>(v12);
throw v11;
label6:
return v0;
catch java.util.concurrent.TimeoutException from label1 to label2 with label3;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber awaitFailure()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0, v2;
java.util.function.Consumer v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertSubscriber$lambda_awaitFailure_0__2793: java.util.function.Consumer bootstrap$()>();
v2 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: io.smallrye.mutiny.helpers.test.AssertSubscriber awaitFailure(java.util.function.Consumer)>(v1);
return v2;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber awaitFailure(java.util.function.Consumer)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0, v3;
java.util.function.Consumer v1;
java.time.Duration v2;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: java.util.function.Consumer;
v2 = <io.smallrye.mutiny.helpers.test.AssertSubscriber: java.time.Duration DEFAULT_TIMEOUT>;
v3 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: io.smallrye.mutiny.helpers.test.AssertSubscriber awaitFailure(java.util.function.Consumer,java.time.Duration)>(v1, v2);
return v3;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber awaitFailure(java.time.Duration)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0, v3;
java.util.function.Consumer v2;
java.time.Duration v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: java.time.Duration;
v2 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertSubscriber$lambda_awaitFailure_1__2794: java.util.function.Consumer bootstrap$()>();
v3 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: io.smallrye.mutiny.helpers.test.AssertSubscriber awaitFailure(java.util.function.Consumer,java.time.Duration)>(v2, v1);
return v3;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber awaitFailure(java.util.function.Consumer, java.time.Duration)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.util.concurrent.TimeoutException v4;
java.util.concurrent.atomic.AtomicBoolean v8;
long v6;
java.lang.AssertionError v10, v13, v14, v5;
java.util.concurrent.atomic.AtomicReference v11;
java.time.Duration v2;
java.lang.String v15, v7;
boolean v9;
java.util.function.Consumer v1;
java.util.concurrent.CountDownLatch v3;
java.lang.Object v12;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: java.util.function.Consumer;
v2 := @parameter1: java.time.Duration;
label1:
v3 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.CountDownLatch terminal>;
specialinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: void awaitEvent(java.util.concurrent.CountDownLatch,java.time.Duration)>(v3, v2);
label2:
goto label4;
label3:
v4 := @caughtexception;
v5 = new java.lang.AssertionError;
v6 = virtualinvoke v2.<java.time.Duration: long toMillis()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No completion (or failure) event received in the last \u0001 ms");
specialinvoke v5.<java.lang.AssertionError: void <init>(java.lang.Object)>(v7);
throw v5;
label4:
v8 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicBoolean completed>;
v9 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v9 == 0 goto label5;
v10 = new java.lang.AssertionError;
specialinvoke v10.<java.lang.AssertionError: void <init>(java.lang.Object)>("Expected a failure event but got a completion event.");
throw v10;
label5:
v11 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicReference failure>;
v12 = virtualinvoke v11.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
label6:
interfaceinvoke v1.<java.util.function.Consumer: void accept(java.lang.Object)>(v12);
label7:
return v0;
label8:
v13 := @caughtexception;
v14 = new java.lang.AssertionError;
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.AssertionError)>(v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Received a failure event, but that failure did not pass the validation: \u0001");
specialinvoke v14.<java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)>(v15, v13);
throw v14;
catch java.util.concurrent.TimeoutException from label1 to label2 with label3;
catch java.lang.AssertionError from label6 to label7 with label8;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber awaitSubscription()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0, v2;
java.time.Duration v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = <io.smallrye.mutiny.helpers.test.AssertSubscriber: java.time.Duration DEFAULT_TIMEOUT>;
v2 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: io.smallrye.mutiny.helpers.test.AssertSubscriber awaitSubscription(java.time.Duration)>(v1);
return v2;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber awaitSubscription(java.time.Duration)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.util.concurrent.CountDownLatch v2;
java.time.Duration v1;
java.util.concurrent.TimeoutException v3;
long v5;
java.lang.AssertionError v4;
java.lang.String v6;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: java.time.Duration;
label1:
v2 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.CountDownLatch subscribed>;
specialinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: void awaitEvent(java.util.concurrent.CountDownLatch,java.time.Duration)>(v2, v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new java.lang.AssertionError;
v5 = virtualinvoke v1.<java.time.Duration: long toMillis()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expecting a subscription event in the last \u0001 ms, but did not get it");
specialinvoke v4.<java.lang.AssertionError: void <init>(java.lang.Object)>(v6);
throw v4;
label4:
return v0;
catch java.util.concurrent.TimeoutException from label1 to label2 with label3;
}
private void awaitEvent(java.util.concurrent.CountDownLatch, java.time.Duration) throws java.util.concurrent.TimeoutException
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.util.concurrent.TimeoutException v8;
long v3, v5;
java.util.concurrent.TimeUnit v6;
java.util.concurrent.CountDownLatch v1;
byte v4;
java.lang.InterruptedException v9;
java.lang.Thread v10;
java.time.Duration v2;
boolean v7;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: java.util.concurrent.CountDownLatch;
v2 := @parameter1: java.time.Duration;
v3 = virtualinvoke v1.<java.util.concurrent.CountDownLatch: long getCount()>();
v4 = v3 cmp 0L;
if v4 != 0 goto label1;
return;
label1:
v5 = virtualinvoke v2.<java.time.Duration: long toMillis()>();
v6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v7 = virtualinvoke v1.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(v5, v6);
if v7 != 0 goto label3;
v8 = new java.util.concurrent.TimeoutException;
specialinvoke v8.<java.util.concurrent.TimeoutException: void <init>()>();
throw v8;
label2:
v9 := @caughtexception;
v10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v10.<java.lang.Thread: void interrupt()>();
label3:
return;
catch java.lang.InterruptedException from label1 to label2 with label2;
}
private void awaitNextItemEvents(int, int, java.time.Duration)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.util.concurrent.TimeoutException v25;
java.lang.Thread v11;
java.time.Duration v3;
boolean v16, v19;
java.util.List v13, v26, v6;
java.lang.Throwable v23;
java.util.concurrent.CompletableFuture v5;
long v30, v8;
java.lang.AssertionError v17, v20, v22, v29;
io.smallrye.mutiny.helpers.test.AssertSubscriber$NextItemTask v4;
int v1, v14, v15, v2, v27, v28, v7;
java.lang.String v18, v21, v24, v31;
java.util.concurrent.ExecutionException v12;
java.util.concurrent.TimeUnit v9;
java.lang.InterruptedException v10;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: java.time.Duration;
v4 = new io.smallrye.mutiny.helpers.test.AssertSubscriber$NextItemTask;
specialinvoke v4.<io.smallrye.mutiny.helpers.test.AssertSubscriber$NextItemTask: void <init>(int,io.smallrye.mutiny.helpers.test.AssertSubscriber)>(v1, v0);
v5 = virtualinvoke v4.<io.smallrye.mutiny.helpers.test.AssertSubscriber$NextItemTask: java.util.concurrent.CompletableFuture future()>();
if v2 <= 0 goto label1;
virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: io.smallrye.mutiny.helpers.test.AssertSubscriber request(long)>(v2);
label1:
v6 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
v7 = interfaceinvoke v6.<java.util.List: int size()>();
label2:
v8 = virtualinvoke v3.<java.time.Duration: long toMillis()>();
v9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
virtualinvoke v5.<java.util.concurrent.CompletableFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(v8, v9);
label3:
goto label9;
label4:
v10 := @caughtexception;
v11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v11.<java.lang.Thread: void interrupt()>();
goto label9;
label5:
v12 := @caughtexception;
v13 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
v14 = interfaceinvoke v13.<java.util.List: int size()>();
v15 = v14 - v7;
v16 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: boolean isCancelled()>();
if v16 == 0 goto label6;
v17 = new java.lang.AssertionError;
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v1, v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected \u0001 items, but received a cancellation event while waiting. Only \u0001 item(s) have been received.");
specialinvoke v17.<java.lang.AssertionError: void <init>(java.lang.Object)>(v18);
throw v17;
label6:
v19 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: boolean hasCompleted()>();
if v19 == 0 goto label7;
v20 = new java.lang.AssertionError;
v21 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v1, v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected \u0001 items, but received a completion event while waiting. Only \u0001 item(s) have been received.");
specialinvoke v20.<java.lang.AssertionError: void <init>(java.lang.Object)>(v21);
throw v20;
label7:
v22 = new java.lang.AssertionError;
v23 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.lang.Throwable getFailure()>();
v24 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,java.lang.Throwable,int)>(v1, v23, v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected \u0001 items, but received a failure event while waiting: \u0001. Only \u0001 item(s) have been received.");
specialinvoke v22.<java.lang.AssertionError: void <init>(java.lang.Object)>(v24);
throw v22;
label8:
v25 := @caughtexception;
v26 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
v27 = interfaceinvoke v26.<java.util.List: int size()>();
v28 = v27 - v7;
v29 = new java.lang.AssertionError;
v30 = virtualinvoke v3.<java.time.Duration: long toMillis()>();
v31 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,long,int)>(v1, v30, v28) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected \u0001 items in \u0001 ms, but only received \u0001 items.");
specialinvoke v29.<java.lang.AssertionError: void <init>(java.lang.Object)>(v31);
throw v29;
label9:
return;
catch java.lang.InterruptedException from label2 to label3 with label4;
catch java.util.concurrent.ExecutionException from label2 to label3 with label5;
catch java.util.concurrent.TimeoutException from label2 to label3 with label8;
}
private void awaitItemEvents(int, java.time.Duration)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.util.concurrent.TimeoutException v33;
java.lang.Thread v9;
java.time.Duration v2;
boolean v13, v18;
java.util.List v11, v15, v20, v26, v30, v34, v37;
java.lang.Throwable v23, v25;
java.util.concurrent.CompletableFuture v5;
long v4, v6;
java.lang.AssertionError v14, v19, v24, v29, v36;
int v1, v12, v16, v21, v27, v31, v35, v38;
java.lang.String v17, v22, v28, v32, v39;
io.smallrye.mutiny.helpers.test.AssertSubscriber$ItemTask v3;
java.util.concurrent.ExecutionException v10;
java.util.concurrent.TimeUnit v7;
java.lang.InterruptedException v8;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: int;
v2 := @parameter1: java.time.Duration;
v3 = new io.smallrye.mutiny.helpers.test.AssertSubscriber$ItemTask;
v4 = virtualinvoke v2.<java.time.Duration: long toMillis()>();
specialinvoke v3.<io.smallrye.mutiny.helpers.test.AssertSubscriber$ItemTask: void <init>(int,long,io.smallrye.mutiny.helpers.test.AssertSubscriber)>(v1, v4, v0);
label01:
v5 = virtualinvoke v3.<io.smallrye.mutiny.helpers.test.AssertSubscriber$ItemTask: java.util.concurrent.CompletableFuture future()>();
v6 = virtualinvoke v2.<java.time.Duration: long toMillis()>();
v7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
virtualinvoke v5.<java.util.concurrent.CompletableFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(v6, v7);
label02:
goto label11;
label03:
v8 := @caughtexception;
v9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v9.<java.lang.Thread: void interrupt()>();
goto label11;
label04:
v10 := @caughtexception;
v11 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
v12 = interfaceinvoke v11.<java.util.List: int size()>();
if v1 != v12 goto label05;
return;
label05:
v13 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: boolean isCancelled()>();
if v13 == 0 goto label06;
v14 = new java.lang.AssertionError;
v15 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
v16 = interfaceinvoke v15.<java.util.List: int size()>();
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v1, v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected \u0001 items, but received a cancellation event while waiting. Only \u0001 items have been received.");
specialinvoke v14.<java.lang.AssertionError: void <init>(java.lang.Object)>(v17);
throw v14;
label06:
v18 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: boolean hasCompleted()>();
if v18 == 0 goto label07;
v19 = new java.lang.AssertionError;
v20 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
v21 = interfaceinvoke v20.<java.util.List: int size()>();
v22 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v1, v21) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected \u0001 items, but received a completion event while waiting. Only \u0001 items have been received.");
specialinvoke v19.<java.lang.AssertionError: void <init>(java.lang.Object)>(v22);
throw v19;
label07:
v23 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.lang.Throwable getFailure()>();
if v23 == null goto label08;
v24 = new java.lang.AssertionError;
v25 = virtualinvoke v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.lang.Throwable getFailure()>();
v26 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
v27 = interfaceinvoke v26.<java.util.List: int size()>();
v28 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,java.lang.Throwable,int)>(v1, v25, v27) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected \u0001 items, but received a failure event while waiting: \u0001. Only \u0001 items have been received.");
specialinvoke v24.<java.lang.AssertionError: void <init>(java.lang.Object)>(v28);
throw v24;
label08:
virtualinvoke v10.<java.util.concurrent.ExecutionException: void printStackTrace()>();
v29 = new java.lang.AssertionError;
v30 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
v31 = interfaceinvoke v30.<java.util.List: int size()>();
v32 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v1, v31) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected \u0001 items.  Only \u0001 items have been received.");
specialinvoke v29.<java.lang.AssertionError: void <init>(java.lang.Object)>(v32);
throw v29;
label09:
v33 := @caughtexception;
v34 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
v35 = interfaceinvoke v34.<java.util.List: int size()>();
if v35 < v1 goto label10;
return;
label10:
v36 = new java.lang.AssertionError;
v37 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
v38 = interfaceinvoke v37.<java.util.List: int size()>();
v39 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v1, v38) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected \u0001 items.  Only \u0001 items have been received.");
specialinvoke v36.<java.lang.AssertionError: void <init>(java.lang.Object)>(v39);
throw v36;
label11:
return;
catch java.lang.InterruptedException from label01 to label02 with label03;
catch java.util.concurrent.ExecutionException from label01 to label02 with label04;
catch java.util.concurrent.TimeoutException from label01 to label02 with label09;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber cancel()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.util.function.Consumer v6;
java.util.List v5;
int v1;
java.lang.Object v3;
io.smallrye.mutiny.helpers.test.AssertSubscriber$Event v4;
java.util.concurrent.atomic.AtomicReference v2;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: int numberOfSubscription>;
staticinvoke <io.smallrye.mutiny.helpers.test.AssertionHelper: void shouldBeSubscribed(int)>(v1);
v2 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicReference subscription>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
interfaceinvoke v3.<java.util.concurrent.Flow$Subscription: void cancel()>();
v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: boolean cancelled> = 1;
v4 = new io.smallrye.mutiny.helpers.test.AssertSubscriber$Event;
specialinvoke v4.<io.smallrye.mutiny.helpers.test.AssertSubscriber$Event: void <init>(java.lang.Object,java.lang.Throwable,boolean,boolean)>(null, null, 0, 1);
v5 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List eventListeners>;
v6 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertSubscriber$lambda_cancel_2__2795: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.helpers.test.AssertSubscriber$Event)>(v4);
interfaceinvoke v5.<java.util.List: void forEach(java.util.function.Consumer)>(v6);
return v0;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber request(long)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.util.concurrent.atomic.AtomicLong v2;
java.lang.Object v4, v6;
long v1;
java.util.concurrent.atomic.AtomicReference v3, v5;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v1);
v3 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicReference subscription>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v4 == null goto label1;
v5 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicReference subscription>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
interfaceinvoke v6.<java.util.concurrent.Flow$Subscription: void request(long)>(v1);
label1:
return v0;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
long v11, v8;
java.util.concurrent.atomic.AtomicReference v4;
java.util.concurrent.CountDownLatch v5;
java.util.concurrent.atomic.AtomicLong v10, v7;
byte v9;
int v2, v3;
boolean v6;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: int numberOfSubscription>;
v3 = v2 + 1;
v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: int numberOfSubscription> = v3;
v4 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicReference subscription>;
virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v1);
v5 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.CountDownLatch subscribed>;
virtualinvoke v5.<java.util.concurrent.CountDownLatch: void countDown()>();
v6 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: boolean upfrontCancellation>;
if v6 == 0 goto label1;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: boolean cancelled> = 1;
return;
label1:
v7 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
v8 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicLong: long get()>();
v9 = v8 cmp 0L;
if v9 <= 0 goto label2;
v10 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
v11 = virtualinvoke v10.<java.util.concurrent.atomic.AtomicLong: long get()>();
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(v11);
label2:
return;
}
public synchronized void onNext(java.lang.Object)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.util.function.Consumer v5;
java.util.List v2, v4;
java.lang.Object v1;
io.smallrye.mutiny.helpers.test.AssertSubscriber$Event v3;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v1);
v3 = new io.smallrye.mutiny.helpers.test.AssertSubscriber$Event;
specialinvoke v3.<io.smallrye.mutiny.helpers.test.AssertSubscriber$Event: void <init>(java.lang.Object,java.lang.Throwable,boolean,boolean)>(v1, null, 0, 0);
v4 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List eventListeners>;
v5 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertSubscriber$lambda_onNext_3__2796: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.helpers.test.AssertSubscriber$Event)>(v3);
interfaceinvoke v4.<java.util.List: void forEach(java.util.function.Consumer)>(v5);
return;
}
public void onError(java.lang.Throwable)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.lang.Throwable v1;
java.util.function.Consumer v6;
java.util.concurrent.CountDownLatch v3;
java.util.List v5;
io.smallrye.mutiny.helpers.test.AssertSubscriber$Event v4;
java.util.concurrent.atomic.AtomicReference v2;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicReference failure>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v1);
v3 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.CountDownLatch terminal>;
virtualinvoke v3.<java.util.concurrent.CountDownLatch: void countDown()>();
v4 = new io.smallrye.mutiny.helpers.test.AssertSubscriber$Event;
specialinvoke v4.<io.smallrye.mutiny.helpers.test.AssertSubscriber$Event: void <init>(java.lang.Object,java.lang.Throwable,boolean,boolean)>(null, v1, 0, 0);
v5 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List eventListeners>;
v6 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertSubscriber$lambda_onError_4__2797: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.helpers.test.AssertSubscriber$Event)>(v4);
interfaceinvoke v5.<java.util.List: void forEach(java.util.function.Consumer)>(v6);
return;
}
public void onComplete()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.util.function.Consumer v5;
java.util.concurrent.CountDownLatch v2;
java.util.List v4;
java.util.concurrent.atomic.AtomicBoolean v1;
io.smallrye.mutiny.helpers.test.AssertSubscriber$Event v3;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicBoolean completed>;
virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);
v2 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.CountDownLatch terminal>;
virtualinvoke v2.<java.util.concurrent.CountDownLatch: void countDown()>();
v3 = new io.smallrye.mutiny.helpers.test.AssertSubscriber$Event;
specialinvoke v3.<io.smallrye.mutiny.helpers.test.AssertSubscriber$Event: void <init>(java.lang.Object,java.lang.Throwable,boolean,boolean)>(null, null, 1, 0);
v4 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List eventListeners>;
v5 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertSubscriber$lambda_onComplete_5__2798: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.helpers.test.AssertSubscriber$Event)>(v3);
interfaceinvoke v4.<java.util.List: void forEach(java.util.function.Consumer)>(v5);
return;
}
public java.util.List getItems()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.util.List v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List items>;
return v1;
}
public java.lang.Throwable getFailure()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicReference failure>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
return v2;
}
public io.smallrye.mutiny.helpers.test.AssertSubscriber run(java.lang.Runnable)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.lang.Throwable v3;
java.lang.AssertionError v2, v4;
java.lang.Runnable v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: java.lang.Runnable;
label1:
interfaceinvoke v1.<java.lang.Runnable: void run()>();
label2:
goto label5;
label3:
v2 := @caughtexception;
throw v2;
label4:
v3 := @caughtexception;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>(java.lang.Object)>(v3);
throw v4;
label5:
return v0;
catch java.lang.AssertionError from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
public boolean isCancelled()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
boolean v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: boolean cancelled>;
return v1;
}
public boolean hasCompleted()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.util.concurrent.atomic.AtomicBoolean v1;
boolean v2;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.concurrent.atomic.AtomicBoolean completed>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
return v2;
}
private void registerListener(io.smallrye.mutiny.helpers.test.AssertSubscriber$EventListener)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.util.List v2;
io.smallrye.mutiny.helpers.test.AssertSubscriber$EventListener v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: io.smallrye.mutiny.helpers.test.AssertSubscriber$EventListener;
v2 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List eventListeners>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v1);
return;
}
private void unregisterListener(io.smallrye.mutiny.helpers.test.AssertSubscriber$EventListener)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v0;
java.util.List v2;
io.smallrye.mutiny.helpers.test.AssertSubscriber$EventListener v1;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber;
v1 := @parameter0: io.smallrye.mutiny.helpers.test.AssertSubscriber$EventListener;
v2 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.util.List eventListeners>;
interfaceinvoke v2.<java.util.List: boolean remove(java.lang.Object)>(v1);
return;
}
static void <clinit>()
{
java.time.Duration v3;
java.util.Map v0;
int v2;
java.lang.Object v1;
v0 = staticinvoke <java.lang.System: java.util.Map getenv()>();
v1 = interfaceinvoke v0.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>("DEFAULT_MUTINY_AWAIT_TIMEOUT", "10");
v2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v1);
v3 = staticinvoke <java.time.Duration: java.time.Duration ofSeconds(long)>(v2);
<io.smallrye.mutiny.helpers.test.AssertSubscriber: java.time.Duration DEFAULT_TIMEOUT> = v3;
return;
}
}