public abstract class io.smallrye.mutiny.operators.AbstractUni extends java.lang.Object implements io.smallrye.mutiny.Uni
{
public void <init>()
{
io.smallrye.mutiny.operators.AbstractUni v0;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public abstract void subscribe(io.smallrye.mutiny.subscription.UniSubscriber);
public static void subscribe(io.smallrye.mutiny.Uni, io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.groups.UniSubscribe v4;
io.smallrye.mutiny.subscription.UniSubscriber v1, v3;
boolean v2;
io.smallrye.mutiny.Uni v0;
v0 := @parameter0: io.smallrye.mutiny.Uni;
v1 := @parameter1: io.smallrye.mutiny.subscription.UniSubscriber;
v2 = v0 instanceof io.smallrye.mutiny.operators.AbstractUni;
if v2 == 0 goto label1;
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.subscription.UniSubscriber onUniSubscription(io.smallrye.mutiny.Uni,io.smallrye.mutiny.subscription.UniSubscriber)>(v0, v1);
virtualinvoke v0.<io.smallrye.mutiny.operators.AbstractUni: void subscribe(io.smallrye.mutiny.subscription.UniSubscriber)>(v3);
goto label2;
label1:
v4 = interfaceinvoke v0.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.UniSubscriber withSubscriber(io.smallrye.mutiny.subscription.UniSubscriber)>(v1);
label2:
return;
}
public io.smallrye.mutiny.groups.UniSubscribe subscribe()
{
io.smallrye.mutiny.groups.UniSubscribe v1;
io.smallrye.mutiny.operators.AbstractUni v0;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 = new io.smallrye.mutiny.groups.UniSubscribe;
specialinvoke v1.<io.smallrye.mutiny.groups.UniSubscribe: void <init>(io.smallrye.mutiny.operators.AbstractUni)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.UniOnItem onItem()
{
io.smallrye.mutiny.operators.AbstractUni v0;
io.smallrye.mutiny.groups.UniOnItem v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 = new io.smallrye.mutiny.groups.UniOnItem;
specialinvoke v1.<io.smallrye.mutiny.groups.UniOnItem: void <init>(io.smallrye.mutiny.Uni)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.UniIfNoItem ifNoItem()
{
io.smallrye.mutiny.groups.UniIfNoItem v1;
io.smallrye.mutiny.operators.AbstractUni v0;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 = new io.smallrye.mutiny.groups.UniIfNoItem;
specialinvoke v1.<io.smallrye.mutiny.groups.UniIfNoItem: void <init>(io.smallrye.mutiny.Uni)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.UniOnFailure onFailure()
{
io.smallrye.mutiny.operators.AbstractUni v0;
io.smallrye.mutiny.groups.UniOnFailure v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 = new io.smallrye.mutiny.groups.UniOnFailure;
specialinvoke v1.<io.smallrye.mutiny.groups.UniOnFailure: void <init>(io.smallrye.mutiny.Uni,java.util.function.Predicate)>(v0, null);
return v1;
}
public io.smallrye.mutiny.groups.UniOnFailure onFailure(java.util.function.Predicate)
{
io.smallrye.mutiny.operators.AbstractUni v0;
io.smallrye.mutiny.groups.UniOnFailure v2;
java.util.function.Predicate v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 := @parameter0: java.util.function.Predicate;
v2 = new io.smallrye.mutiny.groups.UniOnFailure;
specialinvoke v2.<io.smallrye.mutiny.groups.UniOnFailure: void <init>(io.smallrye.mutiny.Uni,java.util.function.Predicate)>(v0, v1);
return v2;
}
public io.smallrye.mutiny.groups.UniOnFailure onFailure(java.lang.Class)
{
io.smallrye.mutiny.operators.AbstractUni v0;
io.smallrye.mutiny.groups.UniOnFailure v2;
java.util.function.Predicate v3;
java.lang.Class v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 := @parameter0: java.lang.Class;
v2 = new io.smallrye.mutiny.groups.UniOnFailure;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v3 = staticinvoke <io.smallrye.mutiny.operators.AbstractUni$isInstance__2637: java.util.function.Predicate bootstrap$(java.lang.Class)>(v1);
specialinvoke v2.<io.smallrye.mutiny.groups.UniOnFailure: void <init>(io.smallrye.mutiny.Uni,java.util.function.Predicate)>(v0, v3);
return v2;
}
public io.smallrye.mutiny.groups.UniOnSubscribe onSubscription()
{
io.smallrye.mutiny.groups.UniOnSubscribe v1;
io.smallrye.mutiny.operators.AbstractUni v0;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 = new io.smallrye.mutiny.groups.UniOnSubscribe;
specialinvoke v1.<io.smallrye.mutiny.groups.UniOnSubscribe: void <init>(io.smallrye.mutiny.Uni)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.UniOnItemOrFailure onItemOrFailure()
{
io.smallrye.mutiny.groups.UniOnItemOrFailure v1;
io.smallrye.mutiny.operators.AbstractUni v0;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 = new io.smallrye.mutiny.groups.UniOnItemOrFailure;
specialinvoke v1.<io.smallrye.mutiny.groups.UniOnItemOrFailure: void <init>(io.smallrye.mutiny.Uni)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.UniAwait await()
{
io.smallrye.mutiny.groups.UniAwait v1;
io.smallrye.mutiny.operators.AbstractUni v0;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 = virtualinvoke v0.<io.smallrye.mutiny.operators.AbstractUni: io.smallrye.mutiny.groups.UniAwait awaitUsing(io.smallrye.mutiny.Context)>(null);
return v1;
}
public io.smallrye.mutiny.groups.UniAwait awaitUsing(io.smallrye.mutiny.Context)
{
io.smallrye.mutiny.groups.UniAwait v2;
io.smallrye.mutiny.operators.AbstractUni v0;
io.smallrye.mutiny.Context v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 := @parameter0: io.smallrye.mutiny.Context;
v2 = new io.smallrye.mutiny.groups.UniAwait;
specialinvoke v2.<io.smallrye.mutiny.groups.UniAwait: void <init>(io.smallrye.mutiny.Uni,io.smallrye.mutiny.Context)>(v0, v1);
return v2;
}
public io.smallrye.mutiny.Uni emitOn(java.util.concurrent.Executor)
{
io.smallrye.mutiny.operators.AbstractUni v0;
io.smallrye.mutiny.operators.uni.UniEmitOn v2;
java.util.concurrent.Executor v1;
java.lang.Object v3;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 := @parameter0: java.util.concurrent.Executor;
v2 = new io.smallrye.mutiny.operators.uni.UniEmitOn;
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "executor");
specialinvoke v2.<io.smallrye.mutiny.operators.uni.UniEmitOn: void <init>(io.smallrye.mutiny.Uni,java.util.concurrent.Executor)>(v0, v3);
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Uni onUniCreation(io.smallrye.mutiny.Uni)>(v2);
return v4;
}
public io.smallrye.mutiny.Uni runSubscriptionOn(java.util.concurrent.Executor)
{
io.smallrye.mutiny.operators.AbstractUni v0;
java.util.concurrent.Executor v1;
io.smallrye.mutiny.operators.uni.UniRunSubscribeOn v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 := @parameter0: java.util.concurrent.Executor;
v2 = new io.smallrye.mutiny.operators.uni.UniRunSubscribeOn;
specialinvoke v2.<io.smallrye.mutiny.operators.uni.UniRunSubscribeOn: void <init>(io.smallrye.mutiny.Uni,java.util.concurrent.Executor)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Uni onUniCreation(io.smallrye.mutiny.Uni)>(v2);
return v3;
}
public io.smallrye.mutiny.groups.UniMemoize memoize()
{
io.smallrye.mutiny.operators.AbstractUni v0;
io.smallrye.mutiny.groups.UniMemoize v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 = new io.smallrye.mutiny.groups.UniMemoize;
specialinvoke v1.<io.smallrye.mutiny.groups.UniMemoize: void <init>(io.smallrye.mutiny.operators.AbstractUni)>(v0);
return v1;
}
public io.smallrye.mutiny.Uni cache()
{
io.smallrye.mutiny.operators.uni.UniMemoizeOp v1;
io.smallrye.mutiny.operators.AbstractUni v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 = new io.smallrye.mutiny.operators.uni.UniMemoizeOp;
specialinvoke v1.<io.smallrye.mutiny.operators.uni.UniMemoizeOp: void <init>(io.smallrye.mutiny.Uni)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Uni onUniCreation(io.smallrye.mutiny.Uni)>(v1);
return v2;
}
public io.smallrye.mutiny.groups.UniConvert convert()
{
io.smallrye.mutiny.groups.UniConvert v1;
io.smallrye.mutiny.operators.AbstractUni v0;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 = new io.smallrye.mutiny.groups.UniConvert;
specialinvoke v1.<io.smallrye.mutiny.groups.UniConvert: void <init>(io.smallrye.mutiny.Uni)>(v0);
return v1;
}
public io.smallrye.mutiny.Multi toMulti()
{
io.smallrye.mutiny.operators.AbstractUni v0;
io.smallrye.mutiny.groups.MultiCreate v1;
io.smallrye.mutiny.converters.uni.UniToMultiPublisher v2;
io.smallrye.mutiny.Multi v3;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 = staticinvoke <io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiCreate createFrom()>();
v2 = new io.smallrye.mutiny.converters.uni.UniToMultiPublisher;
specialinvoke v2.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher: void <init>(io.smallrye.mutiny.Uni)>(v0);
v3 = virtualinvoke v1.<io.smallrye.mutiny.groups.MultiCreate: io.smallrye.mutiny.Multi safePublisher(java.util.concurrent.Flow$Publisher)>(v2);
return v3;
}
public io.smallrye.mutiny.groups.UniRepeat repeat()
{
io.smallrye.mutiny.groups.UniRepeat v1;
io.smallrye.mutiny.operators.AbstractUni v0;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 = new io.smallrye.mutiny.groups.UniRepeat;
specialinvoke v1.<io.smallrye.mutiny.groups.UniRepeat: void <init>(io.smallrye.mutiny.Uni)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.UniOnTerminate onTermination()
{
io.smallrye.mutiny.groups.UniOnTerminate v1;
io.smallrye.mutiny.operators.AbstractUni v0;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 = new io.smallrye.mutiny.groups.UniOnTerminate;
specialinvoke v1.<io.smallrye.mutiny.groups.UniOnTerminate: void <init>(io.smallrye.mutiny.Uni)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.UniOnCancel onCancellation()
{
io.smallrye.mutiny.groups.UniOnCancel v1;
io.smallrye.mutiny.operators.AbstractUni v0;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 = new io.smallrye.mutiny.groups.UniOnCancel;
specialinvoke v1.<io.smallrye.mutiny.groups.UniOnCancel: void <init>(io.smallrye.mutiny.Uni)>(v0);
return v1;
}
public io.smallrye.mutiny.Uni log(java.lang.String)
{
io.smallrye.mutiny.operators.AbstractUni v0;
io.smallrye.mutiny.operators.uni.UniLogger v2;
java.lang.String v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 := @parameter0: java.lang.String;
v2 = new io.smallrye.mutiny.operators.uni.UniLogger;
specialinvoke v2.<io.smallrye.mutiny.operators.uni.UniLogger: void <init>(io.smallrye.mutiny.Uni,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Uni onUniCreation(io.smallrye.mutiny.Uni)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni log()
{
io.smallrye.mutiny.operators.AbstractUni v0;
java.lang.Class v1;
java.lang.String v2, v3;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.Class: java.lang.String getSimpleName()>();
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Uni.\u0001");
v4 = virtualinvoke v0.<io.smallrye.mutiny.operators.AbstractUni: io.smallrye.mutiny.Uni log(java.lang.String)>(v3);
return v4;
}
public io.smallrye.mutiny.Uni withContext(java.util.function.BiFunction)
{
io.smallrye.mutiny.operators.AbstractUni v0;
java.util.function.BiFunction v1;
io.smallrye.mutiny.operators.uni.UniWithContext v2;
java.lang.Object v3;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.smallrye.mutiny.operators.AbstractUni;
v1 := @parameter0: java.util.function.BiFunction;
v2 = new io.smallrye.mutiny.operators.uni.UniWithContext;
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "builder");
specialinvoke v2.<io.smallrye.mutiny.operators.uni.UniWithContext: void <init>(io.smallrye.mutiny.Uni,java.util.function.BiFunction)>(v0, v3);
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Uni onUniCreation(io.smallrye.mutiny.Uni)>(v2);
return v4;
}
}