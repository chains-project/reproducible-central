final class io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final java.util.function.Supplier supplier;
private final int size;
private java.util.List current;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, int, java.util.function.Supplier)
{
int v2;
io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor v0;
java.util.function.Supplier v3;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: int;
v3 := @parameter2: java.util.function.Supplier;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: int size> = v2;
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: java.util.function.Supplier supplier> = v3;
return;
}
public void request(long)
{
int v4;
long v1, v5;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v3;
io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor v0;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor;
v1 := @parameter0: long;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 == v3 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: int size>;
v5 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long multiply(long,long)>(v1, v4);
interfaceinvoke v2.<java.util.concurrent.Flow$Subscription: void request(long)>(v5);
label1:
return;
}
public void onItem(java.lang.Object)
{
java.util.function.Supplier v4;
java.util.List v10, v3, v6, v7;
int v8, v9;
java.lang.Object v1, v5;
io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v11;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: boolean isDone()>();
if v2 == 0 goto label1;
return;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: java.util.List current>;
if v3 != null goto label2;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: java.util.function.Supplier supplier>;
v5 = interfaceinvoke v4.<java.util.function.Supplier: java.lang.Object get()>();
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: java.util.List current> = v5;
label2:
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: java.util.List current>;
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v1);
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: java.util.List current>;
v8 = interfaceinvoke v7.<java.util.List: int size()>();
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: int size>;
if v8 != v9 goto label3;
v10 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: java.util.List current>;
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: java.util.List current> = null;
v11 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v11.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v10);
label3:
return;
}
public void onCompletion()
{
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v1, v3;
java.util.List v4;
io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v6, v7;
boolean v5;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor;
v1 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v1);
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 == v3 goto label2;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: java.util.List current>;
if v4 == null goto label1;
v5 = interfaceinvoke v4.<java.util.List: boolean isEmpty()>();
if v5 != 0 goto label1;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v6.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v4);
label1:
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferExactProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v7.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
label2:
return;
}
}