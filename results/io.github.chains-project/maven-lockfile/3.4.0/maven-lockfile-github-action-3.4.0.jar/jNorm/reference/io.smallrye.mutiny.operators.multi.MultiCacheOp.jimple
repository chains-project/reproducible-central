public class io.smallrye.mutiny.operators.multi.MultiCacheOp extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator implements java.util.concurrent.Flow$Subscriber, io.smallrye.mutiny.subscription.ContextSupport
{
private final java.util.concurrent.atomic.AtomicBoolean hasSubscribedToUpstream;
private final java.util.List subscribers;
private volatile boolean terminated;
private final java.util.concurrent.CopyOnWriteArrayList history;
private volatile io.smallrye.mutiny.Context context;
private java.lang.Throwable failure;
private volatile boolean done;
public void <init>(io.smallrye.mutiny.Multi)
{
java.util.concurrent.atomic.AtomicBoolean v2;
io.smallrye.mutiny.Multi v1;
io.smallrye.mutiny.operators.multi.MultiCacheOp v0;
java.util.concurrent.CopyOnWriteArrayList v3, v4;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCacheOp;
v1 := @parameter0: io.smallrye.mutiny.Multi;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v2 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: java.util.concurrent.atomic.AtomicBoolean hasSubscribedToUpstream> = v2;
v3 = new java.util.concurrent.CopyOnWriteArrayList;
specialinvoke v3.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: java.util.List subscribers> = v3;
v4 = new java.util.concurrent.CopyOnWriteArrayList;
specialinvoke v4.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: java.util.concurrent.CopyOnWriteArrayList history> = v4;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.groups.MultiSubscribe v9;
io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription v2;
java.util.concurrent.atomic.AtomicBoolean v3;
io.smallrye.mutiny.Context v6, v7;
io.smallrye.mutiny.Multi v8;
io.smallrye.mutiny.operators.multi.MultiCacheOp v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
boolean v4, v5;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCacheOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = new io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,io.smallrye.mutiny.operators.multi.MultiCacheOp)>(v1, v0);
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v2);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: void addDownstreamSubscription(io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription)>(v2);
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: java.util.concurrent.atomic.AtomicBoolean hasSubscribedToUpstream>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v4 == 0 goto label3;
v5 = v1 instanceof io.smallrye.mutiny.subscription.ContextSupport;
if v5 == 0 goto label1;
v6 = interfaceinvoke v1.<io.smallrye.mutiny.subscription.ContextSupport: io.smallrye.mutiny.Context context()>();
v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: io.smallrye.mutiny.Context context> = v6;
goto label2;
label1:
v7 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: io.smallrye.mutiny.Context context> = v7;
label2:
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: io.smallrye.mutiny.Multi upstream>;
v9 = interfaceinvoke v8.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
virtualinvoke v9.<io.smallrye.mutiny.groups.MultiSubscribe: java.util.concurrent.Flow$Subscriber withSubscriber(java.util.concurrent.Flow$Subscriber)>(v0);
goto label4;
label3:
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: void replay()>();
label4:
return;
}
private synchronized void addDownstreamSubscription(io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription)
{
java.util.List v3;
io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription v1;
boolean v2;
io.smallrye.mutiny.operators.multi.MultiCacheOp v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCacheOp;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: boolean terminated>;
if v2 == 0 goto label1;
return;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: java.util.List subscribers>;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v1);
return;
}
private synchronized void remove(io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription)
{
io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription v1;
java.util.List v2;
io.smallrye.mutiny.operators.multi.MultiCacheOp v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCacheOp;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: java.util.List subscribers>;
interfaceinvoke v2.<java.util.List: boolean remove(java.lang.Object)>(v1);
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.MultiCacheOp v0;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCacheOp;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(9223372036854775807L);
return;
}
public synchronized void onNext(java.lang.Object)
{
java.util.Iterator v5;
io.smallrye.mutiny.operators.multi.MultiCacheOp$Node v3;
io.smallrye.mutiny.operators.multi.MultiCacheOp v0;
java.util.List v4;
java.lang.Object v1, v7;
boolean v6;
java.util.concurrent.CopyOnWriteArrayList v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCacheOp;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: java.util.concurrent.CopyOnWriteArrayList history>;
v3 = new io.smallrye.mutiny.operators.multi.MultiCacheOp$Node;
specialinvoke v3.<io.smallrye.mutiny.operators.multi.MultiCacheOp$Node: void <init>(java.lang.Object)>(v1);
virtualinvoke v2.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(v3);
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: java.util.List subscribers>;
v5 = interfaceinvoke v4.<java.util.List: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v7.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: void replay()>();
goto label1;
label2:
return;
}
public void onError(java.lang.Throwable)
{
java.lang.Throwable v1;
java.util.List v3;
java.util.Iterator v4;
java.lang.Object v6;
boolean v2, v5;
io.smallrye.mutiny.operators.multi.MultiCacheOp v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCacheOp;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: boolean done>;
if v2 == 0 goto label1;
return;
label1:
v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: java.lang.Throwable failure> = v1;
v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: boolean done> = 1;
v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: boolean terminated> = 1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: java.util.List subscribers>;
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label2:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label3;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v6.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: void replay()>();
goto label2;
label3:
return;
}
public void onComplete()
{
java.util.List v1;
java.util.Iterator v2;
java.lang.Object v4;
boolean v3;
io.smallrye.mutiny.operators.multi.MultiCacheOp v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCacheOp;
v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: boolean done> = 1;
v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: boolean terminated> = 1;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: java.util.List subscribers>;
v2 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v4.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: void replay()>();
goto label1;
label2:
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.Context v1;
io.smallrye.mutiny.operators.multi.MultiCacheOp v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCacheOp;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp: io.smallrye.mutiny.Context context>;
return v1;
}
}