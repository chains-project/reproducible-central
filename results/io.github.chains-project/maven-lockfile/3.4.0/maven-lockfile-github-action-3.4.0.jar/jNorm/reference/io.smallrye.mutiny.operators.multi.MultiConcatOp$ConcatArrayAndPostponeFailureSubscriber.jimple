final class io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber extends io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber
{
final java.util.concurrent.Flow$Publisher[] upstreams;
int index;
long produced;
private final java.util.concurrent.atomic.AtomicInteger wip;
private final java.util.concurrent.atomic.AtomicReference failure;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, java.util.concurrent.Flow$Publisher[])
{
java.util.concurrent.atomic.AtomicInteger v3;
java.util.concurrent.Flow$Publisher[] v2;
java.util.concurrent.atomic.AtomicReference v4;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: java.util.concurrent.Flow$Publisher[];
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v3 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: java.util.concurrent.atomic.AtomicInteger wip> = v3;
v4 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v4.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: java.util.concurrent.atomic.AtomicReference failure> = v4;
v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: java.util.concurrent.Flow$Publisher[] upstreams> = v2;
return;
}
public void onItem(java.lang.Object)
{
java.lang.Object v1;
long v2, v3;
io.smallrye.mutiny.subscription.MultiSubscriber v4;
io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: long produced>;
v3 = v2 + 1L;
v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: long produced> = v3;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v1);
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
java.util.concurrent.atomic.AtomicReference v2;
boolean v3;
io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: java.util.concurrent.atomic.AtomicReference failure>;
v3 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: boolean addFailure(java.util.concurrent.atomic.AtomicReference,java.lang.Throwable)>(v2, v1);
if v3 == 0 goto label1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: void onCompletion()>();
label1:
return;
}
public void onCompletion()
{
java.lang.Throwable v8;
java.util.concurrent.Flow$Publisher[] v3;
long v15;
java.util.concurrent.atomic.AtomicReference v7;
java.lang.NullPointerException v13;
byte v16;
java.util.concurrent.atomic.AtomicInteger v1, v20;
int v19, v2, v21, v5, v6;
java.lang.String v14;
io.smallrye.mutiny.subscription.MultiSubscriber v10, v12, v9;
boolean v18, v4;
io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber v0;
java.util.concurrent.Flow$Subscriber v17;
java.util.concurrent.Flow$Publisher v11;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 != 0 goto label9;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: java.util.concurrent.Flow$Publisher[] upstreams>;
label1:
v4 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: boolean isCancelled()>();
if v4 == 0 goto label2;
return;
label2:
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: int index>;
v6 = lengthof v3;
if v5 != v6 goto label5;
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: java.util.concurrent.atomic.AtomicReference failure>;
v8 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: java.lang.Throwable markFailureAsTerminated(java.util.concurrent.atomic.AtomicReference)>(v7);
if v8 == null goto label3;
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v9.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v8);
goto label4;
label3:
v10 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v10.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
label4:
return;
label5:
v11 = v3[v5];
if v11 != null goto label6;
v12 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v13 = new java.lang.NullPointerException;
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Source Publisher at currentIndex \u0001 is null");
specialinvoke v13.<java.lang.NullPointerException: void <init>(java.lang.String)>(v14);
interfaceinvoke v12.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v13);
return;
label6:
v15 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: long produced>;
v16 = v15 cmp 0L;
if v16 == 0 goto label7;
v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: long produced> = 0L;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: void emitted(long)>(v15);
label7:
v17 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Flow$Subscriber onMultiSubscription(java.util.concurrent.Flow$Publisher,java.util.concurrent.Flow$Subscriber)>(v11, v0);
interfaceinvoke v11.<java.util.concurrent.Flow$Publisher: void subscribe(java.util.concurrent.Flow$Subscriber)>(v17);
v18 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: boolean isCancelled()>();
if v18 == 0 goto label8;
return;
label8:
v19 = v5 + 1;
v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: int index> = v19;
v20 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArrayAndPostponeFailureSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v21 = virtualinvoke v20.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
if v21 != 0 goto label1;
label9:
return;
}
}