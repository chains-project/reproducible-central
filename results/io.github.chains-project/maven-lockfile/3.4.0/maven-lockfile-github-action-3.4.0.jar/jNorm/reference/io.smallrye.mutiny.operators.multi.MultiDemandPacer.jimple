public class io.smallrye.mutiny.operators.multi.MultiDemandPacer extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator
{
private final java.util.concurrent.ScheduledExecutorService executor;
private final io.smallrye.mutiny.subscription.DemandPacer pacer;
public void <init>(io.smallrye.mutiny.Multi, java.util.concurrent.ScheduledExecutorService, io.smallrye.mutiny.subscription.DemandPacer)
{
io.smallrye.mutiny.subscription.DemandPacer v3;
java.util.concurrent.ScheduledExecutorService v2;
io.smallrye.mutiny.operators.multi.MultiDemandPacer v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiDemandPacer;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.concurrent.ScheduledExecutorService;
v3 := @parameter2: io.smallrye.mutiny.subscription.DemandPacer;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v0.<io.smallrye.mutiny.operators.multi.MultiDemandPacer: java.util.concurrent.ScheduledExecutorService executor> = v2;
v0.<io.smallrye.mutiny.operators.multi.MultiDemandPacer: io.smallrye.mutiny.subscription.DemandPacer pacer> = v3;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.subscription.DemandPacer v5;
java.util.concurrent.ScheduledExecutorService v4;
io.smallrye.mutiny.operators.multi.MultiDemandPacer v0;
io.smallrye.mutiny.Multi v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
io.smallrye.mutiny.operators.multi.MultiDemandPacer$MultiSubscriptionPacerProcessor v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiDemandPacer;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiDemandPacer: io.smallrye.mutiny.Multi upstream>;
v3 = new io.smallrye.mutiny.operators.multi.MultiDemandPacer$MultiSubscriptionPacerProcessor;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiDemandPacer: java.util.concurrent.ScheduledExecutorService executor>;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiDemandPacer: io.smallrye.mutiny.subscription.DemandPacer pacer>;
specialinvoke v3.<io.smallrye.mutiny.operators.multi.MultiDemandPacer$MultiSubscriptionPacerProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,java.util.concurrent.ScheduledExecutorService,io.smallrye.mutiny.subscription.DemandPacer)>(v1, v4, v5);
interfaceinvoke v2.<io.smallrye.mutiny.Multi: void subscribe(java.util.concurrent.Flow$Subscriber)>(v3);
return;
}
}