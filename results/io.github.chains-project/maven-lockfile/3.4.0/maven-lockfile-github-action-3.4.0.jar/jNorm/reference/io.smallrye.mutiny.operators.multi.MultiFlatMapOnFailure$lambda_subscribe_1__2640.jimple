public final class io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure$lambda_subscribe_1__2640 extends java.lang.Object implements java.util.function.Function
{
io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure cap0;
public static java.util.function.Function bootstrap$(io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure)
{
io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure$lambda_subscribe_1__2640 v1;
io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure v0;
v0 := @parameter0: io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure;
v1 = new io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure$lambda_subscribe_1__2640;
specialinvoke v1.<io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure$lambda_subscribe_1__2640: void <init>(io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure)>(v0);
return v1;
}
public void <init>(io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure)
{
io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure$lambda_subscribe_1__2640 v0;
io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure$lambda_subscribe_1__2640;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure$lambda_subscribe_1__2640: io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure cap0> = v1;
return;
}
public java.lang.Object apply(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure$lambda_subscribe_1__2640 v0;
java.util.concurrent.Flow$Publisher v3;
io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure v2;
java.lang.Object v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure$lambda_subscribe_1__2640;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure$lambda_subscribe_1__2640: io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure cap0>;
v3 = specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure: java.util.concurrent.Flow$Publisher lambda$subscribe$1(java.lang.Throwable)>(v1);
return v3;
}
}