public class io.smallrye.mutiny.operators.multi.MultiIgnoreOp extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator
{
public void <init>(io.smallrye.mutiny.Multi)
{
io.smallrye.mutiny.operators.multi.MultiIgnoreOp v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiIgnoreOp;
v1 := @parameter0: io.smallrye.mutiny.Multi;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.MultiIgnoreOp v0;
io.smallrye.mutiny.groups.MultiSubscribe v3;
java.lang.Object v5;
io.smallrye.mutiny.Multi v2;
io.smallrye.mutiny.operators.multi.MultiIgnoreOp$MultiIgnoreProcessor v4;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiIgnoreOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiIgnoreOp: io.smallrye.mutiny.Multi upstream>;
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v4 = new io.smallrye.mutiny.operators.multi.MultiIgnoreOp$MultiIgnoreProcessor;
v5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(v1);
specialinvoke v4.<io.smallrye.mutiny.operators.multi.MultiIgnoreOp$MultiIgnoreProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v5);
virtualinvoke v3.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.subscription.MultiSubscriber withSubscriber(io.smallrye.mutiny.subscription.MultiSubscriber)>(v4);
return;
}
}