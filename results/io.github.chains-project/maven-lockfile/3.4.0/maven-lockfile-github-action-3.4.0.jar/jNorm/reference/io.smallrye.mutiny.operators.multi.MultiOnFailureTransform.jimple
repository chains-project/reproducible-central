public class io.smallrye.mutiny.operators.multi.MultiOnFailureTransform extends io.smallrye.mutiny.operators.MultiOperator
{
private final java.util.function.Predicate predicate;
private final java.util.function.Function mapper;
public void <init>(io.smallrye.mutiny.Multi, java.util.function.Predicate, java.util.function.Function)
{
io.smallrye.mutiny.operators.multi.MultiOnFailureTransform v0;
java.util.function.Predicate v2, v4;
java.util.function.Function v3;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOnFailureTransform;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.function.Predicate;
v3 := @parameter2: java.util.function.Function;
specialinvoke v0.<io.smallrye.mutiny.operators.MultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
if v2 != null goto label1;
v4 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiOnFailureTransform$lambda_new_0__2650: java.util.function.Predicate bootstrap$()>();
goto label2;
label1:
v4 = v2;
label2:
v0.<io.smallrye.mutiny.operators.multi.MultiOnFailureTransform: java.util.function.Predicate predicate> = v4;
v0.<io.smallrye.mutiny.operators.multi.MultiOnFailureTransform: java.util.function.Function mapper> = v3;
return;
}
public void subscribe(java.util.concurrent.Flow$Subscriber)
{
io.smallrye.mutiny.operators.multi.MultiOnFailureTransform v0;
java.util.concurrent.Flow$Subscriber v1;
io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp v3;
java.util.function.Function v2;
io.smallrye.mutiny.Multi v4, v5;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOnFailureTransform;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "The subscriber must not be `null`");
v2 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiOnFailureTransform$lambda_subscribe_1__2651: java.util.function.Function bootstrap$(io.smallrye.mutiny.operators.multi.MultiOnFailureTransform)>(v0);
v3 = new io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp;
v4 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOnFailureTransform: io.smallrye.mutiny.Multi upstream()>();
specialinvoke v3.<io.smallrye.mutiny.operators.multi.MultiOnFailureResumeOp: void <init>(io.smallrye.mutiny.Multi,java.util.function.Function)>(v4, v2);
v5 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v3);
interfaceinvoke v5.<io.smallrye.mutiny.Multi: void subscribe(java.util.concurrent.Flow$Subscriber)>(v1);
return;
}
}