final class io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp$OnSubscribeSubscriber extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
final io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp this$0;
void <init>(io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp, io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp v1;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp$OnSubscribeSubscriber v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp$OnSubscribeSubscriber;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp;
v2 := @parameter1: io.smallrye.mutiny.subscription.MultiSubscriber;
v0.<io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp$OnSubscribeSubscriber: io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp this$0> = v1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v2);
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
java.lang.Throwable v5;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v7;
io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp v3;
java.util.function.Consumer v4;
io.smallrye.mutiny.subscription.MultiSubscriber v6, v9;
boolean v2;
io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp$OnSubscribeSubscriber v0;
java.util.concurrent.Flow$Subscription v1, v8;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp$OnSubscribeSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp$OnSubscribeSubscriber: boolean compareAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription,java.util.concurrent.Flow$Subscription)>(null, v1);
if v2 == 0 goto label5;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp$OnSubscribeSubscriber: io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp this$0>;
v4 = v3.<io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp: java.util.function.Consumer onSubscribe>;
interfaceinvoke v4.<java.util.function.Consumer: void accept(java.lang.Object)>(v1);
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp$OnSubscribeSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void fail(java.util.concurrent.Flow$Subscriber,java.lang.Throwable)>(v6, v5);
v7 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v8 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp$OnSubscribeSubscriber: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v7);
interfaceinvoke v8.<java.util.concurrent.Flow$Subscription: void cancel()>();
return;
label4:
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiOnSubscribeInvokeOp$OnSubscribeSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v9.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
goto label6;
label5:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label6:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}