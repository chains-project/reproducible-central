final class io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber extends io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber
{
private final java.util.concurrent.Flow$Publisher upstream;
private final java.util.concurrent.atomic.AtomicInteger wip;
private long remaining;
long produced;
private final java.util.function.Predicate onFailurePredicate;
void <init>(java.util.concurrent.Flow$Publisher, java.util.function.Predicate, io.smallrye.mutiny.subscription.MultiSubscriber, long)
{
io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber v0;
java.util.concurrent.Flow$Publisher v1;
java.util.concurrent.atomic.AtomicInteger v5;
java.util.function.Predicate v2;
long v4;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Publisher;
v2 := @parameter1: java.util.function.Predicate;
v3 := @parameter2: io.smallrye.mutiny.subscription.MultiSubscriber;
v4 := @parameter3: long;
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v3);
v5 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v5.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: java.util.concurrent.atomic.AtomicInteger wip> = v5;
v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: java.util.concurrent.Flow$Publisher upstream> = v1;
v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: long remaining> = v4;
v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: java.util.function.Predicate onFailurePredicate> = v2;
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber v0;
java.lang.Object v1;
long v2, v3;
io.smallrye.mutiny.subscription.MultiSubscriber v4;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: long produced>;
v3 = v2 + 1L;
v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: long produced> = v3;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v1);
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
long v3, v7;
io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber v0;
byte v4, v5;
io.smallrye.mutiny.subscription.MultiSubscriber v6;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: boolean testOnFailurePredicate(java.lang.Throwable)>(v1);
if v2 == 0 goto label1;
return;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: long remaining>;
v4 = v3 cmp 9223372036854775807L;
if v4 == 0 goto label3;
v5 = v3 cmp 0L;
if v5 != 0 goto label2;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v6.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v1);
return;
label2:
v7 = v3 - 1L;
v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: long remaining> = v7;
label3:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: void resubscribe()>();
return;
}
private boolean testOnFailurePredicate(java.lang.Throwable)
{
java.lang.Throwable v1, v5;
java.util.function.Predicate v2;
io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber v0;
io.smallrye.mutiny.CompositeException v7;
java.lang.Throwable[] v8;
io.smallrye.mutiny.subscription.MultiSubscriber v4, v6;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber;
v1 := @parameter0: java.lang.Throwable;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: java.util.function.Predicate onFailurePredicate>;
v3 = interfaceinvoke v2.<java.util.function.Predicate: boolean test(java.lang.Object)>(v1);
if v3 != 0 goto label4;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: void cancel()>();
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v1);
label2:
return 1;
label3:
v5 := @caughtexception;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: void cancel()>();
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v7 = new io.smallrye.mutiny.CompositeException;
v8 = newarray (java.lang.Throwable)[2];
v8[0] = v5;
v8[1] = v1;
specialinvoke v7.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v8);
interfaceinvoke v6.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v7);
return 1;
label4:
return 0;
catch java.lang.Throwable from label1 to label2 with label3;
}
void resubscribe()
{
long v4;
io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber v0;
java.util.concurrent.Flow$Subscriber v8;
byte v5;
java.util.concurrent.Flow$Publisher v6, v7;
java.util.concurrent.atomic.AtomicInteger v1, v9;
int v10, v2;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 != 0 goto label4;
label1:
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: boolean isCancelled()>();
if v3 == 0 goto label2;
return;
label2:
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: long produced>;
v5 = v4 cmp 0L;
if v5 == 0 goto label3;
v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: long produced> = 0L;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: void emitted(long)>(v4);
label3:
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: java.util.concurrent.Flow$Publisher upstream>;
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: java.util.concurrent.Flow$Publisher upstream>;
v8 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Flow$Subscriber onMultiSubscription(java.util.concurrent.Flow$Publisher,java.util.concurrent.Flow$Subscriber)>(v7, v0);
interfaceinvoke v6.<java.util.concurrent.Flow$Publisher: void subscribe(java.util.concurrent.Flow$Subscriber)>(v8);
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v10 = virtualinvoke v9.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
if v10 != 0 goto label1;
label4:
return;
}
}