public final class io.smallrye.mutiny.operators.multi.MultiRetryOp extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator
{
private final long times;
private final java.util.function.Predicate onFailurePredicate;
public void <init>(io.smallrye.mutiny.Multi, java.util.function.Predicate, long)
{
io.smallrye.mutiny.operators.multi.MultiRetryOp v0;
java.util.function.Predicate v2;
long v3;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryOp;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.function.Predicate;
v3 := @parameter2: long;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp: java.util.function.Predicate onFailurePredicate> = v2;
v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp: long times> = v3;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber v2;
io.smallrye.mutiny.operators.multi.MultiRetryOp v0;
java.util.function.Predicate v4;
long v5;
io.smallrye.mutiny.Multi v3;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
boolean v6;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = new io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp: io.smallrye.mutiny.Multi upstream>;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp: java.util.function.Predicate onFailurePredicate>;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryOp: long times>;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: void <init>(java.util.concurrent.Flow$Publisher,java.util.function.Predicate,io.smallrye.mutiny.subscription.MultiSubscriber,long)>(v3, v4, v1, v5);
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v2);
v6 = virtualinvoke v2.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: boolean isCancelled()>();
if v6 != 0 goto label1;
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.MultiRetryOp$RetrySubscriber: void resubscribe()>();
label1:
return;
}
}