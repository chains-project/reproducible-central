final class io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final int numberOfItems;
private final java.util.ArrayDeque queue;
private final java.util.concurrent.atomic.AtomicLong requested;
private final java.util.concurrent.atomic.AtomicInteger wip;
volatile boolean upstreamCompleted;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, int)
{
java.util.concurrent.atomic.AtomicLong v3;
io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor v0;
java.util.concurrent.atomic.AtomicInteger v4;
int v2;
java.util.ArrayDeque v5;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: int;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v3 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: java.util.concurrent.atomic.AtomicLong requested> = v3;
v4 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v4.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: java.util.concurrent.atomic.AtomicInteger wip> = v4;
v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: int numberOfItems> = v2;
v5 = new java.util.ArrayDeque;
specialinvoke v5.<java.util.ArrayDeque: void <init>(int)>(v2);
v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: java.util.ArrayDeque queue> = v5;
return;
}
public void request(long)
{
java.util.concurrent.atomic.AtomicLong v2;
long v1;
io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v2, v1);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: void drain()>();
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
boolean v2;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: boolean compareAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription,java.util.concurrent.Flow$Subscription)>(null, v1);
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(9223372036854775807L);
goto label2;
label1:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label2:
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor v0;
int v3, v4;
java.lang.Object v1;
java.util.ArrayDeque v2, v5, v6;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: java.util.ArrayDeque queue>;
v3 = virtualinvoke v2.<java.util.ArrayDeque: int size()>();
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: int numberOfItems>;
if v3 != v4 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: java.util.ArrayDeque queue>;
virtualinvoke v5.<java.util.ArrayDeque: java.lang.Object poll()>();
label1:
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: java.util.ArrayDeque queue>;
virtualinvoke v6.<java.util.ArrayDeque: boolean offer(java.lang.Object)>(v1);
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor;
v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: boolean upstreamCompleted> = 1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: void drain()>();
return;
}
private void drain()
{
io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor v0;
long v19, v4, v8;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v11, v6;
byte v16, v17, v9;
java.util.concurrent.atomic.AtomicInteger v1, v20;
int v2, v21;
io.smallrye.mutiny.subscription.MultiSubscriber v14, v15;
boolean v7;
java.util.concurrent.Flow$Subscription v10, v5;
java.util.concurrent.atomic.AtomicLong v18, v3;
java.lang.Object v13;
java.util.ArrayDeque v12;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 != 0 goto label8;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: java.util.concurrent.atomic.AtomicLong requested>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicLong: long get()>();
label1:
v5 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
v6 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v5 != v6 goto label2;
return;
label2:
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: boolean upstreamCompleted>;
if v7 == 0 goto label7;
v8 = 0L;
label3:
v9 = v8 cmp v4;
if v9 == 0 goto label6;
v10 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
v11 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v10 != v11 goto label4;
return;
label4:
v12 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: java.util.ArrayDeque queue>;
v13 = virtualinvoke v12.<java.util.ArrayDeque: java.lang.Object poll()>();
if v13 != null goto label5;
v14 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v14.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
return;
label5:
v15 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v15.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v13);
v8 = v8 + 1L;
goto label3;
label6:
v16 = v8 cmp 0L;
if v16 == 0 goto label7;
v17 = v4 cmp 9223372036854775807L;
if v17 == 0 goto label7;
v18 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: java.util.concurrent.atomic.AtomicLong requested>;
v19 = neg v8;
v4 = virtualinvoke v18.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v19);
label7:
v20 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectLastOp$MultiSelectLastProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v21 = virtualinvoke v20.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
if v21 != 0 goto label1;
label8:
return;
}
}