public final class io.smallrye.mutiny.operators.multi.MultiSkipFirstOp extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator
{
private final long numberOfItems;
public void <init>(io.smallrye.mutiny.Multi, long)
{
io.smallrye.mutiny.operators.multi.MultiSkipFirstOp v0;
long v2, v3;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipFirstOp;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: long;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: long positiveOrZero(long,java.lang.String)>(v2, "numberOfItems");
v0.<io.smallrye.mutiny.operators.multi.MultiSkipFirstOp: long numberOfItems> = v3;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.MultiSkipFirstOp v0;
long v2, v7;
io.smallrye.mutiny.operators.multi.MultiSkipFirstOp$SkipFirstProcessor v6;
io.smallrye.mutiny.Multi v4, v5;
byte v3;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipFirstOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipFirstOp: long numberOfItems>;
v3 = v2 cmp 0L;
if v3 != 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipFirstOp: io.smallrye.mutiny.Multi upstream>;
interfaceinvoke v4.<io.smallrye.mutiny.Multi: void subscribe(java.util.concurrent.Flow$Subscriber)>(v1);
goto label2;
label1:
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipFirstOp: io.smallrye.mutiny.Multi upstream>;
v6 = new io.smallrye.mutiny.operators.multi.MultiSkipFirstOp$SkipFirstProcessor;
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipFirstOp: long numberOfItems>;
specialinvoke v6.<io.smallrye.mutiny.operators.multi.MultiSkipFirstOp$SkipFirstProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,long)>(v1, v7);
interfaceinvoke v5.<io.smallrye.mutiny.Multi: void subscribe(java.util.concurrent.Flow$Subscriber)>(v6);
label2:
return;
}
}