public final class io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator
{
private final java.util.function.Predicate predicate;
public void <init>(io.smallrye.mutiny.Multi, java.util.function.Predicate)
{
io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp v0;
java.util.function.Predicate v2;
java.lang.Object v3;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.function.Predicate;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "predicate");
v0.<io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp: java.util.function.Predicate predicate> = v3;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp$MultiSkipFirstUntilProcessor v3;
io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp v0;
java.util.function.Predicate v4;
io.smallrye.mutiny.Multi v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNullNpe(java.lang.Object,java.lang.String)>(v1, "subscriber");
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp: io.smallrye.mutiny.Multi upstream>;
v3 = new io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp$MultiSkipFirstUntilProcessor;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp: java.util.function.Predicate predicate>;
specialinvoke v3.<io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp$MultiSkipFirstUntilProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,java.util.function.Predicate)>(v1, v4);
interfaceinvoke v2.<io.smallrye.mutiny.Multi: void subscribe(java.util.concurrent.Flow$Subscriber)>(v3);
return;
}
}