final class io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final int numberOfItems;
private final java.util.ArrayDeque queue;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, int)
{
int v2;
io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor v0;
java.util.ArrayDeque v3;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: int;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v3 = new java.util.ArrayDeque;
specialinvoke v3.<java.util.ArrayDeque: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor: java.util.ArrayDeque queue> = v3;
v0.<io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor: int numberOfItems> = v2;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
int v4;
io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
boolean v2;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor: boolean compareAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription,java.util.concurrent.Flow$Subscription)>(null, v1);
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor: int numberOfItems>;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(v4);
goto label2;
label1:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label2:
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor v0;
int v3, v4;
java.lang.Object v1, v7;
java.util.ArrayDeque v2, v6, v8;
io.smallrye.mutiny.subscription.MultiSubscriber v5;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor: java.util.ArrayDeque queue>;
v3 = virtualinvoke v2.<java.util.ArrayDeque: int size()>();
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor: int numberOfItems>;
if v3 != v4 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor: java.util.ArrayDeque queue>;
v7 = virtualinvoke v6.<java.util.ArrayDeque: java.lang.Object pollFirst()>();
interfaceinvoke v5.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v7);
label1:
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor: java.util.ArrayDeque queue>;
virtualinvoke v8.<java.util.ArrayDeque: boolean offerLast(java.lang.Object)>(v1);
return;
}
public void onFailure(java.lang.Throwable)
{
io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor v0;
java.lang.Throwable v1;
java.util.ArrayDeque v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor: java.util.ArrayDeque queue>;
virtualinvoke v2.<java.util.ArrayDeque: void clear()>();
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onFailure(java.lang.Throwable)>(v1);
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor v0;
java.util.ArrayDeque v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor: java.util.ArrayDeque queue>;
virtualinvoke v1.<java.util.ArrayDeque: void clear()>();
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onCompletion()>();
return;
}
public void cancel()
{
io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor v0;
java.util.ArrayDeque v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void cancel()>();
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipLastOp$SkipLastProcessor: java.util.ArrayDeque queue>;
virtualinvoke v1.<java.util.ArrayDeque: void clear()>();
return;
}
}