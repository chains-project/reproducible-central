public final class io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator
{
private final java.util.concurrent.Flow$Publisher other;
public void <init>(io.smallrye.mutiny.Multi, java.util.concurrent.Flow$Publisher)
{
io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp v0;
java.util.concurrent.Flow$Publisher v2;
java.lang.Object v3;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.concurrent.Flow$Publisher;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "other");
v0.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp: java.util.concurrent.Flow$Publisher other> = v3;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.Multi v7, v8;
java.util.concurrent.Flow$Subscriber v6, v9;
io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp v0;
java.util.concurrent.Flow$Publisher v4, v5;
io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor v2;
io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker v3;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = new io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor: void <init>(java.util.concurrent.Flow$Subscriber)>(v1);
v3 = new io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker;
specialinvoke v3.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker: void <init>(io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor)>(v2);
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp: java.util.concurrent.Flow$Publisher other>;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp: java.util.concurrent.Flow$Publisher other>;
v6 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Flow$Subscriber onMultiSubscription(java.util.concurrent.Flow$Publisher,java.util.concurrent.Flow$Subscriber)>(v5, v3);
interfaceinvoke v4.<java.util.concurrent.Flow$Publisher: void subscribe(java.util.concurrent.Flow$Subscriber)>(v6);
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp: io.smallrye.mutiny.Multi upstream>;
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp: io.smallrye.mutiny.Multi upstream>;
v9 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Flow$Subscriber onMultiSubscription(java.util.concurrent.Flow$Publisher,java.util.concurrent.Flow$Subscriber)>(v8, v2);
interfaceinvoke v7.<io.smallrye.mutiny.Multi: void subscribe(java.util.concurrent.Flow$Subscriber)>(v9);
return;
}
}