final class io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final java.util.concurrent.Executor executor;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, java.util.concurrent.Executor)
{
io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor v0;
java.util.concurrent.Executor v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: java.util.concurrent.Executor;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v0.<io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor: java.util.concurrent.Executor executor> = v2;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
boolean v2;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor: boolean compareAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription,java.util.concurrent.Flow$Subscription)>(null, v1);
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
goto label2;
label1:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label2:
return;
}
void requestUpstream(long, java.util.concurrent.Flow$Subscription)
{
java.util.concurrent.RejectedExecutionException v5;
java.util.concurrent.Executor v3;
long v1;
io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor v0;
java.lang.Runnable v4;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.Flow$Subscription;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor: java.util.concurrent.Executor executor>;
v4 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor$lambda_requestUpstream_0__2665: java.lang.Runnable bootstrap$(java.util.concurrent.Flow$Subscription,long)>(v2, v1);
interfaceinvoke v3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(v4);
label2:
goto label4;
label3:
v5 := @caughtexception;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onFailure(java.lang.Throwable)>(v5);
label4:
return;
catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
}
void scheduleSubscription(io.smallrye.mutiny.Multi, java.util.concurrent.Flow$Subscriber)
{
java.util.concurrent.Flow$Subscriber v2;
java.util.concurrent.RejectedExecutionException v5;
java.util.concurrent.Executor v3;
io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor v0;
java.lang.Runnable v4;
io.smallrye.mutiny.Multi v1;
boolean v6;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.concurrent.Flow$Subscriber;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor: java.util.concurrent.Executor executor>;
v4 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor$lambda_scheduleSubscription_1__2666: java.lang.Runnable bootstrap$(io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor,io.smallrye.mutiny.Multi)>(v0, v1);
interfaceinvoke v3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(v4);
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor: boolean isDone()>();
if v6 != 0 goto label4;
interfaceinvoke v2.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v5);
label4:
return;
catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
}
public void onItem(java.lang.Object)
{
java.lang.Object v1;
io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v2.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v1);
return;
}
public void request(long)
{
byte v2;
long v1;
io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor v0;
java.util.concurrent.Flow$Subscription v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor: void requestUpstream(long,java.util.concurrent.Flow$Subscription)>(v1, v3);
label1:
return;
}
}