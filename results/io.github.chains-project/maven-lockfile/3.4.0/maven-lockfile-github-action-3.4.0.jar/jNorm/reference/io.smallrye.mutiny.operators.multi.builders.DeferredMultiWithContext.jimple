public class io.smallrye.mutiny.operators.multi.builders.DeferredMultiWithContext extends io.smallrye.mutiny.operators.AbstractMulti
{
private final java.util.function.Function mapper;
public void <init>(java.util.function.Function)
{
io.smallrye.mutiny.operators.multi.builders.DeferredMultiWithContext v0;
java.util.function.Function v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.DeferredMultiWithContext;
v1 := @parameter0: java.util.function.Function;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.builders.DeferredMultiWithContext: java.util.function.Function mapper> = v1;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.lang.Throwable v7;
io.smallrye.mutiny.operators.multi.builders.DeferredMultiWithContext v0;
io.smallrye.mutiny.Context v3;
java.util.function.Function v4;
java.lang.NullPointerException v6;
java.util.concurrent.Flow$Subscriber v8;
java.lang.Object v5;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.DeferredMultiWithContext;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = v1 instanceof io.smallrye.mutiny.subscription.ContextSupport;
if v2 == 0 goto label1;
v3 = interfaceinvoke v1.<io.smallrye.mutiny.subscription.ContextSupport: io.smallrye.mutiny.Context context()>();
goto label2;
label1:
v3 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
label2:
v4 = v0.<io.smallrye.mutiny.operators.multi.builders.DeferredMultiWithContext: java.util.function.Function mapper>;
v5 = interfaceinvoke v4.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v3);
if v5 != null goto label4;
v6 = new java.lang.NullPointerException;
specialinvoke v6.<java.lang.NullPointerException: void <init>(java.lang.String)>("The mapper returned `null`");
throw v6;
label3:
v7 := @caughtexception;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void fail(java.util.concurrent.Flow$Subscriber,java.lang.Throwable)>(v1, v7);
return;
label4:
v8 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Flow$Subscriber onMultiSubscription(java.util.concurrent.Flow$Publisher,java.util.concurrent.Flow$Subscriber)>(v5, v1);
interfaceinvoke v5.<io.smallrye.mutiny.Multi: void subscribe(java.util.concurrent.Flow$Subscriber)>(v8);
return;
catch java.lang.Throwable from label2 to label3 with label3;
}
}