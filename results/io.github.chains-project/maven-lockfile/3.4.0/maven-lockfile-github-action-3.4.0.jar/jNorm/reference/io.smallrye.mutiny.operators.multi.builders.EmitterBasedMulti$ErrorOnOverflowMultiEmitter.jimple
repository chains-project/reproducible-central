final class io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$ErrorOnOverflowMultiEmitter extends io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$NoOverflowBaseMultiEmitter
{
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$ErrorOnOverflowMultiEmitter v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$ErrorOnOverflowMultiEmitter;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$NoOverflowBaseMultiEmitter: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
return;
}
void onOverflow()
{
io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$ErrorOnOverflowMultiEmitter v0;
io.smallrye.mutiny.subscription.BackPressureFailure v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$ErrorOnOverflowMultiEmitter;
v1 = new io.smallrye.mutiny.subscription.BackPressureFailure;
specialinvoke v1.<io.smallrye.mutiny.subscription.BackPressureFailure: void <init>(java.lang.String)>("Could not emit value due to lack of requests");
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$ErrorOnOverflowMultiEmitter: void fail(java.lang.Throwable)>(v1);
return;
}
}