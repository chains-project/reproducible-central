public final class io.smallrye.mutiny.operators.multi.builders.NeverMulti extends io.smallrye.mutiny.operators.AbstractMulti
{
private static final java.util.concurrent.Flow$Publisher NEVER;
public static io.smallrye.mutiny.Multi never()
{
java.util.concurrent.Flow$Publisher v0;
v0 = <io.smallrye.mutiny.operators.multi.builders.NeverMulti: java.util.concurrent.Flow$Publisher NEVER>;
return v0;
}
private void <init>()
{
io.smallrye.mutiny.operators.multi.builders.NeverMulti v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.NeverMulti;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
io.smallrye.mutiny.operators.multi.builders.NeverMulti v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.NeverMulti;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v2);
return;
}
static void <clinit>()
{
io.smallrye.mutiny.operators.multi.builders.NeverMulti v0;
v0 = new io.smallrye.mutiny.operators.multi.builders.NeverMulti;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.NeverMulti: void <init>()>();
<io.smallrye.mutiny.operators.multi.builders.NeverMulti: java.util.concurrent.Flow$Publisher NEVER> = v0;
return;
}
}