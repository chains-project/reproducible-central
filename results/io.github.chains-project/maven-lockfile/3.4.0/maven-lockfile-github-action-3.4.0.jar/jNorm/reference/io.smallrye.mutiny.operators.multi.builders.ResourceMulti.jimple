public class io.smallrye.mutiny.operators.multi.builders.ResourceMulti extends io.smallrye.mutiny.operators.AbstractMulti
{
private final java.util.function.Supplier resourceSupplier;
private final java.util.function.Function streamSupplier;
private final java.util.function.Function onCompletion;
private final java.util.function.BiFunction onFailure;
private final java.util.function.Function onCancellation;
public void <init>(java.util.function.Supplier, java.util.function.Function, java.util.function.Function, java.util.function.BiFunction, java.util.function.Function)
{
java.util.function.BiFunction v4;
java.util.function.Function v2, v3, v5;
java.util.function.Supplier v1;
io.smallrye.mutiny.operators.multi.builders.ResourceMulti v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.ResourceMulti;
v1 := @parameter0: java.util.function.Supplier;
v2 := @parameter1: java.util.function.Function;
v3 := @parameter2: java.util.function.Function;
v4 := @parameter3: java.util.function.BiFunction;
v5 := @parameter4: java.util.function.Function;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.builders.ResourceMulti: java.util.function.Supplier resourceSupplier> = v1;
v0.<io.smallrye.mutiny.operators.multi.builders.ResourceMulti: java.util.function.Function streamSupplier> = v2;
v0.<io.smallrye.mutiny.operators.multi.builders.ResourceMulti: java.util.function.Function onCompletion> = v3;
v0.<io.smallrye.mutiny.operators.multi.builders.ResourceMulti: java.util.function.BiFunction onFailure> = v4;
v0.<io.smallrye.mutiny.operators.multi.builders.ResourceMulti: java.util.function.Function onCancellation> = v5;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.lang.Throwable v16, v5, v9;
java.util.function.BiFunction v10, v21;
java.util.function.Function v20, v22, v6;
java.util.function.Supplier v2;
java.lang.NullPointerException v12;
io.smallrye.mutiny.operators.multi.builders.ResourceMulti v0;
io.smallrye.mutiny.operators.multi.builders.ResourceMulti$ResourceSubscriber v19;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
java.lang.IllegalArgumentException v4, v8;
java.util.function.Consumer v14, v15;
io.smallrye.mutiny.CompositeException v17;
java.lang.Throwable[] v18;
io.smallrye.mutiny.groups.UniSubscribe v13;
java.lang.Object v11, v3, v7;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.ResourceMulti;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
label01:
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.ResourceMulti: java.util.function.Supplier resourceSupplier>;
v3 = interfaceinvoke v2.<java.util.function.Supplier: java.lang.Object get()>();
if v3 != null goto label03;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The supplier returned `null`");
throw v4;
label02:
v5 := @caughtexception;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void fail(java.util.concurrent.Flow$Subscriber,java.lang.Throwable)>(v1, v5);
return;
label03:
v6 = v0.<io.smallrye.mutiny.operators.multi.builders.ResourceMulti: java.util.function.Function streamSupplier>;
v7 = interfaceinvoke v6.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v3);
if v7 != null goto label10;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The supplier returned `null`");
throw v8;
label04:
v9 := @caughtexception;
label05:
v10 = v0.<io.smallrye.mutiny.operators.multi.builders.ResourceMulti: java.util.function.BiFunction onFailure>;
v11 = interfaceinvoke v10.<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>(v3, v9);
if v11 != null goto label06;
v12 = new java.lang.NullPointerException;
specialinvoke v12.<java.lang.NullPointerException: void <init>(java.lang.String)>("Unable to call the finalizer - it returned `null`");
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void fail(java.util.concurrent.Flow$Subscriber,java.lang.Throwable)>(v1, v12);
goto label09;
label06:
v13 = interfaceinvoke v11.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v14 = staticinvoke <io.smallrye.mutiny.operators.multi.builders.ResourceMulti$lambda_subscribe_0__2690: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.subscription.MultiSubscriber,java.lang.Throwable)>(v1, v9);
v15 = staticinvoke <io.smallrye.mutiny.operators.multi.builders.ResourceMulti$lambda_subscribe_1__2691: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.subscription.MultiSubscriber,java.lang.Throwable)>(v1, v9);
virtualinvoke v13.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer,java.util.function.Consumer)>(v14, v15);
label07:
goto label09;
label08:
v16 := @caughtexception;
v17 = new io.smallrye.mutiny.CompositeException;
v18 = newarray (java.lang.Throwable)[2];
v18[0] = v9;
v18[1] = v16;
specialinvoke v17.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v18);
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void fail(java.util.concurrent.Flow$Subscriber,java.lang.Throwable)>(v1, v17);
return;
label09:
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void fail(java.util.concurrent.Flow$Subscriber,java.lang.Throwable)>(v1, v9);
return;
label10:
v19 = new io.smallrye.mutiny.operators.multi.builders.ResourceMulti$ResourceSubscriber;
v20 = v0.<io.smallrye.mutiny.operators.multi.builders.ResourceMulti: java.util.function.Function onCompletion>;
v21 = v0.<io.smallrye.mutiny.operators.multi.builders.ResourceMulti: java.util.function.BiFunction onFailure>;
v22 = v0.<io.smallrye.mutiny.operators.multi.builders.ResourceMulti: java.util.function.Function onCancellation>;
specialinvoke v19.<io.smallrye.mutiny.operators.multi.builders.ResourceMulti$ResourceSubscriber: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,java.lang.Object,java.util.function.Function,java.util.function.BiFunction,java.util.function.Function)>(v1, v3, v20, v21, v22);
interfaceinvoke v7.<java.util.concurrent.Flow$Publisher: void subscribe(java.util.concurrent.Flow$Subscriber)>(v19);
return;
catch java.lang.Throwable from label01 to label02 with label02;
catch java.lang.Throwable from label03 to label04 with label04;
catch java.lang.Throwable from label05 to label07 with label08;
}
}