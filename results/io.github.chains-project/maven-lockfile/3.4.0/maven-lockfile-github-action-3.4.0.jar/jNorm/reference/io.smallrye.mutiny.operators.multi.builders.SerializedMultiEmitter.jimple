public class io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter extends java.lang.Object implements io.smallrye.mutiny.subscription.MultiEmitter, io.smallrye.mutiny.subscription.MultiSubscriber, io.smallrye.mutiny.subscription.ContextSupport
{
private final java.util.concurrent.atomic.AtomicInteger wip;
private final io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter downstream;
private final java.util.concurrent.atomic.AtomicReference failure;
private final java.util.Queue queue;
private volatile boolean done;
void <init>(io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter)
{
io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter v0;
java.util.concurrent.atomic.AtomicInteger v2;
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v1;
java.util.Queue v4;
java.util.concurrent.atomic.AtomicReference v3;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v2.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: java.util.concurrent.atomic.AtomicInteger wip> = v2;
v3 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: java.util.concurrent.atomic.AtomicReference failure> = v3;
v4 = staticinvoke <io.smallrye.mutiny.helpers.queues.Queues: java.util.Queue createMpscQueue()>();
v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: java.util.Queue queue> = v4;
v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter downstream> = v1;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter v0;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter v0;
java.lang.Throwable v12;
java.lang.NullPointerException v5;
java.util.concurrent.atomic.AtomicInteger v13, v6, v9;
int v10, v14;
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v2, v8;
java.lang.Object v1;
java.util.Queue v11;
boolean v3, v4, v7;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter downstream>;
v3 = virtualinvoke v2.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: boolean isCancelled()>();
if v3 != 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: boolean done>;
if v4 == 0 goto label2;
label1:
return;
label2:
if v1 != null goto label3;
v5 = new java.lang.NullPointerException;
specialinvoke v5.<java.lang.NullPointerException: void <init>(java.lang.String)>("`onItem` called with `null`");
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: void onFailure(java.lang.Throwable)>(v5);
return;
label3:
v6 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: java.util.concurrent.atomic.AtomicInteger wip>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(0, 1);
if v7 == 0 goto label4;
v8 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter downstream>;
virtualinvoke v8.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: io.smallrye.mutiny.subscription.MultiEmitter emit(java.lang.Object)>(v1);
v9 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: java.util.concurrent.atomic.AtomicInteger wip>;
v10 = virtualinvoke v9.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
if v10 != 0 goto label9;
return;
label4:
v11 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: java.util.Queue queue>;
entermonitor v11;
label5:
interfaceinvoke v11.<java.util.Queue: boolean offer(java.lang.Object)>(v1);
exitmonitor v11;
label6:
goto label8;
label7:
v12 := @caughtexception;
exitmonitor v11;
throw v12;
label8:
v13 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: java.util.concurrent.atomic.AtomicInteger wip>;
v14 = virtualinvoke v13.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v14 == 0 goto label9;
return;
label9:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: void drainLoop()>();
return;
catch java.lang.Throwable from label5 to label6 with label7;
}
public void onFailure(java.lang.Throwable)
{
io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter v0;
java.lang.Throwable v1;
java.util.concurrent.atomic.AtomicReference v6;
java.lang.NullPointerException v5;
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v2;
boolean v3, v4, v7;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter downstream>;
v3 = virtualinvoke v2.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: boolean isCancelled()>();
if v3 != 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: boolean done>;
if v4 == 0 goto label2;
label1:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
return;
label2:
if v1 != null goto label3;
v5 = new java.lang.NullPointerException;
specialinvoke v5.<java.lang.NullPointerException: void <init>(java.lang.String)>("failure cannot be `null`");
v1 = v5;
label3:
v6 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: java.util.concurrent.atomic.AtomicReference failure>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
if v7 == 0 goto label4;
v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: boolean done> = 1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: void drain()>();
label4:
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter v0;
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v1;
boolean v2, v3;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter;
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter downstream>;
v2 = virtualinvoke v1.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: boolean isCancelled()>();
if v2 != 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: boolean done>;
if v3 == 0 goto label2;
label1:
return;
label2:
v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: boolean done> = 1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: void drain()>();
return;
}
void drain()
{
int v2;
io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter v0;
java.util.concurrent.atomic.AtomicInteger v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter;
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 != 0 goto label1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: void drainLoop()>();
label1:
return;
}
void drainLoop()
{
java.lang.Throwable v8;
java.util.concurrent.atomic.AtomicReference v5, v7;
java.util.concurrent.atomic.AtomicInteger v14;
int v15, v3;
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v1;
boolean v10, v12, v13, v4;
io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter v0;
java.lang.Object v11, v6, v9;
java.util.Queue v2;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter;
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter downstream>;
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: java.util.Queue queue>;
v3 = 1;
label1:
v4 = virtualinvoke v1.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: boolean isCancelled()>();
if v4 == 0 goto label2;
interfaceinvoke v2.<java.util.Queue: void clear()>();
return;
label2:
v5 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: java.util.concurrent.atomic.AtomicReference failure>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v6 == null goto label3;
interfaceinvoke v2.<java.util.Queue: void clear()>();
v7 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: java.util.concurrent.atomic.AtomicReference failure>;
v8 = <io.smallrye.mutiny.helpers.Subscriptions: java.lang.Throwable TERMINATED>;
v9 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v8);
virtualinvoke v1.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void fail(java.lang.Throwable)>(v9);
return;
label3:
v10 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: boolean done>;
v11 = interfaceinvoke v2.<java.util.Queue: java.lang.Object poll()>();
if v11 != null goto label4;
v12 = 1;
goto label5;
label4:
v12 = 0;
label5:
v13 = v12;
if v10 == 0 goto label6;
if v12 == 0 goto label6;
virtualinvoke v1.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void complete()>();
return;
label6:
if v13 != 0 goto label7;
virtualinvoke v1.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: io.smallrye.mutiny.subscription.MultiEmitter emit(java.lang.Object)>(v11);
goto label1;
label7:
v14 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: java.util.concurrent.atomic.AtomicInteger wip>;
v15 = neg v3;
v3 = virtualinvoke v14.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v15);
if v3 != 0 goto label1;
return;
}
public io.smallrye.mutiny.subscription.MultiEmitter emit(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter v0;
java.lang.Object v1;
java.lang.NullPointerException v2;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter;
v1 := @parameter0: java.lang.Object;
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>("`emit` called with `null`.");
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: void fail(java.lang.Throwable)>(v2);
label1:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: void onItem(java.lang.Object)>(v1);
return v0;
}
public void fail(java.lang.Throwable)
{
io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter v0;
java.lang.Throwable v1;
java.lang.NullPointerException v2;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter;
v1 := @parameter0: java.lang.Throwable;
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>("`fail` called with `null`.");
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: void fail(java.lang.Throwable)>(v2);
label1:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: void onFailure(java.lang.Throwable)>(v1);
return;
}
public void complete()
{
io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: void onCompletion()>();
return;
}
public io.smallrye.mutiny.subscription.MultiEmitter onTermination(java.lang.Runnable)
{
io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter v0;
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v2;
java.lang.Runnable v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter;
v1 := @parameter0: java.lang.Runnable;
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter downstream>;
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: io.smallrye.mutiny.subscription.MultiEmitter onTermination(java.lang.Runnable)>(v1);
return v0;
}
public boolean isCancelled()
{
io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter v0;
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v1;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter;
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter downstream>;
v2 = virtualinvoke v1.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: boolean isCancelled()>();
return v2;
}
public long requested()
{
io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter v0;
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v1;
long v2;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter;
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter downstream>;
v2 = virtualinvoke v1.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: long requested()>();
return v2;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter v0;
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v1, v3;
io.smallrye.mutiny.Context v4, v5;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter;
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter downstream>;
v2 = v1 instanceof io.smallrye.mutiny.subscription.ContextSupport;
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter downstream>;
v4 = interfaceinvoke v3.<io.smallrye.mutiny.subscription.ContextSupport: io.smallrye.mutiny.Context context()>();
return v4;
label1:
v5 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
return v5;
}
}