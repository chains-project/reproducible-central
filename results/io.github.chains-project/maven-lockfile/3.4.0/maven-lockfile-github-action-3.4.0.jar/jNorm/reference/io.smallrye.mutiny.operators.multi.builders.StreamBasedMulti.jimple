public class io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti extends io.smallrye.mutiny.operators.AbstractMulti
{
private final java.util.function.Supplier supplier;
public void <init>(java.util.function.Supplier)
{
io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti v0;
java.util.function.Supplier v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti;
v1 := @parameter0: java.util.function.Supplier;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti: java.util.function.Supplier supplier> = v1;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.lang.Throwable v4, v8;
java.util.Iterator v6;
io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription v9;
java.util.function.Supplier v2;
java.lang.NullPointerException v5;
java.lang.Object v3;
io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
boolean v7;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNullNpe(java.lang.Object,java.lang.String)>(v1, "subscriber");
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti: java.util.function.Supplier supplier>;
v3 = interfaceinvoke v2.<java.util.function.Supplier: java.lang.Object get()>();
label2:
goto label4;
label3:
v4 := @caughtexception;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void fail(java.util.concurrent.Flow$Subscriber,java.lang.Throwable)>(v1, v4);
return;
label4:
if v3 != null goto label5;
v5 = new java.lang.NullPointerException;
specialinvoke v5.<java.lang.NullPointerException: void <init>(java.lang.String)>("The supplier returned `null`");
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void fail(java.util.concurrent.Flow$Subscriber,java.lang.Throwable)>(v1, v5);
return;
label5:
v6 = interfaceinvoke v3.<java.util.stream.Stream: java.util.Iterator iterator()>();
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 != 0 goto label8;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void complete(java.util.concurrent.Flow$Subscriber)>(v1);
staticinvoke <io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti: void closeQuietly(java.lang.AutoCloseable)>(v3);
label6:
return;
label7:
v8 := @caughtexception;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void fail(java.util.concurrent.Flow$Subscriber,java.lang.Throwable)>(v1, v8);
staticinvoke <io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti: void closeQuietly(java.lang.AutoCloseable)>(v3);
return;
label8:
v9 = new io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription;
specialinvoke v9.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,java.util.Iterator,java.lang.AutoCloseable)>(v1, v6, v3);
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v9);
return;
catch java.lang.Throwable from label1 to label2 with label3;
catch java.lang.Throwable from label5 to label6 with label7;
}
private static void closeQuietly(java.lang.AutoCloseable)
{
java.lang.AutoCloseable v0;
v0 := @parameter0: java.lang.AutoCloseable;
if v0 != null goto label1;
return;
label1:
return;
}
}