public abstract class io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti extends io.smallrye.mutiny.operators.AbstractMulti
{
protected final io.smallrye.mutiny.Multi upstream;
protected void <init>(io.smallrye.mutiny.Multi)
{
io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti;
v1 := @parameter0: io.smallrye.mutiny.Multi;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti: io.smallrye.mutiny.Multi upstream> = v1;
return;
}
protected abstract void connect(io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection);
public io.smallrye.mutiny.Multi referenceCount()
{
io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount v1;
io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti v0;
io.smallrye.mutiny.Multi v2;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti;
v1 = new io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount;
specialinvoke v1.<io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount: void <init>(io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v1);
return v2;
}
public io.smallrye.mutiny.Multi referenceCount(int, java.time.Duration)
{
io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount v3;
io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti v0;
java.time.Duration v2;
int v1;
io.smallrye.mutiny.Multi v4;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti;
v1 := @parameter0: int;
v2 := @parameter1: java.time.Duration;
if v2 == null goto label1;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.time.Duration validate(java.time.Duration,java.lang.String)>(v2, "duration");
label1:
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v1, "count");
v3 = new io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount;
specialinvoke v3.<io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount: void <init>(io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti,int,java.time.Duration)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v3);
return v4;
}
public io.smallrye.mutiny.Multi connectAfter(int)
{
io.smallrye.mutiny.operators.multi.multicast.MultiConnectAfter v2;
io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti v0;
int v1;
io.smallrye.mutiny.Multi v3;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti;
v1 := @parameter0: int;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v1, "numberOfSubscribers");
v2 = new io.smallrye.mutiny.operators.multi.multicast.MultiConnectAfter;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.multicast.MultiConnectAfter: void <init>(io.smallrye.mutiny.operators.multi.multicast.ConnectableMulti,int,io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection)>(v0, v1, null);
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v2);
return v3;
}
}