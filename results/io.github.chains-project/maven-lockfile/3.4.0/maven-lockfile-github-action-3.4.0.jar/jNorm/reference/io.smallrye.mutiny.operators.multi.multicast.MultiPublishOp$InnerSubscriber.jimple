final class io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber extends java.lang.Object implements java.util.concurrent.Flow$Subscription
{
private final java.util.concurrent.atomic.AtomicLong requested;
private final java.util.concurrent.Flow$Subscriber downstream;
private final java.util.concurrent.atomic.AtomicReference parent;
long emitted;
void <init>(java.util.concurrent.Flow$Subscriber)
{
java.util.concurrent.Flow$Subscriber v1;
java.util.concurrent.atomic.AtomicLong v2;
java.util.concurrent.atomic.AtomicReference v3;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber v0;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v2.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber: java.util.concurrent.atomic.AtomicLong requested> = v2;
v3 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber: java.util.concurrent.atomic.AtomicReference parent> = v3;
v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber: java.util.concurrent.Flow$Subscriber downstream> = v1;
return;
}
public void request(long)
{
long v1, v4;
java.util.concurrent.atomic.AtomicReference v8;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber v0;
java.util.concurrent.atomic.AtomicLong v3, v7;
byte v2, v5, v6;
java.lang.Object v9;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label2;
v3 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicLong: long get()>();
v5 = v4 cmp -9223372036854775808L;
if v5 == 0 goto label1;
v6 = v4 cmp 9223372036854775807L;
if v6 == 0 goto label1;
v7 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v7, v1);
label1:
v8 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber: java.util.concurrent.atomic.AtomicReference parent>;
v9 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v9 == null goto label2;
virtualinvoke v9.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: void drain()>();
label2:
return;
}
public void cancel()
{
long v2, v5;
java.util.concurrent.atomic.AtomicReference v7;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber v0;
java.util.concurrent.atomic.AtomicLong v1, v4;
byte v3, v6;
java.lang.Object v8;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
v3 = v2 cmp -9223372036854775808L;
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(-9223372036854775808L);
v6 = v5 cmp -9223372036854775808L;
if v6 == 0 goto label1;
v7 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber: java.util.concurrent.atomic.AtomicReference parent>;
v8 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v8 == null goto label1;
virtualinvoke v8.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: void remove(io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber)>(v0);
virtualinvoke v8.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: void drain()>();
label1:
return;
}
}