class io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final java.util.concurrent.atomic.AtomicLong requested;
final io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp this$0;
void <init>(io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp, io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.util.concurrent.atomic.AtomicLong v3;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp v1;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp;
v2 := @parameter1: io.smallrye.mutiny.subscription.MultiSubscriber;
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp this$0> = v1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v2);
v3 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor: java.util.concurrent.atomic.AtomicLong requested> = v3;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
boolean v2;
java.util.concurrent.Flow$Subscription v1, v4;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor: boolean compareAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription,java.util.concurrent.Flow$Subscription)>(null, v1);
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
v4 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
interfaceinvoke v4.<java.util.concurrent.Flow$Subscription: void request(long)>(9223372036854775807L);
goto label2;
label1:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label2:
return;
}
public void onItem(java.lang.Object)
{
long v4;
java.util.function.Function v11;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp v10, v8;
java.util.function.Consumer v9;
java.util.concurrent.atomic.AtomicLong v3, v7;
byte v5;
java.lang.Object v1;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v6;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor: boolean isDone()>();
if v2 == 0 goto label1;
return;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor: java.util.concurrent.atomic.AtomicLong requested>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicLong: long get()>();
v5 = v4 cmp 0L;
if v5 == 0 goto label2;
v6 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v6.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v1);
v7 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long subtract(java.util.concurrent.atomic.AtomicLong,long)>(v7, 1L);
goto label4;
label2:
v8 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp this$0>;
v9 = v8.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp: java.util.function.Consumer dropConsumer>;
if v9 == null goto label3;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor: void notifyOnOverflowInvoke(java.lang.Object)>(v1);
goto label4;
label3:
v10 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp this$0>;
v11 = v10.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp: java.util.function.Function dropUniMapper>;
if v11 == null goto label4;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor: void notifyOnOverflowCall(java.lang.Object)>(v1);
label4:
return;
}
private void notifyOnOverflowInvoke(java.lang.Object)
{
java.lang.Throwable v4;
java.util.function.Consumer v3;
java.lang.Object v1;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor v0;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp v2;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor;
v1 := @parameter0: java.lang.Object;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp this$0>;
v3 = v2.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp: java.util.function.Consumer dropConsumer>;
interfaceinvoke v3.<java.util.function.Consumer: void accept(java.lang.Object)>(v1);
label2:
goto label4;
label3:
v4 := @caughtexception;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onFailure(java.lang.Throwable)>(v4);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void notifyOnOverflowCall(java.lang.Object)
{
java.lang.Throwable v9;
java.util.function.Function v3;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp v2;
java.util.function.Consumer v7, v8;
io.smallrye.mutiny.groups.UniSubscribe v6;
java.lang.Object v1, v4, v5;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor;
v1 := @parameter0: java.lang.Object;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp this$0>;
v3 = v2.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp: java.util.function.Function dropUniMapper>;
v4 = interfaceinvoke v3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v1);
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v4, "uni");
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v7 = staticinvoke <io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor$lambda_notifyOnOverflowCall_0__2697: java.util.function.Consumer bootstrap$()>();
v8 = staticinvoke <io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor$lambda_notifyOnOverflowCall_1__2698: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor)>(v0);
virtualinvoke v6.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer,java.util.function.Consumer)>(v7, v8);
label2:
goto label4;
label3:
v9 := @caughtexception;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onFailure(java.lang.Throwable)>(v9);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void request(long)
{
java.util.concurrent.atomic.AtomicLong v3;
byte v2;
long v1;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp$MultiOnOverflowDropItemsProcessor: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v3, v1);
label1:
return;
}
}