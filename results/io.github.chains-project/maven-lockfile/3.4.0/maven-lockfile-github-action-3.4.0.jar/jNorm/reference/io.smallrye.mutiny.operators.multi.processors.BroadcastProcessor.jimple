public class io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor extends io.smallrye.mutiny.operators.AbstractMulti implements java.util.concurrent.Flow$Processor
{
static final java.util.List TERMINATED;
final java.util.concurrent.atomic.AtomicReference subscribers;
java.lang.Throwable failure;
public static io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor create()
{
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor v0;
v0 = new io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: void <init>()>();
return v0;
}
private void <init>()
{
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor v0;
java.util.concurrent.atomic.AtomicReference v1;
java.util.concurrent.CopyOnWriteArrayList v2;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
v1 = new java.util.concurrent.atomic.AtomicReference;
v2 = new java.util.concurrent.CopyOnWriteArrayList;
specialinvoke v2.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();
specialinvoke v1.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(v2);
v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.util.concurrent.atomic.AtomicReference subscribers> = v1;
return;
}
public io.smallrye.mutiny.operators.multi.processors.SerializedProcessor serialized()
{
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor v0;
io.smallrye.mutiny.operators.multi.processors.SerializedProcessor v1;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor;
v1 = new io.smallrye.mutiny.operators.multi.processors.SerializedProcessor;
specialinvoke v1.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: void <init>(java.util.concurrent.Flow$Processor)>(v0);
return v1;
}
private boolean addSubscription(io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription)
{
java.util.List v4;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor v0;
java.lang.Object v3;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription v1;
java.util.concurrent.atomic.AtomicReference v2;
boolean v5;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription;
v2 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.util.concurrent.atomic.AtomicReference subscribers>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v4 = <io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.util.List TERMINATED>;
if v3 != v4 goto label1;
return 0;
label1:
v5 = interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v1);
return v5;
}
void remove(io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription)
{
java.util.List v4;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor v0;
java.lang.Object v3;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription v1;
java.util.concurrent.atomic.AtomicReference v2;
boolean v5;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription;
v2 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.util.concurrent.atomic.AtomicReference subscribers>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v4 = <io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.util.List TERMINATED>;
if v3 == v4 goto label1;
v5 = interfaceinvoke v3.<java.util.List: boolean isEmpty()>();
if v5 == 0 goto label2;
label1:
return;
label2:
interfaceinvoke v3.<java.util.List: boolean remove(java.lang.Object)>(v1);
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.lang.Throwable v5;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor v0;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
boolean v3, v4;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = new io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: void <init>(java.util.concurrent.Flow$Subscriber,io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor)>(v1, v0);
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v2);
v3 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: boolean addSubscription(io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription)>(v2);
if v3 == 0 goto label1;
v4 = virtualinvoke v2.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: boolean isCancelled()>();
if v4 == 0 goto label3;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: void remove(io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription)>(v2);
goto label3;
label1:
v5 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.lang.Throwable failure>;
if v5 == null goto label2;
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v5);
goto label3;
label2:
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
label3:
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
java.util.List v4;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor v0;
java.lang.Object v3;
java.util.concurrent.atomic.AtomicReference v2;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.util.concurrent.atomic.AtomicReference subscribers>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v4 = <io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.util.List TERMINATED>;
if v3 != v4 goto label1;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
return;
label1:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(9223372036854775807L);
return;
}
public void onNext(java.lang.Object)
{
java.util.Iterator v4;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor v0;
java.lang.Object v1, v3, v6;
java.util.concurrent.atomic.AtomicReference v2;
boolean v5;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor;
v1 := @parameter0: java.lang.Object;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNullNpe(java.lang.Object,java.lang.String)>(v1, "item");
v2 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.util.concurrent.atomic.AtomicReference subscribers>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v6.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: void onNext(java.lang.Object)>(v1);
goto label1;
label2:
return;
}
public void onError(java.lang.Throwable)
{
java.lang.Throwable v1;
java.util.Iterator v8;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor v0;
java.util.concurrent.atomic.AtomicReference v2, v5;
java.util.List v4, v6;
java.lang.Object v10, v3, v7;
boolean v9;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor;
v1 := @parameter0: java.lang.Throwable;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNullNpe(java.lang.Object,java.lang.String)>(v1, "failure");
v2 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.util.concurrent.atomic.AtomicReference subscribers>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v4 = <io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.util.List TERMINATED>;
if v3 != v4 goto label1;
return;
label1:
v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.lang.Throwable failure> = v1;
v5 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.util.concurrent.atomic.AtomicReference subscribers>;
v6 = <io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.util.List TERMINATED>;
v7 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v6);
v8 = interfaceinvoke v7.<java.util.List: java.util.Iterator iterator()>();
label2:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label3;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v10.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: void onError(java.lang.Throwable)>(v1);
goto label2;
label3:
return;
}
public void onComplete()
{
java.util.Iterator v7;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor v0;
java.util.concurrent.atomic.AtomicReference v1, v4;
java.util.List v3, v5;
java.lang.Object v2, v6, v9;
boolean v8;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.util.concurrent.atomic.AtomicReference subscribers>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v3 = <io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.util.List TERMINATED>;
if v2 != v3 goto label1;
return;
label1:
v4 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.util.concurrent.atomic.AtomicReference subscribers>;
v5 = <io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.util.List TERMINATED>;
v6 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v5);
v7 = interfaceinvoke v6.<java.util.List: java.util.Iterator iterator()>();
label2:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label3;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v9.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: void onComplete()>();
goto label2;
label3:
return;
}
static void <clinit>()
{
java.util.ArrayList v0;
v0 = new java.util.ArrayList;
specialinvoke v0.<java.util.ArrayList: void <init>(int)>(0);
<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: java.util.List TERMINATED> = v0;
return;
}
}