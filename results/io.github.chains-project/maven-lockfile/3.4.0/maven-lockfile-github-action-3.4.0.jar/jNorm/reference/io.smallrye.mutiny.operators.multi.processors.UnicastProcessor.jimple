public class io.smallrye.mutiny.operators.multi.processors.UnicastProcessor extends io.smallrye.mutiny.operators.AbstractMulti implements java.util.concurrent.Flow$Processor, java.util.concurrent.Flow$Subscription
{
private final java.lang.Runnable onTermination;
private final java.util.Queue queue;
private volatile boolean done;
private volatile java.lang.Throwable failure;
private volatile boolean cancelled;
private volatile java.util.concurrent.Flow$Subscriber downstream;
private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater DOWNSTREAM_UPDATER;
private final java.util.concurrent.atomic.AtomicInteger wip;
private final java.util.concurrent.atomic.AtomicLong requested;
private volatile boolean hasUpstream;
public static io.smallrye.mutiny.operators.multi.processors.UnicastProcessor create()
{
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v0;
int v1;
java.lang.Object v3;
java.util.function.Supplier v2;
v0 = new io.smallrye.mutiny.operators.multi.processors.UnicastProcessor;
v1 = <io.smallrye.mutiny.helpers.queues.Queues: int BUFFER_S>;
v2 = staticinvoke <io.smallrye.mutiny.helpers.queues.Queues: java.util.function.Supplier unbounded(int)>(v1);
v3 = interfaceinvoke v2.<java.util.function.Supplier: java.lang.Object get()>();
specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void <init>(java.util.Queue,java.lang.Runnable)>(v3, null);
return v0;
}
public static io.smallrye.mutiny.operators.multi.processors.UnicastProcessor create(java.util.Queue, java.lang.Runnable)
{
java.util.Queue v0;
java.lang.Runnable v1;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v2;
v0 := @parameter0: java.util.Queue;
v1 := @parameter1: java.lang.Runnable;
v2 = new io.smallrye.mutiny.operators.multi.processors.UnicastProcessor;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void <init>(java.util.Queue,java.lang.Runnable)>(v0, v1);
return v2;
}
private void <init>(java.util.Queue, java.lang.Runnable)
{
java.util.concurrent.atomic.AtomicLong v4;
java.util.concurrent.atomic.AtomicInteger v3;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v0;
java.lang.Object v5;
java.util.Queue v1;
java.lang.Runnable v2;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor;
v1 := @parameter0: java.util.Queue;
v2 := @parameter1: java.lang.Runnable;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean done> = 0;
v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.lang.Throwable failure> = null;
v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean cancelled> = 0;
v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.concurrent.Flow$Subscriber downstream> = null;
v3 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.concurrent.atomic.AtomicInteger wip> = v3;
v4 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v4.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.concurrent.atomic.AtomicLong requested> = v4;
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "queue");
v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.Queue queue> = v5;
v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.lang.Runnable onTermination> = v2;
return;
}
private void onTerminate()
{
java.lang.Runnable v1, v2;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.lang.Runnable onTermination>;
if v1 == null goto label1;
v2 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.lang.Runnable onTermination>;
interfaceinvoke v2.<java.lang.Runnable: void run()>();
label1:
return;
}
void drainWithDownstream(java.util.concurrent.Flow$Subscriber)
{
long v19, v5, v6;
byte v12, v16, v17, v7;
java.util.concurrent.atomic.AtomicInteger v20;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v0;
int v2, v21;
boolean v10, v11, v13, v14, v15, v9;
java.util.concurrent.Flow$Subscriber v1;
java.util.concurrent.atomic.AtomicLong v18, v4;
java.lang.Object v8;
java.util.Queue v3;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
v2 = 1;
v3 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.Queue queue>;
label1:
v4 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.concurrent.atomic.AtomicLong requested>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLong: long get()>();
v6 = 0L;
label2:
v7 = v5 cmp v6;
if v7 == 0 goto label6;
v8 = interfaceinvoke v3.<java.util.Queue: java.lang.Object poll()>();
if v8 != null goto label3;
v9 = 1;
goto label4;
label3:
v9 = 0;
label4:
v10 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean done>;
v11 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean isCancelledOrDone(boolean,boolean)>(v10, v9);
if v11 == 0 goto label5;
return;
label5:
if v9 != 0 goto label6;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscriber: void onNext(java.lang.Object)>(v8);
v6 = v6 + 1L;
goto label2;
label6:
v12 = v5 cmp v6;
if v12 != 0 goto label7;
v13 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean done>;
v14 = interfaceinvoke v3.<java.util.Queue: boolean isEmpty()>();
v15 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean isCancelledOrDone(boolean,boolean)>(v13, v14);
if v15 == 0 goto label7;
return;
label7:
v16 = v6 cmp 0L;
if v16 == 0 goto label8;
v17 = v5 cmp 9223372036854775807L;
if v17 == 0 goto label8;
v18 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.concurrent.atomic.AtomicLong requested>;
v19 = neg v6;
virtualinvoke v18.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v19);
label8:
v20 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v21 = neg v2;
v2 = virtualinvoke v20.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v21);
if v2 != 0 goto label1;
return;
}
private void drain()
{
java.util.concurrent.Flow$Subscriber v4;
java.util.concurrent.atomic.AtomicInteger v1, v5;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v0;
int v2, v3, v6;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 == 0 goto label1;
return;
label1:
v3 = 1;
label2:
v4 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.concurrent.Flow$Subscriber downstream>;
if v4 == null goto label3;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void drainWithDownstream(java.util.concurrent.Flow$Subscriber)>(v4);
return;
label3:
v5 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v6 = neg v3;
v3 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v6);
if v3 != 0 goto label2;
return;
}
private boolean isCancelledOrDone(boolean, boolean)
{
java.lang.Throwable v6;
java.util.concurrent.Flow$Subscriber v3;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v0;
java.util.Queue v5;
boolean v1, v2, v4;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor;
v1 := @parameter0: boolean;
v2 := @parameter1: boolean;
v3 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.concurrent.Flow$Subscriber downstream>;
v4 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean cancelled>;
if v4 == 0 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.Queue queue>;
interfaceinvoke v5.<java.util.Queue: void clear()>();
return 1;
label1:
if v1 == 0 goto label4;
if v2 == 0 goto label4;
v6 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.lang.Throwable failure>;
if v6 == null goto label2;
interfaceinvoke v3.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v6);
goto label3;
label2:
interfaceinvoke v3.<java.util.concurrent.Flow$Subscriber: void onComplete()>();
label3:
return 1;
label4:
return 0;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v0;
boolean v2, v3;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean hasUpstream>;
if v2 == 0 goto label1;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
return;
label1:
v3 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean isDoneOrCancelled()>();
if v3 == 0 goto label2;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
goto label3;
label2:
v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean hasUpstream> = 1;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(9223372036854775807L);
label3:
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.lang.IllegalStateException v5;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
boolean v3, v4;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "downstream");
v2 = <io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.concurrent.atomic.AtomicReferenceFieldUpdater DOWNSTREAM_UPDATER>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, null, v1);
if v3 == 0 goto label1;
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
v4 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean cancelled>;
if v4 != 0 goto label2;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void drain()>();
goto label2;
label1:
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already subscribed");
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void fail(java.util.concurrent.Flow$Subscriber,java.lang.Throwable)>(v1, v5);
label2:
return;
}
public synchronized void onNext(java.lang.Object)
{
io.smallrye.mutiny.subscription.BackPressureFailure v5;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v0;
java.lang.Object v1;
java.util.Queue v3;
boolean v2, v4;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor;
v1 := @parameter0: java.lang.Object;
v2 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean isDoneOrCancelled()>();
if v2 == 0 goto label1;
return;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.Queue queue>;
v4 = interfaceinvoke v3.<java.util.Queue: boolean offer(java.lang.Object)>(v1);
if v4 != 0 goto label2;
v5 = new io.smallrye.mutiny.subscription.BackPressureFailure;
specialinvoke v5.<io.smallrye.mutiny.subscription.BackPressureFailure: void <init>(java.lang.String)>("the queue is full");
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onError(java.lang.Throwable)>(v5);
return;
label2:
specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void drain()>();
return;
}
private boolean isDoneOrCancelled()
{
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v0;
boolean v1, v2, v3;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean done>;
if v1 != 0 goto label1;
v2 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean cancelled>;
if v2 == 0 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
public void onError(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v0;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor;
v1 := @parameter0: java.lang.Throwable;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean isDoneOrCancelled()>();
if v2 == 0 goto label1;
return;
label1:
specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onTerminate()>();
v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.lang.Throwable failure> = v1;
v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean done> = 1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void drain()>();
return;
}
public void onComplete()
{
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v0;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor;
v1 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean isDoneOrCancelled()>();
if v1 == 0 goto label1;
return;
label1:
specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onTerminate()>();
v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean done> = 1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void drain()>();
return;
}
public void request(long)
{
java.util.concurrent.atomic.AtomicLong v3;
byte v2;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v0;
long v1;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v3, v1);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void drain()>();
label1:
return;
}
public void cancel()
{
java.util.concurrent.atomic.AtomicInteger v4;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v2;
int v5;
java.lang.Object v3;
java.util.Queue v6;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean cancelled>;
if v1 == 0 goto label1;
return;
label1:
v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: boolean cancelled> = 1;
v2 = <io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.concurrent.atomic.AtomicReferenceFieldUpdater DOWNSTREAM_UPDATER>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(v0, null);
if v3 == null goto label2;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onTerminate()>();
v4 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v5 != 0 goto label2;
v6 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.Queue queue>;
interfaceinvoke v6.<java.util.Queue: void clear()>();
label2:
return;
}
public boolean hasSubscriber()
{
java.util.concurrent.Flow$Subscriber v1;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v0;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.concurrent.Flow$Subscriber downstream>;
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public io.smallrye.mutiny.operators.multi.processors.SerializedProcessor serialized()
{
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v0;
io.smallrye.mutiny.operators.multi.processors.SerializedProcessor v1;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor;
v1 = new io.smallrye.mutiny.operators.multi.processors.SerializedProcessor;
specialinvoke v1.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: void <init>(java.util.concurrent.Flow$Processor)>(v0);
return v1;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v0;
v0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lio/smallrye/mutiny/operators/multi/processors/UnicastProcessor;", class "Ljava/util/concurrent/Flow$Subscriber;", "downstream");
<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: java.util.concurrent.atomic.AtomicReferenceFieldUpdater DOWNSTREAM_UPDATER> = v0;
return;
}
}