class io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber extends java.lang.Object implements io.smallrye.mutiny.subscription.MultiSubscriber, io.smallrye.mutiny.subscription.ContextSupport
{
private final io.smallrye.mutiny.subscription.MultiSubscriber initialSubscriber;
final io.smallrye.mutiny.operators.multi.replay.ReplayOperator this$0;
public void <init>(io.smallrye.mutiny.operators.multi.replay.ReplayOperator, io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber v0;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator v1;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.replay.ReplayOperator;
v2 := @parameter1: io.smallrye.mutiny.subscription.MultiSubscriber;
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber: io.smallrye.mutiny.operators.multi.replay.ReplayOperator this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber initialSubscriber> = v2;
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList v3;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator v2;
java.lang.Object v1;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber v0;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber: io.smallrye.mutiny.operators.multi.replay.ReplayOperator this$0>;
v3 = v2.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList replayList>;
virtualinvoke v3.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: void push(java.lang.Object)>(v1);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber: void triggerDrainLoops()>();
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList v3;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator v2;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber v0;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber: io.smallrye.mutiny.operators.multi.replay.ReplayOperator this$0>;
v3 = v2.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList replayList>;
virtualinvoke v3.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: void pushFailure(java.lang.Throwable)>(v1);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber: void markAsDone()>();
specialinvoke v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber: void triggerDrainLoops()>();
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList v2;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber v0;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator v1;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber: io.smallrye.mutiny.operators.multi.replay.ReplayOperator this$0>;
v2 = v1.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList replayList>;
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: void pushCompletion()>();
specialinvoke v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber: void markAsDone()>();
specialinvoke v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber: void triggerDrainLoops()>();
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.replay.ReplayOperator v2, v3;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber v0;
java.util.concurrent.Flow$Subscription v1, v4;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber: io.smallrye.mutiny.operators.multi.replay.ReplayOperator this$0>;
v2.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: java.util.concurrent.Flow$Subscription upstreamSubscription> = v1;
v3 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber: io.smallrye.mutiny.operators.multi.replay.ReplayOperator this$0>;
v4 = v3.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: java.util.concurrent.Flow$Subscription upstreamSubscription>;
interfaceinvoke v4.<java.util.concurrent.Flow$Subscription: void request(long)>(9223372036854775807L);
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber v0;
io.smallrye.mutiny.Context v4, v5;
io.smallrye.mutiny.subscription.MultiSubscriber v1, v3;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber initialSubscriber>;
v2 = v1 instanceof io.smallrye.mutiny.subscription.ContextSupport;
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber initialSubscriber>;
v4 = interfaceinvoke v3.<io.smallrye.mutiny.subscription.ContextSupport: io.smallrye.mutiny.Context context()>();
return v4;
label1:
v5 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
return v5;
}
private void triggerDrainLoops()
{
java.util.function.Consumer v3;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator v1;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber v0;
java.util.concurrent.CopyOnWriteArrayList v2;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber: io.smallrye.mutiny.operators.multi.replay.ReplayOperator this$0>;
v2 = v1.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: java.util.concurrent.CopyOnWriteArrayList subscriptions>;
v3 = staticinvoke <io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber$lambda_triggerDrainLoops_0__2682: java.util.function.Consumer bootstrap$()>();
virtualinvoke v2.<java.util.concurrent.CopyOnWriteArrayList: void forEach(java.util.function.Consumer)>(v3);
return;
}
private void markAsDone()
{
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v2;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber v0;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator v1;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber: io.smallrye.mutiny.operators.multi.replay.ReplayOperator this$0>;
v2 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v1.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: java.util.concurrent.Flow$Subscription upstreamSubscription> = v2;
return;
}
}