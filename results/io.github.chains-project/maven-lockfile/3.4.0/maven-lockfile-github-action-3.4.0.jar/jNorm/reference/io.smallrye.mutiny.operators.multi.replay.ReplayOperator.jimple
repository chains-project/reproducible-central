public class io.smallrye.mutiny.operators.multi.replay.ReplayOperator extends io.smallrye.mutiny.operators.AbstractMulti
{
private final io.smallrye.mutiny.Multi upstream;
private final io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList replayList;
private final java.util.concurrent.atomic.AtomicBoolean upstreamSubscriptionRequested;
private volatile java.util.concurrent.Flow$Subscription upstreamSubscription;
private final java.util.concurrent.CopyOnWriteArrayList subscriptions;
public void <init>(io.smallrye.mutiny.Multi, long)
{
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList v5;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator v0;
java.util.concurrent.atomic.AtomicBoolean v3;
long v2;
io.smallrye.mutiny.Multi v1;
java.util.concurrent.CopyOnWriteArrayList v4;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.ReplayOperator;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: long;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v3.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: java.util.concurrent.atomic.AtomicBoolean upstreamSubscriptionRequested> = v3;
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: java.util.concurrent.Flow$Subscription upstreamSubscription> = null;
v4 = new java.util.concurrent.CopyOnWriteArrayList;
specialinvoke v4.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: java.util.concurrent.CopyOnWriteArrayList subscriptions> = v4;
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: io.smallrye.mutiny.Multi upstream> = v1;
v5 = new io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList;
specialinvoke v5.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: void <init>(long)>(v2);
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList replayList> = v5;
return;
}
public void <init>(io.smallrye.mutiny.Multi, long, java.lang.Iterable)
{
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList v6;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator v0;
java.util.concurrent.atomic.AtomicBoolean v4;
long v2;
io.smallrye.mutiny.Multi v1;
java.lang.Iterable v3;
java.util.concurrent.CopyOnWriteArrayList v5;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.ReplayOperator;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: long;
v3 := @parameter2: java.lang.Iterable;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
v4 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v4.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: java.util.concurrent.atomic.AtomicBoolean upstreamSubscriptionRequested> = v4;
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: java.util.concurrent.Flow$Subscription upstreamSubscription> = null;
v5 = new java.util.concurrent.CopyOnWriteArrayList;
specialinvoke v5.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: java.util.concurrent.CopyOnWriteArrayList subscriptions> = v5;
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: io.smallrye.mutiny.Multi upstream> = v1;
v6 = new io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList;
specialinvoke v6.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: void <init>(long,java.lang.Iterable)>(v2, v3);
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList replayList> = v6;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.util.concurrent.atomic.AtomicBoolean v2;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber v5;
io.smallrye.mutiny.Multi v4;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription v6;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
boolean v3;
java.util.concurrent.CopyOnWriteArrayList v7;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.ReplayOperator;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: java.util.concurrent.atomic.AtomicBoolean upstreamSubscriptionRequested>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: io.smallrye.mutiny.Multi upstream>;
v5 = new io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber;
specialinvoke v5.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$UpstreamSubscriber: void <init>(io.smallrye.mutiny.operators.multi.replay.ReplayOperator,io.smallrye.mutiny.subscription.MultiSubscriber)>(v0, v1);
interfaceinvoke v4.<io.smallrye.mutiny.Multi: void subscribe(java.util.concurrent.Flow$Subscriber)>(v5);
label1:
v6 = new io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription;
specialinvoke v6.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: void <init>(io.smallrye.mutiny.operators.multi.replay.ReplayOperator,io.smallrye.mutiny.subscription.MultiSubscriber)>(v0, v1);
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v6);
v7 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: java.util.concurrent.CopyOnWriteArrayList subscriptions>;
virtualinvoke v7.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(v6);
return;
}
}