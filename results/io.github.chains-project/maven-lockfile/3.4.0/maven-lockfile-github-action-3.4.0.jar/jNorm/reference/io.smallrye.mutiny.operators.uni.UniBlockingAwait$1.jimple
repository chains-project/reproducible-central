class io.smallrye.mutiny.operators.uni.UniBlockingAwait$1 extends java.lang.Object implements io.smallrye.mutiny.subscription.UniSubscriber
{
final io.smallrye.mutiny.Context val$context;
final java.util.concurrent.atomic.AtomicReference val$reference;
final java.util.concurrent.CountDownLatch val$latch;
final java.util.concurrent.atomic.AtomicReference val$referenceToFailure;
void <init>(io.smallrye.mutiny.Context, java.util.concurrent.atomic.AtomicReference, java.util.concurrent.CountDownLatch, java.util.concurrent.atomic.AtomicReference)
{
java.util.concurrent.CountDownLatch v3;
io.smallrye.mutiny.operators.uni.UniBlockingAwait$1 v0;
io.smallrye.mutiny.Context v1;
java.util.concurrent.atomic.AtomicReference v2, v4;
v0 := @this: io.smallrye.mutiny.operators.uni.UniBlockingAwait$1;
v1 := @parameter0: io.smallrye.mutiny.Context;
v2 := @parameter1: java.util.concurrent.atomic.AtomicReference;
v3 := @parameter2: java.util.concurrent.CountDownLatch;
v4 := @parameter3: java.util.concurrent.atomic.AtomicReference;
v0.<io.smallrye.mutiny.operators.uni.UniBlockingAwait$1: io.smallrye.mutiny.Context val$context> = v1;
v0.<io.smallrye.mutiny.operators.uni.UniBlockingAwait$1: java.util.concurrent.atomic.AtomicReference val$reference> = v2;
v0.<io.smallrye.mutiny.operators.uni.UniBlockingAwait$1: java.util.concurrent.CountDownLatch val$latch> = v3;
v0.<io.smallrye.mutiny.operators.uni.UniBlockingAwait$1: java.util.concurrent.atomic.AtomicReference val$referenceToFailure> = v4;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.operators.uni.UniBlockingAwait$1 v0;
io.smallrye.mutiny.Context v1, v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniBlockingAwait$1;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniBlockingAwait$1: io.smallrye.mutiny.Context val$context>;
if v1 == null goto label1;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniBlockingAwait$1: io.smallrye.mutiny.Context val$context>;
goto label2;
label1:
v2 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
label2:
return v2;
}
public void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)
{
io.smallrye.mutiny.subscription.UniSubscription v1;
io.smallrye.mutiny.operators.uni.UniBlockingAwait$1 v0;
v0 := @this: io.smallrye.mutiny.operators.uni.UniBlockingAwait$1;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscription;
return;
}
public void onItem(java.lang.Object)
{
java.util.concurrent.CountDownLatch v3;
io.smallrye.mutiny.operators.uni.UniBlockingAwait$1 v0;
java.lang.Object v1;
java.util.concurrent.atomic.AtomicReference v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniBlockingAwait$1;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniBlockingAwait$1: java.util.concurrent.atomic.AtomicReference val$reference>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v1);
v3 = v0.<io.smallrye.mutiny.operators.uni.UniBlockingAwait$1: java.util.concurrent.CountDownLatch val$latch>;
virtualinvoke v3.<java.util.concurrent.CountDownLatch: void countDown()>();
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
java.util.concurrent.CountDownLatch v3;
io.smallrye.mutiny.operators.uni.UniBlockingAwait$1 v0;
java.util.concurrent.atomic.AtomicReference v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniBlockingAwait$1;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniBlockingAwait$1: java.util.concurrent.atomic.AtomicReference val$referenceToFailure>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
v3 = v0.<io.smallrye.mutiny.operators.uni.UniBlockingAwait$1: java.util.concurrent.CountDownLatch val$latch>;
virtualinvoke v3.<java.util.concurrent.CountDownLatch: void countDown()>();
return;
}
}