public class io.smallrye.mutiny.operators.uni.UniBlockingAwait extends java.lang.Object
{
private void <init>()
{
io.smallrye.mutiny.operators.uni.UniBlockingAwait v0;
v0 := @this: io.smallrye.mutiny.operators.uni.UniBlockingAwait;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.Object await(io.smallrye.mutiny.Uni, java.time.Duration, io.smallrye.mutiny.Context)
{
java.lang.Throwable v22;
java.lang.IllegalStateException v4;
long v12;
java.util.concurrent.atomic.AtomicReference v10, v9;
io.smallrye.mutiny.Uni v0;
java.lang.Thread v17, v5;
java.time.Duration v1;
java.lang.String v6, v7;
boolean v14, v19, v3;
io.smallrye.mutiny.TimeoutException v15;
io.smallrye.mutiny.operators.uni.UniBlockingAwait$1 v11;
java.util.concurrent.CompletionException v20;
io.smallrye.mutiny.Context v2;
java.util.concurrent.TimeUnit v13;
java.util.concurrent.CountDownLatch v8;
java.lang.InterruptedException v16;
java.lang.Object v18, v21;
v0 := @parameter0: io.smallrye.mutiny.Uni;
v1 := @parameter1: java.time.Duration;
v2 := @parameter2: io.smallrye.mutiny.Context;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v0, "upstream");
staticinvoke <io.smallrye.mutiny.operators.uni.UniBlockingAwait: void validate(java.time.Duration)>(v1);
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: boolean canCallerThreadBeBlocked()>();
if v3 != 0 goto label1;
v4 = new java.lang.IllegalStateException;
v5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v6 = virtualinvoke v5.<java.lang.Thread: java.lang.String getName()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The current thread cannot be blocked: \u0001");
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v7);
throw v4;
label1:
v8 = new java.util.concurrent.CountDownLatch;
specialinvoke v8.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);
v9 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v9.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v10 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v10.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v11 = new io.smallrye.mutiny.operators.uni.UniBlockingAwait$1;
specialinvoke v11.<io.smallrye.mutiny.operators.uni.UniBlockingAwait$1: void <init>(io.smallrye.mutiny.Context,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch,java.util.concurrent.atomic.AtomicReference)>(v2, v9, v8, v10);
staticinvoke <io.smallrye.mutiny.operators.AbstractUni: void subscribe(io.smallrye.mutiny.Uni,io.smallrye.mutiny.subscription.UniSubscriber)>(v0, v11);
label2:
if v1 == null goto label3;
v12 = virtualinvoke v1.<java.time.Duration: long toMillis()>();
v13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v14 = virtualinvoke v8.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(v12, v13);
if v14 != 0 goto label6;
v15 = new io.smallrye.mutiny.TimeoutException;
specialinvoke v15.<io.smallrye.mutiny.TimeoutException: void <init>()>();
virtualinvoke v10.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v15);
goto label6;
label3:
virtualinvoke v8.<java.util.concurrent.CountDownLatch: void await()>();
label4:
goto label6;
label5:
v16 := @caughtexception;
virtualinvoke v10.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v16);
v17 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v17.<java.lang.Thread: void interrupt()>();
label6:
v18 = virtualinvoke v10.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v18 == null goto label8;
v19 = v18 instanceof java.lang.RuntimeException;
if v19 == 0 goto label7;
throw v22;
label7:
v20 = new java.util.concurrent.CompletionException;
specialinvoke v20.<java.util.concurrent.CompletionException: void <init>(java.lang.Throwable)>(v18);
throw v20;
label8:
v21 = virtualinvoke v9.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
return v21;
catch java.lang.InterruptedException from label2 to label4 with label5;
}
private static void validate(java.time.Duration)
{
java.time.Duration v0;
java.lang.IllegalArgumentException v3;
boolean v1, v2;
v0 := @parameter0: java.time.Duration;
if v0 != null goto label1;
return;
label1:
v1 = virtualinvoke v0.<java.time.Duration: boolean isZero()>();
if v1 != 0 goto label2;
v2 = virtualinvoke v0.<java.time.Duration: boolean isNegative()>();
if v2 == 0 goto label3;
label2:
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("`duration` must be greater than zero");
throw v3;
label3:
return;
}
}