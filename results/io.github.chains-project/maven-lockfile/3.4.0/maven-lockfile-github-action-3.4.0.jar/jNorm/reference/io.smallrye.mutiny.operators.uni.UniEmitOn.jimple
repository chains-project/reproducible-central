public class io.smallrye.mutiny.operators.uni.UniEmitOn extends io.smallrye.mutiny.operators.UniOperator
{
private final java.util.concurrent.Executor executor;
public void <init>(io.smallrye.mutiny.Uni, java.util.concurrent.Executor)
{
io.smallrye.mutiny.operators.uni.UniEmitOn v0;
java.util.concurrent.Executor v2;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.smallrye.mutiny.operators.uni.UniEmitOn;
v1 := @parameter0: io.smallrye.mutiny.Uni;
v2 := @parameter1: java.util.concurrent.Executor;
specialinvoke v0.<io.smallrye.mutiny.operators.UniOperator: void <init>(io.smallrye.mutiny.Uni)>(v1);
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "executor");
v0.<io.smallrye.mutiny.operators.uni.UniEmitOn: java.util.concurrent.Executor executor> = v3;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.operators.uni.UniEmitOn v0;
io.smallrye.mutiny.operators.uni.UniEmitOn$UniEmitOnProcessor v3;
io.smallrye.mutiny.subscription.UniSubscriber v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniEmitOn;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscriber;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniEmitOn: io.smallrye.mutiny.Uni upstream()>();
v3 = new io.smallrye.mutiny.operators.uni.UniEmitOn$UniEmitOnProcessor;
specialinvoke v3.<io.smallrye.mutiny.operators.uni.UniEmitOn$UniEmitOnProcessor: void <init>(io.smallrye.mutiny.operators.uni.UniEmitOn,io.smallrye.mutiny.subscription.UniSubscriber)>(v0, v1);
staticinvoke <io.smallrye.mutiny.operators.AbstractUni: void subscribe(io.smallrye.mutiny.Uni,io.smallrye.mutiny.subscription.UniSubscriber)>(v2, v3);
return;
}
}