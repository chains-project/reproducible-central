public class io.smallrye.mutiny.operators.uni.UniFailOnTimeout extends io.smallrye.mutiny.operators.UniOperator
{
private final java.time.Duration timeout;
private final java.util.function.Supplier supplier;
private final java.util.concurrent.ScheduledExecutorService executor;
public void <init>(io.smallrye.mutiny.Uni, java.time.Duration, java.util.function.Supplier, java.util.concurrent.ScheduledExecutorService)
{
java.time.Duration v2;
java.util.concurrent.ScheduledExecutorService v4, v5;
io.smallrye.mutiny.operators.uni.UniFailOnTimeout v0;
java.util.function.Supplier v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.smallrye.mutiny.operators.uni.UniFailOnTimeout;
v1 := @parameter0: io.smallrye.mutiny.Uni;
v2 := @parameter1: java.time.Duration;
v3 := @parameter2: java.util.function.Supplier;
v4 := @parameter3: java.util.concurrent.ScheduledExecutorService;
specialinvoke v0.<io.smallrye.mutiny.operators.UniOperator: void <init>(io.smallrye.mutiny.Uni)>(v1);
v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout: java.time.Duration timeout> = v2;
v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout: java.util.function.Supplier supplier> = v3;
if v4 != null goto label1;
v5 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.ScheduledExecutorService getDefaultWorkerPool()>();
goto label2;
label1:
v5 = v4;
label2:
v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout: java.util.concurrent.ScheduledExecutorService executor> = v5;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor v3;
io.smallrye.mutiny.operators.uni.UniFailOnTimeout v0;
io.smallrye.mutiny.subscription.UniSubscriber v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniFailOnTimeout;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscriber;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout: io.smallrye.mutiny.Uni upstream()>();
v3 = new io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor;
specialinvoke v3.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: void <init>(io.smallrye.mutiny.operators.uni.UniFailOnTimeout,io.smallrye.mutiny.subscription.UniSubscriber)>(v0, v1);
staticinvoke <io.smallrye.mutiny.operators.AbstractUni: void subscribe(io.smallrye.mutiny.Uni,io.smallrye.mutiny.subscription.UniSubscriber)>(v2, v3);
return;
}
}