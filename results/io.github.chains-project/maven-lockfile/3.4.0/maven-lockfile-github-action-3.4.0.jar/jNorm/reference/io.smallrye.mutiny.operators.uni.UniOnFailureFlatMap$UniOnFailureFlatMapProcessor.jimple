class io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor extends io.smallrye.mutiny.operators.uni.UniOperatorProcessor
{
private volatile io.smallrye.mutiny.subscription.UniSubscription innerSubscription;
final io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap this$0;
public void <init>(io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap, io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.subscription.UniSubscriber v2;
io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap v1;
io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor;
v1 := @parameter0: io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap;
v2 := @parameter1: io.smallrye.mutiny.subscription.UniSubscriber;
v0.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor: io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap this$0> = v1;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.UniSubscriber)>(v2);
return;
}
public void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)
{
io.smallrye.mutiny.subscription.UniSubscription v1, v2, v3;
io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscription;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscription getCurrentUpstreamSubscription()>();
if v2 != null goto label1;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v1);
goto label3;
label1:
v3 = v0.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscription innerSubscription>;
if v3 != null goto label2;
v0.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscription innerSubscription> = v1;
goto label3;
label2:
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscription: void cancel()>();
label3:
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.subscription.UniSubscription v3;
io.smallrye.mutiny.subscription.UniSubscriber v4;
io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor v0;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor: boolean isCancelled()>();
if v2 == 0 goto label1;
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
return;
label1:
v3 = v0.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscription innerSubscription>;
if v3 != null goto label2;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor: void dispatch(java.lang.Throwable)>(v1);
goto label3;
label2:
v4 = v0.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v1);
label3:
return;
}
public void cancel()
{
io.smallrye.mutiny.subscription.UniSubscription v1, v2;
io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscription innerSubscription>;
if v1 == null goto label1;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscription innerSubscription>;
interfaceinvoke v2.<io.smallrye.mutiny.subscription.UniSubscription: void cancel()>();
label1:
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: void cancel()>();
return;
}
private void dispatch(java.lang.Throwable)
{
java.lang.Throwable v1, v5;
java.util.function.Predicate v3;
io.smallrye.mutiny.subscription.UniSubscriber v6, v9;
io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap v2;
io.smallrye.mutiny.CompositeException v7;
java.lang.Throwable[] v8;
io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor v0;
boolean v4;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor;
v1 := @parameter0: java.lang.Throwable;
label1:
v2 = v0.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor: io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap this$0>;
v3 = v2.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap: java.util.function.Predicate predicate>;
v4 = interfaceinvoke v3.<java.util.function.Predicate: boolean test(java.lang.Object)>(v1);
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = v0.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
v7 = new io.smallrye.mutiny.CompositeException;
v8 = newarray (java.lang.Throwable)[2];
v8[0] = v1;
v8[1] = v5;
specialinvoke v7.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v8);
interfaceinvoke v6.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v7);
return;
label4:
if v4 == 0 goto label5;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor: void performInnerSubscription(java.lang.Throwable)>(v1);
goto label6;
label5:
v9 = v0.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v9.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v1);
label6:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void performInnerSubscription(java.lang.Throwable)
{
java.lang.Throwable v1, v5;
io.smallrye.mutiny.subscription.UniSubscriber v6, v9;
io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap v2;
java.util.function.Function v3;
java.lang.NullPointerException v10;
io.smallrye.mutiny.CompositeException v7;
java.lang.Throwable[] v8;
java.lang.Object v4;
io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor;
v1 := @parameter0: java.lang.Throwable;
label1:
v2 = v0.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor: io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap this$0>;
v3 = v2.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap: java.util.function.Function mapper>;
v4 = interfaceinvoke v3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v1);
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = v0.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
v7 = new io.smallrye.mutiny.CompositeException;
v8 = newarray (java.lang.Throwable)[2];
v8[0] = v1;
v8[1] = v5;
specialinvoke v7.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v8);
interfaceinvoke v6.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v7);
return;
label4:
if v4 != null goto label5;
v9 = v0.<io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
v10 = new java.lang.NullPointerException;
specialinvoke v10.<java.lang.NullPointerException: void <init>(java.lang.String)>("The mapper returned `null`");
interfaceinvoke v9.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v10);
return;
label5:
staticinvoke <io.smallrye.mutiny.operators.AbstractUni: void subscribe(io.smallrye.mutiny.Uni,io.smallrye.mutiny.subscription.UniSubscriber)>(v4, v0);
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}