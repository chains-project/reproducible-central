class io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor extends io.smallrye.mutiny.operators.uni.UniOperatorProcessor
{
final io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume this$0;
public void <init>(io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume, io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume v1;
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor v0;
io.smallrye.mutiny.subscription.UniSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor;
v1 := @parameter0: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume;
v2 := @parameter1: io.smallrye.mutiny.subscription.UniSubscriber;
v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume this$0> = v1;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.UniSubscriber)>(v2);
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor v0;
java.lang.Object v1;
io.smallrye.mutiny.subscription.UniSubscriber v3, v5;
boolean v2, v4;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor: boolean isCancelled()>();
if v2 != 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
v4 = specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor: boolean invokeCallback(java.lang.Object,java.lang.Throwable,io.smallrye.mutiny.subscription.UniSubscriber)>(v1, null, v3);
if v4 == 0 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.UniSubscriber: void onItem(java.lang.Object)>(v1);
label1:
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor v0;
io.smallrye.mutiny.subscription.UniSubscriber v3, v5;
boolean v2, v4;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor: boolean isCancelled()>();
if v2 != 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
v4 = specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor: boolean invokeCallback(java.lang.Object,java.lang.Throwable,io.smallrye.mutiny.subscription.UniSubscriber)>(null, v1, v3);
if v4 == 0 goto label2;
v5 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v1);
goto label2;
label1:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
label2:
return;
}
private boolean invokeCallback(java.lang.Object, java.lang.Throwable, io.smallrye.mutiny.subscription.UniSubscriber)
{
java.lang.Throwable v2, v6;
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume v4;
io.smallrye.mutiny.subscription.UniSubscriber v3;
io.smallrye.mutiny.CompositeException v7;
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor v0;
java.lang.Throwable[] v8;
java.util.function.BiConsumer v5;
java.lang.Object v1;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Throwable;
v3 := @parameter2: io.smallrye.mutiny.subscription.UniSubscriber;
label1:
v4 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume$UniOnItemOrFailureConsumeProcessor: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume this$0>;
v5 = v4.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureConsume: java.util.function.BiConsumer callback>;
interfaceinvoke v5.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(v1, v2);
label2:
return 1;
label3:
v6 := @caughtexception;
if v2 == null goto label4;
v7 = new io.smallrye.mutiny.CompositeException;
v8 = newarray (java.lang.Throwable)[2];
v8[0] = v2;
v8[1] = v6;
specialinvoke v7.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v8);
interfaceinvoke v3.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v7);
goto label5;
label4:
interfaceinvoke v3.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v6);
label5:
return 0;
catch java.lang.Throwable from label1 to label2 with label3;
}
}