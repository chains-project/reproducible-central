public class io.smallrye.mutiny.operators.uni.UniRunSubscribeOn extends io.smallrye.mutiny.operators.UniOperator
{
private final java.util.concurrent.Executor executor;
public void <init>(io.smallrye.mutiny.Uni, java.util.concurrent.Executor)
{
java.util.concurrent.Executor v2;
java.lang.Object v3, v4;
io.smallrye.mutiny.operators.uni.UniRunSubscribeOn v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.smallrye.mutiny.operators.uni.UniRunSubscribeOn;
v1 := @parameter0: io.smallrye.mutiny.Uni;
v2 := @parameter1: java.util.concurrent.Executor;
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "upstream");
specialinvoke v0.<io.smallrye.mutiny.operators.UniOperator: void <init>(io.smallrye.mutiny.Uni)>(v3);
v4 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "executor");
v0.<io.smallrye.mutiny.operators.uni.UniRunSubscribeOn: java.util.concurrent.Executor executor> = v4;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.UniSubscriber)
{
java.lang.Throwable v4;
java.util.concurrent.Executor v2;
io.smallrye.mutiny.operators.uni.UniRunSubscribeOn v0;
io.smallrye.mutiny.subscription.UniSubscriber v1;
java.lang.Runnable v3;
v0 := @this: io.smallrye.mutiny.operators.uni.UniRunSubscribeOn;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscriber;
label1:
v2 = v0.<io.smallrye.mutiny.operators.uni.UniRunSubscribeOn: java.util.concurrent.Executor executor>;
v3 = staticinvoke <io.smallrye.mutiny.operators.uni.UniRunSubscribeOn$lambda_subscribe_0__2718: java.lang.Runnable bootstrap$(io.smallrye.mutiny.operators.uni.UniRunSubscribeOn,io.smallrye.mutiny.subscription.UniSubscriber)>(v0, v1);
interfaceinvoke v2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniRunSubscribeOn: void forwardFailure(io.smallrye.mutiny.subscription.UniSubscriber,java.lang.Throwable)>(v1, v4);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void forwardFailure(io.smallrye.mutiny.subscription.UniSubscriber, java.lang.Throwable)
{
java.lang.Throwable v2;
io.smallrye.mutiny.subscription.UniSubscription v3;
io.smallrye.mutiny.operators.uni.UniRunSubscribeOn v0;
io.smallrye.mutiny.subscription.UniSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.uni.UniRunSubscribeOn;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscriber;
v2 := @parameter1: java.lang.Throwable;
v3 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription DONE>;
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v3);
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v2);
return;
}
}