public class io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher extends io.smallrye.mutiny.operators.AbstractUni
{
private final java.util.concurrent.Flow$Publisher publisher;
public void <init>(java.util.concurrent.Flow$Publisher)
{
java.lang.Object v2;
java.util.concurrent.Flow$Publisher v1;
io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher v0;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher;
v1 := @parameter0: java.util.concurrent.Flow$Publisher;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractUni: void <init>()>();
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "publisher");
v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher: java.util.concurrent.Flow$Publisher publisher> = v2;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber v2;
io.smallrye.mutiny.subscription.UniSubscriber v1;
io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher v0;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscriber;
v2 = new io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber;
specialinvoke v2.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber: void <init>(io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher,io.smallrye.mutiny.subscription.UniSubscriber)>(v0, v1);
specialinvoke v2.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber: void forward()>();
return;
}
}