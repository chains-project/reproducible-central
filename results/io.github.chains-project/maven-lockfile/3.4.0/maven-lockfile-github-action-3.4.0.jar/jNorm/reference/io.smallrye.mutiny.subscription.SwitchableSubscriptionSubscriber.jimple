public abstract class io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber extends java.lang.Object implements io.smallrye.mutiny.subscription.MultiSubscriber, java.util.concurrent.Flow$Subscription, io.smallrye.mutiny.subscription.ContextSupport
{
protected final io.smallrye.mutiny.subscription.MultiSubscriber downstream;
protected final java.util.concurrent.atomic.AtomicReference currentUpstream;
long requested;
boolean unbounded;
final java.util.concurrent.atomic.AtomicReference pendingSubscription;
final java.util.concurrent.atomic.AtomicLong missedRequested;
final java.util.concurrent.atomic.AtomicLong missedItems;
final java.util.concurrent.atomic.AtomicInteger wip;
private final java.util.concurrent.atomic.AtomicBoolean cancelled;
public void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.util.concurrent.atomic.AtomicBoolean v7;
java.util.concurrent.atomic.AtomicReference v2, v3;
java.util.concurrent.atomic.AtomicLong v4, v5;
java.util.concurrent.atomic.AtomicInteger v6;
io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v2.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicReference currentUpstream> = v2;
v3 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicReference pendingSubscription> = v3;
v4 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v4.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicLong missedRequested> = v4;
v5 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v5.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicLong missedItems> = v5;
v6 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v6.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicInteger wip> = v6;
v7 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v7.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicBoolean cancelled> = v7;
v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream> = v1;
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber v0;
io.smallrye.mutiny.Context v4, v5;
io.smallrye.mutiny.subscription.MultiSubscriber v1, v3;
boolean v2;
v0 := @this: io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber;
v1 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v2 = v1 instanceof io.smallrye.mutiny.subscription.ContextSupport;
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v4 = interfaceinvoke v3.<io.smallrye.mutiny.subscription.ContextSupport: io.smallrye.mutiny.Context context()>();
return v4;
label1:
v5 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
return v5;
}
public void cancel()
{
java.util.concurrent.atomic.AtomicBoolean v1;
boolean v2;
io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber v0;
v0 := @this: io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber;
v1 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicBoolean cancelled>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);
if v2 != 0 goto label1;
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void drain()>();
label1:
return;
}
public boolean isCancelled()
{
java.util.concurrent.atomic.AtomicBoolean v1;
boolean v2;
io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber v0;
v0 := @this: io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber;
v1 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicBoolean cancelled>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
return v2;
}
public void onCompletion()
{
io.smallrye.mutiny.subscription.MultiSubscriber v1;
io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber v0;
v0 := @this: io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber;
v1 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onComplete()>();
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber v0;
v0 := @this: io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v2.<io.smallrye.mutiny.subscription.MultiSubscriber: void onError(java.lang.Throwable)>(v1);
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber v0;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
virtualinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void setOrSwitchUpstream(java.util.concurrent.Flow$Subscription)>(v1);
return;
}
public void emitted(long)
{
long v1, v5, v7;
java.util.concurrent.atomic.AtomicLong v11;
byte v6, v8;
java.util.concurrent.atomic.AtomicInteger v3, v9;
io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber v0;
int v10;
boolean v2, v4;
v0 := @this: io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: boolean unbounded>;
if v2 == 0 goto label1;
return;
label1:
v3 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(0, 1);
if v4 == 0 goto label6;
v5 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: long requested>;
v6 = v5 cmp 9223372036854775807L;
if v6 == 0 goto label3;
v7 = v5 - v1;
v8 = v7 cmp 0L;
if v8 > 0 goto label2;
v7 = 0L;
label2:
v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: long requested> = v7;
goto label4;
label3:
v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: boolean unbounded> = 1;
label4:
v9 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v10 = virtualinvoke v9.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
if v10 != 0 goto label5;
return;
label5:
virtualinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void drainLoop()>();
return;
label6:
v11 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicLong missedItems>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v11, v1);
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void drain()>();
return;
}
public long requested()
{
long v1;
io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber v0;
v0 := @this: io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber;
v1 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: long requested>;
return v1;
}
public final void request(long)
{
long v1, v10, v8;
java.util.concurrent.atomic.AtomicReference v14;
byte v11, v2, v9;
java.util.concurrent.atomic.AtomicInteger v12, v6;
io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber v0;
int v13;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
boolean v5, v7;
java.lang.IllegalArgumentException v4;
java.util.concurrent.atomic.AtomicLong v16;
java.lang.Object v15;
v0 := @this: io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 > 0 goto label1;
v3 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v4 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: java.lang.IllegalArgumentException getInvalidRequestException()>();
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onError(java.lang.Throwable)>(v4);
return;
label1:
v5 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: boolean unbounded>;
if v5 == 0 goto label2;
return;
label2:
v6 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(0, 1);
if v7 == 0 goto label6;
v8 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: long requested>;
v9 = v8 cmp 9223372036854775807L;
if v9 == 0 goto label3;
v10 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(long,long)>(v8, v1);
v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: long requested> = v10;
v11 = v10 cmp 9223372036854775807L;
if v11 != 0 goto label3;
v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: boolean unbounded> = 1;
label3:
v12 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v13 = virtualinvoke v12.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
if v13 == 0 goto label4;
virtualinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void drainLoop()>();
label4:
v14 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicReference currentUpstream>;
v15 = virtualinvoke v14.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v15 == null goto label5;
interfaceinvoke v15.<java.util.concurrent.Flow$Subscription: void request(long)>(v1);
label5:
return;
label6:
v16 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicLong missedRequested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v16, v1);
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void drain()>();
return;
}
protected final void setOrSwitchUpstream(java.util.concurrent.Flow$Subscription)
{
java.util.concurrent.atomic.AtomicBoolean v2;
long v9;
java.util.concurrent.atomic.AtomicReference v13, v6;
byte v12;
java.util.concurrent.atomic.AtomicInteger v10, v4;
io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber v0;
int v11;
boolean v15, v3, v5, v8;
java.util.concurrent.Flow$Subscription v1;
java.lang.Object v14, v7;
v0 := @this: io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNullNpe(java.lang.Object,java.lang.String)>(v1, "newUpstream");
v2 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicBoolean cancelled>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v3 == 0 goto label1;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
return;
label1:
v4 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(0, 1);
if v5 == 0 goto label4;
v6 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicReference currentUpstream>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v1);
if v7 == null goto label2;
v8 = virtualinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: boolean cancelUpstreamOnSwitch()>();
if v8 == 0 goto label2;
interfaceinvoke v7.<java.util.concurrent.Flow$Subscription: void cancel()>();
label2:
v9 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: long requested>;
v10 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v11 = virtualinvoke v10.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
if v11 == 0 goto label3;
virtualinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void drainLoop()>();
label3:
v12 = v9 cmp 0L;
if v12 == 0 goto label6;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(v9);
goto label6;
label4:
v13 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicReference pendingSubscription>;
v14 = virtualinvoke v13.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v1);
if v14 == null goto label5;
v15 = virtualinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: boolean cancelUpstreamOnSwitch()>();
if v15 == 0 goto label5;
interfaceinvoke v14.<java.util.concurrent.Flow$Subscription: void cancel()>();
label5:
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void drain()>();
label6:
return;
}
protected boolean cancelUpstreamOnSwitch()
{
io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber v0;
v0 := @this: io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber;
return 0;
}
private void drain()
{
int v2;
java.util.concurrent.atomic.AtomicInteger v1;
io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber v0;
v0 := @this: io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber;
v1 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 == 0 goto label1;
return;
label1:
virtualinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void drainLoop()>();
return;
}
void drainLoop()
{
java.util.concurrent.atomic.AtomicBoolean v12;
long v15, v17, v19, v2, v7, v9;
java.util.concurrent.atomic.AtomicReference v10, v14, v22, v4;
byte v16, v18, v20, v23, v24, v27;
java.util.concurrent.atomic.AtomicInteger v25;
io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber v0;
int v1, v26;
boolean v13, v21;
java.util.concurrent.Flow$Subscription v3;
java.util.concurrent.atomic.AtomicLong v6, v8;
java.lang.Object v11, v5;
v0 := @this: io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber;
v1 = 1;
v2 = 0L;
v3 = null;
label01:
v4 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicReference pendingSubscription>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);
v6 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicLong missedRequested>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(0L);
v8 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicLong missedItems>;
v9 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(0L);
v10 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicReference currentUpstream>;
v11 = virtualinvoke v10.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v12 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicBoolean cancelled>;
v13 = virtualinvoke v12.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v13 == 0 goto label03;
if v11 == null goto label02;
interfaceinvoke v11.<java.util.concurrent.Flow$Subscription: void cancel()>();
v14 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicReference currentUpstream>;
virtualinvoke v14.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);
label02:
if v5 == null goto label10;
interfaceinvoke v5.<java.util.concurrent.Flow$Subscription: void cancel()>();
goto label10;
label03:
v15 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: long requested>;
v16 = v15 cmp 9223372036854775807L;
if v16 == 0 goto label07;
v17 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(long,long)>(v15, v7);
v18 = v17 cmp 9223372036854775807L;
if v18 == 0 goto label05;
v19 = v17 - v9;
v20 = v19 cmp 0L;
if v20 >= 0 goto label04;
v19 = 0L;
label04:
v15 = v19;
goto label06;
label05:
v15 = v17;
label06:
v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: long requested> = v15;
label07:
if v5 == null goto label09;
if v11 == null goto label08;
v21 = virtualinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: boolean cancelUpstreamOnSwitch()>();
if v21 == 0 goto label08;
interfaceinvoke v11.<java.util.concurrent.Flow$Subscription: void cancel()>();
label08:
v22 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicReference currentUpstream>;
virtualinvoke v22.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v5);
v23 = v15 cmp 0L;
if v23 == 0 goto label10;
v2 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(long,long)>(v2, v15);
v3 = v5;
goto label10;
label09:
v24 = v7 cmp 0L;
if v24 == 0 goto label10;
if v11 == null goto label10;
v2 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(long,long)>(v2, v7);
v3 = v11;
label10:
v25 = v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v26 = neg v1;
v1 = virtualinvoke v25.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v26);
if v1 != 0 goto label01;
v27 = v2 cmp 0L;
if v27 == 0 goto label11;
interfaceinvoke v3.<java.util.concurrent.Flow$Subscription: void request(long)>(v2);
label11:
return;
}
}