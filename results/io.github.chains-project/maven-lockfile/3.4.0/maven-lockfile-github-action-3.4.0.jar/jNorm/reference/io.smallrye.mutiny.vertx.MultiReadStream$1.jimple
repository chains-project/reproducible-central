class io.smallrye.mutiny.vertx.MultiReadStream$1 extends java.lang.Object implements java.util.concurrent.Flow$Subscription
{
final io.smallrye.mutiny.vertx.MultiReadStream this$0;
void <init>(io.smallrye.mutiny.vertx.MultiReadStream)
{
io.smallrye.mutiny.vertx.MultiReadStream$1 v0;
io.smallrye.mutiny.vertx.MultiReadStream v1;
v0 := @this: io.smallrye.mutiny.vertx.MultiReadStream$1;
v1 := @parameter0: io.smallrye.mutiny.vertx.MultiReadStream;
v0.<io.smallrye.mutiny.vertx.MultiReadStream$1: io.smallrye.mutiny.vertx.MultiReadStream this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void request(long)
{
io.smallrye.mutiny.vertx.MultiReadStream$1 v0;
io.vertx.core.streams.ReadStream v6;
io.smallrye.mutiny.vertx.MultiReadStream v2, v5;
java.lang.Object v4;
long v1;
java.util.concurrent.atomic.AtomicReference v3;
v0 := @this: io.smallrye.mutiny.vertx.MultiReadStream$1;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.vertx.MultiReadStream$1: io.smallrye.mutiny.vertx.MultiReadStream this$0>;
v3 = v2.<io.smallrye.mutiny.vertx.MultiReadStream: java.util.concurrent.atomic.AtomicReference upstream>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v4 != v0 goto label1;
v5 = v0.<io.smallrye.mutiny.vertx.MultiReadStream$1: io.smallrye.mutiny.vertx.MultiReadStream this$0>;
v6 = v5.<io.smallrye.mutiny.vertx.MultiReadStream: io.vertx.core.streams.ReadStream source>;
interfaceinvoke v6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream fetch(long)>(v1);
label1:
return;
}
public void cancel()
{
io.smallrye.mutiny.vertx.MultiReadStream$1 v0;
io.smallrye.mutiny.vertx.MultiReadStream v1;
v0 := @this: io.smallrye.mutiny.vertx.MultiReadStream$1;
v1 = v0.<io.smallrye.mutiny.vertx.MultiReadStream$1: io.smallrye.mutiny.vertx.MultiReadStream this$0>;
specialinvoke v1.<io.smallrye.mutiny.vertx.MultiReadStream: void release()>();
return;
}
}