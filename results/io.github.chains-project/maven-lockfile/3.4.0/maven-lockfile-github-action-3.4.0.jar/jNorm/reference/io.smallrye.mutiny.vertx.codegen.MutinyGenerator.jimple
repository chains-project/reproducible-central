public class io.smallrye.mutiny.vertx.codegen.MutinyGenerator extends io.vertx.codegen.Generator
{
public static final java.lang.String ID;
private java.util.List methods;
private final java.util.Map methodTypeArgMap;
public static java.util.List IGNORED_TYPES;
private final java.util.List generators;
void <init>()
{
io.smallrye.mutiny.vertx.codegen.lang.HashCodeAndEqualsMethodsCodeWriter v20;
io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter v27;
io.smallrye.mutiny.vertx.codegen.lang.ToStringMethodCodeWriter v19;
io.smallrye.mutiny.vertx.codegen.lang.CodeWriter v16, v26, v31;
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v0;
io.smallrye.mutiny.vertx.codegen.lang.ConstructorWithGenericTypesCodeWriter v13;
io.smallrye.mutiny.vertx.codegen.lang.GetDelegateMethodCodeWriter v15;
io.smallrye.mutiny.vertx.codegen.lang.ClassJavadocCodeWriter v6;
io.smallrye.mutiny.vertx.codegen.lang.CodeWriter[] v3;
io.smallrye.mutiny.vertx.codegen.lang.ToSubscriberCodeWriter v24;
io.smallrye.mutiny.vertx.codegen.lang.NewInstanceWithGenericsMethodCodeWriter v30;
io.smallrye.mutiny.vertx.codegen.lang.ImplClassCodeWriter v32;
java.util.Set v34;
io.smallrye.mutiny.vertx.codegen.lang.ImportDeclarationCodeWriter v5;
java.util.List v33;
io.smallrye.mutiny.vertx.codegen.lang.MutinyGenAnnotationCodeWriter v7;
io.smallrye.mutiny.vertx.codegen.lang.ReadStreamMethodDeclarationCodeWriter v25;
io.smallrye.mutiny.vertx.codegen.lang.NoArgConstructorCodeWriter v14;
io.smallrye.mutiny.vertx.codegen.lang.IteratorMethodsCodeWriter v22;
io.smallrye.mutiny.vertx.codegen.lang.DelegateFieldCodeWriter v10;
io.smallrye.mutiny.vertx.codegen.lang.IterableMethodCodeWriter v21;
java.util.HashMap v2;
io.smallrye.mutiny.vertx.codegen.lang.FunctionApplyMethodCodeWriter v23;
io.smallrye.mutiny.vertx.codegen.lang.ConstructorWithDelegateParameterCodeWriter v11;
io.smallrye.mutiny.vertx.codegen.lang.ConstructorWithObjectDelegateCodeWriter v12;
java.util.ArrayList v1;
io.smallrye.mutiny.vertx.codegen.lang.PackageDeclarationCodeWriter v4;
io.smallrye.mutiny.vertx.codegen.lang.TypeArgsConstantCodeWriter v9;
io.smallrye.mutiny.vertx.codegen.lang.ConsumerMethodCodeWriter v28;
io.smallrye.mutiny.vertx.codegen.lang.NewInstanceMethodCodeWriter v29;
io.smallrye.mutiny.vertx.codegen.lang.ClassDeclarationCodeWriter v8;
io.smallrye.mutiny.vertx.codegen.lang.BufferRelatedMethodCodeWriter v18;
io.smallrye.mutiny.vertx.codegen.lang.DelegateMethodDeclarationCodeWriter v17;
v0 := @this: io.smallrye.mutiny.vertx.codegen.MutinyGenerator;
specialinvoke v0.<io.vertx.codegen.Generator: void <init>()>();
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: java.util.List methods> = v1;
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: java.util.Map methodTypeArgMap> = v2;
v3 = newarray (io.smallrye.mutiny.vertx.codegen.lang.CodeWriter)[29];
v4 = new io.smallrye.mutiny.vertx.codegen.lang.PackageDeclarationCodeWriter;
specialinvoke v4.<io.smallrye.mutiny.vertx.codegen.lang.PackageDeclarationCodeWriter: void <init>()>();
v3[0] = v4;
v5 = new io.smallrye.mutiny.vertx.codegen.lang.ImportDeclarationCodeWriter;
specialinvoke v5.<io.smallrye.mutiny.vertx.codegen.lang.ImportDeclarationCodeWriter: void <init>()>();
v3[1] = v5;
v6 = new io.smallrye.mutiny.vertx.codegen.lang.ClassJavadocCodeWriter;
specialinvoke v6.<io.smallrye.mutiny.vertx.codegen.lang.ClassJavadocCodeWriter: void <init>()>();
v3[2] = v6;
v7 = new io.smallrye.mutiny.vertx.codegen.lang.MutinyGenAnnotationCodeWriter;
specialinvoke v7.<io.smallrye.mutiny.vertx.codegen.lang.MutinyGenAnnotationCodeWriter: void <init>()>();
v3[3] = v7;
v8 = new io.smallrye.mutiny.vertx.codegen.lang.ClassDeclarationCodeWriter;
specialinvoke v8.<io.smallrye.mutiny.vertx.codegen.lang.ClassDeclarationCodeWriter: void <init>()>();
v3[4] = v8;
v9 = new io.smallrye.mutiny.vertx.codegen.lang.TypeArgsConstantCodeWriter;
specialinvoke v9.<io.smallrye.mutiny.vertx.codegen.lang.TypeArgsConstantCodeWriter: void <init>()>();
v3[5] = v9;
v10 = new io.smallrye.mutiny.vertx.codegen.lang.DelegateFieldCodeWriter;
specialinvoke v10.<io.smallrye.mutiny.vertx.codegen.lang.DelegateFieldCodeWriter: void <init>()>();
v3[6] = v10;
v11 = new io.smallrye.mutiny.vertx.codegen.lang.ConstructorWithDelegateParameterCodeWriter;
specialinvoke v11.<io.smallrye.mutiny.vertx.codegen.lang.ConstructorWithDelegateParameterCodeWriter: void <init>()>();
v3[7] = v11;
v12 = new io.smallrye.mutiny.vertx.codegen.lang.ConstructorWithObjectDelegateCodeWriter;
specialinvoke v12.<io.smallrye.mutiny.vertx.codegen.lang.ConstructorWithObjectDelegateCodeWriter: void <init>()>();
v3[8] = v12;
v13 = new io.smallrye.mutiny.vertx.codegen.lang.ConstructorWithGenericTypesCodeWriter;
specialinvoke v13.<io.smallrye.mutiny.vertx.codegen.lang.ConstructorWithGenericTypesCodeWriter: void <init>()>();
v3[9] = v13;
v14 = new io.smallrye.mutiny.vertx.codegen.lang.NoArgConstructorCodeWriter;
specialinvoke v14.<io.smallrye.mutiny.vertx.codegen.lang.NoArgConstructorCodeWriter: void <init>()>();
v3[10] = v14;
v15 = new io.smallrye.mutiny.vertx.codegen.lang.GetDelegateMethodCodeWriter;
specialinvoke v15.<io.smallrye.mutiny.vertx.codegen.lang.GetDelegateMethodCodeWriter: void <init>()>();
v3[11] = v15;
v16 = staticinvoke <io.smallrye.mutiny.vertx.codegen.MutinyGenerator$lambda_new_2__2331: io.smallrye.mutiny.vertx.codegen.lang.CodeWriter bootstrap$(io.smallrye.mutiny.vertx.codegen.MutinyGenerator)>(v0);
v3[12] = v16;
v17 = new io.smallrye.mutiny.vertx.codegen.lang.DelegateMethodDeclarationCodeWriter;
specialinvoke v17.<io.smallrye.mutiny.vertx.codegen.lang.DelegateMethodDeclarationCodeWriter: void <init>()>();
v3[13] = v17;
v18 = new io.smallrye.mutiny.vertx.codegen.lang.BufferRelatedMethodCodeWriter;
specialinvoke v18.<io.smallrye.mutiny.vertx.codegen.lang.BufferRelatedMethodCodeWriter: void <init>()>();
v3[14] = v18;
v19 = new io.smallrye.mutiny.vertx.codegen.lang.ToStringMethodCodeWriter;
specialinvoke v19.<io.smallrye.mutiny.vertx.codegen.lang.ToStringMethodCodeWriter: void <init>()>();
v3[15] = v19;
v20 = new io.smallrye.mutiny.vertx.codegen.lang.HashCodeAndEqualsMethodsCodeWriter;
specialinvoke v20.<io.smallrye.mutiny.vertx.codegen.lang.HashCodeAndEqualsMethodsCodeWriter: void <init>()>();
v3[16] = v20;
v21 = new io.smallrye.mutiny.vertx.codegen.lang.IterableMethodCodeWriter;
specialinvoke v21.<io.smallrye.mutiny.vertx.codegen.lang.IterableMethodCodeWriter: void <init>()>();
v3[17] = v21;
v22 = new io.smallrye.mutiny.vertx.codegen.lang.IteratorMethodsCodeWriter;
specialinvoke v22.<io.smallrye.mutiny.vertx.codegen.lang.IteratorMethodsCodeWriter: void <init>()>();
v3[18] = v22;
v23 = new io.smallrye.mutiny.vertx.codegen.lang.FunctionApplyMethodCodeWriter;
specialinvoke v23.<io.smallrye.mutiny.vertx.codegen.lang.FunctionApplyMethodCodeWriter: void <init>()>();
v3[19] = v23;
v24 = new io.smallrye.mutiny.vertx.codegen.lang.ToSubscriberCodeWriter;
specialinvoke v24.<io.smallrye.mutiny.vertx.codegen.lang.ToSubscriberCodeWriter: void <init>()>();
v3[20] = v24;
v25 = new io.smallrye.mutiny.vertx.codegen.lang.ReadStreamMethodDeclarationCodeWriter;
specialinvoke v25.<io.smallrye.mutiny.vertx.codegen.lang.ReadStreamMethodDeclarationCodeWriter: void <init>()>();
v3[21] = v25;
v26 = staticinvoke <io.smallrye.mutiny.vertx.codegen.MutinyGenerator$lambda_new_4__2332: io.smallrye.mutiny.vertx.codegen.lang.CodeWriter bootstrap$(io.smallrye.mutiny.vertx.codegen.MutinyGenerator)>(v0);
v3[22] = v26;
v27 = new io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter;
specialinvoke v27.<io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter: void <init>()>();
v3[23] = v27;
v28 = new io.smallrye.mutiny.vertx.codegen.lang.ConsumerMethodCodeWriter;
specialinvoke v28.<io.smallrye.mutiny.vertx.codegen.lang.ConsumerMethodCodeWriter: void <init>()>();
v3[24] = v28;
v29 = new io.smallrye.mutiny.vertx.codegen.lang.NewInstanceMethodCodeWriter;
specialinvoke v29.<io.smallrye.mutiny.vertx.codegen.lang.NewInstanceMethodCodeWriter: void <init>()>();
v3[25] = v29;
v30 = new io.smallrye.mutiny.vertx.codegen.lang.NewInstanceWithGenericsMethodCodeWriter;
specialinvoke v30.<io.smallrye.mutiny.vertx.codegen.lang.NewInstanceWithGenericsMethodCodeWriter: void <init>()>();
v3[26] = v30;
v31 = staticinvoke <io.smallrye.mutiny.vertx.codegen.MutinyGenerator$lambda_new_5__2333: io.smallrye.mutiny.vertx.codegen.lang.CodeWriter bootstrap$()>();
v3[27] = v31;
v32 = new io.smallrye.mutiny.vertx.codegen.lang.ImplClassCodeWriter;
specialinvoke v32.<io.smallrye.mutiny.vertx.codegen.lang.ImplClassCodeWriter: void <init>(io.smallrye.mutiny.vertx.codegen.MutinyGenerator)>(v0);
v3[28] = v32;
v33 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v3);
v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: java.util.List generators> = v33;
v34 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>("class");
v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: java.util.Set kinds> = v34;
v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: java.lang.String name> = "mutiny";
return;
}
protected void genMethods(io.vertx.codegen.ClassModel, io.vertx.codegen.MethodInfo, java.util.List, java.io.PrintWriter)
{
java.io.PrintWriter v4;
java.util.List v3;
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v0;
io.vertx.codegen.MethodInfo v2, v5;
io.vertx.codegen.ClassModel v1;
v0 := @this: io.smallrye.mutiny.vertx.codegen.MutinyGenerator;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 := @parameter1: io.vertx.codegen.MethodInfo;
v3 := @parameter2: java.util.List;
v4 := @parameter3: java.io.PrintWriter;
virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: void generateMethod(io.vertx.codegen.ClassModel,io.vertx.codegen.MethodInfo,java.util.List,java.io.PrintWriter)>(v1, v2, v3, v4);
v5 = specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: io.vertx.codegen.MethodInfo genOverloadedMethod(io.vertx.codegen.MethodInfo)>(v2);
if v5 == null goto label1;
virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: void generateMethod(io.vertx.codegen.ClassModel,io.vertx.codegen.MethodInfo,java.util.List,java.io.PrintWriter)>(v1, v5, v3, v4);
label1:
return;
}
private io.vertx.codegen.MethodInfo genOverloadedMethod(io.vertx.codegen.MethodInfo)
{
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v0;
java.util.ArrayList v14, v2;
io.vertx.codegen.ParamInfo v22;
io.vertx.codegen.doc.Text v25;
io.vertx.codegen.type.ParameterizedTypeInfo v16;
int v23, v3;
java.lang.String v12, v24;
boolean v13, v6, v9;
io.vertx.codegen.type.ClassTypeInfo v11, v18;
java.util.Iterator v5;
io.vertx.codegen.type.TypeInfo v10, v17, v19, v20, v8;
java.util.List v15, v21, v4;
java.lang.Object v7;
io.vertx.codegen.MethodInfo v1, v26, v27;
v0 := @this: io.smallrye.mutiny.vertx.codegen.MutinyGenerator;
v1 := @parameter0: io.vertx.codegen.MethodInfo;
v2 = null;
v3 = 0;
v4 = virtualinvoke v1.<io.vertx.codegen.MethodInfo: java.util.List getParams()>();
v5 = interfaceinvoke v4.<java.util.List: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label4;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = virtualinvoke v7.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v9 = virtualinvoke v8.<io.vertx.codegen.type.TypeInfo: boolean isParameterized()>();
if v9 == 0 goto label3;
v10 = virtualinvoke v7.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v11 = virtualinvoke v10.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v12 = virtualinvoke v11.<io.vertx.codegen.type.ClassTypeInfo: java.lang.String getName()>();
v13 = virtualinvoke v12.<java.lang.String: boolean equals(java.lang.Object)>("io.vertx.core.streams.ReadStream");
if v13 == 0 goto label3;
if v2 != null goto label2;
v14 = new java.util.ArrayList;
v15 = virtualinvoke v1.<io.vertx.codegen.MethodInfo: java.util.List getParams()>();
specialinvoke v14.<java.util.ArrayList: void <init>(java.util.Collection)>(v15);
v2 = v14;
label2:
v16 = new io.vertx.codegen.type.ParameterizedTypeInfo;
v17 = staticinvoke <io.vertx.codegen.type.TypeReflectionFactory: io.vertx.codegen.type.TypeInfo create(java.lang.reflect.Type)>(class "Ljava/util/concurrent/Flow$Publisher;");
v18 = virtualinvoke v17.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v19 = virtualinvoke v7.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v20 = virtualinvoke v19.<io.vertx.codegen.type.ParameterizedTypeInfo: io.vertx.codegen.type.TypeInfo getArg(int)>(0);
v21 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v20);
specialinvoke v16.<io.vertx.codegen.type.ParameterizedTypeInfo: void <init>(io.vertx.codegen.type.ClassTypeInfo,boolean,java.util.List)>(v18, 0, v21);
v22 = new io.vertx.codegen.ParamInfo;
v23 = virtualinvoke v7.<io.vertx.codegen.ParamInfo: int getIndex()>();
v24 = virtualinvoke v7.<io.vertx.codegen.ParamInfo: java.lang.String getName()>();
v25 = virtualinvoke v7.<io.vertx.codegen.ParamInfo: io.vertx.codegen.doc.Text getDescription()>();
specialinvoke v22.<io.vertx.codegen.ParamInfo: void <init>(int,java.lang.String,io.vertx.codegen.doc.Text,io.vertx.codegen.type.TypeInfo)>(v23, v24, v25, v16);
interfaceinvoke v2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(v3, v22);
label3:
v3 = v3 + 1;
goto label1;
label4:
if v2 == null goto label5;
v26 = virtualinvoke v1.<io.vertx.codegen.MethodInfo: io.vertx.codegen.MethodInfo copy()>();
v27 = virtualinvoke v26.<io.vertx.codegen.MethodInfo: io.vertx.codegen.MethodInfo setParams(java.util.List)>(v2);
return v27;
label5:
return null;
}
public java.util.Collection annotations()
{
java.lang.Class[] v1;
java.util.List v2;
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v0;
v0 := @this: io.smallrye.mutiny.vertx.codegen.MutinyGenerator;
v1 = newarray (java.lang.Class)[2];
v1[0] = class "Lio/vertx/codegen/annotations/VertxGen;";
v1[1] = class "Lio/vertx/codegen/annotations/ModuleGen;";
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
return v2;
}
public java.lang.String filename(io.vertx.codegen.ClassModel)
{
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v0;
io.vertx.codegen.ModuleInfo v2;
java.lang.String v3, v4, v5;
io.vertx.codegen.ClassModel v1;
v0 := @this: io.smallrye.mutiny.vertx.codegen.MutinyGenerator;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 = virtualinvoke v1.<io.vertx.codegen.ClassModel: io.vertx.codegen.ModuleInfo getModule()>();
v3 = virtualinvoke v1.<io.vertx.codegen.ClassModel: java.lang.String getFqn()>();
v4 = virtualinvoke v2.<io.vertx.codegen.ModuleInfo: java.lang.String translateQualifiedName(java.lang.String,java.lang.String)>(v3, "mutiny");
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.java");
return v5;
}
public java.lang.String render(io.vertx.codegen.ClassModel, int, int, java.util.Map)
{
java.io.PrintWriter v9;
java.io.StringWriter v8;
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v0;
io.vertx.codegen.ClassModel v1;
java.util.List v5;
java.util.Map v4;
int v2, v3;
java.lang.String v10, v6;
boolean v7;
v0 := @this: io.smallrye.mutiny.vertx.codegen.MutinyGenerator;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: java.util.Map;
v5 = <io.smallrye.mutiny.vertx.codegen.MutinyGenerator: java.util.List IGNORED_TYPES>;
v6 = virtualinvoke v1.<io.vertx.codegen.ClassModel: java.lang.String getFqn()>();
v7 = interfaceinvoke v5.<java.util.List: boolean contains(java.lang.Object)>(v6);
if v7 == 0 goto label1;
return null;
label1:
specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: void initState(io.vertx.codegen.ClassModel)>(v1);
v8 = new java.io.StringWriter;
specialinvoke v8.<java.io.StringWriter: void <init>()>();
v9 = new java.io.PrintWriter;
specialinvoke v9.<java.io.PrintWriter: void <init>(java.io.Writer)>(v8);
specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: void generateClass(io.vertx.codegen.ClassModel,java.io.PrintWriter)>(v1, v9);
v10 = virtualinvoke v8.<java.io.StringWriter: java.lang.String toString()>();
return v10;
}
private void initState(io.vertx.codegen.ClassModel)
{
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v0;
io.vertx.codegen.ClassModel v1;
v0 := @this: io.smallrye.mutiny.vertx.codegen.MutinyGenerator;
v1 := @parameter0: io.vertx.codegen.ClassModel;
specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: void initGenMethods(io.vertx.codegen.ClassModel)>(v1);
specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: void initCachedTypeArgs()>();
return;
}
private void generateClass(io.vertx.codegen.ClassModel, java.io.PrintWriter)
{
java.io.PrintWriter v2;
java.util.function.Consumer v4;
java.util.List v3;
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v0;
io.vertx.codegen.ClassModel v1;
v0 := @this: io.smallrye.mutiny.vertx.codegen.MutinyGenerator;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 := @parameter1: java.io.PrintWriter;
v3 = v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: java.util.List generators>;
v4 = staticinvoke <io.smallrye.mutiny.vertx.codegen.MutinyGenerator$lambda_generateClass_6__2334: java.util.function.Consumer bootstrap$(io.vertx.codegen.ClassModel,java.io.PrintWriter)>(v1, v2);
interfaceinvoke v3.<java.util.List: void forEach(java.util.function.Consumer)>(v4);
return;
}
public void generateClassBody(io.vertx.codegen.ClassModel, java.io.PrintWriter)
{
java.io.PrintWriter v2;
java.util.Iterator v8;
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v0;
io.smallrye.mutiny.vertx.codegen.lang.ConstantCodeWriter v6;
io.vertx.codegen.ClassModel v1;
java.util.ArrayList v3;
java.util.function.Consumer v5;
java.util.List v4;
java.util.Map v7;
java.lang.Object v10;
boolean v9;
v0 := @this: io.smallrye.mutiny.vertx.codegen.MutinyGenerator;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 := @parameter1: java.io.PrintWriter;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v4 = v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: java.util.List methods>;
v5 = staticinvoke <io.smallrye.mutiny.vertx.codegen.MutinyGenerator$lambda_generateClassBody_7__2335: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.vertx.codegen.MutinyGenerator,io.vertx.codegen.ClassModel,java.util.List,java.io.PrintWriter)>(v0, v1, v3, v2);
interfaceinvoke v4.<java.util.List: void forEach(java.util.function.Consumer)>(v5);
v6 = new io.smallrye.mutiny.vertx.codegen.lang.ConstantCodeWriter;
v7 = v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: java.util.Map methodTypeArgMap>;
specialinvoke v6.<io.smallrye.mutiny.vertx.codegen.lang.ConstantCodeWriter: void <init>(java.util.Map)>(v7);
virtualinvoke v6.<io.smallrye.mutiny.vertx.codegen.lang.ConstantCodeWriter: java.lang.Void apply(io.vertx.codegen.ClassModel,java.io.PrintWriter)>(v1, v2);
v8 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label2;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("  ");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(v10);
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>(";");
goto label1;
label2:
return;
}
private void initGenMethods(io.vertx.codegen.ClassModel)
{
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v0;
java.util.function.Function v14;
java.util.ArrayList v2;
java.util.stream.Collector v16, v9;
java.util.function.Predicate v5, v7;
io.vertx.codegen.ClassModel v1;
java.util.function.Consumer v12;
java.util.List v11, v3;
java.util.stream.Stream v13, v15, v4, v6, v8;
java.lang.Object v10, v17;
v0 := @this: io.smallrye.mutiny.vertx.codegen.MutinyGenerator;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = virtualinvoke v1.<io.vertx.codegen.ClassModel: java.util.List getMethods()>();
v4 = interfaceinvoke v3.<java.util.List: java.util.stream.Stream stream()>();
v5 = staticinvoke <io.smallrye.mutiny.vertx.codegen.MutinyGenerator$lambda_initGenMethods_8__2336: java.util.function.Predicate bootstrap$()>();
v6 = interfaceinvoke v4.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v5);
v7 = staticinvoke <io.smallrye.mutiny.vertx.codegen.MutinyGenerator$lambda_initGenMethods_9__2337: java.util.function.Predicate bootstrap$()>();
v8 = interfaceinvoke v6.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v7);
v9 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v10 = interfaceinvoke v8.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v9);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v10);
v11 = virtualinvoke v1.<io.vertx.codegen.ClassModel: java.util.List getAnyJavaTypeMethods()>();
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v11);
v12 = staticinvoke <io.smallrye.mutiny.vertx.codegen.MutinyGenerator$lambda_initGenMethods_17__2338: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.vertx.codegen.MutinyGenerator,io.vertx.codegen.ClassModel)>(v0, v1);
interfaceinvoke v2.<java.util.List: void forEach(java.util.function.Consumer)>(v12);
v13 = interfaceinvoke v2.<java.util.List: java.util.stream.Stream stream()>();
v14 = staticinvoke <io.smallrye.mutiny.vertx.codegen.MutinyGenerator$stream__2339: java.util.function.Function bootstrap$()>();
v15 = interfaceinvoke v13.<java.util.stream.Stream: java.util.stream.Stream flatMap(java.util.function.Function)>(v14);
v16 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v17 = interfaceinvoke v15.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v16);
v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: java.util.List methods> = v17;
return;
}
private void initCachedTypeArgs()
{
java.util.HashMap v10;
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v0;
java.util.Map v1, v19;
int v17, v2;
java.lang.String v18;
io.vertx.codegen.type.ClassKind v14, v15;
boolean v12, v16, v5, v8;
java.util.Iterator v11, v4;
io.vertx.codegen.type.TypeInfo v7;
java.util.List v3, v9;
java.lang.Object v13, v6;
v0 := @this: io.smallrye.mutiny.vertx.codegen.MutinyGenerator;
v1 = v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: java.util.Map methodTypeArgMap>;
interfaceinvoke v1.<java.util.Map: void clear()>();
v2 = 0;
v3 = v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: java.util.List methods>;
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label4;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<io.vertx.codegen.MethodInfo: io.vertx.codegen.type.TypeInfo getReturnType()>();
v8 = v7 instanceof io.vertx.codegen.type.ParameterizedTypeInfo;
if v8 == 0 goto label1;
v9 = virtualinvoke v7.<io.vertx.codegen.type.ParameterizedTypeInfo: java.util.List getArgs()>();
v10 = new java.util.HashMap;
specialinvoke v10.<java.util.HashMap: void <init>()>();
v11 = interfaceinvoke v9.<java.util.List: java.util.Iterator iterator()>();
label2:
v12 = interfaceinvoke v11.<java.util.Iterator: boolean hasNext()>();
if v12 == 0 goto label3;
v13 = interfaceinvoke v11.<java.util.Iterator: java.lang.Object next()>();
v14 = virtualinvoke v13.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v15 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind API>;
if v14 != v15 goto label2;
v16 = specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: boolean containsTypeVariableArgument(io.vertx.codegen.type.TypeInfo)>(v13);
if v16 != 0 goto label2;
v17 = v2;
v2 = v2 + 1;
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v17) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("TYPE_ARG_\u0001");
interfaceinvoke v10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v13, v18);
goto label2;
label3:
v19 = v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: java.util.Map methodTypeArgMap>;
interfaceinvoke v19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v10);
goto label1;
label4:
return;
}
private boolean containsTypeVariableArgument(io.vertx.codegen.type.TypeInfo)
{
java.util.Iterator v5;
io.vertx.codegen.type.TypeInfo v1;
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v0;
java.util.List v4;
java.lang.Object v7;
boolean v10, v2, v3, v6, v8, v9;
v0 := @this: io.smallrye.mutiny.vertx.codegen.MutinyGenerator;
v1 := @parameter0: io.vertx.codegen.type.TypeInfo;
v2 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: boolean isVariable()>();
if v2 == 0 goto label1;
return 1;
label1:
v3 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: boolean isParameterized()>();
if v3 == 0 goto label4;
v4 = virtualinvoke v1.<io.vertx.codegen.type.ParameterizedTypeInfo: java.util.List getArgs()>();
v5 = interfaceinvoke v4.<java.util.List: java.util.Iterator iterator()>();
label2:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label4;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = virtualinvoke v7.<io.vertx.codegen.type.TypeInfo: boolean isVariable()>();
if v8 == 0 goto label3;
return 1;
label3:
v9 = virtualinvoke v7.<io.vertx.codegen.type.TypeInfo: boolean isParameterized()>();
if v9 == 0 goto label2;
v10 = specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: boolean containsTypeVariableArgument(io.vertx.codegen.type.TypeInfo)>(v7);
if v10 == 0 goto label2;
return 1;
label4:
return 0;
}
private boolean isOverride(io.vertx.codegen.MethodInfo, io.vertx.codegen.MethodInfo)
{
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v0;
int v10, v11, v13, v7, v9;
java.lang.String v3, v4;
boolean v20, v5;
io.vertx.codegen.type.TypeInfo v16, v19;
java.util.List v12, v14, v17, v6, v8;
java.lang.Object v15, v18;
io.vertx.codegen.MethodInfo v1, v2;
v0 := @this: io.smallrye.mutiny.vertx.codegen.MutinyGenerator;
v1 := @parameter0: io.vertx.codegen.MethodInfo;
v2 := @parameter1: io.vertx.codegen.MethodInfo;
v3 = virtualinvoke v1.<io.vertx.codegen.MethodInfo: java.lang.String getName()>();
v4 = virtualinvoke v2.<io.vertx.codegen.MethodInfo: java.lang.String getName()>();
v5 = virtualinvoke v3.<java.lang.String: boolean equals(java.lang.Object)>(v4);
if v5 == 0 goto label4;
v6 = virtualinvoke v1.<io.vertx.codegen.MethodInfo: java.util.List getParams()>();
v7 = interfaceinvoke v6.<java.util.List: int size()>();
v8 = virtualinvoke v2.<io.vertx.codegen.MethodInfo: java.util.List getParams()>();
v9 = interfaceinvoke v8.<java.util.List: int size()>();
v10 = v9 - 1;
if v7 != v10 goto label4;
v11 = 0;
label1:
v12 = virtualinvoke v1.<io.vertx.codegen.MethodInfo: java.util.List getParams()>();
v13 = interfaceinvoke v12.<java.util.List: int size()>();
if v11 >= v13 goto label3;
v14 = virtualinvoke v1.<io.vertx.codegen.MethodInfo: java.util.List getParams()>();
v15 = interfaceinvoke v14.<java.util.List: java.lang.Object get(int)>(v11);
v16 = virtualinvoke v15.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v17 = virtualinvoke v2.<io.vertx.codegen.MethodInfo: java.util.List getParams()>();
v18 = interfaceinvoke v17.<java.util.List: java.lang.Object get(int)>(v11);
v19 = virtualinvoke v18.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v20 = virtualinvoke v16.<io.vertx.codegen.type.TypeInfo: boolean equals(java.lang.Object)>(v19);
if v20 != 0 goto label2;
return 0;
label2:
v11 = v11 + 1;
goto label1;
label3:
return 1;
label4:
return 0;
}
final void generateMethod(io.vertx.codegen.ClassModel, io.vertx.codegen.MethodInfo, java.util.List, java.io.PrintWriter)
{
io.smallrye.mutiny.vertx.codegen.methods.ConsumerMethodGenerator v9;
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v0;
java.util.function.Function v25;
java.util.Map v11, v6;
io.smallrye.mutiny.vertx.codegen.methods.ForgetMethodGenerator v7;
io.vertx.codegen.MethodKind v12, v13, v14, v15, v16, v17;
io.smallrye.mutiny.vertx.codegen.methods.AwaitMethodGenerator v8;
java.lang.String v22, v29;
java.util.stream.Collector v27;
javax.'annotation'.processing.Messager v20;
boolean v18;
java.io.PrintWriter v4;
io.smallrye.mutiny.vertx.codegen.methods.SimpleMethodGenerator v10;
java.util.Set v23;
io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator v5;
io.vertx.codegen.ClassModel v1;
javax.tools.Diagnostic$Kind v21;
java.util.List v3;
java.util.stream.Stream v24, v26;
javax.'annotation'.processing.ProcessingEnvironment v19;
java.lang.Object v28;
io.vertx.codegen.MethodInfo v2;
v0 := @this: io.smallrye.mutiny.vertx.codegen.MutinyGenerator;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 := @parameter1: io.vertx.codegen.MethodInfo;
v3 := @parameter2: java.util.List;
v4 := @parameter3: java.io.PrintWriter;
v5 = new io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator;
v6 = v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: java.util.Map methodTypeArgMap>;
specialinvoke v5.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: void <init>(java.io.PrintWriter,java.util.Map)>(v4, v6);
v7 = new io.smallrye.mutiny.vertx.codegen.methods.ForgetMethodGenerator;
specialinvoke v7.<io.smallrye.mutiny.vertx.codegen.methods.ForgetMethodGenerator: void <init>(java.io.PrintWriter)>(v4);
v8 = new io.smallrye.mutiny.vertx.codegen.methods.AwaitMethodGenerator;
specialinvoke v8.<io.smallrye.mutiny.vertx.codegen.methods.AwaitMethodGenerator: void <init>(java.io.PrintWriter)>(v4);
v9 = new io.smallrye.mutiny.vertx.codegen.methods.ConsumerMethodGenerator;
specialinvoke v9.<io.smallrye.mutiny.vertx.codegen.methods.ConsumerMethodGenerator: void <init>(java.io.PrintWriter)>(v4);
v10 = new io.smallrye.mutiny.vertx.codegen.methods.SimpleMethodGenerator;
v11 = v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: java.util.Map methodTypeArgMap>;
specialinvoke v10.<io.smallrye.mutiny.vertx.codegen.methods.SimpleMethodGenerator: void <init>(java.io.PrintWriter,java.util.List,java.util.Map)>(v4, v3, v11);
v12 = staticinvoke <io.smallrye.mutiny.vertx.codegen.lang.CodeGenHelper: io.vertx.codegen.MethodKind methodKind(io.vertx.codegen.MethodInfo)>(v2);
v13 = <io.vertx.codegen.MethodKind: io.vertx.codegen.MethodKind CALLBACK>;
if v12 != v13 goto label1;
virtualinvoke v5.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: void generate(io.vertx.codegen.ClassModel,io.vertx.codegen.MethodInfo)>(v1, v2);
virtualinvoke v8.<io.smallrye.mutiny.vertx.codegen.methods.AwaitMethodGenerator: void generate(io.vertx.codegen.MethodInfo)>(v2);
virtualinvoke v7.<io.smallrye.mutiny.vertx.codegen.methods.ForgetMethodGenerator: void generate(io.vertx.codegen.ClassModel,io.vertx.codegen.MethodInfo)>(v1, v2);
goto label4;
label1:
v14 = staticinvoke <io.smallrye.mutiny.vertx.codegen.lang.CodeGenHelper: io.vertx.codegen.MethodKind methodKind(io.vertx.codegen.MethodInfo)>(v2);
v15 = <io.vertx.codegen.MethodKind: io.vertx.codegen.MethodKind HANDLER>;
if v14 != v15 goto label2;
virtualinvoke v10.<io.smallrye.mutiny.vertx.codegen.methods.SimpleMethodGenerator: void generate(io.vertx.codegen.ClassModel,io.vertx.codegen.MethodInfo)>(v1, v2);
virtualinvoke v9.<io.smallrye.mutiny.vertx.codegen.methods.ConsumerMethodGenerator: void generate(io.vertx.codegen.MethodInfo)>(v2);
goto label4;
label2:
v16 = staticinvoke <io.smallrye.mutiny.vertx.codegen.lang.CodeGenHelper: io.vertx.codegen.MethodKind methodKind(io.vertx.codegen.MethodInfo)>(v2);
v17 = <io.vertx.codegen.MethodKind: io.vertx.codegen.MethodKind OTHER>;
if v16 != v17 goto label4;
v18 = specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: boolean isMethodReturningAFuture(io.vertx.codegen.MethodInfo)>(v2);
if v18 == 0 goto label3;
v19 = v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: javax.'annotation'.processing.ProcessingEnvironment env>;
v20 = interfaceinvoke v19.<javax.'annotation'.processing.ProcessingEnvironment: javax.'annotation'.processing.Messager getMessager()>();
v21 = <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind WARNING>;
v22 = virtualinvoke v2.<io.vertx.codegen.MethodInfo: java.lang.String getName()>();
v23 = virtualinvoke v2.<io.vertx.codegen.MethodInfo: java.util.Set getOwnerTypes()>();
v24 = interfaceinvoke v23.<java.util.Set: java.util.stream.Stream stream()>();
v25 = staticinvoke <io.smallrye.mutiny.vertx.codegen.MutinyGenerator$getName__2340: java.util.function.Function bootstrap$()>();
v26 = interfaceinvoke v24.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v25);
v27 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining()>();
v28 = interfaceinvoke v26.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v27);
v29 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Object)>(v22, v28) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("A method returning a \'Future\' has been found - missing handler method for \'\u0001\' declared in \u0001");
interfaceinvoke v20.<javax.'annotation'.processing.Messager: void printMessage(javax.tools.Diagnostic$Kind,java.lang.CharSequence)>(v21, v29);
virtualinvoke v5.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: void generateOther(io.vertx.codegen.MethodInfo)>(v2);
virtualinvoke v8.<io.smallrye.mutiny.vertx.codegen.methods.AwaitMethodGenerator: void generateOther(io.vertx.codegen.MethodInfo)>(v2);
virtualinvoke v7.<io.smallrye.mutiny.vertx.codegen.methods.ForgetMethodGenerator: void generateOther(io.vertx.codegen.ClassModel,io.vertx.codegen.MethodInfo)>(v1, v2);
goto label4;
label3:
virtualinvoke v10.<io.smallrye.mutiny.vertx.codegen.methods.SimpleMethodGenerator: void generateOther(io.vertx.codegen.ClassModel,io.vertx.codegen.MethodInfo)>(v1, v2);
label4:
return;
}
private boolean isMethodReturningAFuture(io.vertx.codegen.MethodInfo)
{
io.vertx.codegen.type.ClassTypeInfo v4, v6;
io.vertx.codegen.type.TypeInfo v2, v3, v5;
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v0;
java.lang.Class v8;
java.lang.String v7, v9;
io.vertx.codegen.MethodInfo v1;
boolean v10, v11;
v0 := @this: io.smallrye.mutiny.vertx.codegen.MutinyGenerator;
v1 := @parameter0: io.vertx.codegen.MethodInfo;
v2 = virtualinvoke v1.<io.vertx.codegen.MethodInfo: io.vertx.codegen.type.TypeInfo getReturnType()>();
if v2 == null goto label1;
v3 = virtualinvoke v1.<io.vertx.codegen.MethodInfo: io.vertx.codegen.type.TypeInfo getReturnType()>();
v4 = virtualinvoke v3.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
if v4 == null goto label1;
v5 = virtualinvoke v1.<io.vertx.codegen.MethodInfo: io.vertx.codegen.type.TypeInfo getReturnType()>();
v6 = virtualinvoke v5.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v7 = virtualinvoke v6.<io.vertx.codegen.type.ClassTypeInfo: java.lang.String getName()>();
v8 = class "Lio/vertx/core/Future;";
v9 = virtualinvoke v8.<java.lang.Class: java.lang.String getName()>();
v10 = virtualinvoke v7.<java.lang.String: boolean equals(java.lang.Object)>(v9);
if v10 == 0 goto label1;
v11 = 1;
goto label2;
label1:
v11 = 0;
label2:
return v11;
}
private void generateMethodDeclaration(io.vertx.codegen.ClassModel, io.vertx.codegen.MethodInfo, java.util.List, java.io.PrintWriter)
{
io.smallrye.mutiny.vertx.codegen.methods.ConsumerMethodGenerator v21;
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v0;
java.util.Map v23, v8;
io.smallrye.mutiny.vertx.codegen.methods.ForgetMethodGenerator v18;
io.vertx.codegen.MethodKind v19, v20, v5, v6;
io.smallrye.mutiny.vertx.codegen.methods.AwaitMethodGenerator v13;
boolean v12, v17;
java.io.PrintWriter v4;
io.smallrye.mutiny.vertx.codegen.methods.SimpleMethodGenerator v22;
java.util.function.Predicate v11, v16;
io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator v7;
io.vertx.codegen.ClassModel v1;
java.util.List v14, v3, v9;
java.util.stream.Stream v10, v15;
io.vertx.codegen.MethodInfo v2;
v0 := @this: io.smallrye.mutiny.vertx.codegen.MutinyGenerator;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 := @parameter1: io.vertx.codegen.MethodInfo;
v3 := @parameter2: java.util.List;
v4 := @parameter3: java.io.PrintWriter;
v5 = staticinvoke <io.smallrye.mutiny.vertx.codegen.lang.CodeGenHelper: io.vertx.codegen.MethodKind methodKind(io.vertx.codegen.MethodInfo)>(v2);
v6 = <io.vertx.codegen.MethodKind: io.vertx.codegen.MethodKind CALLBACK>;
if v5 != v6 goto label2;
v7 = new io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator;
v8 = v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: java.util.Map methodTypeArgMap>;
specialinvoke v7.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: void <init>(java.io.PrintWriter,java.util.Map)>(v4, v8);
virtualinvoke v7.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: void generateDeclaration(io.vertx.codegen.MethodInfo)>(v2);
v9 = virtualinvoke v1.<io.vertx.codegen.ClassModel: java.util.List getMethods()>();
v10 = interfaceinvoke v9.<java.util.List: java.util.stream.Stream stream()>();
v11 = staticinvoke <io.smallrye.mutiny.vertx.codegen.MutinyGenerator$lambda_generateMethodDeclaration_18__2341: java.util.function.Predicate bootstrap$(io.vertx.codegen.MethodInfo)>(v2);
v12 = interfaceinvoke v10.<java.util.stream.Stream: boolean noneMatch(java.util.function.Predicate)>(v11);
if v12 == 0 goto label1;
v13 = new io.smallrye.mutiny.vertx.codegen.methods.AwaitMethodGenerator;
specialinvoke v13.<io.smallrye.mutiny.vertx.codegen.methods.AwaitMethodGenerator: void <init>(java.io.PrintWriter)>(v4);
virtualinvoke v13.<io.smallrye.mutiny.vertx.codegen.methods.AwaitMethodGenerator: void generateDeclaration(io.vertx.codegen.MethodInfo)>(v2);
label1:
v14 = virtualinvoke v1.<io.vertx.codegen.ClassModel: java.util.List getMethods()>();
v15 = interfaceinvoke v14.<java.util.List: java.util.stream.Stream stream()>();
v16 = staticinvoke <io.smallrye.mutiny.vertx.codegen.MutinyGenerator$lambda_generateMethodDeclaration_19__2342: java.util.function.Predicate bootstrap$(io.vertx.codegen.MethodInfo)>(v2);
v17 = interfaceinvoke v15.<java.util.stream.Stream: boolean noneMatch(java.util.function.Predicate)>(v16);
if v17 == 0 goto label4;
v18 = new io.smallrye.mutiny.vertx.codegen.methods.ForgetMethodGenerator;
specialinvoke v18.<io.smallrye.mutiny.vertx.codegen.methods.ForgetMethodGenerator: void <init>(java.io.PrintWriter)>(v4);
virtualinvoke v18.<io.smallrye.mutiny.vertx.codegen.methods.ForgetMethodGenerator: void generateDeclaration(io.vertx.codegen.ClassModel,io.vertx.codegen.MethodInfo)>(v1, v2);
goto label4;
label2:
v19 = staticinvoke <io.smallrye.mutiny.vertx.codegen.lang.CodeGenHelper: io.vertx.codegen.MethodKind methodKind(io.vertx.codegen.MethodInfo)>(v2);
v20 = <io.vertx.codegen.MethodKind: io.vertx.codegen.MethodKind HANDLER>;
if v19 != v20 goto label3;
v21 = new io.smallrye.mutiny.vertx.codegen.methods.ConsumerMethodGenerator;
specialinvoke v21.<io.smallrye.mutiny.vertx.codegen.methods.ConsumerMethodGenerator: void <init>(java.io.PrintWriter)>(v4);
virtualinvoke v21.<io.smallrye.mutiny.vertx.codegen.methods.ConsumerMethodGenerator: void generateDeclaration(io.vertx.codegen.MethodInfo)>(v2);
goto label4;
label3:
v22 = new io.smallrye.mutiny.vertx.codegen.methods.SimpleMethodGenerator;
v23 = v0.<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: java.util.Map methodTypeArgMap>;
specialinvoke v22.<io.smallrye.mutiny.vertx.codegen.methods.SimpleMethodGenerator: void <init>(java.io.PrintWriter,java.util.List,java.util.Map)>(v4, v3, v23);
virtualinvoke v22.<io.smallrye.mutiny.vertx.codegen.methods.SimpleMethodGenerator: void generateDeclaration(io.vertx.codegen.MethodInfo)>(v2);
label4:
return;
}
private void genTypeArgDecl(io.vertx.codegen.type.TypeInfo, io.vertx.codegen.MethodInfo, java.lang.String, java.io.PrintWriter)
{
java.io.PrintWriter v4;
io.vertx.codegen.type.TypeInfo v1;
io.smallrye.mutiny.vertx.codegen.MutinyGenerator v0;
java.lang.Class v6;
java.lang.StringBuilder v5;
java.lang.String v3, v7, v8;
io.vertx.codegen.MethodInfo v2;
v0 := @this: io.smallrye.mutiny.vertx.codegen.MutinyGenerator;
v1 := @parameter0: io.vertx.codegen.type.TypeInfo;
v2 := @parameter1: io.vertx.codegen.MethodInfo;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.io.PrintWriter;
v5 = new java.lang.StringBuilder;
specialinvoke v5.<java.lang.StringBuilder: void <init>()>();
staticinvoke <io.smallrye.mutiny.vertx.codegen.lang.CodeGenHelper: void genTypeArg(io.vertx.codegen.type.TypeInfo,io.vertx.codegen.MethodInfo,int,java.lang.StringBuilder)>(v1, v2, 1, v5);
virtualinvoke v4.<java.io.PrintWriter: void print(java.lang.String)>("  static final ");
v6 = class "Lio/smallrye/mutiny/vertx/TypeArg;";
v7 = virtualinvoke v6.<java.lang.Class: java.lang.String getName()>();
virtualinvoke v4.<java.io.PrintWriter: void print(java.lang.String)>(v7);
virtualinvoke v4.<java.io.PrintWriter: void print(java.lang.String)>("<");
v8 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: java.lang.String translateName(java.lang.String)>("mutiny");
virtualinvoke v4.<java.io.PrintWriter: void print(java.lang.String)>(v8);
virtualinvoke v4.<java.io.PrintWriter: void print(java.lang.String)>("> ");
virtualinvoke v4.<java.io.PrintWriter: void print(java.lang.String)>(v3);
virtualinvoke v4.<java.io.PrintWriter: void print(java.lang.String)>(" = ");
virtualinvoke v4.<java.io.PrintWriter: void print(java.lang.Object)>(v5);
virtualinvoke v4.<java.io.PrintWriter: void println(java.lang.String)>(";");
return;
}
static void <clinit>()
{
java.util.List v5;
java.lang.Class v1, v3;
java.lang.String[] v0;
java.lang.String v2, v4;
v0 = newarray (java.lang.String)[2];
v1 = class "Lio/vertx/core/Future;";
v2 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v0[0] = v2;
v3 = class "Lio/vertx/core/CompositeFuture;";
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
v0[1] = v4;
v5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v0);
<io.smallrye.mutiny.vertx.codegen.MutinyGenerator: java.util.List IGNORED_TYPES> = v5;
return;
}
}