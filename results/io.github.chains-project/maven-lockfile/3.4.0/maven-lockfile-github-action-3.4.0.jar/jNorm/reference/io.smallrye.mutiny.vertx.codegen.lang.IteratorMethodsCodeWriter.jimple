public class io.smallrye.mutiny.vertx.codegen.lang.IteratorMethodsCodeWriter extends java.lang.Object implements io.smallrye.mutiny.vertx.codegen.lang.ConditionalCodeWriter
{
public void <init>()
{
io.smallrye.mutiny.vertx.codegen.lang.IteratorMethodsCodeWriter v0;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.IteratorMethodsCodeWriter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void generate(io.vertx.codegen.ClassModel, java.io.PrintWriter)
{
io.vertx.codegen.type.ClassKind v14, v15;
boolean v11, v18, v22, v6;
java.io.PrintWriter v2;
java.util.function.Predicate v10, v21, v5;
io.vertx.codegen.type.TypeInfo v7;
io.vertx.codegen.ClassModel v1;
java.util.List v19, v3, v8;
java.util.stream.Stream v20, v4, v9;
io.smallrye.mutiny.vertx.codegen.lang.IteratorMethodsCodeWriter v0;
java.lang.Object[] v12, v16, v23, v33;
java.lang.String v13, v17, v24, v26, v28, v29, v31, v32;
java.lang.Class v25, v27, v30;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.IteratorMethodsCodeWriter;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 := @parameter1: java.io.PrintWriter;
v3 = virtualinvoke v1.<io.vertx.codegen.ClassModel: java.util.List getMethods()>();
v4 = interfaceinvoke v3.<java.util.List: java.util.stream.Stream stream()>();
v5 = staticinvoke <io.smallrye.mutiny.vertx.codegen.lang.IteratorMethodsCodeWriter$lambda_generate_0__2370: java.util.function.Predicate bootstrap$()>();
v6 = interfaceinvoke v4.<java.util.stream.Stream: boolean noneMatch(java.util.function.Predicate)>(v5);
if v6 == 0 goto label1;
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("  @Override");
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("  public boolean hasNext() {");
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("    return delegate.hasNext();");
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("  }");
virtualinvoke v2.<java.io.PrintWriter: void println()>();
label1:
v7 = virtualinvoke v1.<io.vertx.codegen.ClassModel: io.vertx.codegen.type.TypeInfo getIteratorArg()>();
v8 = virtualinvoke v1.<io.vertx.codegen.ClassModel: java.util.List getMethods()>();
v9 = interfaceinvoke v8.<java.util.List: java.util.stream.Stream stream()>();
v10 = staticinvoke <io.smallrye.mutiny.vertx.codegen.lang.IteratorMethodsCodeWriter$lambda_generate_1__2371: java.util.function.Predicate bootstrap$()>();
v11 = interfaceinvoke v9.<java.util.stream.Stream: boolean noneMatch(java.util.function.Predicate)>(v10);
if v11 == 0 goto label5;
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("  @Override");
v12 = newarray (java.lang.Object)[1];
v13 = virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.IteratorMethodsCodeWriter: java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)>(v7);
v12[0] = v13;
virtualinvoke v2.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("  public %s next() {%n", v12);
v14 = virtualinvoke v7.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v15 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind API>;
if v14 != v15 goto label2;
v16 = newarray (java.lang.Object)[1];
v17 = virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.IteratorMethodsCodeWriter: java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)>(v7);
v16[0] = v17;
virtualinvoke v2.<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object[])>("    return %s.newInstance(delegate.next());%n", v16);
goto label4;
label2:
v18 = virtualinvoke v7.<io.vertx.codegen.type.TypeInfo: boolean isVariable()>();
if v18 == 0 goto label3;
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("    return __typeArg_0.wrap(delegate.next());");
goto label4;
label3:
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("    return delegate.next();");
label4:
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("  }");
virtualinvoke v2.<java.io.PrintWriter: void println()>();
label5:
v19 = virtualinvoke v1.<io.vertx.codegen.ClassModel: java.util.List getMethods()>();
v20 = interfaceinvoke v19.<java.util.List: java.util.stream.Stream stream()>();
v21 = staticinvoke <io.smallrye.mutiny.vertx.codegen.lang.IteratorMethodsCodeWriter$lambda_generate_2__2372: java.util.function.Predicate bootstrap$()>();
v22 = interfaceinvoke v20.<java.util.stream.Stream: boolean noneMatch(java.util.function.Predicate)>(v21);
if v22 == 0 goto label6;
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("  @CheckReturnValue\n");
v23 = newarray (java.lang.Object)[1];
v24 = virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.IteratorMethodsCodeWriter: java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)>(v7);
v23[0] = v24;
virtualinvoke v2.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("  public Multi<%s> toMulti() {%n", v23);
v25 = class "Ljava/util/stream/StreamSupport;";
v26 = virtualinvoke v25.<java.lang.Class: java.lang.String getName()>();
v27 = class "Ljava/util/Spliterators;";
v28 = virtualinvoke v27.<java.lang.Class: java.lang.String getName()>();
v29 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v28) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.spliteratorUnknownSize");
v30 = class "Ljava/util/Spliterator;";
v31 = virtualinvoke v30.<java.lang.Class: java.lang.String getName()>();
v32 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v31) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.ORDERED");
v33 = newarray (java.lang.Object)[3];
v33[0] = v26;
v33[1] = v29;
v33[2] = v32;
virtualinvoke v2.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("    return Multi.createFrom().items(%n      %s.stream(%n        %s(this, %s), false)%n    );%n", v33);
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("  }");
virtualinvoke v2.<java.io.PrintWriter: void println()>();
label6:
return;
}
public boolean test(io.vertx.codegen.ClassModel)
{
io.vertx.codegen.ClassModel v1;
boolean v2, v3, v4;
io.smallrye.mutiny.vertx.codegen.lang.IteratorMethodsCodeWriter v0;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.IteratorMethodsCodeWriter;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 = virtualinvoke v1.<io.vertx.codegen.ClassModel: boolean isConcrete()>();
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<io.vertx.codegen.ClassModel: boolean isIterator()>();
if v3 == 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
}