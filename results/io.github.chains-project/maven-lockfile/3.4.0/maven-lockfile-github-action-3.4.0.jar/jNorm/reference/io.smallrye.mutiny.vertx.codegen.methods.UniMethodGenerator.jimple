public class io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator extends io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodGenerator
{
private final java.util.Map methodTypeArgMap;
public void <init>(java.io.PrintWriter, java.util.Map)
{
java.io.PrintWriter v1;
io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator v0;
java.util.Map v2;
v0 := @this: io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator;
v1 := @parameter0: java.io.PrintWriter;
v2 := @parameter1: java.util.Map;
specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodGenerator: void <init>(java.io.PrintWriter)>(v1);
v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.util.Map methodTypeArgMap> = v2;
return;
}
public void generate(io.vertx.codegen.ClassModel, io.vertx.codegen.MethodInfo)
{
java.io.PrintWriter v4;
io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor v3;
io.vertx.codegen.MethodInfo v2;
io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator v0;
io.vertx.codegen.ClassModel v1;
v0 := @this: io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 := @parameter1: io.vertx.codegen.MethodInfo;
v3 = specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor computeMethodInfo(io.vertx.codegen.MethodInfo)>(v2);
virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: void generateJavadoc(io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor)>(v3);
virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: void generateMethodDeclaration(io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor)>(v3);
specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: void generateBody(io.vertx.codegen.ClassModel,io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor)>(v1, v3);
v4 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
virtualinvoke v4.<java.io.PrintWriter: void println()>();
return;
}
public void generateMethodDeclaration(io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor)
{
java.io.PrintWriter v2;
io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor v1;
io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator v0;
v0 := @this: io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator;
v1 := @parameter0: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor;
v2 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("  @CheckReturnValue\n");
specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodGenerator: void generateMethodDeclaration(io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor)>(v1);
return;
}
public void generateDeclaration(io.vertx.codegen.MethodInfo)
{
java.io.PrintWriter v3, v4;
io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor v2;
io.vertx.codegen.MethodInfo v1;
io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator v0;
v0 := @this: io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator;
v1 := @parameter0: io.vertx.codegen.MethodInfo;
v2 = specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor computeMethodInfo(io.vertx.codegen.MethodInfo)>(v1);
virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: void generateJavadoc(io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor)>(v2);
virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: void generateMethodDeclaration(io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor)>(v2);
v3 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
virtualinvoke v3.<java.io.PrintWriter: void println(java.lang.String)>(";");
v4 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
virtualinvoke v4.<java.io.PrintWriter: void println()>();
return;
}
public void generateOther(io.vertx.codegen.MethodInfo)
{
java.io.PrintWriter v3;
io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor v2;
io.vertx.codegen.MethodInfo v1;
io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator v0;
v0 := @this: io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator;
v1 := @parameter0: io.vertx.codegen.MethodInfo;
v2 = specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor computeMethodInfoOther(io.vertx.codegen.MethodInfo)>(v1);
virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: void generateJavadoc(io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor)>(v2);
virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: void generateMethodDeclaration(io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor)>(v2);
specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: void generateBodyOther(io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor)>(v2);
v3 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
virtualinvoke v3.<java.io.PrintWriter: void println()>();
return;
}
private void generateBody(io.vertx.codegen.ClassModel, io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor)
{
java.util.Map v22;
int v12, v13;
java.lang.String v15, v20, v24, v25, v6, v8, v9;
java.io.PrintWriter v16, v17, v18, v19, v21, v26, v27;
io.vertx.codegen.type.ClassTypeInfo v5;
io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor v2;
io.vertx.codegen.type.TypeInfo v4;
io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator v0;
io.vertx.codegen.ClassModel v1;
java.util.List v11;
java.lang.Class v7;
java.lang.Object v14;
io.vertx.codegen.MethodInfo v10, v23, v3;
v0 := @this: io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 := @parameter1: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor;
v3 = virtualinvoke v2.<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor: io.vertx.codegen.MethodInfo getMethod()>();
v4 = virtualinvoke v3.<io.vertx.codegen.MethodInfo: io.vertx.codegen.type.TypeInfo getReturnType()>();
v5 = virtualinvoke v4.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v6 = virtualinvoke v5.<io.vertx.codegen.type.ClassTypeInfo: java.lang.String getSimpleName()>();
v7 = class "Lio/smallrye/mutiny/vertx/AsyncResultUni;";
v8 = virtualinvoke v7.<java.lang.Class: java.lang.String getName()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v8, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.to\u0001");
v10 = virtualinvoke v2.<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor: io.vertx.codegen.MethodInfo getOriginalMethod()>();
v11 = virtualinvoke v10.<io.vertx.codegen.MethodInfo: java.util.List getParams()>();
v12 = interfaceinvoke v11.<java.util.List: int size()>();
v13 = v12 - 1;
v14 = interfaceinvoke v11.<java.util.List: java.lang.Object get(int)>(v13);
v15 = virtualinvoke v14.<io.vertx.codegen.ParamInfo: java.lang.String getName()>();
v16 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
virtualinvoke v16.<java.io.PrintWriter: void println(java.lang.String)>(" { ");
v17 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
virtualinvoke v17.<java.io.PrintWriter: void print(java.lang.String)>("    return ");
v18 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
virtualinvoke v18.<java.io.PrintWriter: void print(java.lang.String)>(v9);
v19 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
v20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(\u0001 -> {");
virtualinvoke v19.<java.io.PrintWriter: void println(java.lang.String)>(v20);
v21 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
v22 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.util.Map methodTypeArgMap>;
v23 = virtualinvoke v2.<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor: io.vertx.codegen.MethodInfo getOriginalMethod()>();
v24 = staticinvoke <io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.lang.String invokeDelegate(java.util.Map,io.vertx.codegen.ClassModel,io.vertx.codegen.MethodInfo)>(v22, v1, v23);
v25 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v24) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("        \u0001;");
virtualinvoke v21.<java.io.PrintWriter: void println(java.lang.String)>(v25);
v26 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
virtualinvoke v26.<java.io.PrintWriter: void println(java.lang.String)>("    });");
v27 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
virtualinvoke v27.<java.io.PrintWriter: void println(java.lang.String)>("  }");
return;
}
public static java.lang.String invokeDelegate(java.util.Map, io.vertx.codegen.ClassModel, io.vertx.codegen.MethodInfo)
{
java.util.Map v0;
boolean v15, v18, v23, v25, v3, v41, v46, v47, v48;
io.vertx.codegen.type.TypeInfo v17, v24, v27;
io.vertx.codegen.ClassModel v1;
java.util.List v13, v38;
java.lang.StringBuilder v11, v32, v33, v35, v36, v37, v4, v50, v7, v8, v9;
int v12, v39, v40;
java.lang.String v10, v20, v22, v26, v29, v31, v34, v43, v45, v49, v5, v51, v52, v53, v6;
io.vertx.codegen.type.ClassTypeInfo v19, v28, v42;
java.util.Iterator v14;
java.lang.Class v21, v30, v44;
java.lang.Object v16;
io.vertx.codegen.MethodInfo v2;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: io.vertx.codegen.ClassModel;
v2 := @parameter2: io.vertx.codegen.MethodInfo;
v3 = virtualinvoke v2.<io.vertx.codegen.MethodInfo: boolean isStaticMethod()>();
if v3 == 0 goto label01;
v4 = new java.lang.StringBuilder;
v5 = virtualinvoke v1.<io.vertx.codegen.ClassModel: java.lang.String getIfaceFQCN()>();
v6 = staticinvoke <io.vertx.codegen.Helper: java.lang.String getNonGenericType(java.lang.String)>(v5);
specialinvoke v4.<java.lang.StringBuilder: void <init>(java.lang.String)>(v6);
v7 = v4;
goto label02;
label01:
v8 = new java.lang.StringBuilder;
specialinvoke v8.<java.lang.StringBuilder: void <init>(java.lang.String)>("delegate");
v7 = v8;
label02:
v9 = virtualinvoke v7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
v10 = virtualinvoke v2.<io.vertx.codegen.MethodInfo: java.lang.String getName()>();
v11 = virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v10);
virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");
v12 = 0;
v13 = virtualinvoke v2.<io.vertx.codegen.MethodInfo: java.util.List getParams()>();
v14 = interfaceinvoke v13.<java.util.List: java.util.Iterator iterator()>();
label03:
v15 = interfaceinvoke v14.<java.util.Iterator: boolean hasNext()>();
if v15 == 0 goto label10;
v16 = interfaceinvoke v14.<java.util.Iterator: java.lang.Object next()>();
if v12 <= 0 goto label04;
virtualinvoke v7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
label04:
v17 = virtualinvoke v16.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v18 = virtualinvoke v17.<io.vertx.codegen.type.TypeInfo: boolean isParameterized()>();
if v18 == 0 goto label07;
v19 = virtualinvoke v17.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v20 = virtualinvoke v19.<io.vertx.codegen.type.ClassTypeInfo: java.lang.String getName()>();
v21 = class "Ljava/util/concurrent/Flow$Publisher;";
v22 = virtualinvoke v21.<java.lang.Class: java.lang.String getName()>();
v23 = virtualinvoke v20.<java.lang.String: boolean equals(java.lang.Object)>(v22);
if v23 == 0 goto label07;
v24 = virtualinvoke v17.<io.vertx.codegen.type.ParameterizedTypeInfo: io.vertx.codegen.type.TypeInfo getArg(int)>(0);
v25 = virtualinvoke v24.<io.vertx.codegen.type.TypeInfo: boolean isVariable()>();
if v25 == 0 goto label05;
v26 = "java.util.function.Function.identity()";
goto label06;
label05:
v27 = virtualinvoke v17.<io.vertx.codegen.type.ParameterizedTypeInfo: io.vertx.codegen.type.TypeInfo getArg(int)>(0);
v28 = virtualinvoke v27.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v29 = virtualinvoke v28.<io.vertx.codegen.type.ClassTypeInfo: java.lang.String getName()>();
v26 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v29) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("obj -> (\u0001) obj.getDelegate()");
label06:
v30 = class "Lio/smallrye/mutiny/vertx/ReadStreamSubscriber;";
v31 = virtualinvoke v30.<java.lang.Class: java.lang.String getName()>();
v32 = virtualinvoke v7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v31);
v33 = virtualinvoke v32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".asReadStream(");
v34 = virtualinvoke v16.<io.vertx.codegen.ParamInfo: java.lang.String getName()>();
v35 = virtualinvoke v33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v34);
v36 = virtualinvoke v35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");
v37 = virtualinvoke v36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v26);
virtualinvoke v37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").resume()");
goto label09;
label07:
v38 = virtualinvoke v2.<io.vertx.codegen.MethodInfo: java.util.List getParams()>();
v39 = interfaceinvoke v38.<java.util.List: int size()>();
v40 = v39 - 1;
if v12 >= v40 goto label08;
v41 = virtualinvoke v17.<io.vertx.codegen.type.TypeInfo: boolean isParameterized()>();
if v41 == 0 goto label08;
v42 = virtualinvoke v17.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v43 = virtualinvoke v42.<io.vertx.codegen.type.ClassTypeInfo: java.lang.String getName()>();
v44 = class "Lio/vertx/core/Handler;";
v45 = virtualinvoke v44.<java.lang.Class: java.lang.String getName()>();
v46 = virtualinvoke v43.<java.lang.String: boolean equals(java.lang.Object)>(v45);
if v46 == 0 goto label08;
v47 = staticinvoke <io.smallrye.mutiny.vertx.codegen.lang.TypeHelper: boolean isHandlerOfPromise(io.vertx.codegen.ParamInfo)>(v16);
if v47 != 0 goto label08;
v48 = staticinvoke <io.smallrye.mutiny.vertx.codegen.lang.TypeHelper: boolean isConsumerOfPromise(io.vertx.codegen.ParamInfo)>(v16);
if v48 != 0 goto label08;
v49 = virtualinvoke v16.<io.vertx.codegen.ParamInfo: java.lang.String getName()>();
v50 = virtualinvoke v7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v49);
virtualinvoke v50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::accept");
goto label09;
label08:
v51 = virtualinvoke v16.<io.vertx.codegen.ParamInfo: java.lang.String getName()>();
v52 = staticinvoke <io.smallrye.mutiny.vertx.codegen.lang.CodeGenHelper: java.lang.String genConvParam(java.util.Map,io.vertx.codegen.type.TypeInfo,io.vertx.codegen.MethodInfo,java.lang.String)>(v0, v17, v2, v51);
virtualinvoke v7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v52);
label09:
v12 = v12 + 1;
goto label03;
label10:
virtualinvoke v7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
v53 = virtualinvoke v7.<java.lang.StringBuilder: java.lang.String toString()>();
return v53;
}
private static boolean isUni(io.vertx.codegen.ParamInfo)
{
io.vertx.codegen.type.ClassTypeInfo v4;
io.vertx.codegen.type.TypeInfo v1, v3;
io.vertx.codegen.ParamInfo v0;
java.lang.Class v6;
java.lang.String v5, v7;
boolean v2, v8, v9;
v0 := @parameter0: io.vertx.codegen.ParamInfo;
v1 = virtualinvoke v0.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v2 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: boolean isParameterized()>();
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v4 = virtualinvoke v3.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v5 = virtualinvoke v4.<io.vertx.codegen.type.ClassTypeInfo: java.lang.String getName()>();
v6 = class "Lio/smallrye/mutiny/Uni;";
v7 = virtualinvoke v6.<java.lang.Class: java.lang.String getName()>();
v8 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>(v7);
if v8 == 0 goto label1;
v9 = 1;
goto label2;
label1:
v9 = 0;
label2:
return v9;
}
private void generateBodyOther(io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor)
{
java.util.function.Function v14;
java.lang.String v24, v25, v6, v7, v9;
java.util.stream.Collector v16;
io.vertx.codegen.type.ClassKind v21, v22;
java.io.PrintWriter v10, v12, v23, v26, v27, v3, v4, v8;
io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor v1;
io.vertx.codegen.type.TypeInfo v19, v20;
io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator v0;
java.util.List v11;
java.util.stream.Stream v13, v15;
java.lang.Class v5;
java.lang.Object v17;
io.vertx.codegen.MethodInfo v18, v2;
v0 := @this: io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator;
v1 := @parameter0: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor;
v2 = virtualinvoke v1.<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor: io.vertx.codegen.MethodInfo getMethod()>();
v3 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
virtualinvoke v3.<java.io.PrintWriter: void println(java.lang.String)>(" { ");
v4 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
v5 = class "Lio/smallrye/mutiny/vertx/UniHelper;";
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("    return \u0001.toUni(delegate.");
virtualinvoke v4.<java.io.PrintWriter: void print(java.lang.String)>(v7);
v8 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
v9 = virtualinvoke v2.<io.vertx.codegen.MethodInfo: java.lang.String getName()>();
virtualinvoke v8.<java.io.PrintWriter: void print(java.lang.String)>(v9);
v10 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
virtualinvoke v10.<java.io.PrintWriter: void print(java.lang.String)>("(");
v11 = virtualinvoke v2.<io.vertx.codegen.MethodInfo: java.util.List getParams()>();
v12 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
v13 = interfaceinvoke v11.<java.util.List: java.util.stream.Stream stream()>();
v14 = staticinvoke <io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator$lambda_generateBodyOther_0__2364: java.util.function.Function bootstrap$()>();
v15 = interfaceinvoke v13.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v14);
v16 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(", ");
v17 = interfaceinvoke v15.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v16);
virtualinvoke v12.<java.io.PrintWriter: void print(java.lang.String)>(v17);
v18 = virtualinvoke v1.<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor: io.vertx.codegen.MethodInfo getOriginalMethod()>();
v19 = virtualinvoke v18.<io.vertx.codegen.MethodInfo: io.vertx.codegen.type.TypeInfo getReturnType()>();
v20 = virtualinvoke v19.<io.vertx.codegen.type.ParameterizedTypeInfo: io.vertx.codegen.type.TypeInfo getArg(int)>(0);
v21 = virtualinvoke v20.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v22 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind API>;
if v21 != v22 goto label1;
v23 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
v24 = virtualinvoke v20.<io.vertx.codegen.type.TypeInfo: java.lang.String getSimpleName()>();
v25 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v24) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(").map(x -> \u0001.newInstance(x)));");
virtualinvoke v23.<java.io.PrintWriter: void print(java.lang.String)>(v25);
goto label2;
label1:
v26 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
virtualinvoke v26.<java.io.PrintWriter: void print(java.lang.String)>("));");
label2:
v27 = v0.<io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.io.PrintWriter writer>;
virtualinvoke v27.<java.io.PrintWriter: void println(java.lang.String)>("}");
return;
}
private io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor computeMethodInfoOther(io.vertx.codegen.MethodInfo)
{
io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind v11;
io.vertx.codegen.type.ClassTypeInfo v6;
io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor v10;
io.vertx.codegen.type.TypeInfo v2, v3, v5;
io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator v0;
java.util.List v7;
io.vertx.codegen.type.ParameterizedTypeInfo v4;
io.vertx.codegen.MethodInfo v1, v8, v9;
v0 := @this: io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator;
v1 := @parameter0: io.vertx.codegen.MethodInfo;
v2 = virtualinvoke v1.<io.vertx.codegen.MethodInfo: io.vertx.codegen.type.TypeInfo getReturnType()>();
v3 = virtualinvoke v2.<io.vertx.codegen.type.ParameterizedTypeInfo: io.vertx.codegen.type.TypeInfo getArg(int)>(0);
v4 = new io.vertx.codegen.type.ParameterizedTypeInfo;
v5 = staticinvoke <io.vertx.codegen.type.TypeReflectionFactory: io.vertx.codegen.type.TypeInfo create(java.lang.reflect.Type)>(class "Lio/smallrye/mutiny/Uni;");
v6 = virtualinvoke v5.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v7 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v3);
specialinvoke v4.<io.vertx.codegen.type.ParameterizedTypeInfo: void <init>(io.vertx.codegen.type.ClassTypeInfo,boolean,java.util.List)>(v6, 1, v7);
v8 = virtualinvoke v1.<io.vertx.codegen.MethodInfo: io.vertx.codegen.MethodInfo copy()>();
v9 = virtualinvoke v8.<io.vertx.codegen.MethodInfo: io.vertx.codegen.MethodInfo setReturnType(io.vertx.codegen.type.TypeInfo)>(v4);
v10 = new io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor;
v11 = <io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind UNI>;
specialinvoke v10.<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor: void <init>(io.vertx.codegen.MethodInfo,io.vertx.codegen.MethodInfo,io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind)>(v9, v1, v11);
return v10;
}
private io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor computeMethodInfo(io.vertx.codegen.MethodInfo)
{
io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind v24;
java.util.ArrayList v2;
io.vertx.codegen.type.ParameterizedTypeInfo v14;
int v5, v6;
boolean v17;
io.vertx.codegen.type.ClassTypeInfo v16;
io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor v23;
io.vertx.codegen.type.TypeInfo v10, v11, v12, v13, v15, v8, v9;
io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator v0;
java.util.List v18, v19, v3, v4;
java.lang.Object v7;
io.vertx.codegen.MethodInfo v1, v20, v21, v22;
v0 := @this: io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator;
v1 := @parameter0: io.vertx.codegen.MethodInfo;
v2 = new java.util.ArrayList;
v3 = virtualinvoke v1.<io.vertx.codegen.MethodInfo: java.util.List getParams()>();
specialinvoke v2.<java.util.ArrayList: void <init>(java.util.Collection)>(v3);
v4 = virtualinvoke v1.<io.vertx.codegen.MethodInfo: java.util.List getParams()>();
v5 = interfaceinvoke v4.<java.util.List: int size()>();
v6 = v5 - 1;
v7 = interfaceinvoke v2.<java.util.List: java.lang.Object remove(int)>(v6);
v8 = virtualinvoke v7.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v9 = virtualinvoke v8.<io.vertx.codegen.type.ParameterizedTypeInfo: io.vertx.codegen.type.TypeInfo getArg(int)>(0);
v10 = virtualinvoke v9.<io.vertx.codegen.type.ParameterizedTypeInfo: io.vertx.codegen.type.TypeInfo getArg(int)>(0);
v11 = virtualinvoke v7.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getUnresolvedType()>();
v12 = virtualinvoke v11.<io.vertx.codegen.type.ParameterizedTypeInfo: io.vertx.codegen.type.TypeInfo getArg(int)>(0);
v13 = virtualinvoke v12.<io.vertx.codegen.type.ParameterizedTypeInfo: io.vertx.codegen.type.TypeInfo getArg(int)>(0);
v14 = new io.vertx.codegen.type.ParameterizedTypeInfo;
v15 = staticinvoke <io.vertx.codegen.type.TypeReflectionFactory: io.vertx.codegen.type.TypeInfo create(java.lang.reflect.Type)>(class "Lio/smallrye/mutiny/Uni;");
v16 = virtualinvoke v15.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v17 = virtualinvoke v13.<io.vertx.codegen.type.TypeInfo: boolean isNullable()>();
v18 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v10);
specialinvoke v14.<io.vertx.codegen.type.ParameterizedTypeInfo: void <init>(io.vertx.codegen.type.ClassTypeInfo,boolean,java.util.List)>(v16, v17, v18);
v19 = staticinvoke <io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: java.util.List updateParamInfoIfNeeded(java.util.List)>(v2);
v20 = virtualinvoke v1.<io.vertx.codegen.MethodInfo: io.vertx.codegen.MethodInfo copy()>();
v21 = virtualinvoke v20.<io.vertx.codegen.MethodInfo: io.vertx.codegen.MethodInfo setReturnType(io.vertx.codegen.type.TypeInfo)>(v14);
v22 = virtualinvoke v21.<io.vertx.codegen.MethodInfo: io.vertx.codegen.MethodInfo setParams(java.util.List)>(v19);
v23 = new io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor;
v24 = <io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind: io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind UNI>;
specialinvoke v23.<io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor: void <init>(io.vertx.codegen.MethodInfo,io.vertx.codegen.MethodInfo,io.smallrye.mutiny.vertx.codegen.methods.MutinyMethodDescriptor$MutinyKind)>(v22, v1, v24);
return v23;
}
static java.util.List updateParamInfoIfNeeded(java.util.List)
{
java.util.ArrayList v1;
io.vertx.codegen.ParamInfo v15;
io.vertx.codegen.doc.Text v18;
io.vertx.codegen.type.ParameterizedTypeInfo v10;
int v16;
java.lang.String v17;
boolean v13, v3, v5;
io.vertx.codegen.type.ClassTypeInfo v12;
java.util.Iterator v2;
io.vertx.codegen.type.TypeInfo v11, v6, v7, v8, v9;
java.util.List v0, v14;
java.lang.Object v4;
v0 := @parameter0: java.util.List;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = interfaceinvoke v0.<java.util.List: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label3;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = staticinvoke <io.smallrye.mutiny.vertx.codegen.methods.UniMethodGenerator: boolean isHandler(io.vertx.codegen.ParamInfo)>(v4);
if v5 == 0 goto label2;
v6 = virtualinvoke v4.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v7 = virtualinvoke v6.<io.vertx.codegen.type.ParameterizedTypeInfo: io.vertx.codegen.type.TypeInfo getArg(int)>(0);
v8 = virtualinvoke v4.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getUnresolvedType()>();
v9 = virtualinvoke v8.<io.vertx.codegen.type.ParameterizedTypeInfo: io.vertx.codegen.type.TypeInfo getArg(int)>(0);
v10 = new io.vertx.codegen.type.ParameterizedTypeInfo;
v11 = staticinvoke <io.vertx.codegen.type.TypeReflectionFactory: io.vertx.codegen.type.TypeInfo create(java.lang.reflect.Type)>(class "Ljava/util/function/Consumer;");
v12 = virtualinvoke v11.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v13 = virtualinvoke v9.<io.vertx.codegen.type.TypeInfo: boolean isNullable()>();
v14 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v7);
specialinvoke v10.<io.vertx.codegen.type.ParameterizedTypeInfo: void <init>(io.vertx.codegen.type.ClassTypeInfo,boolean,java.util.List)>(v12, v13, v14);
v15 = new io.vertx.codegen.ParamInfo;
v16 = virtualinvoke v4.<io.vertx.codegen.ParamInfo: int getIndex()>();
v17 = virtualinvoke v4.<io.vertx.codegen.ParamInfo: java.lang.String getName()>();
v18 = virtualinvoke v4.<io.vertx.codegen.ParamInfo: io.vertx.codegen.doc.Text getDescription()>();
specialinvoke v15.<io.vertx.codegen.ParamInfo: void <init>(int,java.lang.String,io.vertx.codegen.doc.Text,io.vertx.codegen.type.TypeInfo)>(v16, v17, v18, v10);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v15);
goto label1;
label2:
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v4);
goto label1;
label3:
return v1;
}
private static boolean isHandler(io.vertx.codegen.ParamInfo)
{
io.vertx.codegen.type.ClassTypeInfo v3;
io.vertx.codegen.type.TypeInfo v1;
io.vertx.codegen.ParamInfo v0;
java.lang.Class v5;
java.lang.String v4, v6;
boolean v2, v7, v8;
v0 := @parameter0: io.vertx.codegen.ParamInfo;
v1 = virtualinvoke v0.<io.vertx.codegen.ParamInfo: io.vertx.codegen.type.TypeInfo getType()>();
v2 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: boolean isParameterized()>();
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v4 = virtualinvoke v3.<io.vertx.codegen.type.ClassTypeInfo: java.lang.String getName()>();
v5 = class "Lio/vertx/core/Handler;";
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
v7 = virtualinvoke v4.<java.lang.String: boolean equals(java.lang.Object)>(v6);
if v7 == 0 goto label1;
v8 = 1;
goto label2;
label1:
v8 = 0;
label2:
return v8;
}
}