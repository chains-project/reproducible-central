public class io.smallrye.stork.integration.DefaultStorkInfrastructure extends java.lang.Object implements io.smallrye.stork.spi.StorkInfrastructure
{
private final java.util.Map utilities;
public void <init>()
{
java.util.concurrent.ConcurrentHashMap v1;
io.smallrye.stork.integration.DefaultStorkInfrastructure v0;
v0 := @this: io.smallrye.stork.integration.DefaultStorkInfrastructure;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.smallrye.stork.integration.DefaultStorkInfrastructure: java.util.Map utilities> = v1;
return;
}
public java.lang.Object get(java.lang.Class, java.util.function.Supplier)
{
io.smallrye.stork.integration.DefaultStorkInfrastructure v0;
java.util.Map v3;
java.lang.Class v1;
java.lang.Object v5;
java.util.function.Function v4;
java.util.function.Supplier v2;
v0 := @this: io.smallrye.stork.integration.DefaultStorkInfrastructure;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.util.function.Supplier;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "utilityClass cannot be null");
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "defaultSupplier cannot be null");
v3 = v0.<io.smallrye.stork.integration.DefaultStorkInfrastructure: java.util.Map utilities>;
v4 = staticinvoke <io.smallrye.stork.integration.DefaultStorkInfrastructure$lambda_get_0__603: java.util.function.Function bootstrap$(java.util.function.Supplier)>(v2);
v5 = interfaceinvoke v3.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v1, v4);
return v5;
}
}