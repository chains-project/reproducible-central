class io.vertx.codegen.TypeValidator extends java.lang.Object
{
void <init>()
{
io.vertx.codegen.TypeValidator v0;
v0 := @this: io.vertx.codegen.TypeValidator;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void validateParamType(javax.lang.model.element.ExecutableElement, io.vertx.codegen.type.TypeInfo, boolean)
{
io.vertx.codegen.type.TypeInfo v1;
javax.lang.model.element.ExecutableElement v0;
io.vertx.codegen.GenException v7;
java.lang.String v8;
boolean v2, v3, v4, v5, v6;
v0 := @parameter0: javax.lang.model.element.ExecutableElement;
v1 := @parameter1: io.vertx.codegen.type.TypeInfo;
v2 := @parameter2: boolean;
v3 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidNonCallableType(javax.lang.model.element.Element,io.vertx.codegen.type.TypeInfo,boolean,boolean,boolean,boolean)>(v0, v1, 1, 0, 1, v2);
if v3 == 0 goto label1;
return;
label1:
v4 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidClassTypeParam(javax.lang.model.element.ExecutableElement,io.vertx.codegen.type.TypeInfo)>(v0, v1);
if v4 == 0 goto label2;
return;
label2:
v5 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidHandlerType(javax.lang.model.element.Element,io.vertx.codegen.type.TypeInfo,boolean)>(v0, v1, v2);
if v5 == 0 goto label3;
return;
label3:
v6 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidFunctionType(javax.lang.model.element.Element,io.vertx.codegen.type.TypeInfo,boolean)>(v0, v1, v2);
if v6 == 0 goto label4;
return;
label4:
v7 = new io.vertx.codegen.GenException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.vertx.codegen.type.TypeInfo)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("type \u0001 is not legal for use for a parameter in code generation");
specialinvoke v7.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v0, v8);
throw v7;
}
static void validateReturnType(javax.lang.model.element.ExecutableElement, io.vertx.codegen.type.TypeInfo, boolean)
{
io.vertx.codegen.type.TypeInfo v1;
javax.lang.model.element.ExecutableElement v0;
io.vertx.codegen.GenException v6;
java.lang.String v7;
boolean v2, v3, v4, v5;
v0 := @parameter0: javax.lang.model.element.ExecutableElement;
v1 := @parameter1: io.vertx.codegen.type.TypeInfo;
v2 := @parameter2: boolean;
v3 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: boolean isVoid()>();
if v3 == 0 goto label1;
return;
label1:
v4 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidNonCallableType(javax.lang.model.element.Element,io.vertx.codegen.type.TypeInfo,boolean,boolean,boolean,boolean)>(v0, v1, 0, 1, 1, v2);
if v4 == 0 goto label2;
return;
label2:
v5 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidHandlerType(javax.lang.model.element.Element,io.vertx.codegen.type.TypeInfo,boolean)>(v0, v1, v2);
if v5 == 0 goto label3;
return;
label3:
v6 = new io.vertx.codegen.GenException;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.vertx.codegen.type.TypeInfo)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("type \u0001 is not legal for use for a return type in code generation");
specialinvoke v6.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v0, v7);
throw v6;
}
static void validateConstantType(javax.lang.model.util.Types, javax.lang.model.element.VariableElement, io.vertx.codegen.type.TypeInfo, javax.lang.model.type.TypeMirror, boolean)
{
io.vertx.codegen.type.TypeInfo v2;
javax.lang.model.element.VariableElement v1;
javax.lang.model.util.Types v0;
io.vertx.codegen.GenException v7;
javax.lang.model.type.TypeMirror v3;
java.lang.String v8;
boolean v4, v5, v6;
v0 := @parameter0: javax.lang.model.util.Types;
v1 := @parameter1: javax.lang.model.element.VariableElement;
v2 := @parameter2: io.vertx.codegen.type.TypeInfo;
v3 := @parameter3: javax.lang.model.type.TypeMirror;
v4 := @parameter4: boolean;
v5 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidNonCallableType(javax.lang.model.element.Element,io.vertx.codegen.type.TypeInfo,boolean,boolean,boolean,boolean)>(v1, v2, 0, 1, 1, v4);
if v5 == 0 goto label1;
return;
label1:
v6 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidKotlinCompanionObject(javax.lang.model.util.Types,javax.lang.model.element.VariableElement)>(v0, v1);
if v6 == 0 goto label2;
return;
label2:
v7 = new io.vertx.codegen.GenException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.vertx.codegen.type.TypeInfo)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("type \u0001 is not legal for use for a constant type in code generation");
specialinvoke v7.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v1, v8);
throw v7;
}
private static boolean isValidNonCallableType(javax.lang.model.element.Element, io.vertx.codegen.type.TypeInfo, boolean, boolean, boolean, boolean)
{
io.vertx.codegen.type.DataObjectInfo v7;
io.vertx.codegen.type.ClassKind v20, v21, v22, v24, v27, v28, v30, v31;
boolean v14, v15, v2, v23, v25, v26, v29, v3, v32, v33, v34, v35, v4, v5, v6, v8, v9;
io.vertx.codegen.type.TypeInfo v1;
javax.lang.model.element.Element v0;
io.vertx.codegen.GenException v10, v12, v16, v18;
java.lang.String v11, v13, v17, v19;
v0 := @parameter0: javax.lang.model.element.Element;
v1 := @parameter1: io.vertx.codegen.type.TypeInfo;
v2 := @parameter2: boolean;
v3 := @parameter3: boolean;
v4 := @parameter4: boolean;
v5 := @parameter5: boolean;
v6 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: boolean isDataObjectHolder()>();
if v6 == 0 goto label05;
v7 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.DataObjectInfo getDataObject()>();
if v2 == 0 goto label02;
v8 = virtualinvoke v7.<io.vertx.codegen.type.DataObjectInfo: boolean isDeserializable()>();
if v8 != 0 goto label02;
v9 = virtualinvoke v7.<io.vertx.codegen.type.DataObjectInfo: boolean isAnnotated()>();
if v9 == 0 goto label01;
v10 = new io.vertx.codegen.GenException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.vertx.codegen.type.TypeInfo)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("annotated @DataObject \u0001 requires a JSON constructor");
specialinvoke v10.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v0, v11);
throw v10;
label01:
v12 = new io.vertx.codegen.GenException;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.vertx.codegen.type.TypeInfo)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("type \u0001 requires a JSON deserializer method");
specialinvoke v12.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v0, v13);
throw v12;
label02:
if v3 == 0 goto label04;
v14 = virtualinvoke v7.<io.vertx.codegen.type.DataObjectInfo: boolean isSerializable()>();
if v14 != 0 goto label04;
v15 = virtualinvoke v7.<io.vertx.codegen.type.DataObjectInfo: boolean isAnnotated()>();
if v15 == 0 goto label03;
v16 = new io.vertx.codegen.GenException;
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.vertx.codegen.type.TypeInfo)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("annotated @DataObject \u0001 requires a toJson() method");
specialinvoke v16.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v0, v17);
throw v16;
label03:
v18 = new io.vertx.codegen.GenException;
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.vertx.codegen.type.TypeInfo)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("type \u0001 requires a JSON serializer method");
specialinvoke v18.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v0, v19);
throw v18;
label04:
return 1;
label05:
v20 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v21 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind VOID>;
if v20 != v21 goto label06;
return 1;
label06:
v22 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v23 = v22.<io.vertx.codegen.type.ClassKind: boolean basic>;
if v23 == 0 goto label07;
return 1;
label07:
v24 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v25 = v24.<io.vertx.codegen.type.ClassKind: boolean json>;
if v25 == 0 goto label08;
return 1;
label08:
v26 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidEnum(io.vertx.codegen.type.TypeInfo)>(v1);
if v26 == 0 goto label09;
return 1;
label09:
v27 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v28 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind THROWABLE>;
if v27 != v28 goto label10;
return 1;
label10:
v29 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: boolean isVariable()>();
if v29 == 0 goto label11;
return 1;
label11:
v30 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v31 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind OBJECT>;
if v30 != v31 goto label12;
return 1;
label12:
v32 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidFutureType(javax.lang.model.element.Element,io.vertx.codegen.type.TypeInfo,boolean)>(v0, v1, v5);
if v32 == 0 goto label13;
return 1;
label13:
v33 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidVertxGenInterface(javax.lang.model.element.Element,io.vertx.codegen.type.TypeInfo,boolean,boolean)>(v0, v1, v4, v5);
if v33 == 0 goto label14;
return 1;
label14:
v34 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidOtherType(io.vertx.codegen.type.TypeInfo,boolean)>(v1, v5);
if v34 == 0 goto label15;
return 1;
label15:
if v4 == 0 goto label16;
v35 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidContainer(javax.lang.model.element.Element,io.vertx.codegen.type.TypeInfo,boolean)>(v0, v1, v5);
if v35 == 0 goto label16;
return 1;
label16:
return 0;
}
private static boolean isValidKotlinCompanionObject(javax.lang.model.util.Types, javax.lang.model.element.VariableElement)
{
javax.lang.model.element.ElementKind v5, v6;
javax.lang.model.element.VariableElement v1;
javax.lang.model.element.Element v3, v4, v8;
javax.lang.model.util.Types v0;
javax.lang.model.type.TypeMirror v2, v7, v9;
boolean v10;
v0 := @parameter0: javax.lang.model.util.Types;
v1 := @parameter1: javax.lang.model.element.VariableElement;
v2 = interfaceinvoke v1.<javax.lang.model.element.VariableElement: javax.lang.model.type.TypeMirror asType()>();
v3 = interfaceinvoke v0.<javax.lang.model.util.Types: javax.lang.model.element.Element asElement(javax.lang.model.type.TypeMirror)>(v2);
v4 = interfaceinvoke v3.<javax.lang.model.element.Element: javax.lang.model.element.Element getEnclosingElement()>();
v5 = interfaceinvoke v4.<javax.lang.model.element.Element: javax.lang.model.element.ElementKind getKind()>();
v6 = <javax.lang.model.element.ElementKind: javax.lang.model.element.ElementKind INTERFACE>;
if v5 != v6 goto label1;
v7 = interfaceinvoke v4.<javax.lang.model.element.Element: javax.lang.model.type.TypeMirror asType()>();
v8 = interfaceinvoke v1.<javax.lang.model.element.VariableElement: javax.lang.model.element.Element getEnclosingElement()>();
v9 = interfaceinvoke v8.<javax.lang.model.element.Element: javax.lang.model.type.TypeMirror asType()>();
v10 = interfaceinvoke v0.<javax.lang.model.util.Types: boolean isSameType(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>(v7, v9);
return v10;
label1:
return 0;
}
private static boolean isValidEnum(io.vertx.codegen.type.TypeInfo)
{
io.vertx.codegen.type.TypeInfo v0;
io.vertx.codegen.type.ClassKind v1, v2;
boolean v3;
v0 := @parameter0: io.vertx.codegen.type.TypeInfo;
v1 = virtualinvoke v0.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v2 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind ENUM>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
private static boolean isValidClassTypeParam(javax.lang.model.element.ExecutableElement, io.vertx.codegen.type.TypeInfo)
{
java.util.Iterator v8;
io.vertx.codegen.type.TypeInfo v1, v5;
javax.lang.model.element.ExecutableElement v0;
java.util.List v7;
java.lang.Object v10;
java.lang.String v12, v13;
io.vertx.codegen.type.ClassKind v2, v3;
boolean v14, v4, v6, v9;
javax.lang.model.element.Name v11;
v0 := @parameter0: javax.lang.model.element.ExecutableElement;
v1 := @parameter1: io.vertx.codegen.type.TypeInfo;
v2 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v3 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind CLASS_TYPE>;
if v2 != v3 goto label2;
v4 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: boolean isParameterized()>();
if v4 == 0 goto label2;
v5 = virtualinvoke v1.<io.vertx.codegen.type.ParameterizedTypeInfo: io.vertx.codegen.type.TypeInfo getArg(int)>(0);
v6 = virtualinvoke v5.<io.vertx.codegen.type.TypeInfo: boolean isVariable()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v0.<javax.lang.model.element.ExecutableElement: java.util.List getTypeParameters()>();
v8 = interfaceinvoke v7.<java.util.List: java.util.Iterator iterator()>();
label1:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label2;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = interfaceinvoke v10.<javax.lang.model.element.TypeParameterElement: javax.lang.model.element.Name getSimpleName()>();
v12 = virtualinvoke v11.<java.lang.Object: java.lang.String toString()>();
v13 = virtualinvoke v5.<io.vertx.codegen.type.TypeVariableInfo: java.lang.String getName()>();
v14 = virtualinvoke v12.<java.lang.String: boolean equals(java.lang.Object)>(v13);
if v14 == 0 goto label1;
return 1;
label2:
return 0;
}
private static boolean isValidContainer(javax.lang.model.element.Element, io.vertx.codegen.type.TypeInfo, boolean)
{
io.vertx.codegen.type.ClassKind v11, v12, v5, v6;
boolean v14, v15, v2, v4;
io.vertx.codegen.type.TypeInfo v1;
java.lang.Class[] v3;
javax.lang.model.element.Element v0;
java.util.List v13, v7, v9;
java.lang.Object v10, v8;
v0 := @parameter0: javax.lang.model.element.Element;
v1 := @parameter1: io.vertx.codegen.type.TypeInfo;
v2 := @parameter2: boolean;
v3 = newarray (java.lang.Class)[3];
v3[0] = class "Ljava/util/List;";
v3[1] = class "Ljava/util/Set;";
v3[2] = class "Ljava/util/Map;";
v4 = staticinvoke <io.vertx.codegen.TypeValidator: boolean rawTypeIs(io.vertx.codegen.type.TypeInfo,java.lang.Class[])>(v1, v3);
if v4 == 0 goto label2;
v5 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v6 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind MAP>;
if v5 == v6 goto label1;
v7 = virtualinvoke v1.<io.vertx.codegen.type.ParameterizedTypeInfo: java.util.List getArgs()>();
v8 = interfaceinvoke v7.<java.util.List: java.lang.Object get(int)>(0);
goto label2;
label1:
v9 = virtualinvoke v1.<io.vertx.codegen.type.ParameterizedTypeInfo: java.util.List getArgs()>();
v10 = interfaceinvoke v9.<java.util.List: java.lang.Object get(int)>(0);
v11 = virtualinvoke v10.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v12 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind STRING>;
if v11 != v12 goto label2;
v13 = virtualinvoke v1.<io.vertx.codegen.type.ParameterizedTypeInfo: java.util.List getArgs()>();
interfaceinvoke v13.<java.util.List: java.lang.Object get(int)>(1);
label2:
if v8 == null goto label3;
v14 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidContainerComponent(javax.lang.model.element.Element,io.vertx.codegen.type.TypeInfo,boolean)>(v0, v8, v2);
if v14 == 0 goto label3;
v15 = 1;
goto label4;
label3:
v15 = 0;
label4:
return v15;
}
private static boolean isValidContainerComponent(javax.lang.model.element.Element, io.vertx.codegen.type.TypeInfo, boolean)
{
io.vertx.codegen.type.TypeInfo v1;
javax.lang.model.element.Element v0;
boolean v2, v3;
v0 := @parameter0: javax.lang.model.element.Element;
v1 := @parameter1: io.vertx.codegen.type.TypeInfo;
v2 := @parameter2: boolean;
v3 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidNonCallableType(javax.lang.model.element.Element,io.vertx.codegen.type.TypeInfo,boolean,boolean,boolean,boolean)>(v0, v1, 1, 1, 0, v2);
return v3;
}
private static boolean isValidVertxGenTypeArgument(javax.lang.model.element.Element, io.vertx.codegen.type.TypeInfo, boolean)
{
io.vertx.codegen.type.TypeInfo v1;
javax.lang.model.element.Element v0;
boolean v2, v3;
v0 := @parameter0: javax.lang.model.element.Element;
v1 := @parameter1: io.vertx.codegen.type.TypeInfo;
v2 := @parameter2: boolean;
v3 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidNonCallableType(javax.lang.model.element.Element,io.vertx.codegen.type.TypeInfo,boolean,boolean,boolean,boolean)>(v0, v1, 0, 0, 1, v2);
return v3;
}
private static boolean isValidOtherType(io.vertx.codegen.type.TypeInfo, boolean)
{
io.vertx.codegen.type.TypeInfo v0;
io.vertx.codegen.type.ClassKind v2, v3;
boolean v1, v4;
v0 := @parameter0: io.vertx.codegen.type.TypeInfo;
v1 := @parameter1: boolean;
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v3 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind OTHER>;
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
private static boolean isValidVertxGenInterface(javax.lang.model.element.Element, io.vertx.codegen.type.TypeInfo, boolean, boolean)
{
java.util.function.Predicate v9;
io.vertx.codegen.type.TypeInfo v1;
javax.lang.model.element.Element v0;
java.util.List v7;
java.util.stream.Stream v8;
io.vertx.codegen.type.ClassKind v4, v5;
boolean v10, v11, v2, v3, v6;
v0 := @parameter0: javax.lang.model.element.Element;
v1 := @parameter1: io.vertx.codegen.type.TypeInfo;
v2 := @parameter2: boolean;
v3 := @parameter3: boolean;
v4 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v5 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind API>;
if v4 != v5 goto label4;
v6 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: boolean isParameterized()>();
if v6 == 0 goto label3;
if v2 == 0 goto label1;
v7 = virtualinvoke v1.<io.vertx.codegen.type.ParameterizedTypeInfo: java.util.List getArgs()>();
v8 = interfaceinvoke v7.<java.util.List: java.util.stream.Stream stream()>();
v9 = staticinvoke <io.vertx.codegen.TypeValidator$lambda_isValidVertxGenInterface_0__2525: java.util.function.Predicate bootstrap$(javax.lang.model.element.Element,boolean)>(v0, v3);
v10 = interfaceinvoke v8.<java.util.stream.Stream: boolean noneMatch(java.util.function.Predicate)>(v9);
if v10 == 0 goto label1;
v11 = 1;
goto label2;
label1:
v11 = 0;
label2:
return v11;
label3:
return 1;
label4:
return 0;
}
private static boolean isValidFutureType(javax.lang.model.element.Element, io.vertx.codegen.type.TypeInfo, boolean)
{
java.util.function.Predicate v7;
io.vertx.codegen.type.TypeInfo v1;
javax.lang.model.element.Element v0;
java.util.List v5;
java.util.stream.Stream v6;
io.vertx.codegen.type.ClassKind v3, v4;
boolean v2, v8;
v0 := @parameter0: javax.lang.model.element.Element;
v1 := @parameter1: io.vertx.codegen.type.TypeInfo;
v2 := @parameter2: boolean;
v3 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v4 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind FUTURE>;
if v3 != v4 goto label1;
v5 = virtualinvoke v1.<io.vertx.codegen.type.ParameterizedTypeInfo: java.util.List getArgs()>();
v6 = interfaceinvoke v5.<java.util.List: java.util.stream.Stream stream()>();
v7 = staticinvoke <io.vertx.codegen.TypeValidator$lambda_isValidFutureType_1__2526: java.util.function.Predicate bootstrap$(javax.lang.model.element.Element,boolean)>(v0, v2);
v8 = interfaceinvoke v6.<java.util.stream.Stream: boolean allMatch(java.util.function.Predicate)>(v7);
return v8;
label1:
return 0;
}
private static boolean isValidFunctionType(javax.lang.model.element.Element, io.vertx.codegen.type.TypeInfo, boolean)
{
io.vertx.codegen.type.TypeInfo v1, v3;
javax.lang.model.element.Element v0;
java.util.List v6, v9;
java.lang.Object v10, v7;
io.vertx.codegen.type.ClassKind v4, v5;
boolean v11, v2, v8;
v0 := @parameter0: javax.lang.model.element.Element;
v1 := @parameter1: io.vertx.codegen.type.TypeInfo;
v2 := @parameter2: boolean;
v3 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.TypeInfo getErased()>();
v4 = virtualinvoke v3.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v5 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind FUNCTION>;
if v4 != v5 goto label1;
v6 = virtualinvoke v1.<io.vertx.codegen.type.ParameterizedTypeInfo: java.util.List getArgs()>();
v7 = interfaceinvoke v6.<java.util.List: java.lang.Object get(int)>(0);
v8 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidCallbackValueType(javax.lang.model.element.Element,io.vertx.codegen.type.TypeInfo,boolean)>(v0, v7, v2);
if v8 == 0 goto label1;
v9 = virtualinvoke v1.<io.vertx.codegen.type.ParameterizedTypeInfo: java.util.List getArgs()>();
v10 = interfaceinvoke v9.<java.util.List: java.lang.Object get(int)>(1);
v11 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidNonCallableType(javax.lang.model.element.Element,io.vertx.codegen.type.TypeInfo,boolean,boolean,boolean,boolean)>(v0, v10, 1, 0, 1, v2);
return v11;
label1:
return 0;
}
private static boolean isValidHandlerType(javax.lang.model.element.Element, io.vertx.codegen.type.TypeInfo, boolean)
{
io.vertx.codegen.type.ClassKind v10, v11, v4, v5;
boolean v12, v15, v2, v8;
io.vertx.codegen.type.TypeInfo v1, v16, v3, v9;
javax.lang.model.element.Element v0;
java.util.List v13, v6;
java.lang.Object v14, v7;
v0 := @parameter0: javax.lang.model.element.Element;
v1 := @parameter1: io.vertx.codegen.type.TypeInfo;
v2 := @parameter2: boolean;
v3 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.TypeInfo getErased()>();
v4 = virtualinvoke v3.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v5 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind HANDLER>;
if v4 != v5 goto label2;
v6 = virtualinvoke v1.<io.vertx.codegen.type.ParameterizedTypeInfo: java.util.List getArgs()>();
v7 = interfaceinvoke v6.<java.util.List: java.lang.Object get(int)>(0);
v8 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidCallbackValueType(javax.lang.model.element.Element,io.vertx.codegen.type.TypeInfo,boolean)>(v0, v7, v2);
if v8 == 0 goto label1;
return 1;
label1:
v9 = virtualinvoke v7.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.TypeInfo getErased()>();
v10 = virtualinvoke v9.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v11 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind ASYNC_RESULT>;
if v10 != v11 goto label2;
v12 = virtualinvoke v7.<io.vertx.codegen.type.TypeInfo: boolean isNullable()>();
if v12 != 0 goto label2;
v13 = virtualinvoke v16.<io.vertx.codegen.type.ParameterizedTypeInfo: java.util.List getArgs()>();
v14 = interfaceinvoke v13.<java.util.List: java.lang.Object get(int)>(0);
v15 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidCallbackValueType(javax.lang.model.element.Element,io.vertx.codegen.type.TypeInfo,boolean)>(v0, v14, v2);
if v15 == 0 goto label2;
return 1;
label2:
return 0;
}
private static boolean isValidCallbackValueType(javax.lang.model.element.Element, io.vertx.codegen.type.TypeInfo, boolean)
{
io.vertx.codegen.type.TypeInfo v1;
javax.lang.model.element.Element v0;
boolean v2, v3;
v0 := @parameter0: javax.lang.model.element.Element;
v1 := @parameter1: io.vertx.codegen.type.TypeInfo;
v2 := @parameter2: boolean;
v3 = staticinvoke <io.vertx.codegen.TypeValidator: boolean isValidNonCallableType(javax.lang.model.element.Element,io.vertx.codegen.type.TypeInfo,boolean,boolean,boolean,boolean)>(v0, v1, 0, 1, 1, v2);
return v3;
}
private static transient boolean rawTypeIs(io.vertx.codegen.type.TypeInfo, java.lang.Class[])
{
io.vertx.codegen.type.ClassTypeInfo v3;
io.vertx.codegen.type.TypeInfo v0;
java.lang.Class[] v1;
int v5, v6;
java.lang.Class v7;
java.lang.String v4, v8;
boolean v2, v9;
v0 := @parameter0: io.vertx.codegen.type.TypeInfo;
v1 := @parameter1: java.lang.Class[];
v2 = v0 instanceof io.vertx.codegen.type.ParameterizedTypeInfo;
if v2 == 0 goto label3;
v3 = virtualinvoke v0.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v4 = virtualinvoke v3.<io.vertx.codegen.type.ClassTypeInfo: java.lang.String getName()>();
v5 = lengthof v1;
v6 = 0;
label1:
if v6 >= v5 goto label3;
v7 = v1[v6];
v8 = virtualinvoke v7.<java.lang.Class: java.lang.String getName()>();
v9 = virtualinvoke v4.<java.lang.String: boolean equals(java.lang.Object)>(v8);
if v9 == 0 goto label2;
return 1;
label2:
v6 = v6 + 1;
goto label1;
label3:
return 0;
}
}