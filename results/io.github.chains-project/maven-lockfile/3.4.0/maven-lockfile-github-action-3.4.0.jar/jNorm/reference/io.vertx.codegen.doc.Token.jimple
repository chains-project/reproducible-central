public abstract class io.vertx.codegen.doc.Token extends java.lang.Object
{
private static final java.util.regex.Pattern TOKEN_SPLITTER;
private static final java.util.regex.Pattern INLINE_TAG_PATTERN;
final java.lang.String value;
private static final java.util.regex.Pattern LINK_REFERENCE_PATTERN;
public static java.util.List tokenize(java.lang.String)
{
java.util.regex.Matcher v3;
java.lang.String v0;
java.util.regex.Pattern v2;
java.util.ArrayList v1;
v0 := @parameter0: java.lang.String;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = <io.vertx.codegen.doc.Token: java.util.regex.Pattern TOKEN_SPLITTER>;
v3 = virtualinvoke v2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v0);
staticinvoke <io.vertx.codegen.doc.Token: void parse(java.lang.String,int,java.util.regex.Matcher,java.util.ArrayList)>(v0, 0, v3, v1);
return v1;
}
private static void parse(java.lang.String, int, java.util.regex.Matcher, java.util.ArrayList)
{
java.lang.AssertionError v16;
java.util.ArrayList v3;
java.util.regex.Matcher v14, v2;
io.vertx.codegen.doc.Tag v19;
int v1, v10, v23, v24, v26, v5, v7, v9;
io.vertx.codegen.doc.Token$Text v25, v6;
java.lang.String v0, v11, v12, v17, v20, v21, v27, v8;
io.vertx.codegen.doc.Token$InlineTag v18;
boolean v15, v4;
io.vertx.codegen.doc.Token$LineBreak v22;
java.util.regex.Pattern v13;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: java.util.regex.Matcher;
v3 := @parameter3: java.util.ArrayList;
v4 = virtualinvoke v2.<java.util.regex.Matcher: boolean find()>();
if v4 == 0 goto label5;
v5 = virtualinvoke v2.<java.util.regex.Matcher: int start()>();
if v5 <= v1 goto label1;
v6 = new io.vertx.codegen.doc.Token$Text;
v7 = virtualinvoke v2.<java.util.regex.Matcher: int start()>();
v8 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v1, v7);
specialinvoke v6.<io.vertx.codegen.doc.Token$Text: void <init>(java.lang.String)>(v8);
virtualinvoke v3.<java.util.ArrayList: boolean add(java.lang.Object)>(v6);
label1:
v9 = virtualinvoke v2.<java.util.regex.Matcher: int start()>();
v10 = virtualinvoke v2.<java.util.regex.Matcher: int end()>();
v11 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v9, v10);
v12 = virtualinvoke v2.<java.util.regex.Matcher: java.lang.String group(int)>(1);
if v12 == null goto label3;
v13 = <io.vertx.codegen.doc.Token: java.util.regex.Pattern INLINE_TAG_PATTERN>;
v14 = virtualinvoke v13.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v11);
v15 = virtualinvoke v14.<java.util.regex.Matcher: boolean matches()>();
if v15 != 0 goto label2;
v16 = new java.lang.AssertionError;
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("bug -->\u0001<--");
specialinvoke v16.<java.lang.AssertionError: void <init>(java.lang.Object)>(v17);
throw v16;
label2:
v18 = new io.vertx.codegen.doc.Token$InlineTag;
v19 = new io.vertx.codegen.doc.Tag;
v20 = virtualinvoke v14.<java.util.regex.Matcher: java.lang.String group(int)>(1);
v21 = virtualinvoke v14.<java.util.regex.Matcher: java.lang.String group(int)>(2);
specialinvoke v19.<io.vertx.codegen.doc.Tag: void <init>(java.lang.String,java.lang.String)>(v20, v21);
specialinvoke v18.<io.vertx.codegen.doc.Token$InlineTag: void <init>(java.lang.String,io.vertx.codegen.doc.Tag)>(v11, v19);
virtualinvoke v3.<java.util.ArrayList: boolean add(java.lang.Object)>(v18);
goto label4;
label3:
v22 = new io.vertx.codegen.doc.Token$LineBreak;
specialinvoke v22.<io.vertx.codegen.doc.Token$LineBreak: void <init>(java.lang.String)>(v11);
virtualinvoke v3.<java.util.ArrayList: boolean add(java.lang.Object)>(v22);
label4:
v23 = virtualinvoke v2.<java.util.regex.Matcher: int end()>();
staticinvoke <io.vertx.codegen.doc.Token: void parse(java.lang.String,int,java.util.regex.Matcher,java.util.ArrayList)>(v0, v23, v2, v3);
goto label6;
label5:
v24 = virtualinvoke v0.<java.lang.String: int length()>();
if v1 >= v24 goto label6;
v25 = new io.vertx.codegen.doc.Token$Text;
v26 = virtualinvoke v0.<java.lang.String: int length()>();
v27 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v1, v26);
specialinvoke v25.<io.vertx.codegen.doc.Token$Text: void <init>(java.lang.String)>(v27);
virtualinvoke v3.<java.util.ArrayList: boolean add(java.lang.Object)>(v25);
label6:
return;
}
public void <init>(java.lang.String)
{
java.lang.String v1;
io.vertx.codegen.doc.Token v0;
v0 := @this: io.vertx.codegen.doc.Token;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.codegen.doc.Token: java.lang.String value> = v1;
return;
}
public boolean isText()
{
io.vertx.codegen.doc.Token v0;
v0 := @this: io.vertx.codegen.doc.Token;
return 0;
}
public boolean isInlineTag()
{
io.vertx.codegen.doc.Token v0;
v0 := @this: io.vertx.codegen.doc.Token;
return 0;
}
public boolean isLineBreak()
{
io.vertx.codegen.doc.Token v0;
v0 := @this: io.vertx.codegen.doc.Token;
return 0;
}
public java.lang.String getValue()
{
java.lang.String v1;
io.vertx.codegen.doc.Token v0;
v0 := @this: io.vertx.codegen.doc.Token;
v1 = v0.<io.vertx.codegen.doc.Token: java.lang.String value>;
return v1;
}
public static java.util.function.Function tagMapper(javax.lang.model.util.Elements, javax.lang.model.util.Types, javax.lang.model.element.TypeElement)
{
io.vertx.codegen.type.TypeMirrorFactory v3;
javax.lang.model.element.TypeElement v2;
javax.lang.model.util.Types v1;
java.util.function.Function v4;
javax.lang.model.util.Elements v0;
v0 := @parameter0: javax.lang.model.util.Elements;
v1 := @parameter1: javax.lang.model.util.Types;
v2 := @parameter2: javax.lang.model.element.TypeElement;
v3 = new io.vertx.codegen.type.TypeMirrorFactory;
specialinvoke v3.<io.vertx.codegen.type.TypeMirrorFactory: void <init>(javax.lang.model.util.Elements,javax.lang.model.util.Types)>(v0, v1);
v4 = staticinvoke <io.vertx.codegen.doc.Token$lambda_tagMapper_0__2538: java.util.function.Function bootstrap$(javax.lang.model.util.Elements,javax.lang.model.util.Types,javax.lang.model.element.TypeElement,io.vertx.codegen.type.TypeMirrorFactory)>(v0, v1, v2, v3);
return v4;
}
public static java.lang.String toHtml(java.util.List, java.lang.String, java.util.function.Function, java.lang.String)
{
java.io.PrintWriter v5;
java.util.List v0;
java.io.StringWriter v4;
java.lang.String v1, v3, v6;
java.util.function.Function v2;
v0 := @parameter0: java.util.List;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.util.function.Function;
v3 := @parameter3: java.lang.String;
v4 = new java.io.StringWriter;
specialinvoke v4.<java.io.StringWriter: void <init>()>();
v5 = new java.io.PrintWriter;
specialinvoke v5.<java.io.PrintWriter: void <init>(java.io.Writer)>(v4);
staticinvoke <io.vertx.codegen.doc.Token: void toHtml(java.util.List,java.lang.String,java.util.function.Function,java.lang.String,java.io.PrintWriter)>(v0, v1, v2, v3, v5);
v6 = virtualinvoke v4.<java.io.StringWriter: java.lang.String toString()>();
return v6;
}
public static void toHtml(java.util.List, java.lang.String, java.util.function.Function, java.lang.String, java.io.PrintWriter)
{
java.util.function.Function v2;
io.vertx.codegen.doc.Token v27;
io.vertx.codegen.doc.Tag v12;
java.lang.String v1, v11, v15, v17, v21, v24, v25, v3;
boolean v10, v13, v16, v18, v22, v5, v7, v9;
javax.lang.model.element.Name v20;
java.io.PrintWriter v23, v26, v4;
java.util.Iterator v6;
javax.lang.model.element.Element v19;
java.util.List v0;
java.lang.Object v14, v8;
v0 := @parameter0: java.util.List;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.util.function.Function;
v3 := @parameter3: java.lang.String;
v4 := @parameter4: java.io.PrintWriter;
v5 = 1;
v6 = interfaceinvoke v0.<java.util.List: java.util.Iterator iterator()>();
label01:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label10;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
if v5 == 0 goto label02;
virtualinvoke v4.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(v1);
v5 = 0;
label02:
v9 = virtualinvoke v8.<io.vertx.codegen.doc.Token: boolean isLineBreak()>();
if v9 == 0 goto label03;
virtualinvoke v4.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(v3);
v5 = 1;
goto label01;
label03:
v10 = virtualinvoke v8.<io.vertx.codegen.doc.Token: boolean isText()>();
if v10 == 0 goto label04;
v11 = virtualinvoke v8.<io.vertx.codegen.doc.Token: java.lang.String getValue()>();
virtualinvoke v4.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(v11);
goto label01;
label04:
v12 = virtualinvoke v27.<io.vertx.codegen.doc.Token$InlineTag: io.vertx.codegen.doc.Tag getTag()>();
v13 = v12 instanceof io.vertx.codegen.doc.Tag$Link;
if v13 == 0 goto label09;
v14 = interfaceinvoke v2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v12);
if v14 == null goto label05;
v15 = virtualinvoke v14.<java.lang.String: java.lang.String trim()>();
v16 = virtualinvoke v15.<java.lang.String: boolean isEmpty()>();
if v16 == 0 goto label06;
label05:
v14 = virtualinvoke v12.<io.vertx.codegen.doc.Tag$Link: java.lang.String getLabel()>();
label06:
if v14 == null goto label07;
v17 = virtualinvoke v14.<java.lang.String: java.lang.String trim()>();
v18 = virtualinvoke v17.<java.lang.String: boolean isEmpty()>();
if v18 == 0 goto label08;
label07:
v19 = v12.<io.vertx.codegen.doc.Tag$Link: javax.lang.model.element.Element targetElement>;
v20 = interfaceinvoke v19.<javax.lang.model.element.Element: javax.lang.model.element.Name getSimpleName()>();
v14 = virtualinvoke v20.<java.lang.Object: java.lang.String toString()>();
label08:
virtualinvoke v4.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(v14);
goto label01;
label09:
v21 = virtualinvoke v12.<io.vertx.codegen.doc.Tag: java.lang.String getName()>();
v22 = virtualinvoke v21.<java.lang.String: boolean equals(java.lang.Object)>("code");
if v22 == 0 goto label01;
v23 = virtualinvoke v4.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("<code>");
v24 = v12.<io.vertx.codegen.doc.Tag: java.lang.String value>;
v25 = virtualinvoke v24.<java.lang.String: java.lang.String trim()>();
v26 = virtualinvoke v23.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(v25);
virtualinvoke v26.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("</code>");
goto label01;
label10:
if v5 != 0 goto label11;
virtualinvoke v4.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(v3);
label11:
return;
}
static void <clinit>()
{
java.lang.String v3, v4;
java.util.regex.Pattern v0, v1, v2, v5;
v0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\{@\\p{Alpha}[^\\}]*\\})|(\\r?\\n)");
<io.vertx.codegen.doc.Token: java.util.regex.Pattern TOKEN_SPLITTER> = v0;
v1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\{@([^\\p{javaWhitespace}]+)((?:.|\\n)*)\\}");
<io.vertx.codegen.doc.Token: java.util.regex.Pattern INLINE_TAG_PATTERN> = v1;
v2 = <io.vertx.codegen.Helper: java.util.regex.Pattern LINK_REFERENCE_PATTERN>;
v3 = virtualinvoke v2.<java.util.regex.Pattern: java.lang.String pattern()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("^\\s*(\u0001)");
v5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(v4);
<io.vertx.codegen.doc.Token: java.util.regex.Pattern LINK_REFERENCE_PATTERN> = v5;
return;
}
}