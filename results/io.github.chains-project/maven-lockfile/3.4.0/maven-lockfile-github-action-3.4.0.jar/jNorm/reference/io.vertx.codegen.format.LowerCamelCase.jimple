public class io.vertx.codegen.format.LowerCamelCase extends io.vertx.codegen.format.Case
{
public static final io.vertx.codegen.format.Case INSTANCE;
public void <init>()
{
io.vertx.codegen.format.LowerCamelCase v0;
v0 := @this: io.vertx.codegen.format.LowerCamelCase;
specialinvoke v0.<io.vertx.codegen.format.Case: void <init>()>();
return;
}
public java.lang.String name()
{
io.vertx.codegen.format.LowerCamelCase v0;
v0 := @this: io.vertx.codegen.format.LowerCamelCase;
return "LOWER_CAMEL";
}
public java.lang.String format(java.lang.Iterable)
{
java.lang.Iterable v1;
int v10, v14, v6;
java.lang.String v15, v7;
boolean v12, v4, v8;
java.util.Iterator v3;
char v11, v13;
io.vertx.codegen.format.LowerCamelCase v0;
java.lang.Object v5, v9;
java.lang.StringBuilder v2;
v0 := @this: io.vertx.codegen.format.LowerCamelCase;
v1 := @parameter0: java.lang.Iterable;
v2 = new java.lang.StringBuilder;
specialinvoke v2.<java.lang.StringBuilder: void <init>()>();
v3 = interfaceinvoke v1.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = virtualinvoke v5.<java.lang.String: int length()>();
if v6 <= 0 goto label1;
v7 = virtualinvoke v5.<java.lang.String: java.lang.String toLowerCase()>();
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v7);
label2:
v8 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label4;
v9 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v10 = virtualinvoke v9.<java.lang.String: int length()>();
if v10 <= 0 goto label2;
v11 = virtualinvoke v9.<java.lang.String: char charAt(int)>(0);
v12 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(v11);
if v12 == 0 goto label3;
v13 = staticinvoke <java.lang.Character: char toUpperCase(char)>(v11);
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v13);
v14 = virtualinvoke v9.<java.lang.String: int length()>();
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v9, 1, v14);
goto label2;
label3:
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v9);
goto label2;
label4:
v15 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.String toString()>();
return v15;
}
public java.util.List parse(java.lang.String)
{
io.vertx.codegen.format.LowerCamelCase v0;
java.util.List v3;
io.vertx.codegen.format.Case v2;
java.lang.String v1;
v0 := @this: io.vertx.codegen.format.LowerCamelCase;
v1 := @parameter0: java.lang.String;
v2 = <io.vertx.codegen.format.CamelCase: io.vertx.codegen.format.Case INSTANCE>;
v3 = virtualinvoke v2.<io.vertx.codegen.format.Case: java.util.List parse(java.lang.String)>(v1);
return v3;
}
static void <clinit>()
{
io.vertx.codegen.format.LowerCamelCase v0;
v0 = new io.vertx.codegen.format.LowerCamelCase;
specialinvoke v0.<io.vertx.codegen.format.LowerCamelCase: void <init>()>();
<io.vertx.codegen.format.LowerCamelCase: io.vertx.codegen.format.Case INSTANCE> = v0;
return;
}
}