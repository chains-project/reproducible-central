public class io.vertx.codegen.format.QualifiedCase extends io.vertx.codegen.format.Case
{
private static final java.util.regex.Pattern VALIDATOR;
public static final io.vertx.codegen.format.Case INSTANCE;
private final java.util.regex.Pattern validator;
public void <init>(java.util.regex.Pattern)
{
io.vertx.codegen.format.QualifiedCase v0;
java.util.regex.Pattern v1;
v0 := @this: io.vertx.codegen.format.QualifiedCase;
v1 := @parameter0: java.util.regex.Pattern;
specialinvoke v0.<io.vertx.codegen.format.Case: void <init>()>();
v0.<io.vertx.codegen.format.QualifiedCase: java.util.regex.Pattern validator> = v1;
return;
}
public java.lang.String name()
{
io.vertx.codegen.format.QualifiedCase v0;
v0 := @this: io.vertx.codegen.format.QualifiedCase;
return "QUALIFIED";
}
public java.lang.String format(java.lang.Iterable)
{
java.util.Iterator v3;
java.lang.Iterable v1;
int v6, v7;
io.vertx.codegen.format.QualifiedCase v0;
java.lang.Object v5;
java.lang.StringBuilder v2;
java.lang.String v8;
boolean v4;
v0 := @this: io.vertx.codegen.format.QualifiedCase;
v1 := @parameter0: java.lang.Iterable;
v2 = new java.lang.StringBuilder;
specialinvoke v2.<java.lang.StringBuilder: void <init>()>();
v3 = interfaceinvoke v1.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label3;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = virtualinvoke v5.<java.lang.String: int length()>();
if v6 <= 0 goto label1;
v7 = virtualinvoke v2.<java.lang.StringBuilder: int length()>();
if v7 <= 0 goto label2;
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);
label2:
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v5);
goto label1;
label3:
v8 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.String toString()>();
return v8;
}
public java.util.List parse(java.lang.String)
{
java.lang.IllegalArgumentException v5;
java.util.List v7;
java.util.regex.Matcher v3;
io.vertx.codegen.format.QualifiedCase v0;
java.lang.String v1, v6;
java.util.regex.Pattern v2;
boolean v4;
v0 := @this: io.vertx.codegen.format.QualifiedCase;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.codegen.format.QualifiedCase: java.util.regex.Pattern validator>;
v3 = virtualinvoke v2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v1);
v4 = virtualinvoke v3.<java.util.regex.Matcher: boolean matches()>();
if v4 != 0 goto label1;
v5 = new java.lang.IllegalArgumentException;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid qualified case:\u0001");
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v5;
label1:
v7 = staticinvoke <io.vertx.codegen.format.QualifiedCase: java.util.List split(java.lang.String,java.lang.String)>(v1, "\\.");
return v7;
}
static void <clinit>()
{
io.vertx.codegen.format.QualifiedCase v1;
java.util.regex.Pattern v0, v2;
v0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?:\\p{Alnum}|(?:(?<=\\p{Alnum})\\.(?=\\p{Alnum})))*");
<io.vertx.codegen.format.QualifiedCase: java.util.regex.Pattern VALIDATOR> = v0;
v1 = new io.vertx.codegen.format.QualifiedCase;
v2 = <io.vertx.codegen.format.QualifiedCase: java.util.regex.Pattern VALIDATOR>;
specialinvoke v1.<io.vertx.codegen.format.QualifiedCase: void <init>(java.util.regex.Pattern)>(v2);
<io.vertx.codegen.format.QualifiedCase: io.vertx.codegen.format.Case INSTANCE> = v1;
return;
}
}